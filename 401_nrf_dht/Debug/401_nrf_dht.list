
401_nrf_dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003164  08003164  00013164  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000009a0  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000a10  20000a10  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012543  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000025a4  00000000  00000000  000325e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000868f  00000000  00000000  00034b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0003d218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  0003de40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005964  00000000  00000000  0003edb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004952  00000000  00000000  0004471c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004906e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002970  00000000  00000000  000490ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800314c 	.word	0x0800314c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800314c 	.word	0x0800314c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f896 	bl	80006e8 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 ffd0 	bl	80025b4 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000a0 	.word	0x200000a0
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200000a0 	.word	0x200000a0

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006cc:	2800      	cmp	r0, #0
 80006ce:	db08      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	0942      	lsrs	r2, r0, #5
 80006d2:	2301      	movs	r3, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	fa03 f000 	lsl.w	r0, r3, r0
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_NVIC_EnableIRQ+0x18>)
 80006de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000718:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80008ac <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000720:	4a60      	ldr	r2, [pc, #384]	; (80008a4 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000724:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000728:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072a:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800072c:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000730:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000732:	42ac      	cmp	r4, r5
 8000734:	f040 80a6 	bne.w	8000884 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	684c      	ldr	r4, [r1, #4]
 800073a:	f024 0c10 	bic.w	ip, r4, #16
 800073e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000742:	2e01      	cmp	r6, #1
 8000744:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000748:	d812      	bhi.n	8000770 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800074a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800074c:	2603      	movs	r6, #3
 800074e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000752:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000756:	68ce      	ldr	r6, [r1, #12]
 8000758:	fa06 f60e 	lsl.w	r6, r6, lr
 800075c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800075e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000760:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000762:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000766:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800076a:	409e      	lsls	r6, r3
 800076c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800076e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000770:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000772:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000774:	fa06 f60e 	lsl.w	r6, r6, lr
 8000778:	43f6      	mvns	r6, r6
 800077a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800077e:	688f      	ldr	r7, [r1, #8]
 8000780:	fa07 f70e 	lsl.w	r7, r7, lr
 8000784:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000788:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800078c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078e:	d116      	bne.n	80007be <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000790:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000794:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000798:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800079c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a4:	f04f 0c0f 	mov.w	ip, #15
 80007a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007b0:	690f      	ldr	r7, [r1, #16]
 80007b2:	fa07 f70b 	lsl.w	r7, r7, fp
 80007b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007ba:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c2:	f004 0703 	and.w	r7, r4, #3
 80007c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007ca:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007d0:	00e6      	lsls	r6, r4, #3
 80007d2:	d557      	bpl.n	8000884 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d4:	f04f 0b00 	mov.w	fp, #0
 80007d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80007dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e0:	4e31      	ldr	r6, [pc, #196]	; (80008a8 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007f2:	9703      	str	r7, [sp, #12]
 80007f4:	9f03      	ldr	r7, [sp, #12]
 80007f6:	f023 0703 	bic.w	r7, r3, #3
 80007fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000802:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000806:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800080a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800080e:	f04f 0e0f 	mov.w	lr, #15
 8000812:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000816:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000818:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081c:	d039      	beq.n	8000892 <HAL_GPIO_Init+0x17e>
 800081e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000822:	42b0      	cmp	r0, r6
 8000824:	d037      	beq.n	8000896 <HAL_GPIO_Init+0x182>
 8000826:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800082a:	42b0      	cmp	r0, r6
 800082c:	d035      	beq.n	800089a <HAL_GPIO_Init+0x186>
 800082e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000832:	42b0      	cmp	r0, r6
 8000834:	d033      	beq.n	800089e <HAL_GPIO_Init+0x18a>
 8000836:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800083a:	42b0      	cmp	r0, r6
 800083c:	bf14      	ite	ne
 800083e:	2607      	movne	r6, #7
 8000840:	2604      	moveq	r6, #4
 8000842:	fa06 f60c 	lsl.w	r6, r6, ip
 8000846:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800084a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800084c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800084e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000850:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000854:	bf0c      	ite	eq
 8000856:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000858:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800085a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800085c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800085e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf0c      	ite	eq
 8000864:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000866:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000868:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800086a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800086c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000874:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000876:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000878:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800087a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800087c:	bf54      	ite	pl
 800087e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000880:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000882:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000884:	3301      	adds	r3, #1
 8000886:	2b10      	cmp	r3, #16
 8000888:	f47f af4f 	bne.w	800072a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800088c:	b005      	add	sp, #20
 800088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000892:	465e      	mov	r6, fp
 8000894:	e7d5      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 8000896:	2601      	movs	r6, #1
 8000898:	e7d3      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 800089a:	2602      	movs	r6, #2
 800089c:	e7d1      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 800089e:	2603      	movs	r6, #3
 80008a0:	e7cf      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 80008a2:	bf00      	nop
 80008a4:	40013c00 	.word	0x40013c00
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008b0:	b10a      	cbz	r2, 80008b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008b2:	6181      	str	r1, [r0, #24]
 80008b4:	4770      	bx	lr
 80008b6:	0409      	lsls	r1, r1, #16
 80008b8:	e7fb      	b.n	80008b2 <HAL_GPIO_WritePin+0x2>
	...

080008bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008bc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008c0:	6959      	ldr	r1, [r3, #20]
 80008c2:	4201      	tst	r1, r0
 80008c4:	d002      	beq.n	80008cc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008c8:	f000 ffa8 	bl	800181c <HAL_GPIO_EXTI_Callback>
 80008cc:	bd08      	pop	{r3, pc}
 80008ce:	bf00      	nop
 80008d0:	40013c00 	.word	0x40013c00

080008d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d8:	4604      	mov	r4, r0
 80008da:	b908      	cbnz	r0, 80008e0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	e03f      	b.n	8000960 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e0:	6803      	ldr	r3, [r0, #0]
 80008e2:	07dd      	lsls	r5, r3, #31
 80008e4:	d410      	bmi.n	8000908 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	0798      	lsls	r0, r3, #30
 80008ea:	d45a      	bmi.n	80009a2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	071a      	lsls	r2, r3, #28
 80008f0:	f100 809c 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	075b      	lsls	r3, r3, #29
 80008f8:	f100 80ba 	bmi.w	8000a70 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008fc:	69a0      	ldr	r0, [r4, #24]
 80008fe:	2800      	cmp	r0, #0
 8000900:	f040 811b 	bne.w	8000b3a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000904:	2000      	movs	r0, #0
 8000906:	e02b      	b.n	8000960 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000908:	4ba4      	ldr	r3, [pc, #656]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	f002 020c 	and.w	r2, r2, #12
 8000910:	2a04      	cmp	r2, #4
 8000912:	d007      	beq.n	8000924 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800091a:	2a08      	cmp	r2, #8
 800091c:	d10a      	bne.n	8000934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	0259      	lsls	r1, r3, #9
 8000922:	d507      	bpl.n	8000934 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000924:	4b9d      	ldr	r3, [pc, #628]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	039a      	lsls	r2, r3, #14
 800092a:	d5dc      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1d9      	bne.n	80008e6 <HAL_RCC_OscConfig+0x12>
 8000932:	e7d3      	b.n	80008dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	4d99      	ldr	r5, [pc, #612]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800093c:	d113      	bne.n	8000966 <HAL_RCC_OscConfig+0x92>
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000944:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000946:	f7ff fe75 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094a:	4d94      	ldr	r5, [pc, #592]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800094c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	039b      	lsls	r3, r3, #14
 8000952:	d4c8      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000954:	f7ff fe6e 	bl	8000634 <HAL_GetTick>
 8000958:	1b80      	subs	r0, r0, r6
 800095a:	2864      	cmp	r0, #100	; 0x64
 800095c:	d9f7      	bls.n	800094e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
}
 8000960:	b002      	add	sp, #8
 8000962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096a:	d104      	bne.n	8000976 <HAL_RCC_OscConfig+0xa2>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	e7e3      	b.n	800093e <HAL_RCC_OscConfig+0x6a>
 8000976:	682a      	ldr	r2, [r5, #0]
 8000978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	682a      	ldr	r2, [r5, #0]
 8000980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000984:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1dd      	bne.n	8000946 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800098a:	f7ff fe53 	bl	8000634 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	039f      	lsls	r7, r3, #14
 8000994:	d5a7      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fe4d 	bl	8000634 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0xbc>
 80009a0:	e7dd      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a2:	4b7e      	ldr	r3, [pc, #504]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f012 0f0c 	tst.w	r2, #12
 80009aa:	d007      	beq.n	80009bc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b2:	2a08      	cmp	r2, #8
 80009b4:	d111      	bne.n	80009da <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	025e      	lsls	r6, r3, #9
 80009ba:	d40e      	bmi.n	80009da <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009bc:	4b77      	ldr	r3, [pc, #476]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	0795      	lsls	r5, r2, #30
 80009c2:	d502      	bpl.n	80009ca <HAL_RCC_OscConfig+0xf6>
 80009c4:	68e2      	ldr	r2, [r4, #12]
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	d188      	bne.n	80008dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	6921      	ldr	r1, [r4, #16]
 80009ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	e788      	b.n	80008ec <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009da:	68e2      	ldr	r2, [r4, #12]
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <HAL_RCC_OscConfig+0x2cc>)
 80009de:	b1b2      	cbz	r2, 8000a0e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e4:	f7ff fe26 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e8:	4d6c      	ldr	r5, [pc, #432]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	682b      	ldr	r3, [r5, #0]
 80009ee:	0798      	lsls	r0, r3, #30
 80009f0:	d507      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	6922      	ldr	r2, [r4, #16]
 80009f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009fe:	602b      	str	r3, [r5, #0]
 8000a00:	e774      	b.n	80008ec <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a02:	f7ff fe17 	bl	8000634 <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9ef      	bls.n	80009ec <HAL_RCC_OscConfig+0x118>
 8000a0c:	e7a7      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a10:	f7ff fe10 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a14:	4d61      	ldr	r5, [pc, #388]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	f57f af66 	bpl.w	80008ec <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fe08 	bl	8000634 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x144>
 8000a2a:	e798      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a2c:	6962      	ldr	r2, [r4, #20]
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <HAL_RCC_OscConfig+0x2d0>)
 8000a30:	b17a      	cbz	r2, 8000a52 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a36:	f7ff fdfd 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3a:	4d58      	ldr	r5, [pc, #352]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a40:	079f      	lsls	r7, r3, #30
 8000a42:	f53f af57 	bmi.w	80008f4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a46:	f7ff fdf5 	bl	8000634 <HAL_GetTick>
 8000a4a:	1b80      	subs	r0, r0, r6
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d9f6      	bls.n	8000a3e <HAL_RCC_OscConfig+0x16a>
 8000a50:	e785      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fdee 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	4d50      	ldr	r5, [pc, #320]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f57f af48 	bpl.w	80008f4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fde6 	bl	8000634 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x188>
 8000a6e:	e776      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a74:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a78:	d128      	bne.n	8000acc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a8e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	4d45      	ldr	r5, [pc, #276]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000a92:	682b      	ldr	r3, [r5, #0]
 8000a94:	05d9      	lsls	r1, r3, #23
 8000a96:	d51b      	bpl.n	8000ad0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	4d40      	ldr	r5, [pc, #256]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d127      	bne.n	8000af0 <HAL_RCC_OscConfig+0x21c>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fdc4 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aac:	4d3b      	ldr	r5, [pc, #236]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000aae:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab6:	079b      	lsls	r3, r3, #30
 8000ab8:	d539      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f43f af1e 	beq.w	80008fc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac0:	4a36      	ldr	r2, [pc, #216]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000ac2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	e717      	b.n	80008fc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000acc:	2600      	movs	r6, #0
 8000ace:	e7df      	b.n	8000a90 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fdac 	bl	8000634 <HAL_GetTick>
 8000adc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	05da      	lsls	r2, r3, #23
 8000ae2:	d4d9      	bmi.n	8000a98 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae4:	f7ff fda6 	bl	8000634 <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9f7      	bls.n	8000ade <HAL_RCC_OscConfig+0x20a>
 8000aee:	e736      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d104      	bne.n	8000afe <HAL_RCC_OscConfig+0x22a>
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	672b      	str	r3, [r5, #112]	; 0x70
 8000afc:	e7d0      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1cc>
 8000afe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	672a      	str	r2, [r5, #112]	; 0x70
 8000b06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b08:	f022 0204 	bic.w	r2, r2, #4
 8000b0c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ca      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b12:	f7ff fd8f 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d5cb      	bpl.n	8000aba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd87 	bl	8000634 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f7      	bls.n	8000b1c <HAL_RCC_OscConfig+0x248>
 8000b2c:	e717      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fd81 	bl	8000634 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	4540      	cmp	r0, r8
 8000b36:	d9bd      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x1e0>
 8000b38:	e711      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3a:	4d18      	ldr	r5, [pc, #96]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000b3c:	68ab      	ldr	r3, [r5, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d047      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x302>
 8000b46:	4e19      	ldr	r6, [pc, #100]	; (8000bac <HAL_RCC_OscConfig+0x2d8>)
 8000b48:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b4c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4e:	d135      	bne.n	8000bbc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b50:	f7ff fd70 	bl	8000634 <HAL_GetTick>
 8000b54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	0199      	lsls	r1, r3, #6
 8000b5a:	d429      	bmi.n	8000bb0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b5c:	6a22      	ldr	r2, [r4, #32]
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b72:	0852      	lsrs	r2, r2, #1
 8000b74:	3a01      	subs	r2, #1
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b80:	f7ff fd58 	bl	8000634 <HAL_GetTick>
 8000b84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	019a      	lsls	r2, r3, #6
 8000b8a:	f53f aebb 	bmi.w	8000904 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fd51 	bl	8000634 <HAL_GetTick>
 8000b92:	1b40      	subs	r0, r0, r5
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x2b2>
 8000b98:	e6e1      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	42470000 	.word	0x42470000
 8000ba4:	42470e80 	.word	0x42470e80
 8000ba8:	40007000 	.word	0x40007000
 8000bac:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb0:	f7ff fd40 	bl	8000634 <HAL_GetTick>
 8000bb4:	1bc0      	subs	r0, r0, r7
 8000bb6:	2802      	cmp	r0, #2
 8000bb8:	d9cd      	bls.n	8000b56 <HAL_RCC_OscConfig+0x282>
 8000bba:	e6d0      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fd3a 	bl	8000634 <HAL_GetTick>
 8000bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	f57f ae9d 	bpl.w	8000904 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fd33 	bl	8000634 <HAL_GetTick>
 8000bce:	1b00      	subs	r0, r0, r4
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2ee>
 8000bd4:	e6c3      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bd6:	2801      	cmp	r0, #1
 8000bd8:	f43f aec2 	beq.w	8000960 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000bdc:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bde:	69e3      	ldr	r3, [r4, #28]
 8000be0:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f47f ae79 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
 8000bea:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bec:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	f47f ae73 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bfc:	4003      	ands	r3, r0
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f47f ae6c 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c06:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f47f ae66 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c12:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c16:	1ac0      	subs	r0, r0, r3
 8000c18:	bf18      	it	ne
 8000c1a:	2001      	movne	r0, #1
 8000c1c:	e6a0      	b.n	8000960 <HAL_RCC_OscConfig+0x8c>
 8000c1e:	bf00      	nop

08000c20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c20:	4913      	ldr	r1, [pc, #76]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c24:	688b      	ldr	r3, [r1, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d003      	beq.n	8000c36 <HAL_RCC_GetSysClockFreq+0x16>
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d003      	beq.n	8000c3a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c44:	bf14      	ite	ne
 8000c46:	480c      	ldrne	r0, [pc, #48]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c48:	480a      	ldreq	r0, [pc, #40]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c4e:	bf18      	it	ne
 8000c50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c56:	fba1 0100 	umull	r0, r1, r1, r0
 8000c5a:	f7ff fb19 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c66:	3301      	adds	r3, #1
 8000c68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c6e:	bd08      	pop	{r3, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	00f42400 	.word	0x00f42400
 8000c78:	007a1200 	.word	0x007a1200

08000c7c <HAL_RCC_ClockConfig>:
{
 8000c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c82:	4604      	mov	r4, r0
 8000c84:	b910      	cbnz	r0, 8000c8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
 8000c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c8c:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <HAL_RCC_ClockConfig+0x124>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	f002 020f 	and.w	r2, r2, #15
 8000c94:	428a      	cmp	r2, r1
 8000c96:	d329      	bcc.n	8000cec <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c98:	6821      	ldr	r1, [r4, #0]
 8000c9a:	078f      	lsls	r7, r1, #30
 8000c9c:	d42e      	bmi.n	8000cfc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c9e:	07c8      	lsls	r0, r1, #31
 8000ca0:	d441      	bmi.n	8000d26 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ca2:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <HAL_RCC_ClockConfig+0x124>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f002 020f 	and.w	r2, r2, #15
 8000caa:	4295      	cmp	r5, r2
 8000cac:	d367      	bcc.n	8000d7e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cae:	6822      	ldr	r2, [r4, #0]
 8000cb0:	0751      	lsls	r1, r2, #29
 8000cb2:	d46d      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb4:	0713      	lsls	r3, r2, #28
 8000cb6:	d507      	bpl.n	8000cc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cb8:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000cba:	6921      	ldr	r1, [r4, #16]
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc8:	f7ff ffaa 	bl	8000c20 <HAL_RCC_GetSysClockFreq>
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000cce:	4a36      	ldr	r2, [pc, #216]	; (8000da8 <HAL_RCC_ClockConfig+0x12c>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	40d8      	lsrs	r0, r3
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_RCC_ClockConfig+0x130>)
 8000cdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_RCC_ClockConfig+0x134>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f7ff fc5d 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d1c5      	bne.n	8000c86 <HAL_RCC_ClockConfig+0xa>
 8000cfa:	e7cd      	b.n	8000c98 <HAL_RCC_ClockConfig+0x1c>
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cfe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d02:	bf1e      	ittt	ne
 8000d04:	689a      	ldrne	r2, [r3, #8]
 8000d06:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d0a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d0c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d0e:	bf42      	ittt	mi
 8000d10:	689a      	ldrmi	r2, [r3, #8]
 8000d12:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d16:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	68a0      	ldr	r0, [r4, #8]
 8000d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d20:	4302      	orrs	r2, r0
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	e7bb      	b.n	8000c9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	6862      	ldr	r2, [r4, #4]
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d11d      	bne.n	8000d6a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	d0a7      	beq.n	8000c86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d36:	4e1b      	ldr	r6, [pc, #108]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000d38:	68b3      	ldr	r3, [r6, #8]
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d42:	f7ff fc77 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d46:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4c:	68b3      	ldr	r3, [r6, #8]
 8000d4e:	6862      	ldr	r2, [r4, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d58:	d0a3      	beq.n	8000ca2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5a:	f7ff fc6b 	bl	8000634 <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	4540      	cmp	r0, r8
 8000d62:	d9f3      	bls.n	8000d4c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d64:	2003      	movs	r0, #3
}
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d6a:	1e91      	subs	r1, r2, #2
 8000d6c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d70:	d802      	bhi.n	8000d78 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d76:	e7dd      	b.n	8000d34 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	f013 0f02 	tst.w	r3, #2
 8000d7c:	e7da      	b.n	8000d34 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7e:	b2ea      	uxtb	r2, r5
 8000d80:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	429d      	cmp	r5, r3
 8000d8a:	f47f af7c 	bne.w	8000c86 <HAL_RCC_ClockConfig+0xa>
 8000d8e:	e78e      	b.n	8000cae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d90:	4904      	ldr	r1, [pc, #16]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000d92:	68e0      	ldr	r0, [r4, #12]
 8000d94:	688b      	ldr	r3, [r1, #8]
 8000d96:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	608b      	str	r3, [r1, #8]
 8000d9e:	e789      	b.n	8000cb4 <HAL_RCC_ClockConfig+0x38>
 8000da0:	40023c00 	.word	0x40023c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	080031a8 	.word	0x080031a8
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dc2:	6810      	ldr	r0, [r2, #0]
}
 8000dc4:	40d8      	lsrs	r0, r3
 8000dc6:	4770      	bx	lr
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	080031b8 	.word	0x080031b8
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000de2:	6810      	ldr	r0, [r2, #0]
}
 8000de4:	40d8      	lsrs	r0, r3
 8000de6:	4770      	bx	lr
 8000de8:	40023800 	.word	0x40023800
 8000dec:	080031b8 	.word	0x080031b8
 8000df0:	20000008 	.word	0x20000008

08000df4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	4604      	mov	r4, r0
 8000df8:	460e      	mov	r6, r1
 8000dfa:	4615      	mov	r5, r2
 8000dfc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000dfe:	6821      	ldr	r1, [r4, #0]
 8000e00:	688a      	ldr	r2, [r1, #8]
 8000e02:	ea36 0302 	bics.w	r3, r6, r2
 8000e06:	d001      	beq.n	8000e0c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e08:	2000      	movs	r0, #0
}
 8000e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e0c:	1c6b      	adds	r3, r5, #1
 8000e0e:	d0f7      	beq.n	8000e00 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e10:	f7ff fc10 	bl	8000634 <HAL_GetTick>
 8000e14:	1bc0      	subs	r0, r0, r7
 8000e16:	4285      	cmp	r5, r0
 8000e18:	d8f1      	bhi.n	8000dfe <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e22:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e24:	6862      	ldr	r2, [r4, #4]
 8000e26:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e2a:	d10a      	bne.n	8000e42 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000e2c:	68a2      	ldr	r2, [r4, #8]
 8000e2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e32:	d002      	beq.n	8000e3a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e38:	d103      	bne.n	8000e42 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e40:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e44:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e48:	d107      	bne.n	8000e5a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e58:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e60:	2300      	movs	r3, #0
 8000e62:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e66:	2003      	movs	r0, #3
 8000e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e6e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <SPI_EndRxTxTransaction+0x54>)
 8000e72:	4e14      	ldr	r6, [pc, #80]	; (8000ec4 <SPI_EndRxTxTransaction+0x58>)
 8000e74:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e76:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e78:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e7c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e80:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e82:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e86:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e88:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e8a:	d10d      	bne.n	8000ea8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	f7ff ffb0 	bl	8000df4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e94:	b910      	cbnz	r0, 8000e9c <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
}
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e7f7      	b.n	8000e98 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000ea8:	9b01      	ldr	r3, [sp, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f3      	beq.n	8000e96 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000eae:	9b01      	ldr	r3, [sp, #4]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	061b      	lsls	r3, r3, #24
 8000eba:	d4f5      	bmi.n	8000ea8 <SPI_EndRxTxTransaction+0x3c>
 8000ebc:	e7eb      	b.n	8000e96 <SPI_EndRxTxTransaction+0x2a>
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	016e3600 	.word	0x016e3600

08000ec8 <HAL_SPI_Init>:
{
 8000ec8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000eca:	4604      	mov	r4, r0
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d036      	beq.n	8000f3e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ed4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ed8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000edc:	b91b      	cbnz	r3, 8000ee6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000ede:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000ee2:	f001 fb87 	bl	80025f4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000ee6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ee8:	68a0      	ldr	r0, [r4, #8]
 8000eea:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ef2:	680b      	ldr	r3, [r1, #0]
 8000ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ef8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	4303      	orrs	r3, r0
 8000efe:	68e0      	ldr	r0, [r4, #12]
 8000f00:	4303      	orrs	r3, r0
 8000f02:	6920      	ldr	r0, [r4, #16]
 8000f04:	4303      	orrs	r3, r0
 8000f06:	6960      	ldr	r0, [r4, #20]
 8000f08:	4303      	orrs	r3, r0
 8000f0a:	69e0      	ldr	r0, [r4, #28]
 8000f0c:	4303      	orrs	r3, r0
 8000f0e:	6a20      	ldr	r0, [r4, #32]
 8000f10:	4303      	orrs	r3, r0
 8000f12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f14:	4303      	orrs	r3, r0
 8000f16:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f1e:	0c12      	lsrs	r2, r2, #16
 8000f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f22:	f002 0204 	and.w	r2, r2, #4
 8000f26:	431a      	orrs	r2, r3
 8000f28:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f2a:	69cb      	ldr	r3, [r1, #28]
 8000f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f30:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f32:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f34:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f36:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f3c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f3e:	2001      	movs	r0, #1
}
 8000f40:	bd10      	pop	{r4, pc}

08000f42 <HAL_SPI_TransmitReceive>:
{
 8000f42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f46:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f48:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000f4e:	2b01      	cmp	r3, #1
{
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
 8000f54:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000f56:	f000 80e2 	beq.w	800111e <HAL_SPI_TransmitReceive+0x1dc>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f60:	f7ff fb68 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f64:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f68:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f6a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f6c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f6e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f70:	d00a      	beq.n	8000f88 <HAL_SPI_TransmitReceive+0x46>
 8000f72:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f76:	f040 80d0 	bne.w	800111a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f7a:	68a0      	ldr	r0, [r4, #8]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	f040 80cc 	bne.w	800111a <HAL_SPI_TransmitReceive+0x1d8>
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	f040 80c9 	bne.w	800111a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f88:	2d00      	cmp	r5, #0
 8000f8a:	f000 80c4 	beq.w	8001116 <HAL_SPI_TransmitReceive+0x1d4>
 8000f8e:	f1b9 0f00 	cmp.w	r9, #0
 8000f92:	f000 80c0 	beq.w	8001116 <HAL_SPI_TransmitReceive+0x1d4>
 8000f96:	2e00      	cmp	r6, #0
 8000f98:	f000 80bd 	beq.w	8001116 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f9c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000fa0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fa4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fa6:	bf1c      	itt	ne
 8000fa8:	2305      	movne	r3, #5
 8000faa:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000fb2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000fb4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fb6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000fb8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000fba:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fbc:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000fbe:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fc0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000fc2:	bf58      	it	pl
 8000fc4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fc6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000fc8:	bf58      	it	pl
 8000fca:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000fce:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000fd0:	bf58      	it	pl
 8000fd2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fd4:	68e2      	ldr	r2, [r4, #12]
 8000fd6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fda:	d158      	bne.n	800108e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000fdc:	b109      	cbz	r1, 8000fe2 <HAL_SPI_TransmitReceive+0xa0>
 8000fde:	2e01      	cmp	r6, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fe2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fe6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fe8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fea:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000ff2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ff4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b9ab      	cbnz	r3, 8001026 <HAL_SPI_TransmitReceive+0xe4>
 8000ffa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b993      	cbnz	r3, 8001026 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001000:	4642      	mov	r2, r8
 8001002:	4639      	mov	r1, r7
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff ff31 	bl	8000e6c <SPI_EndRxTxTransaction>
 800100a:	2800      	cmp	r0, #0
 800100c:	f040 8081 	bne.w	8001112 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001010:	68a3      	ldr	r3, [r4, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d132      	bne.n	800107c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	9001      	str	r0, [sp, #4]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	9201      	str	r2, [sp, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	e02a      	b.n	800107c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	0799      	lsls	r1, r3, #30
 800102c:	d50d      	bpl.n	800104a <HAL_SPI_TransmitReceive+0x108>
 800102e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001030:	b29b      	uxth	r3, r3
 8001032:	b153      	cbz	r3, 800104a <HAL_SPI_TransmitReceive+0x108>
 8001034:	b14d      	cbz	r5, 800104a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001038:	f833 1b02 	ldrh.w	r1, [r3], #2
 800103c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800103e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001040:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001042:	3b01      	subs	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001048:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800104a:	6893      	ldr	r3, [r2, #8]
 800104c:	07db      	lsls	r3, r3, #31
 800104e:	d50c      	bpl.n	800106a <HAL_SPI_TransmitReceive+0x128>
 8001050:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001052:	b29b      	uxth	r3, r3
 8001054:	b14b      	cbz	r3, 800106a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001058:	68d2      	ldr	r2, [r2, #12]
 800105a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800105e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001062:	3b01      	subs	r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001068:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800106a:	f7ff fae3 	bl	8000634 <HAL_GetTick>
 800106e:	eba0 0008 	sub.w	r0, r0, r8
 8001072:	4287      	cmp	r7, r0
 8001074:	d8be      	bhi.n	8000ff4 <HAL_SPI_TransmitReceive+0xb2>
 8001076:	1c7e      	adds	r6, r7, #1
 8001078:	d0bc      	beq.n	8000ff4 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800107a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800107c:	2301      	movs	r3, #1
 800107e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001082:	2300      	movs	r3, #0
 8001084:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001088:	b003      	add	sp, #12
 800108a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800108e:	b109      	cbz	r1, 8001094 <HAL_SPI_TransmitReceive+0x152>
 8001090:	2e01      	cmp	r6, #1
 8001092:	d108      	bne.n	80010a6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001094:	782a      	ldrb	r2, [r5, #0]
 8001096:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001098:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800109a:	3301      	adds	r3, #1
 800109c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800109e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80010a6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b91b      	cbnz	r3, 80010b6 <HAL_SPI_TransmitReceive+0x174>
 80010ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0a4      	beq.n	8001000 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	6893      	ldr	r3, [r2, #8]
 80010ba:	0798      	lsls	r0, r3, #30
 80010bc:	d50e      	bpl.n	80010dc <HAL_SPI_TransmitReceive+0x19a>
 80010be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b15b      	cbz	r3, 80010dc <HAL_SPI_TransmitReceive+0x19a>
 80010c4:	b155      	cbz	r5, 80010dc <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80010c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80010cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010ce:	3301      	adds	r3, #1
 80010d0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010da:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	6893      	ldr	r3, [r2, #8]
 80010e0:	07d9      	lsls	r1, r3, #31
 80010e2:	d50d      	bpl.n	8001100 <HAL_SPI_TransmitReceive+0x1be>
 80010e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	b153      	cbz	r3, 8001100 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80010ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010ec:	68d2      	ldr	r2, [r2, #12]
 80010ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80010f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010f2:	3301      	adds	r3, #1
 80010f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010fe:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001100:	f7ff fa98 	bl	8000634 <HAL_GetTick>
 8001104:	eba0 0008 	sub.w	r0, r0, r8
 8001108:	4287      	cmp	r7, r0
 800110a:	d8cd      	bhi.n	80010a8 <HAL_SPI_TransmitReceive+0x166>
 800110c:	1c7b      	adds	r3, r7, #1
 800110e:	d0cb      	beq.n	80010a8 <HAL_SPI_TransmitReceive+0x166>
 8001110:	e7b3      	b.n	800107a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001112:	2320      	movs	r3, #32
 8001114:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001116:	2001      	movs	r0, #1
 8001118:	e7b0      	b.n	800107c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800111a:	2002      	movs	r0, #2
 800111c:	e7ae      	b.n	800107c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800111e:	2002      	movs	r0, #2
 8001120:	e7b2      	b.n	8001088 <HAL_SPI_TransmitReceive+0x146>

08001122 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001122:	6803      	ldr	r3, [r0, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001132:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001134:	bf1e      	ittt	ne
 8001136:	681a      	ldrne	r2, [r3, #0]
 8001138:	f042 0201 	orrne.w	r2, r2, #1
 800113c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800113e:	2000      	movs	r0, #0
 8001140:	4770      	bx	lr

08001142 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001142:	6803      	ldr	r3, [r0, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800114c:	6a19      	ldr	r1, [r3, #32]
 800114e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001152:	4211      	tst	r1, r2
 8001154:	d108      	bne.n	8001168 <HAL_TIM_Base_Stop_IT+0x26>
 8001156:	6a19      	ldr	r1, [r3, #32]
 8001158:	f240 4244 	movw	r2, #1092	; 0x444
 800115c:	4211      	tst	r1, r2
 800115e:	bf02      	ittt	eq
 8001160:	681a      	ldreq	r2, [r3, #0]
 8001162:	f022 0201 	biceq.w	r2, r2, #1
 8001166:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001168:	2000      	movs	r0, #0
 800116a:	4770      	bx	lr

0800116c <HAL_TIM_OC_DelayElapsedCallback>:
 800116c:	4770      	bx	lr

0800116e <HAL_TIM_IC_CaptureCallback>:
 800116e:	4770      	bx	lr

08001170 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001170:	4770      	bx	lr

08001172 <HAL_TIM_TriggerCallback>:
 8001172:	4770      	bx	lr

08001174 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001174:	6803      	ldr	r3, [r0, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	0791      	lsls	r1, r2, #30
{
 800117a:	b510      	push	{r4, lr}
 800117c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800117e:	d50e      	bpl.n	800119e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	0792      	lsls	r2, r2, #30
 8001184:	d50b      	bpl.n	800119e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001186:	f06f 0202 	mvn.w	r2, #2
 800118a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800118c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800118e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001190:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001192:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001194:	d077      	beq.n	8001286 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001196:	f7ff ffea 	bl	800116e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800119a:	2300      	movs	r3, #0
 800119c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	0750      	lsls	r0, r2, #29
 80011a4:	d510      	bpl.n	80011c8 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	0751      	lsls	r1, r2, #29
 80011aa:	d50d      	bpl.n	80011c8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011ac:	f06f 0204 	mvn.w	r2, #4
 80011b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011b2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011b4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011b6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011ba:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011be:	d068      	beq.n	8001292 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80011c0:	f7ff ffd5 	bl	800116e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011c4:	2300      	movs	r3, #0
 80011c6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	0712      	lsls	r2, r2, #28
 80011ce:	d50f      	bpl.n	80011f0 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	0710      	lsls	r0, r2, #28
 80011d4:	d50c      	bpl.n	80011f0 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011d6:	f06f 0208 	mvn.w	r2, #8
 80011da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011dc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011de:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e0:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011e2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e6:	d05a      	beq.n	800129e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80011e8:	f7ff ffc1 	bl	800116e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ec:	2300      	movs	r3, #0
 80011ee:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	06d2      	lsls	r2, r2, #27
 80011f6:	d510      	bpl.n	800121a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	06d0      	lsls	r0, r2, #27
 80011fc:	d50d      	bpl.n	800121a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011fe:	f06f 0210 	mvn.w	r2, #16
 8001202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001204:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001206:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001208:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800120c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800120e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001210:	d04b      	beq.n	80012aa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001212:	f7ff ffac 	bl	800116e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001216:	2300      	movs	r3, #0
 8001218:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	07d1      	lsls	r1, r2, #31
 8001220:	d508      	bpl.n	8001234 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	07d2      	lsls	r2, r2, #31
 8001226:	d505      	bpl.n	8001234 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001228:	f06f 0201 	mvn.w	r2, #1
 800122c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800122e:	4620      	mov	r0, r4
 8001230:	f000 fb04 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	0610      	lsls	r0, r2, #24
 800123a:	d508      	bpl.n	800124e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	0611      	lsls	r1, r2, #24
 8001240:	d505      	bpl.n	800124e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001242:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001248:	4620      	mov	r0, r4
 800124a:	f000 f976 	bl	800153a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	0652      	lsls	r2, r2, #25
 8001254:	d508      	bpl.n	8001268 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	0650      	lsls	r0, r2, #25
 800125a:	d505      	bpl.n	8001268 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800125c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff85 	bl	8001172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	0691      	lsls	r1, r2, #26
 800126e:	d522      	bpl.n	80012b6 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	0692      	lsls	r2, r2, #26
 8001274:	d51f      	bpl.n	80012b6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001276:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800127a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800127c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800127e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001282:	f000 b959 	b.w	8001538 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001286:	f7ff ff71 	bl	800116c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff ff70 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
 8001290:	e783      	b.n	800119a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001292:	f7ff ff6b 	bl	800116c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff ff6a 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
 800129c:	e792      	b.n	80011c4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800129e:	f7ff ff65 	bl	800116c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff ff64 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
 80012a8:	e7a0      	b.n	80011ec <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012aa:	f7ff ff5f 	bl	800116c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff ff5e 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
 80012b4:	e7af      	b.n	8001216 <HAL_TIM_IRQHandler+0xa2>
 80012b6:	bd10      	pop	{r4, pc}

080012b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012b8:	4a24      	ldr	r2, [pc, #144]	; (800134c <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80012ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012bc:	4290      	cmp	r0, r2
 80012be:	d00e      	beq.n	80012de <TIM_Base_SetConfig+0x26>
 80012c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012c4:	d00b      	beq.n	80012de <TIM_Base_SetConfig+0x26>
 80012c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012ca:	4290      	cmp	r0, r2
 80012cc:	d007      	beq.n	80012de <TIM_Base_SetConfig+0x26>
 80012ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d2:	4290      	cmp	r0, r2
 80012d4:	d003      	beq.n	80012de <TIM_Base_SetConfig+0x26>
 80012d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012da:	4290      	cmp	r0, r2
 80012dc:	d115      	bne.n	800130a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012e4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <TIM_Base_SetConfig+0x94>)
 80012e8:	4290      	cmp	r0, r2
 80012ea:	d019      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 80012ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012f0:	d016      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 80012f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012f6:	4290      	cmp	r0, r2
 80012f8:	d012      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 80012fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012fe:	4290      	cmp	r0, r2
 8001300:	d00e      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 8001302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001306:	4290      	cmp	r0, r2
 8001308:	d00a      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <TIM_Base_SetConfig+0x98>)
 800130c:	4290      	cmp	r0, r2
 800130e:	d007      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 8001310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001314:	4290      	cmp	r0, r2
 8001316:	d003      	beq.n	8001320 <TIM_Base_SetConfig+0x68>
 8001318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800131c:	4290      	cmp	r0, r2
 800131e:	d103      	bne.n	8001328 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001320:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001326:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001328:	694a      	ldr	r2, [r1, #20]
 800132a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800132e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001330:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001332:	688b      	ldr	r3, [r1, #8]
 8001334:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001336:	680b      	ldr	r3, [r1, #0]
 8001338:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <TIM_Base_SetConfig+0x94>)
 800133c:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800133e:	bf04      	itt	eq
 8001340:	690b      	ldreq	r3, [r1, #16]
 8001342:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001344:	2301      	movs	r3, #1
 8001346:	6143      	str	r3, [r0, #20]
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000
 8001350:	40014000 	.word	0x40014000

08001354 <HAL_TIM_Base_Init>:
{
 8001354:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001356:	4604      	mov	r4, r0
 8001358:	b1a0      	cbz	r0, 8001384 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800135a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800135e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001362:	b91b      	cbnz	r3, 800136c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001364:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001368:	f001 f992 	bl	8002690 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800136c:	2302      	movs	r3, #2
 800136e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001372:	6820      	ldr	r0, [r4, #0]
 8001374:	1d21      	adds	r1, r4, #4
 8001376:	f7ff ff9f 	bl	80012b8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800137a:	2301      	movs	r3, #1
 800137c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001380:	2000      	movs	r0, #0
 8001382:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001384:	2001      	movs	r0, #1
}
 8001386:	bd10      	pop	{r4, pc}

08001388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001388:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800138a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800138c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800138e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001392:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001396:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001398:	6083      	str	r3, [r0, #8]
 800139a:	bd10      	pop	{r4, pc}

0800139c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800139c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013a0:	2b01      	cmp	r3, #1
{
 80013a2:	b570      	push	{r4, r5, r6, lr}
 80013a4:	4604      	mov	r4, r0
 80013a6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80013aa:	d019      	beq.n	80013e0 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80013ac:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80013b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80013b2:	2301      	movs	r3, #1
 80013b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80013b8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80013c2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80013c4:	680b      	ldr	r3, [r1, #0]
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d065      	beq.n	8001496 <HAL_TIM_ConfigClockSource+0xfa>
 80013ca:	d815      	bhi.n	80013f8 <HAL_TIM_ConfigClockSource+0x5c>
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d00c      	beq.n	80013ea <HAL_TIM_ConfigClockSource+0x4e>
 80013d0:	d807      	bhi.n	80013e2 <HAL_TIM_ConfigClockSource+0x46>
 80013d2:	b153      	cbz	r3, 80013ea <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80013d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d001      	beq.n	80013ea <HAL_TIM_ConfigClockSource+0x4e>
 80013e6:	2b30      	cmp	r3, #48	; 0x30
 80013e8:	d1f4      	bne.n	80013d4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80013ea:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013ec:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80013f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013f4:	4313      	orrs	r3, r2
 80013f6:	e01a      	b.n	800142e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80013f8:	2b60      	cmp	r3, #96	; 0x60
 80013fa:	d034      	beq.n	8001466 <HAL_TIM_ConfigClockSource+0xca>
 80013fc:	d819      	bhi.n	8001432 <HAL_TIM_ConfigClockSource+0x96>
 80013fe:	2b50      	cmp	r3, #80	; 0x50
 8001400:	d1e8      	bne.n	80013d4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001402:	684a      	ldr	r2, [r1, #4]
 8001404:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001406:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001408:	6a05      	ldr	r5, [r0, #32]
 800140a:	f025 0501 	bic.w	r5, r5, #1
 800140e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001410:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001412:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800141a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800141e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001420:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001422:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001424:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800142a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800142e:	6083      	str	r3, [r0, #8]
 8001430:	e7d0      	b.n	80013d4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001432:	2b70      	cmp	r3, #112	; 0x70
 8001434:	d00c      	beq.n	8001450 <HAL_TIM_ConfigClockSource+0xb4>
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143a:	d1cb      	bne.n	80013d4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800143c:	68cb      	ldr	r3, [r1, #12]
 800143e:	684a      	ldr	r2, [r1, #4]
 8001440:	6889      	ldr	r1, [r1, #8]
 8001442:	f7ff ffa1 	bl	8001388 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144e:	e008      	b.n	8001462 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001450:	68cb      	ldr	r3, [r1, #12]
 8001452:	684a      	ldr	r2, [r1, #4]
 8001454:	6889      	ldr	r1, [r1, #8]
 8001456:	f7ff ff97 	bl	8001388 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800145e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001462:	6093      	str	r3, [r2, #8]
      break;
 8001464:	e7b6      	b.n	80013d4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001466:	684d      	ldr	r5, [r1, #4]
 8001468:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800146a:	6a01      	ldr	r1, [r0, #32]
 800146c:	f021 0110 	bic.w	r1, r1, #16
 8001470:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001472:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001474:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001476:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800147a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800147e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001482:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001486:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001488:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800148a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800148c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001490:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001494:	e7cb      	b.n	800142e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001496:	684a      	ldr	r2, [r1, #4]
 8001498:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800149a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800149c:	6a05      	ldr	r5, [r0, #32]
 800149e:	f025 0501 	bic.w	r5, r5, #1
 80014a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014a4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014ae:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80014b2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80014b4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80014b6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80014b8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80014ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80014be:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80014c2:	e7b4      	b.n	800142e <HAL_TIM_ConfigClockSource+0x92>

080014c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014c8:	2b01      	cmp	r3, #1
{
 80014ca:	b530      	push	{r4, r5, lr}
 80014cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80014d0:	d02d      	beq.n	800152e <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80014d6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014d8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80014da:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80014dc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80014e0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014e2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80014e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80014e8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014ea:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014ec:	4c11      	ldr	r4, [pc, #68]	; (8001534 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80014ee:	42a3      	cmp	r3, r4
 80014f0:	d012      	beq.n	8001518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f6:	d00f      	beq.n	8001518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014f8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80014fc:	42a3      	cmp	r3, r4
 80014fe:	d00b      	beq.n	8001518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001500:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001504:	42a3      	cmp	r3, r4
 8001506:	d007      	beq.n	8001518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001508:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800150c:	42a3      	cmp	r3, r4
 800150e:	d003      	beq.n	8001518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001510:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8001514:	42a3      	cmp	r3, r4
 8001516:	d104      	bne.n	8001522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001518:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800151a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800151e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001522:	2301      	movs	r3, #1
 8001524:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001528:	2300      	movs	r3, #0
 800152a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800152e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001530:	bd30      	pop	{r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	40010000 	.word	0x40010000

08001538 <HAL_TIMEx_CommutCallback>:
 8001538:	4770      	bx	lr

0800153a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800153a:	4770      	bx	lr

0800153c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800153c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800153e:	6803      	ldr	r3, [r0, #0]
 8001540:	68c1      	ldr	r1, [r0, #12]
 8001542:	691a      	ldr	r2, [r3, #16]
{
 8001544:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001546:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800154a:	430a      	orrs	r2, r1
 800154c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800154e:	6925      	ldr	r5, [r4, #16]
 8001550:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001552:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001554:	69c0      	ldr	r0, [r0, #28]
 8001556:	432a      	orrs	r2, r5
 8001558:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800155a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800155e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001560:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001564:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	69a1      	ldr	r1, [r4, #24]
 800156e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001572:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001574:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800157c:	d129      	bne.n	80015d2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800157e:	4293      	cmp	r3, r2
 8001580:	d003      	beq.n	800158a <UART_SetConfig+0x4e>
 8001582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001586:	4293      	cmp	r3, r2
 8001588:	d120      	bne.n	80015cc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800158a:	f7ff fc23 	bl	8000dd4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800158e:	6862      	ldr	r2, [r4, #4]
 8001590:	6825      	ldr	r5, [r4, #0]
 8001592:	1892      	adds	r2, r2, r2
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f04f 0119 	mov.w	r1, #25
 800159c:	415b      	adcs	r3, r3
 800159e:	fba0 0101 	umull	r0, r1, r0, r1
 80015a2:	f7fe fe75 	bl	8000290 <__aeabi_uldivmod>
 80015a6:	2164      	movs	r1, #100	; 0x64
 80015a8:	fbb0 f4f1 	udiv	r4, r0, r1
 80015ac:	fb01 0314 	mls	r3, r1, r4, r0
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	3332      	adds	r3, #50	; 0x32
 80015b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b8:	f003 0207 	and.w	r2, r3, #7
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80015c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015c6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015c8:	60ab      	str	r3, [r5, #8]
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80015cc:	f7ff fbf2 	bl	8000db4 <HAL_RCC_GetPCLK1Freq>
 80015d0:	e7dd      	b.n	800158e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d002      	beq.n	80015dc <UART_SetConfig+0xa0>
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <UART_SetConfig+0xd8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d116      	bne.n	800160a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80015dc:	f7ff fbfa 	bl	8000dd4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015e0:	6863      	ldr	r3, [r4, #4]
 80015e2:	6825      	ldr	r5, [r4, #0]
 80015e4:	2119      	movs	r1, #25
 80015e6:	009a      	lsls	r2, r3, #2
 80015e8:	fba0 0101 	umull	r0, r1, r0, r1
 80015ec:	0f9b      	lsrs	r3, r3, #30
 80015ee:	f7fe fe4f 	bl	8000290 <__aeabi_uldivmod>
 80015f2:	2264      	movs	r2, #100	; 0x64
 80015f4:	fbb0 f1f2 	udiv	r1, r0, r2
 80015f8:	fb02 0311 	mls	r3, r2, r1, r0
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	3332      	adds	r3, #50	; 0x32
 8001600:	fbb3 f3f2 	udiv	r3, r3, r2
 8001604:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001608:	e7de      	b.n	80015c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800160a:	f7ff fbd3 	bl	8000db4 <HAL_RCC_GetPCLK1Freq>
 800160e:	e7e7      	b.n	80015e0 <UART_SetConfig+0xa4>
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400

08001618 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	4604      	mov	r4, r0
 800161c:	460e      	mov	r6, r1
 800161e:	4617      	mov	r7, r2
 8001620:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001622:	6821      	ldr	r1, [r4, #0]
 8001624:	680b      	ldr	r3, [r1, #0]
 8001626:	ea36 0303 	bics.w	r3, r6, r3
 800162a:	d101      	bne.n	8001630 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800162c:	2000      	movs	r0, #0
}
 800162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001630:	1c6b      	adds	r3, r5, #1
 8001632:	d0f7      	beq.n	8001624 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001634:	b995      	cbnz	r5, 800165c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800163e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001648:	2320      	movs	r3, #32
 800164a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800164e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001652:	2300      	movs	r3, #0
 8001654:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001658:	2003      	movs	r0, #3
 800165a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800165c:	f7fe ffea 	bl	8000634 <HAL_GetTick>
 8001660:	1bc0      	subs	r0, r0, r7
 8001662:	4285      	cmp	r5, r0
 8001664:	d2dd      	bcs.n	8001622 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001666:	e7e6      	b.n	8001636 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001668 <HAL_UART_Init>:
{
 8001668:	b510      	push	{r4, lr}
  if (huart == NULL)
 800166a:	4604      	mov	r4, r0
 800166c:	b340      	cbz	r0, 80016c0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800166e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001676:	b91b      	cbnz	r3, 8001680 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001678:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800167c:	f001 f850 	bl	8002720 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001680:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001682:	2324      	movs	r3, #36	; 0x24
 8001684:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001688:	68d3      	ldr	r3, [r2, #12]
 800168a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800168e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff ff53 	bl	800153c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800169e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016ae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80016b2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80016b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80016ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80016be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
}
 80016c2:	bd10      	pop	{r4, pc}

080016c4 <HAL_UART_Transmit>:
{
 80016c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016c8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80016ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016ce:	2b20      	cmp	r3, #32
{
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80016d6:	d151      	bne.n	800177c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80016d8:	2900      	cmp	r1, #0
 80016da:	d04c      	beq.n	8001776 <HAL_UART_Transmit+0xb2>
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d04a      	beq.n	8001776 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80016e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d049      	beq.n	800177c <HAL_UART_Transmit+0xb8>
 80016e8:	2301      	movs	r3, #1
 80016ea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ee:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016f2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016f4:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016fc:	f7fe ff9a 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001700:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001704:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001706:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800170a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800170e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001710:	b29b      	uxth	r3, r3
 8001712:	b95b      	cbnz	r3, 800172c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	4632      	mov	r2, r6
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff ff7c 	bl	8001618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001720:	b9a0      	cbnz	r0, 800174c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001722:	2320      	movs	r3, #32
 8001724:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800172c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800172e:	3b01      	subs	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001734:	68a3      	ldr	r3, [r4, #8]
 8001736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800173a:	4632      	mov	r2, r6
 800173c:	463b      	mov	r3, r7
 800173e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001742:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001744:	d10e      	bne.n	8001764 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001746:	f7ff ff67 	bl	8001618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800174a:	b110      	cbz	r0, 8001752 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800174c:	2003      	movs	r0, #3
 800174e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001752:	882b      	ldrh	r3, [r5, #0]
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	b943      	cbnz	r3, 8001772 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001760:	3502      	adds	r5, #2
 8001762:	e7d4      	b.n	800170e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001764:	f7ff ff58 	bl	8001618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001768:	2800      	cmp	r0, #0
 800176a:	d1ef      	bne.n	800174c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	782a      	ldrb	r2, [r5, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	3501      	adds	r5, #1
 8001774:	e7cb      	b.n	800170e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001776:	2001      	movs	r0, #1
 8001778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800177c:	2002      	movs	r0, #2
}
 800177e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b530      	push	{r4, r5, lr}
 8001786:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001788:	2230      	movs	r2, #48	; 0x30
 800178a:	2100      	movs	r1, #0
 800178c:	a808      	add	r0, sp, #32
 800178e:	f001 f895 	bl	80028bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001792:	2100      	movs	r1, #0
 8001794:	2214      	movs	r2, #20
 8001796:	a803      	add	r0, sp, #12
 8001798:	f001 f890 	bl	80028bc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	2500      	movs	r5, #0
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <SystemClock_Config+0x90>)
 80017a0:	9501      	str	r5, [sp, #4]
 80017a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ac:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b6:	9502      	str	r5, [sp, #8]
 80017b8:	6813      	ldr	r3, [r2, #0]
 80017ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017d6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017dc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017de:	2304      	movs	r3, #4
 80017e0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80017e2:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 80017e6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017ea:	2307      	movs	r3, #7
 80017ec:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f0:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f2:	f7ff f86f 	bl	80008d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017fa:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001800:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001802:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001806:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001808:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180a:	f7ff fa37 	bl	8000c7c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800180e:	b015      	add	sp, #84	; 0x54
 8001810:	bd30      	pop	{r4, r5, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==NRF_IRQ_Pin){
 800181c:	2810      	cmp	r0, #16
 800181e:	d102      	bne.n	8001826 <HAL_GPIO_EXTI_Callback+0xa>

    nrf_irq_handler(&nrf);
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <HAL_GPIO_EXTI_Callback+0x18>)
 8001822:	f000 bccd 	b.w	80021c0 <nrf_irq_handler>
	}
	if(GPIO_Pin==B1_Pin){
 8001826:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
		  flag=1;
 800182a:	bf02      	ittt	eq
 800182c:	4b02      	ldreq	r3, [pc, #8]	; (8001838 <HAL_GPIO_EXTI_Callback+0x1c>)
 800182e:	2201      	moveq	r2, #1
 8001830:	801a      	strheq	r2, [r3, #0]
 8001832:	4770      	bx	lr
 8001834:	2000017c 	.word	0x2000017c
 8001838:	2000008e 	.word	0x2000008e

0800183c <HAL_TIM_PeriodElapsedCallback>:
	}
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim2 )
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800183e:	4283      	cmp	r3, r0
  {
	  flag=1;
 8001840:	bf02      	ittt	eq
 8001842:	4b03      	ldreq	r3, [pc, #12]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001844:	2201      	moveq	r2, #1
 8001846:	801a      	strheq	r2, [r3, #0]
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200005a0 	.word	0x200005a0
 8001850:	2000008e 	.word	0x2000008e

08001854 <send_RF_messages>:
  if (htim == &htim3 )
  {

  }
}
 void send_RF_messages (uint8_t *ffer){
 8001854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 uint16_t u=0;
	 while (i){
		 int t=4,g=0;
     while (t){t--;
			  if(*ffer!= 0){
			  buffer[g]=*ffer;
 8001856:	4e0c      	ldr	r6, [pc, #48]	; (8001888 <send_RF_messages+0x34>)
			  else{
				  i=0;
			      break;
			  }
		  }
		  nrf_send_packet(&nrf, buffer);
 8001858:	4f0c      	ldr	r7, [pc, #48]	; (800188c <send_RF_messages+0x38>)
 void send_RF_messages (uint8_t *ffer){
 800185a:	4604      	mov	r4, r0
	  i=sizeof(ffer);
 800185c:	2504      	movs	r5, #4
 800185e:	4622      	mov	r2, r4
 void send_RF_messages (uint8_t *ffer){
 8001860:	2300      	movs	r3, #0
 8001862:	4614      	mov	r4, r2
			  if(*ffer!= 0){
 8001864:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001868:	b159      	cbz	r1, 8001882 <send_RF_messages+0x2e>
			  buffer[g]=*ffer;
 800186a:	5599      	strb	r1, [r3, r6]
			  g++;
 800186c:	3301      	adds	r3, #1
     while (t){t--;
 800186e:	2b04      	cmp	r3, #4
			  *ffer ++;
 8001870:	4614      	mov	r4, r2
     while (t){t--;
 8001872:	d1f6      	bne.n	8001862 <send_RF_messages+0xe>
		  nrf_send_packet(&nrf, buffer);
 8001874:	4631      	mov	r1, r6
 8001876:	4638      	mov	r0, r7
 8001878:	f000 fe68 	bl	800254c <nrf_send_packet>
	 while (i){
 800187c:	2d00      	cmp	r5, #0
 800187e:	d1ee      	bne.n	800185e <send_RF_messages+0xa>
 8001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				  i=0;
 8001882:	460d      	mov	r5, r1
 8001884:	e7f6      	b.n	8001874 <send_RF_messages+0x20>
 8001886:	bf00      	nop
 8001888:	20000620 	.word	0x20000620
 800188c:	2000017c 	.word	0x2000017c

08001890 <main>:
{
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 8001896:	f7fe fea7 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 800189a:	f7ff ff73 	bl	8001784 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	2214      	movs	r2, #20
 80018a0:	2100      	movs	r1, #0
 80018a2:	a80f      	add	r0, sp, #60	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a4:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f001 f809 	bl	80028bc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4bb5      	ldr	r3, [pc, #724]	; (8001b80 <main+0x2f0>)
 80018ac:	9403      	str	r4, [sp, #12]
 80018ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80018b0:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8001bd0 <main+0x340>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80018b4:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8001bd4 <main+0x344>
  hspi2.Instance = SPI2;
 80018b8:	4db2      	ldr	r5, [pc, #712]	; (8001b84 <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	f042 0204 	orr.w	r2, r2, #4
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
 80018c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c2:	f002 0204 	and.w	r2, r2, #4
 80018c6:	9203      	str	r2, [sp, #12]
 80018c8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	9404      	str	r4, [sp, #16]
 80018cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
 80018d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018da:	9204      	str	r2, [sp, #16]
 80018dc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	9405      	str	r4, [sp, #20]
 80018e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
 80018e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ea:	f002 0201 	and.w	r2, r2, #1
 80018ee:	9205      	str	r2, [sp, #20]
 80018f0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	9406      	str	r4, [sp, #24]
 80018f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f6:	f042 0202 	orr.w	r2, r2, #2
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001902:	4640      	mov	r0, r8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001906:	4622      	mov	r2, r4
 8001908:	2133      	movs	r1, #51	; 0x33
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, CS_Pin|CE_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800190c:	f7fe ffd0 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001910:	4622      	mov	r2, r4
 8001912:	21a0      	movs	r1, #160	; 0xa0
 8001914:	4648      	mov	r0, r9
 8001916:	f7fe ffcb 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800191a:	4622      	mov	r2, r4
 800191c:	2103      	movs	r1, #3
 800191e:	489a      	ldr	r0, [pc, #616]	; (8001b88 <main+0x2f8>)
 8001920:	f7fe ffc6 	bl	80008b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001928:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = B1_Pin;
 800192a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800192c:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192e:	4b97      	ldr	r3, [pc, #604]	; (8001b8c <main+0x2fc>)
 8001930:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001938:	f7fe feec 	bl	8000714 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin|GPIO_PIN_4|GPIO_PIN_5;
 800193c:	2333      	movs	r3, #51	; 0x33
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	4640      	mov	r0, r8
 8001940:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001942:	2710      	movs	r7, #16
  GPIO_InitStruct.Pin = CS_Pin|CE_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001944:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f7fe fee1 	bl	8000714 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001952:	4b8f      	ldr	r3, [pc, #572]	; (8001b90 <main+0x300>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001954:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	a90f      	add	r1, sp, #60	; 0x3c
 8001958:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800195a:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f7fe fed9 	bl	8000714 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8001962:	23a0      	movs	r3, #160	; 0xa0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	a90f      	add	r1, sp, #60	; 0x3c
 8001966:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8001968:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800196a:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f7fe fecd 	bl	8000714 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	a90f      	add	r1, sp, #60	; 0x3c
 800197c:	4882      	ldr	r0, [pc, #520]	; (8001b88 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800197e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f7fe fec3 	bl	8000714 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800198e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	a90f      	add	r1, sp, #60	; 0x3c
 8001992:	487d      	ldr	r0, [pc, #500]	; (8001b88 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001994:	930f      	str	r3, [sp, #60]	; 0x3c
 8001996:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f7fe feba 	bl	8000714 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019a0:	4622      	mov	r2, r4
 80019a2:	4621      	mov	r1, r4
 80019a4:	200a      	movs	r0, #10
 80019a6:	f7fe fe5d 	bl	8000664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019aa:	200a      	movs	r0, #10
 80019ac:	f7fe fe8e 	bl	80006cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b0:	4621      	mov	r1, r4
 80019b2:	4622      	mov	r2, r4
 80019b4:	2028      	movs	r0, #40	; 0x28
 80019b6:	f7fe fe55 	bl	8000664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ba:	2028      	movs	r0, #40	; 0x28
 80019bc:	f7fe fe86 	bl	80006cc <HAL_NVIC_EnableIRQ>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019c0:	4a74      	ldr	r2, [pc, #464]	; (8001b94 <main+0x304>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019c2:	60ac      	str	r4, [r5, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019c8:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.CRCPolynomial = 10;
 80019d0:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019d2:	61aa      	str	r2, [r5, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019d4:	4628      	mov	r0, r5
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019d6:	2218      	movs	r2, #24
  hspi2.Init.CRCPolynomial = 10;
 80019d8:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019da:	61ea      	str	r2, [r5, #28]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019dc:	60ec      	str	r4, [r5, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019de:	612c      	str	r4, [r5, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e0:	616c      	str	r4, [r5, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e2:	622c      	str	r4, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e4:	626c      	str	r4, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e6:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019e8:	f7ff fa6e 	bl	8000ec8 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ec:	463a      	mov	r2, r7
 80019ee:	4621      	mov	r1, r4
 80019f0:	a80f      	add	r0, sp, #60	; 0x3c
 80019f2:	f000 ff63 	bl	80028bc <memset>
  htim2.Instance = TIM2;
 80019f6:	4a68      	ldr	r2, [pc, #416]	; (8001b98 <main+0x308>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f8:	9200      	str	r2, [sp, #0]
  htim2.Init.Prescaler = 830;
 80019fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019fe:	f240 313e 	movw	r1, #830	; 0x33e
 8001a02:	e882 0003 	stmia.w	r2, {r0, r1}
  htim2.Init.Period = 50000-1;
 8001a06:	f24c 314f 	movw	r1, #49999	; 0xc34f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a0a:	4610      	mov	r0, r2
  htim2.Init.Period = 50000-1;
 8001a0c:	60d1      	str	r1, [r2, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	6094      	str	r4, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	6114      	str	r4, [r2, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	6194      	str	r4, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	940a      	str	r4, [sp, #40]	; 0x28
 8001a16:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a18:	f7ff fc9c 	bl	8001354 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1c:	9a00      	ldr	r2, [sp, #0]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a22:	a90f      	add	r1, sp, #60	; 0x3c
 8001a24:	4610      	mov	r0, r2
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f7ff fcb8 	bl	800139c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2c:	9a00      	ldr	r2, [sp, #0]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a30:	a90a      	add	r1, sp, #40	; 0x28
 8001a32:	4610      	mov	r0, r2
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a36:	f7ff fd45 	bl	80014c4 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	463a      	mov	r2, r7
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	a80f      	add	r0, sp, #60	; 0x3c
 8001a40:	f000 ff3c 	bl	80028bc <memset>
  htim3.Instance = TIM3;
 8001a44:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <main+0x30c>)
 8001a46:	4956      	ldr	r1, [pc, #344]	; (8001ba0 <main+0x310>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	6094      	str	r4, [r2, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a4a:	4610      	mov	r0, r2
  htim3.Init.Prescaler = 0;
 8001a4c:	e882 0012 	stmia.w	r2, {r1, r4}
  htim3.Init.Period = 0;
 8001a50:	60d4      	str	r4, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	6114      	str	r4, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a56:	9200      	str	r2, [sp, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	940a      	str	r4, [sp, #40]	; 0x28
 8001a5a:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a5c:	f7ff fc7a 	bl	8001354 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a60:	9a00      	ldr	r2, [sp, #0]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a64:	a90f      	add	r1, sp, #60	; 0x3c
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff fc98 	bl	800139c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6c:	9a00      	ldr	r2, [sp, #0]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a70:	a90a      	add	r1, sp, #40	; 0x28
 8001a72:	4610      	mov	r0, r2
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a76:	f7ff fd25 	bl	80014c4 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	463a      	mov	r2, r7
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	a80f      	add	r0, sp, #60	; 0x3c
 8001a80:	f000 ff1c 	bl	80028bc <memset>
  htim4.Instance = TIM4;
 8001a84:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <main+0x314>)
 8001a86:	4948      	ldr	r1, [pc, #288]	; (8001ba8 <main+0x318>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	6094      	str	r4, [r2, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a8a:	4610      	mov	r0, r2
  htim4.Init.Prescaler = 0;
 8001a8c:	e882 0012 	stmia.w	r2, {r1, r4}
  htim4.Init.Period = 0;
 8001a90:	60d4      	str	r4, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	6114      	str	r4, [r2, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a96:	9200      	str	r2, [sp, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	940a      	str	r4, [sp, #40]	; 0x28
 8001a9a:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a9c:	f7ff fc5a 	bl	8001354 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa0:	9a00      	ldr	r2, [sp, #0]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa2:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa4:	a90f      	add	r1, sp, #60	; 0x3c
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f7ff fc78 	bl	800139c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aac:	9a00      	ldr	r2, [sp, #0]
  huart2.Instance = USART2;
 8001aae:	4e3f      	ldr	r6, [pc, #252]	; (8001bac <main+0x31c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab2:	a90a      	add	r1, sp, #40	; 0x28
 8001ab4:	4610      	mov	r0, r2
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab8:	f7ff fd04 	bl	80014c4 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 115200;
 8001abc:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <main+0x320>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	60b4      	str	r4, [r6, #8]
  huart2.Init.BaudRate = 115200;
 8001ac0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001ac4:	e886 4004 	stmia.w	r6, {r2, lr}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac8:	4630      	mov	r0, r6
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aca:	220c      	movs	r2, #12
 8001acc:	6172      	str	r2, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ace:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad0:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ad6:	f7ff fdc7 	bl	8001668 <HAL_UART_Init>
  memset(ffer, 0, sizeof(ffer));
 8001ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ade:	4621      	mov	r1, r4
 8001ae0:	4834      	ldr	r0, [pc, #208]	; (8001bb4 <main+0x324>)
 8001ae2:	f000 feeb 	bl	80028bc <memset>
  sprintf(ffer," stm32f401!\n\r ");
 8001ae6:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <main+0x328>)
 8001ae8:	4832      	ldr	r0, [pc, #200]	; (8001bb4 <main+0x324>)
 8001aea:	f000 ff13 	bl	8002914 <strcpy>
      config.payload_length   = 4;    // maximum is 32 bytes
 8001aee:	9b01      	ldr	r3, [sp, #4]
 8001af0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
      config.retransmit_count = 15;   // maximum is 15 times
 8001af4:	230f      	movs	r3, #15
 8001af6:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
      config.retransmit_delay = 0x0F; // 4000us, LSB:250us
 8001afa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
      config.rf_channel       = 11;
 8001afe:	230b      	movs	r3, #11
 8001b00:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
      config.rx_address       = rx_address;
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <main+0x32c>)
 8001b06:	9311      	str	r3, [sp, #68]	; 0x44
      config.tx_address       = tx_address;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <main+0x330>)
 8001b0a:	9312      	str	r3, [sp, #72]	; 0x48
      config.rx_buffer        = (uint8_t*)&rx_data;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <main+0x334>)
 8001b0e:	9313      	str	r3, [sp, #76]	; 0x4c
      config.spi_timeout = 10; // milliseconds
 8001b10:	230a      	movs	r3, #10
 8001b12:	9315      	str	r3, [sp, #84]	; 0x54
      nrf_init(&nrf, &config);
 8001b14:	a90f      	add	r1, sp, #60	; 0x3c
      config.ce_pin      = CE_Pin;
 8001b16:	2302      	movs	r3, #2
      nrf_init(&nrf, &config);
 8001b18:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <main+0x338>)
      config.ce_pin      = CE_Pin;
 8001b1a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
      config.ce_port     = CE_GPIO_Port;
 8001b1e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      config.csn_port    = CS_GPIO_Port;
 8001b22:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      config.irq_pin     = NRF_IRQ_Pin;
 8001b26:	f8ad 706c 	strh.w	r7, [sp, #108]	; 0x6c
      config.data_rate        = NRF_DATA_RATE_1MBPS;
 8001b2a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
      config.tx_power         = NRF_TX_PWR_0dBm;
 8001b2e:	f88d b03d 	strb.w	fp, [sp, #61]	; 0x3d
      config.crc_width        = NRF_CRC_WIDTH_1B;
 8001b32:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
      config.addr_width       = NRF_ADDR_WIDTH_5;
 8001b36:	f88d b03f 	strb.w	fp, [sp, #63]	; 0x3f
      config.spi         = &hspi2;
 8001b3a:	9514      	str	r5, [sp, #80]	; 0x50
      config.csn_pin     = CS_Pin;
 8001b3c:	f8ad a05c 	strh.w	sl, [sp, #92]	; 0x5c
      config.irq_port    = NRF_IRQ_GPIO_Port;
 8001b40:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
      nrf_init(&nrf, &config);
 8001b44:	f000 fc88 	bl	8002458 <nrf_init>
  memset(ffer, 0, sizeof(ffer));
 8001b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <main+0x324>)
		  if(ffer[u]!= 0){
 8001b50:	4f18      	ldr	r7, [pc, #96]	; (8001bb4 <main+0x324>)
	  nrf_send_packet_noack(&nrf, buffer);
 8001b52:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001bc8 <main+0x338>
  memset(ffer, 0, sizeof(ffer));
 8001b56:	f000 feb1 	bl	80028bc <memset>
  sprintf(ffer," starting!\n\r ");
 8001b5a:	491c      	ldr	r1, [pc, #112]	; (8001bcc <main+0x33c>)
 8001b5c:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <main+0x324>)
 8001b5e:	f000 fed9 	bl	8002914 <strcpy>
  HAL_UART_Transmit(&huart2,ffer,strlen(ffer),1000);
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <main+0x324>)
 8001b64:	f7fe fb3c 	bl	80001e0 <strlen>
 8001b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6c:	b282      	uxth	r2, r0
 8001b6e:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <main+0x324>)
 8001b70:	4630      	mov	r0, r6
 8001b72:	f7ff fda7 	bl	80016c4 <HAL_UART_Transmit>
  i=sizeof(ffer);
 8001b76:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
{
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e02c      	b.n	8001bd8 <main+0x348>
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	200000a4 	.word	0x200000a4
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	10110000 	.word	0x10110000
 8001b90:	10210000 	.word	0x10210000
 8001b94:	40003800 	.word	0x40003800
 8001b98:	200005a0 	.word	0x200005a0
 8001b9c:	2000013c 	.word	0x2000013c
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	200000fc 	.word	0x200000fc
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	200005e0 	.word	0x200005e0
 8001bb0:	40004400 	.word	0x40004400
 8001bb4:	200001b4 	.word	0x200001b4
 8001bb8:	08003164 	.word	0x08003164
 8001bbc:	0800319e 	.word	0x0800319e
 8001bc0:	080031a3 	.word	0x080031a3
 8001bc4:	2000059c 	.word	0x2000059c
 8001bc8:	2000017c 	.word	0x2000017c
 8001bcc:	08003173 	.word	0x08003173
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	18e5      	adds	r5, r4, r3
 8001bda:	b2ad      	uxth	r5, r5
		  if(ffer[u]!= 0){
 8001bdc:	5d7a      	ldrb	r2, [r7, r5]
 8001bde:	b16a      	cbz	r2, 8001bfc <main+0x36c>
		  buffer[g]=ffer[u];
 8001be0:	a902      	add	r1, sp, #8
 8001be2:	54ca      	strb	r2, [r1, r3]
		  g++;
 8001be4:	3301      	adds	r3, #1
 8001be6:	18e5      	adds	r5, r4, r3
	  while (t){
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	b2ad      	uxth	r5, r5
 8001bec:	d1f4      	bne.n	8001bd8 <main+0x348>
	  nrf_send_packet_noack(&nrf, buffer);
 8001bee:	a902      	add	r1, sp, #8
 8001bf0:	4640      	mov	r0, r8
 8001bf2:	f000 fcc5 	bl	8002580 <nrf_send_packet_noack>
 while (i){
 8001bf6:	b11e      	cbz	r6, 8001c00 <main+0x370>
 8001bf8:	462c      	mov	r4, r5
 8001bfa:	e7be      	b.n	8001b7a <main+0x2ea>
			  i=0;
 8001bfc:	4616      	mov	r6, r2
 8001bfe:	e7f6      	b.n	8001bee <main+0x35e>
 if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c00:	4837      	ldr	r0, [pc, #220]	; (8001ce0 <main+0x450>)
        if(counter>99){counter=0;}
 8001c02:	4c38      	ldr	r4, [pc, #224]	; (8001ce4 <main+0x454>)
 if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c04:	f7ff fba6 	bl	8001354 <HAL_TIM_Base_Init>
 if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001c08:	4835      	ldr	r0, [pc, #212]	; (8001ce0 <main+0x450>)
 8001c0a:	f7ff fa8a 	bl	8001122 <HAL_TIM_Base_Start_IT>
        if(flag!=0&&recivingmsgflag ==0){
 8001c0e:	4f36      	ldr	r7, [pc, #216]	; (8001ce8 <main+0x458>)
 8001c10:	883b      	ldrh	r3, [r7, #0]
 8001c12:	4d36      	ldr	r5, [pc, #216]	; (8001cec <main+0x45c>)
 8001c14:	b303      	cbz	r3, 8001c58 <main+0x3c8>
 8001c16:	782e      	ldrb	r6, [r5, #0]
 8001c18:	b9f6      	cbnz	r6, 8001c58 <main+0x3c8>
        HAL_TIM_Base_Stop_IT(&htim2);
 8001c1a:	4831      	ldr	r0, [pc, #196]	; (8001ce0 <main+0x450>)
            flag=0;
 8001c1c:	803e      	strh	r6, [r7, #0]
        HAL_TIM_Base_Stop_IT(&htim2);
 8001c1e:	f7ff fa90 	bl	8001142 <HAL_TIM_Base_Stop_IT>
        if(counter>99){counter=0;}
 8001c22:	8823      	ldrh	r3, [r4, #0]
         memset(ffer, 0, sizeof(ffer));
 8001c24:	4832      	ldr	r0, [pc, #200]	; (8001cf0 <main+0x460>)
        if(counter>99){counter=0;}
 8001c26:	2b63      	cmp	r3, #99	; 0x63
         memset(ffer, 0, sizeof(ffer));
 8001c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c2c:	f04f 0100 	mov.w	r1, #0
        if(counter>99){counter=0;}
 8001c30:	bf88      	it	hi
 8001c32:	8026      	strhhi	r6, [r4, #0]
         memset(ffer, 0, sizeof(ffer));
 8001c34:	f000 fe42 	bl	80028bc <memset>
         sprintf(ffer,"st%d",counter++);
 8001c38:	8822      	ldrh	r2, [r4, #0]
 8001c3a:	492e      	ldr	r1, [pc, #184]	; (8001cf4 <main+0x464>)
 8001c3c:	482c      	ldr	r0, [pc, #176]	; (8001cf0 <main+0x460>)
 8001c3e:	1c53      	adds	r3, r2, #1
 8001c40:	8023      	strh	r3, [r4, #0]
 8001c42:	f000 fe43 	bl	80028cc <siprintf>
         nrf_flush_tx(&nrf);
 8001c46:	482c      	ldr	r0, [pc, #176]	; (8001cf8 <main+0x468>)
 8001c48:	f000 f915 	bl	8001e76 <nrf_flush_tx>
          send_RF_messages(ffer);
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <main+0x460>)
 8001c4e:	f7ff fe01 	bl	8001854 <send_RF_messages>
        HAL_TIM_Base_Start_IT(&htim2);
 8001c52:	4823      	ldr	r0, [pc, #140]	; (8001ce0 <main+0x450>)
 8001c54:	f7ff fa65 	bl	8001122 <HAL_TIM_Base_Start_IT>
        if(recivingmsgflag ==1){
 8001c58:	782e      	ldrb	r6, [r5, #0]
 8001c5a:	2e01      	cmp	r6, #1
 8001c5c:	d1d8      	bne.n	8001c10 <main+0x380>
        	memcpy(parse,redata,sizeof(char)*4);
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <main+0x46c>)
        	recivingmsgflag=0;
 8001c60:	2100      	movs	r1, #0
        	memcpy(parse,redata,sizeof(char)*4);
 8001c62:	681b      	ldr	r3, [r3, #0]
        	recivingmsgflag=0;
 8001c64:	7029      	strb	r1, [r5, #0]
        	memcpy(parse,redata,sizeof(char)*4);
 8001c66:	681d      	ldr	r5, [r3, #0]
            memset(parse, 0, sizeof(parse));
 8001c68:	9108      	str	r1, [sp, #32]

static void parsemesage(uint8_t *recdata){
	char ffer2[40],buffer2[20];
    char *p1, *p2;
    int y=0;
    memset(ffer2, 0, sizeof(ffer2));
 8001c6a:	2228      	movs	r2, #40	; 0x28
 8001c6c:	a80f      	add	r0, sp, #60	; 0x3c
            memset(parse, 0, sizeof(parse));
 8001c6e:	9109      	str	r1, [sp, #36]	; 0x24
        	memcpy(parse,redata,sizeof(char)*4);
 8001c70:	9507      	str	r5, [sp, #28]
    memset(ffer2, 0, sizeof(ffer2));
 8001c72:	f000 fe23 	bl	80028bc <memset>
    	  if(h>0){buffer3[h-1]=buffer2[h];}

    }
	HAL_UART_Transmit(&huart2,buffer2,strlen(buffer2),1000);
*/
    if(strstr(ffer2,Led_on)!= NULL){
 8001c76:	4922      	ldr	r1, [pc, #136]	; (8001d00 <main+0x470>)
	memcpy(ffer2,recdata,sizeof(char)*4);
 8001c78:	950f      	str	r5, [sp, #60]	; 0x3c
    if(strstr(ffer2,Led_on)!= NULL){
 8001c7a:	a80f      	add	r0, sp, #60	; 0x3c
 8001c7c:	f000 fe52 	bl	8002924 <strstr>
 8001c80:	b198      	cbz	r0, 8001caa <main+0x41a>
        sprintf(buffer2,"settings %s\r\n", ffer2);
 8001c82:	aa0f      	add	r2, sp, #60	; 0x3c
 8001c84:	491f      	ldr	r1, [pc, #124]	; (8001d04 <main+0x474>)
 8001c86:	a80a      	add	r0, sp, #40	; 0x28
 8001c88:	f000 fe20 	bl	80028cc <siprintf>
     	HAL_UART_Transmit(&huart2,buffer2,strlen(buffer2),1000);
 8001c8c:	a80a      	add	r0, sp, #40	; 0x28
 8001c8e:	f7fe faa7 	bl	80001e0 <strlen>
 8001c92:	a90a      	add	r1, sp, #40	; 0x28
 8001c94:	b282      	uxth	r2, r0
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	481b      	ldr	r0, [pc, #108]	; (8001d08 <main+0x478>)
 8001c9c:	f7ff fd12 	bl	80016c4 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);}
 8001ca0:	4632      	mov	r2, r6
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	4819      	ldr	r0, [pc, #100]	; (8001d0c <main+0x47c>)
 8001ca6:	f7fe fe03 	bl	80008b0 <HAL_GPIO_WritePin>
    if(strstr(ffer2,Led_off)!= NULL){
 8001caa:	4919      	ldr	r1, [pc, #100]	; (8001d10 <main+0x480>)
 8001cac:	a80f      	add	r0, sp, #60	; 0x3c
 8001cae:	f000 fe39 	bl	8002924 <strstr>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d0ab      	beq.n	8001c0e <main+0x37e>
      sprintf(buffer2,"settings %s\r\n", ffer2);
 8001cb6:	aa0f      	add	r2, sp, #60	; 0x3c
 8001cb8:	4912      	ldr	r1, [pc, #72]	; (8001d04 <main+0x474>)
 8001cba:	a80a      	add	r0, sp, #40	; 0x28
 8001cbc:	f000 fe06 	bl	80028cc <siprintf>
  	HAL_UART_Transmit(&huart2,buffer2,strlen(buffer2),1000);
 8001cc0:	a80a      	add	r0, sp, #40	; 0x28
 8001cc2:	f7fe fa8d 	bl	80001e0 <strlen>
 8001cc6:	a90a      	add	r1, sp, #40	; 0x28
 8001cc8:	b282      	uxth	r2, r0
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <main+0x478>)
 8001cd0:	f7ff fcf8 	bl	80016c4 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <main+0x47c>)
 8001cda:	f7fe fde9 	bl	80008b0 <HAL_GPIO_WritePin>
 8001cde:	e796      	b.n	8001c0e <main+0x37e>
 8001ce0:	200005a0 	.word	0x200005a0
 8001ce4:	2000008c 	.word	0x2000008c
 8001ce8:	2000008e 	.word	0x2000008e
 8001cec:	20000090 	.word	0x20000090
 8001cf0:	200001b4 	.word	0x200001b4
 8001cf4:	08003181 	.word	0x08003181
 8001cf8:	2000017c 	.word	0x2000017c
 8001cfc:	20000a08 	.word	0x20000a08
 8001d00:	08003186 	.word	0x08003186
 8001d04:	0800318b 	.word	0x0800318b
 8001d08:	200005e0 	.word	0x200005e0
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	08003199 	.word	0x08003199

08001d14 <ce_reset>:
static void ce_set(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
}

static void ce_reset(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 8001d14:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001d16:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f7fe bdc9 	b.w	80008b0 <HAL_GPIO_WritePin>

08001d1e <ce_set>:
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 8001d1e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001d20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d22:	2201      	movs	r2, #1
 8001d24:	f7fe bdc4 	b.w	80008b0 <HAL_GPIO_WritePin>

08001d28 <nrf_send_command>:

    return NRF_OK;
}

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx,
                            uint8_t* rx, uint8_t len) {
 8001d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af02      	add	r7, sp, #8
 8001d30:	461e      	mov	r6, r3
 8001d32:	f897 a020 	ldrb.w	sl, [r7, #32]
    uint8_t myTX[len + 1];
 8001d36:	f10a 0308 	add.w	r3, sl, #8
 8001d3a:	f023 0307 	bic.w	r3, r3, #7
 8001d3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001d42:	f10d 0908 	add.w	r9, sp, #8
    uint8_t myRX[len + 1];
 8001d46:	ebad 0d03 	sub.w	sp, sp, r3
    myTX[0] = cmd;
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	f10a 38ff 	add.w	r8, sl, #4294967295
                            uint8_t* rx, uint8_t len) {
 8001d50:	4604      	mov	r4, r0
    myTX[0] = cmd;
 8001d52:	f803 1b01 	strb.w	r1, [r3], #1
    uint8_t myRX[len + 1];
 8001d56:	ad02      	add	r5, sp, #8
 8001d58:	1e51      	subs	r1, r2, #1
 8001d5a:	f10d 0007 	add.w	r0, sp, #7
 8001d5e:	4442      	add	r2, r8

    int i = 0;
    for (i = 0; i < len; i++) {
        myTX[1 + i] = tx[i];
        myRX[i]     = 0;
 8001d60:	f04f 0e00 	mov.w	lr, #0
    for (i = 0; i < len; i++) {
 8001d64:	4291      	cmp	r1, r2
 8001d66:	d11c      	bne.n	8001da2 <nrf_send_command+0x7a>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8001d68:	2200      	movs	r2, #0
 8001d6a:	8c21      	ldrh	r1, [r4, #32]
 8001d6c:	69e0      	ldr	r0, [r4, #28]
 8001d6e:	f7fe fd9f 	bl	80008b0 <HAL_GPIO_WritePin>
    }

    csn_reset(dev);

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 8001d72:	69a3      	ldr	r3, [r4, #24]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	462a      	mov	r2, r5
 8001d78:	f10a 0301 	add.w	r3, sl, #1
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	6960      	ldr	r0, [r4, #20]
 8001d80:	f7ff f8df 	bl	8000f42 <HAL_SPI_TransmitReceive>
 8001d84:	b9c8      	cbnz	r0, 8001dba <nrf_send_command+0x92>
 8001d86:	1e73      	subs	r3, r6, #1
 8001d88:	3501      	adds	r5, #1
 8001d8a:	4446      	add	r6, r8
                                dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
    }

    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001d8c:	42b3      	cmp	r3, r6
 8001d8e:	d10f      	bne.n	8001db0 <nrf_send_command+0x88>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 8001d90:	69e0      	ldr	r0, [r4, #28]
 8001d92:	8c21      	ldrh	r1, [r4, #32]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f7fe fd8b 	bl	80008b0 <HAL_GPIO_WritePin>

    csn_set(dev);

    return NRF_OK;
 8001d9a:	2000      	movs	r0, #0
}
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        myTX[1 + i] = tx[i];
 8001da2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8001da6:	f803 cb01 	strb.w	ip, [r3], #1
        myRX[i]     = 0;
 8001daa:	f800 ef01 	strb.w	lr, [r0, #1]!
 8001dae:	e7d9      	b.n	8001d64 <nrf_send_command+0x3c>
    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001db0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001db4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001db8:	e7e8      	b.n	8001d8c <nrf_send_command+0x64>
        return NRF_ERROR;
 8001dba:	2001      	movs	r0, #1
 8001dbc:	e7ee      	b.n	8001d9c <nrf_send_command+0x74>

08001dbe <nrf_read_register>:
//	HAL_UART_Transmit(&huart2,redata,strlen(redata),1000);
    recivingmsgflag=1;
	dev->rx_busy = 0;
}

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001dbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx = 0;
 8001dc0:	ac04      	add	r4, sp, #16
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) !=
 8001dc8:	2301      	movs	r3, #1
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	4622      	mov	r2, r4
 8001dd0:	f7ff ffaa 	bl	8001d28 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001dd4:	3000      	adds	r0, #0
 8001dd6:	bf18      	it	ne
 8001dd8:	2001      	movne	r0, #1
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd10      	pop	{r4, pc}

08001dde <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001dde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001de0:	ab04      	add	r3, sp, #16
 8001de2:	2400      	movs	r4, #0
 8001de4:	f803 4d01 	strb.w	r4, [r3, #-1]!
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 8001de8:	2401      	movs	r4, #1
 8001dea:	9400      	str	r4, [sp, #0]
 8001dec:	f041 0120 	orr.w	r1, r1, #32
 8001df0:	f7ff ff9a 	bl	8001d28 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001df4:	3000      	adds	r0, #0
 8001df6:	bf18      	it	ne
 8001df8:	2001      	movne	r0, #1
 8001dfa:	b004      	add	sp, #16
 8001dfc:	bd10      	pop	{r4, pc}

08001dfe <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
    uint8_t tx[dev->config.payload_length];
 8001e02:	7902      	ldrb	r2, [r0, #4]
 8001e04:	1dd3      	adds	r3, r2, #7
 8001e06:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 8001e0a:	af02      	add	r7, sp, #8
    uint8_t tx[dev->config.payload_length];
 8001e0c:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 8001e10:	460b      	mov	r3, r1
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	2161      	movs	r1, #97	; 0x61
 8001e16:	aa02      	add	r2, sp, #8
 8001e18:	f7ff ff86 	bl	8001d28 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001e1c:	3000      	adds	r0, #0
 8001e1e:	bf18      	it	ne
 8001e20:	2001      	movne	r0, #1
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <nrf_write_tx_payload>:

NRF_RESULT nrf_write_tx_payload(nrf24l01* dev, const uint8_t* data) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
    uint8_t rx[dev->config.payload_length];
 8001e2a:	7902      	ldrb	r2, [r0, #4]
 8001e2c:	1dd3      	adds	r3, r2, #7
 8001e2e:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_write_tx_payload(nrf24l01* dev, const uint8_t* data) {
 8001e32:	af02      	add	r7, sp, #8
    uint8_t rx[dev->config.payload_length];
 8001e34:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 8001e38:	ab02      	add	r3, sp, #8
 8001e3a:	9200      	str	r2, [sp, #0]
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	21a0      	movs	r1, #160	; 0xa0
 8001e40:	f7ff ff72 	bl	8001d28 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001e44:	3000      	adds	r0, #0
 8001e46:	bf18      	it	ne
 8001e48:	2001      	movne	r0, #1
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <nrf_write_tx_payload_noack>:

NRF_RESULT nrf_write_tx_payload_noack(nrf24l01* dev, const uint8_t* data) {
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
    uint8_t rx[dev->config.payload_length];
 8001e52:	7902      	ldrb	r2, [r0, #4]
 8001e54:	1dd3      	adds	r3, r2, #7
 8001e56:	f023 0307 	bic.w	r3, r3, #7
NRF_RESULT nrf_write_tx_payload_noack(nrf24l01* dev, const uint8_t* data) {
 8001e5a:	af02      	add	r7, sp, #8
    uint8_t rx[dev->config.payload_length];
 8001e5c:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD_NOACK, data, rx,
 8001e60:	ab02      	add	r3, sp, #8
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	460a      	mov	r2, r1
 8001e66:	21b0      	movs	r1, #176	; 0xb0
 8001e68:	f7ff ff5e 	bl	8001d28 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001e6c:	3000      	adds	r0, #0
 8001e6e:	bf18      	it	ne
 8001e70:	2001      	movne	r0, #1
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <nrf_flush_tx>:

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 8001e76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 8001e7e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	f10d 020f 	add.w	r2, sp, #15
 8001e88:	f10d 030e 	add.w	r3, sp, #14
 8001e8c:	21e1      	movs	r1, #225	; 0xe1
 8001e8e:	f7ff ff4b 	bl	8001d28 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001e92:	3000      	adds	r0, #0
 8001e94:	bf18      	it	ne
 8001e96:	2001      	movne	r0, #1
 8001e98:	b005      	add	sp, #20
 8001e9a:	f85d fb04 	ldr.w	pc, [sp], #4

08001e9e <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 8001e9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 8001ea6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f10d 020f 	add.w	r2, sp, #15
 8001eb0:	f10d 030e 	add.w	r3, sp, #14
 8001eb4:	21e2      	movs	r1, #226	; 0xe2
 8001eb6:	f7ff ff37 	bl	8001d28 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001eba:	3000      	adds	r0, #0
 8001ebc:	bf18      	it	ne
 8001ebe:	2001      	movne	r0, #1
 8001ec0:	b005      	add	sp, #20
 8001ec2:	f85d fb04 	ldr.w	pc, [sp], #4

08001ec6 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001ec8:	ac02      	add	r4, sp, #8
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001ed0:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	2106      	movs	r1, #6
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001ed6:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001ed8:	f7ff ff71 	bl	8001dbe <nrf_read_register>
 8001edc:	b110      	cbz	r0, 8001ee4 <nrf_set_data_rate+0x1e>
        return NRF_ERROR;
 8001ede:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.data_rate = rate;
    return NRF_OK;
}
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 1) { // low bit set
 8001ee8:	f016 0f01 	tst.w	r6, #1
        reg |= 1 << 5;
 8001eec:	bf14      	ite	ne
 8001eee:	f043 0320 	orrne.w	r3, r3, #32
        reg &= ~(1 << 5);
 8001ef2:	f023 0320 	biceq.w	r3, r3, #32
 8001ef6:	f88d 3007 	strb.w	r3, [sp, #7]
 8001efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 2) { // high bit set
 8001efe:	f016 0f02 	tst.w	r6, #2
        reg |= 1 << 3;
 8001f02:	bf14      	ite	ne
 8001f04:	f043 0308 	orrne.w	r3, r3, #8
        reg &= ~(1 << 3);
 8001f08:	f023 0308 	biceq.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	2106      	movs	r1, #6
 8001f10:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8001f12:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001f16:	f7ff ff62 	bl	8001dde <nrf_write_register>
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d1df      	bne.n	8001ede <nrf_set_data_rate+0x18>
    dev->config.data_rate = rate;
 8001f1e:	702e      	strb	r6, [r5, #0]
    return NRF_OK;
 8001f20:	e7de      	b.n	8001ee0 <nrf_set_data_rate+0x1a>

08001f22 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8001f22:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg = 0;
 8001f24:	ac02      	add	r4, sp, #8
 8001f26:	2300      	movs	r3, #0
 8001f28:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	4622      	mov	r2, r4
NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8001f30:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001f32:	f7ff ff44 	bl	8001dbe <nrf_read_register>
 8001f36:	b978      	cbnz	r0, 8001f58 <nrf_clear_interrupts+0x36>
        return NRF_ERROR;
    }

    reg |= 7 << 4; // setting bits 4,5,6
 8001f38:	f89d 3007 	ldrb.w	r3, [sp, #7]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001f3c:	4622      	mov	r2, r4
    reg |= 7 << 4; // setting bits 4,5,6
 8001f3e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001f42:	2107      	movs	r1, #7
 8001f44:	4628      	mov	r0, r5
    reg |= 7 << 4; // setting bits 4,5,6
 8001f46:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001f4a:	f7ff ff48 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 8001f4e:	3000      	adds	r0, #0
 8001f50:	bf18      	it	ne
 8001f52:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001f54:	b003      	add	sp, #12
 8001f56:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e7fb      	b.n	8001f54 <nrf_clear_interrupts+0x32>

08001f5c <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ch &= 0x7F;
    uint8_t reg = 0;
 8001f5e:	ad02      	add	r5, sp, #8
 8001f60:	2300      	movs	r3, #0
 8001f62:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001f66:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8001f68:	462a      	mov	r2, r5
 8001f6a:	2105      	movs	r1, #5
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001f6c:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8001f6e:	f7ff ff26 	bl	8001dbe <nrf_read_register>
 8001f72:	b110      	cbz	r0, 8001f7a <nrf_set_rf_channel+0x1e>
 8001f74:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rf_channel = ch;
    return NRF_OK;
}
 8001f76:	b002      	add	sp, #8
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
    reg |= ch; // setting channel
 8001f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ch &= 0x7F;
 8001f7e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    reg |= ch; // setting channel
 8001f82:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8001f84:	462a      	mov	r2, r5
 8001f86:	2105      	movs	r1, #5
 8001f88:	4630      	mov	r0, r6
    reg |= ch; // setting channel
 8001f8a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8001f8e:	f7ff ff26 	bl	8001dde <nrf_write_register>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d1ee      	bne.n	8001f74 <nrf_set_rf_channel+0x18>
    dev->config.rf_channel = ch;
 8001f96:	71f4      	strb	r4, [r6, #7]
    return NRF_OK;
 8001f98:	e7ed      	b.n	8001f76 <nrf_set_rf_channel+0x1a>

08001f9a <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    count &= 0x0F;
    uint8_t reg = 0;
 8001f9c:	ad02      	add	r5, sp, #8
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001fa4:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8001faa:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001fac:	f7ff ff07 	bl	8001dbe <nrf_read_register>
 8001fb0:	b110      	cbz	r0, 8001fb8 <nrf_set_retransmittion_count+0x1e>
        return NRF_ERROR;
 8001fb2:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_count = count;
    return NRF_OK;
}
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8001fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    count &= 0x0F;
 8001fbc:	f004 040f 	and.w	r4, r4, #15
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8001fc0:	f023 030f 	bic.w	r3, r3, #15
    reg |= count; // setting count
 8001fc4:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001fc6:	462a      	mov	r2, r5
 8001fc8:	2104      	movs	r1, #4
 8001fca:	4630      	mov	r0, r6
    reg |= count; // setting count
 8001fcc:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001fd0:	f7ff ff05 	bl	8001dde <nrf_write_register>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1ec      	bne.n	8001fb2 <nrf_set_retransmittion_count+0x18>
    dev->config.retransmit_count = count;
 8001fd8:	7174      	strb	r4, [r6, #5]
    return NRF_OK;
 8001fda:	e7eb      	b.n	8001fb4 <nrf_set_retransmittion_count+0x1a>

08001fdc <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    delay &= 0x0F;
    uint8_t reg = 0;
 8001fde:	ad02      	add	r5, sp, #8
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001fe6:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001fe8:	462a      	mov	r2, r5
 8001fea:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001fec:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001fee:	f7ff fee6 	bl	8001dbe <nrf_read_register>
 8001ff2:	b110      	cbz	r0, 8001ffa <nrf_set_retransmittion_delay+0x1e>
        return NRF_ERROR;
 8001ff4:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_delay = delay;
    return NRF_OK;
}
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8001ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    delay &= 0x0F;
 8001ffe:	f004 040f 	and.w	r4, r4, #15
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8002002:	f003 030f 	and.w	r3, r3, #15
    reg |= delay << 4; // setting delay
 8002006:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800200a:	462a      	mov	r2, r5
 800200c:	2104      	movs	r1, #4
 800200e:	4630      	mov	r0, r6
    reg |= delay << 4; // setting delay
 8002010:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002014:	f7ff fee3 	bl	8001dde <nrf_write_register>
 8002018:	2800      	cmp	r0, #0
 800201a:	d1eb      	bne.n	8001ff4 <nrf_set_retransmittion_delay+0x18>
    dev->config.retransmit_delay = delay;
 800201c:	71b4      	strb	r4, [r6, #6]
    return NRF_OK;
 800201e:	e7ea      	b.n	8001ff6 <nrf_set_retransmittion_delay+0x1a>

08002020 <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002020:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002022:	ac02      	add	r4, sp, #8
 8002024:	2300      	movs	r3, #0
 8002026:	f804 3d01 	strb.w	r3, [r4, #-1]!
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 800202a:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 800202c:	4622      	mov	r2, r4
 800202e:	2103      	movs	r1, #3
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002030:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002032:	f7ff fec4 	bl	8001dbe <nrf_read_register>
 8002036:	b110      	cbz	r0, 800203e <nrf_set_address_width+0x1e>
        return NRF_ERROR;
 8002038:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.addr_width = width;
    return NRF_OK;
}
 800203a:	b002      	add	sp, #8
 800203c:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x03;  // clearing bits 0,1
 800203e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002042:	f003 0303 	and.w	r3, r3, #3
    reg |= width; // setting delay
 8002046:	4333      	orrs	r3, r6
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002048:	4622      	mov	r2, r4
 800204a:	2103      	movs	r1, #3
 800204c:	4628      	mov	r0, r5
    reg |= width; // setting delay
 800204e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002052:	f7ff fec4 	bl	8001dde <nrf_write_register>
 8002056:	2800      	cmp	r0, #0
 8002058:	d1ee      	bne.n	8002038 <nrf_set_address_width+0x18>
    dev->config.addr_width = width;
 800205a:	70ee      	strb	r6, [r5, #3]
    return NRF_OK;
 800205c:	e7ed      	b.n	800203a <nrf_set_address_width+0x1a>

0800205e <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 800205e:	b507      	push	{r0, r1, r2, lr}
 8002060:	aa02      	add	r2, sp, #8
 8002062:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8002066:	2102      	movs	r1, #2
 8002068:	f7ff feb9 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800206c:	3000      	adds	r0, #0
 800206e:	bf18      	it	ne
 8002070:	2001      	movne	r0, #1
 8002072:	b003      	add	sp, #12
 8002074:	f85d fb04 	ldr.w	pc, [sp], #4

08002078 <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002078:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 800207a:	ad02      	add	r5, sp, #8
 800207c:	2300      	movs	r3, #0
 800207e:	f805 3d01 	strb.w	r3, [r5, #-1]!
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002082:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002084:	462a      	mov	r2, r5
 8002086:	2101      	movs	r1, #1
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002088:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 800208a:	f7ff fe98 	bl	8001dbe <nrf_read_register>
 800208e:	2101      	movs	r1, #1
 8002090:	b978      	cbnz	r0, 80020b2 <nrf_enable_auto_ack+0x3a>

    reg |= 1 << pipe;
 8002092:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002096:	fa01 f404 	lsl.w	r4, r1, r4
 800209a:	431c      	orrs	r4, r3

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 800209c:	462a      	mov	r2, r5
 800209e:	4630      	mov	r0, r6
    reg |= 1 << pipe;
 80020a0:	f88d 4007 	strb.w	r4, [sp, #7]
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80020a4:	f7ff fe9b 	bl	8001dde <nrf_write_register>
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 80020a8:	3000      	adds	r0, #0
 80020aa:	bf18      	it	ne
 80020ac:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80020ae:	b002      	add	sp, #8
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 80020b2:	4608      	mov	r0, r1
 80020b4:	e7fb      	b.n	80020ae <nrf_enable_auto_ack+0x36>

080020b6 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 80020b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80020b8:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 80020ba:	460e      	mov	r6, r1
    uint8_t reg = 0;
 80020bc:	2100      	movs	r1, #0
 80020be:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80020c2:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 80020c4:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80020c6:	f7ff fe7a 	bl	8001dbe <nrf_read_register>
 80020ca:	b998      	cbnz	r0, 80020f4 <nrf_enable_crc+0x3e>
 80020cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (activate) {
 80020d0:	b16e      	cbz	r6, 80020ee <nrf_enable_crc+0x38>
        reg |= 1 << 3;
 80020d2:	f043 0308 	orr.w	r3, r3, #8
    } else {
        reg &= ~(1 << 3);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80020d6:	4622      	mov	r2, r4
 80020d8:	2100      	movs	r1, #0
 80020da:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 80020dc:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80020e0:	f7ff fe7d 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 80020e4:	3000      	adds	r0, #0
 80020e6:	bf18      	it	ne
 80020e8:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80020ea:	b002      	add	sp, #8
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 3);
 80020ee:	f023 0308 	bic.w	r3, r3, #8
 80020f2:	e7f0      	b.n	80020d6 <nrf_enable_crc+0x20>
        return NRF_ERROR;
 80020f4:	2001      	movs	r0, #1
 80020f6:	e7f8      	b.n	80020ea <nrf_enable_crc+0x34>

080020f8 <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 80020f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80020fa:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 80020fc:	460e      	mov	r6, r1
    uint8_t reg = 0;
 80020fe:	2100      	movs	r1, #0
 8002100:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002104:	4622      	mov	r2, r4
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8002106:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002108:	f7ff fe59 	bl	8001dbe <nrf_read_register>
 800210c:	b110      	cbz	r0, 8002114 <nrf_set_crc_width+0x1c>
        return NRF_ERROR;
 800210e:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.crc_width = width;
    return NRF_OK;
}
 8002110:	b002      	add	sp, #8
 8002112:	bd70      	pop	{r4, r5, r6, pc}
 8002114:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (width == NRF_CRC_WIDTH_2B) {
 8002118:	2e01      	cmp	r6, #1
        reg |= 1 << 2;
 800211a:	bf0c      	ite	eq
 800211c:	f043 0304 	orreq.w	r3, r3, #4
        reg &= ~(1 << 3);
 8002120:	f023 0308 	bicne.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002124:	4622      	mov	r2, r4
 8002126:	2100      	movs	r1, #0
 8002128:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 800212a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800212e:	f7ff fe56 	bl	8001dde <nrf_write_register>
 8002132:	2800      	cmp	r0, #0
 8002134:	d1eb      	bne.n	800210e <nrf_set_crc_width+0x16>
    dev->config.crc_width = width;
 8002136:	70ae      	strb	r6, [r5, #2]
    return NRF_OK;
 8002138:	e7ea      	b.n	8002110 <nrf_set_crc_width+0x18>

0800213a <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 800213a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 800213c:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 800213e:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002140:	2100      	movs	r1, #0
 8002142:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002146:	4622      	mov	r2, r4
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8002148:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800214a:	f7ff fe38 	bl	8001dbe <nrf_read_register>
 800214e:	b998      	cbnz	r0, 8002178 <nrf_power_up+0x3e>
 8002150:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (power_up) {
 8002154:	b16e      	cbz	r6, 8002172 <nrf_power_up+0x38>
        reg |= 1 << 1;
 8002156:	f043 0302 	orr.w	r3, r3, #2
    } else {
        reg &= ~(1 << 1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800215a:	4622      	mov	r2, r4
 800215c:	2100      	movs	r1, #0
 800215e:	4628      	mov	r0, r5
        reg &= ~(1 << 1);
 8002160:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002164:	f7ff fe3b 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 8002168:	3000      	adds	r0, #0
 800216a:	bf18      	it	ne
 800216c:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800216e:	b002      	add	sp, #8
 8002170:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 1);
 8002172:	f023 0302 	bic.w	r3, r3, #2
 8002176:	e7f0      	b.n	800215a <nrf_power_up+0x20>
        return NRF_ERROR;
 8002178:	2001      	movs	r0, #1
 800217a:	e7f8      	b.n	800216e <nrf_power_up+0x34>

0800217c <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 800217c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 800217e:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8002180:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002182:	2100      	movs	r1, #0
 8002184:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002188:	4622      	mov	r2, r4
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 800218a:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800218c:	f7ff fe17 	bl	8001dbe <nrf_read_register>
 8002190:	b998      	cbnz	r0, 80021ba <nrf_rx_tx_control+0x3e>
 8002192:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (rx) {
 8002196:	b16e      	cbz	r6, 80021b4 <nrf_rx_tx_control+0x38>
        reg |= 1;
 8002198:	f043 0301 	orr.w	r3, r3, #1
    } else {
        reg &= ~(1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800219c:	4622      	mov	r2, r4
 800219e:	2100      	movs	r1, #0
 80021a0:	4628      	mov	r0, r5
        reg &= ~(1);
 80021a2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80021a6:	f7ff fe1a 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 80021aa:	3000      	adds	r0, #0
 80021ac:	bf18      	it	ne
 80021ae:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80021b0:	b002      	add	sp, #8
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1);
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	e7f0      	b.n	800219c <nrf_rx_tx_control+0x20>
        return NRF_ERROR;
 80021ba:	2001      	movs	r0, #1
 80021bc:	e7f8      	b.n	80021b0 <nrf_rx_tx_control+0x34>
	...

080021c0 <nrf_irq_handler>:
void nrf_irq_handler(nrf24l01* dev) {
 80021c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t status = 0;
 80021c2:	ad02      	add	r5, sp, #8
 80021c4:	2300      	movs	r3, #0
 80021c6:	f805 3d02 	strb.w	r3, [r5, #-2]!
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 80021ca:	2107      	movs	r1, #7
 80021cc:	462a      	mov	r2, r5
void nrf_irq_handler(nrf24l01* dev) {
 80021ce:	4604      	mov	r4, r0
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 80021d0:	f7ff fdf5 	bl	8001dbe <nrf_read_register>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d17b      	bne.n	80022d0 <nrf_irq_handler+0x110>
    if ((status & (1 << 6))) { // RX FIFO Interrupt
 80021d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80021dc:	065e      	lsls	r6, r3, #25
 80021de:	d52e      	bpl.n	800223e <nrf_irq_handler+0x7e>
        uint8_t fifo_status = 0;
 80021e0:	ae02      	add	r6, sp, #8
 80021e2:	f806 0d01 	strb.w	r0, [r6, #-1]!
        ce_reset(dev);
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fd94 	bl	8001d14 <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 80021ec:	462a      	mov	r2, r5
 80021ee:	2107      	movs	r1, #7
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff fdf4 	bl	8001dde <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 80021f6:	4632      	mov	r2, r6
 80021f8:	2117      	movs	r1, #23
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff fddf 	bl	8001dbe <nrf_read_register>
        if ((fifo_status & 1) == 0) {
 8002200:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002204:	f013 0601 	ands.w	r6, r3, #1
 8002208:	d116      	bne.n	8002238 <nrf_irq_handler+0x78>
            uint8_t* rx_buffer = dev->config.rx_buffer;
 800220a:	6927      	ldr	r7, [r4, #16]
            nrf_read_rx_payload(dev, rx_buffer);
 800220c:	4620      	mov	r0, r4
 800220e:	4639      	mov	r1, r7
 8002210:	f7ff fdf5 	bl	8001dfe <nrf_read_rx_payload>
            status |= 1 << 6;
 8002214:	f89d 3006 	ldrb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8002218:	462a      	mov	r2, r5
            status |= 1 << 6;
 800221a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            nrf_write_register(dev, NRF_STATUS, &status);
 800221e:	2107      	movs	r1, #7
 8002220:	4620      	mov	r0, r4
            status |= 1 << 6;
 8002222:	f88d 3006 	strb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8002226:	f7ff fdda 	bl	8001dde <nrf_write_register>
	redata = data;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <nrf_irq_handler+0x114>)
	dev->rx_busy = 0;
 800222c:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
	redata = data;
 8002230:	601f      	str	r7, [r3, #0]
    recivingmsgflag=1;
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <nrf_irq_handler+0x118>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
        ce_set(dev);
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff fd70 	bl	8001d1e <ce_set>
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 800223e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002242:	0699      	lsls	r1, r3, #26
 8002244:	d51a      	bpl.n	800227c <nrf_irq_handler+0xbc>
        status |= 1 << 5;      // clear the interrupt flag
 8002246:	f043 0320 	orr.w	r3, r3, #32
        ce_reset(dev);
 800224a:	4620      	mov	r0, r4
        status |= 1 << 5;      // clear the interrupt flag
 800224c:	f88d 3006 	strb.w	r3, [sp, #6]
        ce_reset(dev);
 8002250:	f7ff fd60 	bl	8001d14 <ce_reset>
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002254:	2101      	movs	r1, #1
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff90 	bl	800217c <nrf_rx_tx_control>
        dev->state = NRF_STATE_RX;
 800225c:	2301      	movs	r3, #1
 800225e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        ce_set(dev);
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff fd5b 	bl	8001d1e <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002268:	462a      	mov	r2, r5
 800226a:	2107      	movs	r1, #7
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fdb6 	bl	8001dde <nrf_write_register>
        dev->tx_result = NRF_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8002278:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((status & (1 << 4))) { // MaxRetransmits reached
 800227c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002280:	06da      	lsls	r2, r3, #27
 8002282:	d525      	bpl.n	80022d0 <nrf_irq_handler+0x110>
        status |= 1 << 4;
 8002284:	f043 0310 	orr.w	r3, r3, #16
        nrf_flush_tx(dev);
 8002288:	4620      	mov	r0, r4
        status |= 1 << 4;
 800228a:	f88d 3006 	strb.w	r3, [sp, #6]
        nrf_flush_tx(dev);
 800228e:	f7ff fdf2 	bl	8001e76 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 8002292:	2100      	movs	r1, #0
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff ff50 	bl	800213a <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 800229a:	2101      	movs	r1, #1
 800229c:	4620      	mov	r0, r4
 800229e:	f7ff ff4c 	bl	800213a <nrf_power_up>
        ce_reset(dev);
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fd36 	bl	8001d14 <ce_reset>
        dev->state = NRF_STATE_RX;
 80022a8:	2601      	movs	r6, #1
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 80022aa:	2101      	movs	r1, #1
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7ff ff65 	bl	800217c <nrf_rx_tx_control>
        ce_set(dev);
 80022b2:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 80022b4:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
        ce_set(dev);
 80022b8:	f7ff fd31 	bl	8001d1e <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 80022bc:	462a      	mov	r2, r5
 80022be:	2107      	movs	r1, #7
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff fd8c 	bl	8001dde <nrf_write_register>
        dev->tx_busy   = 0;
 80022c6:	2300      	movs	r3, #0
        dev->tx_result = NRF_ERROR;
 80022c8:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 80022cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80022d0:	b003      	add	sp, #12
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	20000a08 	.word	0x20000a08
 80022d8:	20000090 	.word	0x20000090

080022dc <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 80022dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80022de:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 80022e0:	460e      	mov	r6, r1
    uint8_t reg = 0;
 80022e2:	2100      	movs	r1, #0
 80022e4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80022e8:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 80022ea:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80022ec:	f7ff fd67 	bl	8001dbe <nrf_read_register>
 80022f0:	b998      	cbnz	r0, 800231a <nrf_enable_rx_data_ready_irq+0x3e>
 80022f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (!activate) {
 80022f6:	b96e      	cbnz	r6, 8002314 <nrf_enable_rx_data_ready_irq+0x38>
        reg |= 1 << 6;
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    } else {
        reg &= ~(1 << 6);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80022fc:	4622      	mov	r2, r4
 80022fe:	2100      	movs	r1, #0
 8002300:	4628      	mov	r0, r5
        reg &= ~(1 << 6);
 8002302:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002306:	f7ff fd6a 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 800230a:	3000      	adds	r0, #0
 800230c:	bf18      	it	ne
 800230e:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002310:	b002      	add	sp, #8
 8002312:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 6);
 8002314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002318:	e7f0      	b.n	80022fc <nrf_enable_rx_data_ready_irq+0x20>
        return NRF_ERROR;
 800231a:	2001      	movs	r0, #1
 800231c:	e7f8      	b.n	8002310 <nrf_enable_rx_data_ready_irq+0x34>

0800231e <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 800231e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002320:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002322:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002324:	2100      	movs	r1, #0
 8002326:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800232a:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 800232c:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800232e:	f7ff fd46 	bl	8001dbe <nrf_read_register>
 8002332:	b998      	cbnz	r0, 800235c <nrf_enable_tx_data_sent_irq+0x3e>
 8002334:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8002338:	b96e      	cbnz	r6, 8002356 <nrf_enable_tx_data_sent_irq+0x38>
        reg |= 1 << 5;
 800233a:	f043 0320 	orr.w	r3, r3, #32
    } else {
        reg &= ~(1 << 5);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800233e:	4622      	mov	r2, r4
 8002340:	2100      	movs	r1, #0
 8002342:	4628      	mov	r0, r5
        reg &= ~(1 << 5);
 8002344:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002348:	f7ff fd49 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 800234c:	3000      	adds	r0, #0
 800234e:	bf18      	it	ne
 8002350:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002352:	b002      	add	sp, #8
 8002354:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 5);
 8002356:	f023 0320 	bic.w	r3, r3, #32
 800235a:	e7f0      	b.n	800233e <nrf_enable_tx_data_sent_irq+0x20>
        return NRF_ERROR;
 800235c:	2001      	movs	r0, #1
 800235e:	e7f8      	b.n	8002352 <nrf_enable_tx_data_sent_irq+0x34>

08002360 <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002360:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002362:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002364:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002366:	2100      	movs	r1, #0
 8002368:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800236c:	4622      	mov	r2, r4
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 800236e:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002370:	f7ff fd25 	bl	8001dbe <nrf_read_register>
 8002374:	b998      	cbnz	r0, 800239e <nrf_enable_max_retransmit_irq+0x3e>
 8002376:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 800237a:	b96e      	cbnz	r6, 8002398 <nrf_enable_max_retransmit_irq+0x38>
        reg |= 1 << 4;
 800237c:	f043 0310 	orr.w	r3, r3, #16
    } else {
        reg &= ~(1 << 4);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002380:	4622      	mov	r2, r4
 8002382:	2100      	movs	r1, #0
 8002384:	4628      	mov	r0, r5
        reg &= ~(1 << 4);
 8002386:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 800238a:	f7ff fd28 	bl	8001dde <nrf_write_register>
        return NRF_ERROR;
 800238e:	3000      	adds	r0, #0
 8002390:	bf18      	it	ne
 8002392:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002394:	b002      	add	sp, #8
 8002396:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 4);
 8002398:	f023 0310 	bic.w	r3, r3, #16
 800239c:	e7f0      	b.n	8002380 <nrf_enable_max_retransmit_irq+0x20>
        return NRF_ERROR;
 800239e:	2001      	movs	r0, #1
 80023a0:	e7f8      	b.n	8002394 <nrf_enable_max_retransmit_irq+0x34>

080023a2 <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 80023a2:	b530      	push	{r4, r5, lr}
 80023a4:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80023a6:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 80023a8:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	460a      	mov	r2, r1
 80023ae:	ab02      	add	r3, sp, #8
 80023b0:	212a      	movs	r1, #42	; 0x2a
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 80023b2:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 80023b4:	f7ff fcb8 	bl	8001d28 <nrf_send_command>
 80023b8:	b910      	cbnz	r0, 80023c0 <nrf_set_rx_address_p0+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 80023ba:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 80023bc:	b005      	add	sp, #20
 80023be:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 80023c0:	2001      	movs	r0, #1
 80023c2:	e7fb      	b.n	80023bc <nrf_set_rx_address_p0+0x1a>

080023c4 <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 80023c4:	b530      	push	{r4, r5, lr}
 80023c6:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 80023c8:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 80023ca:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	460a      	mov	r2, r1
 80023d0:	ab02      	add	r3, sp, #8
 80023d2:	212b      	movs	r1, #43	; 0x2b
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 80023d4:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 80023d6:	f7ff fca7 	bl	8001d28 <nrf_send_command>
 80023da:	b910      	cbnz	r0, 80023e2 <nrf_set_rx_address_p1+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 80023dc:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 80023de:	b005      	add	sp, #20
 80023e0:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 80023e2:	2001      	movs	r0, #1
 80023e4:	e7fb      	b.n	80023de <nrf_set_rx_address_p1+0x1a>

080023e6 <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 80023e6:	b530      	push	{r4, r5, lr}
 80023e8:	b085      	sub	sp, #20
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 80023ea:	2305      	movs	r3, #5
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 80023ec:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	460a      	mov	r2, r1
 80023f2:	ab02      	add	r3, sp, #8
 80023f4:	2130      	movs	r1, #48	; 0x30
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 80023f6:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 80023f8:	f7ff fc96 	bl	8001d28 <nrf_send_command>
 80023fc:	b910      	cbnz	r0, 8002404 <nrf_set_tx_address+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.tx_address = address;
 80023fe:	60ec      	str	r4, [r5, #12]
    return NRF_OK;
}
 8002400:	b005      	add	sp, #20
 8002402:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002404:	2001      	movs	r0, #1
 8002406:	e7fb      	b.n	8002400 <nrf_set_tx_address+0x1a>

08002408 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002408:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 800240a:	aa02      	add	r2, sp, #8
 800240c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002410:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002414:	2111      	movs	r1, #17
NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002416:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002418:	f7ff fce1 	bl	8001dde <nrf_write_register>
 800241c:	b120      	cbz	r0, 8002428 <nrf_set_rx_payload_width_p0+0x20>
        dev->config.payload_length = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 8002422:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8002424:	b002      	add	sp, #8
 8002426:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002428:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800242c:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 800242e:	e7f9      	b.n	8002424 <nrf_set_rx_payload_width_p0+0x1c>

08002430 <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8002430:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8002432:	aa02      	add	r2, sp, #8
 8002434:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002438:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 800243c:	2112      	movs	r1, #18
NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 800243e:	4604      	mov	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8002440:	f7ff fccd 	bl	8001dde <nrf_write_register>
 8002444:	b120      	cbz	r0, 8002450 <nrf_set_rx_payload_width_p1+0x20>
        dev->config.payload_length = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	7123      	strb	r3, [r4, #4]
        return NRF_ERROR;
 800244a:	2001      	movs	r0, #1
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 800244c:	b002      	add	sp, #8
 800244e:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002454:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8002456:	e7f9      	b.n	800244c <nrf_set_rx_payload_width_p1+0x1c>

08002458 <nrf_init>:
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8002458:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dev->config = *config;
 800245a:	460e      	mov	r6, r1
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 800245c:	4604      	mov	r4, r0
    dev->config = *config;
 800245e:	4605      	mov	r5, r0
 8002460:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002464:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002468:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800246a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246c:	6833      	ldr	r3, [r6, #0]
 800246e:	602b      	str	r3, [r5, #0]
    ce_reset(dev);
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff fc4f 	bl	8001d14 <ce_reset>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8002476:	2200      	movs	r2, #0
 8002478:	8c21      	ldrh	r1, [r4, #32]
 800247a:	69e0      	ldr	r0, [r4, #28]
 800247c:	f7fe fa18 	bl	80008b0 <HAL_GPIO_WritePin>
    uint8_t config_reg = 0;
 8002480:	ad02      	add	r5, sp, #8
    nrf_power_up(dev, true);
 8002482:	2101      	movs	r1, #1
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff fe58 	bl	800213a <nrf_power_up>
    uint8_t config_reg = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    while ((config_reg & 2) == 0) { // wait for powerup
 8002490:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002494:	f011 0102 	ands.w	r1, r1, #2
 8002498:	d053      	beq.n	8002542 <nrf_init+0xea>
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 800249a:	7921      	ldrb	r1, [r4, #4]
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ffb3 	bl	8002408 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 80024a2:	7921      	ldrb	r1, [r4, #4]
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ffc3 	bl	8002430 <nrf_set_rx_payload_width_p1>
    nrf_set_rx_address_p1(dev, dev->config.rx_address);
 80024aa:	68a1      	ldr	r1, [r4, #8]
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff89 	bl	80023c4 <nrf_set_rx_address_p1>
    nrf_set_rx_address_p0(dev, dev->config.tx_address);
 80024b2:	68e1      	ldr	r1, [r4, #12]
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ff74 	bl	80023a2 <nrf_set_rx_address_p0>
    nrf_set_tx_address(dev, dev->config.tx_address);
 80024ba:	68e1      	ldr	r1, [r4, #12]
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff ff92 	bl	80023e6 <nrf_set_tx_address>
    nrf_enable_rx_data_ready_irq(dev, 1);
 80024c2:	2101      	movs	r1, #1
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7ff ff09 	bl	80022dc <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 80024ca:	2101      	movs	r1, #1
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ff26 	bl	800231e <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 80024d2:	2101      	movs	r1, #1
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ff43 	bl	8002360 <nrf_enable_max_retransmit_irq>
    nrf_enable_crc(dev, 1);
 80024da:	2101      	movs	r1, #1
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff fdea 	bl	80020b6 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 80024e2:	78a1      	ldrb	r1, [r4, #2]
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7ff fe07 	bl	80020f8 <nrf_set_crc_width>
    nrf_set_address_width(dev, dev->config.addr_width);
 80024ea:	78e1      	ldrb	r1, [r4, #3]
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff fd97 	bl	8002020 <nrf_set_address_width>
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 80024f2:	79e1      	ldrb	r1, [r4, #7]
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff fd31 	bl	8001f5c <nrf_set_rf_channel>
    nrf_set_data_rate(dev, dev->config.data_rate);
 80024fa:	7821      	ldrb	r1, [r4, #0]
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff fce2 	bl	8001ec6 <nrf_set_data_rate>
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8002502:	7961      	ldrb	r1, [r4, #5]
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff fd48 	bl	8001f9a <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 800250a:	79a1      	ldrb	r1, [r4, #6]
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff fd65 	bl	8001fdc <nrf_set_retransmittion_delay>
    nrf_set_rx_pipes(dev, 0x03);
 8002512:	2103      	movs	r1, #3
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fda2 	bl	800205e <nrf_set_rx_pipes>
    nrf_enable_auto_ack(dev, 0);
 800251a:	2100      	movs	r1, #0
 800251c:	4620      	mov	r0, r4
 800251e:	f7ff fdab 	bl	8002078 <nrf_enable_auto_ack>
    nrf_clear_interrupts(dev);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff fcfd 	bl	8001f22 <nrf_clear_interrupts>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002528:	2101      	movs	r1, #1
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff fe26 	bl	800217c <nrf_rx_tx_control>
    nrf_flush_rx(dev);
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff fcb4 	bl	8001e9e <nrf_flush_rx>
    ce_set(dev);
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff fbf1 	bl	8001d1e <ce_set>
}
 800253c:	2000      	movs	r0, #0
 800253e:	b002      	add	sp, #8
 8002540:	bd70      	pop	{r4, r5, r6, pc}
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 8002542:	462a      	mov	r2, r5
 8002544:	4620      	mov	r0, r4
 8002546:	f7ff fc3a 	bl	8001dbe <nrf_read_register>
 800254a:	e7a1      	b.n	8002490 <nrf_init+0x38>

0800254c <nrf_send_packet>:

NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 800254c:	b538      	push	{r3, r4, r5, lr}

	dev->tx_busy = 1;
 800254e:	2301      	movs	r3, #1
NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8002550:	4604      	mov	r4, r0
	dev->tx_busy = 1;
 8002552:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8002556:	460d      	mov	r5, r1

    ce_reset(dev);
 8002558:	f7ff fbdc 	bl	8001d14 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 800255c:	2100      	movs	r1, #0
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff fe0c 	bl	800217c <nrf_rx_tx_control>
     nrf_write_tx_payload(dev, data);
 8002564:	4629      	mov	r1, r5
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff fc5d 	bl	8001e26 <nrf_write_tx_payload>
    ce_set(dev);
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff fbd6 	bl	8001d1e <ce_set>
    while (dev->tx_busy == 1) {
 8002572:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002576:	2b01      	cmp	r3, #1
 8002578:	d0fb      	beq.n	8002572 <nrf_send_packet+0x26>

    } // wait for end of transmittion

    return dev->tx_result;
 800257a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 800257e:	bd38      	pop	{r3, r4, r5, pc}

08002580 <nrf_send_packet_noack>:

NRF_RESULT nrf_send_packet_noack(nrf24l01* dev, const uint8_t* data) {
 8002580:	b538      	push	{r3, r4, r5, lr}
    dev->tx_busy = 1;
 8002582:	2301      	movs	r3, #1
NRF_RESULT nrf_send_packet_noack(nrf24l01* dev, const uint8_t* data) {
 8002584:	4604      	mov	r4, r0
    dev->tx_busy = 1;
 8002586:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
NRF_RESULT nrf_send_packet_noack(nrf24l01* dev, const uint8_t* data) {
 800258a:	460d      	mov	r5, r1

    ce_reset(dev);
 800258c:	f7ff fbc2 	bl	8001d14 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 8002590:	2100      	movs	r1, #0
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff fdf2 	bl	800217c <nrf_rx_tx_control>
    nrf_write_tx_payload_noack(dev, data);
 8002598:	4629      	mov	r1, r5
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff fc57 	bl	8001e4e <nrf_write_tx_payload_noack>
    ce_set(dev);
 80025a0:	4620      	mov	r0, r4
 80025a2:	f7ff fbbc 	bl	8001d1e <ce_set>

    while (dev->tx_busy == 1) {} // wait for end of transmittion
 80025a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d0fb      	beq.n	80025a6 <nrf_send_packet_noack+0x26>

    return dev->tx_result;
 80025ae:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 80025b2:	bd38      	pop	{r3, r4, r5, pc}

080025b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_MspInit+0x3c>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	9100      	str	r1, [sp, #0]
 80025bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
 80025c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025ca:	9200      	str	r2, [sp, #0]
 80025cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	9101      	str	r1, [sp, #4]
 80025d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e4:	f7fe f82c 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e8:	b003      	add	sp, #12
 80025ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	4604      	mov	r4, r0
 80025f8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fa:	2214      	movs	r2, #20
 80025fc:	2100      	movs	r1, #0
 80025fe:	a803      	add	r0, sp, #12
 8002600:	f000 f95c 	bl	80028bc <memset>
  if(hspi->Instance==SPI2)
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_SPI_MspInit+0x90>)
 8002608:	429a      	cmp	r2, r3
 800260a:	d138      	bne.n	800267e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800260c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002610:	2400      	movs	r4, #0
 8002612:	9400      	str	r4, [sp, #0]
 8002614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	481c      	ldr	r0, [pc, #112]	; (8002688 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002620:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002624:	9200      	str	r2, [sp, #0]
 8002626:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002628:	9401      	str	r4, [sp, #4]
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	f042 0204 	orr.w	r2, r2, #4
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
 8002632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002634:	f002 0204 	and.w	r2, r2, #4
 8002638:	9201      	str	r2, [sp, #4]
 800263a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263c:	9402      	str	r4, [sp, #8]
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	f042 0202 	orr.w	r2, r2, #2
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002650:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800265a:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800265c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002662:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002664:	f7fe f856 	bl	8000714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	a903      	add	r1, sp, #12
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002670:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002678:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267a:	f7fe f84b 	bl	8000714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800267e:	b009      	add	sp, #36	; 0x24
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002682:	bf00      	nop
 8002684:	40003800 	.word	0x40003800
 8002688:	40020800 	.word	0x40020800
 800268c:	40020400 	.word	0x40020400

08002690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM2)
 8002692:	6803      	ldr	r3, [r0, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d116      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800269a:	2200      	movs	r2, #0
 800269c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026a4:	f041 0101 	orr.w	r1, r1, #1
 80026a8:	6419      	str	r1, [r3, #64]	; 0x40
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026b2:	201c      	movs	r0, #28
 80026b4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026b8:	f7fd ffd4 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026bc:	201c      	movs	r0, #28
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026be:	f7fe f805 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026c2:	b005      	add	sp, #20
 80026c4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <HAL_TIM_Base_MspInit+0x84>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d111      	bne.n	80026f2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ce:	2200      	movs	r2, #0
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_TIM_Base_MspInit+0x88>)
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026d6:	f041 0102 	orr.w	r1, r1, #2
 80026da:	6419      	str	r1, [r3, #64]	; 0x40
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026e4:	201d      	movs	r0, #29
 80026e6:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026ea:	f7fd ffbb 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026ee:	201d      	movs	r0, #29
 80026f0:	e7e5      	b.n	80026be <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM4)
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_TIM_Base_MspInit+0x8c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d1e4      	bne.n	80026c2 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	9303      	str	r3, [sp, #12]
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_TIM_Base_MspInit+0x88>)
 80026fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002700:	f042 0204 	orr.w	r2, r2, #4
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	9303      	str	r3, [sp, #12]
 800270e:	9b03      	ldr	r3, [sp, #12]
}
 8002710:	e7d7      	b.n	80026c2 <HAL_TIM_Base_MspInit+0x32>
 8002712:	bf00      	nop
 8002714:	40000400 	.word	0x40000400
 8002718:	40023800 	.word	0x40023800
 800271c:	40000800 	.word	0x40000800

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002726:	2214      	movs	r2, #20
 8002728:	2100      	movs	r1, #0
 800272a:	a803      	add	r0, sp, #12
 800272c:	f000 f8c6 	bl	80028bc <memset>
  if(huart->Instance==USART2)
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_UART_MspInit+0x60>)
 8002734:	429a      	cmp	r2, r3
 8002736:	d120      	bne.n	800277a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002738:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800273c:	2100      	movs	r1, #0
 800273e:	9101      	str	r1, [sp, #4]
 8002740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	4810      	ldr	r0, [pc, #64]	; (8002784 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002744:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
 800274a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	9102      	str	r1, [sp, #8]
 8002756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002768:	230c      	movs	r3, #12
 800276a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002770:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002772:	2307      	movs	r3, #7
 8002774:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f7fd ffcd 	bl	8000714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800277a:	b008      	add	sp, #32
 800277c:	bd10      	pop	{r4, pc}
 800277e:	bf00      	nop
 8002780:	40004400 	.word	0x40004400
 8002784:	40020000 	.word	0x40020000

08002788 <NMI_Handler>:
 8002788:	4770      	bx	lr

0800278a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278a:	e7fe      	b.n	800278a <HardFault_Handler>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	e7fe      	b.n	800278c <MemManage_Handler>

0800278e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278e:	e7fe      	b.n	800278e <BusFault_Handler>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler>

08002792 <SVC_Handler>:
 8002792:	4770      	bx	lr

08002794 <DebugMon_Handler>:
 8002794:	4770      	bx	lr

08002796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002798:	f7fd bf40 	b.w	800061c <HAL_IncTick>

0800279c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800279c:	2010      	movs	r0, #16
 800279e:	f7fe b88d 	b.w	80008bc <HAL_GPIO_EXTI_IRQHandler>
	...

080027a4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <TIM2_IRQHandler+0x8>)
 80027a6:	f7fe bce5 	b.w	8001174 <HAL_TIM_IRQHandler>
 80027aa:	bf00      	nop
 80027ac:	200005a0 	.word	0x200005a0

080027b0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027b0:	4801      	ldr	r0, [pc, #4]	; (80027b8 <TIM3_IRQHandler+0x8>)
 80027b2:	f7fe bcdf 	b.w	8001174 <HAL_TIM_IRQHandler>
 80027b6:	bf00      	nop
 80027b8:	2000013c 	.word	0x2000013c

080027bc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027c0:	f7fe b87c 	b.w	80008bc <HAL_GPIO_EXTI_IRQHandler>

080027c4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80027c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <_sbrk+0x2c>)
 80027c8:	6819      	ldr	r1, [r3, #0]
{
 80027ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80027cc:	b909      	cbnz	r1, 80027d2 <_sbrk+0xe>
		heap_end = &end;
 80027ce:	4909      	ldr	r1, [pc, #36]	; (80027f4 <_sbrk+0x30>)
 80027d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80027d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80027d4:	4669      	mov	r1, sp
 80027d6:	4402      	add	r2, r0
 80027d8:	428a      	cmp	r2, r1
 80027da:	d906      	bls.n	80027ea <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80027dc:	f000 f844 	bl	8002868 <__errno>
 80027e0:	230c      	movs	r3, #12
 80027e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80027ea:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80027ec:	bd08      	pop	{r3, pc}
 80027ee:	bf00      	nop
 80027f0:	20000094 	.word	0x20000094
 80027f4:	20000a10 	.word	0x20000a10

080027f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <SystemInit+0x18>)
 80027fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800284c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800281a:	e003      	b.n	8002824 <LoopCopyDataInit>

0800281c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800281e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002822:	3104      	adds	r1, #4

08002824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800282a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800282c:	d3f6      	bcc.n	800281c <CopyDataInit>
  ldr  r2, =_sbss
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002830:	e002      	b.n	8002838 <LoopFillZerobss>

08002832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002834:	f842 3b04 	str.w	r3, [r2], #4

08002838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800283a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800283c:	d3f9      	bcc.n	8002832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800283e:	f7ff ffdb 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002842:	f000 f817 	bl	8002874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002846:	f7ff f823 	bl	8001890 <main>
  bx  lr    
 800284a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800284c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002850:	08003204 	.word	0x08003204
  ldr  r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002858:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800285c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002860:	20000a10 	.word	0x20000a10

08002864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC_IRQHandler>
	...

08002868 <__errno>:
 8002868:	4b01      	ldr	r3, [pc, #4]	; (8002870 <__errno+0x8>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2000000c 	.word	0x2000000c

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	4e0d      	ldr	r6, [pc, #52]	; (80028ac <__libc_init_array+0x38>)
 8002878:	4c0d      	ldr	r4, [pc, #52]	; (80028b0 <__libc_init_array+0x3c>)
 800287a:	1ba4      	subs	r4, r4, r6
 800287c:	10a4      	asrs	r4, r4, #2
 800287e:	2500      	movs	r5, #0
 8002880:	42a5      	cmp	r5, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	4e0b      	ldr	r6, [pc, #44]	; (80028b4 <__libc_init_array+0x40>)
 8002886:	4c0c      	ldr	r4, [pc, #48]	; (80028b8 <__libc_init_array+0x44>)
 8002888:	f000 fc60 	bl	800314c <_init>
 800288c:	1ba4      	subs	r4, r4, r6
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	2500      	movs	r5, #0
 8002892:	42a5      	cmp	r5, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800289c:	4798      	blx	r3
 800289e:	3501      	adds	r5, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a6:	4798      	blx	r3
 80028a8:	3501      	adds	r5, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	080031fc 	.word	0x080031fc
 80028b0:	080031fc 	.word	0x080031fc
 80028b4:	080031fc 	.word	0x080031fc
 80028b8:	08003200 	.word	0x08003200

080028bc <memset>:
 80028bc:	4402      	add	r2, r0
 80028be:	4603      	mov	r3, r0
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d100      	bne.n	80028c6 <memset+0xa>
 80028c4:	4770      	bx	lr
 80028c6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ca:	e7f9      	b.n	80028c0 <memset+0x4>

080028cc <siprintf>:
 80028cc:	b40e      	push	{r1, r2, r3}
 80028ce:	b500      	push	{lr}
 80028d0:	b09c      	sub	sp, #112	; 0x70
 80028d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80028d6:	ab1d      	add	r3, sp, #116	; 0x74
 80028d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80028dc:	9002      	str	r0, [sp, #8]
 80028de:	9006      	str	r0, [sp, #24]
 80028e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028e4:	480a      	ldr	r0, [pc, #40]	; (8002910 <siprintf+0x44>)
 80028e6:	9104      	str	r1, [sp, #16]
 80028e8:	9107      	str	r1, [sp, #28]
 80028ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80028f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	a902      	add	r1, sp, #8
 80028fc:	f000 f888 	bl	8002a10 <_svfiprintf_r>
 8002900:	9b02      	ldr	r3, [sp, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	b01c      	add	sp, #112	; 0x70
 8002908:	f85d eb04 	ldr.w	lr, [sp], #4
 800290c:	b003      	add	sp, #12
 800290e:	4770      	bx	lr
 8002910:	2000000c 	.word	0x2000000c

08002914 <strcpy>:
 8002914:	4603      	mov	r3, r0
 8002916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800291a:	f803 2b01 	strb.w	r2, [r3], #1
 800291e:	2a00      	cmp	r2, #0
 8002920:	d1f9      	bne.n	8002916 <strcpy+0x2>
 8002922:	4770      	bx	lr

08002924 <strstr>:
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002926:	7803      	ldrb	r3, [r0, #0]
 8002928:	b133      	cbz	r3, 8002938 <strstr+0x14>
 800292a:	4603      	mov	r3, r0
 800292c:	4618      	mov	r0, r3
 800292e:	1c5e      	adds	r6, r3, #1
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b933      	cbnz	r3, 8002942 <strstr+0x1e>
 8002934:	4618      	mov	r0, r3
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002938:	780b      	ldrb	r3, [r1, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf18      	it	ne
 800293e:	2000      	movne	r0, #0
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002942:	1e4d      	subs	r5, r1, #1
 8002944:	1e44      	subs	r4, r0, #1
 8002946:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800294a:	2a00      	cmp	r2, #0
 800294c:	d0f3      	beq.n	8002936 <strstr+0x12>
 800294e:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8002952:	4297      	cmp	r7, r2
 8002954:	4633      	mov	r3, r6
 8002956:	d0f6      	beq.n	8002946 <strstr+0x22>
 8002958:	e7e8      	b.n	800292c <strstr+0x8>

0800295a <__ssputs_r>:
 800295a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295e:	688e      	ldr	r6, [r1, #8]
 8002960:	429e      	cmp	r6, r3
 8002962:	4682      	mov	sl, r0
 8002964:	460c      	mov	r4, r1
 8002966:	4691      	mov	r9, r2
 8002968:	4698      	mov	r8, r3
 800296a:	d835      	bhi.n	80029d8 <__ssputs_r+0x7e>
 800296c:	898a      	ldrh	r2, [r1, #12]
 800296e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002972:	d031      	beq.n	80029d8 <__ssputs_r+0x7e>
 8002974:	6825      	ldr	r5, [r4, #0]
 8002976:	6909      	ldr	r1, [r1, #16]
 8002978:	1a6f      	subs	r7, r5, r1
 800297a:	6965      	ldr	r5, [r4, #20]
 800297c:	2302      	movs	r3, #2
 800297e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002982:	fb95 f5f3 	sdiv	r5, r5, r3
 8002986:	f108 0301 	add.w	r3, r8, #1
 800298a:	443b      	add	r3, r7
 800298c:	429d      	cmp	r5, r3
 800298e:	bf38      	it	cc
 8002990:	461d      	movcc	r5, r3
 8002992:	0553      	lsls	r3, r2, #21
 8002994:	d531      	bpl.n	80029fa <__ssputs_r+0xa0>
 8002996:	4629      	mov	r1, r5
 8002998:	f000 fb38 	bl	800300c <_malloc_r>
 800299c:	4606      	mov	r6, r0
 800299e:	b950      	cbnz	r0, 80029b6 <__ssputs_r+0x5c>
 80029a0:	230c      	movs	r3, #12
 80029a2:	f8ca 3000 	str.w	r3, [sl]
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ac:	81a3      	strh	r3, [r4, #12]
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b6:	463a      	mov	r2, r7
 80029b8:	6921      	ldr	r1, [r4, #16]
 80029ba:	f000 fab3 	bl	8002f24 <memcpy>
 80029be:	89a3      	ldrh	r3, [r4, #12]
 80029c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c8:	81a3      	strh	r3, [r4, #12]
 80029ca:	6126      	str	r6, [r4, #16]
 80029cc:	6165      	str	r5, [r4, #20]
 80029ce:	443e      	add	r6, r7
 80029d0:	1bed      	subs	r5, r5, r7
 80029d2:	6026      	str	r6, [r4, #0]
 80029d4:	60a5      	str	r5, [r4, #8]
 80029d6:	4646      	mov	r6, r8
 80029d8:	4546      	cmp	r6, r8
 80029da:	bf28      	it	cs
 80029dc:	4646      	movcs	r6, r8
 80029de:	4632      	mov	r2, r6
 80029e0:	4649      	mov	r1, r9
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	f000 faa9 	bl	8002f3a <memmove>
 80029e8:	68a3      	ldr	r3, [r4, #8]
 80029ea:	1b9b      	subs	r3, r3, r6
 80029ec:	60a3      	str	r3, [r4, #8]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	441e      	add	r6, r3
 80029f2:	6026      	str	r6, [r4, #0]
 80029f4:	2000      	movs	r0, #0
 80029f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fa:	462a      	mov	r2, r5
 80029fc:	f000 fb64 	bl	80030c8 <_realloc_r>
 8002a00:	4606      	mov	r6, r0
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1e1      	bne.n	80029ca <__ssputs_r+0x70>
 8002a06:	6921      	ldr	r1, [r4, #16]
 8002a08:	4650      	mov	r0, sl
 8002a0a:	f000 fab1 	bl	8002f70 <_free_r>
 8002a0e:	e7c7      	b.n	80029a0 <__ssputs_r+0x46>

08002a10 <_svfiprintf_r>:
 8002a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	b09d      	sub	sp, #116	; 0x74
 8002a16:	4680      	mov	r8, r0
 8002a18:	9303      	str	r3, [sp, #12]
 8002a1a:	898b      	ldrh	r3, [r1, #12]
 8002a1c:	061c      	lsls	r4, r3, #24
 8002a1e:	460d      	mov	r5, r1
 8002a20:	4616      	mov	r6, r2
 8002a22:	d50f      	bpl.n	8002a44 <_svfiprintf_r+0x34>
 8002a24:	690b      	ldr	r3, [r1, #16]
 8002a26:	b96b      	cbnz	r3, 8002a44 <_svfiprintf_r+0x34>
 8002a28:	2140      	movs	r1, #64	; 0x40
 8002a2a:	f000 faef 	bl	800300c <_malloc_r>
 8002a2e:	6028      	str	r0, [r5, #0]
 8002a30:	6128      	str	r0, [r5, #16]
 8002a32:	b928      	cbnz	r0, 8002a40 <_svfiprintf_r+0x30>
 8002a34:	230c      	movs	r3, #12
 8002a36:	f8c8 3000 	str.w	r3, [r8]
 8002a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3e:	e0c5      	b.n	8002bcc <_svfiprintf_r+0x1bc>
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	616b      	str	r3, [r5, #20]
 8002a44:	2300      	movs	r3, #0
 8002a46:	9309      	str	r3, [sp, #36]	; 0x24
 8002a48:	2320      	movs	r3, #32
 8002a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a4e:	2330      	movs	r3, #48	; 0x30
 8002a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a54:	f04f 0b01 	mov.w	fp, #1
 8002a58:	4637      	mov	r7, r6
 8002a5a:	463c      	mov	r4, r7
 8002a5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13c      	bne.n	8002ade <_svfiprintf_r+0xce>
 8002a64:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a68:	d00b      	beq.n	8002a82 <_svfiprintf_r+0x72>
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	4632      	mov	r2, r6
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4640      	mov	r0, r8
 8002a72:	f7ff ff72 	bl	800295a <__ssputs_r>
 8002a76:	3001      	adds	r0, #1
 8002a78:	f000 80a3 	beq.w	8002bc2 <_svfiprintf_r+0x1b2>
 8002a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a7e:	4453      	add	r3, sl
 8002a80:	9309      	str	r3, [sp, #36]	; 0x24
 8002a82:	783b      	ldrb	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 809c 	beq.w	8002bc2 <_svfiprintf_r+0x1b2>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	9304      	str	r3, [sp, #16]
 8002a92:	9307      	str	r3, [sp, #28]
 8002a94:	9205      	str	r2, [sp, #20]
 8002a96:	9306      	str	r3, [sp, #24]
 8002a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	7821      	ldrb	r1, [r4, #0]
 8002aa2:	4850      	ldr	r0, [pc, #320]	; (8002be4 <_svfiprintf_r+0x1d4>)
 8002aa4:	f7fd fba4 	bl	80001f0 <memchr>
 8002aa8:	1c67      	adds	r7, r4, #1
 8002aaa:	9b04      	ldr	r3, [sp, #16]
 8002aac:	b9d8      	cbnz	r0, 8002ae6 <_svfiprintf_r+0xd6>
 8002aae:	06d9      	lsls	r1, r3, #27
 8002ab0:	bf44      	itt	mi
 8002ab2:	2220      	movmi	r2, #32
 8002ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ab8:	071a      	lsls	r2, r3, #28
 8002aba:	bf44      	itt	mi
 8002abc:	222b      	movmi	r2, #43	; 0x2b
 8002abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ac2:	7822      	ldrb	r2, [r4, #0]
 8002ac4:	2a2a      	cmp	r2, #42	; 0x2a
 8002ac6:	d016      	beq.n	8002af6 <_svfiprintf_r+0xe6>
 8002ac8:	9a07      	ldr	r2, [sp, #28]
 8002aca:	2100      	movs	r1, #0
 8002acc:	200a      	movs	r0, #10
 8002ace:	4627      	mov	r7, r4
 8002ad0:	3401      	adds	r4, #1
 8002ad2:	783b      	ldrb	r3, [r7, #0]
 8002ad4:	3b30      	subs	r3, #48	; 0x30
 8002ad6:	2b09      	cmp	r3, #9
 8002ad8:	d951      	bls.n	8002b7e <_svfiprintf_r+0x16e>
 8002ada:	b1c9      	cbz	r1, 8002b10 <_svfiprintf_r+0x100>
 8002adc:	e011      	b.n	8002b02 <_svfiprintf_r+0xf2>
 8002ade:	2b25      	cmp	r3, #37	; 0x25
 8002ae0:	d0c0      	beq.n	8002a64 <_svfiprintf_r+0x54>
 8002ae2:	4627      	mov	r7, r4
 8002ae4:	e7b9      	b.n	8002a5a <_svfiprintf_r+0x4a>
 8002ae6:	4a3f      	ldr	r2, [pc, #252]	; (8002be4 <_svfiprintf_r+0x1d4>)
 8002ae8:	1a80      	subs	r0, r0, r2
 8002aea:	fa0b f000 	lsl.w	r0, fp, r0
 8002aee:	4318      	orrs	r0, r3
 8002af0:	9004      	str	r0, [sp, #16]
 8002af2:	463c      	mov	r4, r7
 8002af4:	e7d3      	b.n	8002a9e <_svfiprintf_r+0x8e>
 8002af6:	9a03      	ldr	r2, [sp, #12]
 8002af8:	1d11      	adds	r1, r2, #4
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	9103      	str	r1, [sp, #12]
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	db01      	blt.n	8002b06 <_svfiprintf_r+0xf6>
 8002b02:	9207      	str	r2, [sp, #28]
 8002b04:	e004      	b.n	8002b10 <_svfiprintf_r+0x100>
 8002b06:	4252      	negs	r2, r2
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	9207      	str	r2, [sp, #28]
 8002b0e:	9304      	str	r3, [sp, #16]
 8002b10:	783b      	ldrb	r3, [r7, #0]
 8002b12:	2b2e      	cmp	r3, #46	; 0x2e
 8002b14:	d10e      	bne.n	8002b34 <_svfiprintf_r+0x124>
 8002b16:	787b      	ldrb	r3, [r7, #1]
 8002b18:	2b2a      	cmp	r3, #42	; 0x2a
 8002b1a:	f107 0101 	add.w	r1, r7, #1
 8002b1e:	d132      	bne.n	8002b86 <_svfiprintf_r+0x176>
 8002b20:	9b03      	ldr	r3, [sp, #12]
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	9203      	str	r2, [sp, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bfb8      	it	lt
 8002b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b30:	3702      	adds	r7, #2
 8002b32:	9305      	str	r3, [sp, #20]
 8002b34:	4c2c      	ldr	r4, [pc, #176]	; (8002be8 <_svfiprintf_r+0x1d8>)
 8002b36:	7839      	ldrb	r1, [r7, #0]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fd fb58 	bl	80001f0 <memchr>
 8002b40:	b138      	cbz	r0, 8002b52 <_svfiprintf_r+0x142>
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	1b00      	subs	r0, r0, r4
 8002b46:	fa03 f000 	lsl.w	r0, r3, r0
 8002b4a:	9b04      	ldr	r3, [sp, #16]
 8002b4c:	4303      	orrs	r3, r0
 8002b4e:	9304      	str	r3, [sp, #16]
 8002b50:	3701      	adds	r7, #1
 8002b52:	7839      	ldrb	r1, [r7, #0]
 8002b54:	4825      	ldr	r0, [pc, #148]	; (8002bec <_svfiprintf_r+0x1dc>)
 8002b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b5a:	2206      	movs	r2, #6
 8002b5c:	1c7e      	adds	r6, r7, #1
 8002b5e:	f7fd fb47 	bl	80001f0 <memchr>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d035      	beq.n	8002bd2 <_svfiprintf_r+0x1c2>
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <_svfiprintf_r+0x1e0>)
 8002b68:	b9fb      	cbnz	r3, 8002baa <_svfiprintf_r+0x19a>
 8002b6a:	9b03      	ldr	r3, [sp, #12]
 8002b6c:	3307      	adds	r3, #7
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	3308      	adds	r3, #8
 8002b74:	9303      	str	r3, [sp, #12]
 8002b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b78:	444b      	add	r3, r9
 8002b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7c:	e76c      	b.n	8002a58 <_svfiprintf_r+0x48>
 8002b7e:	fb00 3202 	mla	r2, r0, r2, r3
 8002b82:	2101      	movs	r1, #1
 8002b84:	e7a3      	b.n	8002ace <_svfiprintf_r+0xbe>
 8002b86:	2300      	movs	r3, #0
 8002b88:	9305      	str	r3, [sp, #20]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	240a      	movs	r4, #10
 8002b8e:	460f      	mov	r7, r1
 8002b90:	3101      	adds	r1, #1
 8002b92:	783a      	ldrb	r2, [r7, #0]
 8002b94:	3a30      	subs	r2, #48	; 0x30
 8002b96:	2a09      	cmp	r2, #9
 8002b98:	d903      	bls.n	8002ba2 <_svfiprintf_r+0x192>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ca      	beq.n	8002b34 <_svfiprintf_r+0x124>
 8002b9e:	9005      	str	r0, [sp, #20]
 8002ba0:	e7c8      	b.n	8002b34 <_svfiprintf_r+0x124>
 8002ba2:	fb04 2000 	mla	r0, r4, r0, r2
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e7f1      	b.n	8002b8e <_svfiprintf_r+0x17e>
 8002baa:	ab03      	add	r3, sp, #12
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	462a      	mov	r2, r5
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <_svfiprintf_r+0x1e4>)
 8002bb2:	a904      	add	r1, sp, #16
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	f3af 8000 	nop.w
 8002bba:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bbe:	4681      	mov	r9, r0
 8002bc0:	d1d9      	bne.n	8002b76 <_svfiprintf_r+0x166>
 8002bc2:	89ab      	ldrh	r3, [r5, #12]
 8002bc4:	065b      	lsls	r3, r3, #25
 8002bc6:	f53f af38 	bmi.w	8002a3a <_svfiprintf_r+0x2a>
 8002bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bcc:	b01d      	add	sp, #116	; 0x74
 8002bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd2:	ab03      	add	r3, sp, #12
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	462a      	mov	r2, r5
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <_svfiprintf_r+0x1e4>)
 8002bda:	a904      	add	r1, sp, #16
 8002bdc:	4640      	mov	r0, r8
 8002bde:	f000 f881 	bl	8002ce4 <_printf_i>
 8002be2:	e7ea      	b.n	8002bba <_svfiprintf_r+0x1aa>
 8002be4:	080031c0 	.word	0x080031c0
 8002be8:	080031c6 	.word	0x080031c6
 8002bec:	080031ca 	.word	0x080031ca
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	0800295b 	.word	0x0800295b

08002bf8 <_printf_common>:
 8002bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bfc:	4691      	mov	r9, r2
 8002bfe:	461f      	mov	r7, r3
 8002c00:	688a      	ldr	r2, [r1, #8]
 8002c02:	690b      	ldr	r3, [r1, #16]
 8002c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bfb8      	it	lt
 8002c0c:	4613      	movlt	r3, r2
 8002c0e:	f8c9 3000 	str.w	r3, [r9]
 8002c12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c16:	4606      	mov	r6, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	b112      	cbz	r2, 8002c22 <_printf_common+0x2a>
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f8c9 3000 	str.w	r3, [r9]
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	0699      	lsls	r1, r3, #26
 8002c26:	bf42      	ittt	mi
 8002c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c2c:	3302      	addmi	r3, #2
 8002c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c32:	6825      	ldr	r5, [r4, #0]
 8002c34:	f015 0506 	ands.w	r5, r5, #6
 8002c38:	d107      	bne.n	8002c4a <_printf_common+0x52>
 8002c3a:	f104 0a19 	add.w	sl, r4, #25
 8002c3e:	68e3      	ldr	r3, [r4, #12]
 8002c40:	f8d9 2000 	ldr.w	r2, [r9]
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	429d      	cmp	r5, r3
 8002c48:	db29      	blt.n	8002c9e <_printf_common+0xa6>
 8002c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	3300      	adds	r3, #0
 8002c52:	bf18      	it	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	0692      	lsls	r2, r2, #26
 8002c58:	d42e      	bmi.n	8002cb8 <_printf_common+0xc0>
 8002c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c5e:	4639      	mov	r1, r7
 8002c60:	4630      	mov	r0, r6
 8002c62:	47c0      	blx	r8
 8002c64:	3001      	adds	r0, #1
 8002c66:	d021      	beq.n	8002cac <_printf_common+0xb4>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	68e5      	ldr	r5, [r4, #12]
 8002c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c70:	f003 0306 	and.w	r3, r3, #6
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	bf08      	it	eq
 8002c78:	1aad      	subeq	r5, r5, r2
 8002c7a:	68a3      	ldr	r3, [r4, #8]
 8002c7c:	6922      	ldr	r2, [r4, #16]
 8002c7e:	bf0c      	ite	eq
 8002c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c84:	2500      	movne	r5, #0
 8002c86:	4293      	cmp	r3, r2
 8002c88:	bfc4      	itt	gt
 8002c8a:	1a9b      	subgt	r3, r3, r2
 8002c8c:	18ed      	addgt	r5, r5, r3
 8002c8e:	f04f 0900 	mov.w	r9, #0
 8002c92:	341a      	adds	r4, #26
 8002c94:	454d      	cmp	r5, r9
 8002c96:	d11b      	bne.n	8002cd0 <_printf_common+0xd8>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4652      	mov	r2, sl
 8002ca2:	4639      	mov	r1, r7
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	47c0      	blx	r8
 8002ca8:	3001      	adds	r0, #1
 8002caa:	d103      	bne.n	8002cb4 <_printf_common+0xbc>
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb4:	3501      	adds	r5, #1
 8002cb6:	e7c2      	b.n	8002c3e <_printf_common+0x46>
 8002cb8:	18e1      	adds	r1, r4, r3
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	2030      	movs	r0, #48	; 0x30
 8002cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cc2:	4422      	add	r2, r4
 8002cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ccc:	3302      	adds	r3, #2
 8002cce:	e7c4      	b.n	8002c5a <_printf_common+0x62>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	4639      	mov	r1, r7
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	47c0      	blx	r8
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d0e6      	beq.n	8002cac <_printf_common+0xb4>
 8002cde:	f109 0901 	add.w	r9, r9, #1
 8002ce2:	e7d7      	b.n	8002c94 <_printf_common+0x9c>

08002ce4 <_printf_i>:
 8002ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ce8:	4617      	mov	r7, r2
 8002cea:	7e0a      	ldrb	r2, [r1, #24]
 8002cec:	b085      	sub	sp, #20
 8002cee:	2a6e      	cmp	r2, #110	; 0x6e
 8002cf0:	4698      	mov	r8, r3
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cf8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cfc:	f000 80bc 	beq.w	8002e78 <_printf_i+0x194>
 8002d00:	d81a      	bhi.n	8002d38 <_printf_i+0x54>
 8002d02:	2a63      	cmp	r2, #99	; 0x63
 8002d04:	d02e      	beq.n	8002d64 <_printf_i+0x80>
 8002d06:	d80a      	bhi.n	8002d1e <_printf_i+0x3a>
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	f000 80c8 	beq.w	8002e9e <_printf_i+0x1ba>
 8002d0e:	2a58      	cmp	r2, #88	; 0x58
 8002d10:	f000 808a 	beq.w	8002e28 <_printf_i+0x144>
 8002d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d18:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d1c:	e02a      	b.n	8002d74 <_printf_i+0x90>
 8002d1e:	2a64      	cmp	r2, #100	; 0x64
 8002d20:	d001      	beq.n	8002d26 <_printf_i+0x42>
 8002d22:	2a69      	cmp	r2, #105	; 0x69
 8002d24:	d1f6      	bne.n	8002d14 <_printf_i+0x30>
 8002d26:	6821      	ldr	r1, [r4, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d2e:	d023      	beq.n	8002d78 <_printf_i+0x94>
 8002d30:	1d11      	adds	r1, r2, #4
 8002d32:	6019      	str	r1, [r3, #0]
 8002d34:	6813      	ldr	r3, [r2, #0]
 8002d36:	e027      	b.n	8002d88 <_printf_i+0xa4>
 8002d38:	2a73      	cmp	r2, #115	; 0x73
 8002d3a:	f000 80b4 	beq.w	8002ea6 <_printf_i+0x1c2>
 8002d3e:	d808      	bhi.n	8002d52 <_printf_i+0x6e>
 8002d40:	2a6f      	cmp	r2, #111	; 0x6f
 8002d42:	d02a      	beq.n	8002d9a <_printf_i+0xb6>
 8002d44:	2a70      	cmp	r2, #112	; 0x70
 8002d46:	d1e5      	bne.n	8002d14 <_printf_i+0x30>
 8002d48:	680a      	ldr	r2, [r1, #0]
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	600a      	str	r2, [r1, #0]
 8002d50:	e003      	b.n	8002d5a <_printf_i+0x76>
 8002d52:	2a75      	cmp	r2, #117	; 0x75
 8002d54:	d021      	beq.n	8002d9a <_printf_i+0xb6>
 8002d56:	2a78      	cmp	r2, #120	; 0x78
 8002d58:	d1dc      	bne.n	8002d14 <_printf_i+0x30>
 8002d5a:	2278      	movs	r2, #120	; 0x78
 8002d5c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d60:	496e      	ldr	r1, [pc, #440]	; (8002f1c <_printf_i+0x238>)
 8002d62:	e064      	b.n	8002e2e <_printf_i+0x14a>
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d6a:	1d11      	adds	r1, r2, #4
 8002d6c:	6019      	str	r1, [r3, #0]
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0a3      	b.n	8002ec0 <_printf_i+0x1dc>
 8002d78:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d7c:	f102 0104 	add.w	r1, r2, #4
 8002d80:	6019      	str	r1, [r3, #0]
 8002d82:	d0d7      	beq.n	8002d34 <_printf_i+0x50>
 8002d84:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da03      	bge.n	8002d94 <_printf_i+0xb0>
 8002d8c:	222d      	movs	r2, #45	; 0x2d
 8002d8e:	425b      	negs	r3, r3
 8002d90:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d94:	4962      	ldr	r1, [pc, #392]	; (8002f20 <_printf_i+0x23c>)
 8002d96:	220a      	movs	r2, #10
 8002d98:	e017      	b.n	8002dca <_printf_i+0xe6>
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002da2:	d003      	beq.n	8002dac <_printf_i+0xc8>
 8002da4:	1d08      	adds	r0, r1, #4
 8002da6:	6018      	str	r0, [r3, #0]
 8002da8:	680b      	ldr	r3, [r1, #0]
 8002daa:	e006      	b.n	8002dba <_printf_i+0xd6>
 8002dac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002db0:	f101 0004 	add.w	r0, r1, #4
 8002db4:	6018      	str	r0, [r3, #0]
 8002db6:	d0f7      	beq.n	8002da8 <_printf_i+0xc4>
 8002db8:	880b      	ldrh	r3, [r1, #0]
 8002dba:	4959      	ldr	r1, [pc, #356]	; (8002f20 <_printf_i+0x23c>)
 8002dbc:	2a6f      	cmp	r2, #111	; 0x6f
 8002dbe:	bf14      	ite	ne
 8002dc0:	220a      	movne	r2, #10
 8002dc2:	2208      	moveq	r2, #8
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002dca:	6865      	ldr	r5, [r4, #4]
 8002dcc:	60a5      	str	r5, [r4, #8]
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	f2c0 809c 	blt.w	8002f0c <_printf_i+0x228>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	f020 0004 	bic.w	r0, r0, #4
 8002dda:	6020      	str	r0, [r4, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d13f      	bne.n	8002e60 <_printf_i+0x17c>
 8002de0:	2d00      	cmp	r5, #0
 8002de2:	f040 8095 	bne.w	8002f10 <_printf_i+0x22c>
 8002de6:	4675      	mov	r5, lr
 8002de8:	2a08      	cmp	r2, #8
 8002dea:	d10b      	bne.n	8002e04 <_printf_i+0x120>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	07da      	lsls	r2, r3, #31
 8002df0:	d508      	bpl.n	8002e04 <_printf_i+0x120>
 8002df2:	6923      	ldr	r3, [r4, #16]
 8002df4:	6862      	ldr	r2, [r4, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	bfde      	ittt	le
 8002dfa:	2330      	movle	r3, #48	; 0x30
 8002dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e04:	ebae 0305 	sub.w	r3, lr, r5
 8002e08:	6123      	str	r3, [r4, #16]
 8002e0a:	f8cd 8000 	str.w	r8, [sp]
 8002e0e:	463b      	mov	r3, r7
 8002e10:	aa03      	add	r2, sp, #12
 8002e12:	4621      	mov	r1, r4
 8002e14:	4630      	mov	r0, r6
 8002e16:	f7ff feef 	bl	8002bf8 <_printf_common>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d155      	bne.n	8002eca <_printf_i+0x1e6>
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	b005      	add	sp, #20
 8002e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e28:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e2c:	493c      	ldr	r1, [pc, #240]	; (8002f20 <_printf_i+0x23c>)
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e36:	f100 0504 	add.w	r5, r0, #4
 8002e3a:	601d      	str	r5, [r3, #0]
 8002e3c:	d001      	beq.n	8002e42 <_printf_i+0x15e>
 8002e3e:	6803      	ldr	r3, [r0, #0]
 8002e40:	e002      	b.n	8002e48 <_printf_i+0x164>
 8002e42:	0655      	lsls	r5, r2, #25
 8002e44:	d5fb      	bpl.n	8002e3e <_printf_i+0x15a>
 8002e46:	8803      	ldrh	r3, [r0, #0]
 8002e48:	07d0      	lsls	r0, r2, #31
 8002e4a:	bf44      	itt	mi
 8002e4c:	f042 0220 	orrmi.w	r2, r2, #32
 8002e50:	6022      	strmi	r2, [r4, #0]
 8002e52:	b91b      	cbnz	r3, 8002e5c <_printf_i+0x178>
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	f022 0220 	bic.w	r2, r2, #32
 8002e5a:	6022      	str	r2, [r4, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	e7b1      	b.n	8002dc4 <_printf_i+0xe0>
 8002e60:	4675      	mov	r5, lr
 8002e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e66:	fb02 3310 	mls	r3, r2, r0, r3
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e70:	4603      	mov	r3, r0
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d1f5      	bne.n	8002e62 <_printf_i+0x17e>
 8002e76:	e7b7      	b.n	8002de8 <_printf_i+0x104>
 8002e78:	6808      	ldr	r0, [r1, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	6949      	ldr	r1, [r1, #20]
 8002e7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e82:	d004      	beq.n	8002e8e <_printf_i+0x1aa>
 8002e84:	1d10      	adds	r0, r2, #4
 8002e86:	6018      	str	r0, [r3, #0]
 8002e88:	6813      	ldr	r3, [r2, #0]
 8002e8a:	6019      	str	r1, [r3, #0]
 8002e8c:	e007      	b.n	8002e9e <_printf_i+0x1ba>
 8002e8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e92:	f102 0004 	add.w	r0, r2, #4
 8002e96:	6018      	str	r0, [r3, #0]
 8002e98:	6813      	ldr	r3, [r2, #0]
 8002e9a:	d0f6      	beq.n	8002e8a <_printf_i+0x1a6>
 8002e9c:	8019      	strh	r1, [r3, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6123      	str	r3, [r4, #16]
 8002ea2:	4675      	mov	r5, lr
 8002ea4:	e7b1      	b.n	8002e0a <_printf_i+0x126>
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	1d11      	adds	r1, r2, #4
 8002eaa:	6019      	str	r1, [r3, #0]
 8002eac:	6815      	ldr	r5, [r2, #0]
 8002eae:	6862      	ldr	r2, [r4, #4]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f7fd f99c 	bl	80001f0 <memchr>
 8002eb8:	b108      	cbz	r0, 8002ebe <_printf_i+0x1da>
 8002eba:	1b40      	subs	r0, r0, r5
 8002ebc:	6060      	str	r0, [r4, #4]
 8002ebe:	6863      	ldr	r3, [r4, #4]
 8002ec0:	6123      	str	r3, [r4, #16]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec8:	e79f      	b.n	8002e0a <_printf_i+0x126>
 8002eca:	6923      	ldr	r3, [r4, #16]
 8002ecc:	462a      	mov	r2, r5
 8002ece:	4639      	mov	r1, r7
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	47c0      	blx	r8
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d0a2      	beq.n	8002e1e <_printf_i+0x13a>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	079b      	lsls	r3, r3, #30
 8002edc:	d507      	bpl.n	8002eee <_printf_i+0x20a>
 8002ede:	2500      	movs	r5, #0
 8002ee0:	f104 0919 	add.w	r9, r4, #25
 8002ee4:	68e3      	ldr	r3, [r4, #12]
 8002ee6:	9a03      	ldr	r2, [sp, #12]
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	429d      	cmp	r5, r3
 8002eec:	db05      	blt.n	8002efa <_printf_i+0x216>
 8002eee:	68e0      	ldr	r0, [r4, #12]
 8002ef0:	9b03      	ldr	r3, [sp, #12]
 8002ef2:	4298      	cmp	r0, r3
 8002ef4:	bfb8      	it	lt
 8002ef6:	4618      	movlt	r0, r3
 8002ef8:	e793      	b.n	8002e22 <_printf_i+0x13e>
 8002efa:	2301      	movs	r3, #1
 8002efc:	464a      	mov	r2, r9
 8002efe:	4639      	mov	r1, r7
 8002f00:	4630      	mov	r0, r6
 8002f02:	47c0      	blx	r8
 8002f04:	3001      	adds	r0, #1
 8002f06:	d08a      	beq.n	8002e1e <_printf_i+0x13a>
 8002f08:	3501      	adds	r5, #1
 8002f0a:	e7eb      	b.n	8002ee4 <_printf_i+0x200>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1a7      	bne.n	8002e60 <_printf_i+0x17c>
 8002f10:	780b      	ldrb	r3, [r1, #0]
 8002f12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f1a:	e765      	b.n	8002de8 <_printf_i+0x104>
 8002f1c:	080031e2 	.word	0x080031e2
 8002f20:	080031d1 	.word	0x080031d1

08002f24 <memcpy>:
 8002f24:	b510      	push	{r4, lr}
 8002f26:	1e43      	subs	r3, r0, #1
 8002f28:	440a      	add	r2, r1
 8002f2a:	4291      	cmp	r1, r2
 8002f2c:	d100      	bne.n	8002f30 <memcpy+0xc>
 8002f2e:	bd10      	pop	{r4, pc}
 8002f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f38:	e7f7      	b.n	8002f2a <memcpy+0x6>

08002f3a <memmove>:
 8002f3a:	4288      	cmp	r0, r1
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	eb01 0302 	add.w	r3, r1, r2
 8002f42:	d803      	bhi.n	8002f4c <memmove+0x12>
 8002f44:	1e42      	subs	r2, r0, #1
 8002f46:	4299      	cmp	r1, r3
 8002f48:	d10c      	bne.n	8002f64 <memmove+0x2a>
 8002f4a:	bd10      	pop	{r4, pc}
 8002f4c:	4298      	cmp	r0, r3
 8002f4e:	d2f9      	bcs.n	8002f44 <memmove+0xa>
 8002f50:	1881      	adds	r1, r0, r2
 8002f52:	1ad2      	subs	r2, r2, r3
 8002f54:	42d3      	cmn	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memmove+0x20>
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f62:	e7f7      	b.n	8002f54 <memmove+0x1a>
 8002f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f6c:	e7eb      	b.n	8002f46 <memmove+0xc>
	...

08002f70 <_free_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	4605      	mov	r5, r0
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d045      	beq.n	8003004 <_free_r+0x94>
 8002f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f7c:	1f0c      	subs	r4, r1, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bfb8      	it	lt
 8002f82:	18e4      	addlt	r4, r4, r3
 8002f84:	f000 f8d6 	bl	8003134 <__malloc_lock>
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <_free_r+0x98>)
 8002f8a:	6813      	ldr	r3, [r2, #0]
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	b933      	cbnz	r3, 8002f9e <_free_r+0x2e>
 8002f90:	6063      	str	r3, [r4, #4]
 8002f92:	6014      	str	r4, [r2, #0]
 8002f94:	4628      	mov	r0, r5
 8002f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f9a:	f000 b8cc 	b.w	8003136 <__malloc_unlock>
 8002f9e:	42a3      	cmp	r3, r4
 8002fa0:	d90c      	bls.n	8002fbc <_free_r+0x4c>
 8002fa2:	6821      	ldr	r1, [r4, #0]
 8002fa4:	1862      	adds	r2, r4, r1
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	bf04      	itt	eq
 8002faa:	681a      	ldreq	r2, [r3, #0]
 8002fac:	685b      	ldreq	r3, [r3, #4]
 8002fae:	6063      	str	r3, [r4, #4]
 8002fb0:	bf04      	itt	eq
 8002fb2:	1852      	addeq	r2, r2, r1
 8002fb4:	6022      	streq	r2, [r4, #0]
 8002fb6:	6004      	str	r4, [r0, #0]
 8002fb8:	e7ec      	b.n	8002f94 <_free_r+0x24>
 8002fba:	4613      	mov	r3, r2
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	b10a      	cbz	r2, 8002fc4 <_free_r+0x54>
 8002fc0:	42a2      	cmp	r2, r4
 8002fc2:	d9fa      	bls.n	8002fba <_free_r+0x4a>
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	1858      	adds	r0, r3, r1
 8002fc8:	42a0      	cmp	r0, r4
 8002fca:	d10b      	bne.n	8002fe4 <_free_r+0x74>
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	4401      	add	r1, r0
 8002fd0:	1858      	adds	r0, r3, r1
 8002fd2:	4282      	cmp	r2, r0
 8002fd4:	6019      	str	r1, [r3, #0]
 8002fd6:	d1dd      	bne.n	8002f94 <_free_r+0x24>
 8002fd8:	6810      	ldr	r0, [r2, #0]
 8002fda:	6852      	ldr	r2, [r2, #4]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	4401      	add	r1, r0
 8002fe0:	6019      	str	r1, [r3, #0]
 8002fe2:	e7d7      	b.n	8002f94 <_free_r+0x24>
 8002fe4:	d902      	bls.n	8002fec <_free_r+0x7c>
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	602b      	str	r3, [r5, #0]
 8002fea:	e7d3      	b.n	8002f94 <_free_r+0x24>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	1821      	adds	r1, r4, r0
 8002ff0:	428a      	cmp	r2, r1
 8002ff2:	bf04      	itt	eq
 8002ff4:	6811      	ldreq	r1, [r2, #0]
 8002ff6:	6852      	ldreq	r2, [r2, #4]
 8002ff8:	6062      	str	r2, [r4, #4]
 8002ffa:	bf04      	itt	eq
 8002ffc:	1809      	addeq	r1, r1, r0
 8002ffe:	6021      	streq	r1, [r4, #0]
 8003000:	605c      	str	r4, [r3, #4]
 8003002:	e7c7      	b.n	8002f94 <_free_r+0x24>
 8003004:	bd38      	pop	{r3, r4, r5, pc}
 8003006:	bf00      	nop
 8003008:	20000098 	.word	0x20000098

0800300c <_malloc_r>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	1ccd      	adds	r5, r1, #3
 8003010:	f025 0503 	bic.w	r5, r5, #3
 8003014:	3508      	adds	r5, #8
 8003016:	2d0c      	cmp	r5, #12
 8003018:	bf38      	it	cc
 800301a:	250c      	movcc	r5, #12
 800301c:	2d00      	cmp	r5, #0
 800301e:	4606      	mov	r6, r0
 8003020:	db01      	blt.n	8003026 <_malloc_r+0x1a>
 8003022:	42a9      	cmp	r1, r5
 8003024:	d903      	bls.n	800302e <_malloc_r+0x22>
 8003026:	230c      	movs	r3, #12
 8003028:	6033      	str	r3, [r6, #0]
 800302a:	2000      	movs	r0, #0
 800302c:	bd70      	pop	{r4, r5, r6, pc}
 800302e:	f000 f881 	bl	8003134 <__malloc_lock>
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <_malloc_r+0xb4>)
 8003034:	6814      	ldr	r4, [r2, #0]
 8003036:	4621      	mov	r1, r4
 8003038:	b991      	cbnz	r1, 8003060 <_malloc_r+0x54>
 800303a:	4c22      	ldr	r4, [pc, #136]	; (80030c4 <_malloc_r+0xb8>)
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	b91b      	cbnz	r3, 8003048 <_malloc_r+0x3c>
 8003040:	4630      	mov	r0, r6
 8003042:	f000 f867 	bl	8003114 <_sbrk_r>
 8003046:	6020      	str	r0, [r4, #0]
 8003048:	4629      	mov	r1, r5
 800304a:	4630      	mov	r0, r6
 800304c:	f000 f862 	bl	8003114 <_sbrk_r>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d126      	bne.n	80030a2 <_malloc_r+0x96>
 8003054:	230c      	movs	r3, #12
 8003056:	6033      	str	r3, [r6, #0]
 8003058:	4630      	mov	r0, r6
 800305a:	f000 f86c 	bl	8003136 <__malloc_unlock>
 800305e:	e7e4      	b.n	800302a <_malloc_r+0x1e>
 8003060:	680b      	ldr	r3, [r1, #0]
 8003062:	1b5b      	subs	r3, r3, r5
 8003064:	d41a      	bmi.n	800309c <_malloc_r+0x90>
 8003066:	2b0b      	cmp	r3, #11
 8003068:	d90f      	bls.n	800308a <_malloc_r+0x7e>
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	50cd      	str	r5, [r1, r3]
 800306e:	18cc      	adds	r4, r1, r3
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f860 	bl	8003136 <__malloc_unlock>
 8003076:	f104 000b 	add.w	r0, r4, #11
 800307a:	1d23      	adds	r3, r4, #4
 800307c:	f020 0007 	bic.w	r0, r0, #7
 8003080:	1ac3      	subs	r3, r0, r3
 8003082:	d01b      	beq.n	80030bc <_malloc_r+0xb0>
 8003084:	425a      	negs	r2, r3
 8003086:	50e2      	str	r2, [r4, r3]
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	428c      	cmp	r4, r1
 800308c:	bf0d      	iteet	eq
 800308e:	6863      	ldreq	r3, [r4, #4]
 8003090:	684b      	ldrne	r3, [r1, #4]
 8003092:	6063      	strne	r3, [r4, #4]
 8003094:	6013      	streq	r3, [r2, #0]
 8003096:	bf18      	it	ne
 8003098:	460c      	movne	r4, r1
 800309a:	e7e9      	b.n	8003070 <_malloc_r+0x64>
 800309c:	460c      	mov	r4, r1
 800309e:	6849      	ldr	r1, [r1, #4]
 80030a0:	e7ca      	b.n	8003038 <_malloc_r+0x2c>
 80030a2:	1cc4      	adds	r4, r0, #3
 80030a4:	f024 0403 	bic.w	r4, r4, #3
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d005      	beq.n	80030b8 <_malloc_r+0xac>
 80030ac:	1a21      	subs	r1, r4, r0
 80030ae:	4630      	mov	r0, r6
 80030b0:	f000 f830 	bl	8003114 <_sbrk_r>
 80030b4:	3001      	adds	r0, #1
 80030b6:	d0cd      	beq.n	8003054 <_malloc_r+0x48>
 80030b8:	6025      	str	r5, [r4, #0]
 80030ba:	e7d9      	b.n	8003070 <_malloc_r+0x64>
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
 80030be:	bf00      	nop
 80030c0:	20000098 	.word	0x20000098
 80030c4:	2000009c 	.word	0x2000009c

080030c8 <_realloc_r>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	4607      	mov	r7, r0
 80030cc:	4614      	mov	r4, r2
 80030ce:	460e      	mov	r6, r1
 80030d0:	b921      	cbnz	r1, 80030dc <_realloc_r+0x14>
 80030d2:	4611      	mov	r1, r2
 80030d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030d8:	f7ff bf98 	b.w	800300c <_malloc_r>
 80030dc:	b922      	cbnz	r2, 80030e8 <_realloc_r+0x20>
 80030de:	f7ff ff47 	bl	8002f70 <_free_r>
 80030e2:	4625      	mov	r5, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e8:	f000 f826 	bl	8003138 <_malloc_usable_size_r>
 80030ec:	4284      	cmp	r4, r0
 80030ee:	d90f      	bls.n	8003110 <_realloc_r+0x48>
 80030f0:	4621      	mov	r1, r4
 80030f2:	4638      	mov	r0, r7
 80030f4:	f7ff ff8a 	bl	800300c <_malloc_r>
 80030f8:	4605      	mov	r5, r0
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d0f2      	beq.n	80030e4 <_realloc_r+0x1c>
 80030fe:	4631      	mov	r1, r6
 8003100:	4622      	mov	r2, r4
 8003102:	f7ff ff0f 	bl	8002f24 <memcpy>
 8003106:	4631      	mov	r1, r6
 8003108:	4638      	mov	r0, r7
 800310a:	f7ff ff31 	bl	8002f70 <_free_r>
 800310e:	e7e9      	b.n	80030e4 <_realloc_r+0x1c>
 8003110:	4635      	mov	r5, r6
 8003112:	e7e7      	b.n	80030e4 <_realloc_r+0x1c>

08003114 <_sbrk_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4c06      	ldr	r4, [pc, #24]	; (8003130 <_sbrk_r+0x1c>)
 8003118:	2300      	movs	r3, #0
 800311a:	4605      	mov	r5, r0
 800311c:	4608      	mov	r0, r1
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	f7ff fb50 	bl	80027c4 <_sbrk>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_sbrk_r+0x1a>
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	b103      	cbz	r3, 800312e <_sbrk_r+0x1a>
 800312c:	602b      	str	r3, [r5, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20000a0c 	.word	0x20000a0c

08003134 <__malloc_lock>:
 8003134:	4770      	bx	lr

08003136 <__malloc_unlock>:
 8003136:	4770      	bx	lr

08003138 <_malloc_usable_size_r>:
 8003138:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800313c:	2800      	cmp	r0, #0
 800313e:	f1a0 0004 	sub.w	r0, r0, #4
 8003142:	bfbc      	itt	lt
 8003144:	580b      	ldrlt	r3, [r1, r0]
 8003146:	18c0      	addlt	r0, r0, r3
 8003148:	4770      	bx	lr
	...

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
