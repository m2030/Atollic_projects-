
spi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800244c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000c8  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000138  20000138  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009e31  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001a8f  00000000  00000000  00029ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003e00  00000000  00000000  0002b960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  0002f760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002fe88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000382c  00000000  00000000  00030780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002b2f  00000000  00000000  00033fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00036adb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001ab8  00000000  00000000  00036b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800234c 	.word	0x0800234c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800234c 	.word	0x0800234c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f89c 	bl	80006f4 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f85e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f000 fe44 	bl	800129c <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	0200      	lsls	r0, r0, #8
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
 80006a8:	fa05 f303 	lsl.w	r3, r5, r3
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	bf8c      	ite	hi
 80006b2:	3c03      	subhi	r4, #3
 80006b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b6:	4019      	ands	r1, r3
 80006b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	fa05 f404 	lsl.w	r4, r5, r4
 80006be:	3c01      	subs	r4, #1
 80006c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfad      	iteet	ge
 80006ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	f000 000f 	andlt.w	r0, r0, #15
 80006d6:	4b06      	ldrlt	r3, [pc, #24]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfb5      	itete	lt
 80006de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	3801      	subs	r0, #1
 80006f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fa:	d20a      	bcs.n	8000712 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000700:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	21f0      	movs	r1, #240	; 0xf0
 8000704:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000712:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80008b8 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072c:	4a60      	ldr	r2, [pc, #384]	; (80008b0 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000730:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000734:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000738:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800073e:	42ac      	cmp	r4, r5
 8000740:	f040 80a6 	bne.w	8000890 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000744:	684c      	ldr	r4, [r1, #4]
 8000746:	f024 0c10 	bic.w	ip, r4, #16
 800074a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800074e:	2e01      	cmp	r6, #1
 8000750:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000754:	d812      	bhi.n	800077c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000756:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000758:	2603      	movs	r6, #3
 800075a:	fa06 f60e 	lsl.w	r6, r6, lr
 800075e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000762:	68ce      	ldr	r6, [r1, #12]
 8000764:	fa06 f60e 	lsl.w	r6, r6, lr
 8000768:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800076a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800076c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800076e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000772:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000776:	409e      	lsls	r6, r3
 8000778:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800077a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800077c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800077e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000780:	fa06 f60e 	lsl.w	r6, r6, lr
 8000784:	43f6      	mvns	r6, r6
 8000786:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800078a:	688f      	ldr	r7, [r1, #8]
 800078c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000790:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000794:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000798:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800079a:	d116      	bne.n	80007ca <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800079c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007a8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007b0:	f04f 0c0f 	mov.w	ip, #15
 80007b4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007b8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007bc:	690f      	ldr	r7, [r1, #16]
 80007be:	fa07 f70b 	lsl.w	r7, r7, fp
 80007c2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007c6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007ca:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007cc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ce:	f004 0703 	and.w	r7, r4, #3
 80007d2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007d6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007da:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007dc:	00e6      	lsls	r6, r4, #3
 80007de:	d557      	bpl.n	8000890 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e0:	f04f 0b00 	mov.w	fp, #0
 80007e4:	f8cd b00c 	str.w	fp, [sp, #12]
 80007e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ec:	4e31      	ldr	r6, [pc, #196]	; (80008b4 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007f2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007f6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007fa:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007fe:	9703      	str	r7, [sp, #12]
 8000800:	9f03      	ldr	r7, [sp, #12]
 8000802:	f023 0703 	bic.w	r7, r3, #3
 8000806:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800080a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800080e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000812:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000816:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800081a:	f04f 0e0f 	mov.w	lr, #15
 800081e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000822:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000824:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000828:	d039      	beq.n	800089e <HAL_GPIO_Init+0x17e>
 800082a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800082e:	42b0      	cmp	r0, r6
 8000830:	d037      	beq.n	80008a2 <HAL_GPIO_Init+0x182>
 8000832:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000836:	42b0      	cmp	r0, r6
 8000838:	d035      	beq.n	80008a6 <HAL_GPIO_Init+0x186>
 800083a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800083e:	42b0      	cmp	r0, r6
 8000840:	d033      	beq.n	80008aa <HAL_GPIO_Init+0x18a>
 8000842:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000846:	42b0      	cmp	r0, r6
 8000848:	bf14      	ite	ne
 800084a:	2607      	movne	r6, #7
 800084c:	2604      	moveq	r6, #4
 800084e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000852:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000856:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000858:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800085a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000860:	bf0c      	ite	eq
 8000862:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000864:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000866:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000868:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800086a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800086e:	bf0c      	ite	eq
 8000870:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000872:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000874:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000876:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000878:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800087c:	bf0c      	ite	eq
 800087e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000880:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000882:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000884:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000886:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf54      	ite	pl
 800088a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800088c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800088e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000890:	3301      	adds	r3, #1
 8000892:	2b10      	cmp	r3, #16
 8000894:	f47f af4f 	bne.w	8000736 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000898:	b005      	add	sp, #20
 800089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800089e:	465e      	mov	r6, fp
 80008a0:	e7d5      	b.n	800084e <HAL_GPIO_Init+0x12e>
 80008a2:	2601      	movs	r6, #1
 80008a4:	e7d3      	b.n	800084e <HAL_GPIO_Init+0x12e>
 80008a6:	2602      	movs	r6, #2
 80008a8:	e7d1      	b.n	800084e <HAL_GPIO_Init+0x12e>
 80008aa:	2603      	movs	r6, #3
 80008ac:	e7cf      	b.n	800084e <HAL_GPIO_Init+0x12e>
 80008ae:	bf00      	nop
 80008b0:	40013c00 	.word	0x40013c00
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008bc:	b10a      	cbz	r2, 80008c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008be:	6181      	str	r1, [r0, #24]
 80008c0:	4770      	bx	lr
 80008c2:	0409      	lsls	r1, r1, #16
 80008c4:	e7fb      	b.n	80008be <HAL_GPIO_WritePin+0x2>
	...

080008c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008cc:	4604      	mov	r4, r0
 80008ce:	b908      	cbnz	r0, 80008d4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008d0:	2001      	movs	r0, #1
 80008d2:	e03f      	b.n	8000954 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d4:	6803      	ldr	r3, [r0, #0]
 80008d6:	07dd      	lsls	r5, r3, #31
 80008d8:	d410      	bmi.n	80008fc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	0798      	lsls	r0, r3, #30
 80008de:	d45a      	bmi.n	8000996 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	071a      	lsls	r2, r3, #28
 80008e4:	f100 809c 	bmi.w	8000a20 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	075b      	lsls	r3, r3, #29
 80008ec:	f100 80ba 	bmi.w	8000a64 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008f0:	69a0      	ldr	r0, [r4, #24]
 80008f2:	2800      	cmp	r0, #0
 80008f4:	f040 811b 	bne.w	8000b2e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80008f8:	2000      	movs	r0, #0
 80008fa:	e02b      	b.n	8000954 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008fc:	4ba4      	ldr	r3, [pc, #656]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	f002 020c 	and.w	r2, r2, #12
 8000904:	2a04      	cmp	r2, #4
 8000906:	d007      	beq.n	8000918 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800090e:	2a08      	cmp	r2, #8
 8000910:	d10a      	bne.n	8000928 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	0259      	lsls	r1, r3, #9
 8000916:	d507      	bpl.n	8000928 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000918:	4b9d      	ldr	r3, [pc, #628]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	039a      	lsls	r2, r3, #14
 800091e:	d5dc      	bpl.n	80008da <HAL_RCC_OscConfig+0x12>
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1d9      	bne.n	80008da <HAL_RCC_OscConfig+0x12>
 8000926:	e7d3      	b.n	80008d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	4d99      	ldr	r5, [pc, #612]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 800092c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000930:	d113      	bne.n	800095a <HAL_RCC_OscConfig+0x92>
 8000932:	682b      	ldr	r3, [r5, #0]
 8000934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000938:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800093a:	f7ff fe7b 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093e:	4d94      	ldr	r5, [pc, #592]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000940:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	039b      	lsls	r3, r3, #14
 8000946:	d4c8      	bmi.n	80008da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000948:	f7ff fe74 	bl	8000634 <HAL_GetTick>
 800094c:	1b80      	subs	r0, r0, r6
 800094e:	2864      	cmp	r0, #100	; 0x64
 8000950:	d9f7      	bls.n	8000942 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000952:	2003      	movs	r0, #3
}
 8000954:	b002      	add	sp, #8
 8000956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800095e:	d104      	bne.n	800096a <HAL_RCC_OscConfig+0xa2>
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	e7e3      	b.n	8000932 <HAL_RCC_OscConfig+0x6a>
 800096a:	682a      	ldr	r2, [r5, #0]
 800096c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000970:	602a      	str	r2, [r5, #0]
 8000972:	682a      	ldr	r2, [r5, #0]
 8000974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000978:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1dd      	bne.n	800093a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800097e:	f7ff fe59 	bl	8000634 <HAL_GetTick>
 8000982:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	039f      	lsls	r7, r3, #14
 8000988:	d5a7      	bpl.n	80008da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098a:	f7ff fe53 	bl	8000634 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	2864      	cmp	r0, #100	; 0x64
 8000992:	d9f7      	bls.n	8000984 <HAL_RCC_OscConfig+0xbc>
 8000994:	e7dd      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000996:	4b7e      	ldr	r3, [pc, #504]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	f012 0f0c 	tst.w	r2, #12
 800099e:	d007      	beq.n	80009b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a6:	2a08      	cmp	r2, #8
 80009a8:	d111      	bne.n	80009ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	025e      	lsls	r6, r3, #9
 80009ae:	d40e      	bmi.n	80009ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b0:	4b77      	ldr	r3, [pc, #476]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	0795      	lsls	r5, r2, #30
 80009b6:	d502      	bpl.n	80009be <HAL_RCC_OscConfig+0xf6>
 80009b8:	68e2      	ldr	r2, [r4, #12]
 80009ba:	2a01      	cmp	r2, #1
 80009bc:	d188      	bne.n	80008d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	6921      	ldr	r1, [r4, #16]
 80009c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009cc:	e788      	b.n	80008e0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ce:	68e2      	ldr	r2, [r4, #12]
 80009d0:	4b70      	ldr	r3, [pc, #448]	; (8000b94 <HAL_RCC_OscConfig+0x2cc>)
 80009d2:	b1b2      	cbz	r2, 8000a02 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d8:	f7ff fe2c 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009dc:	4d6c      	ldr	r5, [pc, #432]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	0798      	lsls	r0, r3, #30
 80009e4:	d507      	bpl.n	80009f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	6922      	ldr	r2, [r4, #16]
 80009ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009f2:	602b      	str	r3, [r5, #0]
 80009f4:	e774      	b.n	80008e0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009f6:	f7ff fe1d 	bl	8000634 <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d9ef      	bls.n	80009e0 <HAL_RCC_OscConfig+0x118>
 8000a00:	e7a7      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a04:	f7ff fe16 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a08:	4d61      	ldr	r5, [pc, #388]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	0799      	lsls	r1, r3, #30
 8000a10:	f57f af66 	bpl.w	80008e0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a14:	f7ff fe0e 	bl	8000634 <HAL_GetTick>
 8000a18:	1b80      	subs	r0, r0, r6
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0x144>
 8000a1e:	e798      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a20:	6962      	ldr	r2, [r4, #20]
 8000a22:	4b5d      	ldr	r3, [pc, #372]	; (8000b98 <HAL_RCC_OscConfig+0x2d0>)
 8000a24:	b17a      	cbz	r2, 8000a46 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fe03 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a2e:	4d58      	ldr	r5, [pc, #352]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a32:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a34:	079f      	lsls	r7, r3, #30
 8000a36:	f53f af57 	bmi.w	80008e8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3a:	f7ff fdfb 	bl	8000634 <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9f6      	bls.n	8000a32 <HAL_RCC_OscConfig+0x16a>
 8000a44:	e785      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a46:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a48:	f7ff fdf4 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a4c:	4d50      	ldr	r5, [pc, #320]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a50:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a52:	0798      	lsls	r0, r3, #30
 8000a54:	f57f af48 	bpl.w	80008e8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a58:	f7ff fdec 	bl	8000634 <HAL_GetTick>
 8000a5c:	1b80      	subs	r0, r0, r6
 8000a5e:	2802      	cmp	r0, #2
 8000a60:	d9f6      	bls.n	8000a50 <HAL_RCC_OscConfig+0x188>
 8000a62:	e776      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 8000a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a68:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a6c:	d128      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	9201      	str	r2, [sp, #4]
 8000a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a76:	641a      	str	r2, [r3, #64]	; 0x40
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a82:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	4d45      	ldr	r5, [pc, #276]	; (8000b9c <HAL_RCC_OscConfig+0x2d4>)
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	05d9      	lsls	r1, r3, #23
 8000a8a:	d51b      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a8c:	68a3      	ldr	r3, [r4, #8]
 8000a8e:	4d40      	ldr	r5, [pc, #256]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d127      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x21c>
 8000a94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a9c:	f7ff fdca 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa0:	4d3b      	ldr	r5, [pc, #236]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000aa2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aaa:	079b      	lsls	r3, r3, #30
 8000aac:	d539      	bpl.n	8000b22 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f43f af1e 	beq.w	80008f0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ab4:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 8000ab6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	e717      	b.n	80008f0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	e7df      	b.n	8000a84 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000acc:	f7ff fdb2 	bl	8000634 <HAL_GetTick>
 8000ad0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	05da      	lsls	r2, r3, #23
 8000ad6:	d4d9      	bmi.n	8000a8c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad8:	f7ff fdac 	bl	8000634 <HAL_GetTick>
 8000adc:	1bc0      	subs	r0, r0, r7
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9f7      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x20a>
 8000ae2:	e736      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d104      	bne.n	8000af2 <HAL_RCC_OscConfig+0x22a>
 8000ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	672b      	str	r3, [r5, #112]	; 0x70
 8000af0:	e7d0      	b.n	8000a94 <HAL_RCC_OscConfig+0x1cc>
 8000af2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	672a      	str	r2, [r5, #112]	; 0x70
 8000afa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000afc:	f022 0204 	bic.w	r2, r2, #4
 8000b00:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1ca      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b06:	f7ff fd95 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b0e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b12:	0798      	lsls	r0, r3, #30
 8000b14:	d5cb      	bpl.n	8000aae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f7ff fd8d 	bl	8000634 <HAL_GetTick>
 8000b1a:	1bc0      	subs	r0, r0, r7
 8000b1c:	4540      	cmp	r0, r8
 8000b1e:	d9f7      	bls.n	8000b10 <HAL_RCC_OscConfig+0x248>
 8000b20:	e717      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd87 	bl	8000634 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9bd      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x1e0>
 8000b2c:	e711      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b2e:	4d18      	ldr	r5, [pc, #96]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
 8000b30:	68ab      	ldr	r3, [r5, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d047      	beq.n	8000bca <HAL_RCC_OscConfig+0x302>
 8000b3a:	4e19      	ldr	r6, [pc, #100]	; (8000ba0 <HAL_RCC_OscConfig+0x2d8>)
 8000b3c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b3e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b40:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b42:	d135      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b44:	f7ff fd76 	bl	8000634 <HAL_GetTick>
 8000b48:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	0199      	lsls	r1, r3, #6
 8000b4e:	d429      	bmi.n	8000ba4 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b50:	6a22      	ldr	r2, [r4, #32]
 8000b52:	69e3      	ldr	r3, [r4, #28]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b58:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b66:	0852      	lsrs	r2, r2, #1
 8000b68:	3a01      	subs	r2, #1
 8000b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b6e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b70:	2301      	movs	r3, #1
 8000b72:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b74:	f7ff fd5e 	bl	8000634 <HAL_GetTick>
 8000b78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	019a      	lsls	r2, r3, #6
 8000b7e:	f53f aebb 	bmi.w	80008f8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b82:	f7ff fd57 	bl	8000634 <HAL_GetTick>
 8000b86:	1b40      	subs	r0, r0, r5
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9f6      	bls.n	8000b7a <HAL_RCC_OscConfig+0x2b2>
 8000b8c:	e6e1      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	42470000 	.word	0x42470000
 8000b98:	42470e80 	.word	0x42470e80
 8000b9c:	40007000 	.word	0x40007000
 8000ba0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba4:	f7ff fd46 	bl	8000634 <HAL_GetTick>
 8000ba8:	1bc0      	subs	r0, r0, r7
 8000baa:	2802      	cmp	r0, #2
 8000bac:	d9cd      	bls.n	8000b4a <HAL_RCC_OscConfig+0x282>
 8000bae:	e6d0      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fd40 	bl	8000634 <HAL_GetTick>
 8000bb4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	019b      	lsls	r3, r3, #6
 8000bba:	f57f ae9d 	bpl.w	80008f8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fd39 	bl	8000634 <HAL_GetTick>
 8000bc2:	1b00      	subs	r0, r0, r4
 8000bc4:	2802      	cmp	r0, #2
 8000bc6:	d9f6      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x2ee>
 8000bc8:	e6c3      	b.n	8000952 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bca:	2801      	cmp	r0, #1
 8000bcc:	f43f aec2 	beq.w	8000954 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000bd0:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bd2:	69e3      	ldr	r3, [r4, #28]
 8000bd4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f47f ae79 	bne.w	80008d0 <HAL_RCC_OscConfig+0x8>
 8000bde:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000be0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000be4:	4293      	cmp	r3, r2
 8000be6:	f47f ae73 	bne.w	80008d0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bf0:	4003      	ands	r3, r0
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f47f ae6c 	bne.w	80008d0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bf8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bfa:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f47f ae66 	bne.w	80008d0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c06:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c0a:	1ac0      	subs	r0, r0, r3
 8000c0c:	bf18      	it	ne
 8000c0e:	2001      	movne	r0, #1
 8000c10:	e6a0      	b.n	8000954 <HAL_RCC_OscConfig+0x8c>
 8000c12:	bf00      	nop

08000c14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c14:	4913      	ldr	r1, [pc, #76]	; (8000c64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c18:	688b      	ldr	r3, [r1, #8]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d003      	beq.n	8000c2a <HAL_RCC_GetSysClockFreq+0x16>
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d003      	beq.n	8000c2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c26:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c28:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x58>)
 8000c2c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c2e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c30:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c32:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c34:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c38:	bf14      	ite	ne
 8000c3a:	480c      	ldrne	r0, [pc, #48]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3c:	480a      	ldreq	r0, [pc, #40]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c42:	bf18      	it	ne
 8000c44:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c4e:	f7ff fb1f 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c62:	bd08      	pop	{r3, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	00f42400 	.word	0x00f42400
 8000c6c:	007a1200 	.word	0x007a1200

08000c70 <HAL_RCC_ClockConfig>:
{
 8000c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c76:	4604      	mov	r4, r0
 8000c78:	b910      	cbnz	r0, 8000c80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c80:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <HAL_RCC_ClockConfig+0x124>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	f002 020f 	and.w	r2, r2, #15
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	d329      	bcc.n	8000ce0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c8c:	6821      	ldr	r1, [r4, #0]
 8000c8e:	078f      	lsls	r7, r1, #30
 8000c90:	d42e      	bmi.n	8000cf0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c92:	07c8      	lsls	r0, r1, #31
 8000c94:	d441      	bmi.n	8000d1a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c96:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <HAL_RCC_ClockConfig+0x124>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f002 020f 	and.w	r2, r2, #15
 8000c9e:	4295      	cmp	r5, r2
 8000ca0:	d367      	bcc.n	8000d72 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca2:	6822      	ldr	r2, [r4, #0]
 8000ca4:	0751      	lsls	r1, r2, #29
 8000ca6:	d46d      	bmi.n	8000d84 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca8:	0713      	lsls	r3, r2, #28
 8000caa:	d507      	bpl.n	8000cbc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cac:	4a3a      	ldr	r2, [pc, #232]	; (8000d98 <HAL_RCC_ClockConfig+0x128>)
 8000cae:	6921      	ldr	r1, [r4, #16]
 8000cb0:	6893      	ldr	r3, [r2, #8]
 8000cb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cbc:	f7ff ffaa 	bl	8000c14 <HAL_RCC_GetSysClockFreq>
 8000cc0:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <HAL_RCC_ClockConfig+0x128>)
 8000cc2:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <HAL_RCC_ClockConfig+0x12c>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	40d8      	lsrs	r0, r3
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <HAL_RCC_ClockConfig+0x130>)
 8000cd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x134>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	f7ff fc63 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce0:	b2ca      	uxtb	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d1c5      	bne.n	8000c7a <HAL_RCC_ClockConfig+0xa>
 8000cee:	e7cd      	b.n	8000c8c <HAL_RCC_ClockConfig+0x1c>
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cf2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cf6:	bf1e      	ittt	ne
 8000cf8:	689a      	ldrne	r2, [r3, #8]
 8000cfa:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cfe:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d00:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d02:	bf42      	ittt	mi
 8000d04:	689a      	ldrmi	r2, [r3, #8]
 8000d06:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d0a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	68a0      	ldr	r0, [r4, #8]
 8000d10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d14:	4302      	orrs	r2, r0
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	e7bb      	b.n	8000c92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d1a:	6862      	ldr	r2, [r4, #4]
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HAL_RCC_ClockConfig+0x128>)
 8000d1e:	2a01      	cmp	r2, #1
 8000d20:	d11d      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	d0a7      	beq.n	8000c7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2a:	4e1b      	ldr	r6, [pc, #108]	; (8000d98 <HAL_RCC_ClockConfig+0x128>)
 8000d2c:	68b3      	ldr	r3, [r6, #8]
 8000d2e:	f023 0303 	bic.w	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d36:	f7ff fc7d 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d3e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d40:	68b3      	ldr	r3, [r6, #8]
 8000d42:	6862      	ldr	r2, [r4, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d4c:	d0a3      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4e:	f7ff fc71 	bl	8000634 <HAL_GetTick>
 8000d52:	1bc0      	subs	r0, r0, r7
 8000d54:	4540      	cmp	r0, r8
 8000d56:	d9f3      	bls.n	8000d40 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d58:	2003      	movs	r0, #3
}
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d5e:	1e91      	subs	r1, r2, #2
 8000d60:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d62:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d64:	d802      	bhi.n	8000d6c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d6a:	e7dd      	b.n	8000d28 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	f013 0f02 	tst.w	r3, #2
 8000d70:	e7da      	b.n	8000d28 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d72:	b2ea      	uxtb	r2, r5
 8000d74:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 030f 	and.w	r3, r3, #15
 8000d7c:	429d      	cmp	r5, r3
 8000d7e:	f47f af7c 	bne.w	8000c7a <HAL_RCC_ClockConfig+0xa>
 8000d82:	e78e      	b.n	8000ca2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <HAL_RCC_ClockConfig+0x128>)
 8000d86:	68e0      	ldr	r0, [r4, #12]
 8000d88:	688b      	ldr	r3, [r1, #8]
 8000d8a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d8e:	4303      	orrs	r3, r0
 8000d90:	608b      	str	r3, [r1, #8]
 8000d92:	e789      	b.n	8000ca8 <HAL_RCC_ClockConfig+0x38>
 8000d94:	40023c00 	.word	0x40023c00
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	0800238a 	.word	0x0800238a
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000db6:	6810      	ldr	r0, [r2, #0]
}
 8000db8:	40d8      	lsrs	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	0800239a 	.word	0x0800239a
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dd6:	6810      	ldr	r0, [r2, #0]
}
 8000dd8:	40d8      	lsrs	r0, r3
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	0800239a 	.word	0x0800239a
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000de8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000dea:	4604      	mov	r4, r0
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d036      	beq.n	8000e5e <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000df4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dfc:	b91b      	cbnz	r3, 8000e06 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000dfe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e02:	f000 fa6b 	bl	80012dc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e06:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e08:	68a0      	ldr	r0, [r4, #8]
 8000e0a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e12:	680b      	ldr	r3, [r1, #0]
 8000e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e18:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e1a:	6863      	ldr	r3, [r4, #4]
 8000e1c:	4303      	orrs	r3, r0
 8000e1e:	68e0      	ldr	r0, [r4, #12]
 8000e20:	4303      	orrs	r3, r0
 8000e22:	6920      	ldr	r0, [r4, #16]
 8000e24:	4303      	orrs	r3, r0
 8000e26:	6960      	ldr	r0, [r4, #20]
 8000e28:	4303      	orrs	r3, r0
 8000e2a:	69e0      	ldr	r0, [r4, #28]
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	6a20      	ldr	r0, [r4, #32]
 8000e30:	4303      	orrs	r3, r0
 8000e32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e34:	4303      	orrs	r3, r0
 8000e36:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e3a:	4303      	orrs	r3, r0
 8000e3c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e3e:	0c12      	lsrs	r2, r2, #16
 8000e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e42:	f002 0204 	and.w	r2, r2, #4
 8000e46:	431a      	orrs	r2, r3
 8000e48:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e4a:	69cb      	ldr	r3, [r1, #28]
 8000e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e50:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e52:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e54:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e56:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000e5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e5e:	2001      	movs	r0, #1
}
 8000e60:	bd10      	pop	{r4, pc}
	...

08000e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e64:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	68c1      	ldr	r1, [r0, #12]
 8000e6a:	691a      	ldr	r2, [r3, #16]
{
 8000e6c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e72:	430a      	orrs	r2, r1
 8000e74:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e76:	6925      	ldr	r5, [r4, #16]
 8000e78:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000e7a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e7c:	69c0      	ldr	r0, [r0, #28]
 8000e7e:	432a      	orrs	r2, r5
 8000e80:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000e82:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e86:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000e88:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e8c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	69a1      	ldr	r1, [r4, #24]
 8000e96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e9a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	4a25      	ldr	r2, [pc, #148]	; (8000f38 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ea4:	d129      	bne.n	8000efa <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d003      	beq.n	8000eb2 <UART_SetConfig+0x4e>
 8000eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d120      	bne.n	8000ef4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000eb2:	f7ff ff89 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000eb6:	6862      	ldr	r2, [r4, #4]
 8000eb8:	6825      	ldr	r5, [r4, #0]
 8000eba:	1892      	adds	r2, r2, r2
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	f04f 0119 	mov.w	r1, #25
 8000ec4:	415b      	adcs	r3, r3
 8000ec6:	fba0 0101 	umull	r0, r1, r0, r1
 8000eca:	f7ff f9e1 	bl	8000290 <__aeabi_uldivmod>
 8000ece:	2164      	movs	r1, #100	; 0x64
 8000ed0:	fbb0 f4f1 	udiv	r4, r0, r1
 8000ed4:	fb01 0314 	mls	r3, r1, r4, r0
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	3332      	adds	r3, #50	; 0x32
 8000edc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee0:	f003 0207 	and.w	r2, r3, #7
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8000eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000eee:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ef0:	60ab      	str	r3, [r5, #8]
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000ef4:	f7ff ff58 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8000ef8:	e7dd      	b.n	8000eb6 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d002      	beq.n	8000f04 <UART_SetConfig+0xa0>
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <UART_SetConfig+0xd8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d116      	bne.n	8000f32 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f04:	f7ff ff60 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f08:	6863      	ldr	r3, [r4, #4]
 8000f0a:	6825      	ldr	r5, [r4, #0]
 8000f0c:	2119      	movs	r1, #25
 8000f0e:	009a      	lsls	r2, r3, #2
 8000f10:	fba0 0101 	umull	r0, r1, r0, r1
 8000f14:	0f9b      	lsrs	r3, r3, #30
 8000f16:	f7ff f9bb 	bl	8000290 <__aeabi_uldivmod>
 8000f1a:	2264      	movs	r2, #100	; 0x64
 8000f1c:	fbb0 f1f2 	udiv	r1, r0, r2
 8000f20:	fb02 0311 	mls	r3, r2, r1, r0
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	3332      	adds	r3, #50	; 0x32
 8000f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f2c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000f30:	e7de      	b.n	8000ef0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f32:	f7ff ff39 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8000f36:	e7e7      	b.n	8000f08 <UART_SetConfig+0xa4>
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400

08000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	4604      	mov	r4, r0
 8000f44:	460e      	mov	r6, r1
 8000f46:	4617      	mov	r7, r2
 8000f48:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	680b      	ldr	r3, [r1, #0]
 8000f4e:	ea36 0303 	bics.w	r3, r6, r3
 8000f52:	d101      	bne.n	8000f58 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f54:	2000      	movs	r0, #0
}
 8000f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f58:	1c6b      	adds	r3, r5, #1
 8000f5a:	d0f7      	beq.n	8000f4c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f5c:	b995      	cbnz	r5, 8000f84 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f70:	2320      	movs	r3, #32
 8000f72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f76:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f80:	2003      	movs	r0, #3
 8000f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f84:	f7ff fb56 	bl	8000634 <HAL_GetTick>
 8000f88:	1bc0      	subs	r0, r0, r7
 8000f8a:	4285      	cmp	r5, r0
 8000f8c:	d2dd      	bcs.n	8000f4a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f8e:	e7e6      	b.n	8000f5e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f90 <HAL_UART_Init>:
{
 8000f90:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f92:	4604      	mov	r4, r0
 8000f94:	b340      	cbz	r0, 8000fe8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f9e:	b91b      	cbnz	r3, 8000fa8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fa0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fa4:	f000 f9e8 	bl	8001378 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000fa8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000faa:	2324      	movs	r3, #36	; 0x24
 8000fac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000fb0:	68d3      	ldr	r3, [r2, #12]
 8000fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fb6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff ff53 	bl	8000e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fd6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fd8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000fda:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fdc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000fde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000fe2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fe6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
}
 8000fea:	bd10      	pop	{r4, pc}

08000fec <HAL_UART_Transmit>:
{
 8000fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ff0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000ff2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff6:	2b20      	cmp	r3, #32
{
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000ffe:	d151      	bne.n	80010a4 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001000:	2900      	cmp	r1, #0
 8001002:	d04c      	beq.n	800109e <HAL_UART_Transmit+0xb2>
 8001004:	2a00      	cmp	r2, #0
 8001006:	d04a      	beq.n	800109e <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001008:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800100c:	2b01      	cmp	r3, #1
 800100e:	d049      	beq.n	80010a4 <HAL_UART_Transmit+0xb8>
 8001010:	2301      	movs	r3, #1
 8001012:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001016:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800101a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800101c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001020:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001024:	f7ff fb06 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001028:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800102c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800102e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001032:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001036:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001038:	b29b      	uxth	r3, r3
 800103a:	b95b      	cbnz	r3, 8001054 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4632      	mov	r2, r6
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff ff7c 	bl	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001048:	b9a0      	cbnz	r0, 8001074 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800104a:	2320      	movs	r3, #32
 800104c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001054:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001056:	3b01      	subs	r3, #1
 8001058:	b29b      	uxth	r3, r3
 800105a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800105c:	68a3      	ldr	r3, [r4, #8]
 800105e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001062:	4632      	mov	r2, r6
 8001064:	463b      	mov	r3, r7
 8001066:	f04f 0180 	mov.w	r1, #128	; 0x80
 800106a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800106c:	d10e      	bne.n	800108c <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800106e:	f7ff ff67 	bl	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001072:	b110      	cbz	r0, 800107a <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001074:	2003      	movs	r0, #3
 8001076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800107a:	882b      	ldrh	r3, [r5, #0]
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001082:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001084:	6923      	ldr	r3, [r4, #16]
 8001086:	b943      	cbnz	r3, 800109a <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001088:	3502      	adds	r5, #2
 800108a:	e7d4      	b.n	8001036 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800108c:	f7ff ff58 	bl	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001090:	2800      	cmp	r0, #0
 8001092:	d1ef      	bne.n	8001074 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	782a      	ldrb	r2, [r5, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	3501      	adds	r5, #1
 800109c:	e7cb      	b.n	8001036 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80010a4:	2002      	movs	r0, #2
}
 80010a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080010ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80010ac:	b507      	push	{r0, r1, r2, lr}
 80010ae:	a902      	add	r1, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80010b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80010b4:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80010b8:	2201      	movs	r2, #1
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <__io_putchar+0x1c>)
 80010bc:	f7ff ff96 	bl	8000fec <HAL_UART_Transmit>

  return ch;
}
 80010c0:	9801      	ldr	r0, [sp, #4]
 80010c2:	b003      	add	sp, #12
 80010c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c8:	200000f4 	.word	0x200000f4

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b530      	push	{r4, r5, lr}
 80010ce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d0:	2230      	movs	r2, #48	; 0x30
 80010d2:	2100      	movs	r1, #0
 80010d4:	a808      	add	r0, sp, #32
 80010d6:	f000 fa31 	bl	800153c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010da:	2100      	movs	r1, #0
 80010dc:	2214      	movs	r2, #20
 80010de:	a803      	add	r0, sp, #12
 80010e0:	f000 fa2c 	bl	800153c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <SystemClock_Config+0x90>)
 80010e8:	9501      	str	r5, [sp, #4]
 80010ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f4:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010fe:	9502      	str	r5, [sp, #8]
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	6813      	ldr	r3, [r2, #0]
 800110e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001116:	2301      	movs	r3, #1
 8001118:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800111a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800111e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001120:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001124:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001126:	2304      	movs	r3, #4
 8001128:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800112a:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 800112e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001132:	2307      	movs	r3, #7
 8001134:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001138:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f7ff fbc5 	bl	80008c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001148:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001150:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	f7ff fd8d 	bl	8000c70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001156:	b015      	add	sp, #84	; 0x54
 8001158:	bd30      	pop	{r4, r5, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <main>:
{
 8001164:	b500      	push	{lr}
 8001166:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
  HAL_Init();
 800116a:	f7ff fa3d 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 800116e:	f7ff ffad 	bl	80010cc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	2214      	movs	r2, #20
 8001174:	2100      	movs	r1, #0
 8001176:	a804      	add	r0, sp, #16
 8001178:	f000 f9e0 	bl	800153c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	2400      	movs	r4, #0
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <main+0x110>)
 8001180:	9400      	str	r4, [sp, #0]
 8001182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001184:	483c      	ldr	r0, [pc, #240]	; (8001278 <main+0x114>)
	  sprintf(g,"hello world \n");
 8001186:	4d3d      	ldr	r5, [pc, #244]	; (800127c <main+0x118>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	f002 0204 	and.w	r2, r2, #4
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001198:	9401      	str	r4, [sp, #4]
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	9402      	str	r4, [sp, #8]
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
 80011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b8:	f002 0201 	and.w	r2, r2, #1
 80011bc:	9202      	str	r2, [sp, #8]
 80011be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	9403      	str	r4, [sp, #12]
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	f042 0202 	orr.w	r2, r2, #2
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d4:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d8:	f7ff fb70 	bl	80008bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <main+0x11c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	4827      	ldr	r0, [pc, #156]	; (8001284 <main+0x120>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f7ff fa98 	bl	8000720 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f6:	4820      	ldr	r0, [pc, #128]	; (8001278 <main+0x114>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001200:	f7ff fa8e 	bl	8000720 <HAL_GPIO_Init>
  hspi2.Instance = SPI2;
 8001204:	4820      	ldr	r0, [pc, #128]	; (8001288 <main+0x124>)
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <main+0x128>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001208:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800120a:	e880 0018 	stmia.w	r0, {r3, r4}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800120e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001212:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001214:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001216:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001218:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121a:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001222:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001224:	f7ff fde0 	bl	8000de8 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8001228:	4819      	ldr	r0, [pc, #100]	; (8001290 <main+0x12c>)
  huart2.Init.BaudRate = 115200;
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <main+0x130>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800122e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001232:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001236:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123e:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	f7ff fea5 	bl	8000f90 <HAL_UART_Init>
	 printf("hello world from printf");
 8001246:	4c14      	ldr	r4, [pc, #80]	; (8001298 <main+0x134>)
	  sprintf(g,"hello world \n");
 8001248:	4629      	mov	r1, r5
 800124a:	a804      	add	r0, sp, #16
 800124c:	f000 f996 	bl	800157c <strcpy>
	 printf("hello world from printf");
 8001250:	4620      	mov	r0, r4
 8001252:	f000 f97b 	bl	800154c <iprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)g,strlen(g),1000)
 8001256:	a804      	add	r0, sp, #16
 8001258:	f7fe ffc2 	bl	80001e0 <strlen>
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	b282      	uxth	r2, r0
 8001262:	a904      	add	r1, sp, #16
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <main+0x12c>)
 8001266:	f7ff fec1 	bl	8000fec <HAL_UART_Transmit>
;	  HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f7ff f9e7 	bl	8000640 <HAL_Delay>
 8001272:	e7e9      	b.n	8001248 <main+0xe4>
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000
 800127c:	08002364 	.word	0x08002364
 8001280:	10210000 	.word	0x10210000
 8001284:	40020800 	.word	0x40020800
 8001288:	2000009c 	.word	0x2000009c
 800128c:	40003800 	.word	0x40003800
 8001290:	200000f4 	.word	0x200000f4
 8001294:	40004400 	.word	0x40004400
 8001298:	08002372 	.word	0x08002372

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_MspInit+0x3c>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	9100      	str	r1, [sp, #0]
 80012a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
 80012ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	9101      	str	r1, [sp, #4]
 80012b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012c8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012cc:	f7ff f9cc 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d0:	b003      	add	sp, #12
 80012d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	4604      	mov	r4, r0
 80012e0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	2214      	movs	r2, #20
 80012e4:	2100      	movs	r1, #0
 80012e6:	a803      	add	r0, sp, #12
 80012e8:	f000 f928 	bl	800153c <memset>
  if(hspi->Instance==SPI2)
 80012ec:	6822      	ldr	r2, [r4, #0]
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_SPI_MspInit+0x90>)
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d138      	bne.n	8001366 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80012f8:	2400      	movs	r4, #0
 80012fa:	9400      	str	r4, [sp, #0]
 80012fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
 8001306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001308:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	9401      	str	r4, [sp, #4]
 8001312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001314:	f042 0204 	orr.w	r2, r2, #4
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
 800131a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131c:	f002 0204 	and.w	r2, r2, #4
 8001320:	9201      	str	r2, [sp, #4]
 8001322:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	9402      	str	r4, [sp, #8]
 8001326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001328:	f042 0202 	orr.w	r2, r2, #2
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001338:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001342:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001344:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	f7ff f9e8 	bl	8000720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001350:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	a903      	add	r1, sp, #12
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <HAL_SPI_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001358:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001360:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f7ff f9dd 	bl	8000720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001366:	b009      	add	sp, #36	; 0x24
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	bf00      	nop
 800136c:	40003800 	.word	0x40003800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b510      	push	{r4, lr}
 800137a:	4604      	mov	r4, r0
 800137c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	2214      	movs	r2, #20
 8001380:	2100      	movs	r1, #0
 8001382:	a803      	add	r0, sp, #12
 8001384:	f000 f8da 	bl	800153c <memset>
  if(huart->Instance==USART2)
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_UART_MspInit+0x60>)
 800138c:	429a      	cmp	r2, r3
 800138e:	d120      	bne.n	80013d2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001390:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001394:	2100      	movs	r1, #0
 8001396:	9101      	str	r1, [sp, #4]
 8001398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800139c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
 80013a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	9102      	str	r1, [sp, #8]
 80013ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c0:	230c      	movs	r3, #12
 80013c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f7ff f9a7 	bl	8000720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d2:	b008      	add	sp, #32
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40020000 	.word	0x40020000

080013e0 <NMI_Handler>:
 80013e0:	4770      	bx	lr

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler>

080013ea <SVC_Handler>:
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f7ff b914 	b.w	800061c <HAL_IncTick>

080013f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	460e      	mov	r6, r1
 80013f8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	460c      	mov	r4, r1
 80013fc:	1ba3      	subs	r3, r4, r6
 80013fe:	429d      	cmp	r5, r3
 8001400:	dc01      	bgt.n	8001406 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001402:	4628      	mov	r0, r5
 8001404:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	f804 0b01 	strb.w	r0, [r4], #1
 800140e:	e7f5      	b.n	80013fc <_read+0x8>

08001410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	460e      	mov	r6, r1
 8001414:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	460c      	mov	r4, r1
 8001418:	1ba3      	subs	r3, r4, r6
 800141a:	429d      	cmp	r5, r3
 800141c:	dc01      	bgt.n	8001422 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800141e:	4628      	mov	r0, r5
 8001420:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001422:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001426:	f7ff fe41 	bl	80010ac <__io_putchar>
 800142a:	e7f5      	b.n	8001418 <_write+0x8>

0800142c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800142c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <_sbrk+0x2c>)
 8001430:	6819      	ldr	r1, [r3, #0]
{
 8001432:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001434:	b909      	cbnz	r1, 800143a <_sbrk+0xe>
		heap_end = &end;
 8001436:	4909      	ldr	r1, [pc, #36]	; (800145c <_sbrk+0x30>)
 8001438:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800143a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800143c:	4669      	mov	r1, sp
 800143e:	4402      	add	r2, r0
 8001440:	428a      	cmp	r2, r1
 8001442:	d906      	bls.n	8001452 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001444:	f000 f850 	bl	80014e8 <__errno>
 8001448:	230c      	movs	r3, #12
 800144a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001452:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	2000008c 	.word	0x2000008c
 800145c:	20000138 	.word	0x20000138

08001460 <_close>:

int _close(int file)
{
	return -1;
}
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	4770      	bx	lr

08001466 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800146c:	2000      	movs	r0, #0
 800146e:	4770      	bx	lr

08001470 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001470:	2001      	movs	r0, #1
 8001472:	4770      	bx	lr

08001474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001474:	2000      	movs	r0, #0
 8001476:	4770      	bx	lr

08001478 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SystemInit+0x18>)
 800147a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800147e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800149a:	e003      	b.n	80014a4 <LoopCopyDataInit>

0800149c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800149e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014a2:	3104      	adds	r1, #4

080014a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014ac:	d3f6      	bcc.n	800149c <CopyDataInit>
  ldr  r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b0:	e002      	b.n	80014b8 <LoopFillZerobss>

080014b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b4:	f842 3b04 	str.w	r3, [r2], #4

080014b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014bc:	d3f9      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014be:	f7ff ffdb 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f000 f817 	bl	80014f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff fe4d 	bl	8001164 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014cc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80014d0:	0800244c 	.word	0x0800244c
  ldr  r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80014dc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80014e0:	20000138 	.word	0x20000138

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <__errno>:
 80014e8:	4b01      	ldr	r3, [pc, #4]	; (80014f0 <__errno+0x8>)
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <__libc_init_array>:
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	4e0d      	ldr	r6, [pc, #52]	; (800152c <__libc_init_array+0x38>)
 80014f8:	4c0d      	ldr	r4, [pc, #52]	; (8001530 <__libc_init_array+0x3c>)
 80014fa:	1ba4      	subs	r4, r4, r6
 80014fc:	10a4      	asrs	r4, r4, #2
 80014fe:	2500      	movs	r5, #0
 8001500:	42a5      	cmp	r5, r4
 8001502:	d109      	bne.n	8001518 <__libc_init_array+0x24>
 8001504:	4e0b      	ldr	r6, [pc, #44]	; (8001534 <__libc_init_array+0x40>)
 8001506:	4c0c      	ldr	r4, [pc, #48]	; (8001538 <__libc_init_array+0x44>)
 8001508:	f000 ff20 	bl	800234c <_init>
 800150c:	1ba4      	subs	r4, r4, r6
 800150e:	10a4      	asrs	r4, r4, #2
 8001510:	2500      	movs	r5, #0
 8001512:	42a5      	cmp	r5, r4
 8001514:	d105      	bne.n	8001522 <__libc_init_array+0x2e>
 8001516:	bd70      	pop	{r4, r5, r6, pc}
 8001518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800151c:	4798      	blx	r3
 800151e:	3501      	adds	r5, #1
 8001520:	e7ee      	b.n	8001500 <__libc_init_array+0xc>
 8001522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001526:	4798      	blx	r3
 8001528:	3501      	adds	r5, #1
 800152a:	e7f2      	b.n	8001512 <__libc_init_array+0x1e>
 800152c:	08002444 	.word	0x08002444
 8001530:	08002444 	.word	0x08002444
 8001534:	08002444 	.word	0x08002444
 8001538:	08002448 	.word	0x08002448

0800153c <memset>:
 800153c:	4402      	add	r2, r0
 800153e:	4603      	mov	r3, r0
 8001540:	4293      	cmp	r3, r2
 8001542:	d100      	bne.n	8001546 <memset+0xa>
 8001544:	4770      	bx	lr
 8001546:	f803 1b01 	strb.w	r1, [r3], #1
 800154a:	e7f9      	b.n	8001540 <memset+0x4>

0800154c <iprintf>:
 800154c:	b40f      	push	{r0, r1, r2, r3}
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <iprintf+0x2c>)
 8001550:	b513      	push	{r0, r1, r4, lr}
 8001552:	681c      	ldr	r4, [r3, #0]
 8001554:	b124      	cbz	r4, 8001560 <iprintf+0x14>
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	b913      	cbnz	r3, 8001560 <iprintf+0x14>
 800155a:	4620      	mov	r0, r4
 800155c:	f000 f856 	bl	800160c <__sinit>
 8001560:	ab05      	add	r3, sp, #20
 8001562:	9a04      	ldr	r2, [sp, #16]
 8001564:	68a1      	ldr	r1, [r4, #8]
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	4620      	mov	r0, r4
 800156a:	f000 f961 	bl	8001830 <_vfiprintf_r>
 800156e:	b002      	add	sp, #8
 8001570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr
 8001578:	2000000c 	.word	0x2000000c

0800157c <strcpy>:
 800157c:	4603      	mov	r3, r0
 800157e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001582:	f803 2b01 	strb.w	r2, [r3], #1
 8001586:	2a00      	cmp	r2, #0
 8001588:	d1f9      	bne.n	800157e <strcpy+0x2>
 800158a:	4770      	bx	lr

0800158c <_cleanup_r>:
 800158c:	4901      	ldr	r1, [pc, #4]	; (8001594 <_cleanup_r+0x8>)
 800158e:	f000 b8a9 	b.w	80016e4 <_fwalk_reent>
 8001592:	bf00      	nop
 8001594:	08002105 	.word	0x08002105

08001598 <std.isra.0>:
 8001598:	2300      	movs	r3, #0
 800159a:	b510      	push	{r4, lr}
 800159c:	4604      	mov	r4, r0
 800159e:	6003      	str	r3, [r0, #0]
 80015a0:	6043      	str	r3, [r0, #4]
 80015a2:	6083      	str	r3, [r0, #8]
 80015a4:	8181      	strh	r1, [r0, #12]
 80015a6:	6643      	str	r3, [r0, #100]	; 0x64
 80015a8:	81c2      	strh	r2, [r0, #14]
 80015aa:	6103      	str	r3, [r0, #16]
 80015ac:	6143      	str	r3, [r0, #20]
 80015ae:	6183      	str	r3, [r0, #24]
 80015b0:	4619      	mov	r1, r3
 80015b2:	2208      	movs	r2, #8
 80015b4:	305c      	adds	r0, #92	; 0x5c
 80015b6:	f7ff ffc1 	bl	800153c <memset>
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <std.isra.0+0x38>)
 80015bc:	6263      	str	r3, [r4, #36]	; 0x24
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <std.isra.0+0x3c>)
 80015c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <std.isra.0+0x40>)
 80015c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <std.isra.0+0x44>)
 80015c8:	6224      	str	r4, [r4, #32]
 80015ca:	6323      	str	r3, [r4, #48]	; 0x30
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	bf00      	nop
 80015d0:	08001da9 	.word	0x08001da9
 80015d4:	08001dcb 	.word	0x08001dcb
 80015d8:	08001e03 	.word	0x08001e03
 80015dc:	08001e27 	.word	0x08001e27

080015e0 <__sfmoreglue>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	1e4a      	subs	r2, r1, #1
 80015e4:	2568      	movs	r5, #104	; 0x68
 80015e6:	4355      	muls	r5, r2
 80015e8:	460e      	mov	r6, r1
 80015ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015ee:	f000 f897 	bl	8001720 <_malloc_r>
 80015f2:	4604      	mov	r4, r0
 80015f4:	b140      	cbz	r0, 8001608 <__sfmoreglue+0x28>
 80015f6:	2100      	movs	r1, #0
 80015f8:	e880 0042 	stmia.w	r0, {r1, r6}
 80015fc:	300c      	adds	r0, #12
 80015fe:	60a0      	str	r0, [r4, #8]
 8001600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001604:	f7ff ff9a 	bl	800153c <memset>
 8001608:	4620      	mov	r0, r4
 800160a:	bd70      	pop	{r4, r5, r6, pc}

0800160c <__sinit>:
 800160c:	6983      	ldr	r3, [r0, #24]
 800160e:	b510      	push	{r4, lr}
 8001610:	4604      	mov	r4, r0
 8001612:	bb33      	cbnz	r3, 8001662 <__sinit+0x56>
 8001614:	6483      	str	r3, [r0, #72]	; 0x48
 8001616:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001618:	6503      	str	r3, [r0, #80]	; 0x50
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <__sinit+0x58>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <__sinit+0x5c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6282      	str	r2, [r0, #40]	; 0x28
 8001622:	4298      	cmp	r0, r3
 8001624:	bf04      	itt	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	6183      	streq	r3, [r0, #24]
 800162a:	f000 f81f 	bl	800166c <__sfp>
 800162e:	6060      	str	r0, [r4, #4]
 8001630:	4620      	mov	r0, r4
 8001632:	f000 f81b 	bl	800166c <__sfp>
 8001636:	60a0      	str	r0, [r4, #8]
 8001638:	4620      	mov	r0, r4
 800163a:	f000 f817 	bl	800166c <__sfp>
 800163e:	2200      	movs	r2, #0
 8001640:	60e0      	str	r0, [r4, #12]
 8001642:	2104      	movs	r1, #4
 8001644:	6860      	ldr	r0, [r4, #4]
 8001646:	f7ff ffa7 	bl	8001598 <std.isra.0>
 800164a:	2201      	movs	r2, #1
 800164c:	2109      	movs	r1, #9
 800164e:	68a0      	ldr	r0, [r4, #8]
 8001650:	f7ff ffa2 	bl	8001598 <std.isra.0>
 8001654:	2202      	movs	r2, #2
 8001656:	2112      	movs	r1, #18
 8001658:	68e0      	ldr	r0, [r4, #12]
 800165a:	f7ff ff9d 	bl	8001598 <std.isra.0>
 800165e:	2301      	movs	r3, #1
 8001660:	61a3      	str	r3, [r4, #24]
 8001662:	bd10      	pop	{r4, pc}
 8001664:	080023a4 	.word	0x080023a4
 8001668:	0800158d 	.word	0x0800158d

0800166c <__sfp>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <__sfp+0x74>)
 8001670:	681e      	ldr	r6, [r3, #0]
 8001672:	69b3      	ldr	r3, [r6, #24]
 8001674:	4607      	mov	r7, r0
 8001676:	b913      	cbnz	r3, 800167e <__sfp+0x12>
 8001678:	4630      	mov	r0, r6
 800167a:	f7ff ffc7 	bl	800160c <__sinit>
 800167e:	3648      	adds	r6, #72	; 0x48
 8001680:	68b4      	ldr	r4, [r6, #8]
 8001682:	6873      	ldr	r3, [r6, #4]
 8001684:	3b01      	subs	r3, #1
 8001686:	d503      	bpl.n	8001690 <__sfp+0x24>
 8001688:	6833      	ldr	r3, [r6, #0]
 800168a:	b133      	cbz	r3, 800169a <__sfp+0x2e>
 800168c:	6836      	ldr	r6, [r6, #0]
 800168e:	e7f7      	b.n	8001680 <__sfp+0x14>
 8001690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001694:	b16d      	cbz	r5, 80016b2 <__sfp+0x46>
 8001696:	3468      	adds	r4, #104	; 0x68
 8001698:	e7f4      	b.n	8001684 <__sfp+0x18>
 800169a:	2104      	movs	r1, #4
 800169c:	4638      	mov	r0, r7
 800169e:	f7ff ff9f 	bl	80015e0 <__sfmoreglue>
 80016a2:	6030      	str	r0, [r6, #0]
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d1f1      	bne.n	800168c <__sfp+0x20>
 80016a8:	230c      	movs	r3, #12
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4604      	mov	r4, r0
 80016ae:	4620      	mov	r0, r4
 80016b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b6:	81e3      	strh	r3, [r4, #14]
 80016b8:	2301      	movs	r3, #1
 80016ba:	81a3      	strh	r3, [r4, #12]
 80016bc:	6665      	str	r5, [r4, #100]	; 0x64
 80016be:	6025      	str	r5, [r4, #0]
 80016c0:	60a5      	str	r5, [r4, #8]
 80016c2:	6065      	str	r5, [r4, #4]
 80016c4:	6125      	str	r5, [r4, #16]
 80016c6:	6165      	str	r5, [r4, #20]
 80016c8:	61a5      	str	r5, [r4, #24]
 80016ca:	2208      	movs	r2, #8
 80016cc:	4629      	mov	r1, r5
 80016ce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016d2:	f7ff ff33 	bl	800153c <memset>
 80016d6:	6365      	str	r5, [r4, #52]	; 0x34
 80016d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80016da:	64a5      	str	r5, [r4, #72]	; 0x48
 80016dc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80016de:	e7e6      	b.n	80016ae <__sfp+0x42>
 80016e0:	080023a4 	.word	0x080023a4

080016e4 <_fwalk_reent>:
 80016e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e8:	4680      	mov	r8, r0
 80016ea:	4689      	mov	r9, r1
 80016ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016f0:	2600      	movs	r6, #0
 80016f2:	b914      	cbnz	r4, 80016fa <_fwalk_reent+0x16>
 80016f4:	4630      	mov	r0, r6
 80016f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016fa:	68a5      	ldr	r5, [r4, #8]
 80016fc:	6867      	ldr	r7, [r4, #4]
 80016fe:	3f01      	subs	r7, #1
 8001700:	d501      	bpl.n	8001706 <_fwalk_reent+0x22>
 8001702:	6824      	ldr	r4, [r4, #0]
 8001704:	e7f5      	b.n	80016f2 <_fwalk_reent+0xe>
 8001706:	89ab      	ldrh	r3, [r5, #12]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d907      	bls.n	800171c <_fwalk_reent+0x38>
 800170c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001710:	3301      	adds	r3, #1
 8001712:	d003      	beq.n	800171c <_fwalk_reent+0x38>
 8001714:	4629      	mov	r1, r5
 8001716:	4640      	mov	r0, r8
 8001718:	47c8      	blx	r9
 800171a:	4306      	orrs	r6, r0
 800171c:	3568      	adds	r5, #104	; 0x68
 800171e:	e7ee      	b.n	80016fe <_fwalk_reent+0x1a>

08001720 <_malloc_r>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	1ccd      	adds	r5, r1, #3
 8001724:	f025 0503 	bic.w	r5, r5, #3
 8001728:	3508      	adds	r5, #8
 800172a:	2d0c      	cmp	r5, #12
 800172c:	bf38      	it	cc
 800172e:	250c      	movcc	r5, #12
 8001730:	2d00      	cmp	r5, #0
 8001732:	4606      	mov	r6, r0
 8001734:	db01      	blt.n	800173a <_malloc_r+0x1a>
 8001736:	42a9      	cmp	r1, r5
 8001738:	d903      	bls.n	8001742 <_malloc_r+0x22>
 800173a:	230c      	movs	r3, #12
 800173c:	6033      	str	r3, [r6, #0]
 800173e:	2000      	movs	r0, #0
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	f000 fd7f 	bl	8002244 <__malloc_lock>
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <_malloc_r+0xb4>)
 8001748:	6814      	ldr	r4, [r2, #0]
 800174a:	4621      	mov	r1, r4
 800174c:	b991      	cbnz	r1, 8001774 <_malloc_r+0x54>
 800174e:	4c22      	ldr	r4, [pc, #136]	; (80017d8 <_malloc_r+0xb8>)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	b91b      	cbnz	r3, 800175c <_malloc_r+0x3c>
 8001754:	4630      	mov	r0, r6
 8001756:	f000 fb17 	bl	8001d88 <_sbrk_r>
 800175a:	6020      	str	r0, [r4, #0]
 800175c:	4629      	mov	r1, r5
 800175e:	4630      	mov	r0, r6
 8001760:	f000 fb12 	bl	8001d88 <_sbrk_r>
 8001764:	1c43      	adds	r3, r0, #1
 8001766:	d126      	bne.n	80017b6 <_malloc_r+0x96>
 8001768:	230c      	movs	r3, #12
 800176a:	6033      	str	r3, [r6, #0]
 800176c:	4630      	mov	r0, r6
 800176e:	f000 fd6a 	bl	8002246 <__malloc_unlock>
 8001772:	e7e4      	b.n	800173e <_malloc_r+0x1e>
 8001774:	680b      	ldr	r3, [r1, #0]
 8001776:	1b5b      	subs	r3, r3, r5
 8001778:	d41a      	bmi.n	80017b0 <_malloc_r+0x90>
 800177a:	2b0b      	cmp	r3, #11
 800177c:	d90f      	bls.n	800179e <_malloc_r+0x7e>
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	50cd      	str	r5, [r1, r3]
 8001782:	18cc      	adds	r4, r1, r3
 8001784:	4630      	mov	r0, r6
 8001786:	f000 fd5e 	bl	8002246 <__malloc_unlock>
 800178a:	f104 000b 	add.w	r0, r4, #11
 800178e:	1d23      	adds	r3, r4, #4
 8001790:	f020 0007 	bic.w	r0, r0, #7
 8001794:	1ac3      	subs	r3, r0, r3
 8001796:	d01b      	beq.n	80017d0 <_malloc_r+0xb0>
 8001798:	425a      	negs	r2, r3
 800179a:	50e2      	str	r2, [r4, r3]
 800179c:	bd70      	pop	{r4, r5, r6, pc}
 800179e:	428c      	cmp	r4, r1
 80017a0:	bf0d      	iteet	eq
 80017a2:	6863      	ldreq	r3, [r4, #4]
 80017a4:	684b      	ldrne	r3, [r1, #4]
 80017a6:	6063      	strne	r3, [r4, #4]
 80017a8:	6013      	streq	r3, [r2, #0]
 80017aa:	bf18      	it	ne
 80017ac:	460c      	movne	r4, r1
 80017ae:	e7e9      	b.n	8001784 <_malloc_r+0x64>
 80017b0:	460c      	mov	r4, r1
 80017b2:	6849      	ldr	r1, [r1, #4]
 80017b4:	e7ca      	b.n	800174c <_malloc_r+0x2c>
 80017b6:	1cc4      	adds	r4, r0, #3
 80017b8:	f024 0403 	bic.w	r4, r4, #3
 80017bc:	42a0      	cmp	r0, r4
 80017be:	d005      	beq.n	80017cc <_malloc_r+0xac>
 80017c0:	1a21      	subs	r1, r4, r0
 80017c2:	4630      	mov	r0, r6
 80017c4:	f000 fae0 	bl	8001d88 <_sbrk_r>
 80017c8:	3001      	adds	r0, #1
 80017ca:	d0cd      	beq.n	8001768 <_malloc_r+0x48>
 80017cc:	6025      	str	r5, [r4, #0]
 80017ce:	e7d9      	b.n	8001784 <_malloc_r+0x64>
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
 80017d2:	bf00      	nop
 80017d4:	20000090 	.word	0x20000090
 80017d8:	20000094 	.word	0x20000094

080017dc <__sfputc_r>:
 80017dc:	6893      	ldr	r3, [r2, #8]
 80017de:	3b01      	subs	r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	b410      	push	{r4}
 80017e4:	6093      	str	r3, [r2, #8]
 80017e6:	da09      	bge.n	80017fc <__sfputc_r+0x20>
 80017e8:	6994      	ldr	r4, [r2, #24]
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	db02      	blt.n	80017f4 <__sfputc_r+0x18>
 80017ee:	b2cb      	uxtb	r3, r1
 80017f0:	2b0a      	cmp	r3, #10
 80017f2:	d103      	bne.n	80017fc <__sfputc_r+0x20>
 80017f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017f8:	f000 bb1a 	b.w	8001e30 <__swbuf_r>
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	1c58      	adds	r0, r3, #1
 8001800:	6010      	str	r0, [r2, #0]
 8001802:	7019      	strb	r1, [r3, #0]
 8001804:	b2c8      	uxtb	r0, r1
 8001806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800180a:	4770      	bx	lr

0800180c <__sfputs_r>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	4606      	mov	r6, r0
 8001810:	460f      	mov	r7, r1
 8001812:	4614      	mov	r4, r2
 8001814:	18d5      	adds	r5, r2, r3
 8001816:	42ac      	cmp	r4, r5
 8001818:	d101      	bne.n	800181e <__sfputs_r+0x12>
 800181a:	2000      	movs	r0, #0
 800181c:	e007      	b.n	800182e <__sfputs_r+0x22>
 800181e:	463a      	mov	r2, r7
 8001820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001824:	4630      	mov	r0, r6
 8001826:	f7ff ffd9 	bl	80017dc <__sfputc_r>
 800182a:	1c43      	adds	r3, r0, #1
 800182c:	d1f3      	bne.n	8001816 <__sfputs_r+0xa>
 800182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001830 <_vfiprintf_r>:
 8001830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001834:	b09d      	sub	sp, #116	; 0x74
 8001836:	460c      	mov	r4, r1
 8001838:	4617      	mov	r7, r2
 800183a:	9303      	str	r3, [sp, #12]
 800183c:	4606      	mov	r6, r0
 800183e:	b118      	cbz	r0, 8001848 <_vfiprintf_r+0x18>
 8001840:	6983      	ldr	r3, [r0, #24]
 8001842:	b90b      	cbnz	r3, 8001848 <_vfiprintf_r+0x18>
 8001844:	f7ff fee2 	bl	800160c <__sinit>
 8001848:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <_vfiprintf_r+0x20c>)
 800184a:	429c      	cmp	r4, r3
 800184c:	d157      	bne.n	80018fe <_vfiprintf_r+0xce>
 800184e:	6874      	ldr	r4, [r6, #4]
 8001850:	89a3      	ldrh	r3, [r4, #12]
 8001852:	0718      	lsls	r0, r3, #28
 8001854:	d55d      	bpl.n	8001912 <_vfiprintf_r+0xe2>
 8001856:	6923      	ldr	r3, [r4, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d05a      	beq.n	8001912 <_vfiprintf_r+0xe2>
 800185c:	2300      	movs	r3, #0
 800185e:	9309      	str	r3, [sp, #36]	; 0x24
 8001860:	2320      	movs	r3, #32
 8001862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001866:	2330      	movs	r3, #48	; 0x30
 8001868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800186c:	f04f 0b01 	mov.w	fp, #1
 8001870:	46b8      	mov	r8, r7
 8001872:	4645      	mov	r5, r8
 8001874:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d155      	bne.n	8001928 <_vfiprintf_r+0xf8>
 800187c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001880:	d00b      	beq.n	800189a <_vfiprintf_r+0x6a>
 8001882:	4653      	mov	r3, sl
 8001884:	463a      	mov	r2, r7
 8001886:	4621      	mov	r1, r4
 8001888:	4630      	mov	r0, r6
 800188a:	f7ff ffbf 	bl	800180c <__sfputs_r>
 800188e:	3001      	adds	r0, #1
 8001890:	f000 80c4 	beq.w	8001a1c <_vfiprintf_r+0x1ec>
 8001894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001896:	4453      	add	r3, sl
 8001898:	9309      	str	r3, [sp, #36]	; 0x24
 800189a:	f898 3000 	ldrb.w	r3, [r8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80bc 	beq.w	8001a1c <_vfiprintf_r+0x1ec>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	9304      	str	r3, [sp, #16]
 80018ac:	9307      	str	r3, [sp, #28]
 80018ae:	9205      	str	r2, [sp, #20]
 80018b0:	9306      	str	r3, [sp, #24]
 80018b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018b6:	931a      	str	r3, [sp, #104]	; 0x68
 80018b8:	2205      	movs	r2, #5
 80018ba:	7829      	ldrb	r1, [r5, #0]
 80018bc:	4860      	ldr	r0, [pc, #384]	; (8001a40 <_vfiprintf_r+0x210>)
 80018be:	f7fe fc97 	bl	80001f0 <memchr>
 80018c2:	f105 0801 	add.w	r8, r5, #1
 80018c6:	9b04      	ldr	r3, [sp, #16]
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d131      	bne.n	8001930 <_vfiprintf_r+0x100>
 80018cc:	06d9      	lsls	r1, r3, #27
 80018ce:	bf44      	itt	mi
 80018d0:	2220      	movmi	r2, #32
 80018d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018d6:	071a      	lsls	r2, r3, #28
 80018d8:	bf44      	itt	mi
 80018da:	222b      	movmi	r2, #43	; 0x2b
 80018dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018e0:	782a      	ldrb	r2, [r5, #0]
 80018e2:	2a2a      	cmp	r2, #42	; 0x2a
 80018e4:	d02c      	beq.n	8001940 <_vfiprintf_r+0x110>
 80018e6:	9a07      	ldr	r2, [sp, #28]
 80018e8:	2100      	movs	r1, #0
 80018ea:	200a      	movs	r0, #10
 80018ec:	46a8      	mov	r8, r5
 80018ee:	3501      	adds	r5, #1
 80018f0:	f898 3000 	ldrb.w	r3, [r8]
 80018f4:	3b30      	subs	r3, #48	; 0x30
 80018f6:	2b09      	cmp	r3, #9
 80018f8:	d96d      	bls.n	80019d6 <_vfiprintf_r+0x1a6>
 80018fa:	b371      	cbz	r1, 800195a <_vfiprintf_r+0x12a>
 80018fc:	e026      	b.n	800194c <_vfiprintf_r+0x11c>
 80018fe:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <_vfiprintf_r+0x214>)
 8001900:	429c      	cmp	r4, r3
 8001902:	d101      	bne.n	8001908 <_vfiprintf_r+0xd8>
 8001904:	68b4      	ldr	r4, [r6, #8]
 8001906:	e7a3      	b.n	8001850 <_vfiprintf_r+0x20>
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <_vfiprintf_r+0x218>)
 800190a:	429c      	cmp	r4, r3
 800190c:	bf08      	it	eq
 800190e:	68f4      	ldreq	r4, [r6, #12]
 8001910:	e79e      	b.n	8001850 <_vfiprintf_r+0x20>
 8001912:	4621      	mov	r1, r4
 8001914:	4630      	mov	r0, r6
 8001916:	f000 faef 	bl	8001ef8 <__swsetup_r>
 800191a:	2800      	cmp	r0, #0
 800191c:	d09e      	beq.n	800185c <_vfiprintf_r+0x2c>
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	b01d      	add	sp, #116	; 0x74
 8001924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001928:	2b25      	cmp	r3, #37	; 0x25
 800192a:	d0a7      	beq.n	800187c <_vfiprintf_r+0x4c>
 800192c:	46a8      	mov	r8, r5
 800192e:	e7a0      	b.n	8001872 <_vfiprintf_r+0x42>
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <_vfiprintf_r+0x210>)
 8001932:	1a80      	subs	r0, r0, r2
 8001934:	fa0b f000 	lsl.w	r0, fp, r0
 8001938:	4318      	orrs	r0, r3
 800193a:	9004      	str	r0, [sp, #16]
 800193c:	4645      	mov	r5, r8
 800193e:	e7bb      	b.n	80018b8 <_vfiprintf_r+0x88>
 8001940:	9a03      	ldr	r2, [sp, #12]
 8001942:	1d11      	adds	r1, r2, #4
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	9103      	str	r1, [sp, #12]
 8001948:	2a00      	cmp	r2, #0
 800194a:	db01      	blt.n	8001950 <_vfiprintf_r+0x120>
 800194c:	9207      	str	r2, [sp, #28]
 800194e:	e004      	b.n	800195a <_vfiprintf_r+0x12a>
 8001950:	4252      	negs	r2, r2
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	9207      	str	r2, [sp, #28]
 8001958:	9304      	str	r3, [sp, #16]
 800195a:	f898 3000 	ldrb.w	r3, [r8]
 800195e:	2b2e      	cmp	r3, #46	; 0x2e
 8001960:	d110      	bne.n	8001984 <_vfiprintf_r+0x154>
 8001962:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001966:	2b2a      	cmp	r3, #42	; 0x2a
 8001968:	f108 0101 	add.w	r1, r8, #1
 800196c:	d137      	bne.n	80019de <_vfiprintf_r+0x1ae>
 800196e:	9b03      	ldr	r3, [sp, #12]
 8001970:	1d1a      	adds	r2, r3, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	9203      	str	r2, [sp, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	bfb8      	it	lt
 800197a:	f04f 33ff 	movlt.w	r3, #4294967295
 800197e:	f108 0802 	add.w	r8, r8, #2
 8001982:	9305      	str	r3, [sp, #20]
 8001984:	4d31      	ldr	r5, [pc, #196]	; (8001a4c <_vfiprintf_r+0x21c>)
 8001986:	f898 1000 	ldrb.w	r1, [r8]
 800198a:	2203      	movs	r2, #3
 800198c:	4628      	mov	r0, r5
 800198e:	f7fe fc2f 	bl	80001f0 <memchr>
 8001992:	b140      	cbz	r0, 80019a6 <_vfiprintf_r+0x176>
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	1b40      	subs	r0, r0, r5
 8001998:	fa03 f000 	lsl.w	r0, r3, r0
 800199c:	9b04      	ldr	r3, [sp, #16]
 800199e:	4303      	orrs	r3, r0
 80019a0:	9304      	str	r3, [sp, #16]
 80019a2:	f108 0801 	add.w	r8, r8, #1
 80019a6:	f898 1000 	ldrb.w	r1, [r8]
 80019aa:	4829      	ldr	r0, [pc, #164]	; (8001a50 <_vfiprintf_r+0x220>)
 80019ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019b0:	2206      	movs	r2, #6
 80019b2:	f108 0701 	add.w	r7, r8, #1
 80019b6:	f7fe fc1b 	bl	80001f0 <memchr>
 80019ba:	2800      	cmp	r0, #0
 80019bc:	d034      	beq.n	8001a28 <_vfiprintf_r+0x1f8>
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <_vfiprintf_r+0x224>)
 80019c0:	bb03      	cbnz	r3, 8001a04 <_vfiprintf_r+0x1d4>
 80019c2:	9b03      	ldr	r3, [sp, #12]
 80019c4:	3307      	adds	r3, #7
 80019c6:	f023 0307 	bic.w	r3, r3, #7
 80019ca:	3308      	adds	r3, #8
 80019cc:	9303      	str	r3, [sp, #12]
 80019ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019d0:	444b      	add	r3, r9
 80019d2:	9309      	str	r3, [sp, #36]	; 0x24
 80019d4:	e74c      	b.n	8001870 <_vfiprintf_r+0x40>
 80019d6:	fb00 3202 	mla	r2, r0, r2, r3
 80019da:	2101      	movs	r1, #1
 80019dc:	e786      	b.n	80018ec <_vfiprintf_r+0xbc>
 80019de:	2300      	movs	r3, #0
 80019e0:	9305      	str	r3, [sp, #20]
 80019e2:	4618      	mov	r0, r3
 80019e4:	250a      	movs	r5, #10
 80019e6:	4688      	mov	r8, r1
 80019e8:	3101      	adds	r1, #1
 80019ea:	f898 2000 	ldrb.w	r2, [r8]
 80019ee:	3a30      	subs	r2, #48	; 0x30
 80019f0:	2a09      	cmp	r2, #9
 80019f2:	d903      	bls.n	80019fc <_vfiprintf_r+0x1cc>
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0c5      	beq.n	8001984 <_vfiprintf_r+0x154>
 80019f8:	9005      	str	r0, [sp, #20]
 80019fa:	e7c3      	b.n	8001984 <_vfiprintf_r+0x154>
 80019fc:	fb05 2000 	mla	r0, r5, r0, r2
 8001a00:	2301      	movs	r3, #1
 8001a02:	e7f0      	b.n	80019e6 <_vfiprintf_r+0x1b6>
 8001a04:	ab03      	add	r3, sp, #12
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4622      	mov	r2, r4
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <_vfiprintf_r+0x228>)
 8001a0c:	a904      	add	r1, sp, #16
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f3af 8000 	nop.w
 8001a14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a18:	4681      	mov	r9, r0
 8001a1a:	d1d8      	bne.n	80019ce <_vfiprintf_r+0x19e>
 8001a1c:	89a3      	ldrh	r3, [r4, #12]
 8001a1e:	065b      	lsls	r3, r3, #25
 8001a20:	f53f af7d 	bmi.w	800191e <_vfiprintf_r+0xee>
 8001a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a26:	e77c      	b.n	8001922 <_vfiprintf_r+0xf2>
 8001a28:	ab03      	add	r3, sp, #12
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <_vfiprintf_r+0x228>)
 8001a30:	a904      	add	r1, sp, #16
 8001a32:	4630      	mov	r0, r6
 8001a34:	f000 f888 	bl	8001b48 <_printf_i>
 8001a38:	e7ec      	b.n	8001a14 <_vfiprintf_r+0x1e4>
 8001a3a:	bf00      	nop
 8001a3c:	080023c8 	.word	0x080023c8
 8001a40:	08002408 	.word	0x08002408
 8001a44:	080023e8 	.word	0x080023e8
 8001a48:	080023a8 	.word	0x080023a8
 8001a4c:	0800240e 	.word	0x0800240e
 8001a50:	08002412 	.word	0x08002412
 8001a54:	00000000 	.word	0x00000000
 8001a58:	0800180d 	.word	0x0800180d

08001a5c <_printf_common>:
 8001a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a60:	4691      	mov	r9, r2
 8001a62:	461f      	mov	r7, r3
 8001a64:	688a      	ldr	r2, [r1, #8]
 8001a66:	690b      	ldr	r3, [r1, #16]
 8001a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	bfb8      	it	lt
 8001a70:	4613      	movlt	r3, r2
 8001a72:	f8c9 3000 	str.w	r3, [r9]
 8001a76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a7a:	4606      	mov	r6, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	b112      	cbz	r2, 8001a86 <_printf_common+0x2a>
 8001a80:	3301      	adds	r3, #1
 8001a82:	f8c9 3000 	str.w	r3, [r9]
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	0699      	lsls	r1, r3, #26
 8001a8a:	bf42      	ittt	mi
 8001a8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a90:	3302      	addmi	r3, #2
 8001a92:	f8c9 3000 	strmi.w	r3, [r9]
 8001a96:	6825      	ldr	r5, [r4, #0]
 8001a98:	f015 0506 	ands.w	r5, r5, #6
 8001a9c:	d107      	bne.n	8001aae <_printf_common+0x52>
 8001a9e:	f104 0a19 	add.w	sl, r4, #25
 8001aa2:	68e3      	ldr	r3, [r4, #12]
 8001aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	429d      	cmp	r5, r3
 8001aac:	db29      	blt.n	8001b02 <_printf_common+0xa6>
 8001aae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	3300      	adds	r3, #0
 8001ab6:	bf18      	it	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	0692      	lsls	r2, r2, #26
 8001abc:	d42e      	bmi.n	8001b1c <_printf_common+0xc0>
 8001abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ac2:	4639      	mov	r1, r7
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	47c0      	blx	r8
 8001ac8:	3001      	adds	r0, #1
 8001aca:	d021      	beq.n	8001b10 <_printf_common+0xb4>
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	68e5      	ldr	r5, [r4, #12]
 8001ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ad4:	f003 0306 	and.w	r3, r3, #6
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	bf08      	it	eq
 8001adc:	1aad      	subeq	r5, r5, r2
 8001ade:	68a3      	ldr	r3, [r4, #8]
 8001ae0:	6922      	ldr	r2, [r4, #16]
 8001ae2:	bf0c      	ite	eq
 8001ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ae8:	2500      	movne	r5, #0
 8001aea:	4293      	cmp	r3, r2
 8001aec:	bfc4      	itt	gt
 8001aee:	1a9b      	subgt	r3, r3, r2
 8001af0:	18ed      	addgt	r5, r5, r3
 8001af2:	f04f 0900 	mov.w	r9, #0
 8001af6:	341a      	adds	r4, #26
 8001af8:	454d      	cmp	r5, r9
 8001afa:	d11b      	bne.n	8001b34 <_printf_common+0xd8>
 8001afc:	2000      	movs	r0, #0
 8001afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b02:	2301      	movs	r3, #1
 8001b04:	4652      	mov	r2, sl
 8001b06:	4639      	mov	r1, r7
 8001b08:	4630      	mov	r0, r6
 8001b0a:	47c0      	blx	r8
 8001b0c:	3001      	adds	r0, #1
 8001b0e:	d103      	bne.n	8001b18 <_printf_common+0xbc>
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b18:	3501      	adds	r5, #1
 8001b1a:	e7c2      	b.n	8001aa2 <_printf_common+0x46>
 8001b1c:	18e1      	adds	r1, r4, r3
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	2030      	movs	r0, #48	; 0x30
 8001b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b26:	4422      	add	r2, r4
 8001b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b30:	3302      	adds	r3, #2
 8001b32:	e7c4      	b.n	8001abe <_printf_common+0x62>
 8001b34:	2301      	movs	r3, #1
 8001b36:	4622      	mov	r2, r4
 8001b38:	4639      	mov	r1, r7
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	47c0      	blx	r8
 8001b3e:	3001      	adds	r0, #1
 8001b40:	d0e6      	beq.n	8001b10 <_printf_common+0xb4>
 8001b42:	f109 0901 	add.w	r9, r9, #1
 8001b46:	e7d7      	b.n	8001af8 <_printf_common+0x9c>

08001b48 <_printf_i>:
 8001b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b4c:	4617      	mov	r7, r2
 8001b4e:	7e0a      	ldrb	r2, [r1, #24]
 8001b50:	b085      	sub	sp, #20
 8001b52:	2a6e      	cmp	r2, #110	; 0x6e
 8001b54:	4698      	mov	r8, r3
 8001b56:	4606      	mov	r6, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b5c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001b60:	f000 80bc 	beq.w	8001cdc <_printf_i+0x194>
 8001b64:	d81a      	bhi.n	8001b9c <_printf_i+0x54>
 8001b66:	2a63      	cmp	r2, #99	; 0x63
 8001b68:	d02e      	beq.n	8001bc8 <_printf_i+0x80>
 8001b6a:	d80a      	bhi.n	8001b82 <_printf_i+0x3a>
 8001b6c:	2a00      	cmp	r2, #0
 8001b6e:	f000 80c8 	beq.w	8001d02 <_printf_i+0x1ba>
 8001b72:	2a58      	cmp	r2, #88	; 0x58
 8001b74:	f000 808a 	beq.w	8001c8c <_printf_i+0x144>
 8001b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b80:	e02a      	b.n	8001bd8 <_printf_i+0x90>
 8001b82:	2a64      	cmp	r2, #100	; 0x64
 8001b84:	d001      	beq.n	8001b8a <_printf_i+0x42>
 8001b86:	2a69      	cmp	r2, #105	; 0x69
 8001b88:	d1f6      	bne.n	8001b78 <_printf_i+0x30>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b92:	d023      	beq.n	8001bdc <_printf_i+0x94>
 8001b94:	1d11      	adds	r1, r2, #4
 8001b96:	6019      	str	r1, [r3, #0]
 8001b98:	6813      	ldr	r3, [r2, #0]
 8001b9a:	e027      	b.n	8001bec <_printf_i+0xa4>
 8001b9c:	2a73      	cmp	r2, #115	; 0x73
 8001b9e:	f000 80b4 	beq.w	8001d0a <_printf_i+0x1c2>
 8001ba2:	d808      	bhi.n	8001bb6 <_printf_i+0x6e>
 8001ba4:	2a6f      	cmp	r2, #111	; 0x6f
 8001ba6:	d02a      	beq.n	8001bfe <_printf_i+0xb6>
 8001ba8:	2a70      	cmp	r2, #112	; 0x70
 8001baa:	d1e5      	bne.n	8001b78 <_printf_i+0x30>
 8001bac:	680a      	ldr	r2, [r1, #0]
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	600a      	str	r2, [r1, #0]
 8001bb4:	e003      	b.n	8001bbe <_printf_i+0x76>
 8001bb6:	2a75      	cmp	r2, #117	; 0x75
 8001bb8:	d021      	beq.n	8001bfe <_printf_i+0xb6>
 8001bba:	2a78      	cmp	r2, #120	; 0x78
 8001bbc:	d1dc      	bne.n	8001b78 <_printf_i+0x30>
 8001bbe:	2278      	movs	r2, #120	; 0x78
 8001bc0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001bc4:	496e      	ldr	r1, [pc, #440]	; (8001d80 <_printf_i+0x238>)
 8001bc6:	e064      	b.n	8001c92 <_printf_i+0x14a>
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001bce:	1d11      	adds	r1, r2, #4
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0a3      	b.n	8001d24 <_printf_i+0x1dc>
 8001bdc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001be0:	f102 0104 	add.w	r1, r2, #4
 8001be4:	6019      	str	r1, [r3, #0]
 8001be6:	d0d7      	beq.n	8001b98 <_printf_i+0x50>
 8001be8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da03      	bge.n	8001bf8 <_printf_i+0xb0>
 8001bf0:	222d      	movs	r2, #45	; 0x2d
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bf8:	4962      	ldr	r1, [pc, #392]	; (8001d84 <_printf_i+0x23c>)
 8001bfa:	220a      	movs	r2, #10
 8001bfc:	e017      	b.n	8001c2e <_printf_i+0xe6>
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c06:	d003      	beq.n	8001c10 <_printf_i+0xc8>
 8001c08:	1d08      	adds	r0, r1, #4
 8001c0a:	6018      	str	r0, [r3, #0]
 8001c0c:	680b      	ldr	r3, [r1, #0]
 8001c0e:	e006      	b.n	8001c1e <_printf_i+0xd6>
 8001c10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c14:	f101 0004 	add.w	r0, r1, #4
 8001c18:	6018      	str	r0, [r3, #0]
 8001c1a:	d0f7      	beq.n	8001c0c <_printf_i+0xc4>
 8001c1c:	880b      	ldrh	r3, [r1, #0]
 8001c1e:	4959      	ldr	r1, [pc, #356]	; (8001d84 <_printf_i+0x23c>)
 8001c20:	2a6f      	cmp	r2, #111	; 0x6f
 8001c22:	bf14      	ite	ne
 8001c24:	220a      	movne	r2, #10
 8001c26:	2208      	moveq	r2, #8
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001c2e:	6865      	ldr	r5, [r4, #4]
 8001c30:	60a5      	str	r5, [r4, #8]
 8001c32:	2d00      	cmp	r5, #0
 8001c34:	f2c0 809c 	blt.w	8001d70 <_printf_i+0x228>
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	f020 0004 	bic.w	r0, r0, #4
 8001c3e:	6020      	str	r0, [r4, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13f      	bne.n	8001cc4 <_printf_i+0x17c>
 8001c44:	2d00      	cmp	r5, #0
 8001c46:	f040 8095 	bne.w	8001d74 <_printf_i+0x22c>
 8001c4a:	4675      	mov	r5, lr
 8001c4c:	2a08      	cmp	r2, #8
 8001c4e:	d10b      	bne.n	8001c68 <_printf_i+0x120>
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	07da      	lsls	r2, r3, #31
 8001c54:	d508      	bpl.n	8001c68 <_printf_i+0x120>
 8001c56:	6923      	ldr	r3, [r4, #16]
 8001c58:	6862      	ldr	r2, [r4, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	bfde      	ittt	le
 8001c5e:	2330      	movle	r3, #48	; 0x30
 8001c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c68:	ebae 0305 	sub.w	r3, lr, r5
 8001c6c:	6123      	str	r3, [r4, #16]
 8001c6e:	f8cd 8000 	str.w	r8, [sp]
 8001c72:	463b      	mov	r3, r7
 8001c74:	aa03      	add	r2, sp, #12
 8001c76:	4621      	mov	r1, r4
 8001c78:	4630      	mov	r0, r6
 8001c7a:	f7ff feef 	bl	8001a5c <_printf_common>
 8001c7e:	3001      	adds	r0, #1
 8001c80:	d155      	bne.n	8001d2e <_printf_i+0x1e6>
 8001c82:	f04f 30ff 	mov.w	r0, #4294967295
 8001c86:	b005      	add	sp, #20
 8001c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c8c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001c90:	493c      	ldr	r1, [pc, #240]	; (8001d84 <_printf_i+0x23c>)
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c9a:	f100 0504 	add.w	r5, r0, #4
 8001c9e:	601d      	str	r5, [r3, #0]
 8001ca0:	d001      	beq.n	8001ca6 <_printf_i+0x15e>
 8001ca2:	6803      	ldr	r3, [r0, #0]
 8001ca4:	e002      	b.n	8001cac <_printf_i+0x164>
 8001ca6:	0655      	lsls	r5, r2, #25
 8001ca8:	d5fb      	bpl.n	8001ca2 <_printf_i+0x15a>
 8001caa:	8803      	ldrh	r3, [r0, #0]
 8001cac:	07d0      	lsls	r0, r2, #31
 8001cae:	bf44      	itt	mi
 8001cb0:	f042 0220 	orrmi.w	r2, r2, #32
 8001cb4:	6022      	strmi	r2, [r4, #0]
 8001cb6:	b91b      	cbnz	r3, 8001cc0 <_printf_i+0x178>
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	f022 0220 	bic.w	r2, r2, #32
 8001cbe:	6022      	str	r2, [r4, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	e7b1      	b.n	8001c28 <_printf_i+0xe0>
 8001cc4:	4675      	mov	r5, lr
 8001cc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8001cca:	fb02 3310 	mls	r3, r2, r0, r3
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d1f5      	bne.n	8001cc6 <_printf_i+0x17e>
 8001cda:	e7b7      	b.n	8001c4c <_printf_i+0x104>
 8001cdc:	6808      	ldr	r0, [r1, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6949      	ldr	r1, [r1, #20]
 8001ce2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ce6:	d004      	beq.n	8001cf2 <_printf_i+0x1aa>
 8001ce8:	1d10      	adds	r0, r2, #4
 8001cea:	6018      	str	r0, [r3, #0]
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	6019      	str	r1, [r3, #0]
 8001cf0:	e007      	b.n	8001d02 <_printf_i+0x1ba>
 8001cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cf6:	f102 0004 	add.w	r0, r2, #4
 8001cfa:	6018      	str	r0, [r3, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	d0f6      	beq.n	8001cee <_printf_i+0x1a6>
 8001d00:	8019      	strh	r1, [r3, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	6123      	str	r3, [r4, #16]
 8001d06:	4675      	mov	r5, lr
 8001d08:	e7b1      	b.n	8001c6e <_printf_i+0x126>
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	1d11      	adds	r1, r2, #4
 8001d0e:	6019      	str	r1, [r3, #0]
 8001d10:	6815      	ldr	r5, [r2, #0]
 8001d12:	6862      	ldr	r2, [r4, #4]
 8001d14:	2100      	movs	r1, #0
 8001d16:	4628      	mov	r0, r5
 8001d18:	f7fe fa6a 	bl	80001f0 <memchr>
 8001d1c:	b108      	cbz	r0, 8001d22 <_printf_i+0x1da>
 8001d1e:	1b40      	subs	r0, r0, r5
 8001d20:	6060      	str	r0, [r4, #4]
 8001d22:	6863      	ldr	r3, [r4, #4]
 8001d24:	6123      	str	r3, [r4, #16]
 8001d26:	2300      	movs	r3, #0
 8001d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d2c:	e79f      	b.n	8001c6e <_printf_i+0x126>
 8001d2e:	6923      	ldr	r3, [r4, #16]
 8001d30:	462a      	mov	r2, r5
 8001d32:	4639      	mov	r1, r7
 8001d34:	4630      	mov	r0, r6
 8001d36:	47c0      	blx	r8
 8001d38:	3001      	adds	r0, #1
 8001d3a:	d0a2      	beq.n	8001c82 <_printf_i+0x13a>
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	079b      	lsls	r3, r3, #30
 8001d40:	d507      	bpl.n	8001d52 <_printf_i+0x20a>
 8001d42:	2500      	movs	r5, #0
 8001d44:	f104 0919 	add.w	r9, r4, #25
 8001d48:	68e3      	ldr	r3, [r4, #12]
 8001d4a:	9a03      	ldr	r2, [sp, #12]
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	429d      	cmp	r5, r3
 8001d50:	db05      	blt.n	8001d5e <_printf_i+0x216>
 8001d52:	68e0      	ldr	r0, [r4, #12]
 8001d54:	9b03      	ldr	r3, [sp, #12]
 8001d56:	4298      	cmp	r0, r3
 8001d58:	bfb8      	it	lt
 8001d5a:	4618      	movlt	r0, r3
 8001d5c:	e793      	b.n	8001c86 <_printf_i+0x13e>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	464a      	mov	r2, r9
 8001d62:	4639      	mov	r1, r7
 8001d64:	4630      	mov	r0, r6
 8001d66:	47c0      	blx	r8
 8001d68:	3001      	adds	r0, #1
 8001d6a:	d08a      	beq.n	8001c82 <_printf_i+0x13a>
 8001d6c:	3501      	adds	r5, #1
 8001d6e:	e7eb      	b.n	8001d48 <_printf_i+0x200>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1a7      	bne.n	8001cc4 <_printf_i+0x17c>
 8001d74:	780b      	ldrb	r3, [r1, #0]
 8001d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d7e:	e765      	b.n	8001c4c <_printf_i+0x104>
 8001d80:	0800242a 	.word	0x0800242a
 8001d84:	08002419 	.word	0x08002419

08001d88 <_sbrk_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	4c06      	ldr	r4, [pc, #24]	; (8001da4 <_sbrk_r+0x1c>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4605      	mov	r5, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	6023      	str	r3, [r4, #0]
 8001d94:	f7ff fb4a 	bl	800142c <_sbrk>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d102      	bne.n	8001da2 <_sbrk_r+0x1a>
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	b103      	cbz	r3, 8001da2 <_sbrk_r+0x1a>
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
 8001da4:	20000134 	.word	0x20000134

08001da8 <__sread>:
 8001da8:	b510      	push	{r4, lr}
 8001daa:	460c      	mov	r4, r1
 8001dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db0:	f000 fa98 	bl	80022e4 <_read_r>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	bfab      	itete	ge
 8001db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dba:	89a3      	ldrhlt	r3, [r4, #12]
 8001dbc:	181b      	addge	r3, r3, r0
 8001dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dc2:	bfac      	ite	ge
 8001dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dc6:	81a3      	strhlt	r3, [r4, #12]
 8001dc8:	bd10      	pop	{r4, pc}

08001dca <__swrite>:
 8001dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dce:	461f      	mov	r7, r3
 8001dd0:	898b      	ldrh	r3, [r1, #12]
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	4616      	mov	r6, r2
 8001dda:	d505      	bpl.n	8001de8 <__swrite+0x1e>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	2200      	movs	r2, #0
 8001de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de4:	f000 f9b8 	bl	8002158 <_lseek_r>
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	4632      	mov	r2, r6
 8001df6:	463b      	mov	r3, r7
 8001df8:	4628      	mov	r0, r5
 8001dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfe:	f000 b869 	b.w	8001ed4 <_write_r>

08001e02 <__sseek>:
 8001e02:	b510      	push	{r4, lr}
 8001e04:	460c      	mov	r4, r1
 8001e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e0a:	f000 f9a5 	bl	8002158 <_lseek_r>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	bf15      	itete	ne
 8001e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e1e:	81a3      	strheq	r3, [r4, #12]
 8001e20:	bf18      	it	ne
 8001e22:	81a3      	strhne	r3, [r4, #12]
 8001e24:	bd10      	pop	{r4, pc}

08001e26 <__sclose>:
 8001e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e2a:	f000 b8d3 	b.w	8001fd4 <_close_r>
	...

08001e30 <__swbuf_r>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	460e      	mov	r6, r1
 8001e34:	4614      	mov	r4, r2
 8001e36:	4605      	mov	r5, r0
 8001e38:	b118      	cbz	r0, 8001e42 <__swbuf_r+0x12>
 8001e3a:	6983      	ldr	r3, [r0, #24]
 8001e3c:	b90b      	cbnz	r3, 8001e42 <__swbuf_r+0x12>
 8001e3e:	f7ff fbe5 	bl	800160c <__sinit>
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <__swbuf_r+0x98>)
 8001e44:	429c      	cmp	r4, r3
 8001e46:	d12a      	bne.n	8001e9e <__swbuf_r+0x6e>
 8001e48:	686c      	ldr	r4, [r5, #4]
 8001e4a:	69a3      	ldr	r3, [r4, #24]
 8001e4c:	60a3      	str	r3, [r4, #8]
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	071a      	lsls	r2, r3, #28
 8001e52:	d52e      	bpl.n	8001eb2 <__swbuf_r+0x82>
 8001e54:	6923      	ldr	r3, [r4, #16]
 8001e56:	b363      	cbz	r3, 8001eb2 <__swbuf_r+0x82>
 8001e58:	6923      	ldr	r3, [r4, #16]
 8001e5a:	6820      	ldr	r0, [r4, #0]
 8001e5c:	1ac0      	subs	r0, r0, r3
 8001e5e:	6963      	ldr	r3, [r4, #20]
 8001e60:	b2f6      	uxtb	r6, r6
 8001e62:	4298      	cmp	r0, r3
 8001e64:	4637      	mov	r7, r6
 8001e66:	db04      	blt.n	8001e72 <__swbuf_r+0x42>
 8001e68:	4621      	mov	r1, r4
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	f000 f94a 	bl	8002104 <_fflush_r>
 8001e70:	bb28      	cbnz	r0, 8001ebe <__swbuf_r+0x8e>
 8001e72:	68a3      	ldr	r3, [r4, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60a3      	str	r3, [r4, #8]
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	6022      	str	r2, [r4, #0]
 8001e7e:	701e      	strb	r6, [r3, #0]
 8001e80:	6963      	ldr	r3, [r4, #20]
 8001e82:	3001      	adds	r0, #1
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d004      	beq.n	8001e92 <__swbuf_r+0x62>
 8001e88:	89a3      	ldrh	r3, [r4, #12]
 8001e8a:	07db      	lsls	r3, r3, #31
 8001e8c:	d519      	bpl.n	8001ec2 <__swbuf_r+0x92>
 8001e8e:	2e0a      	cmp	r6, #10
 8001e90:	d117      	bne.n	8001ec2 <__swbuf_r+0x92>
 8001e92:	4621      	mov	r1, r4
 8001e94:	4628      	mov	r0, r5
 8001e96:	f000 f935 	bl	8002104 <_fflush_r>
 8001e9a:	b190      	cbz	r0, 8001ec2 <__swbuf_r+0x92>
 8001e9c:	e00f      	b.n	8001ebe <__swbuf_r+0x8e>
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <__swbuf_r+0x9c>)
 8001ea0:	429c      	cmp	r4, r3
 8001ea2:	d101      	bne.n	8001ea8 <__swbuf_r+0x78>
 8001ea4:	68ac      	ldr	r4, [r5, #8]
 8001ea6:	e7d0      	b.n	8001e4a <__swbuf_r+0x1a>
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <__swbuf_r+0xa0>)
 8001eaa:	429c      	cmp	r4, r3
 8001eac:	bf08      	it	eq
 8001eae:	68ec      	ldreq	r4, [r5, #12]
 8001eb0:	e7cb      	b.n	8001e4a <__swbuf_r+0x1a>
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f000 f81f 	bl	8001ef8 <__swsetup_r>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d0cc      	beq.n	8001e58 <__swbuf_r+0x28>
 8001ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8001ec2:	4638      	mov	r0, r7
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080023c8 	.word	0x080023c8
 8001ecc:	080023e8 	.word	0x080023e8
 8001ed0:	080023a8 	.word	0x080023a8

08001ed4 <_write_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4c07      	ldr	r4, [pc, #28]	; (8001ef4 <_write_r+0x20>)
 8001ed8:	4605      	mov	r5, r0
 8001eda:	4608      	mov	r0, r1
 8001edc:	4611      	mov	r1, r2
 8001ede:	2200      	movs	r2, #0
 8001ee0:	6022      	str	r2, [r4, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff fa94 	bl	8001410 <_write>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	d102      	bne.n	8001ef2 <_write_r+0x1e>
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	b103      	cbz	r3, 8001ef2 <_write_r+0x1e>
 8001ef0:	602b      	str	r3, [r5, #0]
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
 8001ef4:	20000134 	.word	0x20000134

08001ef8 <__swsetup_r>:
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <__swsetup_r+0xcc>)
 8001efa:	b570      	push	{r4, r5, r6, lr}
 8001efc:	681d      	ldr	r5, [r3, #0]
 8001efe:	4606      	mov	r6, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	b125      	cbz	r5, 8001f0e <__swsetup_r+0x16>
 8001f04:	69ab      	ldr	r3, [r5, #24]
 8001f06:	b913      	cbnz	r3, 8001f0e <__swsetup_r+0x16>
 8001f08:	4628      	mov	r0, r5
 8001f0a:	f7ff fb7f 	bl	800160c <__sinit>
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <__swsetup_r+0xd0>)
 8001f10:	429c      	cmp	r4, r3
 8001f12:	d10f      	bne.n	8001f34 <__swsetup_r+0x3c>
 8001f14:	686c      	ldr	r4, [r5, #4]
 8001f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	0715      	lsls	r5, r2, #28
 8001f1e:	d42c      	bmi.n	8001f7a <__swsetup_r+0x82>
 8001f20:	06d0      	lsls	r0, r2, #27
 8001f22:	d411      	bmi.n	8001f48 <__swsetup_r+0x50>
 8001f24:	2209      	movs	r2, #9
 8001f26:	6032      	str	r2, [r6, #0]
 8001f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2c:	81a3      	strh	r3, [r4, #12]
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <__swsetup_r+0xd4>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	d101      	bne.n	8001f3e <__swsetup_r+0x46>
 8001f3a:	68ac      	ldr	r4, [r5, #8]
 8001f3c:	e7eb      	b.n	8001f16 <__swsetup_r+0x1e>
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <__swsetup_r+0xd8>)
 8001f40:	429c      	cmp	r4, r3
 8001f42:	bf08      	it	eq
 8001f44:	68ec      	ldreq	r4, [r5, #12]
 8001f46:	e7e6      	b.n	8001f16 <__swsetup_r+0x1e>
 8001f48:	0751      	lsls	r1, r2, #29
 8001f4a:	d512      	bpl.n	8001f72 <__swsetup_r+0x7a>
 8001f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f4e:	b141      	cbz	r1, 8001f62 <__swsetup_r+0x6a>
 8001f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f54:	4299      	cmp	r1, r3
 8001f56:	d002      	beq.n	8001f5e <__swsetup_r+0x66>
 8001f58:	4630      	mov	r0, r6
 8001f5a:	f000 f975 	bl	8002248 <_free_r>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6363      	str	r3, [r4, #52]	; 0x34
 8001f62:	89a3      	ldrh	r3, [r4, #12]
 8001f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f68:	81a3      	strh	r3, [r4, #12]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6063      	str	r3, [r4, #4]
 8001f6e:	6923      	ldr	r3, [r4, #16]
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	81a3      	strh	r3, [r4, #12]
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	b94b      	cbnz	r3, 8001f92 <__swsetup_r+0x9a>
 8001f7e:	89a3      	ldrh	r3, [r4, #12]
 8001f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f88:	d003      	beq.n	8001f92 <__swsetup_r+0x9a>
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f000 f919 	bl	80021c4 <__smakebuf_r>
 8001f92:	89a2      	ldrh	r2, [r4, #12]
 8001f94:	f012 0301 	ands.w	r3, r2, #1
 8001f98:	d00c      	beq.n	8001fb4 <__swsetup_r+0xbc>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60a3      	str	r3, [r4, #8]
 8001f9e:	6963      	ldr	r3, [r4, #20]
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	61a3      	str	r3, [r4, #24]
 8001fa4:	6923      	ldr	r3, [r4, #16]
 8001fa6:	b953      	cbnz	r3, 8001fbe <__swsetup_r+0xc6>
 8001fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001fb0:	d1ba      	bne.n	8001f28 <__swsetup_r+0x30>
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	0792      	lsls	r2, r2, #30
 8001fb6:	bf58      	it	pl
 8001fb8:	6963      	ldrpl	r3, [r4, #20]
 8001fba:	60a3      	str	r3, [r4, #8]
 8001fbc:	e7f2      	b.n	8001fa4 <__swsetup_r+0xac>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e7f7      	b.n	8001fb2 <__swsetup_r+0xba>
 8001fc2:	bf00      	nop
 8001fc4:	2000000c 	.word	0x2000000c
 8001fc8:	080023c8 	.word	0x080023c8
 8001fcc:	080023e8 	.word	0x080023e8
 8001fd0:	080023a8 	.word	0x080023a8

08001fd4 <_close_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4c06      	ldr	r4, [pc, #24]	; (8001ff0 <_close_r+0x1c>)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4605      	mov	r5, r0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	6023      	str	r3, [r4, #0]
 8001fe0:	f7ff fa3e 	bl	8001460 <_close>
 8001fe4:	1c43      	adds	r3, r0, #1
 8001fe6:	d102      	bne.n	8001fee <_close_r+0x1a>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	b103      	cbz	r3, 8001fee <_close_r+0x1a>
 8001fec:	602b      	str	r3, [r5, #0]
 8001fee:	bd38      	pop	{r3, r4, r5, pc}
 8001ff0:	20000134 	.word	0x20000134

08001ff4 <__sflush_r>:
 8001ff4:	898a      	ldrh	r2, [r1, #12]
 8001ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	0710      	lsls	r0, r2, #28
 8001ffe:	460c      	mov	r4, r1
 8002000:	d45a      	bmi.n	80020b8 <__sflush_r+0xc4>
 8002002:	684b      	ldr	r3, [r1, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	dc05      	bgt.n	8002014 <__sflush_r+0x20>
 8002008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	dc02      	bgt.n	8002014 <__sflush_r+0x20>
 800200e:	2000      	movs	r0, #0
 8002010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002016:	2e00      	cmp	r6, #0
 8002018:	d0f9      	beq.n	800200e <__sflush_r+0x1a>
 800201a:	2300      	movs	r3, #0
 800201c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002020:	682f      	ldr	r7, [r5, #0]
 8002022:	602b      	str	r3, [r5, #0]
 8002024:	d033      	beq.n	800208e <__sflush_r+0x9a>
 8002026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	075a      	lsls	r2, r3, #29
 800202c:	d505      	bpl.n	800203a <__sflush_r+0x46>
 800202e:	6863      	ldr	r3, [r4, #4]
 8002030:	1ac0      	subs	r0, r0, r3
 8002032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002034:	b10b      	cbz	r3, 800203a <__sflush_r+0x46>
 8002036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002038:	1ac0      	subs	r0, r0, r3
 800203a:	2300      	movs	r3, #0
 800203c:	4602      	mov	r2, r0
 800203e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002040:	6a21      	ldr	r1, [r4, #32]
 8002042:	4628      	mov	r0, r5
 8002044:	47b0      	blx	r6
 8002046:	1c43      	adds	r3, r0, #1
 8002048:	89a3      	ldrh	r3, [r4, #12]
 800204a:	d106      	bne.n	800205a <__sflush_r+0x66>
 800204c:	6829      	ldr	r1, [r5, #0]
 800204e:	291d      	cmp	r1, #29
 8002050:	d84b      	bhi.n	80020ea <__sflush_r+0xf6>
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <__sflush_r+0x10c>)
 8002054:	40ca      	lsrs	r2, r1
 8002056:	07d6      	lsls	r6, r2, #31
 8002058:	d547      	bpl.n	80020ea <__sflush_r+0xf6>
 800205a:	2200      	movs	r2, #0
 800205c:	6062      	str	r2, [r4, #4]
 800205e:	04d9      	lsls	r1, r3, #19
 8002060:	6922      	ldr	r2, [r4, #16]
 8002062:	6022      	str	r2, [r4, #0]
 8002064:	d504      	bpl.n	8002070 <__sflush_r+0x7c>
 8002066:	1c42      	adds	r2, r0, #1
 8002068:	d101      	bne.n	800206e <__sflush_r+0x7a>
 800206a:	682b      	ldr	r3, [r5, #0]
 800206c:	b903      	cbnz	r3, 8002070 <__sflush_r+0x7c>
 800206e:	6560      	str	r0, [r4, #84]	; 0x54
 8002070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002072:	602f      	str	r7, [r5, #0]
 8002074:	2900      	cmp	r1, #0
 8002076:	d0ca      	beq.n	800200e <__sflush_r+0x1a>
 8002078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800207c:	4299      	cmp	r1, r3
 800207e:	d002      	beq.n	8002086 <__sflush_r+0x92>
 8002080:	4628      	mov	r0, r5
 8002082:	f000 f8e1 	bl	8002248 <_free_r>
 8002086:	2000      	movs	r0, #0
 8002088:	6360      	str	r0, [r4, #52]	; 0x34
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800208e:	6a21      	ldr	r1, [r4, #32]
 8002090:	2301      	movs	r3, #1
 8002092:	4628      	mov	r0, r5
 8002094:	47b0      	blx	r6
 8002096:	1c41      	adds	r1, r0, #1
 8002098:	d1c6      	bne.n	8002028 <__sflush_r+0x34>
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0c3      	beq.n	8002028 <__sflush_r+0x34>
 80020a0:	2b1d      	cmp	r3, #29
 80020a2:	d001      	beq.n	80020a8 <__sflush_r+0xb4>
 80020a4:	2b16      	cmp	r3, #22
 80020a6:	d101      	bne.n	80020ac <__sflush_r+0xb8>
 80020a8:	602f      	str	r7, [r5, #0]
 80020aa:	e7b0      	b.n	800200e <__sflush_r+0x1a>
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b8:	690f      	ldr	r7, [r1, #16]
 80020ba:	2f00      	cmp	r7, #0
 80020bc:	d0a7      	beq.n	800200e <__sflush_r+0x1a>
 80020be:	0793      	lsls	r3, r2, #30
 80020c0:	680e      	ldr	r6, [r1, #0]
 80020c2:	bf08      	it	eq
 80020c4:	694b      	ldreq	r3, [r1, #20]
 80020c6:	600f      	str	r7, [r1, #0]
 80020c8:	bf18      	it	ne
 80020ca:	2300      	movne	r3, #0
 80020cc:	eba6 0807 	sub.w	r8, r6, r7
 80020d0:	608b      	str	r3, [r1, #8]
 80020d2:	f1b8 0f00 	cmp.w	r8, #0
 80020d6:	dd9a      	ble.n	800200e <__sflush_r+0x1a>
 80020d8:	4643      	mov	r3, r8
 80020da:	463a      	mov	r2, r7
 80020dc:	6a21      	ldr	r1, [r4, #32]
 80020de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020e0:	4628      	mov	r0, r5
 80020e2:	47b0      	blx	r6
 80020e4:	2800      	cmp	r0, #0
 80020e6:	dc07      	bgt.n	80020f8 <__sflush_r+0x104>
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ee:	81a3      	strh	r3, [r4, #12]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020f8:	4407      	add	r7, r0
 80020fa:	eba8 0800 	sub.w	r8, r8, r0
 80020fe:	e7e8      	b.n	80020d2 <__sflush_r+0xde>
 8002100:	20400001 	.word	0x20400001

08002104 <_fflush_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	690b      	ldr	r3, [r1, #16]
 8002108:	4605      	mov	r5, r0
 800210a:	460c      	mov	r4, r1
 800210c:	b1db      	cbz	r3, 8002146 <_fflush_r+0x42>
 800210e:	b118      	cbz	r0, 8002118 <_fflush_r+0x14>
 8002110:	6983      	ldr	r3, [r0, #24]
 8002112:	b90b      	cbnz	r3, 8002118 <_fflush_r+0x14>
 8002114:	f7ff fa7a 	bl	800160c <__sinit>
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <_fflush_r+0x48>)
 800211a:	429c      	cmp	r4, r3
 800211c:	d109      	bne.n	8002132 <_fflush_r+0x2e>
 800211e:	686c      	ldr	r4, [r5, #4]
 8002120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002124:	b17b      	cbz	r3, 8002146 <_fflush_r+0x42>
 8002126:	4621      	mov	r1, r4
 8002128:	4628      	mov	r0, r5
 800212a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800212e:	f7ff bf61 	b.w	8001ff4 <__sflush_r>
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_fflush_r+0x4c>)
 8002134:	429c      	cmp	r4, r3
 8002136:	d101      	bne.n	800213c <_fflush_r+0x38>
 8002138:	68ac      	ldr	r4, [r5, #8]
 800213a:	e7f1      	b.n	8002120 <_fflush_r+0x1c>
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <_fflush_r+0x50>)
 800213e:	429c      	cmp	r4, r3
 8002140:	bf08      	it	eq
 8002142:	68ec      	ldreq	r4, [r5, #12]
 8002144:	e7ec      	b.n	8002120 <_fflush_r+0x1c>
 8002146:	2000      	movs	r0, #0
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	bf00      	nop
 800214c:	080023c8 	.word	0x080023c8
 8002150:	080023e8 	.word	0x080023e8
 8002154:	080023a8 	.word	0x080023a8

08002158 <_lseek_r>:
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4c07      	ldr	r4, [pc, #28]	; (8002178 <_lseek_r+0x20>)
 800215c:	4605      	mov	r5, r0
 800215e:	4608      	mov	r0, r1
 8002160:	4611      	mov	r1, r2
 8002162:	2200      	movs	r2, #0
 8002164:	6022      	str	r2, [r4, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	f7ff f984 	bl	8001474 <_lseek>
 800216c:	1c43      	adds	r3, r0, #1
 800216e:	d102      	bne.n	8002176 <_lseek_r+0x1e>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	b103      	cbz	r3, 8002176 <_lseek_r+0x1e>
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	20000134 	.word	0x20000134

0800217c <__swhatbuf_r>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	460e      	mov	r6, r1
 8002180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002184:	2900      	cmp	r1, #0
 8002186:	b090      	sub	sp, #64	; 0x40
 8002188:	4614      	mov	r4, r2
 800218a:	461d      	mov	r5, r3
 800218c:	da07      	bge.n	800219e <__swhatbuf_r+0x22>
 800218e:	2300      	movs	r3, #0
 8002190:	602b      	str	r3, [r5, #0]
 8002192:	89b3      	ldrh	r3, [r6, #12]
 8002194:	061a      	lsls	r2, r3, #24
 8002196:	d410      	bmi.n	80021ba <__swhatbuf_r+0x3e>
 8002198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219c:	e00e      	b.n	80021bc <__swhatbuf_r+0x40>
 800219e:	aa01      	add	r2, sp, #4
 80021a0:	f000 f8b2 	bl	8002308 <_fstat_r>
 80021a4:	2800      	cmp	r0, #0
 80021a6:	dbf2      	blt.n	800218e <__swhatbuf_r+0x12>
 80021a8:	9a02      	ldr	r2, [sp, #8]
 80021aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021b2:	425a      	negs	r2, r3
 80021b4:	415a      	adcs	r2, r3
 80021b6:	602a      	str	r2, [r5, #0]
 80021b8:	e7ee      	b.n	8002198 <__swhatbuf_r+0x1c>
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	2000      	movs	r0, #0
 80021be:	6023      	str	r3, [r4, #0]
 80021c0:	b010      	add	sp, #64	; 0x40
 80021c2:	bd70      	pop	{r4, r5, r6, pc}

080021c4 <__smakebuf_r>:
 80021c4:	898b      	ldrh	r3, [r1, #12]
 80021c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021c8:	079d      	lsls	r5, r3, #30
 80021ca:	4606      	mov	r6, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	d507      	bpl.n	80021e0 <__smakebuf_r+0x1c>
 80021d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	6123      	str	r3, [r4, #16]
 80021d8:	2301      	movs	r3, #1
 80021da:	6163      	str	r3, [r4, #20]
 80021dc:	b002      	add	sp, #8
 80021de:	bd70      	pop	{r4, r5, r6, pc}
 80021e0:	ab01      	add	r3, sp, #4
 80021e2:	466a      	mov	r2, sp
 80021e4:	f7ff ffca 	bl	800217c <__swhatbuf_r>
 80021e8:	9900      	ldr	r1, [sp, #0]
 80021ea:	4605      	mov	r5, r0
 80021ec:	4630      	mov	r0, r6
 80021ee:	f7ff fa97 	bl	8001720 <_malloc_r>
 80021f2:	b948      	cbnz	r0, 8002208 <__smakebuf_r+0x44>
 80021f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021f8:	059a      	lsls	r2, r3, #22
 80021fa:	d4ef      	bmi.n	80021dc <__smakebuf_r+0x18>
 80021fc:	f023 0303 	bic.w	r3, r3, #3
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	81a3      	strh	r3, [r4, #12]
 8002206:	e7e3      	b.n	80021d0 <__smakebuf_r+0xc>
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <__smakebuf_r+0x7c>)
 800220a:	62b3      	str	r3, [r6, #40]	; 0x28
 800220c:	89a3      	ldrh	r3, [r4, #12]
 800220e:	6020      	str	r0, [r4, #0]
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	9b00      	ldr	r3, [sp, #0]
 8002218:	6163      	str	r3, [r4, #20]
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	6120      	str	r0, [r4, #16]
 800221e:	b15b      	cbz	r3, 8002238 <__smakebuf_r+0x74>
 8002220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002224:	4630      	mov	r0, r6
 8002226:	f000 f881 	bl	800232c <_isatty_r>
 800222a:	b128      	cbz	r0, 8002238 <__smakebuf_r+0x74>
 800222c:	89a3      	ldrh	r3, [r4, #12]
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	81a3      	strh	r3, [r4, #12]
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	431d      	orrs	r5, r3
 800223c:	81a5      	strh	r5, [r4, #12]
 800223e:	e7cd      	b.n	80021dc <__smakebuf_r+0x18>
 8002240:	0800158d 	.word	0x0800158d

08002244 <__malloc_lock>:
 8002244:	4770      	bx	lr

08002246 <__malloc_unlock>:
 8002246:	4770      	bx	lr

08002248 <_free_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4605      	mov	r5, r0
 800224c:	2900      	cmp	r1, #0
 800224e:	d045      	beq.n	80022dc <_free_r+0x94>
 8002250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002254:	1f0c      	subs	r4, r1, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	bfb8      	it	lt
 800225a:	18e4      	addlt	r4, r4, r3
 800225c:	f7ff fff2 	bl	8002244 <__malloc_lock>
 8002260:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <_free_r+0x98>)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	4610      	mov	r0, r2
 8002266:	b933      	cbnz	r3, 8002276 <_free_r+0x2e>
 8002268:	6063      	str	r3, [r4, #4]
 800226a:	6014      	str	r4, [r2, #0]
 800226c:	4628      	mov	r0, r5
 800226e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002272:	f7ff bfe8 	b.w	8002246 <__malloc_unlock>
 8002276:	42a3      	cmp	r3, r4
 8002278:	d90c      	bls.n	8002294 <_free_r+0x4c>
 800227a:	6821      	ldr	r1, [r4, #0]
 800227c:	1862      	adds	r2, r4, r1
 800227e:	4293      	cmp	r3, r2
 8002280:	bf04      	itt	eq
 8002282:	681a      	ldreq	r2, [r3, #0]
 8002284:	685b      	ldreq	r3, [r3, #4]
 8002286:	6063      	str	r3, [r4, #4]
 8002288:	bf04      	itt	eq
 800228a:	1852      	addeq	r2, r2, r1
 800228c:	6022      	streq	r2, [r4, #0]
 800228e:	6004      	str	r4, [r0, #0]
 8002290:	e7ec      	b.n	800226c <_free_r+0x24>
 8002292:	4613      	mov	r3, r2
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	b10a      	cbz	r2, 800229c <_free_r+0x54>
 8002298:	42a2      	cmp	r2, r4
 800229a:	d9fa      	bls.n	8002292 <_free_r+0x4a>
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	1858      	adds	r0, r3, r1
 80022a0:	42a0      	cmp	r0, r4
 80022a2:	d10b      	bne.n	80022bc <_free_r+0x74>
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	4401      	add	r1, r0
 80022a8:	1858      	adds	r0, r3, r1
 80022aa:	4282      	cmp	r2, r0
 80022ac:	6019      	str	r1, [r3, #0]
 80022ae:	d1dd      	bne.n	800226c <_free_r+0x24>
 80022b0:	6810      	ldr	r0, [r2, #0]
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	4401      	add	r1, r0
 80022b8:	6019      	str	r1, [r3, #0]
 80022ba:	e7d7      	b.n	800226c <_free_r+0x24>
 80022bc:	d902      	bls.n	80022c4 <_free_r+0x7c>
 80022be:	230c      	movs	r3, #12
 80022c0:	602b      	str	r3, [r5, #0]
 80022c2:	e7d3      	b.n	800226c <_free_r+0x24>
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	1821      	adds	r1, r4, r0
 80022c8:	428a      	cmp	r2, r1
 80022ca:	bf04      	itt	eq
 80022cc:	6811      	ldreq	r1, [r2, #0]
 80022ce:	6852      	ldreq	r2, [r2, #4]
 80022d0:	6062      	str	r2, [r4, #4]
 80022d2:	bf04      	itt	eq
 80022d4:	1809      	addeq	r1, r1, r0
 80022d6:	6021      	streq	r1, [r4, #0]
 80022d8:	605c      	str	r4, [r3, #4]
 80022da:	e7c7      	b.n	800226c <_free_r+0x24>
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
 80022de:	bf00      	nop
 80022e0:	20000090 	.word	0x20000090

080022e4 <_read_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	4c07      	ldr	r4, [pc, #28]	; (8002304 <_read_r+0x20>)
 80022e8:	4605      	mov	r5, r0
 80022ea:	4608      	mov	r0, r1
 80022ec:	4611      	mov	r1, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	6022      	str	r2, [r4, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f7ff f87e 	bl	80013f4 <_read>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_read_r+0x1e>
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_read_r+0x1e>
 8002300:	602b      	str	r3, [r5, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000134 	.word	0x20000134

08002308 <_fstat_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	4c07      	ldr	r4, [pc, #28]	; (8002328 <_fstat_r+0x20>)
 800230c:	2300      	movs	r3, #0
 800230e:	4605      	mov	r5, r0
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	f7ff f8a6 	bl	8001466 <_fstat>
 800231a:	1c43      	adds	r3, r0, #1
 800231c:	d102      	bne.n	8002324 <_fstat_r+0x1c>
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	b103      	cbz	r3, 8002324 <_fstat_r+0x1c>
 8002322:	602b      	str	r3, [r5, #0]
 8002324:	bd38      	pop	{r3, r4, r5, pc}
 8002326:	bf00      	nop
 8002328:	20000134 	.word	0x20000134

0800232c <_isatty_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4c06      	ldr	r4, [pc, #24]	; (8002348 <_isatty_r+0x1c>)
 8002330:	2300      	movs	r3, #0
 8002332:	4605      	mov	r5, r0
 8002334:	4608      	mov	r0, r1
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	f7ff f89a 	bl	8001470 <_isatty>
 800233c:	1c43      	adds	r3, r0, #1
 800233e:	d102      	bne.n	8002346 <_isatty_r+0x1a>
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	b103      	cbz	r3, 8002346 <_isatty_r+0x1a>
 8002344:	602b      	str	r3, [r5, #0]
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	20000134 	.word	0x20000134

0800234c <_init>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	bf00      	nop
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr

08002358 <_fini>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	bf00      	nop
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr
