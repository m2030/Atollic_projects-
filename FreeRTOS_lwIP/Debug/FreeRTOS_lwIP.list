
FreeRTOS_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000188f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e18  08018a80  08018a80  00028a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801c898  0801c898  0002c898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801c89c  0801c89c  0002c89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  0801c8a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
  7 .bss          00016eec  20000080  20000080  00030080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20016f6c  20016f6c  00030080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00046863  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007714  00000000  00000000  00076913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001d10  00000000  00000000  0007e028  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bb8  00000000  00000000  0007fd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013398  00000000  00000000  000818f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008a39  00000000  00000000  00094c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009d6c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000079b8  00000000  00000000  0009d740  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  000a50f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014b  00000000  00000000  000a5194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018a68 	.word	0x08018a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08018a68 	.word	0x08018a68

080001d0 <User_notification>:
  * @brief  Notify the User about the nework interface config status
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d005      	beq.n	80001f2 <User_notification+0x22>
  {
    /* Turn On LED 3 (green) to indicate ETH and LwIP init success*/
    //BSP_LED_On(LED3);
    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2101      	movs	r1, #1
 80001ea:	4806      	ldr	r0, [pc, #24]	; (8000204 <User_notification+0x34>)
 80001ec:	f014 f9f6 	bl	80145dc <HAL_GPIO_WritePin>
    /* Turn On LED 4 (red) to indicate ETH and LwIP init error */
    //(LED4);
    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);

  }
}
 80001f0:	e004      	b.n	80001fc <User_notification+0x2c>
    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2102      	movs	r1, #2
 80001f6:	4803      	ldr	r0, [pc, #12]	; (8000204 <User_notification+0x34>)
 80001f8:	f014 f9f0 	bl	80145dc <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000

08000208 <calibrate>:
/**
   Calibrate the constant time
 **/

static void calibrate(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
    uint32_t time;
    volatile uint32_t i;

    iter_per_us = 1000000;
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <calibrate+0x5c>)
 8000210:	4a15      	ldr	r2, [pc, #84]	; (8000268 <calibrate+0x60>)
 8000212:	601a      	str	r2, [r3, #0]

    time = HAL_GetTick();
 8000214:	f013 fece 	bl	8013fb4 <HAL_GetTick>
 8000218:	6078      	str	r0, [r7, #4]
    /* Wait for next tick */
    while (HAL_GetTick() == time) {
 800021a:	bf00      	nop
 800021c:	f013 feca 	bl	8013fb4 <HAL_GetTick>
 8000220:	4602      	mov	r2, r0
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	429a      	cmp	r2, r3
 8000226:	d0f9      	beq.n	800021c <calibrate+0x14>
        /* wait */
    }
    for (i=0; i<iter_per_us; i++) {
 8000228:	2300      	movs	r3, #0
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	e002      	b.n	8000234 <calibrate+0x2c>
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	603b      	str	r3, [r7, #0]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <calibrate+0x5c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d3f7      	bcc.n	800022e <calibrate+0x26>
    }
    iter_per_us /= ((HAL_GetTick()-time)*1000);
 800023e:	f013 feb9 	bl	8013fb4 <HAL_GetTick>
 8000242:	4602      	mov	r2, r0
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	1ad3      	subs	r3, r2, r3
 8000248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800024c:	fb02 f303 	mul.w	r3, r2, r3
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <calibrate+0x5c>)
 8000252:	6812      	ldr	r2, [r2, #0]
 8000254:	fbb2 f3f3 	udiv	r3, r2, r3
 8000258:	4a02      	ldr	r2, [pc, #8]	; (8000264 <calibrate+0x5c>)
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000009c 	.word	0x2000009c
 8000268:	000f4240 	.word	0x000f4240

0800026c <up_udelay>:
/**
 * Software delay in µs
 *  us: the number of µs to wait
 **/
 void up_udelay(uint32_t us)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;

    for (i=0; i<us*iter_per_us; i++) {
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	e002      	b.n	8000280 <up_udelay+0x14>
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	3301      	adds	r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <up_udelay+0x30>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	fb02 f203 	mul.w	r2, r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d8f4      	bhi.n	800027a <up_udelay+0xe>
    }
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	2000009c 	.word	0x2000009c

080002a0 <enc_rdgreg2>:
 * Assumptions:
 *
 ****************************************************************************/

static uint8_t enc_rdgreg2(uint8_t cmd)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
    uint8_t cmdpdata[2];
    cmdpdata[0] = cmd;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	733b      	strb	r3, [r7, #12]

  /* Send the read command and collect the data.  The sequence requires
   * 16-clocks:  8 to clock out the cmd + 8 to clock in the data.
   */

  ENC_SPI_SendBuf(cmdpdata, cmdpdata, 2);
 80002ae:	f107 010c 	add.w	r1, r7, #12
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	2202      	movs	r2, #2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f005 fe95 	bl	8005fe8 <ENC_SPI_SendBuf>

  return cmdpdata[1];
 80002be:	7b7b      	ldrb	r3, [r7, #13]
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <enc_wrgreg2>:
 * Assumptions:
 *
 ****************************************************************************/

static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
    uint8_t cmdpdata[2];
    cmdpdata[0] = cmd;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	733b      	strb	r3, [r7, #12]
    cmdpdata[1] = wrdata;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	737b      	strb	r3, [r7, #13]

    /* Send the write command and data.  The sequence requires 16-clocks:
     * 8 to clock out the cmd + 8 to clock out the data.
     */

    ENC_SPI_SendBuf(cmdpdata, NULL, 2);
 80002e0:	f107 030c 	add.w	r3, r7, #12
 80002e4:	2202      	movs	r2, #2
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f005 fe7d 	bl	8005fe8 <ENC_SPI_SendBuf>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <enc_waitgreg>:
 *
 ****************************************************************************/

static bool enc_waitgreg(uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b086      	sub	sp, #24
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	460b      	mov	r3, r1
 8000302:	71bb      	strb	r3, [r7, #6]
 8000304:	4613      	mov	r3, r2
 8000306:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000308:	f013 fe54 	bl	8013fb4 <HAL_GetTick>
 800030c:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdgreg(ctrlreg);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 031f 	and.w	r3, r3, #31
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ffc2 	bl	80002a0 <enc_rdgreg2>
 800031c:	4603      	mov	r3, r0
 800031e:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8000320:	f013 fe48 	bl	8013fb4 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 800032c:	7cfa      	ldrb	r2, [r7, #19]
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	4013      	ands	r3, r2
 8000332:	b2db      	uxtb	r3, r3
 8000334:	797a      	ldrb	r2, [r7, #5]
 8000336:	429a      	cmp	r2, r3
 8000338:	d002      	beq.n	8000340 <enc_waitgreg+0x4a>
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	2b31      	cmp	r3, #49	; 0x31
 800033e:	d9e6      	bls.n	800030e <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8000340:	7cfa      	ldrb	r2, [r7, #19]
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4013      	ands	r3, r2
 8000346:	b2db      	uxtb	r3, r3
 8000348:	797a      	ldrb	r2, [r7, #5]
 800034a:	429a      	cmp	r2, r3
 800034c:	bf0c      	ite	eq
 800034e:	2301      	moveq	r3, #1
 8000350:	2300      	movne	r3, #0
 8000352:	b2db      	uxtb	r3, r3
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <enc_waitwhilegreg>:
 ****************************************************************************/

#ifndef USE_PROTOTHREADS
static bool enc_waitwhilegreg(uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	460b      	mov	r3, r1
 8000368:	71bb      	strb	r3, [r7, #6]
 800036a:	4613      	mov	r3, r2
 800036c:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 800036e:	f013 fe21 	bl	8013fb4 <HAL_GetTick>
 8000372:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdgreg(ctrlreg);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 031f 	and.w	r3, r3, #31
 800037a:	b2db      	uxtb	r3, r3
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff8f 	bl	80002a0 <enc_rdgreg2>
 8000382:	4603      	mov	r3, r0
 8000384:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8000386:	f013 fe15 	bl	8013fb4 <HAL_GetTick>
 800038a:	4602      	mov	r2, r0
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8000392:	7cfa      	ldrb	r2, [r7, #19]
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	4013      	ands	r3, r2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	797a      	ldrb	r2, [r7, #5]
 800039c:	429a      	cmp	r2, r3
 800039e:	d102      	bne.n	80003a6 <enc_waitwhilegreg+0x4a>
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2b31      	cmp	r3, #49	; 0x31
 80003a4:	d9e6      	bls.n	8000374 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 80003a6:	7cfa      	ldrb	r2, [r7, #19]
 80003a8:	79bb      	ldrb	r3, [r7, #6]
 80003aa:	4013      	ands	r3, r2
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	797a      	ldrb	r2, [r7, #5]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	bf14      	ite	ne
 80003b4:	2301      	movne	r3, #1
 80003b6:	2300      	moveq	r3, #0
 80003b8:	b2db      	uxtb	r3, r3
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <enc_reset>:
  *    SRC operation is terminated by raising the CS pin."
  *
  * @param  None
  * @retval None
  */
void enc_reset(ENC_HandleTypeDef *handle) {
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]

  /* Send the system reset command. */
  ENC_SPI_Send(ENC_SRC);
 80003ca:	20ff      	movs	r0, #255	; 0xff
 80003cc:	f005 fdde 	bl	8005f8c <ENC_SPI_Send>
   * written to until at least 50 µs have passed since the Reset has ended.
   * All registers will revert to their Reset default values. The dual
   * port buffer memory will maintain state throughout the System Reset."
   */

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	741a      	strb	r2, [r3, #16]
  //up_mdelay(2);
  HAL_Delay(2); /* >1000 µs, conforms to errata #2 */
 80003d6:	2002      	movs	r0, #2
 80003d8:	f013 fdf8 	bl	8013fcc <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <enc_setbank>:
 *
 * Assumptions:
 *
 ****************************************************************************/

void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]

  if (bank != handle->bank) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	7c1b      	ldrb	r3, [r3, #16]
 80003f4:	78fa      	ldrb	r2, [r7, #3]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d00e      	beq.n	8000418 <enc_setbank+0x34>
      /* Select bank 0 (just so that all of the bits are cleared) */

      enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 80003fa:	2103      	movs	r1, #3
 80003fc:	20bf      	movs	r0, #191	; 0xbf
 80003fe:	f7ff ff63 	bl	80002c8 <enc_wrgreg2>

      /* Then OR in bits to get the correct bank */

      if (bank != 0)
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d004      	beq.n	8000412 <enc_setbank+0x2e>
        {
          enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	4619      	mov	r1, r3
 800040c:	209f      	movs	r0, #159	; 0x9f
 800040e:	f7ff ff5b 	bl	80002c8 <enc_wrgreg2>
        }

      /* Then remember the bank setting */

      handle->bank = bank;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	78fa      	ldrb	r2, [r7, #3]
 8000416:	741a      	strb	r2, [r3, #16]
    }
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <enc_rdbreg>:
 * Assumptions:
 *
 ****************************************************************************/

static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  /* Set the bank */

  enc_setbank(handle, GETBANK(ctrlreg));
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	095b      	lsrs	r3, r3, #5
 8000430:	b2db      	uxtb	r3, r3
 8000432:	f003 0303 	and.w	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4619      	mov	r1, r3
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f7ff ffd2 	bl	80003e4 <enc_setbank>
  /* Send the RCR command and collect the data.  How we collect the data
   * depends on if this is a PHY/CAN or not.  The normal sequence requires
   * 16-clocks:  8 to clock out the cmd and  8 to clock in the data.
   */

  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	f003 031f 	and.w	r3, r3, #31
 8000446:	b2db      	uxtb	r3, r3
 8000448:	733b      	strb	r3, [r7, #12]

  /* The PHY/MAC sequence requires 24-clocks:  8 to clock out the cmd,
   * 8 dummy bits, and 8 to clock in the PHY/MAC data.
   */

  ENC_SPI_SendBuf(data, data, (ISPHYMAC(ctrlreg))?3:2);
 800044a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800044e:	2b00      	cmp	r3, #0
 8000450:	da01      	bge.n	8000456 <enc_rdbreg+0x36>
 8000452:	2203      	movs	r2, #3
 8000454:	e000      	b.n	8000458 <enc_rdbreg+0x38>
 8000456:	2202      	movs	r2, #2
 8000458:	f107 010c 	add.w	r1, r7, #12
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4618      	mov	r0, r3
 8000462:	f005 fdc1 	bl	8005fe8 <ENC_SPI_SendBuf>
  return (ISPHYMAC(ctrlreg))?data[2]:data[1];
 8000466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	da01      	bge.n	8000472 <enc_rdbreg+0x52>
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	e000      	b.n	8000474 <enc_rdbreg+0x54>
 8000472:	7b7b      	ldrb	r3, [r7, #13]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <enc_wrbreg>:
 *
 ****************************************************************************/

static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg,
                       uint8_t wrdata)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
 8000488:	4613      	mov	r3, r2
 800048a:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];

  /* Set the bank */

  enc_setbank(handle, GETBANK(ctrlreg));
 800048c:	78fb      	ldrb	r3, [r7, #3]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	b2db      	uxtb	r3, r3
 8000492:	f003 0303 	and.w	r3, r3, #3
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ffa2 	bl	80003e4 <enc_setbank>

  /* Send the WCR command and data.  The sequence requires 16-clocks:
   * 8 to clock out the cmd + 8 to clock out the data.
   */

  data[0] = ENC_WCR | GETADDR(ctrlreg);
 80004a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004a4:	f003 031f 	and.w	r3, r3, #31
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 80004b4:	78bb      	ldrb	r3, [r7, #2]
 80004b6:	737b      	strb	r3, [r7, #13]

  ENC_SPI_SendBuf(data, NULL, 2);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	2202      	movs	r2, #2
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f005 fd91 	bl	8005fe8 <ENC_SPI_SendBuf>
}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <enc_waitbreg>:
 *
 ****************************************************************************/

static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	4608      	mov	r0, r1
 80004d8:	4611      	mov	r1, r2
 80004da:	461a      	mov	r2, r3
 80004dc:	4603      	mov	r3, r0
 80004de:	70fb      	strb	r3, [r7, #3]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70bb      	strb	r3, [r7, #2]
 80004e4:	4613      	mov	r3, r2
 80004e6:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 80004e8:	f013 fd64 	bl	8013fb4 <HAL_GetTick>
 80004ec:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdbreg(handle, ctrlreg);
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	4619      	mov	r1, r3
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ff94 	bl	8000420 <enc_rdbreg>
 80004f8:	4603      	mov	r3, r0
 80004fa:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 80004fc:	f013 fd5a 	bl	8013fb4 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000508:	7cfa      	ldrb	r2, [r7, #19]
 800050a:	78bb      	ldrb	r3, [r7, #2]
 800050c:	4013      	ands	r3, r2
 800050e:	b2db      	uxtb	r3, r3
 8000510:	787a      	ldrb	r2, [r7, #1]
 8000512:	429a      	cmp	r2, r3
 8000514:	d002      	beq.n	800051c <enc_waitbreg+0x4e>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2b31      	cmp	r3, #49	; 0x31
 800051a:	d9e8      	bls.n	80004ee <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 800051c:	7cfa      	ldrb	r2, [r7, #19]
 800051e:	78bb      	ldrb	r3, [r7, #2]
 8000520:	4013      	ands	r3, r2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	787a      	ldrb	r2, [r7, #1]
 8000526:	429a      	cmp	r2, r3
 8000528:	bf0c      	ite	eq
 800052a:	2301      	moveq	r3, #1
 800052c:	2300      	movne	r3, #0
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <enc_wrphy>:
 *
 ****************************************************************************/

static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr,
                      uint16_t phydata)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
 8000544:	4613      	mov	r3, r2
 8000546:	803b      	strh	r3, [r7, #0]
   *
   *    1. Write the address of the PHY register to write to into the
   *       MIREGADR register.
   */

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	461a      	mov	r2, r3
 800054c:	21d4      	movs	r1, #212	; 0xd4
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff ff94 	bl	800047c <enc_wrbreg>

  /*    2. Write the lower 8 bits of data to write into the MIWRL register. */

  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8000554:	883b      	ldrh	r3, [r7, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	21d6      	movs	r1, #214	; 0xd6
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff ff8d 	bl	800047c <enc_wrbreg>
   *       Writing to this register automatically begins the MIIM transaction,
   *       so it must be written to after MIWRL. The MISTAT.BUSY bit becomes
   *       set.
   */

  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8000562:	883b      	ldrh	r3, [r7, #0]
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	b29b      	uxth	r3, r3
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	21d7      	movs	r1, #215	; 0xd7
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ff84 	bl	800047c <enc_wrbreg>
  /* wait for approx 12 µs */
//  volatile int i;
//  for (i=0; i<12*17; i++) {
//  }

  up_udelay(12);
 8000574:	200c      	movs	r0, #12
 8000576:	f7ff fe79 	bl	800026c <up_udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 800057a:	2300      	movs	r3, #0
 800057c:	2201      	movs	r2, #1
 800057e:	21ea      	movs	r1, #234	; 0xea
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff ffa4 	bl	80004ce <enc_waitbreg>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <ENC_Start>:
  * @brief  Initialize the enc28j60 and configure the needed hardware resources
  * @param  handle: Handle on data configuration.
  * @retval None
  */
bool ENC_Start(ENC_HandleTypeDef *handle)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
    /* register value */
    uint8_t regval;

    /* Calibrate time constant */
    calibrate();
 8000596:	f7ff fe37 	bl	8000208 <calibrate>

    /* System reset */
	enc_reset(handle);
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff ff11 	bl	80003c2 <enc_reset>

	/* Use bank 0 */
	enc_setbank(handle, 0);
 80005a0:	2100      	movs	r1, #0
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ff1e 	bl	80003e4 <enc_setbank>
    /* Check if we are actually communicating with the ENC28J60.  If its
     * 0x00 or 0xff, then we are probably not communicating correctly
     * via SPI.
     */

    regval = enc_rdbreg(handle, ENC_EREVID);
 80005a8:	2172      	movs	r1, #114	; 0x72
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff ff38 	bl	8000420 <enc_rdbreg>
 80005b0:	4603      	mov	r3, r0
 80005b2:	73fb      	strb	r3, [r7, #15]
    if (regval == 0x00 || regval == 0xff) {
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <ENC_Start+0x32>
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2bff      	cmp	r3, #255	; 0xff
 80005be:	d101      	bne.n	80005c4 <ENC_Start+0x36>
      return false;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e0cc      	b.n	800075e <ENC_Start+0x1d0>
    }

    /* Initialize ECON2: Enable address auto increment.
     */

    enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	205e      	movs	r0, #94	; 0x5e
 80005c8:	f7ff fe7e 	bl	80002c8 <enc_wrgreg2>

    /* Initialize receive buffer.
     * First, set the receive buffer start address.
     */

    handle->nextpkt = PKTMEM_RX_START;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	829a      	strh	r2, [r3, #20]
    enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ff50 	bl	800047c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 80005dc:	2200      	movs	r2, #0
 80005de:	2109      	movs	r1, #9
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff4b 	bl	800047c <enc_wrbreg>

    /* Set the receive data pointer */

    /* Errata 14 */
    enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	210c      	movs	r1, #12
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff ff46 	bl	800047c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 80005f0:	2219      	movs	r2, #25
 80005f2:	210d      	movs	r1, #13
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff41 	bl	800047c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_START >> 8);
*/

    /* Set the receive buffer end. */

    enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	210a      	movs	r1, #10
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ff3c 	bl	800047c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 8000604:	2219      	movs	r2, #25
 8000606:	210b      	movs	r1, #11
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff37 	bl	800047c <enc_wrbreg>

    /* Set transmit buffer start. */

    handle->transmitLength = 0;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	831a      	strh	r2, [r3, #24]
    enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ff2f 	bl	800047c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 800061e:	221a      	movs	r2, #26
 8000620:	2105      	movs	r1, #5
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff2a 	bl	800047c <enc_wrbreg>

    /* Set filter mode: unicast OR broadcast AND crc valid */

    enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 8000628:	22a1      	movs	r2, #161	; 0xa1
 800062a:	2138      	movs	r1, #56	; 0x38
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ff25 	bl	800047c <enc_wrbreg>

	do {
		HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 8000632:	200a      	movs	r0, #10
 8000634:	f013 fcca 	bl	8013fcc <HAL_Delay>
		regval = enc_rdbreg(handle, ENC_ESTAT);
 8000638:	211d      	movs	r1, #29
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff fef0 	bl	8000420 <enc_rdbreg>
 8000640:	4603      	mov	r3, r0
 8000642:	73fb      	strb	r3, [r7, #15]
	} while ((regval & ESTAT_CLKRDY) == 0);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f1      	beq.n	8000632 <ENC_Start+0xa4>

    /* Enable MAC receive */

    enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 800064e:	220d      	movs	r2, #13
 8000650:	21c0      	movs	r1, #192	; 0xc0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ff12 	bl	800047c <enc_wrbreg>

    /* Enable automatic padding and CRC operations */

    if (handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d120      	bne.n	80006a2 <ENC_Start+0x114>
      enc_wrbreg(handle, ENC_MACON3,
                 ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)?MACON3_PADCFG0 | MACON3_TXCRCEN:0) |
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
      enc_wrbreg(handle, ENC_MACON3,
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <ENC_Start+0xde>
 8000668:	2332      	movs	r3, #50	; 0x32
 800066a:	e000      	b.n	800066e <ENC_Start+0xe0>
 800066c:	2302      	movs	r3, #2
 800066e:	461a      	mov	r2, r3
 8000670:	21c2      	movs	r1, #194	; 0xc2
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff02 	bl	800047c <enc_wrbreg>
                 MACON3_FRMLNEN);
      enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER);        /* Defer transmission enable */
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	21c3      	movs	r1, #195	; 0xc3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fefd 	bl	800047c <enc_wrbreg>

      /* Set Non-Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8000682:	2212      	movs	r2, #18
 8000684:	21c6      	movs	r1, #198	; 0xc6
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff fef8 	bl	800047c <enc_wrbreg>
      enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 800068c:	220c      	movs	r2, #12
 800068e:	21c7      	movs	r1, #199	; 0xc7
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff fef3 	bl	800047c <enc_wrbreg>

      /* Set Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 8000696:	2212      	movs	r2, #18
 8000698:	21c4      	movs	r1, #196	; 0xc4
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff feee 	bl	800047c <enc_wrbreg>
 80006a0:	e015      	b.n	80006ce <ENC_Start+0x140>
    } else {
      /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */

      enc_wrbreg(handle, ENC_MACON3,
                ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)?MACON3_PADCFG0 | MACON3_TXCRCEN:0) |
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
      enc_wrbreg(handle, ENC_MACON3,
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <ENC_Start+0x120>
 80006aa:	2333      	movs	r3, #51	; 0x33
 80006ac:	e000      	b.n	80006b0 <ENC_Start+0x122>
 80006ae:	2303      	movs	r3, #3
 80006b0:	461a      	mov	r2, r3
 80006b2:	21c2      	movs	r1, #194	; 0xc2
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fee1 	bl	800047c <enc_wrbreg>
                MACON3_FRMLNEN | MACON3_FULDPX);

      /* Set Non-Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 80006ba:	2212      	movs	r2, #18
 80006bc:	21c6      	movs	r1, #198	; 0xc6
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff fedc 	bl	800047c <enc_wrbreg>

      /* Set Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 80006c4:	2215      	movs	r2, #21
 80006c6:	21c4      	movs	r1, #196	; 0xc4
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fed7 	bl	800047c <enc_wrbreg>
    }

    /* Set the maximum packet size which the controller will accept */

    enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU+18) & 0xff);
 80006ce:	22ee      	movs	r2, #238	; 0xee
 80006d0:	21ca      	movs	r1, #202	; 0xca
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff fed2 	bl	800047c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU+18) >> 8);
 80006d8:	2205      	movs	r2, #5
 80006da:	21cb      	movs	r1, #203	; 0xcb
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff fecd 	bl	800047c <enc_wrbreg>
  /* Configure LEDs (No, just use the defaults for now) */
  /* enc_wrphy(priv, ENC_PHLCON, ??); */

    /* Setup up PHCON1 & 2 */

    if (handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX) {
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10b      	bne.n	8000702 <ENC_Start+0x174>
      enc_wrphy(handle, ENC_PHCON1, 0x00);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff ff22 	bl	8000538 <enc_wrphy>
      enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 80006f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f8:	2110      	movs	r1, #16
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff1c 	bl	8000538 <enc_wrphy>
 8000700:	e00a      	b.n	8000718 <ENC_Start+0x18a>
    } else {
      enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 8000702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000706:	2100      	movs	r1, #0
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff15 	bl	8000538 <enc_wrphy>
      enc_wrphy(handle, ENC_PHCON2, 0x00);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff10 	bl	8000538 <enc_wrphy>

    /* Not used Restore normal operation mode
    enc_pwrfull(handle); */

    /* Process interrupt settings */
    if (handle->Init.InterruptEnableBits & EIE_LINKIE) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b1b      	ldrb	r3, [r3, #12]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <ENC_Start+0x1a0>
      /* Enable link change interrupt in PHY module */
      enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 8000724:	2212      	movs	r2, #18
 8000726:	2112      	movs	r1, #18
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff05 	bl	8000538 <enc_wrphy>
    }

    /* Since we not modify PHLCON register, we don't fall in errata 11 case */

    /* Reset all interrupt flags */
    enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 800072e:	213b      	movs	r1, #59	; 0x3b
 8000730:	20bc      	movs	r0, #188	; 0xbc
 8000732:	f7ff fdc9 	bl	80002c8 <enc_wrgreg2>

    regval = handle->Init.InterruptEnableBits;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7b1b      	ldrb	r3, [r3, #12]
 800073a:	73fb      	strb	r3, [r7, #15]
    if (regval) {
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <ENC_Start+0x1bc>
        /* Ensure INTIE is set when at least an interruption is selected */
        regval |= EIE_INTIE;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000748:	73fb      	strb	r3, [r7, #15]
    }
    /* Enable selected interrupts in ethernet controller module */
    enc_bfsgreg(ENC_EIE, regval);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4619      	mov	r1, r3
 800074e:	209b      	movs	r0, #155	; 0x9b
 8000750:	f7ff fdba 	bl	80002c8 <enc_wrgreg2>

    /* Enable the receiver */
    enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 8000754:	2104      	movs	r1, #4
 8000756:	209f      	movs	r0, #159	; 0x9f
 8000758:	f7ff fdb6 	bl	80002c8 <enc_wrgreg2>

    return true;
 800075c:	2301      	movs	r3, #1
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <ENC_SetMacAddr>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_SetMacAddr(ENC_HandleTypeDef *handle)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   *   MAADR4  MAC Address Byte 4 (MAADR<23:16>)
   *   MAADR5  MAC Address Byte 5 (MAADR<15:8>)
   *   MAADR6  MAC Address Byte 6 (MAADR<7:0>)
   */

  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	21e4      	movs	r1, #228	; 0xe4
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fe7f 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	21e5      	movs	r1, #229	; 0xe5
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fe76 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	3302      	adds	r3, #2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	21e2      	movs	r1, #226	; 0xe2
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fe6d 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	3303      	adds	r3, #3
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	21e3      	movs	r1, #227	; 0xe3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fe64 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	3304      	adds	r3, #4
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	21e0      	movs	r1, #224	; 0xe0
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe5b 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	3305      	adds	r3, #5
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	21e1      	movs	r1, #225	; 0xe1
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fe52 	bl	800047c <enc_wrbreg>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <ENC_WriteBuffer>:
 *   Read pointer is set to the correct address
 *
 ****************************************************************************/

void ENC_WriteBuffer(void *buffer, uint16_t buflen)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
   * We explicitly select the ENC28J60 chip because we have to transmits several pieces of
   * information while keeping CS low
   *
   */

  ENC_SPI_Select(true);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f005 fc43 	bl	8006078 <ENC_SPI_Select>
   * "...The [3-bit]WBM opcode should then be sent to the ENC28J60,
   *  followed by the 5-bit constant, 1Ah."
   */


  ENC_SPI_SendWithoutSelection(ENC_WBM);
 80007f2:	207a      	movs	r0, #122	; 0x7a
 80007f4:	f005 fbb4 	bl	8005f60 <ENC_SPI_SendWithoutSelection>
   *  enabled, it is possible to continuously write sequential bytes
   *  to the buffer memory without any extra SPI command
   *  overhead.
   */

  ENC_SPI_SendBuf(buffer, NULL, buflen);
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	461a      	mov	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f005 fbf2 	bl	8005fe8 <ENC_SPI_SendBuf>
   *
   * "The WBM command is terminated by bringing up the CS pin. ..."
   * done in ENC_SPI_SendBuf callback
   */

}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <enc_rdbuffer>:
 *   Read pointer is set to the correct address
 *
 ****************************************************************************/

static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
  /* Select ENC28J60 chip */

  ENC_SPI_Select(true);
 8000818:	2001      	movs	r0, #1
 800081a:	f005 fc2d 	bl	8006078 <ENC_SPI_Select>

  /* Send the read buffer memory command (ignoring the response) */

  ENC_SPI_SendWithoutSelection(ENC_RBM);
 800081e:	203a      	movs	r0, #58	; 0x3a
 8000820:	f005 fb9e 	bl	8005f60 <ENC_SPI_SendWithoutSelection>

  /* Then read the buffer data */

  ENC_SPI_SendBuf(NULL, buffer, buflen);
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	461a      	mov	r2, r3
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	2000      	movs	r0, #0
 800082c:	f005 fbdc 	bl	8005fe8 <ENC_SPI_SendBuf>

  /* De-select ENC28J60 chip: done in ENC_SPI_SendBuf callback */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ENC_RestoreTXBuffer>:
 * Assumptions:
 *
 ****************************************************************************/

int8_t ENC_RestoreTXBuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if (!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0)) {
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	201f      	movs	r0, #31
 800084a:	f7ff fd54 	bl	80002f6 <enc_waitgreg>
 800084e:	4603      	mov	r3, r0
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <ENC_RestoreTXBuffer+0x28>
    return ERR_TIMEOUT;
 800085a:	f06f 0302 	mvn.w	r3, #2
 800085e:	e03c      	b.n	80008da <ENC_RestoreTXBuffer+0xa2>

  /* Send the packet: address=priv->dev.d_buf, length=priv->dev.d_len */

  /* Set transmit buffer start (is this necessary?). */

  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8000860:	2200      	movs	r2, #0
 8000862:	2104      	movs	r1, #4
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fe09 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 800086a:	221a      	movs	r2, #26
 800086c:	2105      	movs	r1, #5
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fe04 	bl	800047c <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */

  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 8000874:	2200      	movs	r2, #0
 8000876:	2102      	movs	r1, #2
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fdff 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 800087e:	221a      	movs	r2, #26
 8000880:	2103      	movs	r1, #3
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fdfa 	bl	800047c <enc_wrbreg>
  /* Set the TX End pointer based on the size of the packet to send. Note
   * that the offset accounts for the control byte at the beginning the
   * buffer plus the size of the packet data.
   */

  txend = PKTMEM_TX_START + len;
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800088e:	81fb      	strh	r3, [r7, #14]

  if (txend+8>PKTMEM_TX_ENDP1) {
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	3308      	adds	r3, #8
 8000894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000898:	dd02      	ble.n	80008a0 <ENC_RestoreTXBuffer+0x68>
    return ERR_MEM;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	e01c      	b.n	80008da <ENC_RestoreTXBuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	2106      	movs	r1, #6
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fde7 	bl	800047c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	2107      	movs	r1, #7
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fdde 	bl	800047c <enc_wrbreg>
   *   POVERRIDE is zero).
   * PHUGEEN: Per Packet Huge Frame Enable bit (Set, but won't be used
   *   because POVERRIDE is zero).
   */

  control_write[0] = ENC_WBM;
 80008c0:	237a      	movs	r3, #122	; 0x7a
 80008c2:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 80008c4:	230e      	movs	r3, #14
 80008c6:	737b      	strb	r3, [r7, #13]
  ENC_SPI_SendBuf(control_write, control_write, 2);
 80008c8:	f107 010c 	add.w	r1, r7, #12
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2202      	movs	r2, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 fb88 	bl	8005fe8 <ENC_SPI_SendBuf>

  return ERR_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <ENC_Transmit>:
#ifdef USE_PROTOTHREADS
PT_THREAD(ENC_Transmit(struct pt *pt, ENC_HandleTypeDef *handle))
#else
void ENC_Transmit(ENC_HandleTypeDef *handle)
#endif
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
    PT_BEGIN(pt);

    if (handle->transmitLength != 0) {
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	8b1b      	ldrh	r3, [r3, #24]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d053      	beq.n	800099a <ENC_Transmit+0xb8>
        /* Set TXRTS to send the packet in the transmit buffer */

        //enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
        /* Implement erratas 12, 13 and 15 */
        /* Reset transmit logic */
        handle->retries = 16;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2210      	movs	r2, #16
 80008f6:	849a      	strh	r2, [r3, #36]	; 0x24
        do {
            enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	209f      	movs	r0, #159	; 0x9f
 80008fc:	f7ff fce4 	bl	80002c8 <enc_wrgreg2>
            enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	20bf      	movs	r0, #191	; 0xbf
 8000904:	f7ff fce0 	bl	80002c8 <enc_wrgreg2>
            enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8000908:	210a      	movs	r1, #10
 800090a:	20bc      	movs	r0, #188	; 0xbc
 800090c:	f7ff fcdc 	bl	80002c8 <enc_wrgreg2>

            /* Start transmission */
            enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8000910:	2108      	movs	r1, #8
 8000912:	209f      	movs	r0, #159	; 0x9f
 8000914:	f7ff fcd8 	bl	80002c8 <enc_wrgreg2>
            handle->duration = 20; /* Timeout after 20 ms */
            PT_WAIT_UNTIL(pt, (((enc_rdgreg(ENC_EIR) & (EIR_TXIF | EIR_TXERIF)) != 0) ||
                          (HAL_GetTick() - handle->startTime > handle->duration)));
#else
            /* Wait for end of transmission */
            enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	210a      	movs	r1, #10
 800091c:	201c      	movs	r0, #28
 800091e:	f7ff fd1d 	bl	800035c <enc_waitwhilegreg>
#endif

            /* Stop transmission */
            enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8000922:	2108      	movs	r1, #8
 8000924:	20bf      	movs	r0, #191	; 0xbf
 8000926:	f7ff fccf 	bl	80002c8 <enc_wrgreg2>
            {
                uint16_t addtTsv4;
                uint8_t tsv4, regval;

                /* read tsv */
                addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	8b1b      	ldrh	r3, [r3, #24]
 800092e:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8000932:	3304      	adds	r3, #4
 8000934:	81fb      	strh	r3, [r7, #14]

                enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 8000936:	89fb      	ldrh	r3, [r7, #14]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fd9c 	bl	800047c <enc_wrbreg>
                enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	2101      	movs	r1, #1
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fd93 	bl	800047c <enc_wrbreg>

                enc_rdbuffer(&tsv4, 1);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff55 	bl	800080c <enc_rdbuffer>
                regval = enc_rdgreg(ENC_EIR);
 8000962:	201c      	movs	r0, #28
 8000964:	f7ff fc9c 	bl	80002a0 <enc_rdgreg2>
 8000968:	4603      	mov	r3, r0
 800096a:	737b      	strb	r3, [r7, #13]
                if (!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL)) {
 800096c:	7b7b      	ldrb	r3, [r7, #13]
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00e      	beq.n	8000994 <ENC_Transmit+0xb2>
 8000976:	7b3b      	ldrb	r3, [r7, #12]
 8000978:	f003 0320 	and.w	r3, r3, #32
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <ENC_Transmit+0xb2>
                    break;
                }
            }
            handle->retries--;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000984:	3b01      	subs	r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	849a      	strh	r2, [r3, #36]	; 0x24
        } while (handle->retries > 0);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1b1      	bne.n	80008f8 <ENC_Transmit+0x16>
        /* Transmission finished (but can be unsuccessful) */
        handle->transmitLength = 0;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	831a      	strh	r2, [r3, #24]
    }
    PT_END(pt);
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <LedToogle_Task>:
//===========================================================================

TaskHandle_t myTaskHandle = NULL;

void LedToogle_Task(void *p)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
	while(1){
 80009aa:	e7fe      	b.n	80009aa <LedToogle_Task+0x8>

080009ac <tcp_echo_Task>:
		//vTaskDelay(1000);
	}
}

void tcp_echo_Task(void *p)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tcp_echoserver_init();
 80009b4:	f000 fa98 	bl	8000ee8 <tcp_echoserver_init>
		ethernet_transmit();
 80009b8:	f005 fac8 	bl	8005f4c <ethernet_transmit>
		vTaskDelay(500);
 80009bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c0:	f016 fb28 	bl	8017014 <vTaskDelay>
		tcp_echoserver_init();
 80009c4:	e7f6      	b.n	80009b4 <tcp_echo_Task+0x8>
	...

080009c8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af02      	add	r7, sp, #8
	 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	 HAL_Init();
 80009ce:	f013 fab3 	bl	8013f38 <HAL_Init>

	 /* Configure the system clock */
	 SystemClock_Config();
 80009d2:	f000 f82f 	bl	8000a34 <SystemClock_Config>

	 /* Configure the Network interface */
	 Netif_Config();
 80009d6:	f000 f975 	bl	8000cc4 <Netif_Config>

	 /* Notify user about the network interface config */
	 User_notification(&gnetif);
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <main+0x54>)
 80009dc:	f7ff fbf8 	bl	80001d0 <User_notification>

	 /* Initialize all configured peripherals */
	 MX_GPIO_Init();
 80009e0:	f000 f88e 	bl	8000b00 <MX_GPIO_Init>
	 MX_SPI1_Init();
 80009e4:	f000 f93c 	bl	8000c60 <MX_SPI1_Init>

	 xTaskCreate(tcp_echo_Task, "task2", 600, (void *)0, tskIDLE_PRIORITY, &myTaskHandle);
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <main+0x58>)
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	2300      	movs	r3, #0
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <main+0x5c>)
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <main+0x60>)
 80009fa:	f016 f9d9 	bl	8016db0 <xTaskCreate>
	 xTaskCreate(LedToogle_Task, "task1", 400, (void *) 0, tskIDLE_PRIORITY + 2, &myTaskHandle);
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <main+0x58>)
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	2302      	movs	r3, #2
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <main+0x64>)
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <main+0x68>)
 8000a10:	f016 f9ce 	bl	8016db0 <xTaskCreate>
	 vTaskStartScheduler();
 8000a14:	f016 fb32 	bl	801707c <vTaskStartScheduler>

  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <main+0x50>
 8000a1a:	bf00      	nop
 8000a1c:	2001308c 	.word	0x2001308c
 8000a20:	200000a0 	.word	0x200000a0
 8000a24:	08018a80 	.word	0x08018a80
 8000a28:	080009ad 	.word	0x080009ad
 8000a2c:	08018a88 	.word	0x08018a88
 8000a30:	080009a3 	.word	0x080009a3

08000a34 <SystemClock_Config>:
}


//===========================================================================
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <SystemClock_Config+0xc0>)
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <SystemClock_Config+0xc0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <SystemClock_Config+0xc0>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xc4>)
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <SystemClock_Config+0xc4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <SystemClock_Config+0xc4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a86:	2304      	movs	r3, #4
 8000a88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a8a:	23a8      	movs	r3, #168	; 0xa8
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f013 fdb8 	bl	8014610 <HAL_RCC_OscConfig>

  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2105      	movs	r1, #5
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f014 f800 	bl	8014ac4 <HAL_RCC_ClockConfig>

  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ac4:	f014 f98e 	bl	8014de4 <HAL_RCC_GetHCLKFreq>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <SystemClock_Config+0xc8>)
 8000acc:	fba3 2302 	umull	r2, r3, r3, r2
 8000ad0:	099b      	lsrs	r3, r3, #6
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f013 fbbf 	bl	8014256 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ad8:	2004      	movs	r0, #4
 8000ada:	f013 fbc9 	bl	8014270 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae6:	f013 fb7e 	bl	80141e6 <HAL_NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	; 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000
 8000afc:	10624dd3 	.word	0x10624dd3

08000b00 <MX_GPIO_Init>:
//===========================================================================

//===========================================================================
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b0c:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4a48      	ldr	r2, [pc, #288]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b28:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4a41      	ldr	r2, [pc, #260]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4834      	ldr	r0, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b7c:	f013 fd2e 	bl	80145dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2103      	movs	r1, #3
 8000b84:	4832      	ldr	r0, [pc, #200]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000b86:	f013 fd29 	bl	80145dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC_INT_Pin */
  GPIO_InitStruct.Pin = ENC_INT_Pin;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INT_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482e      	ldr	r0, [pc, #184]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000b9e:	f013 fb83 	bl	80142a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_CS_Pin */
  GPIO_InitStruct.Pin = ENC_CS_Pin;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENC_CS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4824      	ldr	r0, [pc, #144]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000bba:	f013 fb75 	bl	80142a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481e      	ldr	r0, [pc, #120]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000bd6:	f013 fb67 	bl	80142a8 <HAL_GPIO_Init>

  /* Enable port A clock */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000bda:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Select output mode */
  GPIOA->MODER |= GPIO_MODER_MODER12_0;
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf0:	6013      	str	r3, [r2, #0]

  /* Select output type push-pull */
  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_12);
 8000bf2:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bfc:	6053      	str	r3, [r2, #4]

  /* Select output speed very high */
  GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR12_0 | GPIO_OSPEEDER_OSPEEDR12_1);
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000c08:	6093      	str	r3, [r2, #8]

  /* Enable SYSCFG clock */
  RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_GPIO_Init+0x148>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44

  /* Enable compensation cell */
  SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <MX_GPIO_Init+0x15c>)
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_GPIO_Init+0x15c>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6213      	str	r3, [r2, #32]

  /* Wait till compensation cell is ready */
  while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY)
 8000c22:	bf00      	nop
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_GPIO_Init+0x15c>)
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c30:	d1f8      	bne.n	8000c24 <MX_GPIO_Init+0x124>
  {

  }

  /* Select no pull */
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR12);
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_GPIO_Init+0x158>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c3c:	60d3      	str	r3, [r2, #12]
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40021000 	.word	0x40021000
 8000c54:	10210000 	.word	0x10210000
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40013800 	.word	0x40013800

08000c60 <MX_SPI1_Init>:
//===========================================================================

//===========================================================================
static void MX_SPI1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <MX_SPI1_Init+0x60>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <MX_SPI1_Init+0x5c>)
 8000cb2:	f014 f8a3 	bl	8014dfc <HAL_SPI_Init>
  {
    //_Error_Handler(__FILE__, __LINE__);
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200130c0 	.word	0x200130c0
 8000cc0:	40013000 	.word	0x40013000

08000cc4 <Netif_Config>:
//===========================================================================

//===========================================================================
static void Netif_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af04      	add	r7, sp, #16
  struct ip4_addr ipaddr;
  struct ip4_addr netmask;
  struct ip4_addr gw;

  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f012 fc65 	bl	801359c <tcpip_init>

  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <Netif_Config+0x5c>)
 8000cd4:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8000cd6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cda:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000ce0:	1d38      	adds	r0, r7, #4
 8000ce2:	f107 0208 	add.w	r2, r7, #8
 8000ce6:	f107 010c 	add.w	r1, r7, #12
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <Netif_Config+0x60>)
 8000cec:	9302      	str	r3, [sp, #8]
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <Netif_Config+0x64>)
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <Netif_Config+0x68>)
 8000cfa:	f006 f8e9 	bl	8006ed0 <netif_add>

  /*  Registers the default network interface */
  netif_set_default(&gnetif);
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <Netif_Config+0x68>)
 8000d00:	f006 fab6 	bl	8007270 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <Netif_Config+0x68>)
 8000d06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <Netif_Config+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <Netif_Config+0x68>)
 8000d14:	f006 fabc 	bl	8007290 <netif_set_up>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	11c1fea9 	.word	0x11c1fea9
 8000d24:	080134a5 	.word	0x080134a5
 8000d28:	08005ee5 	.word	0x08005ee5
 8000d2c:	2001308c 	.word	0x2001308c

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
  ldr  r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5a:	f000 f88f 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f017 fc67 	bl	8018630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fe31 	bl	80009c8 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d6c:	0801c8a0 	.word	0x0801c8a0
  ldr  r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d74:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000d78:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000d7c:	20016f6c 	.word	0x20016f6c

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>

08000d82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f013 fa22 	bl	80141d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f06f 000b 	mvn.w	r0, #11
 8000d94:	f013 fa27 	bl	80141e6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f06f 000a 	mvn.w	r0, #10
 8000da0:	f013 fa21 	bl	80141e6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	f06f 0009 	mvn.w	r0, #9
 8000dac:	f013 fa1b 	bl	80141e6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	f06f 0004 	mvn.w	r0, #4
 8000db8:	f013 fa15 	bl	80141e6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f06f 0003 	mvn.w	r0, #3
 8000dc4:	f013 fa0f 	bl	80141e6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f06f 0001 	mvn.w	r0, #1
 8000dd0:	f013 fa09 	bl	80141e6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f013 fa03 	bl	80141e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_SPI_MspInit+0x58>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11d      	bne.n	8000e32 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_SPI_MspInit+0x5c>)
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_SPI_MspInit+0x5c>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_SPI_MspInit+0x5c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e12:	23e0      	movs	r3, #224	; 0xe0
 8000e14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_SPI_MspInit+0x60>)
 8000e2e:	f013 fa3b 	bl	80142a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4a16      	ldr	r2, [pc, #88]	; (8000edc <SystemInit+0x60>)
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <SystemInit+0x60>)
 8000e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <SystemInit+0x64>)
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <SystemInit+0x64>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <SystemInit+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <SystemInit+0x64>)
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <SystemInit+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <SystemInit+0x64>)
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <SystemInit+0x68>)
 8000eb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <SystemInit+0x64>)
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <SystemInit+0x64>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SystemInit+0x60>)
 8000ecc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed0:	609a      	str	r2, [r3, #8]
#endif
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	24003010 	.word	0x24003010

08000ee8 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, 1);
 8000eee:	2301      	movs	r3, #1
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4903      	ldr	r1, [pc, #12]	; (8000f04 <tcp_echoserver_init+0x1c>)
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <tcp_echoserver_init+0x20>)
 8000efa:	f012 ffd7 	bl	8013eac <sys_thread_new>
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08000f0d 	.word	0x08000f0d
 8000f08:	08018a90 	.word	0x08018a90

08000f0c <tcpecho_thread>:

static void tcpecho_thread(void *arg)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	f5ad 6dc4 	sub.w	sp, sp, #1568	; 0x620
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	6018      	str	r0, [r3, #0]
	int sock, newconn, size;
	struct sockaddr_in address, remotehost;
	unsigned char recv_buf[1500];

	i = i + 1;
 8000f18:	4b46      	ldr	r3, [pc, #280]	; (8001034 <tcpecho_thread+0x128>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a45      	ldr	r2, [pc, #276]	; (8001034 <tcpecho_thread+0x128>)
 8000f20:	6013      	str	r3, [r2, #0]

		if (i == 1)
 8000f22:	4b44      	ldr	r3, [pc, #272]	; (8001034 <tcpecho_thread+0x128>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d112      	bne.n	8000f50 <tcpecho_thread+0x44>
		{
			GPIOA->BSRR = GPIO_BSRR_BS_12;
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <tcpecho_thread+0x12c>)
 8000f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f30:	619a      	str	r2, [r3, #24]
			for (int k = 0; k < 300000; k++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8000f38:	e004      	b.n	8000f44 <tcpecho_thread+0x38>
 8000f3a:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8000f44:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8000f48:	4a3c      	ldr	r2, [pc, #240]	; (800103c <tcpecho_thread+0x130>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	ddf5      	ble.n	8000f3a <tcpecho_thread+0x2e>
 8000f4e:	e018      	b.n	8000f82 <tcpecho_thread+0x76>
			{

			}
		}
		else if (i == 2)
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <tcpecho_thread+0x128>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d114      	bne.n	8000f82 <tcpecho_thread+0x76>
		{
			GPIOA->BSRR = GPIO_BSRR_BR_12;
 8000f58:	4b37      	ldr	r3, [pc, #220]	; (8001038 <tcpecho_thread+0x12c>)
 8000f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f5e:	619a      	str	r2, [r3, #24]
			for (int h = 0; h < 300000; h++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8000f66:	e004      	b.n	8000f72 <tcpecho_thread+0x66>
 8000f68:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8000f72:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <tcpecho_thread+0x130>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	ddf5      	ble.n	8000f68 <tcpecho_thread+0x5c>
			{

			}
			i = 0;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <tcpecho_thread+0x128>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
		}

	/* create a TCP socket */
	if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
 8000f82:	2206      	movs	r2, #6
 8000f84:	2101      	movs	r1, #1
 8000f86:	2002      	movs	r0, #2
 8000f88:	f011 ffa0 	bl	8012ecc <lwip_socket>
 8000f8c:	f8c7 0614 	str.w	r0, [r7, #1556]	; 0x614
 8000f90:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db46      	blt.n	8001026 <tcpecho_thread+0x11a>
	{
	   return;
	}

	/* bind to port 80 at any interface */
	address.sin_family = AF_INET;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
	address.sin_port = htons(999);
 8000f9e:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000fa2:	f004 fe53 	bl	8005c4c <lwip_htons>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f8a7 35fa 	strh.w	r3, [r7, #1530]	; 0x5fa
	address.sin_addr.s_addr = INADDR_ANY;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc

	if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8000fb2:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f8d7 0614 	ldr.w	r0, [r7, #1556]	; 0x614
 8000fbe:	f011 fa75 	bl	80124ac <lwip_bind>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db30      	blt.n	800102a <tcpecho_thread+0x11e>
	{
	  return;
	}

	/* listen for incoming connections (TCP listen backlog = 5) */
	listen(sock, 5);
 8000fc8:	2105      	movs	r1, #5
 8000fca:	f8d7 0614 	ldr.w	r0, [r7, #1556]	; 0x614
 8000fce:	f011 fad3 	bl	8012578 <lwip_listen>

	size = sizeof(remotehost);
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608

	while (1)
	{
		newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8000fd8:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 8000fdc:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f8d7 0614 	ldr.w	r0, [r7, #1556]	; 0x614
 8000fe6:	f011 f939 	bl	801225c <lwip_accept>
 8000fea:	f8c7 0610 	str.w	r0, [r7, #1552]	; 0x610
		if (newconn != 0)
 8000fee:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <tcpecho_thread+0xcc>
		{
			int ret =  read(newconn, recv_buf, 1500);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ffe:	4619      	mov	r1, r3
 8001000:	f8d7 0610 	ldr.w	r0, [r7, #1552]	; 0x610
 8001004:	f011 fe44 	bl	8012c90 <lwip_read>
 8001008:	f8c7 060c 	str.w	r0, [r7, #1548]	; 0x60c
			if (ret != 0)
 800100c:	f8d7 360c 	ldr.w	r3, [r7, #1548]	; 0x60c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0e1      	beq.n	8000fd8 <tcpecho_thread+0xcc>
			{
				write(newconn,recv_buf,read);
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <tcpecho_thread+0x134>)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4619      	mov	r1, r3
 800101c:	f8d7 0610 	ldr.w	r0, [r7, #1552]	; 0x610
 8001020:	f011 ffac 	bl	8012f7c <lwip_write>
		newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8001024:	e7d8      	b.n	8000fd8 <tcpecho_thread+0xcc>
	   return;
 8001026:	bf00      	nop
 8001028:	e000      	b.n	800102c <tcpecho_thread+0x120>
	  return;
 800102a:	bf00      	nop
			}
		}
	}
}
 800102c:	f507 67c4 	add.w	r7, r7, #1568	; 0x620
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000a4 	.word	0x200000a4
 8001038:	40020000 	.word	0x40020000
 800103c:	000493df 	.word	0x000493df
 8001040:	08018945 	.word	0x08018945

08001044 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001054:	e004      	b.n	8001060 <ts_itoa+0x1c>
		div *= base;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	fbb2 f2f3 	udiv	r2, r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	d2f3      	bcs.n	8001056 <ts_itoa+0x12>

	while (div != 0)
 800106e:	e029      	b.n	80010c4 <ts_itoa+0x80>
	{
		int num = d/div;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	613b      	str	r3, [r7, #16]
		d = d%div;
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001082:	fb02 f201 	mul.w	r2, r2, r1
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
		div /= base;
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b09      	cmp	r3, #9
 8001098:	dd0a      	ble.n	80010b0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1c59      	adds	r1, r3, #1
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	6011      	str	r1, [r2, #0]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	3237      	adds	r2, #55	; 0x37
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e009      	b.n	80010c4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1c59      	adds	r1, r3, #1
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	6011      	str	r1, [r2, #0]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	3230      	adds	r2, #48	; 0x30
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1d2      	bne.n	8001070 <ts_itoa+0x2c>
	}
}
 80010ca:	bf00      	nop
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80010e6:	e07d      	b.n	80011e4 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b25      	cmp	r3, #37	; 0x25
 80010ee:	d171      	bne.n	80011d4 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3301      	adds	r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d01e      	beq.n	800113c <ts_formatstring+0x66>
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	dc06      	bgt.n	8001110 <ts_formatstring+0x3a>
 8001102:	2b58      	cmp	r3, #88	; 0x58
 8001104:	d050      	beq.n	80011a8 <ts_formatstring+0xd2>
 8001106:	2b63      	cmp	r3, #99	; 0x63
 8001108:	d00e      	beq.n	8001128 <ts_formatstring+0x52>
 800110a:	2b25      	cmp	r3, #37	; 0x25
 800110c:	d058      	beq.n	80011c0 <ts_formatstring+0xea>
 800110e:	e05d      	b.n	80011cc <ts_formatstring+0xf6>
 8001110:	2b73      	cmp	r3, #115	; 0x73
 8001112:	d02b      	beq.n	800116c <ts_formatstring+0x96>
 8001114:	2b73      	cmp	r3, #115	; 0x73
 8001116:	dc02      	bgt.n	800111e <ts_formatstring+0x48>
 8001118:	2b69      	cmp	r3, #105	; 0x69
 800111a:	d00f      	beq.n	800113c <ts_formatstring+0x66>
 800111c:	e056      	b.n	80011cc <ts_formatstring+0xf6>
 800111e:	2b75      	cmp	r3, #117	; 0x75
 8001120:	d037      	beq.n	8001192 <ts_formatstring+0xbc>
 8001122:	2b78      	cmp	r3, #120	; 0x78
 8001124:	d040      	beq.n	80011a8 <ts_formatstring+0xd2>
 8001126:	e051      	b.n	80011cc <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	60fa      	str	r2, [r7, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	1d11      	adds	r1, r2, #4
 8001132:	6079      	str	r1, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
				break;
 800113a:	e047      	b.n	80011cc <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1d1a      	adds	r2, r3, #4
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da07      	bge.n	800115c <ts_formatstring+0x86>
					{
						val *= -1;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	425b      	negs	r3, r3
 8001150:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	60fa      	str	r2, [r7, #12]
 8001158:	222d      	movs	r2, #45	; 0x2d
 800115a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800115c:	69f9      	ldr	r1, [r7, #28]
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	220a      	movs	r2, #10
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff6d 	bl	8001044 <ts_itoa>
				}
				break;
 800116a:	e02f      	b.n	80011cc <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	1d1a      	adds	r2, r3, #4
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001176:	e007      	b.n	8001188 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60fa      	str	r2, [r7, #12]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	1c51      	adds	r1, r2, #1
 8001182:	61b9      	str	r1, [r7, #24]
 8001184:	7812      	ldrb	r2, [r2, #0]
 8001186:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f3      	bne.n	8001178 <ts_formatstring+0xa2>
					}
				}
				break;
 8001190:	e01c      	b.n	80011cc <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	1d1a      	adds	r2, r3, #4
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	220a      	movs	r2, #10
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff4f 	bl	8001044 <ts_itoa>
				break;
 80011a6:	e011      	b.n	80011cc <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1d1a      	adds	r2, r3, #4
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2210      	movs	r2, #16
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff43 	bl	8001044 <ts_itoa>
				break;
 80011be:	e005      	b.n	80011cc <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60fa      	str	r2, [r7, #12]
 80011c6:	2225      	movs	r2, #37	; 0x25
 80011c8:	701a      	strb	r2, [r3, #0]
				  break;
 80011ca:	bf00      	nop
			}
			fmt++;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	e007      	b.n	80011e4 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60fa      	str	r2, [r7, #12]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	1c51      	adds	r1, r2, #1
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f47f af7d 	bne.w	80010e8 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	461a      	mov	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	1ad3      	subs	r3, r2, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8001212:	e081      	b.n	8001318 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b25      	cmp	r3, #37	; 0x25
 800121a:	d177      	bne.n	800130c <ts_formatlength+0x108>
		{
			++fmt;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3301      	adds	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3b58      	subs	r3, #88	; 0x58
 8001228:	2b20      	cmp	r3, #32
 800122a:	d86a      	bhi.n	8001302 <ts_formatlength+0xfe>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <ts_formatlength+0x30>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	080012f5 	.word	0x080012f5
 8001238:	08001303 	.word	0x08001303
 800123c:	08001303 	.word	0x08001303
 8001240:	08001303 	.word	0x08001303
 8001244:	08001303 	.word	0x08001303
 8001248:	08001303 	.word	0x08001303
 800124c:	08001303 	.word	0x08001303
 8001250:	08001303 	.word	0x08001303
 8001254:	08001303 	.word	0x08001303
 8001258:	08001303 	.word	0x08001303
 800125c:	08001303 	.word	0x08001303
 8001260:	080012b9 	.word	0x080012b9
 8001264:	080012c7 	.word	0x080012c7
 8001268:	08001303 	.word	0x08001303
 800126c:	08001303 	.word	0x08001303
 8001270:	08001303 	.word	0x08001303
 8001274:	08001303 	.word	0x08001303
 8001278:	080012c7 	.word	0x080012c7
 800127c:	08001303 	.word	0x08001303
 8001280:	08001303 	.word	0x08001303
 8001284:	08001303 	.word	0x08001303
 8001288:	08001303 	.word	0x08001303
 800128c:	08001303 	.word	0x08001303
 8001290:	08001303 	.word	0x08001303
 8001294:	08001303 	.word	0x08001303
 8001298:	08001303 	.word	0x08001303
 800129c:	08001303 	.word	0x08001303
 80012a0:	080012d5 	.word	0x080012d5
 80012a4:	08001303 	.word	0x08001303
 80012a8:	080012c7 	.word	0x080012c7
 80012ac:	08001303 	.word	0x08001303
 80012b0:	08001303 	.word	0x08001303
 80012b4:	080012f5 	.word	0x080012f5
			{
			  case 'c':
		  		  va_arg(va, int);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3304      	adds	r3, #4
 80012bc:	603b      	str	r3, [r7, #0]
				  ++length;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
				  break;
 80012c4:	e025      	b.n	8001312 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	330b      	adds	r3, #11
 80012ca:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3304      	adds	r3, #4
 80012d0:	603b      	str	r3, [r7, #0]
				  break;
 80012d2:	e01e      	b.n	8001312 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	603a      	str	r2, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80012de:	e002      	b.n	80012e6 <ts_formatlength+0xe2>
			  			  ++length;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f6      	bne.n	80012e0 <ts_formatlength+0xdc>
			  	  }
				  break;
 80012f2:	e00e      	b.n	8001312 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3308      	adds	r3, #8
 80012f8:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3304      	adds	r3, #4
 80012fe:	603b      	str	r3, [r7, #0]
				  break;
 8001300:	e007      	b.n	8001312 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
				  break;
 8001308:	bf00      	nop
 800130a:	e002      	b.n	8001312 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f47f af79 	bne.w	8001214 <ts_formatlength+0x10>
	}
	return length;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8001330:	b40f      	push	{r0, r1, r2, r3}
 8001332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
	int length = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800133e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001342:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8001344:	6839      	ldr	r1, [r7, #0]
 8001346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001348:	f7ff ff5c 	bl	8001204 <ts_formatlength>
 800134c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800134e:	466b      	mov	r3, sp
 8001350:	461e      	mov	r6, r3
		char buf[length];
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	1e4b      	subs	r3, r1, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	460b      	mov	r3, r1
 800135a:	461a      	mov	r2, r3
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001364:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001368:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800136c:	460b      	mov	r3, r1
 800136e:	461a      	mov	r2, r3
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	00dd      	lsls	r5, r3, #3
 8001376:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800137a:	00d4      	lsls	r4, r2, #3
 800137c:	460b      	mov	r3, r1
 800137e:	3307      	adds	r3, #7
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	ebad 0d03 	sub.w	sp, sp, r3
 8001388:	466b      	mov	r3, sp
 800138a:	3300      	adds	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800138e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001392:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe9b 	bl	80010d6 <ts_formatstring>
 80013a0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4619      	mov	r1, r3
 80013a8:	2001      	movs	r0, #1
 80013aa:	f017 fb53 	bl	8018a54 <_write>
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013be:	b004      	add	sp, #16
 80013c0:	4770      	bx	lr
	...

080013c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80013ce:	230e      	movs	r3, #14
 80013d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	895b      	ldrh	r3, [r3, #10]
 80013d6:	2b0e      	cmp	r3, #14
 80013d8:	d80c      	bhi.n	80013f4 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <ethernet_input+0x15c>)
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013de:	3301      	adds	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <ethernet_input+0x15c>)
 80013e4:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80013e6:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <ethernet_input+0x15c>)
 80013e8:	8bdb      	ldrh	r3, [r3, #30]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <ethernet_input+0x15c>)
 80013f0:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 80013f2:	e08d      	b.n	8001510 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7bdb      	ldrb	r3, [r3, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	7b1a      	ldrb	r2, [r3, #12]
 8001414:	7b5b      	ldrb	r3, [r3, #13]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4313      	orrs	r3, r2
 800141a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d10f      	bne.n	8001450 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d11b      	bne.n	8001470 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800143c:	2b5e      	cmp	r3, #94	; 0x5e
 800143e:	d117      	bne.n	8001470 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7b5b      	ldrb	r3, [r3, #13]
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	b2da      	uxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	735a      	strb	r2, [r3, #13]
 800144e:	e00f      	b.n	8001470 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2206      	movs	r2, #6
 8001454:	4933      	ldr	r1, [pc, #204]	; (8001524 <ethernet_input+0x160>)
 8001456:	4618      	mov	r0, r3
 8001458:	f017 f90e 	bl	8018678 <memcmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7b5b      	ldrb	r3, [r3, #13]
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d003      	beq.n	800147e <ethernet_input+0xba>
 8001476:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800147a:	d014      	beq.n	80014a6 <ethernet_input+0xe2>
 800147c:	e034      	b.n	80014e8 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03c      	beq.n	8001506 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f006 fa65 	bl	8007960 <pbuf_remove_header>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d136      	bne.n	800150a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f003 f9ae 	bl	8004800 <ip4_input>
      }
      break;
 80014a4:	e02d      	b.n	8001502 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02c      	beq.n	800150e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80014b4:	8afb      	ldrh	r3, [r7, #22]
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f006 fa51 	bl	8007960 <pbuf_remove_header>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <ethernet_input+0x15c>)
 80014c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <ethernet_input+0x15c>)
 80014ce:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <ethernet_input+0x15c>)
 80014d2:	8bdb      	ldrh	r3, [r3, #30]
 80014d4:	3301      	adds	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <ethernet_input+0x15c>)
 80014da:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 80014dc:	e018      	b.n	8001510 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f002 fa39 	bl	8003958 <etharp_input>
      }
      break;
 80014e6:	e00c      	b.n	8001502 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <ethernet_input+0x15c>)
 80014ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <ethernet_input+0x15c>)
 80014f2:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <ethernet_input+0x15c>)
 80014f6:	8bdb      	ldrh	r3, [r3, #30]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <ethernet_input+0x15c>)
 80014fe:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8001500:	e006      	b.n	8001510 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e008      	b.n	8001518 <ethernet_input+0x154>
        goto free_and_return;
 8001506:	bf00      	nop
 8001508:	e002      	b.n	8001510 <ethernet_input+0x14c>
        goto free_and_return;
 800150a:	bf00      	nop
 800150c:	e000      	b.n	8001510 <ethernet_input+0x14c>
        goto free_and_return;
 800150e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f006 fae5 	bl	8007ae0 <pbuf_free>
  return ERR_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20016e44 	.word	0x20016e44
 8001524:	0801c680 	.word	0x0801c680

08001528 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8001536:	8c3b      	ldrh	r3, [r7, #32]
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fb87 	bl	8005c4c <lwip_htons>
 800153e:	4603      	mov	r3, r0
 8001540:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8001542:	210e      	movs	r1, #14
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f006 f9fb 	bl	8007940 <pbuf_add_header>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d12a      	bne.n	80015a6 <ethernet_output+0x7e>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	8afa      	ldrh	r2, [r7, #22]
 800155a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	2206      	movs	r2, #6
 8001560:	6839      	ldr	r1, [r7, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f017 f897 	bl	8018696 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3306      	adds	r3, #6
 800156c:	2206      	movs	r2, #6
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f017 f890 	bl	8018696 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800157c:	2b06      	cmp	r3, #6
 800157e:	d00b      	beq.n	8001598 <ethernet_output+0x70>
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <ethernet_output+0x98>)
 8001582:	f240 1233 	movw	r2, #307	; 0x133
 8001586:	490f      	ldr	r1, [pc, #60]	; (80015c4 <ethernet_output+0x9c>)
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <ethernet_output+0xa0>)
 800158a:	f7ff fed1 	bl	8001330 <iprintf>
 800158e:	2000      	movs	r0, #0
 8001590:	f016 ff72 	bl	8018478 <fflush>
 8001594:	f016 feb6 	bl	8018304 <abort>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	4798      	blx	r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	e008      	b.n	80015b8 <ethernet_output+0x90>
      goto pbuf_header_failed;
 80015a6:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <ethernet_output+0xa4>)
 80015aa:	895b      	ldrh	r3, [r3, #10]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <ethernet_output+0xa4>)
 80015b2:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 80015b4:	f06f 0301 	mvn.w	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08018aec 	.word	0x08018aec
 80015c4:	08018b0c 	.word	0x08018b0c
 80015c8:	08018b40 	.word	0x08018b40
 80015cc:	20016e44 	.word	0x20016e44

080015d0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <dhcp_inc_pcb_refcount+0x90>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d138      	bne.n	800164e <dhcp_inc_pcb_refcount+0x7e>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <dhcp_inc_pcb_refcount+0x2a>
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <dhcp_inc_pcb_refcount+0x98>)
 80015e6:	22e5      	movs	r2, #229	; 0xe5
 80015e8:	4920      	ldr	r1, [pc, #128]	; (800166c <dhcp_inc_pcb_refcount+0x9c>)
 80015ea:	4821      	ldr	r0, [pc, #132]	; (8001670 <dhcp_inc_pcb_refcount+0xa0>)
 80015ec:	f7ff fea0 	bl	8001330 <iprintf>
 80015f0:	2000      	movs	r0, #0
 80015f2:	f016 ff41 	bl	8018478 <fflush>
 80015f6:	f016 fe85 	bl	8018304 <abort>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80015fa:	f00e f8d7 	bl	800f7ac <udp_new>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001602:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <dhcp_inc_pcb_refcount+0x42>
      return ERR_MEM;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	e024      	b.n	800165c <dhcp_inc_pcb_refcount+0x8c>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	7a52      	ldrb	r2, [r2, #9]
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2244      	movs	r2, #68	; 0x44
 800162a:	4912      	ldr	r1, [pc, #72]	; (8001674 <dhcp_inc_pcb_refcount+0xa4>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00d ff55 	bl	800f4dc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2243      	movs	r2, #67	; 0x43
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <dhcp_inc_pcb_refcount+0xa4>)
 800163a:	4618      	mov	r0, r3
 800163c:	f00d ffd8 	bl	800f5f0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <dhcp_inc_pcb_refcount+0x94>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	490c      	ldr	r1, [pc, #48]	; (8001678 <dhcp_inc_pcb_refcount+0xa8>)
 8001648:	4618      	mov	r0, r3
 800164a:	f00e f843 	bl	800f6d4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <dhcp_inc_pcb_refcount+0x90>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b02      	ldr	r3, [pc, #8]	; (8001660 <dhcp_inc_pcb_refcount+0x90>)
 8001658:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000ac 	.word	0x200000ac
 8001664:	200000a8 	.word	0x200000a8
 8001668:	08018b68 	.word	0x08018b68
 800166c:	08018b88 	.word	0x08018b88
 8001670:	08018bb0 	.word	0x08018bb0
 8001674:	0801c690 	.word	0x0801c690
 8001678:	08002f39 	.word	0x08002f39

0800167c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <dhcp_dec_pcb_refcount+0x4c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10a      	bne.n	800169e <dhcp_dec_pcb_refcount+0x22>
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <dhcp_dec_pcb_refcount+0x50>)
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	4910      	ldr	r1, [pc, #64]	; (80016d0 <dhcp_dec_pcb_refcount+0x54>)
 800168e:	4811      	ldr	r0, [pc, #68]	; (80016d4 <dhcp_dec_pcb_refcount+0x58>)
 8001690:	f7ff fe4e 	bl	8001330 <iprintf>
 8001694:	2000      	movs	r0, #0
 8001696:	f016 feef 	bl	8018478 <fflush>
 800169a:	f016 fe33 	bl	8018304 <abort>
  dhcp_pcb_refcount--;
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <dhcp_dec_pcb_refcount+0x4c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <dhcp_dec_pcb_refcount+0x4c>)
 80016a8:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <dhcp_dec_pcb_refcount+0x4c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <dhcp_dec_pcb_refcount+0x46>
    udp_remove(dhcp_pcb);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <dhcp_dec_pcb_refcount+0x5c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00e f832 	bl	800f720 <udp_remove>
    dhcp_pcb = NULL;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <dhcp_dec_pcb_refcount+0x5c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
  }
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000ac 	.word	0x200000ac
 80016cc:	08018b68 	.word	0x08018b68
 80016d0:	08018bd8 	.word	0x08018bd8
 80016d4:	08018bb0 	.word	0x08018bb0
 80016d8:	200000a8 	.word	0x200000a8

080016dc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80016ea:	210c      	movs	r1, #12
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f001 f82f 	bl	8002750 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <dhcp_handle_nak+0x30>)
 80016f4:	4a05      	ldr	r2, [pc, #20]	; (800170c <dhcp_handle_nak+0x30>)
 80016f6:	4905      	ldr	r1, [pc, #20]	; (800170c <dhcp_handle_nak+0x30>)
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f005 fd6f 	bl	80071dc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fc1a 	bl	8001f38 <dhcp_discover>
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	0801c690 	.word	0x0801c690

08001710 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800171e:	2108      	movs	r1, #8
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f001 f815 	bl	8002750 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	331c      	adds	r3, #28
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f002 fb7a 	bl	8003e28 <etharp_query>
 8001734:	4603      	mov	r3, r0
 8001736:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	799b      	ldrb	r3, [r3, #6]
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	d005      	beq.n	800174c <dhcp_check+0x3c>
    dhcp->tries++;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	799b      	ldrb	r3, [r3, #6]
 8001744:	3301      	adds	r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800174c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001750:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8001752:	893b      	ldrh	r3, [r7, #8]
 8001754:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <dhcp_check+0x64>)
 800175a:	fb82 1203 	smull	r1, r2, r2, r3
 800175e:	1152      	asrs	r2, r2, #5
 8001760:	17db      	asrs	r3, r3, #31
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <dhcp_handle_offer+0x44>)
 800178a:	789b      	ldrb	r3, [r3, #2]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d011      	beq.n	80017b4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <dhcp_handle_offer+0x48>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fa6b 	bl	8005c76 <lwip_htonl>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f808 	bl	80017c4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20013118 	.word	0x20013118
 80017c0:	20013120 	.word	0x20013120

080017c4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <dhcp_select+0x26>
 80017d2:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <dhcp_select+0x1dc>)
 80017d4:	f240 1277 	movw	r2, #375	; 0x177
 80017d8:	4972      	ldr	r1, [pc, #456]	; (80019a4 <dhcp_select+0x1e0>)
 80017da:	4873      	ldr	r0, [pc, #460]	; (80019a8 <dhcp_select+0x1e4>)
 80017dc:	f7ff fda8 	bl	8001330 <iprintf>
 80017e0:	2000      	movs	r0, #0
 80017e2:	f016 fe49 	bl	8018478 <fflush>
 80017e6:	f016 fd8d 	bl	8018304 <abort>
  dhcp = netif_dhcp_data(netif);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10b      	bne.n	800180e <dhcp_select+0x4a>
 80017f6:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <dhcp_select+0x1dc>)
 80017f8:	f240 1279 	movw	r2, #377	; 0x179
 80017fc:	496b      	ldr	r1, [pc, #428]	; (80019ac <dhcp_select+0x1e8>)
 80017fe:	486a      	ldr	r0, [pc, #424]	; (80019a8 <dhcp_select+0x1e4>)
 8001800:	f7ff fd96 	bl	8001330 <iprintf>
 8001804:	2000      	movs	r0, #0
 8001806:	f016 fe37 	bl	8018478 <fflush>
 800180a:	f016 fd7b 	bl	8018304 <abort>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800180e:	2101      	movs	r1, #1
 8001810:	69b8      	ldr	r0, [r7, #24]
 8001812:	f000 ff9d 	bl	8002750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2203      	movs	r2, #3
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f001 fc52 	bl	80030c8 <dhcp_create_msg>
 8001824:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8085 	beq.w	8001938 <dhcp_select+0x174>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8001834:	89b8      	ldrh	r0, [r7, #12]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800183c:	2302      	movs	r3, #2
 800183e:	2239      	movs	r2, #57	; 0x39
 8001840:	f000 ffa0 	bl	8002784 <dhcp_option>
 8001844:	4603      	mov	r3, r0
 8001846:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8001848:	89b8      	ldrh	r0, [r7, #12]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001854:	461a      	mov	r2, r3
 8001856:	f000 fff9 	bl	800284c <dhcp_option_short>
 800185a:	4603      	mov	r3, r0
 800185c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800185e:	89b8      	ldrh	r0, [r7, #12]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001866:	2304      	movs	r3, #4
 8001868:	2232      	movs	r2, #50	; 0x32
 800186a:	f000 ff8b 	bl	8002784 <dhcp_option>
 800186e:	4603      	mov	r3, r0
 8001870:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8001872:	89bc      	ldrh	r4, [r7, #12]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4618      	mov	r0, r3
 8001880:	f004 f9f9 	bl	8005c76 <lwip_htonl>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	4629      	mov	r1, r5
 800188a:	4620      	mov	r0, r4
 800188c:	f001 f816 	bl	80028bc <dhcp_option_long>
 8001890:	4603      	mov	r3, r0
 8001892:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8001894:	89b8      	ldrh	r0, [r7, #12]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800189c:	2304      	movs	r3, #4
 800189e:	2236      	movs	r2, #54	; 0x36
 80018a0:	f000 ff70 	bl	8002784 <dhcp_option>
 80018a4:	4603      	mov	r3, r0
 80018a6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80018a8:	89bc      	ldrh	r4, [r7, #12]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 f9de 	bl	8005c76 <lwip_htonl>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4629      	mov	r1, r5
 80018c0:	4620      	mov	r0, r4
 80018c2:	f000 fffb 	bl	80028bc <dhcp_option_long>
 80018c6:	4603      	mov	r3, r0
 80018c8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80018ca:	89b8      	ldrh	r0, [r7, #12]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80018d2:	2303      	movs	r3, #3
 80018d4:	2237      	movs	r2, #55	; 0x37
 80018d6:	f000 ff55 	bl	8002784 <dhcp_option>
 80018da:	4603      	mov	r3, r0
 80018dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	77bb      	strb	r3, [r7, #30]
 80018e2:	e00e      	b.n	8001902 <dhcp_select+0x13e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80018e4:	89b8      	ldrh	r0, [r7, #12]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80018ec:	7fbb      	ldrb	r3, [r7, #30]
 80018ee:	4a30      	ldr	r2, [pc, #192]	; (80019b0 <dhcp_select+0x1ec>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	461a      	mov	r2, r3
 80018f4:	f000 ff80 	bl	80027f8 <dhcp_option_byte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80018fc:	7fbb      	ldrb	r3, [r7, #30]
 80018fe:	3301      	adds	r3, #1
 8001900:	77bb      	strb	r3, [r7, #30]
 8001902:	7fbb      	ldrb	r3, [r7, #30]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d9ed      	bls.n	80018e4 <dhcp_select+0x120>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8001908:	89b8      	ldrh	r0, [r7, #12]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	33f0      	adds	r3, #240	; 0xf0
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4619      	mov	r1, r3
 8001912:	f001 fcb9 	bl	8003288 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <dhcp_select+0x1f0>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <dhcp_select+0x1f4>)
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2343      	movs	r3, #67	; 0x43
 8001924:	4a25      	ldr	r2, [pc, #148]	; (80019bc <dhcp_select+0x1f8>)
 8001926:	6979      	ldr	r1, [r7, #20]
 8001928:	f00d fcbe 	bl	800f2a8 <udp_sendto_if_src>
 800192c:	4603      	mov	r3, r0
 800192e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f006 f8d5 	bl	8007ae0 <pbuf_free>
 8001936:	e001      	b.n	800193c <dhcp_select+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	799b      	ldrb	r3, [r3, #6]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d005      	beq.n	8001950 <dhcp_select+0x18c>
    dhcp->tries++;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	799b      	ldrb	r3, [r3, #6]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d80d      	bhi.n	8001974 <dhcp_select+0x1b0>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	799b      	ldrb	r3, [r3, #6]
 800195c:	461a      	mov	r2, r3
 800195e:	2301      	movs	r3, #1
 8001960:	4093      	lsls	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	0152      	lsls	r2, r2, #5
 8001968:	1ad2      	subs	r2, r2, r3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	b29b      	uxth	r3, r3
 8001972:	e001      	b.n	8001978 <dhcp_select+0x1b4>
 8001974:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001978:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <dhcp_select+0x1fc>)
 8001982:	fb82 1203 	smull	r1, r2, r2, r3
 8001986:	1152      	asrs	r2, r2, #5
 8001988:	17db      	asrs	r3, r3, #31
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8001992:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}
 800199e:	bf00      	nop
 80019a0:	08018b68 	.word	0x08018b68
 80019a4:	08018bfc 	.word	0x08018bfc
 80019a8:	08018bb0 	.word	0x08018bb0
 80019ac:	08018c18 	.word	0x08018c18
 80019b0:	20000004 	.word	0x20000004
 80019b4:	200000a8 	.word	0x200000a8
 80019b8:	0801c690 	.word	0x0801c690
 80019bc:	0801c694 	.word	0x0801c694
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <dhcp_coarse_tmr+0xa4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	e042      	b.n	8001a58 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d039      	beq.n	8001a52 <dhcp_coarse_tmr+0x8e>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	795b      	ldrb	r3, [r3, #5]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d035      	beq.n	8001a52 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	8a9b      	ldrh	r3, [r3, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d012      	beq.n	8001a14 <dhcp_coarse_tmr+0x50>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	8a5b      	ldrh	r3, [r3, #18]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	825a      	strh	r2, [r3, #18]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	8a5a      	ldrh	r2, [r3, #18]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	8a9b      	ldrh	r3, [r3, #20]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d106      	bne.n	8001a14 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fe08 	bl	800261c <dhcp_release_and_stop>
        dhcp_start(netif);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f969 	bl	8001ce4 <dhcp_start>
 8001a12:	e01e      	b.n	8001a52 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	8a1b      	ldrh	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <dhcp_coarse_tmr+0x70>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	8a1b      	ldrh	r3, [r3, #16]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	b291      	uxth	r1, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	8211      	strh	r1, [r2, #16]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d103      	bne.n	8001a34 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8c6 	bl	8001bbe <dhcp_t2_timeout>
 8001a32:	e00e      	b.n	8001a52 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	89db      	ldrh	r3, [r3, #14]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00a      	beq.n	8001a52 <dhcp_coarse_tmr+0x8e>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	89db      	ldrh	r3, [r3, #14]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	b291      	uxth	r1, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	81d1      	strh	r1, [r2, #14]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f888 	bl	8001b62 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1b9      	bne.n	80019d2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20016e38 	.word	0x20016e38

08001a6c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <dhcp_fine_tmr+0x60>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	e020      	b.n	8001abc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d017      	beq.n	8001ab6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	891b      	ldrh	r3, [r3, #8]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d906      	bls.n	8001a9c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	811a      	strh	r2, [r3, #8]
 8001a9a:	e00c      	b.n	8001ab6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	891b      	ldrh	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	891b      	ldrh	r3, [r3, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f80d 	bl	8001ad0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1db      	bne.n	8001a7a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20016e38 	.word	0x20016e38

08001ad0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	795b      	ldrb	r3, [r3, #5]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d003      	beq.n	8001aee <dhcp_timeout+0x1e>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	795b      	ldrb	r3, [r3, #5]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d103      	bne.n	8001af6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fa22 	bl	8001f38 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8001af4:	e031      	b.n	8001b5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	795b      	ldrb	r3, [r3, #5]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d10e      	bne.n	8001b1c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d803      	bhi.n	8001b0e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fe5c 	bl	80017c4 <dhcp_select>
}
 8001b0c:	e025      	b.n	8001b5a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fd84 	bl	800261c <dhcp_release_and_stop>
      dhcp_start(netif);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8e5 	bl	8001ce4 <dhcp_start>
}
 8001b1a:	e01e      	b.n	8001b5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d10b      	bne.n	8001b3c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	799b      	ldrb	r3, [r3, #6]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d803      	bhi.n	8001b34 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fdef 	bl	8001710 <dhcp_check>
}
 8001b32:	e012      	b.n	8001b5a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 faa1 	bl	800207c <dhcp_bind>
}
 8001b3a:	e00e      	b.n	8001b5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	795b      	ldrb	r3, [r3, #5]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d10a      	bne.n	8001b5a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	799b      	ldrb	r3, [r3, #6]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d803      	bhi.n	8001b54 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fcaf 	bl	80024b0 <dhcp_reboot>
}
 8001b52:	e002      	b.n	8001b5a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f9ef 	bl	8001f38 <dhcp_discover>
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	795b      	ldrb	r3, [r3, #5]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d007      	beq.n	8001b88 <dhcp_t1_timeout+0x26>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	795b      	ldrb	r3, [r3, #5]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d003      	beq.n	8001b88 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d116      	bne.n	8001bb6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fb59 	bl	8002240 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	899b      	ldrh	r3, [r3, #12]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8a5b      	ldrh	r3, [r3, #18]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	dd0b      	ble.n	8001bb6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	899b      	ldrh	r3, [r3, #12]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8a5b      	ldrh	r3, [r3, #18]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	0fda      	lsrs	r2, r3, #31
 8001bac:	4413      	add	r3, r2
 8001bae:	105b      	asrs	r3, r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	795b      	ldrb	r3, [r3, #5]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d00b      	beq.n	8001bec <dhcp_t2_timeout+0x2e>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	795b      	ldrb	r3, [r3, #5]
 8001bd8:	2b0a      	cmp	r3, #10
 8001bda:	d007      	beq.n	8001bec <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d003      	beq.n	8001bec <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	795b      	ldrb	r3, [r3, #5]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d116      	bne.n	8001c1a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fbc3 	bl	8002378 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8a9b      	ldrh	r3, [r3, #20]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8a5b      	ldrh	r3, [r3, #18]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	dd0b      	ble.n	8001c1a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8a9b      	ldrh	r3, [r3, #20]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8a5b      	ldrh	r3, [r3, #18]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	0fda      	lsrs	r2, r3, #31
 8001c10:	4413      	add	r3, r2
 8001c12:	105b      	asrs	r3, r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <dhcp_handle_ack+0xb8>)
 8001c42:	78db      	ldrb	r3, [r3, #3]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <dhcp_handle_ack+0xbc>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <dhcp_handle_ack+0xb8>)
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <dhcp_handle_ack+0xbc>)
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c60:	e004      	b.n	8001c6c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	085a      	lsrs	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <dhcp_handle_ack+0xb8>)
 8001c6e:	795b      	ldrb	r3, [r3, #5]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <dhcp_handle_ack+0xbc>)
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7c:	e007      	b.n	8001c8e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <dhcp_handle_ack+0xb8>)
 8001c98:	799b      	ldrb	r3, [r3, #6]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <dhcp_handle_ack+0xbc>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 ffe7 	bl	8005c76 <lwip_htonl>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	71da      	strb	r2, [r3, #7]
 8001cb4:	e002      	b.n	8001cbc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <dhcp_handle_ack+0xb8>)
 8001cbe:	79db      	ldrb	r3, [r3, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <dhcp_handle_ack+0xbc>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 ffd4 	bl	8005c76 <lwip_htonl>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20013118 	.word	0x20013118
 8001ce0:	20013120 	.word	0x20013120

08001ce4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <dhcp_start+0x26>
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <dhcp_start+0xf4>)
 8001cf4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8001cf8:	4938      	ldr	r1, [pc, #224]	; (8001ddc <dhcp_start+0xf8>)
 8001cfa:	4839      	ldr	r0, [pc, #228]	; (8001de0 <dhcp_start+0xfc>)
 8001cfc:	f7ff fb18 	bl	8001330 <iprintf>
 8001d00:	2000      	movs	r0, #0
 8001d02:	f016 fbb9 	bl	8018478 <fflush>
 8001d06:	f016 fafd 	bl	8018304 <abort>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <dhcp_start+0x4c>
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <dhcp_start+0xf4>)
 8001d1a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8001d1e:	4931      	ldr	r1, [pc, #196]	; (8001de4 <dhcp_start+0x100>)
 8001d20:	482f      	ldr	r0, [pc, #188]	; (8001de0 <dhcp_start+0xfc>)
 8001d22:	f7ff fb05 	bl	8001330 <iprintf>
 8001d26:	2000      	movs	r0, #0
 8001d28:	f016 fba6 	bl	8018478 <fflush>
 8001d2c:	f016 faea 	bl	8018304 <abort>
  dhcp = netif_dhcp_data(netif);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d3a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8001d3e:	d202      	bcs.n	8001d46 <dhcp_start+0x62>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	e044      	b.n	8001dd0 <dhcp_start+0xec>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <dhcp_start+0x84>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8001d4c:	2034      	movs	r0, #52	; 0x34
 8001d4e:	f004 fe79 	bl	8006a44 <mem_malloc>
 8001d52:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <dhcp_start+0x7c>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e037      	b.n	8001dd0 <dhcp_start+0xec>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	621a      	str	r2, [r3, #32]
 8001d66:	e005      	b.n	8001d74 <dhcp_start+0x90>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	791b      	ldrb	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <dhcp_start+0x90>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8001d70:	f7ff fc84 	bl	800167c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8001d74:	2234      	movs	r2, #52	; 0x34
 8001d76:	2100      	movs	r1, #0
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f016 fc97 	bl	80186ac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8001d7e:	f7ff fc27 	bl	80015d0 <dhcp_inc_pcb_refcount>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <dhcp_start+0xaa>
    return ERR_MEM;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e020      	b.n	8001dd0 <dhcp_start+0xec>
  }
  dhcp->pcb_allocated = 1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <dhcp_start+0xca>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8001da2:	2102      	movs	r1, #2
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fcd3 	bl	8002750 <dhcp_set_state>
    return ERR_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e010      	b.n	8001dd0 <dhcp_start+0xec>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8c2 	bl	8001f38 <dhcp_discover>
 8001db4:	4603      	mov	r3, r0
 8001db6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8001db8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <dhcp_start+0xe8>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fc2b 	bl	800261c <dhcp_release_and_stop>
    return ERR_MEM;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e001      	b.n	8001dd0 <dhcp_start+0xec>
  }
  return result;
 8001dcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	08018b68 	.word	0x08018b68
 8001ddc:	08018c34 	.word	0x08018c34
 8001de0:	08018bb0 	.word	0x08018bb0
 8001de4:	08018c78 	.word	0x08018c78

08001de8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <dhcp_arp_reply+0x28>
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <dhcp_arp_reply+0x58>)
 8001dfa:	f240 328b 	movw	r2, #907	; 0x38b
 8001dfe:	4911      	ldr	r1, [pc, #68]	; (8001e44 <dhcp_arp_reply+0x5c>)
 8001e00:	4811      	ldr	r0, [pc, #68]	; (8001e48 <dhcp_arp_reply+0x60>)
 8001e02:	f7ff fa95 	bl	8001330 <iprintf>
 8001e06:	2000      	movs	r0, #0
 8001e08:	f016 fb36 	bl	8018478 <fflush>
 8001e0c:	f016 fa7a 	bl	8018304 <abort>
  dhcp = netif_dhcp_data(netif);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <dhcp_arp_reply+0x4e>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d108      	bne.n	8001e36 <dhcp_arp_reply+0x4e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d102      	bne.n	8001e36 <dhcp_arp_reply+0x4e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f80b 	bl	8001e4c <dhcp_decline>
    }
  }
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08018b68 	.word	0x08018b68
 8001e44:	08018c34 	.word	0x08018c34
 8001e48:	08018bb0 	.word	0x08018bb0

08001e4c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8001e5a:	210c      	movs	r1, #12
 8001e5c:	69b8      	ldr	r0, [r7, #24]
 8001e5e:	f000 fc77 	bl	8002750 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	2204      	movs	r2, #4
 8001e68:	69b9      	ldr	r1, [r7, #24]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f001 f92c 	bl	80030c8 <dhcp_create_msg>
 8001e70:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d035      	beq.n	8001ee4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8001e7e:	89b8      	ldrh	r0, [r7, #12]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001e86:	2304      	movs	r3, #4
 8001e88:	2232      	movs	r2, #50	; 0x32
 8001e8a:	f000 fc7b 	bl	8002784 <dhcp_option>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8001e92:	89bc      	ldrh	r4, [r7, #12]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fee9 	bl	8005c76 <lwip_htonl>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f000 fd06 	bl	80028bc <dhcp_option_long>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8001eb4:	89b8      	ldrh	r0, [r7, #12]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	33f0      	adds	r3, #240	; 0xf0
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f001 f9e3 	bl	8003288 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <dhcp_decline+0xdc>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <dhcp_decline+0xe0>)
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2343      	movs	r3, #67	; 0x43
 8001ed0:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <dhcp_decline+0xe4>)
 8001ed2:	6979      	ldr	r1, [r7, #20]
 8001ed4:	f00d f9e8 	bl	800f2a8 <udp_sendto_if_src>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f005 fdff 	bl	8007ae0 <pbuf_free>
 8001ee2:	e001      	b.n	8001ee8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8001ee4:	23ff      	movs	r3, #255	; 0xff
 8001ee6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	799b      	ldrb	r3, [r3, #6]
 8001eec:	2bff      	cmp	r3, #255	; 0xff
 8001eee:	d005      	beq.n	8001efc <dhcp_decline+0xb0>
    dhcp->tries++;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	799b      	ldrb	r3, [r3, #6]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8001efc:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <dhcp_decline+0xe8>)
 8001f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0e:	1152      	asrs	r2, r2, #5
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8001f1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200000a8 	.word	0x200000a8
 8001f2c:	0801c690 	.word	0x0801c690
 8001f30:	0801c694 	.word	0x0801c694
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8001f50:	2106      	movs	r1, #6
 8001f52:	69b8      	ldr	r0, [r7, #24]
 8001f54:	f000 fbfc 	bl	8002750 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f001 f8b1 	bl	80030c8 <dhcp_create_msg>
 8001f66:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04b      	beq.n	8002006 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8001f74:	8938      	ldrh	r0, [r7, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	2239      	movs	r2, #57	; 0x39
 8001f80:	f000 fc00 	bl	8002784 <dhcp_option>
 8001f84:	4603      	mov	r3, r0
 8001f86:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8001f88:	8938      	ldrh	r0, [r7, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f94:	461a      	mov	r2, r3
 8001f96:	f000 fc59 	bl	800284c <dhcp_option_short>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8001f9e:	8938      	ldrh	r0, [r7, #8]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	2237      	movs	r2, #55	; 0x37
 8001faa:	f000 fbeb 	bl	8002784 <dhcp_option>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	77fb      	strb	r3, [r7, #31]
 8001fb6:	e00e      	b.n	8001fd6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8001fb8:	8938      	ldrh	r0, [r7, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
 8001fc2:	4a29      	ldr	r2, [pc, #164]	; (8002068 <dhcp_discover+0x130>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f000 fc16 	bl	80027f8 <dhcp_option_byte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	77fb      	strb	r3, [r7, #31]
 8001fd6:	7ffb      	ldrb	r3, [r7, #31]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d9ed      	bls.n	8001fb8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8001fdc:	8938      	ldrh	r0, [r7, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	33f0      	adds	r3, #240	; 0xf0
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f001 f94f 	bl	8003288 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <dhcp_discover+0x134>)
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <dhcp_discover+0x138>)
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2343      	movs	r3, #67	; 0x43
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <dhcp_discover+0x13c>)
 8001ffa:	6939      	ldr	r1, [r7, #16]
 8001ffc:	f00d f954 	bl	800f2a8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8002000:	6938      	ldr	r0, [r7, #16]
 8002002:	f005 fd6d 	bl	8007ae0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	799b      	ldrb	r3, [r3, #6]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d005      	beq.n	800201a <dhcp_discover+0xe2>
    dhcp->tries++;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	3301      	adds	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	799b      	ldrb	r3, [r3, #6]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d80d      	bhi.n	800203e <dhcp_discover+0x106>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	799b      	ldrb	r3, [r3, #6]
 8002026:	461a      	mov	r2, r3
 8002028:	2301      	movs	r3, #1
 800202a:	4093      	lsls	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	0152      	lsls	r2, r2, #5
 8002032:	1ad2      	subs	r2, r2, r3
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	b29b      	uxth	r3, r3
 800203c:	e001      	b.n	8002042 <dhcp_discover+0x10a>
 800203e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002042:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8002044:	897b      	ldrh	r3, [r7, #10]
 8002046:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <dhcp_discover+0x140>)
 800204c:	fb82 1203 	smull	r1, r2, r2, r3
 8002050:	1152      	asrs	r2, r2, #5
 8002052:	17db      	asrs	r3, r3, #31
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	b29a      	uxth	r2, r3
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800205c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000004 	.word	0x20000004
 800206c:	200000a8 	.word	0x200000a8
 8002070:	0801c690 	.word	0x0801c690
 8002074:	0801c694 	.word	0x0801c694
 8002078:	10624dd3 	.word	0x10624dd3

0800207c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <dhcp_bind+0x26>
 800208a:	4b68      	ldr	r3, [pc, #416]	; (800222c <dhcp_bind+0x1b0>)
 800208c:	f240 4215 	movw	r2, #1045	; 0x415
 8002090:	4967      	ldr	r1, [pc, #412]	; (8002230 <dhcp_bind+0x1b4>)
 8002092:	4868      	ldr	r0, [pc, #416]	; (8002234 <dhcp_bind+0x1b8>)
 8002094:	f7ff f94c 	bl	8001330 <iprintf>
 8002098:	2000      	movs	r0, #0
 800209a:	f016 f9ed 	bl	8018478 <fflush>
 800209e:	f016 f931 	bl	8018304 <abort>
  dhcp = netif_dhcp_data(netif);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <dhcp_bind+0x4a>
 80020ae:	4b5f      	ldr	r3, [pc, #380]	; (800222c <dhcp_bind+0x1b0>)
 80020b0:	f240 4217 	movw	r2, #1047	; 0x417
 80020b4:	4960      	ldr	r1, [pc, #384]	; (8002238 <dhcp_bind+0x1bc>)
 80020b6:	485f      	ldr	r0, [pc, #380]	; (8002234 <dhcp_bind+0x1b8>)
 80020b8:	f7ff f93a 	bl	8001330 <iprintf>
 80020bc:	2000      	movs	r0, #0
 80020be:	f016 f9db 	bl	8018478 <fflush>
 80020c2:	f016 f91f 	bl	8018304 <abort>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2200      	movs	r2, #0
 80020ca:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d019      	beq.n	800210a <dhcp_bind+0x8e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	331e      	adds	r3, #30
 80020dc:	4a57      	ldr	r2, [pc, #348]	; (800223c <dhcp_bind+0x1c0>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d302      	bcc.n	80020f4 <dhcp_bind+0x78>
      timeout = 0xffff;
 80020ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	8a9b      	ldrh	r3, [r3, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <dhcp_bind+0x8e>
      dhcp->t0_timeout = 1;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2201      	movs	r2, #1
 8002108:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002112:	d01d      	beq.n	8002150 <dhcp_bind+0xd4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	331e      	adds	r3, #30
 800211a:	4a48      	ldr	r2, [pc, #288]	; (800223c <dhcp_bind+0x1c0>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212a:	d302      	bcc.n	8002132 <dhcp_bind+0xb6>
      timeout = 0xffff;
 800212c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002130:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	b29a      	uxth	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	895b      	ldrh	r3, [r3, #10]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <dhcp_bind+0xcc>
      dhcp->t1_timeout = 1;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2201      	movs	r2, #1
 8002146:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	895a      	ldrh	r2, [r3, #10]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d01d      	beq.n	8002196 <dhcp_bind+0x11a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	331e      	adds	r3, #30
 8002160:	4a36      	ldr	r2, [pc, #216]	; (800223c <dhcp_bind+0x1c0>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d302      	bcc.n	8002178 <dhcp_bind+0xfc>
      timeout = 0xffff;
 8002172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002176:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	b29a      	uxth	r2, r3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	899b      	ldrh	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <dhcp_bind+0x112>
      dhcp->t2_timeout = 1;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2201      	movs	r2, #1
 800218c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	899a      	ldrh	r2, [r3, #12]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	895a      	ldrh	r2, [r3, #10]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	899b      	ldrh	r3, [r3, #12]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d306      	bcc.n	80021b0 <dhcp_bind+0x134>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	899b      	ldrh	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <dhcp_bind+0x134>
    dhcp->t1_timeout = 0;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2200      	movs	r2, #0
 80021ae:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	79db      	ldrb	r3, [r3, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <dhcp_bind+0x144>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e014      	b.n	80021ea <dhcp_bind+0x16e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	331c      	adds	r3, #28
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80021c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db02      	blt.n	80021d6 <dhcp_bind+0x15a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e009      	b.n	80021ea <dhcp_bind+0x16e>
    } else if (first_octet >= 192) {
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2bbf      	cmp	r3, #191	; 0xbf
 80021da:	d903      	bls.n	80021e4 <dhcp_bind+0x168>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80021dc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e002      	b.n	80021ea <dhcp_bind+0x16e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <dhcp_bind+0x18c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8002208:	210a      	movs	r1, #10
 800220a:	69b8      	ldr	r0, [r7, #24]
 800220c:	f000 faa0 	bl	8002750 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f103 011c 	add.w	r1, r3, #28
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	f107 0210 	add.w	r2, r7, #16
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f004 ffdc 	bl	80071dc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	08018b68 	.word	0x08018b68
 8002230:	08018cb0 	.word	0x08018cb0
 8002234:	08018bb0 	.word	0x08018bb0
 8002238:	08018ccc 	.word	0x08018ccc
 800223c:	88888889 	.word	0x88888889

08002240 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af02      	add	r7, sp, #8
 8002246:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800224e:	2105      	movs	r1, #5
 8002250:	69b8      	ldr	r0, [r7, #24]
 8002252:	f000 fa7d 	bl	8002750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	2203      	movs	r2, #3
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 ff32 	bl	80030c8 <dhcp_create_msg>
 8002264:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d04e      	beq.n	800230a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8002272:	89b8      	ldrh	r0, [r7, #12]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800227a:	2302      	movs	r3, #2
 800227c:	2239      	movs	r2, #57	; 0x39
 800227e:	f000 fa81 	bl	8002784 <dhcp_option>
 8002282:	4603      	mov	r3, r0
 8002284:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8002286:	89b8      	ldrh	r0, [r7, #12]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002292:	461a      	mov	r2, r3
 8002294:	f000 fada 	bl	800284c <dhcp_option_short>
 8002298:	4603      	mov	r3, r0
 800229a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800229c:	89b8      	ldrh	r0, [r7, #12]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80022a4:	2303      	movs	r3, #3
 80022a6:	2237      	movs	r2, #55	; 0x37
 80022a8:	f000 fa6c 	bl	8002784 <dhcp_option>
 80022ac:	4603      	mov	r3, r0
 80022ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	77bb      	strb	r3, [r7, #30]
 80022b4:	e00e      	b.n	80022d4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80022b6:	89b8      	ldrh	r0, [r7, #12]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80022be:	7fbb      	ldrb	r3, [r7, #30]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <dhcp_renew+0x12c>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f000 fa97 	bl	80027f8 <dhcp_option_byte>
 80022ca:	4603      	mov	r3, r0
 80022cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80022ce:	7fbb      	ldrb	r3, [r7, #30]
 80022d0:	3301      	adds	r3, #1
 80022d2:	77bb      	strb	r3, [r7, #30]
 80022d4:	7fbb      	ldrb	r3, [r7, #30]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d9ed      	bls.n	80022b6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80022da:	89b8      	ldrh	r0, [r7, #12]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	33f0      	adds	r3, #240	; 0xf0
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4619      	mov	r1, r3
 80022e4:	f000 ffd0 	bl	8003288 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <dhcp_renew+0x130>)
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f103 0218 	add.w	r2, r3, #24
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2343      	movs	r3, #67	; 0x43
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	f00c ff59 	bl	800f1b0 <udp_sendto_if>
 80022fe:	4603      	mov	r3, r0
 8002300:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f005 fbec 	bl	8007ae0 <pbuf_free>
 8002308:	e001      	b.n	800230e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800230a:	23ff      	movs	r3, #255	; 0xff
 800230c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	799b      	ldrb	r3, [r3, #6]
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d005      	beq.n	8002322 <dhcp_renew+0xe2>
    dhcp->tries++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	799b      	ldrb	r3, [r3, #6]
 800231a:	3301      	adds	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	799b      	ldrb	r3, [r3, #6]
 8002326:	2b09      	cmp	r3, #9
 8002328:	d80a      	bhi.n	8002340 <dhcp_renew+0x100>
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	0152      	lsls	r2, r2, #5
 8002334:	1ad2      	subs	r2, r2, r3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4413      	add	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	b29b      	uxth	r3, r3
 800233e:	e001      	b.n	8002344 <dhcp_renew+0x104>
 8002340:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002344:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8002346:	89fb      	ldrh	r3, [r7, #14]
 8002348:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <dhcp_renew+0x134>)
 800234e:	fb82 1203 	smull	r1, r2, r2, r3
 8002352:	1152      	asrs	r2, r2, #5
 8002354:	17db      	asrs	r3, r3, #31
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	b29a      	uxth	r2, r3
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800235e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000004 	.word	0x20000004
 8002370:	200000a8 	.word	0x200000a8
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8002386:	2104      	movs	r1, #4
 8002388:	69b8      	ldr	r0, [r7, #24]
 800238a:	f000 f9e1 	bl	8002750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2203      	movs	r2, #3
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fe96 	bl	80030c8 <dhcp_create_msg>
 800239c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d04c      	beq.n	800243e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80023aa:	89b8      	ldrh	r0, [r7, #12]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80023b2:	2302      	movs	r3, #2
 80023b4:	2239      	movs	r2, #57	; 0x39
 80023b6:	f000 f9e5 	bl	8002784 <dhcp_option>
 80023ba:	4603      	mov	r3, r0
 80023bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80023be:	89b8      	ldrh	r0, [r7, #12]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 fa3e 	bl	800284c <dhcp_option_short>
 80023d0:	4603      	mov	r3, r0
 80023d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80023d4:	89b8      	ldrh	r0, [r7, #12]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80023dc:	2303      	movs	r3, #3
 80023de:	2237      	movs	r2, #55	; 0x37
 80023e0:	f000 f9d0 	bl	8002784 <dhcp_option>
 80023e4:	4603      	mov	r3, r0
 80023e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80023e8:	2300      	movs	r3, #0
 80023ea:	77bb      	strb	r3, [r7, #30]
 80023ec:	e00e      	b.n	800240c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80023ee:	89b8      	ldrh	r0, [r7, #12]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80023f6:	7fbb      	ldrb	r3, [r7, #30]
 80023f8:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <dhcp_rebind+0x128>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	461a      	mov	r2, r3
 80023fe:	f000 f9fb 	bl	80027f8 <dhcp_option_byte>
 8002402:	4603      	mov	r3, r0
 8002404:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8002406:	7fbb      	ldrb	r3, [r7, #30]
 8002408:	3301      	adds	r3, #1
 800240a:	77bb      	strb	r3, [r7, #30]
 800240c:	7fbb      	ldrb	r3, [r7, #30]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d9ed      	bls.n	80023ee <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8002412:	89b8      	ldrh	r0, [r7, #12]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	33f0      	adds	r3, #240	; 0xf0
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4619      	mov	r1, r3
 800241c:	f000 ff34 	bl	8003288 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <dhcp_rebind+0x12c>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2343      	movs	r3, #67	; 0x43
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <dhcp_rebind+0x130>)
 800242c:	6979      	ldr	r1, [r7, #20]
 800242e:	f00c febf 	bl	800f1b0 <udp_sendto_if>
 8002432:	4603      	mov	r3, r0
 8002434:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f005 fb52 	bl	8007ae0 <pbuf_free>
 800243c:	e001      	b.n	8002442 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800243e:	23ff      	movs	r3, #255	; 0xff
 8002440:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	799b      	ldrb	r3, [r3, #6]
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d005      	beq.n	8002456 <dhcp_rebind+0xde>
    dhcp->tries++;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	799b      	ldrb	r3, [r3, #6]
 800244e:	3301      	adds	r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	799b      	ldrb	r3, [r3, #6]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d80a      	bhi.n	8002474 <dhcp_rebind+0xfc>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	799b      	ldrb	r3, [r3, #6]
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	0152      	lsls	r2, r2, #5
 8002468:	1ad2      	subs	r2, r2, r3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	b29b      	uxth	r3, r3
 8002472:	e001      	b.n	8002478 <dhcp_rebind+0x100>
 8002474:	f242 7310 	movw	r3, #10000	; 0x2710
 8002478:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <dhcp_rebind+0x134>)
 8002482:	fb82 1203 	smull	r1, r2, r2, r3
 8002486:	1152      	asrs	r2, r2, #5
 8002488:	17db      	asrs	r3, r3, #31
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b29a      	uxth	r2, r3
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8002492:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000004 	.word	0x20000004
 80024a4:	200000a8 	.word	0x200000a8
 80024a8:	0801c694 	.word	0x0801c694
 80024ac:	10624dd3 	.word	0x10624dd3

080024b0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80024be:	2103      	movs	r1, #3
 80024c0:	69b8      	ldr	r0, [r7, #24]
 80024c2:	f000 f945 	bl	8002750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	2203      	movs	r2, #3
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fdfa 	bl	80030c8 <dhcp_create_msg>
 80024d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d066      	beq.n	80025aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80024e2:	89b8      	ldrh	r0, [r7, #12]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80024ea:	2302      	movs	r3, #2
 80024ec:	2239      	movs	r2, #57	; 0x39
 80024ee:	f000 f949 	bl	8002784 <dhcp_option>
 80024f2:	4603      	mov	r3, r0
 80024f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80024f6:	89b8      	ldrh	r0, [r7, #12]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	33f0      	adds	r3, #240	; 0xf0
 80024fc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8002500:	4619      	mov	r1, r3
 8002502:	f000 f9a3 	bl	800284c <dhcp_option_short>
 8002506:	4603      	mov	r3, r0
 8002508:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800250a:	89b8      	ldrh	r0, [r7, #12]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8002512:	2304      	movs	r3, #4
 8002514:	2232      	movs	r2, #50	; 0x32
 8002516:	f000 f935 	bl	8002784 <dhcp_option>
 800251a:	4603      	mov	r3, r0
 800251c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800251e:	89bc      	ldrh	r4, [r7, #12]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fba3 	bl	8005c76 <lwip_htonl>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	4629      	mov	r1, r5
 8002536:	4620      	mov	r0, r4
 8002538:	f000 f9c0 	bl	80028bc <dhcp_option_long>
 800253c:	4603      	mov	r3, r0
 800253e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8002540:	89b8      	ldrh	r0, [r7, #12]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8002548:	2303      	movs	r3, #3
 800254a:	2237      	movs	r2, #55	; 0x37
 800254c:	f000 f91a 	bl	8002784 <dhcp_option>
 8002550:	4603      	mov	r3, r0
 8002552:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8002554:	2300      	movs	r3, #0
 8002556:	77bb      	strb	r3, [r7, #30]
 8002558:	e00e      	b.n	8002578 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800255a:	89b8      	ldrh	r0, [r7, #12]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8002562:	7fbb      	ldrb	r3, [r7, #30]
 8002564:	4a29      	ldr	r2, [pc, #164]	; (800260c <dhcp_reboot+0x15c>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	461a      	mov	r2, r3
 800256a:	f000 f945 	bl	80027f8 <dhcp_option_byte>
 800256e:	4603      	mov	r3, r0
 8002570:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8002572:	7fbb      	ldrb	r3, [r7, #30]
 8002574:	3301      	adds	r3, #1
 8002576:	77bb      	strb	r3, [r7, #30]
 8002578:	7fbb      	ldrb	r3, [r7, #30]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d9ed      	bls.n	800255a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800257e:	89b8      	ldrh	r0, [r7, #12]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	33f0      	adds	r3, #240	; 0xf0
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4619      	mov	r1, r3
 8002588:	f000 fe7e 	bl	8003288 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <dhcp_reboot+0x160>)
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2343      	movs	r3, #67	; 0x43
 8002596:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <dhcp_reboot+0x164>)
 8002598:	6979      	ldr	r1, [r7, #20]
 800259a:	f00c fe09 	bl	800f1b0 <udp_sendto_if>
 800259e:	4603      	mov	r3, r0
 80025a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f005 fa9c 	bl	8007ae0 <pbuf_free>
 80025a8:	e001      	b.n	80025ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80025aa:	23ff      	movs	r3, #255	; 0xff
 80025ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	799b      	ldrb	r3, [r3, #6]
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d005      	beq.n	80025c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	3301      	adds	r3, #1
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	799b      	ldrb	r3, [r3, #6]
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	d80a      	bhi.n	80025e0 <dhcp_reboot+0x130>
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	799b      	ldrb	r3, [r3, #6]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	0152      	lsls	r2, r2, #5
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	b29b      	uxth	r3, r3
 80025de:	e001      	b.n	80025e4 <dhcp_reboot+0x134>
 80025e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80025e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80025ec:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <dhcp_reboot+0x168>)
 80025ee:	fb82 1203 	smull	r1, r2, r2, r3
 80025f2:	1152      	asrs	r2, r2, #5
 80025f4:	17db      	asrs	r3, r3, #31
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80025fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bdb0      	pop	{r4, r5, r7, pc}
 800260a:	bf00      	nop
 800260c:	20000004 	.word	0x20000004
 8002610:	200000a8 	.word	0x200000a8
 8002614:	0801c694 	.word	0x0801c694
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af02      	add	r7, sp, #8
 8002622:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8084 	beq.w	800273a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	795b      	ldrb	r3, [r3, #5]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8081 	beq.w	800273e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2200      	movs	r2, #0
 8002674:	829a      	strh	r2, [r3, #20]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	8a9a      	ldrh	r2, [r3, #20]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	825a      	strh	r2, [r3, #18]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	8a5a      	ldrh	r2, [r3, #18]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	821a      	strh	r2, [r3, #16]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	8a1a      	ldrh	r2, [r3, #16]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fe28 	bl	80032e4 <dhcp_supplied_address>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03b      	beq.n	8002712 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800269a:	f107 030e 	add.w	r3, r7, #14
 800269e:	2207      	movs	r2, #7
 80026a0:	69f9      	ldr	r1, [r7, #28]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fd10 	bl	80030c8 <dhcp_create_msg>
 80026a8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d030      	beq.n	8002712 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80026b6:	89f8      	ldrh	r0, [r7, #14]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80026be:	2304      	movs	r3, #4
 80026c0:	2236      	movs	r2, #54	; 0x36
 80026c2:	f000 f85f 	bl	8002784 <dhcp_option>
 80026c6:	4603      	mov	r3, r0
 80026c8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80026ca:	89fc      	ldrh	r4, [r7, #14]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 face 	bl	8005c76 <lwip_htonl>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	4629      	mov	r1, r5
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 f8eb 	bl	80028bc <dhcp_option_long>
 80026e6:	4603      	mov	r3, r0
 80026e8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80026ea:	89f8      	ldrh	r0, [r7, #14]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	33f0      	adds	r3, #240	; 0xf0
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f000 fdc8 	bl	8003288 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <dhcp_release_and_stop+0x12c>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	f107 0210 	add.w	r2, r7, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2343      	movs	r3, #67	; 0x43
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	f00c fd52 	bl	800f1b0 <udp_sendto_if>
      pbuf_free(p_out);
 800270c:	69b8      	ldr	r0, [r7, #24]
 800270e:	f005 f9e7 	bl	8007ae0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <dhcp_release_and_stop+0x130>)
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <dhcp_release_and_stop+0x130>)
 8002716:	490d      	ldr	r1, [pc, #52]	; (800274c <dhcp_release_and_stop+0x130>)
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f004 fd5f 	bl	80071dc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800271e:	2100      	movs	r1, #0
 8002720:	69f8      	ldr	r0, [r7, #28]
 8002722:	f000 f815 	bl	8002750 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	791b      	ldrb	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800272e:	f7fe ffa5 	bl	800167c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	2200      	movs	r2, #0
 8002736:	711a      	strb	r2, [r3, #4]
 8002738:	e002      	b.n	8002740 <dhcp_release_and_stop+0x124>
    return;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <dhcp_release_and_stop+0x124>
    return;
 800273e:	bf00      	nop
  }
}
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bdb0      	pop	{r4, r5, r7, pc}
 8002746:	bf00      	nop
 8002748:	200000a8 	.word	0x200000a8
 800274c:	0801c690 	.word	0x0801c690

08002750 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	795b      	ldrb	r3, [r3, #5]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	429a      	cmp	r2, r3
 8002764:	d008      	beq.n	8002778 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	811a      	strh	r2, [r3, #8]
  }
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6039      	str	r1, [r7, #0]
 800278c:	4611      	mov	r1, r2
 800278e:	461a      	mov	r2, r3
 8002790:	4603      	mov	r3, r0
 8002792:	80fb      	strh	r3, [r7, #6]
 8002794:	460b      	mov	r3, r1
 8002796:	717b      	strb	r3, [r7, #5]
 8002798:	4613      	mov	r3, r2
 800279a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	793b      	ldrb	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	3302      	adds	r3, #2
 80027a4:	2b44      	cmp	r3, #68	; 0x44
 80027a6:	d90b      	bls.n	80027c0 <dhcp_option+0x3c>
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <dhcp_option+0x68>)
 80027aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80027ae:	4910      	ldr	r1, [pc, #64]	; (80027f0 <dhcp_option+0x6c>)
 80027b0:	4810      	ldr	r0, [pc, #64]	; (80027f4 <dhcp_option+0x70>)
 80027b2:	f7fe fdbd 	bl	8001330 <iprintf>
 80027b6:	2000      	movs	r0, #0
 80027b8:	f015 fe5e 	bl	8018478 <fflush>
 80027bc:	f015 fda2 	bl	8018304 <abort>
  options[options_out_len++] = option_type;
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	80fa      	strh	r2, [r7, #6]
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	797a      	ldrb	r2, [r7, #5]
 80027ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	80fa      	strh	r2, [r7, #6]
 80027d6:	461a      	mov	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	793a      	ldrb	r2, [r7, #4]
 80027de:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80027e0:	88fb      	ldrh	r3, [r7, #6]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	08018b68 	.word	0x08018b68
 80027f0:	08018ce4 	.word	0x08018ce4
 80027f4:	08018bb0 	.word	0x08018bb0

080027f8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	80fb      	strh	r3, [r7, #6]
 8002804:	4613      	mov	r3, r2
 8002806:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	2b43      	cmp	r3, #67	; 0x43
 800280c:	d90b      	bls.n	8002826 <dhcp_option_byte+0x2e>
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <dhcp_option_byte+0x48>)
 8002810:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8002814:	490b      	ldr	r1, [pc, #44]	; (8002844 <dhcp_option_byte+0x4c>)
 8002816:	480c      	ldr	r0, [pc, #48]	; (8002848 <dhcp_option_byte+0x50>)
 8002818:	f7fe fd8a 	bl	8001330 <iprintf>
 800281c:	2000      	movs	r0, #0
 800281e:	f015 fe2b 	bl	8018478 <fflush>
 8002822:	f015 fd6f 	bl	8018304 <abort>
  options[options_out_len++] = value;
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	80fa      	strh	r2, [r7, #6]
 800282c:	461a      	mov	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	797a      	ldrb	r2, [r7, #5]
 8002834:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8002836:	88fb      	ldrh	r3, [r7, #6]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	08018b68 	.word	0x08018b68
 8002844:	08018d28 	.word	0x08018d28
 8002848:	08018bb0 	.word	0x08018bb0

0800284c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	80fb      	strh	r3, [r7, #6]
 8002858:	4613      	mov	r3, r2
 800285a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	3302      	adds	r3, #2
 8002860:	2b44      	cmp	r3, #68	; 0x44
 8002862:	d90b      	bls.n	800287c <dhcp_option_short+0x30>
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <dhcp_option_short+0x64>)
 8002866:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800286a:	4912      	ldr	r1, [pc, #72]	; (80028b4 <dhcp_option_short+0x68>)
 800286c:	4812      	ldr	r0, [pc, #72]	; (80028b8 <dhcp_option_short+0x6c>)
 800286e:	f7fe fd5f 	bl	8001330 <iprintf>
 8002872:	2000      	movs	r0, #0
 8002874:	f015 fe00 	bl	8018478 <fflush>
 8002878:	f015 fd44 	bl	8018304 <abort>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	80fa      	strh	r2, [r7, #6]
 8002882:	461a      	mov	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	88ba      	ldrh	r2, [r7, #4]
 800288a:	0a12      	lsrs	r2, r2, #8
 800288c:	b292      	uxth	r2, r2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	80fa      	strh	r2, [r7, #6]
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4413      	add	r3, r2
 800289e:	88ba      	ldrh	r2, [r7, #4]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80028a4:	88fb      	ldrh	r3, [r7, #6]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	08018b68 	.word	0x08018b68
 80028b4:	08018d60 	.word	0x08018d60
 80028b8:	08018bb0 	.word	0x08018bb0

080028bc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b44      	cmp	r3, #68	; 0x44
 80028d0:	d90b      	bls.n	80028ea <dhcp_option_long+0x2e>
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <dhcp_option_long+0x88>)
 80028d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80028d8:	491b      	ldr	r1, [pc, #108]	; (8002948 <dhcp_option_long+0x8c>)
 80028da:	481c      	ldr	r0, [pc, #112]	; (800294c <dhcp_option_long+0x90>)
 80028dc:	f7fe fd28 	bl	8001330 <iprintf>
 80028e0:	2000      	movs	r0, #0
 80028e2:	f015 fdc9 	bl	8018478 <fflush>
 80028e6:	f015 fd0d 	bl	8018304 <abort>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80028ea:	89fb      	ldrh	r3, [r7, #14]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	81fa      	strh	r2, [r7, #14]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4413      	add	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	0e12      	lsrs	r2, r2, #24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	81fa      	strh	r2, [r7, #14]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4413      	add	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	0c12      	lsrs	r2, r2, #16
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	81fa      	strh	r2, [r7, #14]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4413      	add	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	0a12      	lsrs	r2, r2, #8
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8002926:	89fb      	ldrh	r3, [r7, #14]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	81fa      	strh	r2, [r7, #14]
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4413      	add	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8002938:	89fb      	ldrh	r3, [r7, #14]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	08018b68 	.word	0x08018b68
 8002948:	08018d9c 	.word	0x08018d9c
 800294c:	08018bb0 	.word	0x08018bb0

08002950 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b090      	sub	sp, #64	; 0x40
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8002962:	2208      	movs	r2, #8
 8002964:	2100      	movs	r1, #0
 8002966:	48bc      	ldr	r0, [pc, #752]	; (8002c58 <dhcp_parse_reply+0x308>)
 8002968:	f015 fea0 	bl	80186ac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	895b      	ldrh	r3, [r3, #10]
 8002970:	2b2b      	cmp	r3, #43	; 0x2b
 8002972:	d802      	bhi.n	800297a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8002974:	f06f 0301 	mvn.w	r3, #1
 8002978:	e2c7      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8002980:	23f0      	movs	r3, #240	; 0xf0
 8002982:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	891b      	ldrh	r3, [r3, #8]
 8002988:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800298e:	e00c      	b.n	80029aa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	895b      	ldrh	r3, [r3, #10]
 8002994:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	895b      	ldrh	r3, [r3, #10]
 800299e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <dhcp_parse_reply+0x6a>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	895b      	ldrh	r3, [r3, #10]
 80029b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d2ea      	bcs.n	8002990 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80029c0:	f06f 0301 	mvn.w	r3, #1
 80029c4:	e2a1      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
  }
  offset = options_idx;
 80029c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80029ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80029cc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80029d4:	e259      	b.n	8002e8a <dhcp_parse_reply+0x53a>
    u8_t op = options[offset];
 80029d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80029d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80029ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80029ee:	3302      	adds	r3, #2
 80029f0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80029f2:	8bfa      	ldrh	r2, [r7, #30]
 80029f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d202      	bcs.n	8002a00 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80029fa:	f06f 0301 	mvn.w	r3, #1
 80029fe:	e284      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8002a00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002a02:	3301      	adds	r3, #1
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	8952      	ldrh	r2, [r2, #10]
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	da07      	bge.n	8002a1c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8002a0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a1a:	e00b      	b.n	8002a34 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <dhcp_parse_reply+0xde>
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	e000      	b.n	8002a30 <dhcp_parse_reply+0xe0>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8002a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b3b      	cmp	r3, #59	; 0x3b
 8002a40:	f200 813e 	bhi.w	8002cc0 <dhcp_parse_reply+0x370>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <dhcp_parse_reply+0xfc>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002b3d 	.word	0x08002b3d
 8002a50:	08002b4d 	.word	0x08002b4d
 8002a54:	08002cc1 	.word	0x08002cc1
 8002a58:	08002b73 	.word	0x08002b73
 8002a5c:	08002cc1 	.word	0x08002cc1
 8002a60:	08002cc1 	.word	0x08002cc1
 8002a64:	08002cc1 	.word	0x08002cc1
 8002a68:	08002cc1 	.word	0x08002cc1
 8002a6c:	08002cc1 	.word	0x08002cc1
 8002a70:	08002cc1 	.word	0x08002cc1
 8002a74:	08002cc1 	.word	0x08002cc1
 8002a78:	08002cc1 	.word	0x08002cc1
 8002a7c:	08002cc1 	.word	0x08002cc1
 8002a80:	08002cc1 	.word	0x08002cc1
 8002a84:	08002cc1 	.word	0x08002cc1
 8002a88:	08002cc1 	.word	0x08002cc1
 8002a8c:	08002cc1 	.word	0x08002cc1
 8002a90:	08002cc1 	.word	0x08002cc1
 8002a94:	08002cc1 	.word	0x08002cc1
 8002a98:	08002cc1 	.word	0x08002cc1
 8002a9c:	08002cc1 	.word	0x08002cc1
 8002aa0:	08002cc1 	.word	0x08002cc1
 8002aa4:	08002cc1 	.word	0x08002cc1
 8002aa8:	08002cc1 	.word	0x08002cc1
 8002aac:	08002cc1 	.word	0x08002cc1
 8002ab0:	08002cc1 	.word	0x08002cc1
 8002ab4:	08002cc1 	.word	0x08002cc1
 8002ab8:	08002cc1 	.word	0x08002cc1
 8002abc:	08002cc1 	.word	0x08002cc1
 8002ac0:	08002cc1 	.word	0x08002cc1
 8002ac4:	08002cc1 	.word	0x08002cc1
 8002ac8:	08002cc1 	.word	0x08002cc1
 8002acc:	08002cc1 	.word	0x08002cc1
 8002ad0:	08002cc1 	.word	0x08002cc1
 8002ad4:	08002cc1 	.word	0x08002cc1
 8002ad8:	08002cc1 	.word	0x08002cc1
 8002adc:	08002cc1 	.word	0x08002cc1
 8002ae0:	08002cc1 	.word	0x08002cc1
 8002ae4:	08002cc1 	.word	0x08002cc1
 8002ae8:	08002cc1 	.word	0x08002cc1
 8002aec:	08002cc1 	.word	0x08002cc1
 8002af0:	08002cc1 	.word	0x08002cc1
 8002af4:	08002cc1 	.word	0x08002cc1
 8002af8:	08002cc1 	.word	0x08002cc1
 8002afc:	08002cc1 	.word	0x08002cc1
 8002b00:	08002cc1 	.word	0x08002cc1
 8002b04:	08002cc1 	.word	0x08002cc1
 8002b08:	08002cc1 	.word	0x08002cc1
 8002b0c:	08002cc1 	.word	0x08002cc1
 8002b10:	08002cc1 	.word	0x08002cc1
 8002b14:	08002cc1 	.word	0x08002cc1
 8002b18:	08002ba3 	.word	0x08002ba3
 8002b1c:	08002bc9 	.word	0x08002bc9
 8002b20:	08002c0d 	.word	0x08002c0d
 8002b24:	08002c33 	.word	0x08002c33
 8002b28:	08002cc1 	.word	0x08002cc1
 8002b2c:	08002cc1 	.word	0x08002cc1
 8002b30:	08002cc1 	.word	0x08002cc1
 8002b34:	08002c75 	.word	0x08002c75
 8002b38:	08002c9b 	.word	0x08002c9b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8002b4a:	e0bd      	b.n	8002cc8 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8002b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d00b      	beq.n	8002b6c <dhcp_parse_reply+0x21c>
 8002b54:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002b56:	f240 622e 	movw	r2, #1582	; 0x62e
 8002b5a:	4941      	ldr	r1, [pc, #260]	; (8002c60 <dhcp_parse_reply+0x310>)
 8002b5c:	4841      	ldr	r0, [pc, #260]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002b5e:	f7fe fbe7 	bl	8001330 <iprintf>
 8002b62:	2000      	movs	r0, #0
 8002b64:	f015 fc88 	bl	8018478 <fflush>
 8002b68:	f015 fbcc 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8002b6c:	2306      	movs	r3, #6
 8002b6e:	623b      	str	r3, [r7, #32]
        break;
 8002b70:	e0aa      	b.n	8002cc8 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8002b72:	2304      	movs	r3, #4
 8002b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8002b78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d20b      	bcs.n	8002b9c <dhcp_parse_reply+0x24c>
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002b86:	f240 6233 	movw	r2, #1587	; 0x633
 8002b8a:	4937      	ldr	r1, [pc, #220]	; (8002c68 <dhcp_parse_reply+0x318>)
 8002b8c:	4835      	ldr	r0, [pc, #212]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002b8e:	f7fe fbcf 	bl	8001330 <iprintf>
 8002b92:	2000      	movs	r0, #0
 8002b94:	f015 fc70 	bl	8018478 <fflush>
 8002b98:	f015 fbb4 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	623b      	str	r3, [r7, #32]
        break;
 8002ba0:	e092      	b.n	8002cc8 <dhcp_parse_reply+0x378>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8002ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00b      	beq.n	8002bc2 <dhcp_parse_reply+0x272>
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002bac:	f240 6241 	movw	r2, #1601	; 0x641
 8002bb0:	492b      	ldr	r1, [pc, #172]	; (8002c60 <dhcp_parse_reply+0x310>)
 8002bb2:	482c      	ldr	r0, [pc, #176]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002bb4:	f7fe fbbc 	bl	8001330 <iprintf>
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f015 fc5d 	bl	8018478 <fflush>
 8002bbe:	f015 fba1 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	623b      	str	r3, [r7, #32]
        break;
 8002bc6:	e07f      	b.n	8002cc8 <dhcp_parse_reply+0x378>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8002bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d00b      	beq.n	8002be8 <dhcp_parse_reply+0x298>
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002bd2:	f240 624f 	movw	r2, #1615	; 0x64f
 8002bd6:	4925      	ldr	r1, [pc, #148]	; (8002c6c <dhcp_parse_reply+0x31c>)
 8002bd8:	4822      	ldr	r0, [pc, #136]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002bda:	f7fe fba9 	bl	8001330 <iprintf>
 8002bde:	2000      	movs	r0, #0
 8002be0:	f015 fc4a 	bl	8018478 <fflush>
 8002be4:	f015 fb8e 	bl	8018304 <abort>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8002be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bea:	2bf0      	cmp	r3, #240	; 0xf0
 8002bec:	d00b      	beq.n	8002c06 <dhcp_parse_reply+0x2b6>
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002bf0:	f240 6251 	movw	r2, #1617	; 0x651
 8002bf4:	491e      	ldr	r1, [pc, #120]	; (8002c70 <dhcp_parse_reply+0x320>)
 8002bf6:	481b      	ldr	r0, [pc, #108]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002bf8:	f7fe fb9a 	bl	8001330 <iprintf>
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f015 fc3b 	bl	8018478 <fflush>
 8002c02:	f015 fb7f 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
        break;
 8002c0a:	e05d      	b.n	8002cc8 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d00b      	beq.n	8002c2c <dhcp_parse_reply+0x2dc>
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002c16:	f240 6255 	movw	r2, #1621	; 0x655
 8002c1a:	4914      	ldr	r1, [pc, #80]	; (8002c6c <dhcp_parse_reply+0x31c>)
 8002c1c:	4811      	ldr	r0, [pc, #68]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002c1e:	f7fe fb87 	bl	8001330 <iprintf>
 8002c22:	2000      	movs	r0, #0
 8002c24:	f015 fc28 	bl	8018478 <fflush>
 8002c28:	f015 fb6c 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	623b      	str	r3, [r7, #32]
        break;
 8002c30:	e04a      	b.n	8002cc8 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8002c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00b      	beq.n	8002c52 <dhcp_parse_reply+0x302>
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <dhcp_parse_reply+0x30c>)
 8002c3c:	f240 6259 	movw	r2, #1625	; 0x659
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <dhcp_parse_reply+0x310>)
 8002c42:	4808      	ldr	r0, [pc, #32]	; (8002c64 <dhcp_parse_reply+0x314>)
 8002c44:	f7fe fb74 	bl	8001330 <iprintf>
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f015 fc15 	bl	8018478 <fflush>
 8002c4e:	f015 fb59 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8002c52:	2302      	movs	r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
        break;
 8002c56:	e037      	b.n	8002cc8 <dhcp_parse_reply+0x378>
 8002c58:	20013118 	.word	0x20013118
 8002c5c:	08018b68 	.word	0x08018b68
 8002c60:	08018dd8 	.word	0x08018dd8
 8002c64:	08018bb0 	.word	0x08018bb0
 8002c68:	08018de4 	.word	0x08018de4
 8002c6c:	08018df8 	.word	0x08018df8
 8002c70:	08018e04 	.word	0x08018e04
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8002c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00b      	beq.n	8002c94 <dhcp_parse_reply+0x344>
 8002c7c:	4ba5      	ldr	r3, [pc, #660]	; (8002f14 <dhcp_parse_reply+0x5c4>)
 8002c7e:	f240 625d 	movw	r2, #1629	; 0x65d
 8002c82:	49a5      	ldr	r1, [pc, #660]	; (8002f18 <dhcp_parse_reply+0x5c8>)
 8002c84:	48a5      	ldr	r0, [pc, #660]	; (8002f1c <dhcp_parse_reply+0x5cc>)
 8002c86:	f7fe fb53 	bl	8001330 <iprintf>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f015 fbf4 	bl	8018478 <fflush>
 8002c90:	f015 fb38 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_T1;
 8002c94:	2304      	movs	r3, #4
 8002c96:	623b      	str	r3, [r7, #32]
        break;
 8002c98:	e016      	b.n	8002cc8 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8002c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d00b      	beq.n	8002cba <dhcp_parse_reply+0x36a>
 8002ca2:	4b9c      	ldr	r3, [pc, #624]	; (8002f14 <dhcp_parse_reply+0x5c4>)
 8002ca4:	f240 6261 	movw	r2, #1633	; 0x661
 8002ca8:	499b      	ldr	r1, [pc, #620]	; (8002f18 <dhcp_parse_reply+0x5c8>)
 8002caa:	489c      	ldr	r0, [pc, #624]	; (8002f1c <dhcp_parse_reply+0x5cc>)
 8002cac:	f7fe fb40 	bl	8001330 <iprintf>
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f015 fbe1 	bl	8018478 <fflush>
 8002cb6:	f015 fb25 	bl	8018304 <abort>
        decode_idx = DHCP_OPTION_IDX_T2;
 8002cba:	2305      	movs	r3, #5
 8002cbc:	623b      	str	r3, [r7, #32]
        break;
 8002cbe:	e003      	b.n	8002cc8 <dhcp_parse_reply+0x378>
      default:
        decode_len = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8002cc6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <dhcp_parse_reply+0x386>
      offset++;
 8002cce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002cd4:	e0ad      	b.n	8002e32 <dhcp_parse_reply+0x4e2>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8002cd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cdc:	4413      	add	r3, r2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	db02      	blt.n	8002cec <dhcp_parse_reply+0x39c>
        /* overflow */
        return ERR_BUF;
 8002ce6:	f06f 0301 	mvn.w	r3, #1
 8002cea:	e10e      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
      }
      offset = (u16_t)(offset + len + 2);
 8002cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8002cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8096 	beq.w	8002e32 <dhcp_parse_reply+0x4e2>
        u32_t value = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db02      	blt.n	8002d16 <dhcp_parse_reply+0x3c6>
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b07      	cmp	r3, #7
 8002d14:	dd0b      	ble.n	8002d2e <dhcp_parse_reply+0x3de>
 8002d16:	4b7f      	ldr	r3, [pc, #508]	; (8002f14 <dhcp_parse_reply+0x5c4>)
 8002d18:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8002d1c:	4980      	ldr	r1, [pc, #512]	; (8002f20 <dhcp_parse_reply+0x5d0>)
 8002d1e:	487f      	ldr	r0, [pc, #508]	; (8002f1c <dhcp_parse_reply+0x5cc>)
 8002d20:	f7fe fb06 	bl	8001330 <iprintf>
 8002d24:	2000      	movs	r0, #0
 8002d26:	f015 fba7 	bl	8018478 <fflush>
 8002d2a:	f015 faeb 	bl	8018304 <abort>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8002d2e:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <dhcp_parse_reply+0x5d4>)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d17b      	bne.n	8002e32 <dhcp_parse_reply+0x4e2>
          copy_len = LWIP_MIN(decode_len, 4);
 8002d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d803      	bhi.n	8002d4a <dhcp_parse_reply+0x3fa>
 8002d42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	e000      	b.n	8002d4c <dhcp_parse_reply+0x3fc>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8002d4e:	8bfb      	ldrh	r3, [r7, #30]
 8002d50:	8aba      	ldrh	r2, [r7, #20]
 8002d52:	f107 0108 	add.w	r1, r7, #8
 8002d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d58:	f005 f902 	bl	8007f60 <pbuf_copy_partial>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	8abb      	ldrh	r3, [r7, #20]
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d002      	beq.n	8002d6c <dhcp_parse_reply+0x41c>
            return ERR_BUF;
 8002d66:	f06f 0301 	mvn.w	r3, #1
 8002d6a:	e0ce      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
          }
          if (decode_len > 4) {
 8002d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d935      	bls.n	8002de0 <dhcp_parse_reply+0x490>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8002d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <dhcp_parse_reply+0x44a>
 8002d82:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <dhcp_parse_reply+0x5c4>)
 8002d84:	f240 6281 	movw	r2, #1665	; 0x681
 8002d88:	4967      	ldr	r1, [pc, #412]	; (8002f28 <dhcp_parse_reply+0x5d8>)
 8002d8a:	4864      	ldr	r0, [pc, #400]	; (8002f1c <dhcp_parse_reply+0x5cc>)
 8002d8c:	f7fe fad0 	bl	8001330 <iprintf>
 8002d90:	2000      	movs	r0, #0
 8002d92:	f015 fb71 	bl	8018478 <fflush>
 8002d96:	f015 fab5 	bl	8018304 <abort>
            dhcp_got_option(dhcp, decode_idx);
 8002d9a:	4a62      	ldr	r2, [pc, #392]	; (8002f24 <dhcp_parse_reply+0x5d4>)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	4413      	add	r3, r2
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 ff65 	bl	8005c76 <lwip_htonl>
 8002dac:	4601      	mov	r1, r0
 8002dae:	4a5f      	ldr	r2, [pc, #380]	; (8002f2c <dhcp_parse_reply+0x5dc>)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8002db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8002dc0:	8bfb      	ldrh	r3, [r7, #30]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8002dc6:	8a7a      	ldrh	r2, [r7, #18]
 8002dc8:	8bfb      	ldrh	r3, [r7, #30]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d202      	bcs.n	8002dd4 <dhcp_parse_reply+0x484>
              /* overflow */
              return ERR_BUF;
 8002dce:	f06f 0301 	mvn.w	r3, #1
 8002dd2:	e09a      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
            }
            val_offset = next_val_offset;
 8002dd4:	8a7b      	ldrh	r3, [r7, #18]
 8002dd6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8002dde:	e794      	b.n	8002d0a <dhcp_parse_reply+0x3ba>
          } else if (decode_len == 4) {
 8002de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d106      	bne.n	8002df6 <dhcp_parse_reply+0x4a6>
            value = lwip_ntohl(value);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 ff43 	bl	8005c76 <lwip_htonl>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	e013      	b.n	8002e1e <dhcp_parse_reply+0x4ce>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8002df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d00b      	beq.n	8002e16 <dhcp_parse_reply+0x4c6>
 8002dfe:	4b45      	ldr	r3, [pc, #276]	; (8002f14 <dhcp_parse_reply+0x5c4>)
 8002e00:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8002e04:	494a      	ldr	r1, [pc, #296]	; (8002f30 <dhcp_parse_reply+0x5e0>)
 8002e06:	4845      	ldr	r0, [pc, #276]	; (8002f1c <dhcp_parse_reply+0x5cc>)
 8002e08:	f7fe fa92 	bl	8001330 <iprintf>
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f015 fb33 	bl	8018478 <fflush>
 8002e12:	f015 fa77 	bl	8018304 <abort>
            value = ((u8_t *)&value)[0];
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8002e1e:	4a41      	ldr	r2, [pc, #260]	; (8002f24 <dhcp_parse_reply+0x5d4>)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	4413      	add	r3, r2
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4940      	ldr	r1, [pc, #256]	; (8002f2c <dhcp_parse_reply+0x5dc>)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	895b      	ldrh	r3, [r3, #10]
 8002e36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d326      	bcc.n	8002e8a <dhcp_parse_reply+0x53a>
      offset = (u16_t)(offset - q->len);
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	895b      	ldrh	r3, [r3, #10]
 8002e40:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	895b      	ldrh	r3, [r3, #10]
 8002e4a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8002e50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002e52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d215      	bcs.n	8002e84 <dhcp_parse_reply+0x534>
        q = q->next;
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <dhcp_parse_reply+0x52c>
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <dhcp_parse_reply+0x5c4>)
 8002e66:	f240 629d 	movw	r2, #1693	; 0x69d
 8002e6a:	4932      	ldr	r1, [pc, #200]	; (8002f34 <dhcp_parse_reply+0x5e4>)
 8002e6c:	482b      	ldr	r0, [pc, #172]	; (8002f1c <dhcp_parse_reply+0x5cc>)
 8002e6e:	f7fe fa5f 	bl	8001330 <iprintf>
 8002e72:	2000      	movs	r0, #0
 8002e74:	f015 fb00 	bl	8018478 <fflush>
 8002e78:	f015 fa44 	bl	8018304 <abort>
        options = (u8_t *)q->payload;
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e82:	e002      	b.n	8002e8a <dhcp_parse_reply+0x53a>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8002e84:	f06f 0301 	mvn.w	r3, #1
 8002e88:	e03f      	b.n	8002f0a <dhcp_parse_reply+0x5ba>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <dhcp_parse_reply+0x556>
 8002e90:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002e92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d206      	bcs.n	8002ea6 <dhcp_parse_reply+0x556>
 8002e98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2bff      	cmp	r3, #255	; 0xff
 8002ea2:	f47f ad98 	bne.w	80029d6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <dhcp_parse_reply+0x5d4>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <dhcp_parse_reply+0x590>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <dhcp_parse_reply+0x5dc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <dhcp_parse_reply+0x5d4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <dhcp_parse_reply+0x576>
      parse_file_as_options = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec4:	e00c      	b.n	8002ee0 <dhcp_parse_reply+0x590>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d102      	bne.n	8002ed2 <dhcp_parse_reply+0x582>
      parse_sname_as_options = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	e006      	b.n	8002ee0 <dhcp_parse_reply+0x590>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d103      	bne.n	8002ee0 <dhcp_parse_reply+0x590>
      parse_sname_as_options = 1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <dhcp_parse_reply+0x5a4>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8002eea:	236c      	movs	r3, #108	; 0x6c
 8002eec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8002eee:	23ec      	movs	r3, #236	; 0xec
 8002ef0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8002ef2:	e54a      	b.n	800298a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <dhcp_parse_reply+0x5b8>
    parse_sname_as_options = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8002efe:	232c      	movs	r3, #44	; 0x2c
 8002f00:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8002f02:	236c      	movs	r3, #108	; 0x6c
 8002f04:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8002f06:	e540      	b.n	800298a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3740      	adds	r7, #64	; 0x40
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	08018b68 	.word	0x08018b68
 8002f18:	08018dd8 	.word	0x08018dd8
 8002f1c:	08018bb0 	.word	0x08018bb0
 8002f20:	08018e1c 	.word	0x08018e1c
 8002f24:	20013118 	.word	0x20013118
 8002f28:	08018e30 	.word	0x08018e30
 8002f2c:	20013120 	.word	0x20013120
 8002f30:	08018e48 	.word	0x08018e48
 8002f34:	08018e5c 	.word	0x08018e5c

08002f38 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8002f46:	4b5d      	ldr	r3, [pc, #372]	; (80030bc <dhcp_recv+0x184>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a7 	beq.w	80030ae <dhcp_recv+0x176>
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a2 	beq.w	80030ae <dhcp_recv+0x176>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	895b      	ldrh	r3, [r3, #10]
 8002f6e:	2b2b      	cmp	r3, #43	; 0x2b
 8002f70:	f240 8092 	bls.w	8003098 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	f040 808f 	bne.w	800309c <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f84:	e011      	b.n	8002faa <dhcp_recv+0x72>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8002f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f96:	69b9      	ldr	r1, [r7, #24]
 8002f98:	440b      	add	r3, r1
 8002f9a:	7f1b      	ldrb	r3, [r3, #28]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d17f      	bne.n	80030a0 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d203      	bcs.n	8002fc0 <dhcp_recv+0x88>
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d9e2      	bls.n	8002f86 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fe56 	bl	8005c76 <lwip_htonl>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d167      	bne.n	80030a4 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8002fd4:	69f9      	ldr	r1, [r7, #28]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fcba 	bl	8002950 <dhcp_parse_reply>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d162      	bne.n	80030a8 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <dhcp_recv+0x188>)
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d060      	beq.n	80030ac <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8002ff0:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <dhcp_recv+0x18c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d12a      	bne.n	8003052 <dhcp_recv+0x11a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	795b      	ldrb	r3, [r3, #5]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d112      	bne.n	800302a <dhcp_recv+0xf2>
      dhcp_handle_ack(netif, msg_in);
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	6a38      	ldr	r0, [r7, #32]
 8003008:	f7fe fe0c 	bl	8001c24 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <dhcp_recv+0xea>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800301a:	6a38      	ldr	r0, [r7, #32]
 800301c:	f7fe fb78 	bl	8001710 <dhcp_check>
 8003020:	e045      	b.n	80030ae <dhcp_recv+0x176>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8003022:	6a38      	ldr	r0, [r7, #32]
 8003024:	f7ff f82a 	bl	800207c <dhcp_bind>
 8003028:	e041      	b.n	80030ae <dhcp_recv+0x176>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	795b      	ldrb	r3, [r3, #5]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d007      	beq.n	8003042 <dhcp_recv+0x10a>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	795b      	ldrb	r3, [r3, #5]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d003      	beq.n	8003042 <dhcp_recv+0x10a>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800303e:	2b05      	cmp	r3, #5
 8003040:	d135      	bne.n	80030ae <dhcp_recv+0x176>
      dhcp_handle_ack(netif, msg_in);
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	6a38      	ldr	r0, [r7, #32]
 8003046:	f7fe fded 	bl	8001c24 <dhcp_handle_ack>
      dhcp_bind(netif);
 800304a:	6a38      	ldr	r0, [r7, #32]
 800304c:	f7ff f816 	bl	800207c <dhcp_bind>
 8003050:	e02d      	b.n	80030ae <dhcp_recv+0x176>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b06      	cmp	r3, #6
 8003056:	d113      	bne.n	8003080 <dhcp_recv+0x148>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800305c:	2b03      	cmp	r3, #3
 800305e:	d00b      	beq.n	8003078 <dhcp_recv+0x140>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	795b      	ldrb	r3, [r3, #5]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d007      	beq.n	8003078 <dhcp_recv+0x140>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800306c:	2b04      	cmp	r3, #4
 800306e:	d003      	beq.n	8003078 <dhcp_recv+0x140>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	795b      	ldrb	r3, [r3, #5]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d103      	bne.n	8003080 <dhcp_recv+0x148>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8003078:	6a38      	ldr	r0, [r7, #32]
 800307a:	f7fe fb2f 	bl	80016dc <dhcp_handle_nak>
 800307e:	e016      	b.n	80030ae <dhcp_recv+0x176>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d113      	bne.n	80030ae <dhcp_recv+0x176>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	795b      	ldrb	r3, [r3, #5]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d10f      	bne.n	80030ae <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800308e:	6979      	ldr	r1, [r7, #20]
 8003090:	6a38      	ldr	r0, [r7, #32]
 8003092:	f7fe fb71 	bl	8001778 <dhcp_handle_offer>
 8003096:	e00a      	b.n	80030ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 8003098:	bf00      	nop
 800309a:	e008      	b.n	80030ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 800309c:	bf00      	nop
 800309e:	e006      	b.n	80030ae <dhcp_recv+0x176>
      goto free_pbuf_and_return;
 80030a0:	bf00      	nop
 80030a2:	e004      	b.n	80030ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 80030a4:	bf00      	nop
 80030a6:	e002      	b.n	80030ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 80030a8:	bf00      	nop
 80030aa:	e000      	b.n	80030ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 80030ac:	bf00      	nop
  }

free_pbuf_and_return:
  pbuf_free(p);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f004 fd16 	bl	8007ae0 <pbuf_free>
}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20013770 	.word	0x20013770
 80030c0:	20013118 	.word	0x20013118
 80030c4:	20013120 	.word	0x20013120

080030c8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <dhcp_create_msg+0x2e>
 80030de:	4b64      	ldr	r3, [pc, #400]	; (8003270 <dhcp_create_msg+0x1a8>)
 80030e0:	f240 7269 	movw	r2, #1897	; 0x769
 80030e4:	4963      	ldr	r1, [pc, #396]	; (8003274 <dhcp_create_msg+0x1ac>)
 80030e6:	4864      	ldr	r0, [pc, #400]	; (8003278 <dhcp_create_msg+0x1b0>)
 80030e8:	f7fe f922 	bl	8001330 <iprintf>
 80030ec:	2000      	movs	r0, #0
 80030ee:	f015 f9c3 	bl	8018478 <fflush>
 80030f2:	f015 f907 	bl	8018304 <abort>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <dhcp_create_msg+0x4c>
 80030fc:	4b5c      	ldr	r3, [pc, #368]	; (8003270 <dhcp_create_msg+0x1a8>)
 80030fe:	f240 726a 	movw	r2, #1898	; 0x76a
 8003102:	495e      	ldr	r1, [pc, #376]	; (800327c <dhcp_create_msg+0x1b4>)
 8003104:	485c      	ldr	r0, [pc, #368]	; (8003278 <dhcp_create_msg+0x1b0>)
 8003106:	f7fe f913 	bl	8001330 <iprintf>
 800310a:	2000      	movs	r0, #0
 800310c:	f015 f9b4 	bl	8018478 <fflush>
 8003110:	f015 f8f8 	bl	8018304 <abort>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8003114:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003118:	f44f 719a 	mov.w	r1, #308	; 0x134
 800311c:	2036      	movs	r0, #54	; 0x36
 800311e:	f004 f9e7 	bl	80074f0 <pbuf_alloc>
 8003122:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <dhcp_create_msg+0x66>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800312a:	2300      	movs	r3, #0
 800312c:	e09c      	b.n	8003268 <dhcp_create_msg+0x1a0>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	895b      	ldrh	r3, [r3, #10]
 8003132:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003136:	d20b      	bcs.n	8003150 <dhcp_create_msg+0x88>
 8003138:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <dhcp_create_msg+0x1a8>)
 800313a:	f240 7272 	movw	r2, #1906	; 0x772
 800313e:	4950      	ldr	r1, [pc, #320]	; (8003280 <dhcp_create_msg+0x1b8>)
 8003140:	484d      	ldr	r0, [pc, #308]	; (8003278 <dhcp_create_msg+0x1b0>)
 8003142:	f7fe f8f5 	bl	8001330 <iprintf>
 8003146:	2000      	movs	r0, #0
 8003148:	f015 f996 	bl	8018478 <fflush>
 800314c:	f015 f8da 	bl	8018304 <abort>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d103      	bne.n	800315e <dhcp_create_msg+0x96>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	795b      	ldrb	r3, [r3, #5]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d10c      	bne.n	8003178 <dhcp_create_msg+0xb0>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	799b      	ldrb	r3, [r3, #6]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <dhcp_create_msg+0xa8>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <dhcp_create_msg+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a45      	ldr	r2, [pc, #276]	; (8003284 <dhcp_create_msg+0x1bc>)
 800316e:	6013      	str	r3, [r2, #0]
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8003170:	4b44      	ldr	r3, [pc, #272]	; (8003284 <dhcp_create_msg+0x1bc>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800317e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003182:	2100      	movs	r1, #0
 8003184:	6978      	ldr	r0, [r7, #20]
 8003186:	f015 fa91 	bl	80186ac <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2201      	movs	r2, #1
 8003194:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fd66 	bl	8005c76 <lwip_htonl>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d010      	beq.n	80031d8 <dhcp_create_msg+0x110>
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d00d      	beq.n	80031d8 <dhcp_create_msg+0x110>
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2b07      	cmp	r3, #7
 80031c0:	d00a      	beq.n	80031d8 <dhcp_create_msg+0x110>
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d10c      	bne.n	80031e2 <dhcp_create_msg+0x11a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d003      	beq.n	80031d8 <dhcp_create_msg+0x110>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	795b      	ldrb	r3, [r3, #5]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d104      	bne.n	80031e2 <dhcp_create_msg+0x11a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3304      	adds	r3, #4
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80031e2:	2300      	movs	r3, #0
 80031e4:	83fb      	strh	r3, [r7, #30]
 80031e6:	e00c      	b.n	8003202 <dhcp_create_msg+0x13a>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80031e8:	8bfb      	ldrh	r3, [r7, #30]
 80031ea:	8bfa      	ldrh	r2, [r7, #30]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	440a      	add	r2, r1
 80031f0:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4413      	add	r3, r2
 80031f8:	460a      	mov	r2, r1
 80031fa:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80031fc:	8bfb      	ldrh	r3, [r7, #30]
 80031fe:	3301      	adds	r3, #1
 8003200:	83fb      	strh	r3, [r7, #30]
 8003202:	8bfb      	ldrh	r3, [r7, #30]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d9ef      	bls.n	80031e8 <dhcp_create_msg+0x120>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2200      	movs	r2, #0
 800320c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8003210:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003214:	2200      	movs	r2, #0
 8003216:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800321a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800321e:	2200      	movs	r2, #0
 8003220:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8003224:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8003228:	2200      	movs	r2, #0
 800322a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800322e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8003238:	2301      	movs	r3, #1
 800323a:	2235      	movs	r2, #53	; 0x35
 800323c:	2000      	movs	r0, #0
 800323e:	f7ff faa1 	bl	8002784 <dhcp_option>
 8003242:	4603      	mov	r3, r0
 8003244:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800324c:	79fa      	ldrb	r2, [r7, #7]
 800324e:	8a7b      	ldrh	r3, [r7, #18]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fad1 	bl	80027f8 <dhcp_option_byte>
 8003256:	4603      	mov	r3, r0
 8003258:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <dhcp_create_msg+0x19e>
    *options_out_len = options_out_len_loc;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	8a7a      	ldrh	r2, [r7, #18]
 8003264:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8003266:	69bb      	ldr	r3, [r7, #24]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	08018b68 	.word	0x08018b68
 8003274:	08018e70 	.word	0x08018e70
 8003278:	08018bb0 	.word	0x08018bb0
 800327c:	08018e90 	.word	0x08018e90
 8003280:	08018eb0 	.word	0x08018eb0
 8003284:	20000008 	.word	0x20000008

08003288 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	81fa      	strh	r2, [r7, #14]
 800329c:	461a      	mov	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4413      	add	r3, r2
 80032a2:	22ff      	movs	r2, #255	; 0xff
 80032a4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80032a6:	e007      	b.n	80032b8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80032a8:	89fb      	ldrh	r3, [r7, #14]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	81fa      	strh	r2, [r7, #14]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4413      	add	r3, r2
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	2b43      	cmp	r3, #67	; 0x43
 80032bc:	d904      	bls.n	80032c8 <dhcp_option_trailer+0x40>
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <dhcp_option_trailer+0x46>
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	2b43      	cmp	r3, #67	; 0x43
 80032cc:	d9ec      	bls.n	80032a8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80032ce:	89fb      	ldrh	r3, [r7, #14]
 80032d0:	33f0      	adds	r3, #240	; 0xf0
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f004 fa2c 	bl	8007734 <pbuf_realloc>
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d017      	beq.n	8003322 <dhcp_supplied_address+0x3e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d013      	beq.n	8003322 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	795b      	ldrb	r3, [r3, #5]
 8003304:	2b0a      	cmp	r3, #10
 8003306:	d007      	beq.n	8003318 <dhcp_supplied_address+0x34>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	795b      	ldrb	r3, [r3, #5]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d003      	beq.n	8003318 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8003314:	2b04      	cmp	r3, #4
 8003316:	d101      	bne.n	800331c <dhcp_supplied_address+0x38>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <dhcp_supplied_address+0x3a>
 800331c:	2300      	movs	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	e000      	b.n	8003324 <dhcp_supplied_address+0x40>
  }
  return 0;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8003338:	4915      	ldr	r1, [pc, #84]	; (8003390 <etharp_free_entry+0x60>)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800334c:	4910      	ldr	r1, [pc, #64]	; (8003390 <etharp_free_entry+0x60>)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fbbf 	bl	8007ae0 <pbuf_free>
    arp_table[i].q = NULL;
 8003362:	490b      	ldr	r1, [pc, #44]	; (8003390 <etharp_free_entry+0x60>)
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8003374:	4906      	ldr	r1, [pc, #24]	; (8003390 <etharp_free_entry+0x60>)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	3314      	adds	r3, #20
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200000b0 	.word	0x200000b0

08003394 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	e096      	b.n	80034ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80033a0:	494f      	ldr	r1, [pc, #316]	; (80034e0 <etharp_tmr+0x14c>)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	3314      	adds	r3, #20
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8086 	beq.w	80034c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80033bc:	4948      	ldr	r1, [pc, #288]	; (80034e0 <etharp_tmr+0x14c>)
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3312      	adds	r3, #18
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b298      	uxth	r0, r3
 80033d2:	4943      	ldr	r1, [pc, #268]	; (80034e0 <etharp_tmr+0x14c>)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	3312      	adds	r3, #18
 80033e2:	4602      	mov	r2, r0
 80033e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80033e6:	493e      	ldr	r1, [pc, #248]	; (80034e0 <etharp_tmr+0x14c>)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	3312      	adds	r3, #18
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80033fc:	d215      	bcs.n	800342a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80033fe:	4938      	ldr	r1, [pc, #224]	; (80034e0 <etharp_tmr+0x14c>)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	3314      	adds	r3, #20
 800340e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10e      	bne.n	8003432 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8003414:	4932      	ldr	r1, [pc, #200]	; (80034e0 <etharp_tmr+0x14c>)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	3312      	adds	r3, #18
 8003424:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8003426:	2b04      	cmp	r3, #4
 8003428:	d903      	bls.n	8003432 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff80 	bl	8003330 <etharp_free_entry>
 8003430:	e04a      	b.n	80034c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8003432:	492b      	ldr	r1, [pc, #172]	; (80034e0 <etharp_tmr+0x14c>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	3314      	adds	r3, #20
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d10a      	bne.n	800345e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003448:	4925      	ldr	r1, [pc, #148]	; (80034e0 <etharp_tmr+0x14c>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	3314      	adds	r3, #20
 8003458:	2204      	movs	r2, #4
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e034      	b.n	80034c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800345e:	4920      	ldr	r1, [pc, #128]	; (80034e0 <etharp_tmr+0x14c>)
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	3314      	adds	r3, #20
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d10a      	bne.n	800348a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8003474:	491a      	ldr	r1, [pc, #104]	; (80034e0 <etharp_tmr+0x14c>)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	3314      	adds	r3, #20
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e01e      	b.n	80034c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800348a:	4915      	ldr	r1, [pc, #84]	; (80034e0 <etharp_tmr+0x14c>)
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	3314      	adds	r3, #20
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d113      	bne.n	80034c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80034a0:	490f      	ldr	r1, [pc, #60]	; (80034e0 <etharp_tmr+0x14c>)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	3308      	adds	r3, #8
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <etharp_tmr+0x14c>)
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	f000 fee0 	bl	8004288 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3301      	adds	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	f77f af65 	ble.w	80033a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200000b0 	.word	0x200000b0

080034e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	460b      	mov	r3, r1
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80034f2:	230a      	movs	r3, #10
 80034f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80034f6:	230a      	movs	r3, #10
 80034f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80034fa:	230a      	movs	r3, #10
 80034fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8003502:	230a      	movs	r3, #10
 8003504:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	83bb      	strh	r3, [r7, #28]
 800350a:	2300      	movs	r3, #0
 800350c:	837b      	strh	r3, [r7, #26]
 800350e:	2300      	movs	r3, #0
 8003510:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003512:	2300      	movs	r3, #0
 8003514:	843b      	strh	r3, [r7, #32]
 8003516:	e0b3      	b.n	8003680 <etharp_find_entry+0x19c>
    u8_t state = arp_table[i].state;
 8003518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800351c:	49b2      	ldr	r1, [pc, #712]	; (80037e8 <etharp_find_entry+0x304>)
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3314      	adds	r3, #20
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800352e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d105      	bne.n	8003542 <etharp_find_entry+0x5e>
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800353c:	8c3b      	ldrh	r3, [r7, #32]
 800353e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003540:	e09a      	b.n	8003678 <etharp_find_entry+0x194>
    } else if (state != ETHARP_STATE_EMPTY) {
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <etharp_find_entry+0x194>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d00e      	beq.n	800356e <etharp_find_entry+0x8a>
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d80b      	bhi.n	800356e <etharp_find_entry+0x8a>
 8003556:	4ba5      	ldr	r3, [pc, #660]	; (80037ec <etharp_find_entry+0x308>)
 8003558:	f44f 7292 	mov.w	r2, #292	; 0x124
 800355c:	49a4      	ldr	r1, [pc, #656]	; (80037f0 <etharp_find_entry+0x30c>)
 800355e:	48a5      	ldr	r0, [pc, #660]	; (80037f4 <etharp_find_entry+0x310>)
 8003560:	f7fd fee6 	bl	8001330 <iprintf>
 8003564:	2000      	movs	r0, #0
 8003566:	f014 ff87 	bl	8018478 <fflush>
 800356a:	f014 fecb 	bl	8018304 <abort>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <etharp_find_entry+0xd2>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800357c:	489a      	ldr	r0, [pc, #616]	; (80037e8 <etharp_find_entry+0x304>)
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4403      	add	r3, r0
 8003588:	3304      	adds	r3, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4299      	cmp	r1, r3
 800358e:	d112      	bne.n	80035b6 <etharp_find_entry+0xd2>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <etharp_find_entry+0xcc>
 8003596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800359a:	4993      	ldr	r1, [pc, #588]	; (80037e8 <etharp_find_entry+0x304>)
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	440b      	add	r3, r1
 80035a6:	3308      	adds	r3, #8
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d102      	bne.n	80035b6 <etharp_find_entry+0xd2>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80035b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80035b4:	e113      	b.n	80037de <etharp_find_entry+0x2fa>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d140      	bne.n	800363e <etharp_find_entry+0x15a>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80035bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80035c0:	4989      	ldr	r1, [pc, #548]	; (80037e8 <etharp_find_entry+0x304>)
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01a      	beq.n	8003608 <etharp_find_entry+0x124>
          if (arp_table[i].ctime >= age_queue) {
 80035d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80035d6:	4984      	ldr	r1, [pc, #528]	; (80037e8 <etharp_find_entry+0x304>)
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	3312      	adds	r3, #18
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	8bba      	ldrh	r2, [r7, #28]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d845      	bhi.n	8003678 <etharp_find_entry+0x194>
            old_queue = i;
 80035ec:	8c3b      	ldrh	r3, [r7, #32]
 80035ee:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80035f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80035f4:	497c      	ldr	r1, [pc, #496]	; (80037e8 <etharp_find_entry+0x304>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	3312      	adds	r3, #18
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	83bb      	strh	r3, [r7, #28]
 8003606:	e037      	b.n	8003678 <etharp_find_entry+0x194>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8003608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800360c:	4976      	ldr	r1, [pc, #472]	; (80037e8 <etharp_find_entry+0x304>)
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3312      	adds	r3, #18
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	8b7a      	ldrh	r2, [r7, #26]
 800361e:	429a      	cmp	r2, r3
 8003620:	d82a      	bhi.n	8003678 <etharp_find_entry+0x194>
            old_pending = i;
 8003622:	8c3b      	ldrh	r3, [r7, #32]
 8003624:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8003626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800362a:	496f      	ldr	r1, [pc, #444]	; (80037e8 <etharp_find_entry+0x304>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3312      	adds	r3, #18
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	837b      	strh	r3, [r7, #26]
 800363c:	e01c      	b.n	8003678 <etharp_find_entry+0x194>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d919      	bls.n	8003678 <etharp_find_entry+0x194>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8003644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003648:	4967      	ldr	r1, [pc, #412]	; (80037e8 <etharp_find_entry+0x304>)
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3312      	adds	r3, #18
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	8b3a      	ldrh	r2, [r7, #24]
 800365a:	429a      	cmp	r2, r3
 800365c:	d80c      	bhi.n	8003678 <etharp_find_entry+0x194>
            old_stable = i;
 800365e:	8c3b      	ldrh	r3, [r7, #32]
 8003660:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8003662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003666:	4960      	ldr	r1, [pc, #384]	; (80037e8 <etharp_find_entry+0x304>)
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	3312      	adds	r3, #18
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003678:	8c3b      	ldrh	r3, [r7, #32]
 800367a:	3301      	adds	r3, #1
 800367c:	b29b      	uxth	r3, r3
 800367e:	843b      	strh	r3, [r7, #32]
 8003680:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003684:	2b09      	cmp	r3, #9
 8003686:	f77f af47 	ble.w	8003518 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <etharp_find_entry+0x1c2>
 8003694:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003698:	2b0a      	cmp	r3, #10
 800369a:	d107      	bne.n	80036ac <etharp_find_entry+0x1c8>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800369c:	7afb      	ldrb	r3, [r7, #11]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <etharp_find_entry+0x1c8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	e098      	b.n	80037de <etharp_find_entry+0x2fa>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80036ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	dc02      	bgt.n	80036ba <etharp_find_entry+0x1d6>
    i = empty;
 80036b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036b6:	843b      	strh	r3, [r7, #32]
 80036b8:	e042      	b.n	8003740 <etharp_find_entry+0x25c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80036ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80036be:	2b09      	cmp	r3, #9
 80036c0:	dc18      	bgt.n	80036f4 <etharp_find_entry+0x210>
      /* recycle oldest stable*/
      i = old_stable;
 80036c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c4:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80036c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80036ca:	4947      	ldr	r1, [pc, #284]	; (80037e8 <etharp_find_entry+0x304>)
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01c      	beq.n	8003716 <etharp_find_entry+0x232>
 80036dc:	4b43      	ldr	r3, [pc, #268]	; (80037ec <etharp_find_entry+0x308>)
 80036de:	f240 126d 	movw	r2, #365	; 0x16d
 80036e2:	4945      	ldr	r1, [pc, #276]	; (80037f8 <etharp_find_entry+0x314>)
 80036e4:	4843      	ldr	r0, [pc, #268]	; (80037f4 <etharp_find_entry+0x310>)
 80036e6:	f7fd fe23 	bl	8001330 <iprintf>
 80036ea:	2000      	movs	r0, #0
 80036ec:	f014 fec4 	bl	8018478 <fflush>
 80036f0:	f014 fe08 	bl	8018304 <abort>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80036f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	dc02      	bgt.n	8003702 <etharp_find_entry+0x21e>
      /* recycle oldest pending */
      i = old_pending;
 80036fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036fe:	843b      	strh	r3, [r7, #32]
 8003700:	e009      	b.n	8003716 <etharp_find_entry+0x232>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8003702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003706:	2b09      	cmp	r3, #9
 8003708:	dc02      	bgt.n	8003710 <etharp_find_entry+0x22c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800370a:	8bfb      	ldrh	r3, [r7, #30]
 800370c:	843b      	strh	r3, [r7, #32]
 800370e:	e002      	b.n	8003716 <etharp_find_entry+0x232>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	e063      	b.n	80037de <etharp_find_entry+0x2fa>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8003716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800371a:	2b09      	cmp	r3, #9
 800371c:	dd0b      	ble.n	8003736 <etharp_find_entry+0x252>
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <etharp_find_entry+0x308>)
 8003720:	f240 127f 	movw	r2, #383	; 0x17f
 8003724:	4935      	ldr	r1, [pc, #212]	; (80037fc <etharp_find_entry+0x318>)
 8003726:	4833      	ldr	r0, [pc, #204]	; (80037f4 <etharp_find_entry+0x310>)
 8003728:	f7fd fe02 	bl	8001330 <iprintf>
 800372c:	2000      	movs	r0, #0
 800372e:	f014 fea3 	bl	8018478 <fflush>
 8003732:	f014 fde7 	bl	8018304 <abort>
    etharp_free_entry(i);
 8003736:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fdf8 	bl	8003330 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8003740:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003744:	2b09      	cmp	r3, #9
 8003746:	dd0b      	ble.n	8003760 <etharp_find_entry+0x27c>
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <etharp_find_entry+0x308>)
 800374a:	f240 1283 	movw	r2, #387	; 0x183
 800374e:	492b      	ldr	r1, [pc, #172]	; (80037fc <etharp_find_entry+0x318>)
 8003750:	4828      	ldr	r0, [pc, #160]	; (80037f4 <etharp_find_entry+0x310>)
 8003752:	f7fd fded 	bl	8001330 <iprintf>
 8003756:	2000      	movs	r0, #0
 8003758:	f014 fe8e 	bl	8018478 <fflush>
 800375c:	f014 fdd2 	bl	8018304 <abort>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8003760:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003764:	4920      	ldr	r1, [pc, #128]	; (80037e8 <etharp_find_entry+0x304>)
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	3314      	adds	r3, #20
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <etharp_find_entry+0x2ac>
 8003778:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <etharp_find_entry+0x308>)
 800377a:	f240 1285 	movw	r2, #389	; 0x185
 800377e:	4920      	ldr	r1, [pc, #128]	; (8003800 <etharp_find_entry+0x31c>)
 8003780:	481c      	ldr	r0, [pc, #112]	; (80037f4 <etharp_find_entry+0x310>)
 8003782:	f7fd fdd5 	bl	8001330 <iprintf>
 8003786:	2000      	movs	r0, #0
 8003788:	f014 fe76 	bl	8018478 <fflush>
 800378c:	f014 fdba 	bl	8018304 <abort>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <etharp_find_entry+0x2ca>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8003796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	4812      	ldr	r0, [pc, #72]	; (80037e8 <etharp_find_entry+0x304>)
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4403      	add	r3, r0
 80037aa:	3304      	adds	r3, #4
 80037ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80037ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80037b2:	490d      	ldr	r1, [pc, #52]	; (80037e8 <etharp_find_entry+0x304>)
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	3312      	adds	r3, #18
 80037c0:	2200      	movs	r2, #0
 80037c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80037c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <etharp_find_entry+0x304>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	440b      	add	r3, r1
 80037d4:	3308      	adds	r3, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80037da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200000b0 	.word	0x200000b0
 80037ec:	08018ef0 	.word	0x08018ef0
 80037f0:	08018f10 	.word	0x08018f10
 80037f4:	08018f50 	.word	0x08018f50
 80037f8:	08018f78 	.word	0x08018f78
 80037fc:	08018f90 	.word	0x08018f90
 8003800:	08018fa4 	.word	0x08018fa4

08003804 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003818:	2b06      	cmp	r3, #6
 800381a:	d00b      	beq.n	8003834 <etharp_update_arp_entry+0x30>
 800381c:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <etharp_update_arp_entry+0x144>)
 800381e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8003822:	494a      	ldr	r1, [pc, #296]	; (800394c <etharp_update_arp_entry+0x148>)
 8003824:	484a      	ldr	r0, [pc, #296]	; (8003950 <etharp_update_arp_entry+0x14c>)
 8003826:	f7fd fd83 	bl	8001330 <iprintf>
 800382a:	2000      	movs	r0, #0
 800382c:	f014 fe24 	bl	8018478 <fflush>
 8003830:	f014 fd68 	bl	8018304 <abort>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <etharp_update_arp_entry+0x5c>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00e      	beq.n	8003860 <etharp_update_arp_entry+0x5c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68f9      	ldr	r1, [r7, #12]
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fae5 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 800384e:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <etharp_update_arp_entry+0x5c>
      ip4_addr_ismulticast(ipaddr)) {
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800385c:	2be0      	cmp	r3, #224	; 0xe0
 800385e:	d102      	bne.n	8003866 <etharp_update_arp_entry+0x62>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8003860:	f06f 030f 	mvn.w	r3, #15
 8003864:	e06c      	b.n	8003940 <etharp_update_arp_entry+0x13c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4619      	mov	r1, r3
 800386c:	68b8      	ldr	r0, [r7, #8]
 800386e:	f7ff fe39 	bl	80034e4 <etharp_find_entry>
 8003872:	4603      	mov	r3, r0
 8003874:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8003876:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800387a:	2b00      	cmp	r3, #0
 800387c:	da02      	bge.n	8003884 <etharp_update_arp_entry+0x80>
    return (err_t)i;
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	b25b      	sxtb	r3, r3
 8003882:	e05d      	b.n	8003940 <etharp_update_arp_entry+0x13c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8003884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003888:	4932      	ldr	r1, [pc, #200]	; (8003954 <etharp_update_arp_entry+0x150>)
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3314      	adds	r3, #20
 8003896:	2202      	movs	r2, #2
 8003898:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800389a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800389e:	492d      	ldr	r1, [pc, #180]	; (8003954 <etharp_update_arp_entry+0x150>)
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	3308      	adds	r3, #8
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80038b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	3308      	adds	r3, #8
 80038be:	4a25      	ldr	r2, [pc, #148]	; (8003954 <etharp_update_arp_entry+0x150>)
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	2206      	movs	r2, #6
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f014 fee4 	bl	8018696 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80038ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038d2:	4920      	ldr	r1, [pc, #128]	; (8003954 <etharp_update_arp_entry+0x150>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	3312      	adds	r3, #18
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80038e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038e8:	491a      	ldr	r1, [pc, #104]	; (8003954 <etharp_update_arp_entry+0x150>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d021      	beq.n	800393e <etharp_update_arp_entry+0x13a>
    struct pbuf *p = arp_table[i].q;
 80038fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038fe:	4915      	ldr	r1, [pc, #84]	; (8003954 <etharp_update_arp_entry+0x150>)
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	440b      	add	r3, r1
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800390e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003912:	4910      	ldr	r1, [pc, #64]	; (8003954 <etharp_update_arp_entry+0x150>)
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8003928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6939      	ldr	r1, [r7, #16]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7fd fdf8 	bl	8001528 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8003938:	6938      	ldr	r0, [r7, #16]
 800393a:	f004 f8d1 	bl	8007ae0 <pbuf_free>
  }
  return ERR_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	08018ef0 	.word	0x08018ef0
 800394c:	08018fd0 	.word	0x08018fd0
 8003950:	08018f50 	.word	0x08018f50
 8003954:	200000b0 	.word	0x200000b0

08003958 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8003958:	b5b0      	push	{r4, r5, r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af04      	add	r7, sp, #16
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <etharp_input+0x28>
 8003968:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <etharp_input+0x14c>)
 800396a:	f240 228a 	movw	r2, #650	; 0x28a
 800396e:	494e      	ldr	r1, [pc, #312]	; (8003aa8 <etharp_input+0x150>)
 8003970:	484e      	ldr	r0, [pc, #312]	; (8003aac <etharp_input+0x154>)
 8003972:	f7fd fcdd 	bl	8001330 <iprintf>
 8003976:	2000      	movs	r0, #0
 8003978:	f014 fd7e 	bl	8018478 <fflush>
 800397c:	f014 fcc2 	bl	8018304 <abort>

  hdr = (struct etharp_hdr *)p->payload;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003990:	d10c      	bne.n	80039ac <etharp_input+0x54>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8003996:	2b06      	cmp	r3, #6
 8003998:	d108      	bne.n	80039ac <etharp_input+0x54>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d104      	bne.n	80039ac <etharp_input+0x54>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	885b      	ldrh	r3, [r3, #2]
 80039a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d00f      	beq.n	80039cc <etharp_input+0x74>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 80039ac:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <etharp_input+0x158>)
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	3301      	adds	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <etharp_input+0x158>)
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80039b8:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <etharp_input+0x158>)
 80039ba:	8bdb      	ldrh	r3, [r3, #30]
 80039bc:	3301      	adds	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <etharp_input+0x158>)
 80039c2:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f004 f88b 	bl	8007ae0 <pbuf_free>
 80039ca:	e067      	b.n	8003a9c <etharp_input+0x144>
    return;
  }
  ETHARP_STATS_INC(etharp.recv);
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <etharp_input+0x158>)
 80039ce:	8b5b      	ldrh	r3, [r3, #26]
 80039d0:	3301      	adds	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <etharp_input+0x158>)
 80039d6:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	330e      	adds	r3, #14
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3318      	adds	r3, #24
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	3304      	adds	r3, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <etharp_input+0xa0>
    for_us = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
 80039f6:	e009      	b.n	8003a0c <etharp_input+0xb4>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f103 0208 	add.w	r2, r3, #8
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <etharp_input+0xc4>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <etharp_input+0xc6>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f107 010c 	add.w	r1, r7, #12
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	f7ff feee 	bl	8003804 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	88db      	ldrh	r3, [r3, #6]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a32:	d003      	beq.n	8003a3c <etharp_input+0xe4>
 8003a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a38:	d01e      	beq.n	8003a78 <etharp_input+0x120>
 8003a3a:	e024      	b.n	8003a86 <etharp_input+0x12e>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <etharp_input+0x13c>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	9103      	str	r1, [sp, #12]
 8003a60:	f107 010c 	add.w	r1, r7, #12
 8003a64:	9102      	str	r1, [sp, #8]
 8003a66:	9201      	str	r2, [sp, #4]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4601      	mov	r1, r0
 8003a70:	6838      	ldr	r0, [r7, #0]
 8003a72:	f000 fb3d 	bl	80040f0 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8003a76:	e00d      	b.n	8003a94 <etharp_input+0x13c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6838      	ldr	r0, [r7, #0]
 8003a80:	f7fe f9b2 	bl	8001de8 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8003a84:	e007      	b.n	8003a96 <etharp_input+0x13e>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <etharp_input+0x158>)
 8003a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <etharp_input+0x158>)
 8003a90:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8003a92:	e000      	b.n	8003a96 <etharp_input+0x13e>
      break;
 8003a94:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f004 f822 	bl	8007ae0 <pbuf_free>
}
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08018ef0 	.word	0x08018ef0
 8003aa8:	08019028 	.word	0x08019028
 8003aac:	08018f50 	.word	0x08018f50
 8003ab0:	20016e44 	.word	0x20016e44

08003ab4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003ac2:	79fa      	ldrb	r2, [r7, #7]
 8003ac4:	4947      	ldr	r1, [pc, #284]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d80b      	bhi.n	8003af0 <etharp_output_to_arp_index+0x3c>
 8003ad8:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <etharp_output_to_arp_index+0x134>)
 8003ada:	f240 22ef 	movw	r2, #751	; 0x2ef
 8003ade:	4943      	ldr	r1, [pc, #268]	; (8003bec <etharp_output_to_arp_index+0x138>)
 8003ae0:	4843      	ldr	r0, [pc, #268]	; (8003bf0 <etharp_output_to_arp_index+0x13c>)
 8003ae2:	f7fd fc25 	bl	8001330 <iprintf>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f014 fcc6 	bl	8018478 <fflush>
 8003aec:	f014 fc0a 	bl	8018304 <abort>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8003af0:	79fa      	ldrb	r2, [r7, #7]
 8003af2:	493c      	ldr	r1, [pc, #240]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	440b      	add	r3, r1
 8003afe:	3314      	adds	r3, #20
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d153      	bne.n	8003bae <etharp_output_to_arp_index+0xfa>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8003b06:	79fa      	ldrb	r2, [r7, #7]
 8003b08:	4936      	ldr	r1, [pc, #216]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	3312      	adds	r3, #18
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8003b1c:	d919      	bls.n	8003b52 <etharp_output_to_arp_index+0x9e>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8003b1e:	79fa      	ldrb	r2, [r7, #7]
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fba9 	bl	8004288 <etharp_request>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d138      	bne.n	8003bae <etharp_output_to_arp_index+0xfa>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8003b3c:	79fa      	ldrb	r2, [r7, #7]
 8003b3e:	4929      	ldr	r1, [pc, #164]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e02d      	b.n	8003bae <etharp_output_to_arp_index+0xfa>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8003b52:	79fa      	ldrb	r2, [r7, #7]
 8003b54:	4923      	ldr	r1, [pc, #140]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b56:	4613      	mov	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	440b      	add	r3, r1
 8003b60:	3312      	adds	r3, #18
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003b68:	d321      	bcc.n	8003bae <etharp_output_to_arp_index+0xfa>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4a1b      	ldr	r2, [pc, #108]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b76:	4413      	add	r3, r2
 8003b78:	1d19      	adds	r1, r3, #4
 8003b7a:	79fa      	ldrb	r2, [r7, #7]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3308      	adds	r3, #8
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fb58 	bl	8004244 <etharp_request_dst>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <etharp_output_to_arp_index+0xfa>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8003b9a:	79fa      	ldrb	r2, [r7, #7]
 8003b9c:	4911      	ldr	r1, [pc, #68]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3314      	adds	r3, #20
 8003baa:	2203      	movs	r2, #3
 8003bac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8003bb4:	79fa      	ldrb	r2, [r7, #7]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <etharp_output_to_arp_index+0x130>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	460a      	mov	r2, r1
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7fd fca8 	bl	8001528 <ethernet_output>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200000b0 	.word	0x200000b0
 8003be8:	08018ef0 	.word	0x08018ef0
 8003bec:	08019048 	.word	0x08019048
 8003bf0:	08018f50 	.word	0x08018f50

08003bf4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <etharp_output+0x2e>
 8003c0a:	4b7e      	ldr	r3, [pc, #504]	; (8003e04 <etharp_output+0x210>)
 8003c0c:	f240 321e 	movw	r2, #798	; 0x31e
 8003c10:	497d      	ldr	r1, [pc, #500]	; (8003e08 <etharp_output+0x214>)
 8003c12:	487e      	ldr	r0, [pc, #504]	; (8003e0c <etharp_output+0x218>)
 8003c14:	f7fd fb8c 	bl	8001330 <iprintf>
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f014 fc2d 	bl	8018478 <fflush>
 8003c1e:	f014 fb71 	bl	8018304 <abort>
  LWIP_ASSERT("q != NULL", q != NULL);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <etharp_output+0x4c>
 8003c28:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <etharp_output+0x210>)
 8003c2a:	f240 321f 	movw	r2, #799	; 0x31f
 8003c2e:	4978      	ldr	r1, [pc, #480]	; (8003e10 <etharp_output+0x21c>)
 8003c30:	4876      	ldr	r0, [pc, #472]	; (8003e0c <etharp_output+0x218>)
 8003c32:	f7fd fb7d 	bl	8001330 <iprintf>
 8003c36:	2000      	movs	r0, #0
 8003c38:	f014 fc1e 	bl	8018478 <fflush>
 8003c3c:	f014 fb62 	bl	8018304 <abort>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <etharp_output+0x6a>
 8003c46:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <etharp_output+0x210>)
 8003c48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c4c:	4971      	ldr	r1, [pc, #452]	; (8003e14 <etharp_output+0x220>)
 8003c4e:	486f      	ldr	r0, [pc, #444]	; (8003e0c <etharp_output+0x218>)
 8003c50:	f7fd fb6e 	bl	8001330 <iprintf>
 8003c54:	2000      	movs	r0, #0
 8003c56:	f014 fc0f 	bl	8018478 <fflush>
 8003c5a:	f014 fb53 	bl	8018304 <abort>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f8d7 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <etharp_output+0x82>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <etharp_output+0x224>)
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e0b5      	b.n	8003de2 <etharp_output+0x1ee>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7e:	2be0      	cmp	r3, #224	; 0xe0
 8003c80:	d118      	bne.n	8003cb4 <etharp_output+0xc0>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8003c82:	2301      	movs	r3, #1
 8003c84:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8003c8a:	235e      	movs	r3, #94	; 0x5e
 8003c8c:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3301      	adds	r3, #1
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3303      	adds	r3, #3
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8003cac:	f107 0310 	add.w	r3, r7, #16
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e096      	b.n	8003de2 <etharp_output+0x1ee>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	405a      	eors	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <etharp_output+0xfe>
        !ip4_addr_islinklocal(ipaddr)) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8003cd2:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <etharp_output+0xfe>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <etharp_output+0xf8>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e002      	b.n	8003cf2 <etharp_output+0xfe>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8003cec:	f06f 0303 	mvn.w	r3, #3
 8003cf0:	e083      	b.n	8003dfa <etharp_output+0x206>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <etharp_output+0x228>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4a49      	ldr	r2, [pc, #292]	; (8003e20 <etharp_output+0x22c>)
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	440b      	add	r3, r1
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	3314      	adds	r3, #20
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d92b      	bls.n	8003d64 <etharp_output+0x170>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8003d0c:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <etharp_output+0x228>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	4a43      	ldr	r2, [pc, #268]	; (8003e20 <etharp_output+0x22c>)
 8003d14:	460b      	mov	r3, r1
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	440b      	add	r3, r1
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3308      	adds	r3, #8
 8003d20:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d11d      	bne.n	8003d64 <etharp_output+0x170>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <etharp_output+0x228>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	493b      	ldr	r1, [pc, #236]	; (8003e20 <etharp_output+0x22c>)
 8003d34:	4603      	mov	r3, r0
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4403      	add	r3, r0
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3304      	adds	r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d10e      	bne.n	8003d64 <etharp_output+0x170>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <etharp_output+0x230>)
 8003d48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <etharp_output+0x230>)
 8003d50:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <etharp_output+0x228>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff feaa 	bl	8003ab4 <etharp_output_to_arp_index>
 8003d60:	4603      	mov	r3, r0
 8003d62:	e04a      	b.n	8003dfa <etharp_output+0x206>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
 8003d68:	e031      	b.n	8003dce <etharp_output+0x1da>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8003d6a:	7dfa      	ldrb	r2, [r7, #23]
 8003d6c:	492c      	ldr	r1, [pc, #176]	; (8003e20 <etharp_output+0x22c>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	440b      	add	r3, r1
 8003d78:	3314      	adds	r3, #20
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d923      	bls.n	8003dc8 <etharp_output+0x1d4>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8003d80:	7dfa      	ldrb	r2, [r7, #23]
 8003d82:	4927      	ldr	r1, [pc, #156]	; (8003e20 <etharp_output+0x22c>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3308      	adds	r3, #8
 8003d90:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d117      	bne.n	8003dc8 <etharp_output+0x1d4>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	7dfa      	ldrb	r2, [r7, #23]
 8003d9e:	4820      	ldr	r0, [pc, #128]	; (8003e20 <etharp_output+0x22c>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4403      	add	r3, r0
 8003daa:	3304      	adds	r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8003dae:	4299      	cmp	r1, r3
 8003db0:	d10a      	bne.n	8003dc8 <etharp_output+0x1d4>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8003db2:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <etharp_output+0x228>)
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fe78 	bl	8003ab4 <etharp_output_to_arp_index>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	e018      	b.n	8003dfa <etharp_output+0x206>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	d9ca      	bls.n	8003d6a <etharp_output+0x176>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f825 	bl	8003e28 <etharp_query>
 8003dde:	4603      	mov	r3, r0
 8003de0:	e00b      	b.n	8003dfa <etharp_output+0x206>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8003de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7fd fb98 	bl	8001528 <ethernet_output>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	08018ef0 	.word	0x08018ef0
 8003e08:	08019028 	.word	0x08019028
 8003e0c:	08018f50 	.word	0x08018f50
 8003e10:	08019078 	.word	0x08019078
 8003e14:	08019018 	.word	0x08019018
 8003e18:	0801c680 	.word	0x0801c680
 8003e1c:	200001a0 	.word	0x200001a0
 8003e20:	200000b0 	.word	0x200000b0
 8003e24:	20016e44 	.word	0x20016e44

08003e28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	; 0x30
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3326      	adds	r3, #38	; 0x26
 8003e38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8003e3a:	23ff      	movs	r3, #255	; 0xff
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ffe4 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10c      	bne.n	8003e70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003e5e:	2be0      	cmp	r3, #224	; 0xe0
 8003e60:	d006      	beq.n	8003e70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8003e70:	f06f 030f 	mvn.w	r3, #15
 8003e74:	e125      	b.n	80040c2 <etharp_query+0x29a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	68b8      	ldr	r0, [r7, #8]
 8003e7c:	f7ff fb32 	bl	80034e4 <etharp_find_entry>
 8003e80:	4603      	mov	r3, r0
 8003e82:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8003e84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	da0b      	bge.n	8003ea4 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 8003e92:	4b8e      	ldr	r3, [pc, #568]	; (80040cc <etharp_query+0x2a4>)
 8003e94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e96:	3301      	adds	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	4b8c      	ldr	r3, [pc, #560]	; (80040cc <etharp_query+0x2a4>)
 8003e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 8003e9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	e10e      	b.n	80040c2 <etharp_query+0x29a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8003ea4:	8a7b      	ldrh	r3, [r7, #18]
 8003ea6:	2b7e      	cmp	r3, #126	; 0x7e
 8003ea8:	d90b      	bls.n	8003ec2 <etharp_query+0x9a>
 8003eaa:	4b89      	ldr	r3, [pc, #548]	; (80040d0 <etharp_query+0x2a8>)
 8003eac:	f240 32c1 	movw	r2, #961	; 0x3c1
 8003eb0:	4988      	ldr	r1, [pc, #544]	; (80040d4 <etharp_query+0x2ac>)
 8003eb2:	4889      	ldr	r0, [pc, #548]	; (80040d8 <etharp_query+0x2b0>)
 8003eb4:	f7fd fa3c 	bl	8001330 <iprintf>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f014 fadd 	bl	8018478 <fflush>
 8003ebe:	f014 fa21 	bl	8018304 <abort>
  i = (netif_addr_idx_t)i_err;
 8003ec2:	8a7b      	ldrh	r3, [r7, #18]
 8003ec4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8003ec6:	7c7a      	ldrb	r2, [r7, #17]
 8003ec8:	4984      	ldr	r1, [pc, #528]	; (80040dc <etharp_query+0x2b4>)
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d115      	bne.n	8003f08 <etharp_query+0xe0>
    is_new_entry = 1;
 8003edc:	2301      	movs	r3, #1
 8003ede:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8003ee0:	7c7a      	ldrb	r2, [r7, #17]
 8003ee2:	497e      	ldr	r1, [pc, #504]	; (80040dc <etharp_query+0x2b4>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	3314      	adds	r3, #20
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8003ef4:	7c7a      	ldrb	r2, [r7, #17]
 8003ef6:	4979      	ldr	r1, [pc, #484]	; (80040dc <etharp_query+0x2b4>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	3308      	adds	r3, #8
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8003f08:	7c7a      	ldrb	r2, [r7, #17]
 8003f0a:	4974      	ldr	r1, [pc, #464]	; (80040dc <etharp_query+0x2b4>)
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	3314      	adds	r3, #20
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d016      	beq.n	8003f4c <etharp_query+0x124>
 8003f1e:	7c7a      	ldrb	r2, [r7, #17]
 8003f20:	496e      	ldr	r1, [pc, #440]	; (80040dc <etharp_query+0x2b4>)
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4413      	add	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d80b      	bhi.n	8003f4c <etharp_query+0x124>
 8003f34:	4b66      	ldr	r3, [pc, #408]	; (80040d0 <etharp_query+0x2a8>)
 8003f36:	f240 32cf 	movw	r2, #975	; 0x3cf
 8003f3a:	4969      	ldr	r1, [pc, #420]	; (80040e0 <etharp_query+0x2b8>)
 8003f3c:	4866      	ldr	r0, [pc, #408]	; (80040d8 <etharp_query+0x2b0>)
 8003f3e:	f7fd f9f7 	bl	8001330 <iprintf>
 8003f42:	2000      	movs	r0, #0
 8003f44:	f014 fa98 	bl	8018478 <fflush>
 8003f48:	f014 f9dc 	bl	8018304 <abort>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <etharp_query+0x130>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10c      	bne.n	8003f72 <etharp_query+0x14a>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f994 	bl	8004288 <etharp_request>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <etharp_query+0x14a>
      return result;
 8003f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f70:	e0a7      	b.n	80040c2 <etharp_query+0x29a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <etharp_query+0x168>
 8003f78:	4b55      	ldr	r3, [pc, #340]	; (80040d0 <etharp_query+0x2a8>)
 8003f7a:	f240 32e1 	movw	r2, #993	; 0x3e1
 8003f7e:	4959      	ldr	r1, [pc, #356]	; (80040e4 <etharp_query+0x2bc>)
 8003f80:	4855      	ldr	r0, [pc, #340]	; (80040d8 <etharp_query+0x2b0>)
 8003f82:	f7fd f9d5 	bl	8001330 <iprintf>
 8003f86:	2000      	movs	r0, #0
 8003f88:	f014 fa76 	bl	8018478 <fflush>
 8003f8c:	f014 f9ba 	bl	8018304 <abort>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8003f90:	7c7a      	ldrb	r2, [r7, #17]
 8003f92:	4952      	ldr	r1, [pc, #328]	; (80040dc <etharp_query+0x2b4>)
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d918      	bls.n	8003fd8 <etharp_query+0x1b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8003fa6:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <etharp_query+0x2c0>)
 8003fa8:	7c7b      	ldrb	r3, [r7, #17]
 8003faa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8003fac:	7c7a      	ldrb	r2, [r7, #17]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	4a48      	ldr	r2, [pc, #288]	; (80040dc <etharp_query+0x2b4>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7fd faac 	bl	8001528 <ethernet_output>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fd6:	e072      	b.n	80040be <etharp_query+0x296>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8003fd8:	7c7a      	ldrb	r2, [r7, #17]
 8003fda:	4940      	ldr	r1, [pc, #256]	; (80040dc <etharp_query+0x2b4>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d167      	bne.n	80040be <etharp_query+0x296>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8003ff6:	e021      	b.n	800403c <etharp_query+0x214>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	895a      	ldrh	r2, [r3, #10]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	891b      	ldrh	r3, [r3, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d10f      	bne.n	8004024 <etharp_query+0x1fc>
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <etharp_query+0x1fc>
 800400c:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <etharp_query+0x2a8>)
 800400e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004012:	4936      	ldr	r1, [pc, #216]	; (80040ec <etharp_query+0x2c4>)
 8004014:	4830      	ldr	r0, [pc, #192]	; (80040d8 <etharp_query+0x2b0>)
 8004016:	f7fd f98b 	bl	8001330 <iprintf>
 800401a:	2000      	movs	r0, #0
 800401c:	f014 fa2c 	bl	8018478 <fflush>
 8004020:	f014 f970 	bl	8018304 <abort>
      if (PBUF_NEEDS_COPY(p)) {
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	7b1b      	ldrb	r3, [r3, #12]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <etharp_query+0x20e>
        copy_needed = 1;
 8004030:	2301      	movs	r3, #1
 8004032:	61bb      	str	r3, [r7, #24]
        break;
 8004034:	e005      	b.n	8004042 <etharp_query+0x21a>
      }
      p = p->next;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1da      	bne.n	8003ff8 <etharp_query+0x1d0>
    }
    if (copy_needed) {
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <etharp_query+0x230>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800404e:	200e      	movs	r0, #14
 8004050:	f003 fffe 	bl	8008050 <pbuf_clone>
 8004054:	61f8      	str	r0, [r7, #28]
 8004056:	e004      	b.n	8004062 <etharp_query+0x23a>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800405c:	69f8      	ldr	r0, [r7, #28]
 800405e:	f003 fdf9 	bl	8007c54 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d021      	beq.n	80040ac <etharp_query+0x284>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8004068:	7c7a      	ldrb	r2, [r7, #17]
 800406a:	491c      	ldr	r1, [pc, #112]	; (80040dc <etharp_query+0x2b4>)
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	440b      	add	r3, r1
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <etharp_query+0x26a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800407c:	7c7a      	ldrb	r2, [r7, #17]
 800407e:	4917      	ldr	r1, [pc, #92]	; (80040dc <etharp_query+0x2b4>)
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f003 fd27 	bl	8007ae0 <pbuf_free>
      }
      arp_table[i].q = p;
 8004092:	7c7a      	ldrb	r2, [r7, #17]
 8004094:	4911      	ldr	r1, [pc, #68]	; (80040dc <etharp_query+0x2b4>)
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040aa:	e008      	b.n	80040be <etharp_query+0x296>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <etharp_query+0x2a4>)
 80040ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <etharp_query+0x2a4>)
 80040b6:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80040b8:	23ff      	movs	r3, #255	; 0xff
 80040ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80040be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	; 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20016e44 	.word	0x20016e44
 80040d0:	08018ef0 	.word	0x08018ef0
 80040d4:	08019084 	.word	0x08019084
 80040d8:	08018f50 	.word	0x08018f50
 80040dc:	200000b0 	.word	0x200000b0
 80040e0:	08019094 	.word	0x08019094
 80040e4:	08019078 	.word	0x08019078
 80040e8:	200001a0 	.word	0x200001a0
 80040ec:	080190bc 	.word	0x080190bc

080040f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <etharp_raw+0x30>
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <etharp_raw+0x13c>)
 800410a:	f240 4257 	movw	r2, #1111	; 0x457
 800410e:	4948      	ldr	r1, [pc, #288]	; (8004230 <etharp_raw+0x140>)
 8004110:	4848      	ldr	r0, [pc, #288]	; (8004234 <etharp_raw+0x144>)
 8004112:	f7fd f90d 	bl	8001330 <iprintf>
 8004116:	2000      	movs	r0, #0
 8004118:	f014 f9ae 	bl	8018478 <fflush>
 800411c:	f014 f8f2 	bl	8018304 <abort>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004120:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004124:	211c      	movs	r1, #28
 8004126:	200e      	movs	r0, #14
 8004128:	f003 f9e2 	bl	80074f0 <pbuf_alloc>
 800412c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d108      	bne.n	8004146 <etharp_raw+0x56>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8004134:	4b40      	ldr	r3, [pc, #256]	; (8004238 <etharp_raw+0x148>)
 8004136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <etharp_raw+0x148>)
 800413e:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295
 8004144:	e06d      	b.n	8004222 <etharp_raw+0x132>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	895b      	ldrh	r3, [r3, #10]
 800414a:	2b1b      	cmp	r3, #27
 800414c:	d80b      	bhi.n	8004166 <etharp_raw+0x76>
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <etharp_raw+0x13c>)
 8004150:	f240 4263 	movw	r2, #1123	; 0x463
 8004154:	4939      	ldr	r1, [pc, #228]	; (800423c <etharp_raw+0x14c>)
 8004156:	4837      	ldr	r0, [pc, #220]	; (8004234 <etharp_raw+0x144>)
 8004158:	f7fd f8ea 	bl	8001330 <iprintf>
 800415c:	2000      	movs	r0, #0
 800415e:	f014 f98b 	bl	8018478 <fflush>
 8004162:	f014 f8cf 	bl	8018304 <abort>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800416c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fd6c 	bl	8005c4c <lwip_htons>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004182:	2b06      	cmp	r3, #6
 8004184:	d00b      	beq.n	800419e <etharp_raw+0xae>
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <etharp_raw+0x13c>)
 8004188:	f240 426a 	movw	r2, #1130	; 0x46a
 800418c:	492c      	ldr	r1, [pc, #176]	; (8004240 <etharp_raw+0x150>)
 800418e:	4829      	ldr	r0, [pc, #164]	; (8004234 <etharp_raw+0x144>)
 8004190:	f7fd f8ce 	bl	8001330 <iprintf>
 8004194:	2000      	movs	r0, #0
 8004196:	f014 f96f 	bl	8018478 <fflush>
 800419a:	f014 f8b3 	bl	8018304 <abort>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3308      	adds	r3, #8
 80041a2:	2206      	movs	r2, #6
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f014 fa75 	bl	8018696 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3312      	adds	r3, #18
 80041b0:	2206      	movs	r2, #6
 80041b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b4:	4618      	mov	r0, r3
 80041b6:	f014 fa6e 	bl	8018696 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	330e      	adds	r3, #14
 80041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3318      	adds	r3, #24
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	f042 0208 	orr.w	r2, r2, #8
 80041e4:	709a      	strb	r2, [r3, #2]
 80041e6:	2200      	movs	r2, #0
 80041e8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2206      	movs	r2, #6
 80041ee:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2204      	movs	r2, #4
 80041f4:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80041f6:	f640 0306 	movw	r3, #2054	; 0x806
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7fd f990 	bl	8001528 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <etharp_raw+0x148>)
 800420a:	8b1b      	ldrh	r3, [r3, #24]
 800420c:	3301      	adds	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <etharp_raw+0x148>)
 8004212:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8004214:	69b8      	ldr	r0, [r7, #24]
 8004216:	f003 fc63 	bl	8007ae0 <pbuf_free>
  p = NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800421e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	08018ef0 	.word	0x08018ef0
 8004230:	08019028 	.word	0x08019028
 8004234:	08018f50 	.word	0x08018f50
 8004238:	20016e44 	.word	0x20016e44
 800423c:	080190d8 	.word	0x080190d8
 8004240:	0801910c 	.word	0x0801910c

08004244 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004260:	2201      	movs	r2, #1
 8004262:	9203      	str	r2, [sp, #12]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	9202      	str	r2, [sp, #8]
 8004268:	4a06      	ldr	r2, [pc, #24]	; (8004284 <etharp_request_dst+0x40>)
 800426a:	9201      	str	r2, [sp, #4]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4603      	mov	r3, r0
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff3c 	bl	80040f0 <etharp_raw>
 8004278:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	0801c688 	.word	0x0801c688

08004288 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <etharp_request+0x20>)
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ffd4 	bl	8004244 <etharp_request_dst>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	0801c680 	.word	0x0801c680

080042ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	; 0x38
 80042b0:	af04      	add	r7, sp, #16
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 80042b6:	4baa      	ldr	r3, [pc, #680]	; (8004560 <icmp_input+0x2b4>)
 80042b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042bc:	3301      	adds	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4ba7      	ldr	r3, [pc, #668]	; (8004560 <icmp_input+0x2b4>)
 80042c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80042c6:	4ba7      	ldr	r3, [pc, #668]	; (8004564 <icmp_input+0x2b8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80042dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042de:	2b13      	cmp	r3, #19
 80042e0:	f240 8117 	bls.w	8004512 <icmp_input+0x266>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	895b      	ldrh	r3, [r3, #10]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	f240 8114 	bls.w	8004516 <icmp_input+0x26a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80042f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8101 	beq.w	8004504 <icmp_input+0x258>
 8004302:	2b08      	cmp	r3, #8
 8004304:	f040 80ed 	bne.w	80044e2 <icmp_input+0x236>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8004308:	4b97      	ldr	r3, [pc, #604]	; (8004568 <icmp_input+0x2bc>)
 800430a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800430c:	4b95      	ldr	r3, [pc, #596]	; (8004564 <icmp_input+0x2b8>)
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	2be0      	cmp	r3, #224	; 0xe0
 8004316:	f000 810d 	beq.w	8004534 <icmp_input+0x288>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800431a:	4b92      	ldr	r3, [pc, #584]	; (8004564 <icmp_input+0x2b8>)
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	4b91      	ldr	r3, [pc, #580]	; (8004564 <icmp_input+0x2b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f000 fd77 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 8103 	bne.w	8004538 <icmp_input+0x28c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	891b      	ldrh	r3, [r3, #8]
 8004336:	2b07      	cmp	r3, #7
 8004338:	f240 80ef 	bls.w	800451a <icmp_input+0x26e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 ffed 	bl	800631c <inet_chksum_pbuf>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f003 fbc9 	bl	8007ae0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 800434e:	4b84      	ldr	r3, [pc, #528]	; (8004560 <icmp_input+0x2b4>)
 8004350:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004354:	3301      	adds	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	4b81      	ldr	r3, [pc, #516]	; (8004560 <icmp_input+0x2b4>)
 800435a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800435e:	e0fc      	b.n	800455a <icmp_input+0x2ae>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8004360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004362:	330e      	adds	r3, #14
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f003 faea 	bl	8007940 <pbuf_add_header>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04c      	beq.n	800440c <icmp_input+0x160>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	891a      	ldrh	r2, [r3, #8]
 8004376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004378:	4413      	add	r3, r2
 800437a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	891b      	ldrh	r3, [r3, #8]
 8004380:	8b7a      	ldrh	r2, [r7, #26]
 8004382:	429a      	cmp	r2, r3
 8004384:	f0c0 80da 	bcc.w	800453c <icmp_input+0x290>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8004388:	8b7b      	ldrh	r3, [r7, #26]
 800438a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800438e:	4619      	mov	r1, r3
 8004390:	200e      	movs	r0, #14
 8004392:	f003 f8ad 	bl	80074f0 <pbuf_alloc>
 8004396:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80d0 	beq.w	8004540 <icmp_input+0x294>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	895b      	ldrh	r3, [r3, #10]
 80043a4:	461a      	mov	r2, r3
 80043a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043a8:	3308      	adds	r3, #8
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d203      	bcs.n	80043b6 <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f003 fb96 	bl	8007ae0 <pbuf_free>
          goto icmperr;
 80043b4:	e0c5      	b.n	8004542 <icmp_input+0x296>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80043bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043be:	4618      	mov	r0, r3
 80043c0:	f014 f969 	bl	8018696 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80043c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043c6:	4619      	mov	r1, r3
 80043c8:	6978      	ldr	r0, [r7, #20]
 80043ca:	f003 fac9 	bl	8007960 <pbuf_remove_header>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <icmp_input+0x13e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80043d4:	4b65      	ldr	r3, [pc, #404]	; (800456c <icmp_input+0x2c0>)
 80043d6:	22b6      	movs	r2, #182	; 0xb6
 80043d8:	4965      	ldr	r1, [pc, #404]	; (8004570 <icmp_input+0x2c4>)
 80043da:	4866      	ldr	r0, [pc, #408]	; (8004574 <icmp_input+0x2c8>)
 80043dc:	f7fc ffa8 	bl	8001330 <iprintf>
 80043e0:	2000      	movs	r0, #0
 80043e2:	f014 f849 	bl	8018478 <fflush>
 80043e6:	f013 ff8d 	bl	8018304 <abort>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	6978      	ldr	r0, [r7, #20]
 80043ee:	f003 fcd3 	bl	8007d98 <pbuf_copy>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <icmp_input+0x154>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f003 fb71 	bl	8007ae0 <pbuf_free>
          goto icmperr;
 80043fe:	e0a0      	b.n	8004542 <icmp_input+0x296>
        }
        /* free the original p */
        pbuf_free(p);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f003 fb6d 	bl	8007ae0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	e013      	b.n	8004434 <icmp_input+0x188>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800440c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800440e:	330e      	adds	r3, #14
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f003 faa4 	bl	8007960 <pbuf_remove_header>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <icmp_input+0x188>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800441e:	4b53      	ldr	r3, [pc, #332]	; (800456c <icmp_input+0x2c0>)
 8004420:	22c7      	movs	r2, #199	; 0xc7
 8004422:	4955      	ldr	r1, [pc, #340]	; (8004578 <icmp_input+0x2cc>)
 8004424:	4853      	ldr	r0, [pc, #332]	; (8004574 <icmp_input+0x2c8>)
 8004426:	f7fc ff83 	bl	8001330 <iprintf>
 800442a:	2000      	movs	r0, #0
 800442c:	f014 f824 	bl	8018478 <fflush>
 8004430:	f013 ff68 	bl	8018304 <abort>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800443a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f003 fa7e 	bl	8007940 <pbuf_add_header>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d15e      	bne.n	8004508 <icmp_input+0x25c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <icmp_input+0x2b8>)
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	885b      	ldrh	r3, [r3, #2]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8004470:	4293      	cmp	r3, r2
 8004472:	d907      	bls.n	8004484 <icmp_input+0x1d8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	885b      	ldrh	r3, [r3, #2]
 8004478:	b29b      	uxth	r3, r3
 800447a:	3309      	adds	r3, #9
 800447c:	b29a      	uxth	r2, r3
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	805a      	strh	r2, [r3, #2]
 8004482:	e006      	b.n	8004492 <icmp_input+0x1e6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	885b      	ldrh	r3, [r3, #2]
 8004488:	b29b      	uxth	r3, r3
 800448a:	3308      	adds	r3, #8
 800448c:	b29a      	uxth	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	729a      	strb	r2, [r3, #10]
 800449e:	2200      	movs	r2, #0
 80044a0:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80044a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044a4:	4619      	mov	r1, r3
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f001 ff26 	bl	80062f8 <inet_chksum>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <icmp_input+0x2b4>)
 80044b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044ba:	3301      	adds	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	4b28      	ldr	r3, [pc, #160]	; (8004560 <icmp_input+0x2b4>)
 80044c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	2301      	movs	r3, #1
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	23ff      	movs	r3, #255	; 0xff
 80044d2:	2200      	movs	r2, #0
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fb3c 	bl	8004b54 <ip4_output_if>
 80044dc:	4603      	mov	r3, r0
 80044de:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80044e0:	e012      	b.n	8004508 <icmp_input+0x25c>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 80044e2:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <icmp_input+0x2b4>)
 80044e4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80044e8:	3301      	adds	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <icmp_input+0x2b4>)
 80044ee:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <icmp_input+0x2b4>)
 80044f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80044f8:	3301      	adds	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <icmp_input+0x2b4>)
 80044fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8004502:	e002      	b.n	800450a <icmp_input+0x25e>
      break;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <icmp_input+0x25e>
      break;
 8004508:	bf00      	nop
  }
  pbuf_free(p);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f003 fae8 	bl	8007ae0 <pbuf_free>
  return;
 8004510:	e023      	b.n	800455a <icmp_input+0x2ae>
    goto lenerr;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <icmp_input+0x270>
    goto lenerr;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <icmp_input+0x270>
        goto lenerr;
 800451a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f003 fadf 	bl	8007ae0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <icmp_input+0x2b4>)
 8004524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004528:	3301      	adds	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <icmp_input+0x2b4>)
 800452e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8004532:	e012      	b.n	800455a <icmp_input+0x2ae>
        goto icmperr;
 8004534:	bf00      	nop
 8004536:	e004      	b.n	8004542 <icmp_input+0x296>
        goto icmperr;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <icmp_input+0x296>
          goto icmperr;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <icmp_input+0x296>
          goto icmperr;
 8004540:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f003 facc 	bl	8007ae0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <icmp_input+0x2b4>)
 800454a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800454e:	3301      	adds	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <icmp_input+0x2b4>)
 8004554:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8004558:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20016e44 	.word	0x20016e44
 8004564:	20013770 	.word	0x20013770
 8004568:	20013784 	.word	0x20013784
 800456c:	08019150 	.word	0x08019150
 8004570:	08019170 	.word	0x08019170
 8004574:	080191a8 	.word	0x080191a8
 8004578:	080191d0 	.word	0x080191d0

0800457c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	461a      	mov	r2, r3
 800458c:	2103      	movs	r1, #3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f814 	bl	80045bc <icmp_send_response>
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	461a      	mov	r2, r3
 80045ac:	210b      	movs	r1, #11
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f804 	bl	80045bc <icmp_send_response>
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08c      	sub	sp, #48	; 0x30
 80045c0:	af04      	add	r7, sp, #16
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
 80045c8:	4613      	mov	r3, r2
 80045ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80045cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80045d0:	2124      	movs	r1, #36	; 0x24
 80045d2:	2022      	movs	r0, #34	; 0x22
 80045d4:	f002 ff8c 	bl	80074f0 <pbuf_alloc>
 80045d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d063      	beq.n	80046a8 <icmp_send_response+0xec>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	895b      	ldrh	r3, [r3, #10]
 80045e4:	2b23      	cmp	r3, #35	; 0x23
 80045e6:	d80b      	bhi.n	8004600 <icmp_send_response+0x44>
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <icmp_send_response+0xf4>)
 80045ea:	f240 1269 	movw	r2, #361	; 0x169
 80045ee:	4931      	ldr	r1, [pc, #196]	; (80046b4 <icmp_send_response+0xf8>)
 80045f0:	4831      	ldr	r0, [pc, #196]	; (80046b8 <icmp_send_response+0xfc>)
 80045f2:	f7fc fe9d 	bl	8001330 <iprintf>
 80045f6:	2000      	movs	r0, #0
 80045f8:	f013 ff3e 	bl	8018478 <fflush>
 80045fc:	f013 fe82 	bl	8018304 <abort>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	78ba      	ldrb	r2, [r7, #2]
 8004616:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	711a      	strb	r2, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	719a      	strb	r2, [r3, #6]
 8004628:	2200      	movs	r2, #0
 800462a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f103 0008 	add.w	r0, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	221c      	movs	r2, #28
 800463a:	4619      	mov	r1, r3
 800463c:	f014 f82b 	bl	8018696 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f838 	bl	80046c0 <ip4_route>
 8004650:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d023      	beq.n	80046a0 <icmp_send_response+0xe4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	709a      	strb	r2, [r3, #2]
 800465e:	2200      	movs	r2, #0
 8004660:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	895b      	ldrh	r3, [r3, #10]
 8004666:	4619      	mov	r1, r3
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	f001 fe45 	bl	80062f8 <inet_chksum>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <icmp_send_response+0x100>)
 8004678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800467c:	3301      	adds	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <icmp_send_response+0x100>)
 8004682:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004686:	f107 020c 	add.w	r2, r7, #12
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	9302      	str	r3, [sp, #8]
 800468e:	2301      	movs	r3, #1
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	23ff      	movs	r3, #255	; 0xff
 8004698:	2100      	movs	r1, #0
 800469a:	69f8      	ldr	r0, [r7, #28]
 800469c:	f000 fa5a 	bl	8004b54 <ip4_output_if>
  }
  pbuf_free(q);
 80046a0:	69f8      	ldr	r0, [r7, #28]
 80046a2:	f003 fa1d 	bl	8007ae0 <pbuf_free>
 80046a6:	e000      	b.n	80046aa <icmp_send_response+0xee>
    return;
 80046a8:	bf00      	nop
}
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	08019150 	.word	0x08019150
 80046b4:	08019204 	.word	0x08019204
 80046b8:	080191a8 	.word	0x080191a8
 80046bc:	20016e44 	.word	0x20016e44

080046c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <ip4_route+0xe0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e033      	b.n	8004738 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d029      	beq.n	8004732 <ip4_route+0x72>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <ip4_route+0x72>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3304      	adds	r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01d      	beq.n	8004732 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	405a      	eors	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3308      	adds	r3, #8
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	e040      	b.n	8004794 <ip4_route+0xd4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <ip4_route+0x72>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	330c      	adds	r3, #12
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d101      	bne.n	8004732 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	e030      	b.n	8004794 <ip4_route+0xd4>
  NETIF_FOREACH(netif) {
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1c8      	bne.n	80046d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800473e:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <ip4_route+0xe4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01a      	beq.n	800477c <ip4_route+0xbc>
 8004746:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <ip4_route+0xe4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d012      	beq.n	800477c <ip4_route+0xbc>
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <ip4_route+0xe4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <ip4_route+0xe4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3304      	adds	r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b7f      	cmp	r3, #127	; 0x7f
 800477a:	d109      	bne.n	8004790 <ip4_route+0xd0>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <ip4_route+0xe8>)
 800477e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004782:	3301      	adds	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <ip4_route+0xe8>)
 8004788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	e001      	b.n	8004794 <ip4_route+0xd4>
  }

  return netif_default;
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <ip4_route+0xe4>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20016e38 	.word	0x20016e38
 80047a4:	20016e3c 	.word	0x20016e3c
 80047a8:	20016e44 	.word	0x20016e44

080047ac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <ip4_input_accept+0x44>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d011      	beq.n	80047f0 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <ip4_input_accept+0x50>)
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d008      	beq.n	80047ec <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <ip4_input_accept+0x50>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb19 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 80047e6:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20013770 	.word	0x20013770

08004800 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 800480e:	4ba2      	ldr	r3, [pc, #648]	; (8004a98 <ip4_input+0x298>)
 8004810:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004814:	3301      	adds	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	4b9f      	ldr	r3, [pc, #636]	; (8004a98 <ip4_input+0x298>)
 800481a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b04      	cmp	r3, #4
 800482e:	d014      	beq.n	800485a <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f003 f955 	bl	8007ae0 <pbuf_free>
    IP_STATS_INC(ip.err);
 8004836:	4b98      	ldr	r3, [pc, #608]	; (8004a98 <ip4_input+0x298>)
 8004838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800483c:	3301      	adds	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	4b95      	ldr	r3, [pc, #596]	; (8004a98 <ip4_input+0x298>)
 8004842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8004846:	4b94      	ldr	r3, [pc, #592]	; (8004a98 <ip4_input+0x298>)
 8004848:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800484c:	3301      	adds	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	4b91      	ldr	r3, [pc, #580]	; (8004a98 <ip4_input+0x298>)
 8004852:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e173      	b.n	8004b42 <ip4_input+0x342>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	b2db      	uxtb	r3, r3
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	b2db      	uxtb	r3, r3
 8004868:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	885b      	ldrh	r3, [r3, #2]
 800486e:	b29b      	uxth	r3, r3
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f9eb 	bl	8005c4c <lwip_htons>
 8004876:	4603      	mov	r3, r0
 8004878:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	891b      	ldrh	r3, [r3, #8]
 800487e:	8a3a      	ldrh	r2, [r7, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d204      	bcs.n	800488e <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8004884:	8a3b      	ldrh	r3, [r7, #16]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f002 ff53 	bl	8007734 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	895b      	ldrh	r3, [r3, #10]
 8004892:	8a7a      	ldrh	r2, [r7, #18]
 8004894:	429a      	cmp	r2, r3
 8004896:	d807      	bhi.n	80048a8 <ip4_input+0xa8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	891b      	ldrh	r3, [r3, #8]
 800489c:	8a3a      	ldrh	r2, [r7, #16]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d802      	bhi.n	80048a8 <ip4_input+0xa8>
 80048a2:	8a7b      	ldrh	r3, [r7, #18]
 80048a4:	2b13      	cmp	r3, #19
 80048a6:	d814      	bhi.n	80048d2 <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f003 f919 	bl	8007ae0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 80048ae:	4b7a      	ldr	r3, [pc, #488]	; (8004a98 <ip4_input+0x298>)
 80048b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048b4:	3301      	adds	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <ip4_input+0x298>)
 80048ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 80048be:	4b76      	ldr	r3, [pc, #472]	; (8004a98 <ip4_input+0x298>)
 80048c0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80048c4:	3301      	adds	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	4b73      	ldr	r3, [pc, #460]	; (8004a98 <ip4_input+0x298>)
 80048ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e137      	b.n	8004b42 <ip4_input+0x342>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80048d2:	8a7b      	ldrh	r3, [r7, #18]
 80048d4:	4619      	mov	r1, r3
 80048d6:	69f8      	ldr	r0, [r7, #28]
 80048d8:	f001 fd0e 	bl	80062f8 <inet_chksum>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d014      	beq.n	800490c <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f003 f8fc 	bl	8007ae0 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 80048e8:	4b6b      	ldr	r3, [pc, #428]	; (8004a98 <ip4_input+0x298>)
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ee:	3301      	adds	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <ip4_input+0x298>)
 80048f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 80048f8:	4b67      	ldr	r3, [pc, #412]	; (8004a98 <ip4_input+0x298>)
 80048fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80048fe:	3301      	adds	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <ip4_input+0x298>)
 8004904:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e11a      	b.n	8004b42 <ip4_input+0x342>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	4a62      	ldr	r2, [pc, #392]	; (8004a9c <ip4_input+0x29c>)
 8004912:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a60      	ldr	r2, [pc, #384]	; (8004a9c <ip4_input+0x29c>)
 800491a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800491c:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <ip4_input+0x29c>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004924:	2be0      	cmp	r3, #224	; 0xe0
 8004926:	d111      	bne.n	800494c <ip4_input+0x14c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <ip4_input+0x146>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <ip4_input+0x146>
      netif = inp;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	e02a      	b.n	800499c <ip4_input+0x19c>
    } else {
      netif = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e027      	b.n	800499c <ip4_input+0x19c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800494c:	6838      	ldr	r0, [r7, #0]
 800494e:	f7ff ff2d 	bl	80047ac <ip4_input_accept>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <ip4_input+0x15e>
      netif = inp;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e01e      	b.n	800499c <ip4_input+0x19c>
    } else {
      netif = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8004962:	4b4e      	ldr	r3, [pc, #312]	; (8004a9c <ip4_input+0x29c>)
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b7f      	cmp	r3, #127	; 0x7f
 800496a:	d017      	beq.n	800499c <ip4_input+0x19c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800496c:	4b4c      	ldr	r3, [pc, #304]	; (8004aa0 <ip4_input+0x2a0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e00e      	b.n	8004992 <ip4_input+0x192>
          if (netif == inp) {
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d006      	beq.n	800498a <ip4_input+0x18a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800497c:	69b8      	ldr	r0, [r7, #24]
 800497e:	f7ff ff15 	bl	80047ac <ip4_input_accept>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d108      	bne.n	800499a <ip4_input+0x19a>
 8004988:	e000      	b.n	800498c <ip4_input+0x18c>
            continue;
 800498a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ed      	bne.n	8004974 <ip4_input+0x174>
 8004998:	e000      	b.n	800499c <ip4_input+0x19c>
            break;
 800499a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d111      	bne.n	80049c6 <ip4_input+0x1c6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	7a5b      	ldrb	r3, [r3, #9]
 80049a6:	2b11      	cmp	r3, #17
 80049a8:	d10d      	bne.n	80049c6 <ip4_input+0x1c6>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80049aa:	8a7b      	ldrh	r3, [r7, #18]
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	885b      	ldrh	r3, [r3, #2]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80049bc:	d103      	bne.n	80049c6 <ip4_input+0x1c6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01f      	beq.n	8004a0c <ip4_input+0x20c>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80049cc:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <ip4_input+0x29c>)
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <ip4_input+0x20c>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <ip4_input+0x29c>)
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa1c 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <ip4_input+0x1f2>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <ip4_input+0x29c>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80049ee:	2be0      	cmp	r3, #224	; 0xe0
 80049f0:	d10c      	bne.n	8004a0c <ip4_input+0x20c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f003 f874 	bl	8007ae0 <pbuf_free>
      IP_STATS_INC(ip.drop);
 80049f8:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <ip4_input+0x298>)
 80049fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80049fe:	3301      	adds	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <ip4_input+0x298>)
 8004a04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e09a      	b.n	8004b42 <ip4_input+0x342>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10c      	bne.n	8004a2c <ip4_input+0x22c>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8004a12:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <ip4_input+0x298>)
 8004a14:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004a18:	3301      	adds	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <ip4_input+0x298>)
 8004a1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f003 f85c 	bl	8007ae0 <pbuf_free>
    return ERR_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e08a      	b.n	8004b42 <ip4_input+0x342>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	88db      	ldrh	r3, [r3, #6]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <ip4_input+0x256>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fd6e 	bl	8005520 <ip4_reass>
 8004a44:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <ip4_input+0x250>
      return ERR_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e078      	b.n	8004b42 <ip4_input+0x342>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8004a56:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <ip4_input+0x29c>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <ip4_input+0x29c>)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8004a62:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <ip4_input+0x29c>)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <ip4_input+0x29c>)
 8004a7a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8004a7c:	8a7b      	ldrh	r3, [r7, #18]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f002 ff6d 	bl	8007960 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	7a5b      	ldrb	r3, [r3, #9]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d00f      	beq.n	8004aae <ip4_input+0x2ae>
 8004a8e:	2b11      	cmp	r3, #17
 8004a90:	d008      	beq.n	8004aa4 <ip4_input+0x2a4>
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d010      	beq.n	8004ab8 <ip4_input+0x2b8>
 8004a96:	e014      	b.n	8004ac2 <ip4_input+0x2c2>
 8004a98:	20016e44 	.word	0x20016e44
 8004a9c:	20013770 	.word	0x20013770
 8004aa0:	20016e38 	.word	0x20016e38
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f00a f962 	bl	800ed70 <udp_input>
        break;
 8004aac:	e036      	b.n	8004b1c <ip4_input+0x31c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f005 fa69 	bl	8009f88 <tcp_input>
        break;
 8004ab6:	e031      	b.n	8004b1c <ip4_input+0x31c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fbf6 	bl	80042ac <icmp_input>
        break;
 8004ac0:	e02c      	b.n	8004b1c <ip4_input+0x31c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <ip4_input+0x34c>)
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f9a5 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10f      	bne.n	8004af4 <ip4_input+0x2f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <ip4_input+0x34c>)
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004adc:	2be0      	cmp	r3, #224	; 0xe0
 8004ade:	d009      	beq.n	8004af4 <ip4_input+0x2f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8004ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f002 ffb5 	bl	8007a56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8004aec:	2102      	movs	r1, #2
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fd44 	bl	800457c <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <ip4_input+0x350>)
 8004af6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004afa:	3301      	adds	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <ip4_input+0x350>)
 8004b00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <ip4_input+0x350>)
 8004b06:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <ip4_input+0x350>)
 8004b10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f002 ffe3 	bl	8007ae0 <pbuf_free>
        break;
 8004b1a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <ip4_input+0x34c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <ip4_input+0x34c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <ip4_input+0x34c>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <ip4_input+0x34c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <ip4_input+0x34c>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004b3a:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <ip4_input+0x34c>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20013770 	.word	0x20013770
 8004b50:	20016e44 	.word	0x20016e44

08004b54 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <ip4_output_if+0x26>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	9302      	str	r3, [sp, #8]
 8004b86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	4613      	mov	r3, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f805 	bl	8004ba8 <ip4_output_if_src>
 8004b9e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	7b9b      	ldrb	r3, [r3, #14]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d00b      	beq.n	8004bda <ip4_output_if_src+0x32>
 8004bc2:	4b8e      	ldr	r3, [pc, #568]	; (8004dfc <ip4_output_if_src+0x254>)
 8004bc4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8004bc8:	498d      	ldr	r1, [pc, #564]	; (8004e00 <ip4_output_if_src+0x258>)
 8004bca:	488e      	ldr	r0, [pc, #568]	; (8004e04 <ip4_output_if_src+0x25c>)
 8004bcc:	f7fc fbb0 	bl	8001330 <iprintf>
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f013 fc51 	bl	8018478 <fflush>
 8004bd6:	f013 fb95 	bl	8018304 <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80d1 	beq.w	8004d84 <ip4_output_if_src+0x1dc>
    u16_t ip_hlen = IP_HLEN;
 8004be2:	2314      	movs	r3, #20
 8004be4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8004be6:	2114      	movs	r1, #20
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f002 fea9 	bl	8007940 <pbuf_add_header>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <ip4_output_if_src+0x62>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8004bf4:	4b84      	ldr	r3, [pc, #528]	; (8004e08 <ip4_output_if_src+0x260>)
 8004bf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <ip4_output_if_src+0x260>)
 8004c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004c04:	f06f 0301 	mvn.w	r3, #1
 8004c08:	e0f4      	b.n	8004df4 <ip4_output_if_src+0x24c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	895b      	ldrh	r3, [r3, #10]
 8004c14:	2b13      	cmp	r3, #19
 8004c16:	d80b      	bhi.n	8004c30 <ip4_output_if_src+0x88>
 8004c18:	4b78      	ldr	r3, [pc, #480]	; (8004dfc <ip4_output_if_src+0x254>)
 8004c1a:	f240 3289 	movw	r2, #905	; 0x389
 8004c1e:	497b      	ldr	r1, [pc, #492]	; (8004e0c <ip4_output_if_src+0x264>)
 8004c20:	4878      	ldr	r0, [pc, #480]	; (8004e04 <ip4_output_if_src+0x25c>)
 8004c22:	f7fc fb85 	bl	8001330 <iprintf>
 8004c26:	2000      	movs	r0, #0
 8004c28:	f013 fc26 	bl	8018478 <fflush>
 8004c2c:	f013 fb6a 	bl	8018304 <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004c3c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8004c3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	4313      	orrs	r3, r2
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	b21a      	sxth	r2, r3
 8004c4c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	430b      	orrs	r3, r1
 8004c56:	121b      	asrs	r3, r3, #8
 8004c58:	b21b      	sxth	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	b21b      	sxth	r3, r3
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b21b      	sxth	r3, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004c8c:	8b7b      	ldrh	r3, [r7, #26]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004ca4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8004ca6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	b21a      	sxth	r2, r3
 8004cb6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	121b      	asrs	r3, r3, #8
 8004cc4:	b21b      	sxth	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	891b      	ldrh	r3, [r3, #8]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ffb5 	bl	8005c4c <lwip_htons>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	885b      	ldrh	r3, [r3, #2]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	719a      	strb	r2, [r3, #6]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004d02:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <ip4_output_if_src+0x268>)
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 ffa0 	bl	8005c4c <lwip_htons>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	889b      	ldrh	r3, [r3, #4]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004d22:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <ip4_output_if_src+0x268>)
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <ip4_output_if_src+0x268>)
 8004d2c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <ip4_output_if_src+0x196>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <ip4_output_if_src+0x26c>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	60da      	str	r2, [r3, #12]
 8004d3c:	e003      	b.n	8004d46 <ip4_output_if_src+0x19e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	0c1a      	lsrs	r2, r3, #16
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	815a      	strh	r2, [r3, #10]
 8004d82:	e017      	b.n	8004db4 <ip4_output_if_src+0x20c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	895b      	ldrh	r3, [r3, #10]
 8004d88:	2b13      	cmp	r3, #19
 8004d8a:	d80a      	bhi.n	8004da2 <ip4_output_if_src+0x1fa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <ip4_output_if_src+0x260>)
 8004d8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d92:	3301      	adds	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <ip4_output_if_src+0x260>)
 8004d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004d9c:	f06f 0301 	mvn.w	r3, #1
 8004da0:	e028      	b.n	8004df4 <ip4_output_if_src+0x24c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8004dae:	f107 0310 	add.w	r3, r7, #16
 8004db2:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8004db4:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <ip4_output_if_src+0x260>)
 8004db6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004dba:	3301      	adds	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <ip4_output_if_src+0x260>)
 8004dc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00c      	beq.n	8004de6 <ip4_output_if_src+0x23e>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	891a      	ldrh	r2, [r3, #8]
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d906      	bls.n	8004de6 <ip4_output_if_src+0x23e>
    return ip4_frag(p, netif, dest);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fdd5 	bl	800598c <ip4_frag>
 8004de2:	4603      	mov	r3, r0
 8004de4:	e006      	b.n	8004df4 <ip4_output_if_src+0x24c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	08019230 	.word	0x08019230
 8004e00:	0801924c 	.word	0x0801924c
 8004e04:	08019258 	.word	0x08019258
 8004e08:	20016e44 	.word	0x20016e44
 8004e0c:	08019280 	.word	0x08019280
 8004e10:	200001a2 	.word	0x200001a2
 8004e14:	0801c690 	.word	0x0801c690

08004e18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d002      	beq.n	8004e34 <ip4_addr_isbroadcast_u32+0x1c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e02a      	b.n	8004e8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e021      	b.n	8004e8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d101      	bne.n	8004e5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e019      	b.n	8004e8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	405a      	eors	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10d      	bne.n	8004e8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	43da      	mvns	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d101      	bne.n	8004e8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8004e8c:	2300      	movs	r3, #0
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <ip_reass_tmr+0x54>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8004eac:	e018      	b.n	8004ee0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	7fdb      	ldrb	r3, [r3, #31]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <ip_reass_tmr+0x32>
      r->timer--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	7fdb      	ldrb	r3, [r3, #31]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e008      	b.n	8004ee0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f80a 	bl	8004ef4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e3      	bne.n	8004eae <ip_reass_tmr+0x12>
    }
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200001a4 	.word	0x200001a4

08004ef4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d10a      	bne.n	8004f20 <ip_reass_free_complete_datagram+0x2c>
 8004f0a:	4b51      	ldr	r3, [pc, #324]	; (8005050 <ip_reass_free_complete_datagram+0x15c>)
 8004f0c:	22ab      	movs	r2, #171	; 0xab
 8004f0e:	4951      	ldr	r1, [pc, #324]	; (8005054 <ip_reass_free_complete_datagram+0x160>)
 8004f10:	4851      	ldr	r0, [pc, #324]	; (8005058 <ip_reass_free_complete_datagram+0x164>)
 8004f12:	f7fc fa0d 	bl	8001330 <iprintf>
 8004f16:	2000      	movs	r0, #0
 8004f18:	f013 faae 	bl	8018478 <fflush>
 8004f1c:	f013 f9f2 	bl	8018304 <abort>
  if (prev != NULL) {
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00f      	beq.n	8004f46 <ip_reass_free_complete_datagram+0x52>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d00a      	beq.n	8004f46 <ip_reass_free_complete_datagram+0x52>
 8004f30:	4b47      	ldr	r3, [pc, #284]	; (8005050 <ip_reass_free_complete_datagram+0x15c>)
 8004f32:	22ad      	movs	r2, #173	; 0xad
 8004f34:	4949      	ldr	r1, [pc, #292]	; (800505c <ip_reass_free_complete_datagram+0x168>)
 8004f36:	4848      	ldr	r0, [pc, #288]	; (8005058 <ip_reass_free_complete_datagram+0x164>)
 8004f38:	f7fc f9fa 	bl	8001330 <iprintf>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f013 fa9b 	bl	8018478 <fflush>
 8004f42:	f013 f9df 	bl	8018304 <abort>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	889b      	ldrh	r3, [r3, #4]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d12f      	bne.n	8004fb8 <ip_reass_free_complete_datagram+0xc4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	6858      	ldr	r0, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	2214      	movs	r2, #20
 8004f70:	4619      	mov	r1, r3
 8004f72:	f013 fb90 	bl	8018696 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8004f76:	2101      	movs	r1, #1
 8004f78:	69b8      	ldr	r0, [r7, #24]
 8004f7a:	f7ff fb0f 	bl	800459c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8004f7e:	69b8      	ldr	r0, [r7, #24]
 8004f80:	f002 fe50 	bl	8007c24 <pbuf_clen>
 8004f84:	4603      	mov	r3, r0
 8004f86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004f88:	8bfa      	ldrh	r2, [r7, #30]
 8004f8a:	8a7b      	ldrh	r3, [r7, #18]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f92:	db0a      	blt.n	8004faa <ip_reass_free_complete_datagram+0xb6>
 8004f94:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <ip_reass_free_complete_datagram+0x15c>)
 8004f96:	22bc      	movs	r2, #188	; 0xbc
 8004f98:	4931      	ldr	r1, [pc, #196]	; (8005060 <ip_reass_free_complete_datagram+0x16c>)
 8004f9a:	482f      	ldr	r0, [pc, #188]	; (8005058 <ip_reass_free_complete_datagram+0x164>)
 8004f9c:	f7fc f9c8 	bl	8001330 <iprintf>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f013 fa69 	bl	8018478 <fflush>
 8004fa6:	f013 f9ad 	bl	8018304 <abort>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8004faa:	8bfa      	ldrh	r2, [r7, #30]
 8004fac:	8a7b      	ldrh	r3, [r7, #18]
 8004fae:	4413      	add	r3, r2
 8004fb0:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8004fb2:	69b8      	ldr	r0, [r7, #24]
 8004fb4:	f002 fd94 	bl	8007ae0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8004fbe:	e024      	b.n	800500a <ip_reass_free_complete_datagram+0x116>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	617b      	str	r3, [r7, #20]
    pcur = p;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f002 fe27 	bl	8007c24 <pbuf_clen>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004fda:	8bfa      	ldrh	r2, [r7, #30]
 8004fdc:	8a7b      	ldrh	r3, [r7, #18]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	db0a      	blt.n	8004ffc <ip_reass_free_complete_datagram+0x108>
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <ip_reass_free_complete_datagram+0x15c>)
 8004fe8:	22cc      	movs	r2, #204	; 0xcc
 8004fea:	491d      	ldr	r1, [pc, #116]	; (8005060 <ip_reass_free_complete_datagram+0x16c>)
 8004fec:	481a      	ldr	r0, [pc, #104]	; (8005058 <ip_reass_free_complete_datagram+0x164>)
 8004fee:	f7fc f99f 	bl	8001330 <iprintf>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f013 fa40 	bl	8018478 <fflush>
 8004ff8:	f013 f984 	bl	8018304 <abort>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8004ffc:	8bfa      	ldrh	r2, [r7, #30]
 8004ffe:	8a7b      	ldrh	r3, [r7, #18]
 8005000:	4413      	add	r3, r2
 8005002:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f002 fd6b 	bl	8007ae0 <pbuf_free>
  while (p != NULL) {
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1d7      	bne.n	8004fc0 <ip_reass_free_complete_datagram+0xcc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8ce 	bl	80051b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <ip_reass_free_complete_datagram+0x170>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	8bfa      	ldrh	r2, [r7, #30]
 800501e:	429a      	cmp	r2, r3
 8005020:	d90a      	bls.n	8005038 <ip_reass_free_complete_datagram+0x144>
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <ip_reass_free_complete_datagram+0x15c>)
 8005024:	22d2      	movs	r2, #210	; 0xd2
 8005026:	4910      	ldr	r1, [pc, #64]	; (8005068 <ip_reass_free_complete_datagram+0x174>)
 8005028:	480b      	ldr	r0, [pc, #44]	; (8005058 <ip_reass_free_complete_datagram+0x164>)
 800502a:	f7fc f981 	bl	8001330 <iprintf>
 800502e:	2000      	movs	r0, #0
 8005030:	f013 fa22 	bl	8018478 <fflush>
 8005034:	f013 f966 	bl	8018304 <abort>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <ip_reass_free_complete_datagram+0x170>)
 800503a:	881a      	ldrh	r2, [r3, #0]
 800503c:	8bfb      	ldrh	r3, [r7, #30]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	b29a      	uxth	r2, r3
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <ip_reass_free_complete_datagram+0x170>)
 8005044:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8005046:	8bfb      	ldrh	r3, [r7, #30]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	080192b0 	.word	0x080192b0
 8005054:	080192d4 	.word	0x080192d4
 8005058:	080192e0 	.word	0x080192e0
 800505c:	08019308 	.word	0x08019308
 8005060:	0801931c 	.word	0x0801931c
 8005064:	200001a8 	.word	0x200001a8
 8005068:	0801933c 	.word	0x0801933c

0800506c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800508a:	4b28      	ldr	r3, [pc, #160]	; (800512c <ip_reass_remove_oldest_datagram+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8005090:	e030      	b.n	80050f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d10c      	bne.n	80050b8 <ip_reass_remove_oldest_datagram+0x4c>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d106      	bne.n	80050b8 <ip_reass_remove_oldest_datagram+0x4c>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	899a      	ldrh	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	889b      	ldrh	r3, [r3, #4]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d014      	beq.n	80050e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3301      	adds	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	e009      	b.n	80050e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	7fda      	ldrb	r2, [r3, #31]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	7fdb      	ldrb	r3, [r3, #31]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d803      	bhi.n	80050e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1cb      	bne.n	8005092 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	6a38      	ldr	r0, [r7, #32]
 8005104:	f7ff fef6 	bl	8004ef4 <ip_reass_free_complete_datagram>
 8005108:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	da02      	bge.n	8005120 <ip_reass_remove_oldest_datagram+0xb4>
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b01      	cmp	r3, #1
 800511e:	dcac      	bgt.n	800507a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8005120:	697b      	ldr	r3, [r7, #20]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200001a4 	.word	0x200001a4

08005130 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800513a:	2004      	movs	r0, #4
 800513c:	f001 fe48 	bl	8006dd0 <memp_malloc>
 8005140:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d116      	bne.n	8005176 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ff8e 	bl	800506c <ip_reass_remove_oldest_datagram>
 8005150:	4602      	mov	r2, r0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	db03      	blt.n	8005160 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005158:	2004      	movs	r0, #4
 800515a:	f001 fe39 	bl	8006dd0 <memp_malloc>
 800515e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d107      	bne.n	8005176 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8005166:	4b11      	ldr	r3, [pc, #68]	; (80051ac <ip_reass_enqueue_new_datagram+0x7c>)
 8005168:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800516a:	3301      	adds	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <ip_reass_enqueue_new_datagram+0x7c>)
 8005170:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	e016      	b.n	80051a4 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8005176:	2220      	movs	r2, #32
 8005178:	2100      	movs	r1, #0
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f013 fa96 	bl	80186ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	220f      	movs	r2, #15
 8005184:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <ip_reass_enqueue_new_datagram+0x80>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <ip_reass_enqueue_new_datagram+0x80>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3308      	adds	r3, #8
 8005198:	2214      	movs	r2, #20
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4618      	mov	r0, r3
 800519e:	f013 fa7a 	bl	8018696 <memcpy>
  return ipr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20016e44 	.word	0x20016e44
 80051b0:	200001a4 	.word	0x200001a4

080051b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <ip_reass_dequeue_datagram+0x54>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d104      	bne.n	80051d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <ip_reass_dequeue_datagram+0x54>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e012      	b.n	80051f8 <ip_reass_dequeue_datagram+0x44>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <ip_reass_dequeue_datagram+0x3c>
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <ip_reass_dequeue_datagram+0x58>)
 80051da:	f240 1245 	movw	r2, #325	; 0x145
 80051de:	490c      	ldr	r1, [pc, #48]	; (8005210 <ip_reass_dequeue_datagram+0x5c>)
 80051e0:	480c      	ldr	r0, [pc, #48]	; (8005214 <ip_reass_dequeue_datagram+0x60>)
 80051e2:	f7fc f8a5 	bl	8001330 <iprintf>
 80051e6:	2000      	movs	r0, #0
 80051e8:	f013 f946 	bl	8018478 <fflush>
 80051ec:	f013 f88a 	bl	8018304 <abort>
    prev->next = ipr->next;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	2004      	movs	r0, #4
 80051fc:	f001 fe32 	bl	8006e64 <memp_free>
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	200001a4 	.word	0x200001a4
 800520c:	080192b0 	.word	0x080192b0
 8005210:	08019360 	.word	0x08019360
 8005214:	080192e0 	.word	0x080192e0

08005218 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	; 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8005228:	2301      	movs	r3, #1
 800522a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	885b      	ldrh	r3, [r3, #2]
 8005236:	b29b      	uxth	r3, r3
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fd07 	bl	8005c4c <lwip_htons>
 800523e:	4603      	mov	r3, r0
 8005240:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	b2db      	uxtb	r3, r3
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8005250:	7e7b      	ldrb	r3, [r7, #25]
 8005252:	b29b      	uxth	r3, r3
 8005254:	8b7a      	ldrh	r2, [r7, #26]
 8005256:	429a      	cmp	r2, r3
 8005258:	d202      	bcs.n	8005260 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	e14e      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
  }
  len = (u16_t)(len - hlen);
 8005260:	7e7b      	ldrb	r3, [r7, #25]
 8005262:	b29b      	uxth	r3, r3
 8005264:	8b7a      	ldrh	r2, [r7, #26]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	88db      	ldrh	r3, [r3, #6]
 800526e:	b29b      	uxth	r3, r3
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fceb 	bl	8005c4c <lwip_htons>
 8005276:	4603      	mov	r3, r0
 8005278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800527c:	b29b      	uxth	r3, r3
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	705a      	strb	r2, [r3, #1]
 8005292:	2200      	movs	r2, #0
 8005294:	709a      	strb	r2, [r3, #2]
 8005296:	2200      	movs	r2, #0
 8005298:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	8afa      	ldrh	r2, [r7, #22]
 800529e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80052a0:	8afa      	ldrh	r2, [r7, #22]
 80052a2:	8b7b      	ldrh	r3, [r7, #26]
 80052a4:	4413      	add	r3, r2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	88db      	ldrh	r3, [r3, #6]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8afa      	ldrh	r2, [r7, #22]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d902      	bls.n	80052be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	e11f      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	e068      	b.n	8005398 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	889b      	ldrh	r3, [r3, #4]
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	889b      	ldrh	r3, [r3, #4]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	429a      	cmp	r2, r3
 80052da:	d235      	bcs.n	8005348 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d020      	beq.n	800532a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	889b      	ldrh	r3, [r3, #4]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d307      	bcc.n	8005308 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	88db      	ldrh	r3, [r3, #6]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	889b      	ldrh	r3, [r3, #4]
 8005302:	b29b      	uxth	r3, r3
 8005304:	429a      	cmp	r2, r3
 8005306:	d902      	bls.n	800530e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	e0f7      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	88db      	ldrh	r3, [r3, #6]
 8005318:	b29a      	uxth	r2, r3
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	889b      	ldrh	r3, [r3, #4]
 800531e:	b29b      	uxth	r3, r3
 8005320:	429a      	cmp	r2, r3
 8005322:	d03d      	beq.n	80053a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8005328:	e03a      	b.n	80053a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	88db      	ldrh	r3, [r3, #6]
 800532e:	b29a      	uxth	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	889b      	ldrh	r3, [r3, #4]
 8005334:	b29b      	uxth	r3, r3
 8005336:	429a      	cmp	r2, r3
 8005338:	d902      	bls.n	8005340 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	e0de      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
        ipr->p = new_p;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	605a      	str	r2, [r3, #4]
      break;
 8005346:	e02b      	b.n	80053a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	889b      	ldrh	r3, [r3, #4]
 800534c:	b29a      	uxth	r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	889b      	ldrh	r3, [r3, #4]
 8005352:	b29b      	uxth	r3, r3
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	e0cf      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	889b      	ldrh	r3, [r3, #4]
 8005362:	b29a      	uxth	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	88db      	ldrh	r3, [r3, #6]
 8005368:	b29b      	uxth	r3, r3
 800536a:	429a      	cmp	r2, r3
 800536c:	d202      	bcs.n	8005374 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	e0c4      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	88db      	ldrh	r3, [r3, #6]
 800537e:	b29a      	uxth	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	b29b      	uxth	r3, r3
 8005386:	429a      	cmp	r2, r3
 8005388:	d001      	beq.n	800538e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d193      	bne.n	80052c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800539e:	e000      	b.n	80053a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80053a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d137      	bne.n	8005418 <ip_reass_chain_frag_into_datagram_and_validate+0x200>
    if (iprh_prev != NULL) {
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d021      	beq.n	80053f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1da>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	88db      	ldrh	r3, [r3, #6]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	889b      	ldrh	r3, [r3, #4]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d90b      	bls.n	80053d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
 80053be:	4b52      	ldr	r3, [pc, #328]	; (8005508 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 80053c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80053c4:	4951      	ldr	r1, [pc, #324]	; (800550c <ip_reass_chain_frag_into_datagram_and_validate+0x2f4>)
 80053c6:	4852      	ldr	r0, [pc, #328]	; (8005510 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 80053c8:	f7fb ffb2 	bl	8001330 <iprintf>
 80053cc:	2000      	movs	r0, #0
 80053ce:	f013 f853 	bl	8018478 <fflush>
 80053d2:	f012 ff97 	bl	8018304 <abort>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	889b      	ldrh	r3, [r3, #4]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d015      	beq.n	8005418 <ip_reass_chain_frag_into_datagram_and_validate+0x200>
        valid = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	e012      	b.n	8005418 <ip_reass_chain_frag_into_datagram_and_validate+0x200>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <ip_reass_chain_frag_into_datagram_and_validate+0x1fa>
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 80053fc:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005400:	4944      	ldr	r1, [pc, #272]	; (8005514 <ip_reass_chain_frag_into_datagram_and_validate+0x2fc>)
 8005402:	4843      	ldr	r0, [pc, #268]	; (8005510 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 8005404:	f7fb ff94 	bl	8001330 <iprintf>
 8005408:	2000      	movs	r0, #0
 800540a:	f013 f835 	bl	8018478 <fflush>
 800540e:	f012 ff79 	bl	8018304 <abort>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <ip_reass_chain_frag_into_datagram_and_validate+0x212>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	7f9b      	ldrb	r3, [r3, #30]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d068      	beq.n	80054fc <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>
    /* and had no holes so far */
    if (valid) {
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05e      	beq.n	80054ee <ip_reass_chain_frag_into_datagram_and_validate+0x2d6>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d006      	beq.n	8005446 <ip_reass_chain_frag_into_datagram_and_validate+0x22e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	889b      	ldrh	r3, [r3, #4]
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        valid = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	e050      	b.n	80054ee <ip_reass_chain_frag_into_datagram_and_validate+0x2d6>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8005456:	e012      	b.n	800547e <ip_reass_chain_frag_into_datagram_and_validate+0x266>
          iprh = (struct ip_reass_helper *)q->payload;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	b29a      	uxth	r2, r3
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	889b      	ldrh	r3, [r3, #4]
 8005468:	b29b      	uxth	r3, r3
 800546a:	429a      	cmp	r2, r3
 800546c:	d002      	beq.n	8005474 <ip_reass_chain_frag_into_datagram_and_validate+0x25c>
            valid = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	623b      	str	r3, [r7, #32]
            break;
 8005472:	e007      	b.n	8005484 <ip_reass_chain_frag_into_datagram_and_validate+0x26c>
          }
          iprh_prev = iprh;
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e9      	bne.n	8005458 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d031      	beq.n	80054ee <ip_reass_chain_frag_into_datagram_and_validate+0x2d6>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <ip_reass_chain_frag_into_datagram_and_validate+0x292>
 8005492:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 8005494:	f240 12df 	movw	r2, #479	; 0x1df
 8005498:	491f      	ldr	r1, [pc, #124]	; (8005518 <ip_reass_chain_frag_into_datagram_and_validate+0x300>)
 800549a:	481d      	ldr	r0, [pc, #116]	; (8005510 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 800549c:	f7fb ff48 	bl	8001330 <iprintf>
 80054a0:	2000      	movs	r0, #0
 80054a2:	f012 ffe9 	bl	8018478 <fflush>
 80054a6:	f012 ff2d 	bl	8018304 <abort>
          LWIP_ASSERT("sanity check",
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d10b      	bne.n	80054ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b6>
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 80054b8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80054bc:	4916      	ldr	r1, [pc, #88]	; (8005518 <ip_reass_chain_frag_into_datagram_and_validate+0x300>)
 80054be:	4814      	ldr	r0, [pc, #80]	; (8005510 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 80054c0:	f7fb ff36 	bl	8001330 <iprintf>
 80054c4:	2000      	movs	r0, #0
 80054c6:	f012 ffd7 	bl	8018478 <fflush>
 80054ca:	f012 ff1b 	bl	8018304 <abort>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <ip_reass_chain_frag_into_datagram_and_validate+0x2d6>
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 80054d8:	f240 12e3 	movw	r2, #483	; 0x1e3
 80054dc:	490f      	ldr	r1, [pc, #60]	; (800551c <ip_reass_chain_frag_into_datagram_and_validate+0x304>)
 80054de:	480c      	ldr	r0, [pc, #48]	; (8005510 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 80054e0:	f7fb ff26 	bl	8001330 <iprintf>
 80054e4:	2000      	movs	r0, #0
 80054e6:	f012 ffc7 	bl	8018478 <fflush>
 80054ea:	f012 ff0b 	bl	8018304 <abort>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e000      	b.n	80054fe <ip_reass_chain_frag_into_datagram_and_validate+0x2e6>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3730      	adds	r7, #48	; 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	080192b0 	.word	0x080192b0
 800550c:	0801937c 	.word	0x0801937c
 8005510:	080192e0 	.word	0x080192e0
 8005514:	0801939c 	.word	0x0801939c
 8005518:	080193d4 	.word	0x080193d4
 800551c:	080193e4 	.word	0x080193e4

08005520 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8005528:	4ba3      	ldr	r3, [pc, #652]	; (80057b8 <ip4_reass+0x298>)
 800552a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800552c:	3301      	adds	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	4ba1      	ldr	r3, [pc, #644]	; (80057b8 <ip4_reass+0x298>)
 8005532:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	b2db      	uxtb	r3, r3
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b14      	cmp	r3, #20
 800554a:	d008      	beq.n	800555e <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800554c:	4b9a      	ldr	r3, [pc, #616]	; (80057b8 <ip4_reass+0x298>)
 800554e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005552:	3301      	adds	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	4b98      	ldr	r3, [pc, #608]	; (80057b8 <ip4_reass+0x298>)
 8005558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 800555c:	e18f      	b.n	800587e <ip4_reass+0x35e>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	b29b      	uxth	r3, r3
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fb71 	bl	8005c4c <lwip_htons>
 800556a:	4603      	mov	r3, r0
 800556c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005570:	b29b      	uxth	r3, r3
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	885b      	ldrh	r3, [r3, #2]
 800557a:	b29b      	uxth	r3, r3
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fb65 	bl	8005c4c <lwip_htons>
 8005582:	4603      	mov	r3, r0
 8005584:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	b2db      	uxtb	r3, r3
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8005596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800559a:	b29b      	uxth	r3, r3
 800559c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800559e:	429a      	cmp	r2, r3
 80055a0:	f0c0 816c 	bcc.w	800587c <ip4_reass+0x35c>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80055a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fb37 	bl	8007c24 <pbuf_clen>
 80055b6:	4603      	mov	r3, r0
 80055b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80055ba:	4b80      	ldr	r3, [pc, #512]	; (80057bc <ip4_reass+0x29c>)
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	8c3b      	ldrh	r3, [r7, #32]
 80055c2:	4413      	add	r3, r2
 80055c4:	2b0a      	cmp	r3, #10
 80055c6:	dd15      	ble.n	80055f4 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80055c8:	8c3b      	ldrh	r3, [r7, #32]
 80055ca:	4619      	mov	r1, r3
 80055cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ce:	f7ff fd4d 	bl	800506c <ip_reass_remove_oldest_datagram>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80055d8:	4b78      	ldr	r3, [pc, #480]	; (80057bc <ip4_reass+0x29c>)
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	8c3b      	ldrh	r3, [r7, #32]
 80055e0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80055e2:	2b0a      	cmp	r3, #10
 80055e4:	dd06      	ble.n	80055f4 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 80055e6:	4b74      	ldr	r3, [pc, #464]	; (80057b8 <ip4_reass+0x298>)
 80055e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80055ea:	3301      	adds	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	4b72      	ldr	r3, [pc, #456]	; (80057b8 <ip4_reass+0x298>)
 80055f0:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 80055f2:	e144      	b.n	800587e <ip4_reass+0x35e>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80055f4:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <ip4_reass+0x2a0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	633b      	str	r3, [r7, #48]	; 0x30
 80055fa:	e01e      	b.n	800563a <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d115      	bne.n	8005634 <ip4_reass+0x114>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	429a      	cmp	r2, r3
 8005612:	d10f      	bne.n	8005634 <ip4_reass+0x114>
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	899a      	ldrh	r2, [r3, #12]
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	889b      	ldrh	r3, [r3, #4]
 800561c:	b29b      	uxth	r3, r3
 800561e:	429a      	cmp	r2, r3
 8005620:	d108      	bne.n	8005634 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8005622:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <ip4_reass+0x298>)
 8005624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005628:	3301      	adds	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	4b62      	ldr	r3, [pc, #392]	; (80057b8 <ip4_reass+0x298>)
 800562e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8005632:	e005      	b.n	8005640 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1dd      	bne.n	80055fc <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8005646:	8c3b      	ldrh	r3, [r7, #32]
 8005648:	4619      	mov	r1, r3
 800564a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564c:	f7ff fd70 	bl	8005130 <ip_reass_enqueue_new_datagram>
 8005650:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11c      	bne.n	8005692 <ip4_reass+0x172>
      goto nullreturn;
 8005658:	e111      	b.n	800587e <ip4_reass+0x35e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	88db      	ldrh	r3, [r3, #6]
 800565e:	b29b      	uxth	r3, r3
 8005660:	4618      	mov	r0, r3
 8005662:	f000 faf3 	bl	8005c4c <lwip_htons>
 8005666:	4603      	mov	r3, r0
 8005668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800566c:	2b00      	cmp	r3, #0
 800566e:	d110      	bne.n	8005692 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	89db      	ldrh	r3, [r3, #14]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fae9 	bl	8005c4c <lwip_htons>
 800567a:	4603      	mov	r3, r0
 800567c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005680:	2b00      	cmp	r3, #0
 8005682:	d006      	beq.n	8005692 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	3308      	adds	r3, #8
 8005688:	2214      	movs	r2, #20
 800568a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800568c:	4618      	mov	r0, r3
 800568e:	f013 f802 	bl	8018696 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00e      	beq.n	80056cc <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 80056ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056b2:	4413      	add	r3, r2
 80056b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80056b6:	8b7a      	ldrh	r2, [r7, #26]
 80056b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ba:	429a      	cmp	r2, r3
 80056bc:	f0c0 80b5 	bcc.w	800582a <ip4_reass+0x30a>
 80056c0:	8b7b      	ldrh	r3, [r7, #26]
 80056c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80056c6:	4293      	cmp	r3, r2
 80056c8:	f200 80af 	bhi.w	800582a <ip4_reass+0x30a>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d2:	f7ff fda1 	bl	8005218 <ip_reass_chain_frag_into_datagram_and_validate>
 80056d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	f000 80a3 	beq.w	8005828 <ip4_reass+0x308>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <ip4_reass+0x29c>)
 80056e4:	881a      	ldrh	r2, [r3, #0]
 80056e6:	8c3b      	ldrh	r3, [r7, #32]
 80056e8:	4413      	add	r3, r2
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	4b33      	ldr	r3, [pc, #204]	; (80057bc <ip4_reass+0x29c>)
 80056ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 80056f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fa:	4413      	add	r3, r2
 80056fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	8a7a      	ldrh	r2, [r7, #18]
 8005702:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	7f9b      	ldrb	r3, [r3, #30]
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	b2da      	uxtb	r2, r3
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b01      	cmp	r3, #1
 8005716:	f040 8085 	bne.w	8005824 <ip4_reass+0x304>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	8b9b      	ldrh	r3, [r3, #28]
 800571e:	3314      	adds	r3, #20
 8005720:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	3308      	adds	r3, #8
 8005738:	2214      	movs	r2, #20
 800573a:	4619      	mov	r1, r3
 800573c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573e:	f012 ffaa 	bl	8018696 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8005742:	8a3b      	ldrh	r3, [r7, #16]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fa81 	bl	8005c4c <lwip_htons>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	2200      	movs	r2, #0
 8005756:	719a      	strb	r2, [r3, #6]
 8005758:	2200      	movs	r2, #0
 800575a:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	2200      	movs	r2, #0
 8005760:	729a      	strb	r2, [r3, #10]
 8005762:	2200      	movs	r2, #0
 8005764:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8005766:	2114      	movs	r1, #20
 8005768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576a:	f000 fdc5 	bl	80062f8 <inet_chksum>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800577c:	e00d      	b.n	800579a <ip4_reass+0x27a>
      iprh = (struct ip_reass_helper *)r->payload;
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8005784:	2114      	movs	r1, #20
 8005786:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005788:	f002 f8ea 	bl	8007960 <pbuf_remove_header>
      pbuf_cat(p, r);
 800578c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f002 fa8e 	bl	8007cb0 <pbuf_cat>
      r = iprh->next_pbuf;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ee      	bne.n	800577e <ip4_reass+0x25e>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <ip4_reass+0x2a0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d102      	bne.n	80057b0 <ip4_reass+0x290>
      ipr_prev = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ae:	e016      	b.n	80057de <ip4_reass+0x2be>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80057b0:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <ip4_reass+0x2a0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b6:	e00d      	b.n	80057d4 <ip4_reass+0x2b4>
 80057b8:	20016e44 	.word	0x20016e44
 80057bc:	200001a8 	.word	0x200001a8
 80057c0:	200001a4 	.word	0x200001a4
        if (ipr_prev->next == ipr) {
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d006      	beq.n	80057dc <ip4_reass+0x2bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f4      	bne.n	80057c4 <ip4_reass+0x2a4>
 80057da:	e000      	b.n	80057de <ip4_reass+0x2be>
          break;
 80057dc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80057de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e2:	f7ff fce7 	bl	80051b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f002 fa1c 	bl	8007c24 <pbuf_clen>
 80057ec:	4603      	mov	r3, r0
 80057ee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80057f0:	4b2a      	ldr	r3, [pc, #168]	; (800589c <ip4_reass+0x37c>)
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	8c3a      	ldrh	r2, [r7, #32]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d90b      	bls.n	8005812 <ip4_reass+0x2f2>
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <ip4_reass+0x380>)
 80057fc:	f240 229b 	movw	r2, #667	; 0x29b
 8005800:	4928      	ldr	r1, [pc, #160]	; (80058a4 <ip4_reass+0x384>)
 8005802:	4829      	ldr	r0, [pc, #164]	; (80058a8 <ip4_reass+0x388>)
 8005804:	f7fb fd94 	bl	8001330 <iprintf>
 8005808:	2000      	movs	r0, #0
 800580a:	f012 fe35 	bl	8018478 <fflush>
 800580e:	f012 fd79 	bl	8018304 <abort>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8005812:	4b22      	ldr	r3, [pc, #136]	; (800589c <ip4_reass+0x37c>)
 8005814:	881a      	ldrh	r2, [r3, #0]
 8005816:	8c3b      	ldrh	r3, [r7, #32]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	b29a      	uxth	r2, r3
 800581c:	4b1f      	ldr	r3, [pc, #124]	; (800589c <ip4_reass+0x37c>)
 800581e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	e036      	b.n	8005892 <ip4_reass+0x372>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	e034      	b.n	8005892 <ip4_reass+0x372>
    goto nullreturn_ipr;
 8005828:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <ip4_reass+0x328>
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <ip4_reass+0x380>)
 8005832:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8005836:	491d      	ldr	r1, [pc, #116]	; (80058ac <ip4_reass+0x38c>)
 8005838:	481b      	ldr	r0, [pc, #108]	; (80058a8 <ip4_reass+0x388>)
 800583a:	f7fb fd79 	bl	8001330 <iprintf>
 800583e:	2000      	movs	r0, #0
 8005840:	f012 fe1a 	bl	8018478 <fflush>
 8005844:	f012 fd5e 	bl	8018304 <abort>
  if (ipr->p == NULL) {
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <ip4_reass+0x35e>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <ip4_reass+0x390>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005856:	429a      	cmp	r2, r3
 8005858:	d00b      	beq.n	8005872 <ip4_reass+0x352>
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <ip4_reass+0x380>)
 800585c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8005860:	4914      	ldr	r1, [pc, #80]	; (80058b4 <ip4_reass+0x394>)
 8005862:	4811      	ldr	r0, [pc, #68]	; (80058a8 <ip4_reass+0x388>)
 8005864:	f7fb fd64 	bl	8001330 <iprintf>
 8005868:	2000      	movs	r0, #0
 800586a:	f012 fe05 	bl	8018478 <fflush>
 800586e:	f012 fd49 	bl	8018304 <abort>
    ip_reass_dequeue_datagram(ipr, NULL);
 8005872:	2100      	movs	r1, #0
 8005874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005876:	f7ff fc9d 	bl	80051b4 <ip_reass_dequeue_datagram>
 800587a:	e000      	b.n	800587e <ip4_reass+0x35e>
    goto nullreturn;
 800587c:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <ip4_reass+0x398>)
 8005880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005882:	3301      	adds	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <ip4_reass+0x398>)
 8005888:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f002 f928 	bl	8007ae0 <pbuf_free>
  return NULL;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3738      	adds	r7, #56	; 0x38
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200001a8 	.word	0x200001a8
 80058a0:	080192b0 	.word	0x080192b0
 80058a4:	08019408 	.word	0x08019408
 80058a8:	080192e0 	.word	0x080192e0
 80058ac:	08019424 	.word	0x08019424
 80058b0:	200001a4 	.word	0x200001a4
 80058b4:	08019430 	.word	0x08019430
 80058b8:	20016e44 	.word	0x20016e44

080058bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80058c0:	2005      	movs	r0, #5
 80058c2:	f001 fa85 	bl	8006dd0 <memp_malloc>
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}

080058cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <ip_frag_free_pbuf_custom_ref+0x26>
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <ip_frag_free_pbuf_custom_ref+0x38>)
 80058dc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80058e0:	4909      	ldr	r1, [pc, #36]	; (8005908 <ip_frag_free_pbuf_custom_ref+0x3c>)
 80058e2:	480a      	ldr	r0, [pc, #40]	; (800590c <ip_frag_free_pbuf_custom_ref+0x40>)
 80058e4:	f7fb fd24 	bl	8001330 <iprintf>
 80058e8:	2000      	movs	r0, #0
 80058ea:	f012 fdc5 	bl	8018478 <fflush>
 80058ee:	f012 fd09 	bl	8018304 <abort>
  memp_free(MEMP_FRAG_PBUF, p);
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	2005      	movs	r0, #5
 80058f6:	f001 fab5 	bl	8006e64 <memp_free>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	080192b0 	.word	0x080192b0
 8005908:	08019450 	.word	0x08019450
 800590c:	080192e0 	.word	0x080192e0

08005910 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <ipfrag_free_pbuf_custom+0x2a>
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <ipfrag_free_pbuf_custom+0x6c>)
 8005924:	f240 22ce 	movw	r2, #718	; 0x2ce
 8005928:	4915      	ldr	r1, [pc, #84]	; (8005980 <ipfrag_free_pbuf_custom+0x70>)
 800592a:	4816      	ldr	r0, [pc, #88]	; (8005984 <ipfrag_free_pbuf_custom+0x74>)
 800592c:	f7fb fd00 	bl	8001330 <iprintf>
 8005930:	2000      	movs	r0, #0
 8005932:	f012 fda1 	bl	8018478 <fflush>
 8005936:	f012 fce5 	bl	8018304 <abort>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d00b      	beq.n	800595a <ipfrag_free_pbuf_custom+0x4a>
 8005942:	4b0e      	ldr	r3, [pc, #56]	; (800597c <ipfrag_free_pbuf_custom+0x6c>)
 8005944:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005948:	490f      	ldr	r1, [pc, #60]	; (8005988 <ipfrag_free_pbuf_custom+0x78>)
 800594a:	480e      	ldr	r0, [pc, #56]	; (8005984 <ipfrag_free_pbuf_custom+0x74>)
 800594c:	f7fb fcf0 	bl	8001330 <iprintf>
 8005950:	2000      	movs	r0, #0
 8005952:	f012 fd91 	bl	8018478 <fflush>
 8005956:	f012 fcd5 	bl	8018304 <abort>
  if (pcr->original != NULL) {
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <ipfrag_free_pbuf_custom+0x5c>
    pbuf_free(pcr->original);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	4618      	mov	r0, r3
 8005968:	f002 f8ba 	bl	8007ae0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff ffad 	bl	80058cc <ip_frag_free_pbuf_custom_ref>
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	080192b0 	.word	0x080192b0
 8005980:	0801945c 	.word	0x0801945c
 8005984:	080192e0 	.word	0x080192e0
 8005988:	08019468 	.word	0x08019468

0800598c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b094      	sub	sp, #80	; 0x50
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059a2:	3b14      	subs	r3, #20
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	da00      	bge.n	80059aa <ip4_frag+0x1e>
 80059a8:	3307      	adds	r3, #7
 80059aa:	10db      	asrs	r3, r3, #3
 80059ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80059ae:	2314      	movs	r3, #20
 80059b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b14      	cmp	r3, #20
 80059cc:	d002      	beq.n	80059d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80059ce:	f06f 0305 	mvn.w	r3, #5
 80059d2:	e129      	b.n	8005c28 <ip4_frag+0x29c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	895b      	ldrh	r3, [r3, #10]
 80059d8:	2b13      	cmp	r3, #19
 80059da:	d80b      	bhi.n	80059f4 <ip4_frag+0x68>
 80059dc:	4b94      	ldr	r3, [pc, #592]	; (8005c30 <ip4_frag+0x2a4>)
 80059de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80059e2:	4994      	ldr	r1, [pc, #592]	; (8005c34 <ip4_frag+0x2a8>)
 80059e4:	4894      	ldr	r0, [pc, #592]	; (8005c38 <ip4_frag+0x2ac>)
 80059e6:	f7fb fca3 	bl	8001330 <iprintf>
 80059ea:	2000      	movs	r0, #0
 80059ec:	f012 fd44 	bl	8018478 <fflush>
 80059f0:	f012 fc88 	bl	8018304 <abort>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	88db      	ldrh	r3, [r3, #6]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f926 	bl	8005c4c <lwip_htons>
 8005a00:	4603      	mov	r3, r0
 8005a02:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8005a04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8005a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	891b      	ldrh	r3, [r3, #8]
 8005a1a:	3b14      	subs	r3, #20
 8005a1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8005a20:	e0f8      	b.n	8005c14 <ip4_frag+0x288>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8005a22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bf28      	it	cs
 8005a30:	4613      	movcs	r3, r2
 8005a32:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005a34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005a38:	2114      	movs	r1, #20
 8005a3a:	200e      	movs	r0, #14
 8005a3c:	f001 fd58 	bl	80074f0 <pbuf_alloc>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80ec 	beq.w	8005c22 <ip4_frag+0x296>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	895b      	ldrh	r3, [r3, #10]
 8005a4e:	2b13      	cmp	r3, #19
 8005a50:	d80b      	bhi.n	8005a6a <ip4_frag+0xde>
 8005a52:	4b77      	ldr	r3, [pc, #476]	; (8005c30 <ip4_frag+0x2a4>)
 8005a54:	f240 3225 	movw	r2, #805	; 0x325
 8005a58:	4978      	ldr	r1, [pc, #480]	; (8005c3c <ip4_frag+0x2b0>)
 8005a5a:	4877      	ldr	r0, [pc, #476]	; (8005c38 <ip4_frag+0x2ac>)
 8005a5c:	f7fb fc68 	bl	8001330 <iprintf>
 8005a60:	2000      	movs	r0, #0
 8005a62:	f012 fd09 	bl	8018478 <fflush>
 8005a66:	f012 fc4d 	bl	8018304 <abort>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2214      	movs	r2, #20
 8005a70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a72:	4618      	mov	r0, r3
 8005a74:	f012 fe0f 	bl	8018696 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8005a7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8005a84:	e069      	b.n	8005b5a <ip4_frag+0x1ce>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	895a      	ldrh	r2, [r3, #10]
 8005a8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	895b      	ldrh	r3, [r3, #10]
 8005a94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d90b      	bls.n	8005ab2 <ip4_frag+0x126>
 8005a9a:	4b65      	ldr	r3, [pc, #404]	; (8005c30 <ip4_frag+0x2a4>)
 8005a9c:	f240 322d 	movw	r2, #813	; 0x32d
 8005aa0:	4967      	ldr	r1, [pc, #412]	; (8005c40 <ip4_frag+0x2b4>)
 8005aa2:	4865      	ldr	r0, [pc, #404]	; (8005c38 <ip4_frag+0x2ac>)
 8005aa4:	f7fb fc44 	bl	8001330 <iprintf>
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f012 fce5 	bl	8018478 <fflush>
 8005aae:	f012 fc29 	bl	8018304 <abort>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8005ab2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005ab4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	bf28      	it	cs
 8005abc:	4613      	movcs	r3, r2
 8005abe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8005ac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <ip4_frag+0x14a>
        poff = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]
        continue;
 8005ad4:	e041      	b.n	8005b5a <ip4_frag+0x1ce>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8005ad6:	f7ff fef1 	bl	80058bc <ip_frag_alloc_pbuf_custom_ref>
 8005ada:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <ip4_frag+0x15e>
        pbuf_free(rambuf);
 8005ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ae4:	f001 fffc 	bl	8007ae0 <pbuf_free>
        goto memerr;
 8005ae8:	e09c      	b.n	8005c24 <ip4_frag+0x298>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8005aea:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8005af0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005af2:	4413      	add	r3, r2
 8005af4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8005af8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005afc:	9201      	str	r2, [sp, #4]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4603      	mov	r3, r0
 8005b02:	2241      	movs	r2, #65	; 0x41
 8005b04:	2000      	movs	r0, #0
 8005b06:	f001 fde7 	bl	80076d8 <pbuf_alloced_custom>
 8005b0a:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <ip4_frag+0x194>
        ip_frag_free_pbuf_custom_ref(pcr);
 8005b12:	69f8      	ldr	r0, [r7, #28]
 8005b14:	f7ff feda 	bl	80058cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8005b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b1a:	f001 ffe1 	bl	8007ae0 <pbuf_free>
        goto memerr;
 8005b1e:	e081      	b.n	8005c24 <ip4_frag+0x298>
      }
      pbuf_ref(p);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f002 f897 	bl	8007c54 <pbuf_ref>
      pcr->original = p;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4a45      	ldr	r2, [pc, #276]	; (8005c44 <ip4_frag+0x2b8>)
 8005b30:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8005b32:	69b9      	ldr	r1, [r7, #24]
 8005b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b36:	f002 f8bb 	bl	8007cb0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8005b3a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8005b3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8005b48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <ip4_frag+0x1ce>
        poff = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8005b5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d191      	bne.n	8005a86 <ip4_frag+0xfa>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8005b62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005b64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b68:	4413      	add	r3, r2
 8005b6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8005b6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b74:	3b14      	subs	r3, #20
 8005b76:	429a      	cmp	r2, r3
 8005b78:	bfd4      	ite	le
 8005b7a:	2301      	movle	r3, #1
 8005b7c:	2300      	movgt	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8005b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <ip4_frag+0x20c>
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <ip4_frag+0x214>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8005b98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8005ba0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f852 	bl	8005c4c <lwip_htons>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8005bb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f848 	bl	8005c4c <lwip_htons>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	729a      	strb	r2, [r3, #10]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8005bce:	2114      	movs	r1, #20
 8005bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd2:	f000 fb91 	bl	80062f8 <inet_chksum>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005be6:	68b8      	ldr	r0, [r7, #8]
 8005be8:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <ip4_frag+0x2bc>)
 8005bec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <ip4_frag+0x2bc>)
 8005bf4:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8005bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf8:	f001 ff72 	bl	8007ae0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8005bfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005c00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8005c08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005c0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c0e:	4413      	add	r3, r2
 8005c10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8005c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f af02 	bne.w	8005a22 <ip4_frag+0x96>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e002      	b.n	8005c28 <ip4_frag+0x29c>
      goto memerr;
 8005c22:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3748      	adds	r7, #72	; 0x48
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	080192b0 	.word	0x080192b0
 8005c34:	08019474 	.word	0x08019474
 8005c38:	080192e0 	.word	0x080192e0
 8005c3c:	08019490 	.word	0x08019490
 8005c40:	080194b0 	.word	0x080194b0
 8005c44:	08005911 	.word	0x08005911
 8005c48:	20016e44 	.word	0x20016e44

08005c4c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	b21a      	sxth	r2, r3
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	4313      	orrs	r3, r2
 8005c66:	b21b      	sxth	r3, r3
 8005c68:	b29b      	uxth	r3, r3
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	061a      	lsls	r2, r3, #24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0e1b      	lsrs	r3, r3, #24
 8005c9a:	4313      	orrs	r3, r2
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <MX_SPI1_Init>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* SPI4 init function */
void MX_SPI1_Init(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cae:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <MX_SPI1_Init+0x58>)
 8005cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005cd2:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005cda:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cdc:	2210      	movs	r2, #16
 8005cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_SPI_Init(&hspi1);
 8005cf2:	4802      	ldr	r0, [pc, #8]	; (8005cfc <MX_SPI1_Init+0x54>)
 8005cf4:	f00f f882 	bl	8014dfc <HAL_SPI_Init>

}
 8005cf8:	bf00      	nop
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200130c0 	.word	0x200130c0
 8005d00:	40013000 	.word	0x40013000

08005d04 <ENC_MSPInit>:
  * @brief  Initializes the ENC28J60 MSP.
  * @param  heth: ENC28J60 handle
  * @retval None
  */
void ENC_MSPInit(ENC_HandleTypeDef *heth)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <ENC_MSPInit+0xa0>)
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <ENC_MSPInit+0xa0>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <ENC_MSPInit+0xa0>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <ENC_MSPInit+0xa0>)
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <ENC_MSPInit+0xa0>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	6313      	str	r3, [r2, #48]	; 0x30
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <ENC_MSPInit+0xa0>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	68fb      	ldr	r3, [r7, #12]
        ENC28J60_CS ----------------------> PB4
        ENC28J60_INT ---------------------> PG2
  */

  /*Configure GPIO pins : PB4 */
  GPIO_InitStructure.Pin = GPIO_PIN_4;
 8005d44:	2310      	movs	r3, #16
 8005d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005d50:	2301      	movs	r3, #1
 8005d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4813      	ldr	r0, [pc, #76]	; (8005da8 <ENC_MSPInit+0xa4>)
 8005d5c:	f00e faa4 	bl	80142a8 <HAL_GPIO_Init>

  /* Deselect ENC28J60 module */
  HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_SET);
 8005d60:	2201      	movs	r2, #1
 8005d62:	2110      	movs	r1, #16
 8005d64:	4810      	ldr	r0, [pc, #64]	; (8005da8 <ENC_MSPInit+0xa4>)
 8005d66:	f00e fc39 	bl	80145dc <HAL_GPIO_WritePin>

#ifdef ENC28J60_INTERRUPT
  /*Configure GPIO pin : PG2 */
  GPIO_InitStructure.Pin = GPIO_PIN_4;
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <ENC_MSPInit+0xa8>)
 8005d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	480c      	ldr	r0, [pc, #48]	; (8005db0 <ENC_MSPInit+0xac>)
 8005d7e:	f00e fa93 	bl	80142a8 <HAL_GPIO_Init>
#endif /* ENC28J60_INTERRUPT */

  /* Initialize SPI */
  MX_SPI1_Init();
 8005d82:	f7ff ff91 	bl	8005ca8 <MX_SPI1_Init>

#ifdef ENC28J60_INTERRUPT
  /* EXTI interrupt init*/
  /* Sets the priority grouping field */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d86:	2003      	movs	r0, #3
 8005d88:	f00e fa22 	bl	80141d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2102      	movs	r1, #2
 8005d90:	200a      	movs	r0, #10
 8005d92:	f00e fa28 	bl	80141e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005d96:	200a      	movs	r0, #10
 8005d98:	f00e fa41 	bl	801421e <HAL_NVIC_EnableIRQ>
#endif /* ENC28J60_INTERRUPT */

}
 8005d9c:	bf00      	nop
 8005d9e:	3728      	adds	r7, #40	; 0x28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40020800 	.word	0x40020800
 8005dac:	10210000 	.word	0x10210000
 8005db0:	40020000 	.word	0x40020000

08005db4 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
#ifdef USE_PROTOTHREADS
  PT_INIT(&transmit_pt);
#endif

  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  MAC_ADDR1;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  MAC_ADDR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  MAC_ADDR3;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  MAC_ADDR4;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  MAC_ADDR5;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  EncHandle.Init.MACAddr = netif->hwaddr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3326      	adds	r3, #38	; 0x26
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <low_level_init+0xa8>)
 8005dfa:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005dfc:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <low_level_init+0xa8>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005e02:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <low_level_init+0xa8>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits =  EIE_LINKIE;
 8005e08:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <low_level_init+0xa8>)
 8005e0a:	2210      	movs	r2, #16
 8005e0c:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC_MSPInit(&EncHandle);
 8005e0e:	4813      	ldr	r0, [pc, #76]	; (8005e5c <low_level_init+0xa8>)
 8005e10:	f7ff ff78 	bl	8005d04 <ENC_MSPInit>
  /* Set netif link flag */
//  netif->flags |= NETIF_FLAG_LINK_UP;

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e1a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e22:	f043 030a 	orr.w	r3, r3, #10
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Start the EN28J60 module */
  if (ENC_Start(&EncHandle)) {
 8005e2e:	480b      	ldr	r0, [pc, #44]	; (8005e5c <low_level_init+0xa8>)
 8005e30:	f7fa fbad 	bl	800058e <ENC_Start>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <low_level_init+0x9e>
    /* Set the MAC address */
    ENC_SetMacAddr(&EncHandle);
 8005e3a:	4808      	ldr	r0, [pc, #32]	; (8005e5c <low_level_init+0xa8>)
 8005e3c:	f7fa fc93 	bl	8000766 <ENC_SetMacAddr>

    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20013140 	.word	0x20013140

08005e60 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
    /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
     }
  }
#endif

  /* Prepare ENC28J60 Tx buffer */
  errval = ENC_RestoreTXBuffer(&EncHandle, p->tot_len);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	891b      	ldrh	r3, [r3, #8]
 8005e72:	4619      	mov	r1, r3
 8005e74:	481a      	ldr	r0, [pc, #104]	; (8005ee0 <low_level_output+0x80>)
 8005e76:	f7fa fcdf 	bl	8000838 <ENC_RestoreTXBuffer>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  if (errval != ERR_OK) {
 8005e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <low_level_output+0x2c>
      return errval;
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8a:	e024      	b.n	8005ed6 <low_level_output+0x76>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p; q != NULL; q = q->next) {
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e010      	b.n	8005eb4 <low_level_output+0x54>
    ENC_WriteBuffer(q->payload, q->len);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	895b      	ldrh	r3, [r3, #10]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7fa fc9f 	bl	80007e0 <ENC_WriteBuffer>
    framelength += q->len;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	895b      	ldrh	r3, [r3, #10]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next) {
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1eb      	bne.n	8005e92 <low_level_output+0x32>
  }

  if (framelength != p->tot_len) {
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	891b      	ldrh	r3, [r3, #8]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d002      	beq.n	8005ecc <low_level_output+0x6c>
     return ERR_BUF;
 8005ec6:	f06f 0301 	mvn.w	r3, #1
 8005eca:	e004      	b.n	8005ed6 <low_level_output+0x76>
  }

  EncHandle.transmitLength = p->tot_len;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	891a      	ldrh	r2, [r3, #8]
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <low_level_output+0x80>)
 8005ed2:	831a      	strh	r2, [r3, #24]
  /* Actual transmission is triggered in main loop */

  return ERR_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20013140 	.word	0x20013140

08005ee4 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <ethernetif_init+0x26>
 8005ef2:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <ethernetif_init+0x54>)
 8005ef4:	f240 1243 	movw	r2, #323	; 0x143
 8005ef8:	4910      	ldr	r1, [pc, #64]	; (8005f3c <ethernetif_init+0x58>)
 8005efa:	4811      	ldr	r0, [pc, #68]	; (8005f40 <ethernetif_init+0x5c>)
 8005efc:	f7fb fa18 	bl	8001330 <iprintf>
 8005f00:	2000      	movs	r0, #0
 8005f02:	f012 fab9 	bl	8018478 <fflush>
 8005f06:	f012 f9fd 	bl	8018304 <abort>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2265      	movs	r2, #101	; 0x65
 8005f0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	226e      	movs	r2, #110	; 0x6e
 8005f16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <ethernetif_init+0x60>)
 8005f1e:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <ethernetif_init+0x64>)
 8005f24:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ff44 	bl	8005db4 <low_level_init>

  return ERR_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	080194c0 	.word	0x080194c0
 8005f3c:	080194e0 	.word	0x080194e0
 8005f40:	080194f0 	.word	0x080194f0
 8005f44:	08003bf5 	.word	0x08003bf5
 8005f48:	08005e61 	.word	0x08005e61

08005f4c <ethernet_transmit>:
}

/**
 * Implement actual transmission triggering
 */
void ethernet_transmit(void) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
#ifdef USE_PROTOTHREADS
    ENC_Transmit(&transmit_pt, &EncHandle);
#else
    ENC_Transmit(&EncHandle);
 8005f50:	4802      	ldr	r0, [pc, #8]	; (8005f5c <ethernet_transmit+0x10>)
 8005f52:	f7fa fcc6 	bl	80008e2 <ENC_Transmit>
#endif
}
 8005f56:	bf00      	nop
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20013140 	.word	0x20013140

08005f60 <ENC_SPI_SendWithoutSelection>:
  * param  command: command or data to be sent to ENC28J60
  * retval answer from ENC28J60
  */

uint8_t ENC_SPI_SendWithoutSelection(uint8_t command)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	4603      	mov	r3, r0
 8005f68:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_TransmitReceive(&hspi1, &command, &command, 1, 1000);
 8005f6a:	1dfa      	adds	r2, r7, #7
 8005f6c:	1df9      	adds	r1, r7, #7
 8005f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2301      	movs	r3, #1
 8005f76:	4804      	ldr	r0, [pc, #16]	; (8005f88 <ENC_SPI_SendWithoutSelection+0x28>)
 8005f78:	f00f f9ec 	bl	8015354 <HAL_SPI_TransmitReceive>
    return command;
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	200130c0 	.word	0x200130c0

08005f8c <ENC_SPI_Send>:
  * param  command: command or data to be sent to ENC28J60
  * retval answer from ENC28J60
  */

uint8_t ENC_SPI_Send(uint8_t command)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
    /* Select ENC28J60 module */
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8005f96:	200a      	movs	r0, #10
 8005f98:	f00e f94f 	bl	801423a <HAL_NVIC_DisableIRQ>
    HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_RESET);
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2110      	movs	r1, #16
 8005fa0:	480f      	ldr	r0, [pc, #60]	; (8005fe0 <ENC_SPI_Send+0x54>)
 8005fa2:	f00e fb1b 	bl	80145dc <HAL_GPIO_WritePin>
    up_udelay(1);
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	f7fa f960 	bl	800026c <up_udelay>

    HAL_SPI_TransmitReceive(&hspi1, &command, &command, 1, 1000);
 8005fac:	1dfa      	adds	r2, r7, #7
 8005fae:	1df9      	adds	r1, r7, #7
 8005fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	480a      	ldr	r0, [pc, #40]	; (8005fe4 <ENC_SPI_Send+0x58>)
 8005fba:	f00f f9cb 	bl	8015354 <HAL_SPI_TransmitReceive>

    /* De-select ENC28J60 module */
    HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_SET);
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	2110      	movs	r1, #16
 8005fc2:	4807      	ldr	r0, [pc, #28]	; (8005fe0 <ENC_SPI_Send+0x54>)
 8005fc4:	f00e fb0a 	bl	80145dc <HAL_GPIO_WritePin>
    up_udelay(1);
 8005fc8:	2001      	movs	r0, #1
 8005fca:	f7fa f94f 	bl	800026c <up_udelay>

    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005fce:	200a      	movs	r0, #10
 8005fd0:	f00e f925 	bl	801421e <HAL_NVIC_EnableIRQ>
    return command;
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40020800 	.word	0x40020800
 8005fe4:	200130c0 	.word	0x200130c0

08005fe8 <ENC_SPI_SendBuf>:
  * param  slave2master: answer from ENC28J60 to host, can be NULL if we only want to send data to slave
  * retval none
  */

void ENC_SPI_SendBuf(uint8_t *master2slave, uint8_t *slave2master, uint16_t bufferSize)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
    /* Select ENC28J60 module */
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8005ff6:	200a      	movs	r0, #10
 8005ff8:	f00e f91f 	bl	801423a <HAL_NVIC_DisableIRQ>
    HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_RESET);
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2110      	movs	r1, #16
 8006000:	481b      	ldr	r0, [pc, #108]	; (8006070 <ENC_SPI_SendBuf+0x88>)
 8006002:	f00e faeb 	bl	80145dc <HAL_GPIO_WritePin>
    up_udelay(1);
 8006006:	2001      	movs	r0, #1
 8006008:	f7fa f930 	bl	800026c <up_udelay>

    /* Transmit or receuve data */
    if (slave2master == NULL) {
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <ENC_SPI_SendBuf+0x40>
        if (master2slave != NULL) {
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01c      	beq.n	8006052 <ENC_SPI_SendBuf+0x6a>
            HAL_SPI_Transmit(&hspi1, master2slave, bufferSize, 1000);
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	4814      	ldr	r0, [pc, #80]	; (8006074 <ENC_SPI_SendBuf+0x8c>)
 8006022:	f00e ff4e 	bl	8014ec2 <HAL_SPI_Transmit>
 8006026:	e014      	b.n	8006052 <ENC_SPI_SendBuf+0x6a>
        }
    } else if (master2slave == NULL) {
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d107      	bne.n	800603e <ENC_SPI_SendBuf+0x56>
        HAL_SPI_Receive(&hspi1, slave2master, bufferSize, 1000);
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	480f      	ldr	r0, [pc, #60]	; (8006074 <ENC_SPI_SendBuf+0x8c>)
 8006038:	f00f f87e 	bl	8015138 <HAL_SPI_Receive>
 800603c:	e009      	b.n	8006052 <ENC_SPI_SendBuf+0x6a>
    } else {
        HAL_SPI_TransmitReceive(&hspi1, master2slave, slave2master, bufferSize, 1000);
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	4809      	ldr	r0, [pc, #36]	; (8006074 <ENC_SPI_SendBuf+0x8c>)
 800604e:	f00f f981 	bl	8015354 <HAL_SPI_TransmitReceive>
    }

    /* De-select ENC28J60 module */
    HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_SET);
 8006052:	2201      	movs	r2, #1
 8006054:	2110      	movs	r1, #16
 8006056:	4806      	ldr	r0, [pc, #24]	; (8006070 <ENC_SPI_SendBuf+0x88>)
 8006058:	f00e fac0 	bl	80145dc <HAL_GPIO_WritePin>
    up_udelay(1);
 800605c:	2001      	movs	r0, #1
 800605e:	f7fa f905 	bl	800026c <up_udelay>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006062:	200a      	movs	r0, #10
 8006064:	f00e f8db 	bl	801421e <HAL_NVIC_EnableIRQ>
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40020800 	.word	0x40020800
 8006074:	200130c0 	.word	0x200130c0

08006078 <ENC_SPI_Select>:
  * param  select: true if the ENC28J60 slave SPI if selected, false otherwise
  * retval none
  */

void ENC_SPI_Select(bool select)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
    /* Select or de-select ENC28J60 module */
    if (select) {
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <ENC_SPI_Select+0x28>
        HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8006088:	200a      	movs	r0, #10
 800608a:	f00e f8d6 	bl	801423a <HAL_NVIC_DisableIRQ>
        HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_RESET);
 800608e:	2200      	movs	r2, #0
 8006090:	2110      	movs	r1, #16
 8006092:	480b      	ldr	r0, [pc, #44]	; (80060c0 <ENC_SPI_Select+0x48>)
 8006094:	f00e faa2 	bl	80145dc <HAL_GPIO_WritePin>
        up_udelay(1);
 8006098:	2001      	movs	r0, #1
 800609a:	f7fa f8e7 	bl	800026c <up_udelay>
    } else {
        HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_SET);
        up_udelay(1);
        HAL_NVIC_EnableIRQ(EXTI4_IRQn);
    }
}
 800609e:	e00a      	b.n	80060b6 <ENC_SPI_Select+0x3e>
        HAL_GPIO_WritePin(GPIOC, ENC_CS_PIN, GPIO_PIN_SET);
 80060a0:	2201      	movs	r2, #1
 80060a2:	2110      	movs	r1, #16
 80060a4:	4806      	ldr	r0, [pc, #24]	; (80060c0 <ENC_SPI_Select+0x48>)
 80060a6:	f00e fa99 	bl	80145dc <HAL_GPIO_WritePin>
        up_udelay(1);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f7fa f8de 	bl	800026c <up_udelay>
        HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80060b0:	200a      	movs	r0, #10
 80060b2:	f00e f8b4 	bl	801421e <HAL_NVIC_EnableIRQ>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40020800 	.word	0x40020800

080060c4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b089      	sub	sp, #36	; 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <lwip_standard_chksum+0x40>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dd0a      	ble.n	8006104 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80060ee:	f107 030e 	add.w	r3, r7, #14
 80060f2:	3301      	adds	r3, #1
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	1c51      	adds	r1, r2, #1
 80060f8:	61f9      	str	r1, [r7, #28]
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	701a      	strb	r2, [r3, #0]
    len--;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	3b01      	subs	r3, #1
 8006102:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006108:	e00a      	b.n	8006120 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	61ba      	str	r2, [r7, #24]
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    len -= 2;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	3b02      	subs	r3, #2
 800611e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	dcf1      	bgt.n	800610a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	dd04      	ble.n	8006136 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800612c:	f107 030e 	add.w	r3, r7, #14
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006136:	89fb      	ldrh	r3, [r7, #14]
 8006138:	461a      	mov	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	0c1a      	lsrs	r2, r3, #16
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	b29b      	uxth	r3, r3
 8006148:	4413      	add	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	0c1a      	lsrs	r2, r3, #16
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	b29b      	uxth	r3, r3
 8006154:	4413      	add	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	b29a      	uxth	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b2db      	uxtb	r3, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	b29b      	uxth	r3, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	72fb      	strb	r3, [r7, #11]
 800618c:	4613      	mov	r3, r2
 800618e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e02b      	b.n	80061f2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	895b      	ldrh	r3, [r3, #10]
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7ff ff8d 	bl	80060c4 <lwip_standard_chksum>
 80061aa:	4603      	mov	r3, r0
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	0c1a      	lsrs	r2, r3, #16
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	4413      	add	r3, r2
 80061be:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	895b      	ldrh	r3, [r3, #10]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4313      	orrs	r3, r2
 80061ea:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1d0      	bne.n	800619a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b2db      	uxtb	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	b29b      	uxth	r3, r3
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fd1a 	bl	8005c4c <lwip_htons>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4413      	add	r3, r2
 8006220:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8006222:	893b      	ldrh	r3, [r7, #8]
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fd11 	bl	8005c4c <lwip_htons>
 800622a:	4603      	mov	r3, r0
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	0c1a      	lsrs	r2, r3, #16
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	b29b      	uxth	r3, r3
 800623c:	4413      	add	r3, r2
 800623e:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	0c1a      	lsrs	r2, r3, #16
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	b29b      	uxth	r3, r3
 8006248:	4413      	add	r3, r2
 800624a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	b29b      	uxth	r3, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	b29b      	uxth	r3, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	72fb      	strb	r3, [r7, #11]
 800626a:	4613      	mov	r3, r2
 800626c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	b29b      	uxth	r3, r3
 8006278:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	b29b      	uxth	r3, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4413      	add	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	0c1a      	lsrs	r2, r3, #16
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	0c1a      	lsrs	r2, r3, #16
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	4413      	add	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80062b6:	893a      	ldrh	r2, [r7, #8]
 80062b8:	7af9      	ldrb	r1, [r7, #11]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff ff5e 	bl	800617e <inet_cksum_pseudo_base>
 80062c2:	4603      	mov	r3, r0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	72fb      	strb	r3, [r7, #11]
 80062da:	4613      	mov	r3, r2
 80062dc:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80062de:	893a      	ldrh	r2, [r7, #8]
 80062e0:	7af9      	ldrb	r1, [r7, #11]
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ffb7 	bl	800625c <inet_chksum_pseudo>
 80062ee:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006304:	887b      	ldrh	r3, [r7, #2]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fedb 	bl	80060c4 <lwip_standard_chksum>
 800630e:	4603      	mov	r3, r0
 8006310:	43db      	mvns	r3, r3
 8006312:	b29b      	uxth	r3, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	e02b      	b.n	800638a <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	895b      	ldrh	r3, [r3, #10]
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7ff fec1 	bl	80060c4 <lwip_standard_chksum>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	0c1a      	lsrs	r2, r3, #16
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	b29b      	uxth	r3, r3
 8006354:	4413      	add	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	895b      	ldrh	r3, [r3, #10]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	b29a      	uxth	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	b2db      	uxtb	r3, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1d0      	bne.n	8006332 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	b29a      	uxth	r2, r3
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	0a1b      	lsrs	r3, r3, #8
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	b29b      	uxth	r3, r3
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80063c0:	f001 fe7c 	bl	80080bc <stats_init>
#if !NO_SYS
  sys_init();
 80063c4:	f00d f93c 	bl	8013640 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80063c8:	f000 f8e8 	bl	800659c <mem_init>
  memp_init();
 80063cc:	f000 fca0 	bl	8006d10 <memp_init>
  pbuf_init();
  netif_init();
 80063d0:	f000 fd76 	bl	8006ec0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80063d4:	f008 fc1e 	bl	800ec14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80063d8:	f001 fe77 	bl	80080ca <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80063dc:	f008 fb60 	bl	800eaa0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <ptr_to_mem+0x20>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	4413      	add	r3, r2
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	200001ac 	.word	0x200001ac

0800640c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a05      	ldr	r2, [pc, #20]	; (800642c <mem_to_ptr+0x20>)
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	b29b      	uxth	r3, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	200001ac 	.word	0x200001ac

08006430 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006438:	4b4f      	ldr	r3, [pc, #316]	; (8006578 <plug_holes+0x148>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d20b      	bcs.n	800645a <plug_holes+0x2a>
 8006442:	4b4e      	ldr	r3, [pc, #312]	; (800657c <plug_holes+0x14c>)
 8006444:	f240 12df 	movw	r2, #479	; 0x1df
 8006448:	494d      	ldr	r1, [pc, #308]	; (8006580 <plug_holes+0x150>)
 800644a:	484e      	ldr	r0, [pc, #312]	; (8006584 <plug_holes+0x154>)
 800644c:	f7fa ff70 	bl	8001330 <iprintf>
 8006450:	2000      	movs	r0, #0
 8006452:	f012 f811 	bl	8018478 <fflush>
 8006456:	f011 ff55 	bl	8018304 <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800645a:	4b4b      	ldr	r3, [pc, #300]	; (8006588 <plug_holes+0x158>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d30b      	bcc.n	800647c <plug_holes+0x4c>
 8006464:	4b45      	ldr	r3, [pc, #276]	; (800657c <plug_holes+0x14c>)
 8006466:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800646a:	4948      	ldr	r1, [pc, #288]	; (800658c <plug_holes+0x15c>)
 800646c:	4845      	ldr	r0, [pc, #276]	; (8006584 <plug_holes+0x154>)
 800646e:	f7fa ff5f 	bl	8001330 <iprintf>
 8006472:	2000      	movs	r0, #0
 8006474:	f012 f800 	bl	8018478 <fflush>
 8006478:	f011 ff44 	bl	8018304 <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	791b      	ldrb	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <plug_holes+0x6c>
 8006484:	4b3d      	ldr	r3, [pc, #244]	; (800657c <plug_holes+0x14c>)
 8006486:	f240 12e1 	movw	r2, #481	; 0x1e1
 800648a:	4941      	ldr	r1, [pc, #260]	; (8006590 <plug_holes+0x160>)
 800648c:	483d      	ldr	r0, [pc, #244]	; (8006584 <plug_holes+0x154>)
 800648e:	f7fa ff4f 	bl	8001330 <iprintf>
 8006492:	2000      	movs	r0, #0
 8006494:	f011 fff0 	bl	8018478 <fflush>
 8006498:	f011 ff34 	bl	8018304 <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064a4:	d90b      	bls.n	80064be <plug_holes+0x8e>
 80064a6:	4b35      	ldr	r3, [pc, #212]	; (800657c <plug_holes+0x14c>)
 80064a8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80064ac:	4939      	ldr	r1, [pc, #228]	; (8006594 <plug_holes+0x164>)
 80064ae:	4835      	ldr	r0, [pc, #212]	; (8006584 <plug_holes+0x154>)
 80064b0:	f7fa ff3e 	bl	8001330 <iprintf>
 80064b4:	2000      	movs	r0, #0
 80064b6:	f011 ffdf 	bl	8018478 <fflush>
 80064ba:	f011 ff23 	bl	8018304 <abort>

  nmem = ptr_to_mem(mem->next);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff ff90 	bl	80063e8 <ptr_to_mem>
 80064c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d024      	beq.n	800651c <plug_holes+0xec>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	791b      	ldrb	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d120      	bne.n	800651c <plug_holes+0xec>
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <plug_holes+0x158>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d01b      	beq.n	800651c <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80064e4:	4b2c      	ldr	r3, [pc, #176]	; (8006598 <plug_holes+0x168>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d102      	bne.n	80064f4 <plug_holes+0xc4>
      lfree = mem;
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <plug_holes+0x168>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006504:	d00a      	beq.n	800651c <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff ff6c 	bl	80063e8 <ptr_to_mem>
 8006510:	4604      	mov	r4, r0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff7a 	bl	800640c <mem_to_ptr>
 8006518:	4603      	mov	r3, r0
 800651a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	885b      	ldrh	r3, [r3, #2]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff61 	bl	80063e8 <ptr_to_mem>
 8006526:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d01f      	beq.n	8006570 <plug_holes+0x140>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	791b      	ldrb	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11b      	bne.n	8006570 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <plug_holes+0x168>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d102      	bne.n	8006548 <plug_holes+0x118>
      lfree = pmem;
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <plug_holes+0x168>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	881a      	ldrh	r2, [r3, #0]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006558:	d00a      	beq.n	8006570 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff42 	bl	80063e8 <ptr_to_mem>
 8006564:	4604      	mov	r4, r0
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f7ff ff50 	bl	800640c <mem_to_ptr>
 800656c:	4603      	mov	r3, r0
 800656e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}
 8006578:	200001ac 	.word	0x200001ac
 800657c:	08019518 	.word	0x08019518
 8006580:	08019530 	.word	0x08019530
 8006584:	08019548 	.word	0x08019548
 8006588:	200001b0 	.word	0x200001b0
 800658c:	08019570 	.word	0x08019570
 8006590:	0801958c 	.word	0x0801958c
 8006594:	080195a8 	.word	0x080195a8
 8006598:	200001b8 	.word	0x200001b8

0800659c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80065a2:	4b22      	ldr	r3, [pc, #136]	; (800662c <mem_init+0x90>)
 80065a4:	4a22      	ldr	r2, [pc, #136]	; (8006630 <mem_init+0x94>)
 80065a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80065a8:	4b20      	ldr	r3, [pc, #128]	; (800662c <mem_init+0x90>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80065c2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80065c6:	f7ff ff0f 	bl	80063e8 <ptr_to_mem>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <mem_init+0x98>)
 80065ce:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80065d0:	4b18      	ldr	r3, [pc, #96]	; (8006634 <mem_init+0x98>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2201      	movs	r2, #1
 80065d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80065d8:	4b16      	ldr	r3, [pc, #88]	; (8006634 <mem_init+0x98>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <mem_init+0x98>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <mem_init+0x90>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a11      	ldr	r2, [pc, #68]	; (8006638 <mem_init+0x9c>)
 80065f2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <mem_init+0xa0>)
 80065f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065fa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80065fe:	4810      	ldr	r0, [pc, #64]	; (8006640 <mem_init+0xa4>)
 8006600:	f00d f83e 	bl	8013680 <sys_mutex_new>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00b      	beq.n	8006622 <mem_init+0x86>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <mem_init+0xa8>)
 800660c:	f240 221f 	movw	r2, #543	; 0x21f
 8006610:	490d      	ldr	r1, [pc, #52]	; (8006648 <mem_init+0xac>)
 8006612:	480e      	ldr	r0, [pc, #56]	; (800664c <mem_init+0xb0>)
 8006614:	f7fa fe8c 	bl	8001330 <iprintf>
 8006618:	2000      	movs	r0, #0
 800661a:	f011 ff2d 	bl	8018478 <fflush>
 800661e:	f011 fe71 	bl	8018304 <abort>
  }
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200001ac 	.word	0x200001ac
 8006630:	20013788 	.word	0x20013788
 8006634:	200001b0 	.word	0x200001b0
 8006638:	200001b8 	.word	0x200001b8
 800663c:	20016e44 	.word	0x20016e44
 8006640:	200001b4 	.word	0x200001b4
 8006644:	08019518 	.word	0x08019518
 8006648:	080195d4 	.word	0x080195d4
 800664c:	08019548 	.word	0x08019548

08006650 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fed7 	bl	800640c <mem_to_ptr>
 800665e:	4603      	mov	r3, r0
 8006660:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff febe 	bl	80063e8 <ptr_to_mem>
 800666c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff feb8 	bl	80063e8 <ptr_to_mem>
 8006678:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006682:	d818      	bhi.n	80066b6 <mem_link_valid+0x66>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	885b      	ldrh	r3, [r3, #2]
 8006688:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800668c:	d813      	bhi.n	80066b6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006692:	8afa      	ldrh	r2, [r7, #22]
 8006694:	429a      	cmp	r2, r3
 8006696:	d004      	beq.n	80066a2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	8afa      	ldrh	r2, [r7, #22]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d109      	bne.n	80066b6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <mem_link_valid+0x74>)
 80066a4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d006      	beq.n	80066ba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	885b      	ldrh	r3, [r3, #2]
 80066b0:	8afa      	ldrh	r2, [r7, #22]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d001      	beq.n	80066ba <mem_link_valid+0x6a>
    return 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e000      	b.n	80066bc <mem_link_valid+0x6c>
  }
  return 1;
 80066ba:	2301      	movs	r3, #1
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200001b0 	.word	0x200001b0

080066c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d062      	beq.n	800679c <mem_free+0xd4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3b06      	subs	r3, #6
 80066da:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80066dc:	4b31      	ldr	r3, [pc, #196]	; (80067a4 <mem_free+0xdc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d306      	bcc.n	80066f4 <mem_free+0x2c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f103 020c 	add.w	r2, r3, #12
 80066ec:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <mem_free+0xe0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d90b      	bls.n	800670c <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80066f4:	4b2d      	ldr	r3, [pc, #180]	; (80067ac <mem_free+0xe4>)
 80066f6:	f240 227f 	movw	r2, #639	; 0x27f
 80066fa:	492d      	ldr	r1, [pc, #180]	; (80067b0 <mem_free+0xe8>)
 80066fc:	482d      	ldr	r0, [pc, #180]	; (80067b4 <mem_free+0xec>)
 80066fe:	f7fa fe17 	bl	8001330 <iprintf>
 8006702:	2000      	movs	r0, #0
 8006704:	f011 feb8 	bl	8018478 <fflush>
 8006708:	f011 fdfc 	bl	8018304 <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800670c:	482a      	ldr	r0, [pc, #168]	; (80067b8 <mem_free+0xf0>)
 800670e:	f00d f801 	bl	8013714 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	791b      	ldrb	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <mem_free+0xe4>)
 800671c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006720:	4926      	ldr	r1, [pc, #152]	; (80067bc <mem_free+0xf4>)
 8006722:	4824      	ldr	r0, [pc, #144]	; (80067b4 <mem_free+0xec>)
 8006724:	f7fa fe04 	bl	8001330 <iprintf>
 8006728:	2000      	movs	r0, #0
 800672a:	f011 fea5 	bl	8018478 <fflush>
 800672e:	f011 fde9 	bl	8018304 <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff8c 	bl	8006650 <mem_link_valid>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800673e:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <mem_free+0xe4>)
 8006740:	f240 2295 	movw	r2, #661	; 0x295
 8006744:	491e      	ldr	r1, [pc, #120]	; (80067c0 <mem_free+0xf8>)
 8006746:	481b      	ldr	r0, [pc, #108]	; (80067b4 <mem_free+0xec>)
 8006748:	f7fa fdf2 	bl	8001330 <iprintf>
 800674c:	2000      	movs	r0, #0
 800674e:	f011 fe93 	bl	8018478 <fflush>
 8006752:	f011 fdd7 	bl	8018304 <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <mem_free+0xfc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	429a      	cmp	r2, r3
 8006764:	d202      	bcs.n	800676c <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006766:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <mem_free+0xfc>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800676c:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <mem_free+0x100>)
 800676e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	490b      	ldr	r1, [pc, #44]	; (80067a4 <mem_free+0xdc>)
 8006776:	6809      	ldr	r1, [r1, #0]
 8006778:	1a5b      	subs	r3, r3, r1
 800677a:	b299      	uxth	r1, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	1acb      	subs	r3, r1, r3
 8006782:	b29b      	uxth	r3, r3
 8006784:	4413      	add	r3, r2
 8006786:	b29a      	uxth	r2, r3
 8006788:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <mem_free+0x100>)
 800678a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fe4e 	bl	8006430 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006794:	4808      	ldr	r0, [pc, #32]	; (80067b8 <mem_free+0xf0>)
 8006796:	f00d f803 	bl	80137a0 <sys_mutex_unlock>
 800679a:	e000      	b.n	800679e <mem_free+0xd6>
    return;
 800679c:	bf00      	nop
}
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200001ac 	.word	0x200001ac
 80067a8:	200001b0 	.word	0x200001b0
 80067ac:	08019518 	.word	0x08019518
 80067b0:	080195f0 	.word	0x080195f0
 80067b4:	08019548 	.word	0x08019548
 80067b8:	200001b4 	.word	0x200001b4
 80067bc:	0801960c 	.word	0x0801960c
 80067c0:	08019634 	.word	0x08019634
 80067c4:	200001b8 	.word	0x200001b8
 80067c8:	20016e44 	.word	0x20016e44

080067cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80067d8:	887b      	ldrh	r3, [r7, #2]
 80067da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80067dc:	8bfb      	ldrh	r3, [r7, #30]
 80067de:	2b0b      	cmp	r3, #11
 80067e0:	d801      	bhi.n	80067e6 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80067e2:	230c      	movs	r3, #12
 80067e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80067e6:	8bfb      	ldrh	r3, [r7, #30]
 80067e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067ec:	d803      	bhi.n	80067f6 <mem_trim+0x2a>
 80067ee:	8bfa      	ldrh	r2, [r7, #30]
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d201      	bcs.n	80067fa <mem_trim+0x2e>
    return NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e10c      	b.n	8006a14 <mem_trim+0x248>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80067fa:	4b88      	ldr	r3, [pc, #544]	; (8006a1c <mem_trim+0x250>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d304      	bcc.n	800680e <mem_trim+0x42>
 8006804:	4b86      	ldr	r3, [pc, #536]	; (8006a20 <mem_trim+0x254>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d30b      	bcc.n	8006826 <mem_trim+0x5a>
 800680e:	4b85      	ldr	r3, [pc, #532]	; (8006a24 <mem_trim+0x258>)
 8006810:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006814:	4984      	ldr	r1, [pc, #528]	; (8006a28 <mem_trim+0x25c>)
 8006816:	4885      	ldr	r0, [pc, #532]	; (8006a2c <mem_trim+0x260>)
 8006818:	f7fa fd8a 	bl	8001330 <iprintf>
 800681c:	2000      	movs	r0, #0
 800681e:	f011 fe2b 	bl	8018478 <fflush>
 8006822:	f011 fd6f 	bl	8018304 <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006826:	4b7d      	ldr	r3, [pc, #500]	; (8006a1c <mem_trim+0x250>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d304      	bcc.n	800683a <mem_trim+0x6e>
 8006830:	4b7b      	ldr	r3, [pc, #492]	; (8006a20 <mem_trim+0x254>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d30f      	bcc.n	800685a <mem_trim+0x8e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800683a:	f00c ff0f 	bl	801365c <sys_arch_protect>
 800683e:	60b8      	str	r0, [r7, #8]
 8006840:	4b7b      	ldr	r3, [pc, #492]	; (8006a30 <mem_trim+0x264>)
 8006842:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006846:	3301      	adds	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	4b79      	ldr	r3, [pc, #484]	; (8006a30 <mem_trim+0x264>)
 800684c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	f00c ff0a 	bl	801366a <sys_arch_unprotect>
    return rmem;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	e0dc      	b.n	8006a14 <mem_trim+0x248>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3b06      	subs	r3, #6
 800685e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006860:	69b8      	ldr	r0, [r7, #24]
 8006862:	f7ff fdd3 	bl	800640c <mem_to_ptr>
 8006866:	4603      	mov	r3, r0
 8006868:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	881a      	ldrh	r2, [r3, #0]
 800686e:	8afb      	ldrh	r3, [r7, #22]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b06      	subs	r3, #6
 8006876:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006878:	8bfa      	ldrh	r2, [r7, #30]
 800687a:	8abb      	ldrh	r3, [r7, #20]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90b      	bls.n	8006898 <mem_trim+0xcc>
 8006880:	4b68      	ldr	r3, [pc, #416]	; (8006a24 <mem_trim+0x258>)
 8006882:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006886:	496b      	ldr	r1, [pc, #428]	; (8006a34 <mem_trim+0x268>)
 8006888:	4868      	ldr	r0, [pc, #416]	; (8006a2c <mem_trim+0x260>)
 800688a:	f7fa fd51 	bl	8001330 <iprintf>
 800688e:	2000      	movs	r0, #0
 8006890:	f011 fdf2 	bl	8018478 <fflush>
 8006894:	f011 fd36 	bl	8018304 <abort>
  if (newsize > size) {
 8006898:	8bfa      	ldrh	r2, [r7, #30]
 800689a:	8abb      	ldrh	r3, [r7, #20]
 800689c:	429a      	cmp	r2, r3
 800689e:	d901      	bls.n	80068a4 <mem_trim+0xd8>
    /* not supported */
    return NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e0b7      	b.n	8006a14 <mem_trim+0x248>
  }
  if (newsize == size) {
 80068a4:	8bfa      	ldrh	r2, [r7, #30]
 80068a6:	8abb      	ldrh	r3, [r7, #20]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d101      	bne.n	80068b0 <mem_trim+0xe4>
    /* No change in size, simply return */
    return rmem;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	e0b1      	b.n	8006a14 <mem_trim+0x248>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80068b0:	4861      	ldr	r0, [pc, #388]	; (8006a38 <mem_trim+0x26c>)
 80068b2:	f00c ff2f 	bl	8013714 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff fd94 	bl	80063e8 <ptr_to_mem>
 80068c0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d150      	bne.n	800696c <mem_trim+0x1a0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068d2:	d10b      	bne.n	80068ec <mem_trim+0x120>
 80068d4:	4b53      	ldr	r3, [pc, #332]	; (8006a24 <mem_trim+0x258>)
 80068d6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80068da:	4958      	ldr	r1, [pc, #352]	; (8006a3c <mem_trim+0x270>)
 80068dc:	4853      	ldr	r0, [pc, #332]	; (8006a2c <mem_trim+0x260>)
 80068de:	f7fa fd27 	bl	8001330 <iprintf>
 80068e2:	2000      	movs	r0, #0
 80068e4:	f011 fdc8 	bl	8018478 <fflush>
 80068e8:	f011 fd0c 	bl	8018304 <abort>
    /* remember the old next pointer */
    next = mem2->next;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80068f2:	8afa      	ldrh	r2, [r7, #22]
 80068f4:	8bfb      	ldrh	r3, [r7, #30]
 80068f6:	4413      	add	r3, r2
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3306      	adds	r3, #6
 80068fc:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 80068fe:	4b50      	ldr	r3, [pc, #320]	; (8006a40 <mem_trim+0x274>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d106      	bne.n	8006916 <mem_trim+0x14a>
      lfree = ptr_to_mem(ptr2);
 8006908:	89bb      	ldrh	r3, [r7, #12]
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fd6c 	bl	80063e8 <ptr_to_mem>
 8006910:	4602      	mov	r2, r0
 8006912:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <mem_trim+0x274>)
 8006914:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006916:	89bb      	ldrh	r3, [r7, #12]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff fd65 	bl	80063e8 <ptr_to_mem>
 800691e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2200      	movs	r2, #0
 8006924:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	89fa      	ldrh	r2, [r7, #14]
 800692a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	8afa      	ldrh	r2, [r7, #22]
 8006930:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	89ba      	ldrh	r2, [r7, #12]
 8006936:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006940:	d007      	beq.n	8006952 <mem_trim+0x186>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fd4e 	bl	80063e8 <ptr_to_mem>
 800694c:	4602      	mov	r2, r0
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8006952:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <mem_trim+0x264>)
 8006954:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006958:	8bf9      	ldrh	r1, [r7, #30]
 800695a:	8abb      	ldrh	r3, [r7, #20]
 800695c:	1acb      	subs	r3, r1, r3
 800695e:	b29b      	uxth	r3, r3
 8006960:	4413      	add	r3, r2
 8006962:	b29a      	uxth	r2, r3
 8006964:	4b32      	ldr	r3, [pc, #200]	; (8006a30 <mem_trim+0x264>)
 8006966:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800696a:	e04f      	b.n	8006a0c <mem_trim+0x240>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800696c:	8bfb      	ldrh	r3, [r7, #30]
 800696e:	f103 0212 	add.w	r2, r3, #18
 8006972:	8abb      	ldrh	r3, [r7, #20]
 8006974:	429a      	cmp	r2, r3
 8006976:	d849      	bhi.n	8006a0c <mem_trim+0x240>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006978:	8afa      	ldrh	r2, [r7, #22]
 800697a:	8bfb      	ldrh	r3, [r7, #30]
 800697c:	4413      	add	r3, r2
 800697e:	b29b      	uxth	r3, r3
 8006980:	3306      	adds	r3, #6
 8006982:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800698c:	d10b      	bne.n	80069a6 <mem_trim+0x1da>
 800698e:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <mem_trim+0x258>)
 8006990:	f240 3216 	movw	r2, #790	; 0x316
 8006994:	4929      	ldr	r1, [pc, #164]	; (8006a3c <mem_trim+0x270>)
 8006996:	4825      	ldr	r0, [pc, #148]	; (8006a2c <mem_trim+0x260>)
 8006998:	f7fa fcca 	bl	8001330 <iprintf>
 800699c:	2000      	movs	r0, #0
 800699e:	f011 fd6b 	bl	8018478 <fflush>
 80069a2:	f011 fcaf 	bl	8018304 <abort>
    mem2 = ptr_to_mem(ptr2);
 80069a6:	89bb      	ldrh	r3, [r7, #12]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fd1d 	bl	80063e8 <ptr_to_mem>
 80069ae:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <mem_trim+0x274>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d202      	bcs.n	80069c0 <mem_trim+0x1f4>
      lfree = mem2;
 80069ba:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <mem_trim+0x274>)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2200      	movs	r2, #0
 80069c4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	8afa      	ldrh	r2, [r7, #22]
 80069d2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	89ba      	ldrh	r2, [r7, #12]
 80069d8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069e2:	d007      	beq.n	80069f4 <mem_trim+0x228>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fcfd 	bl	80063e8 <ptr_to_mem>
 80069ee:	4602      	mov	r2, r0
 80069f0:	89bb      	ldrh	r3, [r7, #12]
 80069f2:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <mem_trim+0x264>)
 80069f6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80069fa:	8bf9      	ldrh	r1, [r7, #30]
 80069fc:	8abb      	ldrh	r3, [r7, #20]
 80069fe:	1acb      	subs	r3, r1, r3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <mem_trim+0x264>)
 8006a08:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006a0c:	480a      	ldr	r0, [pc, #40]	; (8006a38 <mem_trim+0x26c>)
 8006a0e:	f00c fec7 	bl	80137a0 <sys_mutex_unlock>
  return rmem;
 8006a12:	687b      	ldr	r3, [r7, #4]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200001ac 	.word	0x200001ac
 8006a20:	200001b0 	.word	0x200001b0
 8006a24:	08019518 	.word	0x08019518
 8006a28:	08019668 	.word	0x08019668
 8006a2c:	08019548 	.word	0x08019548
 8006a30:	20016e44 	.word	0x20016e44
 8006a34:	08019680 	.word	0x08019680
 8006a38:	200001b4 	.word	0x200001b4
 8006a3c:	080196a0 	.word	0x080196a0
 8006a40:	200001b8 	.word	0x200001b8

08006a44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <mem_malloc+0x14>
    return NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	e112      	b.n	8006c7e <mem_malloc+0x23a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006a5c:	8bbb      	ldrh	r3, [r7, #28]
 8006a5e:	2b0b      	cmp	r3, #11
 8006a60:	d801      	bhi.n	8006a66 <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006a62:	230c      	movs	r3, #12
 8006a64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006a66:	8bbb      	ldrh	r3, [r7, #28]
 8006a68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a6c:	d803      	bhi.n	8006a76 <mem_malloc+0x32>
 8006a6e:	8bba      	ldrh	r2, [r7, #28]
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d201      	bcs.n	8006a7a <mem_malloc+0x36>
    return NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e101      	b.n	8006c7e <mem_malloc+0x23a>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006a7a:	4883      	ldr	r0, [pc, #524]	; (8006c88 <mem_malloc+0x244>)
 8006a7c:	f00c fe4a 	bl	8013714 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a80:	4b82      	ldr	r3, [pc, #520]	; (8006c8c <mem_malloc+0x248>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fcc1 	bl	800640c <mem_to_ptr>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	83fb      	strh	r3, [r7, #30]
 8006a8e:	e0e3      	b.n	8006c58 <mem_malloc+0x214>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fca8 	bl	80063e8 <ptr_to_mem>
 8006a98:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 80d3 	bne.w	8006c4a <mem_malloc+0x206>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	8bfb      	ldrh	r3, [r7, #30]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	1f9a      	subs	r2, r3, #6
 8006ab0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	f0c0 80c9 	bcc.w	8006c4a <mem_malloc+0x206>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	8bfb      	ldrh	r3, [r7, #30]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	1f9a      	subs	r2, r3, #6
 8006ac4:	8bbb      	ldrh	r3, [r7, #28]
 8006ac6:	3312      	adds	r3, #18
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d351      	bcc.n	8006b70 <mem_malloc+0x12c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006acc:	8bfa      	ldrh	r2, [r7, #30]
 8006ace:	8bbb      	ldrh	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3306      	adds	r3, #6
 8006ad6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006ad8:	8a7b      	ldrh	r3, [r7, #18]
 8006ada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ade:	d10b      	bne.n	8006af8 <mem_malloc+0xb4>
 8006ae0:	4b6b      	ldr	r3, [pc, #428]	; (8006c90 <mem_malloc+0x24c>)
 8006ae2:	f240 3287 	movw	r2, #903	; 0x387
 8006ae6:	496b      	ldr	r1, [pc, #428]	; (8006c94 <mem_malloc+0x250>)
 8006ae8:	486b      	ldr	r0, [pc, #428]	; (8006c98 <mem_malloc+0x254>)
 8006aea:	f7fa fc21 	bl	8001330 <iprintf>
 8006aee:	2000      	movs	r0, #0
 8006af0:	f011 fcc2 	bl	8018478 <fflush>
 8006af4:	f011 fc06 	bl	8018304 <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006af8:	8a7b      	ldrh	r3, [r7, #18]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fc74 	bl	80063e8 <ptr_to_mem>
 8006b00:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	881a      	ldrh	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8bfa      	ldrh	r2, [r7, #30]
 8006b14:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	8a7a      	ldrh	r2, [r7, #18]
 8006b1a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b2a:	d007      	beq.n	8006b3c <mem_malloc+0xf8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fc59 	bl	80063e8 <ptr_to_mem>
 8006b36:	4602      	mov	r2, r0
 8006b38:	8a7b      	ldrh	r3, [r7, #18]
 8006b3a:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8006b3c:	4b57      	ldr	r3, [pc, #348]	; (8006c9c <mem_malloc+0x258>)
 8006b3e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006b42:	8bbb      	ldrh	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3306      	adds	r3, #6
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	4b53      	ldr	r3, [pc, #332]	; (8006c9c <mem_malloc+0x258>)
 8006b4e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006b52:	4b52      	ldr	r3, [pc, #328]	; (8006c9c <mem_malloc+0x258>)
 8006b54:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8006b58:	4b50      	ldr	r3, [pc, #320]	; (8006c9c <mem_malloc+0x258>)
 8006b5a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d227      	bcs.n	8006bb2 <mem_malloc+0x16e>
 8006b62:	4b4e      	ldr	r3, [pc, #312]	; (8006c9c <mem_malloc+0x258>)
 8006b64:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006b68:	4b4c      	ldr	r3, [pc, #304]	; (8006c9c <mem_malloc+0x258>)
 8006b6a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006b6e:	e020      	b.n	8006bb2 <mem_malloc+0x16e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2201      	movs	r2, #1
 8006b74:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8006b76:	4b49      	ldr	r3, [pc, #292]	; (8006c9c <mem_malloc+0x258>)
 8006b78:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	4413      	add	r3, r2
 8006b82:	b29c      	uxth	r4, r3
 8006b84:	6978      	ldr	r0, [r7, #20]
 8006b86:	f7ff fc41 	bl	800640c <mem_to_ptr>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	1ae3      	subs	r3, r4, r3
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	4b42      	ldr	r3, [pc, #264]	; (8006c9c <mem_malloc+0x258>)
 8006b92:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <mem_malloc+0x258>)
 8006b98:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8006b9c:	4b3f      	ldr	r3, [pc, #252]	; (8006c9c <mem_malloc+0x258>)
 8006b9e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d205      	bcs.n	8006bb2 <mem_malloc+0x16e>
 8006ba6:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <mem_malloc+0x258>)
 8006ba8:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006bac:	4b3b      	ldr	r3, [pc, #236]	; (8006c9c <mem_malloc+0x258>)
 8006bae:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006bb2:	4b36      	ldr	r3, [pc, #216]	; (8006c8c <mem_malloc+0x248>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d12c      	bne.n	8006c16 <mem_malloc+0x1d2>
          struct mem *cur = lfree;
 8006bbc:	4b33      	ldr	r3, [pc, #204]	; (8006c8c <mem_malloc+0x248>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006bc2:	e005      	b.n	8006bd0 <mem_malloc+0x18c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fc0d 	bl	80063e8 <ptr_to_mem>
 8006bce:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	791b      	ldrb	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <mem_malloc+0x19e>
 8006bd8:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <mem_malloc+0x25c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d1f0      	bne.n	8006bc4 <mem_malloc+0x180>
          }
          lfree = cur;
 8006be2:	4a2a      	ldr	r2, [pc, #168]	; (8006c8c <mem_malloc+0x248>)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006be8:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <mem_malloc+0x248>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b2c      	ldr	r3, [pc, #176]	; (8006ca0 <mem_malloc+0x25c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d010      	beq.n	8006c16 <mem_malloc+0x1d2>
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <mem_malloc+0x248>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <mem_malloc+0x1d2>
 8006bfe:	4b24      	ldr	r3, [pc, #144]	; (8006c90 <mem_malloc+0x24c>)
 8006c00:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006c04:	4927      	ldr	r1, [pc, #156]	; (8006ca4 <mem_malloc+0x260>)
 8006c06:	4824      	ldr	r0, [pc, #144]	; (8006c98 <mem_malloc+0x254>)
 8006c08:	f7fa fb92 	bl	8001330 <iprintf>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f011 fc33 	bl	8018478 <fflush>
 8006c12:	f011 fb77 	bl	8018304 <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8006c16:	481c      	ldr	r0, [pc, #112]	; (8006c88 <mem_malloc+0x244>)
 8006c18:	f00c fdc2 	bl	80137a0 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c1c:	8bba      	ldrh	r2, [r7, #28]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	3306      	adds	r3, #6
 8006c24:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <mem_malloc+0x25c>)
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d90b      	bls.n	8006c44 <mem_malloc+0x200>
 8006c2c:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <mem_malloc+0x24c>)
 8006c2e:	f240 32ba 	movw	r2, #954	; 0x3ba
 8006c32:	491d      	ldr	r1, [pc, #116]	; (8006ca8 <mem_malloc+0x264>)
 8006c34:	4818      	ldr	r0, [pc, #96]	; (8006c98 <mem_malloc+0x254>)
 8006c36:	f7fa fb7b 	bl	8001330 <iprintf>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f011 fc1c 	bl	8018478 <fflush>
 8006c40:	f011 fb60 	bl	8018304 <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3306      	adds	r3, #6
 8006c48:	e019      	b.n	8006c7e <mem_malloc+0x23a>
         ptr = ptr_to_mem(ptr)->next) {
 8006c4a:	8bfb      	ldrh	r3, [r7, #30]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fbcb 	bl	80063e8 <ptr_to_mem>
 8006c52:	4603      	mov	r3, r0
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c58:	8bfa      	ldrh	r2, [r7, #30]
 8006c5a:	8bbb      	ldrh	r3, [r7, #28]
 8006c5c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006c60:	429a      	cmp	r2, r3
 8006c62:	f4ff af15 	bcc.w	8006a90 <mem_malloc+0x4c>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8006c66:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <mem_malloc+0x258>)
 8006c68:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <mem_malloc+0x258>)
 8006c72:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006c76:	4804      	ldr	r0, [pc, #16]	; (8006c88 <mem_malloc+0x244>)
 8006c78:	f00c fd92 	bl	80137a0 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3724      	adds	r7, #36	; 0x24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	bf00      	nop
 8006c88:	200001b4 	.word	0x200001b4
 8006c8c:	200001b8 	.word	0x200001b8
 8006c90:	08019518 	.word	0x08019518
 8006c94:	080196a0 	.word	0x080196a0
 8006c98:	08019548 	.word	0x08019548
 8006c9c:	20016e44 	.word	0x20016e44
 8006ca0:	200001b0 	.word	0x200001b0
 8006ca4:	080196b4 	.word	0x080196b4
 8006ca8:	080196d0 	.word	0x080196d0

08006cac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e011      	b.n	8006cec <memp_init_pool+0x40>
    memp->next = *desc->tab;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	889b      	ldrh	r3, [r3, #4]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	88db      	ldrh	r3, [r3, #6]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	dce7      	bgt.n	8006cc8 <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	88d2      	ldrh	r2, [r2, #6]
 8006d00:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d16:	2300      	movs	r3, #0
 8006d18:	80fb      	strh	r3, [r7, #6]
 8006d1a:	e014      	b.n	8006d46 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	4a0d      	ldr	r2, [pc, #52]	; (8006d54 <memp_init+0x44>)
 8006d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff ffc1 	bl	8006cac <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	4909      	ldr	r1, [pc, #36]	; (8006d54 <memp_init+0x44>)
 8006d30:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	4908      	ldr	r1, [pc, #32]	; (8006d58 <memp_init+0x48>)
 8006d38:	332c      	adds	r3, #44	; 0x2c
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	3301      	adds	r3, #1
 8006d44:	80fb      	strh	r3, [r7, #6]
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b0c      	cmp	r3, #12
 8006d4a:	d9e7      	bls.n	8006d1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	0801c768 	.word	0x0801c768
 8006d58:	20016e44 	.word	0x20016e44

08006d5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006d64:	f00c fc7a 	bl	801365c <sys_arch_protect>
 8006d68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01d      	beq.n	8006db4 <do_memp_malloc_pool+0x58>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	889a      	ldrh	r2, [r3, #4]
 8006d88:	3201      	adds	r2, #1
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	889a      	ldrh	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	88db      	ldrh	r3, [r3, #6]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d905      	bls.n	8006daa <do_memp_malloc_pool+0x4e>
      desc->stats->max = desc->stats->used;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	8892      	ldrh	r2, [r2, #4]
 8006da8:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f00c fc5d 	bl	801366a <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	e009      	b.n	8006dc8 <do_memp_malloc_pool+0x6c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	881a      	ldrh	r2, [r3, #0]
 8006dba:	3201      	adds	r2, #1
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f00c fc52 	bl	801366a <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d90b      	bls.n	8006df8 <memp_malloc+0x28>
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <memp_malloc+0x44>)
 8006de2:	f240 1257 	movw	r2, #343	; 0x157
 8006de6:	490c      	ldr	r1, [pc, #48]	; (8006e18 <memp_malloc+0x48>)
 8006de8:	480c      	ldr	r0, [pc, #48]	; (8006e1c <memp_malloc+0x4c>)
 8006dea:	f7fa faa1 	bl	8001330 <iprintf>
 8006dee:	2000      	movs	r0, #0
 8006df0:	f011 fb42 	bl	8018478 <fflush>
 8006df4:	f011 fa86 	bl	8018304 <abort>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <memp_malloc+0x50>)
 8006dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff ffab 	bl	8006d5c <do_memp_malloc_pool>
 8006e06:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006e08:	68fb      	ldr	r3, [r7, #12]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	08019700 	.word	0x08019700
 8006e18:	08019754 	.word	0x08019754
 8006e1c:	0801972c 	.word	0x0801972c
 8006e20:	0801c768 	.word	0x0801c768

08006e24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8006e32:	f00c fc13 	bl	801365c <sys_arch_protect>
 8006e36:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	889a      	ldrh	r2, [r3, #4]
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	b292      	uxth	r2, r2
 8006e42:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8006e56:	68b8      	ldr	r0, [r7, #8]
 8006e58:	f00c fc07 	bl	801366a <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d90b      	bls.n	8006e8e <memp_free+0x2a>
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <memp_free+0x4c>)
 8006e78:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006e7c:	490d      	ldr	r1, [pc, #52]	; (8006eb4 <memp_free+0x50>)
 8006e7e:	480e      	ldr	r0, [pc, #56]	; (8006eb8 <memp_free+0x54>)
 8006e80:	f7fa fa56 	bl	8001330 <iprintf>
 8006e84:	2000      	movs	r0, #0
 8006e86:	f011 faf7 	bl	8018478 <fflush>
 8006e8a:	f011 fa3b 	bl	8018304 <abort>

  if (mem == NULL) {
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <memp_free+0x42>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <memp_free+0x58>)
 8006e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff ffc0 	bl	8006e24 <do_memp_free_pool>
 8006ea4:	e000      	b.n	8006ea8 <memp_free+0x44>
    return;
 8006ea6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	08019700 	.word	0x08019700
 8006eb4:	08019774 	.word	0x08019774
 8006eb8:	0801972c 	.word	0x0801972c
 8006ebc:	0801c768 	.word	0x0801c768

08006ec0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <netif_add+0x2c>
 8006ee4:	4b61      	ldr	r3, [pc, #388]	; (800706c <netif_add+0x19c>)
 8006ee6:	f240 1227 	movw	r2, #295	; 0x127
 8006eea:	4961      	ldr	r1, [pc, #388]	; (8007070 <netif_add+0x1a0>)
 8006eec:	4861      	ldr	r0, [pc, #388]	; (8007074 <netif_add+0x1a4>)
 8006eee:	f7fa fa1f 	bl	8001330 <iprintf>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	f011 fac0 	bl	8018478 <fflush>
 8006ef8:	f011 fa04 	bl	8018304 <abort>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <netif_add+0x4a>
 8006f02:	4b5a      	ldr	r3, [pc, #360]	; (800706c <netif_add+0x19c>)
 8006f04:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006f08:	495b      	ldr	r1, [pc, #364]	; (8007078 <netif_add+0x1a8>)
 8006f0a:	485a      	ldr	r0, [pc, #360]	; (8007074 <netif_add+0x1a4>)
 8006f0c:	f7fa fa10 	bl	8001330 <iprintf>
 8006f10:	2000      	movs	r0, #0
 8006f12:	f011 fab1 	bl	8018478 <fflush>
 8006f16:	f011 f9f5 	bl	8018304 <abort>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <netif_add+0x54>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f20:	4b56      	ldr	r3, [pc, #344]	; (800707c <netif_add+0x1ac>)
 8006f22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <netif_add+0x5e>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f2a:	4b54      	ldr	r3, [pc, #336]	; (800707c <netif_add+0x1ac>)
 8006f2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <netif_add+0x68>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f34:	4b51      	ldr	r3, [pc, #324]	; (800707c <netif_add+0x1ac>)
 8006f36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a4c      	ldr	r2, [pc, #304]	; (8007080 <netif_add+0x1b0>)
 8006f4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3320      	adds	r3, #32
 8006f62:	2204      	movs	r2, #4
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f011 fba0 	bl	80186ac <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8006f72:	4b44      	ldr	r3, [pc, #272]	; (8007084 <netif_add+0x1b4>)
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f927 	bl	80071dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	4798      	blx	r3
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <netif_add+0xce>
    return NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e062      	b.n	8007064 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fa4:	2bff      	cmp	r3, #255	; 0xff
 8006fa6:	d103      	bne.n	8006fb0 <netif_add+0xe0>
        netif->num = 0;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006fb4:	4b34      	ldr	r3, [pc, #208]	; (8007088 <netif_add+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e035      	b.n	8007028 <netif_add+0x158>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d10b      	bne.n	8006fdc <netif_add+0x10c>
 8006fc4:	4b29      	ldr	r3, [pc, #164]	; (800706c <netif_add+0x19c>)
 8006fc6:	f240 128b 	movw	r2, #395	; 0x18b
 8006fca:	4930      	ldr	r1, [pc, #192]	; (800708c <netif_add+0x1bc>)
 8006fcc:	4829      	ldr	r0, [pc, #164]	; (8007074 <netif_add+0x1a4>)
 8006fce:	f7fa f9af 	bl	8001330 <iprintf>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f011 fa50 	bl	8018478 <fflush>
 8006fd8:	f011 f994 	bl	8018304 <abort>
        num_netifs++;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2bff      	cmp	r3, #255	; 0xff
 8006fe6:	dd0b      	ble.n	8007000 <netif_add+0x130>
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <netif_add+0x19c>)
 8006fea:	f240 128d 	movw	r2, #397	; 0x18d
 8006fee:	4928      	ldr	r1, [pc, #160]	; (8007090 <netif_add+0x1c0>)
 8006ff0:	4820      	ldr	r0, [pc, #128]	; (8007074 <netif_add+0x1a4>)
 8006ff2:	f7fa f99d 	bl	8001330 <iprintf>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f011 fa3e 	bl	8018478 <fflush>
 8006ffc:	f011 f982 	bl	8018304 <abort>
        if (netif2->num == netif->num) {
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800700c:	429a      	cmp	r2, r3
 800700e:	d108      	bne.n	8007022 <netif_add+0x152>
          netif->num++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007016:	3301      	adds	r3, #1
 8007018:	b2da      	uxtb	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007020:	e005      	b.n	800702e <netif_add+0x15e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1c6      	bne.n	8006fbc <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1b4      	bne.n	8006f9e <netif_add+0xce>
  }
  if (netif->num == 254) {
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800703a:	2bfe      	cmp	r3, #254	; 0xfe
 800703c:	d103      	bne.n	8007046 <netif_add+0x176>
    netif_num = 0;
 800703e:	4b11      	ldr	r3, [pc, #68]	; (8007084 <netif_add+0x1b4>)
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e006      	b.n	8007054 <netif_add+0x184>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800704c:	3301      	adds	r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <netif_add+0x1b4>)
 8007052:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <netif_add+0x1b8>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800705c:	4a0a      	ldr	r2, [pc, #40]	; (8007088 <netif_add+0x1b8>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007062:	68fb      	ldr	r3, [r7, #12]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	08019790 	.word	0x08019790
 8007070:	0801980c 	.word	0x0801980c
 8007074:	080197c8 	.word	0x080197c8
 8007078:	08019828 	.word	0x08019828
 800707c:	0801c690 	.word	0x0801c690
 8007080:	08007381 	.word	0x08007381
 8007084:	2000028c 	.word	0x2000028c
 8007088:	20016e38 	.word	0x20016e38
 800708c:	0801984c 	.word	0x0801984c
 8007090:	08019860 	.word	0x08019860

08007094 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f002 ff1f 	bl	8009ee4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f008 fba3 	bl	800f7f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <netif_do_set_ipaddr+0x2a>
 80070ca:	4b22      	ldr	r3, [pc, #136]	; (8007154 <netif_do_set_ipaddr+0x9c>)
 80070cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80070d0:	4921      	ldr	r1, [pc, #132]	; (8007158 <netif_do_set_ipaddr+0xa0>)
 80070d2:	4822      	ldr	r0, [pc, #136]	; (800715c <netif_do_set_ipaddr+0xa4>)
 80070d4:	f7fa f92c 	bl	8001330 <iprintf>
 80070d8:	2000      	movs	r0, #0
 80070da:	f011 f9cd 	bl	8018478 <fflush>
 80070de:	f011 f911 	bl	8018304 <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <netif_do_set_ipaddr+0x48>
 80070e8:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <netif_do_set_ipaddr+0x9c>)
 80070ea:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80070ee:	491a      	ldr	r1, [pc, #104]	; (8007158 <netif_do_set_ipaddr+0xa0>)
 80070f0:	481a      	ldr	r0, [pc, #104]	; (800715c <netif_do_set_ipaddr+0xa4>)
 80070f2:	f7fa f91d 	bl	8001330 <iprintf>
 80070f6:	2000      	movs	r0, #0
 80070f8:	f011 f9be 	bl	8018478 <fflush>
 80070fc:	f011 f902 	bl	8018304 <abort>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3304      	adds	r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d01c      	beq.n	8007148 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3304      	adds	r3, #4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800711e:	f107 0314 	add.w	r3, r7, #20
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ffb5 	bl	8007094 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <netif_do_set_ipaddr+0x7e>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	e000      	b.n	8007138 <netif_do_set_ipaddr+0x80>
 8007136:	2300      	movs	r3, #0
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800713c:	2101      	movs	r1, #1
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f8d8 	bl	80072f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	08019790 	.word	0x08019790
 8007158:	08019890 	.word	0x08019890
 800715c:	080197c8 	.word	0x080197c8

08007160 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3308      	adds	r3, #8
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d00a      	beq.n	8007190 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <netif_do_set_netmask+0x26>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	e000      	b.n	8007188 <netif_do_set_netmask+0x28>
 8007186:	2300      	movs	r3, #0
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	330c      	adds	r3, #12
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d00a      	beq.n	80071ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <netif_do_set_gw+0x26>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	e000      	b.n	80071c6 <netif_do_set_gw+0x28>
 80071c4:	2300      	movs	r3, #0
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <netif_set_addr+0x90>)
 80071fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007202:	4b1a      	ldr	r3, [pc, #104]	; (800726c <netif_set_addr+0x90>)
 8007204:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800720c:	4b17      	ldr	r3, [pc, #92]	; (800726c <netif_set_addr+0x90>)
 800720e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <netif_set_addr+0x42>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <netif_set_addr+0x46>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <netif_set_addr+0x48>
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d006      	beq.n	800723a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800722c:	f107 0310 	add.w	r3, r7, #16
 8007230:	461a      	mov	r2, r3
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff ff3f 	bl	80070b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f7ff ff8e 	bl	8007160 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff ffa8 	bl	800719e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007254:	f107 0310 	add.w	r3, r7, #16
 8007258:	461a      	mov	r2, r3
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff ff2b 	bl	80070b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007262:	bf00      	nop
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	0801c690 	.word	0x0801c690

08007270 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007278:	4a04      	ldr	r2, [pc, #16]	; (800728c <netif_set_default+0x1c>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20016e3c 	.word	0x20016e3c

08007290 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <netif_set_up+0x26>
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <netif_set_up+0x58>)
 80072a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80072a4:	4911      	ldr	r1, [pc, #68]	; (80072ec <netif_set_up+0x5c>)
 80072a6:	4812      	ldr	r0, [pc, #72]	; (80072f0 <netif_set_up+0x60>)
 80072a8:	f7fa f842 	bl	8001330 <iprintf>
 80072ac:	2000      	movs	r0, #0
 80072ae:	f011 f8e3 	bl	8018478 <fflush>
 80072b2:	f011 f827 	bl	8018304 <abort>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10c      	bne.n	80072de <netif_set_up+0x4e>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072d6:	2103      	movs	r1, #3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f80b 	bl	80072f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	08019790 	.word	0x08019790
 80072ec:	08019900 	.word	0x08019900
 80072f0:	080197c8 	.word	0x080197c8

080072f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <netif_issue_reports+0x2a>
 8007306:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <netif_issue_reports+0x80>)
 8007308:	f240 326d 	movw	r2, #877	; 0x36d
 800730c:	491a      	ldr	r1, [pc, #104]	; (8007378 <netif_issue_reports+0x84>)
 800730e:	481b      	ldr	r0, [pc, #108]	; (800737c <netif_issue_reports+0x88>)
 8007310:	f7fa f80e 	bl	8001330 <iprintf>
 8007314:	2000      	movs	r0, #0
 8007316:	f011 f8af 	bl	8018478 <fflush>
 800731a:	f010 fff3 	bl	8018304 <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01e      	beq.n	800736a <netif_issue_reports+0x76>
      !(netif->flags & NETIF_FLAG_UP)) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007332:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <netif_issue_reports+0x76>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <netif_issue_reports+0x78>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00e      	beq.n	800736c <netif_issue_reports+0x78>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <netif_issue_reports+0x78>
      etharp_gratuitous(netif);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fc ff90 	bl	8004288 <etharp_request>
 8007368:	e000      	b.n	800736c <netif_issue_reports+0x78>
    return;
 800736a:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	08019790 	.word	0x08019790
 8007378:	0801991c 	.word	0x0801991c
 800737c:	080197c8 	.word	0x080197c8

08007380 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800738c:	f06f 030b 	mvn.w	r3, #11
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d013      	beq.n	80073d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <netif_get_by_index+0x48>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e00c      	b.n	80073ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073ba:	3301      	adds	r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	79fa      	ldrb	r2, [r7, #7]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d101      	bne.n	80073c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	e006      	b.n	80073d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1ef      	bne.n	80073b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20016e38 	.word	0x20016e38

080073e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80073ee:	f00c f935 	bl	801365c <sys_arch_protect>
 80073f2:	6038      	str	r0, [r7, #0]
 80073f4:	4b0d      	ldr	r3, [pc, #52]	; (800742c <pbuf_free_ooseq+0x44>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	6838      	ldr	r0, [r7, #0]
 80073fc:	f00c f935 	bl	801366a <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <pbuf_free_ooseq+0x48>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	e00a      	b.n	800741e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fda5 	bl	8009f60 <tcp_free_ooseq>
      return;
 8007416:	e005      	b.n	8007424 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f1      	bne.n	8007408 <pbuf_free_ooseq+0x20>
    }
  }
}
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20016e40 	.word	0x20016e40
 8007430:	20016f44 	.word	0x20016f44

08007434 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800743c:	f7ff ffd4 	bl	80073e8 <pbuf_free_ooseq>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800744e:	f00c f905 	bl	801365c <sys_arch_protect>
 8007452:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <pbuf_pool_is_empty+0x4c>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800745a:	4b0e      	ldr	r3, [pc, #56]	; (8007494 <pbuf_pool_is_empty+0x4c>)
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f00c f902 	bl	801366a <sys_arch_unprotect>

  if (!queued) {
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10f      	bne.n	800748c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800746c:	2100      	movs	r1, #0
 800746e:	480a      	ldr	r0, [pc, #40]	; (8007498 <pbuf_pool_is_empty+0x50>)
 8007470:	f00c f83a 	bl	80134e8 <tcpip_try_callback>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <pbuf_pool_is_empty+0x44>
 800747a:	f00c f8ef 	bl	801365c <sys_arch_protect>
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <pbuf_pool_is_empty+0x4c>)
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f00c f8ef 	bl	801366a <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20016e40 	.word	0x20016e40
 8007498:	08007435 	.word	0x08007435

0800749c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4611      	mov	r1, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	460b      	mov	r3, r1
 80074ac:	80fb      	strh	r3, [r7, #6]
 80074ae:	4613      	mov	r3, r2
 80074b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	88ba      	ldrh	r2, [r7, #4]
 80074c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80074ca:	8b3b      	ldrh	r3, [r7, #24]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	7f3a      	ldrb	r2, [r7, #28]
 80074d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	73da      	strb	r2, [r3, #15]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08c      	sub	sp, #48	; 0x30
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
 80074fa:	460b      	mov	r3, r1
 80074fc:	80bb      	strh	r3, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	2b41      	cmp	r3, #65	; 0x41
 800750a:	d00b      	beq.n	8007524 <pbuf_alloc+0x34>
 800750c:	2b41      	cmp	r3, #65	; 0x41
 800750e:	dc02      	bgt.n	8007516 <pbuf_alloc+0x26>
 8007510:	2b01      	cmp	r3, #1
 8007512:	d007      	beq.n	8007524 <pbuf_alloc+0x34>
 8007514:	e08d      	b.n	8007632 <pbuf_alloc+0x142>
 8007516:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800751a:	d00b      	beq.n	8007534 <pbuf_alloc+0x44>
 800751c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007520:	d05d      	beq.n	80075de <pbuf_alloc+0xee>
 8007522:	e086      	b.n	8007632 <pbuf_alloc+0x142>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007524:	887a      	ldrh	r2, [r7, #2]
 8007526:	88bb      	ldrh	r3, [r7, #4]
 8007528:	4619      	mov	r1, r3
 800752a:	2000      	movs	r0, #0
 800752c:	f000 f89a 	bl	8007664 <pbuf_alloc_reference>
 8007530:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007532:	e08a      	b.n	800764a <pbuf_alloc+0x15a>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800753c:	88bb      	ldrh	r3, [r7, #4]
 800753e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007540:	200c      	movs	r0, #12
 8007542:	f7ff fc45 	bl	8006dd0 <memp_malloc>
 8007546:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800754e:	f7ff ff7b 	bl	8007448 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8007558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755a:	f000 fac1 	bl	8007ae0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	e074      	b.n	800764c <pbuf_alloc+0x15c>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007564:	f5c3 7313 	rsb	r3, r3, #588	; 0x24c
 8007568:	3302      	adds	r3, #2
 800756a:	b29a      	uxth	r2, r3
 800756c:	8b7b      	ldrh	r3, [r7, #26]
 800756e:	4293      	cmp	r3, r2
 8007570:	bf28      	it	cs
 8007572:	4613      	movcs	r3, r2
 8007574:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007578:	3310      	adds	r3, #16
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	18d1      	adds	r1, r2, r3
 800757e:	8a78      	ldrh	r0, [r7, #18]
 8007580:	8b7a      	ldrh	r2, [r7, #26]
 8007582:	2300      	movs	r3, #0
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	887b      	ldrh	r3, [r7, #2]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	4603      	mov	r3, r0
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	f7ff ff85 	bl	800749c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007594:	f240 224e 	movw	r2, #590	; 0x24e
 8007598:	4293      	cmp	r3, r2
 800759a:	d10b      	bne.n	80075b4 <pbuf_alloc+0xc4>
 800759c:	4b2d      	ldr	r3, [pc, #180]	; (8007654 <pbuf_alloc+0x164>)
 800759e:	f240 1203 	movw	r2, #259	; 0x103
 80075a2:	492d      	ldr	r1, [pc, #180]	; (8007658 <pbuf_alloc+0x168>)
 80075a4:	482d      	ldr	r0, [pc, #180]	; (800765c <pbuf_alloc+0x16c>)
 80075a6:	f7f9 fec3 	bl	8001330 <iprintf>
 80075aa:	2000      	movs	r0, #0
 80075ac:	f010 ff64 	bl	8018478 <fflush>
 80075b0:	f010 fea8 	bl	8018304 <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <pbuf_alloc+0xd0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
 80075be:	e002      	b.n	80075c6 <pbuf_alloc+0xd6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80075ca:	8b7a      	ldrh	r2, [r7, #26]
 80075cc:	8a7b      	ldrh	r3, [r7, #18]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80075d6:	8b7b      	ldrh	r3, [r7, #26]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1b1      	bne.n	8007540 <pbuf_alloc+0x50>
      break;
 80075dc:	e035      	b.n	800764a <pbuf_alloc+0x15a>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80075de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075e0:	88bb      	ldrh	r3, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80075e6:	8a3b      	ldrh	r3, [r7, #16]
 80075e8:	3310      	adds	r3, #16
 80075ea:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075ec:	8a3a      	ldrh	r2, [r7, #16]
 80075ee:	88bb      	ldrh	r3, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d303      	bcc.n	80075fc <pbuf_alloc+0x10c>
 80075f4:	89fa      	ldrh	r2, [r7, #14]
 80075f6:	88bb      	ldrh	r3, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d201      	bcs.n	8007600 <pbuf_alloc+0x110>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e025      	b.n	800764c <pbuf_alloc+0x15c>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007600:	89fb      	ldrh	r3, [r7, #14]
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fa1e 	bl	8006a44 <mem_malloc>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <pbuf_alloc+0x124>
        return NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	e01b      	b.n	800764c <pbuf_alloc+0x15c>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007616:	3310      	adds	r3, #16
 8007618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761a:	18d1      	adds	r1, r2, r3
 800761c:	88b8      	ldrh	r0, [r7, #4]
 800761e:	88ba      	ldrh	r2, [r7, #4]
 8007620:	2300      	movs	r3, #0
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	887b      	ldrh	r3, [r7, #2]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4603      	mov	r3, r0
 800762a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800762c:	f7ff ff36 	bl	800749c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007630:	e00b      	b.n	800764a <pbuf_alloc+0x15a>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007632:	4b08      	ldr	r3, [pc, #32]	; (8007654 <pbuf_alloc+0x164>)
 8007634:	f240 1227 	movw	r2, #295	; 0x127
 8007638:	4909      	ldr	r1, [pc, #36]	; (8007660 <pbuf_alloc+0x170>)
 800763a:	4808      	ldr	r0, [pc, #32]	; (800765c <pbuf_alloc+0x16c>)
 800763c:	f7f9 fe78 	bl	8001330 <iprintf>
 8007640:	2000      	movs	r0, #0
 8007642:	f010 ff19 	bl	8018478 <fflush>
 8007646:	f010 fe5d 	bl	8018304 <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800764c:	4618      	mov	r0, r3
 800764e:	3728      	adds	r7, #40	; 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	080199a8 	.word	0x080199a8
 8007658:	080199c0 	.word	0x080199c0
 800765c:	080199f4 	.word	0x080199f4
 8007660:	08019a1c 	.word	0x08019a1c

08007664 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
 8007670:	4613      	mov	r3, r2
 8007672:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007674:	883b      	ldrh	r3, [r7, #0]
 8007676:	2b41      	cmp	r3, #65	; 0x41
 8007678:	d00e      	beq.n	8007698 <pbuf_alloc_reference+0x34>
 800767a:	883b      	ldrh	r3, [r7, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d00b      	beq.n	8007698 <pbuf_alloc_reference+0x34>
 8007680:	4b12      	ldr	r3, [pc, #72]	; (80076cc <pbuf_alloc_reference+0x68>)
 8007682:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007686:	4912      	ldr	r1, [pc, #72]	; (80076d0 <pbuf_alloc_reference+0x6c>)
 8007688:	4812      	ldr	r0, [pc, #72]	; (80076d4 <pbuf_alloc_reference+0x70>)
 800768a:	f7f9 fe51 	bl	8001330 <iprintf>
 800768e:	2000      	movs	r0, #0
 8007690:	f010 fef2 	bl	8018478 <fflush>
 8007694:	f010 fe36 	bl	8018304 <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007698:	200b      	movs	r0, #11
 800769a:	f7ff fb99 	bl	8006dd0 <memp_malloc>
 800769e:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e00b      	b.n	80076c2 <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80076aa:	8879      	ldrh	r1, [r7, #2]
 80076ac:	887a      	ldrh	r2, [r7, #2]
 80076ae:	2300      	movs	r3, #0
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	883b      	ldrh	r3, [r7, #0]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	460b      	mov	r3, r1
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff feee 	bl	800749c <pbuf_init_alloced_pbuf>
  return p;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	080199a8 	.word	0x080199a8
 80076d0:	08019a38 	.word	0x08019a38
 80076d4:	080199f4 	.word	0x080199f4

080076d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	607b      	str	r3, [r7, #4]
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
 80076e4:	460b      	mov	r3, r1
 80076e6:	81bb      	strh	r3, [r7, #12]
 80076e8:	4613      	mov	r3, r2
 80076ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80076f0:	8a7a      	ldrh	r2, [r7, #18]
 80076f2:	89bb      	ldrh	r3, [r7, #12]
 80076f4:	441a      	add	r2, r3
 80076f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d901      	bls.n	8007700 <pbuf_alloced_custom+0x28>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e015      	b.n	800772c <pbuf_alloced_custom+0x54>
  }

  if (payload_mem != NULL) {
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <pbuf_alloced_custom+0x38>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007706:	8a7b      	ldrh	r3, [r7, #18]
 8007708:	6a3a      	ldr	r2, [r7, #32]
 800770a:	4413      	add	r3, r2
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e001      	b.n	8007714 <pbuf_alloced_custom+0x3c>
  } else {
    payload = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	89b9      	ldrh	r1, [r7, #12]
 8007718:	89ba      	ldrh	r2, [r7, #12]
 800771a:	2302      	movs	r3, #2
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	897b      	ldrh	r3, [r7, #10]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	460b      	mov	r3, r1
 8007724:	6979      	ldr	r1, [r7, #20]
 8007726:	f7ff feb9 	bl	800749c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800772a:	687b      	ldr	r3, [r7, #4]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10b      	bne.n	800775e <pbuf_realloc+0x2a>
 8007746:	4b42      	ldr	r3, [pc, #264]	; (8007850 <pbuf_realloc+0x11c>)
 8007748:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800774c:	4941      	ldr	r1, [pc, #260]	; (8007854 <pbuf_realloc+0x120>)
 800774e:	4842      	ldr	r0, [pc, #264]	; (8007858 <pbuf_realloc+0x124>)
 8007750:	f7f9 fdee 	bl	8001330 <iprintf>
 8007754:	2000      	movs	r0, #0
 8007756:	f010 fe8f 	bl	8018478 <fflush>
 800775a:	f010 fdd3 	bl	8018304 <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	891b      	ldrh	r3, [r3, #8]
 8007762:	887a      	ldrh	r2, [r7, #2]
 8007764:	429a      	cmp	r2, r3
 8007766:	d26e      	bcs.n	8007846 <pbuf_realloc+0x112>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	891a      	ldrh	r2, [r3, #8]
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	817b      	strh	r3, [r7, #10]
  q = p;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800777a:	e01d      	b.n	80077b8 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	895b      	ldrh	r3, [r3, #10]
 8007780:	897a      	ldrh	r2, [r7, #10]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	891a      	ldrh	r2, [r3, #8]
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <pbuf_realloc+0x84>
 80077a0:	4b2b      	ldr	r3, [pc, #172]	; (8007850 <pbuf_realloc+0x11c>)
 80077a2:	f240 12af 	movw	r2, #431	; 0x1af
 80077a6:	492d      	ldr	r1, [pc, #180]	; (800785c <pbuf_realloc+0x128>)
 80077a8:	482b      	ldr	r0, [pc, #172]	; (8007858 <pbuf_realloc+0x124>)
 80077aa:	f7f9 fdc1 	bl	8001330 <iprintf>
 80077ae:	2000      	movs	r0, #0
 80077b0:	f010 fe62 	bl	8018478 <fflush>
 80077b4:	f010 fda6 	bl	8018304 <abort>
  while (rem_len > q->len) {
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	895b      	ldrh	r3, [r3, #10]
 80077bc:	897a      	ldrh	r2, [r7, #10]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d8dc      	bhi.n	800777c <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	7b1b      	ldrb	r3, [r3, #12]
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d127      	bne.n	800781e <pbuf_realloc+0xea>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	895b      	ldrh	r3, [r3, #10]
 80077d2:	897a      	ldrh	r2, [r7, #10]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d022      	beq.n	800781e <pbuf_realloc+0xea>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	7b5b      	ldrb	r3, [r3, #13]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11c      	bne.n	800781e <pbuf_realloc+0xea>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	461a      	mov	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	897b      	ldrh	r3, [r7, #10]
 80077f2:	4413      	add	r3, r2
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4619      	mov	r1, r3
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7fe ffe7 	bl	80067cc <mem_trim>
 80077fe:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <pbuf_realloc+0xea>
 8007806:	4b12      	ldr	r3, [pc, #72]	; (8007850 <pbuf_realloc+0x11c>)
 8007808:	f240 12bd 	movw	r2, #445	; 0x1bd
 800780c:	4914      	ldr	r1, [pc, #80]	; (8007860 <pbuf_realloc+0x12c>)
 800780e:	4812      	ldr	r0, [pc, #72]	; (8007858 <pbuf_realloc+0x124>)
 8007810:	f7f9 fd8e 	bl	8001330 <iprintf>
 8007814:	2000      	movs	r0, #0
 8007816:	f010 fe2f 	bl	8018478 <fflush>
 800781a:	f010 fd73 	bl	8018304 <abort>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	897a      	ldrh	r2, [r7, #10]
 8007822:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	895a      	ldrh	r2, [r3, #10]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <pbuf_realloc+0x10a>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f951 	bl	8007ae0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e000      	b.n	8007848 <pbuf_realloc+0x114>
    return;
 8007846:	bf00      	nop

}
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	080199a8 	.word	0x080199a8
 8007854:	08019a4c 	.word	0x08019a4c
 8007858:	080199f4 	.word	0x080199f4
 800785c:	08019a64 	.word	0x08019a64
 8007860:	08019a7c 	.word	0x08019a7c

08007864 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10b      	bne.n	8007890 <pbuf_add_header_impl+0x2c>
 8007878:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <pbuf_add_header_impl+0xd0>)
 800787a:	f240 12df 	movw	r2, #479	; 0x1df
 800787e:	492e      	ldr	r1, [pc, #184]	; (8007938 <pbuf_add_header_impl+0xd4>)
 8007880:	482e      	ldr	r0, [pc, #184]	; (800793c <pbuf_add_header_impl+0xd8>)
 8007882:	f7f9 fd55 	bl	8001330 <iprintf>
 8007886:	2000      	movs	r0, #0
 8007888:	f010 fdf6 	bl	8018478 <fflush>
 800788c:	f010 fd3a 	bl	8018304 <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <pbuf_add_header_impl+0x3a>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789c:	d301      	bcc.n	80078a2 <pbuf_add_header_impl+0x3e>
    return 1;
 800789e:	2301      	movs	r3, #1
 80078a0:	e044      	b.n	800792c <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <pbuf_add_header_impl+0x48>
    return 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e03f      	b.n	800792c <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	891a      	ldrh	r2, [r3, #8]
 80078b4:	8a7b      	ldrh	r3, [r7, #18]
 80078b6:	4413      	add	r3, r2
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8a7a      	ldrh	r2, [r7, #18]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d901      	bls.n	80078c4 <pbuf_add_header_impl+0x60>
    return 1;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e033      	b.n	800792c <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80078ca:	8a3b      	ldrh	r3, [r7, #16]
 80078cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00d      	beq.n	80078f0 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	425b      	negs	r3, r3
 80078dc:	4413      	add	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f103 0210 	add.w	r2, r3, #16
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d90d      	bls.n	8007908 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e01d      	b.n	800792c <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	425b      	negs	r3, r3
 80078fe:	4413      	add	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e001      	b.n	8007908 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007904:	2301      	movs	r3, #1
 8007906:	e011      	b.n	800792c <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	895a      	ldrh	r2, [r3, #10]
 8007912:	8a7b      	ldrh	r3, [r7, #18]
 8007914:	4413      	add	r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	891a      	ldrh	r2, [r3, #8]
 8007920:	8a7b      	ldrh	r3, [r7, #18]
 8007922:	4413      	add	r3, r2
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	811a      	strh	r2, [r3, #8]


  return 0;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	080199a8 	.word	0x080199a8
 8007938:	08019a98 	.word	0x08019a98
 800793c:	080199f4 	.word	0x080199f4

08007940 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800794a:	2200      	movs	r2, #0
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff ff88 	bl	8007864 <pbuf_add_header_impl>
 8007954:	4603      	mov	r3, r0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <pbuf_remove_header+0x28>
 8007970:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <pbuf_remove_header+0xa4>)
 8007972:	f240 224b 	movw	r2, #587	; 0x24b
 8007976:	4924      	ldr	r1, [pc, #144]	; (8007a08 <pbuf_remove_header+0xa8>)
 8007978:	4824      	ldr	r0, [pc, #144]	; (8007a0c <pbuf_remove_header+0xac>)
 800797a:	f7f9 fcd9 	bl	8001330 <iprintf>
 800797e:	2000      	movs	r0, #0
 8007980:	f010 fd7a 	bl	8018478 <fflush>
 8007984:	f010 fcbe 	bl	8018304 <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <pbuf_remove_header+0x36>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007994:	d301      	bcc.n	800799a <pbuf_remove_header+0x3a>
    return 1;
 8007996:	2301      	movs	r3, #1
 8007998:	e02f      	b.n	80079fa <pbuf_remove_header+0x9a>
  }
  if (header_size_decrement == 0) {
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <pbuf_remove_header+0x44>
    return 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e02a      	b.n	80079fa <pbuf_remove_header+0x9a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	895b      	ldrh	r3, [r3, #10]
 80079ac:	89fa      	ldrh	r2, [r7, #14]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d90b      	bls.n	80079ca <pbuf_remove_header+0x6a>
 80079b2:	4b14      	ldr	r3, [pc, #80]	; (8007a04 <pbuf_remove_header+0xa4>)
 80079b4:	f240 2255 	movw	r2, #597	; 0x255
 80079b8:	4915      	ldr	r1, [pc, #84]	; (8007a10 <pbuf_remove_header+0xb0>)
 80079ba:	4814      	ldr	r0, [pc, #80]	; (8007a0c <pbuf_remove_header+0xac>)
 80079bc:	f7f9 fcb8 	bl	8001330 <iprintf>
 80079c0:	2000      	movs	r0, #0
 80079c2:	f010 fd59 	bl	8018478 <fflush>
 80079c6:	f010 fc9d 	bl	8018304 <abort>

  /* remember current payload pointer */
  payload = p->payload;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	441a      	add	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	895a      	ldrh	r2, [r3, #10]
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	891a      	ldrh	r2, [r3, #8]
 80079ee:	89fb      	ldrh	r3, [r7, #14]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	080199a8 	.word	0x080199a8
 8007a08:	08019a98 	.word	0x08019a98
 8007a0c:	080199f4 	.word	0x080199f4
 8007a10:	08019aa4 	.word	0x08019aa4

08007a14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	807b      	strh	r3, [r7, #2]
 8007a20:	4613      	mov	r3, r2
 8007a22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007a24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da08      	bge.n	8007a3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007a2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a30:	425b      	negs	r3, r3
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ff93 	bl	8007960 <pbuf_remove_header>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	e007      	b.n	8007a4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007a3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a42:	787a      	ldrb	r2, [r7, #1]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ff0c 	bl	8007864 <pbuf_add_header_impl>
 8007a4c:	4603      	mov	r3, r0
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007a62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a66:	2201      	movs	r2, #1
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff ffd2 	bl	8007a14 <pbuf_header_impl>
 8007a70:	4603      	mov	r3, r0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8007a8a:	887b      	ldrh	r3, [r7, #2]
 8007a8c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8007a8e:	e01c      	b.n	8007aca <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	8a7a      	ldrh	r2, [r7, #18]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d310      	bcc.n	8007abc <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	8a7a      	ldrh	r2, [r7, #18]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f813 	bl	8007ae0 <pbuf_free>
 8007aba:	e006      	b.n	8007aca <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8007abc:	8a7b      	ldrh	r3, [r7, #18]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	f7ff ff4d 	bl	8007960 <pbuf_remove_header>
      free_left = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8007aca:	8a7b      	ldrh	r3, [r7, #18]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <pbuf_free_header+0x5c>
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1dc      	bne.n	8007a90 <pbuf_free_header+0x16>
    }
  }
  return p;
 8007ad6:	697b      	ldr	r3, [r7, #20]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d110      	bne.n	8007b10 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <pbuf_free+0x2c>
 8007af4:	4b45      	ldr	r3, [pc, #276]	; (8007c0c <pbuf_free+0x12c>)
 8007af6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007afa:	4945      	ldr	r1, [pc, #276]	; (8007c10 <pbuf_free+0x130>)
 8007afc:	4845      	ldr	r0, [pc, #276]	; (8007c14 <pbuf_free+0x134>)
 8007afe:	f7f9 fc17 	bl	8001330 <iprintf>
 8007b02:	2000      	movs	r0, #0
 8007b04:	f010 fcb8 	bl	8018478 <fflush>
 8007b08:	f010 fbfc 	bl	8018304 <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e078      	b.n	8007c02 <pbuf_free+0x122>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007b14:	e071      	b.n	8007bfa <pbuf_free+0x11a>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8007b16:	f00b fda1 	bl	801365c <sys_arch_protect>
 8007b1a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7b9b      	ldrb	r3, [r3, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10b      	bne.n	8007b3c <pbuf_free+0x5c>
 8007b24:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <pbuf_free+0x12c>)
 8007b26:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007b2a:	493b      	ldr	r1, [pc, #236]	; (8007c18 <pbuf_free+0x138>)
 8007b2c:	4839      	ldr	r0, [pc, #228]	; (8007c14 <pbuf_free+0x134>)
 8007b2e:	f7f9 fbff 	bl	8001330 <iprintf>
 8007b32:	2000      	movs	r0, #0
 8007b34:	f010 fca0 	bl	8018478 <fflush>
 8007b38:	f010 fbe4 	bl	8018304 <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7b9b      	ldrb	r3, [r3, #14]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	739a      	strb	r2, [r3, #14]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7b9b      	ldrb	r3, [r3, #14]
 8007b4c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8007b4e:	69b8      	ldr	r0, [r7, #24]
 8007b50:	f00b fd8b 	bl	801366a <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d14d      	bne.n	8007bf6 <pbuf_free+0x116>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7b1b      	ldrb	r3, [r3, #12]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7b5b      	ldrb	r3, [r3, #13]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <pbuf_free+0xba>
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <pbuf_free+0x12c>)
 8007b84:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007b88:	4924      	ldr	r1, [pc, #144]	; (8007c1c <pbuf_free+0x13c>)
 8007b8a:	4822      	ldr	r0, [pc, #136]	; (8007c14 <pbuf_free+0x134>)
 8007b8c:	f7f9 fbd0 	bl	8001330 <iprintf>
 8007b90:	2000      	movs	r0, #0
 8007b92:	f010 fc71 	bl	8018478 <fflush>
 8007b96:	f010 fbb5 	bl	8018304 <abort>
        pc->custom_free_function(p);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	e022      	b.n	8007bea <pbuf_free+0x10a>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d104      	bne.n	8007bb4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	200c      	movs	r0, #12
 8007bae:	f7ff f959 	bl	8006e64 <memp_free>
 8007bb2:	e01a      	b.n	8007bea <pbuf_free+0x10a>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d104      	bne.n	8007bc4 <pbuf_free+0xe4>
          memp_free(MEMP_PBUF, p);
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	200b      	movs	r0, #11
 8007bbe:	f7ff f951 	bl	8006e64 <memp_free>
 8007bc2:	e012      	b.n	8007bea <pbuf_free+0x10a>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d103      	bne.n	8007bd2 <pbuf_free+0xf2>
          mem_free(p);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fe fd7c 	bl	80066c8 <mem_free>
 8007bd0:	e00b      	b.n	8007bea <pbuf_free+0x10a>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <pbuf_free+0x12c>)
 8007bd4:	f240 320f 	movw	r2, #783	; 0x30f
 8007bd8:	4911      	ldr	r1, [pc, #68]	; (8007c20 <pbuf_free+0x140>)
 8007bda:	480e      	ldr	r0, [pc, #56]	; (8007c14 <pbuf_free+0x134>)
 8007bdc:	f7f9 fba8 	bl	8001330 <iprintf>
 8007be0:	2000      	movs	r0, #0
 8007be2:	f010 fc49 	bl	8018478 <fflush>
 8007be6:	f010 fb8d 	bl	8018304 <abort>
        }
      }
      count++;
 8007bea:	7ffb      	ldrb	r3, [r7, #31]
 8007bec:	3301      	adds	r3, #1
 8007bee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	607b      	str	r3, [r7, #4]
 8007bf4:	e001      	b.n	8007bfa <pbuf_free+0x11a>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d18a      	bne.n	8007b16 <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	080199a8 	.word	0x080199a8
 8007c10:	08019a98 	.word	0x08019a98
 8007c14:	080199f4 	.word	0x080199f4
 8007c18:	08019ac4 	.word	0x08019ac4
 8007c1c:	08019adc 	.word	0x08019adc
 8007c20:	08019b00 	.word	0x08019b00

08007c24 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007c30:	e005      	b.n	8007c3e <pbuf_clen+0x1a>
    ++len;
 8007c32:	89fb      	ldrh	r3, [r7, #14]
 8007c34:	3301      	adds	r3, #1
 8007c36:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f6      	bne.n	8007c32 <pbuf_clen+0xe>
  }
  return len;
 8007c44:	89fb      	ldrh	r3, [r7, #14]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d01b      	beq.n	8007c9a <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007c62:	f00b fcfb 	bl	801365c <sys_arch_protect>
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	7b9b      	ldrb	r3, [r3, #14]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	739a      	strb	r2, [r3, #14]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f00b fcf8 	bl	801366a <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7b9b      	ldrb	r3, [r3, #14]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <pbuf_ref+0x46>
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <pbuf_ref+0x50>)
 8007c84:	f240 3242 	movw	r2, #834	; 0x342
 8007c88:	4907      	ldr	r1, [pc, #28]	; (8007ca8 <pbuf_ref+0x54>)
 8007c8a:	4808      	ldr	r0, [pc, #32]	; (8007cac <pbuf_ref+0x58>)
 8007c8c:	f7f9 fb50 	bl	8001330 <iprintf>
 8007c90:	2000      	movs	r0, #0
 8007c92:	f010 fbf1 	bl	8018478 <fflush>
 8007c96:	f010 fb35 	bl	8018304 <abort>
  }
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	080199a8 	.word	0x080199a8
 8007ca8:	08019b14 	.word	0x08019b14
 8007cac:	080199f4 	.word	0x080199f4

08007cb0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <pbuf_cat+0x16>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <pbuf_cat+0x2e>
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <pbuf_cat+0xb4>)
 8007cc8:	f240 325a 	movw	r2, #858	; 0x35a
 8007ccc:	4926      	ldr	r1, [pc, #152]	; (8007d68 <pbuf_cat+0xb8>)
 8007cce:	4827      	ldr	r0, [pc, #156]	; (8007d6c <pbuf_cat+0xbc>)
 8007cd0:	f7f9 fb2e 	bl	8001330 <iprintf>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	f010 fbcf 	bl	8018478 <fflush>
 8007cda:	f010 fb13 	bl	8018304 <abort>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e00a      	b.n	8007cfa <pbuf_cat+0x4a>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	891a      	ldrh	r2, [r3, #8]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	891b      	ldrh	r3, [r3, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <pbuf_cat+0x34>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	891a      	ldrh	r2, [r3, #8]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	895b      	ldrh	r3, [r3, #10]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d00b      	beq.n	8007d26 <pbuf_cat+0x76>
 8007d0e:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <pbuf_cat+0xb4>)
 8007d10:	f240 3262 	movw	r2, #866	; 0x362
 8007d14:	4916      	ldr	r1, [pc, #88]	; (8007d70 <pbuf_cat+0xc0>)
 8007d16:	4815      	ldr	r0, [pc, #84]	; (8007d6c <pbuf_cat+0xbc>)
 8007d18:	f7f9 fb0a 	bl	8001330 <iprintf>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f010 fbab 	bl	8018478 <fflush>
 8007d22:	f010 faef 	bl	8018304 <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <pbuf_cat+0x96>
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	; (8007d64 <pbuf_cat+0xb4>)
 8007d30:	f240 3263 	movw	r2, #867	; 0x363
 8007d34:	490f      	ldr	r1, [pc, #60]	; (8007d74 <pbuf_cat+0xc4>)
 8007d36:	480d      	ldr	r0, [pc, #52]	; (8007d6c <pbuf_cat+0xbc>)
 8007d38:	f7f9 fafa 	bl	8001330 <iprintf>
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f010 fb9b 	bl	8018478 <fflush>
 8007d42:	f010 fadf 	bl	8018304 <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	891a      	ldrh	r2, [r3, #8]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	891b      	ldrh	r3, [r3, #8]
 8007d4e:	4413      	add	r3, r2
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	080199a8 	.word	0x080199a8
 8007d68:	08019b28 	.word	0x08019b28
 8007d6c:	080199f4 	.word	0x080199f4
 8007d70:	08019b60 	.word	0x08019b60
 8007d74:	08019b90 	.word	0x08019b90

08007d78 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff93 	bl	8007cb0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007d8a:	6838      	ldr	r0, [r7, #0]
 8007d8c:	f7ff ff62 	bl	8007c54 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <pbuf_copy+0x2a>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <pbuf_copy+0x2a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	891a      	ldrh	r2, [r3, #8]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	891b      	ldrh	r3, [r3, #8]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d20b      	bcs.n	8007dda <pbuf_copy+0x42>
 8007dc2:	4b60      	ldr	r3, [pc, #384]	; (8007f44 <pbuf_copy+0x1ac>)
 8007dc4:	f240 32ca 	movw	r2, #970	; 0x3ca
 8007dc8:	495f      	ldr	r1, [pc, #380]	; (8007f48 <pbuf_copy+0x1b0>)
 8007dca:	4860      	ldr	r0, [pc, #384]	; (8007f4c <pbuf_copy+0x1b4>)
 8007dcc:	f7f9 fab0 	bl	8001330 <iprintf>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f010 fb51 	bl	8018478 <fflush>
 8007dd6:	f010 fa95 	bl	8018304 <abort>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	895b      	ldrh	r3, [r3, #10]
 8007dde:	461a      	mov	r2, r3
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	895b      	ldrh	r3, [r3, #10]
 8007de8:	4619      	mov	r1, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1acb      	subs	r3, r1, r3
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d306      	bcc.n	8007e00 <pbuf_copy+0x68>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	895b      	ldrh	r3, [r3, #10]
 8007df6:	461a      	mov	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e005      	b.n	8007e0c <pbuf_copy+0x74>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	895b      	ldrh	r3, [r3, #10]
 8007e04:	461a      	mov	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	18d0      	adds	r0, r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f010 fc39 	bl	8018696 <memcpy>
    offset_to += len;
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	895b      	ldrh	r3, [r3, #10]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d20b      	bcs.n	8007e58 <pbuf_copy+0xc0>
 8007e40:	4b40      	ldr	r3, [pc, #256]	; (8007f44 <pbuf_copy+0x1ac>)
 8007e42:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007e46:	4942      	ldr	r1, [pc, #264]	; (8007f50 <pbuf_copy+0x1b8>)
 8007e48:	4840      	ldr	r0, [pc, #256]	; (8007f4c <pbuf_copy+0x1b4>)
 8007e4a:	f7f9 fa71 	bl	8001330 <iprintf>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	f010 fb12 	bl	8018478 <fflush>
 8007e54:	f010 fa56 	bl	8018304 <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	895b      	ldrh	r3, [r3, #10]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d20b      	bcs.n	8007e7c <pbuf_copy+0xe4>
 8007e64:	4b37      	ldr	r3, [pc, #220]	; (8007f44 <pbuf_copy+0x1ac>)
 8007e66:	f240 32da 	movw	r2, #986	; 0x3da
 8007e6a:	493a      	ldr	r1, [pc, #232]	; (8007f54 <pbuf_copy+0x1bc>)
 8007e6c:	4837      	ldr	r0, [pc, #220]	; (8007f4c <pbuf_copy+0x1b4>)
 8007e6e:	f7f9 fa5f 	bl	8001330 <iprintf>
 8007e72:	2000      	movs	r0, #0
 8007e74:	f010 fb00 	bl	8018478 <fflush>
 8007e78:	f010 fa44 	bl	8018304 <abort>
    if (offset_from >= p_from->len) {
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	895b      	ldrh	r3, [r3, #10]
 8007e80:	461a      	mov	r2, r3
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d804      	bhi.n	8007e92 <pbuf_copy+0xfa>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	895b      	ldrh	r3, [r3, #10]
 8007e96:	461a      	mov	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d116      	bne.n	8007ecc <pbuf_copy+0x134>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10e      	bne.n	8007ecc <pbuf_copy+0x134>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <pbuf_copy+0x134>
 8007eb4:	4b23      	ldr	r3, [pc, #140]	; (8007f44 <pbuf_copy+0x1ac>)
 8007eb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007eba:	4927      	ldr	r1, [pc, #156]	; (8007f58 <pbuf_copy+0x1c0>)
 8007ebc:	4823      	ldr	r0, [pc, #140]	; (8007f4c <pbuf_copy+0x1b4>)
 8007ebe:	f7f9 fa37 	bl	8001330 <iprintf>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f010 fad8 	bl	8018478 <fflush>
 8007ec8:	f010 fa1c 	bl	8018304 <abort>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d015      	beq.n	8007efe <pbuf_copy+0x166>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	895a      	ldrh	r2, [r3, #10]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	891b      	ldrh	r3, [r3, #8]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d10f      	bne.n	8007efe <pbuf_copy+0x166>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <pbuf_copy+0x166>
 8007ee6:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <pbuf_copy+0x1ac>)
 8007ee8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8007eec:	491b      	ldr	r1, [pc, #108]	; (8007f5c <pbuf_copy+0x1c4>)
 8007eee:	4817      	ldr	r0, [pc, #92]	; (8007f4c <pbuf_copy+0x1b4>)
 8007ef0:	f7f9 fa1e 	bl	8001330 <iprintf>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f010 fabf 	bl	8018478 <fflush>
 8007efa:	f010 fa03 	bl	8018304 <abort>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d015      	beq.n	8007f30 <pbuf_copy+0x198>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	895a      	ldrh	r2, [r3, #10]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	891b      	ldrh	r3, [r3, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d10f      	bne.n	8007f30 <pbuf_copy+0x198>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <pbuf_copy+0x198>
 8007f18:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <pbuf_copy+0x1ac>)
 8007f1a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007f1e:	490f      	ldr	r1, [pc, #60]	; (8007f5c <pbuf_copy+0x1c4>)
 8007f20:	480a      	ldr	r0, [pc, #40]	; (8007f4c <pbuf_copy+0x1b4>)
 8007f22:	f7f9 fa05 	bl	8001330 <iprintf>
 8007f26:	2000      	movs	r0, #0
 8007f28:	f010 faa6 	bl	8018478 <fflush>
 8007f2c:	f010 f9ea 	bl	8018304 <abort>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f47f af51 	bne.w	8007dda <pbuf_copy+0x42>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	080199a8 	.word	0x080199a8
 8007f48:	08019bdc 	.word	0x08019bdc
 8007f4c:	080199f4 	.word	0x080199f4
 8007f50:	08019c0c 	.word	0x08019c0c
 8007f54:	08019c24 	.word	0x08019c24
 8007f58:	08019c40 	.word	0x08019c40
 8007f5c:	08019c50 	.word	0x08019c50

08007f60 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	460b      	mov	r3, r1
 8007f70:	80fb      	strh	r3, [r7, #6]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <pbuf_copy_partial+0x3c>
 8007f84:	4b2e      	ldr	r3, [pc, #184]	; (8008040 <pbuf_copy_partial+0xe0>)
 8007f86:	f240 420a 	movw	r2, #1034	; 0x40a
 8007f8a:	492e      	ldr	r1, [pc, #184]	; (8008044 <pbuf_copy_partial+0xe4>)
 8007f8c:	482e      	ldr	r0, [pc, #184]	; (8008048 <pbuf_copy_partial+0xe8>)
 8007f8e:	f7f9 f9cf 	bl	8001330 <iprintf>
 8007f92:	2000      	movs	r0, #0
 8007f94:	f010 fa70 	bl	8018478 <fflush>
 8007f98:	f010 f9b4 	bl	8018304 <abort>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10b      	bne.n	8007fba <pbuf_copy_partial+0x5a>
 8007fa2:	4b27      	ldr	r3, [pc, #156]	; (8008040 <pbuf_copy_partial+0xe0>)
 8007fa4:	f240 420b 	movw	r2, #1035	; 0x40b
 8007fa8:	4928      	ldr	r1, [pc, #160]	; (800804c <pbuf_copy_partial+0xec>)
 8007faa:	4827      	ldr	r0, [pc, #156]	; (8008048 <pbuf_copy_partial+0xe8>)
 8007fac:	f7f9 f9c0 	bl	8001330 <iprintf>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	f010 fa61 	bl	8018478 <fflush>
 8007fb6:	f010 f9a5 	bl	8018304 <abort>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e034      	b.n	800802a <pbuf_copy_partial+0xca>
    if ((offset != 0) && (offset >= p->len)) {
 8007fc0:	88bb      	ldrh	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <pbuf_copy_partial+0x7c>
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	895b      	ldrh	r3, [r3, #10]
 8007fca:	88ba      	ldrh	r2, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d305      	bcc.n	8007fdc <pbuf_copy_partial+0x7c>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	895b      	ldrh	r3, [r3, #10]
 8007fd4:	88ba      	ldrh	r2, [r7, #4]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	80bb      	strh	r3, [r7, #4]
 8007fda:	e023      	b.n	8008024 <pbuf_copy_partial+0xc4>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	895a      	ldrh	r2, [r3, #10]
 8007fe0:	88bb      	ldrh	r3, [r7, #4]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007fe6:	8b3a      	ldrh	r2, [r7, #24]
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d901      	bls.n	8007ff2 <pbuf_copy_partial+0x92>
        buf_copy_len = len;
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ff2:	8b7b      	ldrh	r3, [r7, #26]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	18d0      	adds	r0, r2, r3
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	88bb      	ldrh	r3, [r7, #4]
 8007ffe:	4413      	add	r3, r2
 8008000:	8b3a      	ldrh	r2, [r7, #24]
 8008002:	4619      	mov	r1, r3
 8008004:	f010 fb47 	bl	8018696 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008008:	8afa      	ldrh	r2, [r7, #22]
 800800a:	8b3b      	ldrh	r3, [r7, #24]
 800800c:	4413      	add	r3, r2
 800800e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008010:	8b7a      	ldrh	r2, [r7, #26]
 8008012:	8b3b      	ldrh	r3, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	8b3b      	ldrh	r3, [r7, #24]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <pbuf_copy_partial+0xd6>
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1c4      	bne.n	8007fc0 <pbuf_copy_partial+0x60>
    }
  }
  return copied_total;
 8008036:	8afb      	ldrh	r3, [r7, #22]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3720      	adds	r7, #32
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	080199a8 	.word	0x080199a8
 8008044:	08019c7c 	.word	0x08019c7c
 8008048:	080199f4 	.word	0x080199f4
 800804c:	08019c9c 	.word	0x08019c9c

08008050 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	603a      	str	r2, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
 800805c:	460b      	mov	r3, r1
 800805e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	8919      	ldrh	r1, [r3, #8]
 8008064:	88ba      	ldrh	r2, [r7, #4]
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff fa41 	bl	80074f0 <pbuf_alloc>
 800806e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <pbuf_clone+0x2a>
    return NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	e016      	b.n	80080a8 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff fe8b 	bl	8007d98 <pbuf_copy>
 8008082:	4603      	mov	r3, r0
 8008084:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008086:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <pbuf_clone+0x56>
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <pbuf_clone+0x60>)
 8008090:	f240 5224 	movw	r2, #1316	; 0x524
 8008094:	4907      	ldr	r1, [pc, #28]	; (80080b4 <pbuf_clone+0x64>)
 8008096:	4808      	ldr	r0, [pc, #32]	; (80080b8 <pbuf_clone+0x68>)
 8008098:	f7f9 f94a 	bl	8001330 <iprintf>
 800809c:	2000      	movs	r0, #0
 800809e:	f010 f9eb 	bl	8018478 <fflush>
 80080a2:	f010 f92f 	bl	8018304 <abort>
  return q;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	080199a8 	.word	0x080199a8
 80080b4:	08019da8 	.word	0x08019da8
 80080b8:	080199f4 	.word	0x080199f4

080080bc <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80080c0:	bf00      	nop
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80080ca:	b480      	push	{r7}
 80080cc:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7d1b      	ldrb	r3, [r3, #20]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d10a      	bne.n	80080fe <tcp_free+0x26>
 80080e8:	4b09      	ldr	r3, [pc, #36]	; (8008110 <tcp_free+0x38>)
 80080ea:	22d4      	movs	r2, #212	; 0xd4
 80080ec:	4909      	ldr	r1, [pc, #36]	; (8008114 <tcp_free+0x3c>)
 80080ee:	480a      	ldr	r0, [pc, #40]	; (8008118 <tcp_free+0x40>)
 80080f0:	f7f9 f91e 	bl	8001330 <iprintf>
 80080f4:	2000      	movs	r0, #0
 80080f6:	f010 f9bf 	bl	8018478 <fflush>
 80080fa:	f010 f903 	bl	8018304 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	2001      	movs	r0, #1
 8008102:	f7fe feaf 	bl	8006e64 <memp_free>
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	08019e34 	.word	0x08019e34
 8008114:	08019e4c 	.word	0x08019e4c
 8008118:	08019e60 	.word	0x08019e60

0800811c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7d1b      	ldrb	r3, [r3, #20]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d10a      	bne.n	8008142 <tcp_free_listen+0x26>
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <tcp_free_listen+0x38>)
 800812e:	22df      	movs	r2, #223	; 0xdf
 8008130:	4909      	ldr	r1, [pc, #36]	; (8008158 <tcp_free_listen+0x3c>)
 8008132:	480a      	ldr	r0, [pc, #40]	; (800815c <tcp_free_listen+0x40>)
 8008134:	f7f9 f8fc 	bl	8001330 <iprintf>
 8008138:	2000      	movs	r0, #0
 800813a:	f010 f99d 	bl	8018478 <fflush>
 800813e:	f010 f8e1 	bl	8018304 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	2002      	movs	r0, #2
 8008146:	f7fe fe8d 	bl	8006e64 <memp_free>
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	08019e34 	.word	0x08019e34
 8008158:	08019e88 	.word	0x08019e88
 800815c:	08019e60 	.word	0x08019e60

08008160 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008164:	f001 f91e 	bl	80093a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008168:	4b07      	ldr	r3, [pc, #28]	; (8008188 <tcp_tmr+0x28>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <tcp_tmr+0x28>)
 8008172:	701a      	strb	r2, [r3, #0]
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <tcp_tmr+0x28>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008180:	f000 fd9e 	bl	8008cc0 <tcp_slowtmr>
  }
}
 8008184:	bf00      	nop
 8008186:	bd80      	pop	{r7, pc}
 8008188:	2000028d 	.word	0x2000028d

0800818c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <tcp_remove_listener+0x26>
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <tcp_remove_listener+0x50>)
 800819e:	22ff      	movs	r2, #255	; 0xff
 80081a0:	490f      	ldr	r1, [pc, #60]	; (80081e0 <tcp_remove_listener+0x54>)
 80081a2:	4810      	ldr	r0, [pc, #64]	; (80081e4 <tcp_remove_listener+0x58>)
 80081a4:	f7f9 f8c4 	bl	8001330 <iprintf>
 80081a8:	2000      	movs	r0, #0
 80081aa:	f010 f965 	bl	8018478 <fflush>
 80081ae:	f010 f8a9 	bl	8018304 <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	e00a      	b.n	80081ce <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d102      	bne.n	80081c8 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f1      	bne.n	80081b8 <tcp_remove_listener+0x2c>
    }
  }
}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	08019e34 	.word	0x08019e34
 80081e0:	08019ea4 	.word	0x08019ea4
 80081e4:	08019e60 	.word	0x08019e60

080081e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <tcp_listen_closed+0x26>
 80081f6:	4b19      	ldr	r3, [pc, #100]	; (800825c <tcp_listen_closed+0x74>)
 80081f8:	f240 1211 	movw	r2, #273	; 0x111
 80081fc:	4918      	ldr	r1, [pc, #96]	; (8008260 <tcp_listen_closed+0x78>)
 80081fe:	4819      	ldr	r0, [pc, #100]	; (8008264 <tcp_listen_closed+0x7c>)
 8008200:	f7f9 f896 	bl	8001330 <iprintf>
 8008204:	2000      	movs	r0, #0
 8008206:	f010 f937 	bl	8018478 <fflush>
 800820a:	f010 f87b 	bl	8018304 <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7d1b      	ldrb	r3, [r3, #20]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d00b      	beq.n	800822e <tcp_listen_closed+0x46>
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <tcp_listen_closed+0x74>)
 8008218:	f44f 7289 	mov.w	r2, #274	; 0x112
 800821c:	4912      	ldr	r1, [pc, #72]	; (8008268 <tcp_listen_closed+0x80>)
 800821e:	4811      	ldr	r0, [pc, #68]	; (8008264 <tcp_listen_closed+0x7c>)
 8008220:	f7f9 f886 	bl	8001330 <iprintf>
 8008224:	2000      	movs	r0, #0
 8008226:	f010 f927 	bl	8018478 <fflush>
 800822a:	f010 f86b 	bl	8018304 <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800822e:	2301      	movs	r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e00b      	b.n	800824c <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008234:	4a0d      	ldr	r2, [pc, #52]	; (800826c <tcp_listen_closed+0x84>)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff ffa3 	bl	800818c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d9f0      	bls.n	8008234 <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	08019e34 	.word	0x08019e34
 8008260:	08019ecc 	.word	0x08019ecc
 8008264:	08019e60 	.word	0x08019e60
 8008268:	08019ed8 	.word	0x08019ed8
 800826c:	0801c7b4 	.word	0x0801c7b4

08008270 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008270:	b5b0      	push	{r4, r5, r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af04      	add	r7, sp, #16
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <tcp_close_shutdown+0x2a>
 8008282:	4b66      	ldr	r3, [pc, #408]	; (800841c <tcp_close_shutdown+0x1ac>)
 8008284:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008288:	4965      	ldr	r1, [pc, #404]	; (8008420 <tcp_close_shutdown+0x1b0>)
 800828a:	4866      	ldr	r0, [pc, #408]	; (8008424 <tcp_close_shutdown+0x1b4>)
 800828c:	f7f9 f850 	bl	8001330 <iprintf>
 8008290:	2000      	movs	r0, #0
 8008292:	f010 f8f1 	bl	8018478 <fflush>
 8008296:	f010 f835 	bl	8018304 <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d06b      	beq.n	8008378 <tcp_close_shutdown+0x108>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	7d1b      	ldrb	r3, [r3, #20]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d003      	beq.n	80082b0 <tcp_close_shutdown+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7d1b      	ldrb	r3, [r3, #20]
 80082ac:	2b07      	cmp	r3, #7
 80082ae:	d163      	bne.n	8008378 <tcp_close_shutdown+0x108>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d104      	bne.n	80082c2 <tcp_close_shutdown+0x52>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082c0:	d05a      	beq.n	8008378 <tcp_close_shutdown+0x108>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8b5b      	ldrh	r3, [r3, #26]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10b      	bne.n	80082e6 <tcp_close_shutdown+0x76>
 80082ce:	4b53      	ldr	r3, [pc, #332]	; (800841c <tcp_close_shutdown+0x1ac>)
 80082d0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80082d4:	4954      	ldr	r1, [pc, #336]	; (8008428 <tcp_close_shutdown+0x1b8>)
 80082d6:	4853      	ldr	r0, [pc, #332]	; (8008424 <tcp_close_shutdown+0x1b4>)
 80082d8:	f7f9 f82a 	bl	8001330 <iprintf>
 80082dc:	2000      	movs	r0, #0
 80082de:	f010 f8cb 	bl	8018478 <fflush>
 80082e2:	f010 f80f 	bl	8018304 <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80082ee:	687d      	ldr	r5, [r7, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	8ad2      	ldrh	r2, [r2, #22]
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	8b09      	ldrh	r1, [r1, #24]
 80082fc:	9102      	str	r1, [sp, #8]
 80082fe:	9201      	str	r2, [sp, #4]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	462b      	mov	r3, r5
 8008304:	4622      	mov	r2, r4
 8008306:	4601      	mov	r1, r0
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f006 f931 	bl	800e570 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fc46 	bl	8009ba0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008314:	4b45      	ldr	r3, [pc, #276]	; (800842c <tcp_close_shutdown+0x1bc>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	429a      	cmp	r2, r3
 800831c:	d105      	bne.n	800832a <tcp_close_shutdown+0xba>
 800831e:	4b43      	ldr	r3, [pc, #268]	; (800842c <tcp_close_shutdown+0x1bc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a41      	ldr	r2, [pc, #260]	; (800842c <tcp_close_shutdown+0x1bc>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	e013      	b.n	8008352 <tcp_close_shutdown+0xe2>
 800832a:	4b40      	ldr	r3, [pc, #256]	; (800842c <tcp_close_shutdown+0x1bc>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e00c      	b.n	800834c <tcp_close_shutdown+0xdc>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d104      	bne.n	8008346 <tcp_close_shutdown+0xd6>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	60da      	str	r2, [r3, #12]
 8008344:	e005      	b.n	8008352 <tcp_close_shutdown+0xe2>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ef      	bne.n	8008332 <tcp_close_shutdown+0xc2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	60da      	str	r2, [r3, #12]
 8008358:	4b35      	ldr	r3, [pc, #212]	; (8008430 <tcp_close_shutdown+0x1c0>)
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800835e:	4b35      	ldr	r3, [pc, #212]	; (8008434 <tcp_close_shutdown+0x1c4>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	429a      	cmp	r2, r3
 8008366:	d102      	bne.n	800836e <tcp_close_shutdown+0xfe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008368:	f004 fa32 	bl	800c7d0 <tcp_trigger_input_pcb_close>
 800836c:	e002      	b.n	8008374 <tcp_close_shutdown+0x104>
      } else {
        tcp_free(pcb);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff feb2 	bl	80080d8 <tcp_free>
      }
      return ERR_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e04d      	b.n	8008414 <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7d1b      	ldrb	r3, [r3, #20]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d02d      	beq.n	80083dc <tcp_close_shutdown+0x16c>
 8008380:	2b02      	cmp	r3, #2
 8008382:	d036      	beq.n	80083f2 <tcp_close_shutdown+0x182>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d13f      	bne.n	8008408 <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	8adb      	ldrh	r3, [r3, #22]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d021      	beq.n	80083d4 <tcp_close_shutdown+0x164>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008390:	4b29      	ldr	r3, [pc, #164]	; (8008438 <tcp_close_shutdown+0x1c8>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d105      	bne.n	80083a6 <tcp_close_shutdown+0x136>
 800839a:	4b27      	ldr	r3, [pc, #156]	; (8008438 <tcp_close_shutdown+0x1c8>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4a25      	ldr	r2, [pc, #148]	; (8008438 <tcp_close_shutdown+0x1c8>)
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	e013      	b.n	80083ce <tcp_close_shutdown+0x15e>
 80083a6:	4b24      	ldr	r3, [pc, #144]	; (8008438 <tcp_close_shutdown+0x1c8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60bb      	str	r3, [r7, #8]
 80083ac:	e00c      	b.n	80083c8 <tcp_close_shutdown+0x158>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d104      	bne.n	80083c2 <tcp_close_shutdown+0x152>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	60da      	str	r2, [r3, #12]
 80083c0:	e005      	b.n	80083ce <tcp_close_shutdown+0x15e>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	60bb      	str	r3, [r7, #8]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1ef      	bne.n	80083ae <tcp_close_shutdown+0x13e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fe7f 	bl	80080d8 <tcp_free>
      break;
 80083da:	e01a      	b.n	8008412 <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ff03 	bl	80081e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4815      	ldr	r0, [pc, #84]	; (800843c <tcp_close_shutdown+0x1cc>)
 80083e6:	f001 fc31 	bl	8009c4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fe96 	bl	800811c <tcp_free_listen>
      break;
 80083f0:	e00f      	b.n	8008412 <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	480d      	ldr	r0, [pc, #52]	; (800842c <tcp_close_shutdown+0x1bc>)
 80083f6:	f001 fc29 	bl	8009c4c <tcp_pcb_remove>
 80083fa:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <tcp_close_shutdown+0x1c0>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff fe69 	bl	80080d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008406:	e004      	b.n	8008412 <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f819 	bl	8008440 <tcp_close_shutdown_fin>
 800840e:	4603      	mov	r3, r0
 8008410:	e000      	b.n	8008414 <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bdb0      	pop	{r4, r5, r7, pc}
 800841c:	08019e34 	.word	0x08019e34
 8008420:	08019ef0 	.word	0x08019ef0
 8008424:	08019e60 	.word	0x08019e60
 8008428:	08019f10 	.word	0x08019f10
 800842c:	20016f44 	.word	0x20016f44
 8008430:	20016f40 	.word	0x20016f40
 8008434:	20016f58 	.word	0x20016f58
 8008438:	20016f50 	.word	0x20016f50
 800843c:	20016f4c 	.word	0x20016f4c

08008440 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <tcp_close_shutdown_fin+0x26>
 800844e:	4b2f      	ldr	r3, [pc, #188]	; (800850c <tcp_close_shutdown_fin+0xcc>)
 8008450:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008454:	492e      	ldr	r1, [pc, #184]	; (8008510 <tcp_close_shutdown_fin+0xd0>)
 8008456:	482f      	ldr	r0, [pc, #188]	; (8008514 <tcp_close_shutdown_fin+0xd4>)
 8008458:	f7f8 ff6a 	bl	8001330 <iprintf>
 800845c:	2000      	movs	r0, #0
 800845e:	f010 f80b 	bl	8018478 <fflush>
 8008462:	f00f ff4f 	bl	8018304 <abort>

  switch (pcb->state) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7d1b      	ldrb	r3, [r3, #20]
 800846a:	2b04      	cmp	r3, #4
 800846c:	d010      	beq.n	8008490 <tcp_close_shutdown_fin+0x50>
 800846e:	2b07      	cmp	r3, #7
 8008470:	d01b      	beq.n	80084aa <tcp_close_shutdown_fin+0x6a>
 8008472:	2b03      	cmp	r3, #3
 8008474:	d126      	bne.n	80084c4 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f005 f8c2 	bl	800d600 <tcp_send_fin>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11f      	bne.n	80084c8 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2205      	movs	r2, #5
 800848c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800848e:	e01b      	b.n	80084c8 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f005 f8b5 	bl	800d600 <tcp_send_fin>
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d114      	bne.n	80084cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2205      	movs	r2, #5
 80084a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80084a8:	e010      	b.n	80084cc <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f005 f8a8 	bl	800d600 <tcp_send_fin>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80084b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2209      	movs	r2, #9
 80084c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80084c2:	e005      	b.n	80084d0 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e01c      	b.n	8008502 <tcp_close_shutdown_fin+0xc2>
      break;
 80084c8:	bf00      	nop
 80084ca:	e002      	b.n	80084d2 <tcp_close_shutdown_fin+0x92>
      break;
 80084cc:	bf00      	nop
 80084ce:	e000      	b.n	80084d2 <tcp_close_shutdown_fin+0x92>
      break;
 80084d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80084d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f005 f9f0 	bl	800d8c0 <tcp_output>
 80084e0:	e00d      	b.n	80084fe <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 80084e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d108      	bne.n	80084fe <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	8b5b      	ldrh	r3, [r3, #26]
 80084f0:	f043 0308 	orr.w	r3, r3, #8
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e001      	b.n	8008502 <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 80084fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	08019e34 	.word	0x08019e34
 8008510:	08019ecc 	.word	0x08019ecc
 8008514:	08019e60 	.word	0x08019e60

08008518 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10b      	bne.n	800853e <tcp_close+0x26>
 8008526:	4b10      	ldr	r3, [pc, #64]	; (8008568 <tcp_close+0x50>)
 8008528:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800852c:	490f      	ldr	r1, [pc, #60]	; (800856c <tcp_close+0x54>)
 800852e:	4810      	ldr	r0, [pc, #64]	; (8008570 <tcp_close+0x58>)
 8008530:	f7f8 fefe 	bl	8001330 <iprintf>
 8008534:	2000      	movs	r0, #0
 8008536:	f00f ff9f 	bl	8018478 <fflush>
 800853a:	f00f fee3 	bl	8018304 <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7d1b      	ldrb	r3, [r3, #20]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d006      	beq.n	8008554 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8b5b      	ldrh	r3, [r3, #26]
 800854a:	f043 0310 	orr.w	r3, r3, #16
 800854e:	b29a      	uxth	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008554:	2101      	movs	r1, #1
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff fe8a 	bl	8008270 <tcp_close_shutdown>
 800855c:	4603      	mov	r3, r0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	08019e34 	.word	0x08019e34
 800856c:	08019f2c 	.word	0x08019f2c
 8008570:	08019e60 	.word	0x08019e60

08008574 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <tcp_shutdown+0x2a>
 8008586:	4b26      	ldr	r3, [pc, #152]	; (8008620 <tcp_shutdown+0xac>)
 8008588:	f240 2207 	movw	r2, #519	; 0x207
 800858c:	4925      	ldr	r1, [pc, #148]	; (8008624 <tcp_shutdown+0xb0>)
 800858e:	4826      	ldr	r0, [pc, #152]	; (8008628 <tcp_shutdown+0xb4>)
 8008590:	f7f8 fece 	bl	8001330 <iprintf>
 8008594:	2000      	movs	r0, #0
 8008596:	f00f ff6f 	bl	8018478 <fflush>
 800859a:	f00f feb3 	bl	8018304 <abort>

  if (pcb->state == LISTEN) {
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	7d1b      	ldrb	r3, [r3, #20]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d102      	bne.n	80085ac <tcp_shutdown+0x38>
    return ERR_CONN;
 80085a6:	f06f 030a 	mvn.w	r3, #10
 80085aa:	e035      	b.n	8008618 <tcp_shutdown+0xa4>
  }
  if (shut_rx) {
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01b      	beq.n	80085ea <tcp_shutdown+0x76>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8b5b      	ldrh	r3, [r3, #26]
 80085b6:	f043 0310 	orr.w	r3, r3, #16
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <tcp_shutdown+0x5e>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80085c6:	2101      	movs	r1, #1
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fe51 	bl	8008270 <tcp_close_shutdown>
 80085ce:	4603      	mov	r3, r0
 80085d0:	e022      	b.n	8008618 <tcp_shutdown+0xa4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <tcp_shutdown+0x76>
      pbuf_free(pcb->refused_data);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fa7e 	bl	8007ae0 <pbuf_free>
      pcb->refused_data = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d012      	beq.n	8008616 <tcp_shutdown+0xa2>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7d1b      	ldrb	r3, [r3, #20]
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	db0b      	blt.n	8008610 <tcp_shutdown+0x9c>
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	dd01      	ble.n	8008600 <tcp_shutdown+0x8c>
 80085fc:	2b07      	cmp	r3, #7
 80085fe:	d107      	bne.n	8008610 <tcp_shutdown+0x9c>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4619      	mov	r1, r3
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff fe32 	bl	8008270 <tcp_close_shutdown>
 800860c:	4603      	mov	r3, r0
 800860e:	e003      	b.n	8008618 <tcp_shutdown+0xa4>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8008610:	f06f 030a 	mvn.w	r3, #10
 8008614:	e000      	b.n	8008618 <tcp_shutdown+0xa4>
    }
  }
  return ERR_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	08019e34 	.word	0x08019e34
 8008624:	08019f44 	.word	0x08019f44
 8008628:	08019e60 	.word	0x08019e60

0800862c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08e      	sub	sp, #56	; 0x38
 8008630:	af04      	add	r7, sp, #16
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <tcp_abandon+0x28>
 800863c:	4b57      	ldr	r3, [pc, #348]	; (800879c <tcp_abandon+0x170>)
 800863e:	f240 223d 	movw	r2, #573	; 0x23d
 8008642:	4957      	ldr	r1, [pc, #348]	; (80087a0 <tcp_abandon+0x174>)
 8008644:	4857      	ldr	r0, [pc, #348]	; (80087a4 <tcp_abandon+0x178>)
 8008646:	f7f8 fe73 	bl	8001330 <iprintf>
 800864a:	2000      	movs	r0, #0
 800864c:	f00f ff14 	bl	8018478 <fflush>
 8008650:	f00f fe58 	bl	8018304 <abort>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7d1b      	ldrb	r3, [r3, #20]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d10b      	bne.n	8008674 <tcp_abandon+0x48>
 800865c:	4b4f      	ldr	r3, [pc, #316]	; (800879c <tcp_abandon+0x170>)
 800865e:	f240 2241 	movw	r2, #577	; 0x241
 8008662:	4951      	ldr	r1, [pc, #324]	; (80087a8 <tcp_abandon+0x17c>)
 8008664:	484f      	ldr	r0, [pc, #316]	; (80087a4 <tcp_abandon+0x178>)
 8008666:	f7f8 fe63 	bl	8001330 <iprintf>
 800866a:	2000      	movs	r0, #0
 800866c:	f00f ff04 	bl	8018478 <fflush>
 8008670:	f00f fe48 	bl	8018304 <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7d1b      	ldrb	r3, [r3, #20]
 8008678:	2b0a      	cmp	r3, #10
 800867a:	d107      	bne.n	800868c <tcp_abandon+0x60>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	484b      	ldr	r0, [pc, #300]	; (80087ac <tcp_abandon+0x180>)
 8008680:	f001 fae4 	bl	8009c4c <tcp_pcb_remove>
    tcp_free(pcb);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff fd27 	bl	80080d8 <tcp_free>
    }
    last_state = pcb->state;
    tcp_free(pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800868a:	e082      	b.n	8008792 <tcp_abandon+0x166>
    int send_rst = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008698:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a6:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7d1b      	ldrb	r3, [r3, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d126      	bne.n	8008704 <tcp_abandon+0xd8>
      if (pcb->local_port != 0) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8adb      	ldrh	r3, [r3, #22]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d02e      	beq.n	800871c <tcp_abandon+0xf0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086be:	4b3c      	ldr	r3, [pc, #240]	; (80087b0 <tcp_abandon+0x184>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d105      	bne.n	80086d4 <tcp_abandon+0xa8>
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <tcp_abandon+0x184>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	4a38      	ldr	r2, [pc, #224]	; (80087b0 <tcp_abandon+0x184>)
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	e013      	b.n	80086fc <tcp_abandon+0xd0>
 80086d4:	4b36      	ldr	r3, [pc, #216]	; (80087b0 <tcp_abandon+0x184>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	e00c      	b.n	80086f6 <tcp_abandon+0xca>
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d104      	bne.n	80086f0 <tcp_abandon+0xc4>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	e005      	b.n	80086fc <tcp_abandon+0xd0>
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1ef      	bne.n	80086dc <tcp_abandon+0xb0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	e00b      	b.n	800871c <tcp_abandon+0xf0>
      send_rst = reset;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8adb      	ldrh	r3, [r3, #22]
 800870c:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4828      	ldr	r0, [pc, #160]	; (80087b4 <tcp_abandon+0x188>)
 8008712:	f001 fa9b 	bl	8009c4c <tcp_pcb_remove>
 8008716:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <tcp_abandon+0x18c>)
 8008718:	2201      	movs	r2, #1
 800871a:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008720:	2b00      	cmp	r3, #0
 8008722:	d004      	beq.n	800872e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unacked);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008728:	4618      	mov	r0, r3
 800872a:	f000 ff1d 	bl	8009568 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <tcp_abandon+0x114>
      tcp_segs_free(pcb->unsent);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873a:	4618      	mov	r0, r3
 800873c:	f000 ff14 	bl	8009568 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <tcp_abandon+0x126>
      tcp_segs_free(pcb->ooseq);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874c:	4618      	mov	r0, r3
 800874e:	f000 ff0b 	bl	8009568 <tcp_segs_free>
    if (send_rst) {
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00e      	beq.n	8008776 <tcp_abandon+0x14a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3304      	adds	r3, #4
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	8b12      	ldrh	r2, [r2, #24]
 8008762:	9202      	str	r2, [sp, #8]
 8008764:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	460b      	mov	r3, r1
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	69b9      	ldr	r1, [r7, #24]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f005 fefd 	bl	800e570 <tcp_rst>
    last_state = pcb->state;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7d1b      	ldrb	r3, [r3, #20]
 800877a:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fcab 	bl	80080d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <tcp_abandon+0x166>
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f06f 010c 	mvn.w	r1, #12
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	4798      	blx	r3
}
 8008792:	bf00      	nop
 8008794:	3728      	adds	r7, #40	; 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	08019e34 	.word	0x08019e34
 80087a0:	08019f60 	.word	0x08019f60
 80087a4:	08019e60 	.word	0x08019e60
 80087a8:	08019f7c 	.word	0x08019f7c
 80087ac:	20016f54 	.word	0x20016f54
 80087b0:	20016f50 	.word	0x20016f50
 80087b4:	20016f44 	.word	0x20016f44
 80087b8:	20016f40 	.word	0x20016f40

080087bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80087c4:	2101      	movs	r1, #1
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff ff30 	bl	800862c <tcp_abandon>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80087e2:	2304      	movs	r3, #4
 80087e4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80087ec:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <tcp_bind+0x11c>)
 80087ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10b      	bne.n	800880e <tcp_bind+0x3a>
 80087f6:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <tcp_bind+0x120>)
 80087f8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80087fc:	493e      	ldr	r1, [pc, #248]	; (80088f8 <tcp_bind+0x124>)
 80087fe:	483f      	ldr	r0, [pc, #252]	; (80088fc <tcp_bind+0x128>)
 8008800:	f7f8 fd96 	bl	8001330 <iprintf>
 8008804:	2000      	movs	r0, #0
 8008806:	f00f fe37 	bl	8018478 <fflush>
 800880a:	f00f fd7b 	bl	8018304 <abort>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	7d1b      	ldrb	r3, [r3, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <tcp_bind+0x5a>
 8008816:	4b37      	ldr	r3, [pc, #220]	; (80088f4 <tcp_bind+0x120>)
 8008818:	f240 22ab 	movw	r2, #683	; 0x2ab
 800881c:	4938      	ldr	r1, [pc, #224]	; (8008900 <tcp_bind+0x12c>)
 800881e:	4837      	ldr	r0, [pc, #220]	; (80088fc <tcp_bind+0x128>)
 8008820:	f7f8 fd86 	bl	8001330 <iprintf>
 8008824:	2000      	movs	r0, #0
 8008826:	f00f fe27 	bl	8018478 <fflush>
 800882a:	f00f fd6b 	bl	8018304 <abort>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <tcp_bind+0x74>
    port = tcp_new_port();
 8008834:	f000 f9fe 	bl	8008c34 <tcp_new_port>
 8008838:	4603      	mov	r3, r0
 800883a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800883c:	88fb      	ldrh	r3, [r7, #6]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d135      	bne.n	80088ae <tcp_bind+0xda>
      return ERR_BUF;
 8008842:	f06f 0301 	mvn.w	r3, #1
 8008846:	e04f      	b.n	80088e8 <tcp_bind+0x114>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	e02b      	b.n	80088a6 <tcp_bind+0xd2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800884e:	4a2d      	ldr	r2, [pc, #180]	; (8008904 <tcp_bind+0x130>)
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	e01e      	b.n	800889a <tcp_bind+0xc6>
        if (cpcb->local_port == port) {
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	8adb      	ldrh	r3, [r3, #22]
 8008860:	88fa      	ldrh	r2, [r7, #6]
 8008862:	429a      	cmp	r2, r3
 8008864:	d116      	bne.n	8008894 <tcp_bind+0xc0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008866:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <tcp_bind+0xba>
                (ip_addr_isany(&cpcb->local_ip) ||
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <tcp_bind+0xba>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <tcp_bind+0xba>
                 ip_addr_isany(ipaddr) ||
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <tcp_bind+0xba>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800888a:	429a      	cmp	r2, r3
 800888c:	d102      	bne.n	8008894 <tcp_bind+0xc0>
              return ERR_USE;
 800888e:	f06f 0307 	mvn.w	r3, #7
 8008892:	e029      	b.n	80088e8 <tcp_bind+0x114>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	61bb      	str	r3, [r7, #24]
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1dd      	bne.n	800885c <tcp_bind+0x88>
    for (i = 0; i < max_pcb_list; i++) {
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	3301      	adds	r3, #1
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	dbcf      	blt.n	800884e <tcp_bind+0x7a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00c      	beq.n	80088ce <tcp_bind+0xfa>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <tcp_bind+0xfa>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <tcp_bind+0xf4>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	e000      	b.n	80088ca <tcp_bind+0xf6>
 80088c8:	2300      	movs	r3, #0
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	88fa      	ldrh	r2, [r7, #6]
 80088d2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <tcp_bind+0x134>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	60da      	str	r2, [r3, #12]
 80088dc:	4a0a      	ldr	r2, [pc, #40]	; (8008908 <tcp_bind+0x134>)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f006 f825 	bl	800e930 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	0801c690 	.word	0x0801c690
 80088f4:	08019e34 	.word	0x08019e34
 80088f8:	08019fb0 	.word	0x08019fb0
 80088fc:	08019e60 	.word	0x08019e60
 8008900:	08019fc8 	.word	0x08019fc8
 8008904:	0801c7b4 	.word	0x0801c7b4
 8008908:	20016f50 	.word	0x20016f50

0800890c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10b      	bne.n	8008938 <tcp_accept_null+0x2c>
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <tcp_accept_null+0x40>)
 8008922:	f240 320f 	movw	r2, #783	; 0x30f
 8008926:	490a      	ldr	r1, [pc, #40]	; (8008950 <tcp_accept_null+0x44>)
 8008928:	480a      	ldr	r0, [pc, #40]	; (8008954 <tcp_accept_null+0x48>)
 800892a:	f7f8 fd01 	bl	8001330 <iprintf>
 800892e:	2000      	movs	r0, #0
 8008930:	f00f fda2 	bl	8018478 <fflush>
 8008934:	f00f fce6 	bl	8018304 <abort>

  tcp_abort(pcb);
 8008938:	68b8      	ldr	r0, [r7, #8]
 800893a:	f7ff ff3f 	bl	80087bc <tcp_abort>

  return ERR_ABRT;
 800893e:	f06f 030c 	mvn.w	r3, #12
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	08019e34 	.word	0x08019e34
 8008950:	08019ff0 	.word	0x08019ff0
 8008954:	08019e60 	.word	0x08019e60

08008958 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008966:	2300      	movs	r3, #0
 8008968:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <tcp_listen_with_backlog_and_err+0x30>
 8008970:	4b49      	ldr	r3, [pc, #292]	; (8008a98 <tcp_listen_with_backlog_and_err+0x140>)
 8008972:	f240 3259 	movw	r2, #857	; 0x359
 8008976:	4949      	ldr	r1, [pc, #292]	; (8008a9c <tcp_listen_with_backlog_and_err+0x144>)
 8008978:	4849      	ldr	r0, [pc, #292]	; (8008aa0 <tcp_listen_with_backlog_and_err+0x148>)
 800897a:	f7f8 fcd9 	bl	8001330 <iprintf>
 800897e:	2000      	movs	r0, #0
 8008980:	f00f fd7a 	bl	8018478 <fflush>
 8008984:	f00f fcbe 	bl	8018304 <abort>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	7d1b      	ldrb	r3, [r3, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <tcp_listen_with_backlog_and_err+0x50>
 8008990:	4b41      	ldr	r3, [pc, #260]	; (8008a98 <tcp_listen_with_backlog_and_err+0x140>)
 8008992:	f240 325a 	movw	r2, #858	; 0x35a
 8008996:	4943      	ldr	r1, [pc, #268]	; (8008aa4 <tcp_listen_with_backlog_and_err+0x14c>)
 8008998:	4841      	ldr	r0, [pc, #260]	; (8008aa0 <tcp_listen_with_backlog_and_err+0x148>)
 800899a:	f7f8 fcc9 	bl	8001330 <iprintf>
 800899e:	2000      	movs	r0, #0
 80089a0:	f00f fd6a 	bl	8018478 <fflush>
 80089a4:	f00f fcae 	bl	8018304 <abort>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	7d1b      	ldrb	r3, [r3, #20]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d104      	bne.n	80089ba <tcp_listen_with_backlog_and_err+0x62>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80089b4:	23f7      	movs	r3, #247	; 0xf7
 80089b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80089b8:	e062      	b.n	8008a80 <tcp_listen_with_backlog_and_err+0x128>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80089ba:	2002      	movs	r0, #2
 80089bc:	f7fe fa08 	bl	8006dd0 <memp_malloc>
 80089c0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d102      	bne.n	80089ce <tcp_listen_with_backlog_and_err+0x76>
    res = ERR_MEM;
 80089c8:	23ff      	movs	r3, #255	; 0xff
 80089ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 80089cc:	e058      	b.n	8008a80 <tcp_listen_with_backlog_and_err+0x128>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8ada      	ldrh	r2, [r3, #22]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	2201      	movs	r2, #1
 80089e2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	7d5a      	ldrb	r2, [r3, #21]
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	7a5a      	ldrb	r2, [r3, #9]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	2200      	movs	r2, #0
 80089f8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	7ada      	ldrb	r2, [r3, #11]
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	7a9a      	ldrb	r2, [r3, #10]
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8adb      	ldrh	r3, [r3, #22]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d021      	beq.n	8008a5e <tcp_listen_with_backlog_and_err+0x106>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008a1a:	4b23      	ldr	r3, [pc, #140]	; (8008aa8 <tcp_listen_with_backlog_and_err+0x150>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d105      	bne.n	8008a30 <tcp_listen_with_backlog_and_err+0xd8>
 8008a24:	4b20      	ldr	r3, [pc, #128]	; (8008aa8 <tcp_listen_with_backlog_and_err+0x150>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	4a1f      	ldr	r2, [pc, #124]	; (8008aa8 <tcp_listen_with_backlog_and_err+0x150>)
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	e013      	b.n	8008a58 <tcp_listen_with_backlog_and_err+0x100>
 8008a30:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <tcp_listen_with_backlog_and_err+0x150>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	e00c      	b.n	8008a52 <tcp_listen_with_backlog_and_err+0xfa>
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d104      	bne.n	8008a4c <tcp_listen_with_backlog_and_err+0xf4>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e005      	b.n	8008a58 <tcp_listen_with_backlog_and_err+0x100>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1ef      	bne.n	8008a38 <tcp_listen_with_backlog_and_err+0xe0>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff fb3a 	bl	80080d8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4a11      	ldr	r2, [pc, #68]	; (8008aac <tcp_listen_with_backlog_and_err+0x154>)
 8008a68:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008a6a:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <tcp_listen_with_backlog_and_err+0x158>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	4a0f      	ldr	r2, [pc, #60]	; (8008ab0 <tcp_listen_with_backlog_and_err+0x158>)
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	f005 ff5a 	bl	800e930 <tcp_timer_needed>
  res = ERR_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <tcp_listen_with_backlog_and_err+0x134>
    *err = res;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7efa      	ldrb	r2, [r7, #27]
 8008a8a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3720      	adds	r7, #32
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	08019e34 	.word	0x08019e34
 8008a9c:	0801a010 	.word	0x0801a010
 8008aa0:	08019e60 	.word	0x08019e60
 8008aa4:	0801a040 	.word	0x0801a040
 8008aa8:	20016f50 	.word	0x20016f50
 8008aac:	0800890d 	.word	0x0800890d
 8008ab0:	20016f4c 	.word	0x20016f4c

08008ab4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <tcp_update_rcv_ann_wnd+0x26>
 8008ac2:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <tcp_update_rcv_ann_wnd+0xbc>)
 8008ac4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008ac8:	492a      	ldr	r1, [pc, #168]	; (8008b74 <tcp_update_rcv_ann_wnd+0xc0>)
 8008aca:	482b      	ldr	r0, [pc, #172]	; (8008b78 <tcp_update_rcv_ann_wnd+0xc4>)
 8008acc:	f7f8 fc30 	bl	8001330 <iprintf>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f00f fcd1 	bl	8018478 <fflush>
 8008ad6:	f00f fc15 	bl	8018304 <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008aee:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008af2:	d802      	bhi.n	8008afa <tcp_update_rcv_ann_wnd+0x46>
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008af8:	e001      	b.n	8008afe <tcp_update_rcv_ann_wnd+0x4a>
 8008afa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008afe:	4413      	add	r3, r2
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	db08      	blt.n	8008b1a <tcp_update_rcv_ann_wnd+0x66>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	e025      	b.n	8008b66 <tcp_update_rcv_ann_wnd+0xb2>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dd03      	ble.n	8008b30 <tcp_update_rcv_ann_wnd+0x7c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b2e:	e019      	b.n	8008b64 <tcp_update_rcv_ann_wnd+0xb0>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b42:	d30b      	bcc.n	8008b5c <tcp_update_rcv_ann_wnd+0xa8>
 8008b44:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <tcp_update_rcv_ann_wnd+0xbc>)
 8008b46:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008b4a:	490c      	ldr	r1, [pc, #48]	; (8008b7c <tcp_update_rcv_ann_wnd+0xc8>)
 8008b4c:	480a      	ldr	r0, [pc, #40]	; (8008b78 <tcp_update_rcv_ann_wnd+0xc4>)
 8008b4e:	f7f8 fbef 	bl	8001330 <iprintf>
 8008b52:	2000      	movs	r0, #0
 8008b54:	f00f fc90 	bl	8018478 <fflush>
 8008b58:	f00f fbd4 	bl	8018304 <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008b64:	2300      	movs	r3, #0
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	08019e34 	.word	0x08019e34
 8008b74:	0801a078 	.word	0x0801a078
 8008b78:	08019e60 	.word	0x08019e60
 8008b7c:	0801a09c 	.word	0x0801a09c

08008b80 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <tcp_recved+0x2a>
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <tcp_recved+0xa4>)
 8008b94:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008b98:	4923      	ldr	r1, [pc, #140]	; (8008c28 <tcp_recved+0xa8>)
 8008b9a:	4824      	ldr	r0, [pc, #144]	; (8008c2c <tcp_recved+0xac>)
 8008b9c:	f7f8 fbc8 	bl	8001330 <iprintf>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	f00f fc69 	bl	8018478 <fflush>
 8008ba6:	f00f fbad 	bl	8018304 <abort>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7d1b      	ldrb	r3, [r3, #20]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d10b      	bne.n	8008bca <tcp_recved+0x4a>
 8008bb2:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <tcp_recved+0xa4>)
 8008bb4:	f240 32d3 	movw	r2, #979	; 0x3d3
 8008bb8:	491d      	ldr	r1, [pc, #116]	; (8008c30 <tcp_recved+0xb0>)
 8008bba:	481c      	ldr	r0, [pc, #112]	; (8008c2c <tcp_recved+0xac>)
 8008bbc:	f7f8 fbb8 	bl	8001330 <iprintf>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f00f fc59 	bl	8018478 <fflush>
 8008bc6:	f00f fb9d 	bl	8018304 <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008bd4:	89fb      	ldrh	r3, [r7, #14]
 8008bd6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008bda:	d804      	bhi.n	8008be6 <tcp_recved+0x66>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be0:	89fa      	ldrh	r2, [r7, #14]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d204      	bcs.n	8008bf0 <tcp_recved+0x70>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008bec:	851a      	strh	r2, [r3, #40]	; 0x28
 8008bee:	e002      	b.n	8008bf6 <tcp_recved+0x76>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	89fa      	ldrh	r2, [r7, #14]
 8008bf4:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff ff5c 	bl	8008ab4 <tcp_update_rcv_ann_wnd>
 8008bfc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c04:	d309      	bcc.n	8008c1a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8b5b      	ldrh	r3, [r3, #26]
 8008c0a:	f043 0302 	orr.w	r3, r3, #2
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f004 fe53 	bl	800d8c0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008c1a:	bf00      	nop
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	08019e34 	.word	0x08019e34
 8008c28:	0801a0b8 	.word	0x0801a0b8
 8008c2c:	08019e60 	.word	0x08019e60
 8008c30:	0801a0d0 	.word	0x0801a0d0

08008c34 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008c3e:	4b1e      	ldr	r3, [pc, #120]	; (8008cb8 <tcp_new_port+0x84>)
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	4b1c      	ldr	r3, [pc, #112]	; (8008cb8 <tcp_new_port+0x84>)
 8008c48:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008c4a:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <tcp_new_port+0x84>)
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d103      	bne.n	8008c5e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008c56:	4b18      	ldr	r3, [pc, #96]	; (8008cb8 <tcp_new_port+0x84>)
 8008c58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008c5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008c5e:	2300      	movs	r3, #0
 8008c60:	71fb      	strb	r3, [r7, #7]
 8008c62:	e01e      	b.n	8008ca2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <tcp_new_port+0x88>)
 8008c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	e011      	b.n	8008c96 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	8ada      	ldrh	r2, [r3, #22]
 8008c76:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <tcp_new_port+0x84>)
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d108      	bne.n	8008c90 <tcp_new_port+0x5c>
        n++;
 8008c7e:	88bb      	ldrh	r3, [r7, #4]
 8008c80:	3301      	adds	r3, #1
 8008c82:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008c84:	88bb      	ldrh	r3, [r7, #4]
 8008c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c8a:	d3d8      	bcc.n	8008c3e <tcp_new_port+0xa>
          return 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	e00d      	b.n	8008cac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	603b      	str	r3, [r7, #0]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1ea      	bne.n	8008c72 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	71fb      	strb	r3, [r7, #7]
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d9dd      	bls.n	8008c64 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008ca8:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <tcp_new_port+0x84>)
 8008caa:	881b      	ldrh	r3, [r3, #0]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	2000000c 	.word	0x2000000c
 8008cbc:	0801c7b4 	.word	0x0801c7b4

08008cc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008cc0:	b5b0      	push	{r4, r5, r7, lr}
 8008cc2:	b090      	sub	sp, #64	; 0x40
 8008cc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008ccc:	4ba1      	ldr	r3, [pc, #644]	; (8008f54 <tcp_slowtmr+0x294>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	4aa0      	ldr	r2, [pc, #640]	; (8008f54 <tcp_slowtmr+0x294>)
 8008cd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008cd6:	4ba0      	ldr	r3, [pc, #640]	; (8008f58 <tcp_slowtmr+0x298>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	4b9e      	ldr	r3, [pc, #632]	; (8008f58 <tcp_slowtmr+0x298>)
 8008ce0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008ce6:	4b9d      	ldr	r3, [pc, #628]	; (8008f5c <tcp_slowtmr+0x29c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008cec:	e2c3      	b.n	8009276 <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10b      	bne.n	8008d0e <tcp_slowtmr+0x4e>
 8008cf6:	4b9a      	ldr	r3, [pc, #616]	; (8008f60 <tcp_slowtmr+0x2a0>)
 8008cf8:	f240 42be 	movw	r2, #1214	; 0x4be
 8008cfc:	4999      	ldr	r1, [pc, #612]	; (8008f64 <tcp_slowtmr+0x2a4>)
 8008cfe:	489a      	ldr	r0, [pc, #616]	; (8008f68 <tcp_slowtmr+0x2a8>)
 8008d00:	f7f8 fb16 	bl	8001330 <iprintf>
 8008d04:	2000      	movs	r0, #0
 8008d06:	f00f fbb7 	bl	8018478 <fflush>
 8008d0a:	f00f fafb 	bl	8018304 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	7d1b      	ldrb	r3, [r3, #20]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d10b      	bne.n	8008d2e <tcp_slowtmr+0x6e>
 8008d16:	4b92      	ldr	r3, [pc, #584]	; (8008f60 <tcp_slowtmr+0x2a0>)
 8008d18:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008d1c:	4993      	ldr	r1, [pc, #588]	; (8008f6c <tcp_slowtmr+0x2ac>)
 8008d1e:	4892      	ldr	r0, [pc, #584]	; (8008f68 <tcp_slowtmr+0x2a8>)
 8008d20:	f7f8 fb06 	bl	8001330 <iprintf>
 8008d24:	2000      	movs	r0, #0
 8008d26:	f00f fba7 	bl	8018478 <fflush>
 8008d2a:	f00f faeb 	bl	8018304 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	7d1b      	ldrb	r3, [r3, #20]
 8008d32:	2b0a      	cmp	r3, #10
 8008d34:	d10b      	bne.n	8008d4e <tcp_slowtmr+0x8e>
 8008d36:	4b8a      	ldr	r3, [pc, #552]	; (8008f60 <tcp_slowtmr+0x2a0>)
 8008d38:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008d3c:	498c      	ldr	r1, [pc, #560]	; (8008f70 <tcp_slowtmr+0x2b0>)
 8008d3e:	488a      	ldr	r0, [pc, #552]	; (8008f68 <tcp_slowtmr+0x2a8>)
 8008d40:	f7f8 faf6 	bl	8001330 <iprintf>
 8008d44:	2000      	movs	r0, #0
 8008d46:	f00f fb97 	bl	8018478 <fflush>
 8008d4a:	f00f fadb 	bl	8018304 <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	7f9a      	ldrb	r2, [r3, #30]
 8008d52:	4b81      	ldr	r3, [pc, #516]	; (8008f58 <tcp_slowtmr+0x298>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d105      	bne.n	8008d66 <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008d64:	e287      	b.n	8009276 <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008d66:	4b7c      	ldr	r3, [pc, #496]	; (8008f58 <tcp_slowtmr+0x298>)
 8008d68:	781a      	ldrb	r2, [r3, #0]
 8008d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6c:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	7d1b      	ldrb	r3, [r3, #20]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d10a      	bne.n	8008d98 <tcp_slowtmr+0xd8>
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d88:	2b05      	cmp	r3, #5
 8008d8a:	d905      	bls.n	8008d98 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8008d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d90:	3301      	adds	r3, #1
 8008d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d96:	e129      	b.n	8008fec <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d9e:	2b0b      	cmp	r3, #11
 8008da0:	d905      	bls.n	8008dae <tcp_slowtmr+0xee>
      ++pcb_remove;
 8008da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da6:	3301      	adds	r3, #1
 8008da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dac:	e11e      	b.n	8008fec <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d07f      	beq.n	8008eb8 <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <tcp_slowtmr+0x118>
 8008dc0:	4b67      	ldr	r3, [pc, #412]	; (8008f60 <tcp_slowtmr+0x2a0>)
 8008dc2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008dc6:	496b      	ldr	r1, [pc, #428]	; (8008f74 <tcp_slowtmr+0x2b4>)
 8008dc8:	4867      	ldr	r0, [pc, #412]	; (8008f68 <tcp_slowtmr+0x2a8>)
 8008dca:	f7f8 fab1 	bl	8001330 <iprintf>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f00f fb52 	bl	8018478 <fflush>
 8008dd4:	f00f fa96 	bl	8018304 <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <tcp_slowtmr+0x138>
 8008de0:	4b5f      	ldr	r3, [pc, #380]	; (8008f60 <tcp_slowtmr+0x2a0>)
 8008de2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008de6:	4964      	ldr	r1, [pc, #400]	; (8008f78 <tcp_slowtmr+0x2b8>)
 8008de8:	485f      	ldr	r0, [pc, #380]	; (8008f68 <tcp_slowtmr+0x2a8>)
 8008dea:	f7f8 faa1 	bl	8001330 <iprintf>
 8008dee:	2000      	movs	r0, #0
 8008df0:	f00f fb42 	bl	8018478 <fflush>
 8008df4:	f00f fa86 	bl	8018304 <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008dfe:	2b0b      	cmp	r3, #11
 8008e00:	d905      	bls.n	8008e0e <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 8008e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e06:	3301      	adds	r3, #1
 8008e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e0c:	e0ee      	b.n	8008fec <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e14:	3b01      	subs	r3, #1
 8008e16:	4a59      	ldr	r2, [pc, #356]	; (8008f7c <tcp_slowtmr+0x2bc>)
 8008e18:	5cd3      	ldrb	r3, [r2, r3]
 8008e1a:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e22:	7ffa      	ldrb	r2, [r7, #31]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d907      	bls.n	8008e38 <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e2e:	3301      	adds	r3, #1
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e3e:	7ffa      	ldrb	r2, [r7, #31]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	f200 80d3 	bhi.w	8008fec <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8008e46:	2301      	movs	r3, #1
 8008e48:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d108      	bne.n	8008e66 <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e56:	f005 fc97 	bl	800e788 <tcp_zero_window_probe>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d014      	beq.n	8008e8a <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8008e60:	2300      	movs	r3, #0
 8008e62:	623b      	str	r3, [r7, #32]
 8008e64:	e011      	b.n	8008e8a <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e70:	f004 fa5c 	bl	800d32c <tcp_split_unsent_seg>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d107      	bne.n	8008e8a <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 8008e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e7c:	f004 fd20 	bl	800d8c0 <tcp_output>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 80ad 	beq.w	8008fec <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008ea0:	2b06      	cmp	r3, #6
 8008ea2:	f200 80a3 	bhi.w	8008fec <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008eac:	3301      	adds	r3, #1
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008eb6:	e099      	b.n	8008fec <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	db0f      	blt.n	8008ee2 <tcp_slowtmr+0x222>
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ec8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d008      	beq.n	8008ee2 <tcp_slowtmr+0x222>
          ++pcb->rtime;
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	b21a      	sxth	r2, r3
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	db7c      	blt.n	8008fec <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ef4:	f005 f820 	bl	800df38 <tcp_rexmit_rto_prepare>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d007      	beq.n	8008f0e <tcp_slowtmr+0x24e>
 8008efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d172      	bne.n	8008fec <tcp_slowtmr+0x32c>
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d06e      	beq.n	8008fec <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	7d1b      	ldrb	r3, [r3, #20]
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d03b      	beq.n	8008f8e <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f1c:	2b0c      	cmp	r3, #12
 8008f1e:	bf28      	it	cs
 8008f20:	230c      	movcs	r3, #12
 8008f22:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f2a:	10db      	asrs	r3, r3, #3
 8008f2c:	b21b      	sxth	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f36:	4413      	add	r3, r2
 8008f38:	7fba      	ldrb	r2, [r7, #30]
 8008f3a:	4911      	ldr	r1, [pc, #68]	; (8008f80 <tcp_slowtmr+0x2c0>)
 8008f3c:	5c8a      	ldrb	r2, [r1, r2]
 8008f3e:	4093      	lsls	r3, r2
 8008f40:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	dc1b      	bgt.n	8008f84 <tcp_slowtmr+0x2c4>
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	b21a      	sxth	r2, r3
 8008f50:	e01a      	b.n	8008f88 <tcp_slowtmr+0x2c8>
 8008f52:	bf00      	nop
 8008f54:	20016f48 	.word	0x20016f48
 8008f58:	2000028e 	.word	0x2000028e
 8008f5c:	20016f44 	.word	0x20016f44
 8008f60:	08019e34 	.word	0x08019e34
 8008f64:	0801a160 	.word	0x0801a160
 8008f68:	08019e60 	.word	0x08019e60
 8008f6c:	0801a18c 	.word	0x0801a18c
 8008f70:	0801a1b8 	.word	0x0801a1b8
 8008f74:	0801a1e8 	.word	0x0801a1e8
 8008f78:	0801a21c 	.word	0x0801a21c
 8008f7c:	0801c7ac 	.word	0x0801c7ac
 8008f80:	0801c79c 	.word	0x0801c79c
 8008f84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	2200      	movs	r2, #0
 8008f92:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	bf28      	it	cs
 8008fa4:	4613      	movcs	r3, r2
 8008fa6:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8008fa8:	8afb      	ldrh	r3, [r7, #22]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d206      	bcs.n	8008fd4 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fe8:	f005 f81c 	bl	800e024 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	7d1b      	ldrb	r3, [r3, #20]
 8008ff0:	2b06      	cmp	r3, #6
 8008ff2:	d111      	bne.n	8009018 <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	8b5b      	ldrh	r3, [r3, #26]
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009000:	4ba2      	ldr	r3, [pc, #648]	; (800928c <tcp_slowtmr+0x5cc>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b28      	cmp	r3, #40	; 0x28
 800900c:	d904      	bls.n	8009018 <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800900e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009012:	3301      	adds	r3, #1
 8009014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901a:	7a5b      	ldrb	r3, [r3, #9]
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d04c      	beq.n	80090be <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009028:	2b04      	cmp	r3, #4
 800902a:	d003      	beq.n	8009034 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009030:	2b07      	cmp	r3, #7
 8009032:	d144      	bne.n	80090be <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009034:	4b95      	ldr	r3, [pc, #596]	; (800928c <tcp_slowtmr+0x5cc>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009044:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009048:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800904c:	4990      	ldr	r1, [pc, #576]	; (8009290 <tcp_slowtmr+0x5d0>)
 800904e:	fba1 1303 	umull	r1, r3, r1, r3
 8009052:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009054:	429a      	cmp	r2, r3
 8009056:	d90a      	bls.n	800906e <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905c:	3301      	adds	r3, #1
 800905e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009066:	3301      	adds	r3, #1
 8009068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800906c:	e027      	b.n	80090be <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800906e:	4b87      	ldr	r3, [pc, #540]	; (800928c <tcp_slowtmr+0x5cc>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009080:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009084:	4618      	mov	r0, r3
 8009086:	4b83      	ldr	r3, [pc, #524]	; (8009294 <tcp_slowtmr+0x5d4>)
 8009088:	fb03 f300 	mul.w	r3, r3, r0
 800908c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800908e:	4980      	ldr	r1, [pc, #512]	; (8009290 <tcp_slowtmr+0x5d0>)
 8009090:	fba1 1303 	umull	r1, r3, r1, r3
 8009094:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009096:	429a      	cmp	r2, r3
 8009098:	d911      	bls.n	80090be <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 800909a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800909c:	f005 fb2e 	bl	800e6fc <tcp_keepalive>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80090a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d107      	bne.n	80090be <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090b4:	3301      	adds	r3, #1
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d011      	beq.n	80090ea <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80090c6:	4b71      	ldr	r3, [pc, #452]	; (800928c <tcp_slowtmr+0x5cc>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80090d6:	4619      	mov	r1, r3
 80090d8:	460b      	mov	r3, r1
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	440b      	add	r3, r1
 80090de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80090e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090e6:	f000 ff3b 	bl	8009f60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	7d1b      	ldrb	r3, [r3, #20]
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d10b      	bne.n	800910a <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090f2:	4b66      	ldr	r3, [pc, #408]	; (800928c <tcp_slowtmr+0x5cc>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b28      	cmp	r3, #40	; 0x28
 80090fe:	d904      	bls.n	800910a <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009104:	3301      	adds	r3, #1
 8009106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	7d1b      	ldrb	r3, [r3, #20]
 800910e:	2b09      	cmp	r3, #9
 8009110:	d10b      	bne.n	800912a <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009112:	4b5e      	ldr	r3, [pc, #376]	; (800928c <tcp_slowtmr+0x5cc>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2bf0      	cmp	r3, #240	; 0xf0
 800911e:	d904      	bls.n	800912a <tcp_slowtmr+0x46a>
        ++pcb_remove;
 8009120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009124:	3301      	adds	r3, #1
 8009126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800912a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800912e:	2b00      	cmp	r3, #0
 8009130:	d06a      	beq.n	8009208 <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009138:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800913a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800913c:	f000 fd30 	bl	8009ba0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	d015      	beq.n	8009172 <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009146:	4b54      	ldr	r3, [pc, #336]	; (8009298 <tcp_slowtmr+0x5d8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914c:	429a      	cmp	r2, r3
 800914e:	d10b      	bne.n	8009168 <tcp_slowtmr+0x4a8>
 8009150:	4b52      	ldr	r3, [pc, #328]	; (800929c <tcp_slowtmr+0x5dc>)
 8009152:	f240 526d 	movw	r2, #1389	; 0x56d
 8009156:	4952      	ldr	r1, [pc, #328]	; (80092a0 <tcp_slowtmr+0x5e0>)
 8009158:	4852      	ldr	r0, [pc, #328]	; (80092a4 <tcp_slowtmr+0x5e4>)
 800915a:	f7f8 f8e9 	bl	8001330 <iprintf>
 800915e:	2000      	movs	r0, #0
 8009160:	f00f f98a 	bl	8018478 <fflush>
 8009164:	f00f f8ce 	bl	8018304 <abort>
        prev->next = pcb->next;
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	60da      	str	r2, [r3, #12]
 8009170:	e014      	b.n	800919c <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009172:	4b49      	ldr	r3, [pc, #292]	; (8009298 <tcp_slowtmr+0x5d8>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	429a      	cmp	r2, r3
 800917a:	d00b      	beq.n	8009194 <tcp_slowtmr+0x4d4>
 800917c:	4b47      	ldr	r3, [pc, #284]	; (800929c <tcp_slowtmr+0x5dc>)
 800917e:	f240 5271 	movw	r2, #1393	; 0x571
 8009182:	4949      	ldr	r1, [pc, #292]	; (80092a8 <tcp_slowtmr+0x5e8>)
 8009184:	4847      	ldr	r0, [pc, #284]	; (80092a4 <tcp_slowtmr+0x5e4>)
 8009186:	f7f8 f8d3 	bl	8001330 <iprintf>
 800918a:	2000      	movs	r0, #0
 800918c:	f00f f974 	bl	8018478 <fflush>
 8009190:	f00f f8b8 	bl	8018304 <abort>
        tcp_active_pcbs = pcb->next;
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	4a3f      	ldr	r2, [pc, #252]	; (8009298 <tcp_slowtmr+0x5d8>)
 800919a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800919c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d013      	beq.n	80091cc <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80091ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	3304      	adds	r3, #4
 80091b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b4:	8ad2      	ldrh	r2, [r2, #22]
 80091b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091b8:	8b09      	ldrh	r1, [r1, #24]
 80091ba:	9102      	str	r1, [sp, #8]
 80091bc:	9201      	str	r2, [sp, #4]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	462b      	mov	r3, r5
 80091c2:	4622      	mov	r2, r4
 80091c4:	4601      	mov	r1, r0
 80091c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091c8:	f005 f9d2 	bl	800e570 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	7d1b      	ldrb	r3, [r3, #20]
 80091d6:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7fe ff78 	bl	80080d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80091e8:	4b30      	ldr	r3, [pc, #192]	; (80092ac <tcp_slowtmr+0x5ec>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d004      	beq.n	80091fe <tcp_slowtmr+0x53e>
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f06f 010c 	mvn.w	r1, #12
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80091fe:	4b2b      	ldr	r3, [pc, #172]	; (80092ac <tcp_slowtmr+0x5ec>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d037      	beq.n	8009276 <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 8009206:	e56c      	b.n	8008ce2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	7f1b      	ldrb	r3, [r3, #28]
 8009216:	3301      	adds	r3, #1
 8009218:	b2da      	uxtb	r2, r3
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	7f1a      	ldrb	r2, [r3, #28]
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	7f5b      	ldrb	r3, [r3, #29]
 8009226:	429a      	cmp	r2, r3
 8009228:	d325      	bcc.n	8009276 <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	2200      	movs	r2, #0
 800922e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009230:	4b1e      	ldr	r3, [pc, #120]	; (80092ac <tcp_slowtmr+0x5ec>)
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <tcp_slowtmr+0x598>
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009248:	6912      	ldr	r2, [r2, #16]
 800924a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	4603      	mov	r3, r0
 8009252:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009256:	e002      	b.n	800925e <tcp_slowtmr+0x59e>
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <tcp_slowtmr+0x5ec>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d000      	beq.n	8009268 <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8009266:	e53c      	b.n	8008ce2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009268:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8009270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009272:	f004 fb25 	bl	800d8c0 <tcp_output>
  while (pcb != NULL) {
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f47f ad38 	bne.w	8008cee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800927e:	2300      	movs	r3, #0
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009282:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <tcp_slowtmr+0x5f0>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009288:	e076      	b.n	8009378 <tcp_slowtmr+0x6b8>
 800928a:	bf00      	nop
 800928c:	20016f48 	.word	0x20016f48
 8009290:	10624dd3 	.word	0x10624dd3
 8009294:	000124f8 	.word	0x000124f8
 8009298:	20016f44 	.word	0x20016f44
 800929c:	08019e34 	.word	0x08019e34
 80092a0:	0801a254 	.word	0x0801a254
 80092a4:	08019e60 	.word	0x08019e60
 80092a8:	0801a280 	.word	0x0801a280
 80092ac:	20016f40 	.word	0x20016f40
 80092b0:	20016f54 	.word	0x20016f54
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	7d1b      	ldrb	r3, [r3, #20]
 80092b8:	2b0a      	cmp	r3, #10
 80092ba:	d00b      	beq.n	80092d4 <tcp_slowtmr+0x614>
 80092bc:	4b32      	ldr	r3, [pc, #200]	; (8009388 <tcp_slowtmr+0x6c8>)
 80092be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80092c2:	4932      	ldr	r1, [pc, #200]	; (800938c <tcp_slowtmr+0x6cc>)
 80092c4:	4832      	ldr	r0, [pc, #200]	; (8009390 <tcp_slowtmr+0x6d0>)
 80092c6:	f7f8 f833 	bl	8001330 <iprintf>
 80092ca:	2000      	movs	r0, #0
 80092cc:	f00f f8d4 	bl	8018478 <fflush>
 80092d0:	f00f f818 	bl	8018304 <abort>
    pcb_remove = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80092da:	4b2e      	ldr	r3, [pc, #184]	; (8009394 <tcp_slowtmr+0x6d4>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2bf0      	cmp	r3, #240	; 0xf0
 80092e6:	d904      	bls.n	80092f2 <tcp_slowtmr+0x632>
      ++pcb_remove;
 80092e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092ec:	3301      	adds	r3, #1
 80092ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80092f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d039      	beq.n	800936e <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80092fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fc:	f000 fc50 	bl	8009ba0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	d015      	beq.n	8009332 <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009306:	4b24      	ldr	r3, [pc, #144]	; (8009398 <tcp_slowtmr+0x6d8>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800930c:	429a      	cmp	r2, r3
 800930e:	d10b      	bne.n	8009328 <tcp_slowtmr+0x668>
 8009310:	4b1d      	ldr	r3, [pc, #116]	; (8009388 <tcp_slowtmr+0x6c8>)
 8009312:	f240 52af 	movw	r2, #1455	; 0x5af
 8009316:	4921      	ldr	r1, [pc, #132]	; (800939c <tcp_slowtmr+0x6dc>)
 8009318:	481d      	ldr	r0, [pc, #116]	; (8009390 <tcp_slowtmr+0x6d0>)
 800931a:	f7f8 f809 	bl	8001330 <iprintf>
 800931e:	2000      	movs	r0, #0
 8009320:	f00f f8aa 	bl	8018478 <fflush>
 8009324:	f00e ffee 	bl	8018304 <abort>
        prev->next = pcb->next;
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	60da      	str	r2, [r3, #12]
 8009330:	e014      	b.n	800935c <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009332:	4b19      	ldr	r3, [pc, #100]	; (8009398 <tcp_slowtmr+0x6d8>)
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	429a      	cmp	r2, r3
 800933a:	d00b      	beq.n	8009354 <tcp_slowtmr+0x694>
 800933c:	4b12      	ldr	r3, [pc, #72]	; (8009388 <tcp_slowtmr+0x6c8>)
 800933e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009342:	4917      	ldr	r1, [pc, #92]	; (80093a0 <tcp_slowtmr+0x6e0>)
 8009344:	4812      	ldr	r0, [pc, #72]	; (8009390 <tcp_slowtmr+0x6d0>)
 8009346:	f7f7 fff3 	bl	8001330 <iprintf>
 800934a:	2000      	movs	r0, #0
 800934c:	f00f f894 	bl	8018478 <fflush>
 8009350:	f00e ffd8 	bl	8018304 <abort>
        tcp_tw_pcbs = pcb->next;
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	4a0f      	ldr	r2, [pc, #60]	; (8009398 <tcp_slowtmr+0x6d8>)
 800935a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009366:	6838      	ldr	r0, [r7, #0]
 8009368:	f7fe feb6 	bl	80080d8 <tcp_free>
 800936c:	e004      	b.n	8009378 <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d19a      	bne.n	80092b4 <tcp_slowtmr+0x5f4>
    }
  }
}
 800937e:	bf00      	nop
 8009380:	3730      	adds	r7, #48	; 0x30
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}
 8009386:	bf00      	nop
 8009388:	08019e34 	.word	0x08019e34
 800938c:	0801a2ac 	.word	0x0801a2ac
 8009390:	08019e60 	.word	0x08019e60
 8009394:	20016f48 	.word	0x20016f48
 8009398:	20016f54 	.word	0x20016f54
 800939c:	0801a2dc 	.word	0x0801a2dc
 80093a0:	0801a304 	.word	0x0801a304

080093a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80093aa:	4b2d      	ldr	r3, [pc, #180]	; (8009460 <tcp_fasttmr+0xbc>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	3301      	adds	r3, #1
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	4b2b      	ldr	r3, [pc, #172]	; (8009460 <tcp_fasttmr+0xbc>)
 80093b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80093b6:	4b2b      	ldr	r3, [pc, #172]	; (8009464 <tcp_fasttmr+0xc0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80093bc:	e048      	b.n	8009450 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7f9a      	ldrb	r2, [r3, #30]
 80093c2:	4b27      	ldr	r3, [pc, #156]	; (8009460 <tcp_fasttmr+0xbc>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d03f      	beq.n	800944a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80093ca:	4b25      	ldr	r3, [pc, #148]	; (8009460 <tcp_fasttmr+0xbc>)
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	8b5b      	ldrh	r3, [r3, #26]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d010      	beq.n	8009400 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8b5b      	ldrh	r3, [r3, #26]
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f004 fa67 	bl	800d8c0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8b5b      	ldrh	r3, [r3, #26]
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	8b5b      	ldrh	r3, [r3, #26]
 8009404:	f003 0308 	and.w	r3, r3, #8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8b5b      	ldrh	r3, [r3, #26]
 8009410:	f023 0308 	bic.w	r3, r3, #8
 8009414:	b29a      	uxth	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff f810 	bl	8008440 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800942e:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <tcp_fasttmr+0xc4>)
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f819 	bl	800946c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800943a:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <tcp_fasttmr+0xc4>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d000      	beq.n	8009444 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009442:	e7b8      	b.n	80093b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	607b      	str	r3, [r7, #4]
 8009448:	e002      	b.n	8009450 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1b3      	bne.n	80093be <tcp_fasttmr+0x1a>
    }
  }
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000028e 	.word	0x2000028e
 8009464:	20016f44 	.word	0x20016f44
 8009468:	20016f40 	.word	0x20016f40

0800946c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800946c:	b590      	push	{r4, r7, lr}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <tcp_process_refused_data+0x26>
 800947a:	4b38      	ldr	r3, [pc, #224]	; (800955c <tcp_process_refused_data+0xf0>)
 800947c:	f240 6209 	movw	r2, #1545	; 0x609
 8009480:	4937      	ldr	r1, [pc, #220]	; (8009560 <tcp_process_refused_data+0xf4>)
 8009482:	4838      	ldr	r0, [pc, #224]	; (8009564 <tcp_process_refused_data+0xf8>)
 8009484:	f7f7 ff54 	bl	8001330 <iprintf>
 8009488:	2000      	movs	r0, #0
 800948a:	f00e fff5 	bl	8018478 <fflush>
 800948e:	f00e ff39 	bl	8018304 <abort>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009496:	7b5b      	ldrb	r3, [r3, #13]
 8009498:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800949e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00b      	beq.n	80094c8 <tcp_process_refused_data+0x5c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6918      	ldr	r0, [r3, #16]
 80094ba:	2300      	movs	r3, #0
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	47a0      	blx	r4
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]
 80094c6:	e007      	b.n	80094d8 <tcp_process_refused_data+0x6c>
 80094c8:	2300      	movs	r3, #0
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	2000      	movs	r0, #0
 80094d0:	f000 f8a8 	bl	8009624 <tcp_recv_null>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80094d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d12a      	bne.n	8009536 <tcp_process_refused_data+0xca>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d033      	beq.n	8009552 <tcp_process_refused_data+0xe6>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80094f2:	d005      	beq.n	8009500 <tcp_process_refused_data+0x94>
          pcb->rcv_wnd++;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f8:	3301      	adds	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00b      	beq.n	8009522 <tcp_process_refused_data+0xb6>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6918      	ldr	r0, [r3, #16]
 8009514:	2300      	movs	r3, #0
 8009516:	2200      	movs	r2, #0
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	47a0      	blx	r4
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]
 8009520:	e001      	b.n	8009526 <tcp_process_refused_data+0xba>
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800952a:	f113 0f0d 	cmn.w	r3, #13
 800952e:	d110      	bne.n	8009552 <tcp_process_refused_data+0xe6>
          return ERR_ABRT;
 8009530:	f06f 030c 	mvn.w	r3, #12
 8009534:	e00e      	b.n	8009554 <tcp_process_refused_data+0xe8>
        }
      }
    } else if (err == ERR_ABRT) {
 8009536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800953a:	f113 0f0d 	cmn.w	r3, #13
 800953e:	d102      	bne.n	8009546 <tcp_process_refused_data+0xda>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009540:	f06f 030c 	mvn.w	r3, #12
 8009544:	e006      	b.n	8009554 <tcp_process_refused_data+0xe8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800954c:	f06f 0304 	mvn.w	r3, #4
 8009550:	e000      	b.n	8009554 <tcp_process_refused_data+0xe8>
    }
  }
  return ERR_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	bd90      	pop	{r4, r7, pc}
 800955c:	08019e34 	.word	0x08019e34
 8009560:	0801a32c 	.word	0x0801a32c
 8009564:	08019e60 	.word	0x08019e60

08009568 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009570:	e007      	b.n	8009582 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f809 	bl	8009590 <tcp_seg_free>
    seg = next;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1f4      	bne.n	8009572 <tcp_segs_free+0xa>
  }
}
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00c      	beq.n	80095b8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d004      	beq.n	80095b0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fa98 	bl	8007ae0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	2003      	movs	r0, #3
 80095b4:	f7fd fc56 	bl	8006e64 <memp_free>
  }
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10b      	bne.n	80095e6 <tcp_seg_copy+0x26>
 80095ce:	4b12      	ldr	r3, [pc, #72]	; (8009618 <tcp_seg_copy+0x58>)
 80095d0:	f240 6282 	movw	r2, #1666	; 0x682
 80095d4:	4911      	ldr	r1, [pc, #68]	; (800961c <tcp_seg_copy+0x5c>)
 80095d6:	4812      	ldr	r0, [pc, #72]	; (8009620 <tcp_seg_copy+0x60>)
 80095d8:	f7f7 feaa 	bl	8001330 <iprintf>
 80095dc:	2000      	movs	r0, #0
 80095de:	f00e ff4b 	bl	8018478 <fflush>
 80095e2:	f00e fe8f 	bl	8018304 <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80095e6:	2003      	movs	r0, #3
 80095e8:	f7fd fbf2 	bl	8006dd0 <memp_malloc>
 80095ec:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <tcp_seg_copy+0x38>
    return NULL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e00a      	b.n	800960e <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80095f8:	2210      	movs	r2, #16
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f00f f84a 	bl	8018696 <memcpy>
  pbuf_ref(cseg->p);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fb24 	bl	8007c54 <pbuf_ref>
  return cseg;
 800960c:	68fb      	ldr	r3, [r7, #12]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	08019e34 	.word	0x08019e34
 800961c:	0801a370 	.word	0x0801a370
 8009620:	08019e60 	.word	0x08019e60

08009624 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <tcp_recv_null+0x2c>
 8009638:	4b13      	ldr	r3, [pc, #76]	; (8009688 <tcp_recv_null+0x64>)
 800963a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800963e:	4913      	ldr	r1, [pc, #76]	; (800968c <tcp_recv_null+0x68>)
 8009640:	4813      	ldr	r0, [pc, #76]	; (8009690 <tcp_recv_null+0x6c>)
 8009642:	f7f7 fe75 	bl	8001330 <iprintf>
 8009646:	2000      	movs	r0, #0
 8009648:	f00e ff16 	bl	8018478 <fflush>
 800964c:	f00e fe5a 	bl	8018304 <abort>

  if (p != NULL) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <tcp_recv_null+0x46>
    tcp_recved(pcb, p->tot_len);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	891b      	ldrh	r3, [r3, #8]
 800965a:	4619      	mov	r1, r3
 800965c:	68b8      	ldr	r0, [r7, #8]
 800965e:	f7ff fa8f 	bl	8008b80 <tcp_recved>
    pbuf_free(p);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fe fa3c 	bl	8007ae0 <pbuf_free>
 8009668:	e008      	b.n	800967c <tcp_recv_null+0x58>
  } else if (err == ERR_OK) {
 800966a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d104      	bne.n	800967c <tcp_recv_null+0x58>
    return tcp_close(pcb);
 8009672:	68b8      	ldr	r0, [r7, #8]
 8009674:	f7fe ff50 	bl	8008518 <tcp_close>
 8009678:	4603      	mov	r3, r0
 800967a:	e000      	b.n	800967e <tcp_recv_null+0x5a>
  }
  return ERR_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	08019e34 	.word	0x08019e34
 800968c:	0801a38c 	.word	0x0801a38c
 8009690:	08019e60 	.word	0x08019e60

08009694 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800969e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	db01      	blt.n	80096aa <tcp_kill_prio+0x16>
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	e000      	b.n	80096ac <tcp_kill_prio+0x18>
 80096aa:	237f      	movs	r3, #127	; 0x7f
 80096ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80096ae:	7afb      	ldrb	r3, [r7, #11]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d034      	beq.n	800971e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096c2:	4b19      	ldr	r3, [pc, #100]	; (8009728 <tcp_kill_prio+0x94>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e01f      	b.n	800970a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	7d5b      	ldrb	r3, [r3, #21]
 80096ce:	7afa      	ldrb	r2, [r7, #11]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d80c      	bhi.n	80096ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80096d8:	7afa      	ldrb	r2, [r7, #11]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d112      	bne.n	8009704 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <tcp_kill_prio+0x98>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	1ad2      	subs	r2, r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d30a      	bcc.n	8009704 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <tcp_kill_prio+0x98>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	7d5b      	ldrb	r3, [r3, #21]
 8009702:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1dc      	bne.n	80096ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d004      	beq.n	8009720 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f7ff f850 	bl	80087bc <tcp_abort>
 800971c:	e000      	b.n	8009720 <tcp_kill_prio+0x8c>
    return;
 800971e:	bf00      	nop
  }
}
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20016f44 	.word	0x20016f44
 800972c:	20016f48 	.word	0x20016f48

08009730 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	2b08      	cmp	r3, #8
 800973e:	d00e      	beq.n	800975e <tcp_kill_state+0x2e>
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	2b09      	cmp	r3, #9
 8009744:	d00b      	beq.n	800975e <tcp_kill_state+0x2e>
 8009746:	4b1d      	ldr	r3, [pc, #116]	; (80097bc <tcp_kill_state+0x8c>)
 8009748:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800974c:	491c      	ldr	r1, [pc, #112]	; (80097c0 <tcp_kill_state+0x90>)
 800974e:	481d      	ldr	r0, [pc, #116]	; (80097c4 <tcp_kill_state+0x94>)
 8009750:	f7f7 fdee 	bl	8001330 <iprintf>
 8009754:	2000      	movs	r0, #0
 8009756:	f00e fe8f 	bl	8018478 <fflush>
 800975a:	f00e fdd3 	bl	8018304 <abort>

  inactivity = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009766:	4b18      	ldr	r3, [pc, #96]	; (80097c8 <tcp_kill_state+0x98>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	e017      	b.n	800979e <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	7d1b      	ldrb	r3, [r3, #20]
 8009772:	79fa      	ldrb	r2, [r7, #7]
 8009774:	429a      	cmp	r2, r3
 8009776:	d10f      	bne.n	8009798 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009778:	4b14      	ldr	r3, [pc, #80]	; (80097cc <tcp_kill_state+0x9c>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	1ad2      	subs	r2, r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	429a      	cmp	r2, r3
 8009786:	d307      	bcc.n	8009798 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8009788:	4b10      	ldr	r3, [pc, #64]	; (80097cc <tcp_kill_state+0x9c>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e4      	bne.n	800976e <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80097aa:	2100      	movs	r1, #0
 80097ac:	6938      	ldr	r0, [r7, #16]
 80097ae:	f7fe ff3d 	bl	800862c <tcp_abandon>
  }
}
 80097b2:	bf00      	nop
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	08019e34 	.word	0x08019e34
 80097c0:	0801a3a8 	.word	0x0801a3a8
 80097c4:	08019e60 	.word	0x08019e60
 80097c8:	20016f44 	.word	0x20016f44
 80097cc:	20016f48 	.word	0x20016f48

080097d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <tcp_kill_timewait+0x58>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e012      	b.n	800980c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <tcp_kill_timewait+0x5c>)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d307      	bcc.n	8009806 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80097f6:	4b0d      	ldr	r3, [pc, #52]	; (800982c <tcp_kill_timewait+0x5c>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e9      	bne.n	80097e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009818:	68b8      	ldr	r0, [r7, #8]
 800981a:	f7fe ffcf 	bl	80087bc <tcp_abort>
  }
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20016f54 	.word	0x20016f54
 800982c:	20016f48 	.word	0x20016f48

08009830 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009836:	4b10      	ldr	r3, [pc, #64]	; (8009878 <tcp_handle_closepend+0x48>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800983c:	e014      	b.n	8009868 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	8b5b      	ldrh	r3, [r3, #26]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d009      	beq.n	8009864 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8b5b      	ldrh	r3, [r3, #26]
 8009854:	f023 0308 	bic.w	r3, r3, #8
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fe fdee 	bl	8008440 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e7      	bne.n	800983e <tcp_handle_closepend+0xe>
  }
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20016f44 	.word	0x20016f44

0800987c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009886:	2001      	movs	r0, #1
 8009888:	f7fd faa2 	bl	8006dd0 <memp_malloc>
 800988c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d14e      	bne.n	8009932 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009894:	f7ff ffcc 	bl	8009830 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009898:	f7ff ff9a 	bl	80097d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800989c:	2001      	movs	r0, #1
 800989e:	f7fd fa97 	bl	8006dd0 <memp_malloc>
 80098a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d139      	bne.n	800991e <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80098aa:	2009      	movs	r0, #9
 80098ac:	f7ff ff40 	bl	8009730 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098b0:	2001      	movs	r0, #1
 80098b2:	f7fd fa8d 	bl	8006dd0 <memp_malloc>
 80098b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d125      	bne.n	800990a <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80098be:	2008      	movs	r0, #8
 80098c0:	f7ff ff36 	bl	8009730 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098c4:	2001      	movs	r0, #1
 80098c6:	f7fd fa83 	bl	8006dd0 <memp_malloc>
 80098ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d111      	bne.n	80098f6 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fedd 	bl	8009694 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098da:	2001      	movs	r0, #1
 80098dc:	f7fd fa78 	bl	8006dd0 <memp_malloc>
 80098e0:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80098e8:	4b36      	ldr	r3, [pc, #216]	; (80099c4 <tcp_alloc+0x148>)
 80098ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098ee:	881a      	ldrh	r2, [r3, #0]
 80098f0:	3a01      	subs	r2, #1
 80098f2:	b292      	uxth	r2, r2
 80098f4:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d006      	beq.n	800990a <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80098fc:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <tcp_alloc+0x148>)
 80098fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009902:	881a      	ldrh	r2, [r3, #0]
 8009904:	3a01      	subs	r2, #1
 8009906:	b292      	uxth	r2, r2
 8009908:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d006      	beq.n	800991e <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009910:	4b2c      	ldr	r3, [pc, #176]	; (80099c4 <tcp_alloc+0x148>)
 8009912:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009916:	881a      	ldrh	r2, [r3, #0]
 8009918:	3a01      	subs	r2, #1
 800991a:	b292      	uxth	r2, r2
 800991c:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d006      	beq.n	8009932 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009924:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <tcp_alloc+0x148>)
 8009926:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800992a:	881a      	ldrh	r2, [r3, #0]
 800992c:	3a01      	subs	r2, #1
 800992e:	b292      	uxth	r2, r2
 8009930:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d03f      	beq.n	80099b8 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009938:	229c      	movs	r2, #156	; 0x9c
 800993a:	2100      	movs	r1, #0
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f00e feb5 	bl	80186ac <memset>
    pcb->prio = prio;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	79fa      	ldrb	r2, [r7, #7]
 8009946:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800994e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009958:	855a      	strh	r2, [r3, #42]	; 0x2a
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22ff      	movs	r2, #255	; 0xff
 8009966:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800996e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2206      	movs	r2, #6
 8009974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2206      	movs	r2, #6
 800997c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009984:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2201      	movs	r2, #1
 800998a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800998e:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <tcp_alloc+0x14c>)
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009996:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <tcp_alloc+0x150>)
 8009998:	781a      	ldrb	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80099a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <tcp_alloc+0x154>)
 80099ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a08      	ldr	r2, [pc, #32]	; (80099d4 <tcp_alloc+0x158>)
 80099b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20016e44 	.word	0x20016e44
 80099c8:	20016f48 	.word	0x20016f48
 80099cc:	2000028e 	.word	0x2000028e
 80099d0:	08009625 	.word	0x08009625
 80099d4:	006ddd00 	.word	0x006ddd00

080099d8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80099e2:	2040      	movs	r0, #64	; 0x40
 80099e4:	f7ff ff4a 	bl	800987c <tcp_alloc>
 80099e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80099ea:	68fb      	ldr	r3, [r7, #12]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	611a      	str	r2, [r3, #16]
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
	...

08009a18 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d013      	beq.n	8009a50 <tcp_recv+0x38>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7d1b      	ldrb	r3, [r3, #20]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d10b      	bne.n	8009a48 <tcp_recv+0x30>
 8009a30:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <tcp_recv+0x40>)
 8009a32:	f240 72df 	movw	r2, #2015	; 0x7df
 8009a36:	4909      	ldr	r1, [pc, #36]	; (8009a5c <tcp_recv+0x44>)
 8009a38:	4809      	ldr	r0, [pc, #36]	; (8009a60 <tcp_recv+0x48>)
 8009a3a:	f7f7 fc79 	bl	8001330 <iprintf>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f00e fd1a 	bl	8018478 <fflush>
 8009a44:	f00e fc5e 	bl	8018304 <abort>
    pcb->recv = recv;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	08019e34 	.word	0x08019e34
 8009a5c:	0801a3b8 	.word	0x0801a3b8
 8009a60:	08019e60 	.word	0x08019e60

08009a64 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d013      	beq.n	8009a9c <tcp_sent+0x38>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7d1b      	ldrb	r3, [r3, #20]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d10b      	bne.n	8009a94 <tcp_sent+0x30>
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <tcp_sent+0x40>)
 8009a7e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009a82:	4909      	ldr	r1, [pc, #36]	; (8009aa8 <tcp_sent+0x44>)
 8009a84:	4809      	ldr	r0, [pc, #36]	; (8009aac <tcp_sent+0x48>)
 8009a86:	f7f7 fc53 	bl	8001330 <iprintf>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	f00e fcf4 	bl	8018478 <fflush>
 8009a90:	f00e fc38 	bl	8018304 <abort>
    pcb->sent = sent;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	08019e34 	.word	0x08019e34
 8009aa8:	0801a3e0 	.word	0x0801a3e0
 8009aac:	08019e60 	.word	0x08019e60

08009ab0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d013      	beq.n	8009ae8 <tcp_err+0x38>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	7d1b      	ldrb	r3, [r3, #20]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d10b      	bne.n	8009ae0 <tcp_err+0x30>
 8009ac8:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <tcp_err+0x40>)
 8009aca:	f640 020d 	movw	r2, #2061	; 0x80d
 8009ace:	4909      	ldr	r1, [pc, #36]	; (8009af4 <tcp_err+0x44>)
 8009ad0:	4809      	ldr	r0, [pc, #36]	; (8009af8 <tcp_err+0x48>)
 8009ad2:	f7f7 fc2d 	bl	8001330 <iprintf>
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f00e fcce 	bl	8018478 <fflush>
 8009adc:	f00e fc12 	bl	8018304 <abort>
    pcb->errf = err;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	08019e34 	.word	0x08019e34
 8009af4:	0801a408 	.word	0x0801a408
 8009af8:	08019e60 	.word	0x08019e60

08009afc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <tcp_accept+0x22>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7d1b      	ldrb	r3, [r3, #20]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d104      	bne.n	8009b1e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	619a      	str	r2, [r3, #24]
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
	...

08009b2c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10b      	bne.n	8009b58 <tcp_poll+0x2c>
 8009b40:	4b13      	ldr	r3, [pc, #76]	; (8009b90 <tcp_poll+0x64>)
 8009b42:	f640 023d 	movw	r2, #2109	; 0x83d
 8009b46:	4913      	ldr	r1, [pc, #76]	; (8009b94 <tcp_poll+0x68>)
 8009b48:	4813      	ldr	r0, [pc, #76]	; (8009b98 <tcp_poll+0x6c>)
 8009b4a:	f7f7 fbf1 	bl	8001330 <iprintf>
 8009b4e:	2000      	movs	r0, #0
 8009b50:	f00e fc92 	bl	8018478 <fflush>
 8009b54:	f00e fbd6 	bl	8018304 <abort>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	7d1b      	ldrb	r3, [r3, #20]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10b      	bne.n	8009b78 <tcp_poll+0x4c>
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <tcp_poll+0x64>)
 8009b62:	f640 023e 	movw	r2, #2110	; 0x83e
 8009b66:	490d      	ldr	r1, [pc, #52]	; (8009b9c <tcp_poll+0x70>)
 8009b68:	480b      	ldr	r0, [pc, #44]	; (8009b98 <tcp_poll+0x6c>)
 8009b6a:	f7f7 fbe1 	bl	8001330 <iprintf>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	f00e fc82 	bl	8018478 <fflush>
 8009b74:	f00e fbc6 	bl	8018304 <abort>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	79fa      	ldrb	r2, [r7, #7]
 8009b84:	775a      	strb	r2, [r3, #29]
}
 8009b86:	bf00      	nop
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	08019e34 	.word	0x08019e34
 8009b94:	0801a430 	.word	0x0801a430
 8009b98:	08019e60 	.word	0x08019e60
 8009b9c:	0801a448 	.word	0x0801a448

08009ba0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10b      	bne.n	8009bc6 <tcp_pcb_purge+0x26>
 8009bae:	4b24      	ldr	r3, [pc, #144]	; (8009c40 <tcp_pcb_purge+0xa0>)
 8009bb0:	f640 0251 	movw	r2, #2129	; 0x851
 8009bb4:	4923      	ldr	r1, [pc, #140]	; (8009c44 <tcp_pcb_purge+0xa4>)
 8009bb6:	4824      	ldr	r0, [pc, #144]	; (8009c48 <tcp_pcb_purge+0xa8>)
 8009bb8:	f7f7 fbba 	bl	8001330 <iprintf>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f00e fc5b 	bl	8018478 <fflush>
 8009bc2:	f00e fb9f 	bl	8018304 <abort>

  if (pcb->state != CLOSED &&
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7d1b      	ldrb	r3, [r3, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d033      	beq.n	8009c36 <tcp_pcb_purge+0x96>
      pcb->state != TIME_WAIT &&
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009bd2:	2b0a      	cmp	r3, #10
 8009bd4:	d02f      	beq.n	8009c36 <tcp_pcb_purge+0x96>
      pcb->state != LISTEN) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d02b      	beq.n	8009c36 <tcp_pcb_purge+0x96>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <tcp_pcb_purge+0x56>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fd ff78 	bl	8007ae0 <pbuf_free>
      pcb->refused_data = NULL;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <tcp_pcb_purge+0x64>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f9ae 	bl	8009f60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c0a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fca9 	bl	8009568 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fca4 	bl	8009568 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	08019e34 	.word	0x08019e34
 8009c44:	0801a468 	.word	0x0801a468
 8009c48:	08019e60 	.word	0x08019e60

08009c4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <tcp_pcb_remove+0x28>
 8009c5c:	4b4a      	ldr	r3, [pc, #296]	; (8009d88 <tcp_pcb_remove+0x13c>)
 8009c5e:	f640 0283 	movw	r2, #2179	; 0x883
 8009c62:	494a      	ldr	r1, [pc, #296]	; (8009d8c <tcp_pcb_remove+0x140>)
 8009c64:	484a      	ldr	r0, [pc, #296]	; (8009d90 <tcp_pcb_remove+0x144>)
 8009c66:	f7f7 fb63 	bl	8001330 <iprintf>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f00e fc04 	bl	8018478 <fflush>
 8009c70:	f00e fb48 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <tcp_pcb_remove+0x46>
 8009c7a:	4b43      	ldr	r3, [pc, #268]	; (8009d88 <tcp_pcb_remove+0x13c>)
 8009c7c:	f640 0284 	movw	r2, #2180	; 0x884
 8009c80:	4944      	ldr	r1, [pc, #272]	; (8009d94 <tcp_pcb_remove+0x148>)
 8009c82:	4843      	ldr	r0, [pc, #268]	; (8009d90 <tcp_pcb_remove+0x144>)
 8009c84:	f7f7 fb54 	bl	8001330 <iprintf>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	f00e fbf5 	bl	8018478 <fflush>
 8009c8e:	f00e fb39 	bl	8018304 <abort>

  TCP_RMV(pcblist, pcb);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d105      	bne.n	8009ca8 <tcp_pcb_remove+0x5c>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	e013      	b.n	8009cd0 <tcp_pcb_remove+0x84>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	e00c      	b.n	8009cca <tcp_pcb_remove+0x7e>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d104      	bne.n	8009cc4 <tcp_pcb_remove+0x78>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	60da      	str	r2, [r3, #12]
 8009cc2:	e005      	b.n	8009cd0 <tcp_pcb_remove+0x84>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1ef      	bne.n	8009cb0 <tcp_pcb_remove+0x64>
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009cd6:	6838      	ldr	r0, [r7, #0]
 8009cd8:	f7ff ff62 	bl	8009ba0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	7d1b      	ldrb	r3, [r3, #20]
 8009ce0:	2b0a      	cmp	r3, #10
 8009ce2:	d013      	beq.n	8009d0c <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d00f      	beq.n	8009d0c <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	8b5b      	ldrh	r3, [r3, #26]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	8b5b      	ldrh	r3, [r3, #26]
 8009cfc:	f043 0302 	orr.w	r3, r3, #2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009d06:	6838      	ldr	r0, [r7, #0]
 8009d08:	f003 fdda 	bl	800d8c0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d02f      	beq.n	8009d74 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <tcp_pcb_remove+0xe8>
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <tcp_pcb_remove+0x13c>)
 8009d1e:	f640 0293 	movw	r2, #2195	; 0x893
 8009d22:	491d      	ldr	r1, [pc, #116]	; (8009d98 <tcp_pcb_remove+0x14c>)
 8009d24:	481a      	ldr	r0, [pc, #104]	; (8009d90 <tcp_pcb_remove+0x144>)
 8009d26:	f7f7 fb03 	bl	8001330 <iprintf>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	f00e fba4 	bl	8018478 <fflush>
 8009d30:	f00e fae8 	bl	8018304 <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <tcp_pcb_remove+0x108>
 8009d3c:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <tcp_pcb_remove+0x13c>)
 8009d3e:	f640 0294 	movw	r2, #2196	; 0x894
 8009d42:	4916      	ldr	r1, [pc, #88]	; (8009d9c <tcp_pcb_remove+0x150>)
 8009d44:	4812      	ldr	r0, [pc, #72]	; (8009d90 <tcp_pcb_remove+0x144>)
 8009d46:	f7f7 faf3 	bl	8001330 <iprintf>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f00e fb94 	bl	8018478 <fflush>
 8009d50:	f00e fad8 	bl	8018304 <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00b      	beq.n	8009d74 <tcp_pcb_remove+0x128>
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <tcp_pcb_remove+0x13c>)
 8009d5e:	f640 0296 	movw	r2, #2198	; 0x896
 8009d62:	490f      	ldr	r1, [pc, #60]	; (8009da0 <tcp_pcb_remove+0x154>)
 8009d64:	480a      	ldr	r0, [pc, #40]	; (8009d90 <tcp_pcb_remove+0x144>)
 8009d66:	f7f7 fae3 	bl	8001330 <iprintf>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f00e fb84 	bl	8018478 <fflush>
 8009d70:	f00e fac8 	bl	8018304 <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2200      	movs	r2, #0
 8009d78:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	08019e34 	.word	0x08019e34
 8009d8c:	0801a484 	.word	0x0801a484
 8009d90:	08019e60 	.word	0x08019e60
 8009d94:	0801a4a0 	.word	0x0801a4a0
 8009d98:	0801a4c0 	.word	0x0801a4c0
 8009d9c:	0801a4d8 	.word	0x0801a4d8
 8009da0:	0801a4f4 	.word	0x0801a4f4

08009da4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <tcp_next_iss+0x26>
 8009db2:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <tcp_next_iss+0x40>)
 8009db4:	f640 02af 	movw	r2, #2223	; 0x8af
 8009db8:	490b      	ldr	r1, [pc, #44]	; (8009de8 <tcp_next_iss+0x44>)
 8009dba:	480c      	ldr	r0, [pc, #48]	; (8009dec <tcp_next_iss+0x48>)
 8009dbc:	f7f7 fab8 	bl	8001330 <iprintf>
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f00e fb59 	bl	8018478 <fflush>
 8009dc6:	f00e fa9d 	bl	8018304 <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009dca:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <tcp_next_iss+0x4c>)
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <tcp_next_iss+0x50>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <tcp_next_iss+0x4c>)
 8009dd6:	6013      	str	r3, [r2, #0]
  return iss;
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <tcp_next_iss+0x4c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	08019e34 	.word	0x08019e34
 8009de8:	0801a50c 	.word	0x0801a50c
 8009dec:	08019e60 	.word	0x08019e60
 8009df0:	20000010 	.word	0x20000010
 8009df4:	20016f48 	.word	0x20016f48

08009df8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10b      	bne.n	8009e24 <tcp_eff_send_mss_netif+0x2c>
 8009e0c:	4b17      	ldr	r3, [pc, #92]	; (8009e6c <tcp_eff_send_mss_netif+0x74>)
 8009e0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009e12:	4917      	ldr	r1, [pc, #92]	; (8009e70 <tcp_eff_send_mss_netif+0x78>)
 8009e14:	4817      	ldr	r0, [pc, #92]	; (8009e74 <tcp_eff_send_mss_netif+0x7c>)
 8009e16:	f7f7 fa8b 	bl	8001330 <iprintf>
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	f00e fb2c 	bl	8018478 <fflush>
 8009e20:	f00e fa70 	bl	8018304 <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8009e2a:	89fb      	ldrh	r3, [r7, #14]
 8009e2c:	e019      	b.n	8009e62 <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e32:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009e34:	8afb      	ldrh	r3, [r7, #22]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d012      	beq.n	8009e60 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009e3a:	2328      	movs	r3, #40	; 0x28
 8009e3c:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009e3e:	8afa      	ldrh	r2, [r7, #22]
 8009e40:	8abb      	ldrh	r3, [r7, #20]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d904      	bls.n	8009e50 <tcp_eff_send_mss_netif+0x58>
 8009e46:	8afa      	ldrh	r2, [r7, #22]
 8009e48:	8abb      	ldrh	r3, [r7, #20]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	e000      	b.n	8009e52 <tcp_eff_send_mss_netif+0x5a>
 8009e50:	2300      	movs	r3, #0
 8009e52:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009e54:	8a7a      	ldrh	r2, [r7, #18]
 8009e56:	89fb      	ldrh	r3, [r7, #14]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	bf28      	it	cs
 8009e5c:	4613      	movcs	r3, r2
 8009e5e:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009e60:	89fb      	ldrh	r3, [r7, #14]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	08019e34 	.word	0x08019e34
 8009e70:	0801a528 	.word	0x0801a528
 8009e74:	08019e60 	.word	0x08019e60

08009e78 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d11d      	bne.n	8009ec8 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009e8e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009e92:	4912      	ldr	r1, [pc, #72]	; (8009edc <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8009e94:	4812      	ldr	r0, [pc, #72]	; (8009ee0 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8009e96:	f7f7 fa4b 	bl	8001330 <iprintf>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	f00e faec 	bl	8018478 <fflush>
 8009ea0:	f00e fa30 	bl	8018304 <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d108      	bne.n	8009ec2 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7fe fc80 	bl	80087bc <tcp_abort>
      pcb = next;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e002      	b.n	8009ec8 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1ea      	bne.n	8009ea4 <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	08019e34 	.word	0x08019e34
 8009edc:	0801a550 	.word	0x0801a550
 8009ee0:	08019e60 	.word	0x08019e60

08009ee4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d02a      	beq.n	8009f4a <tcp_netif_ip_addr_changed+0x66>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d026      	beq.n	8009f4a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009efc:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <tcp_netif_ip_addr_changed+0x70>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff ffb8 	bl	8009e78 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <tcp_netif_ip_addr_changed+0x74>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff ffb2 	bl	8009e78 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d017      	beq.n	8009f4a <tcp_netif_ip_addr_changed+0x66>
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d013      	beq.n	8009f4a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f22:	4b0e      	ldr	r3, [pc, #56]	; (8009f5c <tcp_netif_ip_addr_changed+0x78>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e00c      	b.n	8009f44 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d103      	bne.n	8009f3e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1ef      	bne.n	8009f2a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20016f44 	.word	0x20016f44
 8009f58:	20016f50 	.word	0x20016f50
 8009f5c:	20016f4c 	.word	0x20016f4c

08009f60 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d007      	beq.n	8009f80 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff faf7 	bl	8009568 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009f88:	b590      	push	{r4, r7, lr}
 8009f8a:	b08d      	sub	sp, #52	; 0x34
 8009f8c:	af04      	add	r7, sp, #16
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <tcp_input+0x26>
 8009f98:	4b7b      	ldr	r3, [pc, #492]	; (800a188 <tcp_input+0x200>)
 8009f9a:	2283      	movs	r2, #131	; 0x83
 8009f9c:	497b      	ldr	r1, [pc, #492]	; (800a18c <tcp_input+0x204>)
 8009f9e:	487c      	ldr	r0, [pc, #496]	; (800a190 <tcp_input+0x208>)
 8009fa0:	f7f7 f9c6 	bl	8001330 <iprintf>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	f00e fa67 	bl	8018478 <fflush>
 8009faa:	f00e f9ab 	bl	8018304 <abort>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8009fae:	4b79      	ldr	r3, [pc, #484]	; (800a194 <tcp_input+0x20c>)
 8009fb0:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	4b76      	ldr	r3, [pc, #472]	; (800a194 <tcp_input+0x20c>)
 8009fba:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	4a75      	ldr	r2, [pc, #468]	; (800a198 <tcp_input+0x210>)
 8009fc4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	895b      	ldrh	r3, [r3, #10]
 8009fca:	2b13      	cmp	r3, #19
 8009fcc:	d809      	bhi.n	8009fe2 <tcp_input+0x5a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8009fce:	4b71      	ldr	r3, [pc, #452]	; (800a194 <tcp_input+0x20c>)
 8009fd0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	4b6e      	ldr	r3, [pc, #440]	; (800a194 <tcp_input+0x20c>)
 8009fda:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009fde:	f000 bc68 	b.w	800a8b2 <tcp_input+0x92a>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009fe2:	4b6e      	ldr	r3, [pc, #440]	; (800a19c <tcp_input+0x214>)
 8009fe4:	695a      	ldr	r2, [r3, #20]
 8009fe6:	4b6d      	ldr	r3, [pc, #436]	; (800a19c <tcp_input+0x214>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7fa ff13 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d105      	bne.n	800a004 <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009ff8:	4b68      	ldr	r3, [pc, #416]	; (800a19c <tcp_input+0x214>)
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a000:	2be0      	cmp	r3, #224	; 0xe0
 800a002:	d109      	bne.n	800a018 <tcp_input+0x90>
    TCP_STATS_INC(tcp.proterr);
 800a004:	4b63      	ldr	r3, [pc, #396]	; (800a194 <tcp_input+0x20c>)
 800a006:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800a00a:	3301      	adds	r3, #1
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	4b61      	ldr	r3, [pc, #388]	; (800a194 <tcp_input+0x20c>)
 800a010:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 800a014:	f000 bc4d 	b.w	800a8b2 <tcp_input+0x92a>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	891a      	ldrh	r2, [r3, #8]
 800a01c:	4b60      	ldr	r3, [pc, #384]	; (800a1a0 <tcp_input+0x218>)
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	4b60      	ldr	r3, [pc, #384]	; (800a1a4 <tcp_input+0x21c>)
 800a022:	2106      	movs	r1, #6
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fc f951 	bl	80062cc <ip_chksum_pseudo>
 800a02a:	4603      	mov	r3, r0
 800a02c:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800a02e:	8a3b      	ldrh	r3, [r7, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <tcp_input+0xc0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 800a034:	4b57      	ldr	r3, [pc, #348]	; (800a194 <tcp_input+0x20c>)
 800a036:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a03a:	3301      	adds	r3, #1
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	4b55      	ldr	r3, [pc, #340]	; (800a194 <tcp_input+0x20c>)
 800a040:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 800a044:	f000 bc35 	b.w	800a8b2 <tcp_input+0x92a>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a048:	4b53      	ldr	r3, [pc, #332]	; (800a198 <tcp_input+0x210>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	899b      	ldrh	r3, [r3, #12]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	4618      	mov	r0, r3
 800a052:	f7fb fdfb 	bl	8005c4c <lwip_htons>
 800a056:	4603      	mov	r3, r0
 800a058:	0b1b      	lsrs	r3, r3, #12
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b13      	cmp	r3, #19
 800a066:	d905      	bls.n	800a074 <tcp_input+0xec>
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	891b      	ldrh	r3, [r3, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	d909      	bls.n	800a088 <tcp_input+0x100>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800a074:	4b47      	ldr	r3, [pc, #284]	; (800a194 <tcp_input+0x20c>)
 800a076:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800a07a:	3301      	adds	r3, #1
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	4b45      	ldr	r3, [pc, #276]	; (800a194 <tcp_input+0x20c>)
 800a080:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 800a084:	f000 bc15 	b.w	800a8b2 <tcp_input+0x92a>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	3b14      	subs	r3, #20
 800a08e:	b29a      	uxth	r2, r3
 800a090:	4b45      	ldr	r3, [pc, #276]	; (800a1a8 <tcp_input+0x220>)
 800a092:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a094:	4b45      	ldr	r3, [pc, #276]	; (800a1ac <tcp_input+0x224>)
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	895a      	ldrh	r2, [r3, #10]
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d309      	bcc.n	800a0ba <tcp_input+0x132>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a0a6:	4b40      	ldr	r3, [pc, #256]	; (800a1a8 <tcp_input+0x220>)
 800a0a8:	881a      	ldrh	r2, [r3, #0]
 800a0aa:	4b41      	ldr	r3, [pc, #260]	; (800a1b0 <tcp_input+0x228>)
 800a0ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7fd fc54 	bl	8007960 <pbuf_remove_header>
 800a0b8:	e082      	b.n	800a1c0 <tcp_input+0x238>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <tcp_input+0x150>
 800a0c2:	4b31      	ldr	r3, [pc, #196]	; (800a188 <tcp_input+0x200>)
 800a0c4:	22c2      	movs	r2, #194	; 0xc2
 800a0c6:	493b      	ldr	r1, [pc, #236]	; (800a1b4 <tcp_input+0x22c>)
 800a0c8:	4831      	ldr	r0, [pc, #196]	; (800a190 <tcp_input+0x208>)
 800a0ca:	f7f7 f931 	bl	8001330 <iprintf>
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	f00e f9d2 	bl	8018478 <fflush>
 800a0d4:	f00e f916 	bl	8018304 <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a0d8:	2114      	movs	r1, #20
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7fd fc40 	bl	8007960 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	895a      	ldrh	r2, [r3, #10]
 800a0e4:	4b32      	ldr	r3, [pc, #200]	; (800a1b0 <tcp_input+0x228>)
 800a0e6:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a0e8:	4b2f      	ldr	r3, [pc, #188]	; (800a1a8 <tcp_input+0x220>)
 800a0ea:	881a      	ldrh	r2, [r3, #0]
 800a0ec:	4b30      	ldr	r3, [pc, #192]	; (800a1b0 <tcp_input+0x228>)
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a0f4:	4b2e      	ldr	r3, [pc, #184]	; (800a1b0 <tcp_input+0x228>)
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7fd fc30 	bl	8007960 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	895b      	ldrh	r3, [r3, #10]
 800a106:	89ba      	ldrh	r2, [r7, #12]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d908      	bls.n	800a11e <tcp_input+0x196>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 800a10c:	4b21      	ldr	r3, [pc, #132]	; (800a194 <tcp_input+0x20c>)
 800a10e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800a112:	3301      	adds	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	4b1f      	ldr	r3, [pc, #124]	; (800a194 <tcp_input+0x20c>)
 800a118:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 800a11c:	e3c9      	b.n	800a8b2 <tcp_input+0x92a>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	4a21      	ldr	r2, [pc, #132]	; (800a1ac <tcp_input+0x224>)
 800a126:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	89ba      	ldrh	r2, [r7, #12]
 800a12e:	4611      	mov	r1, r2
 800a130:	4618      	mov	r0, r3
 800a132:	f7fd fc15 	bl	8007960 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	891a      	ldrh	r2, [r3, #8]
 800a13a:	89bb      	ldrh	r3, [r7, #12]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	895b      	ldrh	r3, [r3, #10]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00a      	beq.n	800a162 <tcp_input+0x1da>
 800a14c:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <tcp_input+0x200>)
 800a14e:	22df      	movs	r2, #223	; 0xdf
 800a150:	4919      	ldr	r1, [pc, #100]	; (800a1b8 <tcp_input+0x230>)
 800a152:	480f      	ldr	r0, [pc, #60]	; (800a190 <tcp_input+0x208>)
 800a154:	f7f7 f8ec 	bl	8001330 <iprintf>
 800a158:	2000      	movs	r0, #0
 800a15a:	f00e f98d 	bl	8018478 <fflush>
 800a15e:	f00e f8d1 	bl	8018304 <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	891a      	ldrh	r2, [r3, #8]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	891b      	ldrh	r3, [r3, #8]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d027      	beq.n	800a1c0 <tcp_input+0x238>
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <tcp_input+0x200>)
 800a172:	22e0      	movs	r2, #224	; 0xe0
 800a174:	4911      	ldr	r1, [pc, #68]	; (800a1bc <tcp_input+0x234>)
 800a176:	4806      	ldr	r0, [pc, #24]	; (800a190 <tcp_input+0x208>)
 800a178:	f7f7 f8da 	bl	8001330 <iprintf>
 800a17c:	2000      	movs	r0, #0
 800a17e:	f00e f97b 	bl	8018478 <fflush>
 800a182:	f00e f8bf 	bl	8018304 <abort>
 800a186:	bf00      	nop
 800a188:	0801a584 	.word	0x0801a584
 800a18c:	0801a5a0 	.word	0x0801a5a0
 800a190:	0801a5b8 	.word	0x0801a5b8
 800a194:	20016e44 	.word	0x20016e44
 800a198:	200002a0 	.word	0x200002a0
 800a19c:	20013770 	.word	0x20013770
 800a1a0:	20013784 	.word	0x20013784
 800a1a4:	20013780 	.word	0x20013780
 800a1a8:	200002a4 	.word	0x200002a4
 800a1ac:	200002a8 	.word	0x200002a8
 800a1b0:	200002a6 	.word	0x200002a6
 800a1b4:	0801a5e0 	.word	0x0801a5e0
 800a1b8:	0801a5f0 	.word	0x0801a5f0
 800a1bc:	0801a5fc 	.word	0x0801a5fc
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a1c0:	4b91      	ldr	r3, [pc, #580]	; (800a408 <tcp_input+0x480>)
 800a1c2:	681c      	ldr	r4, [r3, #0]
 800a1c4:	4b90      	ldr	r3, [pc, #576]	; (800a408 <tcp_input+0x480>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fb fd3d 	bl	8005c4c <lwip_htons>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a1d6:	4b8c      	ldr	r3, [pc, #560]	; (800a408 <tcp_input+0x480>)
 800a1d8:	681c      	ldr	r4, [r3, #0]
 800a1da:	4b8b      	ldr	r3, [pc, #556]	; (800a408 <tcp_input+0x480>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fb fd32 	bl	8005c4c <lwip_htons>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1ec:	4b86      	ldr	r3, [pc, #536]	; (800a408 <tcp_input+0x480>)
 800a1ee:	681c      	ldr	r4, [r3, #0]
 800a1f0:	4b85      	ldr	r3, [pc, #532]	; (800a408 <tcp_input+0x480>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fb fd3d 	bl	8005c76 <lwip_htonl>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	6063      	str	r3, [r4, #4]
 800a200:	6863      	ldr	r3, [r4, #4]
 800a202:	4a82      	ldr	r2, [pc, #520]	; (800a40c <tcp_input+0x484>)
 800a204:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a206:	4b80      	ldr	r3, [pc, #512]	; (800a408 <tcp_input+0x480>)
 800a208:	681c      	ldr	r4, [r3, #0]
 800a20a:	4b7f      	ldr	r3, [pc, #508]	; (800a408 <tcp_input+0x480>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	4618      	mov	r0, r3
 800a212:	f7fb fd30 	bl	8005c76 <lwip_htonl>
 800a216:	4603      	mov	r3, r0
 800a218:	60a3      	str	r3, [r4, #8]
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	4a7c      	ldr	r2, [pc, #496]	; (800a410 <tcp_input+0x488>)
 800a21e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a220:	4b79      	ldr	r3, [pc, #484]	; (800a408 <tcp_input+0x480>)
 800a222:	681c      	ldr	r4, [r3, #0]
 800a224:	4b78      	ldr	r3, [pc, #480]	; (800a408 <tcp_input+0x480>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	89db      	ldrh	r3, [r3, #14]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fb fd0d 	bl	8005c4c <lwip_htons>
 800a232:	4603      	mov	r3, r0
 800a234:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a236:	4b74      	ldr	r3, [pc, #464]	; (800a408 <tcp_input+0x480>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	899b      	ldrh	r3, [r3, #12]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fb fd04 	bl	8005c4c <lwip_htons>
 800a244:	4603      	mov	r3, r0
 800a246:	b2db      	uxtb	r3, r3
 800a248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	4b71      	ldr	r3, [pc, #452]	; (800a414 <tcp_input+0x48c>)
 800a250:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	891a      	ldrh	r2, [r3, #8]
 800a256:	4b70      	ldr	r3, [pc, #448]	; (800a418 <tcp_input+0x490>)
 800a258:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a25a:	4b6e      	ldr	r3, [pc, #440]	; (800a414 <tcp_input+0x48c>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d014      	beq.n	800a290 <tcp_input+0x308>
    tcplen++;
 800a266:	4b6c      	ldr	r3, [pc, #432]	; (800a418 <tcp_input+0x490>)
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	4b6a      	ldr	r3, [pc, #424]	; (800a418 <tcp_input+0x490>)
 800a270:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	891a      	ldrh	r2, [r3, #8]
 800a276:	4b68      	ldr	r3, [pc, #416]	; (800a418 <tcp_input+0x490>)
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d908      	bls.n	800a290 <tcp_input+0x308>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 800a27e:	4b67      	ldr	r3, [pc, #412]	; (800a41c <tcp_input+0x494>)
 800a280:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800a284:	3301      	adds	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	4b64      	ldr	r3, [pc, #400]	; (800a41c <tcp_input+0x494>)
 800a28a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 800a28e:	e310      	b.n	800a8b2 <tcp_input+0x92a>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a290:	2300      	movs	r3, #0
 800a292:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a294:	4b62      	ldr	r3, [pc, #392]	; (800a420 <tcp_input+0x498>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	61fb      	str	r3, [r7, #28]
 800a29a:	e097      	b.n	800a3cc <tcp_input+0x444>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	7d1b      	ldrb	r3, [r3, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <tcp_input+0x332>
 800a2a4:	4b5f      	ldr	r3, [pc, #380]	; (800a424 <tcp_input+0x49c>)
 800a2a6:	22fb      	movs	r2, #251	; 0xfb
 800a2a8:	495f      	ldr	r1, [pc, #380]	; (800a428 <tcp_input+0x4a0>)
 800a2aa:	4860      	ldr	r0, [pc, #384]	; (800a42c <tcp_input+0x4a4>)
 800a2ac:	f7f7 f840 	bl	8001330 <iprintf>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	f00e f8e1 	bl	8018478 <fflush>
 800a2b6:	f00e f825 	bl	8018304 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	7d1b      	ldrb	r3, [r3, #20]
 800a2be:	2b0a      	cmp	r3, #10
 800a2c0:	d10a      	bne.n	800a2d8 <tcp_input+0x350>
 800a2c2:	4b58      	ldr	r3, [pc, #352]	; (800a424 <tcp_input+0x49c>)
 800a2c4:	22fc      	movs	r2, #252	; 0xfc
 800a2c6:	495a      	ldr	r1, [pc, #360]	; (800a430 <tcp_input+0x4a8>)
 800a2c8:	4858      	ldr	r0, [pc, #352]	; (800a42c <tcp_input+0x4a4>)
 800a2ca:	f7f7 f831 	bl	8001330 <iprintf>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	f00e f8d2 	bl	8018478 <fflush>
 800a2d4:	f00e f816 	bl	8018304 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	7d1b      	ldrb	r3, [r3, #20]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d10a      	bne.n	800a2f6 <tcp_input+0x36e>
 800a2e0:	4b50      	ldr	r3, [pc, #320]	; (800a424 <tcp_input+0x49c>)
 800a2e2:	22fd      	movs	r2, #253	; 0xfd
 800a2e4:	4953      	ldr	r1, [pc, #332]	; (800a434 <tcp_input+0x4ac>)
 800a2e6:	4851      	ldr	r0, [pc, #324]	; (800a42c <tcp_input+0x4a4>)
 800a2e8:	f7f7 f822 	bl	8001330 <iprintf>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f00e f8c3 	bl	8018478 <fflush>
 800a2f2:	f00e f807 	bl	8018304 <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	7a1b      	ldrb	r3, [r3, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <tcp_input+0x390>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	7a1a      	ldrb	r2, [r3, #8]
 800a302:	4b4d      	ldr	r3, [pc, #308]	; (800a438 <tcp_input+0x4b0>)
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a30a:	3301      	adds	r3, #1
 800a30c:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a30e:	429a      	cmp	r2, r3
 800a310:	d002      	beq.n	800a318 <tcp_input+0x390>
      prev = pcb;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	61bb      	str	r3, [r7, #24]
      continue;
 800a316:	e056      	b.n	800a3c6 <tcp_input+0x43e>
    }

    if (pcb->remote_port == tcphdr->src &&
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	8b1a      	ldrh	r2, [r3, #24]
 800a31c:	4b3a      	ldr	r3, [pc, #232]	; (800a408 <tcp_input+0x480>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	429a      	cmp	r2, r3
 800a326:	d14c      	bne.n	800a3c2 <tcp_input+0x43a>
        pcb->local_port == tcphdr->dest &&
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	8ada      	ldrh	r2, [r3, #22]
 800a32c:	4b36      	ldr	r3, [pc, #216]	; (800a408 <tcp_input+0x480>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a334:	429a      	cmp	r2, r3
 800a336:	d144      	bne.n	800a3c2 <tcp_input+0x43a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	4b3e      	ldr	r3, [pc, #248]	; (800a438 <tcp_input+0x4b0>)
 800a33e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a340:	429a      	cmp	r2, r3
 800a342:	d13e      	bne.n	800a3c2 <tcp_input+0x43a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	4b3b      	ldr	r3, [pc, #236]	; (800a438 <tcp_input+0x4b0>)
 800a34a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d138      	bne.n	800a3c2 <tcp_input+0x43a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	429a      	cmp	r2, r3
 800a358:	d10b      	bne.n	800a372 <tcp_input+0x3ea>
 800a35a:	4b32      	ldr	r3, [pc, #200]	; (800a424 <tcp_input+0x49c>)
 800a35c:	f240 120d 	movw	r2, #269	; 0x10d
 800a360:	4936      	ldr	r1, [pc, #216]	; (800a43c <tcp_input+0x4b4>)
 800a362:	4832      	ldr	r0, [pc, #200]	; (800a42c <tcp_input+0x4a4>)
 800a364:	f7f6 ffe4 	bl	8001330 <iprintf>
 800a368:	2000      	movs	r0, #0
 800a36a:	f00e f885 	bl	8018478 <fflush>
 800a36e:	f00d ffc9 	bl	8018304 <abort>
      if (prev != NULL) {
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <tcp_input+0x408>
        prev->next = pcb->next;
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a380:	4b27      	ldr	r3, [pc, #156]	; (800a420 <tcp_input+0x498>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a388:	4a25      	ldr	r2, [pc, #148]	; (800a420 <tcp_input+0x498>)
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	e007      	b.n	800a3a0 <tcp_input+0x418>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800a390:	4b22      	ldr	r3, [pc, #136]	; (800a41c <tcp_input+0x494>)
 800a392:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800a396:	3301      	adds	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	4b20      	ldr	r3, [pc, #128]	; (800a41c <tcp_input+0x494>)
 800a39c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d115      	bne.n	800a3d6 <tcp_input+0x44e>
 800a3aa:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <tcp_input+0x49c>)
 800a3ac:	f240 1215 	movw	r2, #277	; 0x115
 800a3b0:	4923      	ldr	r1, [pc, #140]	; (800a440 <tcp_input+0x4b8>)
 800a3b2:	481e      	ldr	r0, [pc, #120]	; (800a42c <tcp_input+0x4a4>)
 800a3b4:	f7f6 ffbc 	bl	8001330 <iprintf>
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f00e f85d 	bl	8018478 <fflush>
 800a3be:	f00d ffa1 	bl	8018304 <abort>
      break;
    }
    prev = pcb;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	61fb      	str	r3, [r7, #28]
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f47f af64 	bne.w	800a29c <tcp_input+0x314>
 800a3d4:	e000      	b.n	800a3d8 <tcp_input+0x450>
      break;
 800a3d6:	bf00      	nop
  }

  if (pcb == NULL) {
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 80c5 	bne.w	800a56a <tcp_input+0x5e2>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e0:	4b18      	ldr	r3, [pc, #96]	; (800a444 <tcp_input+0x4bc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	61fb      	str	r3, [r7, #28]
 800a3e6:	e066      	b.n	800a4b6 <tcp_input+0x52e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	7d1b      	ldrb	r3, [r3, #20]
 800a3ec:	2b0a      	cmp	r3, #10
 800a3ee:	d02d      	beq.n	800a44c <tcp_input+0x4c4>
 800a3f0:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <tcp_input+0x49c>)
 800a3f2:	f240 121f 	movw	r2, #287	; 0x11f
 800a3f6:	4914      	ldr	r1, [pc, #80]	; (800a448 <tcp_input+0x4c0>)
 800a3f8:	480c      	ldr	r0, [pc, #48]	; (800a42c <tcp_input+0x4a4>)
 800a3fa:	f7f6 ff99 	bl	8001330 <iprintf>
 800a3fe:	2000      	movs	r0, #0
 800a400:	f00e f83a 	bl	8018478 <fflush>
 800a404:	f00d ff7e 	bl	8018304 <abort>
 800a408:	200002a0 	.word	0x200002a0
 800a40c:	200002b0 	.word	0x200002b0
 800a410:	200002b4 	.word	0x200002b4
 800a414:	200002bc 	.word	0x200002bc
 800a418:	200002ba 	.word	0x200002ba
 800a41c:	20016e44 	.word	0x20016e44
 800a420:	20016f44 	.word	0x20016f44
 800a424:	0801a584 	.word	0x0801a584
 800a428:	0801a61c 	.word	0x0801a61c
 800a42c:	0801a5b8 	.word	0x0801a5b8
 800a430:	0801a644 	.word	0x0801a644
 800a434:	0801a670 	.word	0x0801a670
 800a438:	20013770 	.word	0x20013770
 800a43c:	0801a698 	.word	0x0801a698
 800a440:	0801a6c4 	.word	0x0801a6c4
 800a444:	20016f54 	.word	0x20016f54
 800a448:	0801a6f0 	.word	0x0801a6f0

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	7a1b      	ldrb	r3, [r3, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <tcp_input+0x4e0>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	7a1a      	ldrb	r2, [r3, #8]
 800a458:	4b9e      	ldr	r3, [pc, #632]	; (800a6d4 <tcp_input+0x74c>)
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a460:	3301      	adds	r3, #1
 800a462:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a464:	429a      	cmp	r2, r3
 800a466:	d122      	bne.n	800a4ae <tcp_input+0x526>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	8b1a      	ldrh	r2, [r3, #24]
 800a46c:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <tcp_input+0x750>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29b      	uxth	r3, r3
 800a474:	429a      	cmp	r2, r3
 800a476:	d11b      	bne.n	800a4b0 <tcp_input+0x528>
          pcb->local_port == tcphdr->dest &&
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	8ada      	ldrh	r2, [r3, #22]
 800a47c:	4b96      	ldr	r3, [pc, #600]	; (800a6d8 <tcp_input+0x750>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	885b      	ldrh	r3, [r3, #2]
 800a482:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a484:	429a      	cmp	r2, r3
 800a486:	d113      	bne.n	800a4b0 <tcp_input+0x528>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4b91      	ldr	r3, [pc, #580]	; (800a6d4 <tcp_input+0x74c>)
 800a48e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a490:	429a      	cmp	r2, r3
 800a492:	d10d      	bne.n	800a4b0 <tcp_input+0x528>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	4b8e      	ldr	r3, [pc, #568]	; (800a6d4 <tcp_input+0x74c>)
 800a49a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d107      	bne.n	800a4b0 <tcp_input+0x528>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a4a0:	69f8      	ldr	r0, [r7, #28]
 800a4a2:	f000 fb81 	bl	800aba8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fd fb1a 	bl	8007ae0 <pbuf_free>
        return;
 800a4ac:	e20e      	b.n	800a8cc <tcp_input+0x944>
        continue;
 800a4ae:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	61fb      	str	r3, [r7, #28]
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d195      	bne.n	800a3e8 <tcp_input+0x460>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4c0:	4b86      	ldr	r3, [pc, #536]	; (800a6dc <tcp_input+0x754>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	e02a      	b.n	800a51e <tcp_input+0x596>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	7a1b      	ldrb	r3, [r3, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00c      	beq.n	800a4ea <tcp_input+0x562>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	7a1a      	ldrb	r2, [r3, #8]
 800a4d4:	4b7f      	ldr	r3, [pc, #508]	; (800a6d4 <tcp_input+0x74c>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4dc:	3301      	adds	r3, #1
 800a4de:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d002      	beq.n	800a4ea <tcp_input+0x562>
        prev = (struct tcp_pcb *)lpcb;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	61bb      	str	r3, [r7, #24]
        continue;
 800a4e8:	e016      	b.n	800a518 <tcp_input+0x590>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	8ada      	ldrh	r2, [r3, #22]
 800a4ee:	4b7a      	ldr	r3, [pc, #488]	; (800a6d8 <tcp_input+0x750>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	885b      	ldrh	r3, [r3, #2]
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d10c      	bne.n	800a514 <tcp_input+0x58c>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	4b75      	ldr	r3, [pc, #468]	; (800a6d4 <tcp_input+0x74c>)
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	429a      	cmp	r2, r3
 800a504:	d00f      	beq.n	800a526 <tcp_input+0x59e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00d      	beq.n	800a528 <tcp_input+0x5a0>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <tcp_input+0x5a0>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	617b      	str	r3, [r7, #20]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1d1      	bne.n	800a4c8 <tcp_input+0x540>
 800a524:	e000      	b.n	800a528 <tcp_input+0x5a0>
            break;
 800a526:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01d      	beq.n	800a56a <tcp_input+0x5e2>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <tcp_input+0x5c4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a53c:	4b67      	ldr	r3, [pc, #412]	; (800a6dc <tcp_input+0x754>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a544:	4a65      	ldr	r2, [pc, #404]	; (800a6dc <tcp_input+0x754>)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	e007      	b.n	800a55c <tcp_input+0x5d4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800a54c:	4b64      	ldr	r3, [pc, #400]	; (800a6e0 <tcp_input+0x758>)
 800a54e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800a552:	3301      	adds	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	4b62      	ldr	r3, [pc, #392]	; (800a6e0 <tcp_input+0x758>)
 800a558:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a55c:	6978      	ldr	r0, [r7, #20]
 800a55e:	f000 fa15 	bl	800a98c <tcp_listen_input>
      }
      pbuf_free(p);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7fd fabc 	bl	8007ae0 <pbuf_free>
      return;
 800a568:	e1b0      	b.n	800a8cc <tcp_input+0x944>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8166 	beq.w	800a83e <tcp_input+0x8b6>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a572:	4b5c      	ldr	r3, [pc, #368]	; (800a6e4 <tcp_input+0x75c>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	891a      	ldrh	r2, [r3, #8]
 800a57c:	4b59      	ldr	r3, [pc, #356]	; (800a6e4 <tcp_input+0x75c>)
 800a57e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a580:	4a58      	ldr	r2, [pc, #352]	; (800a6e4 <tcp_input+0x75c>)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a586:	4b54      	ldr	r3, [pc, #336]	; (800a6d8 <tcp_input+0x750>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a56      	ldr	r2, [pc, #344]	; (800a6e4 <tcp_input+0x75c>)
 800a58c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a58e:	4b56      	ldr	r3, [pc, #344]	; (800a6e8 <tcp_input+0x760>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a594:	4b55      	ldr	r3, [pc, #340]	; (800a6ec <tcp_input+0x764>)
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a59a:	4b55      	ldr	r3, [pc, #340]	; (800a6f0 <tcp_input+0x768>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a5a0:	4b54      	ldr	r3, [pc, #336]	; (800a6f4 <tcp_input+0x76c>)
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	f003 0308 	and.w	r3, r3, #8
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d006      	beq.n	800a5ba <tcp_input+0x632>
      p->flags |= PBUF_FLAG_PUSH;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	7b5b      	ldrb	r3, [r3, #13]
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01e      	beq.n	800a600 <tcp_input+0x678>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a5c2:	69f8      	ldr	r0, [r7, #28]
 800a5c4:	f7fe ff52 	bl	800946c <tcp_process_refused_data>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	f113 0f0d 	cmn.w	r3, #13
 800a5ce:	d007      	beq.n	800a5e0 <tcp_input+0x658>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d013      	beq.n	800a600 <tcp_input+0x678>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a5d8:	4b47      	ldr	r3, [pc, #284]	; (800a6f8 <tcp_input+0x770>)
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00f      	beq.n	800a600 <tcp_input+0x678>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <tcp_input+0x666>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a5e8:	69f8      	ldr	r0, [r7, #28]
 800a5ea:	f004 f81d 	bl	800e628 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 800a5ee:	4b3c      	ldr	r3, [pc, #240]	; (800a6e0 <tcp_input+0x758>)
 800a5f0:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	4b39      	ldr	r3, [pc, #228]	; (800a6e0 <tcp_input+0x758>)
 800a5fa:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a5fe:	e10b      	b.n	800a818 <tcp_input+0x890>
      }
    }
    tcp_input_pcb = pcb;
 800a600:	4a3e      	ldr	r2, [pc, #248]	; (800a6fc <tcp_input+0x774>)
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a606:	69f8      	ldr	r0, [r7, #28]
 800a608:	f000 fb4e 	bl	800aca8 <tcp_process>
 800a60c:	4603      	mov	r3, r0
 800a60e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a614:	f113 0f0d 	cmn.w	r3, #13
 800a618:	f000 80fe 	beq.w	800a818 <tcp_input+0x890>
      if (recv_flags & TF_RESET) {
 800a61c:	4b33      	ldr	r3, [pc, #204]	; (800a6ec <tcp_input+0x764>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d015      	beq.n	800a654 <tcp_input+0x6cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d008      	beq.n	800a644 <tcp_input+0x6bc>
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	6912      	ldr	r2, [r2, #16]
 800a63c:	f06f 010d 	mvn.w	r1, #13
 800a640:	4610      	mov	r0, r2
 800a642:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a644:	69f9      	ldr	r1, [r7, #28]
 800a646:	482e      	ldr	r0, [pc, #184]	; (800a700 <tcp_input+0x778>)
 800a648:	f7ff fb00 	bl	8009c4c <tcp_pcb_remove>
        tcp_free(pcb);
 800a64c:	69f8      	ldr	r0, [r7, #28]
 800a64e:	f7fd fd43 	bl	80080d8 <tcp_free>
 800a652:	e0e1      	b.n	800a818 <tcp_input+0x890>
      } else {
        err = ERR_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <tcp_input+0x768>)
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01d      	beq.n	800a69c <tcp_input+0x714>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a660:	4b23      	ldr	r3, [pc, #140]	; (800a6f0 <tcp_input+0x768>)
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <tcp_input+0x6fe>
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	6910      	ldr	r0, [r2, #16]
 800a67a:	897a      	ldrh	r2, [r7, #10]
 800a67c:	69f9      	ldr	r1, [r7, #28]
 800a67e:	4798      	blx	r3
 800a680:	4603      	mov	r3, r0
 800a682:	74fb      	strb	r3, [r7, #19]
 800a684:	e001      	b.n	800a68a <tcp_input+0x702>
 800a686:	2300      	movs	r3, #0
 800a688:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a68a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a68e:	f113 0f0d 	cmn.w	r3, #13
 800a692:	f000 80b8 	beq.w	800a806 <tcp_input+0x87e>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a696:	4b16      	ldr	r3, [pc, #88]	; (800a6f0 <tcp_input+0x768>)
 800a698:	2200      	movs	r2, #0
 800a69a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a69c:	69f8      	ldr	r0, [r7, #28]
 800a69e:	f000 f92f 	bl	800a900 <tcp_input_delayed_close>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 80b0 	bne.w	800a80a <tcp_input+0x882>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a6aa:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <tcp_input+0x760>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d065      	beq.n	800a77e <tcp_input+0x7f6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d02a      	beq.n	800a710 <tcp_input+0x788>
 800a6ba:	4b12      	ldr	r3, [pc, #72]	; (800a704 <tcp_input+0x77c>)
 800a6bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a6c0:	4911      	ldr	r1, [pc, #68]	; (800a708 <tcp_input+0x780>)
 800a6c2:	4812      	ldr	r0, [pc, #72]	; (800a70c <tcp_input+0x784>)
 800a6c4:	f7f6 fe34 	bl	8001330 <iprintf>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f00d fed5 	bl	8018478 <fflush>
 800a6ce:	f00d fe19 	bl	8018304 <abort>
 800a6d2:	bf00      	nop
 800a6d4:	20013770 	.word	0x20013770
 800a6d8:	200002a0 	.word	0x200002a0
 800a6dc:	20016f4c 	.word	0x20016f4c
 800a6e0:	20016e44 	.word	0x20016e44
 800a6e4:	20000290 	.word	0x20000290
 800a6e8:	200002c0 	.word	0x200002c0
 800a6ec:	200002bd 	.word	0x200002bd
 800a6f0:	200002b8 	.word	0x200002b8
 800a6f4:	200002bc 	.word	0x200002bc
 800a6f8:	200002ba 	.word	0x200002ba
 800a6fc:	20016f58 	.word	0x20016f58
 800a700:	20016f44 	.word	0x20016f44
 800a704:	0801a584 	.word	0x0801a584
 800a708:	0801a720 	.word	0x0801a720
 800a70c:	0801a5b8 	.word	0x0801a5b8
          if (pcb->flags & TF_RXCLOSED) {
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	8b5b      	ldrh	r3, [r3, #26]
 800a714:	f003 0310 	and.w	r3, r3, #16
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d008      	beq.n	800a72e <tcp_input+0x7a6>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a71c:	4b6d      	ldr	r3, [pc, #436]	; (800a8d4 <tcp_input+0x94c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4618      	mov	r0, r3
 800a722:	f7fd f9dd 	bl	8007ae0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a726:	69f8      	ldr	r0, [r7, #28]
 800a728:	f7fe f848 	bl	80087bc <tcp_abort>
            goto aborted;
 800a72c:	e074      	b.n	800a818 <tcp_input+0x890>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00c      	beq.n	800a752 <tcp_input+0x7ca>
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	6918      	ldr	r0, [r3, #16]
 800a742:	4b64      	ldr	r3, [pc, #400]	; (800a8d4 <tcp_input+0x94c>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	2300      	movs	r3, #0
 800a748:	69f9      	ldr	r1, [r7, #28]
 800a74a:	47a0      	blx	r4
 800a74c:	4603      	mov	r3, r0
 800a74e:	74fb      	strb	r3, [r7, #19]
 800a750:	e008      	b.n	800a764 <tcp_input+0x7dc>
 800a752:	4b60      	ldr	r3, [pc, #384]	; (800a8d4 <tcp_input+0x94c>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	2300      	movs	r3, #0
 800a758:	69f9      	ldr	r1, [r7, #28]
 800a75a:	2000      	movs	r0, #0
 800a75c:	f7fe ff62 	bl	8009624 <tcp_recv_null>
 800a760:	4603      	mov	r3, r0
 800a762:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a768:	f113 0f0d 	cmn.w	r3, #13
 800a76c:	d04f      	beq.n	800a80e <tcp_input+0x886>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a76e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <tcp_input+0x7f6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a776:	4b57      	ldr	r3, [pc, #348]	; (800a8d4 <tcp_input+0x94c>)
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a77e:	4b56      	ldr	r3, [pc, #344]	; (800a8d8 <tcp_input+0x950>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	f003 0320 	and.w	r3, r3, #32
 800a786:	2b00      	cmp	r3, #0
 800a788:	d030      	beq.n	800a7ec <tcp_input+0x864>
          if (pcb->refused_data != NULL) {
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d009      	beq.n	800a7a6 <tcp_input+0x81e>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a79a:	7b52      	ldrb	r2, [r2, #13]
 800a79c:	f042 0220 	orr.w	r2, r2, #32
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	735a      	strb	r2, [r3, #13]
 800a7a4:	e022      	b.n	800a7ec <tcp_input+0x864>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7ae:	d005      	beq.n	800a7bc <tcp_input+0x834>
              pcb->rcv_wnd++;
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00b      	beq.n	800a7de <tcp_input+0x856>
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	6918      	ldr	r0, [r3, #16]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	69f9      	ldr	r1, [r7, #28]
 800a7d6:	47a0      	blx	r4
 800a7d8:	4603      	mov	r3, r0
 800a7da:	74fb      	strb	r3, [r7, #19]
 800a7dc:	e001      	b.n	800a7e2 <tcp_input+0x85a>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a7e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7e6:	f113 0f0d 	cmn.w	r3, #13
 800a7ea:	d012      	beq.n	800a812 <tcp_input+0x88a>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a7ec:	4b3b      	ldr	r3, [pc, #236]	; (800a8dc <tcp_input+0x954>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a7f2:	69f8      	ldr	r0, [r7, #28]
 800a7f4:	f000 f884 	bl	800a900 <tcp_input_delayed_close>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10b      	bne.n	800a816 <tcp_input+0x88e>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a7fe:	69f8      	ldr	r0, [r7, #28]
 800a800:	f003 f85e 	bl	800d8c0 <tcp_output>
 800a804:	e008      	b.n	800a818 <tcp_input+0x890>
              goto aborted;
 800a806:	bf00      	nop
 800a808:	e006      	b.n	800a818 <tcp_input+0x890>
          goto aborted;
 800a80a:	bf00      	nop
 800a80c:	e004      	b.n	800a818 <tcp_input+0x890>
            goto aborted;
 800a80e:	bf00      	nop
 800a810:	e002      	b.n	800a818 <tcp_input+0x890>
              goto aborted;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <tcp_input+0x890>
          goto aborted;
 800a816:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800a818:	4b30      	ldr	r3, [pc, #192]	; (800a8dc <tcp_input+0x954>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a81e:	4b2d      	ldr	r3, [pc, #180]	; (800a8d4 <tcp_input+0x94c>)
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a824:	4b2e      	ldr	r3, [pc, #184]	; (800a8e0 <tcp_input+0x958>)
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d04e      	beq.n	800a8ca <tcp_input+0x942>
      pbuf_free(inseg.p);
 800a82c:	4b2c      	ldr	r3, [pc, #176]	; (800a8e0 <tcp_input+0x958>)
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd f955 	bl	8007ae0 <pbuf_free>
      inseg.p = NULL;
 800a836:	4b2a      	ldr	r3, [pc, #168]	; (800a8e0 <tcp_input+0x958>)
 800a838:	2200      	movs	r2, #0
 800a83a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a83c:	e045      	b.n	800a8ca <tcp_input+0x942>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a83e:	4b29      	ldr	r3, [pc, #164]	; (800a8e4 <tcp_input+0x95c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	b29b      	uxth	r3, r3
 800a846:	4618      	mov	r0, r3
 800a848:	f7fb fa00 	bl	8005c4c <lwip_htons>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	d128      	bne.n	800a8aa <tcp_input+0x922>
      TCP_STATS_INC(tcp.proterr);
 800a858:	4b23      	ldr	r3, [pc, #140]	; (800a8e8 <tcp_input+0x960>)
 800a85a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800a85e:	3301      	adds	r3, #1
 800a860:	b29a      	uxth	r2, r3
 800a862:	4b21      	ldr	r3, [pc, #132]	; (800a8e8 <tcp_input+0x960>)
 800a864:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 800a868:	4b1f      	ldr	r3, [pc, #124]	; (800a8e8 <tcp_input+0x960>)
 800a86a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a86e:	3301      	adds	r3, #1
 800a870:	b29a      	uxth	r2, r3
 800a872:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <tcp_input+0x960>)
 800a874:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a878:	4b1c      	ldr	r3, [pc, #112]	; (800a8ec <tcp_input+0x964>)
 800a87a:	6819      	ldr	r1, [r3, #0]
 800a87c:	4b1c      	ldr	r3, [pc, #112]	; (800a8f0 <tcp_input+0x968>)
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <tcp_input+0x96c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a888:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <tcp_input+0x95c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a88c:	885b      	ldrh	r3, [r3, #2]
 800a88e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a890:	4a14      	ldr	r2, [pc, #80]	; (800a8e4 <tcp_input+0x95c>)
 800a892:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a894:	8812      	ldrh	r2, [r2, #0]
 800a896:	b292      	uxth	r2, r2
 800a898:	9202      	str	r2, [sp, #8]
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <tcp_input+0x970>)
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	4b16      	ldr	r3, [pc, #88]	; (800a8fc <tcp_input+0x974>)
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f003 fe63 	bl	800e570 <tcp_rst>
    pbuf_free(p);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7fd f918 	bl	8007ae0 <pbuf_free>
  return;
 800a8b0:	e00b      	b.n	800a8ca <tcp_input+0x942>
dropped:
  TCP_STATS_INC(tcp.drop);
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <tcp_input+0x960>)
 800a8b4:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <tcp_input+0x960>)
 800a8be:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7fd f90c 	bl	8007ae0 <pbuf_free>
 800a8c8:	e000      	b.n	800a8cc <tcp_input+0x944>
  return;
 800a8ca:	bf00      	nop
}
 800a8cc:	3724      	adds	r7, #36	; 0x24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd90      	pop	{r4, r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	200002c0 	.word	0x200002c0
 800a8d8:	200002bd 	.word	0x200002bd
 800a8dc:	20016f58 	.word	0x20016f58
 800a8e0:	20000290 	.word	0x20000290
 800a8e4:	200002a0 	.word	0x200002a0
 800a8e8:	20016e44 	.word	0x20016e44
 800a8ec:	200002b4 	.word	0x200002b4
 800a8f0:	200002ba 	.word	0x200002ba
 800a8f4:	200002b0 	.word	0x200002b0
 800a8f8:	20013780 	.word	0x20013780
 800a8fc:	20013784 	.word	0x20013784

0800a900 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10b      	bne.n	800a926 <tcp_input_delayed_close+0x26>
 800a90e:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <tcp_input_delayed_close+0x78>)
 800a910:	f240 225a 	movw	r2, #602	; 0x25a
 800a914:	4919      	ldr	r1, [pc, #100]	; (800a97c <tcp_input_delayed_close+0x7c>)
 800a916:	481a      	ldr	r0, [pc, #104]	; (800a980 <tcp_input_delayed_close+0x80>)
 800a918:	f7f6 fd0a 	bl	8001330 <iprintf>
 800a91c:	2000      	movs	r0, #0
 800a91e:	f00d fdab 	bl	8018478 <fflush>
 800a922:	f00d fcef 	bl	8018304 <abort>

  if (recv_flags & TF_CLOSED) {
 800a926:	4b17      	ldr	r3, [pc, #92]	; (800a984 <tcp_input_delayed_close+0x84>)
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f003 0310 	and.w	r3, r3, #16
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01c      	beq.n	800a96c <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	8b5b      	ldrh	r3, [r3, #26]
 800a936:	f003 0310 	and.w	r3, r3, #16
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10d      	bne.n	800a95a <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <tcp_input_delayed_close+0x5a>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6912      	ldr	r2, [r2, #16]
 800a952:	f06f 010e 	mvn.w	r1, #14
 800a956:	4610      	mov	r0, r2
 800a958:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	480a      	ldr	r0, [pc, #40]	; (800a988 <tcp_input_delayed_close+0x88>)
 800a95e:	f7ff f975 	bl	8009c4c <tcp_pcb_remove>
    tcp_free(pcb);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7fd fbb8 	bl	80080d8 <tcp_free>
    return 1;
 800a968:	2301      	movs	r3, #1
 800a96a:	e000      	b.n	800a96e <tcp_input_delayed_close+0x6e>
  }
  return 0;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	0801a584 	.word	0x0801a584
 800a97c:	0801a73c 	.word	0x0801a73c
 800a980:	0801a5b8 	.word	0x0801a5b8
 800a984:	200002bd 	.word	0x200002bd
 800a988:	20016f44 	.word	0x20016f44

0800a98c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a98c:	b590      	push	{r4, r7, lr}
 800a98e:	b08b      	sub	sp, #44	; 0x2c
 800a990:	af04      	add	r7, sp, #16
 800a992:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a994:	4b76      	ldr	r3, [pc, #472]	; (800ab70 <tcp_listen_input+0x1e4>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f040 80e0 	bne.w	800ab62 <tcp_listen_input+0x1d6>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10b      	bne.n	800a9c0 <tcp_listen_input+0x34>
 800a9a8:	4b72      	ldr	r3, [pc, #456]	; (800ab74 <tcp_listen_input+0x1e8>)
 800a9aa:	f240 2281 	movw	r2, #641	; 0x281
 800a9ae:	4972      	ldr	r1, [pc, #456]	; (800ab78 <tcp_listen_input+0x1ec>)
 800a9b0:	4872      	ldr	r0, [pc, #456]	; (800ab7c <tcp_listen_input+0x1f0>)
 800a9b2:	f7f6 fcbd 	bl	8001330 <iprintf>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	f00d fd5e 	bl	8018478 <fflush>
 800a9bc:	f00d fca2 	bl	8018304 <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a9c0:	4b6b      	ldr	r3, [pc, #428]	; (800ab70 <tcp_listen_input+0x1e4>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 0310 	and.w	r3, r3, #16
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d019      	beq.n	800aa00 <tcp_listen_input+0x74>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9cc:	4b6c      	ldr	r3, [pc, #432]	; (800ab80 <tcp_listen_input+0x1f4>)
 800a9ce:	6819      	ldr	r1, [r3, #0]
 800a9d0:	4b6c      	ldr	r3, [pc, #432]	; (800ab84 <tcp_listen_input+0x1f8>)
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b6c      	ldr	r3, [pc, #432]	; (800ab88 <tcp_listen_input+0x1fc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9dc:	4b6b      	ldr	r3, [pc, #428]	; (800ab8c <tcp_listen_input+0x200>)
 800a9de:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9e0:	885b      	ldrh	r3, [r3, #2]
 800a9e2:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9e4:	4a69      	ldr	r2, [pc, #420]	; (800ab8c <tcp_listen_input+0x200>)
 800a9e6:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9e8:	8812      	ldrh	r2, [r2, #0]
 800a9ea:	b292      	uxth	r2, r2
 800a9ec:	9202      	str	r2, [sp, #8]
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	4b67      	ldr	r3, [pc, #412]	; (800ab90 <tcp_listen_input+0x204>)
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	4b67      	ldr	r3, [pc, #412]	; (800ab94 <tcp_listen_input+0x208>)
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f003 fdb9 	bl	800e570 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a9fe:	e0b2      	b.n	800ab66 <tcp_listen_input+0x1da>
  } else if (flags & TCP_SYN) {
 800aa00:	4b5b      	ldr	r3, [pc, #364]	; (800ab70 <tcp_listen_input+0x1e4>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f003 0302 	and.w	r3, r3, #2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80ac 	beq.w	800ab66 <tcp_listen_input+0x1da>
    npcb = tcp_alloc(pcb->prio);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	7d5b      	ldrb	r3, [r3, #21]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe ff32 	bl	800987c <tcp_alloc>
 800aa18:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d119      	bne.n	800aa54 <tcp_listen_input+0xc8>
      TCP_STATS_INC(tcp.memerr);
 800aa20:	4b5d      	ldr	r3, [pc, #372]	; (800ab98 <tcp_listen_input+0x20c>)
 800aa22:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800aa26:	3301      	adds	r3, #1
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	4b5b      	ldr	r3, [pc, #364]	; (800ab98 <tcp_listen_input+0x20c>)
 800aa2c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00a      	beq.n	800aa4e <tcp_listen_input+0xc2>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	6910      	ldr	r0, [r2, #16]
 800aa40:	f04f 32ff 	mov.w	r2, #4294967295
 800aa44:	2100      	movs	r1, #0
 800aa46:	4798      	blx	r3
 800aa48:	4603      	mov	r3, r0
 800aa4a:	74fb      	strb	r3, [r7, #19]
      return;
 800aa4c:	e08c      	b.n	800ab68 <tcp_listen_input+0x1dc>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa4e:	23f0      	movs	r3, #240	; 0xf0
 800aa50:	74fb      	strb	r3, [r7, #19]
      return;
 800aa52:	e089      	b.n	800ab68 <tcp_listen_input+0x1dc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aa54:	4b51      	ldr	r3, [pc, #324]	; (800ab9c <tcp_listen_input+0x210>)
 800aa56:	695a      	ldr	r2, [r3, #20]
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aa5c:	4b4f      	ldr	r3, [pc, #316]	; (800ab9c <tcp_listen_input+0x210>)
 800aa5e:	691a      	ldr	r2, [r3, #16]
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	8ada      	ldrh	r2, [r3, #22]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aa6c:	4b47      	ldr	r3, [pc, #284]	; (800ab8c <tcp_listen_input+0x200>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2203      	movs	r2, #3
 800aa7c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aa7e:	4b42      	ldr	r3, [pc, #264]	; (800ab88 <tcp_listen_input+0x1fc>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f7ff f987 	bl	8009da4 <tcp_next_iss>
 800aa96:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aab0:	4b35      	ldr	r3, [pc, #212]	; (800ab88 <tcp_listen_input+0x1fc>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	1e5a      	subs	r2, r3, #1
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7a5b      	ldrb	r3, [r3, #9]
 800aacc:	f003 030c 	and.w	r3, r3, #12
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7a1a      	ldrb	r2, [r3, #8]
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aade:	4b30      	ldr	r3, [pc, #192]	; (800aba0 <tcp_listen_input+0x214>)
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	60da      	str	r2, [r3, #12]
 800aae6:	4a2e      	ldr	r2, [pc, #184]	; (800aba0 <tcp_listen_input+0x214>)
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	f003 ff20 	bl	800e930 <tcp_timer_needed>
 800aaf0:	4b2c      	ldr	r3, [pc, #176]	; (800aba4 <tcp_listen_input+0x218>)
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aaf6:	6978      	ldr	r0, [r7, #20]
 800aaf8:	f001 fdf2 	bl	800c6e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aafc:	4b23      	ldr	r3, [pc, #140]	; (800ab8c <tcp_listen_input+0x200>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	89db      	ldrh	r3, [r3, #14]
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f9 fdce 	bl	80046c0 <ip4_route>
 800ab24:	4601      	mov	r1, r0
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7ff f963 	bl	8009df8 <tcp_eff_send_mss_netif>
 800ab32:	4603      	mov	r3, r0
 800ab34:	461a      	mov	r2, r3
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ab3a:	2112      	movs	r1, #18
 800ab3c:	6978      	ldr	r0, [r7, #20]
 800ab3e:	f002 fdb3 	bl	800d6a8 <tcp_enqueue_flags>
 800ab42:	4603      	mov	r3, r0
 800ab44:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800ab46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d004      	beq.n	800ab58 <tcp_listen_input+0x1cc>
      tcp_abandon(npcb, 0);
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6978      	ldr	r0, [r7, #20]
 800ab52:	f7fd fd6b 	bl	800862c <tcp_abandon>
      return;
 800ab56:	e007      	b.n	800ab68 <tcp_listen_input+0x1dc>
    tcp_output(npcb);
 800ab58:	6978      	ldr	r0, [r7, #20]
 800ab5a:	f002 feb1 	bl	800d8c0 <tcp_output>
  return;
 800ab5e:	bf00      	nop
 800ab60:	e001      	b.n	800ab66 <tcp_listen_input+0x1da>
    return;
 800ab62:	bf00      	nop
 800ab64:	e000      	b.n	800ab68 <tcp_listen_input+0x1dc>
  return;
 800ab66:	bf00      	nop
}
 800ab68:	371c      	adds	r7, #28
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd90      	pop	{r4, r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	200002bc 	.word	0x200002bc
 800ab74:	0801a584 	.word	0x0801a584
 800ab78:	0801a764 	.word	0x0801a764
 800ab7c:	0801a5b8 	.word	0x0801a5b8
 800ab80:	200002b4 	.word	0x200002b4
 800ab84:	200002ba 	.word	0x200002ba
 800ab88:	200002b0 	.word	0x200002b0
 800ab8c:	200002a0 	.word	0x200002a0
 800ab90:	20013780 	.word	0x20013780
 800ab94:	20013784 	.word	0x20013784
 800ab98:	20016e44 	.word	0x20016e44
 800ab9c:	20013770 	.word	0x20013770
 800aba0:	20016f44 	.word	0x20016f44
 800aba4:	20016f40 	.word	0x20016f40

0800aba8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af04      	add	r7, sp, #16
 800abae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800abb0:	4b32      	ldr	r3, [pc, #200]	; (800ac7c <tcp_timewait_input+0xd4>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	f003 0304 	and.w	r3, r3, #4
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d159      	bne.n	800ac70 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10b      	bne.n	800abda <tcp_timewait_input+0x32>
 800abc2:	4b2f      	ldr	r3, [pc, #188]	; (800ac80 <tcp_timewait_input+0xd8>)
 800abc4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800abc8:	492e      	ldr	r1, [pc, #184]	; (800ac84 <tcp_timewait_input+0xdc>)
 800abca:	482f      	ldr	r0, [pc, #188]	; (800ac88 <tcp_timewait_input+0xe0>)
 800abcc:	f7f6 fbb0 	bl	8001330 <iprintf>
 800abd0:	2000      	movs	r0, #0
 800abd2:	f00d fc51 	bl	8018478 <fflush>
 800abd6:	f00d fb95 	bl	8018304 <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800abda:	4b28      	ldr	r3, [pc, #160]	; (800ac7c <tcp_timewait_input+0xd4>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	f003 0302 	and.w	r3, r3, #2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d02a      	beq.n	800ac3c <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800abe6:	4b29      	ldr	r3, [pc, #164]	; (800ac8c <tcp_timewait_input+0xe4>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db2d      	blt.n	800ac50 <tcp_timewait_input+0xa8>
 800abf4:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <tcp_timewait_input+0xe4>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac00:	440b      	add	r3, r1
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc23      	bgt.n	800ac50 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac08:	4b21      	ldr	r3, [pc, #132]	; (800ac90 <tcp_timewait_input+0xe8>)
 800ac0a:	6819      	ldr	r1, [r3, #0]
 800ac0c:	4b21      	ldr	r3, [pc, #132]	; (800ac94 <tcp_timewait_input+0xec>)
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	4b1e      	ldr	r3, [pc, #120]	; (800ac8c <tcp_timewait_input+0xe4>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac18:	4b1f      	ldr	r3, [pc, #124]	; (800ac98 <tcp_timewait_input+0xf0>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac1c:	885b      	ldrh	r3, [r3, #2]
 800ac1e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac20:	4a1d      	ldr	r2, [pc, #116]	; (800ac98 <tcp_timewait_input+0xf0>)
 800ac22:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac24:	8812      	ldrh	r2, [r2, #0]
 800ac26:	b292      	uxth	r2, r2
 800ac28:	9202      	str	r2, [sp, #8]
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	4b1b      	ldr	r3, [pc, #108]	; (800ac9c <tcp_timewait_input+0xf4>)
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4b1b      	ldr	r3, [pc, #108]	; (800aca0 <tcp_timewait_input+0xf8>)
 800ac32:	4602      	mov	r2, r0
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f003 fc9b 	bl	800e570 <tcp_rst>
      return;
 800ac3a:	e01c      	b.n	800ac76 <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 800ac3c:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <tcp_timewait_input+0xd4>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ac48:	4b16      	ldr	r3, [pc, #88]	; (800aca4 <tcp_timewait_input+0xfc>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ac50:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <tcp_timewait_input+0xec>)
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00d      	beq.n	800ac74 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8b5b      	ldrh	r3, [r3, #26]
 800ac5c:	f043 0302 	orr.w	r3, r3, #2
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f002 fe2a 	bl	800d8c0 <tcp_output>
  }
  return;
 800ac6c:	bf00      	nop
 800ac6e:	e001      	b.n	800ac74 <tcp_timewait_input+0xcc>
    return;
 800ac70:	bf00      	nop
 800ac72:	e000      	b.n	800ac76 <tcp_timewait_input+0xce>
  return;
 800ac74:	bf00      	nop
}
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	200002bc 	.word	0x200002bc
 800ac80:	0801a584 	.word	0x0801a584
 800ac84:	0801a784 	.word	0x0801a784
 800ac88:	0801a5b8 	.word	0x0801a5b8
 800ac8c:	200002b0 	.word	0x200002b0
 800ac90:	200002b4 	.word	0x200002b4
 800ac94:	200002ba 	.word	0x200002ba
 800ac98:	200002a0 	.word	0x200002a0
 800ac9c:	20013780 	.word	0x20013780
 800aca0:	20013784 	.word	0x20013784
 800aca4:	20016f48 	.word	0x20016f48

0800aca8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800aca8:	b590      	push	{r4, r7, lr}
 800acaa:	b08d      	sub	sp, #52	; 0x34
 800acac:	af04      	add	r7, sp, #16
 800acae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10b      	bne.n	800acd6 <tcp_process+0x2e>
 800acbe:	4ba7      	ldr	r3, [pc, #668]	; (800af5c <tcp_process+0x2b4>)
 800acc0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800acc4:	49a6      	ldr	r1, [pc, #664]	; (800af60 <tcp_process+0x2b8>)
 800acc6:	48a7      	ldr	r0, [pc, #668]	; (800af64 <tcp_process+0x2bc>)
 800acc8:	f7f6 fb32 	bl	8001330 <iprintf>
 800accc:	2000      	movs	r0, #0
 800acce:	f00d fbd3 	bl	8018478 <fflush>
 800acd2:	f00d fb17 	bl	8018304 <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800acd6:	4ba4      	ldr	r3, [pc, #656]	; (800af68 <tcp_process+0x2c0>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d053      	beq.n	800ad8a <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	7d1b      	ldrb	r3, [r3, #20]
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d108      	bne.n	800acfc <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acee:	4b9f      	ldr	r3, [pc, #636]	; (800af6c <tcp_process+0x2c4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d123      	bne.n	800ad3e <tcp_process+0x96>
        acceptable = 1;
 800acf6:	2301      	movs	r3, #1
 800acf8:	76fb      	strb	r3, [r7, #27]
 800acfa:	e020      	b.n	800ad3e <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad00:	4b9b      	ldr	r3, [pc, #620]	; (800af70 <tcp_process+0x2c8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d102      	bne.n	800ad0e <tcp_process+0x66>
        acceptable = 1;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	76fb      	strb	r3, [r7, #27]
 800ad0c:	e017      	b.n	800ad3e <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ad0e:	4b98      	ldr	r3, [pc, #608]	; (800af70 <tcp_process+0x2c8>)
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	db10      	blt.n	800ad3e <tcp_process+0x96>
 800ad1c:	4b94      	ldr	r3, [pc, #592]	; (800af70 <tcp_process+0x2c8>)
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	6879      	ldr	r1, [r7, #4]
 800ad26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad28:	440b      	add	r3, r1
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dc06      	bgt.n	800ad3e <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	8b5b      	ldrh	r3, [r3, #26]
 800ad34:	f043 0302 	orr.w	r3, r3, #2
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ad3e:	7efb      	ldrb	r3, [r7, #27]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d020      	beq.n	800ad86 <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7d1b      	ldrb	r3, [r3, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <tcp_process+0xbc>
 800ad4c:	4b83      	ldr	r3, [pc, #524]	; (800af5c <tcp_process+0x2b4>)
 800ad4e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ad52:	4988      	ldr	r1, [pc, #544]	; (800af74 <tcp_process+0x2cc>)
 800ad54:	4883      	ldr	r0, [pc, #524]	; (800af64 <tcp_process+0x2bc>)
 800ad56:	f7f6 faeb 	bl	8001330 <iprintf>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	f00d fb8c 	bl	8018478 <fflush>
 800ad60:	f00d fad0 	bl	8018304 <abort>
      recv_flags |= TF_RESET;
 800ad64:	4b84      	ldr	r3, [pc, #528]	; (800af78 <tcp_process+0x2d0>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f043 0308 	orr.w	r3, r3, #8
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	4b82      	ldr	r3, [pc, #520]	; (800af78 <tcp_process+0x2d0>)
 800ad70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	8b5b      	ldrh	r3, [r3, #26]
 800ad76:	f023 0301 	bic.w	r3, r3, #1
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ad80:	f06f 030d 	mvn.w	r3, #13
 800ad84:	e38a      	b.n	800b49c <tcp_process+0x7f4>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	e388      	b.n	800b49c <tcp_process+0x7f4>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ad8a:	4b77      	ldr	r3, [pc, #476]	; (800af68 <tcp_process+0x2c0>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d010      	beq.n	800adb8 <tcp_process+0x110>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	7d1b      	ldrb	r3, [r3, #20]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d00c      	beq.n	800adb8 <tcp_process+0x110>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	7d1b      	ldrb	r3, [r3, #20]
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d008      	beq.n	800adb8 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	8b5b      	ldrh	r3, [r3, #26]
 800adaa:	f043 0302 	orr.w	r3, r3, #2
 800adae:	b29a      	uxth	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	e371      	b.n	800b49c <tcp_process+0x7f4>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	8b5b      	ldrh	r3, [r3, #26]
 800adbc:	f003 0310 	and.w	r3, r3, #16
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800adc4:	4b6d      	ldr	r3, [pc, #436]	; (800af7c <tcp_process+0x2d4>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 fc7f 	bl	800c6e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	7d1b      	ldrb	r3, [r3, #20]
 800ade6:	3b02      	subs	r3, #2
 800ade8:	2b07      	cmp	r3, #7
 800adea:	f200 8347 	bhi.w	800b47c <tcp_process+0x7d4>
 800adee:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <tcp_process+0x14c>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae15 	.word	0x0800ae15
 800adf8:	0800b059 	.word	0x0800b059
 800adfc:	0800b1dd 	.word	0x0800b1dd
 800ae00:	0800b207 	.word	0x0800b207
 800ae04:	0800b32b 	.word	0x0800b32b
 800ae08:	0800b1dd 	.word	0x0800b1dd
 800ae0c:	0800b3b7 	.word	0x0800b3b7
 800ae10:	0800b447 	.word	0x0800b447
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ae14:	4b54      	ldr	r3, [pc, #336]	; (800af68 <tcp_process+0x2c0>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 0310 	and.w	r3, r3, #16
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 80ee 	beq.w	800affe <tcp_process+0x356>
 800ae22:	4b51      	ldr	r3, [pc, #324]	; (800af68 <tcp_process+0x2c0>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80e7 	beq.w	800affe <tcp_process+0x356>
          && (ackno == pcb->lastack + 1)) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	4b4d      	ldr	r3, [pc, #308]	; (800af6c <tcp_process+0x2c4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	f040 80df 	bne.w	800affe <tcp_process+0x356>
        pcb->rcv_nxt = seqno + 1;
 800ae40:	4b4b      	ldr	r3, [pc, #300]	; (800af70 <tcp_process+0x2c8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ae52:	4b46      	ldr	r3, [pc, #280]	; (800af6c <tcp_process+0x2c4>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ae5a:	4b49      	ldr	r3, [pc, #292]	; (800af80 <tcp_process+0x2d8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	89db      	ldrh	r3, [r3, #14]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ae74:	4b3e      	ldr	r3, [pc, #248]	; (800af70 <tcp_process+0x2c8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2204      	movs	r2, #4
 800ae82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f9 fc17 	bl	80046c0 <ip4_route>
 800ae92:	4601      	mov	r1, r0
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3304      	adds	r3, #4
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f7fe ffac 	bl	8009df8 <tcp_eff_send_mss_netif>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeac:	009a      	lsls	r2, r3, #2
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	f241 111c 	movw	r1, #4380	; 0x111c
 800aeb8:	428b      	cmp	r3, r1
 800aeba:	bf38      	it	cc
 800aebc:	460b      	movcc	r3, r1
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d204      	bcs.n	800aecc <tcp_process+0x224>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	e00d      	b.n	800aee8 <tcp_process+0x240>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	f241 121c 	movw	r2, #4380	; 0x111c
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d904      	bls.n	800aee4 <tcp_process+0x23c>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	e001      	b.n	800aee8 <tcp_process+0x240>
 800aee4:	f241 131c 	movw	r3, #4380	; 0x111c
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10b      	bne.n	800af10 <tcp_process+0x268>
 800aef8:	4b18      	ldr	r3, [pc, #96]	; (800af5c <tcp_process+0x2b4>)
 800aefa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800aefe:	4921      	ldr	r1, [pc, #132]	; (800af84 <tcp_process+0x2dc>)
 800af00:	4818      	ldr	r0, [pc, #96]	; (800af64 <tcp_process+0x2bc>)
 800af02:	f7f6 fa15 	bl	8001330 <iprintf>
 800af06:	2000      	movs	r0, #0
 800af08:	f00d fab6 	bl	8018478 <fflush>
 800af0c:	f00d f9fa 	bl	8018304 <abort>
        --pcb->snd_queuelen;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af16:	3b01      	subs	r3, #1
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af24:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d12f      	bne.n	800af8c <tcp_process+0x2e4>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af30:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10b      	bne.n	800af50 <tcp_process+0x2a8>
 800af38:	4b08      	ldr	r3, [pc, #32]	; (800af5c <tcp_process+0x2b4>)
 800af3a:	f44f 725d 	mov.w	r2, #884	; 0x374
 800af3e:	4912      	ldr	r1, [pc, #72]	; (800af88 <tcp_process+0x2e0>)
 800af40:	4808      	ldr	r0, [pc, #32]	; (800af64 <tcp_process+0x2bc>)
 800af42:	f7f6 f9f5 	bl	8001330 <iprintf>
 800af46:	2000      	movs	r0, #0
 800af48:	f00d fa96 	bl	8018478 <fflush>
 800af4c:	f00d f9da 	bl	8018304 <abort>
          pcb->unsent = rseg->next;
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	66da      	str	r2, [r3, #108]	; 0x6c
 800af58:	e01c      	b.n	800af94 <tcp_process+0x2ec>
 800af5a:	bf00      	nop
 800af5c:	0801a584 	.word	0x0801a584
 800af60:	0801a7a4 	.word	0x0801a7a4
 800af64:	0801a5b8 	.word	0x0801a5b8
 800af68:	200002bc 	.word	0x200002bc
 800af6c:	200002b4 	.word	0x200002b4
 800af70:	200002b0 	.word	0x200002b0
 800af74:	0801a7c0 	.word	0x0801a7c0
 800af78:	200002bd 	.word	0x200002bd
 800af7c:	20016f48 	.word	0x20016f48
 800af80:	200002a0 	.word	0x200002a0
 800af84:	0801a7e0 	.word	0x0801a7e0
 800af88:	0801a7f8 	.word	0x0801a7f8
        } else {
          pcb->unacked = rseg->next;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800af94:	69f8      	ldr	r0, [r7, #28]
 800af96:	f7fe fafb 	bl	8009590 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d104      	bne.n	800afac <tcp_process+0x304>
          pcb->rtime = -1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afa8:	861a      	strh	r2, [r3, #48]	; 0x30
 800afaa:	e006      	b.n	800afba <tcp_process+0x312>
        } else {
          pcb->rtime = 0;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00a      	beq.n	800afda <tcp_process+0x332>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	6910      	ldr	r0, [r2, #16]
 800afce:	2200      	movs	r2, #0
 800afd0:	6879      	ldr	r1, [r7, #4]
 800afd2:	4798      	blx	r3
 800afd4:	4603      	mov	r3, r0
 800afd6:	76bb      	strb	r3, [r7, #26]
 800afd8:	e001      	b.n	800afde <tcp_process+0x336>
 800afda:	2300      	movs	r3, #0
 800afdc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800afde:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afe2:	f113 0f0d 	cmn.w	r3, #13
 800afe6:	d102      	bne.n	800afee <tcp_process+0x346>
          return ERR_ABRT;
 800afe8:	f06f 030c 	mvn.w	r3, #12
 800afec:	e256      	b.n	800b49c <tcp_process+0x7f4>
        }
        tcp_ack_now(pcb);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	8b5b      	ldrh	r3, [r3, #26]
 800aff2:	f043 0302 	orr.w	r3, r3, #2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800affc:	e240      	b.n	800b480 <tcp_process+0x7d8>
      else if (flags & TCP_ACK) {
 800affe:	4ba0      	ldr	r3, [pc, #640]	; (800b280 <tcp_process+0x5d8>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	f003 0310 	and.w	r3, r3, #16
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 823a 	beq.w	800b480 <tcp_process+0x7d8>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b00c:	4b9d      	ldr	r3, [pc, #628]	; (800b284 <tcp_process+0x5dc>)
 800b00e:	6819      	ldr	r1, [r3, #0]
 800b010:	4b9d      	ldr	r3, [pc, #628]	; (800b288 <tcp_process+0x5e0>)
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	461a      	mov	r2, r3
 800b016:	4b9d      	ldr	r3, [pc, #628]	; (800b28c <tcp_process+0x5e4>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b01c:	4b9c      	ldr	r3, [pc, #624]	; (800b290 <tcp_process+0x5e8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b020:	885b      	ldrh	r3, [r3, #2]
 800b022:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b024:	4a9a      	ldr	r2, [pc, #616]	; (800b290 <tcp_process+0x5e8>)
 800b026:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b028:	8812      	ldrh	r2, [r2, #0]
 800b02a:	b292      	uxth	r2, r2
 800b02c:	9202      	str	r2, [sp, #8]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	4b98      	ldr	r3, [pc, #608]	; (800b294 <tcp_process+0x5ec>)
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	4b98      	ldr	r3, [pc, #608]	; (800b298 <tcp_process+0x5f0>)
 800b036:	4602      	mov	r2, r0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f003 fa99 	bl	800e570 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b044:	2b05      	cmp	r3, #5
 800b046:	f200 821b 	bhi.w	800b480 <tcp_process+0x7d8>
          pcb->rtime = 0;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f003 f815 	bl	800e080 <tcp_rexmit_rto>
      break;
 800b056:	e213      	b.n	800b480 <tcp_process+0x7d8>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b058:	4b89      	ldr	r3, [pc, #548]	; (800b280 <tcp_process+0x5d8>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 80a7 	beq.w	800b1b4 <tcp_process+0x50c>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b066:	4b87      	ldr	r3, [pc, #540]	; (800b284 <tcp_process+0x5dc>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	3b01      	subs	r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	f2c0 8084 	blt.w	800b180 <tcp_process+0x4d8>
 800b078:	4b82      	ldr	r3, [pc, #520]	; (800b284 <tcp_process+0x5dc>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	dc7c      	bgt.n	800b180 <tcp_process+0x4d8>
          pcb->state = ESTABLISHED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2204      	movs	r2, #4
 800b08a:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <tcp_process+0x3f2>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b094:	23fa      	movs	r3, #250	; 0xfa
 800b096:	76bb      	strb	r3, [r7, #26]
 800b098:	e022      	b.n	800b0e0 <tcp_process+0x438>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10b      	bne.n	800b0bc <tcp_process+0x414>
 800b0a4:	4b7d      	ldr	r3, [pc, #500]	; (800b29c <tcp_process+0x5f4>)
 800b0a6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b0aa:	497d      	ldr	r1, [pc, #500]	; (800b2a0 <tcp_process+0x5f8>)
 800b0ac:	487d      	ldr	r0, [pc, #500]	; (800b2a4 <tcp_process+0x5fc>)
 800b0ae:	f7f6 f93f 	bl	8001330 <iprintf>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	f00d f9e0 	bl	8018478 <fflush>
 800b0b8:	f00d f924 	bl	8018304 <abort>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <tcp_process+0x434>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	6910      	ldr	r0, [r2, #16]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	4798      	blx	r3
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	76bb      	strb	r3, [r7, #26]
 800b0da:	e001      	b.n	800b0e0 <tcp_process+0x438>
 800b0dc:	23f0      	movs	r3, #240	; 0xf0
 800b0de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b0e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <tcp_process+0x456>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b0e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0ec:	f113 0f0d 	cmn.w	r3, #13
 800b0f0:	d002      	beq.n	800b0f8 <tcp_process+0x450>
              tcp_abort(pcb);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fd fb62 	bl	80087bc <tcp_abort>
            }
            return ERR_ABRT;
 800b0f8:	f06f 030c 	mvn.w	r3, #12
 800b0fc:	e1ce      	b.n	800b49c <tcp_process+0x7f4>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 faee 	bl	800b6e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b104:	4b68      	ldr	r3, [pc, #416]	; (800b2a8 <tcp_process+0x600>)
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <tcp_process+0x470>
            recv_acked--;
 800b10c:	4b66      	ldr	r3, [pc, #408]	; (800b2a8 <tcp_process+0x600>)
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	4b64      	ldr	r3, [pc, #400]	; (800b2a8 <tcp_process+0x600>)
 800b116:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b11c:	009a      	lsls	r2, r3, #2
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	f241 111c 	movw	r1, #4380	; 0x111c
 800b128:	428b      	cmp	r3, r1
 800b12a:	bf38      	it	cc
 800b12c:	460b      	movcc	r3, r1
 800b12e:	429a      	cmp	r2, r3
 800b130:	d204      	bcs.n	800b13c <tcp_process+0x494>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	b29b      	uxth	r3, r3
 800b13a:	e00d      	b.n	800b158 <tcp_process+0x4b0>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	f241 121c 	movw	r2, #4380	; 0x111c
 800b146:	4293      	cmp	r3, r2
 800b148:	d904      	bls.n	800b154 <tcp_process+0x4ac>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	b29b      	uxth	r3, r3
 800b152:	e001      	b.n	800b158 <tcp_process+0x4b0>
 800b154:	f241 131c 	movw	r3, #4380	; 0x111c
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b15e:	4b53      	ldr	r3, [pc, #332]	; (800b2ac <tcp_process+0x604>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d037      	beq.n	800b1da <tcp_process+0x532>
            tcp_ack_now(pcb);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	8b5b      	ldrh	r3, [r3, #26]
 800b16e:	f043 0302 	orr.w	r3, r3, #2
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2207      	movs	r2, #7
 800b17c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b17e:	e02c      	b.n	800b1da <tcp_process+0x532>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b180:	4b40      	ldr	r3, [pc, #256]	; (800b284 <tcp_process+0x5dc>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	4b40      	ldr	r3, [pc, #256]	; (800b288 <tcp_process+0x5e0>)
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	4b40      	ldr	r3, [pc, #256]	; (800b28c <tcp_process+0x5e4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b190:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <tcp_process+0x5e8>)
 800b192:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b198:	4a3d      	ldr	r2, [pc, #244]	; (800b290 <tcp_process+0x5e8>)
 800b19a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b19c:	8812      	ldrh	r2, [r2, #0]
 800b19e:	b292      	uxth	r2, r2
 800b1a0:	9202      	str	r2, [sp, #8]
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	4b3b      	ldr	r3, [pc, #236]	; (800b294 <tcp_process+0x5ec>)
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	4b3b      	ldr	r3, [pc, #236]	; (800b298 <tcp_process+0x5f0>)
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f003 f9df 	bl	800e570 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b1b2:	e167      	b.n	800b484 <tcp_process+0x7dc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b1b4:	4b32      	ldr	r3, [pc, #200]	; (800b280 <tcp_process+0x5d8>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 8161 	beq.w	800b484 <tcp_process+0x7dc>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	1e5a      	subs	r2, r3, #1
 800b1c8:	4b30      	ldr	r3, [pc, #192]	; (800b28c <tcp_process+0x5e4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	f040 8159 	bne.w	800b484 <tcp_process+0x7dc>
        tcp_rexmit(pcb);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f002 ff7a 	bl	800e0cc <tcp_rexmit>
      break;
 800b1d8:	e154      	b.n	800b484 <tcp_process+0x7dc>
 800b1da:	e153      	b.n	800b484 <tcp_process+0x7dc>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa7f 	bl	800b6e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b1e2:	4b32      	ldr	r3, [pc, #200]	; (800b2ac <tcp_process+0x604>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 814c 	beq.w	800b488 <tcp_process+0x7e0>
        tcp_ack_now(pcb);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	8b5b      	ldrh	r3, [r3, #26]
 800b1f4:	f043 0302 	orr.w	r3, r3, #2
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2207      	movs	r2, #7
 800b202:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b204:	e140      	b.n	800b488 <tcp_process+0x7e0>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa6a 	bl	800b6e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b20c:	4b27      	ldr	r3, [pc, #156]	; (800b2ac <tcp_process+0x604>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d071      	beq.n	800b2fc <tcp_process+0x654>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b218:	4b19      	ldr	r3, [pc, #100]	; (800b280 <tcp_process+0x5d8>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	f003 0310 	and.w	r3, r3, #16
 800b220:	2b00      	cmp	r3, #0
 800b222:	d060      	beq.n	800b2e6 <tcp_process+0x63e>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b228:	4b16      	ldr	r3, [pc, #88]	; (800b284 <tcp_process+0x5dc>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d15a      	bne.n	800b2e6 <tcp_process+0x63e>
            pcb->unsent == NULL) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b234:	2b00      	cmp	r3, #0
 800b236:	d156      	bne.n	800b2e6 <tcp_process+0x63e>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8b5b      	ldrh	r3, [r3, #26]
 800b23c:	f043 0302 	orr.w	r3, r3, #2
 800b240:	b29a      	uxth	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7fe fcaa 	bl	8009ba0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b24c:	4b18      	ldr	r3, [pc, #96]	; (800b2b0 <tcp_process+0x608>)
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d105      	bne.n	800b262 <tcp_process+0x5ba>
 800b256:	4b16      	ldr	r3, [pc, #88]	; (800b2b0 <tcp_process+0x608>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	4a14      	ldr	r2, [pc, #80]	; (800b2b0 <tcp_process+0x608>)
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	e02e      	b.n	800b2c0 <tcp_process+0x618>
 800b262:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <tcp_process+0x608>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	e027      	b.n	800b2ba <tcp_process+0x612>
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	d11f      	bne.n	800b2b4 <tcp_process+0x60c>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68da      	ldr	r2, [r3, #12]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	60da      	str	r2, [r3, #12]
 800b27c:	e020      	b.n	800b2c0 <tcp_process+0x618>
 800b27e:	bf00      	nop
 800b280:	200002bc 	.word	0x200002bc
 800b284:	200002b4 	.word	0x200002b4
 800b288:	200002ba 	.word	0x200002ba
 800b28c:	200002b0 	.word	0x200002b0
 800b290:	200002a0 	.word	0x200002a0
 800b294:	20013780 	.word	0x20013780
 800b298:	20013784 	.word	0x20013784
 800b29c:	0801a584 	.word	0x0801a584
 800b2a0:	0801a80c 	.word	0x0801a80c
 800b2a4:	0801a5b8 	.word	0x0801a5b8
 800b2a8:	200002b8 	.word	0x200002b8
 800b2ac:	200002bd 	.word	0x200002bd
 800b2b0:	20016f44 	.word	0x20016f44
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1d4      	bne.n	800b26a <tcp_process+0x5c2>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	60da      	str	r2, [r3, #12]
 800b2c6:	4b77      	ldr	r3, [pc, #476]	; (800b4a4 <tcp_process+0x7fc>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	220a      	movs	r2, #10
 800b2d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b2d2:	4b75      	ldr	r3, [pc, #468]	; (800b4a8 <tcp_process+0x800>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	60da      	str	r2, [r3, #12]
 800b2da:	4a73      	ldr	r2, [pc, #460]	; (800b4a8 <tcp_process+0x800>)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	f003 fb26 	bl	800e930 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b2e4:	e0d2      	b.n	800b48c <tcp_process+0x7e4>
          tcp_ack_now(pcb);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ea:	f043 0302 	orr.w	r3, r3, #2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2208      	movs	r2, #8
 800b2f8:	751a      	strb	r2, [r3, #20]
      break;
 800b2fa:	e0c7      	b.n	800b48c <tcp_process+0x7e4>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b2fc:	4b6b      	ldr	r3, [pc, #428]	; (800b4ac <tcp_process+0x804>)
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 0310 	and.w	r3, r3, #16
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 80c1 	beq.w	800b48c <tcp_process+0x7e4>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b30e:	4b68      	ldr	r3, [pc, #416]	; (800b4b0 <tcp_process+0x808>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	f040 80ba 	bne.w	800b48c <tcp_process+0x7e4>
                 pcb->unsent == NULL) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 80b5 	bne.w	800b48c <tcp_process+0x7e4>
        pcb->state = FIN_WAIT_2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2206      	movs	r2, #6
 800b326:	751a      	strb	r2, [r3, #20]
      break;
 800b328:	e0b0      	b.n	800b48c <tcp_process+0x7e4>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f9d8 	bl	800b6e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b330:	4b60      	ldr	r3, [pc, #384]	; (800b4b4 <tcp_process+0x80c>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 80a9 	beq.w	800b490 <tcp_process+0x7e8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f043 0302 	orr.w	r3, r3, #2
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7fe fc27 	bl	8009ba0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b352:	4b59      	ldr	r3, [pc, #356]	; (800b4b8 <tcp_process+0x810>)
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d105      	bne.n	800b368 <tcp_process+0x6c0>
 800b35c:	4b56      	ldr	r3, [pc, #344]	; (800b4b8 <tcp_process+0x810>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	4a55      	ldr	r2, [pc, #340]	; (800b4b8 <tcp_process+0x810>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	e013      	b.n	800b390 <tcp_process+0x6e8>
 800b368:	4b53      	ldr	r3, [pc, #332]	; (800b4b8 <tcp_process+0x810>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	613b      	str	r3, [r7, #16]
 800b36e:	e00c      	b.n	800b38a <tcp_process+0x6e2>
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	68da      	ldr	r2, [r3, #12]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d104      	bne.n	800b384 <tcp_process+0x6dc>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68da      	ldr	r2, [r3, #12]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	60da      	str	r2, [r3, #12]
 800b382:	e005      	b.n	800b390 <tcp_process+0x6e8>
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1ef      	bne.n	800b370 <tcp_process+0x6c8>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	60da      	str	r2, [r3, #12]
 800b396:	4b43      	ldr	r3, [pc, #268]	; (800b4a4 <tcp_process+0x7fc>)
 800b398:	2201      	movs	r2, #1
 800b39a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	220a      	movs	r2, #10
 800b3a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b3a2:	4b41      	ldr	r3, [pc, #260]	; (800b4a8 <tcp_process+0x800>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60da      	str	r2, [r3, #12]
 800b3aa:	4a3f      	ldr	r2, [pc, #252]	; (800b4a8 <tcp_process+0x800>)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	f003 fabe 	bl	800e930 <tcp_timer_needed>
      }
      break;
 800b3b4:	e06c      	b.n	800b490 <tcp_process+0x7e8>
    case CLOSING:
      tcp_receive(pcb);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f992 	bl	800b6e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b3bc:	4b3b      	ldr	r3, [pc, #236]	; (800b4ac <tcp_process+0x804>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 0310 	and.w	r3, r3, #16
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d065      	beq.n	800b494 <tcp_process+0x7ec>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3cc:	4b38      	ldr	r3, [pc, #224]	; (800b4b0 <tcp_process+0x808>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d15f      	bne.n	800b494 <tcp_process+0x7ec>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d15b      	bne.n	800b494 <tcp_process+0x7ec>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7fe fbdf 	bl	8009ba0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b3e2:	4b35      	ldr	r3, [pc, #212]	; (800b4b8 <tcp_process+0x810>)
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d105      	bne.n	800b3f8 <tcp_process+0x750>
 800b3ec:	4b32      	ldr	r3, [pc, #200]	; (800b4b8 <tcp_process+0x810>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	4a31      	ldr	r2, [pc, #196]	; (800b4b8 <tcp_process+0x810>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	e013      	b.n	800b420 <tcp_process+0x778>
 800b3f8:	4b2f      	ldr	r3, [pc, #188]	; (800b4b8 <tcp_process+0x810>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	e00c      	b.n	800b41a <tcp_process+0x772>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68da      	ldr	r2, [r3, #12]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	429a      	cmp	r2, r3
 800b408:	d104      	bne.n	800b414 <tcp_process+0x76c>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	60da      	str	r2, [r3, #12]
 800b412:	e005      	b.n	800b420 <tcp_process+0x778>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1ef      	bne.n	800b400 <tcp_process+0x758>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	60da      	str	r2, [r3, #12]
 800b426:	4b1f      	ldr	r3, [pc, #124]	; (800b4a4 <tcp_process+0x7fc>)
 800b428:	2201      	movs	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	220a      	movs	r2, #10
 800b430:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b432:	4b1d      	ldr	r3, [pc, #116]	; (800b4a8 <tcp_process+0x800>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	60da      	str	r2, [r3, #12]
 800b43a:	4a1b      	ldr	r2, [pc, #108]	; (800b4a8 <tcp_process+0x800>)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	f003 fa76 	bl	800e930 <tcp_timer_needed>
      }
      break;
 800b444:	e026      	b.n	800b494 <tcp_process+0x7ec>
    case LAST_ACK:
      tcp_receive(pcb);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f94a 	bl	800b6e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b44c:	4b17      	ldr	r3, [pc, #92]	; (800b4ac <tcp_process+0x804>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 0310 	and.w	r3, r3, #16
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01f      	beq.n	800b498 <tcp_process+0x7f0>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b45c:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <tcp_process+0x808>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d119      	bne.n	800b498 <tcp_process+0x7f0>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d115      	bne.n	800b498 <tcp_process+0x7f0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <tcp_process+0x80c>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f043 0310 	orr.w	r3, r3, #16
 800b474:	b2da      	uxtb	r2, r3
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <tcp_process+0x80c>)
 800b478:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b47a:	e00d      	b.n	800b498 <tcp_process+0x7f0>
    default:
      break;
 800b47c:	bf00      	nop
 800b47e:	e00c      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b480:	bf00      	nop
 800b482:	e00a      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b484:	bf00      	nop
 800b486:	e008      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b488:	bf00      	nop
 800b48a:	e006      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b48c:	bf00      	nop
 800b48e:	e004      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b490:	bf00      	nop
 800b492:	e002      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b494:	bf00      	nop
 800b496:	e000      	b.n	800b49a <tcp_process+0x7f2>
      break;
 800b498:	bf00      	nop
  }
  return ERR_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3724      	adds	r7, #36	; 0x24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}
 800b4a4:	20016f40 	.word	0x20016f40
 800b4a8:	20016f54 	.word	0x20016f54
 800b4ac:	200002bc 	.word	0x200002bc
 800b4b0:	200002b4 	.word	0x200002b4
 800b4b4:	200002bd 	.word	0x200002bd
 800b4b8:	20016f44 	.word	0x20016f44

0800b4bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b4bc:	b5b0      	push	{r4, r5, r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10b      	bne.n	800b4e4 <tcp_oos_insert_segment+0x28>
 800b4cc:	4b3d      	ldr	r3, [pc, #244]	; (800b5c4 <tcp_oos_insert_segment+0x108>)
 800b4ce:	f240 421f 	movw	r2, #1055	; 0x41f
 800b4d2:	493d      	ldr	r1, [pc, #244]	; (800b5c8 <tcp_oos_insert_segment+0x10c>)
 800b4d4:	483d      	ldr	r0, [pc, #244]	; (800b5cc <tcp_oos_insert_segment+0x110>)
 800b4d6:	f7f5 ff2b 	bl	8001330 <iprintf>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f00c ffcc 	bl	8018478 <fflush>
 800b4e0:	f00c ff10 	bl	8018304 <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	899b      	ldrh	r3, [r3, #12]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fa fbad 	bl	8005c4c <lwip_htons>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d027      	beq.n	800b54e <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b4fe:	6838      	ldr	r0, [r7, #0]
 800b500:	f7fe f832 	bl	8009568 <tcp_segs_free>
    next = NULL;
 800b504:	2300      	movs	r3, #0
 800b506:	603b      	str	r3, [r7, #0]
 800b508:	e055      	b.n	800b5b6 <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	899b      	ldrh	r3, [r3, #12]
 800b510:	b29b      	uxth	r3, r3
 800b512:	4618      	mov	r0, r3
 800b514:	f7fa fb9a 	bl	8005c4c <lwip_htons>
 800b518:	4603      	mov	r3, r0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00c      	beq.n	800b53e <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68dc      	ldr	r4, [r3, #12]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	899b      	ldrh	r3, [r3, #12]
 800b52e:	b29d      	uxth	r5, r3
 800b530:	2001      	movs	r0, #1
 800b532:	f7fa fb8b 	bl	8005c4c <lwip_htons>
 800b536:	4603      	mov	r3, r0
 800b538:	432b      	orrs	r3, r5
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f7fe f821 	bl	8009590 <tcp_seg_free>
    while (next &&
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00e      	beq.n	800b572 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	891b      	ldrh	r3, [r3, #8]
 800b558:	461a      	mov	r2, r3
 800b55a:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <tcp_oos_insert_segment+0x114>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	441a      	add	r2, r3
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	8909      	ldrh	r1, [r1, #8]
 800b56a:	440b      	add	r3, r1
 800b56c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b56e:	2b00      	cmp	r3, #0
 800b570:	dacb      	bge.n	800b50a <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01e      	beq.n	800b5b6 <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	891b      	ldrh	r3, [r3, #8]
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b14      	ldr	r3, [pc, #80]	; (800b5d0 <tcp_oos_insert_segment+0x114>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	441a      	add	r2, r3
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dd12      	ble.n	800b5b6 <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	b29a      	uxth	r2, r3
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <tcp_oos_insert_segment+0x114>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	891b      	ldrh	r3, [r3, #8]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	f7fc f8bf 	bl	8007734 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	601a      	str	r2, [r3, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b5c4:	0801a584 	.word	0x0801a584
 800b5c8:	0801a82c 	.word	0x0801a82c
 800b5cc:	0801a5b8 	.word	0x0801a5b8
 800b5d0:	200002b0 	.word	0x200002b0

0800b5d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b5d4:	b5b0      	push	{r4, r5, r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b5e2:	e048      	b.n	800b676 <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fc fb16 	bl	8007c24 <pbuf_clen>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b602:	8a7a      	ldrh	r2, [r7, #18]
 800b604:	429a      	cmp	r2, r3
 800b606:	d90b      	bls.n	800b620 <tcp_free_acked_segments+0x4c>
 800b608:	4b2f      	ldr	r3, [pc, #188]	; (800b6c8 <tcp_free_acked_segments+0xf4>)
 800b60a:	f240 4257 	movw	r2, #1111	; 0x457
 800b60e:	492f      	ldr	r1, [pc, #188]	; (800b6cc <tcp_free_acked_segments+0xf8>)
 800b610:	482f      	ldr	r0, [pc, #188]	; (800b6d0 <tcp_free_acked_segments+0xfc>)
 800b612:	f7f5 fe8d 	bl	8001330 <iprintf>
 800b616:	2000      	movs	r0, #0
 800b618:	f00c ff2e 	bl	8018478 <fflush>
 800b61c:	f00c fe72 	bl	8018304 <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b626:	8a7b      	ldrh	r3, [r7, #18]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	891a      	ldrh	r2, [r3, #8]
 800b636:	4b27      	ldr	r3, [pc, #156]	; (800b6d4 <tcp_free_acked_segments+0x100>)
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	4413      	add	r3, r2
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <tcp_free_acked_segments+0x100>)
 800b640:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b642:	6978      	ldr	r0, [r7, #20]
 800b644:	f7fd ffa4 	bl	8009590 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d011      	beq.n	800b676 <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10e      	bne.n	800b676 <tcp_free_acked_segments+0xa2>
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <tcp_free_acked_segments+0xa2>
 800b65e:	4b1a      	ldr	r3, [pc, #104]	; (800b6c8 <tcp_free_acked_segments+0xf4>)
 800b660:	f240 4262 	movw	r2, #1122	; 0x462
 800b664:	491c      	ldr	r1, [pc, #112]	; (800b6d8 <tcp_free_acked_segments+0x104>)
 800b666:	481a      	ldr	r0, [pc, #104]	; (800b6d0 <tcp_free_acked_segments+0xfc>)
 800b668:	f7f5 fe62 	bl	8001330 <iprintf>
 800b66c:	2000      	movs	r0, #0
 800b66e:	f00c ff03 	bl	8018478 <fflush>
 800b672:	f00c fe47 	bl	8018304 <abort>
  while (seg_list != NULL &&
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d020      	beq.n	800b6be <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	4618      	mov	r0, r3
 800b684:	f7fa faf7 	bl	8005c76 <lwip_htonl>
 800b688:	4604      	mov	r4, r0
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	891b      	ldrh	r3, [r3, #8]
 800b68e:	461d      	mov	r5, r3
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	899b      	ldrh	r3, [r3, #12]
 800b696:	b29b      	uxth	r3, r3
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fa fad7 	bl	8005c4c <lwip_htons>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <tcp_free_acked_segments+0xda>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e000      	b.n	800b6b0 <tcp_free_acked_segments+0xdc>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	442b      	add	r3, r5
 800b6b2:	18e2      	adds	r2, r4, r3
 800b6b4:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <tcp_free_acked_segments+0x108>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	dd92      	ble.n	800b5e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b6be:	68bb      	ldr	r3, [r7, #8]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bdb0      	pop	{r4, r5, r7, pc}
 800b6c8:	0801a584 	.word	0x0801a584
 800b6cc:	0801a854 	.word	0x0801a854
 800b6d0:	0801a5b8 	.word	0x0801a5b8
 800b6d4:	200002b8 	.word	0x200002b8
 800b6d8:	0801a87c 	.word	0x0801a87c
 800b6dc:	200002b4 	.word	0x200002b4

0800b6e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b6e0:	b5b0      	push	{r4, r5, r7, lr}
 800b6e2:	b094      	sub	sp, #80	; 0x50
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10b      	bne.n	800b70a <tcp_receive+0x2a>
 800b6f2:	4b98      	ldr	r3, [pc, #608]	; (800b954 <tcp_receive+0x274>)
 800b6f4:	f240 427b 	movw	r2, #1147	; 0x47b
 800b6f8:	4997      	ldr	r1, [pc, #604]	; (800b958 <tcp_receive+0x278>)
 800b6fa:	4898      	ldr	r0, [pc, #608]	; (800b95c <tcp_receive+0x27c>)
 800b6fc:	f7f5 fe18 	bl	8001330 <iprintf>
 800b700:	2000      	movs	r0, #0
 800b702:	f00c feb9 	bl	8018478 <fflush>
 800b706:	f00c fdfd 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7d1b      	ldrb	r3, [r3, #20]
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d80b      	bhi.n	800b72a <tcp_receive+0x4a>
 800b712:	4b90      	ldr	r3, [pc, #576]	; (800b954 <tcp_receive+0x274>)
 800b714:	f240 427c 	movw	r2, #1148	; 0x47c
 800b718:	4991      	ldr	r1, [pc, #580]	; (800b960 <tcp_receive+0x280>)
 800b71a:	4890      	ldr	r0, [pc, #576]	; (800b95c <tcp_receive+0x27c>)
 800b71c:	f7f5 fe08 	bl	8001330 <iprintf>
 800b720:	2000      	movs	r0, #0
 800b722:	f00c fea9 	bl	8018478 <fflush>
 800b726:	f00c fded 	bl	8018304 <abort>

  if (flags & TCP_ACK) {
 800b72a:	4b8e      	ldr	r3, [pc, #568]	; (800b964 <tcp_receive+0x284>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	f003 0310 	and.w	r3, r3, #16
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 8268 	beq.w	800bc08 <tcp_receive+0x528>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b73e:	461a      	mov	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b744:	4413      	add	r3, r2
 800b746:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b74c:	4b86      	ldr	r3, [pc, #536]	; (800b968 <tcp_receive+0x288>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	db1b      	blt.n	800b78e <tcp_receive+0xae>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b75a:	4b83      	ldr	r3, [pc, #524]	; (800b968 <tcp_receive+0x288>)
 800b75c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b75e:	429a      	cmp	r2, r3
 800b760:	d106      	bne.n	800b770 <tcp_receive+0x90>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b766:	4b81      	ldr	r3, [pc, #516]	; (800b96c <tcp_receive+0x28c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	db0e      	blt.n	800b78e <tcp_receive+0xae>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b774:	4b7d      	ldr	r3, [pc, #500]	; (800b96c <tcp_receive+0x28c>)
 800b776:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b778:	429a      	cmp	r2, r3
 800b77a:	d125      	bne.n	800b7c8 <tcp_receive+0xe8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b77c:	4b7c      	ldr	r3, [pc, #496]	; (800b970 <tcp_receive+0x290>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	89db      	ldrh	r3, [r3, #14]
 800b782:	b29a      	uxth	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d91c      	bls.n	800b7c8 <tcp_receive+0xe8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b78e:	4b78      	ldr	r3, [pc, #480]	; (800b970 <tcp_receive+0x290>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	89db      	ldrh	r3, [r3, #14]
 800b794:	b29a      	uxth	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d205      	bcs.n	800b7b8 <tcp_receive+0xd8>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b7b8:	4b6b      	ldr	r3, [pc, #428]	; (800b968 <tcp_receive+0x288>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b7c0:	4b6a      	ldr	r3, [pc, #424]	; (800b96c <tcp_receive+0x28c>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b7c8:	4b68      	ldr	r3, [pc, #416]	; (800b96c <tcp_receive+0x28c>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc5d      	bgt.n	800b892 <tcp_receive+0x1b2>
      /* Clause 2 */
      if (tcplen == 0) {
 800b7d6:	4b67      	ldr	r3, [pc, #412]	; (800b974 <tcp_receive+0x294>)
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d150      	bne.n	800b880 <tcp_receive+0x1a0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b7e8:	441a      	add	r2, r3
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d147      	bne.n	800b880 <tcp_receive+0x1a0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	db42      	blt.n	800b880 <tcp_receive+0x1a0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7fe:	4b5b      	ldr	r3, [pc, #364]	; (800b96c <tcp_receive+0x28c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	429a      	cmp	r2, r3
 800b804:	d13c      	bne.n	800b880 <tcp_receive+0x1a0>
              found_dupack = 1;
 800b806:	2301      	movs	r3, #1
 800b808:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b810:	3301      	adds	r3, #1
 800b812:	b2da      	uxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d907      	bls.n	800b82e <tcp_receive+0x14e>
                ++pcb->dupacks;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b824:	3301      	adds	r3, #1
 800b826:	b2da      	uxtb	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b834:	2b03      	cmp	r3, #3
 800b836:	d91b      	bls.n	800b870 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b842:	4413      	add	r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d30a      	bcc.n	800b866 <tcp_receive+0x186>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b85a:	4413      	add	r3, r2
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b864:	e004      	b.n	800b870 <tcp_receive+0x190>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b86c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b876:	2b02      	cmp	r3, #2
 800b878:	d902      	bls.n	800b880 <tcp_receive+0x1a0>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f002 fc98 	bl	800e1b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b882:	2b00      	cmp	r3, #0
 800b884:	f040 8160 	bne.w	800bb48 <tcp_receive+0x468>
        pcb->dupacks = 0;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b890:	e15a      	b.n	800bb48 <tcp_receive+0x468>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b892:	4b36      	ldr	r3, [pc, #216]	; (800b96c <tcp_receive+0x28c>)
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	3b01      	subs	r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f2c0 814d 	blt.w	800bb3e <tcp_receive+0x45e>
 800b8a4:	4b31      	ldr	r3, [pc, #196]	; (800b96c <tcp_receive+0x28c>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f300 8145 	bgt.w	800bb3e <tcp_receive+0x45e>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8b5b      	ldrh	r3, [r3, #26]
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d010      	beq.n	800b8e2 <tcp_receive+0x202>
        tcp_clear_flags(pcb, TF_INFR);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8b5b      	ldrh	r3, [r3, #26]
 800b8c4:	f023 0304 	bic.w	r3, r3, #4
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8f0:	10db      	asrs	r3, r3, #3
 800b8f2:	b21b      	sxth	r3, r3
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4413      	add	r3, r2
 800b900:	b29b      	uxth	r3, r3
 800b902:	b21a      	sxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b90a:	4b18      	ldr	r3, [pc, #96]	; (800b96c <tcp_receive+0x28c>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b914:	b29b      	uxth	r3, r3
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b922:	4b12      	ldr	r3, [pc, #72]	; (800b96c <tcp_receive+0x28c>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	7d1b      	ldrb	r3, [r3, #20]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	f240 8096 	bls.w	800ba60 <tcp_receive+0x380>
        if (pcb->cwnd < pcb->ssthresh) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b940:	429a      	cmp	r2, r3
 800b942:	d244      	bcs.n	800b9ce <tcp_receive+0x2ee>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	8b5b      	ldrh	r3, [r3, #26]
 800b948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d013      	beq.n	800b978 <tcp_receive+0x298>
 800b950:	2301      	movs	r3, #1
 800b952:	e012      	b.n	800b97a <tcp_receive+0x29a>
 800b954:	0801a584 	.word	0x0801a584
 800b958:	0801a89c 	.word	0x0801a89c
 800b95c:	0801a5b8 	.word	0x0801a5b8
 800b960:	0801a8b8 	.word	0x0801a8b8
 800b964:	200002bc 	.word	0x200002bc
 800b968:	200002b0 	.word	0x200002b0
 800b96c:	200002b4 	.word	0x200002b4
 800b970:	200002a0 	.word	0x200002a0
 800b974:	200002ba 	.word	0x200002ba
 800b978:	2302      	movs	r3, #2
 800b97a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b97e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b982:	b29a      	uxth	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b988:	fb12 f303 	smulbb	r3, r2, r3
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b990:	4293      	cmp	r3, r2
 800b992:	bf28      	it	cs
 800b994:	4613      	movcs	r3, r2
 800b996:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b99e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b9a0:	4413      	add	r3, r2
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d309      	bcc.n	800b9c2 <tcp_receive+0x2e2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b9b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b9b6:	4413      	add	r3, r2
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b9c0:	e04e      	b.n	800ba60 <tcp_receive+0x380>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b9cc:	e048      	b.n	800ba60 <tcp_receive+0x380>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b9d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9d6:	4413      	add	r3, r2
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d309      	bcc.n	800b9f8 <tcp_receive+0x318>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b9ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9ec:	4413      	add	r3, r2
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9f6:	e004      	b.n	800ba02 <tcp_receive+0x322>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d326      	bcc.n	800ba60 <tcp_receive+0x380>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba32:	4413      	add	r3, r2
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d30a      	bcc.n	800ba56 <tcp_receive+0x376>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba4a:	4413      	add	r3, r2
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ba54:	e004      	b.n	800ba60 <tcp_receive+0x380>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba68:	4a9f      	ldr	r2, [pc, #636]	; (800bce8 <tcp_receive+0x608>)
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7ff fdb2 	bl	800b5d4 <tcp_free_acked_segments>
 800ba70:	4602      	mov	r2, r0
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7e:	4a9b      	ldr	r2, [pc, #620]	; (800bcec <tcp_receive+0x60c>)
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff fda7 	bl	800b5d4 <tcp_free_acked_segments>
 800ba86:	4602      	mov	r2, r0
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d104      	bne.n	800ba9e <tcp_receive+0x3be>
        pcb->rtime = -1;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba9a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ba9c:	e002      	b.n	800baa4 <tcp_receive+0x3c4>
      } else {
        pcb->rtime = 0;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d103      	bne.n	800baba <tcp_receive+0x3da>
        pcb->unsent_oversize = 0;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bac0:	4b8b      	ldr	r3, [pc, #556]	; (800bcf0 <tcp_receive+0x610>)
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	4413      	add	r3, r2
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	8b5b      	ldrh	r3, [r3, #26]
 800bad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d035      	beq.n	800bb46 <tcp_receive+0x466>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d118      	bne.n	800bb14 <tcp_receive+0x434>
          if ((pcb->unsent == NULL) ||
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00c      	beq.n	800bb04 <tcp_receive+0x424>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fa f8bd 	bl	8005c76 <lwip_htonl>
 800bafc:	4603      	mov	r3, r0
 800bafe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dc20      	bgt.n	800bb46 <tcp_receive+0x466>
            tcp_clear_flags(pcb, TF_RTO);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	8b5b      	ldrh	r3, [r3, #26]
 800bb08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb12:	e018      	b.n	800bb46 <tcp_receive+0x466>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fa f8a8 	bl	8005c76 <lwip_htonl>
 800bb26:	4603      	mov	r3, r0
 800bb28:	1ae3      	subs	r3, r4, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	dc0b      	bgt.n	800bb46 <tcp_receive+0x466>
          tcp_clear_flags(pcb, TF_RTO);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	8b5b      	ldrh	r3, [r3, #26]
 800bb32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb3c:	e003      	b.n	800bb46 <tcp_receive+0x466>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f002 fd72 	bl	800e628 <tcp_send_empty_ack>
 800bb44:	e000      	b.n	800bb48 <tcp_receive+0x468>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb46:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05b      	beq.n	800bc08 <tcp_receive+0x528>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb54:	4b67      	ldr	r3, [pc, #412]	; (800bcf4 <tcp_receive+0x614>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da54      	bge.n	800bc08 <tcp_receive+0x528>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bb5e:	4b66      	ldr	r3, [pc, #408]	; (800bcf8 <tcp_receive+0x618>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bb72:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb7c:	10db      	asrs	r3, r3, #3
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb96:	4413      	add	r3, r2
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	b21a      	sxth	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bba0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	da05      	bge.n	800bbb4 <tcp_receive+0x4d4>
        m = (s16_t) - m;
 800bba8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bbac:	425b      	negs	r3, r3
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bbb4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bbbe:	109b      	asrs	r3, r3, #2
 800bbc0:	b21b      	sxth	r3, r3
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bbd8:	4413      	add	r3, r2
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	b21a      	sxth	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bbe8:	10db      	asrs	r3, r3, #3
 800bbea:	b21b      	sxth	r3, r3
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4413      	add	r3, r2
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	b21a      	sxth	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bc08:	4b3c      	ldr	r3, [pc, #240]	; (800bcfc <tcp_receive+0x61c>)
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 8506 	beq.w	800c61e <tcp_receive+0xf3e>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7d1b      	ldrb	r3, [r3, #20]
 800bc16:	2b06      	cmp	r3, #6
 800bc18:	f200 8501 	bhi.w	800c61e <tcp_receive+0xf3e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc20:	4b37      	ldr	r3, [pc, #220]	; (800bd00 <tcp_receive+0x620>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	3b01      	subs	r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f2c0 809d 	blt.w	800bd68 <tcp_receive+0x688>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc32:	4b32      	ldr	r3, [pc, #200]	; (800bcfc <tcp_receive+0x61c>)
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	4619      	mov	r1, r3
 800bc38:	4b31      	ldr	r3, [pc, #196]	; (800bd00 <tcp_receive+0x620>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	440b      	add	r3, r1
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	3301      	adds	r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f300 8090 	bgt.w	800bd68 <tcp_receive+0x688>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bc48:	4b2e      	ldr	r3, [pc, #184]	; (800bd04 <tcp_receive+0x624>)
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc52:	4b2b      	ldr	r3, [pc, #172]	; (800bd00 <tcp_receive+0x620>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bc5a:	4b2a      	ldr	r3, [pc, #168]	; (800bd04 <tcp_receive+0x624>)
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <tcp_receive+0x59a>
 800bc62:	4b29      	ldr	r3, [pc, #164]	; (800bd08 <tcp_receive+0x628>)
 800bc64:	f240 5294 	movw	r2, #1428	; 0x594
 800bc68:	4928      	ldr	r1, [pc, #160]	; (800bd0c <tcp_receive+0x62c>)
 800bc6a:	4829      	ldr	r0, [pc, #164]	; (800bd10 <tcp_receive+0x630>)
 800bc6c:	f7f5 fb60 	bl	8001330 <iprintf>
 800bc70:	2000      	movs	r0, #0
 800bc72:	f00c fc01 	bl	8018478 <fflush>
 800bc76:	f00c fb45 	bl	8018304 <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d90b      	bls.n	800bc9c <tcp_receive+0x5bc>
 800bc84:	4b20      	ldr	r3, [pc, #128]	; (800bd08 <tcp_receive+0x628>)
 800bc86:	f240 5295 	movw	r2, #1429	; 0x595
 800bc8a:	4922      	ldr	r1, [pc, #136]	; (800bd14 <tcp_receive+0x634>)
 800bc8c:	4820      	ldr	r0, [pc, #128]	; (800bd10 <tcp_receive+0x630>)
 800bc8e:	f7f5 fb4f 	bl	8001330 <iprintf>
 800bc92:	2000      	movs	r0, #0
 800bc94:	f00c fbf0 	bl	8018478 <fflush>
 800bc98:	f00c fb34 	bl	8018304 <abort>
      off = (u16_t)off32;
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bca2:	4b18      	ldr	r3, [pc, #96]	; (800bd04 <tcp_receive+0x624>)
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	891b      	ldrh	r3, [r3, #8]
 800bca8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d90b      	bls.n	800bcc8 <tcp_receive+0x5e8>
 800bcb0:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <tcp_receive+0x628>)
 800bcb2:	f240 5297 	movw	r2, #1431	; 0x597
 800bcb6:	4918      	ldr	r1, [pc, #96]	; (800bd18 <tcp_receive+0x638>)
 800bcb8:	4815      	ldr	r0, [pc, #84]	; (800bd10 <tcp_receive+0x630>)
 800bcba:	f7f5 fb39 	bl	8001330 <iprintf>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f00c fbda 	bl	8018478 <fflush>
 800bcc4:	f00c fb1e 	bl	8018304 <abort>
      inseg.len -= off;
 800bcc8:	4b0e      	ldr	r3, [pc, #56]	; (800bd04 <tcp_receive+0x624>)
 800bcca:	891a      	ldrh	r2, [r3, #8]
 800bccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <tcp_receive+0x624>)
 800bcd6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <tcp_receive+0x624>)
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	891a      	ldrh	r2, [r3, #8]
 800bcde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bce6:	e029      	b.n	800bd3c <tcp_receive+0x65c>
 800bce8:	0801a8d4 	.word	0x0801a8d4
 800bcec:	0801a8dc 	.word	0x0801a8dc
 800bcf0:	200002b8 	.word	0x200002b8
 800bcf4:	200002b4 	.word	0x200002b4
 800bcf8:	20016f48 	.word	0x20016f48
 800bcfc:	200002ba 	.word	0x200002ba
 800bd00:	200002b0 	.word	0x200002b0
 800bd04:	20000290 	.word	0x20000290
 800bd08:	0801a584 	.word	0x0801a584
 800bd0c:	0801a8e4 	.word	0x0801a8e4
 800bd10:	0801a5b8 	.word	0x0801a5b8
 800bd14:	0801a8f4 	.word	0x0801a8f4
 800bd18:	0801a904 	.word	0x0801a904
        off -= p->len;
 800bd1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd1e:	895b      	ldrh	r3, [r3, #10]
 800bd20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bd2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd32:	2200      	movs	r2, #0
 800bd34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bd36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd3e:	895b      	ldrh	r3, [r3, #10]
 800bd40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d8e9      	bhi.n	800bd1c <tcp_receive+0x63c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bd48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bd50:	f7fb fe06 	bl	8007960 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bd54:	4b94      	ldr	r3, [pc, #592]	; (800bfa8 <tcp_receive+0x8c8>)
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd5c:	4993      	ldr	r1, [pc, #588]	; (800bfac <tcp_receive+0x8cc>)
 800bd5e:	600a      	str	r2, [r1, #0]
 800bd60:	4a92      	ldr	r2, [pc, #584]	; (800bfac <tcp_receive+0x8cc>)
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd66:	e00d      	b.n	800bd84 <tcp_receive+0x6a4>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bd68:	4b90      	ldr	r3, [pc, #576]	; (800bfac <tcp_receive+0x8cc>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da06      	bge.n	800bd84 <tcp_receive+0x6a4>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	8b5b      	ldrh	r3, [r3, #26]
 800bd7a:	f043 0302 	orr.w	r3, r3, #2
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd84:	4b89      	ldr	r3, [pc, #548]	; (800bfac <tcp_receive+0x8cc>)
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f2c0 8440 	blt.w	800c614 <tcp_receive+0xf34>
 800bd94:	4b85      	ldr	r3, [pc, #532]	; (800bfac <tcp_receive+0x8cc>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	6879      	ldr	r1, [r7, #4]
 800bd9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bda0:	440b      	add	r3, r1
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	3301      	adds	r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f300 8434 	bgt.w	800c614 <tcp_receive+0xf34>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdb0:	4b7e      	ldr	r3, [pc, #504]	; (800bfac <tcp_receive+0x8cc>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	f040 82ac 	bne.w	800c312 <tcp_receive+0xc32>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bdba:	4b7b      	ldr	r3, [pc, #492]	; (800bfa8 <tcp_receive+0x8c8>)
 800bdbc:	891c      	ldrh	r4, [r3, #8]
 800bdbe:	4b7a      	ldr	r3, [pc, #488]	; (800bfa8 <tcp_receive+0x8c8>)
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	899b      	ldrh	r3, [r3, #12]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7f9 ff40 	bl	8005c4c <lwip_htons>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <tcp_receive+0x6fc>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <tcp_receive+0x6fe>
 800bddc:	2300      	movs	r3, #0
 800bdde:	4423      	add	r3, r4
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	4b73      	ldr	r3, [pc, #460]	; (800bfb0 <tcp_receive+0x8d0>)
 800bde4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdea:	4b71      	ldr	r3, [pc, #452]	; (800bfb0 <tcp_receive+0x8d0>)
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d27a      	bcs.n	800bee8 <tcp_receive+0x808>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bdf2:	4b6d      	ldr	r3, [pc, #436]	; (800bfa8 <tcp_receive+0x8c8>)
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	899b      	ldrh	r3, [r3, #12]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7f9 ff26 	bl	8005c4c <lwip_htons>
 800be00:	4603      	mov	r3, r0
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01f      	beq.n	800be4c <tcp_receive+0x76c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800be0c:	4b66      	ldr	r3, [pc, #408]	; (800bfa8 <tcp_receive+0x8c8>)
 800be0e:	68dc      	ldr	r4, [r3, #12]
 800be10:	4b65      	ldr	r3, [pc, #404]	; (800bfa8 <tcp_receive+0x8c8>)
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	899b      	ldrh	r3, [r3, #12]
 800be16:	b29b      	uxth	r3, r3
 800be18:	b21b      	sxth	r3, r3
 800be1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be1e:	b21d      	sxth	r5, r3
 800be20:	4b61      	ldr	r3, [pc, #388]	; (800bfa8 <tcp_receive+0x8c8>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	899b      	ldrh	r3, [r3, #12]
 800be26:	b29b      	uxth	r3, r3
 800be28:	4618      	mov	r0, r3
 800be2a:	f7f9 ff0f 	bl	8005c4c <lwip_htons>
 800be2e:	4603      	mov	r3, r0
 800be30:	b2db      	uxtb	r3, r3
 800be32:	b29b      	uxth	r3, r3
 800be34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800be38:	b29b      	uxth	r3, r3
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7f9 ff06 	bl	8005c4c <lwip_htons>
 800be40:	4603      	mov	r3, r0
 800be42:	b21b      	sxth	r3, r3
 800be44:	432b      	orrs	r3, r5
 800be46:	b21b      	sxth	r3, r3
 800be48:	b29b      	uxth	r3, r3
 800be4a:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be50:	4b55      	ldr	r3, [pc, #340]	; (800bfa8 <tcp_receive+0x8c8>)
 800be52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800be54:	4b54      	ldr	r3, [pc, #336]	; (800bfa8 <tcp_receive+0x8c8>)
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	899b      	ldrh	r3, [r3, #12]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f9 fef5 	bl	8005c4c <lwip_htons>
 800be62:	4603      	mov	r3, r0
 800be64:	b2db      	uxtb	r3, r3
 800be66:	f003 0302 	and.w	r3, r3, #2
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d005      	beq.n	800be7a <tcp_receive+0x79a>
            inseg.len -= 1;
 800be6e:	4b4e      	ldr	r3, [pc, #312]	; (800bfa8 <tcp_receive+0x8c8>)
 800be70:	891b      	ldrh	r3, [r3, #8]
 800be72:	3b01      	subs	r3, #1
 800be74:	b29a      	uxth	r2, r3
 800be76:	4b4c      	ldr	r3, [pc, #304]	; (800bfa8 <tcp_receive+0x8c8>)
 800be78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800be7a:	4b4b      	ldr	r3, [pc, #300]	; (800bfa8 <tcp_receive+0x8c8>)
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	4b4a      	ldr	r3, [pc, #296]	; (800bfa8 <tcp_receive+0x8c8>)
 800be80:	891b      	ldrh	r3, [r3, #8]
 800be82:	4619      	mov	r1, r3
 800be84:	4610      	mov	r0, r2
 800be86:	f7fb fc55 	bl	8007734 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800be8a:	4b47      	ldr	r3, [pc, #284]	; (800bfa8 <tcp_receive+0x8c8>)
 800be8c:	891c      	ldrh	r4, [r3, #8]
 800be8e:	4b46      	ldr	r3, [pc, #280]	; (800bfa8 <tcp_receive+0x8c8>)
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	899b      	ldrh	r3, [r3, #12]
 800be94:	b29b      	uxth	r3, r3
 800be96:	4618      	mov	r0, r3
 800be98:	f7f9 fed8 	bl	8005c4c <lwip_htons>
 800be9c:	4603      	mov	r3, r0
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	f003 0303 	and.w	r3, r3, #3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <tcp_receive+0x7cc>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <tcp_receive+0x7ce>
 800beac:	2300      	movs	r3, #0
 800beae:	4423      	add	r3, r4
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	4b3f      	ldr	r3, [pc, #252]	; (800bfb0 <tcp_receive+0x8d0>)
 800beb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800beb6:	4b3e      	ldr	r3, [pc, #248]	; (800bfb0 <tcp_receive+0x8d0>)
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	4b3b      	ldr	r3, [pc, #236]	; (800bfac <tcp_receive+0x8cc>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	441a      	add	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800beca:	440b      	add	r3, r1
 800becc:	429a      	cmp	r2, r3
 800bece:	d00b      	beq.n	800bee8 <tcp_receive+0x808>
 800bed0:	4b38      	ldr	r3, [pc, #224]	; (800bfb4 <tcp_receive+0x8d4>)
 800bed2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800bed6:	4938      	ldr	r1, [pc, #224]	; (800bfb8 <tcp_receive+0x8d8>)
 800bed8:	4838      	ldr	r0, [pc, #224]	; (800bfbc <tcp_receive+0x8dc>)
 800beda:	f7f5 fa29 	bl	8001330 <iprintf>
 800bede:	2000      	movs	r0, #0
 800bee0:	f00c faca 	bl	8018478 <fflush>
 800bee4:	f00c fa0e 	bl	8018304 <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 80eb 	beq.w	800c0c8 <tcp_receive+0x9e8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bef2:	4b2d      	ldr	r3, [pc, #180]	; (800bfa8 <tcp_receive+0x8c8>)
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	899b      	ldrh	r3, [r3, #12]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	4618      	mov	r0, r3
 800befc:	f7f9 fea6 	bl	8005c4c <lwip_htons>
 800bf00:	4603      	mov	r3, r0
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d010      	beq.n	800bf2e <tcp_receive+0x84e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bf0c:	e00a      	b.n	800bf24 <tcp_receive+0x844>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf12:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bf1e:	69f8      	ldr	r0, [r7, #28]
 800bf20:	f7fd fb36 	bl	8009590 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1f0      	bne.n	800bf0e <tcp_receive+0x82e>
 800bf2c:	e0cc      	b.n	800c0c8 <tcp_receive+0x9e8>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bf34:	e051      	b.n	800bfda <tcp_receive+0x8fa>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bf36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	899b      	ldrh	r3, [r3, #12]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7f9 fe84 	bl	8005c4c <lwip_htons>
 800bf44:	4603      	mov	r3, r0
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d03c      	beq.n	800bfca <tcp_receive+0x8ea>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bf50:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <tcp_receive+0x8c8>)
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	899b      	ldrh	r3, [r3, #12]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f9 fe77 	bl	8005c4c <lwip_htons>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d12f      	bne.n	800bfca <tcp_receive+0x8ea>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bf6a:	4b0f      	ldr	r3, [pc, #60]	; (800bfa8 <tcp_receive+0x8c8>)
 800bf6c:	68dc      	ldr	r4, [r3, #12]
 800bf6e:	4b0e      	ldr	r3, [pc, #56]	; (800bfa8 <tcp_receive+0x8c8>)
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	899b      	ldrh	r3, [r3, #12]
 800bf74:	b29d      	uxth	r5, r3
 800bf76:	2001      	movs	r0, #1
 800bf78:	f7f9 fe68 	bl	8005c4c <lwip_htons>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	432b      	orrs	r3, r5
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bf84:	4b08      	ldr	r3, [pc, #32]	; (800bfa8 <tcp_receive+0x8c8>)
 800bf86:	891c      	ldrh	r4, [r3, #8]
 800bf88:	4b07      	ldr	r3, [pc, #28]	; (800bfa8 <tcp_receive+0x8c8>)
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	899b      	ldrh	r3, [r3, #12]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f9 fe5b 	bl	8005c4c <lwip_htons>
 800bf96:	4603      	mov	r3, r0
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00e      	beq.n	800bfc0 <tcp_receive+0x8e0>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e00d      	b.n	800bfc2 <tcp_receive+0x8e2>
 800bfa6:	bf00      	nop
 800bfa8:	20000290 	.word	0x20000290
 800bfac:	200002b0 	.word	0x200002b0
 800bfb0:	200002ba 	.word	0x200002ba
 800bfb4:	0801a584 	.word	0x0801a584
 800bfb8:	0801a914 	.word	0x0801a914
 800bfbc:	0801a5b8 	.word	0x0801a5b8
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4423      	add	r3, r4
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	4b9f      	ldr	r3, [pc, #636]	; (800c244 <tcp_receive+0xb64>)
 800bfc8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfcc:	61bb      	str	r3, [r7, #24]
              next = next->next;
 800bfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bfd4:	69b8      	ldr	r0, [r7, #24]
 800bfd6:	f7fd fadb 	bl	8009590 <tcp_seg_free>
            while (next &&
 800bfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00e      	beq.n	800bffe <tcp_receive+0x91e>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bfe0:	4b98      	ldr	r3, [pc, #608]	; (800c244 <tcp_receive+0xb64>)
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	4b98      	ldr	r3, [pc, #608]	; (800c248 <tcp_receive+0xb68>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	441a      	add	r2, r3
 800bfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bff4:	8909      	ldrh	r1, [r1, #8]
 800bff6:	440b      	add	r3, r1
 800bff8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	da9b      	bge.n	800bf36 <tcp_receive+0x856>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d05e      	beq.n	800c0c2 <tcp_receive+0x9e2>
                TCP_SEQ_GT(seqno + tcplen,
 800c004:	4b8f      	ldr	r3, [pc, #572]	; (800c244 <tcp_receive+0xb64>)
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	461a      	mov	r2, r3
 800c00a:	4b8f      	ldr	r3, [pc, #572]	; (800c248 <tcp_receive+0xb68>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	441a      	add	r2, r3
 800c010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dd52      	ble.n	800c0c2 <tcp_receive+0x9e2>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b29a      	uxth	r2, r3
 800c024:	4b88      	ldr	r3, [pc, #544]	; (800c248 <tcp_receive+0xb68>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	4b87      	ldr	r3, [pc, #540]	; (800c24c <tcp_receive+0xb6c>)
 800c030:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c032:	4b86      	ldr	r3, [pc, #536]	; (800c24c <tcp_receive+0xb6c>)
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	899b      	ldrh	r3, [r3, #12]
 800c038:	b29b      	uxth	r3, r3
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f9 fe06 	bl	8005c4c <lwip_htons>
 800c040:	4603      	mov	r3, r0
 800c042:	b2db      	uxtb	r3, r3
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <tcp_receive+0x978>
                inseg.len -= 1;
 800c04c:	4b7f      	ldr	r3, [pc, #508]	; (800c24c <tcp_receive+0xb6c>)
 800c04e:	891b      	ldrh	r3, [r3, #8]
 800c050:	3b01      	subs	r3, #1
 800c052:	b29a      	uxth	r2, r3
 800c054:	4b7d      	ldr	r3, [pc, #500]	; (800c24c <tcp_receive+0xb6c>)
 800c056:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c058:	4b7c      	ldr	r3, [pc, #496]	; (800c24c <tcp_receive+0xb6c>)
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	4b7b      	ldr	r3, [pc, #492]	; (800c24c <tcp_receive+0xb6c>)
 800c05e:	891b      	ldrh	r3, [r3, #8]
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f7fb fb66 	bl	8007734 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c068:	4b78      	ldr	r3, [pc, #480]	; (800c24c <tcp_receive+0xb6c>)
 800c06a:	891c      	ldrh	r4, [r3, #8]
 800c06c:	4b77      	ldr	r3, [pc, #476]	; (800c24c <tcp_receive+0xb6c>)
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	899b      	ldrh	r3, [r3, #12]
 800c072:	b29b      	uxth	r3, r3
 800c074:	4618      	mov	r0, r3
 800c076:	f7f9 fde9 	bl	8005c4c <lwip_htons>
 800c07a:	4603      	mov	r3, r0
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <tcp_receive+0x9aa>
 800c086:	2301      	movs	r3, #1
 800c088:	e000      	b.n	800c08c <tcp_receive+0x9ac>
 800c08a:	2300      	movs	r3, #0
 800c08c:	4423      	add	r3, r4
 800c08e:	b29a      	uxth	r2, r3
 800c090:	4b6c      	ldr	r3, [pc, #432]	; (800c244 <tcp_receive+0xb64>)
 800c092:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c094:	4b6b      	ldr	r3, [pc, #428]	; (800c244 <tcp_receive+0xb64>)
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	4b6b      	ldr	r3, [pc, #428]	; (800c248 <tcp_receive+0xb68>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	441a      	add	r2, r3
 800c0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d00b      	beq.n	800c0c2 <tcp_receive+0x9e2>
 800c0aa:	4b69      	ldr	r3, [pc, #420]	; (800c250 <tcp_receive+0xb70>)
 800c0ac:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800c0b0:	4968      	ldr	r1, [pc, #416]	; (800c254 <tcp_receive+0xb74>)
 800c0b2:	4869      	ldr	r0, [pc, #420]	; (800c258 <tcp_receive+0xb78>)
 800c0b4:	f7f5 f93c 	bl	8001330 <iprintf>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	f00c f9dd 	bl	8018478 <fflush>
 800c0be:	f00c f921 	bl	8018304 <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0c6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c0c8:	4b5e      	ldr	r3, [pc, #376]	; (800c244 <tcp_receive+0xb64>)
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4b5e      	ldr	r3, [pc, #376]	; (800c248 <tcp_receive+0xb68>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0dc:	4b59      	ldr	r3, [pc, #356]	; (800c244 <tcp_receive+0xb64>)
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d20b      	bcs.n	800c0fc <tcp_receive+0xa1c>
 800c0e4:	4b5a      	ldr	r3, [pc, #360]	; (800c250 <tcp_receive+0xb70>)
 800c0e6:	f240 6207 	movw	r2, #1543	; 0x607
 800c0ea:	495c      	ldr	r1, [pc, #368]	; (800c25c <tcp_receive+0xb7c>)
 800c0ec:	485a      	ldr	r0, [pc, #360]	; (800c258 <tcp_receive+0xb78>)
 800c0ee:	f7f5 f91f 	bl	8001330 <iprintf>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	f00c f9c0 	bl	8018478 <fflush>
 800c0f8:	f00c f904 	bl	8018304 <abort>
        pcb->rcv_wnd -= tcplen;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c100:	4b50      	ldr	r3, [pc, #320]	; (800c244 <tcp_receive+0xb64>)
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	b29a      	uxth	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7fc fcd1 	bl	8008ab4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c112:	4b4e      	ldr	r3, [pc, #312]	; (800c24c <tcp_receive+0xb6c>)
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	891b      	ldrh	r3, [r3, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d006      	beq.n	800c12a <tcp_receive+0xa4a>
          recv_data = inseg.p;
 800c11c:	4b4b      	ldr	r3, [pc, #300]	; (800c24c <tcp_receive+0xb6c>)
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a4f      	ldr	r2, [pc, #316]	; (800c260 <tcp_receive+0xb80>)
 800c122:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c124:	4b49      	ldr	r3, [pc, #292]	; (800c24c <tcp_receive+0xb6c>)
 800c126:	2200      	movs	r2, #0
 800c128:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c12a:	4b48      	ldr	r3, [pc, #288]	; (800c24c <tcp_receive+0xb6c>)
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	899b      	ldrh	r3, [r3, #12]
 800c130:	b29b      	uxth	r3, r3
 800c132:	4618      	mov	r0, r3
 800c134:	f7f9 fd8a 	bl	8005c4c <lwip_htons>
 800c138:	4603      	mov	r3, r0
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 80bc 	beq.w	800c2be <tcp_receive+0xbde>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c146:	4b47      	ldr	r3, [pc, #284]	; (800c264 <tcp_receive+0xb84>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	f043 0320 	orr.w	r3, r3, #32
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	4b44      	ldr	r3, [pc, #272]	; (800c264 <tcp_receive+0xb84>)
 800c152:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c154:	e0b3      	b.n	800c2be <tcp_receive+0xbde>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c15a:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4a38      	ldr	r2, [pc, #224]	; (800c248 <tcp_receive+0xb68>)
 800c166:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	891b      	ldrh	r3, [r3, #8]
 800c16c:	461c      	mov	r4, r3
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	899b      	ldrh	r3, [r3, #12]
 800c174:	b29b      	uxth	r3, r3
 800c176:	4618      	mov	r0, r3
 800c178:	f7f9 fd68 	bl	8005c4c <lwip_htons>
 800c17c:	4603      	mov	r3, r0
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	f003 0303 	and.w	r3, r3, #3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <tcp_receive+0xaac>
 800c188:	2301      	movs	r3, #1
 800c18a:	e000      	b.n	800c18e <tcp_receive+0xaae>
 800c18c:	2300      	movs	r3, #0
 800c18e:	4423      	add	r3, r4
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c194:	441a      	add	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c19e:	461c      	mov	r4, r3
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	891b      	ldrh	r3, [r3, #8]
 800c1a4:	461d      	mov	r5, r3
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	899b      	ldrh	r3, [r3, #12]
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7f9 fd4c 	bl	8005c4c <lwip_htons>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	f003 0303 	and.w	r3, r3, #3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <tcp_receive+0xae4>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e000      	b.n	800c1c6 <tcp_receive+0xae6>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	442b      	add	r3, r5
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d20b      	bcs.n	800c1e4 <tcp_receive+0xb04>
 800c1cc:	4b20      	ldr	r3, [pc, #128]	; (800c250 <tcp_receive+0xb70>)
 800c1ce:	f240 622c 	movw	r2, #1580	; 0x62c
 800c1d2:	4925      	ldr	r1, [pc, #148]	; (800c268 <tcp_receive+0xb88>)
 800c1d4:	4820      	ldr	r0, [pc, #128]	; (800c258 <tcp_receive+0xb78>)
 800c1d6:	f7f5 f8ab 	bl	8001330 <iprintf>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	f00c f94c 	bl	8018478 <fflush>
 800c1e0:	f00c f890 	bl	8018304 <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	891b      	ldrh	r3, [r3, #8]
 800c1e8:	461c      	mov	r4, r3
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	899b      	ldrh	r3, [r3, #12]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f9 fd2a 	bl	8005c4c <lwip_htons>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <tcp_receive+0xb28>
 800c204:	2301      	movs	r3, #1
 800c206:	e000      	b.n	800c20a <tcp_receive+0xb2a>
 800c208:	2300      	movs	r3, #0
 800c20a:	18e1      	adds	r1, r4, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c210:	b28b      	uxth	r3, r1
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	b29a      	uxth	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7fc fc4a 	bl	8008ab4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	891b      	ldrh	r3, [r3, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d027      	beq.n	800c27a <tcp_receive+0xb9a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c22a:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <tcp_receive+0xb80>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d01c      	beq.n	800c26c <tcp_receive+0xb8c>
              pbuf_cat(recv_data, cseg->p);
 800c232:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <tcp_receive+0xb80>)
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	4619      	mov	r1, r3
 800c23c:	4610      	mov	r0, r2
 800c23e:	f7fb fd37 	bl	8007cb0 <pbuf_cat>
 800c242:	e017      	b.n	800c274 <tcp_receive+0xb94>
 800c244:	200002ba 	.word	0x200002ba
 800c248:	200002b0 	.word	0x200002b0
 800c24c:	20000290 	.word	0x20000290
 800c250:	0801a584 	.word	0x0801a584
 800c254:	0801a94c 	.word	0x0801a94c
 800c258:	0801a5b8 	.word	0x0801a5b8
 800c25c:	0801a988 	.word	0x0801a988
 800c260:	200002c0 	.word	0x200002c0
 800c264:	200002bd 	.word	0x200002bd
 800c268:	0801a9a8 	.word	0x0801a9a8
            } else {
              recv_data = cseg->p;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	4a70      	ldr	r2, [pc, #448]	; (800c434 <tcp_receive+0xd54>)
 800c272:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2200      	movs	r2, #0
 800c278:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	899b      	ldrh	r3, [r3, #12]
 800c280:	b29b      	uxth	r3, r3
 800c282:	4618      	mov	r0, r3
 800c284:	f7f9 fce2 	bl	8005c4c <lwip_htons>
 800c288:	4603      	mov	r3, r0
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00d      	beq.n	800c2b0 <tcp_receive+0xbd0>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c294:	4b68      	ldr	r3, [pc, #416]	; (800c438 <tcp_receive+0xd58>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f043 0320 	orr.w	r3, r3, #32
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	4b66      	ldr	r3, [pc, #408]	; (800c438 <tcp_receive+0xd58>)
 800c2a0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7d1b      	ldrb	r3, [r3, #20]
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d102      	bne.n	800c2b0 <tcp_receive+0xbd0>
              pcb->state = CLOSE_WAIT;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2207      	movs	r2, #7
 800c2ae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c2b8:	6978      	ldr	r0, [r7, #20]
 800c2ba:	f7fd f969 	bl	8009590 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d008      	beq.n	800c2d8 <tcp_receive+0xbf8>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	f43f af3f 	beq.w	800c156 <tcp_receive+0xa76>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	8b5b      	ldrh	r3, [r3, #26]
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00e      	beq.n	800c302 <tcp_receive+0xc22>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8b5b      	ldrh	r3, [r3, #26]
 800c2e8:	f023 0301 	bic.w	r3, r3, #1
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	835a      	strh	r2, [r3, #26]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	8b5b      	ldrh	r3, [r3, #26]
 800c2f6:	f043 0302 	orr.w	r3, r3, #2
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c300:	e18c      	b.n	800c61c <tcp_receive+0xf3c>
        tcp_ack(pcb);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	8b5b      	ldrh	r3, [r3, #26]
 800c306:	f043 0301 	orr.w	r3, r3, #1
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c310:	e184      	b.n	800c61c <tcp_receive+0xf3c>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c316:	2b00      	cmp	r3, #0
 800c318:	d106      	bne.n	800c328 <tcp_receive+0xc48>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c31a:	4848      	ldr	r0, [pc, #288]	; (800c43c <tcp_receive+0xd5c>)
 800c31c:	f7fd f950 	bl	80095c0 <tcp_seg_copy>
 800c320:	4602      	mov	r2, r0
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	675a      	str	r2, [r3, #116]	; 0x74
 800c326:	e171      	b.n	800c60c <tcp_receive+0xf2c>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c330:	63bb      	str	r3, [r7, #56]	; 0x38
 800c332:	e15b      	b.n	800c5ec <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	4b41      	ldr	r3, [pc, #260]	; (800c440 <tcp_receive+0xd60>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d11d      	bne.n	800c37e <tcp_receive+0xc9e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c342:	4b3e      	ldr	r3, [pc, #248]	; (800c43c <tcp_receive+0xd5c>)
 800c344:	891a      	ldrh	r2, [r3, #8]
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	891b      	ldrh	r3, [r3, #8]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	f240 8153 	bls.w	800c5f6 <tcp_receive+0xf16>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c350:	483a      	ldr	r0, [pc, #232]	; (800c43c <tcp_receive+0xd5c>)
 800c352:	f7fd f935 	bl	80095c0 <tcp_seg_copy>
 800c356:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 814d 	beq.w	800c5fa <tcp_receive+0xf1a>
                  if (prev != NULL) {
 800c360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <tcp_receive+0xc8e>
                    prev->next = cseg;
 800c366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	e002      	b.n	800c374 <tcp_receive+0xc94>
                  } else {
                    pcb->ooseq = cseg;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c376:	68b8      	ldr	r0, [r7, #8]
 800c378:	f7ff f8a0 	bl	800b4bc <tcp_oos_insert_segment>
                }
                break;
 800c37c:	e13d      	b.n	800c5fa <tcp_receive+0xf1a>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	2b00      	cmp	r3, #0
 800c382:	d117      	bne.n	800c3b4 <tcp_receive+0xcd4>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c384:	4b2e      	ldr	r3, [pc, #184]	; (800c440 <tcp_receive+0xd60>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	da57      	bge.n	800c444 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c394:	4829      	ldr	r0, [pc, #164]	; (800c43c <tcp_receive+0xd5c>)
 800c396:	f7fd f913 	bl	80095c0 <tcp_seg_copy>
 800c39a:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f000 812d 	beq.w	800c5fe <tcp_receive+0xf1e>
                    pcb->ooseq = cseg;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c3aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3ac:	6938      	ldr	r0, [r7, #16]
 800c3ae:	f7ff f885 	bl	800b4bc <tcp_oos_insert_segment>
                  }
                  break;
 800c3b2:	e124      	b.n	800c5fe <tcp_receive+0xf1e>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c3b4:	4b22      	ldr	r3, [pc, #136]	; (800c440 <tcp_receive+0xd60>)
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	db3e      	blt.n	800c444 <tcp_receive+0xd64>
 800c3c6:	4b1e      	ldr	r3, [pc, #120]	; (800c440 <tcp_receive+0xd60>)
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dc35      	bgt.n	800c444 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3d8:	4818      	ldr	r0, [pc, #96]	; (800c43c <tcp_receive+0xd5c>)
 800c3da:	f7fd f8f1 	bl	80095c0 <tcp_seg_copy>
 800c3de:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 810d 	beq.w	800c602 <tcp_receive+0xf22>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3f0:	8912      	ldrh	r2, [r2, #8]
 800c3f2:	441a      	add	r2, r3
 800c3f4:	4b12      	ldr	r3, [pc, #72]	; (800c440 <tcp_receive+0xd60>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	dd12      	ble.n	800c424 <tcp_receive+0xd44>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <tcp_receive+0xd60>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	b29a      	uxth	r2, r3
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	b29a      	uxth	r2, r3
 800c410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c412:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41a:	891b      	ldrh	r3, [r3, #8]
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7fb f988 	bl	8007734 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c42a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff f845 	bl	800b4bc <tcp_oos_insert_segment>
                  }
                  break;
 800c432:	e0e6      	b.n	800c602 <tcp_receive+0xf22>
 800c434:	200002c0 	.word	0x200002c0
 800c438:	200002bd 	.word	0x200002bd
 800c43c:	20000290 	.word	0x20000290
 800c440:	200002b0 	.word	0x200002b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f040 80ca 	bne.w	800c5e6 <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c452:	4b82      	ldr	r3, [pc, #520]	; (800c65c <tcp_receive+0xf7c>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f340 80c1 	ble.w	800c5e6 <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	899b      	ldrh	r3, [r3, #12]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f9 fbed 	bl	8005c4c <lwip_htons>
 800c472:	4603      	mov	r3, r0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f040 80c3 	bne.w	800c606 <tcp_receive+0xf26>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c480:	4877      	ldr	r0, [pc, #476]	; (800c660 <tcp_receive+0xf80>)
 800c482:	f7fd f89d 	bl	80095c0 <tcp_seg_copy>
 800c486:	4602      	mov	r2, r0
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 80ba 	beq.w	800c60a <tcp_receive+0xf2a>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c49e:	8912      	ldrh	r2, [r2, #8]
 800c4a0:	441a      	add	r2, r3
 800c4a2:	4b6e      	ldr	r3, [pc, #440]	; (800c65c <tcp_receive+0xf7c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dd12      	ble.n	800c4d2 <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c4ac:	4b6b      	ldr	r3, [pc, #428]	; (800c65c <tcp_receive+0xf7c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c8:	891b      	ldrh	r3, [r3, #8]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	f7fb f931 	bl	8007734 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c4d2:	4b64      	ldr	r3, [pc, #400]	; (800c664 <tcp_receive+0xf84>)
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	4b60      	ldr	r3, [pc, #384]	; (800c65c <tcp_receive+0xf7c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	441a      	add	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c4e6:	440b      	add	r3, r1
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f340 808d 	ble.w	800c60a <tcp_receive+0xf2a>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	899b      	ldrh	r3, [r3, #12]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7f9 fba6 	bl	8005c4c <lwip_htons>
 800c500:	4603      	mov	r3, r0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f003 0301 	and.w	r3, r3, #1
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d022      	beq.n	800c552 <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68dc      	ldr	r4, [r3, #12]
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	899b      	ldrh	r3, [r3, #12]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	b21b      	sxth	r3, r3
 800c51e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c522:	b21d      	sxth	r5, r3
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	899b      	ldrh	r3, [r3, #12]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	4618      	mov	r0, r3
 800c530:	f7f9 fb8c 	bl	8005c4c <lwip_htons>
 800c534:	4603      	mov	r3, r0
 800c536:	b2db      	uxtb	r3, r3
 800c538:	b29b      	uxth	r3, r3
 800c53a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4618      	mov	r0, r3
 800c542:	f7f9 fb83 	bl	8005c4c <lwip_htons>
 800c546:	4603      	mov	r3, r0
 800c548:	b21b      	sxth	r3, r3
 800c54a:	432b      	orrs	r3, r5
 800c54c:	b21b      	sxth	r3, r3
 800c54e:	b29b      	uxth	r3, r3
 800c550:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c55a:	b291      	uxth	r1, r2
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c560:	440a      	add	r2, r1
 800c562:	b291      	uxth	r1, r2
 800c564:	4a3d      	ldr	r2, [pc, #244]	; (800c65c <tcp_receive+0xf7c>)
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	b292      	uxth	r2, r2
 800c56a:	1a8a      	subs	r2, r1, r2
 800c56c:	b292      	uxth	r2, r2
 800c56e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	891b      	ldrh	r3, [r3, #8]
 800c57c:	4619      	mov	r1, r3
 800c57e:	4610      	mov	r0, r2
 800c580:	f7fb f8d8 	bl	8007734 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	891c      	ldrh	r4, [r3, #8]
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	899b      	ldrh	r3, [r3, #12]
 800c592:	b29b      	uxth	r3, r3
 800c594:	4618      	mov	r0, r3
 800c596:	f7f9 fb59 	bl	8005c4c <lwip_htons>
 800c59a:	4603      	mov	r3, r0
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	f003 0303 	and.w	r3, r3, #3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <tcp_receive+0xeca>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e000      	b.n	800c5ac <tcp_receive+0xecc>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	4423      	add	r3, r4
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	4b2c      	ldr	r3, [pc, #176]	; (800c664 <tcp_receive+0xf84>)
 800c5b2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c5b4:	4b2b      	ldr	r3, [pc, #172]	; (800c664 <tcp_receive+0xf84>)
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	4b28      	ldr	r3, [pc, #160]	; (800c65c <tcp_receive+0xf7c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	441a      	add	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5c8:	440b      	add	r3, r1
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d01d      	beq.n	800c60a <tcp_receive+0xf2a>
 800c5ce:	4b26      	ldr	r3, [pc, #152]	; (800c668 <tcp_receive+0xf88>)
 800c5d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c5d4:	4925      	ldr	r1, [pc, #148]	; (800c66c <tcp_receive+0xf8c>)
 800c5d6:	4826      	ldr	r0, [pc, #152]	; (800c670 <tcp_receive+0xf90>)
 800c5d8:	f7f4 feaa 	bl	8001330 <iprintf>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	f00b ff4b 	bl	8018478 <fflush>
 800c5e2:	f00b fe8f 	bl	8018304 <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f47f aea0 	bne.w	800c334 <tcp_receive+0xc54>
 800c5f4:	e00a      	b.n	800c60c <tcp_receive+0xf2c>
                break;
 800c5f6:	bf00      	nop
 800c5f8:	e008      	b.n	800c60c <tcp_receive+0xf2c>
                break;
 800c5fa:	bf00      	nop
 800c5fc:	e006      	b.n	800c60c <tcp_receive+0xf2c>
                  break;
 800c5fe:	bf00      	nop
 800c600:	e004      	b.n	800c60c <tcp_receive+0xf2c>
                  break;
 800c602:	bf00      	nop
 800c604:	e002      	b.n	800c60c <tcp_receive+0xf2c>
                  break;
 800c606:	bf00      	nop
 800c608:	e000      	b.n	800c60c <tcp_receive+0xf2c>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c60a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f002 f80b 	bl	800e628 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c612:	e003      	b.n	800c61c <tcp_receive+0xf3c>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f002 f807 	bl	800e628 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c61a:	e01a      	b.n	800c652 <tcp_receive+0xf72>
 800c61c:	e019      	b.n	800c652 <tcp_receive+0xf72>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c61e:	4b0f      	ldr	r3, [pc, #60]	; (800c65c <tcp_receive+0xf7c>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	db0a      	blt.n	800c642 <tcp_receive+0xf62>
 800c62c:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <tcp_receive+0xf7c>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c634:	6879      	ldr	r1, [r7, #4]
 800c636:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c638:	440b      	add	r3, r1
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	3301      	adds	r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd07      	ble.n	800c652 <tcp_receive+0xf72>
      tcp_ack_now(pcb);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8b5b      	ldrh	r3, [r3, #26]
 800c646:	f043 0302 	orr.w	r3, r3, #2
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c650:	e7ff      	b.n	800c652 <tcp_receive+0xf72>
 800c652:	bf00      	nop
 800c654:	3750      	adds	r7, #80	; 0x50
 800c656:	46bd      	mov	sp, r7
 800c658:	bdb0      	pop	{r4, r5, r7, pc}
 800c65a:	bf00      	nop
 800c65c:	200002b0 	.word	0x200002b0
 800c660:	20000290 	.word	0x20000290
 800c664:	200002ba 	.word	0x200002ba
 800c668:	0801a584 	.word	0x0801a584
 800c66c:	0801a914 	.word	0x0801a914
 800c670:	0801a5b8 	.word	0x0801a5b8

0800c674 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c67a:	4b15      	ldr	r3, [pc, #84]	; (800c6d0 <tcp_get_next_optbyte+0x5c>)
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	b291      	uxth	r1, r2
 800c682:	4a13      	ldr	r2, [pc, #76]	; (800c6d0 <tcp_get_next_optbyte+0x5c>)
 800c684:	8011      	strh	r1, [r2, #0]
 800c686:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c688:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <tcp_get_next_optbyte+0x60>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <tcp_get_next_optbyte+0x26>
 800c690:	4b11      	ldr	r3, [pc, #68]	; (800c6d8 <tcp_get_next_optbyte+0x64>)
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	88fa      	ldrh	r2, [r7, #6]
 800c696:	429a      	cmp	r2, r3
 800c698:	d208      	bcs.n	800c6ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <tcp_get_next_optbyte+0x68>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3314      	adds	r3, #20
 800c6a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	e00b      	b.n	800c6c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c6ac:	88fb      	ldrh	r3, [r7, #6]
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <tcp_get_next_optbyte+0x64>)
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c6ba:	4b06      	ldr	r3, [pc, #24]	; (800c6d4 <tcp_get_next_optbyte+0x60>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	797b      	ldrb	r3, [r7, #5]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	200002ac 	.word	0x200002ac
 800c6d4:	200002a8 	.word	0x200002a8
 800c6d8:	200002a6 	.word	0x200002a6
 800c6dc:	200002a0 	.word	0x200002a0

0800c6e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10b      	bne.n	800c706 <tcp_parseopt+0x26>
 800c6ee:	4b33      	ldr	r3, [pc, #204]	; (800c7bc <tcp_parseopt+0xdc>)
 800c6f0:	f240 727d 	movw	r2, #1917	; 0x77d
 800c6f4:	4932      	ldr	r1, [pc, #200]	; (800c7c0 <tcp_parseopt+0xe0>)
 800c6f6:	4833      	ldr	r0, [pc, #204]	; (800c7c4 <tcp_parseopt+0xe4>)
 800c6f8:	f7f4 fe1a 	bl	8001330 <iprintf>
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f00b febb 	bl	8018478 <fflush>
 800c702:	f00b fdff 	bl	8018304 <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c706:	4b30      	ldr	r3, [pc, #192]	; (800c7c8 <tcp_parseopt+0xe8>)
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d053      	beq.n	800c7b6 <tcp_parseopt+0xd6>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c70e:	4b2f      	ldr	r3, [pc, #188]	; (800c7cc <tcp_parseopt+0xec>)
 800c710:	2200      	movs	r2, #0
 800c712:	801a      	strh	r2, [r3, #0]
 800c714:	e043      	b.n	800c79e <tcp_parseopt+0xbe>
      u8_t opt = tcp_get_next_optbyte();
 800c716:	f7ff ffad 	bl	800c674 <tcp_get_next_optbyte>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d03c      	beq.n	800c79e <tcp_parseopt+0xbe>
 800c724:	2b02      	cmp	r3, #2
 800c726:	d002      	beq.n	800c72e <tcp_parseopt+0x4e>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d03f      	beq.n	800c7ac <tcp_parseopt+0xcc>
 800c72c:	e026      	b.n	800c77c <tcp_parseopt+0x9c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c72e:	f7ff ffa1 	bl	800c674 <tcp_get_next_optbyte>
 800c732:	4603      	mov	r3, r0
 800c734:	2b04      	cmp	r3, #4
 800c736:	d13b      	bne.n	800c7b0 <tcp_parseopt+0xd0>
 800c738:	4b24      	ldr	r3, [pc, #144]	; (800c7cc <tcp_parseopt+0xec>)
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	3302      	adds	r3, #2
 800c73e:	4a22      	ldr	r2, [pc, #136]	; (800c7c8 <tcp_parseopt+0xe8>)
 800c740:	8812      	ldrh	r2, [r2, #0]
 800c742:	4293      	cmp	r3, r2
 800c744:	dc34      	bgt.n	800c7b0 <tcp_parseopt+0xd0>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c746:	f7ff ff95 	bl	800c674 <tcp_get_next_optbyte>
 800c74a:	4603      	mov	r3, r0
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	021b      	lsls	r3, r3, #8
 800c750:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c752:	f7ff ff8f 	bl	800c674 <tcp_get_next_optbyte>
 800c756:	4603      	mov	r3, r0
 800c758:	b29a      	uxth	r2, r3
 800c75a:	89bb      	ldrh	r3, [r7, #12]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c760:	89bb      	ldrh	r3, [r7, #12]
 800c762:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c766:	d804      	bhi.n	800c772 <tcp_parseopt+0x92>
 800c768:	89bb      	ldrh	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <tcp_parseopt+0x92>
 800c76e:	89ba      	ldrh	r2, [r7, #12]
 800c770:	e001      	b.n	800c776 <tcp_parseopt+0x96>
 800c772:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c77a:	e010      	b.n	800c79e <tcp_parseopt+0xbe>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c77c:	f7ff ff7a 	bl	800c674 <tcp_get_next_optbyte>
 800c780:	4603      	mov	r3, r0
 800c782:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c784:	7afb      	ldrb	r3, [r7, #11]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d914      	bls.n	800c7b4 <tcp_parseopt+0xd4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c78a:	7afb      	ldrb	r3, [r7, #11]
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <tcp_parseopt+0xec>)
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	4413      	add	r3, r2
 800c794:	b29b      	uxth	r3, r3
 800c796:	3b02      	subs	r3, #2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <tcp_parseopt+0xec>)
 800c79c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c79e:	4b0b      	ldr	r3, [pc, #44]	; (800c7cc <tcp_parseopt+0xec>)
 800c7a0:	881a      	ldrh	r2, [r3, #0]
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <tcp_parseopt+0xe8>)
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d3b5      	bcc.n	800c716 <tcp_parseopt+0x36>
 800c7aa:	e004      	b.n	800c7b6 <tcp_parseopt+0xd6>
          return;
 800c7ac:	bf00      	nop
 800c7ae:	e002      	b.n	800c7b6 <tcp_parseopt+0xd6>
            return;
 800c7b0:	bf00      	nop
 800c7b2:	e000      	b.n	800c7b6 <tcp_parseopt+0xd6>
            return;
 800c7b4:	bf00      	nop
      }
    }
  }
}
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	0801a584 	.word	0x0801a584
 800c7c0:	0801a9d0 	.word	0x0801a9d0
 800c7c4:	0801a5b8 	.word	0x0801a5b8
 800c7c8:	200002a4 	.word	0x200002a4
 800c7cc:	200002ac 	.word	0x200002ac

0800c7d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c7d4:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <tcp_trigger_input_pcb_close+0x1c>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	f043 0310 	orr.w	r3, r3, #16
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	4b03      	ldr	r3, [pc, #12]	; (800c7ec <tcp_trigger_input_pcb_close+0x1c>)
 800c7e0:	701a      	strb	r2, [r3, #0]
}
 800c7e2:	bf00      	nop
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	200002bd 	.word	0x200002bd

0800c7f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <tcp_route+0x28>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	7a1b      	ldrb	r3, [r3, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d006      	beq.n	800c818 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	7a1b      	ldrb	r3, [r3, #8]
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fa fdc4 	bl	800739c <netif_get_by_index>
 800c814:	4603      	mov	r3, r0
 800c816:	e003      	b.n	800c820 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7f7 ff51 	bl	80046c0 <ip4_route>
 800c81e:	4603      	mov	r3, r0
  }
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c828:	b590      	push	{r4, r7, lr}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	4613      	mov	r3, r2
 800c836:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <tcp_create_segment+0x2c>
 800c83e:	4b51      	ldr	r3, [pc, #324]	; (800c984 <tcp_create_segment+0x15c>)
 800c840:	22a3      	movs	r2, #163	; 0xa3
 800c842:	4951      	ldr	r1, [pc, #324]	; (800c988 <tcp_create_segment+0x160>)
 800c844:	4851      	ldr	r0, [pc, #324]	; (800c98c <tcp_create_segment+0x164>)
 800c846:	f7f4 fd73 	bl	8001330 <iprintf>
 800c84a:	2000      	movs	r0, #0
 800c84c:	f00b fe14 	bl	8018478 <fflush>
 800c850:	f00b fd58 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10a      	bne.n	800c870 <tcp_create_segment+0x48>
 800c85a:	4b4a      	ldr	r3, [pc, #296]	; (800c984 <tcp_create_segment+0x15c>)
 800c85c:	22a4      	movs	r2, #164	; 0xa4
 800c85e:	494c      	ldr	r1, [pc, #304]	; (800c990 <tcp_create_segment+0x168>)
 800c860:	484a      	ldr	r0, [pc, #296]	; (800c98c <tcp_create_segment+0x164>)
 800c862:	f7f4 fd65 	bl	8001330 <iprintf>
 800c866:	2000      	movs	r0, #0
 800c868:	f00b fe06 	bl	8018478 <fflush>
 800c86c:	f00b fd4a 	bl	8018304 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c870:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <tcp_create_segment+0x58>
 800c87c:	2304      	movs	r3, #4
 800c87e:	e000      	b.n	800c882 <tcp_create_segment+0x5a>
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c884:	2003      	movs	r0, #3
 800c886:	f7fa faa3 	bl	8006dd0 <memp_malloc>
 800c88a:	6138      	str	r0, [r7, #16]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d104      	bne.n	800c89c <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c892:	68b8      	ldr	r0, [r7, #8]
 800c894:	f7fb f924 	bl	8007ae0 <pbuf_free>
    return NULL;
 800c898:	2300      	movs	r3, #0
 800c89a:	e06e      	b.n	800c97a <tcp_create_segment+0x152>
  }
  seg->flags = optflags;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c8a2:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	891a      	ldrh	r2, [r3, #8]
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d20a      	bcs.n	800c8d2 <tcp_create_segment+0xaa>
 800c8bc:	4b31      	ldr	r3, [pc, #196]	; (800c984 <tcp_create_segment+0x15c>)
 800c8be:	22b0      	movs	r2, #176	; 0xb0
 800c8c0:	4934      	ldr	r1, [pc, #208]	; (800c994 <tcp_create_segment+0x16c>)
 800c8c2:	4832      	ldr	r0, [pc, #200]	; (800c98c <tcp_create_segment+0x164>)
 800c8c4:	f7f4 fd34 	bl	8001330 <iprintf>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f00b fdd5 	bl	8018478 <fflush>
 800c8ce:	f00b fd19 	bl	8018304 <abort>
  seg->len = p->tot_len - optlen;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	891a      	ldrh	r2, [r3, #8]
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c8e2:	2114      	movs	r1, #20
 800c8e4:	68b8      	ldr	r0, [r7, #8]
 800c8e6:	f7fb f82b 	bl	8007940 <pbuf_add_header>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00c      	beq.n	800c90a <tcp_create_segment+0xe2>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800c8f0:	4b29      	ldr	r3, [pc, #164]	; (800c998 <tcp_create_segment+0x170>)
 800c8f2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	4b27      	ldr	r3, [pc, #156]	; (800c998 <tcp_create_segment+0x170>)
 800c8fc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800c900:	6938      	ldr	r0, [r7, #16]
 800c902:	f7fc fe45 	bl	8009590 <tcp_seg_free>
    return NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	e037      	b.n	800c97a <tcp_create_segment+0x152>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	68dc      	ldr	r4, [r3, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	8adb      	ldrh	r3, [r3, #22]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f9 f995 	bl	8005c4c <lwip_htons>
 800c922:	4603      	mov	r3, r0
 800c924:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	68dc      	ldr	r4, [r3, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	8b1b      	ldrh	r3, [r3, #24]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f9 f98c 	bl	8005c4c <lwip_htons>
 800c934:	4603      	mov	r3, r0
 800c936:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	68dc      	ldr	r4, [r3, #12]
 800c93c:	6838      	ldr	r0, [r7, #0]
 800c93e:	f7f9 f99a 	bl	8005c76 <lwip_htonl>
 800c942:	4603      	mov	r3, r0
 800c944:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	68dc      	ldr	r4, [r3, #12]
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	089b      	lsrs	r3, r3, #2
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	b29b      	uxth	r3, r3
 800c952:	3305      	adds	r3, #5
 800c954:	b29b      	uxth	r3, r3
 800c956:	031b      	lsls	r3, r3, #12
 800c958:	b29a      	uxth	r2, r3
 800c95a:	79fb      	ldrb	r3, [r7, #7]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	4313      	orrs	r3, r2
 800c960:	b29b      	uxth	r3, r3
 800c962:	4618      	mov	r0, r3
 800c964:	f7f9 f972 	bl	8005c4c <lwip_htons>
 800c968:	4603      	mov	r3, r0
 800c96a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	749a      	strb	r2, [r3, #18]
 800c974:	2200      	movs	r2, #0
 800c976:	74da      	strb	r2, [r3, #19]
  return seg;
 800c978:	693b      	ldr	r3, [r7, #16]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd90      	pop	{r4, r7, pc}
 800c982:	bf00      	nop
 800c984:	0801a9ec 	.word	0x0801a9ec
 800c988:	0801aa08 	.word	0x0801aa08
 800c98c:	0801aa28 	.word	0x0801aa28
 800c990:	0801aa50 	.word	0x0801aa50
 800c994:	0801aa74 	.word	0x0801aa74
 800c998:	20016e44 	.word	0x20016e44

0800c99c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	607b      	str	r3, [r7, #4]
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	81bb      	strh	r3, [r7, #12]
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c9b0:	89bb      	ldrh	r3, [r7, #12]
 800c9b2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10a      	bne.n	800c9d0 <tcp_pbuf_prealloc+0x34>
 800c9ba:	4b36      	ldr	r3, [pc, #216]	; (800ca94 <tcp_pbuf_prealloc+0xf8>)
 800c9bc:	22e8      	movs	r2, #232	; 0xe8
 800c9be:	4936      	ldr	r1, [pc, #216]	; (800ca98 <tcp_pbuf_prealloc+0xfc>)
 800c9c0:	4836      	ldr	r0, [pc, #216]	; (800ca9c <tcp_pbuf_prealloc+0x100>)
 800c9c2:	f7f4 fcb5 	bl	8001330 <iprintf>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	f00b fd56 	bl	8018478 <fflush>
 800c9cc:	f00b fc9a 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10a      	bne.n	800c9ec <tcp_pbuf_prealloc+0x50>
 800c9d6:	4b2f      	ldr	r3, [pc, #188]	; (800ca94 <tcp_pbuf_prealloc+0xf8>)
 800c9d8:	22e9      	movs	r2, #233	; 0xe9
 800c9da:	4931      	ldr	r1, [pc, #196]	; (800caa0 <tcp_pbuf_prealloc+0x104>)
 800c9dc:	482f      	ldr	r0, [pc, #188]	; (800ca9c <tcp_pbuf_prealloc+0x100>)
 800c9de:	f7f4 fca7 	bl	8001330 <iprintf>
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	f00b fd48 	bl	8018478 <fflush>
 800c9e8:	f00b fc8c 	bl	8018304 <abort>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c9ec:	89ba      	ldrh	r2, [r7, #12]
 800c9ee:	897b      	ldrh	r3, [r7, #10]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d21f      	bcs.n	800ca34 <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c9f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d111      	bne.n	800ca24 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	8b5b      	ldrh	r3, [r3, #26]
 800ca04:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d113      	bne.n	800ca34 <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 800ca0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d007      	beq.n	800ca24 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <tcp_pbuf_prealloc+0x88>
          pcb->unacked != NULL))) {
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d007      	beq.n	800ca34 <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ca24:	89bb      	ldrh	r3, [r7, #12]
 800ca26:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800ca2a:	897b      	ldrh	r3, [r7, #10]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bf28      	it	cs
 800ca30:	4613      	movcs	r3, r2
 800ca32:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ca34:	8af9      	ldrh	r1, [r7, #22]
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
 800ca38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7fa fd57 	bl	80074f0 <pbuf_alloc>
 800ca42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <tcp_pbuf_prealloc+0xb2>
    return NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e01e      	b.n	800ca8c <tcp_pbuf_prealloc+0xf0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00b      	beq.n	800ca6e <tcp_pbuf_prealloc+0xd2>
 800ca56:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <tcp_pbuf_prealloc+0xf8>)
 800ca58:	f240 120b 	movw	r2, #267	; 0x10b
 800ca5c:	4911      	ldr	r1, [pc, #68]	; (800caa4 <tcp_pbuf_prealloc+0x108>)
 800ca5e:	480f      	ldr	r0, [pc, #60]	; (800ca9c <tcp_pbuf_prealloc+0x100>)
 800ca60:	f7f4 fc66 	bl	8001330 <iprintf>
 800ca64:	2000      	movs	r0, #0
 800ca66:	f00b fd07 	bl	8018478 <fflush>
 800ca6a:	f00b fc4b 	bl	8018304 <abort>
  *oversize = p->len - length;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	895a      	ldrh	r2, [r3, #10]
 800ca72:	89bb      	ldrh	r3, [r7, #12]
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	89ba      	ldrh	r2, [r7, #12]
 800ca80:	811a      	strh	r2, [r3, #8]
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	891a      	ldrh	r2, [r3, #8]
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	815a      	strh	r2, [r3, #10]
  return p;
 800ca8a:	693b      	ldr	r3, [r7, #16]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	0801a9ec 	.word	0x0801a9ec
 800ca98:	0801aa8c 	.word	0x0801aa8c
 800ca9c:	0801aa28 	.word	0x0801aa28
 800caa0:	0801aab0 	.word	0x0801aab0
 800caa4:	0801aad0 	.word	0x0801aad0

0800caa8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10b      	bne.n	800cad2 <tcp_write_checks+0x2a>
 800caba:	4b3e      	ldr	r3, [pc, #248]	; (800cbb4 <tcp_write_checks+0x10c>)
 800cabc:	f240 1233 	movw	r2, #307	; 0x133
 800cac0:	493d      	ldr	r1, [pc, #244]	; (800cbb8 <tcp_write_checks+0x110>)
 800cac2:	483e      	ldr	r0, [pc, #248]	; (800cbbc <tcp_write_checks+0x114>)
 800cac4:	f7f4 fc34 	bl	8001330 <iprintf>
 800cac8:	2000      	movs	r0, #0
 800caca:	f00b fcd5 	bl	8018478 <fflush>
 800cace:	f00b fc19 	bl	8018304 <abort>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7d1b      	ldrb	r3, [r3, #20]
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	d00e      	beq.n	800caf8 <tcp_write_checks+0x50>
      (pcb->state != CLOSE_WAIT) &&
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cade:	2b07      	cmp	r3, #7
 800cae0:	d00a      	beq.n	800caf8 <tcp_write_checks+0x50>
      (pcb->state != SYN_SENT) &&
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d006      	beq.n	800caf8 <tcp_write_checks+0x50>
      (pcb->state != SYN_RCVD)) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800caee:	2b03      	cmp	r3, #3
 800caf0:	d002      	beq.n	800caf8 <tcp_write_checks+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800caf2:	f06f 030a 	mvn.w	r3, #10
 800caf6:	e059      	b.n	800cbac <tcp_write_checks+0x104>
  } else if (len == 0) {
 800caf8:	887b      	ldrh	r3, [r7, #2]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <tcp_write_checks+0x5a>
    return ERR_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	e054      	b.n	800cbac <tcp_write_checks+0x104>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb08:	887a      	ldrh	r2, [r7, #2]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d909      	bls.n	800cb22 <tcp_write_checks+0x7a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8b5b      	ldrh	r3, [r3, #26]
 800cb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb20:	e044      	b.n	800cbac <tcp_write_checks+0x104>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb28:	2b07      	cmp	r3, #7
 800cb2a:	d911      	bls.n	800cb50 <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800cb2c:	4b24      	ldr	r3, [pc, #144]	; (800cbc0 <tcp_write_checks+0x118>)
 800cb2e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cb32:	3301      	adds	r3, #1
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	4b22      	ldr	r3, [pc, #136]	; (800cbc0 <tcp_write_checks+0x118>)
 800cb38:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	8b5b      	ldrh	r3, [r3, #26]
 800cb40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4e:	e02d      	b.n	800cbac <tcp_write_checks+0x104>
  }
  if (pcb->snd_queuelen != 0) {
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d013      	beq.n	800cb82 <tcp_write_checks+0xda>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d123      	bne.n	800cbaa <tcp_write_checks+0x102>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d11f      	bne.n	800cbaa <tcp_write_checks+0x102>
 800cb6a:	4b12      	ldr	r3, [pc, #72]	; (800cbb4 <tcp_write_checks+0x10c>)
 800cb6c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800cb70:	4914      	ldr	r1, [pc, #80]	; (800cbc4 <tcp_write_checks+0x11c>)
 800cb72:	4812      	ldr	r0, [pc, #72]	; (800cbbc <tcp_write_checks+0x114>)
 800cb74:	f7f4 fbdc 	bl	8001330 <iprintf>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	f00b fc7d 	bl	8018478 <fflush>
 800cb7e:	f00b fbc1 	bl	8018304 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d103      	bne.n	800cb92 <tcp_write_checks+0xea>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <tcp_write_checks+0x102>
 800cb92:	4b08      	ldr	r3, [pc, #32]	; (800cbb4 <tcp_write_checks+0x10c>)
 800cb94:	f240 1259 	movw	r2, #345	; 0x159
 800cb98:	490b      	ldr	r1, [pc, #44]	; (800cbc8 <tcp_write_checks+0x120>)
 800cb9a:	4808      	ldr	r0, [pc, #32]	; (800cbbc <tcp_write_checks+0x114>)
 800cb9c:	f7f4 fbc8 	bl	8001330 <iprintf>
 800cba0:	2000      	movs	r0, #0
 800cba2:	f00b fc69 	bl	8018478 <fflush>
 800cba6:	f00b fbad 	bl	8018304 <abort>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	0801a9ec 	.word	0x0801a9ec
 800cbb8:	0801aae4 	.word	0x0801aae4
 800cbbc:	0801aa28 	.word	0x0801aa28
 800cbc0:	20016e44 	.word	0x20016e44
 800cbc4:	0801ab04 	.word	0x0801ab04
 800cbc8:	0801ab40 	.word	0x0801ab40

0800cbcc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cbcc:	b5b0      	push	{r4, r5, r7, lr}
 800cbce:	b09a      	sub	sp, #104	; 0x68
 800cbd0:	af04      	add	r7, sp, #16
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	461a      	mov	r2, r3
 800cbda:	460b      	mov	r3, r1
 800cbdc:	80fb      	strh	r3, [r7, #6]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	653b      	str	r3, [r7, #80]	; 0x50
 800cbea:	2300      	movs	r3, #0
 800cbec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbee:	2300      	movs	r3, #0
 800cbf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10b      	bne.n	800cc2c <tcp_write+0x60>
 800cc14:	4bab      	ldr	r3, [pc, #684]	; (800cec4 <tcp_write+0x2f8>)
 800cc16:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800cc1a:	49ab      	ldr	r1, [pc, #684]	; (800cec8 <tcp_write+0x2fc>)
 800cc1c:	48ab      	ldr	r0, [pc, #684]	; (800cecc <tcp_write+0x300>)
 800cc1e:	f7f4 fb87 	bl	8001330 <iprintf>
 800cc22:	2000      	movs	r0, #0
 800cc24:	f00b fc28 	bl	8018478 <fflush>
 800cc28:	f00b fb6c 	bl	8018304 <abort>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc32:	085b      	lsrs	r3, r3, #1
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	bf28      	it	cs
 800cc3e:	4613      	movcs	r3, r2
 800cc40:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cc42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d102      	bne.n	800cc4e <tcp_write+0x82>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc4c:	e000      	b.n	800cc50 <tcp_write+0x84>
 800cc4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc50:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10b      	bne.n	800cc70 <tcp_write+0xa4>
 800cc58:	4b9a      	ldr	r3, [pc, #616]	; (800cec4 <tcp_write+0x2f8>)
 800cc5a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800cc5e:	499c      	ldr	r1, [pc, #624]	; (800ced0 <tcp_write+0x304>)
 800cc60:	489a      	ldr	r0, [pc, #616]	; (800cecc <tcp_write+0x300>)
 800cc62:	f7f4 fb65 	bl	8001330 <iprintf>
 800cc66:	2000      	movs	r0, #0
 800cc68:	f00b fc06 	bl	8018478 <fflush>
 800cc6c:	f00b fb4a 	bl	8018304 <abort>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800cc70:	88fb      	ldrh	r3, [r7, #6]
 800cc72:	4619      	mov	r1, r3
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f7ff ff17 	bl	800caa8 <tcp_write_checks>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800cc80:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <tcp_write+0xc2>
    return err;
 800cc88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cc8c:	e342      	b.n	800d314 <tcp_write+0x748>
  }
  queuelen = pcb->snd_queuelen;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 811e 	beq.w	800cee4 <tcp_write+0x318>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccac:	653b      	str	r3, [r7, #80]	; 0x50
 800ccae:	e002      	b.n	800ccb6 <tcp_write+0xea>
         last_unsent = last_unsent->next);
 800ccb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f8      	bne.n	800ccb0 <tcp_write+0xe4>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ccbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc0:	7a9b      	ldrb	r3, [r3, #10]
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <tcp_write+0x102>
 800ccca:	2304      	movs	r3, #4
 800cccc:	e000      	b.n	800ccd0 <tcp_write+0x104>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ccd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ccd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd6:	891b      	ldrh	r3, [r3, #8]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	8c3b      	ldrh	r3, [r7, #32]
 800ccdc:	440b      	add	r3, r1
 800ccde:	429a      	cmp	r2, r3
 800cce0:	da0b      	bge.n	800ccfa <tcp_write+0x12e>
 800cce2:	4b78      	ldr	r3, [pc, #480]	; (800cec4 <tcp_write+0x2f8>)
 800cce4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cce8:	497a      	ldr	r1, [pc, #488]	; (800ced4 <tcp_write+0x308>)
 800ccea:	4878      	ldr	r0, [pc, #480]	; (800cecc <tcp_write+0x300>)
 800ccec:	f7f4 fb20 	bl	8001330 <iprintf>
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	f00b fbc1 	bl	8018478 <fflush>
 800ccf6:	f00b fb05 	bl	8018304 <abort>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ccfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccfc:	891a      	ldrh	r2, [r3, #8]
 800ccfe:	8c3b      	ldrh	r3, [r7, #32]
 800cd00:	4413      	add	r3, r2
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd10:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800cd12:	8a7b      	ldrh	r3, [r7, #18]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d02c      	beq.n	800cd72 <tcp_write+0x1a6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cd18:	8a7b      	ldrh	r3, [r7, #18]
 800cd1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d20b      	bcs.n	800cd38 <tcp_write+0x16c>
 800cd20:	4b68      	ldr	r3, [pc, #416]	; (800cec4 <tcp_write+0x2f8>)
 800cd22:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800cd26:	496c      	ldr	r1, [pc, #432]	; (800ced8 <tcp_write+0x30c>)
 800cd28:	4868      	ldr	r0, [pc, #416]	; (800cecc <tcp_write+0x300>)
 800cd2a:	f7f4 fb01 	bl	8001330 <iprintf>
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f00b fba2 	bl	8018478 <fflush>
 800cd34:	f00b fae6 	bl	8018304 <abort>
      seg = last_unsent;
 800cd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cd3c:	8a7b      	ldrh	r3, [r7, #18]
 800cd3e:	88fa      	ldrh	r2, [r7, #6]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d901      	bls.n	800cd48 <tcp_write+0x17c>
 800cd44:	8a7b      	ldrh	r3, [r7, #18]
 800cd46:	e000      	b.n	800cd4a <tcp_write+0x17e>
 800cd48:	88fb      	ldrh	r3, [r7, #6]
 800cd4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	bfa8      	it	ge
 800cd50:	4613      	movge	r3, r2
 800cd52:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800cd54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800cd60:	8a7a      	ldrh	r2, [r7, #18]
 800cd62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800cd6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cd72:	8a7b      	ldrh	r3, [r7, #18]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d010      	beq.n	800cd9a <tcp_write+0x1ce>
 800cd78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d00b      	beq.n	800cd9a <tcp_write+0x1ce>
 800cd82:	4b50      	ldr	r3, [pc, #320]	; (800cec4 <tcp_write+0x2f8>)
 800cd84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd88:	4954      	ldr	r1, [pc, #336]	; (800cedc <tcp_write+0x310>)
 800cd8a:	4850      	ldr	r0, [pc, #320]	; (800cecc <tcp_write+0x300>)
 800cd8c:	f7f4 fad0 	bl	8001330 <iprintf>
 800cd90:	2000      	movs	r0, #0
 800cd92:	f00b fb71 	bl	8018478 <fflush>
 800cd96:	f00b fab5 	bl	8018304 <abort>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cd9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd9e:	88fb      	ldrh	r3, [r7, #6]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	f080 817d 	bcs.w	800d0a0 <tcp_write+0x4d4>
 800cda6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f000 8179 	beq.w	800d0a0 <tcp_write+0x4d4>
 800cdae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdb0:	891b      	ldrh	r3, [r3, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 8174 	beq.w	800d0a0 <tcp_write+0x4d4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cdb8:	88fa      	ldrh	r2, [r7, #6]
 800cdba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdbe:	1ad2      	subs	r2, r2, r3
 800cdc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	bfa8      	it	ge
 800cdc6:	4613      	movge	r3, r2
 800cdc8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800cdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdcc:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cdce:	797b      	ldrb	r3, [r7, #5]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d027      	beq.n	800ce28 <tcp_write+0x25c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cdd8:	f107 0012 	add.w	r0, r7, #18
 800cddc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cdde:	8bf9      	ldrh	r1, [r7, #30]
 800cde0:	2301      	movs	r3, #1
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	797b      	ldrb	r3, [r7, #5]
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	4603      	mov	r3, r0
 800cdee:	2000      	movs	r0, #0
 800cdf0:	f7ff fdd4 	bl	800c99c <tcp_pbuf_prealloc>
 800cdf4:	6578      	str	r0, [r7, #84]	; 0x54
 800cdf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 824c 	beq.w	800d296 <tcp_write+0x6ca>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cdfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce00:	6858      	ldr	r0, [r3, #4]
 800ce02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	4413      	add	r3, r2
 800ce0a:	8bfa      	ldrh	r2, [r7, #30]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	f00b fc42 	bl	8018696 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ce12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce14:	f7fa ff06 	bl	8007c24 <pbuf_clen>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce20:	4413      	add	r3, r2
 800ce22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ce26:	e046      	b.n	800ceb6 <tcp_write+0x2ea>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ce28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce2e:	e002      	b.n	800ce36 <tcp_write+0x26a>
 800ce30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
 800ce36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1f8      	bne.n	800ce30 <tcp_write+0x264>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce40:	7b1b      	ldrb	r3, [r3, #12]
 800ce42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d11a      	bne.n	800ce80 <tcp_write+0x2b4>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ce4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce50:	8952      	ldrh	r2, [r2, #10]
 800ce52:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d112      	bne.n	800ce80 <tcp_write+0x2b4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ce5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00b      	beq.n	800ce7a <tcp_write+0x2ae>
 800ce62:	4b18      	ldr	r3, [pc, #96]	; (800cec4 <tcp_write+0x2f8>)
 800ce64:	f240 2231 	movw	r2, #561	; 0x231
 800ce68:	491d      	ldr	r1, [pc, #116]	; (800cee0 <tcp_write+0x314>)
 800ce6a:	4818      	ldr	r0, [pc, #96]	; (800cecc <tcp_write+0x300>)
 800ce6c:	f7f4 fa60 	bl	8001330 <iprintf>
 800ce70:	2000      	movs	r0, #0
 800ce72:	f00b fb01 	bl	8018478 <fflush>
 800ce76:	f00b fa45 	bl	8018304 <abort>
          extendlen = seglen;
 800ce7a:	8bfb      	ldrh	r3, [r7, #30]
 800ce7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ce7e:	e01a      	b.n	800ceb6 <tcp_write+0x2ea>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ce80:	8bfb      	ldrh	r3, [r7, #30]
 800ce82:	2201      	movs	r2, #1
 800ce84:	4619      	mov	r1, r3
 800ce86:	2000      	movs	r0, #0
 800ce88:	f7fa fb32 	bl	80074f0 <pbuf_alloc>
 800ce8c:	6578      	str	r0, [r7, #84]	; 0x54
 800ce8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 8202 	beq.w	800d29a <tcp_write+0x6ce>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ce96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	441a      	add	r2, r3
 800ce9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cea0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800cea2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cea4:	f7fa febe 	bl	8007c24 <pbuf_clen>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ceb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ceba:	8bfb      	ldrh	r3, [r7, #30]
 800cebc:	4413      	add	r3, r2
 800cebe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cec2:	e0ed      	b.n	800d0a0 <tcp_write+0x4d4>
 800cec4:	0801a9ec 	.word	0x0801a9ec
 800cec8:	0801ab74 	.word	0x0801ab74
 800cecc:	0801aa28 	.word	0x0801aa28
 800ced0:	0801ab8c 	.word	0x0801ab8c
 800ced4:	0801abc0 	.word	0x0801abc0
 800ced8:	0801abd8 	.word	0x0801abd8
 800cedc:	0801abf8 	.word	0x0801abf8
 800cee0:	0801ac18 	.word	0x0801ac18
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 80d8 	beq.w	800d0a0 <tcp_write+0x4d4>
 800cef0:	4ba6      	ldr	r3, [pc, #664]	; (800d18c <tcp_write+0x5c0>)
 800cef2:	f240 224b 	movw	r2, #587	; 0x24b
 800cef6:	49a6      	ldr	r1, [pc, #664]	; (800d190 <tcp_write+0x5c4>)
 800cef8:	48a6      	ldr	r0, [pc, #664]	; (800d194 <tcp_write+0x5c8>)
 800cefa:	f7f4 fa19 	bl	8001330 <iprintf>
 800cefe:	2000      	movs	r0, #0
 800cf00:	f00b faba 	bl	8018478 <fflush>
 800cf04:	f00b f9fe 	bl	8018304 <abort>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 800cf08:	88fa      	ldrh	r2, [r7, #6]
 800cf0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800cf12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cf1e:	8b7a      	ldrh	r2, [r7, #26]
 800cf20:	8bbb      	ldrh	r3, [r7, #28]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	bf28      	it	cs
 800cf26:	4613      	movcs	r3, r2
 800cf28:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf2a:	797b      	ldrb	r3, [r7, #5]
 800cf2c:	f003 0301 	and.w	r3, r3, #1
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d03b      	beq.n	800cfac <tcp_write+0x3e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cf34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	8b3b      	ldrh	r3, [r7, #24]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	b299      	uxth	r1, r3
 800cf40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bf0c      	ite	eq
 800cf46:	2301      	moveq	r3, #1
 800cf48:	2300      	movne	r3, #0
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	f107 0012 	add.w	r0, r7, #18
 800cf50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf52:	9302      	str	r3, [sp, #8]
 800cf54:	797b      	ldrb	r3, [r7, #5]
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2036      	movs	r0, #54	; 0x36
 800cf60:	f7ff fd1c 	bl	800c99c <tcp_pbuf_prealloc>
 800cf64:	6338      	str	r0, [r7, #48]	; 0x30
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 8198 	beq.w	800d29e <tcp_write+0x6d2>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	895b      	ldrh	r3, [r3, #10]
 800cf72:	8b3a      	ldrh	r2, [r7, #24]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d90b      	bls.n	800cf90 <tcp_write+0x3c4>
 800cf78:	4b84      	ldr	r3, [pc, #528]	; (800d18c <tcp_write+0x5c0>)
 800cf7a:	f240 2267 	movw	r2, #615	; 0x267
 800cf7e:	4986      	ldr	r1, [pc, #536]	; (800d198 <tcp_write+0x5cc>)
 800cf80:	4884      	ldr	r0, [pc, #528]	; (800d194 <tcp_write+0x5c8>)
 800cf82:	f7f4 f9d5 	bl	8001330 <iprintf>
 800cf86:	2000      	movs	r0, #0
 800cf88:	f00b fa76 	bl	8018478 <fflush>
 800cf8c:	f00b f9ba 	bl	8018304 <abort>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf98:	18d0      	adds	r0, r2, r3
 800cf9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	8b3a      	ldrh	r2, [r7, #24]
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	f00b fb76 	bl	8018696 <memcpy>
 800cfaa:	e034      	b.n	800d016 <tcp_write+0x44a>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cfac:	8a7b      	ldrh	r3, [r7, #18]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <tcp_write+0x3fe>
 800cfb2:	4b76      	ldr	r3, [pc, #472]	; (800d18c <tcp_write+0x5c0>)
 800cfb4:	f240 2271 	movw	r2, #625	; 0x271
 800cfb8:	4978      	ldr	r1, [pc, #480]	; (800d19c <tcp_write+0x5d0>)
 800cfba:	4876      	ldr	r0, [pc, #472]	; (800d194 <tcp_write+0x5c8>)
 800cfbc:	f7f4 f9b8 	bl	8001330 <iprintf>
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	f00b fa59 	bl	8018478 <fflush>
 800cfc6:	f00b f99d 	bl	8018304 <abort>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cfca:	8b3b      	ldrh	r3, [r7, #24]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	4619      	mov	r1, r3
 800cfd0:	2036      	movs	r0, #54	; 0x36
 800cfd2:	f7fa fa8d 	bl	80074f0 <pbuf_alloc>
 800cfd6:	6178      	str	r0, [r7, #20]
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f000 8161 	beq.w	800d2a2 <tcp_write+0x6d6>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cfe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	441a      	add	r2, r3
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cfec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cff6:	4619      	mov	r1, r3
 800cff8:	2036      	movs	r0, #54	; 0x36
 800cffa:	f7fa fa79 	bl	80074f0 <pbuf_alloc>
 800cffe:	6338      	str	r0, [r7, #48]	; 0x30
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	2b00      	cmp	r3, #0
 800d004:	d103      	bne.n	800d00e <tcp_write+0x442>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d006:	6978      	ldr	r0, [r7, #20]
 800d008:	f7fa fd6a 	bl	8007ae0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d00c:	e14c      	b.n	800d2a8 <tcp_write+0x6dc>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d00e:	6979      	ldr	r1, [r7, #20]
 800d010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d012:	f7fa fe4d 	bl	8007cb0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d018:	f7fa fe04 	bl	8007c24 <pbuf_clen>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d024:	4413      	add	r3, r2
 800d026:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d02a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d02e:	2b08      	cmp	r3, #8
 800d030:	d903      	bls.n	800d03a <tcp_write+0x46e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d034:	f7fa fd54 	bl	8007ae0 <pbuf_free>
      goto memerr;
 800d038:	e136      	b.n	800d2a8 <tcp_write+0x6dc>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d03e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d042:	441a      	add	r2, r3
 800d044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	4613      	mov	r3, r2
 800d04c:	2200      	movs	r2, #0
 800d04e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f7ff fbe9 	bl	800c828 <tcp_create_segment>
 800d056:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 8123 	beq.w	800d2a6 <tcp_write+0x6da>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <tcp_write+0x4a0>
      queue = seg;
 800d066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d068:	647b      	str	r3, [r7, #68]	; 0x44
 800d06a:	e011      	b.n	800d090 <tcp_write+0x4c4>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10b      	bne.n	800d08a <tcp_write+0x4be>
 800d072:	4b46      	ldr	r3, [pc, #280]	; (800d18c <tcp_write+0x5c0>)
 800d074:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d078:	4949      	ldr	r1, [pc, #292]	; (800d1a0 <tcp_write+0x5d4>)
 800d07a:	4846      	ldr	r0, [pc, #280]	; (800d194 <tcp_write+0x5c8>)
 800d07c:	f7f4 f958 	bl	8001330 <iprintf>
 800d080:	2000      	movs	r0, #0
 800d082:	f00b f9f9 	bl	8018478 <fflush>
 800d086:	f00b f93d 	bl	8018304 <abort>
      prev_seg->next = seg;
 800d08a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d08c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d08e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d092:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d094:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d098:	8b3b      	ldrh	r3, [r7, #24]
 800d09a:	4413      	add	r3, r2
 800d09c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d0a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d0a4:	88fb      	ldrh	r3, [r7, #6]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	f4ff af2e 	bcc.w	800cf08 <tcp_write+0x33c>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d0ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d02c      	beq.n	800d10c <tcp_write+0x540>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0b8:	e01e      	b.n	800d0f8 <tcp_write+0x52c>
      p->tot_len += oversize_used;
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	891a      	ldrh	r2, [r3, #8]
 800d0be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0c0:	4413      	add	r3, r2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d110      	bne.n	800d0f2 <tcp_write+0x526>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0d6:	8952      	ldrh	r2, [r2, #10]
 800d0d8:	4413      	add	r3, r2
 800d0da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d0dc:	68b9      	ldr	r1, [r7, #8]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f00b fad9 	bl	8018696 <memcpy>
        p->len += oversize_used;
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	895a      	ldrh	r2, [r3, #10]
 800d0e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0ea:	4413      	add	r3, r2
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1dd      	bne.n	800d0ba <tcp_write+0x4ee>
      }
    }
    last_unsent->len += oversize_used;
 800d0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d100:	891a      	ldrh	r2, [r3, #8]
 800d102:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d104:	4413      	add	r3, r2
 800d106:	b29a      	uxth	r2, r3
 800d108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d10a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d10c:	8a7a      	ldrh	r2, [r7, #18]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d116:	2b00      	cmp	r3, #0
 800d118:	d01d      	beq.n	800d156 <tcp_write+0x58a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d11a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10b      	bne.n	800d138 <tcp_write+0x56c>
 800d120:	4b1a      	ldr	r3, [pc, #104]	; (800d18c <tcp_write+0x5c0>)
 800d122:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d126:	491f      	ldr	r1, [pc, #124]	; (800d1a4 <tcp_write+0x5d8>)
 800d128:	481a      	ldr	r0, [pc, #104]	; (800d194 <tcp_write+0x5c8>)
 800d12a:	f7f4 f901 	bl	8001330 <iprintf>
 800d12e:	2000      	movs	r0, #0
 800d130:	f00b f9a2 	bl	8018478 <fflush>
 800d134:	f00b f8e6 	bl	8018304 <abort>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fa fdb6 	bl	8007cb0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d146:	891a      	ldrh	r2, [r3, #8]
 800d148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d14a:	891b      	ldrh	r3, [r3, #8]
 800d14c:	4413      	add	r3, r2
 800d14e:	b29a      	uxth	r2, r3
 800d150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d152:	811a      	strh	r2, [r3, #8]
 800d154:	e04d      	b.n	800d1f2 <tcp_write+0x626>
  } else if (extendlen > 0) {
 800d156:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d04a      	beq.n	800d1f2 <tcp_write+0x626>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <tcp_write+0x59e>
 800d162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10b      	bne.n	800d182 <tcp_write+0x5b6>
 800d16a:	4b08      	ldr	r3, [pc, #32]	; (800d18c <tcp_write+0x5c0>)
 800d16c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d170:	490d      	ldr	r1, [pc, #52]	; (800d1a8 <tcp_write+0x5dc>)
 800d172:	4808      	ldr	r0, [pc, #32]	; (800d194 <tcp_write+0x5c8>)
 800d174:	f7f4 f8dc 	bl	8001330 <iprintf>
 800d178:	2000      	movs	r0, #0
 800d17a:	f00b f97d 	bl	8018478 <fflush>
 800d17e:	f00b f8c1 	bl	8018304 <abort>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	62bb      	str	r3, [r7, #40]	; 0x28
 800d188:	e01a      	b.n	800d1c0 <tcp_write+0x5f4>
 800d18a:	bf00      	nop
 800d18c:	0801a9ec 	.word	0x0801a9ec
 800d190:	0801ac44 	.word	0x0801ac44
 800d194:	0801aa28 	.word	0x0801aa28
 800d198:	0801ac74 	.word	0x0801ac74
 800d19c:	0801acb4 	.word	0x0801acb4
 800d1a0:	0801acc4 	.word	0x0801acc4
 800d1a4:	0801acd8 	.word	0x0801acd8
 800d1a8:	0801ad10 	.word	0x0801ad10
      p->tot_len += extendlen;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	891a      	ldrh	r2, [r3, #8]
 800d1b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1b2:	4413      	add	r3, r2
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1f1      	bne.n	800d1ac <tcp_write+0x5e0>
    }
    p->tot_len += extendlen;
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	891a      	ldrh	r2, [r3, #8]
 800d1cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1ce:	4413      	add	r3, r2
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	895a      	ldrh	r2, [r3, #10]
 800d1da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1dc:	4413      	add	r3, r2
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d1e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1e6:	891a      	ldrh	r2, [r3, #8]
 800d1e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1ea:	4413      	add	r3, r2
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <tcp_write+0x634>
    pcb->unsent = queue;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800d1fe:	e002      	b.n	800d206 <tcp_write+0x63a>
  } else {
    last_unsent->next = queue;
 800d200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d204:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	441a      	add	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d22a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d234:	2b00      	cmp	r3, #0
 800d236:	d013      	beq.n	800d260 <tcp_write+0x694>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10f      	bne.n	800d260 <tcp_write+0x694>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10b      	bne.n	800d260 <tcp_write+0x694>
 800d248:	4b34      	ldr	r3, [pc, #208]	; (800d31c <tcp_write+0x750>)
 800d24a:	f240 3213 	movw	r2, #787	; 0x313
 800d24e:	4934      	ldr	r1, [pc, #208]	; (800d320 <tcp_write+0x754>)
 800d250:	4834      	ldr	r0, [pc, #208]	; (800d324 <tcp_write+0x758>)
 800d252:	f7f4 f86d 	bl	8001330 <iprintf>
 800d256:	2000      	movs	r0, #0
 800d258:	f00b f90e 	bl	8018478 <fflush>
 800d25c:	f00b f852 	bl	8018304 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d262:	2b00      	cmp	r3, #0
 800d264:	d015      	beq.n	800d292 <tcp_write+0x6c6>
 800d266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d011      	beq.n	800d292 <tcp_write+0x6c6>
 800d26e:	797b      	ldrb	r3, [r7, #5]
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10c      	bne.n	800d292 <tcp_write+0x6c6>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27a:	68dc      	ldr	r4, [r3, #12]
 800d27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	899b      	ldrh	r3, [r3, #12]
 800d282:	b29d      	uxth	r5, r3
 800d284:	2008      	movs	r0, #8
 800d286:	f7f8 fce1 	bl	8005c4c <lwip_htons>
 800d28a:	4603      	mov	r3, r0
 800d28c:	432b      	orrs	r3, r5
 800d28e:	b29b      	uxth	r3, r3
 800d290:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	e03e      	b.n	800d314 <tcp_write+0x748>
          goto memerr;
 800d296:	bf00      	nop
 800d298:	e006      	b.n	800d2a8 <tcp_write+0x6dc>
            goto memerr;
 800d29a:	bf00      	nop
 800d29c:	e004      	b.n	800d2a8 <tcp_write+0x6dc>
        goto memerr;
 800d29e:	bf00      	nop
 800d2a0:	e002      	b.n	800d2a8 <tcp_write+0x6dc>
        goto memerr;
 800d2a2:	bf00      	nop
 800d2a4:	e000      	b.n	800d2a8 <tcp_write+0x6dc>
      goto memerr;
 800d2a6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	8b5b      	ldrh	r3, [r3, #26]
 800d2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800d2b6:	4b1c      	ldr	r3, [pc, #112]	; (800d328 <tcp_write+0x75c>)
 800d2b8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d2bc:	3301      	adds	r3, #1
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	4b19      	ldr	r3, [pc, #100]	; (800d328 <tcp_write+0x75c>)
 800d2c2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 800d2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <tcp_write+0x706>
    pbuf_free(concat_p);
 800d2cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d2ce:	f7fa fc07 	bl	8007ae0 <pbuf_free>
  }
  if (queue != NULL) {
 800d2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <tcp_write+0x712>
    tcp_segs_free(queue);
 800d2d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d2da:	f7fc f945 	bl	8009568 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d013      	beq.n	800d310 <tcp_write+0x744>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10f      	bne.n	800d310 <tcp_write+0x744>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10b      	bne.n	800d310 <tcp_write+0x744>
 800d2f8:	4b08      	ldr	r3, [pc, #32]	; (800d31c <tcp_write+0x750>)
 800d2fa:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d2fe:	4908      	ldr	r1, [pc, #32]	; (800d320 <tcp_write+0x754>)
 800d300:	4808      	ldr	r0, [pc, #32]	; (800d324 <tcp_write+0x758>)
 800d302:	f7f4 f815 	bl	8001330 <iprintf>
 800d306:	2000      	movs	r0, #0
 800d308:	f00b f8b6 	bl	8018478 <fflush>
 800d30c:	f00a fffa 	bl	8018304 <abort>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d310:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d314:	4618      	mov	r0, r3
 800d316:	3758      	adds	r7, #88	; 0x58
 800d318:	46bd      	mov	sp, r7
 800d31a:	bdb0      	pop	{r4, r5, r7, pc}
 800d31c:	0801a9ec 	.word	0x0801a9ec
 800d320:	0801ad48 	.word	0x0801ad48
 800d324:	0801aa28 	.word	0x0801aa28
 800d328:	20016e44 	.word	0x20016e44

0800d32c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d32c:	b5b0      	push	{r4, r5, r7, lr}
 800d32e:	b08a      	sub	sp, #40	; 0x28
 800d330:	af02      	add	r7, sp, #8
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d338:	2300      	movs	r3, #0
 800d33a:	61fb      	str	r3, [r7, #28]
 800d33c:	2300      	movs	r3, #0
 800d33e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d340:	2300      	movs	r3, #0
 800d342:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10b      	bne.n	800d362 <tcp_split_unsent_seg+0x36>
 800d34a:	4ba5      	ldr	r3, [pc, #660]	; (800d5e0 <tcp_split_unsent_seg+0x2b4>)
 800d34c:	f240 324b 	movw	r2, #843	; 0x34b
 800d350:	49a4      	ldr	r1, [pc, #656]	; (800d5e4 <tcp_split_unsent_seg+0x2b8>)
 800d352:	48a5      	ldr	r0, [pc, #660]	; (800d5e8 <tcp_split_unsent_seg+0x2bc>)
 800d354:	f7f3 ffec 	bl	8001330 <iprintf>
 800d358:	2000      	movs	r0, #0
 800d35a:	f00b f88d 	bl	8018478 <fflush>
 800d35e:	f00a ffd1 	bl	8018304 <abort>

  useg = pcb->unsent;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d366:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d102      	bne.n	800d374 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800d36e:	f04f 33ff 	mov.w	r3, #4294967295
 800d372:	e131      	b.n	800d5d8 <tcp_split_unsent_seg+0x2ac>
  }

  if (split == 0) {
 800d374:	887b      	ldrh	r3, [r7, #2]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d37a:	4b99      	ldr	r3, [pc, #612]	; (800d5e0 <tcp_split_unsent_seg+0x2b4>)
 800d37c:	f240 3253 	movw	r2, #851	; 0x353
 800d380:	499a      	ldr	r1, [pc, #616]	; (800d5ec <tcp_split_unsent_seg+0x2c0>)
 800d382:	4899      	ldr	r0, [pc, #612]	; (800d5e8 <tcp_split_unsent_seg+0x2bc>)
 800d384:	f7f3 ffd4 	bl	8001330 <iprintf>
 800d388:	2000      	movs	r0, #0
 800d38a:	f00b f875 	bl	8018478 <fflush>
 800d38e:	f00a ffb9 	bl	8018304 <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	891b      	ldrh	r3, [r3, #8]
 800d396:	887a      	ldrh	r2, [r7, #2]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d301      	bcc.n	800d3a0 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	e11b      	b.n	800d5d8 <tcp_split_unsent_seg+0x2ac>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3a4:	887a      	ldrh	r2, [r7, #2]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d90b      	bls.n	800d3c2 <tcp_split_unsent_seg+0x96>
 800d3aa:	4b8d      	ldr	r3, [pc, #564]	; (800d5e0 <tcp_split_unsent_seg+0x2b4>)
 800d3ac:	f240 325b 	movw	r2, #859	; 0x35b
 800d3b0:	498f      	ldr	r1, [pc, #572]	; (800d5f0 <tcp_split_unsent_seg+0x2c4>)
 800d3b2:	488d      	ldr	r0, [pc, #564]	; (800d5e8 <tcp_split_unsent_seg+0x2bc>)
 800d3b4:	f7f3 ffbc 	bl	8001330 <iprintf>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f00b f85d 	bl	8018478 <fflush>
 800d3be:	f00a ffa1 	bl	8018304 <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	891b      	ldrh	r3, [r3, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10b      	bne.n	800d3e2 <tcp_split_unsent_seg+0xb6>
 800d3ca:	4b85      	ldr	r3, [pc, #532]	; (800d5e0 <tcp_split_unsent_seg+0x2b4>)
 800d3cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d3d0:	4988      	ldr	r1, [pc, #544]	; (800d5f4 <tcp_split_unsent_seg+0x2c8>)
 800d3d2:	4885      	ldr	r0, [pc, #532]	; (800d5e8 <tcp_split_unsent_seg+0x2bc>)
 800d3d4:	f7f3 ffac 	bl	8001330 <iprintf>
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f00b f84d 	bl	8018478 <fflush>
 800d3de:	f00a ff91 	bl	8018304 <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	7a9b      	ldrb	r3, [r3, #10]
 800d3e6:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <tcp_split_unsent_seg+0xca>
 800d3f2:	2304      	movs	r3, #4
 800d3f4:	e000      	b.n	800d3f8 <tcp_split_unsent_seg+0xcc>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	891a      	ldrh	r2, [r3, #8]
 800d3fe:	887b      	ldrh	r3, [r7, #2]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d404:	7bbb      	ldrb	r3, [r7, #14]
 800d406:	b29a      	uxth	r2, r3
 800d408:	89bb      	ldrh	r3, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d412:	4619      	mov	r1, r3
 800d414:	2036      	movs	r0, #54	; 0x36
 800d416:	f7fa f86b 	bl	80074f0 <pbuf_alloc>
 800d41a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 80b6 	beq.w	800d590 <tcp_split_unsent_seg+0x264>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	891a      	ldrh	r2, [r3, #8]
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	891b      	ldrh	r3, [r3, #8]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	b29a      	uxth	r2, r3
 800d432:	887b      	ldrh	r3, [r7, #2]
 800d434:	4413      	add	r3, r2
 800d436:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	6858      	ldr	r0, [r3, #4]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	685a      	ldr	r2, [r3, #4]
 800d440:	7bbb      	ldrb	r3, [r7, #14]
 800d442:	18d1      	adds	r1, r2, r3
 800d444:	897b      	ldrh	r3, [r7, #10]
 800d446:	89ba      	ldrh	r2, [r7, #12]
 800d448:	f7fa fd8a 	bl	8007f60 <pbuf_copy_partial>
 800d44c:	4603      	mov	r3, r0
 800d44e:	461a      	mov	r2, r3
 800d450:	89bb      	ldrh	r3, [r7, #12]
 800d452:	4293      	cmp	r3, r2
 800d454:	f040 809e 	bne.w	800d594 <tcp_split_unsent_seg+0x268>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	899b      	ldrh	r3, [r3, #12]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	4618      	mov	r0, r3
 800d462:	f7f8 fbf3 	bl	8005c4c <lwip_htons>
 800d466:	4603      	mov	r3, r0
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d46e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d470:	2300      	movs	r3, #0
 800d472:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d474:	7efb      	ldrb	r3, [r7, #27]
 800d476:	f003 0308 	and.w	r3, r3, #8
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d007      	beq.n	800d48e <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800d47e:	7efb      	ldrb	r3, [r7, #27]
 800d480:	f023 0308 	bic.w	r3, r3, #8
 800d484:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d486:	7ebb      	ldrb	r3, [r7, #26]
 800d488:	f043 0308 	orr.w	r3, r3, #8
 800d48c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d48e:	7efb      	ldrb	r3, [r7, #27]
 800d490:	f003 0301 	and.w	r3, r3, #1
 800d494:	2b00      	cmp	r3, #0
 800d496:	d007      	beq.n	800d4a8 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800d498:	7efb      	ldrb	r3, [r7, #27]
 800d49a:	f023 0301 	bic.w	r3, r3, #1
 800d49e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d4a0:	7ebb      	ldrb	r3, [r7, #26]
 800d4a2:	f043 0301 	orr.w	r3, r3, #1
 800d4a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7f8 fbe1 	bl	8005c76 <lwip_htonl>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	887b      	ldrh	r3, [r7, #2]
 800d4b8:	18d1      	adds	r1, r2, r3
 800d4ba:	7eba      	ldrb	r2, [r7, #26]
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	6939      	ldr	r1, [r7, #16]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff f9af 	bl	800c828 <tcp_create_segment>
 800d4ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d062      	beq.n	800d598 <tcp_split_unsent_seg+0x26c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fa fba4 	bl	8007c24 <pbuf_clen>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	461a      	mov	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4e6:	1a9b      	subs	r3, r3, r2
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	6858      	ldr	r0, [r3, #4]
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	891a      	ldrh	r2, [r3, #8]
 800d4fa:	89bb      	ldrh	r3, [r7, #12]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	4619      	mov	r1, r3
 800d502:	f7fa f917 	bl	8007734 <pbuf_realloc>
  useg->len -= remainder;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	891a      	ldrh	r2, [r3, #8]
 800d50a:	89bb      	ldrh	r3, [r7, #12]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	b29a      	uxth	r2, r3
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	68dc      	ldr	r4, [r3, #12]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	899b      	ldrh	r3, [r3, #12]
 800d51e:	b29d      	uxth	r5, r3
 800d520:	7efb      	ldrb	r3, [r7, #27]
 800d522:	b29b      	uxth	r3, r3
 800d524:	4618      	mov	r0, r3
 800d526:	f7f8 fb91 	bl	8005c4c <lwip_htons>
 800d52a:	4603      	mov	r3, r0
 800d52c:	432b      	orrs	r3, r5
 800d52e:	b29b      	uxth	r3, r3
 800d530:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	f7fa fb74 	bl	8007c24 <pbuf_clen>
 800d53c:	4603      	mov	r3, r0
 800d53e:	461a      	mov	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d546:	4413      	add	r3, r2
 800d548:	b29a      	uxth	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	4618      	mov	r0, r3
 800d556:	f7fa fb65 	bl	8007c24 <pbuf_clen>
 800d55a:	4603      	mov	r3, r0
 800d55c:	461a      	mov	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d564:	4413      	add	r3, r2
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	69fa      	ldr	r2, [r7, #28]
 800d57a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d103      	bne.n	800d58c <tcp_split_unsent_seg+0x260>
    pcb->unsent_oversize = 0;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	e023      	b.n	800d5d8 <tcp_split_unsent_seg+0x2ac>
    goto memerr;
 800d590:	bf00      	nop
 800d592:	e002      	b.n	800d59a <tcp_split_unsent_seg+0x26e>
    goto memerr;
 800d594:	bf00      	nop
 800d596:	e000      	b.n	800d59a <tcp_split_unsent_seg+0x26e>
    goto memerr;
 800d598:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800d59a:	4b17      	ldr	r3, [pc, #92]	; (800d5f8 <tcp_split_unsent_seg+0x2cc>)
 800d59c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	4b14      	ldr	r3, [pc, #80]	; (800d5f8 <tcp_split_unsent_seg+0x2cc>)
 800d5a6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00b      	beq.n	800d5c8 <tcp_split_unsent_seg+0x29c>
 800d5b0:	4b0b      	ldr	r3, [pc, #44]	; (800d5e0 <tcp_split_unsent_seg+0x2b4>)
 800d5b2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d5b6:	4911      	ldr	r1, [pc, #68]	; (800d5fc <tcp_split_unsent_seg+0x2d0>)
 800d5b8:	480b      	ldr	r0, [pc, #44]	; (800d5e8 <tcp_split_unsent_seg+0x2bc>)
 800d5ba:	f7f3 feb9 	bl	8001330 <iprintf>
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f00a ff5a 	bl	8018478 <fflush>
 800d5c4:	f00a fe9e 	bl	8018304 <abort>
  if (p != NULL) {
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <tcp_split_unsent_seg+0x2a8>
    pbuf_free(p);
 800d5ce:	6938      	ldr	r0, [r7, #16]
 800d5d0:	f7fa fa86 	bl	8007ae0 <pbuf_free>
  }

  return ERR_MEM;
 800d5d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3720      	adds	r7, #32
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bdb0      	pop	{r4, r5, r7, pc}
 800d5e0:	0801a9ec 	.word	0x0801a9ec
 800d5e4:	0801ad68 	.word	0x0801ad68
 800d5e8:	0801aa28 	.word	0x0801aa28
 800d5ec:	0801ad8c 	.word	0x0801ad8c
 800d5f0:	0801adb0 	.word	0x0801adb0
 800d5f4:	0801adc0 	.word	0x0801adc0
 800d5f8:	20016e44 	.word	0x20016e44
 800d5fc:	0801add0 	.word	0x0801add0

0800d600 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d600:	b5b0      	push	{r4, r5, r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10b      	bne.n	800d626 <tcp_send_fin+0x26>
 800d60e:	4b23      	ldr	r3, [pc, #140]	; (800d69c <tcp_send_fin+0x9c>)
 800d610:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d614:	4922      	ldr	r1, [pc, #136]	; (800d6a0 <tcp_send_fin+0xa0>)
 800d616:	4823      	ldr	r0, [pc, #140]	; (800d6a4 <tcp_send_fin+0xa4>)
 800d618:	f7f3 fe8a 	bl	8001330 <iprintf>
 800d61c:	2000      	movs	r0, #0
 800d61e:	f00a ff2b 	bl	8018478 <fflush>
 800d622:	f00a fe6f 	bl	8018304 <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d02d      	beq.n	800d68a <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	e002      	b.n	800d63c <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1f8      	bne.n	800d636 <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	899b      	ldrh	r3, [r3, #12]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7f8 fafd 	bl	8005c4c <lwip_htons>
 800d652:	4603      	mov	r3, r0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d115      	bne.n	800d68a <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68dc      	ldr	r4, [r3, #12]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	899b      	ldrh	r3, [r3, #12]
 800d668:	b29d      	uxth	r5, r3
 800d66a:	2001      	movs	r0, #1
 800d66c:	f7f8 faee 	bl	8005c4c <lwip_htons>
 800d670:	4603      	mov	r3, r0
 800d672:	432b      	orrs	r3, r5
 800d674:	b29b      	uxth	r3, r3
 800d676:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	8b5b      	ldrh	r3, [r3, #26]
 800d67c:	f043 0320 	orr.w	r3, r3, #32
 800d680:	b29a      	uxth	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	e004      	b.n	800d694 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d68a:	2101      	movs	r1, #1
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f80b 	bl	800d6a8 <tcp_enqueue_flags>
 800d692:	4603      	mov	r3, r0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bdb0      	pop	{r4, r5, r7, pc}
 800d69c:	0801a9ec 	.word	0x0801a9ec
 800d6a0:	0801addc 	.word	0x0801addc
 800d6a4:	0801aa28 	.word	0x0801aa28

0800d6a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08a      	sub	sp, #40	; 0x28
 800d6ac:	af02      	add	r7, sp, #8
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d6bc:	78fb      	ldrb	r3, [r7, #3]
 800d6be:	f003 0303 	and.w	r3, r3, #3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10b      	bne.n	800d6de <tcp_enqueue_flags+0x36>
 800d6c6:	4b76      	ldr	r3, [pc, #472]	; (800d8a0 <tcp_enqueue_flags+0x1f8>)
 800d6c8:	f240 4212 	movw	r2, #1042	; 0x412
 800d6cc:	4975      	ldr	r1, [pc, #468]	; (800d8a4 <tcp_enqueue_flags+0x1fc>)
 800d6ce:	4876      	ldr	r0, [pc, #472]	; (800d8a8 <tcp_enqueue_flags+0x200>)
 800d6d0:	f7f3 fe2e 	bl	8001330 <iprintf>
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	f00a fecf 	bl	8018478 <fflush>
 800d6da:	f00a fe13 	bl	8018304 <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10b      	bne.n	800d6fc <tcp_enqueue_flags+0x54>
 800d6e4:	4b6e      	ldr	r3, [pc, #440]	; (800d8a0 <tcp_enqueue_flags+0x1f8>)
 800d6e6:	f240 4213 	movw	r2, #1043	; 0x413
 800d6ea:	4970      	ldr	r1, [pc, #448]	; (800d8ac <tcp_enqueue_flags+0x204>)
 800d6ec:	486e      	ldr	r0, [pc, #440]	; (800d8a8 <tcp_enqueue_flags+0x200>)
 800d6ee:	f7f3 fe1f 	bl	8001330 <iprintf>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	f00a fec0 	bl	8018478 <fflush>
 800d6f8:	f00a fe04 	bl	8018304 <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d6fc:	78fb      	ldrb	r3, [r7, #3]
 800d6fe:	f003 0302 	and.w	r3, r3, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800d706:	2301      	movs	r3, #1
 800d708:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d70a:	7ffb      	ldrb	r3, [r7, #31]
 800d70c:	f003 0301 	and.w	r3, r3, #1
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <tcp_enqueue_flags+0x70>
 800d714:	2304      	movs	r3, #4
 800d716:	e000      	b.n	800d71a <tcp_enqueue_flags+0x72>
 800d718:	2300      	movs	r3, #0
 800d71a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d724:	4619      	mov	r1, r3
 800d726:	2036      	movs	r0, #54	; 0x36
 800d728:	f7f9 fee2 	bl	80074f0 <pbuf_alloc>
 800d72c:	6138      	str	r0, [r7, #16]
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d111      	bne.n	800d758 <tcp_enqueue_flags+0xb0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8b5b      	ldrh	r3, [r3, #26]
 800d738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800d742:	4b5b      	ldr	r3, [pc, #364]	; (800d8b0 <tcp_enqueue_flags+0x208>)
 800d744:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d748:	3301      	adds	r3, #1
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	4b58      	ldr	r3, [pc, #352]	; (800d8b0 <tcp_enqueue_flags+0x208>)
 800d74e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800d752:	f04f 33ff 	mov.w	r3, #4294967295
 800d756:	e09f      	b.n	800d898 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	895a      	ldrh	r2, [r3, #10]
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
 800d75e:	b29b      	uxth	r3, r3
 800d760:	429a      	cmp	r2, r3
 800d762:	d20b      	bcs.n	800d77c <tcp_enqueue_flags+0xd4>
 800d764:	4b4e      	ldr	r3, [pc, #312]	; (800d8a0 <tcp_enqueue_flags+0x1f8>)
 800d766:	f240 423a 	movw	r2, #1082	; 0x43a
 800d76a:	4952      	ldr	r1, [pc, #328]	; (800d8b4 <tcp_enqueue_flags+0x20c>)
 800d76c:	484e      	ldr	r0, [pc, #312]	; (800d8a8 <tcp_enqueue_flags+0x200>)
 800d76e:	f7f3 fddf 	bl	8001330 <iprintf>
 800d772:	2000      	movs	r0, #0
 800d774:	f00a fe80 	bl	8018478 <fflush>
 800d778:	f00a fdc4 	bl	8018304 <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d780:	78fa      	ldrb	r2, [r7, #3]
 800d782:	7ffb      	ldrb	r3, [r7, #31]
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	460b      	mov	r3, r1
 800d788:	6939      	ldr	r1, [r7, #16]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7ff f84c 	bl	800c828 <tcp_create_segment>
 800d790:	60f8      	str	r0, [r7, #12]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d111      	bne.n	800d7bc <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	8b5b      	ldrh	r3, [r3, #26]
 800d79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800d7a6:	4b42      	ldr	r3, [pc, #264]	; (800d8b0 <tcp_enqueue_flags+0x208>)
 800d7a8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	4b3f      	ldr	r3, [pc, #252]	; (800d8b0 <tcp_enqueue_flags+0x208>)
 800d7b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800d7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ba:	e06d      	b.n	800d898 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	891b      	ldrh	r3, [r3, #8]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <tcp_enqueue_flags+0x134>
 800d7c4:	4b36      	ldr	r3, [pc, #216]	; (800d8a0 <tcp_enqueue_flags+0x1f8>)
 800d7c6:	f240 4243 	movw	r2, #1091	; 0x443
 800d7ca:	493b      	ldr	r1, [pc, #236]	; (800d8b8 <tcp_enqueue_flags+0x210>)
 800d7cc:	4836      	ldr	r0, [pc, #216]	; (800d8a8 <tcp_enqueue_flags+0x200>)
 800d7ce:	f7f3 fdaf 	bl	8001330 <iprintf>
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	f00a fe50 	bl	8018478 <fflush>
 800d7d8:	f00a fd94 	bl	8018304 <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d103      	bne.n	800d7ec <tcp_enqueue_flags+0x144>
    pcb->unsent = seg;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d7ea:	e00d      	b.n	800d808 <tcp_enqueue_flags+0x160>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	e002      	b.n	800d7fa <tcp_enqueue_flags+0x152>
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	61bb      	str	r3, [r7, #24]
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f8      	bne.n	800d7f4 <tcp_enqueue_flags+0x14c>
    useg->next = seg;
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d810:	78fb      	ldrb	r3, [r7, #3]
 800d812:	f003 0302 	and.w	r3, r3, #2
 800d816:	2b00      	cmp	r3, #0
 800d818:	d104      	bne.n	800d824 <tcp_enqueue_flags+0x17c>
 800d81a:	78fb      	ldrb	r3, [r7, #3]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d004      	beq.n	800d82e <tcp_enqueue_flags+0x186>
    pcb->snd_lbb++;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d828:	1c5a      	adds	r2, r3, #1
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d82e:	78fb      	ldrb	r3, [r7, #3]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d006      	beq.n	800d846 <tcp_enqueue_flags+0x19e>
    tcp_set_flags(pcb, TF_FIN);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	8b5b      	ldrh	r3, [r3, #26]
 800d83c:	f043 0320 	orr.w	r3, r3, #32
 800d840:	b29a      	uxth	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fa f9ea 	bl	8007c24 <pbuf_clen>
 800d850:	4603      	mov	r3, r0
 800d852:	461a      	mov	r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d85a:	4413      	add	r3, r2
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d013      	beq.n	800d896 <tcp_enqueue_flags+0x1ee>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10f      	bne.n	800d896 <tcp_enqueue_flags+0x1ee>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10b      	bne.n	800d896 <tcp_enqueue_flags+0x1ee>
 800d87e:	4b08      	ldr	r3, [pc, #32]	; (800d8a0 <tcp_enqueue_flags+0x1f8>)
 800d880:	f240 4266 	movw	r2, #1126	; 0x466
 800d884:	490d      	ldr	r1, [pc, #52]	; (800d8bc <tcp_enqueue_flags+0x214>)
 800d886:	4808      	ldr	r0, [pc, #32]	; (800d8a8 <tcp_enqueue_flags+0x200>)
 800d888:	f7f3 fd52 	bl	8001330 <iprintf>
 800d88c:	2000      	movs	r0, #0
 800d88e:	f00a fdf3 	bl	8018478 <fflush>
 800d892:	f00a fd37 	bl	8018304 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3720      	adds	r7, #32
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	0801a9ec 	.word	0x0801a9ec
 800d8a4:	0801adf8 	.word	0x0801adf8
 800d8a8:	0801aa28 	.word	0x0801aa28
 800d8ac:	0801ae50 	.word	0x0801ae50
 800d8b0:	20016e44 	.word	0x20016e44
 800d8b4:	0801ae70 	.word	0x0801ae70
 800d8b8:	0801aeac 	.word	0x0801aeac
 800d8bc:	0801aed8 	.word	0x0801aed8

0800d8c0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d8c0:	b5b0      	push	{r4, r5, r7, lr}
 800d8c2:	b08a      	sub	sp, #40	; 0x28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <tcp_output+0x26>
 800d8ce:	4ba7      	ldr	r3, [pc, #668]	; (800db6c <tcp_output+0x2ac>)
 800d8d0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d8d4:	49a6      	ldr	r1, [pc, #664]	; (800db70 <tcp_output+0x2b0>)
 800d8d6:	48a7      	ldr	r0, [pc, #668]	; (800db74 <tcp_output+0x2b4>)
 800d8d8:	f7f3 fd2a 	bl	8001330 <iprintf>
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f00a fdcb 	bl	8018478 <fflush>
 800d8e2:	f00a fd0f 	bl	8018304 <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d10b      	bne.n	800d906 <tcp_output+0x46>
 800d8ee:	4b9f      	ldr	r3, [pc, #636]	; (800db6c <tcp_output+0x2ac>)
 800d8f0:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800d8f4:	49a0      	ldr	r1, [pc, #640]	; (800db78 <tcp_output+0x2b8>)
 800d8f6:	489f      	ldr	r0, [pc, #636]	; (800db74 <tcp_output+0x2b4>)
 800d8f8:	f7f3 fd1a 	bl	8001330 <iprintf>
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f00a fdbb 	bl	8018478 <fflush>
 800d902:	f00a fcff 	bl	8018304 <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d906:	4b9d      	ldr	r3, [pc, #628]	; (800db7c <tcp_output+0x2bc>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d101      	bne.n	800d914 <tcp_output+0x54>
    return ERR_OK;
 800d910:	2300      	movs	r3, #0
 800d912:	e1d4      	b.n	800dcbe <tcp_output+0x3fe>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d920:	429a      	cmp	r2, r3
 800d922:	d203      	bcs.n	800d92c <tcp_output+0x6c>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d92a:	e002      	b.n	800d932 <tcp_output+0x72>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d932:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d938:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10b      	bne.n	800d958 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	8b5b      	ldrh	r3, [r3, #26]
 800d944:	f003 0302 	and.w	r3, r3, #2
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f000 81ad 	beq.w	800dca8 <tcp_output+0x3e8>
      return tcp_send_empty_ack(pcb);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fe6a 	bl	800e628 <tcp_send_empty_ack>
 800d954:	4603      	mov	r3, r0
 800d956:	e1b2      	b.n	800dcbe <tcp_output+0x3fe>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3304      	adds	r3, #4
 800d95e:	461a      	mov	r2, r3
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7fe ff45 	bl	800c7f0 <tcp_route>
 800d966:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d102      	bne.n	800d974 <tcp_output+0xb4>
    return ERR_RTE;
 800d96e:	f06f 0303 	mvn.w	r3, #3
 800d972:	e1a4      	b.n	800dcbe <tcp_output+0x3fe>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d003      	beq.n	800d982 <tcp_output+0xc2>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d111      	bne.n	800d9a6 <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <tcp_output+0xce>
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	3304      	adds	r3, #4
 800d98c:	e000      	b.n	800d990 <tcp_output+0xd0>
 800d98e:	2300      	movs	r3, #0
 800d990:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d102      	bne.n	800d99e <tcp_output+0xde>
      return ERR_RTE;
 800d998:	f06f 0303 	mvn.w	r3, #3
 800d99c:	e18f      	b.n	800dcbe <tcp_output+0x3fe>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f8 f962 	bl	8005c76 <lwip_htonl>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9bc:	8912      	ldrh	r2, [r2, #8]
 800d9be:	441a      	add	r2, r3
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d927      	bls.n	800da16 <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d114      	bne.n	800d9fe <tcp_output+0x13e>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d110      	bne.n	800d9fe <tcp_output+0x13e>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10b      	bne.n	800d9fe <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	8b5b      	ldrh	r3, [r3, #26]
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	2b00      	cmp	r3, #0
 800da08:	f000 8150 	beq.w	800dcac <tcp_output+0x3ec>
      return tcp_send_empty_ack(pcb);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fe0b 	bl	800e628 <tcp_send_empty_ack>
 800da12:	4603      	mov	r3, r0
 800da14:	e153      	b.n	800dcbe <tcp_output+0x3fe>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da22:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	2b00      	cmp	r3, #0
 800da28:	f000 811f 	beq.w	800dc6a <tcp_output+0x3aa>
    for (; useg->next != NULL; useg = useg->next);
 800da2c:	e002      	b.n	800da34 <tcp_output+0x174>
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	623b      	str	r3, [r7, #32]
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1f8      	bne.n	800da2e <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800da3c:	e115      	b.n	800dc6a <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	899b      	ldrh	r3, [r3, #12]
 800da44:	b29b      	uxth	r3, r3
 800da46:	4618      	mov	r0, r3
 800da48:	f7f8 f900 	bl	8005c4c <lwip_htons>
 800da4c:	4603      	mov	r3, r0
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00b      	beq.n	800da70 <tcp_output+0x1b0>
 800da58:	4b44      	ldr	r3, [pc, #272]	; (800db6c <tcp_output+0x2ac>)
 800da5a:	f240 5237 	movw	r2, #1335	; 0x537
 800da5e:	4948      	ldr	r1, [pc, #288]	; (800db80 <tcp_output+0x2c0>)
 800da60:	4844      	ldr	r0, [pc, #272]	; (800db74 <tcp_output+0x2b4>)
 800da62:	f7f3 fc65 	bl	8001330 <iprintf>
 800da66:	2000      	movs	r0, #0
 800da68:	f00a fd06 	bl	8018478 <fflush>
 800da6c:	f00a fc4a 	bl	8018304 <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da74:	2b00      	cmp	r3, #0
 800da76:	d01f      	beq.n	800dab8 <tcp_output+0x1f8>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	8b5b      	ldrh	r3, [r3, #26]
 800da7c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800da80:	2b00      	cmp	r3, #0
 800da82:	d119      	bne.n	800dab8 <tcp_output+0x1f8>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00b      	beq.n	800daa4 <tcp_output+0x1e4>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d110      	bne.n	800dab8 <tcp_output+0x1f8>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da9a:	891a      	ldrh	r2, [r3, #8]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d209      	bcs.n	800dab8 <tcp_output+0x1f8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d004      	beq.n	800dab8 <tcp_output+0x1f8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dab4:	2b07      	cmp	r3, #7
 800dab6:	d901      	bls.n	800dabc <tcp_output+0x1fc>
 800dab8:	2301      	movs	r3, #1
 800daba:	e000      	b.n	800dabe <tcp_output+0x1fe>
 800dabc:	2300      	movs	r3, #0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	8b5b      	ldrh	r3, [r3, #26]
 800dac6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 80e2 	beq.w	800dc94 <tcp_output+0x3d4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7d1b      	ldrb	r3, [r3, #20]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d00c      	beq.n	800daf2 <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	68dc      	ldr	r4, [r3, #12]
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	899b      	ldrh	r3, [r3, #12]
 800dae2:	b29d      	uxth	r5, r3
 800dae4:	2010      	movs	r0, #16
 800dae6:	f7f8 f8b1 	bl	8005c4c <lwip_htons>
 800daea:	4603      	mov	r3, r0
 800daec:	432b      	orrs	r3, r5
 800daee:	b29b      	uxth	r3, r3
 800daf0:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daf8:	f000 f90c 	bl	800dd14 <tcp_output_segment>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800db00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d009      	beq.n	800db1c <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	8b5b      	ldrh	r3, [r3, #26]
 800db0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	835a      	strh	r2, [r3, #26]
      return err;
 800db16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db1a:	e0d0      	b.n	800dcbe <tcp_output+0x3fe>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d006      	beq.n	800db3a <tcp_output+0x27a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	8b5b      	ldrh	r3, [r3, #26]
 800db30:	f023 0303 	bic.w	r3, r3, #3
 800db34:	b29a      	uxth	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	4618      	mov	r0, r3
 800db42:	f7f8 f898 	bl	8005c76 <lwip_htonl>
 800db46:	4604      	mov	r4, r0
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	891b      	ldrh	r3, [r3, #8]
 800db4c:	461d      	mov	r5, r3
 800db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	899b      	ldrh	r3, [r3, #12]
 800db54:	b29b      	uxth	r3, r3
 800db56:	4618      	mov	r0, r3
 800db58:	f7f8 f878 	bl	8005c4c <lwip_htons>
 800db5c:	4603      	mov	r3, r0
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f003 0303 	and.w	r3, r3, #3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00d      	beq.n	800db84 <tcp_output+0x2c4>
 800db68:	2301      	movs	r3, #1
 800db6a:	e00c      	b.n	800db86 <tcp_output+0x2c6>
 800db6c:	0801a9ec 	.word	0x0801a9ec
 800db70:	0801af00 	.word	0x0801af00
 800db74:	0801aa28 	.word	0x0801aa28
 800db78:	0801af18 	.word	0x0801af18
 800db7c:	20016f58 	.word	0x20016f58
 800db80:	0801af40 	.word	0x0801af40
 800db84:	2300      	movs	r3, #0
 800db86:	442b      	add	r3, r5
 800db88:	4423      	add	r3, r4
 800db8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	2b00      	cmp	r3, #0
 800db96:	da02      	bge.n	800db9e <tcp_output+0x2de>
      pcb->snd_nxt = snd_nxt;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	891b      	ldrh	r3, [r3, #8]
 800dba2:	461c      	mov	r4, r3
 800dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	899b      	ldrh	r3, [r3, #12]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7f8 f84d 	bl	8005c4c <lwip_htons>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0303 	and.w	r3, r3, #3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <tcp_output+0x302>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e000      	b.n	800dbc4 <tcp_output+0x304>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	4423      	add	r3, r4
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d049      	beq.n	800dc5e <tcp_output+0x39e>
      seg->next = NULL;
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d105      	bne.n	800dbe4 <tcp_output+0x324>
        pcb->unacked = seg;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbdc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	623b      	str	r3, [r7, #32]
 800dbe2:	e03f      	b.n	800dc64 <tcp_output+0x3a4>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f8 f843 	bl	8005c76 <lwip_htonl>
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7f8 f83c 	bl	8005c76 <lwip_htonl>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	1ae3      	subs	r3, r4, r3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	da24      	bge.n	800dc50 <tcp_output+0x390>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3370      	adds	r3, #112	; 0x70
 800dc0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dc0c:	e002      	b.n	800dc14 <tcp_output+0x354>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d011      	beq.n	800dc40 <tcp_output+0x380>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7f8 f826 	bl	8005c76 <lwip_htonl>
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7f8 f81f 	bl	8005c76 <lwip_htonl>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	dbe6      	blt.n	800dc0e <tcp_output+0x34e>
          }
          seg->next = (*cur_seg);
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	e009      	b.n	800dc64 <tcp_output+0x3a4>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc54:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	623b      	str	r3, [r7, #32]
 800dc5c:	e002      	b.n	800dc64 <tcp_output+0x3a4>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800dc5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc60:	f7fb fc96 	bl	8009590 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc68:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d012      	beq.n	800dc96 <tcp_output+0x3d6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f7 fffd 	bl	8005c76 <lwip_htonl>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc82:	1ad3      	subs	r3, r2, r3
 800dc84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc86:	8912      	ldrh	r2, [r2, #8]
 800dc88:	441a      	add	r2, r3
  while (seg != NULL &&
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	f67f aed6 	bls.w	800da3e <tcp_output+0x17e>
 800dc92:	e000      	b.n	800dc96 <tcp_output+0x3d6>
      break;
 800dc94:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d107      	bne.n	800dcae <tcp_output+0x3ee>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800dca6:	e002      	b.n	800dcae <tcp_output+0x3ee>
    goto output_done;
 800dca8:	bf00      	nop
 800dcaa:	e000      	b.n	800dcae <tcp_output+0x3ee>
    goto output_done;
 800dcac:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	8b5b      	ldrh	r3, [r3, #26]
 800dcb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3728      	adds	r7, #40	; 0x28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dcc6:	bf00      	nop

0800dcc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10b      	bne.n	800dcee <tcp_output_segment_busy+0x26>
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <tcp_output_segment_busy+0x40>)
 800dcd8:	f240 529a 	movw	r2, #1434	; 0x59a
 800dcdc:	490b      	ldr	r1, [pc, #44]	; (800dd0c <tcp_output_segment_busy+0x44>)
 800dcde:	480c      	ldr	r0, [pc, #48]	; (800dd10 <tcp_output_segment_busy+0x48>)
 800dce0:	f7f3 fb26 	bl	8001330 <iprintf>
 800dce4:	2000      	movs	r0, #0
 800dce6:	f00a fbc7 	bl	8018478 <fflush>
 800dcea:	f00a fb0b 	bl	8018304 <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	7b9b      	ldrb	r3, [r3, #14]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d001      	beq.n	800dcfc <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e000      	b.n	800dcfe <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	0801a9ec 	.word	0x0801a9ec
 800dd0c:	0801af58 	.word	0x0801af58
 800dd10:	0801aa28 	.word	0x0801aa28

0800dd14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dd14:	b5b0      	push	{r4, r5, r7, lr}
 800dd16:	b08c      	sub	sp, #48	; 0x30
 800dd18:	af04      	add	r7, sp, #16
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10b      	bne.n	800dd3e <tcp_output_segment+0x2a>
 800dd26:	4b7c      	ldr	r3, [pc, #496]	; (800df18 <tcp_output_segment+0x204>)
 800dd28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800dd2c:	497b      	ldr	r1, [pc, #492]	; (800df1c <tcp_output_segment+0x208>)
 800dd2e:	487c      	ldr	r0, [pc, #496]	; (800df20 <tcp_output_segment+0x20c>)
 800dd30:	f7f3 fafe 	bl	8001330 <iprintf>
 800dd34:	2000      	movs	r0, #0
 800dd36:	f00a fb9f 	bl	8018478 <fflush>
 800dd3a:	f00a fae3 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10b      	bne.n	800dd5c <tcp_output_segment+0x48>
 800dd44:	4b74      	ldr	r3, [pc, #464]	; (800df18 <tcp_output_segment+0x204>)
 800dd46:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dd4a:	4976      	ldr	r1, [pc, #472]	; (800df24 <tcp_output_segment+0x210>)
 800dd4c:	4874      	ldr	r0, [pc, #464]	; (800df20 <tcp_output_segment+0x20c>)
 800dd4e:	f7f3 faef 	bl	8001330 <iprintf>
 800dd52:	2000      	movs	r0, #0
 800dd54:	f00a fb90 	bl	8018478 <fflush>
 800dd58:	f00a fad4 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10b      	bne.n	800dd7a <tcp_output_segment+0x66>
 800dd62:	4b6d      	ldr	r3, [pc, #436]	; (800df18 <tcp_output_segment+0x204>)
 800dd64:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dd68:	496f      	ldr	r1, [pc, #444]	; (800df28 <tcp_output_segment+0x214>)
 800dd6a:	486d      	ldr	r0, [pc, #436]	; (800df20 <tcp_output_segment+0x20c>)
 800dd6c:	f7f3 fae0 	bl	8001330 <iprintf>
 800dd70:	2000      	movs	r0, #0
 800dd72:	f00a fb81 	bl	8018478 <fflush>
 800dd76:	f00a fac5 	bl	8018304 <abort>

  if (tcp_output_segment_busy(seg)) {
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f7ff ffa4 	bl	800dcc8 <tcp_output_segment_busy>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	e0c2      	b.n	800df10 <tcp_output_segment+0x1fc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	68dc      	ldr	r4, [r3, #12]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f7 ff6f 	bl	8005c76 <lwip_htonl>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	68dc      	ldr	r4, [r3, #12]
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7f7 ff51 	bl	8005c4c <lwip_htons>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ddb6:	441a      	add	r2, r3
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	3314      	adds	r3, #20
 800ddc2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	7a9b      	ldrb	r3, [r3, #10]
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d015      	beq.n	800ddfc <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	6879      	ldr	r1, [r7, #4]
 800ddd8:	f44f 7006 	mov.w	r0, #536	; 0x218
 800dddc:	f7fc f80c 	bl	8009df8 <tcp_eff_send_mss_netif>
 800dde0:	4603      	mov	r3, r0
 800dde2:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dde4:	8b7b      	ldrh	r3, [r7, #26]
 800dde6:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f7 ff43 	bl	8005c76 <lwip_htonl>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de02:	2b00      	cmp	r3, #0
 800de04:	da02      	bge.n	800de0c <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2200      	movs	r2, #0
 800de0a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10c      	bne.n	800de2e <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800de14:	4b45      	ldr	r3, [pc, #276]	; (800df2c <tcp_output_segment+0x218>)
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	4618      	mov	r0, r3
 800de24:	f7f7 ff27 	bl	8005c76 <lwip_htonl>
 800de28:	4602      	mov	r2, r0
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	461a      	mov	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	6852      	ldr	r2, [r2, #4]
 800de46:	8951      	ldrh	r1, [r2, #10]
 800de48:	8b3a      	ldrh	r2, [r7, #24]
 800de4a:	1a8a      	subs	r2, r1, r2
 800de4c:	b292      	uxth	r2, r2
 800de4e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	6852      	ldr	r2, [r2, #4]
 800de58:	8911      	ldrh	r1, [r2, #8]
 800de5a:	8b3a      	ldrh	r2, [r7, #24]
 800de5c:	1a8a      	subs	r2, r1, r2
 800de5e:	b292      	uxth	r2, r2
 800de60:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	68d2      	ldr	r2, [r2, #12]
 800de6a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	741a      	strb	r2, [r3, #16]
 800de74:	2200      	movs	r2, #0
 800de76:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	f103 0214 	add.w	r2, r3, #20
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	7a9b      	ldrb	r3, [r3, #10]
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <tcp_output_segment+0x17c>
 800de8c:	2304      	movs	r3, #4
 800de8e:	e000      	b.n	800de92 <tcp_output_segment+0x17e>
 800de90:	2300      	movs	r3, #0
 800de92:	441a      	add	r2, r3
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	429a      	cmp	r2, r3
 800de98:	d00b      	beq.n	800deb2 <tcp_output_segment+0x19e>
 800de9a:	4b1f      	ldr	r3, [pc, #124]	; (800df18 <tcp_output_segment+0x204>)
 800de9c:	f240 621c 	movw	r2, #1564	; 0x61c
 800dea0:	4923      	ldr	r1, [pc, #140]	; (800df30 <tcp_output_segment+0x21c>)
 800dea2:	481f      	ldr	r0, [pc, #124]	; (800df20 <tcp_output_segment+0x20c>)
 800dea4:	f7f3 fa44 	bl	8001330 <iprintf>
 800dea8:	2000      	movs	r0, #0
 800deaa:	f00a fae5 	bl	8018478 <fflush>
 800deae:	f00a fa29 	bl	8018304 <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	68dc      	ldr	r4, [r3, #12]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800debe:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800dec0:	68b9      	ldr	r1, [r7, #8]
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	460b      	mov	r3, r1
 800deca:	2106      	movs	r1, #6
 800decc:	f7f8 f9fe 	bl	80062cc <ip_chksum_pseudo>
 800ded0:	4603      	mov	r3, r0
 800ded2:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800ded4:	4b17      	ldr	r3, [pc, #92]	; (800df34 <tcp_output_segment+0x220>)
 800ded6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800deda:	3301      	adds	r3, #1
 800dedc:	b29a      	uxth	r2, r3
 800dede:	4b15      	ldr	r3, [pc, #84]	; (800df34 <tcp_output_segment+0x220>)
 800dee0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6858      	ldr	r0, [r3, #4]
 800dee8:	68b9      	ldr	r1, [r7, #8]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	1d1c      	adds	r4, r3, #4
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	7add      	ldrb	r5, [r3, #11]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	7a9b      	ldrb	r3, [r3, #10]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	9202      	str	r2, [sp, #8]
 800defa:	2206      	movs	r2, #6
 800defc:	9201      	str	r2, [sp, #4]
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	462b      	mov	r3, r5
 800df02:	4622      	mov	r2, r4
 800df04:	f7f6 fe26 	bl	8004b54 <ip4_output_if>
 800df08:	4603      	mov	r3, r0
 800df0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800df0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bdb0      	pop	{r4, r5, r7, pc}
 800df18:	0801a9ec 	.word	0x0801a9ec
 800df1c:	0801af80 	.word	0x0801af80
 800df20:	0801aa28 	.word	0x0801aa28
 800df24:	0801afa0 	.word	0x0801afa0
 800df28:	0801afc0 	.word	0x0801afc0
 800df2c:	20016f48 	.word	0x20016f48
 800df30:	0801afe4 	.word	0x0801afe4
 800df34:	20016e44 	.word	0x20016e44

0800df38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800df38:	b5b0      	push	{r4, r5, r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10b      	bne.n	800df5e <tcp_rexmit_rto_prepare+0x26>
 800df46:	4b34      	ldr	r3, [pc, #208]	; (800e018 <tcp_rexmit_rto_prepare+0xe0>)
 800df48:	f240 6263 	movw	r2, #1635	; 0x663
 800df4c:	4933      	ldr	r1, [pc, #204]	; (800e01c <tcp_rexmit_rto_prepare+0xe4>)
 800df4e:	4834      	ldr	r0, [pc, #208]	; (800e020 <tcp_rexmit_rto_prepare+0xe8>)
 800df50:	f7f3 f9ee 	bl	8001330 <iprintf>
 800df54:	2000      	movs	r0, #0
 800df56:	f00a fa8f 	bl	8018478 <fflush>
 800df5a:	f00a f9d3 	bl	8018304 <abort>

  if (pcb->unacked == NULL) {
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df62:	2b00      	cmp	r3, #0
 800df64:	d102      	bne.n	800df6c <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 800df66:	f06f 0305 	mvn.w	r3, #5
 800df6a:	e050      	b.n	800e00e <tcp_rexmit_rto_prepare+0xd6>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df70:	60fb      	str	r3, [r7, #12]
 800df72:	e00b      	b.n	800df8c <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff fea7 	bl	800dcc8 <tcp_output_segment_busy>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800df80:	f06f 0305 	mvn.w	r3, #5
 800df84:	e043      	b.n	800e00e <tcp_rexmit_rto_prepare+0xd6>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1ef      	bne.n	800df74 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f7ff fe97 	bl	800dcc8 <tcp_output_segment_busy>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d002      	beq.n	800dfa6 <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800dfa0:	f06f 0305 	mvn.w	r3, #5
 800dfa4:	e033      	b.n	800e00e <tcp_rexmit_rto_prepare+0xd6>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	8b5b      	ldrh	r3, [r3, #26]
 800dfc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7f7 fe50 	bl	8005c76 <lwip_htonl>
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	891b      	ldrh	r3, [r3, #8]
 800dfdc:	461d      	mov	r5, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	899b      	ldrh	r3, [r3, #12]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f7 fe30 	bl	8005c4c <lwip_htons>
 800dfec:	4603      	mov	r3, r0
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	f003 0303 	and.w	r3, r3, #3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <tcp_rexmit_rto_prepare+0xc4>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e000      	b.n	800dffe <tcp_rexmit_rto_prepare+0xc6>
 800dffc:	2300      	movs	r3, #0
 800dffe:	442b      	add	r3, r5
 800e000:	18e2      	adds	r2, r4, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bdb0      	pop	{r4, r5, r7, pc}
 800e016:	bf00      	nop
 800e018:	0801a9ec 	.word	0x0801a9ec
 800e01c:	0801aff8 	.word	0x0801aff8
 800e020:	0801aa28 	.word	0x0801aa28

0800e024 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10b      	bne.n	800e04a <tcp_rexmit_rto_commit+0x26>
 800e032:	4b10      	ldr	r3, [pc, #64]	; (800e074 <tcp_rexmit_rto_commit+0x50>)
 800e034:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e038:	490f      	ldr	r1, [pc, #60]	; (800e078 <tcp_rexmit_rto_commit+0x54>)
 800e03a:	4810      	ldr	r0, [pc, #64]	; (800e07c <tcp_rexmit_rto_commit+0x58>)
 800e03c:	f7f3 f978 	bl	8001330 <iprintf>
 800e040:	2000      	movs	r0, #0
 800e042:	f00a fa19 	bl	8018478 <fflush>
 800e046:	f00a f95d 	bl	8018304 <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e050:	2bff      	cmp	r3, #255	; 0xff
 800e052:	d007      	beq.n	800e064 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e05a:	3301      	adds	r3, #1
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7ff fc2b 	bl	800d8c0 <tcp_output>
}
 800e06a:	bf00      	nop
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	0801a9ec 	.word	0x0801a9ec
 800e078:	0801b01c 	.word	0x0801b01c
 800e07c:	0801aa28 	.word	0x0801aa28

0800e080 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10b      	bne.n	800e0a6 <tcp_rexmit_rto+0x26>
 800e08e:	4b0c      	ldr	r3, [pc, #48]	; (800e0c0 <tcp_rexmit_rto+0x40>)
 800e090:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e094:	490b      	ldr	r1, [pc, #44]	; (800e0c4 <tcp_rexmit_rto+0x44>)
 800e096:	480c      	ldr	r0, [pc, #48]	; (800e0c8 <tcp_rexmit_rto+0x48>)
 800e098:	f7f3 f94a 	bl	8001330 <iprintf>
 800e09c:	2000      	movs	r0, #0
 800e09e:	f00a f9eb 	bl	8018478 <fflush>
 800e0a2:	f00a f92f 	bl	8018304 <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ff46 	bl	800df38 <tcp_rexmit_rto_prepare>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff ffb6 	bl	800e024 <tcp_rexmit_rto_commit>
  }
}
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	0801a9ec 	.word	0x0801a9ec
 800e0c4:	0801b040 	.word	0x0801b040
 800e0c8:	0801aa28 	.word	0x0801aa28

0800e0cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e0cc:	b590      	push	{r4, r7, lr}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d10b      	bne.n	800e0f2 <tcp_rexmit+0x26>
 800e0da:	4b32      	ldr	r3, [pc, #200]	; (800e1a4 <tcp_rexmit+0xd8>)
 800e0dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e0e0:	4931      	ldr	r1, [pc, #196]	; (800e1a8 <tcp_rexmit+0xdc>)
 800e0e2:	4832      	ldr	r0, [pc, #200]	; (800e1ac <tcp_rexmit+0xe0>)
 800e0e4:	f7f3 f924 	bl	8001330 <iprintf>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f00a f9c5 	bl	8018478 <fflush>
 800e0ee:	f00a f909 	bl	8018304 <abort>

  if (pcb->unacked == NULL) {
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d102      	bne.n	800e100 <tcp_rexmit+0x34>
    return ERR_VAL;
 800e0fa:	f06f 0305 	mvn.w	r3, #5
 800e0fe:	e04c      	b.n	800e19a <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e106:	68b8      	ldr	r0, [r7, #8]
 800e108:	f7ff fdde 	bl	800dcc8 <tcp_output_segment_busy>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e112:	f06f 0305 	mvn.w	r3, #5
 800e116:	e040      	b.n	800e19a <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	336c      	adds	r3, #108	; 0x6c
 800e124:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e126:	e002      	b.n	800e12e <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d011      	beq.n	800e15a <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f7 fd99 	bl	8005c76 <lwip_htonl>
 800e144:	4604      	mov	r4, r0
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f7 fd92 	bl	8005c76 <lwip_htonl>
 800e152:	4603      	mov	r3, r0
 800e154:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e156:	2b00      	cmp	r3, #0
 800e158:	dbe6      	blt.n	800e128 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d103      	bne.n	800e178 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e17e:	2bff      	cmp	r3, #255	; 0xff
 800e180:	d007      	beq.n	800e192 <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e188:	3301      	adds	r3, #1
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd90      	pop	{r4, r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	0801a9ec 	.word	0x0801a9ec
 800e1a8:	0801b05c 	.word	0x0801b05c
 800e1ac:	0801aa28 	.word	0x0801aa28

0800e1b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10b      	bne.n	800e1d6 <tcp_rexmit_fast+0x26>
 800e1be:	4b31      	ldr	r3, [pc, #196]	; (800e284 <tcp_rexmit_fast+0xd4>)
 800e1c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e1c4:	4930      	ldr	r1, [pc, #192]	; (800e288 <tcp_rexmit_fast+0xd8>)
 800e1c6:	4831      	ldr	r0, [pc, #196]	; (800e28c <tcp_rexmit_fast+0xdc>)
 800e1c8:	f7f3 f8b2 	bl	8001330 <iprintf>
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	f00a f953 	bl	8018478 <fflush>
 800e1d2:	f00a f897 	bl	8018304 <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d04d      	beq.n	800e27a <tcp_rexmit_fast+0xca>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8b5b      	ldrh	r3, [r3, #26]
 800e1e2:	f003 0304 	and.w	r3, r3, #4
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d147      	bne.n	800e27a <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7ff ff6e 	bl	800e0cc <tcp_rexmit>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d141      	bne.n	800e27a <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e202:	429a      	cmp	r2, r3
 800e204:	d207      	bcs.n	800e216 <tcp_rexmit_fast+0x66>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e20c:	0fda      	lsrs	r2, r3, #31
 800e20e:	4413      	add	r3, r2
 800e210:	105b      	asrs	r3, r3, #1
 800e212:	b29b      	uxth	r3, r3
 800e214:	e006      	b.n	800e224 <tcp_rexmit_fast+0x74>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e21c:	0fda      	lsrs	r2, r3, #31
 800e21e:	4413      	add	r3, r2
 800e220:	105b      	asrs	r3, r3, #1
 800e222:	b29b      	uxth	r3, r3
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e230:	461a      	mov	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	429a      	cmp	r2, r3
 800e23a:	d206      	bcs.n	800e24a <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	b29a      	uxth	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e254:	4619      	mov	r1, r3
 800e256:	0049      	lsls	r1, r1, #1
 800e258:	440b      	add	r3, r1
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4413      	add	r3, r2
 800e25e:	b29a      	uxth	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	8b5b      	ldrh	r3, [r3, #26]
 800e26a:	f043 0304 	orr.w	r3, r3, #4
 800e26e:	b29a      	uxth	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e27a:	bf00      	nop
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	0801a9ec 	.word	0x0801a9ec
 800e288:	0801b074 	.word	0x0801b074
 800e28c:	0801aa28 	.word	0x0801aa28

0800e290 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	607b      	str	r3, [r7, #4]
 800e29a:	460b      	mov	r3, r1
 800e29c:	817b      	strh	r3, [r7, #10]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e2a2:	897a      	ldrh	r2, [r7, #10]
 800e2a4:	893b      	ldrh	r3, [r7, #8]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	3314      	adds	r3, #20
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	2022      	movs	r0, #34	; 0x22
 800e2b6:	f7f9 f91b 	bl	80074f0 <pbuf_alloc>
 800e2ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d053      	beq.n	800e36a <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	895b      	ldrh	r3, [r3, #10]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	897b      	ldrh	r3, [r7, #10]
 800e2ca:	3314      	adds	r3, #20
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	da0b      	bge.n	800e2e8 <tcp_output_alloc_header_common+0x58>
 800e2d0:	4b28      	ldr	r3, [pc, #160]	; (800e374 <tcp_output_alloc_header_common+0xe4>)
 800e2d2:	f240 7224 	movw	r2, #1828	; 0x724
 800e2d6:	4928      	ldr	r1, [pc, #160]	; (800e378 <tcp_output_alloc_header_common+0xe8>)
 800e2d8:	4828      	ldr	r0, [pc, #160]	; (800e37c <tcp_output_alloc_header_common+0xec>)
 800e2da:	f7f3 f829 	bl	8001330 <iprintf>
 800e2de:	2000      	movs	r0, #0
 800e2e0:	f00a f8ca 	bl	8018478 <fflush>
 800e2e4:	f00a f80e 	bl	8018304 <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e2ee:	8c3b      	ldrh	r3, [r7, #32]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7f7 fcab 	bl	8005c4c <lwip_htons>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e300:	4618      	mov	r0, r3
 800e302:	f7f7 fca3 	bl	8005c4c <lwip_htons>
 800e306:	4603      	mov	r3, r0
 800e308:	461a      	mov	r2, r3
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f7f7 fcae 	bl	8005c76 <lwip_htonl>
 800e31a:	4602      	mov	r2, r0
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e320:	897b      	ldrh	r3, [r7, #10]
 800e322:	089b      	lsrs	r3, r3, #2
 800e324:	b29b      	uxth	r3, r3
 800e326:	3305      	adds	r3, #5
 800e328:	b29b      	uxth	r3, r3
 800e32a:	031b      	lsls	r3, r3, #12
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e332:	b29b      	uxth	r3, r3
 800e334:	4313      	orrs	r3, r2
 800e336:	b29b      	uxth	r3, r3
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f7 fc87 	bl	8005c4c <lwip_htons>
 800e33e:	4603      	mov	r3, r0
 800e340:	461a      	mov	r2, r3
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e346:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e348:	4618      	mov	r0, r3
 800e34a:	f7f7 fc7f 	bl	8005c4c <lwip_htons>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	2200      	movs	r2, #0
 800e35a:	741a      	strb	r2, [r3, #16]
 800e35c:	2200      	movs	r2, #0
 800e35e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	2200      	movs	r2, #0
 800e364:	749a      	strb	r2, [r3, #18]
 800e366:	2200      	movs	r2, #0
 800e368:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e36a:	697b      	ldr	r3, [r7, #20]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	0801a9ec 	.word	0x0801a9ec
 800e378:	0801b094 	.word	0x0801b094
 800e37c:	0801aa28 	.word	0x0801aa28

0800e380 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e380:	b5b0      	push	{r4, r5, r7, lr}
 800e382:	b08a      	sub	sp, #40	; 0x28
 800e384:	af04      	add	r7, sp, #16
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	607b      	str	r3, [r7, #4]
 800e38a:	460b      	mov	r3, r1
 800e38c:	817b      	strh	r3, [r7, #10]
 800e38e:	4613      	mov	r3, r2
 800e390:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10b      	bne.n	800e3b0 <tcp_output_alloc_header+0x30>
 800e398:	4b17      	ldr	r3, [pc, #92]	; (800e3f8 <tcp_output_alloc_header+0x78>)
 800e39a:	f240 7242 	movw	r2, #1858	; 0x742
 800e39e:	4917      	ldr	r1, [pc, #92]	; (800e3fc <tcp_output_alloc_header+0x7c>)
 800e3a0:	4817      	ldr	r0, [pc, #92]	; (800e400 <tcp_output_alloc_header+0x80>)
 800e3a2:	f7f2 ffc5 	bl	8001330 <iprintf>
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	f00a f866 	bl	8018478 <fflush>
 800e3ac:	f009 ffaa 	bl	8018304 <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	8adb      	ldrh	r3, [r3, #22]
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	8b12      	ldrh	r2, [r2, #24]
 800e3bc:	68f9      	ldr	r1, [r7, #12]
 800e3be:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e3c0:	893d      	ldrh	r5, [r7, #8]
 800e3c2:	897c      	ldrh	r4, [r7, #10]
 800e3c4:	9103      	str	r1, [sp, #12]
 800e3c6:	2110      	movs	r1, #16
 800e3c8:	9102      	str	r1, [sp, #8]
 800e3ca:	9201      	str	r2, [sp, #4]
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	462a      	mov	r2, r5
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	f7ff ff5c 	bl	800e290 <tcp_output_alloc_header_common>
 800e3d8:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d006      	beq.n	800e3ee <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e3e8:	441a      	add	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e3ee:	697b      	ldr	r3, [r7, #20]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3718      	adds	r7, #24
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bdb0      	pop	{r4, r5, r7, pc}
 800e3f8:	0801a9ec 	.word	0x0801a9ec
 800e3fc:	0801b0c4 	.word	0x0801b0c4
 800e400:	0801aa28 	.word	0x0801aa28

0800e404 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b088      	sub	sp, #32
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	4611      	mov	r1, r2
 800e410:	461a      	mov	r2, r3
 800e412:	460b      	mov	r3, r1
 800e414:	71fb      	strb	r3, [r7, #7]
 800e416:	4613      	mov	r3, r2
 800e418:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10b      	bne.n	800e43c <tcp_output_fill_options+0x38>
 800e424:	4b1a      	ldr	r3, [pc, #104]	; (800e490 <tcp_output_fill_options+0x8c>)
 800e426:	f240 7256 	movw	r2, #1878	; 0x756
 800e42a:	491a      	ldr	r1, [pc, #104]	; (800e494 <tcp_output_fill_options+0x90>)
 800e42c:	481a      	ldr	r0, [pc, #104]	; (800e498 <tcp_output_fill_options+0x94>)
 800e42e:	f7f2 ff7f 	bl	8001330 <iprintf>
 800e432:	2000      	movs	r0, #0
 800e434:	f00a f820 	bl	8018478 <fflush>
 800e438:	f009 ff64 	bl	8018304 <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	3314      	adds	r3, #20
 800e446:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	f103 0214 	add.w	r2, r3, #20
 800e44e:	8bfb      	ldrh	r3, [r7, #30]
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4619      	mov	r1, r3
 800e454:	79fb      	ldrb	r3, [r7, #7]
 800e456:	f003 0301 	and.w	r3, r3, #1
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <tcp_output_fill_options+0x5e>
 800e45e:	2304      	movs	r3, #4
 800e460:	e000      	b.n	800e464 <tcp_output_fill_options+0x60>
 800e462:	2300      	movs	r3, #0
 800e464:	440b      	add	r3, r1
 800e466:	441a      	add	r2, r3
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d00b      	beq.n	800e486 <tcp_output_fill_options+0x82>
 800e46e:	4b08      	ldr	r3, [pc, #32]	; (800e490 <tcp_output_fill_options+0x8c>)
 800e470:	f240 7275 	movw	r2, #1909	; 0x775
 800e474:	4909      	ldr	r1, [pc, #36]	; (800e49c <tcp_output_fill_options+0x98>)
 800e476:	4808      	ldr	r0, [pc, #32]	; (800e498 <tcp_output_fill_options+0x94>)
 800e478:	f7f2 ff5a 	bl	8001330 <iprintf>
 800e47c:	2000      	movs	r0, #0
 800e47e:	f009 fffb 	bl	8018478 <fflush>
 800e482:	f009 ff3f 	bl	8018304 <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e486:	bf00      	nop
 800e488:	3720      	adds	r7, #32
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	0801a9ec 	.word	0x0801a9ec
 800e494:	0801b0ec 	.word	0x0801b0ec
 800e498:	0801aa28 	.word	0x0801aa28
 800e49c:	0801afe4 	.word	0x0801afe4

0800e4a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08c      	sub	sp, #48	; 0x30
 800e4a4:	af04      	add	r7, sp, #16
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10b      	bne.n	800e4cc <tcp_output_control_segment+0x2c>
 800e4b4:	4b2a      	ldr	r3, [pc, #168]	; (800e560 <tcp_output_control_segment+0xc0>)
 800e4b6:	f240 7287 	movw	r2, #1927	; 0x787
 800e4ba:	492a      	ldr	r1, [pc, #168]	; (800e564 <tcp_output_control_segment+0xc4>)
 800e4bc:	482a      	ldr	r0, [pc, #168]	; (800e568 <tcp_output_control_segment+0xc8>)
 800e4be:	f7f2 ff37 	bl	8001330 <iprintf>
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	f009 ffd8 	bl	8018478 <fflush>
 800e4c8:	f009 ff1c 	bl	8018304 <abort>

  netif = tcp_route(pcb, src, dst);
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f7fe f98d 	bl	800c7f0 <tcp_route>
 800e4d6:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d102      	bne.n	800e4e4 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800e4de:	23fc      	movs	r3, #252	; 0xfc
 800e4e0:	77fb      	strb	r3, [r7, #31]
 800e4e2:	e034      	b.n	800e54e <tcp_output_control_segment+0xae>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	891a      	ldrh	r2, [r3, #8]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2106      	movs	r1, #6
 800e4f6:	68b8      	ldr	r0, [r7, #8]
 800e4f8:	f7f7 fee8 	bl	80062cc <ip_chksum_pseudo>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	461a      	mov	r2, r3
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d006      	beq.n	800e518 <tcp_output_control_segment+0x78>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	7adb      	ldrb	r3, [r3, #11]
 800e50e:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	7a9b      	ldrb	r3, [r3, #10]
 800e514:	777b      	strb	r3, [r7, #29]
 800e516:	e003      	b.n	800e520 <tcp_output_control_segment+0x80>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e518:	23ff      	movs	r3, #255	; 0xff
 800e51a:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800e520:	4b12      	ldr	r3, [pc, #72]	; (800e56c <tcp_output_control_segment+0xcc>)
 800e522:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800e526:	3301      	adds	r3, #1
 800e528:	b29a      	uxth	r2, r3
 800e52a:	4b10      	ldr	r3, [pc, #64]	; (800e56c <tcp_output_control_segment+0xcc>)
 800e52c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e530:	7fba      	ldrb	r2, [r7, #30]
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	9302      	str	r3, [sp, #8]
 800e536:	2306      	movs	r3, #6
 800e538:	9301      	str	r3, [sp, #4]
 800e53a:	7f7b      	ldrb	r3, [r7, #29]
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	4613      	mov	r3, r2
 800e540:	683a      	ldr	r2, [r7, #0]
 800e542:	6879      	ldr	r1, [r7, #4]
 800e544:	68b8      	ldr	r0, [r7, #8]
 800e546:	f7f6 fb05 	bl	8004b54 <ip4_output_if>
 800e54a:	4603      	mov	r3, r0
 800e54c:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e54e:	68b8      	ldr	r0, [r7, #8]
 800e550:	f7f9 fac6 	bl	8007ae0 <pbuf_free>
  return err;
 800e554:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3720      	adds	r7, #32
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	0801a9ec 	.word	0x0801a9ec
 800e564:	0801b114 	.word	0x0801b114
 800e568:	0801aa28 	.word	0x0801aa28
 800e56c:	20016e44 	.word	0x20016e44

0800e570 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e570:	b590      	push	{r4, r7, lr}
 800e572:	b08b      	sub	sp, #44	; 0x2c
 800e574:	af04      	add	r7, sp, #16
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10b      	bne.n	800e59c <tcp_rst+0x2c>
 800e584:	4b24      	ldr	r3, [pc, #144]	; (800e618 <tcp_rst+0xa8>)
 800e586:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e58a:	4924      	ldr	r1, [pc, #144]	; (800e61c <tcp_rst+0xac>)
 800e58c:	4824      	ldr	r0, [pc, #144]	; (800e620 <tcp_rst+0xb0>)
 800e58e:	f7f2 fecf 	bl	8001330 <iprintf>
 800e592:	2000      	movs	r0, #0
 800e594:	f009 ff70 	bl	8018478 <fflush>
 800e598:	f009 feb4 	bl	8018304 <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10b      	bne.n	800e5ba <tcp_rst+0x4a>
 800e5a2:	4b1d      	ldr	r3, [pc, #116]	; (800e618 <tcp_rst+0xa8>)
 800e5a4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e5a8:	491e      	ldr	r1, [pc, #120]	; (800e624 <tcp_rst+0xb4>)
 800e5aa:	481d      	ldr	r0, [pc, #116]	; (800e620 <tcp_rst+0xb0>)
 800e5ac:	f7f2 fec0 	bl	8001330 <iprintf>
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	f009 ff61 	bl	8018478 <fflush>
 800e5b6:	f009 fea5 	bl	8018304 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e5be:	f246 0308 	movw	r3, #24584	; 0x6008
 800e5c2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e5c4:	7dfb      	ldrb	r3, [r7, #23]
 800e5c6:	b29c      	uxth	r4, r3
 800e5c8:	68b8      	ldr	r0, [r7, #8]
 800e5ca:	f7f7 fb54 	bl	8005c76 <lwip_htonl>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	8abb      	ldrh	r3, [r7, #20]
 800e5d2:	9303      	str	r3, [sp, #12]
 800e5d4:	2314      	movs	r3, #20
 800e5d6:	9302      	str	r3, [sp, #8]
 800e5d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff fe52 	bl	800e290 <tcp_output_alloc_header_common>
 800e5ec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00c      	beq.n	800e60e <tcp_rst+0x9e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	6939      	ldr	r1, [r7, #16]
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7ff ff02 	bl	800e404 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	6939      	ldr	r1, [r7, #16]
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f7ff ff4a 	bl	800e4a0 <tcp_output_control_segment>
 800e60c:	e000      	b.n	800e610 <tcp_rst+0xa0>
    return;
 800e60e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e610:	371c      	adds	r7, #28
 800e612:	46bd      	mov	sp, r7
 800e614:	bd90      	pop	{r4, r7, pc}
 800e616:	bf00      	nop
 800e618:	0801a9ec 	.word	0x0801a9ec
 800e61c:	0801b140 	.word	0x0801b140
 800e620:	0801aa28 	.word	0x0801aa28
 800e624:	0801b15c 	.word	0x0801b15c

0800e628 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b087      	sub	sp, #28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e634:	2300      	movs	r3, #0
 800e636:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10b      	bne.n	800e656 <tcp_send_empty_ack+0x2e>
 800e63e:	4b2c      	ldr	r3, [pc, #176]	; (800e6f0 <tcp_send_empty_ack+0xc8>)
 800e640:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e644:	492b      	ldr	r1, [pc, #172]	; (800e6f4 <tcp_send_empty_ack+0xcc>)
 800e646:	482c      	ldr	r0, [pc, #176]	; (800e6f8 <tcp_send_empty_ack+0xd0>)
 800e648:	f7f2 fe72 	bl	8001330 <iprintf>
 800e64c:	2000      	movs	r0, #0
 800e64e:	f009 ff13 	bl	8018478 <fflush>
 800e652:	f009 fe57 	bl	8018304 <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <tcp_send_empty_ack+0x3c>
 800e660:	2304      	movs	r3, #4
 800e662:	e000      	b.n	800e666 <tcp_send_empty_ack+0x3e>
 800e664:	2300      	movs	r3, #0
 800e666:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e668:	7d7b      	ldrb	r3, [r7, #21]
 800e66a:	b29c      	uxth	r4, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e670:	4618      	mov	r0, r3
 800e672:	f7f7 fb00 	bl	8005c76 <lwip_htonl>
 800e676:	4603      	mov	r3, r0
 800e678:	2200      	movs	r2, #0
 800e67a:	4621      	mov	r1, r4
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7ff fe7f 	bl	800e380 <tcp_output_alloc_header>
 800e682:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d109      	bne.n	800e69e <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	8b5b      	ldrh	r3, [r3, #26]
 800e68e:	f043 0303 	orr.w	r3, r3, #3
 800e692:	b29a      	uxth	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e698:	f06f 0301 	mvn.w	r3, #1
 800e69c:	e023      	b.n	800e6e6 <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e69e:	7dbb      	ldrb	r3, [r7, #22]
 800e6a0:	7dfa      	ldrb	r2, [r7, #23]
 800e6a2:	6939      	ldr	r1, [r7, #16]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff fead 	bl	800e404 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	6939      	ldr	r1, [r7, #16]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7ff fef4 	bl	800e4a0 <tcp_output_control_segment>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d007      	beq.n	800e6d4 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	8b5b      	ldrh	r3, [r3, #26]
 800e6c8:	f043 0303 	orr.w	r3, r3, #3
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	835a      	strh	r2, [r3, #26]
 800e6d2:	e006      	b.n	800e6e2 <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	8b5b      	ldrh	r3, [r3, #26]
 800e6d8:	f023 0303 	bic.w	r3, r3, #3
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	371c      	adds	r7, #28
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd90      	pop	{r4, r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801a9ec 	.word	0x0801a9ec
 800e6f4:	0801b178 	.word	0x0801b178
 800e6f8:	0801aa28 	.word	0x0801aa28

0800e6fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e6fc:	b590      	push	{r4, r7, lr}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e704:	2300      	movs	r3, #0
 800e706:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10b      	bne.n	800e726 <tcp_keepalive+0x2a>
 800e70e:	4b1b      	ldr	r3, [pc, #108]	; (800e77c <tcp_keepalive+0x80>)
 800e710:	f640 0224 	movw	r2, #2084	; 0x824
 800e714:	491a      	ldr	r1, [pc, #104]	; (800e780 <tcp_keepalive+0x84>)
 800e716:	481b      	ldr	r0, [pc, #108]	; (800e784 <tcp_keepalive+0x88>)
 800e718:	f7f2 fe0a 	bl	8001330 <iprintf>
 800e71c:	2000      	movs	r0, #0
 800e71e:	f009 feab 	bl	8018478 <fflush>
 800e722:	f009 fdef 	bl	8018304 <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e726:	7dfb      	ldrb	r3, [r7, #23]
 800e728:	b29c      	uxth	r4, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e72e:	3b01      	subs	r3, #1
 800e730:	4618      	mov	r0, r3
 800e732:	f7f7 faa0 	bl	8005c76 <lwip_htonl>
 800e736:	4603      	mov	r3, r0
 800e738:	2200      	movs	r2, #0
 800e73a:	4621      	mov	r1, r4
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fe1f 	bl	800e380 <tcp_output_alloc_header>
 800e742:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d102      	bne.n	800e750 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e74a:	f04f 33ff 	mov.w	r3, #4294967295
 800e74e:	e010      	b.n	800e772 <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	2200      	movs	r2, #0
 800e754:	6939      	ldr	r1, [r7, #16]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff fe54 	bl	800e404 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3304      	adds	r3, #4
 800e762:	6939      	ldr	r1, [r7, #16]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7ff fe9b 	bl	800e4a0 <tcp_output_control_segment>
 800e76a:	4603      	mov	r3, r0
 800e76c:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e772:	4618      	mov	r0, r3
 800e774:	371c      	adds	r7, #28
 800e776:	46bd      	mov	sp, r7
 800e778:	bd90      	pop	{r4, r7, pc}
 800e77a:	bf00      	nop
 800e77c:	0801a9ec 	.word	0x0801a9ec
 800e780:	0801b198 	.word	0x0801b198
 800e784:	0801aa28 	.word	0x0801aa28

0800e788 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e788:	b590      	push	{r4, r7, lr}
 800e78a:	b08b      	sub	sp, #44	; 0x2c
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e790:	2300      	movs	r3, #0
 800e792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10b      	bne.n	800e7b4 <tcp_zero_window_probe+0x2c>
 800e79c:	4b4f      	ldr	r3, [pc, #316]	; (800e8dc <tcp_zero_window_probe+0x154>)
 800e79e:	f640 024f 	movw	r2, #2127	; 0x84f
 800e7a2:	494f      	ldr	r1, [pc, #316]	; (800e8e0 <tcp_zero_window_probe+0x158>)
 800e7a4:	484f      	ldr	r0, [pc, #316]	; (800e8e4 <tcp_zero_window_probe+0x15c>)
 800e7a6:	f7f2 fdc3 	bl	8001330 <iprintf>
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	f009 fe64 	bl	8018478 <fflush>
 800e7b0:	f009 fda8 	bl	8018304 <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7b8:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e7ba:	6a3b      	ldr	r3, [r7, #32]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e086      	b.n	800e8d2 <tcp_zero_window_probe+0x14a>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7ca:	2bff      	cmp	r3, #255	; 0xff
 800e7cc:	d007      	beq.n	800e7de <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e7de:	6a3b      	ldr	r3, [r7, #32]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	899b      	ldrh	r3, [r3, #12]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7f7 fa30 	bl	8005c4c <lwip_htons>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	f003 0301 	and.w	r3, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d005      	beq.n	800e804 <tcp_zero_window_probe+0x7c>
 800e7f8:	6a3b      	ldr	r3, [r7, #32]
 800e7fa:	891b      	ldrh	r3, [r3, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <tcp_zero_window_probe+0x7c>
 800e800:	2301      	movs	r3, #1
 800e802:	e000      	b.n	800e806 <tcp_zero_window_probe+0x7e>
 800e804:	2300      	movs	r3, #0
 800e806:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e808:	7ffb      	ldrb	r3, [r7, #31]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	bf0c      	ite	eq
 800e80e:	2301      	moveq	r3, #1
 800e810:	2300      	movne	r3, #0
 800e812:	b2db      	uxtb	r3, r3
 800e814:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e81a:	b299      	uxth	r1, r3
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	8bba      	ldrh	r2, [r7, #28]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7ff fdab 	bl	800e380 <tcp_output_alloc_header>
 800e82a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d102      	bne.n	800e838 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e832:	f04f 33ff 	mov.w	r3, #4294967295
 800e836:	e04c      	b.n	800e8d2 <tcp_zero_window_probe+0x14a>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e83e:	7ffb      	ldrb	r3, [r7, #31]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d011      	beq.n	800e868 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	899b      	ldrh	r3, [r3, #12]
 800e848:	b29b      	uxth	r3, r3
 800e84a:	b21b      	sxth	r3, r3
 800e84c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e850:	b21c      	sxth	r4, r3
 800e852:	2011      	movs	r0, #17
 800e854:	f7f7 f9fa 	bl	8005c4c <lwip_htons>
 800e858:	4603      	mov	r3, r0
 800e85a:	b21b      	sxth	r3, r3
 800e85c:	4323      	orrs	r3, r4
 800e85e:	b21b      	sxth	r3, r3
 800e860:	b29a      	uxth	r2, r3
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	819a      	strh	r2, [r3, #12]
 800e866:	e010      	b.n	800e88a <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	3314      	adds	r3, #20
 800e86e:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e870:	6a3b      	ldr	r3, [r7, #32]
 800e872:	6858      	ldr	r0, [r3, #4]
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	891a      	ldrh	r2, [r3, #8]
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	891b      	ldrh	r3, [r3, #8]
 800e87e:	1ad3      	subs	r3, r2, r3
 800e880:	b29b      	uxth	r3, r3
 800e882:	2201      	movs	r2, #1
 800e884:	6939      	ldr	r1, [r7, #16]
 800e886:	f7f9 fb6b 	bl	8007f60 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	4618      	mov	r0, r3
 800e892:	f7f7 f9f0 	bl	8005c76 <lwip_htonl>
 800e896:	4603      	mov	r3, r0
 800e898:	3301      	adds	r3, #1
 800e89a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	da02      	bge.n	800e8ae <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	69b9      	ldr	r1, [r7, #24]
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff fda4 	bl	800e404 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	69b9      	ldr	r1, [r7, #24]
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff fdeb 	bl	800e4a0 <tcp_output_control_segment>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e8ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	372c      	adds	r7, #44	; 0x2c
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd90      	pop	{r4, r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	0801a9ec 	.word	0x0801a9ec
 800e8e0:	0801b1b4 	.word	0x0801b1b4
 800e8e4:	0801aa28 	.word	0x0801aa28

0800e8e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e8f0:	f7f9 fc36 	bl	8008160 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e8f4:	4b0a      	ldr	r3, [pc, #40]	; (800e920 <tcpip_tcp_timer+0x38>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d103      	bne.n	800e904 <tcpip_tcp_timer+0x1c>
 800e8fc:	4b09      	ldr	r3, [pc, #36]	; (800e924 <tcpip_tcp_timer+0x3c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d005      	beq.n	800e910 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e904:	2200      	movs	r2, #0
 800e906:	4908      	ldr	r1, [pc, #32]	; (800e928 <tcpip_tcp_timer+0x40>)
 800e908:	20fa      	movs	r0, #250	; 0xfa
 800e90a:	f000 f8e9 	bl	800eae0 <sys_timeout>
 800e90e:	e002      	b.n	800e916 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e910:	4b06      	ldr	r3, [pc, #24]	; (800e92c <tcpip_tcp_timer+0x44>)
 800e912:	2200      	movs	r2, #0
 800e914:	601a      	str	r2, [r3, #0]
  }
}
 800e916:	bf00      	nop
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20016f44 	.word	0x20016f44
 800e924:	20016f54 	.word	0x20016f54
 800e928:	0800e8e9 	.word	0x0800e8e9
 800e92c:	200002cc 	.word	0x200002cc

0800e930 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e934:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <tcp_timer_needed+0x30>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10f      	bne.n	800e95c <tcp_timer_needed+0x2c>
 800e93c:	4b09      	ldr	r3, [pc, #36]	; (800e964 <tcp_timer_needed+0x34>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d103      	bne.n	800e94c <tcp_timer_needed+0x1c>
 800e944:	4b08      	ldr	r3, [pc, #32]	; (800e968 <tcp_timer_needed+0x38>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d007      	beq.n	800e95c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e94c:	4b04      	ldr	r3, [pc, #16]	; (800e960 <tcp_timer_needed+0x30>)
 800e94e:	2201      	movs	r2, #1
 800e950:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e952:	2200      	movs	r2, #0
 800e954:	4905      	ldr	r1, [pc, #20]	; (800e96c <tcp_timer_needed+0x3c>)
 800e956:	20fa      	movs	r0, #250	; 0xfa
 800e958:	f000 f8c2 	bl	800eae0 <sys_timeout>
  }
}
 800e95c:	bf00      	nop
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	200002cc 	.word	0x200002cc
 800e964:	20016f44 	.word	0x20016f44
 800e968:	20016f54 	.word	0x20016f54
 800e96c:	0800e8e9 	.word	0x0800e8e9

0800e970 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e97c:	200a      	movs	r0, #10
 800e97e:	f7f8 fa27 	bl	8006dd0 <memp_malloc>
 800e982:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d10d      	bne.n	800e9a6 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d14d      	bne.n	800ea2c <sys_timeout_abs+0xbc>
 800e990:	4b28      	ldr	r3, [pc, #160]	; (800ea34 <sys_timeout_abs+0xc4>)
 800e992:	22be      	movs	r2, #190	; 0xbe
 800e994:	4928      	ldr	r1, [pc, #160]	; (800ea38 <sys_timeout_abs+0xc8>)
 800e996:	4829      	ldr	r0, [pc, #164]	; (800ea3c <sys_timeout_abs+0xcc>)
 800e998:	f7f2 fcca 	bl	8001330 <iprintf>
 800e99c:	2000      	movs	r0, #0
 800e99e:	f009 fd6b 	bl	8018478 <fflush>
 800e9a2:	f009 fcaf 	bl	8018304 <abort>
    return;
  }

  timeout->next = NULL;
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e9be:	4b20      	ldr	r3, [pc, #128]	; (800ea40 <sys_timeout_abs+0xd0>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d103      	bne.n	800e9ce <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800e9c6:	4a1e      	ldr	r2, [pc, #120]	; (800ea40 <sys_timeout_abs+0xd0>)
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	6013      	str	r3, [r2, #0]
    return;
 800e9cc:	e02f      	b.n	800ea2e <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ea40 <sys_timeout_abs+0xd0>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	da07      	bge.n	800e9ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e9de:	4b18      	ldr	r3, [pc, #96]	; (800ea40 <sys_timeout_abs+0xd0>)
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e9e6:	4a16      	ldr	r2, [pc, #88]	; (800ea40 <sys_timeout_abs+0xd0>)
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	6013      	str	r3, [r2, #0]
 800e9ec:	e01f      	b.n	800ea2e <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e9ee:	4b14      	ldr	r3, [pc, #80]	; (800ea40 <sys_timeout_abs+0xd0>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	e016      	b.n	800ea24 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <sys_timeout_abs+0x9e>
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	da07      	bge.n	800ea1e <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	601a      	str	r2, [r3, #0]
        break;
 800ea1c:	e007      	b.n	800ea2e <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	617b      	str	r3, [r7, #20]
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1e5      	bne.n	800e9f6 <sys_timeout_abs+0x86>
 800ea2a:	e000      	b.n	800ea2e <sys_timeout_abs+0xbe>
    return;
 800ea2c:	bf00      	nop
      }
    }
  }
}
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	0801b1d8 	.word	0x0801b1d8
 800ea38:	0801b1f4 	.word	0x0801b1f4
 800ea3c:	0801b234 	.word	0x0801b234
 800ea40:	200002c4 	.word	0x200002c4

0800ea44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	4798      	blx	r3

  now = sys_now();
 800ea56:	f004 fdfa 	bl	801364e <sys_now>
 800ea5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	4b0d      	ldr	r3, [pc, #52]	; (800ea98 <lwip_cyclic_timer+0x54>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4413      	add	r3, r2
 800ea66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	da09      	bge.n	800ea86 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	4413      	add	r3, r2
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	4907      	ldr	r1, [pc, #28]	; (800ea9c <lwip_cyclic_timer+0x58>)
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff ff76 	bl	800e970 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ea84:	e004      	b.n	800ea90 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	4904      	ldr	r1, [pc, #16]	; (800ea9c <lwip_cyclic_timer+0x58>)
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f7ff ff70 	bl	800e970 <sys_timeout_abs>
}
 800ea90:	bf00      	nop
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	200002c8 	.word	0x200002c8
 800ea9c:	0800ea45 	.word	0x0800ea45

0800eaa0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	e00e      	b.n	800eaca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eaac:	4a0a      	ldr	r2, [pc, #40]	; (800ead8 <sys_timeouts_init+0x38>)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	00db      	lsls	r3, r3, #3
 800eab8:	4a07      	ldr	r2, [pc, #28]	; (800ead8 <sys_timeouts_init+0x38>)
 800eaba:	4413      	add	r3, r2
 800eabc:	461a      	mov	r2, r3
 800eabe:	4907      	ldr	r1, [pc, #28]	; (800eadc <sys_timeouts_init+0x3c>)
 800eac0:	f000 f80e 	bl	800eae0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3301      	adds	r3, #1
 800eac8:	607b      	str	r3, [r7, #4]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b04      	cmp	r3, #4
 800eace:	d9ed      	bls.n	800eaac <sys_timeouts_init+0xc>
  }
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	0801c7c4 	.word	0x0801c7c4
 800eadc:	0800ea45 	.word	0x0800ea45

0800eae0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaf2:	d30b      	bcc.n	800eb0c <sys_timeout+0x2c>
 800eaf4:	4b0d      	ldr	r3, [pc, #52]	; (800eb2c <sys_timeout+0x4c>)
 800eaf6:	f240 1229 	movw	r2, #297	; 0x129
 800eafa:	490d      	ldr	r1, [pc, #52]	; (800eb30 <sys_timeout+0x50>)
 800eafc:	480d      	ldr	r0, [pc, #52]	; (800eb34 <sys_timeout+0x54>)
 800eafe:	f7f2 fc17 	bl	8001330 <iprintf>
 800eb02:	2000      	movs	r0, #0
 800eb04:	f009 fcb8 	bl	8018478 <fflush>
 800eb08:	f009 fbfc 	bl	8018304 <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eb0c:	f004 fd9f 	bl	801364e <sys_now>
 800eb10:	4602      	mov	r2, r0
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	4413      	add	r3, r2
 800eb16:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	68b9      	ldr	r1, [r7, #8]
 800eb1c:	6978      	ldr	r0, [r7, #20]
 800eb1e:	f7ff ff27 	bl	800e970 <sys_timeout_abs>
#endif
}
 800eb22:	bf00      	nop
 800eb24:	3718      	adds	r7, #24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	0801b1d8 	.word	0x0801b1d8
 800eb30:	0801b25c 	.word	0x0801b25c
 800eb34:	0801b234 	.word	0x0801b234

0800eb38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eb3e:	f004 fd86 	bl	801364e <sys_now>
 800eb42:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800eb44:	4b15      	ldr	r3, [pc, #84]	; (800eb9c <sys_check_timeouts+0x64>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d01e      	beq.n	800eb8e <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	db1a      	blt.n	800eb92 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a0e      	ldr	r2, [pc, #56]	; (800eb9c <sys_check_timeouts+0x64>)
 800eb62:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	4a0a      	ldr	r2, [pc, #40]	; (800eba0 <sys_check_timeouts+0x68>)
 800eb76:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eb78:	68b9      	ldr	r1, [r7, #8]
 800eb7a:	200a      	movs	r0, #10
 800eb7c:	f7f8 f972 	bl	8006e64 <memp_free>
    if (handler != NULL) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d0de      	beq.n	800eb44 <sys_check_timeouts+0xc>
      handler(arg);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6838      	ldr	r0, [r7, #0]
 800eb8a:	4798      	blx	r3
  do {
 800eb8c:	e7da      	b.n	800eb44 <sys_check_timeouts+0xc>
      return;
 800eb8e:	bf00      	nop
 800eb90:	e000      	b.n	800eb94 <sys_check_timeouts+0x5c>
      return;
 800eb92:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	200002c4 	.word	0x200002c4
 800eba0:	200002c8 	.word	0x200002c8

0800eba4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ebaa:	4b16      	ldr	r3, [pc, #88]	; (800ec04 <sys_timeouts_sleeptime+0x60>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d102      	bne.n	800ebb8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ebb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb6:	e021      	b.n	800ebfc <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 800ebb8:	f004 fd49 	bl	801364e <sys_now>
 800ebbc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ebbe:	4b11      	ldr	r3, [pc, #68]	; (800ec04 <sys_timeouts_sleeptime+0x60>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	da01      	bge.n	800ebd0 <sys_timeouts_sleeptime+0x2c>
    return 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e015      	b.n	800ebfc <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ebd0:	4b0c      	ldr	r3, [pc, #48]	; (800ec04 <sys_timeouts_sleeptime+0x60>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	da0b      	bge.n	800ebfa <sys_timeouts_sleeptime+0x56>
 800ebe2:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <sys_timeouts_sleeptime+0x64>)
 800ebe4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ebe8:	4908      	ldr	r1, [pc, #32]	; (800ec0c <sys_timeouts_sleeptime+0x68>)
 800ebea:	4809      	ldr	r0, [pc, #36]	; (800ec10 <sys_timeouts_sleeptime+0x6c>)
 800ebec:	f7f2 fba0 	bl	8001330 <iprintf>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f009 fc41 	bl	8018478 <fflush>
 800ebf6:	f009 fb85 	bl	8018304 <abort>
    return ret;
 800ebfa:	683b      	ldr	r3, [r7, #0]
  }
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	200002c4 	.word	0x200002c4
 800ec08:	0801b1d8 	.word	0x0801b1d8
 800ec0c:	0801b294 	.word	0x0801b294
 800ec10:	0801b234 	.word	0x0801b234

0800ec14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ec14:	b480      	push	{r7}
 800ec16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 800ec18:	bf00      	nop
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
	...

0800ec24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ec2e:	4b17      	ldr	r3, [pc, #92]	; (800ec8c <udp_new_port+0x68>)
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	1c5a      	adds	r2, r3, #1
 800ec34:	b291      	uxth	r1, r2
 800ec36:	4a15      	ldr	r2, [pc, #84]	; (800ec8c <udp_new_port+0x68>)
 800ec38:	8011      	strh	r1, [r2, #0]
 800ec3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d103      	bne.n	800ec4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ec42:	4b12      	ldr	r3, [pc, #72]	; (800ec8c <udp_new_port+0x68>)
 800ec44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ec48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec4a:	4b11      	ldr	r3, [pc, #68]	; (800ec90 <udp_new_port+0x6c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	603b      	str	r3, [r7, #0]
 800ec50:	e011      	b.n	800ec76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	8a5a      	ldrh	r2, [r3, #18]
 800ec56:	4b0d      	ldr	r3, [pc, #52]	; (800ec8c <udp_new_port+0x68>)
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d108      	bne.n	800ec70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ec5e:	88fb      	ldrh	r3, [r7, #6]
 800ec60:	3301      	adds	r3, #1
 800ec62:	80fb      	strh	r3, [r7, #6]
 800ec64:	88fb      	ldrh	r3, [r7, #6]
 800ec66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec6a:	d3e0      	bcc.n	800ec2e <udp_new_port+0xa>
        return 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	e007      	b.n	800ec80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	603b      	str	r3, [r7, #0]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1ea      	bne.n	800ec52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ec7c:	4b03      	ldr	r3, [pc, #12]	; (800ec8c <udp_new_port+0x68>)
 800ec7e:	881b      	ldrh	r3, [r3, #0]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	20000014 	.word	0x20000014
 800ec90:	20016f5c 	.word	0x20016f5c

0800ec94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d10a      	bne.n	800ecbe <udp_input_local_match+0x2a>
 800eca8:	4b2c      	ldr	r3, [pc, #176]	; (800ed5c <udp_input_local_match+0xc8>)
 800ecaa:	2287      	movs	r2, #135	; 0x87
 800ecac:	492c      	ldr	r1, [pc, #176]	; (800ed60 <udp_input_local_match+0xcc>)
 800ecae:	482d      	ldr	r0, [pc, #180]	; (800ed64 <udp_input_local_match+0xd0>)
 800ecb0:	f7f2 fb3e 	bl	8001330 <iprintf>
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	f009 fbdf 	bl	8018478 <fflush>
 800ecba:	f009 fb23 	bl	8018304 <abort>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d10a      	bne.n	800ecda <udp_input_local_match+0x46>
 800ecc4:	4b25      	ldr	r3, [pc, #148]	; (800ed5c <udp_input_local_match+0xc8>)
 800ecc6:	2288      	movs	r2, #136	; 0x88
 800ecc8:	4927      	ldr	r1, [pc, #156]	; (800ed68 <udp_input_local_match+0xd4>)
 800ecca:	4826      	ldr	r0, [pc, #152]	; (800ed64 <udp_input_local_match+0xd0>)
 800eccc:	f7f2 fb30 	bl	8001330 <iprintf>
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f009 fbd1 	bl	8018478 <fflush>
 800ecd6:	f009 fb15 	bl	8018304 <abort>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	7a1b      	ldrb	r3, [r3, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00b      	beq.n	800ecfa <udp_input_local_match+0x66>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	7a1a      	ldrb	r2, [r3, #8]
 800ece6:	4b21      	ldr	r3, [pc, #132]	; (800ed6c <udp_input_local_match+0xd8>)
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecee:	3301      	adds	r3, #1
 800ecf0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d001      	beq.n	800ecfa <udp_input_local_match+0x66>
    return 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e02b      	b.n	800ed52 <udp_input_local_match+0xbe>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ecfa:	79fb      	ldrb	r3, [r7, #7]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d018      	beq.n	800ed32 <udp_input_local_match+0x9e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d013      	beq.n	800ed2e <udp_input_local_match+0x9a>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00f      	beq.n	800ed2e <udp_input_local_match+0x9a>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed0e:	4b17      	ldr	r3, [pc, #92]	; (800ed6c <udp_input_local_match+0xd8>)
 800ed10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed16:	d00a      	beq.n	800ed2e <udp_input_local_match+0x9a>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	4b13      	ldr	r3, [pc, #76]	; (800ed6c <udp_input_local_match+0xd8>)
 800ed1e:	695b      	ldr	r3, [r3, #20]
 800ed20:	405a      	eors	r2, r3
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	3308      	adds	r3, #8
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d110      	bne.n	800ed50 <udp_input_local_match+0xbc>
          return 1;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e00f      	b.n	800ed52 <udp_input_local_match+0xbe>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d009      	beq.n	800ed4c <udp_input_local_match+0xb8>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d005      	beq.n	800ed4c <udp_input_local_match+0xb8>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	4b09      	ldr	r3, [pc, #36]	; (800ed6c <udp_input_local_match+0xd8>)
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d101      	bne.n	800ed50 <udp_input_local_match+0xbc>
        return 1;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e000      	b.n	800ed52 <udp_input_local_match+0xbe>
      }
  }

  return 0;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	0801b2a8 	.word	0x0801b2a8
 800ed60:	0801b2c0 	.word	0x0801b2c0
 800ed64:	0801b2e4 	.word	0x0801b2e4
 800ed68:	0801b30c 	.word	0x0801b30c
 800ed6c:	20013770 	.word	0x20013770

0800ed70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ed70:	b590      	push	{r4, r7, lr}
 800ed72:	b08d      	sub	sp, #52	; 0x34
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10a      	bne.n	800ed9a <udp_input+0x2a>
 800ed84:	4ba1      	ldr	r3, [pc, #644]	; (800f00c <udp_input+0x29c>)
 800ed86:	22cf      	movs	r2, #207	; 0xcf
 800ed88:	49a1      	ldr	r1, [pc, #644]	; (800f010 <udp_input+0x2a0>)
 800ed8a:	48a2      	ldr	r0, [pc, #648]	; (800f014 <udp_input+0x2a4>)
 800ed8c:	f7f2 fad0 	bl	8001330 <iprintf>
 800ed90:	2000      	movs	r0, #0
 800ed92:	f009 fb71 	bl	8018478 <fflush>
 800ed96:	f009 fab5 	bl	8018304 <abort>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d10a      	bne.n	800edb6 <udp_input+0x46>
 800eda0:	4b9a      	ldr	r3, [pc, #616]	; (800f00c <udp_input+0x29c>)
 800eda2:	22d0      	movs	r2, #208	; 0xd0
 800eda4:	499c      	ldr	r1, [pc, #624]	; (800f018 <udp_input+0x2a8>)
 800eda6:	489b      	ldr	r0, [pc, #620]	; (800f014 <udp_input+0x2a4>)
 800eda8:	f7f2 fac2 	bl	8001330 <iprintf>
 800edac:	2000      	movs	r0, #0
 800edae:	f009 fb63 	bl	8018478 <fflush>
 800edb2:	f009 faa7 	bl	8018304 <abort>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800edb6:	4b99      	ldr	r3, [pc, #612]	; (800f01c <udp_input+0x2ac>)
 800edb8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800edbc:	3301      	adds	r3, #1
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	4b96      	ldr	r3, [pc, #600]	; (800f01c <udp_input+0x2ac>)
 800edc2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	895b      	ldrh	r3, [r3, #10]
 800edca:	2b07      	cmp	r3, #7
 800edcc:	d813      	bhi.n	800edf6 <udp_input+0x86>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800edce:	4b93      	ldr	r3, [pc, #588]	; (800f01c <udp_input+0x2ac>)
 800edd0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800edd4:	3301      	adds	r3, #1
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	4b90      	ldr	r3, [pc, #576]	; (800f01c <udp_input+0x2ac>)
 800edda:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800edde:	4b8f      	ldr	r3, [pc, #572]	; (800f01c <udp_input+0x2ac>)
 800ede0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800ede4:	3301      	adds	r3, #1
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	4b8c      	ldr	r3, [pc, #560]	; (800f01c <udp_input+0x2ac>)
 800edea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7f8 fe76 	bl	8007ae0 <pbuf_free>
    goto end;
 800edf4:	e108      	b.n	800f008 <udp_input+0x298>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800edfc:	4b88      	ldr	r3, [pc, #544]	; (800f020 <udp_input+0x2b0>)
 800edfe:	695a      	ldr	r2, [r3, #20]
 800ee00:	4b87      	ldr	r3, [pc, #540]	; (800f020 <udp_input+0x2b0>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4619      	mov	r1, r3
 800ee06:	4610      	mov	r0, r2
 800ee08:	f7f6 f806 	bl	8004e18 <ip4_addr_isbroadcast_u32>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	881b      	ldrh	r3, [r3, #0]
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7f6 ff18 	bl	8005c4c <lwip_htons>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	885b      	ldrh	r3, [r3, #2]
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7f6 ff10 	bl	8005c4c <lwip_htons>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ee30:	2300      	movs	r3, #0
 800ee32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee3c:	4b79      	ldr	r3, [pc, #484]	; (800f024 <udp_input+0x2b4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	627b      	str	r3, [r7, #36]	; 0x24
 800ee42:	e05d      	b.n	800ef00 <udp_input+0x190>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	8a5b      	ldrh	r3, [r3, #18]
 800ee48:	89fa      	ldrh	r2, [r7, #14]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d153      	bne.n	800eef6 <udp_input+0x186>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ee4e:	7cfb      	ldrb	r3, [r7, #19]
 800ee50:	461a      	mov	r2, r3
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee56:	f7ff ff1d 	bl	800ec94 <udp_input_local_match>
 800ee5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d04a      	beq.n	800eef6 <udp_input+0x186>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	7c1b      	ldrb	r3, [r3, #16]
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d11d      	bne.n	800eea8 <udp_input+0x138>
        if (uncon_pcb == NULL) {
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d102      	bne.n	800ee78 <udp_input+0x108>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ee72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee74:	61fb      	str	r3, [r7, #28]
 800ee76:	e017      	b.n	800eea8 <udp_input+0x138>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ee78:	7cfb      	ldrb	r3, [r7, #19]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d014      	beq.n	800eea8 <udp_input+0x138>
 800ee7e:	4b68      	ldr	r3, [pc, #416]	; (800f020 <udp_input+0x2b0>)
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee86:	d10f      	bne.n	800eea8 <udp_input+0x138>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d008      	beq.n	800eea8 <udp_input+0x138>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d101      	bne.n	800eea8 <udp_input+0x138>
              /* better match */
              uncon_pcb = pcb;
 800eea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeaa:	8a9b      	ldrh	r3, [r3, #20]
 800eeac:	8a3a      	ldrh	r2, [r7, #16]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d121      	bne.n	800eef6 <udp_input+0x186>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d005      	beq.n	800eec6 <udp_input+0x156>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	4b58      	ldr	r3, [pc, #352]	; (800f020 <udp_input+0x2b0>)
 800eec0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d117      	bne.n	800eef6 <udp_input+0x186>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eec6:	6a3b      	ldr	r3, [r7, #32]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00b      	beq.n	800eee4 <udp_input+0x174>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	68da      	ldr	r2, [r3, #12]
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800eed4:	4b53      	ldr	r3, [pc, #332]	; (800f024 <udp_input+0x2b4>)
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eedc:	4a51      	ldr	r2, [pc, #324]	; (800f024 <udp_input+0x2b4>)
 800eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eee2:	e010      	b.n	800ef06 <udp_input+0x196>
          UDP_STATS_INC(udp.cachehit);
 800eee4:	4b4d      	ldr	r3, [pc, #308]	; (800f01c <udp_input+0x2ac>)
 800eee6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800eeea:	3301      	adds	r3, #1
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	4b4b      	ldr	r3, [pc, #300]	; (800f01c <udp_input+0x2ac>)
 800eef0:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800eef4:	e007      	b.n	800ef06 <udp_input+0x196>
      }
    }

    prev = pcb;
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	627b      	str	r3, [r7, #36]	; 0x24
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d19e      	bne.n	800ee44 <udp_input+0xd4>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ef06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <udp_input+0x1a0>
    pcb = uncon_pcb;
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d002      	beq.n	800ef1c <udp_input+0x1ac>
    for_us = 1;
 800ef16:	2301      	movs	r3, #1
 800ef18:	76fb      	strb	r3, [r7, #27]
 800ef1a:	e00a      	b.n	800ef32 <udp_input+0x1c2>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	3304      	adds	r3, #4
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	4b3f      	ldr	r3, [pc, #252]	; (800f020 <udp_input+0x2b0>)
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	bf0c      	ite	eq
 800ef2a:	2301      	moveq	r3, #1
 800ef2c:	2300      	movne	r3, #0
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ef32:	7efb      	ldrb	r3, [r7, #27]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d063      	beq.n	800f000 <udp_input+0x290>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	88db      	ldrh	r3, [r3, #6]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00b      	beq.n	800ef5a <udp_input+0x1ea>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	891a      	ldrh	r2, [r3, #8]
 800ef46:	4b38      	ldr	r3, [pc, #224]	; (800f028 <udp_input+0x2b8>)
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4b38      	ldr	r3, [pc, #224]	; (800f02c <udp_input+0x2bc>)
 800ef4c:	2111      	movs	r1, #17
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7f7 f9bc 	bl	80062cc <ip_chksum_pseudo>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d16c      	bne.n	800f034 <udp_input+0x2c4>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ef5a:	2108      	movs	r1, #8
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7f8 fcff 	bl	8007960 <pbuf_remove_header>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00b      	beq.n	800ef80 <udp_input+0x210>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ef68:	4b28      	ldr	r3, [pc, #160]	; (800f00c <udp_input+0x29c>)
 800ef6a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ef6e:	4930      	ldr	r1, [pc, #192]	; (800f030 <udp_input+0x2c0>)
 800ef70:	4828      	ldr	r0, [pc, #160]	; (800f014 <udp_input+0x2a4>)
 800ef72:	f7f2 f9dd 	bl	8001330 <iprintf>
 800ef76:	2000      	movs	r0, #0
 800ef78:	f009 fa7e 	bl	8018478 <fflush>
 800ef7c:	f009 f9c2 	bl	8018304 <abort>
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }

    if (pcb != NULL) {
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d012      	beq.n	800efac <udp_input+0x23c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00a      	beq.n	800efa4 <udp_input+0x234>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef90:	699c      	ldr	r4, [r3, #24]
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	69d8      	ldr	r0, [r3, #28]
 800ef96:	8a3b      	ldrh	r3, [r7, #16]
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	4b24      	ldr	r3, [pc, #144]	; (800f02c <udp_input+0x2bc>)
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efa0:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800efa2:	e05b      	b.n	800f05c <udp_input+0x2ec>
        pbuf_free(p);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7f8 fd9b 	bl	8007ae0 <pbuf_free>
        goto end;
 800efaa:	e02d      	b.n	800f008 <udp_input+0x298>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800efac:	7cfb      	ldrb	r3, [r7, #19]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d112      	bne.n	800efd8 <udp_input+0x268>
 800efb2:	4b1b      	ldr	r3, [pc, #108]	; (800f020 <udp_input+0x2b0>)
 800efb4:	695b      	ldr	r3, [r3, #20]
 800efb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efba:	2be0      	cmp	r3, #224	; 0xe0
 800efbc:	d00c      	beq.n	800efd8 <udp_input+0x268>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800efbe:	4b18      	ldr	r3, [pc, #96]	; (800f020 <udp_input+0x2b0>)
 800efc0:	899b      	ldrh	r3, [r3, #12]
 800efc2:	3308      	adds	r3, #8
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	b21b      	sxth	r3, r3
 800efc8:	4619      	mov	r1, r3
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7f8 fd43 	bl	8007a56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800efd0:	2103      	movs	r1, #3
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7f5 fad2 	bl	800457c <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800efd8:	4b10      	ldr	r3, [pc, #64]	; (800f01c <udp_input+0x2ac>)
 800efda:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800efde:	3301      	adds	r3, #1
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	4b0e      	ldr	r3, [pc, #56]	; (800f01c <udp_input+0x2ac>)
 800efe4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800efe8:	4b0c      	ldr	r3, [pc, #48]	; (800f01c <udp_input+0x2ac>)
 800efea:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800efee:	3301      	adds	r3, #1
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	4b0a      	ldr	r3, [pc, #40]	; (800f01c <udp_input+0x2ac>)
 800eff4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7f8 fd71 	bl	8007ae0 <pbuf_free>
  return;
 800effe:	e02d      	b.n	800f05c <udp_input+0x2ec>
    pbuf_free(p);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7f8 fd6d 	bl	8007ae0 <pbuf_free>
  return;
 800f006:	e029      	b.n	800f05c <udp_input+0x2ec>
 800f008:	e028      	b.n	800f05c <udp_input+0x2ec>
 800f00a:	bf00      	nop
 800f00c:	0801b2a8 	.word	0x0801b2a8
 800f010:	0801b334 	.word	0x0801b334
 800f014:	0801b2e4 	.word	0x0801b2e4
 800f018:	0801b34c 	.word	0x0801b34c
 800f01c:	20016e44 	.word	0x20016e44
 800f020:	20013770 	.word	0x20013770
 800f024:	20016f5c 	.word	0x20016f5c
 800f028:	20013784 	.word	0x20013784
 800f02c:	20013780 	.word	0x20013780
 800f030:	0801b368 	.word	0x0801b368
            goto chkerr;
 800f034:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800f036:	4b0b      	ldr	r3, [pc, #44]	; (800f064 <udp_input+0x2f4>)
 800f038:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f03c:	3301      	adds	r3, #1
 800f03e:	b29a      	uxth	r2, r3
 800f040:	4b08      	ldr	r3, [pc, #32]	; (800f064 <udp_input+0x2f4>)
 800f042:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 800f046:	4b07      	ldr	r3, [pc, #28]	; (800f064 <udp_input+0x2f4>)
 800f048:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800f04c:	3301      	adds	r3, #1
 800f04e:	b29a      	uxth	r2, r3
 800f050:	4b04      	ldr	r3, [pc, #16]	; (800f064 <udp_input+0x2f4>)
 800f052:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7f8 fd42 	bl	8007ae0 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f05c:	372c      	adds	r7, #44	; 0x2c
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd90      	pop	{r4, r7, pc}
 800f062:	bf00      	nop
 800f064:	20016e44 	.word	0x20016e44

0800f068 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10b      	bne.n	800f090 <udp_send+0x28>
 800f078:	4b13      	ldr	r3, [pc, #76]	; (800f0c8 <udp_send+0x60>)
 800f07a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f07e:	4913      	ldr	r1, [pc, #76]	; (800f0cc <udp_send+0x64>)
 800f080:	4813      	ldr	r0, [pc, #76]	; (800f0d0 <udp_send+0x68>)
 800f082:	f7f2 f955 	bl	8001330 <iprintf>
 800f086:	2000      	movs	r0, #0
 800f088:	f009 f9f6 	bl	8018478 <fflush>
 800f08c:	f009 f93a 	bl	8018304 <abort>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10b      	bne.n	800f0ae <udp_send+0x46>
 800f096:	4b0c      	ldr	r3, [pc, #48]	; (800f0c8 <udp_send+0x60>)
 800f098:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800f09c:	490d      	ldr	r1, [pc, #52]	; (800f0d4 <udp_send+0x6c>)
 800f09e:	480c      	ldr	r0, [pc, #48]	; (800f0d0 <udp_send+0x68>)
 800f0a0:	f7f2 f946 	bl	8001330 <iprintf>
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	f009 f9e7 	bl	8018478 <fflush>
 800f0aa:	f009 f92b 	bl	8018304 <abort>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	1d1a      	adds	r2, r3, #4
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	8a9b      	ldrh	r3, [r3, #20]
 800f0b6:	6839      	ldr	r1, [r7, #0]
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f80d 	bl	800f0d8 <udp_sendto>
 800f0be:	4603      	mov	r3, r0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	0801b2a8 	.word	0x0801b2a8
 800f0cc:	0801b384 	.word	0x0801b384
 800f0d0:	0801b2e4 	.word	0x0801b2e4
 800f0d4:	0801b39c 	.word	0x0801b39c

0800f0d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b088      	sub	sp, #32
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10b      	bne.n	800f104 <udp_sendto+0x2c>
 800f0ec:	4b2a      	ldr	r3, [pc, #168]	; (800f198 <udp_sendto+0xc0>)
 800f0ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f0f2:	492a      	ldr	r1, [pc, #168]	; (800f19c <udp_sendto+0xc4>)
 800f0f4:	482a      	ldr	r0, [pc, #168]	; (800f1a0 <udp_sendto+0xc8>)
 800f0f6:	f7f2 f91b 	bl	8001330 <iprintf>
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	f009 f9bc 	bl	8018478 <fflush>
 800f100:	f009 f900 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10b      	bne.n	800f122 <udp_sendto+0x4a>
 800f10a:	4b23      	ldr	r3, [pc, #140]	; (800f198 <udp_sendto+0xc0>)
 800f10c:	f240 2219 	movw	r2, #537	; 0x219
 800f110:	4924      	ldr	r1, [pc, #144]	; (800f1a4 <udp_sendto+0xcc>)
 800f112:	4823      	ldr	r0, [pc, #140]	; (800f1a0 <udp_sendto+0xc8>)
 800f114:	f7f2 f90c 	bl	8001330 <iprintf>
 800f118:	2000      	movs	r0, #0
 800f11a:	f009 f9ad 	bl	8018478 <fflush>
 800f11e:	f009 f8f1 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d10b      	bne.n	800f140 <udp_sendto+0x68>
 800f128:	4b1b      	ldr	r3, [pc, #108]	; (800f198 <udp_sendto+0xc0>)
 800f12a:	f240 221a 	movw	r2, #538	; 0x21a
 800f12e:	491e      	ldr	r1, [pc, #120]	; (800f1a8 <udp_sendto+0xd0>)
 800f130:	481b      	ldr	r0, [pc, #108]	; (800f1a0 <udp_sendto+0xc8>)
 800f132:	f7f2 f8fd 	bl	8001330 <iprintf>
 800f136:	2000      	movs	r0, #0
 800f138:	f009 f99e 	bl	8018478 <fflush>
 800f13c:	f009 f8e2 	bl	8018304 <abort>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	7a1b      	ldrb	r3, [r3, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d006      	beq.n	800f156 <udp_sendto+0x7e>
    netif = netif_get_by_index(pcb->netif_idx);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	7a1b      	ldrb	r3, [r3, #8]
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7f8 f925 	bl	800739c <netif_get_by_index>
 800f152:	6178      	str	r0, [r7, #20]
 800f154:	e003      	b.n	800f15e <udp_sendto+0x86>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7f5 fab2 	bl	80046c0 <ip4_route>
 800f15c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d10a      	bne.n	800f17a <udp_sendto+0xa2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800f164:	4b11      	ldr	r3, [pc, #68]	; (800f1ac <udp_sendto+0xd4>)
 800f166:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f16a:	3301      	adds	r3, #1
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	4b0f      	ldr	r3, [pc, #60]	; (800f1ac <udp_sendto+0xd4>)
 800f170:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 800f174:	f06f 0303 	mvn.w	r3, #3
 800f178:	e009      	b.n	800f18e <udp_sendto+0xb6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f17a:	887a      	ldrh	r2, [r7, #2]
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	4613      	mov	r3, r2
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	68b9      	ldr	r1, [r7, #8]
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 f812 	bl	800f1b0 <udp_sendto_if>
 800f18c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3718      	adds	r7, #24
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	0801b2a8 	.word	0x0801b2a8
 800f19c:	0801b3b4 	.word	0x0801b3b4
 800f1a0:	0801b2e4 	.word	0x0801b2e4
 800f1a4:	0801b3cc 	.word	0x0801b3cc
 800f1a8:	0801b3e8 	.word	0x0801b3e8
 800f1ac:	20016e44 	.word	0x20016e44

0800f1b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
 800f1bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10b      	bne.n	800f1dc <udp_sendto_if+0x2c>
 800f1c4:	4b32      	ldr	r3, [pc, #200]	; (800f290 <udp_sendto_if+0xe0>)
 800f1c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1ca:	4932      	ldr	r1, [pc, #200]	; (800f294 <udp_sendto_if+0xe4>)
 800f1cc:	4832      	ldr	r0, [pc, #200]	; (800f298 <udp_sendto_if+0xe8>)
 800f1ce:	f7f2 f8af 	bl	8001330 <iprintf>
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	f009 f950 	bl	8018478 <fflush>
 800f1d8:	f009 f894 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10b      	bne.n	800f1fa <udp_sendto_if+0x4a>
 800f1e2:	4b2b      	ldr	r3, [pc, #172]	; (800f290 <udp_sendto_if+0xe0>)
 800f1e4:	f240 2281 	movw	r2, #641	; 0x281
 800f1e8:	492c      	ldr	r1, [pc, #176]	; (800f29c <udp_sendto_if+0xec>)
 800f1ea:	482b      	ldr	r0, [pc, #172]	; (800f298 <udp_sendto_if+0xe8>)
 800f1ec:	f7f2 f8a0 	bl	8001330 <iprintf>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	f009 f941 	bl	8018478 <fflush>
 800f1f6:	f009 f885 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10b      	bne.n	800f218 <udp_sendto_if+0x68>
 800f200:	4b23      	ldr	r3, [pc, #140]	; (800f290 <udp_sendto_if+0xe0>)
 800f202:	f240 2282 	movw	r2, #642	; 0x282
 800f206:	4926      	ldr	r1, [pc, #152]	; (800f2a0 <udp_sendto_if+0xf0>)
 800f208:	4823      	ldr	r0, [pc, #140]	; (800f298 <udp_sendto_if+0xe8>)
 800f20a:	f7f2 f891 	bl	8001330 <iprintf>
 800f20e:	2000      	movs	r0, #0
 800f210:	f009 f932 	bl	8018478 <fflush>
 800f214:	f009 f876 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f218:	6a3b      	ldr	r3, [r7, #32]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10b      	bne.n	800f236 <udp_sendto_if+0x86>
 800f21e:	4b1c      	ldr	r3, [pc, #112]	; (800f290 <udp_sendto_if+0xe0>)
 800f220:	f240 2283 	movw	r2, #643	; 0x283
 800f224:	491f      	ldr	r1, [pc, #124]	; (800f2a4 <udp_sendto_if+0xf4>)
 800f226:	481c      	ldr	r0, [pc, #112]	; (800f298 <udp_sendto_if+0xe8>)
 800f228:	f7f2 f882 	bl	8001330 <iprintf>
 800f22c:	2000      	movs	r0, #0
 800f22e:	f009 f923 	bl	8018478 <fflush>
 800f232:	f009 f867 	bl	8018304 <abort>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d009      	beq.n	800f250 <udp_sendto_if+0xa0>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d005      	beq.n	800f250 <udp_sendto_if+0xa0>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f24c:	2be0      	cmp	r3, #224	; 0xe0
 800f24e:	d103      	bne.n	800f258 <udp_sendto_if+0xa8>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	3304      	adds	r3, #4
 800f254:	617b      	str	r3, [r7, #20]
 800f256:	e00b      	b.n	800f270 <udp_sendto_if+0xc0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	3304      	adds	r3, #4
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	429a      	cmp	r2, r3
 800f264:	d002      	beq.n	800f26c <udp_sendto_if+0xbc>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f266:	f06f 0303 	mvn.w	r3, #3
 800f26a:	e00d      	b.n	800f288 <udp_sendto_if+0xd8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f270:	887a      	ldrh	r2, [r7, #2]
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	4613      	mov	r3, r2
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f000 f811 	bl	800f2a8 <udp_sendto_if_src>
 800f286:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	0801b2a8 	.word	0x0801b2a8
 800f294:	0801b404 	.word	0x0801b404
 800f298:	0801b2e4 	.word	0x0801b2e4
 800f29c:	0801b420 	.word	0x0801b420
 800f2a0:	0801b43c 	.word	0x0801b43c
 800f2a4:	0801b45c 	.word	0x0801b45c

0800f2a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08c      	sub	sp, #48	; 0x30
 800f2ac:	af04      	add	r7, sp, #16
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10b      	bne.n	800f2d4 <udp_sendto_if_src+0x2c>
 800f2bc:	4b7e      	ldr	r3, [pc, #504]	; (800f4b8 <udp_sendto_if_src+0x210>)
 800f2be:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f2c2:	497e      	ldr	r1, [pc, #504]	; (800f4bc <udp_sendto_if_src+0x214>)
 800f2c4:	487e      	ldr	r0, [pc, #504]	; (800f4c0 <udp_sendto_if_src+0x218>)
 800f2c6:	f7f2 f833 	bl	8001330 <iprintf>
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	f009 f8d4 	bl	8018478 <fflush>
 800f2d0:	f009 f818 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d10b      	bne.n	800f2f2 <udp_sendto_if_src+0x4a>
 800f2da:	4b77      	ldr	r3, [pc, #476]	; (800f4b8 <udp_sendto_if_src+0x210>)
 800f2dc:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f2e0:	4978      	ldr	r1, [pc, #480]	; (800f4c4 <udp_sendto_if_src+0x21c>)
 800f2e2:	4877      	ldr	r0, [pc, #476]	; (800f4c0 <udp_sendto_if_src+0x218>)
 800f2e4:	f7f2 f824 	bl	8001330 <iprintf>
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	f009 f8c5 	bl	8018478 <fflush>
 800f2ee:	f009 f809 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d10b      	bne.n	800f310 <udp_sendto_if_src+0x68>
 800f2f8:	4b6f      	ldr	r3, [pc, #444]	; (800f4b8 <udp_sendto_if_src+0x210>)
 800f2fa:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f2fe:	4972      	ldr	r1, [pc, #456]	; (800f4c8 <udp_sendto_if_src+0x220>)
 800f300:	486f      	ldr	r0, [pc, #444]	; (800f4c0 <udp_sendto_if_src+0x218>)
 800f302:	f7f2 f815 	bl	8001330 <iprintf>
 800f306:	2000      	movs	r0, #0
 800f308:	f009 f8b6 	bl	8018478 <fflush>
 800f30c:	f008 fffa 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10b      	bne.n	800f32e <udp_sendto_if_src+0x86>
 800f316:	4b68      	ldr	r3, [pc, #416]	; (800f4b8 <udp_sendto_if_src+0x210>)
 800f318:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f31c:	496b      	ldr	r1, [pc, #428]	; (800f4cc <udp_sendto_if_src+0x224>)
 800f31e:	4868      	ldr	r0, [pc, #416]	; (800f4c0 <udp_sendto_if_src+0x218>)
 800f320:	f7f2 f806 	bl	8001330 <iprintf>
 800f324:	2000      	movs	r0, #0
 800f326:	f009 f8a7 	bl	8018478 <fflush>
 800f32a:	f008 ffeb 	bl	8018304 <abort>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10b      	bne.n	800f34c <udp_sendto_if_src+0xa4>
 800f334:	4b60      	ldr	r3, [pc, #384]	; (800f4b8 <udp_sendto_if_src+0x210>)
 800f336:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f33a:	4965      	ldr	r1, [pc, #404]	; (800f4d0 <udp_sendto_if_src+0x228>)
 800f33c:	4860      	ldr	r0, [pc, #384]	; (800f4c0 <udp_sendto_if_src+0x218>)
 800f33e:	f7f1 fff7 	bl	8001330 <iprintf>
 800f342:	2000      	movs	r0, #0
 800f344:	f009 f898 	bl	8018478 <fflush>
 800f348:	f008 ffdc 	bl	8018304 <abort>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	8a5b      	ldrh	r3, [r3, #18]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10f      	bne.n	800f374 <udp_sendto_if_src+0xcc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f354:	68f9      	ldr	r1, [r7, #12]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	8a5b      	ldrh	r3, [r3, #18]
 800f35a:	461a      	mov	r2, r3
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f000 f8bd 	bl	800f4dc <udp_bind>
 800f362:	4603      	mov	r3, r0
 800f364:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800f366:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d002      	beq.n	800f374 <udp_sendto_if_src+0xcc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f36e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f372:	e09d      	b.n	800f4b0 <udp_sendto_if_src+0x208>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	891b      	ldrh	r3, [r3, #8]
 800f378:	3308      	adds	r3, #8
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	891b      	ldrh	r3, [r3, #8]
 800f380:	429a      	cmp	r2, r3
 800f382:	d202      	bcs.n	800f38a <udp_sendto_if_src+0xe2>
    return ERR_MEM;
 800f384:	f04f 33ff 	mov.w	r3, #4294967295
 800f388:	e092      	b.n	800f4b0 <udp_sendto_if_src+0x208>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f38a:	2108      	movs	r1, #8
 800f38c:	68b8      	ldr	r0, [r7, #8]
 800f38e:	f7f8 fad7 	bl	8007940 <pbuf_add_header>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d015      	beq.n	800f3c4 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f398:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f39c:	2108      	movs	r1, #8
 800f39e:	2022      	movs	r0, #34	; 0x22
 800f3a0:	f7f8 f8a6 	bl	80074f0 <pbuf_alloc>
 800f3a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d102      	bne.n	800f3b2 <udp_sendto_if_src+0x10a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b0:	e07e      	b.n	800f4b0 <udp_sendto_if_src+0x208>
    }
    if (p->tot_len != 0) {
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	891b      	ldrh	r3, [r3, #8]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d006      	beq.n	800f3c8 <udp_sendto_if_src+0x120>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f3ba:	68b9      	ldr	r1, [r7, #8]
 800f3bc:	69f8      	ldr	r0, [r7, #28]
 800f3be:	f7f8 fcdb 	bl	8007d78 <pbuf_chain>
 800f3c2:	e001      	b.n	800f3c8 <udp_sendto_if_src+0x120>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	895b      	ldrh	r3, [r3, #10]
 800f3cc:	2b07      	cmp	r3, #7
 800f3ce:	d80b      	bhi.n	800f3e8 <udp_sendto_if_src+0x140>
 800f3d0:	4b39      	ldr	r3, [pc, #228]	; (800f4b8 <udp_sendto_if_src+0x210>)
 800f3d2:	f240 320e 	movw	r2, #782	; 0x30e
 800f3d6:	493f      	ldr	r1, [pc, #252]	; (800f4d4 <udp_sendto_if_src+0x22c>)
 800f3d8:	4839      	ldr	r0, [pc, #228]	; (800f4c0 <udp_sendto_if_src+0x218>)
 800f3da:	f7f1 ffa9 	bl	8001330 <iprintf>
 800f3de:	2000      	movs	r0, #0
 800f3e0:	f009 f84a 	bl	8018478 <fflush>
 800f3e4:	f008 ff8e 	bl	8018304 <abort>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	8a5b      	ldrh	r3, [r3, #18]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f6 fc2a 	bl	8005c4c <lwip_htons>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f400:	887b      	ldrh	r3, [r7, #2]
 800f402:	4618      	mov	r0, r3
 800f404:	f7f6 fc22 	bl	8005c4c <lwip_htons>
 800f408:	4603      	mov	r3, r0
 800f40a:	461a      	mov	r2, r3
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	2200      	movs	r2, #0
 800f414:	719a      	strb	r2, [r3, #6]
 800f416:	2200      	movs	r2, #0
 800f418:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	891b      	ldrh	r3, [r3, #8]
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f6 fc14 	bl	8005c4c <lwip_htons>
 800f424:	4603      	mov	r3, r0
 800f426:	461a      	mov	r2, r3
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	7c1b      	ldrb	r3, [r3, #16]
 800f430:	f003 0301 	and.w	r3, r3, #1
 800f434:	2b00      	cmp	r3, #0
 800f436:	d113      	bne.n	800f460 <udp_sendto_if_src+0x1b8>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	891a      	ldrh	r2, [r3, #8]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	2111      	movs	r1, #17
 800f444:	69f8      	ldr	r0, [r7, #28]
 800f446:	f7f6 ff41 	bl	80062cc <ip_chksum_pseudo>
 800f44a:	4603      	mov	r3, r0
 800f44c:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800f44e:	8b7b      	ldrh	r3, [r7, #26]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <udp_sendto_if_src+0x1b2>
          udpchksum = 0xffff;
 800f454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f458:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	8b7a      	ldrh	r2, [r7, #26]
 800f45e:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f460:	2311      	movs	r3, #17
 800f462:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	7adb      	ldrb	r3, [r3, #11]
 800f468:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	7a9b      	ldrb	r3, [r3, #10]
 800f46e:	7cb9      	ldrb	r1, [r7, #18]
 800f470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f472:	9202      	str	r2, [sp, #8]
 800f474:	7cfa      	ldrb	r2, [r7, #19]
 800f476:	9201      	str	r2, [sp, #4]
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	460b      	mov	r3, r1
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f480:	69f8      	ldr	r0, [r7, #28]
 800f482:	f7f5 fb91 	bl	8004ba8 <ip4_output_if_src>
 800f486:	4603      	mov	r3, r0
 800f488:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f48a:	69fa      	ldr	r2, [r7, #28]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d004      	beq.n	800f49c <udp_sendto_if_src+0x1f4>
    /* free the header pbuf */
    pbuf_free(q);
 800f492:	69f8      	ldr	r0, [r7, #28]
 800f494:	f7f8 fb24 	bl	8007ae0 <pbuf_free>
    q = NULL;
 800f498:	2300      	movs	r3, #0
 800f49a:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800f49c:	4b0e      	ldr	r3, [pc, #56]	; (800f4d8 <udp_sendto_if_src+0x230>)
 800f49e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	4b0c      	ldr	r3, [pc, #48]	; (800f4d8 <udp_sendto_if_src+0x230>)
 800f4a8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800f4ac:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3720      	adds	r7, #32
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	0801b2a8 	.word	0x0801b2a8
 800f4bc:	0801b47c 	.word	0x0801b47c
 800f4c0:	0801b2e4 	.word	0x0801b2e4
 800f4c4:	0801b49c 	.word	0x0801b49c
 800f4c8:	0801b4bc 	.word	0x0801b4bc
 800f4cc:	0801b4e0 	.word	0x0801b4e0
 800f4d0:	0801b504 	.word	0x0801b504
 800f4d4:	0801b528 	.word	0x0801b528
 800f4d8:	20016e44 	.word	0x20016e44

0800f4dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b086      	sub	sp, #24
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d101      	bne.n	800f4f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f4f0:	4b3a      	ldr	r3, [pc, #232]	; (800f5dc <udp_bind+0x100>)
 800f4f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10b      	bne.n	800f512 <udp_bind+0x36>
 800f4fa:	4b39      	ldr	r3, [pc, #228]	; (800f5e0 <udp_bind+0x104>)
 800f4fc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f500:	4938      	ldr	r1, [pc, #224]	; (800f5e4 <udp_bind+0x108>)
 800f502:	4839      	ldr	r0, [pc, #228]	; (800f5e8 <udp_bind+0x10c>)
 800f504:	f7f1 ff14 	bl	8001330 <iprintf>
 800f508:	2000      	movs	r0, #0
 800f50a:	f008 ffb5 	bl	8018478 <fflush>
 800f50e:	f008 fef9 	bl	8018304 <abort>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f516:	4b35      	ldr	r3, [pc, #212]	; (800f5ec <udp_bind+0x110>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	617b      	str	r3, [r7, #20]
 800f51c:	e009      	b.n	800f532 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f51e:	68fa      	ldr	r2, [r7, #12]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	429a      	cmp	r2, r3
 800f524:	d102      	bne.n	800f52c <udp_bind+0x50>
      rebind = 1;
 800f526:	2301      	movs	r3, #1
 800f528:	74fb      	strb	r3, [r7, #19]
      break;
 800f52a:	e005      	b.n	800f538 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	617b      	str	r3, [r7, #20]
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d1f2      	bne.n	800f51e <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f538:	88fb      	ldrh	r3, [r7, #6]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d109      	bne.n	800f552 <udp_bind+0x76>
    port = udp_new_port();
 800f53e:	f7ff fb71 	bl	800ec24 <udp_new_port>
 800f542:	4603      	mov	r3, r0
 800f544:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f546:	88fb      	ldrh	r3, [r7, #6]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d12c      	bne.n	800f5a6 <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f54c:	f06f 0307 	mvn.w	r3, #7
 800f550:	e040      	b.n	800f5d4 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f552:	4b26      	ldr	r3, [pc, #152]	; (800f5ec <udp_bind+0x110>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	617b      	str	r3, [r7, #20]
 800f558:	e022      	b.n	800f5a0 <udp_bind+0xc4>
      if (pcb != ipcb) {
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d01b      	beq.n	800f59a <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	8a5b      	ldrh	r3, [r3, #18]
 800f566:	88fa      	ldrh	r2, [r7, #6]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d116      	bne.n	800f59a <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f574:	429a      	cmp	r2, r3
 800f576:	d00d      	beq.n	800f594 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00a      	beq.n	800f594 <udp_bind+0xb8>
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d006      	beq.n	800f594 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 800f586:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d003      	beq.n	800f594 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f594:	f06f 0307 	mvn.w	r3, #7
 800f598:	e01c      	b.n	800f5d4 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1d9      	bne.n	800f55a <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <udp_bind+0xd6>
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	e000      	b.n	800f5b4 <udp_bind+0xd8>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	88fa      	ldrh	r2, [r7, #6]
 800f5bc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f5be:	7cfb      	ldrb	r3, [r7, #19]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d106      	bne.n	800f5d2 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f5c4:	4b09      	ldr	r3, [pc, #36]	; (800f5ec <udp_bind+0x110>)
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f5cc:	4a07      	ldr	r2, [pc, #28]	; (800f5ec <udp_bind+0x110>)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f5d2:	2300      	movs	r3, #0
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	0801c690 	.word	0x0801c690
 800f5e0:	0801b2a8 	.word	0x0801b2a8
 800f5e4:	0801b558 	.word	0x0801b558
 800f5e8:	0801b2e4 	.word	0x0801b2e4
 800f5ec:	20016f5c 	.word	0x20016f5c

0800f5f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10b      	bne.n	800f61c <udp_connect+0x2c>
 800f604:	4b2e      	ldr	r3, [pc, #184]	; (800f6c0 <udp_connect+0xd0>)
 800f606:	f240 4235 	movw	r2, #1077	; 0x435
 800f60a:	492e      	ldr	r1, [pc, #184]	; (800f6c4 <udp_connect+0xd4>)
 800f60c:	482e      	ldr	r0, [pc, #184]	; (800f6c8 <udp_connect+0xd8>)
 800f60e:	f7f1 fe8f 	bl	8001330 <iprintf>
 800f612:	2000      	movs	r0, #0
 800f614:	f008 ff30 	bl	8018478 <fflush>
 800f618:	f008 fe74 	bl	8018304 <abort>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10b      	bne.n	800f63a <udp_connect+0x4a>
 800f622:	4b27      	ldr	r3, [pc, #156]	; (800f6c0 <udp_connect+0xd0>)
 800f624:	f240 4236 	movw	r2, #1078	; 0x436
 800f628:	4928      	ldr	r1, [pc, #160]	; (800f6cc <udp_connect+0xdc>)
 800f62a:	4827      	ldr	r0, [pc, #156]	; (800f6c8 <udp_connect+0xd8>)
 800f62c:	f7f1 fe80 	bl	8001330 <iprintf>
 800f630:	2000      	movs	r0, #0
 800f632:	f008 ff21 	bl	8018478 <fflush>
 800f636:	f008 fe65 	bl	8018304 <abort>

  if (pcb->local_port == 0) {
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	8a5b      	ldrh	r3, [r3, #18]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d10f      	bne.n	800f662 <udp_connect+0x72>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f642:	68f9      	ldr	r1, [r7, #12]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	8a5b      	ldrh	r3, [r3, #18]
 800f648:	461a      	mov	r2, r3
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f7ff ff46 	bl	800f4dc <udp_bind>
 800f650:	4603      	mov	r3, r0
 800f652:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d002      	beq.n	800f662 <udp_connect+0x72>
      return err;
 800f65c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f660:	e02a      	b.n	800f6b8 <udp_connect+0xc8>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d002      	beq.n	800f66e <udp_connect+0x7e>
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	e000      	b.n	800f670 <udp_connect+0x80>
 800f66e:	2300      	movs	r3, #0
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	88fa      	ldrh	r2, [r7, #6]
 800f678:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7c1b      	ldrb	r3, [r3, #16]
 800f67e:	f043 0304 	orr.w	r3, r3, #4
 800f682:	b2da      	uxtb	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f688:	4b11      	ldr	r3, [pc, #68]	; (800f6d0 <udp_connect+0xe0>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	617b      	str	r3, [r7, #20]
 800f68e:	e008      	b.n	800f6a2 <udp_connect+0xb2>
    if (pcb == ipcb) {
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	429a      	cmp	r2, r3
 800f696:	d101      	bne.n	800f69c <udp_connect+0xac>
      /* already on the list, just return */
      return ERR_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	e00d      	b.n	800f6b8 <udp_connect+0xc8>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	617b      	str	r3, [r7, #20]
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1f3      	bne.n	800f690 <udp_connect+0xa0>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f6a8:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <udp_connect+0xe0>)
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f6b0:	4a07      	ldr	r2, [pc, #28]	; (800f6d0 <udp_connect+0xe0>)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	0801b2a8 	.word	0x0801b2a8
 800f6c4:	0801b570 	.word	0x0801b570
 800f6c8:	0801b2e4 	.word	0x0801b2e4
 800f6cc:	0801b58c 	.word	0x0801b58c
 800f6d0:	20016f5c 	.word	0x20016f5c

0800f6d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d10b      	bne.n	800f6fe <udp_recv+0x2a>
 800f6e6:	4b0b      	ldr	r3, [pc, #44]	; (800f714 <udp_recv+0x40>)
 800f6e8:	f240 428a 	movw	r2, #1162	; 0x48a
 800f6ec:	490a      	ldr	r1, [pc, #40]	; (800f718 <udp_recv+0x44>)
 800f6ee:	480b      	ldr	r0, [pc, #44]	; (800f71c <udp_recv+0x48>)
 800f6f0:	f7f1 fe1e 	bl	8001330 <iprintf>
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	f008 febf 	bl	8018478 <fflush>
 800f6fa:	f008 fe03 	bl	8018304 <abort>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	61da      	str	r2, [r3, #28]
}
 800f70a:	bf00      	nop
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	0801b2a8 	.word	0x0801b2a8
 800f718:	0801b5c4 	.word	0x0801b5c4
 800f71c:	0801b2e4 	.word	0x0801b2e4

0800f720 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10b      	bne.n	800f746 <udp_remove+0x26>
 800f72e:	4b1b      	ldr	r3, [pc, #108]	; (800f79c <udp_remove+0x7c>)
 800f730:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f734:	491a      	ldr	r1, [pc, #104]	; (800f7a0 <udp_remove+0x80>)
 800f736:	481b      	ldr	r0, [pc, #108]	; (800f7a4 <udp_remove+0x84>)
 800f738:	f7f1 fdfa 	bl	8001330 <iprintf>
 800f73c:	2000      	movs	r0, #0
 800f73e:	f008 fe9b 	bl	8018478 <fflush>
 800f742:	f008 fddf 	bl	8018304 <abort>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f746:	4b18      	ldr	r3, [pc, #96]	; (800f7a8 <udp_remove+0x88>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d105      	bne.n	800f75c <udp_remove+0x3c>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f750:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <udp_remove+0x88>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	4a14      	ldr	r2, [pc, #80]	; (800f7a8 <udp_remove+0x88>)
 800f758:	6013      	str	r3, [r2, #0]
 800f75a:	e017      	b.n	800f78c <udp_remove+0x6c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f75c:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <udp_remove+0x88>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e010      	b.n	800f786 <udp_remove+0x66>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d009      	beq.n	800f780 <udp_remove+0x60>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	68da      	ldr	r2, [r3, #12]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	429a      	cmp	r2, r3
 800f774:	d104      	bne.n	800f780 <udp_remove+0x60>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	68da      	ldr	r2, [r3, #12]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	60da      	str	r2, [r3, #12]
        break;
 800f77e:	e005      	b.n	800f78c <udp_remove+0x6c>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1eb      	bne.n	800f764 <udp_remove+0x44>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f78c:	6879      	ldr	r1, [r7, #4]
 800f78e:	2000      	movs	r0, #0
 800f790:	f7f7 fb68 	bl	8006e64 <memp_free>
}
 800f794:	bf00      	nop
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	0801b2a8 	.word	0x0801b2a8
 800f7a0:	0801b5dc 	.word	0x0801b5dc
 800f7a4:	0801b2e4 	.word	0x0801b2e4
 800f7a8:	20016f5c 	.word	0x20016f5c

0800f7ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	f7f7 fb0c 	bl	8006dd0 <memp_malloc>
 800f7b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d007      	beq.n	800f7d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f7c0:	2220      	movs	r2, #32
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f008 ff71 	bl	80186ac <memset>
    pcb->ttl = UDP_TTL;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	22ff      	movs	r2, #255	; 0xff
 800f7ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f7d0:	687b      	ldr	r3, [r7, #4]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800f7e4:	f7ff ffe2 	bl	800f7ac <udp_new>
 800f7e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d01e      	beq.n	800f842 <udp_netif_ip_addr_changed+0x4e>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d01a      	beq.n	800f842 <udp_netif_ip_addr_changed+0x4e>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d017      	beq.n	800f842 <udp_netif_ip_addr_changed+0x4e>
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d013      	beq.n	800f842 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f81a:	4b0d      	ldr	r3, [pc, #52]	; (800f850 <udp_netif_ip_addr_changed+0x5c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	e00c      	b.n	800f83c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d103      	bne.n	800f836 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1ef      	bne.n	800f822 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f842:	bf00      	nop
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	20016f5c 	.word	0x20016f5c

0800f854 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	330c      	adds	r3, #12
 800f864:	461a      	mov	r2, r3
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f003 fe81 	bl	8013570 <tcpip_send_msg_wait_sem>
 800f86e:	4603      	mov	r3, r0
 800f870:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d103      	bne.n	800f882 <netconn_apimsg+0x2e>
    return apimsg->err;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f880:	e001      	b.n	800f886 <netconn_apimsg+0x32>
  }
  return err;
 800f882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
	...

0800f890 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b08c      	sub	sp, #48	; 0x30
 800f894:	af00      	add	r7, sp, #0
 800f896:	4603      	mov	r3, r0
 800f898:	603a      	str	r2, [r7, #0]
 800f89a:	71fb      	strb	r3, [r7, #7]
 800f89c:	460b      	mov	r3, r1
 800f89e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f8a0:	79fb      	ldrb	r3, [r7, #7]
 800f8a2:	6839      	ldr	r1, [r7, #0]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f001 fa31 	bl	8010d0c <netconn_alloc>
 800f8aa:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d068      	beq.n	800f984 <netconn_new_with_proto_and_callback+0xf4>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f8b2:	79bb      	ldrb	r3, [r7, #6]
 800f8b4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f8ba:	f107 0308 	add.w	r3, r7, #8
 800f8be:	4619      	mov	r1, r3
 800f8c0:	4833      	ldr	r0, [pc, #204]	; (800f990 <netconn_new_with_proto_and_callback+0x100>)
 800f8c2:	f7ff ffc7 	bl	800f854 <netconn_apimsg>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f8cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d057      	beq.n	800f984 <netconn_new_with_proto_and_callback+0xf4>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00a      	beq.n	800f8f2 <netconn_new_with_proto_and_callback+0x62>
 800f8dc:	4b2d      	ldr	r3, [pc, #180]	; (800f994 <netconn_new_with_proto_and_callback+0x104>)
 800f8de:	22a3      	movs	r2, #163	; 0xa3
 800f8e0:	492d      	ldr	r1, [pc, #180]	; (800f998 <netconn_new_with_proto_and_callback+0x108>)
 800f8e2:	482e      	ldr	r0, [pc, #184]	; (800f99c <netconn_new_with_proto_and_callback+0x10c>)
 800f8e4:	f7f1 fd24 	bl	8001330 <iprintf>
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	f008 fdc5 	bl	8018478 <fflush>
 800f8ee:	f008 fd09 	bl	8018304 <abort>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	3310      	adds	r3, #16
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d003      	beq.n	800f902 <netconn_new_with_proto_and_callback+0x72>
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	691b      	ldr	r3, [r3, #16]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d10a      	bne.n	800f918 <netconn_new_with_proto_and_callback+0x88>
 800f902:	4b24      	ldr	r3, [pc, #144]	; (800f994 <netconn_new_with_proto_and_callback+0x104>)
 800f904:	22a4      	movs	r2, #164	; 0xa4
 800f906:	4926      	ldr	r1, [pc, #152]	; (800f9a0 <netconn_new_with_proto_and_callback+0x110>)
 800f908:	4824      	ldr	r0, [pc, #144]	; (800f99c <netconn_new_with_proto_and_callback+0x10c>)
 800f90a:	f7f1 fd11 	bl	8001330 <iprintf>
 800f90e:	2000      	movs	r0, #0
 800f910:	f008 fdb2 	bl	8018478 <fflush>
 800f914:	f008 fcf6 	bl	8018304 <abort>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	3314      	adds	r3, #20
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00e      	beq.n	800f93e <netconn_new_with_proto_and_callback+0xae>
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	695b      	ldr	r3, [r3, #20]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00a      	beq.n	800f93e <netconn_new_with_proto_and_callback+0xae>
 800f928:	4b1a      	ldr	r3, [pc, #104]	; (800f994 <netconn_new_with_proto_and_callback+0x104>)
 800f92a:	22a6      	movs	r2, #166	; 0xa6
 800f92c:	491d      	ldr	r1, [pc, #116]	; (800f9a4 <netconn_new_with_proto_and_callback+0x114>)
 800f92e:	481b      	ldr	r0, [pc, #108]	; (800f99c <netconn_new_with_proto_and_callback+0x10c>)
 800f930:	f7f1 fcfe 	bl	8001330 <iprintf>
 800f934:	2000      	movs	r0, #0
 800f936:	f008 fd9f 	bl	8018478 <fflush>
 800f93a:	f008 fce3 	bl	8018304 <abort>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f940:	330c      	adds	r3, #12
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <netconn_new_with_proto_and_callback+0xbe>
 800f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10a      	bne.n	800f964 <netconn_new_with_proto_and_callback+0xd4>
 800f94e:	4b11      	ldr	r3, [pc, #68]	; (800f994 <netconn_new_with_proto_and_callback+0x104>)
 800f950:	22a9      	movs	r2, #169	; 0xa9
 800f952:	4915      	ldr	r1, [pc, #84]	; (800f9a8 <netconn_new_with_proto_and_callback+0x118>)
 800f954:	4811      	ldr	r0, [pc, #68]	; (800f99c <netconn_new_with_proto_and_callback+0x10c>)
 800f956:	f7f1 fceb 	bl	8001330 <iprintf>
 800f95a:	2000      	movs	r0, #0
 800f95c:	f008 fd8c 	bl	8018478 <fflush>
 800f960:	f008 fcd0 	bl	8018304 <abort>
      sys_sem_free(&conn->op_completed);
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	330c      	adds	r3, #12
 800f968:	4618      	mov	r0, r3
 800f96a:	f004 f893 	bl	8013a94 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	3310      	adds	r3, #16
 800f972:	4618      	mov	r0, r3
 800f974:	f004 fa5c 	bl	8013e30 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f97a:	2007      	movs	r0, #7
 800f97c:	f7f7 fa72 	bl	8006e64 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f980:	2300      	movs	r3, #0
 800f982:	e000      	b.n	800f986 <netconn_new_with_proto_and_callback+0xf6>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f986:	4618      	mov	r0, r3
 800f988:	3730      	adds	r7, #48	; 0x30
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	08010ce1 	.word	0x08010ce1
 800f994:	0801b5f4 	.word	0x0801b5f4
 800f998:	0801b610 	.word	0x0801b610
 800f99c:	0801b634 	.word	0x0801b634
 800f9a0:	0801b65c 	.word	0x0801b65c
 800f9a4:	0801b674 	.word	0x0801b674
 800f9a8:	0801b698 	.word	0x0801b698

0800f9ac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b08c      	sub	sp, #48	; 0x30
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e014      	b.n	800f9e8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f9c2:	2329      	movs	r3, #41	; 0x29
 800f9c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f9c6:	f107 030c 	add.w	r3, r7, #12
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4808      	ldr	r0, [pc, #32]	; (800f9f0 <netconn_prepare_delete+0x44>)
 800f9ce:	f7ff ff41 	bl	800f854 <netconn_apimsg>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f9d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d002      	beq.n	800f9e6 <netconn_prepare_delete+0x3a>
    return err;
 800f9e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f9e4:	e000      	b.n	800f9e8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3730      	adds	r7, #48	; 0x30
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	0801129d 	.word	0x0801129d

0800f9f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d101      	bne.n	800fa06 <netconn_delete+0x12>
    return ERR_OK;
 800fa02:	2300      	movs	r3, #0
 800fa04:	e00d      	b.n	800fa22 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f7ff ffd0 	bl	800f9ac <netconn_prepare_delete>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800fa10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d102      	bne.n	800fa1e <netconn_delete+0x2a>
    netconn_free(conn);
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f001 f9e7 	bl	8010dec <netconn_free>
  }
  return err;
 800fa1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
	...

0800fa2c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08e      	sub	sp, #56	; 0x38
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d10b      	bne.n	800fa58 <netconn_getaddr+0x2c>
 800fa40:	4b20      	ldr	r3, [pc, #128]	; (800fac4 <netconn_getaddr+0x98>)
 800fa42:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fa46:	4920      	ldr	r1, [pc, #128]	; (800fac8 <netconn_getaddr+0x9c>)
 800fa48:	4820      	ldr	r0, [pc, #128]	; (800facc <netconn_getaddr+0xa0>)
 800fa4a:	f7f1 fc71 	bl	8001330 <iprintf>
 800fa4e:	2000      	movs	r0, #0
 800fa50:	f008 fd12 	bl	8018478 <fflush>
 800fa54:	f008 fc56 	bl	8018304 <abort>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10b      	bne.n	800fa76 <netconn_getaddr+0x4a>
 800fa5e:	4b19      	ldr	r3, [pc, #100]	; (800fac4 <netconn_getaddr+0x98>)
 800fa60:	f240 1213 	movw	r2, #275	; 0x113
 800fa64:	491a      	ldr	r1, [pc, #104]	; (800fad0 <netconn_getaddr+0xa4>)
 800fa66:	4819      	ldr	r0, [pc, #100]	; (800facc <netconn_getaddr+0xa0>)
 800fa68:	f7f1 fc62 	bl	8001330 <iprintf>
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	f008 fd03 	bl	8018478 <fflush>
 800fa72:	f008 fc47 	bl	8018304 <abort>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10b      	bne.n	800fa94 <netconn_getaddr+0x68>
 800fa7c:	4b11      	ldr	r3, [pc, #68]	; (800fac4 <netconn_getaddr+0x98>)
 800fa7e:	f44f 728a 	mov.w	r2, #276	; 0x114
 800fa82:	4914      	ldr	r1, [pc, #80]	; (800fad4 <netconn_getaddr+0xa8>)
 800fa84:	4811      	ldr	r0, [pc, #68]	; (800facc <netconn_getaddr+0xa0>)
 800fa86:	f7f1 fc53 	bl	8001330 <iprintf>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	f008 fcf4 	bl	8018478 <fflush>
 800fa90:	f008 fc38 	bl	8018304 <abort>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800faa6:	f107 0314 	add.w	r3, r7, #20
 800faaa:	4619      	mov	r1, r3
 800faac:	480a      	ldr	r0, [pc, #40]	; (800fad8 <netconn_getaddr+0xac>)
 800faae:	f7ff fed1 	bl	800f854 <netconn_apimsg>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800fab8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3738      	adds	r7, #56	; 0x38
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	0801b5f4 	.word	0x0801b5f4
 800fac8:	0801b6b4 	.word	0x0801b6b4
 800facc:	0801b634 	.word	0x0801b634
 800fad0:	0801b6d4 	.word	0x0801b6d4
 800fad4:	0801b6f4 	.word	0x0801b6f4
 800fad8:	08011c5d 	.word	0x08011c5d

0800fadc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b08e      	sub	sp, #56	; 0x38
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	4613      	mov	r3, r2
 800fae8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10b      	bne.n	800fb08 <netconn_bind+0x2c>
 800faf0:	4b12      	ldr	r3, [pc, #72]	; (800fb3c <netconn_bind+0x60>)
 800faf2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800faf6:	4912      	ldr	r1, [pc, #72]	; (800fb40 <netconn_bind+0x64>)
 800faf8:	4812      	ldr	r0, [pc, #72]	; (800fb44 <netconn_bind+0x68>)
 800fafa:	f7f1 fc19 	bl	8001330 <iprintf>
 800fafe:	2000      	movs	r0, #0
 800fb00:	f008 fcba 	bl	8018478 <fflush>
 800fb04:	f008 fbfe 	bl	8018304 <abort>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <netconn_bind+0x36>
    addr = IP4_ADDR_ANY;
 800fb0e:	4b0e      	ldr	r3, [pc, #56]	; (800fb48 <netconn_bind+0x6c>)
 800fb10:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800fb1a:	88fb      	ldrh	r3, [r7, #6]
 800fb1c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800fb1e:	f107 0314 	add.w	r3, r7, #20
 800fb22:	4619      	mov	r1, r3
 800fb24:	4809      	ldr	r0, [pc, #36]	; (800fb4c <netconn_bind+0x70>)
 800fb26:	f7ff fe95 	bl	800f854 <netconn_apimsg>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800fb30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3738      	adds	r7, #56	; 0x38
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	0801b5f4 	.word	0x0801b5f4
 800fb40:	0801b714 	.word	0x0801b714
 800fb44:	0801b634 	.word	0x0801b634
 800fb48:	0801c690 	.word	0x0801c690
 800fb4c:	08011491 	.word	0x08011491

0800fb50 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b08c      	sub	sp, #48	; 0x30
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10b      	bne.n	800fb7a <netconn_listen_with_backlog+0x2a>
 800fb62:	4b0e      	ldr	r3, [pc, #56]	; (800fb9c <netconn_listen_with_backlog+0x4c>)
 800fb64:	f240 12bb 	movw	r2, #443	; 0x1bb
 800fb68:	490d      	ldr	r1, [pc, #52]	; (800fba0 <netconn_listen_with_backlog+0x50>)
 800fb6a:	480e      	ldr	r0, [pc, #56]	; (800fba4 <netconn_listen_with_backlog+0x54>)
 800fb6c:	f7f1 fbe0 	bl	8001330 <iprintf>
 800fb70:	2000      	movs	r0, #0
 800fb72:	f008 fc81 	bl	8018478 <fflush>
 800fb76:	f008 fbc5 	bl	8018304 <abort>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800fb7e:	f107 030c 	add.w	r3, r7, #12
 800fb82:	4619      	mov	r1, r3
 800fb84:	4808      	ldr	r0, [pc, #32]	; (800fba8 <netconn_listen_with_backlog+0x58>)
 800fb86:	f7ff fe65 	bl	800f854 <netconn_apimsg>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fb90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3730      	adds	r7, #48	; 0x30
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	0801b5f4 	.word	0x0801b5f4
 800fba0:	0801b794 	.word	0x0801b794
 800fba4:	0801b634 	.word	0x0801b634
 800fba8:	08011509 	.word	0x08011509

0800fbac <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10b      	bne.n	800fbd4 <netconn_accept+0x28>
 800fbbc:	4b3f      	ldr	r3, [pc, #252]	; (800fcbc <netconn_accept+0x110>)
 800fbbe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fbc2:	493f      	ldr	r1, [pc, #252]	; (800fcc0 <netconn_accept+0x114>)
 800fbc4:	483f      	ldr	r0, [pc, #252]	; (800fcc4 <netconn_accept+0x118>)
 800fbc6:	f7f1 fbb3 	bl	8001330 <iprintf>
 800fbca:	2000      	movs	r0, #0
 800fbcc:	f008 fc54 	bl	8018478 <fflush>
 800fbd0:	f008 fb98 	bl	8018304 <abort>
  *new_conn = NULL;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10b      	bne.n	800fbf8 <netconn_accept+0x4c>
 800fbe0:	4b36      	ldr	r3, [pc, #216]	; (800fcbc <netconn_accept+0x110>)
 800fbe2:	f240 12e3 	movw	r2, #483	; 0x1e3
 800fbe6:	4938      	ldr	r1, [pc, #224]	; (800fcc8 <netconn_accept+0x11c>)
 800fbe8:	4836      	ldr	r0, [pc, #216]	; (800fcc4 <netconn_accept+0x118>)
 800fbea:	f7f1 fba1 	bl	8001330 <iprintf>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f008 fc42 	bl	8018478 <fflush>
 800fbf4:	f008 fb86 	bl	8018304 <abort>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 fbb5 	bl	8010368 <netconn_err>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800fc02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d002      	beq.n	800fc10 <netconn_accept+0x64>
    /* return pending error */
    return err;
 800fc0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc0e:	e050      	b.n	800fcb2 <netconn_accept+0x106>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3314      	adds	r3, #20
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d009      	beq.n	800fc2c <netconn_accept+0x80>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	695b      	ldr	r3, [r3, #20]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d005      	beq.n	800fc2c <netconn_accept+0x80>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	7f1b      	ldrb	r3, [r3, #28]
 800fc24:	f003 0301 	and.w	r3, r3, #1
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <netconn_accept+0x86>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800fc2c:	f06f 030e 	mvn.w	r3, #14
 800fc30:	e03f      	b.n	800fcb2 <netconn_accept+0x106>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	7f1b      	ldrb	r3, [r3, #28]
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00e      	beq.n	800fc5c <netconn_accept+0xb0>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	3314      	adds	r3, #20
 800fc42:	f107 020c 	add.w	r2, r7, #12
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f004 f897 	bl	8013d7c <sys_arch_mbox_tryfetch>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc54:	d10a      	bne.n	800fc6c <netconn_accept+0xc0>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800fc56:	f06f 0306 	mvn.w	r3, #6
 800fc5a:	e02a      	b.n	800fcb2 <netconn_accept+0x106>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	3314      	adds	r3, #20
 800fc60:	f107 010c 	add.w	r1, r7, #12
 800fc64:	2200      	movs	r2, #0
 800fc66:	4618      	mov	r0, r3
 800fc68:	f004 f810 	bl	8013c8c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d005      	beq.n	800fc80 <netconn_accept+0xd4>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc78:	2200      	movs	r2, #0
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f107 0213 	add.w	r2, r7, #19
 800fc86:	4611      	mov	r1, r2
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 fbc1 	bl	8010410 <lwip_netconn_is_err_msg>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <netconn_accept+0xee>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800fc94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc98:	e00b      	b.n	800fcb2 <netconn_accept+0x106>
  }
  if (accept_ptr == NULL) {
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d102      	bne.n	800fca6 <netconn_accept+0xfa>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800fca0:	f06f 030e 	mvn.w	r3, #14
 800fca4:	e005      	b.n	800fcb2 <netconn_accept+0x106>
  }
  newconn = (struct netconn *)accept_ptr;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800fcb0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	0801b5f4 	.word	0x0801b5f4
 800fcc0:	0801b7b4 	.word	0x0801b7b4
 800fcc4:	0801b634 	.word	0x0801b634
 800fcc8:	0801b7d4 	.word	0x0801b7d4

0800fccc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b088      	sub	sp, #32
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d10b      	bne.n	800fcfc <netconn_recv_data+0x30>
 800fce4:	4b5c      	ldr	r3, [pc, #368]	; (800fe58 <netconn_recv_data+0x18c>)
 800fce6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800fcea:	495c      	ldr	r1, [pc, #368]	; (800fe5c <netconn_recv_data+0x190>)
 800fcec:	485c      	ldr	r0, [pc, #368]	; (800fe60 <netconn_recv_data+0x194>)
 800fcee:	f7f1 fb1f 	bl	8001330 <iprintf>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	f008 fbc0 	bl	8018478 <fflush>
 800fcf8:	f008 fb04 	bl	8018304 <abort>
  *new_buf = NULL;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10b      	bne.n	800fd20 <netconn_recv_data+0x54>
 800fd08:	4b53      	ldr	r3, [pc, #332]	; (800fe58 <netconn_recv_data+0x18c>)
 800fd0a:	f240 224a 	movw	r2, #586	; 0x24a
 800fd0e:	4955      	ldr	r1, [pc, #340]	; (800fe64 <netconn_recv_data+0x198>)
 800fd10:	4853      	ldr	r0, [pc, #332]	; (800fe60 <netconn_recv_data+0x194>)
 800fd12:	f7f1 fb0d 	bl	8001330 <iprintf>
 800fd16:	2000      	movs	r0, #0
 800fd18:	f008 fbae 	bl	8018478 <fflush>
 800fd1c:	f008 faf2 	bl	8018304 <abort>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3310      	adds	r3, #16
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d003      	beq.n	800fd30 <netconn_recv_data+0x64>
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	691b      	ldr	r3, [r3, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d10e      	bne.n	800fd4e <netconn_recv_data+0x82>
    err_t err = netconn_err(conn);
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f000 fb19 	bl	8010368 <netconn_err>
 800fd36:	4603      	mov	r3, r0
 800fd38:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800fd3a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d002      	beq.n	800fd48 <netconn_recv_data+0x7c>
      /* return pending error */
      return err;
 800fd42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fd46:	e083      	b.n	800fe50 <netconn_recv_data+0x184>
    }
    return ERR_CONN;
 800fd48:	f06f 030a 	mvn.w	r3, #10
 800fd4c:	e080      	b.n	800fe50 <netconn_recv_data+0x184>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	7f1b      	ldrb	r3, [r3, #28]
 800fd52:	f003 0302 	and.w	r3, r3, #2
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d10f      	bne.n	800fd7a <netconn_recv_data+0xae>
 800fd5a:	79fb      	ldrb	r3, [r7, #7]
 800fd5c:	f003 0304 	and.w	r3, r3, #4
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10a      	bne.n	800fd7a <netconn_recv_data+0xae>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	7f1b      	ldrb	r3, [r3, #28]
 800fd68:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d104      	bne.n	800fd7a <netconn_recv_data+0xae>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d023      	beq.n	800fdc2 <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	3310      	adds	r3, #16
 800fd7e:	f107 0218 	add.w	r2, r7, #24
 800fd82:	4611      	mov	r1, r2
 800fd84:	4618      	mov	r0, r3
 800fd86:	f003 fff9 	bl	8013d7c <sys_arch_mbox_tryfetch>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd90:	d11f      	bne.n	800fdd2 <netconn_recv_data+0x106>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 fae8 	bl	8010368 <netconn_err>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800fd9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <netconn_recv_data+0xde>
        /* return pending error */
        return err;
 800fda4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fda8:	e052      	b.n	800fe50 <netconn_recv_data+0x184>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	7f1b      	ldrb	r3, [r3, #28]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <netconn_recv_data+0xf0>
        return ERR_CONN;
 800fdb6:	f06f 030a 	mvn.w	r3, #10
 800fdba:	e049      	b.n	800fe50 <netconn_recv_data+0x184>
      }
      return ERR_WOULDBLOCK;
 800fdbc:	f06f 0306 	mvn.w	r3, #6
 800fdc0:	e046      	b.n	800fe50 <netconn_recv_data+0x184>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	3310      	adds	r3, #16
 800fdc6:	f107 0118 	add.w	r1, r7, #24
 800fdca:	2200      	movs	r2, #0
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f003 ff5d 	bl	8013c8c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fdda:	2b10      	cmp	r3, #16
 800fddc:	d117      	bne.n	800fe0e <netconn_recv_data+0x142>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	f107 0217 	add.w	r2, r7, #23
 800fde4:	4611      	mov	r1, r2
 800fde6:	4618      	mov	r0, r3
 800fde8:	f000 fb12 	bl	8010410 <lwip_netconn_is_err_msg>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d009      	beq.n	800fe06 <netconn_recv_data+0x13a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800fdf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fdf6:	f113 0f0f 	cmn.w	r3, #15
 800fdfa:	d101      	bne.n	800fe00 <netconn_recv_data+0x134>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	e027      	b.n	800fe50 <netconn_recv_data+0x184>
      }
      return err;
 800fe00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fe04:	e024      	b.n	800fe50 <netconn_recv_data+0x184>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	891b      	ldrh	r3, [r3, #8]
 800fe0a:	83fb      	strh	r3, [r7, #30]
 800fe0c:	e012      	b.n	800fe34 <netconn_recv_data+0x168>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d10b      	bne.n	800fe2c <netconn_recv_data+0x160>
 800fe14:	4b10      	ldr	r3, [pc, #64]	; (800fe58 <netconn_recv_data+0x18c>)
 800fe16:	f240 2291 	movw	r2, #657	; 0x291
 800fe1a:	4913      	ldr	r1, [pc, #76]	; (800fe68 <netconn_recv_data+0x19c>)
 800fe1c:	4810      	ldr	r0, [pc, #64]	; (800fe60 <netconn_recv_data+0x194>)
 800fe1e:	f7f1 fa87 	bl	8001330 <iprintf>
 800fe22:	2000      	movs	r0, #0
 800fe24:	f008 fb28 	bl	8018478 <fflush>
 800fe28:	f008 fa6c 	bl	8018304 <abort>
    len = netbuf_len((struct netbuf *)buf);
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	891b      	ldrh	r3, [r3, #8]
 800fe32:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d005      	beq.n	800fe48 <netconn_recv_data+0x17c>
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe40:	8bfa      	ldrh	r2, [r7, #30]
 800fe42:	2101      	movs	r1, #1
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3720      	adds	r7, #32
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	0801b5f4 	.word	0x0801b5f4
 800fe5c:	0801b7f4 	.word	0x0801b7f4
 800fe60:	0801b634 	.word	0x0801b634
 800fe64:	0801b814 	.word	0x0801b814
 800fe68:	0801b830 	.word	0x0801b830

0800fe6c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d005      	beq.n	800fe8a <netconn_tcp_recvd_msg+0x1e>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe86:	2b10      	cmp	r3, #16
 800fe88:	d00b      	beq.n	800fea2 <netconn_tcp_recvd_msg+0x36>
 800fe8a:	4b0d      	ldr	r3, [pc, #52]	; (800fec0 <netconn_tcp_recvd_msg+0x54>)
 800fe8c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fe90:	490c      	ldr	r1, [pc, #48]	; (800fec4 <netconn_tcp_recvd_msg+0x58>)
 800fe92:	480d      	ldr	r0, [pc, #52]	; (800fec8 <netconn_tcp_recvd_msg+0x5c>)
 800fe94:	f7f1 fa4c 	bl	8001330 <iprintf>
 800fe98:	2000      	movs	r0, #0
 800fe9a:	f008 faed 	bl	8018478 <fflush>
 800fe9e:	f008 fa31 	bl	8018304 <abort>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800feae:	6879      	ldr	r1, [r7, #4]
 800feb0:	4806      	ldr	r0, [pc, #24]	; (800fecc <netconn_tcp_recvd_msg+0x60>)
 800feb2:	f7ff fccf 	bl	800f854 <netconn_apimsg>
 800feb6:	4603      	mov	r3, r0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	0801b5f4 	.word	0x0801b5f4
 800fec4:	0801b83c 	.word	0x0801b83c
 800fec8:	0801b634 	.word	0x0801b634
 800fecc:	080116d5 	.word	0x080116d5

0800fed0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08c      	sub	sp, #48	; 0x30
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d005      	beq.n	800feec <netconn_tcp_recvd+0x1c>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fee8:	2b10      	cmp	r3, #16
 800feea:	d00b      	beq.n	800ff04 <netconn_tcp_recvd+0x34>
 800feec:	4b0d      	ldr	r3, [pc, #52]	; (800ff24 <netconn_tcp_recvd+0x54>)
 800feee:	f240 22b6 	movw	r2, #694	; 0x2b6
 800fef2:	490d      	ldr	r1, [pc, #52]	; (800ff28 <netconn_tcp_recvd+0x58>)
 800fef4:	480d      	ldr	r0, [pc, #52]	; (800ff2c <netconn_tcp_recvd+0x5c>)
 800fef6:	f7f1 fa1b 	bl	8001330 <iprintf>
 800fefa:	2000      	movs	r0, #0
 800fefc:	f008 fabc 	bl	8018478 <fflush>
 800ff00:	f008 fa00 	bl	8018304 <abort>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800ff04:	f107 030c 	add.w	r3, r7, #12
 800ff08:	461a      	mov	r2, r3
 800ff0a:	6839      	ldr	r1, [r7, #0]
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7ff ffad 	bl	800fe6c <netconn_tcp_recvd_msg>
 800ff12:	4603      	mov	r3, r0
 800ff14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800ff18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3730      	adds	r7, #48	; 0x30
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	0801b5f4 	.word	0x0801b5f4
 800ff28:	0801b83c 	.word	0x0801b83c
 800ff2c:	0801b634 	.word	0x0801b634

0800ff30 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b090      	sub	sp, #64	; 0x40
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	3310      	adds	r3, #16
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d003      	beq.n	800ff4e <netconn_recv_data_tcp+0x1e>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d102      	bne.n	800ff54 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ff4e:	f06f 030a 	mvn.w	r3, #10
 800ff52:	e06c      	b.n	801002e <netconn_recv_data_tcp+0xfe>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	7f1b      	ldrb	r3, [r3, #28]
 800ff58:	b25b      	sxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	da07      	bge.n	800ff6e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	7f1b      	ldrb	r3, [r3, #28]
 800ff62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ff6c:	e038      	b.n	800ffe0 <netconn_recv_data_tcp+0xb0>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ff6e:	79fb      	ldrb	r3, [r7, #7]
 800ff70:	461a      	mov	r2, r3
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7ff fea9 	bl	800fccc <netconn_recv_data>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ff80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ff88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff8c:	e04f      	b.n	801002e <netconn_recv_data_tcp+0xfe>
  }
  buf = *new_buf;
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	f003 0308 	and.w	r3, r3, #8
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10e      	bne.n	800ffbc <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <netconn_recv_data_tcp+0x7a>
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa6:	891b      	ldrh	r3, [r3, #8]
 800ffa8:	e000      	b.n	800ffac <netconn_recv_data_tcp+0x7c>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ffae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ffb0:	f107 0214 	add.w	r2, r7, #20
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff ff58 	bl	800fe6c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d133      	bne.n	801002a <netconn_recv_data_tcp+0xfa>
    if (apiflags & NETCONN_NOFIN) {
 800ffc2:	79fb      	ldrb	r3, [r7, #7]
 800ffc4:	f003 0310 	and.w	r3, r3, #16
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d009      	beq.n	800ffe0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	7f1b      	ldrb	r3, [r3, #28]
 800ffd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ffda:	f06f 0306 	mvn.w	r3, #6
 800ffde:	e026      	b.n	801002e <netconn_recv_data_tcp+0xfe>
    } else {
handle_fin:
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d005      	beq.n	800fff4 <netconn_recv_data_tcp+0xc4>
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	2200      	movs	r2, #0
 800ffee:	2101      	movs	r1, #1
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10f      	bne.n	801001c <netconn_recv_data_tcp+0xec>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f000 f9b3 	bl	8010368 <netconn_err>
 8010002:	4603      	mov	r3, r0
 8010004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010008:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <netconn_recv_data_tcp+0xe6>
          return err;
 8010010:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010014:	e00b      	b.n	801002e <netconn_recv_data_tcp+0xfe>
        }
        return ERR_RST;
 8010016:	f06f 030d 	mvn.w	r3, #13
 801001a:	e008      	b.n	801002e <netconn_recv_data_tcp+0xfe>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801001c:	2101      	movs	r1, #1
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f000 f970 	bl	8010304 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010024:	f06f 030e 	mvn.w	r3, #14
 8010028:	e001      	b.n	801002e <netconn_recv_data_tcp+0xfe>
    }
  }
  return err;
 801002a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801002e:	4618      	mov	r0, r3
 8010030:	3740      	adds	r7, #64	; 0x40
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
	...

08010038 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	4613      	mov	r3, r2
 8010044:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d005      	beq.n	8010058 <netconn_recv_tcp_pbuf_flags+0x20>
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010054:	2b10      	cmp	r3, #16
 8010056:	d00b      	beq.n	8010070 <netconn_recv_tcp_pbuf_flags+0x38>
 8010058:	4b0b      	ldr	r3, [pc, #44]	; (8010088 <netconn_recv_tcp_pbuf_flags+0x50>)
 801005a:	f240 3226 	movw	r2, #806	; 0x326
 801005e:	490b      	ldr	r1, [pc, #44]	; (801008c <netconn_recv_tcp_pbuf_flags+0x54>)
 8010060:	480b      	ldr	r0, [pc, #44]	; (8010090 <netconn_recv_tcp_pbuf_flags+0x58>)
 8010062:	f7f1 f965 	bl	8001330 <iprintf>
 8010066:	2000      	movs	r0, #0
 8010068:	f008 fa06 	bl	8018478 <fflush>
 801006c:	f008 f94a 	bl	8018304 <abort>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	461a      	mov	r2, r3
 8010074:	68b9      	ldr	r1, [r7, #8]
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f7ff ff5a 	bl	800ff30 <netconn_recv_data_tcp>
 801007c:	4603      	mov	r3, r0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	0801b5f4 	.word	0x0801b5f4
 801008c:	0801b83c 	.word	0x0801b83c
 8010090:	0801b634 	.word	0x0801b634

08010094 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	4613      	mov	r3, r2
 80100a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d005      	beq.n	80100b4 <netconn_recv_udp_raw_netbuf_flags+0x20>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100b0:	2b10      	cmp	r3, #16
 80100b2:	d10b      	bne.n	80100cc <netconn_recv_udp_raw_netbuf_flags+0x38>
 80100b4:	4b0b      	ldr	r3, [pc, #44]	; (80100e4 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80100b6:	f240 324d 	movw	r2, #845	; 0x34d
 80100ba:	490b      	ldr	r1, [pc, #44]	; (80100e8 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80100bc:	480b      	ldr	r0, [pc, #44]	; (80100ec <netconn_recv_udp_raw_netbuf_flags+0x58>)
 80100be:	f7f1 f937 	bl	8001330 <iprintf>
 80100c2:	2000      	movs	r0, #0
 80100c4:	f008 f9d8 	bl	8018478 <fflush>
 80100c8:	f008 f91c 	bl	8018304 <abort>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80100cc:	79fb      	ldrb	r3, [r7, #7]
 80100ce:	461a      	mov	r2, r3
 80100d0:	68b9      	ldr	r1, [r7, #8]
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f7ff fdfa 	bl	800fccc <netconn_recv_data>
 80100d8:	4603      	mov	r3, r0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	0801b5f4 	.word	0x0801b5f4
 80100e8:	0801b860 	.word	0x0801b860
 80100ec:	0801b634 	.word	0x0801b634

080100f0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08c      	sub	sp, #48	; 0x30
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10b      	bne.n	8010118 <netconn_send+0x28>
 8010100:	4b0f      	ldr	r3, [pc, #60]	; (8010140 <netconn_send+0x50>)
 8010102:	f240 32b2 	movw	r2, #946	; 0x3b2
 8010106:	490f      	ldr	r1, [pc, #60]	; (8010144 <netconn_send+0x54>)
 8010108:	480f      	ldr	r0, [pc, #60]	; (8010148 <netconn_send+0x58>)
 801010a:	f7f1 f911 	bl	8001330 <iprintf>
 801010e:	2000      	movs	r0, #0
 8010110:	f008 f9b2 	bl	8018478 <fflush>
 8010114:	f008 f8f6 	bl	8018304 <abort>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8010120:	f107 030c 	add.w	r3, r7, #12
 8010124:	4619      	mov	r1, r3
 8010126:	4809      	ldr	r0, [pc, #36]	; (801014c <netconn_send+0x5c>)
 8010128:	f7ff fb94 	bl	800f854 <netconn_apimsg>
 801012c:	4603      	mov	r3, r0
 801012e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010132:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010136:	4618      	mov	r0, r3
 8010138:	3730      	adds	r7, #48	; 0x30
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	0801b5f4 	.word	0x0801b5f4
 8010144:	0801b898 	.word	0x0801b898
 8010148:	0801b634 	.word	0x0801b634
 801014c:	08011639 	.word	0x08011639

08010150 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af02      	add	r7, sp, #8
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
 801015c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8010166:	78fa      	ldrb	r2, [r7, #3]
 8010168:	f107 0110 	add.w	r1, r7, #16
 801016c:	6a3b      	ldr	r3, [r7, #32]
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	4613      	mov	r3, r2
 8010172:	2201      	movs	r2, #1
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	f000 f805 	bl	8010184 <netconn_write_vectors_partly>
 801017a:	4603      	mov	r3, r0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b092      	sub	sp, #72	; 0x48
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	4611      	mov	r1, r2
 8010190:	461a      	mov	r2, r3
 8010192:	460b      	mov	r3, r1
 8010194:	80fb      	strh	r3, [r7, #6]
 8010196:	4613      	mov	r3, r2
 8010198:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10b      	bne.n	80101b8 <netconn_write_vectors_partly+0x34>
 80101a0:	4b52      	ldr	r3, [pc, #328]	; (80102ec <netconn_write_vectors_partly+0x168>)
 80101a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80101a6:	4952      	ldr	r1, [pc, #328]	; (80102f0 <netconn_write_vectors_partly+0x16c>)
 80101a8:	4852      	ldr	r0, [pc, #328]	; (80102f4 <netconn_write_vectors_partly+0x170>)
 80101aa:	f7f1 f8c1 	bl	8001330 <iprintf>
 80101ae:	2000      	movs	r0, #0
 80101b0:	f008 f962 	bl	8018478 <fflush>
 80101b4:	f008 f8a6 	bl	8018304 <abort>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101c0:	2b10      	cmp	r3, #16
 80101c2:	d00b      	beq.n	80101dc <netconn_write_vectors_partly+0x58>
 80101c4:	4b49      	ldr	r3, [pc, #292]	; (80102ec <netconn_write_vectors_partly+0x168>)
 80101c6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80101ca:	494b      	ldr	r1, [pc, #300]	; (80102f8 <netconn_write_vectors_partly+0x174>)
 80101cc:	4849      	ldr	r0, [pc, #292]	; (80102f4 <netconn_write_vectors_partly+0x170>)
 80101ce:	f7f1 f8af 	bl	8001330 <iprintf>
 80101d2:	2000      	movs	r0, #0
 80101d4:	f008 f950 	bl	8018478 <fflush>
 80101d8:	f008 f894 	bl	8018304 <abort>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	7f1b      	ldrb	r3, [r3, #28]
 80101e0:	f003 0302 	and.w	r3, r3, #2
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d104      	bne.n	80101f2 <netconn_write_vectors_partly+0x6e>
 80101e8:	797b      	ldrb	r3, [r7, #5]
 80101ea:	f003 0304 	and.w	r3, r3, #4
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <netconn_write_vectors_partly+0x72>
 80101f2:	2301      	movs	r3, #1
 80101f4:	e000      	b.n	80101f8 <netconn_write_vectors_partly+0x74>
 80101f6:	2300      	movs	r3, #0
 80101f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80101fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010200:	2b00      	cmp	r3, #0
 8010202:	d005      	beq.n	8010210 <netconn_write_vectors_partly+0x8c>
 8010204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010206:	2b00      	cmp	r3, #0
 8010208:	d102      	bne.n	8010210 <netconn_write_vectors_partly+0x8c>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801020a:	f06f 0305 	mvn.w	r3, #5
 801020e:	e069      	b.n	80102e4 <netconn_write_vectors_partly+0x160>
  }

  /* sum up the total size */
  size = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010214:	2300      	movs	r3, #0
 8010216:	643b      	str	r3, [r7, #64]	; 0x40
 8010218:	e015      	b.n	8010246 <netconn_write_vectors_partly+0xc2>
    size += vectors[i].len;
 801021a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801021c:	00db      	lsls	r3, r3, #3
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	4413      	add	r3, r2
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010226:	4413      	add	r3, r2
 8010228:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801022a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801022c:	00db      	lsls	r3, r3, #3
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	4413      	add	r3, r2
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010236:	429a      	cmp	r2, r3
 8010238:	d902      	bls.n	8010240 <netconn_write_vectors_partly+0xbc>
      /* overflow */
      return ERR_VAL;
 801023a:	f06f 0305 	mvn.w	r3, #5
 801023e:	e051      	b.n	80102e4 <netconn_write_vectors_partly+0x160>
  for (i = 0; i < vectorcnt; i++) {
 8010240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010242:	3301      	adds	r3, #1
 8010244:	643b      	str	r3, [r7, #64]	; 0x40
 8010246:	88fa      	ldrh	r2, [r7, #6]
 8010248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801024a:	429a      	cmp	r2, r3
 801024c:	dce5      	bgt.n	801021a <netconn_write_vectors_partly+0x96>
    }
  }
  if (size == 0) {
 801024e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010250:	2b00      	cmp	r3, #0
 8010252:	d101      	bne.n	8010258 <netconn_write_vectors_partly+0xd4>
    return ERR_OK;
 8010254:	2300      	movs	r3, #0
 8010256:	e045      	b.n	80102e4 <netconn_write_vectors_partly+0x160>
  } else if (size > SSIZE_MAX) {
 8010258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801025a:	2b00      	cmp	r3, #0
 801025c:	da0a      	bge.n	8010274 <netconn_write_vectors_partly+0xf0>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 801025e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010260:	2b00      	cmp	r3, #0
 8010262:	d102      	bne.n	801026a <netconn_write_vectors_partly+0xe6>
      return ERR_VAL;
 8010264:	f06f 0305 	mvn.w	r3, #5
 8010268:	e03c      	b.n	80102e4 <netconn_write_vectors_partly+0x160>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801026a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801026e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8010270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010272:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 801027c:	88fb      	ldrh	r3, [r7, #6]
 801027e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010284:	797b      	ldrb	r3, [r7, #5]
 8010286:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801028a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801028c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010292:	f107 0314 	add.w	r3, r7, #20
 8010296:	4619      	mov	r1, r3
 8010298:	4818      	ldr	r0, [pc, #96]	; (80102fc <netconn_write_vectors_partly+0x178>)
 801029a:	f7ff fadb 	bl	800f854 <netconn_apimsg>
 801029e:	4603      	mov	r3, r0
 80102a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80102a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d119      	bne.n	80102e0 <netconn_write_vectors_partly+0x15c>
    if (bytes_written != NULL) {
 80102ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d002      	beq.n	80102b8 <netconn_write_vectors_partly+0x134>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80102b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80102b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10f      	bne.n	80102e0 <netconn_write_vectors_partly+0x15c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80102c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d00b      	beq.n	80102e0 <netconn_write_vectors_partly+0x15c>
 80102c8:	4b08      	ldr	r3, [pc, #32]	; (80102ec <netconn_write_vectors_partly+0x168>)
 80102ca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80102ce:	490c      	ldr	r1, [pc, #48]	; (8010300 <netconn_write_vectors_partly+0x17c>)
 80102d0:	4808      	ldr	r0, [pc, #32]	; (80102f4 <netconn_write_vectors_partly+0x170>)
 80102d2:	f7f1 f82d 	bl	8001330 <iprintf>
 80102d6:	2000      	movs	r0, #0
 80102d8:	f008 f8ce 	bl	8018478 <fflush>
 80102dc:	f008 f812 	bl	8018304 <abort>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80102e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3748      	adds	r7, #72	; 0x48
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	0801b5f4 	.word	0x0801b5f4
 80102f0:	0801b8b4 	.word	0x0801b8b4
 80102f4:	0801b634 	.word	0x0801b634
 80102f8:	0801b8d0 	.word	0x0801b8d0
 80102fc:	08011b1d 	.word	0x08011b1d
 8010300:	0801b8f4 	.word	0x0801b8f4

08010304 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b08c      	sub	sp, #48	; 0x30
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	460b      	mov	r3, r1
 801030e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10b      	bne.n	801032e <netconn_close_shutdown+0x2a>
 8010316:	4b10      	ldr	r3, [pc, #64]	; (8010358 <netconn_close_shutdown+0x54>)
 8010318:	f240 4247 	movw	r2, #1095	; 0x447
 801031c:	490f      	ldr	r1, [pc, #60]	; (801035c <netconn_close_shutdown+0x58>)
 801031e:	4810      	ldr	r0, [pc, #64]	; (8010360 <netconn_close_shutdown+0x5c>)
 8010320:	f7f1 f806 	bl	8001330 <iprintf>
 8010324:	2000      	movs	r0, #0
 8010326:	f008 f8a7 	bl	8018478 <fflush>
 801032a:	f007 ffeb 	bl	8018304 <abort>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010332:	78fb      	ldrb	r3, [r7, #3]
 8010334:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010336:	2329      	movs	r3, #41	; 0x29
 8010338:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801033a:	f107 030c 	add.w	r3, r7, #12
 801033e:	4619      	mov	r1, r3
 8010340:	4808      	ldr	r0, [pc, #32]	; (8010364 <netconn_close_shutdown+0x60>)
 8010342:	f7ff fa87 	bl	800f854 <netconn_apimsg>
 8010346:	4603      	mov	r3, r0
 8010348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801034c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010350:	4618      	mov	r0, r3
 8010352:	3730      	adds	r7, #48	; 0x30
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	0801b5f4 	.word	0x0801b5f4
 801035c:	0801b918 	.word	0x0801b918
 8010360:	0801b634 	.word	0x0801b634
 8010364:	08011d6d 	.word	0x08011d6d

08010368 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d101      	bne.n	801037a <netconn_err+0x12>
    return ERR_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	e00d      	b.n	8010396 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801037a:	f003 f96f 	bl	801365c <sys_arch_protect>
 801037e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	7a1b      	ldrb	r3, [r3, #8]
 8010384:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f003 f96c 	bl	801366a <sys_arch_unprotect>
  return err;
 8010392:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
	...

080103a0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	4603      	mov	r3, r0
 80103a8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80103aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ae:	f113 0f0e 	cmn.w	r3, #14
 80103b2:	d008      	beq.n	80103c6 <lwip_netconn_err_to_msg+0x26>
 80103b4:	f113 0f0d 	cmn.w	r3, #13
 80103b8:	d003      	beq.n	80103c2 <lwip_netconn_err_to_msg+0x22>
 80103ba:	f113 0f0f 	cmn.w	r3, #15
 80103be:	d004      	beq.n	80103ca <lwip_netconn_err_to_msg+0x2a>
 80103c0:	e005      	b.n	80103ce <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80103c2:	4b0d      	ldr	r3, [pc, #52]	; (80103f8 <lwip_netconn_err_to_msg+0x58>)
 80103c4:	e013      	b.n	80103ee <lwip_netconn_err_to_msg+0x4e>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80103c6:	4b0d      	ldr	r3, [pc, #52]	; (80103fc <lwip_netconn_err_to_msg+0x5c>)
 80103c8:	e011      	b.n	80103ee <lwip_netconn_err_to_msg+0x4e>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80103ca:	4b0d      	ldr	r3, [pc, #52]	; (8010400 <lwip_netconn_err_to_msg+0x60>)
 80103cc:	e00f      	b.n	80103ee <lwip_netconn_err_to_msg+0x4e>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80103ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00a      	beq.n	80103ec <lwip_netconn_err_to_msg+0x4c>
 80103d6:	4b0b      	ldr	r3, [pc, #44]	; (8010404 <lwip_netconn_err_to_msg+0x64>)
 80103d8:	227d      	movs	r2, #125	; 0x7d
 80103da:	490b      	ldr	r1, [pc, #44]	; (8010408 <lwip_netconn_err_to_msg+0x68>)
 80103dc:	480b      	ldr	r0, [pc, #44]	; (801040c <lwip_netconn_err_to_msg+0x6c>)
 80103de:	f7f0 ffa7 	bl	8001330 <iprintf>
 80103e2:	2000      	movs	r0, #0
 80103e4:	f008 f848 	bl	8018478 <fflush>
 80103e8:	f007 ff8c 	bl	8018304 <abort>
      return NULL;
 80103ec:	2300      	movs	r3, #0
  }
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	0801c7ec 	.word	0x0801c7ec
 80103fc:	0801c7ed 	.word	0x0801c7ed
 8010400:	0801c7ee 	.word	0x0801c7ee
 8010404:	0801b934 	.word	0x0801b934
 8010408:	0801b950 	.word	0x0801b950
 801040c:	0801b960 	.word	0x0801b960

08010410 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10a      	bne.n	8010436 <lwip_netconn_is_err_msg+0x26>
 8010420:	4b15      	ldr	r3, [pc, #84]	; (8010478 <lwip_netconn_is_err_msg+0x68>)
 8010422:	2285      	movs	r2, #133	; 0x85
 8010424:	4915      	ldr	r1, [pc, #84]	; (801047c <lwip_netconn_is_err_msg+0x6c>)
 8010426:	4816      	ldr	r0, [pc, #88]	; (8010480 <lwip_netconn_is_err_msg+0x70>)
 8010428:	f7f0 ff82 	bl	8001330 <iprintf>
 801042c:	2000      	movs	r0, #0
 801042e:	f008 f823 	bl	8018478 <fflush>
 8010432:	f007 ff67 	bl	8018304 <abort>

  if (msg == &netconn_aborted) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4a12      	ldr	r2, [pc, #72]	; (8010484 <lwip_netconn_is_err_msg+0x74>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d104      	bne.n	8010448 <lwip_netconn_is_err_msg+0x38>
    *err = ERR_ABRT;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	22f3      	movs	r2, #243	; 0xf3
 8010442:	701a      	strb	r2, [r3, #0]
    return 1;
 8010444:	2301      	movs	r3, #1
 8010446:	e012      	b.n	801046e <lwip_netconn_is_err_msg+0x5e>
  } else if (msg == &netconn_reset) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4a0f      	ldr	r2, [pc, #60]	; (8010488 <lwip_netconn_is_err_msg+0x78>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d104      	bne.n	801045a <lwip_netconn_is_err_msg+0x4a>
    *err = ERR_RST;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	22f2      	movs	r2, #242	; 0xf2
 8010454:	701a      	strb	r2, [r3, #0]
    return 1;
 8010456:	2301      	movs	r3, #1
 8010458:	e009      	b.n	801046e <lwip_netconn_is_err_msg+0x5e>
  } else if (msg == &netconn_closed) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4a0b      	ldr	r2, [pc, #44]	; (801048c <lwip_netconn_is_err_msg+0x7c>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d104      	bne.n	801046c <lwip_netconn_is_err_msg+0x5c>
    *err = ERR_CLSD;
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	22f1      	movs	r2, #241	; 0xf1
 8010466:	701a      	strb	r2, [r3, #0]
    return 1;
 8010468:	2301      	movs	r3, #1
 801046a:	e000      	b.n	801046e <lwip_netconn_is_err_msg+0x5e>
  }
  return 0;
 801046c:	2300      	movs	r3, #0
}
 801046e:	4618      	mov	r0, r3
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	0801b934 	.word	0x0801b934
 801047c:	0801b988 	.word	0x0801b988
 8010480:	0801b960 	.word	0x0801b960
 8010484:	0801c7ec 	.word	0x0801c7ec
 8010488:	0801c7ed 	.word	0x0801c7ed
 801048c:	0801c7ee 	.word	0x0801c7ee

08010490 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b088      	sub	sp, #32
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10a      	bne.n	80104ba <recv_udp+0x2a>
 80104a4:	4b3b      	ldr	r3, [pc, #236]	; (8010594 <recv_udp+0x104>)
 80104a6:	22e5      	movs	r2, #229	; 0xe5
 80104a8:	493b      	ldr	r1, [pc, #236]	; (8010598 <recv_udp+0x108>)
 80104aa:	483c      	ldr	r0, [pc, #240]	; (801059c <recv_udp+0x10c>)
 80104ac:	f7f0 ff40 	bl	8001330 <iprintf>
 80104b0:	2000      	movs	r0, #0
 80104b2:	f007 ffe1 	bl	8018478 <fflush>
 80104b6:	f007 ff25 	bl	8018304 <abort>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10a      	bne.n	80104d6 <recv_udp+0x46>
 80104c0:	4b34      	ldr	r3, [pc, #208]	; (8010594 <recv_udp+0x104>)
 80104c2:	22e6      	movs	r2, #230	; 0xe6
 80104c4:	4936      	ldr	r1, [pc, #216]	; (80105a0 <recv_udp+0x110>)
 80104c6:	4835      	ldr	r0, [pc, #212]	; (801059c <recv_udp+0x10c>)
 80104c8:	f7f0 ff32 	bl	8001330 <iprintf>
 80104cc:	2000      	movs	r0, #0
 80104ce:	f007 ffd3 	bl	8018478 <fflush>
 80104d2:	f007 ff17 	bl	8018304 <abort>
  conn = (struct netconn *)arg;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d103      	bne.n	80104e8 <recv_udp+0x58>
    pbuf_free(p);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7f7 fafd 	bl	8007ae0 <pbuf_free>
    return;
 80104e6:	e052      	b.n	801058e <recv_udp+0xfe>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	685a      	ldr	r2, [r3, #4]
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d00a      	beq.n	8010508 <recv_udp+0x78>
 80104f2:	4b28      	ldr	r3, [pc, #160]	; (8010594 <recv_udp+0x104>)
 80104f4:	22ee      	movs	r2, #238	; 0xee
 80104f6:	492b      	ldr	r1, [pc, #172]	; (80105a4 <recv_udp+0x114>)
 80104f8:	4828      	ldr	r0, [pc, #160]	; (801059c <recv_udp+0x10c>)
 80104fa:	f7f0 ff19 	bl	8001330 <iprintf>
 80104fe:	2000      	movs	r0, #0
 8010500:	f007 ffba 	bl	8018478 <fflush>
 8010504:	f007 fefe 	bl	8018304 <abort>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	3310      	adds	r3, #16
 801050c:	2b00      	cmp	r3, #0
 801050e:	d003      	beq.n	8010518 <recv_udp+0x88>
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d103      	bne.n	8010520 <recv_udp+0x90>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7f7 fae1 	bl	8007ae0 <pbuf_free>
    return;
 801051e:	e036      	b.n	801058e <recv_udp+0xfe>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010520:	2006      	movs	r0, #6
 8010522:	f7f6 fc55 	bl	8006dd0 <memp_malloc>
 8010526:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d103      	bne.n	8010536 <recv_udp+0xa6>
    pbuf_free(p);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7f7 fad6 	bl	8007ae0 <pbuf_free>
    return;
 8010534:	e02b      	b.n	801058e <recv_udp+0xfe>
  } else {
    buf->p = p;
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <recv_udp+0xbe>
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	e000      	b.n	8010550 <recv_udp+0xc0>
 801054e:	2300      	movs	r3, #0
 8010550:	69ba      	ldr	r2, [r7, #24]
 8010552:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010554:	69bb      	ldr	r3, [r7, #24]
 8010556:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010558:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	891b      	ldrh	r3, [r3, #8]
 801055e:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	3310      	adds	r3, #16
 8010564:	69b9      	ldr	r1, [r7, #24]
 8010566:	4618      	mov	r0, r3
 8010568:	f003 fb36 	bl	8013bd8 <sys_mbox_trypost>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d003      	beq.n	801057a <recv_udp+0xea>
    netbuf_delete(buf);
 8010572:	69b8      	ldr	r0, [r7, #24]
 8010574:	f001 fcb2 	bl	8011edc <netbuf_delete>
    return;
 8010578:	e009      	b.n	801058e <recv_udp+0xfe>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d005      	beq.n	801058e <recv_udp+0xfe>
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010586:	8afa      	ldrh	r2, [r7, #22]
 8010588:	2100      	movs	r1, #0
 801058a:	69f8      	ldr	r0, [r7, #28]
 801058c:	4798      	blx	r3
  }
}
 801058e:	3720      	adds	r7, #32
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	0801b934 	.word	0x0801b934
 8010598:	0801b994 	.word	0x0801b994
 801059c:	0801b960 	.word	0x0801b960
 80105a0:	0801b9b8 	.word	0x0801b9b8
 80105a4:	0801b9d8 	.word	0x0801b9d8

080105a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b088      	sub	sp, #32
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60f8      	str	r0, [r7, #12]
 80105b0:	60b9      	str	r1, [r7, #8]
 80105b2:	607a      	str	r2, [r7, #4]
 80105b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10b      	bne.n	80105d4 <recv_tcp+0x2c>
 80105bc:	4b40      	ldr	r3, [pc, #256]	; (80106c0 <recv_tcp+0x118>)
 80105be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80105c2:	4940      	ldr	r1, [pc, #256]	; (80106c4 <recv_tcp+0x11c>)
 80105c4:	4840      	ldr	r0, [pc, #256]	; (80106c8 <recv_tcp+0x120>)
 80105c6:	f7f0 feb3 	bl	8001330 <iprintf>
 80105ca:	2000      	movs	r0, #0
 80105cc:	f007 ff54 	bl	8018478 <fflush>
 80105d0:	f007 fe98 	bl	8018304 <abort>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d10b      	bne.n	80105f2 <recv_tcp+0x4a>
 80105da:	4b39      	ldr	r3, [pc, #228]	; (80106c0 <recv_tcp+0x118>)
 80105dc:	f240 122d 	movw	r2, #301	; 0x12d
 80105e0:	493a      	ldr	r1, [pc, #232]	; (80106cc <recv_tcp+0x124>)
 80105e2:	4839      	ldr	r0, [pc, #228]	; (80106c8 <recv_tcp+0x120>)
 80105e4:	f7f0 fea4 	bl	8001330 <iprintf>
 80105e8:	2000      	movs	r0, #0
 80105ea:	f007 ff45 	bl	8018478 <fflush>
 80105ee:	f007 fe89 	bl	8018304 <abort>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80105f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00b      	beq.n	8010612 <recv_tcp+0x6a>
 80105fa:	4b31      	ldr	r3, [pc, #196]	; (80106c0 <recv_tcp+0x118>)
 80105fc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010600:	4933      	ldr	r1, [pc, #204]	; (80106d0 <recv_tcp+0x128>)
 8010602:	4831      	ldr	r0, [pc, #196]	; (80106c8 <recv_tcp+0x120>)
 8010604:	f7f0 fe94 	bl	8001330 <iprintf>
 8010608:	2000      	movs	r0, #0
 801060a:	f007 ff35 	bl	8018478 <fflush>
 801060e:	f007 fe79 	bl	8018304 <abort>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d102      	bne.n	8010622 <recv_tcp+0x7a>
    return ERR_VAL;
 801061c:	f06f 0305 	mvn.w	r3, #5
 8010620:	e04a      	b.n	80106b8 <recv_tcp+0x110>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	429a      	cmp	r2, r3
 801062a:	d00b      	beq.n	8010644 <recv_tcp+0x9c>
 801062c:	4b24      	ldr	r3, [pc, #144]	; (80106c0 <recv_tcp+0x118>)
 801062e:	f240 1235 	movw	r2, #309	; 0x135
 8010632:	4928      	ldr	r1, [pc, #160]	; (80106d4 <recv_tcp+0x12c>)
 8010634:	4824      	ldr	r0, [pc, #144]	; (80106c8 <recv_tcp+0x120>)
 8010636:	f7f0 fe7b 	bl	8001330 <iprintf>
 801063a:	2000      	movs	r0, #0
 801063c:	f007 ff1c 	bl	8018478 <fflush>
 8010640:	f007 fe60 	bl	8018304 <abort>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	3310      	adds	r3, #16
 8010648:	2b00      	cmp	r3, #0
 801064a:	d003      	beq.n	8010654 <recv_tcp+0xac>
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	691b      	ldr	r3, [r3, #16]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10d      	bne.n	8010670 <recv_tcp+0xc8>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d008      	beq.n	801066c <recv_tcp+0xc4>
      tcp_recved(pcb, p->tot_len);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	891b      	ldrh	r3, [r3, #8]
 801065e:	4619      	mov	r1, r3
 8010660:	68b8      	ldr	r0, [r7, #8]
 8010662:	f7f8 fa8d 	bl	8008b80 <tcp_recved>
      pbuf_free(p);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7f7 fa3a 	bl	8007ae0 <pbuf_free>
    }
    return ERR_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	e023      	b.n	80106b8 <recv_tcp+0x110>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d005      	beq.n	8010682 <recv_tcp+0xda>
    msg = p;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	891b      	ldrh	r3, [r3, #8]
 801067e:	83fb      	strh	r3, [r7, #30]
 8010680:	e003      	b.n	801068a <recv_tcp+0xe2>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8010682:	4b15      	ldr	r3, [pc, #84]	; (80106d8 <recv_tcp+0x130>)
 8010684:	61bb      	str	r3, [r7, #24]
    len = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	3310      	adds	r3, #16
 801068e:	69b9      	ldr	r1, [r7, #24]
 8010690:	4618      	mov	r0, r3
 8010692:	f003 faa1 	bl	8013bd8 <sys_mbox_trypost>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <recv_tcp+0xfa>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 801069c:	f04f 33ff 	mov.w	r3, #4294967295
 80106a0:	e00a      	b.n	80106b8 <recv_tcp+0x110>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d005      	beq.n	80106b6 <recv_tcp+0x10e>
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ae:	8bfa      	ldrh	r2, [r7, #30]
 80106b0:	2100      	movs	r1, #0
 80106b2:	6978      	ldr	r0, [r7, #20]
 80106b4:	4798      	blx	r3
  }

  return ERR_OK;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3720      	adds	r7, #32
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	0801b934 	.word	0x0801b934
 80106c4:	0801b9f8 	.word	0x0801b9f8
 80106c8:	0801b960 	.word	0x0801b960
 80106cc:	0801ba1c 	.word	0x0801ba1c
 80106d0:	0801ba3c 	.word	0x0801ba3c
 80106d4:	0801ba54 	.word	0x0801ba54
 80106d8:	0801c7ee 	.word	0x0801c7ee

080106dc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10b      	bne.n	8010708 <poll_tcp+0x2c>
 80106f0:	4b2c      	ldr	r3, [pc, #176]	; (80107a4 <poll_tcp+0xc8>)
 80106f2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80106f6:	492c      	ldr	r1, [pc, #176]	; (80107a8 <poll_tcp+0xcc>)
 80106f8:	482c      	ldr	r0, [pc, #176]	; (80107ac <poll_tcp+0xd0>)
 80106fa:	f7f0 fe19 	bl	8001330 <iprintf>
 80106fe:	2000      	movs	r0, #0
 8010700:	f007 feba 	bl	8018478 <fflush>
 8010704:	f007 fdfe 	bl	8018304 <abort>

  if (conn->state == NETCONN_WRITE) {
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	785b      	ldrb	r3, [r3, #1]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d104      	bne.n	801071a <poll_tcp+0x3e>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010710:	2101      	movs	r1, #1
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f001 f814 	bl	8011740 <lwip_netconn_do_writemore>
 8010718:	e016      	b.n	8010748 <poll_tcp+0x6c>
  } else if (conn->state == NETCONN_CLOSE) {
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	785b      	ldrb	r3, [r3, #1]
 801071e:	2b04      	cmp	r3, #4
 8010720:	d112      	bne.n	8010748 <poll_tcp+0x6c>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6a1b      	ldr	r3, [r3, #32]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00a      	beq.n	8010740 <poll_tcp+0x64>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	7a5b      	ldrb	r3, [r3, #9]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d005      	beq.n	8010740 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6a1b      	ldr	r3, [r3, #32]
 8010738:	7a5a      	ldrb	r2, [r3, #9]
 801073a:	3a01      	subs	r2, #1
 801073c:	b2d2      	uxtb	r2, r2
 801073e:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010740:	2101      	movs	r1, #1
 8010742:	68f8      	ldr	r0, [r7, #12]
 8010744:	f000 fc22 	bl	8010f8c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	7f1b      	ldrb	r3, [r3, #28]
 801074c:	f003 0310 	and.w	r3, r3, #16
 8010750:	2b00      	cmp	r3, #0
 8010752:	d021      	beq.n	8010798 <poll_tcp+0xbc>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d01d      	beq.n	8010798 <poll_tcp+0xbc>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010764:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010768:	d316      	bcc.n	8010798 <poll_tcp+0xbc>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010772:	2b04      	cmp	r3, #4
 8010774:	d810      	bhi.n	8010798 <poll_tcp+0xbc>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	7f1b      	ldrb	r3, [r3, #28]
 801077a:	f023 0310 	bic.w	r3, r3, #16
 801077e:	b2da      	uxtb	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010788:	2b00      	cmp	r3, #0
 801078a:	d005      	beq.n	8010798 <poll_tcp+0xbc>
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010790:	2200      	movs	r2, #0
 8010792:	2102      	movs	r1, #2
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	0801b934 	.word	0x0801b934
 80107a8:	0801ba74 	.word	0x0801ba74
 80107ac:	0801b960 	.word	0x0801b960

080107b0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b086      	sub	sp, #24
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	4613      	mov	r3, r2
 80107bc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d10b      	bne.n	80107e0 <sent_tcp+0x30>
 80107c8:	4b23      	ldr	r3, [pc, #140]	; (8010858 <sent_tcp+0xa8>)
 80107ca:	f240 1293 	movw	r2, #403	; 0x193
 80107ce:	4923      	ldr	r1, [pc, #140]	; (801085c <sent_tcp+0xac>)
 80107d0:	4823      	ldr	r0, [pc, #140]	; (8010860 <sent_tcp+0xb0>)
 80107d2:	f7f0 fdad 	bl	8001330 <iprintf>
 80107d6:	2000      	movs	r0, #0
 80107d8:	f007 fe4e 	bl	8018478 <fflush>
 80107dc:	f007 fd92 	bl	8018304 <abort>

  if (conn) {
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d032      	beq.n	801084c <sent_tcp+0x9c>
    if (conn->state == NETCONN_WRITE) {
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	785b      	ldrb	r3, [r3, #1]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d104      	bne.n	80107f8 <sent_tcp+0x48>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80107ee:	2101      	movs	r1, #1
 80107f0:	6978      	ldr	r0, [r7, #20]
 80107f2:	f000 ffa5 	bl	8011740 <lwip_netconn_do_writemore>
 80107f6:	e007      	b.n	8010808 <sent_tcp+0x58>
    } else if (conn->state == NETCONN_CLOSE) {
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	785b      	ldrb	r3, [r3, #1]
 80107fc:	2b04      	cmp	r3, #4
 80107fe:	d103      	bne.n	8010808 <sent_tcp+0x58>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010800:	2101      	movs	r1, #1
 8010802:	6978      	ldr	r0, [r7, #20]
 8010804:	f000 fbc2 	bl	8010f8c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d01d      	beq.n	801084c <sent_tcp+0x9c>
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010818:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801081c:	d316      	bcc.n	801084c <sent_tcp+0x9c>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010826:	2b04      	cmp	r3, #4
 8010828:	d810      	bhi.n	801084c <sent_tcp+0x9c>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	7f1b      	ldrb	r3, [r3, #28]
 801082e:	f023 0310 	bic.w	r3, r3, #16
 8010832:	b2da      	uxtb	r2, r3
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	2b00      	cmp	r3, #0
 801083e:	d005      	beq.n	801084c <sent_tcp+0x9c>
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010844:	88fa      	ldrh	r2, [r7, #6]
 8010846:	2102      	movs	r1, #2
 8010848:	6978      	ldr	r0, [r7, #20]
 801084a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3718      	adds	r7, #24
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	0801b934 	.word	0x0801b934
 801085c:	0801ba74 	.word	0x0801ba74
 8010860:	0801b960 	.word	0x0801b960

08010864 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b088      	sub	sp, #32
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10b      	bne.n	8010892 <err_tcp+0x2e>
 801087a:	4b69      	ldr	r3, [pc, #420]	; (8010a20 <err_tcp+0x1bc>)
 801087c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010880:	4968      	ldr	r1, [pc, #416]	; (8010a24 <err_tcp+0x1c0>)
 8010882:	4869      	ldr	r0, [pc, #420]	; (8010a28 <err_tcp+0x1c4>)
 8010884:	f7f0 fd54 	bl	8001330 <iprintf>
 8010888:	2000      	movs	r0, #0
 801088a:	f007 fdf5 	bl	8018478 <fflush>
 801088e:	f007 fd39 	bl	8018304 <abort>

  SYS_ARCH_PROTECT(lev);
 8010892:	f002 fee3 	bl	801365c <sys_arch_protect>
 8010896:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	2200      	movs	r2, #0
 801089c:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	78fa      	ldrb	r2, [r7, #3]
 80108a2:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	7f1b      	ldrb	r3, [r3, #28]
 80108a8:	f043 0301 	orr.w	r3, r3, #1
 80108ac:	b2da      	uxtb	r2, r3
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	785b      	ldrb	r3, [r3, #1]
 80108b6:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2200      	movs	r2, #0
 80108bc:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80108be:	69b8      	ldr	r0, [r7, #24]
 80108c0:	f002 fed3 	bl	801366a <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d005      	beq.n	80108d8 <err_tcp+0x74>
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d0:	2200      	movs	r2, #0
 80108d2:	2104      	movs	r1, #4
 80108d4:	69f8      	ldr	r0, [r7, #28]
 80108d6:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d005      	beq.n	80108ec <err_tcp+0x88>
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e4:	2200      	movs	r2, #0
 80108e6:	2100      	movs	r1, #0
 80108e8:	69f8      	ldr	r0, [r7, #28]
 80108ea:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d005      	beq.n	8010900 <err_tcp+0x9c>
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	2200      	movs	r2, #0
 80108fa:	2102      	movs	r1, #2
 80108fc:	69f8      	ldr	r0, [r7, #28]
 80108fe:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010904:	4618      	mov	r0, r3
 8010906:	f7ff fd4b 	bl	80103a0 <lwip_netconn_err_to_msg>
 801090a:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	3310      	adds	r3, #16
 8010910:	2b00      	cmp	r3, #0
 8010912:	d009      	beq.n	8010928 <err_tcp+0xc4>
 8010914:	69fb      	ldr	r3, [r7, #28]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d005      	beq.n	8010928 <err_tcp+0xc4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	3310      	adds	r3, #16
 8010920:	6939      	ldr	r1, [r7, #16]
 8010922:	4618      	mov	r0, r3
 8010924:	f003 f958 	bl	8013bd8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	3314      	adds	r3, #20
 801092c:	2b00      	cmp	r3, #0
 801092e:	d009      	beq.n	8010944 <err_tcp+0xe0>
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d005      	beq.n	8010944 <err_tcp+0xe0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	3314      	adds	r3, #20
 801093c:	6939      	ldr	r1, [r7, #16]
 801093e:	4618      	mov	r0, r3
 8010940:	f003 f94a 	bl	8013bd8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010944:	7dfb      	ldrb	r3, [r7, #23]
 8010946:	2b01      	cmp	r3, #1
 8010948:	d005      	beq.n	8010956 <err_tcp+0xf2>
 801094a:	7dfb      	ldrb	r3, [r7, #23]
 801094c:	2b04      	cmp	r3, #4
 801094e:	d002      	beq.n	8010956 <err_tcp+0xf2>
 8010950:	7dfb      	ldrb	r3, [r7, #23]
 8010952:	2b03      	cmp	r3, #3
 8010954:	d14e      	bne.n	80109f4 <err_tcp+0x190>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010956:	69fb      	ldr	r3, [r7, #28]
 8010958:	7f1b      	ldrb	r3, [r3, #28]
 801095a:	f003 0304 	and.w	r3, r3, #4
 801095e:	2b00      	cmp	r3, #0
 8010960:	bf14      	ite	ne
 8010962:	2301      	movne	r3, #1
 8010964:	2300      	moveq	r3, #0
 8010966:	b2db      	uxtb	r3, r3
 8010968:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	7f1b      	ldrb	r3, [r3, #28]
 801096e:	f023 0304 	bic.w	r3, r3, #4
 8010972:	b2da      	uxtb	r2, r3
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d14a      	bne.n	8010a14 <err_tcp+0x1b0>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	6a1b      	ldr	r3, [r3, #32]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d10b      	bne.n	801099e <err_tcp+0x13a>
 8010986:	4b26      	ldr	r3, [pc, #152]	; (8010a20 <err_tcp+0x1bc>)
 8010988:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801098c:	4927      	ldr	r1, [pc, #156]	; (8010a2c <err_tcp+0x1c8>)
 801098e:	4826      	ldr	r0, [pc, #152]	; (8010a28 <err_tcp+0x1c4>)
 8010990:	f7f0 fcce 	bl	8001330 <iprintf>
 8010994:	2000      	movs	r0, #0
 8010996:	f007 fd6f 	bl	8018478 <fflush>
 801099a:	f007 fcb3 	bl	8018304 <abort>
      if (old_state == NETCONN_CLOSE) {
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2b04      	cmp	r3, #4
 80109a2:	d104      	bne.n	80109ae <err_tcp+0x14a>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	6a1b      	ldr	r3, [r3, #32]
 80109a8:	2200      	movs	r2, #0
 80109aa:	711a      	strb	r2, [r3, #4]
 80109ac:	e003      	b.n	80109b6 <err_tcp+0x152>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	6a1b      	ldr	r3, [r3, #32]
 80109b2:	78fa      	ldrb	r2, [r7, #3]
 80109b4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	6a1b      	ldr	r3, [r3, #32]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	330c      	adds	r3, #12
 80109be:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d003      	beq.n	80109ce <err_tcp+0x16a>
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d10b      	bne.n	80109e6 <err_tcp+0x182>
 80109ce:	4b14      	ldr	r3, [pc, #80]	; (8010a20 <err_tcp+0x1bc>)
 80109d0:	f240 12ef 	movw	r2, #495	; 0x1ef
 80109d4:	4916      	ldr	r1, [pc, #88]	; (8010a30 <err_tcp+0x1cc>)
 80109d6:	4814      	ldr	r0, [pc, #80]	; (8010a28 <err_tcp+0x1c4>)
 80109d8:	f7f0 fcaa 	bl	8001330 <iprintf>
 80109dc:	2000      	movs	r0, #0
 80109de:	f007 fd4b 	bl	8018478 <fflush>
 80109e2:	f007 fc8f 	bl	8018304 <abort>
      conn->current_msg = NULL;
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	2200      	movs	r2, #0
 80109ea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80109ec:	68b8      	ldr	r0, [r7, #8]
 80109ee:	f002 ff99 	bl	8013924 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80109f2:	e00f      	b.n	8010a14 <err_tcp+0x1b0>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	6a1b      	ldr	r3, [r3, #32]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00c      	beq.n	8010a16 <err_tcp+0x1b2>
 80109fc:	4b08      	ldr	r3, [pc, #32]	; (8010a20 <err_tcp+0x1bc>)
 80109fe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010a02:	490c      	ldr	r1, [pc, #48]	; (8010a34 <err_tcp+0x1d0>)
 8010a04:	4808      	ldr	r0, [pc, #32]	; (8010a28 <err_tcp+0x1c4>)
 8010a06:	f7f0 fc93 	bl	8001330 <iprintf>
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	f007 fd34 	bl	8018478 <fflush>
 8010a10:	f007 fc78 	bl	8018304 <abort>
      (old_state == NETCONN_CONNECT)) {
 8010a14:	bf00      	nop
  }
}
 8010a16:	bf00      	nop
 8010a18:	3720      	adds	r7, #32
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	0801b934 	.word	0x0801b934
 8010a24:	0801ba74 	.word	0x0801ba74
 8010a28:	0801b960 	.word	0x0801b960
 8010a2c:	0801ba84 	.word	0x0801ba84
 8010a30:	0801baa0 	.word	0x0801baa0
 8010a34:	0801babc 	.word	0x0801babc

08010a38 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f7f8 ffd3 	bl	80099f4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010a4e:	490a      	ldr	r1, [pc, #40]	; (8010a78 <setup_tcp+0x40>)
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f7f8 ffe1 	bl	8009a18 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010a56:	4909      	ldr	r1, [pc, #36]	; (8010a7c <setup_tcp+0x44>)
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7f9 f803 	bl	8009a64 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010a5e:	2202      	movs	r2, #2
 8010a60:	4907      	ldr	r1, [pc, #28]	; (8010a80 <setup_tcp+0x48>)
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f7f9 f862 	bl	8009b2c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010a68:	4906      	ldr	r1, [pc, #24]	; (8010a84 <setup_tcp+0x4c>)
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f7f9 f820 	bl	8009ab0 <tcp_err>
}
 8010a70:	bf00      	nop
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	080105a9 	.word	0x080105a9
 8010a7c:	080107b1 	.word	0x080107b1
 8010a80:	080106dd 	.word	0x080106dd
 8010a84:	08010865 	.word	0x08010865

08010a88 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8010a88:	b590      	push	{r4, r7, lr}
 8010a8a:	b089      	sub	sp, #36	; 0x24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	4613      	mov	r3, r2
 8010a94:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d102      	bne.n	8010aa6 <accept_function+0x1e>
    return ERR_VAL;
 8010aa0:	f06f 0305 	mvn.w	r3, #5
 8010aa4:	e0a4      	b.n	8010bf0 <accept_function+0x168>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	3314      	adds	r3, #20
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d003      	beq.n	8010ab6 <accept_function+0x2e>
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	695b      	ldr	r3, [r3, #20]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d102      	bne.n	8010abc <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8010ab6:	f06f 0305 	mvn.w	r3, #5
 8010aba:	e099      	b.n	8010bf0 <accept_function+0x168>
  }

  if (newpcb == NULL) {
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d11b      	bne.n	8010afa <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	f103 0414 	add.w	r4, r3, #20
 8010ac8:	f06f 000c 	mvn.w	r0, #12
 8010acc:	f7ff fc68 	bl	80103a0 <lwip_netconn_err_to_msg>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f003 f87f 	bl	8013bd8 <sys_mbox_trypost>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d109      	bne.n	8010af4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d005      	beq.n	8010af4 <accept_function+0x6c>
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aec:	2200      	movs	r2, #0
 8010aee:	2100      	movs	r1, #0
 8010af0:	69f8      	ldr	r0, [r7, #28]
 8010af2:	4798      	blx	r3
    }
    return ERR_VAL;
 8010af4:	f06f 0305 	mvn.w	r3, #5
 8010af8:	e07a      	b.n	8010bf0 <accept_function+0x168>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8010afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00b      	beq.n	8010b1a <accept_function+0x92>
 8010b02:	4b3d      	ldr	r3, [pc, #244]	; (8010bf8 <accept_function+0x170>)
 8010b04:	f240 222a 	movw	r2, #554	; 0x22a
 8010b08:	493c      	ldr	r1, [pc, #240]	; (8010bfc <accept_function+0x174>)
 8010b0a:	483d      	ldr	r0, [pc, #244]	; (8010c00 <accept_function+0x178>)
 8010b0c:	f7f0 fc10 	bl	8001330 <iprintf>
 8010b10:	2000      	movs	r0, #0
 8010b12:	f007 fcb1 	bl	8018478 <fflush>
 8010b16:	f007 fbf5 	bl	8018304 <abort>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b22:	4619      	mov	r1, r3
 8010b24:	4610      	mov	r0, r2
 8010b26:	f000 f8f1 	bl	8010d0c <netconn_alloc>
 8010b2a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8010b2c:	69bb      	ldr	r3, [r7, #24]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d11b      	bne.n	8010b6a <accept_function+0xe2>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	f103 0414 	add.w	r4, r3, #20
 8010b38:	f06f 000c 	mvn.w	r0, #12
 8010b3c:	f7ff fc30 	bl	80103a0 <lwip_netconn_err_to_msg>
 8010b40:	4603      	mov	r3, r0
 8010b42:	4619      	mov	r1, r3
 8010b44:	4620      	mov	r0, r4
 8010b46:	f003 f847 	bl	8013bd8 <sys_mbox_trypost>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d109      	bne.n	8010b64 <accept_function+0xdc>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d005      	beq.n	8010b64 <accept_function+0xdc>
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	2100      	movs	r1, #0
 8010b60:	69f8      	ldr	r0, [r7, #28]
 8010b62:	4798      	blx	r3
    }
    return ERR_MEM;
 8010b64:	f04f 33ff 	mov.w	r3, #4294967295
 8010b68:	e042      	b.n	8010bf0 <accept_function+0x168>
  }
  newconn->pcb.tcp = newpcb;
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8010b70:	69b8      	ldr	r0, [r7, #24]
 8010b72:	f7ff ff61 	bl	8010a38 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	3314      	adds	r3, #20
 8010b7a:	69b9      	ldr	r1, [r7, #24]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f003 f82b 	bl	8013bd8 <sys_mbox_trypost>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d028      	beq.n	8010bda <accept_function+0x152>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8010b8e:	2100      	movs	r1, #0
 8010b90:	6978      	ldr	r0, [r7, #20]
 8010b92:	f7f8 ff2f 	bl	80099f4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8010b96:	2100      	movs	r1, #0
 8010b98:	6978      	ldr	r0, [r7, #20]
 8010b9a:	f7f8 ff3d 	bl	8009a18 <tcp_recv>
    tcp_sent(pcb, NULL);
 8010b9e:	2100      	movs	r1, #0
 8010ba0:	6978      	ldr	r0, [r7, #20]
 8010ba2:	f7f8 ff5f 	bl	8009a64 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	2100      	movs	r1, #0
 8010baa:	6978      	ldr	r0, [r7, #20]
 8010bac:	f7f8 ffbe 	bl	8009b2c <tcp_poll>
    tcp_err(pcb, NULL);
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	6978      	ldr	r0, [r7, #20]
 8010bb4:	f7f8 ff7c 	bl	8009ab0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	3310      	adds	r3, #16
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f003 f934 	bl	8013e30 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8010bc8:	69bb      	ldr	r3, [r7, #24]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	611a      	str	r2, [r3, #16]
    netconn_free(newconn);
 8010bce:	69b8      	ldr	r0, [r7, #24]
 8010bd0:	f000 f90c 	bl	8010dec <netconn_free>
    return ERR_MEM;
 8010bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd8:	e00a      	b.n	8010bf0 <accept_function+0x168>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d005      	beq.n	8010bee <accept_function+0x166>
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be6:	2200      	movs	r2, #0
 8010be8:	2100      	movs	r1, #0
 8010bea:	69f8      	ldr	r0, [r7, #28]
 8010bec:	4798      	blx	r3
  }

  return ERR_OK;
 8010bee:	2300      	movs	r3, #0
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3724      	adds	r7, #36	; 0x24
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd90      	pop	{r4, r7, pc}
 8010bf8:	0801b934 	.word	0x0801b934
 8010bfc:	0801bad8 	.word	0x0801bad8
 8010c00:	0801b960 	.word	0x0801b960

08010c04 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010c04:	b590      	push	{r4, r7, lr}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00b      	beq.n	8010c32 <pcb_new+0x2e>
 8010c1a:	4b2d      	ldr	r3, [pc, #180]	; (8010cd0 <pcb_new+0xcc>)
 8010c1c:	f240 2265 	movw	r2, #613	; 0x265
 8010c20:	492c      	ldr	r1, [pc, #176]	; (8010cd4 <pcb_new+0xd0>)
 8010c22:	482d      	ldr	r0, [pc, #180]	; (8010cd8 <pcb_new+0xd4>)
 8010c24:	f7f0 fb84 	bl	8001330 <iprintf>
 8010c28:	2000      	movs	r0, #0
 8010c2a:	f007 fc25 	bl	8018478 <fflush>
 8010c2e:	f007 fb69 	bl	8018304 <abort>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c3c:	2b10      	cmp	r3, #16
 8010c3e:	d022      	beq.n	8010c86 <pcb_new+0x82>
 8010c40:	2b20      	cmp	r3, #32
 8010c42:	d133      	bne.n	8010cac <pcb_new+0xa8>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681c      	ldr	r4, [r3, #0]
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fe fdc5 	bl	800f7da <udp_new_ip_type>
 8010c50:	4603      	mov	r3, r0
 8010c52:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d02a      	beq.n	8010cb4 <pcb_new+0xb0>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	2b22      	cmp	r3, #34	; 0x22
 8010c66:	d104      	bne.n	8010c72 <pcb_new+0x6e>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	6858      	ldr	r0, [r3, #4]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	4917      	ldr	r1, [pc, #92]	; (8010cdc <pcb_new+0xd8>)
 8010c80:	f7fe fd28 	bl	800f6d4 <udp_recv>
      }
      break;
 8010c84:	e016      	b.n	8010cb4 <pcb_new+0xb0>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681c      	ldr	r4, [r3, #0]
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f8 fea3 	bl	80099d8 <tcp_new_ip_type>
 8010c92:	4603      	mov	r3, r0
 8010c94:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00b      	beq.n	8010cb8 <pcb_new+0xb4>
        setup_tcp(msg->conn);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fec7 	bl	8010a38 <setup_tcp>
      }
      break;
 8010caa:	e005      	b.n	8010cb8 <pcb_new+0xb4>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	22fa      	movs	r2, #250	; 0xfa
 8010cb0:	711a      	strb	r2, [r3, #4]
      return;
 8010cb2:	e00a      	b.n	8010cca <pcb_new+0xc6>
      break;
 8010cb4:	bf00      	nop
 8010cb6:	e000      	b.n	8010cba <pcb_new+0xb6>
      break;
 8010cb8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <pcb_new+0xc6>
    msg->err = ERR_MEM;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	22ff      	movs	r2, #255	; 0xff
 8010cc8:	711a      	strb	r2, [r3, #4]
  }
}
 8010cca:	3714      	adds	r7, #20
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd90      	pop	{r4, r7, pc}
 8010cd0:	0801b934 	.word	0x0801b934
 8010cd4:	0801bb00 	.word	0x0801bb00
 8010cd8:	0801b960 	.word	0x0801b960
 8010cdc:	08010491 	.word	0x08010491

08010ce0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d102      	bne.n	8010d02 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f7ff ff81 	bl	8010c04 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010d02:	bf00      	nop
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	6039      	str	r1, [r7, #0]
 8010d16:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010d1c:	2007      	movs	r0, #7
 8010d1e:	f7f6 f857 	bl	8006dd0 <memp_malloc>
 8010d22:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d101      	bne.n	8010d2e <netconn_alloc+0x22>
    return NULL;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	e054      	b.n	8010dd8 <netconn_alloc+0xcc>
  }

  conn->pending_err = ERR_OK;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2200      	movs	r2, #0
 8010d32:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	79fa      	ldrb	r2, [r7, #7]
 8010d38:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010d40:	79fb      	ldrb	r3, [r7, #7]
 8010d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d46:	2b10      	cmp	r3, #16
 8010d48:	d004      	beq.n	8010d54 <netconn_alloc+0x48>
 8010d4a:	2b20      	cmp	r3, #32
 8010d4c:	d105      	bne.n	8010d5a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010d52:	e00e      	b.n	8010d72 <netconn_alloc+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010d54:	2300      	movs	r3, #0
 8010d56:	617b      	str	r3, [r7, #20]
      break;
 8010d58:	e00b      	b.n	8010d72 <netconn_alloc+0x66>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010d5a:	4b21      	ldr	r3, [pc, #132]	; (8010de0 <netconn_alloc+0xd4>)
 8010d5c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8010d60:	4920      	ldr	r1, [pc, #128]	; (8010de4 <netconn_alloc+0xd8>)
 8010d62:	4821      	ldr	r0, [pc, #132]	; (8010de8 <netconn_alloc+0xdc>)
 8010d64:	f7f0 fae4 	bl	8001330 <iprintf>
 8010d68:	2000      	movs	r0, #0
 8010d6a:	f007 fb85 	bl	8018478 <fflush>
 8010d6e:	f007 fac9 	bl	8018304 <abort>
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	3310      	adds	r3, #16
 8010d76:	6979      	ldr	r1, [r7, #20]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f002 fecd 	bl	8013b18 <sys_mbox_new>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d123      	bne.n	8010dcc <netconn_alloc+0xc0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	330c      	adds	r3, #12
 8010d88:	2100      	movs	r1, #0
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f002 fd4c 	bl	8013828 <sys_sem_new>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d005      	beq.n	8010da2 <netconn_alloc+0x96>
    sys_mbox_free(&conn->recvmbox);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	3310      	adds	r3, #16
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f003 f848 	bl	8013e30 <sys_mbox_free>
    goto free_and_return;
 8010da0:	e015      	b.n	8010dce <netconn_alloc+0xc2>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2200      	movs	r2, #0
 8010da6:	615a      	str	r2, [r3, #20]
#endif
  conn->state        = NETCONN_NONE;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f04f 32ff 	mov.w	r2, #4294967295
 8010db4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	683a      	ldr	r2, [r7, #0]
 8010dba:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	7cfa      	ldrb	r2, [r7, #19]
 8010dc6:	771a      	strb	r2, [r3, #28]
  return conn;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	e005      	b.n	8010dd8 <netconn_alloc+0xcc>
    goto free_and_return;
 8010dcc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010dce:	68f9      	ldr	r1, [r7, #12]
 8010dd0:	2007      	movs	r0, #7
 8010dd2:	f7f6 f847 	bl	8006e64 <memp_free>
  return NULL;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3718      	adds	r7, #24
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	0801b934 	.word	0x0801b934
 8010de4:	0801bb20 	.word	0x0801bb20
 8010de8:	0801b960 	.word	0x0801b960

08010dec <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00b      	beq.n	8010e14 <netconn_free+0x28>
 8010dfc:	4b21      	ldr	r3, [pc, #132]	; (8010e84 <netconn_free+0x98>)
 8010dfe:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010e02:	4921      	ldr	r1, [pc, #132]	; (8010e88 <netconn_free+0x9c>)
 8010e04:	4821      	ldr	r0, [pc, #132]	; (8010e8c <netconn_free+0xa0>)
 8010e06:	f7f0 fa93 	bl	8001330 <iprintf>
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	f007 fb34 	bl	8018478 <fflush>
 8010e10:	f007 fa78 	bl	8018304 <abort>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	3310      	adds	r3, #16
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00f      	beq.n	8010e3c <netconn_free+0x50>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	691b      	ldr	r3, [r3, #16]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d00b      	beq.n	8010e3c <netconn_free+0x50>
 8010e24:	4b17      	ldr	r3, [pc, #92]	; (8010e84 <netconn_free+0x98>)
 8010e26:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010e2a:	4919      	ldr	r1, [pc, #100]	; (8010e90 <netconn_free+0xa4>)
 8010e2c:	4817      	ldr	r0, [pc, #92]	; (8010e8c <netconn_free+0xa0>)
 8010e2e:	f7f0 fa7f 	bl	8001330 <iprintf>
 8010e32:	2000      	movs	r0, #0
 8010e34:	f007 fb20 	bl	8018478 <fflush>
 8010e38:	f007 fa64 	bl	8018304 <abort>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3314      	adds	r3, #20
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d00f      	beq.n	8010e64 <netconn_free+0x78>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00b      	beq.n	8010e64 <netconn_free+0x78>
 8010e4c:	4b0d      	ldr	r3, [pc, #52]	; (8010e84 <netconn_free+0x98>)
 8010e4e:	f240 3227 	movw	r2, #807	; 0x327
 8010e52:	4910      	ldr	r1, [pc, #64]	; (8010e94 <netconn_free+0xa8>)
 8010e54:	480d      	ldr	r0, [pc, #52]	; (8010e8c <netconn_free+0xa0>)
 8010e56:	f7f0 fa6b 	bl	8001330 <iprintf>
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	f007 fb0c 	bl	8018478 <fflush>
 8010e60:	f007 fa50 	bl	8018304 <abort>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	330c      	adds	r3, #12
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f002 fe13 	bl	8013a94 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2200      	movs	r2, #0
 8010e72:	60da      	str	r2, [r3, #12]
#endif

  memp_free(MEMP_NETCONN, conn);
 8010e74:	6879      	ldr	r1, [r7, #4]
 8010e76:	2007      	movs	r0, #7
 8010e78:	f7f5 fff4 	bl	8006e64 <memp_free>
}
 8010e7c:	bf00      	nop
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	0801b934 	.word	0x0801b934
 8010e88:	0801bb48 	.word	0x0801bb48
 8010e8c:	0801b960 	.word	0x0801b960
 8010e90:	0801bb78 	.word	0x0801bb78
 8010e94:	0801bbb4 	.word	0x0801bbb4

08010e98 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3310      	adds	r3, #16
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d031      	beq.n	8010f0c <netconn_drain+0x74>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	691b      	ldr	r3, [r3, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d02d      	beq.n	8010f0c <netconn_drain+0x74>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010eb0:	e018      	b.n	8010ee4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010eba:	2b10      	cmp	r3, #16
 8010ebc:	d10e      	bne.n	8010edc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f107 020f 	add.w	r2, r7, #15
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff faa2 	bl	8010410 <lwip_netconn_is_err_msg>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d108      	bne.n	8010ee4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f6 fe03 	bl	8007ae0 <pbuf_free>
 8010eda:	e003      	b.n	8010ee4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f000 fffc 	bl	8011edc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	3310      	adds	r3, #16
 8010ee8:	f107 0210 	add.w	r2, r7, #16
 8010eec:	4611      	mov	r1, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f002 ff44 	bl	8013d7c <sys_arch_mbox_tryfetch>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efa:	d1da      	bne.n	8010eb2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	3310      	adds	r3, #16
 8010f00:	4618      	mov	r0, r3
 8010f02:	f002 ff95 	bl	8013e30 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	611a      	str	r2, [r3, #16]
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	3314      	adds	r3, #20
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d036      	beq.n	8010f82 <netconn_drain+0xea>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	695b      	ldr	r3, [r3, #20]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d032      	beq.n	8010f82 <netconn_drain+0xea>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010f1c:	e01d      	b.n	8010f5a <netconn_drain+0xc2>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	f107 020e 	add.w	r2, r7, #14
 8010f24:	4611      	mov	r1, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fa72 	bl	8010410 <lwip_netconn_is_err_msg>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d113      	bne.n	8010f5a <netconn_drain+0xc2>
          struct netconn *newconn = (struct netconn *)mem;
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8010f36:	6978      	ldr	r0, [r7, #20]
 8010f38:	f7ff ffae 	bl	8010e98 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d007      	beq.n	8010f54 <netconn_drain+0xbc>
            tcp_abort(newconn->pcb.tcp);
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7f7 fc37 	bl	80087bc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	2200      	movs	r2, #0
 8010f52:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010f54:	6978      	ldr	r0, [r7, #20]
 8010f56:	f7ff ff49 	bl	8010dec <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	3314      	adds	r3, #20
 8010f5e:	f107 0210 	add.w	r2, r7, #16
 8010f62:	4611      	mov	r1, r2
 8010f64:	4618      	mov	r0, r3
 8010f66:	f002 ff09 	bl	8013d7c <sys_arch_mbox_tryfetch>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f70:	d1d5      	bne.n	8010f1e <netconn_drain+0x86>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	3314      	adds	r3, #20
 8010f76:	4618      	mov	r0, r3
 8010f78:	f002 ff5a 	bl	8013e30 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	615a      	str	r2, [r3, #20]
  }
#endif /* LWIP_TCP */
}
 8010f82:	bf00      	nop
 8010f84:	3718      	adds	r7, #24
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
	...

08010f8c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	460b      	mov	r3, r1
 8010f96:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10b      	bne.n	8010fba <lwip_netconn_do_close_internal+0x2e>
 8010fa2:	4baf      	ldr	r3, [pc, #700]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 8010fa4:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010fa8:	49ae      	ldr	r1, [pc, #696]	; (8011264 <lwip_netconn_do_close_internal+0x2d8>)
 8010faa:	48af      	ldr	r0, [pc, #700]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 8010fac:	f7f0 f9c0 	bl	8001330 <iprintf>
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	f007 fa61 	bl	8018478 <fflush>
 8010fb6:	f007 f9a5 	bl	8018304 <abort>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010fc2:	2b10      	cmp	r3, #16
 8010fc4:	d00b      	beq.n	8010fde <lwip_netconn_do_close_internal+0x52>
 8010fc6:	4ba6      	ldr	r3, [pc, #664]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 8010fc8:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010fcc:	49a7      	ldr	r1, [pc, #668]	; (801126c <lwip_netconn_do_close_internal+0x2e0>)
 8010fce:	48a6      	ldr	r0, [pc, #664]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 8010fd0:	f7f0 f9ae 	bl	8001330 <iprintf>
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	f007 fa4f 	bl	8018478 <fflush>
 8010fda:	f007 f993 	bl	8018304 <abort>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	785b      	ldrb	r3, [r3, #1]
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d00b      	beq.n	8010ffe <lwip_netconn_do_close_internal+0x72>
 8010fe6:	4b9e      	ldr	r3, [pc, #632]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 8010fe8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010fec:	49a0      	ldr	r1, [pc, #640]	; (8011270 <lwip_netconn_do_close_internal+0x2e4>)
 8010fee:	489e      	ldr	r0, [pc, #632]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 8010ff0:	f7f0 f99e 	bl	8001330 <iprintf>
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	f007 fa3f 	bl	8018478 <fflush>
 8010ffa:	f007 f983 	bl	8018304 <abort>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d10b      	bne.n	801101e <lwip_netconn_do_close_internal+0x92>
 8011006:	4b96      	ldr	r3, [pc, #600]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 8011008:	f240 32a5 	movw	r2, #933	; 0x3a5
 801100c:	4999      	ldr	r1, [pc, #612]	; (8011274 <lwip_netconn_do_close_internal+0x2e8>)
 801100e:	4896      	ldr	r0, [pc, #600]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 8011010:	f7f0 f98e 	bl	8001330 <iprintf>
 8011014:	2000      	movs	r0, #0
 8011016:	f007 fa2f 	bl	8018478 <fflush>
 801101a:	f007 f973 	bl	8018304 <abort>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6a1b      	ldr	r3, [r3, #32]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10b      	bne.n	801103e <lwip_netconn_do_close_internal+0xb2>
 8011026:	4b8e      	ldr	r3, [pc, #568]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 8011028:	f240 32a6 	movw	r2, #934	; 0x3a6
 801102c:	4992      	ldr	r1, [pc, #584]	; (8011278 <lwip_netconn_do_close_internal+0x2ec>)
 801102e:	488e      	ldr	r0, [pc, #568]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 8011030:	f7f0 f97e 	bl	8001330 <iprintf>
 8011034:	2000      	movs	r0, #0
 8011036:	f007 fa1f 	bl	8018478 <fflush>
 801103a:	f007 f963 	bl	8018304 <abort>

  tpcb = conn->pcb.tcp;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6a1b      	ldr	r3, [r3, #32]
 8011048:	7a1b      	ldrb	r3, [r3, #8]
 801104a:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	f003 0301 	and.w	r3, r3, #1
 8011052:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011054:	7bfb      	ldrb	r3, [r7, #15]
 8011056:	f003 0302 	and.w	r3, r3, #2
 801105a:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801105c:	7bfb      	ldrb	r3, [r7, #15]
 801105e:	2b03      	cmp	r3, #3
 8011060:	d102      	bne.n	8011068 <lwip_netconn_do_close_internal+0xdc>
    shut_close = 1;
 8011062:	2301      	movs	r3, #1
 8011064:	75bb      	strb	r3, [r7, #22]
 8011066:	e01f      	b.n	80110a8 <lwip_netconn_do_close_internal+0x11c>
  } else if (shut_rx &&
 8011068:	7bbb      	ldrb	r3, [r7, #14]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00e      	beq.n	801108c <lwip_netconn_do_close_internal+0x100>
             ((tpcb->state == FIN_WAIT_1) ||
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011072:	2b05      	cmp	r3, #5
 8011074:	d007      	beq.n	8011086 <lwip_netconn_do_close_internal+0xfa>
              (tpcb->state == FIN_WAIT_2) ||
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 801107a:	2b06      	cmp	r3, #6
 801107c:	d003      	beq.n	8011086 <lwip_netconn_do_close_internal+0xfa>
              (tpcb->state == CLOSING))) {
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011082:	2b08      	cmp	r3, #8
 8011084:	d102      	bne.n	801108c <lwip_netconn_do_close_internal+0x100>
    shut_close = 1;
 8011086:	2301      	movs	r3, #1
 8011088:	75bb      	strb	r3, [r7, #22]
 801108a:	e00d      	b.n	80110a8 <lwip_netconn_do_close_internal+0x11c>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801108c:	7b7b      	ldrb	r3, [r7, #13]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d008      	beq.n	80110a4 <lwip_netconn_do_close_internal+0x118>
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	8b5b      	ldrh	r3, [r3, #26]
 8011096:	f003 0310 	and.w	r3, r3, #16
 801109a:	2b00      	cmp	r3, #0
 801109c:	d002      	beq.n	80110a4 <lwip_netconn_do_close_internal+0x118>
    shut_close = 1;
 801109e:	2301      	movs	r3, #1
 80110a0:	75bb      	strb	r3, [r7, #22]
 80110a2:	e001      	b.n	80110a8 <lwip_netconn_do_close_internal+0x11c>
  } else {
    shut_close = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80110a8:	7dbb      	ldrb	r3, [r7, #22]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d003      	beq.n	80110b6 <lwip_netconn_do_close_internal+0x12a>
    tcp_arg(tpcb, NULL);
 80110ae:	2100      	movs	r1, #0
 80110b0:	6938      	ldr	r0, [r7, #16]
 80110b2:	f7f8 fc9f 	bl	80099f4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	7d1b      	ldrb	r3, [r3, #20]
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d104      	bne.n	80110c8 <lwip_netconn_do_close_internal+0x13c>
    tcp_accept(tpcb, NULL);
 80110be:	2100      	movs	r1, #0
 80110c0:	6938      	ldr	r0, [r7, #16]
 80110c2:	f7f8 fd1b 	bl	8009afc <tcp_accept>
 80110c6:	e01d      	b.n	8011104 <lwip_netconn_do_close_internal+0x178>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80110c8:	7bbb      	ldrb	r3, [r7, #14]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d007      	beq.n	80110de <lwip_netconn_do_close_internal+0x152>
      tcp_recv(tpcb, NULL);
 80110ce:	2100      	movs	r1, #0
 80110d0:	6938      	ldr	r0, [r7, #16]
 80110d2:	f7f8 fca1 	bl	8009a18 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80110d6:	2100      	movs	r1, #0
 80110d8:	6938      	ldr	r0, [r7, #16]
 80110da:	f7f8 fd0f 	bl	8009afc <tcp_accept>
    }
    if (shut_tx) {
 80110de:	7b7b      	ldrb	r3, [r7, #13]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d003      	beq.n	80110ec <lwip_netconn_do_close_internal+0x160>
      tcp_sent(tpcb, NULL);
 80110e4:	2100      	movs	r1, #0
 80110e6:	6938      	ldr	r0, [r7, #16]
 80110e8:	f7f8 fcbc 	bl	8009a64 <tcp_sent>
    }
    if (shut_close) {
 80110ec:	7dbb      	ldrb	r3, [r7, #22]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d008      	beq.n	8011104 <lwip_netconn_do_close_internal+0x178>
      tcp_poll(tpcb, NULL, 0);
 80110f2:	2200      	movs	r2, #0
 80110f4:	2100      	movs	r1, #0
 80110f6:	6938      	ldr	r0, [r7, #16]
 80110f8:	f7f8 fd18 	bl	8009b2c <tcp_poll>
      tcp_err(tpcb, NULL);
 80110fc:	2100      	movs	r1, #0
 80110fe:	6938      	ldr	r0, [r7, #16]
 8011100:	f7f8 fcd6 	bl	8009ab0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011104:	7dbb      	ldrb	r3, [r7, #22]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d005      	beq.n	8011116 <lwip_netconn_do_close_internal+0x18a>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801110a:	6938      	ldr	r0, [r7, #16]
 801110c:	f7f7 fa04 	bl	8008518 <tcp_close>
 8011110:	4603      	mov	r3, r0
 8011112:	75fb      	strb	r3, [r7, #23]
 8011114:	e007      	b.n	8011126 <lwip_netconn_do_close_internal+0x19a>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011116:	7bbb      	ldrb	r3, [r7, #14]
 8011118:	7b7a      	ldrb	r2, [r7, #13]
 801111a:	4619      	mov	r1, r3
 801111c:	6938      	ldr	r0, [r7, #16]
 801111e:	f7f7 fa29 	bl	8008574 <tcp_shutdown>
 8011122:	4603      	mov	r3, r0
 8011124:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d102      	bne.n	8011134 <lwip_netconn_do_close_internal+0x1a8>
    close_finished = 1;
 801112e:	2301      	movs	r3, #1
 8011130:	757b      	strb	r3, [r7, #21]
 8011132:	e016      	b.n	8011162 <lwip_netconn_do_close_internal+0x1d6>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011134:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113c:	d10f      	bne.n	801115e <lwip_netconn_do_close_internal+0x1d2>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a1b      	ldr	r3, [r3, #32]
 8011142:	7a5b      	ldrb	r3, [r3, #9]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d10c      	bne.n	8011162 <lwip_netconn_do_close_internal+0x1d6>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011148:	2301      	movs	r3, #1
 801114a:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801114c:	7dbb      	ldrb	r3, [r7, #22]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d007      	beq.n	8011162 <lwip_netconn_do_close_internal+0x1d6>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011152:	6938      	ldr	r0, [r7, #16]
 8011154:	f7f7 fb32 	bl	80087bc <tcp_abort>
          err = ERR_OK;
 8011158:	2300      	movs	r3, #0
 801115a:	75fb      	strb	r3, [r7, #23]
 801115c:	e001      	b.n	8011162 <lwip_netconn_do_close_internal+0x1d6>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801115e:	2301      	movs	r3, #1
 8011160:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011162:	7d7b      	ldrb	r3, [r7, #21]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d044      	beq.n	80111f2 <lwip_netconn_do_close_internal+0x266>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a1b      	ldr	r3, [r3, #32]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	330c      	adds	r3, #12
 8011170:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6a1b      	ldr	r3, [r3, #32]
 8011176:	7dfa      	ldrb	r2, [r7, #23]
 8011178:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011186:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d129      	bne.n	80111e2 <lwip_netconn_do_close_internal+0x256>
      if (shut_close) {
 801118e:	7dbb      	ldrb	r3, [r7, #22]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d00c      	beq.n	80111ae <lwip_netconn_do_close_internal+0x222>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d005      	beq.n	80111ae <lwip_netconn_do_close_internal+0x222>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a6:	2200      	movs	r2, #0
 80111a8:	2104      	movs	r1, #4
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	4798      	blx	r3
      }
      if (shut_rx) {
 80111ae:	7bbb      	ldrb	r3, [r7, #14]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d009      	beq.n	80111c8 <lwip_netconn_do_close_internal+0x23c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d005      	beq.n	80111c8 <lwip_netconn_do_close_internal+0x23c>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c0:	2200      	movs	r2, #0
 80111c2:	2100      	movs	r1, #0
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	4798      	blx	r3
      }
      if (shut_tx) {
 80111c8:	7b7b      	ldrb	r3, [r7, #13]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d009      	beq.n	80111e2 <lwip_netconn_do_close_internal+0x256>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d005      	beq.n	80111e2 <lwip_netconn_do_close_internal+0x256>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111da:	2200      	movs	r2, #0
 80111dc:	2102      	movs	r1, #2
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80111e2:	78fb      	ldrb	r3, [r7, #3]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d002      	beq.n	80111ee <lwip_netconn_do_close_internal+0x262>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80111e8:	68b8      	ldr	r0, [r7, #8]
 80111ea:	f002 fb9b 	bl	8013924 <sys_sem_signal>
    }
    return ERR_OK;
 80111ee:	2300      	movs	r3, #0
 80111f0:	e050      	b.n	8011294 <lwip_netconn_do_close_internal+0x308>
  }
  if (!close_finished) {
 80111f2:	7d7b      	ldrb	r3, [r7, #21]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d123      	bne.n	8011240 <lwip_netconn_do_close_internal+0x2b4>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	7d1b      	ldrb	r3, [r3, #20]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d10b      	bne.n	8011218 <lwip_netconn_do_close_internal+0x28c>
 8011200:	4b17      	ldr	r3, [pc, #92]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 8011202:	f240 4241 	movw	r2, #1089	; 0x441
 8011206:	491d      	ldr	r1, [pc, #116]	; (801127c <lwip_netconn_do_close_internal+0x2f0>)
 8011208:	4817      	ldr	r0, [pc, #92]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 801120a:	f7f0 f891 	bl	8001330 <iprintf>
 801120e:	2000      	movs	r0, #0
 8011210:	f007 f932 	bl	8018478 <fflush>
 8011214:	f007 f876 	bl	8018304 <abort>
    if (shut_tx) {
 8011218:	7b7b      	ldrb	r3, [r7, #13]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d003      	beq.n	8011226 <lwip_netconn_do_close_internal+0x29a>
      tcp_sent(tpcb, sent_tcp);
 801121e:	4918      	ldr	r1, [pc, #96]	; (8011280 <lwip_netconn_do_close_internal+0x2f4>)
 8011220:	6938      	ldr	r0, [r7, #16]
 8011222:	f7f8 fc1f 	bl	8009a64 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011226:	2201      	movs	r2, #1
 8011228:	4916      	ldr	r1, [pc, #88]	; (8011284 <lwip_netconn_do_close_internal+0x2f8>)
 801122a:	6938      	ldr	r0, [r7, #16]
 801122c:	f7f8 fc7e 	bl	8009b2c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011230:	4915      	ldr	r1, [pc, #84]	; (8011288 <lwip_netconn_do_close_internal+0x2fc>)
 8011232:	6938      	ldr	r0, [r7, #16]
 8011234:	f7f8 fc3c 	bl	8009ab0 <tcp_err>
    tcp_arg(tpcb, conn);
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	6938      	ldr	r0, [r7, #16]
 801123c:	f7f8 fbda 	bl	80099f4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d123      	bne.n	8011290 <lwip_netconn_do_close_internal+0x304>
 8011248:	4b05      	ldr	r3, [pc, #20]	; (8011260 <lwip_netconn_do_close_internal+0x2d4>)
 801124a:	f240 424d 	movw	r2, #1101	; 0x44d
 801124e:	490f      	ldr	r1, [pc, #60]	; (801128c <lwip_netconn_do_close_internal+0x300>)
 8011250:	4805      	ldr	r0, [pc, #20]	; (8011268 <lwip_netconn_do_close_internal+0x2dc>)
 8011252:	f7f0 f86d 	bl	8001330 <iprintf>
 8011256:	2000      	movs	r0, #0
 8011258:	f007 f90e 	bl	8018478 <fflush>
 801125c:	f007 f852 	bl	8018304 <abort>
 8011260:	0801b934 	.word	0x0801b934
 8011264:	0801bbf0 	.word	0x0801bbf0
 8011268:	0801b960 	.word	0x0801b960
 801126c:	0801bc00 	.word	0x0801bc00
 8011270:	0801bc20 	.word	0x0801bc20
 8011274:	0801bc44 	.word	0x0801bc44
 8011278:	0801ba84 	.word	0x0801ba84
 801127c:	0801bc58 	.word	0x0801bc58
 8011280:	080107b1 	.word	0x080107b1
 8011284:	080106dd 	.word	0x080106dd
 8011288:	08010865 	.word	0x08010865
 801128c:	0801bc7c 	.word	0x0801bc7c
  return err;
 8011290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	785b      	ldrb	r3, [r3, #1]
 80112ae:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80112b0:	7afb      	ldrb	r3, [r7, #11]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d012      	beq.n	80112dc <lwip_netconn_do_delconn+0x40>
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112c0:	2b10      	cmp	r3, #16
 80112c2:	d00b      	beq.n	80112dc <lwip_netconn_do_delconn+0x40>
 80112c4:	4b6b      	ldr	r3, [pc, #428]	; (8011474 <lwip_netconn_do_delconn+0x1d8>)
 80112c6:	f240 425f 	movw	r2, #1119	; 0x45f
 80112ca:	496b      	ldr	r1, [pc, #428]	; (8011478 <lwip_netconn_do_delconn+0x1dc>)
 80112cc:	486b      	ldr	r0, [pc, #428]	; (801147c <lwip_netconn_do_delconn+0x1e0>)
 80112ce:	f7f0 f82f 	bl	8001330 <iprintf>
 80112d2:	2000      	movs	r0, #0
 80112d4:	f007 f8d0 	bl	8018478 <fflush>
 80112d8:	f007 f814 	bl	8018304 <abort>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80112dc:	7afb      	ldrb	r3, [r7, #11]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d005      	beq.n	80112ee <lwip_netconn_do_delconn+0x52>
 80112e2:	7afb      	ldrb	r3, [r7, #11]
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	d002      	beq.n	80112ee <lwip_netconn_do_delconn+0x52>
       (state != NETCONN_LISTEN) &&
 80112e8:	7afb      	ldrb	r3, [r7, #11]
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d109      	bne.n	8011302 <lwip_netconn_do_delconn+0x66>
       (state != NETCONN_CONNECT)) ||
 80112ee:	7afb      	ldrb	r3, [r7, #11]
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	d10a      	bne.n	801130a <lwip_netconn_do_delconn+0x6e>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	7f1b      	ldrb	r3, [r3, #28]
 80112fa:	f003 0304 	and.w	r3, r3, #4
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d103      	bne.n	801130a <lwip_netconn_do_delconn+0x6e>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	22fb      	movs	r2, #251	; 0xfb
 8011306:	711a      	strb	r2, [r3, #4]
 8011308:	e0aa      	b.n	8011460 <lwip_netconn_do_delconn+0x1c4>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801130a:	7afb      	ldrb	r3, [r7, #11]
 801130c:	2b03      	cmp	r3, #3
 801130e:	d112      	bne.n	8011336 <lwip_netconn_do_delconn+0x9a>
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	7f1b      	ldrb	r3, [r3, #28]
 8011316:	f003 0304 	and.w	r3, r3, #4
 801131a:	2b00      	cmp	r3, #0
 801131c:	d10b      	bne.n	8011336 <lwip_netconn_do_delconn+0x9a>
 801131e:	4b55      	ldr	r3, [pc, #340]	; (8011474 <lwip_netconn_do_delconn+0x1d8>)
 8011320:	f240 427b 	movw	r2, #1147	; 0x47b
 8011324:	4956      	ldr	r1, [pc, #344]	; (8011480 <lwip_netconn_do_delconn+0x1e4>)
 8011326:	4855      	ldr	r0, [pc, #340]	; (801147c <lwip_netconn_do_delconn+0x1e0>)
 8011328:	f7f0 f802 	bl	8001330 <iprintf>
 801132c:	2000      	movs	r0, #0
 801132e:	f007 f8a3 	bl	8018478 <fflush>
 8011332:	f006 ffe7 	bl	8018304 <abort>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2200      	movs	r2, #0
 801133a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff fda9 	bl	8010e98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d06d      	beq.n	801142c <lwip_netconn_do_delconn+0x190>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801135a:	2b10      	cmp	r3, #16
 801135c:	d00e      	beq.n	801137c <lwip_netconn_do_delconn+0xe0>
 801135e:	2b20      	cmp	r3, #32
 8011360:	d000      	beq.n	8011364 <lwip_netconn_do_delconn+0xc8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8011362:	e05f      	b.n	8011424 <lwip_netconn_do_delconn+0x188>
          msg->conn->pcb.udp->recv_arg = NULL;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	f7fe f9d3 	bl	800f720 <udp_remove>
          break;
 801137a:	e053      	b.n	8011424 <lwip_netconn_do_delconn+0x188>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	6a1b      	ldr	r3, [r3, #32]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00b      	beq.n	801139e <lwip_netconn_do_delconn+0x102>
 8011386:	4b3b      	ldr	r3, [pc, #236]	; (8011474 <lwip_netconn_do_delconn+0x1d8>)
 8011388:	f240 4294 	movw	r2, #1172	; 0x494
 801138c:	493d      	ldr	r1, [pc, #244]	; (8011484 <lwip_netconn_do_delconn+0x1e8>)
 801138e:	483b      	ldr	r0, [pc, #236]	; (801147c <lwip_netconn_do_delconn+0x1e0>)
 8011390:	f7ef ffce 	bl	8001330 <iprintf>
 8011394:	2000      	movs	r0, #0
 8011396:	f007 f86f 	bl	8018478 <fflush>
 801139a:	f006 ffb3 	bl	8018304 <abort>
          msg->conn->state = NETCONN_CLOSE;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2204      	movs	r2, #4
 80113a4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2203      	movs	r2, #3
 80113aa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2100      	movs	r1, #0
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff fde6 	bl	8010f8c <lwip_netconn_do_close_internal>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d051      	beq.n	801146a <lwip_netconn_do_delconn+0x1ce>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	785b      	ldrb	r3, [r3, #1]
 80113cc:	2b04      	cmp	r3, #4
 80113ce:	d00b      	beq.n	80113e8 <lwip_netconn_do_delconn+0x14c>
 80113d0:	4b28      	ldr	r3, [pc, #160]	; (8011474 <lwip_netconn_do_delconn+0x1d8>)
 80113d2:	f240 429a 	movw	r2, #1178	; 0x49a
 80113d6:	492c      	ldr	r1, [pc, #176]	; (8011488 <lwip_netconn_do_delconn+0x1ec>)
 80113d8:	4828      	ldr	r0, [pc, #160]	; (801147c <lwip_netconn_do_delconn+0x1e0>)
 80113da:	f7ef ffa9 	bl	8001330 <iprintf>
 80113de:	2000      	movs	r0, #0
 80113e0:	f007 f84a 	bl	8018478 <fflush>
 80113e4:	f006 ff8e 	bl	8018304 <abort>
            UNLOCK_TCPIP_CORE();
 80113e8:	4828      	ldr	r0, [pc, #160]	; (801148c <lwip_netconn_do_delconn+0x1f0>)
 80113ea:	f002 f9d9 	bl	80137a0 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	330c      	adds	r3, #12
 80113f4:	2100      	movs	r1, #0
 80113f6:	4618      	mov	r0, r3
 80113f8:	f002 fae0 	bl	80139bc <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80113fc:	4823      	ldr	r0, [pc, #140]	; (801148c <lwip_netconn_do_delconn+0x1f0>)
 80113fe:	f002 f989 	bl	8013714 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	785b      	ldrb	r3, [r3, #1]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d02e      	beq.n	801146a <lwip_netconn_do_delconn+0x1ce>
 801140c:	4b19      	ldr	r3, [pc, #100]	; (8011474 <lwip_netconn_do_delconn+0x1d8>)
 801140e:	f240 429e 	movw	r2, #1182	; 0x49e
 8011412:	491d      	ldr	r1, [pc, #116]	; (8011488 <lwip_netconn_do_delconn+0x1ec>)
 8011414:	4819      	ldr	r0, [pc, #100]	; (801147c <lwip_netconn_do_delconn+0x1e0>)
 8011416:	f7ef ff8b 	bl	8001330 <iprintf>
 801141a:	2000      	movs	r0, #0
 801141c:	f007 f82c 	bl	8018478 <fflush>
 8011420:	f006 ff70 	bl	8018304 <abort>
      }
      msg->conn->pcb.tcp = NULL;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2200      	movs	r2, #0
 801142a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011432:	2b00      	cmp	r3, #0
 8011434:	d007      	beq.n	8011446 <lwip_netconn_do_delconn+0x1aa>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	6810      	ldr	r0, [r2, #0]
 8011440:	2200      	movs	r2, #0
 8011442:	2100      	movs	r1, #0
 8011444:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144c:	2b00      	cmp	r3, #0
 801144e:	d007      	beq.n	8011460 <lwip_netconn_do_delconn+0x1c4>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	6810      	ldr	r0, [r2, #0]
 801145a:	2200      	movs	r2, #0
 801145c:	2102      	movs	r1, #2
 801145e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	330c      	adds	r3, #12
 8011466:	2b00      	cmp	r3, #0
 8011468:	e000      	b.n	801146c <lwip_netconn_do_delconn+0x1d0>
          return;
 801146a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	0801b934 	.word	0x0801b934
 8011478:	0801bc8c 	.word	0x0801bc8c
 801147c:	0801b960 	.word	0x0801b960
 8011480:	0801bca0 	.word	0x0801bca0
 8011484:	0801bcc0 	.word	0x0801bcc0
 8011488:	0801bcdc 	.word	0x0801bcdc
 801148c:	20016f60 	.word	0x20016f60

08011490 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d026      	beq.n	80114f4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114b0:	2b10      	cmp	r3, #16
 80114b2:	d00e      	beq.n	80114d2 <lwip_netconn_do_bind+0x42>
 80114b4:	2b20      	cmp	r3, #32
 80114b6:	d119      	bne.n	80114ec <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	6858      	ldr	r0, [r3, #4]
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	6899      	ldr	r1, [r3, #8]
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	899b      	ldrh	r3, [r3, #12]
 80114c6:	461a      	mov	r2, r3
 80114c8:	f7fe f808 	bl	800f4dc <udp_bind>
 80114cc:	4603      	mov	r3, r0
 80114ce:	73fb      	strb	r3, [r7, #15]
        break;
 80114d0:	e012      	b.n	80114f8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	6858      	ldr	r0, [r3, #4]
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	6899      	ldr	r1, [r3, #8]
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	899b      	ldrh	r3, [r3, #12]
 80114e0:	461a      	mov	r2, r3
 80114e2:	f7f7 f977 	bl	80087d4 <tcp_bind>
 80114e6:	4603      	mov	r3, r0
 80114e8:	73fb      	strb	r3, [r7, #15]
        break;
 80114ea:	e005      	b.n	80114f8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80114ec:	23fa      	movs	r3, #250	; 0xfa
 80114ee:	73fb      	strb	r3, [r7, #15]
        break;
 80114f0:	bf00      	nop
 80114f2:	e001      	b.n	80114f8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80114f4:	23fa      	movs	r3, #250	; 0xfa
 80114f6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	7bfa      	ldrb	r2, [r7, #15]
 80114fc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80114fe:	bf00      	nop
 8011500:	3710      	adds	r7, #16
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
	...

08011508 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b086      	sub	sp, #24
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d07f      	beq.n	801161e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011528:	2b10      	cmp	r3, #16
 801152a:	d175      	bne.n	8011618 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	785b      	ldrb	r3, [r3, #1]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d165      	bne.n	8011602 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	7d1b      	ldrb	r3, [r3, #20]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d002      	beq.n	8011548 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8011542:	23fa      	movs	r3, #250	; 0xfa
 8011544:	72fb      	strb	r3, [r7, #11]
 8011546:	e06c      	b.n	8011622 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8011548:	23ff      	movs	r3, #255	; 0xff
 801154a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	f107 020b 	add.w	r2, r7, #11
 8011556:	7cf9      	ldrb	r1, [r7, #19]
 8011558:	4618      	mov	r0, r3
 801155a:	f7f7 f9fd 	bl	8008958 <tcp_listen_with_backlog_and_err>
 801155e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d05d      	beq.n	8011622 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3310      	adds	r3, #16
 801156c:	2b00      	cmp	r3, #0
 801156e:	d00e      	beq.n	801158e <lwip_netconn_do_listen+0x86>
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d009      	beq.n	801158e <lwip_netconn_do_listen+0x86>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	3310      	adds	r3, #16
 8011580:	4618      	mov	r0, r3
 8011582:	f002 fc55 	bl	8013e30 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2200      	movs	r2, #0
 801158c:	611a      	str	r2, [r3, #16]
            }
            err = ERR_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	3314      	adds	r3, #20
 8011598:	2b00      	cmp	r3, #0
 801159a:	d004      	beq.n	80115a6 <lwip_netconn_do_listen+0x9e>
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d108      	bne.n	80115b8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	3314      	adds	r3, #20
 80115ac:	2100      	movs	r1, #0
 80115ae:	4618      	mov	r0, r3
 80115b0:	f002 fab2 	bl	8013b18 <sys_mbox_new>
 80115b4:	4603      	mov	r3, r0
 80115b6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80115b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d118      	bne.n	80115f2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2202      	movs	r2, #2
 80115c6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	685a      	ldr	r2, [r3, #4]
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4619      	mov	r1, r3
 80115dc:	4610      	mov	r0, r2
 80115de:	f7f8 fa09 	bl	80099f4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4912      	ldr	r1, [pc, #72]	; (8011634 <lwip_netconn_do_listen+0x12c>)
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7f8 fa86 	bl	8009afc <tcp_accept>
 80115f0:	e017      	b.n	8011622 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f7f6 ff90 	bl	8008518 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2200      	movs	r2, #0
 80115fe:	605a      	str	r2, [r3, #4]
 8011600:	e00f      	b.n	8011622 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	785b      	ldrb	r3, [r3, #1]
 8011608:	2b02      	cmp	r3, #2
 801160a:	d102      	bne.n	8011612 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	72fb      	strb	r3, [r7, #11]
 8011610:	e007      	b.n	8011622 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8011612:	23f5      	movs	r3, #245	; 0xf5
 8011614:	72fb      	strb	r3, [r7, #11]
 8011616:	e004      	b.n	8011622 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8011618:	23f0      	movs	r3, #240	; 0xf0
 801161a:	72fb      	strb	r3, [r7, #11]
 801161c:	e001      	b.n	8011622 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801161e:	23f5      	movs	r3, #245	; 0xf5
 8011620:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8011622:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801162a:	bf00      	nop
 801162c:	3718      	adds	r7, #24
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	08010a89 	.word	0x08010a89

08011638 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	4618      	mov	r0, r3
 801164a:	f7fe fe8d 	bl	8010368 <netconn_err>
 801164e:	4603      	mov	r3, r0
 8011650:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d135      	bne.n	80116c6 <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d02e      	beq.n	80116c2 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801166e:	2b20      	cmp	r3, #32
 8011670:	d123      	bne.n	80116ba <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	689b      	ldr	r3, [r3, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d10c      	bne.n	8011696 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	685a      	ldr	r2, [r3, #4]
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4619      	mov	r1, r3
 801168a:	4610      	mov	r0, r2
 801168c:	f7fd fcec 	bl	800f068 <udp_send>
 8011690:	4603      	mov	r3, r0
 8011692:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8011694:	e017      	b.n	80116c6 <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	6858      	ldr	r0, [r3, #4]
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	6819      	ldr	r1, [r3, #0]
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	f103 0208 	add.w	r2, r3, #8
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	899b      	ldrh	r3, [r3, #12]
 80116b0:	f7fd fd12 	bl	800f0d8 <udp_sendto>
 80116b4:	4603      	mov	r3, r0
 80116b6:	73fb      	strb	r3, [r7, #15]
          break;
 80116b8:	e005      	b.n	80116c6 <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80116ba:	23f5      	movs	r3, #245	; 0xf5
 80116bc:	73fb      	strb	r3, [r7, #15]
          break;
 80116be:	bf00      	nop
 80116c0:	e001      	b.n	80116c6 <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 80116c2:	23f5      	movs	r3, #245	; 0xf5
 80116c4:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	7bfa      	ldrb	r2, [r7, #15]
 80116ca:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80116cc:	bf00      	nop
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b086      	sub	sp, #24
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	2200      	movs	r2, #0
 80116e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	685b      	ldr	r3, [r3, #4]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d022      	beq.n	8011736 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116fa:	2b10      	cmp	r3, #16
 80116fc:	d11b      	bne.n	8011736 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	689b      	ldr	r3, [r3, #8]
 8011702:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801170a:	d202      	bcs.n	8011712 <lwip_netconn_do_recv+0x3e>
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	b29b      	uxth	r3, r3
 8011710:	e001      	b.n	8011716 <lwip_netconn_do_recv+0x42>
 8011712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011716:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	89fa      	ldrh	r2, [r7, #14]
 8011720:	4611      	mov	r1, r2
 8011722:	4618      	mov	r0, r3
 8011724:	f7f7 fa2c 	bl	8008b80 <tcp_recved>
        remaining -= recved;
 8011728:	89fb      	ldrh	r3, [r7, #14]
 801172a:	697a      	ldr	r2, [r7, #20]
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d1e6      	bne.n	8011704 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011736:	bf00      	nop
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
	...

08011740 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10b      	bne.n	801176e <lwip_netconn_do_writemore+0x2e>
 8011756:	4b72      	ldr	r3, [pc, #456]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 8011758:	f240 6273 	movw	r2, #1651	; 0x673
 801175c:	4971      	ldr	r1, [pc, #452]	; (8011924 <lwip_netconn_do_writemore+0x1e4>)
 801175e:	4872      	ldr	r0, [pc, #456]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 8011760:	f7ef fde6 	bl	8001330 <iprintf>
 8011764:	2000      	movs	r0, #0
 8011766:	f006 fe87 	bl	8018478 <fflush>
 801176a:	f006 fdcb 	bl	8018304 <abort>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	785b      	ldrb	r3, [r3, #1]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d00b      	beq.n	801178e <lwip_netconn_do_writemore+0x4e>
 8011776:	4b6a      	ldr	r3, [pc, #424]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 8011778:	f240 6274 	movw	r2, #1652	; 0x674
 801177c:	496b      	ldr	r1, [pc, #428]	; (801192c <lwip_netconn_do_writemore+0x1ec>)
 801177e:	486a      	ldr	r0, [pc, #424]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 8011780:	f7ef fdd6 	bl	8001330 <iprintf>
 8011784:	2000      	movs	r0, #0
 8011786:	f006 fe77 	bl	8018478 <fflush>
 801178a:	f006 fdbb 	bl	8018304 <abort>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a1b      	ldr	r3, [r3, #32]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10b      	bne.n	80117ae <lwip_netconn_do_writemore+0x6e>
 8011796:	4b62      	ldr	r3, [pc, #392]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 8011798:	f240 6275 	movw	r2, #1653	; 0x675
 801179c:	4964      	ldr	r1, [pc, #400]	; (8011930 <lwip_netconn_do_writemore+0x1f0>)
 801179e:	4862      	ldr	r0, [pc, #392]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 80117a0:	f7ef fdc6 	bl	8001330 <iprintf>
 80117a4:	2000      	movs	r0, #0
 80117a6:	f006 fe67 	bl	8018478 <fflush>
 80117aa:	f006 fdab 	bl	8018304 <abort>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d10b      	bne.n	80117ce <lwip_netconn_do_writemore+0x8e>
 80117b6:	4b5a      	ldr	r3, [pc, #360]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 80117b8:	f240 6276 	movw	r2, #1654	; 0x676
 80117bc:	495d      	ldr	r1, [pc, #372]	; (8011934 <lwip_netconn_do_writemore+0x1f4>)
 80117be:	485a      	ldr	r0, [pc, #360]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 80117c0:	f7ef fdb6 	bl	8001330 <iprintf>
 80117c4:	2000      	movs	r0, #0
 80117c6:	f006 fe57 	bl	8018478 <fflush>
 80117ca:	f006 fd9b 	bl	8018304 <abort>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6a1b      	ldr	r3, [r3, #32]
 80117d2:	699a      	ldr	r2, [r3, #24]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6a1b      	ldr	r3, [r3, #32]
 80117d8:	695b      	ldr	r3, [r3, #20]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d30b      	bcc.n	80117f6 <lwip_netconn_do_writemore+0xb6>
 80117de:	4b50      	ldr	r3, [pc, #320]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 80117e0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80117e4:	4954      	ldr	r1, [pc, #336]	; (8011938 <lwip_netconn_do_writemore+0x1f8>)
 80117e6:	4850      	ldr	r0, [pc, #320]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 80117e8:	f7ef fda2 	bl	8001330 <iprintf>
 80117ec:	2000      	movs	r0, #0
 80117ee:	f006 fe43 	bl	8018478 <fflush>
 80117f2:	f006 fd87 	bl	8018304 <abort>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	899b      	ldrh	r3, [r3, #12]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d10b      	bne.n	8011818 <lwip_netconn_do_writemore+0xd8>
 8011800:	4b47      	ldr	r3, [pc, #284]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 8011802:	f240 6279 	movw	r2, #1657	; 0x679
 8011806:	494d      	ldr	r1, [pc, #308]	; (801193c <lwip_netconn_do_writemore+0x1fc>)
 8011808:	4847      	ldr	r0, [pc, #284]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 801180a:	f7ef fd91 	bl	8001330 <iprintf>
 801180e:	2000      	movs	r0, #0
 8011810:	f006 fe32 	bl	8018478 <fflush>
 8011814:	f006 fd76 	bl	8018304 <abort>

  apiflags = conn->current_msg->msg.w.apiflags;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a1b      	ldr	r3, [r3, #32]
 801181c:	7f1b      	ldrb	r3, [r3, #28]
 801181e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	7f1b      	ldrb	r3, [r3, #28]
 8011824:	f003 0302 	and.w	r3, r3, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	d104      	bne.n	8011836 <lwip_netconn_do_writemore+0xf6>
 801182c:	7ebb      	ldrb	r3, [r7, #26]
 801182e:	f003 0304 	and.w	r3, r3, #4
 8011832:	2b00      	cmp	r3, #0
 8011834:	d001      	beq.n	801183a <lwip_netconn_do_writemore+0xfa>
 8011836:	2301      	movs	r3, #1
 8011838:	e000      	b.n	801183c <lwip_netconn_do_writemore+0xfc>
 801183a:	2300      	movs	r3, #0
 801183c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6a1b      	ldr	r3, [r3, #32]
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6a1b      	ldr	r3, [r3, #32]
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	4413      	add	r3, r2
 801184e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6a1b      	ldr	r3, [r3, #32]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	685a      	ldr	r2, [r3, #4]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a1b      	ldr	r3, [r3, #32]
 801185c:	691b      	ldr	r3, [r3, #16]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011868:	d307      	bcc.n	801187a <lwip_netconn_do_writemore+0x13a>
        len = 0xffff;
 801186a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801186e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011870:	7ebb      	ldrb	r3, [r7, #26]
 8011872:	f043 0302 	orr.w	r3, r3, #2
 8011876:	76bb      	strb	r3, [r7, #26]
 8011878:	e001      	b.n	801187e <lwip_netconn_do_writemore+0x13e>
      } else {
        len = (u16_t)diff;
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011886:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011888:	89fa      	ldrh	r2, [r7, #14]
 801188a:	8bbb      	ldrh	r3, [r7, #28]
 801188c:	429a      	cmp	r2, r3
 801188e:	d216      	bcs.n	80118be <lwip_netconn_do_writemore+0x17e>
        /* don't try to write more than sendbuf */
        len = available;
 8011890:	89fb      	ldrh	r3, [r7, #14]
 8011892:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011894:	7e3b      	ldrb	r3, [r7, #24]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00d      	beq.n	80118b6 <lwip_netconn_do_writemore+0x176>
          if (!len) {
 801189a:	8bbb      	ldrh	r3, [r7, #28]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10e      	bne.n	80118be <lwip_netconn_do_writemore+0x17e>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a1b      	ldr	r3, [r3, #32]
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d102      	bne.n	80118b0 <lwip_netconn_do_writemore+0x170>
 80118aa:	f06f 0306 	mvn.w	r3, #6
 80118ae:	e000      	b.n	80118b2 <lwip_netconn_do_writemore+0x172>
 80118b0:	2300      	movs	r3, #0
 80118b2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80118b4:	e093      	b.n	80119de <lwip_netconn_do_writemore+0x29e>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80118b6:	7ebb      	ldrb	r3, [r7, #26]
 80118b8:	f043 0302 	orr.w	r3, r3, #2
 80118bc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a1b      	ldr	r3, [r3, #32]
 80118c2:	691a      	ldr	r2, [r3, #16]
 80118c4:	8bbb      	ldrh	r3, [r7, #28]
 80118c6:	441a      	add	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a1b      	ldr	r3, [r3, #32]
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d90b      	bls.n	80118ec <lwip_netconn_do_writemore+0x1ac>
 80118d4:	4b12      	ldr	r3, [pc, #72]	; (8011920 <lwip_netconn_do_writemore+0x1e0>)
 80118d6:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80118da:	4919      	ldr	r1, [pc, #100]	; (8011940 <lwip_netconn_do_writemore+0x200>)
 80118dc:	4812      	ldr	r0, [pc, #72]	; (8011928 <lwip_netconn_do_writemore+0x1e8>)
 80118de:	f7ef fd27 	bl	8001330 <iprintf>
 80118e2:	2000      	movs	r0, #0
 80118e4:	f006 fdc8 	bl	8018478 <fflush>
 80118e8:	f006 fd0c 	bl	8018304 <abort>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80118ec:	8bbb      	ldrh	r3, [r7, #28]
 80118ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d103      	bne.n	80118fe <lwip_netconn_do_writemore+0x1be>
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118fc:	d209      	bcs.n	8011912 <lwip_netconn_do_writemore+0x1d2>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011902:	8bba      	ldrh	r2, [r7, #28]
 8011904:	429a      	cmp	r2, r3
 8011906:	d11d      	bne.n	8011944 <lwip_netconn_do_writemore+0x204>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a1b      	ldr	r3, [r3, #32]
 801190c:	899b      	ldrh	r3, [r3, #12]
 801190e:	2b01      	cmp	r3, #1
 8011910:	d918      	bls.n	8011944 <lwip_netconn_do_writemore+0x204>
        write_more = 1;
 8011912:	2301      	movs	r3, #1
 8011914:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011916:	7ebb      	ldrb	r3, [r7, #26]
 8011918:	f043 0302 	orr.w	r3, r3, #2
 801191c:	76bb      	strb	r3, [r7, #26]
 801191e:	e013      	b.n	8011948 <lwip_netconn_do_writemore+0x208>
 8011920:	0801b934 	.word	0x0801b934
 8011924:	0801ba74 	.word	0x0801ba74
 8011928:	0801b960 	.word	0x0801b960
 801192c:	0801bd7c 	.word	0x0801bd7c
 8011930:	0801ba84 	.word	0x0801ba84
 8011934:	0801bd9c 	.word	0x0801bd9c
 8011938:	0801bdb4 	.word	0x0801bdb4
 801193c:	0801bdf4 	.word	0x0801bdf4
 8011940:	0801be1c 	.word	0x0801be1c
      } else {
        write_more = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6858      	ldr	r0, [r3, #4]
 801194c:	7ebb      	ldrb	r3, [r7, #26]
 801194e:	8bba      	ldrh	r2, [r7, #28]
 8011950:	6979      	ldr	r1, [r7, #20]
 8011952:	f7fb f93b 	bl	800cbcc <tcp_write>
 8011956:	4603      	mov	r3, r0
 8011958:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 801195a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d12c      	bne.n	80119bc <lwip_netconn_do_writemore+0x27c>
        conn->current_msg->msg.w.offset += len;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a1b      	ldr	r3, [r3, #32]
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	6a12      	ldr	r2, [r2, #32]
 801196a:	6991      	ldr	r1, [r2, #24]
 801196c:	8bba      	ldrh	r2, [r7, #28]
 801196e:	440a      	add	r2, r1
 8011970:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6a1b      	ldr	r3, [r3, #32]
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	6a12      	ldr	r2, [r2, #32]
 801197a:	6911      	ldr	r1, [r2, #16]
 801197c:	8bba      	ldrh	r2, [r7, #28]
 801197e:	440a      	add	r2, r1
 8011980:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6a1b      	ldr	r3, [r3, #32]
 8011986:	691a      	ldr	r2, [r3, #16]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a1b      	ldr	r3, [r3, #32]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	429a      	cmp	r2, r3
 8011992:	d113      	bne.n	80119bc <lwip_netconn_do_writemore+0x27c>
          conn->current_msg->msg.w.vector_cnt--;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6a1b      	ldr	r3, [r3, #32]
 8011998:	899a      	ldrh	r2, [r3, #12]
 801199a:	3a01      	subs	r2, #1
 801199c:	b292      	uxth	r2, r2
 801199e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6a1b      	ldr	r3, [r3, #32]
 80119a4:	899b      	ldrh	r3, [r3, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d008      	beq.n	80119bc <lwip_netconn_do_writemore+0x27c>
            conn->current_msg->msg.w.vector++;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a1b      	ldr	r3, [r3, #32]
 80119ae:	689a      	ldr	r2, [r3, #8]
 80119b0:	3208      	adds	r2, #8
 80119b2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6a1b      	ldr	r3, [r3, #32]
 80119b8:	2200      	movs	r2, #0
 80119ba:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80119bc:	7e7b      	ldrb	r3, [r7, #25]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d004      	beq.n	80119cc <lwip_netconn_do_writemore+0x28c>
 80119c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	f43f af39 	beq.w	801183e <lwip_netconn_do_writemore+0xfe>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80119cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d004      	beq.n	80119de <lwip_netconn_do_writemore+0x29e>
 80119d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119dc:	d133      	bne.n	8011a46 <lwip_netconn_do_writemore+0x306>
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80119de:	7e3b      	ldrb	r3, [r7, #24]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d019      	beq.n	8011a18 <lwip_netconn_do_writemore+0x2d8>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a1b      	ldr	r3, [r3, #32]
 80119e8:	699a      	ldr	r2, [r3, #24]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6a1b      	ldr	r3, [r3, #32]
 80119ee:	695b      	ldr	r3, [r3, #20]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d211      	bcs.n	8011a18 <lwip_netconn_do_writemore+0x2d8>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d005      	beq.n	8011a08 <lwip_netconn_do_writemore+0x2c8>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a00:	2200      	movs	r2, #0
 8011a02:	2103      	movs	r1, #3
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7f1b      	ldrb	r3, [r3, #28]
 8011a0c:	f043 0310 	orr.w	r3, r3, #16
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	771a      	strb	r2, [r3, #28]
 8011a16:	e016      	b.n	8011a46 <lwip_netconn_do_writemore+0x306>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a20:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011a24:	d305      	bcc.n	8011a32 <lwip_netconn_do_writemore+0x2f2>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011a2e:	2b04      	cmp	r3, #4
 8011a30:	d909      	bls.n	8011a46 <lwip_netconn_do_writemore+0x306>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d005      	beq.n	8011a46 <lwip_netconn_do_writemore+0x306>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a3e:	2200      	movs	r2, #0
 8011a40:	2103      	movs	r1, #3
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8011a46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d11d      	bne.n	8011a8a <lwip_netconn_do_writemore+0x34a>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6a1b      	ldr	r3, [r3, #32]
 8011a52:	699a      	ldr	r2, [r3, #24]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6a1b      	ldr	r3, [r3, #32]
 8011a58:	695b      	ldr	r3, [r3, #20]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d002      	beq.n	8011a64 <lwip_netconn_do_writemore+0x324>
 8011a5e:	7e3b      	ldrb	r3, [r7, #24]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <lwip_netconn_do_writemore+0x328>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011a64:	2301      	movs	r3, #1
 8011a66:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7fb ff27 	bl	800d8c0 <tcp_output>
 8011a72:	4603      	mov	r3, r0
 8011a74:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011a76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011a7a:	f113 0f04 	cmn.w	r3, #4
 8011a7e:	d12c      	bne.n	8011ada <lwip_netconn_do_writemore+0x39a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011a80:	7b7b      	ldrb	r3, [r7, #13]
 8011a82:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011a84:	2301      	movs	r3, #1
 8011a86:	76fb      	strb	r3, [r7, #27]
 8011a88:	e027      	b.n	8011ada <lwip_netconn_do_writemore+0x39a>
      }
    } else if (err == ERR_MEM) {
 8011a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a92:	d120      	bne.n	8011ad6 <lwip_netconn_do_writemore+0x396>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fb ff11 	bl	800d8c0 <tcp_output>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011aa2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011aa6:	f113 0f04 	cmn.w	r3, #4
 8011aaa:	d104      	bne.n	8011ab6 <lwip_netconn_do_writemore+0x376>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011aac:	7b3b      	ldrb	r3, [r7, #12]
 8011aae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	76fb      	strb	r3, [r7, #27]
 8011ab4:	e011      	b.n	8011ada <lwip_netconn_do_writemore+0x39a>
      } else if (dontblock) {
 8011ab6:	7e3b      	ldrb	r3, [r7, #24]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d00e      	beq.n	8011ada <lwip_netconn_do_writemore+0x39a>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a1b      	ldr	r3, [r3, #32]
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <lwip_netconn_do_writemore+0x38c>
 8011ac6:	f06f 0306 	mvn.w	r3, #6
 8011aca:	e000      	b.n	8011ace <lwip_netconn_do_writemore+0x38e>
 8011acc:	2300      	movs	r3, #0
 8011ace:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	76fb      	strb	r3, [r7, #27]
 8011ad4:	e001      	b.n	8011ada <lwip_netconn_do_writemore+0x39a>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011ada:	7efb      	ldrb	r3, [r7, #27]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d015      	beq.n	8011b0c <lwip_netconn_do_writemore+0x3cc>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a1b      	ldr	r3, [r3, #32]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	330c      	adds	r3, #12
 8011ae8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6a1b      	ldr	r3, [r3, #32]
 8011aee:	7ffa      	ldrb	r2, [r7, #31]
 8011af0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2200      	movs	r2, #0
 8011af6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011afe:	78fb      	ldrb	r3, [r7, #3]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d006      	beq.n	8011b12 <lwip_netconn_do_writemore+0x3d2>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011b04:	68b8      	ldr	r0, [r7, #8]
 8011b06:	f001 ff0d 	bl	8013924 <sys_sem_signal>
 8011b0a:	e002      	b.n	8011b12 <lwip_netconn_do_writemore+0x3d2>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b10:	e000      	b.n	8011b14 <lwip_netconn_do_writemore+0x3d4>
  }
#endif
  return ERR_OK;
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3720      	adds	r7, #32
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fe fc1b 	bl	8010368 <netconn_err>
 8011b32:	4603      	mov	r3, r0
 8011b34:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d179      	bne.n	8011c32 <lwip_netconn_do_write+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b48:	2b10      	cmp	r3, #16
 8011b4a:	d170      	bne.n	8011c2e <lwip_netconn_do_write+0x112>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	785b      	ldrb	r3, [r3, #1]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d002      	beq.n	8011b5c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8011b56:	23fb      	movs	r3, #251	; 0xfb
 8011b58:	73fb      	strb	r3, [r7, #15]
 8011b5a:	e06a      	b.n	8011c32 <lwip_netconn_do_write+0x116>
      } else if (msg->conn->pcb.tcp != NULL) {
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d060      	beq.n	8011c28 <lwip_netconn_do_write+0x10c>
        msg->conn->state = NETCONN_WRITE;
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	6a1b      	ldr	r3, [r3, #32]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d00b      	beq.n	8011b90 <lwip_netconn_do_write+0x74>
 8011b78:	4b32      	ldr	r3, [pc, #200]	; (8011c44 <lwip_netconn_do_write+0x128>)
 8011b7a:	f240 7223 	movw	r2, #1827	; 0x723
 8011b7e:	4932      	ldr	r1, [pc, #200]	; (8011c48 <lwip_netconn_do_write+0x12c>)
 8011b80:	4832      	ldr	r0, [pc, #200]	; (8011c4c <lwip_netconn_do_write+0x130>)
 8011b82:	f7ef fbd5 	bl	8001330 <iprintf>
 8011b86:	2000      	movs	r0, #0
 8011b88:	f006 fc76 	bl	8018478 <fflush>
 8011b8c:	f006 fbba 	bl	8018304 <abort>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	695b      	ldr	r3, [r3, #20]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10b      	bne.n	8011bb0 <lwip_netconn_do_write+0x94>
 8011b98:	4b2a      	ldr	r3, [pc, #168]	; (8011c44 <lwip_netconn_do_write+0x128>)
 8011b9a:	f240 7224 	movw	r2, #1828	; 0x724
 8011b9e:	492c      	ldr	r1, [pc, #176]	; (8011c50 <lwip_netconn_do_write+0x134>)
 8011ba0:	482a      	ldr	r0, [pc, #168]	; (8011c4c <lwip_netconn_do_write+0x130>)
 8011ba2:	f7ef fbc5 	bl	8001330 <iprintf>
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	f006 fc66 	bl	8018478 <fflush>
 8011bac:	f006 fbaa 	bl	8018304 <abort>
        msg->conn->current_msg = msg;
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	68ba      	ldr	r2, [r7, #8]
 8011bb6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7ff fdbe 	bl	8011740 <lwip_netconn_do_writemore>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d037      	beq.n	8011c3a <lwip_netconn_do_write+0x11e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	785b      	ldrb	r3, [r3, #1]
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d00b      	beq.n	8011bec <lwip_netconn_do_write+0xd0>
 8011bd4:	4b1b      	ldr	r3, [pc, #108]	; (8011c44 <lwip_netconn_do_write+0x128>)
 8011bd6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8011bda:	491e      	ldr	r1, [pc, #120]	; (8011c54 <lwip_netconn_do_write+0x138>)
 8011bdc:	481b      	ldr	r0, [pc, #108]	; (8011c4c <lwip_netconn_do_write+0x130>)
 8011bde:	f7ef fba7 	bl	8001330 <iprintf>
 8011be2:	2000      	movs	r0, #0
 8011be4:	f006 fc48 	bl	8018478 <fflush>
 8011be8:	f006 fb8c 	bl	8018304 <abort>
          UNLOCK_TCPIP_CORE();
 8011bec:	481a      	ldr	r0, [pc, #104]	; (8011c58 <lwip_netconn_do_write+0x13c>)
 8011bee:	f001 fdd7 	bl	80137a0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	330c      	adds	r3, #12
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f001 fede 	bl	80139bc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8011c00:	4815      	ldr	r0, [pc, #84]	; (8011c58 <lwip_netconn_do_write+0x13c>)
 8011c02:	f001 fd87 	bl	8013714 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	785b      	ldrb	r3, [r3, #1]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d114      	bne.n	8011c3a <lwip_netconn_do_write+0x11e>
 8011c10:	4b0c      	ldr	r3, [pc, #48]	; (8011c44 <lwip_netconn_do_write+0x128>)
 8011c12:	f240 722c 	movw	r2, #1836	; 0x72c
 8011c16:	490f      	ldr	r1, [pc, #60]	; (8011c54 <lwip_netconn_do_write+0x138>)
 8011c18:	480c      	ldr	r0, [pc, #48]	; (8011c4c <lwip_netconn_do_write+0x130>)
 8011c1a:	f7ef fb89 	bl	8001330 <iprintf>
 8011c1e:	2000      	movs	r0, #0
 8011c20:	f006 fc2a 	bl	8018478 <fflush>
 8011c24:	f006 fb6e 	bl	8018304 <abort>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
      } else {
        err = ERR_CONN;
 8011c28:	23f5      	movs	r3, #245	; 0xf5
 8011c2a:	73fb      	strb	r3, [r7, #15]
 8011c2c:	e001      	b.n	8011c32 <lwip_netconn_do_write+0x116>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8011c2e:	23fa      	movs	r3, #250	; 0xfa
 8011c30:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	7bfa      	ldrb	r2, [r7, #15]
 8011c36:	711a      	strb	r2, [r3, #4]
 8011c38:	e000      	b.n	8011c3c <lwip_netconn_do_write+0x120>
        return;
 8011c3a:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	0801b934 	.word	0x0801b934
 8011c48:	0801bcc0 	.word	0x0801bcc0
 8011c4c:	0801b960 	.word	0x0801b960
 8011c50:	0801be48 	.word	0x0801be48
 8011c54:	0801bcdc 	.word	0x0801bcdc
 8011c58:	20016f60 	.word	0x20016f60

08011c5c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d06f      	beq.n	8011d52 <lwip_netconn_do_getaddr+0xf6>
    if (msg->msg.ad.local) {
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	7c1b      	ldrb	r3, [r3, #16]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d007      	beq.n	8011c8a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	68fa      	ldr	r2, [r7, #12]
 8011c80:	6812      	ldr	r2, [r2, #0]
 8011c82:	6852      	ldr	r2, [r2, #4]
 8011c84:	6812      	ldr	r2, [r2, #0]
 8011c86:	601a      	str	r2, [r3, #0]
 8011c88:	e006      	b.n	8011c98 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	68fa      	ldr	r2, [r7, #12]
 8011c90:	6812      	ldr	r2, [r2, #0]
 8011c92:	6852      	ldr	r2, [r2, #4]
 8011c94:	6852      	ldr	r2, [r2, #4]
 8011c96:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ca8:	2b10      	cmp	r3, #16
 8011caa:	d021      	beq.n	8011cf0 <lwip_netconn_do_getaddr+0x94>
 8011cac:	2b20      	cmp	r3, #32
 8011cae:	d144      	bne.n	8011d3a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	7c1b      	ldrb	r3, [r3, #16]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d007      	beq.n	8011cc8 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	6812      	ldr	r2, [r2, #0]
 8011cc0:	6852      	ldr	r2, [r2, #4]
 8011cc2:	8a52      	ldrh	r2, [r2, #18]
 8011cc4:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8011cc6:	e047      	b.n	8011d58 <lwip_netconn_do_getaddr+0xfc>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	7c1b      	ldrb	r3, [r3, #16]
 8011cd0:	f003 0304 	and.w	r3, r3, #4
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d103      	bne.n	8011ce0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	22f5      	movs	r2, #245	; 0xf5
 8011cdc:	711a      	strb	r2, [r3, #4]
        break;
 8011cde:	e03b      	b.n	8011d58 <lwip_netconn_do_getaddr+0xfc>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	68fa      	ldr	r2, [r7, #12]
 8011ce6:	6812      	ldr	r2, [r2, #0]
 8011ce8:	6852      	ldr	r2, [r2, #4]
 8011cea:	8a92      	ldrh	r2, [r2, #20]
 8011cec:	801a      	strh	r2, [r3, #0]
        break;
 8011cee:	e033      	b.n	8011d58 <lwip_netconn_do_getaddr+0xfc>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	7c1b      	ldrb	r3, [r3, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d10f      	bne.n	8011d18 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d005      	beq.n	8011d10 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	7d1b      	ldrb	r3, [r3, #20]
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d103      	bne.n	8011d18 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	22f5      	movs	r2, #245	; 0xf5
 8011d14:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8011d16:	e01f      	b.n	8011d58 <lwip_netconn_do_getaddr+0xfc>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	68da      	ldr	r2, [r3, #12]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	7c1b      	ldrb	r3, [r3, #16]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d004      	beq.n	8011d2e <lwip_netconn_do_getaddr+0xd2>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	8adb      	ldrh	r3, [r3, #22]
 8011d2c:	e003      	b.n	8011d36 <lwip_netconn_do_getaddr+0xda>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	8b1b      	ldrh	r3, [r3, #24]
 8011d36:	8013      	strh	r3, [r2, #0]
        break;
 8011d38:	e00e      	b.n	8011d58 <lwip_netconn_do_getaddr+0xfc>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8011d3a:	4b09      	ldr	r3, [pc, #36]	; (8011d60 <lwip_netconn_do_getaddr+0x104>)
 8011d3c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011d40:	4908      	ldr	r1, [pc, #32]	; (8011d64 <lwip_netconn_do_getaddr+0x108>)
 8011d42:	4809      	ldr	r0, [pc, #36]	; (8011d68 <lwip_netconn_do_getaddr+0x10c>)
 8011d44:	f7ef faf4 	bl	8001330 <iprintf>
 8011d48:	2000      	movs	r0, #0
 8011d4a:	f006 fb95 	bl	8018478 <fflush>
 8011d4e:	f006 fad9 	bl	8018304 <abort>
        break;
    }
  } else {
    msg->err = ERR_CONN;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	22f5      	movs	r2, #245	; 0xf5
 8011d56:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011d58:	bf00      	nop
 8011d5a:	3710      	adds	r7, #16
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	0801b934 	.word	0x0801b934
 8011d64:	0801be5c 	.word	0x0801be5c
 8011d68:	0801b960 	.word	0x0801b960

08011d6c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	785b      	ldrb	r3, [r3, #1]
 8011d7e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d077      	beq.n	8011e7a <lwip_netconn_do_close+0x10e>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8011d94:	2b10      	cmp	r3, #16
 8011d96:	d170      	bne.n	8011e7a <lwip_netconn_do_close+0x10e>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8011d9c:	2b03      	cmp	r3, #3
 8011d9e:	d002      	beq.n	8011da6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8011da0:	7afb      	ldrb	r3, [r7, #11]
 8011da2:	2b02      	cmp	r3, #2
 8011da4:	d069      	beq.n	8011e7a <lwip_netconn_do_close+0x10e>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8011da6:	7afb      	ldrb	r3, [r7, #11]
 8011da8:	2b03      	cmp	r3, #3
 8011daa:	d103      	bne.n	8011db4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	22f5      	movs	r2, #245	; 0xf5
 8011db0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011db2:	e067      	b.n	8011e84 <lwip_netconn_do_close+0x118>
    } else if (state == NETCONN_WRITE) {
 8011db4:	7afb      	ldrb	r3, [r7, #11]
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d103      	bne.n	8011dc2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	22fb      	movs	r2, #251	; 0xfb
 8011dbe:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8011dc0:	e060      	b.n	8011e84 <lwip_netconn_do_close+0x118>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	7a1b      	ldrb	r3, [r3, #8]
 8011dc6:	f003 0301 	and.w	r3, r3, #1
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d004      	beq.n	8011dd8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff f860 	bl	8010e98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	6a1b      	ldr	r3, [r3, #32]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00b      	beq.n	8011dfa <lwip_netconn_do_close+0x8e>
 8011de2:	4b2a      	ldr	r3, [pc, #168]	; (8011e8c <lwip_netconn_do_close+0x120>)
 8011de4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8011de8:	4929      	ldr	r1, [pc, #164]	; (8011e90 <lwip_netconn_do_close+0x124>)
 8011dea:	482a      	ldr	r0, [pc, #168]	; (8011e94 <lwip_netconn_do_close+0x128>)
 8011dec:	f7ef faa0 	bl	8001330 <iprintf>
 8011df0:	2000      	movs	r0, #0
 8011df2:	f006 fb41 	bl	8018478 <fflush>
 8011df6:	f006 fa85 	bl	8018304 <abort>
      msg->conn->state = NETCONN_CLOSE;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2204      	movs	r2, #4
 8011e00:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	2100      	movs	r1, #0
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7ff f8bb 	bl	8010f8c <lwip_netconn_do_close_internal>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d032      	beq.n	8011e82 <lwip_netconn_do_close+0x116>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	785b      	ldrb	r3, [r3, #1]
 8011e22:	2b04      	cmp	r3, #4
 8011e24:	d00b      	beq.n	8011e3e <lwip_netconn_do_close+0xd2>
 8011e26:	4b19      	ldr	r3, [pc, #100]	; (8011e8c <lwip_netconn_do_close+0x120>)
 8011e28:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8011e2c:	491a      	ldr	r1, [pc, #104]	; (8011e98 <lwip_netconn_do_close+0x12c>)
 8011e2e:	4819      	ldr	r0, [pc, #100]	; (8011e94 <lwip_netconn_do_close+0x128>)
 8011e30:	f7ef fa7e 	bl	8001330 <iprintf>
 8011e34:	2000      	movs	r0, #0
 8011e36:	f006 fb1f 	bl	8018478 <fflush>
 8011e3a:	f006 fa63 	bl	8018304 <abort>
        UNLOCK_TCPIP_CORE();
 8011e3e:	4817      	ldr	r0, [pc, #92]	; (8011e9c <lwip_netconn_do_close+0x130>)
 8011e40:	f001 fcae 	bl	80137a0 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	330c      	adds	r3, #12
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f001 fdb5 	bl	80139bc <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011e52:	4812      	ldr	r0, [pc, #72]	; (8011e9c <lwip_netconn_do_close+0x130>)
 8011e54:	f001 fc5e 	bl	8013714 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	785b      	ldrb	r3, [r3, #1]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00f      	beq.n	8011e82 <lwip_netconn_do_close+0x116>
 8011e62:	4b0a      	ldr	r3, [pc, #40]	; (8011e8c <lwip_netconn_do_close+0x120>)
 8011e64:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8011e68:	490b      	ldr	r1, [pc, #44]	; (8011e98 <lwip_netconn_do_close+0x12c>)
 8011e6a:	480a      	ldr	r0, [pc, #40]	; (8011e94 <lwip_netconn_do_close+0x128>)
 8011e6c:	f7ef fa60 	bl	8001330 <iprintf>
 8011e70:	2000      	movs	r0, #0
 8011e72:	f006 fb01 	bl	8018478 <fflush>
 8011e76:	f006 fa45 	bl	8018304 <abort>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	22f5      	movs	r2, #245	; 0xf5
 8011e7e:	711a      	strb	r2, [r3, #4]
 8011e80:	e000      	b.n	8011e84 <lwip_netconn_do_close+0x118>
      return;
 8011e82:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	0801b934 	.word	0x0801b934
 8011e90:	0801bcc0 	.word	0x0801bcc0
 8011e94:	0801b960 	.word	0x0801b960
 8011e98:	0801bcdc 	.word	0x0801bcdc
 8011e9c:	20016f60 	.word	0x20016f60

08011ea0 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8011eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	dc04      	bgt.n	8011ebc <err_to_errno+0x1c>
 8011eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011eb6:	425b      	negs	r3, r3
 8011eb8:	2b10      	cmp	r3, #16
 8011eba:	dd01      	ble.n	8011ec0 <err_to_errno+0x20>
    return EIO;
 8011ebc:	2305      	movs	r3, #5
 8011ebe:	e005      	b.n	8011ecc <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8011ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ec4:	425b      	negs	r3, r3
 8011ec6:	4a04      	ldr	r2, [pc, #16]	; (8011ed8 <err_to_errno+0x38>)
 8011ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr
 8011ed8:	0801c7f0 	.word	0x0801c7f0

08011edc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d013      	beq.n	8011f12 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00b      	beq.n	8011f0a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7f5 fdf2 	bl	8007ae0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	605a      	str	r2, [r3, #4]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	685a      	ldr	r2, [r3, #4]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011f0a:	6879      	ldr	r1, [r7, #4]
 8011f0c:	2006      	movs	r0, #6
 8011f0e:	f7f4 ffa9 	bl	8006e64 <memp_free>
  }
}
 8011f12:	bf00      	nop
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
	...

08011f1c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10a      	bne.n	8011f40 <netbuf_free+0x24>
 8011f2a:	4b0f      	ldr	r3, [pc, #60]	; (8011f68 <netbuf_free+0x4c>)
 8011f2c:	2281      	movs	r2, #129	; 0x81
 8011f2e:	490f      	ldr	r1, [pc, #60]	; (8011f6c <netbuf_free+0x50>)
 8011f30:	480f      	ldr	r0, [pc, #60]	; (8011f70 <netbuf_free+0x54>)
 8011f32:	f7ef f9fd 	bl	8001330 <iprintf>
 8011f36:	2000      	movs	r0, #0
 8011f38:	f006 fa9e 	bl	8018478 <fflush>
 8011f3c:	f006 f9e2 	bl	8018304 <abort>
  if (buf->p != NULL) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d004      	beq.n	8011f52 <netbuf_free+0x36>
    pbuf_free(buf->p);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f5 fdc7 	bl	8007ae0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	605a      	str	r2, [r3, #4]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	685a      	ldr	r2, [r3, #4]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8011f60:	bf00      	nop
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	0801be74 	.word	0x0801be74
 8011f6c:	0801bef8 	.word	0x0801bef8
 8011f70:	0801beac 	.word	0x0801beac

08011f74 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10a      	bne.n	8011f9e <netbuf_ref+0x2a>
 8011f88:	4b1d      	ldr	r3, [pc, #116]	; (8012000 <netbuf_ref+0x8c>)
 8011f8a:	2299      	movs	r2, #153	; 0x99
 8011f8c:	491d      	ldr	r1, [pc, #116]	; (8012004 <netbuf_ref+0x90>)
 8011f8e:	481e      	ldr	r0, [pc, #120]	; (8012008 <netbuf_ref+0x94>)
 8011f90:	f7ef f9ce 	bl	8001330 <iprintf>
 8011f94:	2000      	movs	r0, #0
 8011f96:	f006 fa6f 	bl	8018478 <fflush>
 8011f9a:	f006 f9b3 	bl	8018304 <abort>
  if (buf->p != NULL) {
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d004      	beq.n	8011fb0 <netbuf_ref+0x3c>
    pbuf_free(buf->p);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f5 fd98 	bl	8007ae0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8011fb0:	2241      	movs	r2, #65	; 0x41
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	2036      	movs	r0, #54	; 0x36
 8011fb6:	f7f5 fa9b 	bl	80074f0 <pbuf_alloc>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d105      	bne.n	8011fd4 <netbuf_ref+0x60>
    buf->ptr = NULL;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8011fce:	f04f 33ff 	mov.w	r3, #4294967295
 8011fd2:	e010      	b.n	8011ff6 <netbuf_ref+0x82>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	88f9      	ldrh	r1, [r7, #6]
 8011fe6:	8119      	strh	r1, [r3, #8]
 8011fe8:	891b      	ldrh	r3, [r3, #8]
 8011fea:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	0801be74 	.word	0x0801be74
 8012004:	0801bf14 	.word	0x0801bf14
 8012008:	0801beac 	.word	0x0801beac

0801200c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b00      	cmp	r3, #0
 801201c:	db02      	blt.n	8012024 <tryget_socket_unconn_nouse+0x18>
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2b03      	cmp	r3, #3
 8012022:	dd01      	ble.n	8012028 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8012024:	2300      	movs	r3, #0
 8012026:	e003      	b.n	8012030 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	011b      	lsls	r3, r3, #4
 801202c:	4a03      	ldr	r2, [pc, #12]	; (801203c <tryget_socket_unconn_nouse+0x30>)
 801202e:	4413      	add	r3, r2
}
 8012030:	4618      	mov	r0, r3
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	200002d0 	.word	0x200002d0

08012040 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff ffdf 	bl	801200c <tryget_socket_unconn_nouse>
 801204e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8012050:	68fb      	ldr	r3, [r7, #12]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 801205a:	b580      	push	{r7, lr}
 801205c:	b084      	sub	sp, #16
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7ff ffec 	bl	8012040 <tryget_socket_unconn>
 8012068:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d005      	beq.n	801207c <tryget_socket+0x22>
    if (sock->conn) {
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <tryget_socket+0x22>
      return sock;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	e000      	b.n	801207e <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3710      	adds	r7, #16
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
	...

08012088 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7ff ffe2 	bl	801205a <tryget_socket>
 8012096:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d104      	bne.n	80120a8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 801209e:	4b05      	ldr	r3, [pc, #20]	; (80120b4 <get_socket+0x2c>)
 80120a0:	2209      	movs	r2, #9
 80120a2:	601a      	str	r2, [r3, #0]
    return NULL;
 80120a4:	2300      	movs	r3, #0
 80120a6:	e000      	b.n	80120aa <get_socket+0x22>
  }
  return sock;
 80120a8:	68fb      	ldr	r3, [r7, #12]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	20016f68 	.word	0x20016f68

080120b8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80120c2:	2300      	movs	r3, #0
 80120c4:	60fb      	str	r3, [r7, #12]
 80120c6:	e057      	b.n	8012178 <alloc_socket+0xc0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 80120c8:	f001 fac8 	bl	801365c <sys_arch_protect>
 80120cc:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 80120ce:	4a2f      	ldr	r2, [pc, #188]	; (801218c <alloc_socket+0xd4>)
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	011b      	lsls	r3, r3, #4
 80120d4:	4413      	add	r3, r2
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d147      	bne.n	801216c <alloc_socket+0xb4>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 80120dc:	4a2b      	ldr	r2, [pc, #172]	; (801218c <alloc_socket+0xd4>)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	4413      	add	r3, r2
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 80120e8:	68b8      	ldr	r0, [r7, #8]
 80120ea:	f001 fabe 	bl	801366a <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 80120ee:	4a27      	ldr	r2, [pc, #156]	; (801218c <alloc_socket+0xd4>)
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	011b      	lsls	r3, r3, #4
 80120f4:	4413      	add	r3, r2
 80120f6:	3304      	adds	r3, #4
 80120f8:	2200      	movs	r2, #0
 80120fa:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80120fc:	4a23      	ldr	r2, [pc, #140]	; (801218c <alloc_socket+0xd4>)
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	011b      	lsls	r3, r3, #4
 8012102:	4413      	add	r3, r2
 8012104:	330e      	adds	r3, #14
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00b      	beq.n	8012124 <alloc_socket+0x6c>
 801210c:	4b20      	ldr	r3, [pc, #128]	; (8012190 <alloc_socket+0xd8>)
 801210e:	f240 220e 	movw	r2, #526	; 0x20e
 8012112:	4920      	ldr	r1, [pc, #128]	; (8012194 <alloc_socket+0xdc>)
 8012114:	4820      	ldr	r0, [pc, #128]	; (8012198 <alloc_socket+0xe0>)
 8012116:	f7ef f90b 	bl	8001330 <iprintf>
 801211a:	2000      	movs	r0, #0
 801211c:	f006 f9ac 	bl	8018478 <fflush>
 8012120:	f006 f8f0 	bl	8018304 <abort>
      sockets[i].rcvevent   = 0;
 8012124:	4a19      	ldr	r2, [pc, #100]	; (801218c <alloc_socket+0xd4>)
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	011b      	lsls	r3, r3, #4
 801212a:	4413      	add	r3, r2
 801212c:	3308      	adds	r3, #8
 801212e:	2200      	movs	r2, #0
 8012130:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801213a:	2b10      	cmp	r3, #16
 801213c:	d102      	bne.n	8012144 <alloc_socket+0x8c>
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <alloc_socket+0x90>
 8012144:	2301      	movs	r3, #1
 8012146:	e000      	b.n	801214a <alloc_socket+0x92>
 8012148:	2300      	movs	r3, #0
 801214a:	b299      	uxth	r1, r3
 801214c:	4a0f      	ldr	r2, [pc, #60]	; (801218c <alloc_socket+0xd4>)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	011b      	lsls	r3, r3, #4
 8012152:	4413      	add	r3, r2
 8012154:	330a      	adds	r3, #10
 8012156:	460a      	mov	r2, r1
 8012158:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 801215a:	4a0c      	ldr	r2, [pc, #48]	; (801218c <alloc_socket+0xd4>)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	011b      	lsls	r3, r3, #4
 8012160:	4413      	add	r3, r2
 8012162:	330c      	adds	r3, #12
 8012164:	2200      	movs	r2, #0
 8012166:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	e00a      	b.n	8012182 <alloc_socket+0xca>
    }
    SYS_ARCH_UNPROTECT(lev);
 801216c:	68b8      	ldr	r0, [r7, #8]
 801216e:	f001 fa7c 	bl	801366a <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	3301      	adds	r3, #1
 8012176:	60fb      	str	r3, [r7, #12]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2b03      	cmp	r3, #3
 801217c:	dda4      	ble.n	80120c8 <alloc_socket+0x10>
  }
  return -1;
 801217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	200002d0 	.word	0x200002d0
 8012190:	0801bff4 	.word	0x0801bff4
 8012194:	0801c010 	.word	0x0801c010
 8012198:	0801c030 	.word	0x0801c030

0801219c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 801219c:	b480      	push	{r7}
 801219e:	b085      	sub	sp, #20
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	6852      	ldr	r2, [r2, #4]
 80121b0:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2200      	movs	r2, #0
 80121b6:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681a      	ldr	r2, [r3, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2200      	movs	r2, #0
 80121c4:	601a      	str	r2, [r3, #0]
  return 1;
 80121c6:	2301      	movs	r3, #1
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3714      	adds	r7, #20
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr

080121d4 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d00d      	beq.n	8012204 <free_socket_free_elements+0x30>
    if (is_tcp) {
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d005      	beq.n	80121fa <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7f5 fc74 	bl	8007ae0 <pbuf_free>
 80121f8:	e004      	b.n	8012204 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff fe6c 	bl	8011edc <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d002      	beq.n	8012210 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 801220a:	68b8      	ldr	r0, [r7, #8]
 801220c:	f7fd fbf2 	bl	800f9f4 <netconn_delete>
  }
}
 8012210:	bf00      	nop
 8012212:	3710      	adds	r7, #16
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8012222:	f001 fa1b 	bl	801365c <sys_arch_protect>
 8012226:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8012228:	f107 0308 	add.w	r3, r7, #8
 801222c:	f107 020c 	add.w	r2, r7, #12
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff ffb2 	bl	801219c <free_socket_locked>
 8012238:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 801223a:	6978      	ldr	r0, [r7, #20]
 801223c:	f001 fa15 	bl	801366a <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d006      	beq.n	8012254 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	f107 0208 	add.w	r2, r7, #8
 801224c:	4619      	mov	r1, r3
 801224e:	6838      	ldr	r0, [r7, #0]
 8012250:	f7ff ffc0 	bl	80121d4 <free_socket_free_elements>
  }
}
 8012254:	bf00      	nop
 8012256:	3718      	adds	r7, #24
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 801225c:	b590      	push	{r4, r7, lr}
 801225e:	b099      	sub	sp, #100	; 0x64
 8012260:	af00      	add	r7, sp, #0
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8012268:	2300      	movs	r3, #0
 801226a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7ff ff0b 	bl	8012088 <get_socket>
 8012272:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 8012274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012276:	2b00      	cmp	r3, #0
 8012278:	d102      	bne.n	8012280 <lwip_accept+0x24>
    return -1;
 801227a:	f04f 33ff 	mov.w	r3, #4294967295
 801227e:	e102      	b.n	8012486 <lwip_accept+0x22a>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8012280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012288:	4611      	mov	r1, r2
 801228a:	4618      	mov	r0, r3
 801228c:	f7fd fc8e 	bl	800fbac <netconn_accept>
 8012290:	4603      	mov	r3, r0
 8012292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 8012296:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801229a:	2b00      	cmp	r3, #0
 801229c:	d02c      	beq.n	80122f8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801229e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122a8:	2b10      	cmp	r3, #16
 80122aa:	d008      	beq.n	80122be <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 80122ac:	235f      	movs	r3, #95	; 0x5f
 80122ae:	653b      	str	r3, [r7, #80]	; 0x50
 80122b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d01d      	beq.n	80122f2 <lwip_accept+0x96>
 80122b6:	4a76      	ldr	r2, [pc, #472]	; (8012490 <lwip_accept+0x234>)
 80122b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ba:	6013      	str	r3, [r2, #0]
 80122bc:	e019      	b.n	80122f2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 80122be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80122c2:	f113 0f0f 	cmn.w	r3, #15
 80122c6:	d108      	bne.n	80122da <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 80122c8:	2316      	movs	r3, #22
 80122ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00f      	beq.n	80122f2 <lwip_accept+0x96>
 80122d2:	4a6f      	ldr	r2, [pc, #444]	; (8012490 <lwip_accept+0x234>)
 80122d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d6:	6013      	str	r3, [r2, #0]
 80122d8:	e00b      	b.n	80122f2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 80122da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80122de:	4618      	mov	r0, r3
 80122e0:	f7ff fdde 	bl	8011ea0 <err_to_errno>
 80122e4:	64b8      	str	r0, [r7, #72]	; 0x48
 80122e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <lwip_accept+0x96>
 80122ec:	4a68      	ldr	r2, [pc, #416]	; (8012490 <lwip_accept+0x234>)
 80122ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122f0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 80122f2:	f04f 33ff 	mov.w	r3, #4294967295
 80122f6:	e0c6      	b.n	8012486 <lwip_accept+0x22a>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 80122f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d10b      	bne.n	8012316 <lwip_accept+0xba>
 80122fe:	4b65      	ldr	r3, [pc, #404]	; (8012494 <lwip_accept+0x238>)
 8012300:	f240 228b 	movw	r2, #651	; 0x28b
 8012304:	4964      	ldr	r1, [pc, #400]	; (8012498 <lwip_accept+0x23c>)
 8012306:	4865      	ldr	r0, [pc, #404]	; (801249c <lwip_accept+0x240>)
 8012308:	f7ef f812 	bl	8001330 <iprintf>
 801230c:	2000      	movs	r0, #0
 801230e:	f006 f8b3 	bl	8018478 <fflush>
 8012312:	f005 fff7 	bl	8018304 <abort>

  newsock = alloc_socket(newconn, 1);
 8012316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012318:	2101      	movs	r1, #1
 801231a:	4618      	mov	r0, r3
 801231c:	f7ff fecc 	bl	80120b8 <alloc_socket>
 8012320:	6478      	str	r0, [r7, #68]	; 0x44
  if (newsock == -1) {
 8012322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012328:	d10e      	bne.n	8012348 <lwip_accept+0xec>
    netconn_delete(newconn);
 801232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232c:	4618      	mov	r0, r3
 801232e:	f7fd fb61 	bl	800f9f4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8012332:	2317      	movs	r3, #23
 8012334:	643b      	str	r3, [r7, #64]	; 0x40
 8012336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <lwip_accept+0xe6>
 801233c:	4a54      	ldr	r2, [pc, #336]	; (8012490 <lwip_accept+0x234>)
 801233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012340:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012342:	f04f 33ff 	mov.w	r3, #4294967295
 8012346:	e09e      	b.n	8012486 <lwip_accept+0x22a>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8012348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801234a:	2b00      	cmp	r3, #0
 801234c:	db02      	blt.n	8012354 <lwip_accept+0xf8>
 801234e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012350:	2b03      	cmp	r3, #3
 8012352:	dd0b      	ble.n	801236c <lwip_accept+0x110>
 8012354:	4b4f      	ldr	r3, [pc, #316]	; (8012494 <lwip_accept+0x238>)
 8012356:	f44f 7225 	mov.w	r2, #660	; 0x294
 801235a:	4951      	ldr	r1, [pc, #324]	; (80124a0 <lwip_accept+0x244>)
 801235c:	484f      	ldr	r0, [pc, #316]	; (801249c <lwip_accept+0x240>)
 801235e:	f7ee ffe7 	bl	8001330 <iprintf>
 8012362:	2000      	movs	r0, #0
 8012364:	f006 f888 	bl	8018478 <fflush>
 8012368:	f005 ffcc 	bl	8018304 <abort>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 801236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801236e:	011b      	lsls	r3, r3, #4
 8012370:	4a4c      	ldr	r2, [pc, #304]	; (80124a4 <lwip_accept+0x248>)
 8012372:	4413      	add	r3, r2
 8012374:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8012376:	f001 f971 	bl	801365c <sys_arch_protect>
 801237a:	63b8      	str	r0, [r7, #56]	; 0x38
  recvevent = (s16_t)(-1 - newconn->socket);
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	699b      	ldr	r3, [r3, #24]
 8012380:	b21b      	sxth	r3, r3
 8012382:	43db      	mvns	r3, r3
 8012384:	b21b      	sxth	r3, r3
 8012386:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 8012388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801238c:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 801238e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012390:	f001 f96b 	bl	801366a <sys_arch_unprotect>

  if (newconn->callback) {
 8012394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012398:	2b00      	cmp	r3, #0
 801239a:	d012      	beq.n	80123c2 <lwip_accept+0x166>
    LOCK_TCPIP_CORE();
 801239c:	4842      	ldr	r0, [pc, #264]	; (80124a8 <lwip_accept+0x24c>)
 801239e:	f001 f9b9 	bl	8013714 <sys_mutex_lock>
    while (recvevent > 0) {
 80123a2:	e008      	b.n	80123b6 <lwip_accept+0x15a>
      recvevent--;
 80123a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123a6:	3b01      	subs	r3, #1
 80123a8:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80123aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123b0:	2200      	movs	r2, #0
 80123b2:	2100      	movs	r1, #0
 80123b4:	4798      	blx	r3
    while (recvevent > 0) {
 80123b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dcf3      	bgt.n	80123a4 <lwip_accept+0x148>
    }
    UNLOCK_TCPIP_CORE();
 80123bc:	483a      	ldr	r0, [pc, #232]	; (80124a8 <lwip_accept+0x24c>)
 80123be:	f001 f9ef 	bl	80137a0 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d055      	beq.n	8012474 <lwip_accept+0x218>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d052      	beq.n	8012474 <lwip_accept+0x218>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 80123ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123d0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80123d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80123d8:	2300      	movs	r3, #0
 80123da:	f7fd fb27 	bl	800fa2c <netconn_getaddr>
 80123de:	4603      	mov	r3, r0
 80123e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 80123e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d016      	beq.n	801241a <lwip_accept+0x1be>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 80123ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fd fb00 	bl	800f9f4 <netconn_delete>
      free_socket(nsock, 1);
 80123f4:	2101      	movs	r1, #1
 80123f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80123f8:	f7ff ff0e 	bl	8012218 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 80123fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8012400:	4618      	mov	r0, r3
 8012402:	f7ff fd4d 	bl	8011ea0 <err_to_errno>
 8012406:	6378      	str	r0, [r7, #52]	; 0x34
 8012408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801240a:	2b00      	cmp	r3, #0
 801240c:	d002      	beq.n	8012414 <lwip_accept+0x1b8>
 801240e:	4a20      	ldr	r2, [pc, #128]	; (8012490 <lwip_accept+0x234>)
 8012410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012412:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8012414:	f04f 33ff 	mov.w	r3, #4294967295
 8012418:	e035      	b.n	8012486 <lwip_accept+0x22a>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801241a:	f107 0314 	add.w	r3, r7, #20
 801241e:	2210      	movs	r2, #16
 8012420:	701a      	strb	r2, [r3, #0]
 8012422:	f107 0314 	add.w	r3, r7, #20
 8012426:	2202      	movs	r2, #2
 8012428:	705a      	strb	r2, [r3, #1]
 801242a:	f107 0414 	add.w	r4, r7, #20
 801242e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012430:	4618      	mov	r0, r3
 8012432:	f7f3 fc0b 	bl	8005c4c <lwip_htons>
 8012436:	4603      	mov	r3, r0
 8012438:	8063      	strh	r3, [r4, #2]
 801243a:	f107 0314 	add.w	r3, r7, #20
 801243e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012440:	605a      	str	r2, [r3, #4]
 8012442:	f107 0314 	add.w	r3, r7, #20
 8012446:	3308      	adds	r3, #8
 8012448:	2208      	movs	r2, #8
 801244a:	2100      	movs	r1, #0
 801244c:	4618      	mov	r0, r3
 801244e:	f006 f92d 	bl	80186ac <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	7d3a      	ldrb	r2, [r7, #20]
 8012458:	4293      	cmp	r3, r2
 801245a:	d903      	bls.n	8012464 <lwip_accept+0x208>
      *addrlen = tempaddr.sa.sa_len;
 801245c:	7d3b      	ldrb	r3, [r7, #20]
 801245e:	461a      	mov	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	f107 0314 	add.w	r3, r7, #20
 801246c:	4619      	mov	r1, r3
 801246e:	68b8      	ldr	r0, [r7, #8]
 8012470:	f006 f911 	bl	8018696 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8012474:	2300      	movs	r3, #0
 8012476:	633b      	str	r3, [r7, #48]	; 0x30
 8012478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247a:	2b00      	cmp	r3, #0
 801247c:	d002      	beq.n	8012484 <lwip_accept+0x228>
 801247e:	4a04      	ldr	r2, [pc, #16]	; (8012490 <lwip_accept+0x234>)
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 8012484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012486:	4618      	mov	r0, r3
 8012488:	3764      	adds	r7, #100	; 0x64
 801248a:	46bd      	mov	sp, r7
 801248c:	bd90      	pop	{r4, r7, pc}
 801248e:	bf00      	nop
 8012490:	20016f68 	.word	0x20016f68
 8012494:	0801bff4 	.word	0x0801bff4
 8012498:	0801c058 	.word	0x0801c058
 801249c:	0801c030 	.word	0x0801c030
 80124a0:	0801c068 	.word	0x0801c068
 80124a4:	200002d0 	.word	0x200002d0
 80124a8:	20016f60 	.word	0x20016f60

080124ac <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b08a      	sub	sp, #40	; 0x28
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	f7ff fde5 	bl	8012088 <get_socket>
 80124be:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 80124c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d102      	bne.n	80124cc <lwip_bind+0x20>
    return -1;
 80124c6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ca:	e048      	b.n	801255e <lwip_bind+0xb2>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b10      	cmp	r3, #16
 80124d0:	d108      	bne.n	80124e4 <lwip_bind+0x38>
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	785b      	ldrb	r3, [r3, #1]
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	d104      	bne.n	80124e4 <lwip_bind+0x38>
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	f003 0303 	and.w	r3, r3, #3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d00b      	beq.n	80124fc <lwip_bind+0x50>
 80124e4:	4b20      	ldr	r3, [pc, #128]	; (8012568 <lwip_bind+0xbc>)
 80124e6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80124ea:	4920      	ldr	r1, [pc, #128]	; (801256c <lwip_bind+0xc0>)
 80124ec:	4820      	ldr	r0, [pc, #128]	; (8012570 <lwip_bind+0xc4>)
 80124ee:	f7ee ff1f 	bl	8001330 <iprintf>
 80124f2:	2000      	movs	r0, #0
 80124f4:	f005 ffc0 	bl	8018478 <fflush>
 80124f8:	f005 ff04 	bl	8018304 <abort>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	617b      	str	r3, [r7, #20]
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	885b      	ldrh	r3, [r3, #2]
 8012506:	4618      	mov	r0, r3
 8012508:	f7f3 fba0 	bl	8005c4c <lwip_htons>
 801250c:	4603      	mov	r3, r0
 801250e:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012516:	f107 0114 	add.w	r1, r7, #20
 801251a:	4618      	mov	r0, r3
 801251c:	f7fd fade 	bl	800fadc <netconn_bind>
 8012520:	4603      	mov	r3, r0
 8012522:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 8012526:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 801252a:	2b00      	cmp	r3, #0
 801252c:	d00e      	beq.n	801254c <lwip_bind+0xa0>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 801252e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8012532:	4618      	mov	r0, r3
 8012534:	f7ff fcb4 	bl	8011ea0 <err_to_errno>
 8012538:	61f8      	str	r0, [r7, #28]
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d002      	beq.n	8012546 <lwip_bind+0x9a>
 8012540:	4a0c      	ldr	r2, [pc, #48]	; (8012574 <lwip_bind+0xc8>)
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012546:	f04f 33ff 	mov.w	r3, #4294967295
 801254a:	e008      	b.n	801255e <lwip_bind+0xb2>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 801254c:	2300      	movs	r3, #0
 801254e:	61bb      	str	r3, [r7, #24]
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d002      	beq.n	801255c <lwip_bind+0xb0>
 8012556:	4a07      	ldr	r2, [pc, #28]	; (8012574 <lwip_bind+0xc8>)
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 801255c:	2300      	movs	r3, #0
}
 801255e:	4618      	mov	r0, r3
 8012560:	3728      	adds	r7, #40	; 0x28
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	0801bff4 	.word	0x0801bff4
 801256c:	0801c080 	.word	0x0801c080
 8012570:	0801c030 	.word	0x0801c030
 8012574:	20016f68 	.word	0x20016f68

08012578 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7ff fd80 	bl	8012088 <get_socket>
 8012588:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d102      	bne.n	8012596 <lwip_listen+0x1e>
    return -1;
 8012590:	f04f 33ff 	mov.w	r3, #4294967295
 8012594:	e03e      	b.n	8012614 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	2bfe      	cmp	r3, #254	; 0xfe
 801259a:	dc03      	bgt.n	80125a4 <lwip_listen+0x2c>
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80125a2:	e000      	b.n	80125a6 <lwip_listen+0x2e>
 80125a4:	23ff      	movs	r3, #255	; 0xff
 80125a6:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	683a      	ldr	r2, [r7, #0]
 80125ae:	b2d2      	uxtb	r2, r2
 80125b0:	4611      	mov	r1, r2
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fd facc 	bl	800fb50 <netconn_listen_with_backlog>
 80125b8:	4603      	mov	r3, r0
 80125ba:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 80125bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d01e      	beq.n	8012602 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125ce:	2b10      	cmp	r3, #16
 80125d0:	d008      	beq.n	80125e4 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 80125d2:	235f      	movs	r3, #95	; 0x5f
 80125d4:	617b      	str	r3, [r7, #20]
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00f      	beq.n	80125fc <lwip_listen+0x84>
 80125dc:	4a0f      	ldr	r2, [pc, #60]	; (801261c <lwip_listen+0xa4>)
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	6013      	str	r3, [r2, #0]
 80125e2:	e00b      	b.n	80125fc <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 80125e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7ff fc59 	bl	8011ea0 <err_to_errno>
 80125ee:	6138      	str	r0, [r7, #16]
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d002      	beq.n	80125fc <lwip_listen+0x84>
 80125f6:	4a09      	ldr	r2, [pc, #36]	; (801261c <lwip_listen+0xa4>)
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 80125fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012600:	e008      	b.n	8012614 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8012602:	2300      	movs	r3, #0
 8012604:	60fb      	str	r3, [r7, #12]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d002      	beq.n	8012612 <lwip_listen+0x9a>
 801260c:	4a03      	ldr	r2, [pc, #12]	; (801261c <lwip_listen+0xa4>)
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3720      	adds	r7, #32
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	20016f68 	.word	0x20016f68

08012620 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b08c      	sub	sp, #48	; 0x30
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
 801262c:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 801262e:	2308      	movs	r3, #8
 8012630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 8012634:	2300      	movs	r3, #0
 8012636:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	db01      	blt.n	8012642 <lwip_recv_tcp+0x22>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	e001      	b.n	8012646 <lwip_recv_tcp+0x26>
 8012642:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012646:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d10b      	bne.n	8012666 <lwip_recv_tcp+0x46>
 801264e:	4b7f      	ldr	r3, [pc, #508]	; (801284c <lwip_recv_tcp+0x22c>)
 8012650:	f240 329e 	movw	r2, #926	; 0x39e
 8012654:	497e      	ldr	r1, [pc, #504]	; (8012850 <lwip_recv_tcp+0x230>)
 8012656:	487f      	ldr	r0, [pc, #508]	; (8012854 <lwip_recv_tcp+0x234>)
 8012658:	f7ee fe6a 	bl	8001330 <iprintf>
 801265c:	2000      	movs	r0, #0
 801265e:	f005 ff0b 	bl	8018478 <fflush>
 8012662:	f005 fe4f 	bl	8018304 <abort>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012670:	2b10      	cmp	r3, #16
 8012672:	d00b      	beq.n	801268c <lwip_recv_tcp+0x6c>
 8012674:	4b75      	ldr	r3, [pc, #468]	; (801284c <lwip_recv_tcp+0x22c>)
 8012676:	f240 329f 	movw	r2, #927	; 0x39f
 801267a:	4977      	ldr	r1, [pc, #476]	; (8012858 <lwip_recv_tcp+0x238>)
 801267c:	4875      	ldr	r0, [pc, #468]	; (8012854 <lwip_recv_tcp+0x234>)
 801267e:	f7ee fe57 	bl	8001330 <iprintf>
 8012682:	2000      	movs	r0, #0
 8012684:	f005 fef8 	bl	8018478 <fflush>
 8012688:	f005 fe3c 	bl	8018304 <abort>

  if (flags & MSG_DONTWAIT) {
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	f003 0308 	and.w	r3, r3, #8
 8012692:	2b00      	cmp	r3, #0
 8012694:	d005      	beq.n	80126a2 <lwip_recv_tcp+0x82>
    apiflags |= NETCONN_DONTBLOCK;
 8012696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801269a:	f043 0304 	orr.w	r3, r3, #4
 801269e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d003      	beq.n	80126b2 <lwip_recv_tcp+0x92>
      p = sock->lastdata.pbuf;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	617b      	str	r3, [r7, #20]
 80126b0:	e03b      	b.n	801272a <lwip_recv_tcp+0x10a>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80126ba:	f107 0114 	add.w	r1, r7, #20
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fd fcba 	bl	8010038 <netconn_recv_tcp_pbuf_flags>
 80126c4:	4603      	mov	r3, r0
 80126c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 80126ca:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d019      	beq.n	8012706 <lwip_recv_tcp+0xe6>
        if (recvd > 0) {
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f300 809c 	bgt.w	8012812 <lwip_recv_tcp+0x1f2>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 80126da:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80126de:	4618      	mov	r0, r3
 80126e0:	f7ff fbde 	bl	8011ea0 <err_to_errno>
 80126e4:	61f8      	str	r0, [r7, #28]
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d002      	beq.n	80126f2 <lwip_recv_tcp+0xd2>
 80126ec:	4a5b      	ldr	r2, [pc, #364]	; (801285c <lwip_recv_tcp+0x23c>)
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 80126f2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80126f6:	f113 0f0f 	cmn.w	r3, #15
 80126fa:	d101      	bne.n	8012700 <lwip_recv_tcp+0xe0>
          return 0;
 80126fc:	2300      	movs	r3, #0
 80126fe:	e0a1      	b.n	8012844 <lwip_recv_tcp+0x224>
        } else {
          return -1;
 8012700:	f04f 33ff 	mov.w	r3, #4294967295
 8012704:	e09e      	b.n	8012844 <lwip_recv_tcp+0x224>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d10b      	bne.n	8012724 <lwip_recv_tcp+0x104>
 801270c:	4b4f      	ldr	r3, [pc, #316]	; (801284c <lwip_recv_tcp+0x22c>)
 801270e:	f240 32c5 	movw	r2, #965	; 0x3c5
 8012712:	4953      	ldr	r1, [pc, #332]	; (8012860 <lwip_recv_tcp+0x240>)
 8012714:	484f      	ldr	r0, [pc, #316]	; (8012854 <lwip_recv_tcp+0x234>)
 8012716:	f7ee fe0b 	bl	8001330 <iprintf>
 801271a:	2000      	movs	r0, #0
 801271c:	f005 feac 	bl	8018478 <fflush>
 8012720:	f005 fdf0 	bl	8018304 <abort>
      sock->lastdata.pbuf = p;
 8012724:	697a      	ldr	r2, [r7, #20]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	891b      	ldrh	r3, [r3, #8]
 801272e:	461a      	mov	r2, r3
 8012730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012732:	429a      	cmp	r2, r3
 8012734:	da03      	bge.n	801273e <lwip_recv_tcp+0x11e>
      copylen = p->tot_len;
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	891b      	ldrh	r3, [r3, #8]
 801273a:	847b      	strh	r3, [r7, #34]	; 0x22
 801273c:	e001      	b.n	8012742 <lwip_recv_tcp+0x122>
    } else {
      copylen = (u16_t)recv_left;
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8012742:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012746:	441a      	add	r2, r3
 8012748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274a:	429a      	cmp	r2, r3
 801274c:	da03      	bge.n	8012756 <lwip_recv_tcp+0x136>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 801274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012750:	b29b      	uxth	r3, r3
 8012752:	43db      	mvns	r3, r3
 8012754:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8012756:	6978      	ldr	r0, [r7, #20]
 8012758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275a:	68ba      	ldr	r2, [r7, #8]
 801275c:	18d1      	adds	r1, r2, r3
 801275e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012760:	2300      	movs	r3, #0
 8012762:	f7f5 fbfd 	bl	8007f60 <pbuf_copy_partial>

    recvd += copylen;
 8012766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801276a:	4413      	add	r3, r2
 801276c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 801276e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012772:	429a      	cmp	r2, r3
 8012774:	dd0b      	ble.n	801278e <lwip_recv_tcp+0x16e>
 8012776:	4b35      	ldr	r3, [pc, #212]	; (801284c <lwip_recv_tcp+0x22c>)
 8012778:	f240 32dd 	movw	r2, #989	; 0x3dd
 801277c:	4939      	ldr	r1, [pc, #228]	; (8012864 <lwip_recv_tcp+0x244>)
 801277e:	4835      	ldr	r0, [pc, #212]	; (8012854 <lwip_recv_tcp+0x234>)
 8012780:	f7ee fdd6 	bl	8001330 <iprintf>
 8012784:	2000      	movs	r0, #0
 8012786:	f005 fe77 	bl	8018478 <fflush>
 801278a:	f005 fdbb 	bl	8018304 <abort>
    recv_left -= copylen;
 801278e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012792:	1ad3      	subs	r3, r2, r3
 8012794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	f003 0301 	and.w	r3, r3, #1
 801279c:	2b00      	cmp	r3, #0
 801279e:	d128      	bne.n	80127f2 <lwip_recv_tcp+0x1d2>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	891b      	ldrh	r3, [r3, #8]
 80127a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d90b      	bls.n	80127c2 <lwip_recv_tcp+0x1a2>
 80127aa:	4b28      	ldr	r3, [pc, #160]	; (801284c <lwip_recv_tcp+0x22c>)
 80127ac:	f240 32e3 	movw	r2, #995	; 0x3e3
 80127b0:	492d      	ldr	r1, [pc, #180]	; (8012868 <lwip_recv_tcp+0x248>)
 80127b2:	4828      	ldr	r0, [pc, #160]	; (8012854 <lwip_recv_tcp+0x234>)
 80127b4:	f7ee fdbc 	bl	8001330 <iprintf>
 80127b8:	2000      	movs	r0, #0
 80127ba:	f005 fe5d 	bl	8018478 <fflush>
 80127be:	f005 fda1 	bl	8018304 <abort>
      if (p->tot_len - copylen > 0) {
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	891b      	ldrh	r3, [r3, #8]
 80127c6:	461a      	mov	r2, r3
 80127c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	dd09      	ble.n	80127e4 <lwip_recv_tcp+0x1c4>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127d4:	4611      	mov	r1, r2
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7f5 f94f 	bl	8007a7a <pbuf_free_header>
 80127dc:	4602      	mov	r2, r0
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	605a      	str	r2, [r3, #4]
 80127e2:	e006      	b.n	80127f2 <lwip_recv_tcp+0x1d2>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2200      	movs	r2, #0
 80127e8:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f5 f977 	bl	8007ae0 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 80127f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127f6:	f043 0314 	orr.w	r3, r3, #20
 80127fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 80127fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012800:	2b00      	cmp	r3, #0
 8012802:	dd07      	ble.n	8012814 <lwip_recv_tcp+0x1f4>
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	f003 0301 	and.w	r3, r3, #1
 801280a:	2b00      	cmp	r3, #0
 801280c:	f43f af49 	beq.w	80126a2 <lwip_recv_tcp+0x82>
 8012810:	e000      	b.n	8012814 <lwip_recv_tcp+0x1f4>
          goto lwip_recv_tcp_done;
 8012812:	bf00      	nop
lwip_recv_tcp_done:
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8012814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012816:	2b00      	cmp	r3, #0
 8012818:	dd0b      	ble.n	8012832 <lwip_recv_tcp+0x212>
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	f003 0301 	and.w	r3, r3, #1
 8012820:	2b00      	cmp	r3, #0
 8012822:	d106      	bne.n	8012832 <lwip_recv_tcp+0x212>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801282a:	4611      	mov	r1, r2
 801282c:	4618      	mov	r0, r3
 801282e:	f7fd fb4f 	bl	800fed0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8012832:	2300      	movs	r3, #0
 8012834:	61bb      	str	r3, [r7, #24]
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <lwip_recv_tcp+0x222>
 801283c:	4a07      	ldr	r2, [pc, #28]	; (801285c <lwip_recv_tcp+0x23c>)
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	6013      	str	r3, [r2, #0]
  return recvd;
 8012842:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012844:	4618      	mov	r0, r3
 8012846:	3730      	adds	r7, #48	; 0x30
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	0801bff4 	.word	0x0801bff4
 8012850:	0801c0d4 	.word	0x0801c0d4
 8012854:	0801c030 	.word	0x0801c030
 8012858:	0801c0e4 	.word	0x0801c0e4
 801285c:	20016f68 	.word	0x20016f68
 8012860:	0801c108 	.word	0x0801c108
 8012864:	0801c114 	.word	0x0801c114
 8012868:	0801c13c 	.word	0x0801c13c

0801286c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 801286c:	b590      	push	{r4, r7, lr}
 801286e:	b08b      	sub	sp, #44	; 0x2c
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	603b      	str	r3, [r7, #0]
 8012878:	4613      	mov	r3, r2
 801287a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d10b      	bne.n	801289e <lwip_sock_make_addr+0x32>
 8012886:	4b32      	ldr	r3, [pc, #200]	; (8012950 <lwip_sock_make_addr+0xe4>)
 8012888:	f240 4207 	movw	r2, #1031	; 0x407
 801288c:	4931      	ldr	r1, [pc, #196]	; (8012954 <lwip_sock_make_addr+0xe8>)
 801288e:	4832      	ldr	r0, [pc, #200]	; (8012958 <lwip_sock_make_addr+0xec>)
 8012890:	f7ee fd4e 	bl	8001330 <iprintf>
 8012894:	2000      	movs	r0, #0
 8012896:	f005 fdef 	bl	8018478 <fflush>
 801289a:	f005 fd33 	bl	8018304 <abort>
  LWIP_ASSERT("from != NULL", from != NULL);
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10b      	bne.n	80128bc <lwip_sock_make_addr+0x50>
 80128a4:	4b2a      	ldr	r3, [pc, #168]	; (8012950 <lwip_sock_make_addr+0xe4>)
 80128a6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80128aa:	492c      	ldr	r1, [pc, #176]	; (801295c <lwip_sock_make_addr+0xf0>)
 80128ac:	482a      	ldr	r0, [pc, #168]	; (8012958 <lwip_sock_make_addr+0xec>)
 80128ae:	f7ee fd3f 	bl	8001330 <iprintf>
 80128b2:	2000      	movs	r0, #0
 80128b4:	f005 fde0 	bl	8018478 <fflush>
 80128b8:	f005 fd24 	bl	8018304 <abort>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 80128bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10b      	bne.n	80128da <lwip_sock_make_addr+0x6e>
 80128c2:	4b23      	ldr	r3, [pc, #140]	; (8012950 <lwip_sock_make_addr+0xe4>)
 80128c4:	f240 4209 	movw	r2, #1033	; 0x409
 80128c8:	4925      	ldr	r1, [pc, #148]	; (8012960 <lwip_sock_make_addr+0xf4>)
 80128ca:	4823      	ldr	r0, [pc, #140]	; (8012958 <lwip_sock_make_addr+0xec>)
 80128cc:	f7ee fd30 	bl	8001330 <iprintf>
 80128d0:	2000      	movs	r0, #0
 80128d2:	f005 fdd1 	bl	8018478 <fflush>
 80128d6:	f005 fd15 	bl	8018304 <abort>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 80128da:	f107 0314 	add.w	r3, r7, #20
 80128de:	2210      	movs	r2, #16
 80128e0:	701a      	strb	r2, [r3, #0]
 80128e2:	f107 0314 	add.w	r3, r7, #20
 80128e6:	2202      	movs	r2, #2
 80128e8:	705a      	strb	r2, [r3, #1]
 80128ea:	f107 0414 	add.w	r4, r7, #20
 80128ee:	88fb      	ldrh	r3, [r7, #6]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7f3 f9ab 	bl	8005c4c <lwip_htons>
 80128f6:	4603      	mov	r3, r0
 80128f8:	8063      	strh	r3, [r4, #2]
 80128fa:	f107 0314 	add.w	r3, r7, #20
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	6812      	ldr	r2, [r2, #0]
 8012902:	605a      	str	r2, [r3, #4]
 8012904:	f107 0314 	add.w	r3, r7, #20
 8012908:	3308      	adds	r3, #8
 801290a:	2208      	movs	r2, #8
 801290c:	2100      	movs	r1, #0
 801290e:	4618      	mov	r0, r3
 8012910:	f005 fecc 	bl	80186ac <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8012914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	7d3a      	ldrb	r2, [r7, #20]
 801291a:	4293      	cmp	r3, r2
 801291c:	d202      	bcs.n	8012924 <lwip_sock_make_addr+0xb8>
    truncated = 1;
 801291e:	2301      	movs	r3, #1
 8012920:	627b      	str	r3, [r7, #36]	; 0x24
 8012922:	e008      	b.n	8012936 <lwip_sock_make_addr+0xca>
  } else if (*fromlen > saddr.sa.sa_len) {
 8012924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	7d3a      	ldrb	r2, [r7, #20]
 801292a:	4293      	cmp	r3, r2
 801292c:	d903      	bls.n	8012936 <lwip_sock_make_addr+0xca>
    *fromlen = saddr.sa.sa_len;
 801292e:	7d3b      	ldrb	r3, [r7, #20]
 8012930:	461a      	mov	r2, r3
 8012932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012934:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8012936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	f107 0314 	add.w	r3, r7, #20
 801293e:	4619      	mov	r1, r3
 8012940:	6838      	ldr	r0, [r7, #0]
 8012942:	f005 fea8 	bl	8018696 <memcpy>
  return truncated;
 8012946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012948:	4618      	mov	r0, r3
 801294a:	372c      	adds	r7, #44	; 0x2c
 801294c:	46bd      	mov	sp, r7
 801294e:	bd90      	pop	{r4, r7, pc}
 8012950:	0801bff4 	.word	0x0801bff4
 8012954:	0801c14c 	.word	0x0801c14c
 8012958:	0801c030 	.word	0x0801c030
 801295c:	0801c160 	.word	0x0801c160
 8012960:	0801c170 	.word	0x0801c170

08012964 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b088      	sub	sp, #32
 8012968:	af02      	add	r7, sp, #8
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
 8012970:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <lwip_recv_tcp_from+0x18>
    return 0;
 8012978:	2300      	movs	r3, #0
 801297a:	e021      	b.n	80129c0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d01d      	beq.n	80129be <lwip_recv_tcp_from+0x5a>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d01a      	beq.n	80129be <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6818      	ldr	r0, [r3, #0]
 801298c:	f107 0216 	add.w	r2, r7, #22
 8012990:	f107 0110 	add.w	r1, r7, #16
 8012994:	2300      	movs	r3, #0
 8012996:	f7fd f849 	bl	800fa2c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00e      	beq.n	80129be <lwip_recv_tcp_from+0x5a>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00b      	beq.n	80129be <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	6818      	ldr	r0, [r3, #0]
 80129aa:	8afa      	ldrh	r2, [r7, #22]
 80129ac:	f107 0110 	add.w	r1, r7, #16
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	9300      	str	r3, [sp, #0]
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	f7ff ff59 	bl	801286c <lwip_sock_make_addr>
 80129ba:	4603      	mov	r3, r0
 80129bc:	e000      	b.n	80129c0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 80129be:	2300      	movs	r3, #0
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3718      	adds	r7, #24
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b08d      	sub	sp, #52	; 0x34
 80129cc:	af02      	add	r7, sp, #8
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
 80129d4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d10f      	bne.n	80129fe <lwip_recvfrom_udp_raw+0x36>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	dd0b      	ble.n	80129fe <lwip_recvfrom_udp_raw+0x36>
 80129e6:	4b61      	ldr	r3, [pc, #388]	; (8012b6c <lwip_recvfrom_udp_raw+0x1a4>)
 80129e8:	f240 4249 	movw	r2, #1097	; 0x449
 80129ec:	4960      	ldr	r1, [pc, #384]	; (8012b70 <lwip_recvfrom_udp_raw+0x1a8>)
 80129ee:	4861      	ldr	r0, [pc, #388]	; (8012b74 <lwip_recvfrom_udp_raw+0x1ac>)
 80129f0:	f7ee fc9e 	bl	8001330 <iprintf>
 80129f4:	2000      	movs	r0, #0
 80129f6:	f005 fd3f 	bl	8018478 <fflush>
 80129fa:	f005 fc83 	bl	8018304 <abort>

  if (flags & MSG_DONTWAIT) {
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	f003 0308 	and.w	r3, r3, #8
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d003      	beq.n	8012a10 <lwip_recvfrom_udp_raw+0x48>
    apiflags = NETCONN_DONTBLOCK;
 8012a08:	2304      	movs	r3, #4
 8012a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a0e:	e002      	b.n	8012a16 <lwip_recvfrom_udp_raw+0x4e>
  } else {
    apiflags = 0;
 8012a10:	2300      	movs	r3, #0
 8012a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d123      	bne.n	8012a6a <lwip_recvfrom_udp_raw+0xa2>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012a2a:	f107 0110 	add.w	r1, r7, #16
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7fd fb30 	bl	8010094 <netconn_recv_udp_raw_netbuf_flags>
 8012a34:	4603      	mov	r3, r0
 8012a36:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8012a38:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d002      	beq.n	8012a46 <lwip_recvfrom_udp_raw+0x7e>
      return err;
 8012a40:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012a44:	e08e      	b.n	8012b64 <lwip_recvfrom_udp_raw+0x19c>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d10b      	bne.n	8012a64 <lwip_recvfrom_udp_raw+0x9c>
 8012a4c:	4b47      	ldr	r3, [pc, #284]	; (8012b6c <lwip_recvfrom_udp_raw+0x1a4>)
 8012a4e:	f240 425e 	movw	r2, #1118	; 0x45e
 8012a52:	4949      	ldr	r1, [pc, #292]	; (8012b78 <lwip_recvfrom_udp_raw+0x1b0>)
 8012a54:	4847      	ldr	r0, [pc, #284]	; (8012b74 <lwip_recvfrom_udp_raw+0x1ac>)
 8012a56:	f7ee fc6b 	bl	8001330 <iprintf>
 8012a5a:	2000      	movs	r0, #0
 8012a5c:	f005 fd0c 	bl	8018478 <fflush>
 8012a60:	f005 fc50 	bl	8018304 <abort>
    sock->lastdata.netbuf = buf;
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	891b      	ldrh	r3, [r3, #8]
 8012a70:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8012a76:	2300      	movs	r3, #0
 8012a78:	61fb      	str	r3, [r7, #28]
 8012a7a:	e029      	b.n	8012ad0 <lwip_recvfrom_udp_raw+0x108>
    u16_t len_left = (u16_t)(buflen - copied);
 8012a7c:	8b3a      	ldrh	r2, [r7, #24]
 8012a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	689a      	ldr	r2, [r3, #8]
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	00db      	lsls	r3, r3, #3
 8012a8c:	4413      	add	r3, r2
 8012a8e:	685a      	ldr	r2, [r3, #4]
 8012a90:	8afb      	ldrh	r3, [r7, #22]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d902      	bls.n	8012a9c <lwip_recvfrom_udp_raw+0xd4>
      copylen = len_left;
 8012a96:	8afb      	ldrh	r3, [r7, #22]
 8012a98:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012a9a:	e006      	b.n	8012aaa <lwip_recvfrom_udp_raw+0xe2>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	689a      	ldr	r2, [r3, #8]
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	00db      	lsls	r3, r3, #3
 8012aa4:	4413      	add	r3, r2
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	6818      	ldr	r0, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	689a      	ldr	r2, [r3, #8]
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	00db      	lsls	r3, r3, #3
 8012ab6:	4413      	add	r3, r2
 8012ab8:	6819      	ldr	r1, [r3, #0]
 8012aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012abc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012abe:	f7f5 fa4f 	bl	8007f60 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8012ac2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ac6:	4413      	add	r3, r2
 8012ac8:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	3301      	adds	r3, #1
 8012ace:	61fb      	str	r3, [r7, #28]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	68da      	ldr	r2, [r3, #12]
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	dd03      	ble.n	8012ae2 <lwip_recvfrom_udp_raw+0x11a>
 8012ada:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012adc:	8b3b      	ldrh	r3, [r7, #24]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d3cc      	bcc.n	8012a7c <lwip_recvfrom_udp_raw+0xb4>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d01a      	beq.n	8012b20 <lwip_recvfrom_udp_raw+0x158>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d016      	beq.n	8012b20 <lwip_recvfrom_udp_raw+0x158>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d012      	beq.n	8012b20 <lwip_recvfrom_udp_raw+0x158>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d00e      	beq.n	8012b20 <lwip_recvfrom_udp_raw+0x158>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	6818      	ldr	r0, [r3, #0]
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	f103 0108 	add.w	r1, r3, #8
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	3304      	adds	r3, #4
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	4623      	mov	r3, r4
 8012b1c:	f7ff fea6 	bl	801286c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2200      	movs	r2, #0
 8012b24:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	691b      	ldr	r3, [r3, #16]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d007      	beq.n	8012b3e <lwip_recvfrom_udp_raw+0x176>
    u8_t wrote_msg = 0;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8012b32:	7d7b      	ldrb	r3, [r7, #21]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d102      	bne.n	8012b3e <lwip_recvfrom_udp_raw+0x176>
      msg->msg_controllen = 0;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <lwip_recvfrom_udp_raw+0x18e>
    sock->lastdata.netbuf = NULL;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff f9c3 	bl	8011edc <netbuf_delete>
  }
  if (datagram_len) {
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <lwip_recvfrom_udp_raw+0x19a>
    *datagram_len = buflen;
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	8b3a      	ldrh	r2, [r7, #24]
 8012b60:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8012b62:	2300      	movs	r3, #0
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	372c      	adds	r7, #44	; 0x2c
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd90      	pop	{r4, r7, pc}
 8012b6c:	0801bff4 	.word	0x0801bff4
 8012b70:	0801c180 	.word	0x0801c180
 8012b74:	0801c030 	.word	0x0801c030
 8012b78:	0801c1ac 	.word	0x0801c1ac

08012b7c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b096      	sub	sp, #88	; 0x58
 8012b80:	af02      	add	r7, sp, #8
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	60b9      	str	r1, [r7, #8]
 8012b86:	607a      	str	r2, [r7, #4]
 8012b88:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8012b8a:	68f8      	ldr	r0, [r7, #12]
 8012b8c:	f7ff fa7c 	bl	8012088 <get_socket>
 8012b90:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 8012b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d102      	bne.n	8012b9e <lwip_recvfrom+0x22>
    return -1;
 8012b98:	f04f 33ff 	mov.w	r3, #4294967295
 8012b9c:	e070      	b.n	8012c80 <lwip_recvfrom+0x104>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8012b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ba8:	2b10      	cmp	r3, #16
 8012baa:	d112      	bne.n	8012bd2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	68b9      	ldr	r1, [r7, #8]
 8012bb2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012bb4:	f7ff fd34 	bl	8012620 <lwip_recv_tcp>
 8012bb8:	64b8      	str	r0, [r7, #72]	; 0x48
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8012bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bbc:	9301      	str	r3, [sp, #4]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	9300      	str	r3, [sp, #0]
 8012bc2:	4b31      	ldr	r3, [pc, #196]	; (8012c88 <lwip_recvfrom+0x10c>)
 8012bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012bc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012bc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012bca:	f7ff fecb 	bl	8012964 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8012bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bd0:	e056      	b.n	8012c80 <lwip_recvfrom+0x104>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 8012bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012bee:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8012bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012bf6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8012bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d002      	beq.n	8012c04 <lwip_recvfrom+0x88>
 8012bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	e000      	b.n	8012c06 <lwip_recvfrom+0x8a>
 8012c04:	2300      	movs	r3, #0
 8012c06:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8012c08:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8012c0c:	f107 0214 	add.w	r2, r7, #20
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	460b      	mov	r3, r1
 8012c16:	6839      	ldr	r1, [r7, #0]
 8012c18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012c1a:	f7ff fed5 	bl	80129c8 <lwip_recvfrom_udp_raw>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (err != ERR_OK) {
 8012c24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d00e      	beq.n	8012c4a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8012c2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7ff f935 	bl	8011ea0 <err_to_errno>
 8012c36:	6438      	str	r0, [r7, #64]	; 0x40
 8012c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d002      	beq.n	8012c44 <lwip_recvfrom+0xc8>
 8012c3e:	4a13      	ldr	r2, [pc, #76]	; (8012c8c <lwip_recvfrom+0x110>)
 8012c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c42:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8012c44:	f04f 33ff 	mov.w	r3, #4294967295
 8012c48:	e01a      	b.n	8012c80 <lwip_recvfrom+0x104>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8012c4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4293      	cmp	r3, r2
 8012c52:	bf28      	it	cs
 8012c54:	4613      	movcs	r3, r2
 8012c56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	bf28      	it	cs
 8012c5e:	4613      	movcs	r3, r2
 8012c60:	64bb      	str	r3, [r7, #72]	; 0x48
    if (fromlen) {
 8012c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d002      	beq.n	8012c6e <lwip_recvfrom+0xf2>
      *fromlen = msg.msg_namelen;
 8012c68:	69ba      	ldr	r2, [r7, #24]
 8012c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c6c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8012c6e:	2300      	movs	r3, #0
 8012c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d002      	beq.n	8012c7e <lwip_recvfrom+0x102>
 8012c78:	4a04      	ldr	r2, [pc, #16]	; (8012c8c <lwip_recvfrom+0x110>)
 8012c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8012c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3750      	adds	r7, #80	; 0x50
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	0801c1b8 	.word	0x0801c1b8
 8012c8c:	20016f68 	.word	0x20016f68

08012c90 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b086      	sub	sp, #24
 8012c94:	af02      	add	r7, sp, #8
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	9301      	str	r3, [sp, #4]
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	9300      	str	r3, [sp, #0]
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	68b9      	ldr	r1, [r7, #8]
 8012caa:	68f8      	ldr	r0, [r7, #12]
 8012cac:	f7ff ff66 	bl	8012b7c <lwip_recvfrom>
 8012cb0:	4603      	mov	r3, r0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3710      	adds	r7, #16
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
	...

08012cbc <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b08a      	sub	sp, #40	; 0x28
 8012cc0:	af02      	add	r7, sp, #8
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7ff f9dc 	bl	8012088 <get_socket>
 8012cd0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d102      	bne.n	8012cde <lwip_send+0x22>
    return -1;
 8012cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cdc:	e048      	b.n	8012d70 <lwip_send+0xb4>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ce8:	2b10      	cmp	r3, #16
 8012cea:	d00b      	beq.n	8012d04 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8012cec:	2300      	movs	r3, #0
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	68b9      	ldr	r1, [r7, #8]
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f000 f83e 	bl	8012d7c <lwip_sendto>
 8012d00:	4603      	mov	r3, r0
 8012d02:	e035      	b.n	8012d70 <lwip_send+0xb4>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d001      	beq.n	8012d12 <lwip_send+0x56>
 8012d0e:	2203      	movs	r2, #3
 8012d10:	e000      	b.n	8012d14 <lwip_send+0x58>
 8012d12:	2201      	movs	r2, #1
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	f003 0308 	and.w	r3, r3, #8
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <lwip_send+0x66>
 8012d1e:	2304      	movs	r3, #4
 8012d20:	e000      	b.n	8012d24 <lwip_send+0x68>
 8012d22:	2300      	movs	r3, #0
 8012d24:	4313      	orrs	r3, r2
 8012d26:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8012d28:	76fb      	strb	r3, [r7, #27]
  written = 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	6818      	ldr	r0, [r3, #0]
 8012d32:	7efa      	ldrb	r2, [r7, #27]
 8012d34:	f107 0310 	add.w	r3, r7, #16
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	68b9      	ldr	r1, [r7, #8]
 8012d40:	f7fd fa06 	bl	8010150 <netconn_write_partly>
 8012d44:	4603      	mov	r3, r0
 8012d46:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8012d48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7ff f8a7 	bl	8011ea0 <err_to_errno>
 8012d52:	6178      	str	r0, [r7, #20]
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d002      	beq.n	8012d60 <lwip_send+0xa4>
 8012d5a:	4a07      	ldr	r2, [pc, #28]	; (8012d78 <lwip_send+0xbc>)
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8012d60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d101      	bne.n	8012d6c <lwip_send+0xb0>
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	e001      	b.n	8012d70 <lwip_send+0xb4>
 8012d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3720      	adds	r7, #32
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	20016f68 	.word	0x20016f68

08012d7c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b08e      	sub	sp, #56	; 0x38
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
 8012d88:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f7ff f97c 	bl	8012088 <get_socket>
 8012d90:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8012d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d102      	bne.n	8012d9e <lwip_sendto+0x22>
    return -1;
 8012d98:	f04f 33ff 	mov.w	r3, #4294967295
 8012d9c:	e08a      	b.n	8012eb4 <lwip_sendto+0x138>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8012d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012da8:	2b10      	cmp	r3, #16
 8012daa:	d107      	bne.n	8012dbc <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	68b9      	ldr	r1, [r7, #8]
 8012db2:	68f8      	ldr	r0, [r7, #12]
 8012db4:	f7ff ff82 	bl	8012cbc <lwip_send>
 8012db8:	4603      	mov	r3, r0
 8012dba:	e07b      	b.n	8012eb4 <lwip_sendto+0x138>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dc2:	d30a      	bcc.n	8012dda <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8012dc4:	235a      	movs	r3, #90	; 0x5a
 8012dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d002      	beq.n	8012dd4 <lwip_sendto+0x58>
 8012dce:	4a3b      	ldr	r2, [pc, #236]	; (8012ebc <lwip_sendto+0x140>)
 8012dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd8:	e06c      	b.n	8012eb4 <lwip_sendto+0x138>
  }
  short_size = (u16_t)size;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	857b      	strh	r3, [r7, #42]	; 0x2a
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8012dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d102      	bne.n	8012dea <lwip_sendto+0x6e>
 8012de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d01a      	beq.n	8012e20 <lwip_sendto+0xa4>
 8012dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dec:	2b10      	cmp	r3, #16
 8012dee:	d10b      	bne.n	8012e08 <lwip_sendto+0x8c>
 8012df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d008      	beq.n	8012e08 <lwip_sendto+0x8c>
 8012df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012df8:	785b      	ldrb	r3, [r3, #1]
 8012dfa:	2b02      	cmp	r3, #2
 8012dfc:	d104      	bne.n	8012e08 <lwip_sendto+0x8c>
 8012dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e00:	f003 0303 	and.w	r3, r3, #3
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d00b      	beq.n	8012e20 <lwip_sendto+0xa4>
 8012e08:	4b2d      	ldr	r3, [pc, #180]	; (8012ec0 <lwip_sendto+0x144>)
 8012e0a:	f240 6255 	movw	r2, #1621	; 0x655
 8012e0e:	492d      	ldr	r1, [pc, #180]	; (8012ec4 <lwip_sendto+0x148>)
 8012e10:	482d      	ldr	r0, [pc, #180]	; (8012ec8 <lwip_sendto+0x14c>)
 8012e12:	f7ee fa8d 	bl	8001330 <iprintf>
 8012e16:	2000      	movs	r0, #0
 8012e18:	f005 fb2e 	bl	8018478 <fflush>
 8012e1c:	f005 fa72 	bl	8018304 <abort>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8012e20:	2300      	movs	r3, #0
 8012e22:	61bb      	str	r3, [r7, #24]
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8012e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d00a      	beq.n	8012e44 <lwip_sendto+0xc8>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8012e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	61fb      	str	r3, [r7, #28]
 8012e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e36:	885b      	ldrh	r3, [r3, #2]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f2 ff07 	bl	8005c4c <lwip_htons>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8012e42:	e003      	b.n	8012e4c <lwip_sendto+0xd0>
  } else {
    remote_port = 0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8012e48:	2300      	movs	r3, #0
 8012e4a:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 8012e4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012e4e:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8012e50:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012e52:	f107 0314 	add.w	r3, r7, #20
 8012e56:	68b9      	ldr	r1, [r7, #8]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7ff f88b 	bl	8011f74 <netbuf_ref>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8012e64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d10a      	bne.n	8012e82 <lwip_sendto+0x106>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8012e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f107 0214 	add.w	r2, r7, #20
 8012e74:	4611      	mov	r1, r2
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fd f93a 	bl	80100f0 <netconn_send>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8012e82:	f107 0314 	add.w	r3, r7, #20
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff f848 	bl	8011f1c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8012e8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7ff f805 	bl	8011ea0 <err_to_errno>
 8012e96:	6278      	str	r0, [r7, #36]	; 0x24
 8012e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <lwip_sendto+0x128>
 8012e9e:	4a07      	ldr	r2, [pc, #28]	; (8012ebc <lwip_sendto+0x140>)
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8012ea4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d101      	bne.n	8012eb0 <lwip_sendto+0x134>
 8012eac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012eae:	e001      	b.n	8012eb4 <lwip_sendto+0x138>
 8012eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3738      	adds	r7, #56	; 0x38
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	20016f68 	.word	0x20016f68
 8012ec0:	0801bff4 	.word	0x0801bff4
 8012ec4:	0801c2bc 	.word	0x0801c2bc
 8012ec8:	0801c030 	.word	0x0801c030

08012ecc <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b086      	sub	sp, #24
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	2b02      	cmp	r3, #2
 8012edc:	d00d      	beq.n	8012efa <lwip_socket+0x2e>
 8012ede:	2b03      	cmp	r3, #3
 8012ee0:	d002      	beq.n	8012ee8 <lwip_socket+0x1c>
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d016      	beq.n	8012f14 <lwip_socket+0x48>
 8012ee6:	e01c      	b.n	8012f22 <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	4a21      	ldr	r2, [pc, #132]	; (8012f74 <lwip_socket+0xa8>)
 8012eee:	4619      	mov	r1, r3
 8012ef0:	2040      	movs	r0, #64	; 0x40
 8012ef2:	f7fc fccd 	bl	800f890 <netconn_new_with_proto_and_callback>
 8012ef6:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8012ef8:	e019      	b.n	8012f2e <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b88      	cmp	r3, #136	; 0x88
 8012efe:	d101      	bne.n	8012f04 <lwip_socket+0x38>
 8012f00:	2321      	movs	r3, #33	; 0x21
 8012f02:	e000      	b.n	8012f06 <lwip_socket+0x3a>
 8012f04:	2320      	movs	r3, #32
 8012f06:	4a1b      	ldr	r2, [pc, #108]	; (8012f74 <lwip_socket+0xa8>)
 8012f08:	2100      	movs	r1, #0
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fc fcc0 	bl	800f890 <netconn_new_with_proto_and_callback>
 8012f10:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012f12:	e00c      	b.n	8012f2e <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8012f14:	4a17      	ldr	r2, [pc, #92]	; (8012f74 <lwip_socket+0xa8>)
 8012f16:	2100      	movs	r1, #0
 8012f18:	2010      	movs	r0, #16
 8012f1a:	f7fc fcb9 	bl	800f890 <netconn_new_with_proto_and_callback>
 8012f1e:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8012f20:	e005      	b.n	8012f2e <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8012f22:	4b15      	ldr	r3, [pc, #84]	; (8012f78 <lwip_socket+0xac>)
 8012f24:	2216      	movs	r2, #22
 8012f26:	601a      	str	r2, [r3, #0]
      return -1;
 8012f28:	f04f 33ff 	mov.w	r3, #4294967295
 8012f2c:	e01e      	b.n	8012f6c <lwip_socket+0xa0>
  }

  if (!conn) {
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d105      	bne.n	8012f40 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8012f34:	4b10      	ldr	r3, [pc, #64]	; (8012f78 <lwip_socket+0xac>)
 8012f36:	2269      	movs	r2, #105	; 0x69
 8012f38:	601a      	str	r2, [r3, #0]
    return -1;
 8012f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f3e:	e015      	b.n	8012f6c <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8012f40:	2100      	movs	r1, #0
 8012f42:	6978      	ldr	r0, [r7, #20]
 8012f44:	f7ff f8b8 	bl	80120b8 <alloc_socket>
 8012f48:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f50:	d108      	bne.n	8012f64 <lwip_socket+0x98>
    netconn_delete(conn);
 8012f52:	6978      	ldr	r0, [r7, #20]
 8012f54:	f7fc fd4e 	bl	800f9f4 <netconn_delete>
    set_errno(ENFILE);
 8012f58:	4b07      	ldr	r3, [pc, #28]	; (8012f78 <lwip_socket+0xac>)
 8012f5a:	2217      	movs	r2, #23
 8012f5c:	601a      	str	r2, [r3, #0]
    return -1;
 8012f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f62:	e003      	b.n	8012f6c <lwip_socket+0xa0>
  }
  conn->socket = i;
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	693a      	ldr	r2, [r7, #16]
 8012f68:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8012f6a:	693b      	ldr	r3, [r7, #16]
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3718      	adds	r7, #24
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	08013025 	.word	0x08013025
 8012f78:	20016f68 	.word	0x20016f68

08012f7c <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8012f88:	2300      	movs	r3, #0
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	68b9      	ldr	r1, [r7, #8]
 8012f8e:	68f8      	ldr	r0, [r7, #12]
 8012f90:	f7ff fe94 	bl	8012cbc <lwip_send>
 8012f94:	4603      	mov	r3, r0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3710      	adds	r7, #16
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}

08012f9e <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8012f9e:	b480      	push	{r7}
 8012fa0:	b087      	sub	sp, #28
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	60f8      	str	r0, [r7, #12]
 8012fa6:	60b9      	str	r1, [r7, #8]
 8012fa8:	607a      	str	r2, [r7, #4]
 8012faa:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8012fac:	2300      	movs	r3, #0
 8012fae:	617b      	str	r3, [r7, #20]
 8012fb0:	e02c      	b.n	801300c <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	695a      	ldr	r2, [r3, #20]
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	00db      	lsls	r3, r3, #3
 8012fba:	4413      	add	r3, r2
 8012fbc:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	681a      	ldr	r2, [r3, #0]
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d11e      	bne.n	8013006 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d009      	beq.n	8012fe2 <lwip_poll_should_wake+0x44>
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	f003 0301 	and.w	r3, r3, #1
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d001      	beq.n	8012fe2 <lwip_poll_should_wake+0x44>
        return 1;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e01a      	b.n	8013018 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d009      	beq.n	8012ffc <lwip_poll_should_wake+0x5e>
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	f003 0302 	and.w	r3, r3, #2
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d001      	beq.n	8012ffc <lwip_poll_should_wake+0x5e>
        return 1;
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	e00d      	b.n	8013018 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8012ffc:	6a3b      	ldr	r3, [r7, #32]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8013002:	2301      	movs	r3, #1
 8013004:	e008      	b.n	8013018 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	3301      	adds	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	699a      	ldr	r2, [r3, #24]
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	429a      	cmp	r2, r3
 8013014:	d8cd      	bhi.n	8012fb2 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	371c      	adds	r7, #28
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b08a      	sub	sp, #40	; 0x28
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	70fb      	strb	r3, [r7, #3]
 8013030:	4613      	mov	r3, r2
 8013032:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80a8 	beq.w	801318c <event_callback+0x168>
    s = conn->socket;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	699b      	ldr	r3, [r3, #24]
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8013042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013044:	2b00      	cmp	r3, #0
 8013046:	da18      	bge.n	801307a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8013048:	f000 fb08 	bl	801365c <sys_arch_protect>
 801304c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	da0b      	bge.n	801306e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8013056:	78fb      	ldrb	r3, [r7, #3]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d104      	bne.n	8013066 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	699b      	ldr	r3, [r3, #24]
 8013060:	1e5a      	subs	r2, r3, #1
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8013066:	69f8      	ldr	r0, [r7, #28]
 8013068:	f000 faff 	bl	801366a <sys_arch_unprotect>
        return;
 801306c:	e091      	b.n	8013192 <event_callback+0x16e>
      }
      s = conn->socket;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8013074:	69f8      	ldr	r0, [r7, #28]
 8013076:	f000 faf8 	bl	801366a <sys_arch_unprotect>
    }

    sock = get_socket(s);
 801307a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801307c:	f7ff f804 	bl	8012088 <get_socket>
 8013080:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	2b00      	cmp	r3, #0
 8013086:	f000 8083 	beq.w	8013190 <event_callback+0x16c>
    }
  } else {
    return;
  }

  check_waiters = 1;
 801308a:	2301      	movs	r3, #1
 801308c:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 801308e:	f000 fae5 	bl	801365c <sys_arch_protect>
 8013092:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8013094:	78fb      	ldrb	r3, [r7, #3]
 8013096:	2b04      	cmp	r3, #4
 8013098:	d83d      	bhi.n	8013116 <event_callback+0xf2>
 801309a:	a201      	add	r2, pc, #4	; (adr r2, 80130a0 <event_callback+0x7c>)
 801309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a0:	080130b5 	.word	0x080130b5
 80130a4:	080130d7 	.word	0x080130d7
 80130a8:	080130ef 	.word	0x080130ef
 80130ac:	08013103 	.word	0x08013103
 80130b0:	0801310f 	.word	0x0801310f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	3301      	adds	r3, #1
 80130be:	b29b      	uxth	r3, r3
 80130c0:	b21a      	sxth	r2, r3
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	dd2e      	ble.n	801312e <event_callback+0x10a>
        check_waiters = 0;
 80130d0:	2300      	movs	r3, #0
 80130d2:	623b      	str	r3, [r7, #32]
      }
      break;
 80130d4:	e02b      	b.n	801312e <event_callback+0x10a>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80130dc:	b29b      	uxth	r3, r3
 80130de:	3b01      	subs	r3, #1
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	b21a      	sxth	r2, r3
 80130e4:	69bb      	ldr	r3, [r7, #24]
 80130e6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80130e8:	2300      	movs	r3, #0
 80130ea:	623b      	str	r3, [r7, #32]
      break;
 80130ec:	e020      	b.n	8013130 <event_callback+0x10c>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80130ee:	69bb      	ldr	r3, [r7, #24]
 80130f0:	895b      	ldrh	r3, [r3, #10]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d001      	beq.n	80130fa <event_callback+0xd6>
        check_waiters = 0;
 80130f6:	2300      	movs	r3, #0
 80130f8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80130fa:	69bb      	ldr	r3, [r7, #24]
 80130fc:	2201      	movs	r2, #1
 80130fe:	815a      	strh	r2, [r3, #10]
      break;
 8013100:	e016      	b.n	8013130 <event_callback+0x10c>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	2200      	movs	r2, #0
 8013106:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8013108:	2300      	movs	r3, #0
 801310a:	623b      	str	r3, [r7, #32]
      break;
 801310c:	e010      	b.n	8013130 <event_callback+0x10c>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 801310e:	69bb      	ldr	r3, [r7, #24]
 8013110:	2201      	movs	r2, #1
 8013112:	819a      	strh	r2, [r3, #12]
      break;
 8013114:	e00c      	b.n	8013130 <event_callback+0x10c>
    default:
      LWIP_ASSERT("unknown event", 0);
 8013116:	4b20      	ldr	r3, [pc, #128]	; (8013198 <event_callback+0x174>)
 8013118:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 801311c:	491f      	ldr	r1, [pc, #124]	; (801319c <event_callback+0x178>)
 801311e:	4820      	ldr	r0, [pc, #128]	; (80131a0 <event_callback+0x17c>)
 8013120:	f7ee f906 	bl	8001330 <iprintf>
 8013124:	2000      	movs	r0, #0
 8013126:	f005 f9a7 	bl	8018478 <fflush>
 801312a:	f005 f8eb 	bl	8018304 <abort>
      break;
 801312e:	bf00      	nop
      break;
  }

  if (sock->select_waiting && check_waiters) {
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	7b9b      	ldrb	r3, [r3, #14]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d025      	beq.n	8013184 <event_callback+0x160>
 8013138:	6a3b      	ldr	r3, [r7, #32]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d022      	beq.n	8013184 <event_callback+0x160>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013144:	2b00      	cmp	r3, #0
 8013146:	bfcc      	ite	gt
 8013148:	2301      	movgt	r3, #1
 801314a:	2300      	movle	r3, #0
 801314c:	b2db      	uxtb	r3, r3
 801314e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	895b      	ldrh	r3, [r3, #10]
 8013154:	2b00      	cmp	r3, #0
 8013156:	bf14      	ite	ne
 8013158:	2301      	movne	r3, #1
 801315a:	2300      	moveq	r3, #0
 801315c:	b2db      	uxtb	r3, r3
 801315e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	899b      	ldrh	r3, [r3, #12]
 8013164:	2b00      	cmp	r3, #0
 8013166:	bf14      	ite	ne
 8013168:	2301      	movne	r3, #1
 801316a:	2300      	moveq	r3, #0
 801316c:	b2db      	uxtb	r3, r3
 801316e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8013170:	69f8      	ldr	r0, [r7, #28]
 8013172:	f000 fa7a 	bl	801366a <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	693a      	ldr	r2, [r7, #16]
 801317a:	6979      	ldr	r1, [r7, #20]
 801317c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801317e:	f000 f811 	bl	80131a4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8013182:	e006      	b.n	8013192 <event_callback+0x16e>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8013184:	69f8      	ldr	r0, [r7, #28]
 8013186:	f000 fa70 	bl	801366a <sys_arch_unprotect>
 801318a:	e002      	b.n	8013192 <event_callback+0x16e>
    return;
 801318c:	bf00      	nop
 801318e:	e000      	b.n	8013192 <event_callback+0x16e>
      return;
 8013190:	bf00      	nop
  }
  done_socket(sock);
}
 8013192:	3728      	adds	r7, #40	; 0x28
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	0801bff4 	.word	0x0801bff4
 801319c:	0801c358 	.word	0x0801c358
 80131a0:	0801c030 	.word	0x0801c030

080131a4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b088      	sub	sp, #32
 80131a8:	af02      	add	r7, sp, #8
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	607a      	str	r2, [r7, #4]
 80131b0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80131b2:	4b3d      	ldr	r3, [pc, #244]	; (80132a8 <select_check_waiters+0x104>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	617b      	str	r3, [r7, #20]
 80131b8:	e06f      	b.n	801329a <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	69db      	ldr	r3, [r3, #28]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d168      	bne.n	8013294 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	695b      	ldr	r3, [r3, #20]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d009      	beq.n	80131e2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	9300      	str	r3, [sp, #0]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	68ba      	ldr	r2, [r7, #8]
 80131d6:	68f9      	ldr	r1, [r7, #12]
 80131d8:	6978      	ldr	r0, [r7, #20]
 80131da:	f7ff fee0 	bl	8012f9e <lwip_poll_should_wake>
 80131de:	6138      	str	r0, [r7, #16]
 80131e0:	e04d      	b.n	801327e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d014      	beq.n	8013212 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	689b      	ldr	r3, [r3, #8]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d010      	beq.n	8013212 <select_check_waiters+0x6e>
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	0952      	lsrs	r2, r2, #5
 80131f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	f002 021f 	and.w	r2, r2, #31
 8013202:	2101      	movs	r1, #1
 8013204:	fa01 f202 	lsl.w	r2, r1, r2
 8013208:	4013      	ands	r3, r2
 801320a:	2b00      	cmp	r3, #0
 801320c:	d001      	beq.n	8013212 <select_check_waiters+0x6e>
            do_signal = 1;
 801320e:	2301      	movs	r3, #1
 8013210:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d017      	beq.n	8013248 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d114      	bne.n	8013248 <select_check_waiters+0xa4>
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d010      	beq.n	8013248 <select_check_waiters+0xa4>
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	68fa      	ldr	r2, [r7, #12]
 801322c:	0952      	lsrs	r2, r2, #5
 801322e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	f002 021f 	and.w	r2, r2, #31
 8013238:	2101      	movs	r1, #1
 801323a:	fa01 f202 	lsl.w	r2, r1, r2
 801323e:	4013      	ands	r3, r2
 8013240:	2b00      	cmp	r3, #0
 8013242:	d001      	beq.n	8013248 <select_check_waiters+0xa4>
            do_signal = 1;
 8013244:	2301      	movs	r3, #1
 8013246:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d017      	beq.n	801327e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d114      	bne.n	801327e <select_check_waiters+0xda>
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	691b      	ldr	r3, [r3, #16]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d010      	beq.n	801327e <select_check_waiters+0xda>
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	691b      	ldr	r3, [r3, #16]
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	0952      	lsrs	r2, r2, #5
 8013264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013268:	68fa      	ldr	r2, [r7, #12]
 801326a:	f002 021f 	and.w	r2, r2, #31
 801326e:	2101      	movs	r1, #1
 8013270:	fa01 f202 	lsl.w	r2, r1, r2
 8013274:	4013      	ands	r3, r2
 8013276:	2b00      	cmp	r3, #0
 8013278:	d001      	beq.n	801327e <select_check_waiters+0xda>
            do_signal = 1;
 801327a:	2301      	movs	r3, #1
 801327c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d007      	beq.n	8013294 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2201      	movs	r2, #1
 8013288:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	3320      	adds	r3, #32
 801328e:	4618      	mov	r0, r3
 8013290:	f000 fb48 	bl	8013924 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	617b      	str	r3, [r7, #20]
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d18c      	bne.n	80131ba <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80132a0:	bf00      	nop
 80132a2:	3718      	adds	r7, #24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	20000310 	.word	0x20000310

080132ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80132b6:	f7fb fc75 	bl	800eba4 <sys_timeouts_sleeptime>
 80132ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c2:	d10b      	bne.n	80132dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80132c4:	4813      	ldr	r0, [pc, #76]	; (8013314 <tcpip_timeouts_mbox_fetch+0x68>)
 80132c6:	f000 fa6b 	bl	80137a0 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80132ca:	2200      	movs	r2, #0
 80132cc:	6839      	ldr	r1, [r7, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f000 fcdc 	bl	8013c8c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80132d4:	480f      	ldr	r0, [pc, #60]	; (8013314 <tcpip_timeouts_mbox_fetch+0x68>)
 80132d6:	f000 fa1d 	bl	8013714 <sys_mutex_lock>
    return;
 80132da:	e018      	b.n	801330e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d102      	bne.n	80132e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80132e2:	f7fb fc29 	bl	800eb38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80132e6:	e7e6      	b.n	80132b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80132e8:	480a      	ldr	r0, [pc, #40]	; (8013314 <tcpip_timeouts_mbox_fetch+0x68>)
 80132ea:	f000 fa59 	bl	80137a0 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80132ee:	68fa      	ldr	r2, [r7, #12]
 80132f0:	6839      	ldr	r1, [r7, #0]
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fcca 	bl	8013c8c <sys_arch_mbox_fetch>
 80132f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80132fa:	4806      	ldr	r0, [pc, #24]	; (8013314 <tcpip_timeouts_mbox_fetch+0x68>)
 80132fc:	f000 fa0a 	bl	8013714 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013306:	d102      	bne.n	801330e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013308:	f7fb fc16 	bl	800eb38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801330c:	e7d3      	b.n	80132b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	20016f60 	.word	0x20016f60

08013318 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013320:	4812      	ldr	r0, [pc, #72]	; (801336c <tcpip_thread+0x54>)
 8013322:	f000 f9f7 	bl	8013714 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013326:	4b12      	ldr	r3, [pc, #72]	; (8013370 <tcpip_thread+0x58>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d005      	beq.n	801333a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801332e:	4b10      	ldr	r3, [pc, #64]	; (8013370 <tcpip_thread+0x58>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	4a10      	ldr	r2, [pc, #64]	; (8013374 <tcpip_thread+0x5c>)
 8013334:	6812      	ldr	r2, [r2, #0]
 8013336:	4610      	mov	r0, r2
 8013338:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801333a:	f107 030c 	add.w	r3, r7, #12
 801333e:	4619      	mov	r1, r3
 8013340:	480d      	ldr	r0, [pc, #52]	; (8013378 <tcpip_thread+0x60>)
 8013342:	f7ff ffb3 	bl	80132ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10a      	bne.n	8013362 <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801334c:	4b0b      	ldr	r3, [pc, #44]	; (801337c <tcpip_thread+0x64>)
 801334e:	2291      	movs	r2, #145	; 0x91
 8013350:	490b      	ldr	r1, [pc, #44]	; (8013380 <tcpip_thread+0x68>)
 8013352:	480c      	ldr	r0, [pc, #48]	; (8013384 <tcpip_thread+0x6c>)
 8013354:	f7ed ffec 	bl	8001330 <iprintf>
 8013358:	2000      	movs	r0, #0
 801335a:	f005 f88d 	bl	8018478 <fflush>
 801335e:	f004 ffd1 	bl	8018304 <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	4618      	mov	r0, r3
 8013366:	f000 f80f 	bl	8013388 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801336a:	e7e6      	b.n	801333a <tcpip_thread+0x22>
 801336c:	20016f60 	.word	0x20016f60
 8013370:	20000314 	.word	0x20000314
 8013374:	20000318 	.word	0x20000318
 8013378:	2000031c 	.word	0x2000031c
 801337c:	0801c3ac 	.word	0x0801c3ac
 8013380:	0801c3c4 	.word	0x0801c3c4
 8013384:	0801c3e4 	.word	0x0801c3e4

08013388 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	2b01      	cmp	r3, #1
 8013396:	d018      	beq.n	80133ca <tcpip_thread_handle_msg+0x42>
 8013398:	2b02      	cmp	r3, #2
 801339a:	d021      	beq.n	80133e0 <tcpip_thread_handle_msg+0x58>
 801339c:	2b00      	cmp	r3, #0
 801339e:	d126      	bne.n	80133ee <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	6850      	ldr	r0, [r2, #4]
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	6892      	ldr	r2, [r2, #8]
 80133ac:	4611      	mov	r1, r2
 80133ae:	4798      	blx	r3
 80133b0:	4603      	mov	r3, r0
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d004      	beq.n	80133c0 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7f4 fb90 	bl	8007ae0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80133c0:	6879      	ldr	r1, [r7, #4]
 80133c2:	2009      	movs	r0, #9
 80133c4:	f7f3 fd4e 	bl	8006e64 <memp_free>
      break;
 80133c8:	e01c      	b.n	8013404 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	6892      	ldr	r2, [r2, #8]
 80133d2:	4610      	mov	r0, r2
 80133d4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80133d6:	6879      	ldr	r1, [r7, #4]
 80133d8:	2008      	movs	r0, #8
 80133da:	f7f3 fd43 	bl	8006e64 <memp_free>
      break;
 80133de:	e011      	b.n	8013404 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	6892      	ldr	r2, [r2, #8]
 80133e8:	4610      	mov	r0, r2
 80133ea:	4798      	blx	r3
      break;
 80133ec:	e00a      	b.n	8013404 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80133ee:	4b07      	ldr	r3, [pc, #28]	; (801340c <tcpip_thread_handle_msg+0x84>)
 80133f0:	22cf      	movs	r2, #207	; 0xcf
 80133f2:	4907      	ldr	r1, [pc, #28]	; (8013410 <tcpip_thread_handle_msg+0x88>)
 80133f4:	4807      	ldr	r0, [pc, #28]	; (8013414 <tcpip_thread_handle_msg+0x8c>)
 80133f6:	f7ed ff9b 	bl	8001330 <iprintf>
 80133fa:	2000      	movs	r0, #0
 80133fc:	f005 f83c 	bl	8018478 <fflush>
 8013400:	f004 ff80 	bl	8018304 <abort>
      break;
  }
}
 8013404:	bf00      	nop
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	0801c3ac 	.word	0x0801c3ac
 8013410:	0801c3c4 	.word	0x0801c3c4
 8013414:	0801c3e4 	.word	0x0801c3e4

08013418 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b086      	sub	sp, #24
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013424:	4b1b      	ldr	r3, [pc, #108]	; (8013494 <tcpip_inpkt+0x7c>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d10a      	bne.n	8013442 <tcpip_inpkt+0x2a>
 801342c:	4b1a      	ldr	r3, [pc, #104]	; (8013498 <tcpip_inpkt+0x80>)
 801342e:	22fc      	movs	r2, #252	; 0xfc
 8013430:	491a      	ldr	r1, [pc, #104]	; (801349c <tcpip_inpkt+0x84>)
 8013432:	481b      	ldr	r0, [pc, #108]	; (80134a0 <tcpip_inpkt+0x88>)
 8013434:	f7ed ff7c 	bl	8001330 <iprintf>
 8013438:	2000      	movs	r0, #0
 801343a:	f005 f81d 	bl	8018478 <fflush>
 801343e:	f004 ff61 	bl	8018304 <abort>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013442:	2009      	movs	r0, #9
 8013444:	f7f3 fcc4 	bl	8006dd0 <memp_malloc>
 8013448:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d102      	bne.n	8013456 <tcpip_inpkt+0x3e>
    return ERR_MEM;
 8013450:	f04f 33ff 	mov.w	r3, #4294967295
 8013454:	e01a      	b.n	801348c <tcpip_inpkt+0x74>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2200      	movs	r2, #0
 801345a:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	68fa      	ldr	r2, [r7, #12]
 8013460:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	68ba      	ldr	r2, [r7, #8]
 8013466:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801346e:	6979      	ldr	r1, [r7, #20]
 8013470:	4808      	ldr	r0, [pc, #32]	; (8013494 <tcpip_inpkt+0x7c>)
 8013472:	f000 fbb1 	bl	8013bd8 <sys_mbox_trypost>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d006      	beq.n	801348a <tcpip_inpkt+0x72>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801347c:	6979      	ldr	r1, [r7, #20]
 801347e:	2009      	movs	r0, #9
 8013480:	f7f3 fcf0 	bl	8006e64 <memp_free>
    return ERR_MEM;
 8013484:	f04f 33ff 	mov.w	r3, #4294967295
 8013488:	e000      	b.n	801348c <tcpip_inpkt+0x74>
  }
  return ERR_OK;
 801348a:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801348c:	4618      	mov	r0, r3
 801348e:	3718      	adds	r7, #24
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	2000031c 	.word	0x2000031c
 8013498:	0801c3ac 	.word	0x0801c3ac
 801349c:	0801c40c 	.word	0x0801c40c
 80134a0:	0801c3e4 	.word	0x0801c3e4

080134a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134b4:	f003 0318 	and.w	r3, r3, #24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d006      	beq.n	80134ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80134bc:	4a08      	ldr	r2, [pc, #32]	; (80134e0 <tcpip_input+0x3c>)
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f7ff ffa9 	bl	8013418 <tcpip_inpkt>
 80134c6:	4603      	mov	r3, r0
 80134c8:	e005      	b.n	80134d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80134ca:	4a06      	ldr	r2, [pc, #24]	; (80134e4 <tcpip_input+0x40>)
 80134cc:	6839      	ldr	r1, [r7, #0]
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f7ff ffa2 	bl	8013418 <tcpip_inpkt>
 80134d4:	4603      	mov	r3, r0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3708      	adds	r7, #8
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	080013c5 	.word	0x080013c5
 80134e4:	08004801 	.word	0x08004801

080134e8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80134f2:	4b1b      	ldr	r3, [pc, #108]	; (8013560 <tcpip_try_callback+0x78>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d10b      	bne.n	8013512 <tcpip_try_callback+0x2a>
 80134fa:	4b1a      	ldr	r3, [pc, #104]	; (8013564 <tcpip_try_callback+0x7c>)
 80134fc:	f240 125d 	movw	r2, #349	; 0x15d
 8013500:	4919      	ldr	r1, [pc, #100]	; (8013568 <tcpip_try_callback+0x80>)
 8013502:	481a      	ldr	r0, [pc, #104]	; (801356c <tcpip_try_callback+0x84>)
 8013504:	f7ed ff14 	bl	8001330 <iprintf>
 8013508:	2000      	movs	r0, #0
 801350a:	f004 ffb5 	bl	8018478 <fflush>
 801350e:	f004 fef9 	bl	8018304 <abort>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013512:	2008      	movs	r0, #8
 8013514:	f7f3 fc5c 	bl	8006dd0 <memp_malloc>
 8013518:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d102      	bne.n	8013526 <tcpip_try_callback+0x3e>
    return ERR_MEM;
 8013520:	f04f 33ff 	mov.w	r3, #4294967295
 8013524:	e017      	b.n	8013556 <tcpip_try_callback+0x6e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2201      	movs	r2, #1
 801352a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	683a      	ldr	r2, [r7, #0]
 8013536:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013538:	68f9      	ldr	r1, [r7, #12]
 801353a:	4809      	ldr	r0, [pc, #36]	; (8013560 <tcpip_try_callback+0x78>)
 801353c:	f000 fb4c 	bl	8013bd8 <sys_mbox_trypost>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d006      	beq.n	8013554 <tcpip_try_callback+0x6c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013546:	68f9      	ldr	r1, [r7, #12]
 8013548:	2008      	movs	r0, #8
 801354a:	f7f3 fc8b 	bl	8006e64 <memp_free>
    return ERR_MEM;
 801354e:	f04f 33ff 	mov.w	r3, #4294967295
 8013552:	e000      	b.n	8013556 <tcpip_try_callback+0x6e>
  }
  return ERR_OK;
 8013554:	2300      	movs	r3, #0
}
 8013556:	4618      	mov	r0, r3
 8013558:	3710      	adds	r7, #16
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	2000031c 	.word	0x2000031c
 8013564:	0801c3ac 	.word	0x0801c3ac
 8013568:	0801c40c 	.word	0x0801c40c
 801356c:	0801c3e4 	.word	0x0801c3e4

08013570 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801357c:	4806      	ldr	r0, [pc, #24]	; (8013598 <tcpip_send_msg_wait_sem+0x28>)
 801357e:	f000 f8c9 	bl	8013714 <sys_mutex_lock>
  fn(apimsg);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	68b8      	ldr	r0, [r7, #8]
 8013586:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013588:	4803      	ldr	r0, [pc, #12]	; (8013598 <tcpip_send_msg_wait_sem+0x28>)
 801358a:	f000 f909 	bl	80137a0 <sys_mutex_unlock>
  return ERR_OK;
 801358e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8013590:	4618      	mov	r0, r3
 8013592:	3710      	adds	r7, #16
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	20016f60 	.word	0x20016f60

0801359c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af02      	add	r7, sp, #8
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80135a6:	f7f2 ff06 	bl	80063b6 <lwip_init>

  tcpip_init_done = initfunc;
 80135aa:	4a1b      	ldr	r2, [pc, #108]	; (8013618 <tcpip_init+0x7c>)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80135b0:	4a1a      	ldr	r2, [pc, #104]	; (801361c <tcpip_init+0x80>)
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80135b6:	2100      	movs	r1, #0
 80135b8:	4819      	ldr	r0, [pc, #100]	; (8013620 <tcpip_init+0x84>)
 80135ba:	f000 faad 	bl	8013b18 <sys_mbox_new>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00b      	beq.n	80135dc <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80135c4:	4b17      	ldr	r3, [pc, #92]	; (8013624 <tcpip_init+0x88>)
 80135c6:	f240 2261 	movw	r2, #609	; 0x261
 80135ca:	4917      	ldr	r1, [pc, #92]	; (8013628 <tcpip_init+0x8c>)
 80135cc:	4817      	ldr	r0, [pc, #92]	; (801362c <tcpip_init+0x90>)
 80135ce:	f7ed feaf 	bl	8001330 <iprintf>
 80135d2:	2000      	movs	r0, #0
 80135d4:	f004 ff50 	bl	8018478 <fflush>
 80135d8:	f004 fe94 	bl	8018304 <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80135dc:	4814      	ldr	r0, [pc, #80]	; (8013630 <tcpip_init+0x94>)
 80135de:	f000 f84f 	bl	8013680 <sys_mutex_new>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00b      	beq.n	8013600 <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80135e8:	4b0e      	ldr	r3, [pc, #56]	; (8013624 <tcpip_init+0x88>)
 80135ea:	f240 2265 	movw	r2, #613	; 0x265
 80135ee:	4911      	ldr	r1, [pc, #68]	; (8013634 <tcpip_init+0x98>)
 80135f0:	480e      	ldr	r0, [pc, #56]	; (801362c <tcpip_init+0x90>)
 80135f2:	f7ed fe9d 	bl	8001330 <iprintf>
 80135f6:	2000      	movs	r0, #0
 80135f8:	f004 ff3e 	bl	8018478 <fflush>
 80135fc:	f004 fe82 	bl	8018304 <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013600:	2301      	movs	r3, #1
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	2300      	movs	r3, #0
 8013606:	2200      	movs	r2, #0
 8013608:	490b      	ldr	r1, [pc, #44]	; (8013638 <tcpip_init+0x9c>)
 801360a:	480c      	ldr	r0, [pc, #48]	; (801363c <tcpip_init+0xa0>)
 801360c:	f000 fc4e 	bl	8013eac <sys_thread_new>
}
 8013610:	bf00      	nop
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	20000314 	.word	0x20000314
 801361c:	20000318 	.word	0x20000318
 8013620:	2000031c 	.word	0x2000031c
 8013624:	0801c3ac 	.word	0x0801c3ac
 8013628:	0801c41c 	.word	0x0801c41c
 801362c:	0801c3e4 	.word	0x0801c3e4
 8013630:	20016f60 	.word	0x20016f60
 8013634:	0801c440 	.word	0x0801c440
 8013638:	08013319 	.word	0x08013319
 801363c:	0801c464 	.word	0x0801c464

08013640 <sys_init>:
#endif

/* Initialize this module (see description in sys.h) */
void
sys_init(void)
{
 8013640:	b480      	push	{r7}
 8013642:	af00      	add	r7, sp, #0
  /* initialize sys_arch_protect global mutex */
  sys_arch_protect_mutex = xSemaphoreCreateRecursiveMutex();
  LWIP_ASSERT("failed to create sys_arch_protect mutex",
    sys_arch_protect_mutex != NULL);
#endif /* SYS_LIGHTWEIGHT_PROT && LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
}
 8013644:	bf00      	nop
 8013646:	46bd      	mov	sp, r7
 8013648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364c:	4770      	bx	lr

0801364e <sys_now>:
#endif

#if LWIP_FREERTOS_SYS_NOW_FROM_FREERTOS
u32_t
sys_now(void)
{
 801364e:	b580      	push	{r7, lr}
 8013650:	af00      	add	r7, sp, #0
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8013652:	f003 fe09 	bl	8017268 <xTaskGetTickCount>
 8013656:	4603      	mov	r3, r0
}
 8013658:	4618      	mov	r0, r3
 801365a:	bd80      	pop	{r7, pc}

0801365c <sys_arch_protect>:

#if SYS_LIGHTWEIGHT_PROT

sys_prot_t
sys_arch_protect(void)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("sys_arch_protect_mutex != NULL", sys_arch_protect_mutex != NULL);

  ret = xSemaphoreTakeRecursive(sys_arch_protect_mutex, portMAX_DELAY);
  LWIP_ASSERT("sys_arch_protect failed to take the mutex", ret == pdTRUE);
#else /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  taskENTER_CRITICAL();
 8013660:	f002 fb9c 	bl	8015d9c <vPortEnterCritical>
    sys_arch_protect_nesting++;
    LWIP_ASSERT("sys_arch_protect overflow", sys_arch_protect_nesting > ret);
    return ret;
  }
#else
  return 1;
 8013664:	2301      	movs	r3, #1
#endif
}
 8013666:	4618      	mov	r0, r3
 8013668:	bd80      	pop	{r7, pc}

0801366a <sys_arch_unprotect>:

void
sys_arch_unprotect(sys_prot_t pval)
{
 801366a:	b580      	push	{r7, lr}
 801366c:	b082      	sub	sp, #8
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("sys_arch_protect_mutex != NULL", sys_arch_protect_mutex != NULL);

  ret = xSemaphoreGiveRecursive(sys_arch_protect_mutex);
  LWIP_ASSERT("sys_arch_unprotect failed to give the mutex", ret == pdTRUE);
#else /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  taskEXIT_CRITICAL();
 8013672:	f002 fbc1 	bl	8015df8 <vPortExitCritical>
#endif /* LWIP_FREERTOS_SYS_ARCH_PROTECT_USES_MUTEX */
  LWIP_UNUSED_ARG(pval);
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
	...

08013680 <sys_mutex_new>:
#if !LWIP_COMPAT_MUTEX

/* Create a new mutex*/
err_t
sys_mutex_new(sys_mutex_t *mutex)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d10a      	bne.n	80136a4 <sys_mutex_new+0x24>
 801368e:	4b1d      	ldr	r3, [pc, #116]	; (8013704 <sys_mutex_new+0x84>)
 8013690:	22c9      	movs	r2, #201	; 0xc9
 8013692:	491d      	ldr	r1, [pc, #116]	; (8013708 <sys_mutex_new+0x88>)
 8013694:	481d      	ldr	r0, [pc, #116]	; (801370c <sys_mutex_new+0x8c>)
 8013696:	f7ed fe4b 	bl	8001330 <iprintf>
 801369a:	2000      	movs	r0, #0
 801369c:	f004 feec 	bl	8018478 <fflush>
 80136a0:	f004 fe30 	bl	8018304 <abort>

  mutex->mut = xSemaphoreCreateRecursiveMutex();
 80136a4:	2004      	movs	r0, #4
 80136a6:	f002 fe1b 	bl	80162e0 <xQueueCreateMutex>
 80136aa:	4602      	mov	r2, r0
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	601a      	str	r2, [r3, #0]
  if(mutex->mut == NULL) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d10a      	bne.n	80136ce <sys_mutex_new+0x4e>
    SYS_STATS_INC(mutex.err);
 80136b8:	4b15      	ldr	r3, [pc, #84]	; (8013710 <sys_mutex_new+0x90>)
 80136ba:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80136be:	3301      	adds	r3, #1
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	4b13      	ldr	r3, [pc, #76]	; (8013710 <sys_mutex_new+0x90>)
 80136c4:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    return ERR_MEM;
 80136c8:	f04f 33ff 	mov.w	r3, #4294967295
 80136cc:	e016      	b.n	80136fc <sys_mutex_new+0x7c>
  }
  SYS_STATS_INC_USED(mutex);
 80136ce:	4b10      	ldr	r3, [pc, #64]	; (8013710 <sys_mutex_new+0x90>)
 80136d0:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80136d4:	3301      	adds	r3, #1
 80136d6:	b29a      	uxth	r2, r3
 80136d8:	4b0d      	ldr	r3, [pc, #52]	; (8013710 <sys_mutex_new+0x90>)
 80136da:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 80136de:	4b0c      	ldr	r3, [pc, #48]	; (8013710 <sys_mutex_new+0x90>)
 80136e0:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80136e4:	4b0a      	ldr	r3, [pc, #40]	; (8013710 <sys_mutex_new+0x90>)
 80136e6:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d205      	bcs.n	80136fa <sys_mutex_new+0x7a>
 80136ee:	4b08      	ldr	r3, [pc, #32]	; (8013710 <sys_mutex_new+0x90>)
 80136f0:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	; 0xee
 80136f4:	4b06      	ldr	r3, [pc, #24]	; (8013710 <sys_mutex_new+0x90>)
 80136f6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  return ERR_OK;
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	0801c474 	.word	0x0801c474
 8013708:	0801c4a0 	.word	0x0801c4a0
 801370c:	0801c4b0 	.word	0x0801c4b0
 8013710:	20016e44 	.word	0x20016e44

08013714 <sys_mutex_lock>:

void
sys_mutex_lock(sys_mutex_t *mutex)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
  BaseType_t ret;
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d10a      	bne.n	8013738 <sys_mutex_lock+0x24>
 8013722:	4b1a      	ldr	r3, [pc, #104]	; (801378c <sys_mutex_lock+0x78>)
 8013724:	22d8      	movs	r2, #216	; 0xd8
 8013726:	491a      	ldr	r1, [pc, #104]	; (8013790 <sys_mutex_lock+0x7c>)
 8013728:	481a      	ldr	r0, [pc, #104]	; (8013794 <sys_mutex_lock+0x80>)
 801372a:	f7ed fe01 	bl	8001330 <iprintf>
 801372e:	2000      	movs	r0, #0
 8013730:	f004 fea2 	bl	8018478 <fflush>
 8013734:	f004 fde6 	bl	8018304 <abort>
  LWIP_ASSERT("mutex->mut != NULL", mutex->mut != NULL);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d10a      	bne.n	8013756 <sys_mutex_lock+0x42>
 8013740:	4b12      	ldr	r3, [pc, #72]	; (801378c <sys_mutex_lock+0x78>)
 8013742:	22d9      	movs	r2, #217	; 0xd9
 8013744:	4914      	ldr	r1, [pc, #80]	; (8013798 <sys_mutex_lock+0x84>)
 8013746:	4813      	ldr	r0, [pc, #76]	; (8013794 <sys_mutex_lock+0x80>)
 8013748:	f7ed fdf2 	bl	8001330 <iprintf>
 801374c:	2000      	movs	r0, #0
 801374e:	f004 fe93 	bl	8018478 <fflush>
 8013752:	f004 fdd7 	bl	8018304 <abort>

  ret = xSemaphoreTakeRecursive(mutex->mut, portMAX_DELAY);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f04f 31ff 	mov.w	r1, #4294967295
 801375e:	4618      	mov	r0, r3
 8013760:	f002 fe09 	bl	8016376 <xQueueTakeMutexRecursive>
 8013764:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("failed to take the mutex", ret == pdTRUE);
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d00a      	beq.n	8013782 <sys_mutex_lock+0x6e>
 801376c:	4b07      	ldr	r3, [pc, #28]	; (801378c <sys_mutex_lock+0x78>)
 801376e:	22dc      	movs	r2, #220	; 0xdc
 8013770:	490a      	ldr	r1, [pc, #40]	; (801379c <sys_mutex_lock+0x88>)
 8013772:	4808      	ldr	r0, [pc, #32]	; (8013794 <sys_mutex_lock+0x80>)
 8013774:	f7ed fddc 	bl	8001330 <iprintf>
 8013778:	2000      	movs	r0, #0
 801377a:	f004 fe7d 	bl	8018478 <fflush>
 801377e:	f004 fdc1 	bl	8018304 <abort>
}
 8013782:	bf00      	nop
 8013784:	3710      	adds	r7, #16
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
 801378a:	bf00      	nop
 801378c:	0801c474 	.word	0x0801c474
 8013790:	0801c4a0 	.word	0x0801c4a0
 8013794:	0801c4b0 	.word	0x0801c4b0
 8013798:	0801c4d8 	.word	0x0801c4d8
 801379c:	0801c4ec 	.word	0x0801c4ec

080137a0 <sys_mutex_unlock>:

void
sys_mutex_unlock(sys_mutex_t *mutex)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
  BaseType_t ret;
  LWIP_ASSERT("mutex != NULL", mutex != NULL);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d10a      	bne.n	80137c4 <sys_mutex_unlock+0x24>
 80137ae:	4b19      	ldr	r3, [pc, #100]	; (8013814 <sys_mutex_unlock+0x74>)
 80137b0:	22e3      	movs	r2, #227	; 0xe3
 80137b2:	4919      	ldr	r1, [pc, #100]	; (8013818 <sys_mutex_unlock+0x78>)
 80137b4:	4819      	ldr	r0, [pc, #100]	; (801381c <sys_mutex_unlock+0x7c>)
 80137b6:	f7ed fdbb 	bl	8001330 <iprintf>
 80137ba:	2000      	movs	r0, #0
 80137bc:	f004 fe5c 	bl	8018478 <fflush>
 80137c0:	f004 fda0 	bl	8018304 <abort>
  LWIP_ASSERT("mutex->mut != NULL", mutex->mut != NULL);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d10a      	bne.n	80137e2 <sys_mutex_unlock+0x42>
 80137cc:	4b11      	ldr	r3, [pc, #68]	; (8013814 <sys_mutex_unlock+0x74>)
 80137ce:	22e4      	movs	r2, #228	; 0xe4
 80137d0:	4913      	ldr	r1, [pc, #76]	; (8013820 <sys_mutex_unlock+0x80>)
 80137d2:	4812      	ldr	r0, [pc, #72]	; (801381c <sys_mutex_unlock+0x7c>)
 80137d4:	f7ed fdac 	bl	8001330 <iprintf>
 80137d8:	2000      	movs	r0, #0
 80137da:	f004 fe4d 	bl	8018478 <fflush>
 80137de:	f004 fd91 	bl	8018304 <abort>

  ret = xSemaphoreGiveRecursive(mutex->mut);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	4618      	mov	r0, r3
 80137e8:	f002 fd92 	bl	8016310 <xQueueGiveMutexRecursive>
 80137ec:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("failed to give the mutex", ret == pdTRUE);
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d00a      	beq.n	801380a <sys_mutex_unlock+0x6a>
 80137f4:	4b07      	ldr	r3, [pc, #28]	; (8013814 <sys_mutex_unlock+0x74>)
 80137f6:	22e7      	movs	r2, #231	; 0xe7
 80137f8:	490a      	ldr	r1, [pc, #40]	; (8013824 <sys_mutex_unlock+0x84>)
 80137fa:	4808      	ldr	r0, [pc, #32]	; (801381c <sys_mutex_unlock+0x7c>)
 80137fc:	f7ed fd98 	bl	8001330 <iprintf>
 8013800:	2000      	movs	r0, #0
 8013802:	f004 fe39 	bl	8018478 <fflush>
 8013806:	f004 fd7d 	bl	8018304 <abort>
}
 801380a:	bf00      	nop
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	0801c474 	.word	0x0801c474
 8013818:	0801c4a0 	.word	0x0801c4a0
 801381c:	0801c4b0 	.word	0x0801c4b0
 8013820:	0801c4d8 	.word	0x0801c4d8
 8013824:	0801c508 	.word	0x0801c508

08013828 <sys_sem_new>:

#endif /* !LWIP_COMPAT_MUTEX */

err_t
sys_sem_new(sys_sem_t *sem, u8_t initial_count)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	460b      	mov	r3, r1
 8013832:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d10a      	bne.n	8013850 <sys_sem_new+0x28>
 801383a:	4b34      	ldr	r3, [pc, #208]	; (801390c <sys_sem_new+0xe4>)
 801383c:	22fa      	movs	r2, #250	; 0xfa
 801383e:	4934      	ldr	r1, [pc, #208]	; (8013910 <sys_sem_new+0xe8>)
 8013840:	4834      	ldr	r0, [pc, #208]	; (8013914 <sys_sem_new+0xec>)
 8013842:	f7ed fd75 	bl	8001330 <iprintf>
 8013846:	2000      	movs	r0, #0
 8013848:	f004 fe16 	bl	8018478 <fflush>
 801384c:	f004 fd5a 	bl	8018304 <abort>
  LWIP_ASSERT("initial_count invalid (not 0 or 1)",
 8013850:	78fb      	ldrb	r3, [r7, #3]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00d      	beq.n	8013872 <sys_sem_new+0x4a>
 8013856:	78fb      	ldrb	r3, [r7, #3]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d00a      	beq.n	8013872 <sys_sem_new+0x4a>
 801385c:	4b2b      	ldr	r3, [pc, #172]	; (801390c <sys_sem_new+0xe4>)
 801385e:	22fc      	movs	r2, #252	; 0xfc
 8013860:	492d      	ldr	r1, [pc, #180]	; (8013918 <sys_sem_new+0xf0>)
 8013862:	482c      	ldr	r0, [pc, #176]	; (8013914 <sys_sem_new+0xec>)
 8013864:	f7ed fd64 	bl	8001330 <iprintf>
 8013868:	2000      	movs	r0, #0
 801386a:	f004 fe05 	bl	8018478 <fflush>
 801386e:	f004 fd49 	bl	8018304 <abort>
    (initial_count == 0) || (initial_count == 1));

  sem->sem = xSemaphoreCreateBinary();
 8013872:	2203      	movs	r2, #3
 8013874:	2100      	movs	r1, #0
 8013876:	2001      	movs	r0, #1
 8013878:	f002 fcbe 	bl	80161f8 <xQueueGenericCreate>
 801387c:	4602      	mov	r2, r0
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	601a      	str	r2, [r3, #0]
  if(sem->sem == NULL) {
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d10a      	bne.n	80138a0 <sys_sem_new+0x78>
    SYS_STATS_INC(sem.err);
 801388a:	4b24      	ldr	r3, [pc, #144]	; (801391c <sys_sem_new+0xf4>)
 801388c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8013890:	3301      	adds	r3, #1
 8013892:	b29a      	uxth	r2, r3
 8013894:	4b21      	ldr	r3, [pc, #132]	; (801391c <sys_sem_new+0xf4>)
 8013896:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    return ERR_MEM;
 801389a:	f04f 33ff 	mov.w	r3, #4294967295
 801389e:	e030      	b.n	8013902 <sys_sem_new+0xda>
  }
  SYS_STATS_INC_USED(sem);
 80138a0:	4b1e      	ldr	r3, [pc, #120]	; (801391c <sys_sem_new+0xf4>)
 80138a2:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80138a6:	3301      	adds	r3, #1
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	4b1c      	ldr	r3, [pc, #112]	; (801391c <sys_sem_new+0xf4>)
 80138ac:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 80138b0:	4b1a      	ldr	r3, [pc, #104]	; (801391c <sys_sem_new+0xf4>)
 80138b2:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 80138b6:	4b19      	ldr	r3, [pc, #100]	; (801391c <sys_sem_new+0xf4>)
 80138b8:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80138bc:	429a      	cmp	r2, r3
 80138be:	d205      	bcs.n	80138cc <sys_sem_new+0xa4>
 80138c0:	4b16      	ldr	r3, [pc, #88]	; (801391c <sys_sem_new+0xf4>)
 80138c2:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 80138c6:	4b15      	ldr	r3, [pc, #84]	; (801391c <sys_sem_new+0xf4>)
 80138c8:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea

  if(initial_count == 1) {
 80138cc:	78fb      	ldrb	r3, [r7, #3]
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d116      	bne.n	8013900 <sys_sem_new+0xd8>
    BaseType_t ret = xSemaphoreGive(sem->sem);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	2300      	movs	r3, #0
 80138d8:	2200      	movs	r2, #0
 80138da:	2100      	movs	r1, #0
 80138dc:	f002 fd80 	bl	80163e0 <xQueueGenericSend>
 80138e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("sys_sem_new: initial give failed", ret == pdTRUE);
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d00b      	beq.n	8013900 <sys_sem_new+0xd8>
 80138e8:	4b08      	ldr	r3, [pc, #32]	; (801390c <sys_sem_new+0xe4>)
 80138ea:	f240 1207 	movw	r2, #263	; 0x107
 80138ee:	490c      	ldr	r1, [pc, #48]	; (8013920 <sys_sem_new+0xf8>)
 80138f0:	4808      	ldr	r0, [pc, #32]	; (8013914 <sys_sem_new+0xec>)
 80138f2:	f7ed fd1d 	bl	8001330 <iprintf>
 80138f6:	2000      	movs	r0, #0
 80138f8:	f004 fdbe 	bl	8018478 <fflush>
 80138fc:	f004 fd02 	bl	8018304 <abort>
  }
  return ERR_OK;
 8013900:	2300      	movs	r3, #0
}
 8013902:	4618      	mov	r0, r3
 8013904:	3710      	adds	r7, #16
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
 801390a:	bf00      	nop
 801390c:	0801c474 	.word	0x0801c474
 8013910:	0801c524 	.word	0x0801c524
 8013914:	0801c4b0 	.word	0x0801c4b0
 8013918:	0801c530 	.word	0x0801c530
 801391c:	20016e44 	.word	0x20016e44
 8013920:	0801c554 	.word	0x0801c554

08013924 <sys_sem_signal>:

void
sys_sem_signal(sys_sem_t *sem)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  BaseType_t ret;
  LWIP_ASSERT("sem != NULL", sem != NULL);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d10b      	bne.n	801394a <sys_sem_signal+0x26>
 8013932:	4b1d      	ldr	r3, [pc, #116]	; (80139a8 <sys_sem_signal+0x84>)
 8013934:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013938:	491c      	ldr	r1, [pc, #112]	; (80139ac <sys_sem_signal+0x88>)
 801393a:	481d      	ldr	r0, [pc, #116]	; (80139b0 <sys_sem_signal+0x8c>)
 801393c:	f7ed fcf8 	bl	8001330 <iprintf>
 8013940:	2000      	movs	r0, #0
 8013942:	f004 fd99 	bl	8018478 <fflush>
 8013946:	f004 fcdd 	bl	8018304 <abort>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d10b      	bne.n	801396a <sys_sem_signal+0x46>
 8013952:	4b15      	ldr	r3, [pc, #84]	; (80139a8 <sys_sem_signal+0x84>)
 8013954:	f240 1211 	movw	r2, #273	; 0x111
 8013958:	4916      	ldr	r1, [pc, #88]	; (80139b4 <sys_sem_signal+0x90>)
 801395a:	4815      	ldr	r0, [pc, #84]	; (80139b0 <sys_sem_signal+0x8c>)
 801395c:	f7ed fce8 	bl	8001330 <iprintf>
 8013960:	2000      	movs	r0, #0
 8013962:	f004 fd89 	bl	8018478 <fflush>
 8013966:	f004 fccd 	bl	8018304 <abort>

  ret = xSemaphoreGive(sem->sem);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6818      	ldr	r0, [r3, #0]
 801396e:	2300      	movs	r3, #0
 8013970:	2200      	movs	r2, #0
 8013972:	2100      	movs	r1, #0
 8013974:	f002 fd34 	bl	80163e0 <xQueueGenericSend>
 8013978:	60f8      	str	r0, [r7, #12]
  /* queue full is OK, this is a signal only... */
  LWIP_ASSERT("sys_sem_signal: sane return value",
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d00e      	beq.n	801399e <sys_sem_signal+0x7a>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d00b      	beq.n	801399e <sys_sem_signal+0x7a>
 8013986:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <sys_sem_signal+0x84>)
 8013988:	f44f 728b 	mov.w	r2, #278	; 0x116
 801398c:	490a      	ldr	r1, [pc, #40]	; (80139b8 <sys_sem_signal+0x94>)
 801398e:	4808      	ldr	r0, [pc, #32]	; (80139b0 <sys_sem_signal+0x8c>)
 8013990:	f7ed fcce 	bl	8001330 <iprintf>
 8013994:	2000      	movs	r0, #0
 8013996:	f004 fd6f 	bl	8018478 <fflush>
 801399a:	f004 fcb3 	bl	8018304 <abort>
    (ret == pdTRUE) || (ret == errQUEUE_FULL));
}
 801399e:	bf00      	nop
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	0801c474 	.word	0x0801c474
 80139ac:	0801c524 	.word	0x0801c524
 80139b0:	0801c4b0 	.word	0x0801c4b0
 80139b4:	0801c578 	.word	0x0801c578
 80139b8:	0801c58c 	.word	0x0801c58c

080139bc <sys_arch_sem_wait>:

u32_t
sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout_ms)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  BaseType_t ret;
  LWIP_ASSERT("sem != NULL", sem != NULL);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d10b      	bne.n	80139e4 <sys_arch_sem_wait+0x28>
 80139cc:	4b2c      	ldr	r3, [pc, #176]	; (8013a80 <sys_arch_sem_wait+0xc4>)
 80139ce:	f240 121d 	movw	r2, #285	; 0x11d
 80139d2:	492c      	ldr	r1, [pc, #176]	; (8013a84 <sys_arch_sem_wait+0xc8>)
 80139d4:	482c      	ldr	r0, [pc, #176]	; (8013a88 <sys_arch_sem_wait+0xcc>)
 80139d6:	f7ed fcab 	bl	8001330 <iprintf>
 80139da:	2000      	movs	r0, #0
 80139dc:	f004 fd4c 	bl	8018478 <fflush>
 80139e0:	f004 fc90 	bl	8018304 <abort>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d10b      	bne.n	8013a04 <sys_arch_sem_wait+0x48>
 80139ec:	4b24      	ldr	r3, [pc, #144]	; (8013a80 <sys_arch_sem_wait+0xc4>)
 80139ee:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80139f2:	4926      	ldr	r1, [pc, #152]	; (8013a8c <sys_arch_sem_wait+0xd0>)
 80139f4:	4824      	ldr	r0, [pc, #144]	; (8013a88 <sys_arch_sem_wait+0xcc>)
 80139f6:	f7ed fc9b 	bl	8001330 <iprintf>
 80139fa:	2000      	movs	r0, #0
 80139fc:	f004 fd3c 	bl	8018478 <fflush>
 8013a00:	f004 fc80 	bl	8018304 <abort>

  if(!timeout_ms) {
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d116      	bne.n	8013a38 <sys_arch_sem_wait+0x7c>
    /* wait infinite */
    ret = xSemaphoreTake(sem->sem, portMAX_DELAY);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8013a12:	4618      	mov	r0, r3
 8013a14:	f002 ff4e 	bl	80168b4 <xQueueSemaphoreTake>
 8013a18:	60b8      	str	r0, [r7, #8]
    LWIP_ASSERT("taking semaphore failed", ret == pdTRUE);
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d029      	beq.n	8013a74 <sys_arch_sem_wait+0xb8>
 8013a20:	4b17      	ldr	r3, [pc, #92]	; (8013a80 <sys_arch_sem_wait+0xc4>)
 8013a22:	f240 1223 	movw	r2, #291	; 0x123
 8013a26:	491a      	ldr	r1, [pc, #104]	; (8013a90 <sys_arch_sem_wait+0xd4>)
 8013a28:	4817      	ldr	r0, [pc, #92]	; (8013a88 <sys_arch_sem_wait+0xcc>)
 8013a2a:	f7ed fc81 	bl	8001330 <iprintf>
 8013a2e:	2000      	movs	r0, #0
 8013a30:	f004 fd22 	bl	8018478 <fflush>
 8013a34:	f004 fc66 	bl	8018304 <abort>
  } else {
    TickType_t timeout_ticks = timeout_ms / portTICK_RATE_MS;
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	60fb      	str	r3, [r7, #12]
    ret = xSemaphoreTake(sem->sem, timeout_ticks);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	68f9      	ldr	r1, [r7, #12]
 8013a42:	4618      	mov	r0, r3
 8013a44:	f002 ff36 	bl	80168b4 <xQueueSemaphoreTake>
 8013a48:	60b8      	str	r0, [r7, #8]
    if (ret == errQUEUE_EMPTY) {
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d102      	bne.n	8013a56 <sys_arch_sem_wait+0x9a>
      /* timed out */
      return SYS_ARCH_TIMEOUT;
 8013a50:	f04f 33ff 	mov.w	r3, #4294967295
 8013a54:	e00f      	b.n	8013a76 <sys_arch_sem_wait+0xba>
    }
    LWIP_ASSERT("taking semaphore failed", ret == pdTRUE);
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	d00b      	beq.n	8013a74 <sys_arch_sem_wait+0xb8>
 8013a5c:	4b08      	ldr	r3, [pc, #32]	; (8013a80 <sys_arch_sem_wait+0xc4>)
 8013a5e:	f240 122b 	movw	r2, #299	; 0x12b
 8013a62:	490b      	ldr	r1, [pc, #44]	; (8013a90 <sys_arch_sem_wait+0xd4>)
 8013a64:	4808      	ldr	r0, [pc, #32]	; (8013a88 <sys_arch_sem_wait+0xcc>)
 8013a66:	f7ed fc63 	bl	8001330 <iprintf>
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	f004 fd04 	bl	8018478 <fflush>
 8013a70:	f004 fc48 	bl	8018304 <abort>
  }

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 8013a74:	2301      	movs	r3, #1
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3710      	adds	r7, #16
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	0801c474 	.word	0x0801c474
 8013a84:	0801c524 	.word	0x0801c524
 8013a88:	0801c4b0 	.word	0x0801c4b0
 8013a8c:	0801c578 	.word	0x0801c578
 8013a90:	0801c5b0 	.word	0x0801c5b0

08013a94 <sys_sem_free>:

void
sys_sem_free(sys_sem_t *sem)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("sem != NULL", sem != NULL);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d10b      	bne.n	8013aba <sys_sem_free+0x26>
 8013aa2:	4b18      	ldr	r3, [pc, #96]	; (8013b04 <sys_sem_free+0x70>)
 8013aa4:	f240 1237 	movw	r2, #311	; 0x137
 8013aa8:	4917      	ldr	r1, [pc, #92]	; (8013b08 <sys_sem_free+0x74>)
 8013aaa:	4818      	ldr	r0, [pc, #96]	; (8013b0c <sys_sem_free+0x78>)
 8013aac:	f7ed fc40 	bl	8001330 <iprintf>
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f004 fce1 	bl	8018478 <fflush>
 8013ab6:	f004 fc25 	bl	8018304 <abort>
  LWIP_ASSERT("sem->sem != NULL", sem->sem != NULL);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d10b      	bne.n	8013ada <sys_sem_free+0x46>
 8013ac2:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <sys_sem_free+0x70>)
 8013ac4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8013ac8:	4911      	ldr	r1, [pc, #68]	; (8013b10 <sys_sem_free+0x7c>)
 8013aca:	4810      	ldr	r0, [pc, #64]	; (8013b0c <sys_sem_free+0x78>)
 8013acc:	f7ed fc30 	bl	8001330 <iprintf>
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	f004 fcd1 	bl	8018478 <fflush>
 8013ad6:	f004 fc15 	bl	8018304 <abort>

  SYS_STATS_DEC(sem.used);
 8013ada:	4b0e      	ldr	r3, [pc, #56]	; (8013b14 <sys_sem_free+0x80>)
 8013adc:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8013ae0:	3b01      	subs	r3, #1
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	4b0b      	ldr	r3, [pc, #44]	; (8013b14 <sys_sem_free+0x80>)
 8013ae6:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
  vSemaphoreDelete(sem->sem);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4618      	mov	r0, r3
 8013af0:	f002 ffe8 	bl	8016ac4 <vQueueDelete>
  sem->sem = NULL;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]
}
 8013afa:	bf00      	nop
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	0801c474 	.word	0x0801c474
 8013b08:	0801c524 	.word	0x0801c524
 8013b0c:	0801c4b0 	.word	0x0801c4b0
 8013b10:	0801c578 	.word	0x0801c578
 8013b14:	20016e44 	.word	0x20016e44

08013b18 <sys_mbox_new>:

err_t
sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d10b      	bne.n	8013b40 <sys_mbox_new+0x28>
 8013b28:	4b26      	ldr	r3, [pc, #152]	; (8013bc4 <sys_mbox_new+0xac>)
 8013b2a:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8013b2e:	4926      	ldr	r1, [pc, #152]	; (8013bc8 <sys_mbox_new+0xb0>)
 8013b30:	4826      	ldr	r0, [pc, #152]	; (8013bcc <sys_mbox_new+0xb4>)
 8013b32:	f7ed fbfd 	bl	8001330 <iprintf>
 8013b36:	2000      	movs	r0, #0
 8013b38:	f004 fc9e 	bl	8018478 <fflush>
 8013b3c:	f004 fbe2 	bl	8018304 <abort>
  LWIP_ASSERT("size > 0", size > 0);
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	dc0b      	bgt.n	8013b5e <sys_mbox_new+0x46>
 8013b46:	4b1f      	ldr	r3, [pc, #124]	; (8013bc4 <sys_mbox_new+0xac>)
 8013b48:	f240 1243 	movw	r2, #323	; 0x143
 8013b4c:	4920      	ldr	r1, [pc, #128]	; (8013bd0 <sys_mbox_new+0xb8>)
 8013b4e:	481f      	ldr	r0, [pc, #124]	; (8013bcc <sys_mbox_new+0xb4>)
 8013b50:	f7ed fbee 	bl	8001330 <iprintf>
 8013b54:	2000      	movs	r0, #0
 8013b56:	f004 fc8f 	bl	8018478 <fflush>
 8013b5a:	f004 fbd3 	bl	8018304 <abort>

  mbox->mbx = xQueueCreate((UBaseType_t)size, sizeof(void *));
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	2200      	movs	r2, #0
 8013b62:	2104      	movs	r1, #4
 8013b64:	4618      	mov	r0, r3
 8013b66:	f002 fb47 	bl	80161f8 <xQueueGenericCreate>
 8013b6a:	4602      	mov	r2, r0
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	601a      	str	r2, [r3, #0]
  if(mbox->mbx == NULL) {
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d10a      	bne.n	8013b8e <sys_mbox_new+0x76>
    SYS_STATS_INC(mbox.err);
 8013b78:	4b16      	ldr	r3, [pc, #88]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013b7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013b7e:	3301      	adds	r3, #1
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	4b14      	ldr	r3, [pc, #80]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013b84:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    return ERR_MEM;
 8013b88:	f04f 33ff 	mov.w	r3, #4294967295
 8013b8c:	e016      	b.n	8013bbc <sys_mbox_new+0xa4>
  }
  SYS_STATS_INC_USED(mbox);
 8013b8e:	4b11      	ldr	r3, [pc, #68]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013b90:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8013b94:	3301      	adds	r3, #1
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	4b0e      	ldr	r3, [pc, #56]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013b9a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8013b9e:	4b0d      	ldr	r3, [pc, #52]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013ba0:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8013ba4:	4b0b      	ldr	r3, [pc, #44]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013ba6:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d205      	bcs.n	8013bba <sys_mbox_new+0xa2>
 8013bae:	4b09      	ldr	r3, [pc, #36]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013bb0:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8013bb4:	4b07      	ldr	r3, [pc, #28]	; (8013bd4 <sys_mbox_new+0xbc>)
 8013bb6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  return ERR_OK;
 8013bba:	2300      	movs	r3, #0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	0801c474 	.word	0x0801c474
 8013bc8:	0801c5c8 	.word	0x0801c5c8
 8013bcc:	0801c4b0 	.word	0x0801c4b0
 8013bd0:	0801c5d8 	.word	0x0801c5d8
 8013bd4:	20016e44 	.word	0x20016e44

08013bd8 <sys_mbox_trypost>:
  LWIP_ASSERT("mbox post failed", ret == pdTRUE);
}

err_t
sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  BaseType_t ret;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d10b      	bne.n	8013c00 <sys_mbox_trypost+0x28>
 8013be8:	4b22      	ldr	r3, [pc, #136]	; (8013c74 <sys_mbox_trypost+0x9c>)
 8013bea:	f240 125d 	movw	r2, #349	; 0x15d
 8013bee:	4922      	ldr	r1, [pc, #136]	; (8013c78 <sys_mbox_trypost+0xa0>)
 8013bf0:	4822      	ldr	r0, [pc, #136]	; (8013c7c <sys_mbox_trypost+0xa4>)
 8013bf2:	f7ed fb9d 	bl	8001330 <iprintf>
 8013bf6:	2000      	movs	r0, #0
 8013bf8:	f004 fc3e 	bl	8018478 <fflush>
 8013bfc:	f004 fb82 	bl	8018304 <abort>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d10b      	bne.n	8013c20 <sys_mbox_trypost+0x48>
 8013c08:	4b1a      	ldr	r3, [pc, #104]	; (8013c74 <sys_mbox_trypost+0x9c>)
 8013c0a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013c0e:	491c      	ldr	r1, [pc, #112]	; (8013c80 <sys_mbox_trypost+0xa8>)
 8013c10:	481a      	ldr	r0, [pc, #104]	; (8013c7c <sys_mbox_trypost+0xa4>)
 8013c12:	f7ed fb8d 	bl	8001330 <iprintf>
 8013c16:	2000      	movs	r0, #0
 8013c18:	f004 fc2e 	bl	8018478 <fflush>
 8013c1c:	f004 fb72 	bl	8018304 <abort>

  ret = xQueueSendToBack(mbox->mbx, &msg, 0);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6818      	ldr	r0, [r3, #0]
 8013c24:	4639      	mov	r1, r7
 8013c26:	2300      	movs	r3, #0
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f002 fbd9 	bl	80163e0 <xQueueGenericSend>
 8013c2e:	60f8      	str	r0, [r7, #12]
  if (ret == pdTRUE) {
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d101      	bne.n	8013c3a <sys_mbox_trypost+0x62>
    return ERR_OK;
 8013c36:	2300      	movs	r3, #0
 8013c38:	e018      	b.n	8013c6c <sys_mbox_trypost+0x94>
  } else {
    LWIP_ASSERT("mbox trypost failed", ret == errQUEUE_FULL);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00b      	beq.n	8013c58 <sys_mbox_trypost+0x80>
 8013c40:	4b0c      	ldr	r3, [pc, #48]	; (8013c74 <sys_mbox_trypost+0x9c>)
 8013c42:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013c46:	490f      	ldr	r1, [pc, #60]	; (8013c84 <sys_mbox_trypost+0xac>)
 8013c48:	480c      	ldr	r0, [pc, #48]	; (8013c7c <sys_mbox_trypost+0xa4>)
 8013c4a:	f7ed fb71 	bl	8001330 <iprintf>
 8013c4e:	2000      	movs	r0, #0
 8013c50:	f004 fc12 	bl	8018478 <fflush>
 8013c54:	f004 fb56 	bl	8018304 <abort>
    SYS_STATS_INC(mbox.err);
 8013c58:	4b0b      	ldr	r3, [pc, #44]	; (8013c88 <sys_mbox_trypost+0xb0>)
 8013c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8013c5e:	3301      	adds	r3, #1
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	4b09      	ldr	r3, [pc, #36]	; (8013c88 <sys_mbox_trypost+0xb0>)
 8013c64:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    return ERR_MEM;
 8013c68:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0801c474 	.word	0x0801c474
 8013c78:	0801c5c8 	.word	0x0801c5c8
 8013c7c:	0801c4b0 	.word	0x0801c4b0
 8013c80:	0801c5e4 	.word	0x0801c5e4
 8013c84:	0801c60c 	.word	0x0801c60c
 8013c88:	20016e44 	.word	0x20016e44

08013c8c <sys_arch_mbox_fetch>:
  }
}

u32_t
sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout_ms)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
  BaseType_t ret;
  void *msg_dummy;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d10b      	bne.n	8013cb6 <sys_arch_mbox_fetch+0x2a>
 8013c9e:	4b32      	ldr	r3, [pc, #200]	; (8013d68 <sys_arch_mbox_fetch+0xdc>)
 8013ca0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013ca4:	4931      	ldr	r1, [pc, #196]	; (8013d6c <sys_arch_mbox_fetch+0xe0>)
 8013ca6:	4832      	ldr	r0, [pc, #200]	; (8013d70 <sys_arch_mbox_fetch+0xe4>)
 8013ca8:	f7ed fb42 	bl	8001330 <iprintf>
 8013cac:	2000      	movs	r0, #0
 8013cae:	f004 fbe3 	bl	8018478 <fflush>
 8013cb2:	f004 fb27 	bl	8018304 <abort>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d10b      	bne.n	8013cd6 <sys_arch_mbox_fetch+0x4a>
 8013cbe:	4b2a      	ldr	r3, [pc, #168]	; (8013d68 <sys_arch_mbox_fetch+0xdc>)
 8013cc0:	f240 1285 	movw	r2, #389	; 0x185
 8013cc4:	492b      	ldr	r1, [pc, #172]	; (8013d74 <sys_arch_mbox_fetch+0xe8>)
 8013cc6:	482a      	ldr	r0, [pc, #168]	; (8013d70 <sys_arch_mbox_fetch+0xe4>)
 8013cc8:	f7ed fb32 	bl	8001330 <iprintf>
 8013ccc:	2000      	movs	r0, #0
 8013cce:	f004 fbd3 	bl	8018478 <fflush>
 8013cd2:	f004 fb17 	bl	8018304 <abort>

  if (!msg) {
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d102      	bne.n	8013ce2 <sys_arch_mbox_fetch+0x56>
    msg = &msg_dummy;
 8013cdc:	f107 0314 	add.w	r3, r7, #20
 8013ce0:	60bb      	str	r3, [r7, #8]
  }

  if (!timeout_ms) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d117      	bne.n	8013d18 <sys_arch_mbox_fetch+0x8c>
    /* wait infinite */
    ret = xQueueReceive(mbox->mbx, &(*msg), portMAX_DELAY);
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f04f 32ff 	mov.w	r2, #4294967295
 8013cf0:	68b9      	ldr	r1, [r7, #8]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f002 fd02 	bl	80166fc <xQueueReceive>
 8013cf8:	61b8      	str	r0, [r7, #24]
    LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d02d      	beq.n	8013d5c <sys_arch_mbox_fetch+0xd0>
 8013d00:	4b19      	ldr	r3, [pc, #100]	; (8013d68 <sys_arch_mbox_fetch+0xdc>)
 8013d02:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8013d06:	491c      	ldr	r1, [pc, #112]	; (8013d78 <sys_arch_mbox_fetch+0xec>)
 8013d08:	4819      	ldr	r0, [pc, #100]	; (8013d70 <sys_arch_mbox_fetch+0xe4>)
 8013d0a:	f7ed fb11 	bl	8001330 <iprintf>
 8013d0e:	2000      	movs	r0, #0
 8013d10:	f004 fbb2 	bl	8018478 <fflush>
 8013d14:	f004 faf6 	bl	8018304 <abort>
  } else {
    TickType_t timeout_ticks = timeout_ms / portTICK_RATE_MS;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	61fb      	str	r3, [r7, #28]
    ret = xQueueReceive(mbox->mbx, &(*msg), timeout_ticks);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	69fa      	ldr	r2, [r7, #28]
 8013d22:	68b9      	ldr	r1, [r7, #8]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f002 fce9 	bl	80166fc <xQueueReceive>
 8013d2a:	61b8      	str	r0, [r7, #24]
    if (ret == errQUEUE_EMPTY) {
 8013d2c:	69bb      	ldr	r3, [r7, #24]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d105      	bne.n	8013d3e <sys_arch_mbox_fetch+0xb2>
      /* timed out */
      *msg = NULL;
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	2200      	movs	r2, #0
 8013d36:	601a      	str	r2, [r3, #0]
      return SYS_ARCH_TIMEOUT;
 8013d38:	f04f 33ff 	mov.w	r3, #4294967295
 8013d3c:	e00f      	b.n	8013d5e <sys_arch_mbox_fetch+0xd2>
    }
    LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d00b      	beq.n	8013d5c <sys_arch_mbox_fetch+0xd0>
 8013d44:	4b08      	ldr	r3, [pc, #32]	; (8013d68 <sys_arch_mbox_fetch+0xdc>)
 8013d46:	f240 1297 	movw	r2, #407	; 0x197
 8013d4a:	490b      	ldr	r1, [pc, #44]	; (8013d78 <sys_arch_mbox_fetch+0xec>)
 8013d4c:	4808      	ldr	r0, [pc, #32]	; (8013d70 <sys_arch_mbox_fetch+0xe4>)
 8013d4e:	f7ed faef 	bl	8001330 <iprintf>
 8013d52:	2000      	movs	r0, #0
 8013d54:	f004 fb90 	bl	8018478 <fflush>
 8013d58:	f004 fad4 	bl	8018304 <abort>
  }

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 8013d5c:	2301      	movs	r3, #1
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3720      	adds	r7, #32
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	0801c474 	.word	0x0801c474
 8013d6c:	0801c5c8 	.word	0x0801c5c8
 8013d70:	0801c4b0 	.word	0x0801c4b0
 8013d74:	0801c5e4 	.word	0x0801c5e4
 8013d78:	0801c620 	.word	0x0801c620

08013d7c <sys_arch_mbox_tryfetch>:

u32_t
sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
  BaseType_t ret;
  void *msg_dummy;
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d10b      	bne.n	8013da4 <sys_arch_mbox_tryfetch+0x28>
 8013d8c:	4b23      	ldr	r3, [pc, #140]	; (8013e1c <sys_arch_mbox_tryfetch+0xa0>)
 8013d8e:	f240 12a5 	movw	r2, #421	; 0x1a5
 8013d92:	4923      	ldr	r1, [pc, #140]	; (8013e20 <sys_arch_mbox_tryfetch+0xa4>)
 8013d94:	4823      	ldr	r0, [pc, #140]	; (8013e24 <sys_arch_mbox_tryfetch+0xa8>)
 8013d96:	f7ed facb 	bl	8001330 <iprintf>
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	f004 fb6c 	bl	8018478 <fflush>
 8013da0:	f004 fab0 	bl	8018304 <abort>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10b      	bne.n	8013dc4 <sys_arch_mbox_tryfetch+0x48>
 8013dac:	4b1b      	ldr	r3, [pc, #108]	; (8013e1c <sys_arch_mbox_tryfetch+0xa0>)
 8013dae:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8013db2:	491d      	ldr	r1, [pc, #116]	; (8013e28 <sys_arch_mbox_tryfetch+0xac>)
 8013db4:	481b      	ldr	r0, [pc, #108]	; (8013e24 <sys_arch_mbox_tryfetch+0xa8>)
 8013db6:	f7ed fabb 	bl	8001330 <iprintf>
 8013dba:	2000      	movs	r0, #0
 8013dbc:	f004 fb5c 	bl	8018478 <fflush>
 8013dc0:	f004 faa0 	bl	8018304 <abort>

  if (!msg) {
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <sys_arch_mbox_tryfetch+0x54>
    msg = &msg_dummy;
 8013dca:	f107 0308 	add.w	r3, r7, #8
 8013dce:	603b      	str	r3, [r7, #0]
  }

  ret = xQueueReceive(mbox->mbx, &(*msg), 0);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	6839      	ldr	r1, [r7, #0]
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f002 fc8f 	bl	80166fc <xQueueReceive>
 8013dde:	60f8      	str	r0, [r7, #12]
  if (ret == errQUEUE_EMPTY) {
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d105      	bne.n	8013df2 <sys_arch_mbox_tryfetch+0x76>
    *msg = NULL;
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	2200      	movs	r2, #0
 8013dea:	601a      	str	r2, [r3, #0]
    return SYS_MBOX_EMPTY;
 8013dec:	f04f 33ff 	mov.w	r3, #4294967295
 8013df0:	e00f      	b.n	8013e12 <sys_arch_mbox_tryfetch+0x96>
  }
  LWIP_ASSERT("mbox fetch failed", ret == pdTRUE);
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d00b      	beq.n	8013e10 <sys_arch_mbox_tryfetch+0x94>
 8013df8:	4b08      	ldr	r3, [pc, #32]	; (8013e1c <sys_arch_mbox_tryfetch+0xa0>)
 8013dfa:	f240 12b1 	movw	r2, #433	; 0x1b1
 8013dfe:	490b      	ldr	r1, [pc, #44]	; (8013e2c <sys_arch_mbox_tryfetch+0xb0>)
 8013e00:	4808      	ldr	r0, [pc, #32]	; (8013e24 <sys_arch_mbox_tryfetch+0xa8>)
 8013e02:	f7ed fa95 	bl	8001330 <iprintf>
 8013e06:	2000      	movs	r0, #0
 8013e08:	f004 fb36 	bl	8018478 <fflush>
 8013e0c:	f004 fa7a 	bl	8018304 <abort>

  /* Old versions of lwIP required us to return the time waited.
     This is not the case any more. Just returning != SYS_ARCH_TIMEOUT
     here is enough. */
  return 1;
 8013e10:	2301      	movs	r3, #1
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3710      	adds	r7, #16
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	0801c474 	.word	0x0801c474
 8013e20:	0801c5c8 	.word	0x0801c5c8
 8013e24:	0801c4b0 	.word	0x0801c4b0
 8013e28:	0801c5e4 	.word	0x0801c5e4
 8013e2c:	0801c620 	.word	0x0801c620

08013e30 <sys_mbox_free>:

void
sys_mbox_free(sys_mbox_t *mbox)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("mbox != NULL", mbox != NULL);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d10b      	bne.n	8013e56 <sys_mbox_free+0x26>
 8013e3e:	4b16      	ldr	r3, [pc, #88]	; (8013e98 <sys_mbox_free+0x68>)
 8013e40:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8013e44:	4915      	ldr	r1, [pc, #84]	; (8013e9c <sys_mbox_free+0x6c>)
 8013e46:	4816      	ldr	r0, [pc, #88]	; (8013ea0 <sys_mbox_free+0x70>)
 8013e48:	f7ed fa72 	bl	8001330 <iprintf>
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	f004 fb13 	bl	8018478 <fflush>
 8013e52:	f004 fa57 	bl	8018304 <abort>
  LWIP_ASSERT("mbox->mbx != NULL", mbox->mbx != NULL);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10b      	bne.n	8013e76 <sys_mbox_free+0x46>
 8013e5e:	4b0e      	ldr	r3, [pc, #56]	; (8013e98 <sys_mbox_free+0x68>)
 8013e60:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013e64:	490f      	ldr	r1, [pc, #60]	; (8013ea4 <sys_mbox_free+0x74>)
 8013e66:	480e      	ldr	r0, [pc, #56]	; (8013ea0 <sys_mbox_free+0x70>)
 8013e68:	f7ed fa62 	bl	8001330 <iprintf>
 8013e6c:	2000      	movs	r0, #0
 8013e6e:	f004 fb03 	bl	8018478 <fflush>
 8013e72:	f004 fa47 	bl	8018304 <abort>
      SYS_STATS_INC(mbox.err);
    }
  }
#endif

  vQueueDelete(mbox->mbx);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f002 fe22 	bl	8016ac4 <vQueueDelete>

  SYS_STATS_DEC(mbox.used);
 8013e80:	4b09      	ldr	r3, [pc, #36]	; (8013ea8 <sys_mbox_free+0x78>)
 8013e82:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8013e86:	3b01      	subs	r3, #1
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	4b07      	ldr	r3, [pc, #28]	; (8013ea8 <sys_mbox_free+0x78>)
 8013e8c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
}
 8013e90:	bf00      	nop
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	0801c474 	.word	0x0801c474
 8013e9c:	0801c5c8 	.word	0x0801c5c8
 8013ea0:	0801c4b0 	.word	0x0801c4b0
 8013ea4:	0801c5e4 	.word	0x0801c5e4
 8013ea8:	20016e44 	.word	0x20016e44

08013eac <sys_thread_new>:

sys_thread_t
sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b08a      	sub	sp, #40	; 0x28
 8013eb0:	af02      	add	r7, sp, #8
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	607a      	str	r2, [r7, #4]
 8013eb8:	603b      	str	r3, [r7, #0]
  TaskHandle_t rtos_task;
  BaseType_t ret;
  sys_thread_t lwip_thread;
  size_t rtos_stacksize;

  LWIP_ASSERT("invalid stacksize", stacksize > 0);
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	dc0b      	bgt.n	8013ed8 <sys_thread_new+0x2c>
 8013ec0:	4b19      	ldr	r3, [pc, #100]	; (8013f28 <sys_thread_new+0x7c>)
 8013ec2:	f240 12d7 	movw	r2, #471	; 0x1d7
 8013ec6:	4919      	ldr	r1, [pc, #100]	; (8013f2c <sys_thread_new+0x80>)
 8013ec8:	4819      	ldr	r0, [pc, #100]	; (8013f30 <sys_thread_new+0x84>)
 8013eca:	f7ed fa31 	bl	8001330 <iprintf>
 8013ece:	2000      	movs	r0, #0
 8013ed0:	f004 fad2 	bl	8018478 <fflush>
 8013ed4:	f004 fa16 	bl	8018304 <abort>
#if LWIP_FREERTOS_THREAD_STACKSIZE_IS_STACKWORDS
  rtos_stacksize = (size_t)stacksize;
#else
  rtos_stacksize = (size_t)stacksize / sizeof(StackType_t);
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	089b      	lsrs	r3, r3, #2
 8013edc:	61fb      	str	r3, [r7, #28]
#endif

  /* lwIP's lwip_thread_fn matches FreeRTOS' TaskFunction_t, so we can pass the
     thread function without adaption here. */
  ret = xTaskCreate(thread, name, (configSTACK_DEPTH_TYPE)rtos_stacksize, arg, prio, &rtos_task);
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	b299      	uxth	r1, r3
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	f107 0214 	add.w	r2, r7, #20
 8013ee8:	9201      	str	r2, [sp, #4]
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	460a      	mov	r2, r1
 8013ef0:	68f9      	ldr	r1, [r7, #12]
 8013ef2:	68b8      	ldr	r0, [r7, #8]
 8013ef4:	f002 ff5c 	bl	8016db0 <xTaskCreate>
 8013ef8:	61b8      	str	r0, [r7, #24]
  LWIP_ASSERT("task creation failed", ret == pdTRUE);
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	d00b      	beq.n	8013f18 <sys_thread_new+0x6c>
 8013f00:	4b09      	ldr	r3, [pc, #36]	; (8013f28 <sys_thread_new+0x7c>)
 8013f02:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013f06:	490b      	ldr	r1, [pc, #44]	; (8013f34 <sys_thread_new+0x88>)
 8013f08:	4809      	ldr	r0, [pc, #36]	; (8013f30 <sys_thread_new+0x84>)
 8013f0a:	f7ed fa11 	bl	8001330 <iprintf>
 8013f0e:	2000      	movs	r0, #0
 8013f10:	f004 fab2 	bl	8018478 <fflush>
 8013f14:	f004 f9f6 	bl	8018304 <abort>

  lwip_thread.thread_handle = rtos_task;
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	613b      	str	r3, [r7, #16]
  return lwip_thread;
 8013f1c:	693b      	ldr	r3, [r7, #16]
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3720      	adds	r7, #32
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	0801c474 	.word	0x0801c474
 8013f2c:	0801c634 	.word	0x0801c634
 8013f30:	0801c4b0 	.word	0x0801c4b0
 8013f34:	0801c648 	.word	0x0801c648

08013f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013f3c:	4a0e      	ldr	r2, [pc, #56]	; (8013f78 <HAL_Init+0x40>)
 8013f3e:	4b0e      	ldr	r3, [pc, #56]	; (8013f78 <HAL_Init+0x40>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8013f48:	4a0b      	ldr	r2, [pc, #44]	; (8013f78 <HAL_Init+0x40>)
 8013f4a:	4b0b      	ldr	r3, [pc, #44]	; (8013f78 <HAL_Init+0x40>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013f54:	4a08      	ldr	r2, [pc, #32]	; (8013f78 <HAL_Init+0x40>)
 8013f56:	4b08      	ldr	r3, [pc, #32]	; (8013f78 <HAL_Init+0x40>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013f60:	2003      	movs	r0, #3
 8013f62:	f000 f935 	bl	80141d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013f66:	2000      	movs	r0, #0
 8013f68:	f000 f808 	bl	8013f7c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8013f6c:	f7ec ff09 	bl	8000d82 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	bf00      	nop
 8013f78:	40023c00 	.word	0x40023c00

08013f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8013f84:	4b09      	ldr	r3, [pc, #36]	; (8013fac <HAL_InitTick+0x30>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	4a09      	ldr	r2, [pc, #36]	; (8013fb0 <HAL_InitTick+0x34>)
 8013f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8013f8e:	099b      	lsrs	r3, r3, #6
 8013f90:	4618      	mov	r0, r3
 8013f92:	f000 f960 	bl	8014256 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013f96:	2200      	movs	r2, #0
 8013f98:	6879      	ldr	r1, [r7, #4]
 8013f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013f9e:	f000 f922 	bl	80141e6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8013fa2:	2300      	movs	r3, #0
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3708      	adds	r7, #8
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	20000000 	.word	0x20000000
 8013fb0:	10624dd3 	.word	0x10624dd3

08013fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8013fb8:	4b03      	ldr	r3, [pc, #12]	; (8013fc8 <HAL_GetTick+0x14>)
 8013fba:	681b      	ldr	r3, [r3, #0]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	20016f64 	.word	0x20016f64

08013fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013fd4:	f7ff ffee 	bl	8013fb4 <HAL_GetTick>
 8013fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fe4:	d002      	beq.n	8013fec <HAL_Delay+0x20>
  {
     wait++;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8013fec:	bf00      	nop
 8013fee:	f7ff ffe1 	bl	8013fb4 <HAL_GetTick>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	1ad2      	subs	r2, r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d3f7      	bcc.n	8013fee <HAL_Delay+0x22>
  {
  }
}
 8013ffe:	bf00      	nop
 8014000:	3710      	adds	r7, #16
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
	...

08014008 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f003 0307 	and.w	r3, r3, #7
 8014016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014018:	4b0c      	ldr	r3, [pc, #48]	; (801404c <NVIC_SetPriorityGrouping+0x44>)
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014024:	4013      	ands	r3, r2
 8014026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801403a:	4a04      	ldr	r2, [pc, #16]	; (801404c <NVIC_SetPriorityGrouping+0x44>)
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	60d3      	str	r3, [r2, #12]
}
 8014040:	bf00      	nop
 8014042:	3714      	adds	r7, #20
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	e000ed00 	.word	0xe000ed00

08014050 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8014050:	b480      	push	{r7}
 8014052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014054:	4b04      	ldr	r3, [pc, #16]	; (8014068 <NVIC_GetPriorityGrouping+0x18>)
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	0a1b      	lsrs	r3, r3, #8
 801405a:	f003 0307 	and.w	r3, r3, #7
}
 801405e:	4618      	mov	r0, r3
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr
 8014068:	e000ed00 	.word	0xe000ed00

0801406c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801406c:	b480      	push	{r7}
 801406e:	b083      	sub	sp, #12
 8014070:	af00      	add	r7, sp, #0
 8014072:	4603      	mov	r3, r0
 8014074:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8014076:	4909      	ldr	r1, [pc, #36]	; (801409c <NVIC_EnableIRQ+0x30>)
 8014078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801407c:	095b      	lsrs	r3, r3, #5
 801407e:	79fa      	ldrb	r2, [r7, #7]
 8014080:	f002 021f 	and.w	r2, r2, #31
 8014084:	2001      	movs	r0, #1
 8014086:	fa00 f202 	lsl.w	r2, r0, r2
 801408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801408e:	bf00      	nop
 8014090:	370c      	adds	r7, #12
 8014092:	46bd      	mov	sp, r7
 8014094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014098:	4770      	bx	lr
 801409a:	bf00      	nop
 801409c:	e000e100 	.word	0xe000e100

080140a0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	4603      	mov	r3, r0
 80140a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80140aa:	4909      	ldr	r1, [pc, #36]	; (80140d0 <NVIC_DisableIRQ+0x30>)
 80140ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140b0:	095b      	lsrs	r3, r3, #5
 80140b2:	79fa      	ldrb	r2, [r7, #7]
 80140b4:	f002 021f 	and.w	r2, r2, #31
 80140b8:	2001      	movs	r0, #1
 80140ba:	fa00 f202 	lsl.w	r2, r0, r2
 80140be:	3320      	adds	r3, #32
 80140c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80140c4:	bf00      	nop
 80140c6:	370c      	adds	r7, #12
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr
 80140d0:	e000e100 	.word	0xe000e100

080140d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80140d4:	b480      	push	{r7}
 80140d6:	b083      	sub	sp, #12
 80140d8:	af00      	add	r7, sp, #0
 80140da:	4603      	mov	r3, r0
 80140dc:	6039      	str	r1, [r7, #0]
 80140de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80140e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	da0b      	bge.n	8014100 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80140e8:	490d      	ldr	r1, [pc, #52]	; (8014120 <NVIC_SetPriority+0x4c>)
 80140ea:	79fb      	ldrb	r3, [r7, #7]
 80140ec:	f003 030f 	and.w	r3, r3, #15
 80140f0:	3b04      	subs	r3, #4
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	b2d2      	uxtb	r2, r2
 80140f6:	0112      	lsls	r2, r2, #4
 80140f8:	b2d2      	uxtb	r2, r2
 80140fa:	440b      	add	r3, r1
 80140fc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80140fe:	e009      	b.n	8014114 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014100:	4908      	ldr	r1, [pc, #32]	; (8014124 <NVIC_SetPriority+0x50>)
 8014102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014106:	683a      	ldr	r2, [r7, #0]
 8014108:	b2d2      	uxtb	r2, r2
 801410a:	0112      	lsls	r2, r2, #4
 801410c:	b2d2      	uxtb	r2, r2
 801410e:	440b      	add	r3, r1
 8014110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014114:	bf00      	nop
 8014116:	370c      	adds	r7, #12
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	e000ed00 	.word	0xe000ed00
 8014124:	e000e100 	.word	0xe000e100

08014128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014128:	b480      	push	{r7}
 801412a:	b089      	sub	sp, #36	; 0x24
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f003 0307 	and.w	r3, r3, #7
 801413a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	f1c3 0307 	rsb	r3, r3, #7
 8014142:	2b04      	cmp	r3, #4
 8014144:	bf28      	it	cs
 8014146:	2304      	movcs	r3, #4
 8014148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	3304      	adds	r3, #4
 801414e:	2b06      	cmp	r3, #6
 8014150:	d902      	bls.n	8014158 <NVIC_EncodePriority+0x30>
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	3b03      	subs	r3, #3
 8014156:	e000      	b.n	801415a <NVIC_EncodePriority+0x32>
 8014158:	2300      	movs	r3, #0
 801415a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801415c:	2201      	movs	r2, #1
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	fa02 f303 	lsl.w	r3, r2, r3
 8014164:	1e5a      	subs	r2, r3, #1
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	401a      	ands	r2, r3
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801416e:	2101      	movs	r1, #1
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	fa01 f303 	lsl.w	r3, r1, r3
 8014176:	1e59      	subs	r1, r3, #1
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801417c:	4313      	orrs	r3, r2
         );
}
 801417e:	4618      	mov	r0, r3
 8014180:	3724      	adds	r7, #36	; 0x24
 8014182:	46bd      	mov	sp, r7
 8014184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014188:	4770      	bx	lr
	...

0801418c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	3b01      	subs	r3, #1
 8014198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801419c:	d301      	bcc.n	80141a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801419e:	2301      	movs	r3, #1
 80141a0:	e00f      	b.n	80141c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80141a2:	4a0a      	ldr	r2, [pc, #40]	; (80141cc <SysTick_Config+0x40>)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	3b01      	subs	r3, #1
 80141a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80141aa:	210f      	movs	r1, #15
 80141ac:	f04f 30ff 	mov.w	r0, #4294967295
 80141b0:	f7ff ff90 	bl	80140d4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80141b4:	4b05      	ldr	r3, [pc, #20]	; (80141cc <SysTick_Config+0x40>)
 80141b6:	2200      	movs	r2, #0
 80141b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80141ba:	4b04      	ldr	r3, [pc, #16]	; (80141cc <SysTick_Config+0x40>)
 80141bc:	2207      	movs	r2, #7
 80141be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80141c0:	2300      	movs	r3, #0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3708      	adds	r7, #8
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}
 80141ca:	bf00      	nop
 80141cc:	e000e010 	.word	0xe000e010

080141d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff ff15 	bl	8014008 <NVIC_SetPriorityGrouping>
}
 80141de:	bf00      	nop
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b086      	sub	sp, #24
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	4603      	mov	r3, r0
 80141ee:	60b9      	str	r1, [r7, #8]
 80141f0:	607a      	str	r2, [r7, #4]
 80141f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80141f4:	2300      	movs	r3, #0
 80141f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80141f8:	f7ff ff2a 	bl	8014050 <NVIC_GetPriorityGrouping>
 80141fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	68b9      	ldr	r1, [r7, #8]
 8014202:	6978      	ldr	r0, [r7, #20]
 8014204:	f7ff ff90 	bl	8014128 <NVIC_EncodePriority>
 8014208:	4602      	mov	r2, r0
 801420a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801420e:	4611      	mov	r1, r2
 8014210:	4618      	mov	r0, r3
 8014212:	f7ff ff5f 	bl	80140d4 <NVIC_SetPriority>
}
 8014216:	bf00      	nop
 8014218:	3718      	adds	r7, #24
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b082      	sub	sp, #8
 8014222:	af00      	add	r7, sp, #0
 8014224:	4603      	mov	r3, r0
 8014226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801422c:	4618      	mov	r0, r3
 801422e:	f7ff ff1d 	bl	801406c <NVIC_EnableIRQ>
}
 8014232:	bf00      	nop
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}

0801423a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	b082      	sub	sp, #8
 801423e:	af00      	add	r7, sp, #0
 8014240:	4603      	mov	r3, r0
 8014242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8014244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014248:	4618      	mov	r0, r3
 801424a:	f7ff ff29 	bl	80140a0 <NVIC_DisableIRQ>
}
 801424e:	bf00      	nop
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}

08014256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8014256:	b580      	push	{r7, lr}
 8014258:	b082      	sub	sp, #8
 801425a:	af00      	add	r7, sp, #0
 801425c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7ff ff94 	bl	801418c <SysTick_Config>
 8014264:	4603      	mov	r3, r0
}
 8014266:	4618      	mov	r0, r3
 8014268:	3708      	adds	r7, #8
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
	...

08014270 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8014270:	b480      	push	{r7}
 8014272:	b083      	sub	sp, #12
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2b04      	cmp	r3, #4
 801427c:	d106      	bne.n	801428c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 801427e:	4a09      	ldr	r2, [pc, #36]	; (80142a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8014280:	4b08      	ldr	r3, [pc, #32]	; (80142a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f043 0304 	orr.w	r3, r3, #4
 8014288:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 801428a:	e005      	b.n	8014298 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801428c:	4a05      	ldr	r2, [pc, #20]	; (80142a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 801428e:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	f023 0304 	bic.w	r3, r3, #4
 8014296:	6013      	str	r3, [r2, #0]
}
 8014298:	bf00      	nop
 801429a:	370c      	adds	r7, #12
 801429c:	46bd      	mov	sp, r7
 801429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a2:	4770      	bx	lr
 80142a4:	e000e010 	.word	0xe000e010

080142a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80142a8:	b480      	push	{r7}
 80142aa:	b089      	sub	sp, #36	; 0x24
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80142b2:	2300      	movs	r3, #0
 80142b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80142b6:	2300      	movs	r3, #0
 80142b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80142ba:	2300      	movs	r3, #0
 80142bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80142be:	2300      	movs	r3, #0
 80142c0:	61fb      	str	r3, [r7, #28]
 80142c2:	e16b      	b.n	801459c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80142c4:	2201      	movs	r2, #1
 80142c6:	69fb      	ldr	r3, [r7, #28]
 80142c8:	fa02 f303 	lsl.w	r3, r2, r3
 80142cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	4013      	ands	r3, r2
 80142d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80142d8:	693a      	ldr	r2, [r7, #16]
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	429a      	cmp	r2, r3
 80142de:	f040 815a 	bne.w	8014596 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	685b      	ldr	r3, [r3, #4]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d003      	beq.n	80142f2 <HAL_GPIO_Init+0x4a>
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	2b12      	cmp	r3, #18
 80142f0:	d123      	bne.n	801433a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	08da      	lsrs	r2, r3, #3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	3208      	adds	r2, #8
 80142fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	f003 0307 	and.w	r3, r3, #7
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	220f      	movs	r2, #15
 801430a:	fa02 f303 	lsl.w	r3, r2, r3
 801430e:	43db      	mvns	r3, r3
 8014310:	69ba      	ldr	r2, [r7, #24]
 8014312:	4013      	ands	r3, r2
 8014314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	691a      	ldr	r2, [r3, #16]
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	f003 0307 	and.w	r3, r3, #7
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	fa02 f303 	lsl.w	r3, r2, r3
 8014326:	69ba      	ldr	r2, [r7, #24]
 8014328:	4313      	orrs	r3, r2
 801432a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	08da      	lsrs	r2, r3, #3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	3208      	adds	r2, #8
 8014334:	69b9      	ldr	r1, [r7, #24]
 8014336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	005b      	lsls	r3, r3, #1
 8014344:	2203      	movs	r2, #3
 8014346:	fa02 f303 	lsl.w	r3, r2, r3
 801434a:	43db      	mvns	r3, r3
 801434c:	69ba      	ldr	r2, [r7, #24]
 801434e:	4013      	ands	r3, r2
 8014350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	f003 0203 	and.w	r2, r3, #3
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	005b      	lsls	r3, r3, #1
 801435e:	fa02 f303 	lsl.w	r3, r2, r3
 8014362:	69ba      	ldr	r2, [r7, #24]
 8014364:	4313      	orrs	r3, r2
 8014366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	69ba      	ldr	r2, [r7, #24]
 801436c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	2b01      	cmp	r3, #1
 8014374:	d00b      	beq.n	801438e <HAL_GPIO_Init+0xe6>
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	2b02      	cmp	r3, #2
 801437c:	d007      	beq.n	801438e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8014382:	2b11      	cmp	r3, #17
 8014384:	d003      	beq.n	801438e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	2b12      	cmp	r3, #18
 801438c:	d130      	bne.n	80143f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	689b      	ldr	r3, [r3, #8]
 8014392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	005b      	lsls	r3, r3, #1
 8014398:	2203      	movs	r2, #3
 801439a:	fa02 f303 	lsl.w	r3, r2, r3
 801439e:	43db      	mvns	r3, r3
 80143a0:	69ba      	ldr	r2, [r7, #24]
 80143a2:	4013      	ands	r3, r2
 80143a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	68da      	ldr	r2, [r3, #12]
 80143aa:	69fb      	ldr	r3, [r7, #28]
 80143ac:	005b      	lsls	r3, r3, #1
 80143ae:	fa02 f303 	lsl.w	r3, r2, r3
 80143b2:	69ba      	ldr	r2, [r7, #24]
 80143b4:	4313      	orrs	r3, r2
 80143b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	69ba      	ldr	r2, [r7, #24]
 80143bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80143c4:	2201      	movs	r2, #1
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	fa02 f303 	lsl.w	r3, r2, r3
 80143cc:	43db      	mvns	r3, r3
 80143ce:	69ba      	ldr	r2, [r7, #24]
 80143d0:	4013      	ands	r3, r2
 80143d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	091b      	lsrs	r3, r3, #4
 80143da:	f003 0201 	and.w	r2, r3, #1
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	fa02 f303 	lsl.w	r3, r2, r3
 80143e4:	69ba      	ldr	r2, [r7, #24]
 80143e6:	4313      	orrs	r3, r2
 80143e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	69ba      	ldr	r2, [r7, #24]
 80143ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	68db      	ldr	r3, [r3, #12]
 80143f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	2203      	movs	r2, #3
 80143fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014400:	43db      	mvns	r3, r3
 8014402:	69ba      	ldr	r2, [r7, #24]
 8014404:	4013      	ands	r3, r2
 8014406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	689a      	ldr	r2, [r3, #8]
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	005b      	lsls	r3, r3, #1
 8014410:	fa02 f303 	lsl.w	r3, r2, r3
 8014414:	69ba      	ldr	r2, [r7, #24]
 8014416:	4313      	orrs	r3, r2
 8014418:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	69ba      	ldr	r2, [r7, #24]
 801441e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014428:	2b00      	cmp	r3, #0
 801442a:	f000 80b4 	beq.w	8014596 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801442e:	2300      	movs	r3, #0
 8014430:	60fb      	str	r3, [r7, #12]
 8014432:	4a5f      	ldr	r2, [pc, #380]	; (80145b0 <HAL_GPIO_Init+0x308>)
 8014434:	4b5e      	ldr	r3, [pc, #376]	; (80145b0 <HAL_GPIO_Init+0x308>)
 8014436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801443c:	6453      	str	r3, [r2, #68]	; 0x44
 801443e:	4b5c      	ldr	r3, [pc, #368]	; (80145b0 <HAL_GPIO_Init+0x308>)
 8014440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014446:	60fb      	str	r3, [r7, #12]
 8014448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801444a:	4a5a      	ldr	r2, [pc, #360]	; (80145b4 <HAL_GPIO_Init+0x30c>)
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	089b      	lsrs	r3, r3, #2
 8014450:	3302      	adds	r3, #2
 8014452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8014458:	69fb      	ldr	r3, [r7, #28]
 801445a:	f003 0303 	and.w	r3, r3, #3
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	220f      	movs	r2, #15
 8014462:	fa02 f303 	lsl.w	r3, r2, r3
 8014466:	43db      	mvns	r3, r3
 8014468:	69ba      	ldr	r2, [r7, #24]
 801446a:	4013      	ands	r3, r2
 801446c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4a51      	ldr	r2, [pc, #324]	; (80145b8 <HAL_GPIO_Init+0x310>)
 8014472:	4293      	cmp	r3, r2
 8014474:	d02b      	beq.n	80144ce <HAL_GPIO_Init+0x226>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	4a50      	ldr	r2, [pc, #320]	; (80145bc <HAL_GPIO_Init+0x314>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d025      	beq.n	80144ca <HAL_GPIO_Init+0x222>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4a4f      	ldr	r2, [pc, #316]	; (80145c0 <HAL_GPIO_Init+0x318>)
 8014482:	4293      	cmp	r3, r2
 8014484:	d01f      	beq.n	80144c6 <HAL_GPIO_Init+0x21e>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	4a4e      	ldr	r2, [pc, #312]	; (80145c4 <HAL_GPIO_Init+0x31c>)
 801448a:	4293      	cmp	r3, r2
 801448c:	d019      	beq.n	80144c2 <HAL_GPIO_Init+0x21a>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	4a4d      	ldr	r2, [pc, #308]	; (80145c8 <HAL_GPIO_Init+0x320>)
 8014492:	4293      	cmp	r3, r2
 8014494:	d013      	beq.n	80144be <HAL_GPIO_Init+0x216>
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	4a4c      	ldr	r2, [pc, #304]	; (80145cc <HAL_GPIO_Init+0x324>)
 801449a:	4293      	cmp	r3, r2
 801449c:	d00d      	beq.n	80144ba <HAL_GPIO_Init+0x212>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	4a4b      	ldr	r2, [pc, #300]	; (80145d0 <HAL_GPIO_Init+0x328>)
 80144a2:	4293      	cmp	r3, r2
 80144a4:	d007      	beq.n	80144b6 <HAL_GPIO_Init+0x20e>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	4a4a      	ldr	r2, [pc, #296]	; (80145d4 <HAL_GPIO_Init+0x32c>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d101      	bne.n	80144b2 <HAL_GPIO_Init+0x20a>
 80144ae:	2307      	movs	r3, #7
 80144b0:	e00e      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144b2:	2308      	movs	r3, #8
 80144b4:	e00c      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144b6:	2306      	movs	r3, #6
 80144b8:	e00a      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144ba:	2305      	movs	r3, #5
 80144bc:	e008      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144be:	2304      	movs	r3, #4
 80144c0:	e006      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144c2:	2303      	movs	r3, #3
 80144c4:	e004      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144c6:	2302      	movs	r3, #2
 80144c8:	e002      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144ca:	2301      	movs	r3, #1
 80144cc:	e000      	b.n	80144d0 <HAL_GPIO_Init+0x228>
 80144ce:	2300      	movs	r3, #0
 80144d0:	69fa      	ldr	r2, [r7, #28]
 80144d2:	f002 0203 	and.w	r2, r2, #3
 80144d6:	0092      	lsls	r2, r2, #2
 80144d8:	4093      	lsls	r3, r2
 80144da:	69ba      	ldr	r2, [r7, #24]
 80144dc:	4313      	orrs	r3, r2
 80144de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80144e0:	4934      	ldr	r1, [pc, #208]	; (80145b4 <HAL_GPIO_Init+0x30c>)
 80144e2:	69fb      	ldr	r3, [r7, #28]
 80144e4:	089b      	lsrs	r3, r3, #2
 80144e6:	3302      	adds	r3, #2
 80144e8:	69ba      	ldr	r2, [r7, #24]
 80144ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80144ee:	4b3a      	ldr	r3, [pc, #232]	; (80145d8 <HAL_GPIO_Init+0x330>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	43db      	mvns	r3, r3
 80144f8:	69ba      	ldr	r2, [r7, #24]
 80144fa:	4013      	ands	r3, r2
 80144fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014506:	2b00      	cmp	r3, #0
 8014508:	d003      	beq.n	8014512 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801450a:	69ba      	ldr	r2, [r7, #24]
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	4313      	orrs	r3, r2
 8014510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8014512:	4a31      	ldr	r2, [pc, #196]	; (80145d8 <HAL_GPIO_Init+0x330>)
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8014518:	4b2f      	ldr	r3, [pc, #188]	; (80145d8 <HAL_GPIO_Init+0x330>)
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	43db      	mvns	r3, r3
 8014522:	69ba      	ldr	r2, [r7, #24]
 8014524:	4013      	ands	r3, r2
 8014526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014530:	2b00      	cmp	r3, #0
 8014532:	d003      	beq.n	801453c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8014534:	69ba      	ldr	r2, [r7, #24]
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	4313      	orrs	r3, r2
 801453a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801453c:	4a26      	ldr	r2, [pc, #152]	; (80145d8 <HAL_GPIO_Init+0x330>)
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014542:	4b25      	ldr	r3, [pc, #148]	; (80145d8 <HAL_GPIO_Init+0x330>)
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	43db      	mvns	r3, r3
 801454c:	69ba      	ldr	r2, [r7, #24]
 801454e:	4013      	ands	r3, r2
 8014550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801455a:	2b00      	cmp	r3, #0
 801455c:	d003      	beq.n	8014566 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801455e:	69ba      	ldr	r2, [r7, #24]
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	4313      	orrs	r3, r2
 8014564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8014566:	4a1c      	ldr	r2, [pc, #112]	; (80145d8 <HAL_GPIO_Init+0x330>)
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801456c:	4b1a      	ldr	r3, [pc, #104]	; (80145d8 <HAL_GPIO_Init+0x330>)
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	43db      	mvns	r3, r3
 8014576:	69ba      	ldr	r2, [r7, #24]
 8014578:	4013      	ands	r3, r2
 801457a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	685b      	ldr	r3, [r3, #4]
 8014580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014584:	2b00      	cmp	r3, #0
 8014586:	d003      	beq.n	8014590 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8014588:	69ba      	ldr	r2, [r7, #24]
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	4313      	orrs	r3, r2
 801458e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8014590:	4a11      	ldr	r2, [pc, #68]	; (80145d8 <HAL_GPIO_Init+0x330>)
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	3301      	adds	r3, #1
 801459a:	61fb      	str	r3, [r7, #28]
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	2b0f      	cmp	r3, #15
 80145a0:	f67f ae90 	bls.w	80142c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80145a4:	bf00      	nop
 80145a6:	3724      	adds	r7, #36	; 0x24
 80145a8:	46bd      	mov	sp, r7
 80145aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ae:	4770      	bx	lr
 80145b0:	40023800 	.word	0x40023800
 80145b4:	40013800 	.word	0x40013800
 80145b8:	40020000 	.word	0x40020000
 80145bc:	40020400 	.word	0x40020400
 80145c0:	40020800 	.word	0x40020800
 80145c4:	40020c00 	.word	0x40020c00
 80145c8:	40021000 	.word	0x40021000
 80145cc:	40021400 	.word	0x40021400
 80145d0:	40021800 	.word	0x40021800
 80145d4:	40021c00 	.word	0x40021c00
 80145d8:	40013c00 	.word	0x40013c00

080145dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	460b      	mov	r3, r1
 80145e6:	807b      	strh	r3, [r7, #2]
 80145e8:	4613      	mov	r3, r2
 80145ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80145ec:	787b      	ldrb	r3, [r7, #1]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d003      	beq.n	80145fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80145f2:	887a      	ldrh	r2, [r7, #2]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80145f8:	e003      	b.n	8014602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80145fa:	887b      	ldrh	r3, [r7, #2]
 80145fc:	041a      	lsls	r2, r3, #16
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	619a      	str	r2, [r3, #24]
}
 8014602:	bf00      	nop
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr
	...

08014610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b08e      	sub	sp, #56	; 0x38
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8014618:	2300      	movs	r3, #0
 801461a:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f003 0301 	and.w	r3, r3, #1
 8014624:	2b00      	cmp	r3, #0
 8014626:	d075      	beq.n	8014714 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014628:	4ba4      	ldr	r3, [pc, #656]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801462a:	689b      	ldr	r3, [r3, #8]
 801462c:	f003 030c 	and.w	r3, r3, #12
 8014630:	2b04      	cmp	r3, #4
 8014632:	d00c      	beq.n	801464e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014634:	4ba1      	ldr	r3, [pc, #644]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014636:	689b      	ldr	r3, [r3, #8]
 8014638:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801463c:	2b08      	cmp	r3, #8
 801463e:	d112      	bne.n	8014666 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014640:	4b9e      	ldr	r3, [pc, #632]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801464c:	d10b      	bne.n	8014666 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801464e:	4b9b      	ldr	r3, [pc, #620]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014656:	2b00      	cmp	r3, #0
 8014658:	d05b      	beq.n	8014712 <HAL_RCC_OscConfig+0x102>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d157      	bne.n	8014712 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8014662:	2301      	movs	r3, #1
 8014664:	e224      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	685b      	ldr	r3, [r3, #4]
 801466a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801466e:	d106      	bne.n	801467e <HAL_RCC_OscConfig+0x6e>
 8014670:	4a92      	ldr	r2, [pc, #584]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014672:	4b92      	ldr	r3, [pc, #584]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	e01d      	b.n	80146ba <HAL_RCC_OscConfig+0xaa>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014686:	d10c      	bne.n	80146a2 <HAL_RCC_OscConfig+0x92>
 8014688:	4a8c      	ldr	r2, [pc, #560]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801468a:	4b8c      	ldr	r3, [pc, #560]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014692:	6013      	str	r3, [r2, #0]
 8014694:	4a89      	ldr	r2, [pc, #548]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014696:	4b89      	ldr	r3, [pc, #548]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801469e:	6013      	str	r3, [r2, #0]
 80146a0:	e00b      	b.n	80146ba <HAL_RCC_OscConfig+0xaa>
 80146a2:	4a86      	ldr	r2, [pc, #536]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80146a4:	4b85      	ldr	r3, [pc, #532]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80146ac:	6013      	str	r3, [r2, #0]
 80146ae:	4a83      	ldr	r2, [pc, #524]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80146b0:	4b82      	ldr	r3, [pc, #520]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80146b8:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d013      	beq.n	80146ea <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146c2:	f7ff fc77 	bl	8013fb4 <HAL_GetTick>
 80146c6:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80146c8:	e008      	b.n	80146dc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80146ca:	f7ff fc73 	bl	8013fb4 <HAL_GetTick>
 80146ce:	4602      	mov	r2, r0
 80146d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	2b64      	cmp	r3, #100	; 0x64
 80146d6:	d901      	bls.n	80146dc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80146d8:	2303      	movs	r3, #3
 80146da:	e1e9      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80146dc:	4b77      	ldr	r3, [pc, #476]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d0f0      	beq.n	80146ca <HAL_RCC_OscConfig+0xba>
 80146e8:	e014      	b.n	8014714 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146ea:	f7ff fc63 	bl	8013fb4 <HAL_GetTick>
 80146ee:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80146f0:	e008      	b.n	8014704 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80146f2:	f7ff fc5f 	bl	8013fb4 <HAL_GetTick>
 80146f6:	4602      	mov	r2, r0
 80146f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	2b64      	cmp	r3, #100	; 0x64
 80146fe:	d901      	bls.n	8014704 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8014700:	2303      	movs	r3, #3
 8014702:	e1d5      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014704:	4b6d      	ldr	r3, [pc, #436]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801470c:	2b00      	cmp	r3, #0
 801470e:	d1f0      	bne.n	80146f2 <HAL_RCC_OscConfig+0xe2>
 8014710:	e000      	b.n	8014714 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014712:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f003 0302 	and.w	r3, r3, #2
 801471c:	2b00      	cmp	r3, #0
 801471e:	d077      	beq.n	8014810 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014720:	4b66      	ldr	r3, [pc, #408]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014722:	689b      	ldr	r3, [r3, #8]
 8014724:	f003 030c 	and.w	r3, r3, #12
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00b      	beq.n	8014744 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801472c:	4b63      	ldr	r3, [pc, #396]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014734:	2b08      	cmp	r3, #8
 8014736:	d126      	bne.n	8014786 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014738:	4b60      	ldr	r3, [pc, #384]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014740:	2b00      	cmp	r3, #0
 8014742:	d120      	bne.n	8014786 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014744:	4b5d      	ldr	r3, [pc, #372]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	f003 0302 	and.w	r3, r3, #2
 801474c:	2b00      	cmp	r3, #0
 801474e:	d005      	beq.n	801475c <HAL_RCC_OscConfig+0x14c>
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	2b01      	cmp	r3, #1
 8014756:	d001      	beq.n	801475c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8014758:	2301      	movs	r3, #1
 801475a:	e1a9      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801475c:	4857      	ldr	r0, [pc, #348]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801475e:	4b57      	ldr	r3, [pc, #348]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6919      	ldr	r1, [r3, #16]
 801476a:	23f8      	movs	r3, #248	; 0xf8
 801476c:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014770:	fa93 f3a3 	rbit	r3, r3
 8014774:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8014776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014778:	fab3 f383 	clz	r3, r3
 801477c:	fa01 f303 	lsl.w	r3, r1, r3
 8014780:	4313      	orrs	r3, r2
 8014782:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014784:	e044      	b.n	8014810 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d02a      	beq.n	80147e4 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801478e:	4b4c      	ldr	r3, [pc, #304]	; (80148c0 <HAL_RCC_OscConfig+0x2b0>)
 8014790:	2201      	movs	r2, #1
 8014792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014794:	f7ff fc0e 	bl	8013fb4 <HAL_GetTick>
 8014798:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801479a:	e008      	b.n	80147ae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801479c:	f7ff fc0a 	bl	8013fb4 <HAL_GetTick>
 80147a0:	4602      	mov	r2, r0
 80147a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a4:	1ad3      	subs	r3, r2, r3
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d901      	bls.n	80147ae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80147aa:	2303      	movs	r3, #3
 80147ac:	e180      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80147ae:	4b43      	ldr	r3, [pc, #268]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f003 0302 	and.w	r3, r3, #2
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d0f0      	beq.n	801479c <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80147ba:	4840      	ldr	r0, [pc, #256]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80147bc:	4b3f      	ldr	r3, [pc, #252]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6919      	ldr	r1, [r3, #16]
 80147c8:	23f8      	movs	r3, #248	; 0xf8
 80147ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80147cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ce:	fa93 f3a3 	rbit	r3, r3
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	fab3 f383 	clz	r3, r3
 80147da:	fa01 f303 	lsl.w	r3, r1, r3
 80147de:	4313      	orrs	r3, r2
 80147e0:	6003      	str	r3, [r0, #0]
 80147e2:	e015      	b.n	8014810 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80147e4:	4b36      	ldr	r3, [pc, #216]	; (80148c0 <HAL_RCC_OscConfig+0x2b0>)
 80147e6:	2200      	movs	r2, #0
 80147e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147ea:	f7ff fbe3 	bl	8013fb4 <HAL_GetTick>
 80147ee:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80147f0:	e008      	b.n	8014804 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80147f2:	f7ff fbdf 	bl	8013fb4 <HAL_GetTick>
 80147f6:	4602      	mov	r2, r0
 80147f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147fa:	1ad3      	subs	r3, r2, r3
 80147fc:	2b02      	cmp	r3, #2
 80147fe:	d901      	bls.n	8014804 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8014800:	2303      	movs	r3, #3
 8014802:	e155      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014804:	4b2d      	ldr	r3, [pc, #180]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f003 0302 	and.w	r3, r3, #2
 801480c:	2b00      	cmp	r3, #0
 801480e:	d1f0      	bne.n	80147f2 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	f003 0308 	and.w	r3, r3, #8
 8014818:	2b00      	cmp	r3, #0
 801481a:	d030      	beq.n	801487e <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	695b      	ldr	r3, [r3, #20]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d016      	beq.n	8014852 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014824:	4b27      	ldr	r3, [pc, #156]	; (80148c4 <HAL_RCC_OscConfig+0x2b4>)
 8014826:	2201      	movs	r2, #1
 8014828:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801482a:	f7ff fbc3 	bl	8013fb4 <HAL_GetTick>
 801482e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014830:	e008      	b.n	8014844 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014832:	f7ff fbbf 	bl	8013fb4 <HAL_GetTick>
 8014836:	4602      	mov	r2, r0
 8014838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	2b02      	cmp	r3, #2
 801483e:	d901      	bls.n	8014844 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8014840:	2303      	movs	r3, #3
 8014842:	e135      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014844:	4b1d      	ldr	r3, [pc, #116]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014848:	f003 0302 	and.w	r3, r3, #2
 801484c:	2b00      	cmp	r3, #0
 801484e:	d0f0      	beq.n	8014832 <HAL_RCC_OscConfig+0x222>
 8014850:	e015      	b.n	801487e <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014852:	4b1c      	ldr	r3, [pc, #112]	; (80148c4 <HAL_RCC_OscConfig+0x2b4>)
 8014854:	2200      	movs	r2, #0
 8014856:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014858:	f7ff fbac 	bl	8013fb4 <HAL_GetTick>
 801485c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801485e:	e008      	b.n	8014872 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014860:	f7ff fba8 	bl	8013fb4 <HAL_GetTick>
 8014864:	4602      	mov	r2, r0
 8014866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014868:	1ad3      	subs	r3, r2, r3
 801486a:	2b02      	cmp	r3, #2
 801486c:	d901      	bls.n	8014872 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 801486e:	2303      	movs	r3, #3
 8014870:	e11e      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014872:	4b12      	ldr	r3, [pc, #72]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014876:	f003 0302 	and.w	r3, r3, #2
 801487a:	2b00      	cmp	r3, #0
 801487c:	d1f0      	bne.n	8014860 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f003 0304 	and.w	r3, r3, #4
 8014886:	2b00      	cmp	r3, #0
 8014888:	f000 8086 	beq.w	8014998 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801488c:	2300      	movs	r3, #0
 801488e:	60bb      	str	r3, [r7, #8]
 8014890:	4a0a      	ldr	r2, [pc, #40]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014892:	4b0a      	ldr	r3, [pc, #40]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 8014894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801489a:	6413      	str	r3, [r2, #64]	; 0x40
 801489c:	4b07      	ldr	r3, [pc, #28]	; (80148bc <HAL_RCC_OscConfig+0x2ac>)
 801489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148a4:	60bb      	str	r3, [r7, #8]
 80148a6:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80148a8:	4a07      	ldr	r2, [pc, #28]	; (80148c8 <HAL_RCC_OscConfig+0x2b8>)
 80148aa:	4b07      	ldr	r3, [pc, #28]	; (80148c8 <HAL_RCC_OscConfig+0x2b8>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80148b2:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80148b4:	f7ff fb7e 	bl	8013fb4 <HAL_GetTick>
 80148b8:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80148ba:	e010      	b.n	80148de <HAL_RCC_OscConfig+0x2ce>
 80148bc:	40023800 	.word	0x40023800
 80148c0:	42470000 	.word	0x42470000
 80148c4:	42470e80 	.word	0x42470e80
 80148c8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80148cc:	f7ff fb72 	bl	8013fb4 <HAL_GetTick>
 80148d0:	4602      	mov	r2, r0
 80148d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148d4:	1ad3      	subs	r3, r2, r3
 80148d6:	2b02      	cmp	r3, #2
 80148d8:	d901      	bls.n	80148de <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80148da:	2303      	movs	r3, #3
 80148dc:	e0e8      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80148de:	4b76      	ldr	r3, [pc, #472]	; (8014ab8 <HAL_RCC_OscConfig+0x4a8>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d0f0      	beq.n	80148cc <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	689b      	ldr	r3, [r3, #8]
 80148ee:	2b01      	cmp	r3, #1
 80148f0:	d106      	bne.n	8014900 <HAL_RCC_OscConfig+0x2f0>
 80148f2:	4a72      	ldr	r2, [pc, #456]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 80148f4:	4b71      	ldr	r3, [pc, #452]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 80148f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148f8:	f043 0301 	orr.w	r3, r3, #1
 80148fc:	6713      	str	r3, [r2, #112]	; 0x70
 80148fe:	e01c      	b.n	801493a <HAL_RCC_OscConfig+0x32a>
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	689b      	ldr	r3, [r3, #8]
 8014904:	2b05      	cmp	r3, #5
 8014906:	d10c      	bne.n	8014922 <HAL_RCC_OscConfig+0x312>
 8014908:	4a6c      	ldr	r2, [pc, #432]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 801490a:	4b6c      	ldr	r3, [pc, #432]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 801490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801490e:	f043 0304 	orr.w	r3, r3, #4
 8014912:	6713      	str	r3, [r2, #112]	; 0x70
 8014914:	4a69      	ldr	r2, [pc, #420]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014916:	4b69      	ldr	r3, [pc, #420]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801491a:	f043 0301 	orr.w	r3, r3, #1
 801491e:	6713      	str	r3, [r2, #112]	; 0x70
 8014920:	e00b      	b.n	801493a <HAL_RCC_OscConfig+0x32a>
 8014922:	4a66      	ldr	r2, [pc, #408]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014924:	4b65      	ldr	r3, [pc, #404]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014928:	f023 0301 	bic.w	r3, r3, #1
 801492c:	6713      	str	r3, [r2, #112]	; 0x70
 801492e:	4a63      	ldr	r2, [pc, #396]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014930:	4b62      	ldr	r3, [pc, #392]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014934:	f023 0304 	bic.w	r3, r3, #4
 8014938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d015      	beq.n	801496e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014942:	f7ff fb37 	bl	8013fb4 <HAL_GetTick>
 8014946:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014948:	e00a      	b.n	8014960 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801494a:	f7ff fb33 	bl	8013fb4 <HAL_GetTick>
 801494e:	4602      	mov	r2, r0
 8014950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014952:	1ad3      	subs	r3, r2, r3
 8014954:	f241 3288 	movw	r2, #5000	; 0x1388
 8014958:	4293      	cmp	r3, r2
 801495a:	d901      	bls.n	8014960 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801495c:	2303      	movs	r3, #3
 801495e:	e0a7      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014960:	4b56      	ldr	r3, [pc, #344]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014964:	f003 0302 	and.w	r3, r3, #2
 8014968:	2b00      	cmp	r3, #0
 801496a:	d0ee      	beq.n	801494a <HAL_RCC_OscConfig+0x33a>
 801496c:	e014      	b.n	8014998 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801496e:	f7ff fb21 	bl	8013fb4 <HAL_GetTick>
 8014972:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014974:	e00a      	b.n	801498c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014976:	f7ff fb1d 	bl	8013fb4 <HAL_GetTick>
 801497a:	4602      	mov	r2, r0
 801497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801497e:	1ad3      	subs	r3, r2, r3
 8014980:	f241 3288 	movw	r2, #5000	; 0x1388
 8014984:	4293      	cmp	r3, r2
 8014986:	d901      	bls.n	801498c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8014988:	2303      	movs	r3, #3
 801498a:	e091      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801498c:	4b4b      	ldr	r3, [pc, #300]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 801498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014990:	f003 0302 	and.w	r3, r3, #2
 8014994:	2b00      	cmp	r3, #0
 8014996:	d1ee      	bne.n	8014976 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	699b      	ldr	r3, [r3, #24]
 801499c:	2b00      	cmp	r3, #0
 801499e:	f000 8086 	beq.w	8014aae <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80149a2:	4b46      	ldr	r3, [pc, #280]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 80149a4:	689b      	ldr	r3, [r3, #8]
 80149a6:	f003 030c 	and.w	r3, r3, #12
 80149aa:	2b08      	cmp	r3, #8
 80149ac:	d07d      	beq.n	8014aaa <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	699b      	ldr	r3, [r3, #24]
 80149b2:	2b02      	cmp	r3, #2
 80149b4:	d162      	bne.n	8014a7c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80149b6:	4b42      	ldr	r3, [pc, #264]	; (8014ac0 <HAL_RCC_OscConfig+0x4b0>)
 80149b8:	2200      	movs	r2, #0
 80149ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80149bc:	f7ff fafa 	bl	8013fb4 <HAL_GetTick>
 80149c0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80149c2:	e008      	b.n	80149d6 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80149c4:	f7ff faf6 	bl	8013fb4 <HAL_GetTick>
 80149c8:	4602      	mov	r2, r0
 80149ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149cc:	1ad3      	subs	r3, r2, r3
 80149ce:	2b02      	cmp	r3, #2
 80149d0:	d901      	bls.n	80149d6 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80149d2:	2303      	movs	r3, #3
 80149d4:	e06c      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80149d6:	4b39      	ldr	r3, [pc, #228]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d1f0      	bne.n	80149c4 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80149e2:	4836      	ldr	r0, [pc, #216]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	69da      	ldr	r2, [r3, #28]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a1b      	ldr	r3, [r3, #32]
 80149ec:	431a      	orrs	r2, r3
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80149f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80149f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	fa93 f3a3 	rbit	r3, r3
 80149fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	fab3 f383 	clz	r3, r3
 8014a06:	fa01 f303 	lsl.w	r3, r1, r3
 8014a0a:	431a      	orrs	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a10:	085b      	lsrs	r3, r3, #1
 8014a12:	1e59      	subs	r1, r3, #1
 8014a14:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	fa93 f3a3 	rbit	r3, r3
 8014a20:	617b      	str	r3, [r7, #20]
  return(result);
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	fab3 f383 	clz	r3, r3
 8014a28:	fa01 f303 	lsl.w	r3, r1, r3
 8014a2c:	431a      	orrs	r2, r3
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014a32:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8014a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014a38:	6a3b      	ldr	r3, [r7, #32]
 8014a3a:	fa93 f3a3 	rbit	r3, r3
 8014a3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8014a40:	69fb      	ldr	r3, [r7, #28]
 8014a42:	fab3 f383 	clz	r3, r3
 8014a46:	fa01 f303 	lsl.w	r3, r1, r3
 8014a4a:	4313      	orrs	r3, r2
 8014a4c:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014a4e:	4b1c      	ldr	r3, [pc, #112]	; (8014ac0 <HAL_RCC_OscConfig+0x4b0>)
 8014a50:	2201      	movs	r2, #1
 8014a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a54:	f7ff faae 	bl	8013fb4 <HAL_GetTick>
 8014a58:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014a5a:	e008      	b.n	8014a6e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014a5c:	f7ff faaa 	bl	8013fb4 <HAL_GetTick>
 8014a60:	4602      	mov	r2, r0
 8014a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a64:	1ad3      	subs	r3, r2, r3
 8014a66:	2b02      	cmp	r3, #2
 8014a68:	d901      	bls.n	8014a6e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8014a6a:	2303      	movs	r3, #3
 8014a6c:	e020      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014a6e:	4b13      	ldr	r3, [pc, #76]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d0f0      	beq.n	8014a5c <HAL_RCC_OscConfig+0x44c>
 8014a7a:	e018      	b.n	8014aae <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014a7c:	4b10      	ldr	r3, [pc, #64]	; (8014ac0 <HAL_RCC_OscConfig+0x4b0>)
 8014a7e:	2200      	movs	r2, #0
 8014a80:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a82:	f7ff fa97 	bl	8013fb4 <HAL_GetTick>
 8014a86:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014a88:	e008      	b.n	8014a9c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014a8a:	f7ff fa93 	bl	8013fb4 <HAL_GetTick>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d901      	bls.n	8014a9c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	e009      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014a9c:	4b07      	ldr	r3, [pc, #28]	; (8014abc <HAL_RCC_OscConfig+0x4ac>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d1f0      	bne.n	8014a8a <HAL_RCC_OscConfig+0x47a>
 8014aa8:	e001      	b.n	8014aae <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e000      	b.n	8014ab0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8014aae:	2300      	movs	r3, #0
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3738      	adds	r7, #56	; 0x38
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	40007000 	.word	0x40007000
 8014abc:	40023800 	.word	0x40023800
 8014ac0:	42470060 	.word	0x42470060

08014ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8014ace:	2300      	movs	r3, #0
 8014ad0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8014ad2:	4b81      	ldr	r3, [pc, #516]	; (8014cd8 <HAL_RCC_ClockConfig+0x214>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f003 020f 	and.w	r2, r3, #15
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d20c      	bcs.n	8014afa <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014ae0:	4b7d      	ldr	r3, [pc, #500]	; (8014cd8 <HAL_RCC_ClockConfig+0x214>)
 8014ae2:	683a      	ldr	r2, [r7, #0]
 8014ae4:	b2d2      	uxtb	r2, r2
 8014ae6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8014ae8:	4b7b      	ldr	r3, [pc, #492]	; (8014cd8 <HAL_RCC_ClockConfig+0x214>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	f003 020f 	and.w	r2, r3, #15
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	429a      	cmp	r2, r3
 8014af4:	d001      	beq.n	8014afa <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8014af6:	2301      	movs	r3, #1
 8014af8:	e0ea      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f003 0302 	and.w	r3, r3, #2
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d008      	beq.n	8014b18 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014b06:	4975      	ldr	r1, [pc, #468]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b08:	4b74      	ldr	r3, [pc, #464]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b0a:	689b      	ldr	r3, [r3, #8]
 8014b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	689b      	ldr	r3, [r3, #8]
 8014b14:	4313      	orrs	r3, r2
 8014b16:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f003 0301 	and.w	r3, r3, #1
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	f000 8086 	beq.w	8014c32 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	2b01      	cmp	r3, #1
 8014b2c:	d107      	bne.n	8014b3e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014b2e:	4b6b      	ldr	r3, [pc, #428]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d119      	bne.n	8014b6e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	e0c8      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	2b02      	cmp	r3, #2
 8014b44:	d003      	beq.n	8014b4e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8014b4a:	2b03      	cmp	r3, #3
 8014b4c:	d107      	bne.n	8014b5e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014b4e:	4b63      	ldr	r3, [pc, #396]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d109      	bne.n	8014b6e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	e0b8      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014b5e:	4b5f      	ldr	r3, [pc, #380]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f003 0302 	and.w	r3, r3, #2
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d101      	bne.n	8014b6e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e0b0      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014b6e:	495b      	ldr	r1, [pc, #364]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b70:	4b5a      	ldr	r3, [pc, #360]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	f023 0203 	bic.w	r2, r3, #3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	4313      	orrs	r3, r2
 8014b7e:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014b80:	f7ff fa18 	bl	8013fb4 <HAL_GetTick>
 8014b84:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	d112      	bne.n	8014bb4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014b8e:	e00a      	b.n	8014ba6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014b90:	f7ff fa10 	bl	8013fb4 <HAL_GetTick>
 8014b94:	4602      	mov	r2, r0
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	1ad3      	subs	r3, r2, r3
 8014b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d901      	bls.n	8014ba6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8014ba2:	2303      	movs	r3, #3
 8014ba4:	e094      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014ba6:	4b4d      	ldr	r3, [pc, #308]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014ba8:	689b      	ldr	r3, [r3, #8]
 8014baa:	f003 030c 	and.w	r3, r3, #12
 8014bae:	2b04      	cmp	r3, #4
 8014bb0:	d1ee      	bne.n	8014b90 <HAL_RCC_ClockConfig+0xcc>
 8014bb2:	e03e      	b.n	8014c32 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	2b02      	cmp	r3, #2
 8014bba:	d112      	bne.n	8014be2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014bbc:	e00a      	b.n	8014bd4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014bbe:	f7ff f9f9 	bl	8013fb4 <HAL_GetTick>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	1ad3      	subs	r3, r2, r3
 8014bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d901      	bls.n	8014bd4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8014bd0:	2303      	movs	r3, #3
 8014bd2:	e07d      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014bd4:	4b41      	ldr	r3, [pc, #260]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014bd6:	689b      	ldr	r3, [r3, #8]
 8014bd8:	f003 030c 	and.w	r3, r3, #12
 8014bdc:	2b08      	cmp	r3, #8
 8014bde:	d1ee      	bne.n	8014bbe <HAL_RCC_ClockConfig+0xfa>
 8014be0:	e027      	b.n	8014c32 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	2b03      	cmp	r3, #3
 8014be8:	d11d      	bne.n	8014c26 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8014bea:	e00a      	b.n	8014c02 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014bec:	f7ff f9e2 	bl	8013fb4 <HAL_GetTick>
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	1ad3      	subs	r3, r2, r3
 8014bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d901      	bls.n	8014c02 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8014bfe:	2303      	movs	r3, #3
 8014c00:	e066      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8014c02:	4b36      	ldr	r3, [pc, #216]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014c04:	689b      	ldr	r3, [r3, #8]
 8014c06:	f003 030c 	and.w	r3, r3, #12
 8014c0a:	2b0c      	cmp	r3, #12
 8014c0c:	d1ee      	bne.n	8014bec <HAL_RCC_ClockConfig+0x128>
 8014c0e:	e010      	b.n	8014c32 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c10:	f7ff f9d0 	bl	8013fb4 <HAL_GetTick>
 8014c14:	4602      	mov	r2, r0
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d901      	bls.n	8014c26 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8014c22:	2303      	movs	r3, #3
 8014c24:	e054      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014c26:	4b2d      	ldr	r3, [pc, #180]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014c28:	689b      	ldr	r3, [r3, #8]
 8014c2a:	f003 030c 	and.w	r3, r3, #12
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1ee      	bne.n	8014c10 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8014c32:	4b29      	ldr	r3, [pc, #164]	; (8014cd8 <HAL_RCC_ClockConfig+0x214>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	f003 020f 	and.w	r2, r3, #15
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d90c      	bls.n	8014c5a <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014c40:	4b25      	ldr	r3, [pc, #148]	; (8014cd8 <HAL_RCC_ClockConfig+0x214>)
 8014c42:	683a      	ldr	r2, [r7, #0]
 8014c44:	b2d2      	uxtb	r2, r2
 8014c46:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8014c48:	4b23      	ldr	r3, [pc, #140]	; (8014cd8 <HAL_RCC_ClockConfig+0x214>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	f003 020f 	and.w	r2, r3, #15
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d001      	beq.n	8014c5a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8014c56:	2301      	movs	r3, #1
 8014c58:	e03a      	b.n	8014cd0 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	f003 0304 	and.w	r3, r3, #4
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d008      	beq.n	8014c78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014c66:	491d      	ldr	r1, [pc, #116]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014c68:	4b1c      	ldr	r3, [pc, #112]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	68db      	ldr	r3, [r3, #12]
 8014c74:	4313      	orrs	r3, r2
 8014c76:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	f003 0308 	and.w	r3, r3, #8
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d009      	beq.n	8014c98 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014c84:	4915      	ldr	r1, [pc, #84]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014c86:	4b15      	ldr	r3, [pc, #84]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014c88:	689b      	ldr	r3, [r3, #8]
 8014c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	691b      	ldr	r3, [r3, #16]
 8014c92:	00db      	lsls	r3, r3, #3
 8014c94:	4313      	orrs	r3, r2
 8014c96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8014c98:	f000 f826 	bl	8014ce8 <HAL_RCC_GetSysClockFreq>
 8014c9c:	4601      	mov	r1, r0
 8014c9e:	4b0f      	ldr	r3, [pc, #60]	; (8014cdc <HAL_RCC_ClockConfig+0x218>)
 8014ca0:	689b      	ldr	r3, [r3, #8]
 8014ca2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014ca6:	23f0      	movs	r3, #240	; 0xf0
 8014ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	fa93 f3a3 	rbit	r3, r3
 8014cb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	fab3 f383 	clz	r3, r3
 8014cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8014cbc:	4a08      	ldr	r2, [pc, #32]	; (8014ce0 <HAL_RCC_ClockConfig+0x21c>)
 8014cbe:	5cd3      	ldrb	r3, [r2, r3]
 8014cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8014cc4:	4a07      	ldr	r2, [pc, #28]	; (8014ce4 <HAL_RCC_ClockConfig+0x220>)
 8014cc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8014cc8:	2000      	movs	r0, #0
 8014cca:	f7ff f957 	bl	8013f7c <HAL_InitTick>
  
  return HAL_OK;
 8014cce:	2300      	movs	r3, #0
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3718      	adds	r7, #24
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	40023c00 	.word	0x40023c00
 8014cdc:	40023800 	.word	0x40023800
 8014ce0:	0801c670 	.word	0x0801c670
 8014ce4:	20000000 	.word	0x20000000

08014ce8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b08b      	sub	sp, #44	; 0x2c
 8014cec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	61fb      	str	r3, [r7, #28]
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014cfe:	4b36      	ldr	r3, [pc, #216]	; (8014dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8014d00:	689b      	ldr	r3, [r3, #8]
 8014d02:	f003 030c 	and.w	r3, r3, #12
 8014d06:	2b04      	cmp	r3, #4
 8014d08:	d006      	beq.n	8014d18 <HAL_RCC_GetSysClockFreq+0x30>
 8014d0a:	2b08      	cmp	r3, #8
 8014d0c:	d007      	beq.n	8014d1e <HAL_RCC_GetSysClockFreq+0x36>
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d158      	bne.n	8014dc4 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014d12:	4b32      	ldr	r3, [pc, #200]	; (8014ddc <HAL_RCC_GetSysClockFreq+0xf4>)
 8014d14:	623b      	str	r3, [r7, #32]
       break;
 8014d16:	e058      	b.n	8014dca <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014d18:	4b31      	ldr	r3, [pc, #196]	; (8014de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8014d1a:	623b      	str	r3, [r7, #32]
      break;
 8014d1c:	e055      	b.n	8014dca <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014d1e:	4b2e      	ldr	r3, [pc, #184]	; (8014dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d26:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014d28:	4b2b      	ldr	r3, [pc, #172]	; (8014dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d017      	beq.n	8014d64 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8014d34:	4a2a      	ldr	r2, [pc, #168]	; (8014de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8014d36:	69fb      	ldr	r3, [r7, #28]
 8014d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8014d3c:	4b26      	ldr	r3, [pc, #152]	; (8014dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8014d3e:	6859      	ldr	r1, [r3, #4]
 8014d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014d44:	400b      	ands	r3, r1
 8014d46:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8014d4a:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014d4c:	6979      	ldr	r1, [r7, #20]
 8014d4e:	fa91 f1a1 	rbit	r1, r1
 8014d52:	6139      	str	r1, [r7, #16]
  return(result);
 8014d54:	6939      	ldr	r1, [r7, #16]
 8014d56:	fab1 f181 	clz	r1, r1
 8014d5a:	40cb      	lsrs	r3, r1
 8014d5c:	fb03 f302 	mul.w	r3, r3, r2
 8014d60:	627b      	str	r3, [r7, #36]	; 0x24
 8014d62:	e016      	b.n	8014d92 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8014d64:	4a1d      	ldr	r2, [pc, #116]	; (8014ddc <HAL_RCC_GetSysClockFreq+0xf4>)
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8014d6c:	4b1a      	ldr	r3, [pc, #104]	; (8014dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8014d6e:	6859      	ldr	r1, [r3, #4]
 8014d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014d74:	400b      	ands	r3, r1
 8014d76:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8014d7a:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014d7c:	68f9      	ldr	r1, [r7, #12]
 8014d7e:	fa91 f1a1 	rbit	r1, r1
 8014d82:	60b9      	str	r1, [r7, #8]
  return(result);
 8014d84:	68b9      	ldr	r1, [r7, #8]
 8014d86:	fab1 f181 	clz	r1, r1
 8014d8a:	40cb      	lsrs	r3, r1
 8014d8c:	fb03 f302 	mul.w	r3, r3, r2
 8014d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8014d92:	4b11      	ldr	r3, [pc, #68]	; (8014dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014d9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014d9e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	fa93 f3a3 	rbit	r3, r3
 8014da6:	603b      	str	r3, [r7, #0]
  return(result);
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	fab3 f383 	clz	r3, r3
 8014dae:	fa22 f303 	lsr.w	r3, r2, r3
 8014db2:	3301      	adds	r3, #1
 8014db4:	005b      	lsls	r3, r3, #1
 8014db6:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8014db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014dba:	69bb      	ldr	r3, [r7, #24]
 8014dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014dc0:	623b      	str	r3, [r7, #32]
      break;
 8014dc2:	e002      	b.n	8014dca <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014dc4:	4b05      	ldr	r3, [pc, #20]	; (8014ddc <HAL_RCC_GetSysClockFreq+0xf4>)
 8014dc6:	623b      	str	r3, [r7, #32]
      break;
 8014dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014dca:	6a3b      	ldr	r3, [r7, #32]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	372c      	adds	r7, #44	; 0x2c
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr
 8014dd8:	40023800 	.word	0x40023800
 8014ddc:	00f42400 	.word	0x00f42400
 8014de0:	007a1200 	.word	0x007a1200

08014de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014de4:	b480      	push	{r7}
 8014de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014de8:	4b03      	ldr	r3, [pc, #12]	; (8014df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8014dea:	681b      	ldr	r3, [r3, #0]
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	46bd      	mov	sp, r7
 8014df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df4:	4770      	bx	lr
 8014df6:	bf00      	nop
 8014df8:	20000000 	.word	0x20000000

08014dfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d101      	bne.n	8014e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	e055      	b.n	8014eba <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014e1a:	b2db      	uxtb	r3, r3
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d106      	bne.n	8014e2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7eb ffdb 	bl	8000de4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2202      	movs	r2, #2
 8014e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	6812      	ldr	r2, [r2, #0]
 8014e3e:	6812      	ldr	r2, [r2, #0]
 8014e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014e44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	6851      	ldr	r1, [r2, #4]
 8014e4e:	687a      	ldr	r2, [r7, #4]
 8014e50:	6892      	ldr	r2, [r2, #8]
 8014e52:	4311      	orrs	r1, r2
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	68d2      	ldr	r2, [r2, #12]
 8014e58:	4311      	orrs	r1, r2
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	6912      	ldr	r2, [r2, #16]
 8014e5e:	4311      	orrs	r1, r2
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	6952      	ldr	r2, [r2, #20]
 8014e64:	4311      	orrs	r1, r2
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	6992      	ldr	r2, [r2, #24]
 8014e6a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8014e6e:	4311      	orrs	r1, r2
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	69d2      	ldr	r2, [r2, #28]
 8014e74:	4311      	orrs	r1, r2
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	6a12      	ldr	r2, [r2, #32]
 8014e7a:	4311      	orrs	r1, r2
 8014e7c:	687a      	ldr	r2, [r7, #4]
 8014e7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014e80:	430a      	orrs	r2, r1
 8014e82:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	6992      	ldr	r2, [r2, #24]
 8014e8c:	0c12      	lsrs	r2, r2, #16
 8014e8e:	f002 0104 	and.w	r1, r2, #4
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014e96:	430a      	orrs	r2, r1
 8014e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	687a      	ldr	r2, [r7, #4]
 8014ea0:	6812      	ldr	r2, [r2, #0]
 8014ea2:	69d2      	ldr	r2, [r2, #28]
 8014ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014ea8:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2200      	movs	r2, #0
 8014eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b08a      	sub	sp, #40	; 0x28
 8014ec6:	af02      	add	r7, sp, #8
 8014ec8:	60f8      	str	r0, [r7, #12]
 8014eca:	60b9      	str	r1, [r7, #8]
 8014ecc:	603b      	str	r3, [r7, #0]
 8014ece:	4613      	mov	r3, r2
 8014ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d101      	bne.n	8014ee8 <HAL_SPI_Transmit+0x26>
 8014ee4:	2302      	movs	r3, #2
 8014ee6:	e123      	b.n	8015130 <HAL_SPI_Transmit+0x26e>
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2201      	movs	r2, #1
 8014eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ef0:	f7ff f860 	bl	8013fb4 <HAL_GetTick>
 8014ef4:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d002      	beq.n	8014f08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8014f02:	2302      	movs	r3, #2
 8014f04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014f06:	e10a      	b.n	801511e <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d002      	beq.n	8014f14 <HAL_SPI_Transmit+0x52>
 8014f0e:	88fb      	ldrh	r3, [r7, #6]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d102      	bne.n	8014f1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8014f14:	2301      	movs	r3, #1
 8014f16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014f18:	e101      	b.n	801511e <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2203      	movs	r2, #3
 8014f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	68ba      	ldr	r2, [r7, #8]
 8014f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	88fa      	ldrh	r2, [r7, #6]
 8014f32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	88fa      	ldrh	r2, [r7, #6]
 8014f38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2200      	movs	r2, #0
 8014f44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	2200      	movs	r2, #0
 8014f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	689b      	ldr	r3, [r3, #8]
 8014f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f60:	d107      	bne.n	8014f72 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	68fa      	ldr	r2, [r7, #12]
 8014f68:	6812      	ldr	r2, [r2, #0]
 8014f6a:	6812      	ldr	r2, [r2, #0]
 8014f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f7c:	2b40      	cmp	r3, #64	; 0x40
 8014f7e:	d007      	beq.n	8014f90 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	6812      	ldr	r2, [r2, #0]
 8014f88:	6812      	ldr	r2, [r2, #0]
 8014f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f98:	d147      	bne.n	801502a <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d004      	beq.n	8014fac <HAL_SPI_Transmit+0xea>
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d138      	bne.n	801501e <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	68ba      	ldr	r2, [r7, #8]
 8014fb2:	8812      	ldrh	r2, [r2, #0]
 8014fb4:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	3302      	adds	r3, #2
 8014fba:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	3b01      	subs	r3, #1
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8014fca:	e028      	b.n	801501e <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	f003 0302 	and.w	r3, r3, #2
 8014fd6:	2b02      	cmp	r3, #2
 8014fd8:	d10f      	bne.n	8014ffa <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	68ba      	ldr	r2, [r7, #8]
 8014fe0:	8812      	ldrh	r2, [r2, #0]
 8014fe2:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	3302      	adds	r3, #2
 8014fe8:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	b29a      	uxth	r2, r3
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	86da      	strh	r2, [r3, #54]	; 0x36
 8014ff8:	e011      	b.n	801501e <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d00b      	beq.n	8015018 <HAL_SPI_Transmit+0x156>
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015006:	d00a      	beq.n	801501e <HAL_SPI_Transmit+0x15c>
 8015008:	f7fe ffd4 	bl	8013fb4 <HAL_GetTick>
 801500c:	4602      	mov	r2, r0
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	1ad2      	subs	r2, r2, r3
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	429a      	cmp	r2, r3
 8015016:	d302      	bcc.n	801501e <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8015018:	2303      	movs	r3, #3
 801501a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801501c:	e07f      	b.n	801511e <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015022:	b29b      	uxth	r3, r3
 8015024:	2b00      	cmp	r3, #0
 8015026:	d1d1      	bne.n	8014fcc <HAL_SPI_Transmit+0x10a>
 8015028:	e048      	b.n	80150bc <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d004      	beq.n	801503c <HAL_SPI_Transmit+0x17a>
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015036:	b29b      	uxth	r3, r3
 8015038:	2b01      	cmp	r3, #1
 801503a:	d13a      	bne.n	80150b2 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	330c      	adds	r3, #12
 8015042:	68ba      	ldr	r2, [r7, #8]
 8015044:	7812      	ldrb	r2, [r2, #0]
 8015046:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	3301      	adds	r3, #1
 801504c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015052:	b29b      	uxth	r3, r3
 8015054:	3b01      	subs	r3, #1
 8015056:	b29a      	uxth	r2, r3
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801505c:	e029      	b.n	80150b2 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	f003 0302 	and.w	r3, r3, #2
 8015068:	2b02      	cmp	r3, #2
 801506a:	d110      	bne.n	801508e <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	330c      	adds	r3, #12
 8015072:	68ba      	ldr	r2, [r7, #8]
 8015074:	7812      	ldrb	r2, [r2, #0]
 8015076:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	3301      	adds	r3, #1
 801507c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015082:	b29b      	uxth	r3, r3
 8015084:	3b01      	subs	r3, #1
 8015086:	b29a      	uxth	r2, r3
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	86da      	strh	r2, [r3, #54]	; 0x36
 801508c:	e011      	b.n	80150b2 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d00b      	beq.n	80150ac <HAL_SPI_Transmit+0x1ea>
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801509a:	d00a      	beq.n	80150b2 <HAL_SPI_Transmit+0x1f0>
 801509c:	f7fe ff8a 	bl	8013fb4 <HAL_GetTick>
 80150a0:	4602      	mov	r2, r0
 80150a2:	69bb      	ldr	r3, [r7, #24]
 80150a4:	1ad2      	subs	r2, r2, r3
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d302      	bcc.n	80150b2 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80150ac:	2303      	movs	r3, #3
 80150ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80150b0:	e035      	b.n	801511e <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d1d0      	bne.n	801505e <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	9300      	str	r3, [sp, #0]
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	2201      	movs	r2, #1
 80150c4:	2102      	movs	r1, #2
 80150c6:	68f8      	ldr	r0, [r7, #12]
 80150c8:	f000 fae3 	bl	8015692 <SPI_WaitFlagStateUntilTimeout>
 80150cc:	4603      	mov	r3, r0
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d002      	beq.n	80150d8 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 80150d2:	2303      	movs	r3, #3
 80150d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80150d6:	e022      	b.n	801511e <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80150d8:	69ba      	ldr	r2, [r7, #24]
 80150da:	6839      	ldr	r1, [r7, #0]
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f000 fb41 	bl	8015764 <SPI_CheckFlag_BSY>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d005      	beq.n	80150f4 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 80150e8:	2301      	movs	r3, #1
 80150ea:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2220      	movs	r2, #32
 80150f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80150f2:	e014      	b.n	801511e <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	689b      	ldr	r3, [r3, #8]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d10a      	bne.n	8015112 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80150fc:	2300      	movs	r3, #0
 80150fe:	617b      	str	r3, [r7, #20]
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	68db      	ldr	r3, [r3, #12]
 8015106:	617b      	str	r3, [r7, #20]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	617b      	str	r3, [r7, #20]
 8015110:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015116:	2b00      	cmp	r3, #0
 8015118:	d001      	beq.n	801511e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801511a:	2301      	movs	r3, #1
 801511c:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	2201      	movs	r2, #1
 8015122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2200      	movs	r2, #0
 801512a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801512e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015130:	4618      	mov	r0, r3
 8015132:	3720      	adds	r7, #32
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b088      	sub	sp, #32
 801513c:	af02      	add	r7, sp, #8
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	603b      	str	r3, [r7, #0]
 8015144:	4613      	mov	r3, r2
 8015146:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8015148:	2300      	movs	r3, #0
 801514a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015158:	d112      	bne.n	8015180 <HAL_SPI_Receive+0x48>
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	689b      	ldr	r3, [r3, #8]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d10e      	bne.n	8015180 <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2204      	movs	r2, #4
 8015166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 801516a:	88fa      	ldrh	r2, [r7, #6]
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	9300      	str	r3, [sp, #0]
 8015170:	4613      	mov	r3, r2
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	68b9      	ldr	r1, [r7, #8]
 8015176:	68f8      	ldr	r0, [r7, #12]
 8015178:	f000 f8ec 	bl	8015354 <HAL_SPI_TransmitReceive>
 801517c:	4603      	mov	r3, r0
 801517e:	e0e5      	b.n	801534c <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015186:	2b01      	cmp	r3, #1
 8015188:	d101      	bne.n	801518e <HAL_SPI_Receive+0x56>
 801518a:	2302      	movs	r3, #2
 801518c:	e0de      	b.n	801534c <HAL_SPI_Receive+0x214>
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	2201      	movs	r2, #1
 8015192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015196:	f7fe ff0d 	bl	8013fb4 <HAL_GetTick>
 801519a:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80151a2:	b2db      	uxtb	r3, r3
 80151a4:	2b01      	cmp	r3, #1
 80151a6:	d002      	beq.n	80151ae <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 80151a8:	2302      	movs	r3, #2
 80151aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80151ac:	e0c5      	b.n	801533a <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0))
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d002      	beq.n	80151ba <HAL_SPI_Receive+0x82>
 80151b4:	88fb      	ldrh	r3, [r7, #6]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d102      	bne.n	80151c0 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80151ba:	2301      	movs	r3, #1
 80151bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80151be:	e0bc      	b.n	801533a <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	2204      	movs	r2, #4
 80151c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2200      	movs	r2, #0
 80151cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	68ba      	ldr	r2, [r7, #8]
 80151d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	88fa      	ldrh	r2, [r7, #6]
 80151d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	88fa      	ldrh	r2, [r7, #6]
 80151de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2200      	movs	r2, #0
 80151e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2200      	movs	r2, #0
 80151ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	2200      	movs	r2, #0
 80151f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2200      	movs	r2, #0
 80151f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2200      	movs	r2, #0
 80151fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	689b      	ldr	r3, [r3, #8]
 8015202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015206:	d107      	bne.n	8015218 <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	68fa      	ldr	r2, [r7, #12]
 801520e:	6812      	ldr	r2, [r2, #0]
 8015210:	6812      	ldr	r2, [r2, #0]
 8015212:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8015216:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015222:	2b40      	cmp	r3, #64	; 0x40
 8015224:	d007      	beq.n	8015236 <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	6812      	ldr	r2, [r2, #0]
 801522e:	6812      	ldr	r2, [r2, #0]
 8015230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015234:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	68db      	ldr	r3, [r3, #12]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d15b      	bne.n	80152f6 <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 801523e:	e02a      	b.n	8015296 <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	689b      	ldr	r3, [r3, #8]
 8015246:	f003 0301 	and.w	r3, r3, #1
 801524a:	2b01      	cmp	r3, #1
 801524c:	d111      	bne.n	8015272 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	330c      	adds	r3, #12
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	b2da      	uxtb	r2, r3
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	3301      	adds	r3, #1
 8015260:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015266:	b29b      	uxth	r3, r3
 8015268:	3b01      	subs	r3, #1
 801526a:	b29a      	uxth	r2, r3
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015270:	e011      	b.n	8015296 <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00b      	beq.n	8015290 <HAL_SPI_Receive+0x158>
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801527e:	d00a      	beq.n	8015296 <HAL_SPI_Receive+0x15e>
 8015280:	f7fe fe98 	bl	8013fb4 <HAL_GetTick>
 8015284:	4602      	mov	r2, r0
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	1ad2      	subs	r2, r2, r3
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	429a      	cmp	r2, r3
 801528e:	d302      	bcc.n	8015296 <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8015290:	2303      	movs	r3, #3
 8015292:	75fb      	strb	r3, [r7, #23]
          goto error;
 8015294:	e051      	b.n	801533a <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801529a:	b29b      	uxth	r3, r3
 801529c:	2b00      	cmp	r3, #0
 801529e:	d1cf      	bne.n	8015240 <HAL_SPI_Receive+0x108>
 80152a0:	e02e      	b.n	8015300 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	689b      	ldr	r3, [r3, #8]
 80152a8:	f003 0301 	and.w	r3, r3, #1
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	d110      	bne.n	80152d2 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	b29a      	uxth	r2, r3
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	3302      	adds	r3, #2
 80152c0:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	3b01      	subs	r3, #1
 80152ca:	b29a      	uxth	r2, r3
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80152d0:	e011      	b.n	80152f6 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00b      	beq.n	80152f0 <HAL_SPI_Receive+0x1b8>
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152de:	d00a      	beq.n	80152f6 <HAL_SPI_Receive+0x1be>
 80152e0:	f7fe fe68 	bl	8013fb4 <HAL_GetTick>
 80152e4:	4602      	mov	r2, r0
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	1ad2      	subs	r2, r2, r3
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d302      	bcc.n	80152f6 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 80152f0:	2303      	movs	r3, #3
 80152f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80152f4:	e021      	b.n	801533a <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d1d0      	bne.n	80152a2 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015308:	d111      	bne.n	801532e <HAL_SPI_Receive+0x1f6>
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	689b      	ldr	r3, [r3, #8]
 801530e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015312:	d004      	beq.n	801531e <HAL_SPI_Receive+0x1e6>
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	689b      	ldr	r3, [r3, #8]
 8015318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801531c:	d107      	bne.n	801532e <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	6812      	ldr	r2, [r2, #0]
 8015326:	6812      	ldr	r2, [r2, #0]
 8015328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801532c:	601a      	str	r2, [r3, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 8015336:	2301      	movs	r3, #1
 8015338:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2201      	movs	r2, #1
 801533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2200      	movs	r2, #0
 8015346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801534a:	7dfb      	ldrb	r3, [r7, #23]
}
 801534c:	4618      	mov	r0, r3
 801534e:	3718      	adds	r7, #24
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b08c      	sub	sp, #48	; 0x30
 8015358:	af02      	add	r7, sp, #8
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	607a      	str	r2, [r7, #4]
 8015360:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8015362:	2300      	movs	r3, #0
 8015364:	61fb      	str	r3, [r7, #28]
 8015366:	2300      	movs	r3, #0
 8015368:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 801536a:	2300      	movs	r3, #0
 801536c:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 801536e:	2301      	movs	r3, #1
 8015370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8015372:	2300      	movs	r3, #0
 8015374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801537e:	2b01      	cmp	r3, #1
 8015380:	d101      	bne.n	8015386 <HAL_SPI_TransmitReceive+0x32>
 8015382:	2302      	movs	r3, #2
 8015384:	e181      	b.n	801568a <HAL_SPI_TransmitReceive+0x336>
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2201      	movs	r2, #1
 801538a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801538e:	f7fe fe11 	bl	8013fb4 <HAL_GetTick>
 8015392:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801539a:	b2db      	uxtb	r3, r3
 801539c:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d00e      	beq.n	80153c8 <HAL_SPI_TransmitReceive+0x74>
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80153b0:	d106      	bne.n	80153c0 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	689b      	ldr	r3, [r3, #8]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d102      	bne.n	80153c0 <HAL_SPI_TransmitReceive+0x6c>
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	2b04      	cmp	r3, #4
 80153be:	d003      	beq.n	80153c8 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80153c0:	2302      	movs	r3, #2
 80153c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80153c6:	e156      	b.n	8015676 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d005      	beq.n	80153da <HAL_SPI_TransmitReceive+0x86>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d002      	beq.n	80153da <HAL_SPI_TransmitReceive+0x86>
 80153d4:	887b      	ldrh	r3, [r7, #2]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d103      	bne.n	80153e2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80153da:	2301      	movs	r3, #1
 80153dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80153e0:	e149      	b.n	8015676 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d103      	bne.n	80153f6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2205      	movs	r2, #5
 80153f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2200      	movs	r2, #0
 80153fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	887a      	ldrh	r2, [r7, #2]
 8015406:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	887a      	ldrh	r2, [r7, #2]
 801540c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	68ba      	ldr	r2, [r7, #8]
 8015412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	887a      	ldrh	r2, [r7, #2]
 8015418:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	887a      	ldrh	r2, [r7, #2]
 801541e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	2200      	movs	r2, #0
 8015424:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2200      	movs	r2, #0
 801542a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015436:	2b40      	cmp	r3, #64	; 0x40
 8015438:	d007      	beq.n	801544a <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	6812      	ldr	r2, [r2, #0]
 8015442:	6812      	ldr	r2, [r2, #0]
 8015444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015448:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015452:	d171      	bne.n	8015538 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d004      	beq.n	8015466 <HAL_SPI_TransmitReceive+0x112>
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015460:	b29b      	uxth	r3, r3
 8015462:	2b01      	cmp	r3, #1
 8015464:	d15d      	bne.n	8015522 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	68ba      	ldr	r2, [r7, #8]
 801546c:	8812      	ldrh	r2, [r2, #0]
 801546e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	3302      	adds	r3, #2
 8015474:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801547a:	b29b      	uxth	r3, r3
 801547c:	3b01      	subs	r3, #1
 801547e:	b29a      	uxth	r2, r3
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015484:	e04d      	b.n	8015522 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8015486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015488:	2b00      	cmp	r3, #0
 801548a:	d01c      	beq.n	80154c6 <HAL_SPI_TransmitReceive+0x172>
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015490:	b29b      	uxth	r3, r3
 8015492:	2b00      	cmp	r3, #0
 8015494:	d017      	beq.n	80154c6 <HAL_SPI_TransmitReceive+0x172>
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	689b      	ldr	r3, [r3, #8]
 801549c:	f003 0302 	and.w	r3, r3, #2
 80154a0:	2b02      	cmp	r3, #2
 80154a2:	d110      	bne.n	80154c6 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	68ba      	ldr	r2, [r7, #8]
 80154aa:	8812      	ldrh	r2, [r2, #0]
 80154ac:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	3302      	adds	r3, #2
 80154b2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	3b01      	subs	r3, #1
 80154bc:	b29a      	uxth	r2, r3
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80154c2:	2300      	movs	r3, #0
 80154c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d018      	beq.n	8015502 <HAL_SPI_TransmitReceive+0x1ae>
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	689b      	ldr	r3, [r3, #8]
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	2b01      	cmp	r3, #1
 80154dc:	d111      	bne.n	8015502 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	b29a      	uxth	r2, r3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	3302      	adds	r3, #2
 80154ee:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	3b01      	subs	r3, #1
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80154fe:	2301      	movs	r3, #1
 8015500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8015502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015508:	d00b      	beq.n	8015522 <HAL_SPI_TransmitReceive+0x1ce>
 801550a:	f7fe fd53 	bl	8013fb4 <HAL_GetTick>
 801550e:	4602      	mov	r2, r0
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	1ad2      	subs	r2, r2, r3
 8015514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015516:	429a      	cmp	r2, r3
 8015518:	d303      	bcc.n	8015522 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 801551a:	2303      	movs	r3, #3
 801551c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8015520:	e0a9      	b.n	8015676 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015526:	b29b      	uxth	r3, r3
 8015528:	2b00      	cmp	r3, #0
 801552a:	d1ac      	bne.n	8015486 <HAL_SPI_TransmitReceive+0x132>
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015530:	b29b      	uxth	r3, r3
 8015532:	2b00      	cmp	r3, #0
 8015534:	d1a7      	bne.n	8015486 <HAL_SPI_TransmitReceive+0x132>
 8015536:	e071      	b.n	801561c <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d004      	beq.n	801554a <HAL_SPI_TransmitReceive+0x1f6>
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015544:	b29b      	uxth	r3, r3
 8015546:	2b01      	cmp	r3, #1
 8015548:	d15e      	bne.n	8015608 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	330c      	adds	r3, #12
 8015550:	68ba      	ldr	r2, [r7, #8]
 8015552:	7812      	ldrb	r2, [r2, #0]
 8015554:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	3301      	adds	r3, #1
 801555a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015560:	b29b      	uxth	r3, r3
 8015562:	3b01      	subs	r3, #1
 8015564:	b29a      	uxth	r2, r3
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801556a:	e04d      	b.n	8015608 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 801556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556e:	2b00      	cmp	r3, #0
 8015570:	d01d      	beq.n	80155ae <HAL_SPI_TransmitReceive+0x25a>
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015576:	b29b      	uxth	r3, r3
 8015578:	2b00      	cmp	r3, #0
 801557a:	d018      	beq.n	80155ae <HAL_SPI_TransmitReceive+0x25a>
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	689b      	ldr	r3, [r3, #8]
 8015582:	f003 0302 	and.w	r3, r3, #2
 8015586:	2b02      	cmp	r3, #2
 8015588:	d111      	bne.n	80155ae <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	f103 020c 	add.w	r2, r3, #12
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	1c59      	adds	r1, r3, #1
 8015596:	60b9      	str	r1, [r7, #8]
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	3b01      	subs	r3, #1
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80155aa:	2300      	movs	r3, #0
 80155ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d017      	beq.n	80155e8 <HAL_SPI_TransmitReceive+0x294>
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	689b      	ldr	r3, [r3, #8]
 80155be:	f003 0301 	and.w	r3, r3, #1
 80155c2:	2b01      	cmp	r3, #1
 80155c4:	d110      	bne.n	80155e8 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	1c5a      	adds	r2, r3, #1
 80155ca:	607a      	str	r2, [r7, #4]
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	6812      	ldr	r2, [r2, #0]
 80155d0:	68d2      	ldr	r2, [r2, #12]
 80155d2:	b2d2      	uxtb	r2, r2
 80155d4:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80155da:	b29b      	uxth	r3, r3
 80155dc:	3b01      	subs	r3, #1
 80155de:	b29a      	uxth	r2, r3
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80155e4:	2301      	movs	r3, #1
 80155e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80155e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ee:	d00b      	beq.n	8015608 <HAL_SPI_TransmitReceive+0x2b4>
 80155f0:	f7fe fce0 	bl	8013fb4 <HAL_GetTick>
 80155f4:	4602      	mov	r2, r0
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	1ad2      	subs	r2, r2, r3
 80155fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d303      	bcc.n	8015608 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8015600:	2303      	movs	r3, #3
 8015602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8015606:	e036      	b.n	8015676 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801560c:	b29b      	uxth	r3, r3
 801560e:	2b00      	cmp	r3, #0
 8015610:	d1ac      	bne.n	801556c <HAL_SPI_TransmitReceive+0x218>
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015616:	b29b      	uxth	r3, r3
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1a7      	bne.n	801556c <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	9300      	str	r3, [sp, #0]
 8015620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015622:	2201      	movs	r2, #1
 8015624:	2102      	movs	r1, #2
 8015626:	68f8      	ldr	r0, [r7, #12]
 8015628:	f000 f833 	bl	8015692 <SPI_WaitFlagStateUntilTimeout>
 801562c:	4603      	mov	r3, r0
 801562e:	2b00      	cmp	r3, #0
 8015630:	d003      	beq.n	801563a <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8015632:	2303      	movs	r3, #3
 8015634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8015638:	e01d      	b.n	8015676 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 801563a:	697a      	ldr	r2, [r7, #20]
 801563c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	f000 f890 	bl	8015764 <SPI_CheckFlag_BSY>
 8015644:	4603      	mov	r3, r0
 8015646:	2b00      	cmp	r3, #0
 8015648:	d006      	beq.n	8015658 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 801564a:	2301      	movs	r3, #1
 801564c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2220      	movs	r2, #32
 8015654:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8015656:	e00e      	b.n	8015676 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	689b      	ldr	r3, [r3, #8]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d10a      	bne.n	8015676 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015660:	2300      	movs	r3, #0
 8015662:	613b      	str	r3, [r7, #16]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	613b      	str	r3, [r7, #16]
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	689b      	ldr	r3, [r3, #8]
 8015672:	613b      	str	r3, [r7, #16]
 8015674:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	2201      	movs	r2, #1
 801567a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2200      	movs	r2, #0
 8015682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8015686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801568a:	4618      	mov	r0, r3
 801568c:	3728      	adds	r7, #40	; 0x28
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}

08015692 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b084      	sub	sp, #16
 8015696:	af00      	add	r7, sp, #0
 8015698:	60f8      	str	r0, [r7, #12]
 801569a:	60b9      	str	r1, [r7, #8]
 801569c:	607a      	str	r2, [r7, #4]
 801569e:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80156a0:	e04d      	b.n	801573e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156a8:	d049      	beq.n	801573e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d007      	beq.n	80156c0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80156b0:	f7fe fc80 	bl	8013fb4 <HAL_GetTick>
 80156b4:	4602      	mov	r2, r0
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	1ad2      	subs	r2, r2, r3
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d33e      	bcc.n	801573e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	68fa      	ldr	r2, [r7, #12]
 80156c6:	6812      	ldr	r2, [r2, #0]
 80156c8:	6852      	ldr	r2, [r2, #4]
 80156ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80156ce:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80156d8:	d111      	bne.n	80156fe <SPI_WaitFlagStateUntilTimeout+0x6c>
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	689b      	ldr	r3, [r3, #8]
 80156de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156e2:	d004      	beq.n	80156ee <SPI_WaitFlagStateUntilTimeout+0x5c>
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	689b      	ldr	r3, [r3, #8]
 80156e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80156ec:	d107      	bne.n	80156fe <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	68fa      	ldr	r2, [r7, #12]
 80156f4:	6812      	ldr	r2, [r2, #0]
 80156f6:	6812      	ldr	r2, [r2, #0]
 80156f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80156fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015706:	d110      	bne.n	801572a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	6819      	ldr	r1, [r3, #0]
 8015712:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8015716:	400b      	ands	r3, r1
 8015718:	6013      	str	r3, [r2, #0]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	68fa      	ldr	r2, [r7, #12]
 8015720:	6812      	ldr	r2, [r2, #0]
 8015722:	6812      	ldr	r2, [r2, #0]
 8015724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015728:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2201      	movs	r2, #1
 801572e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	2200      	movs	r2, #0
 8015736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801573a:	2303      	movs	r3, #3
 801573c:	e00e      	b.n	801575c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	689a      	ldr	r2, [r3, #8]
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	401a      	ands	r2, r3
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	429a      	cmp	r2, r3
 801574c:	d101      	bne.n	8015752 <SPI_WaitFlagStateUntilTimeout+0xc0>
 801574e:	2201      	movs	r2, #1
 8015750:	e000      	b.n	8015754 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8015752:	2200      	movs	r2, #0
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	429a      	cmp	r2, r3
 8015758:	d1a3      	bne.n	80156a2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 801575a:	2300      	movs	r3, #0
}
 801575c:	4618      	mov	r0, r3
 801575e:	3710      	adds	r7, #16
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b086      	sub	sp, #24
 8015768:	af02      	add	r7, sp, #8
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	2200      	movs	r2, #0
 8015778:	2180      	movs	r1, #128	; 0x80
 801577a:	68f8      	ldr	r0, [r7, #12]
 801577c:	f7ff ff89 	bl	8015692 <SPI_WaitFlagStateUntilTimeout>
 8015780:	4603      	mov	r3, r0
 8015782:	2b00      	cmp	r3, #0
 8015784:	d007      	beq.n	8015796 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801578a:	f043 0220 	orr.w	r2, r3, #32
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8015792:	2303      	movs	r3, #3
 8015794:	e000      	b.n	8015798 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3710      	adds	r7, #16
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b08a      	sub	sp, #40	; 0x28
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80157a8:	2300      	movs	r3, #0
 80157aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80157ac:	f001 fcb2 	bl	8017114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80157b0:	4b57      	ldr	r3, [pc, #348]	; (8015910 <pvPortMalloc+0x170>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d101      	bne.n	80157bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80157b8:	f000 f90c 	bl	80159d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80157bc:	4b55      	ldr	r3, [pc, #340]	; (8015914 <pvPortMalloc+0x174>)
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	4013      	ands	r3, r2
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f040 808c 	bne.w	80158e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d01c      	beq.n	801580a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80157d0:	2208      	movs	r2, #8
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	4413      	add	r3, r2
 80157d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f003 0307 	and.w	r3, r3, #7
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d013      	beq.n	801580a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f023 0307 	bic.w	r3, r3, #7
 80157e8:	3308      	adds	r3, #8
 80157ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f003 0307 	and.w	r3, r3, #7
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d009      	beq.n	801580a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80157f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fa:	f383 8811 	msr	BASEPRI, r3
 80157fe:	f3bf 8f6f 	isb	sy
 8015802:	f3bf 8f4f 	dsb	sy
 8015806:	617b      	str	r3, [r7, #20]
 8015808:	e7fe      	b.n	8015808 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d068      	beq.n	80158e2 <pvPortMalloc+0x142>
 8015810:	4b41      	ldr	r3, [pc, #260]	; (8015918 <pvPortMalloc+0x178>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	429a      	cmp	r2, r3
 8015818:	d863      	bhi.n	80158e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801581a:	4b40      	ldr	r3, [pc, #256]	; (801591c <pvPortMalloc+0x17c>)
 801581c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801581e:	4b3f      	ldr	r3, [pc, #252]	; (801591c <pvPortMalloc+0x17c>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015824:	e004      	b.n	8015830 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8015826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015832:	685a      	ldr	r2, [r3, #4]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	429a      	cmp	r2, r3
 8015838:	d203      	bcs.n	8015842 <pvPortMalloc+0xa2>
 801583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1f1      	bne.n	8015826 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015842:	4b33      	ldr	r3, [pc, #204]	; (8015910 <pvPortMalloc+0x170>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015848:	429a      	cmp	r2, r3
 801584a:	d04a      	beq.n	80158e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801584c:	6a3b      	ldr	r3, [r7, #32]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2208      	movs	r2, #8
 8015852:	4413      	add	r3, r2
 8015854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015860:	685a      	ldr	r2, [r3, #4]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	1ad2      	subs	r2, r2, r3
 8015866:	2308      	movs	r3, #8
 8015868:	005b      	lsls	r3, r3, #1
 801586a:	429a      	cmp	r2, r3
 801586c:	d91e      	bls.n	80158ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	4413      	add	r3, r2
 8015874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015876:	69bb      	ldr	r3, [r7, #24]
 8015878:	f003 0307 	and.w	r3, r3, #7
 801587c:	2b00      	cmp	r3, #0
 801587e:	d009      	beq.n	8015894 <pvPortMalloc+0xf4>
 8015880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015884:	f383 8811 	msr	BASEPRI, r3
 8015888:	f3bf 8f6f 	isb	sy
 801588c:	f3bf 8f4f 	dsb	sy
 8015890:	613b      	str	r3, [r7, #16]
 8015892:	e7fe      	b.n	8015892 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015896:	685a      	ldr	r2, [r3, #4]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	1ad2      	subs	r2, r2, r3
 801589c:	69bb      	ldr	r3, [r7, #24]
 801589e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80158a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80158a6:	69b8      	ldr	r0, [r7, #24]
 80158a8:	f000 f8f6 	bl	8015a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80158ac:	4b1a      	ldr	r3, [pc, #104]	; (8015918 <pvPortMalloc+0x178>)
 80158ae:	681a      	ldr	r2, [r3, #0]
 80158b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	1ad3      	subs	r3, r2, r3
 80158b6:	4a18      	ldr	r2, [pc, #96]	; (8015918 <pvPortMalloc+0x178>)
 80158b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80158ba:	4b17      	ldr	r3, [pc, #92]	; (8015918 <pvPortMalloc+0x178>)
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	4b18      	ldr	r3, [pc, #96]	; (8015920 <pvPortMalloc+0x180>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d203      	bcs.n	80158ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80158c6:	4b14      	ldr	r3, [pc, #80]	; (8015918 <pvPortMalloc+0x178>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4a15      	ldr	r2, [pc, #84]	; (8015920 <pvPortMalloc+0x180>)
 80158cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80158ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d0:	685a      	ldr	r2, [r3, #4]
 80158d2:	4b10      	ldr	r3, [pc, #64]	; (8015914 <pvPortMalloc+0x174>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	431a      	orrs	r2, r3
 80158d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80158dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158de:	2200      	movs	r2, #0
 80158e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80158e2:	f001 fc25 	bl	8017130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80158e6:	69fb      	ldr	r3, [r7, #28]
 80158e8:	f003 0307 	and.w	r3, r3, #7
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d009      	beq.n	8015904 <pvPortMalloc+0x164>
 80158f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f4:	f383 8811 	msr	BASEPRI, r3
 80158f8:	f3bf 8f6f 	isb	sy
 80158fc:	f3bf 8f4f 	dsb	sy
 8015900:	60fb      	str	r3, [r7, #12]
 8015902:	e7fe      	b.n	8015902 <pvPortMalloc+0x162>
	return pvReturn;
 8015904:	69fb      	ldr	r3, [r7, #28]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3728      	adds	r7, #40	; 0x28
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	20012f28 	.word	0x20012f28
 8015914:	20012f34 	.word	0x20012f34
 8015918:	20012f2c 	.word	0x20012f2c
 801591c:	20012f20 	.word	0x20012f20
 8015920:	20012f30 	.word	0x20012f30

08015924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b086      	sub	sp, #24
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d046      	beq.n	80159c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015936:	2308      	movs	r3, #8
 8015938:	425b      	negs	r3, r3
 801593a:	697a      	ldr	r2, [r7, #20]
 801593c:	4413      	add	r3, r2
 801593e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	685a      	ldr	r2, [r3, #4]
 8015948:	4b20      	ldr	r3, [pc, #128]	; (80159cc <vPortFree+0xa8>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	4013      	ands	r3, r2
 801594e:	2b00      	cmp	r3, #0
 8015950:	d109      	bne.n	8015966 <vPortFree+0x42>
 8015952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015956:	f383 8811 	msr	BASEPRI, r3
 801595a:	f3bf 8f6f 	isb	sy
 801595e:	f3bf 8f4f 	dsb	sy
 8015962:	60fb      	str	r3, [r7, #12]
 8015964:	e7fe      	b.n	8015964 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015966:	693b      	ldr	r3, [r7, #16]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d009      	beq.n	8015982 <vPortFree+0x5e>
 801596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015972:	f383 8811 	msr	BASEPRI, r3
 8015976:	f3bf 8f6f 	isb	sy
 801597a:	f3bf 8f4f 	dsb	sy
 801597e:	60bb      	str	r3, [r7, #8]
 8015980:	e7fe      	b.n	8015980 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	685a      	ldr	r2, [r3, #4]
 8015986:	4b11      	ldr	r3, [pc, #68]	; (80159cc <vPortFree+0xa8>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4013      	ands	r3, r2
 801598c:	2b00      	cmp	r3, #0
 801598e:	d019      	beq.n	80159c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d115      	bne.n	80159c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	685a      	ldr	r2, [r3, #4]
 801599c:	4b0b      	ldr	r3, [pc, #44]	; (80159cc <vPortFree+0xa8>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	43db      	mvns	r3, r3
 80159a2:	401a      	ands	r2, r3
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80159a8:	f001 fbb4 	bl	8017114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	685a      	ldr	r2, [r3, #4]
 80159b0:	4b07      	ldr	r3, [pc, #28]	; (80159d0 <vPortFree+0xac>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4413      	add	r3, r2
 80159b6:	4a06      	ldr	r2, [pc, #24]	; (80159d0 <vPortFree+0xac>)
 80159b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80159ba:	6938      	ldr	r0, [r7, #16]
 80159bc:	f000 f86c 	bl	8015a98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80159c0:	f001 fbb6 	bl	8017130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80159c4:	bf00      	nop
 80159c6:	3718      	adds	r7, #24
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	20012f34 	.word	0x20012f34
 80159d0:	20012f2c 	.word	0x20012f2c

080159d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80159d4:	b480      	push	{r7}
 80159d6:	b085      	sub	sp, #20
 80159d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80159da:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80159de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80159e0:	4b27      	ldr	r3, [pc, #156]	; (8015a80 <prvHeapInit+0xac>)
 80159e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f003 0307 	and.w	r3, r3, #7
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d00c      	beq.n	8015a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	3307      	adds	r3, #7
 80159f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f023 0307 	bic.w	r3, r3, #7
 80159fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80159fc:	68ba      	ldr	r2, [r7, #8]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	1ad3      	subs	r3, r2, r3
 8015a02:	4a1f      	ldr	r2, [pc, #124]	; (8015a80 <prvHeapInit+0xac>)
 8015a04:	4413      	add	r3, r2
 8015a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015a0c:	4a1d      	ldr	r2, [pc, #116]	; (8015a84 <prvHeapInit+0xb0>)
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015a12:	4b1c      	ldr	r3, [pc, #112]	; (8015a84 <prvHeapInit+0xb0>)
 8015a14:	2200      	movs	r2, #0
 8015a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	4413      	add	r3, r2
 8015a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015a20:	2208      	movs	r2, #8
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	1a9b      	subs	r3, r3, r2
 8015a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f023 0307 	bic.w	r3, r3, #7
 8015a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	4a15      	ldr	r2, [pc, #84]	; (8015a88 <prvHeapInit+0xb4>)
 8015a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015a36:	4b14      	ldr	r3, [pc, #80]	; (8015a88 <prvHeapInit+0xb4>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015a3e:	4b12      	ldr	r3, [pc, #72]	; (8015a88 <prvHeapInit+0xb4>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	2200      	movs	r2, #0
 8015a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	68fa      	ldr	r2, [r7, #12]
 8015a4e:	1ad2      	subs	r2, r2, r3
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015a54:	4b0c      	ldr	r3, [pc, #48]	; (8015a88 <prvHeapInit+0xb4>)
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	4a0a      	ldr	r2, [pc, #40]	; (8015a8c <prvHeapInit+0xb8>)
 8015a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	4a09      	ldr	r2, [pc, #36]	; (8015a90 <prvHeapInit+0xbc>)
 8015a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015a6c:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <prvHeapInit+0xc0>)
 8015a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015a72:	601a      	str	r2, [r3, #0]
}
 8015a74:	bf00      	nop
 8015a76:	3714      	adds	r7, #20
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr
 8015a80:	20000320 	.word	0x20000320
 8015a84:	20012f20 	.word	0x20012f20
 8015a88:	20012f28 	.word	0x20012f28
 8015a8c:	20012f30 	.word	0x20012f30
 8015a90:	20012f2c 	.word	0x20012f2c
 8015a94:	20012f34 	.word	0x20012f34

08015a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015a98:	b480      	push	{r7}
 8015a9a:	b085      	sub	sp, #20
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015aa0:	4b28      	ldr	r3, [pc, #160]	; (8015b44 <prvInsertBlockIntoFreeList+0xac>)
 8015aa2:	60fb      	str	r3, [r7, #12]
 8015aa4:	e002      	b.n	8015aac <prvInsertBlockIntoFreeList+0x14>
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	60fb      	str	r3, [r7, #12]
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d3f7      	bcc.n	8015aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	68ba      	ldr	r2, [r7, #8]
 8015ac0:	441a      	add	r2, r3
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d108      	bne.n	8015ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	685a      	ldr	r2, [r3, #4]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	441a      	add	r2, r3
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	68ba      	ldr	r2, [r7, #8]
 8015ae4:	441a      	add	r2, r3
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d118      	bne.n	8015b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	4b15      	ldr	r3, [pc, #84]	; (8015b48 <prvInsertBlockIntoFreeList+0xb0>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d00d      	beq.n	8015b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	685a      	ldr	r2, [r3, #4]
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	441a      	add	r2, r3
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	601a      	str	r2, [r3, #0]
 8015b14:	e008      	b.n	8015b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015b16:	4b0c      	ldr	r3, [pc, #48]	; (8015b48 <prvInsertBlockIntoFreeList+0xb0>)
 8015b18:	681a      	ldr	r2, [r3, #0]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	601a      	str	r2, [r3, #0]
 8015b1e:	e003      	b.n	8015b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015b28:	68fa      	ldr	r2, [r7, #12]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d002      	beq.n	8015b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	687a      	ldr	r2, [r7, #4]
 8015b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b36:	bf00      	nop
 8015b38:	3714      	adds	r7, #20
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b40:	4770      	bx	lr
 8015b42:	bf00      	nop
 8015b44:	20012f20 	.word	0x20012f20
 8015b48:	20012f28 	.word	0x20012f28

08015b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	3b04      	subs	r3, #4
 8015b5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	3b04      	subs	r3, #4
 8015b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	f023 0201 	bic.w	r2, r3, #1
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	3b04      	subs	r3, #4
 8015b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015b7c:	4a0c      	ldr	r2, [pc, #48]	; (8015bb0 <pxPortInitialiseStack+0x64>)
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	3b14      	subs	r3, #20
 8015b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	3b04      	subs	r3, #4
 8015b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	f06f 0202 	mvn.w	r2, #2
 8015b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	3b20      	subs	r3, #32
 8015ba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3714      	adds	r7, #20
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr
 8015bb0:	08015bb5 	.word	0x08015bb5

08015bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b085      	sub	sp, #20
 8015bb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015bbe:	4b11      	ldr	r3, [pc, #68]	; (8015c04 <prvTaskExitError+0x50>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bc6:	d009      	beq.n	8015bdc <prvTaskExitError+0x28>
 8015bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bcc:	f383 8811 	msr	BASEPRI, r3
 8015bd0:	f3bf 8f6f 	isb	sy
 8015bd4:	f3bf 8f4f 	dsb	sy
 8015bd8:	60fb      	str	r3, [r7, #12]
 8015bda:	e7fe      	b.n	8015bda <prvTaskExitError+0x26>
 8015bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be0:	f383 8811 	msr	BASEPRI, r3
 8015be4:	f3bf 8f6f 	isb	sy
 8015be8:	f3bf 8f4f 	dsb	sy
 8015bec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015bee:	bf00      	nop
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d0fc      	beq.n	8015bf0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015bf6:	bf00      	nop
 8015bf8:	3714      	adds	r7, #20
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop
 8015c04:	20000018 	.word	0x20000018
	...

08015c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015c10:	4b07      	ldr	r3, [pc, #28]	; (8015c30 <pxCurrentTCBConst2>)
 8015c12:	6819      	ldr	r1, [r3, #0]
 8015c14:	6808      	ldr	r0, [r1, #0]
 8015c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1a:	f380 8809 	msr	PSP, r0
 8015c1e:	f3bf 8f6f 	isb	sy
 8015c22:	f04f 0000 	mov.w	r0, #0
 8015c26:	f380 8811 	msr	BASEPRI, r0
 8015c2a:	4770      	bx	lr
 8015c2c:	f3af 8000 	nop.w

08015c30 <pxCurrentTCBConst2>:
 8015c30:	20012f40 	.word	0x20012f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015c34:	bf00      	nop
 8015c36:	bf00      	nop

08015c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015c38:	4808      	ldr	r0, [pc, #32]	; (8015c5c <prvPortStartFirstTask+0x24>)
 8015c3a:	6800      	ldr	r0, [r0, #0]
 8015c3c:	6800      	ldr	r0, [r0, #0]
 8015c3e:	f380 8808 	msr	MSP, r0
 8015c42:	f04f 0000 	mov.w	r0, #0
 8015c46:	f380 8814 	msr	CONTROL, r0
 8015c4a:	b662      	cpsie	i
 8015c4c:	b661      	cpsie	f
 8015c4e:	f3bf 8f4f 	dsb	sy
 8015c52:	f3bf 8f6f 	isb	sy
 8015c56:	df00      	svc	0
 8015c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015c5a:	bf00      	nop
 8015c5c:	e000ed08 	.word	0xe000ed08

08015c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b086      	sub	sp, #24
 8015c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015c66:	4b44      	ldr	r3, [pc, #272]	; (8015d78 <xPortStartScheduler+0x118>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a44      	ldr	r2, [pc, #272]	; (8015d7c <xPortStartScheduler+0x11c>)
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d109      	bne.n	8015c84 <xPortStartScheduler+0x24>
 8015c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c74:	f383 8811 	msr	BASEPRI, r3
 8015c78:	f3bf 8f6f 	isb	sy
 8015c7c:	f3bf 8f4f 	dsb	sy
 8015c80:	613b      	str	r3, [r7, #16]
 8015c82:	e7fe      	b.n	8015c82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015c84:	4b3c      	ldr	r3, [pc, #240]	; (8015d78 <xPortStartScheduler+0x118>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	4a3d      	ldr	r2, [pc, #244]	; (8015d80 <xPortStartScheduler+0x120>)
 8015c8a:	4293      	cmp	r3, r2
 8015c8c:	d109      	bne.n	8015ca2 <xPortStartScheduler+0x42>
 8015c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c92:	f383 8811 	msr	BASEPRI, r3
 8015c96:	f3bf 8f6f 	isb	sy
 8015c9a:	f3bf 8f4f 	dsb	sy
 8015c9e:	60fb      	str	r3, [r7, #12]
 8015ca0:	e7fe      	b.n	8015ca0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ca2:	4b38      	ldr	r3, [pc, #224]	; (8015d84 <xPortStartScheduler+0x124>)
 8015ca4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	22ff      	movs	r2, #255	; 0xff
 8015cb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015cbc:	78fb      	ldrb	r3, [r7, #3]
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015cc4:	b2da      	uxtb	r2, r3
 8015cc6:	4b30      	ldr	r3, [pc, #192]	; (8015d88 <xPortStartScheduler+0x128>)
 8015cc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015cca:	4b30      	ldr	r3, [pc, #192]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015ccc:	2207      	movs	r2, #7
 8015cce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015cd0:	e009      	b.n	8015ce6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8015cd2:	4b2e      	ldr	r3, [pc, #184]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	4a2c      	ldr	r2, [pc, #176]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015cda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015cdc:	78fb      	ldrb	r3, [r7, #3]
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ce6:	78fb      	ldrb	r3, [r7, #3]
 8015ce8:	b2db      	uxtb	r3, r3
 8015cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cee:	2b80      	cmp	r3, #128	; 0x80
 8015cf0:	d0ef      	beq.n	8015cd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015cf2:	4b26      	ldr	r3, [pc, #152]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f1c3 0307 	rsb	r3, r3, #7
 8015cfa:	2b04      	cmp	r3, #4
 8015cfc:	d009      	beq.n	8015d12 <xPortStartScheduler+0xb2>
 8015cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d02:	f383 8811 	msr	BASEPRI, r3
 8015d06:	f3bf 8f6f 	isb	sy
 8015d0a:	f3bf 8f4f 	dsb	sy
 8015d0e:	60bb      	str	r3, [r7, #8]
 8015d10:	e7fe      	b.n	8015d10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015d12:	4b1e      	ldr	r3, [pc, #120]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	021b      	lsls	r3, r3, #8
 8015d18:	4a1c      	ldr	r2, [pc, #112]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015d1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015d1c:	4b1b      	ldr	r3, [pc, #108]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d24:	4a19      	ldr	r2, [pc, #100]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015d26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	b2da      	uxtb	r2, r3
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015d30:	4a17      	ldr	r2, [pc, #92]	; (8015d90 <xPortStartScheduler+0x130>)
 8015d32:	4b17      	ldr	r3, [pc, #92]	; (8015d90 <xPortStartScheduler+0x130>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015d3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015d3c:	4a14      	ldr	r2, [pc, #80]	; (8015d90 <xPortStartScheduler+0x130>)
 8015d3e:	4b14      	ldr	r3, [pc, #80]	; (8015d90 <xPortStartScheduler+0x130>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015d46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015d48:	f000 f8d6 	bl	8015ef8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015d4c:	4b11      	ldr	r3, [pc, #68]	; (8015d94 <xPortStartScheduler+0x134>)
 8015d4e:	2200      	movs	r2, #0
 8015d50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015d52:	f000 f8ed 	bl	8015f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015d56:	4a10      	ldr	r2, [pc, #64]	; (8015d98 <xPortStartScheduler+0x138>)
 8015d58:	4b0f      	ldr	r3, [pc, #60]	; (8015d98 <xPortStartScheduler+0x138>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015d60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015d62:	f7ff ff69 	bl	8015c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015d66:	f001 fb47 	bl	80173f8 <vTaskSwitchContext>
	prvTaskExitError();
 8015d6a:	f7ff ff23 	bl	8015bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015d6e:	2300      	movs	r3, #0
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3718      	adds	r7, #24
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	e000ed00 	.word	0xe000ed00
 8015d7c:	410fc271 	.word	0x410fc271
 8015d80:	410fc270 	.word	0x410fc270
 8015d84:	e000e400 	.word	0xe000e400
 8015d88:	20012f38 	.word	0x20012f38
 8015d8c:	20012f3c 	.word	0x20012f3c
 8015d90:	e000ed20 	.word	0xe000ed20
 8015d94:	20000018 	.word	0x20000018
 8015d98:	e000ef34 	.word	0xe000ef34

08015d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b083      	sub	sp, #12
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da6:	f383 8811 	msr	BASEPRI, r3
 8015daa:	f3bf 8f6f 	isb	sy
 8015dae:	f3bf 8f4f 	dsb	sy
 8015db2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015db4:	4b0e      	ldr	r3, [pc, #56]	; (8015df0 <vPortEnterCritical+0x54>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	3301      	adds	r3, #1
 8015dba:	4a0d      	ldr	r2, [pc, #52]	; (8015df0 <vPortEnterCritical+0x54>)
 8015dbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015dbe:	4b0c      	ldr	r3, [pc, #48]	; (8015df0 <vPortEnterCritical+0x54>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d10e      	bne.n	8015de4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015dc6:	4b0b      	ldr	r3, [pc, #44]	; (8015df4 <vPortEnterCritical+0x58>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d009      	beq.n	8015de4 <vPortEnterCritical+0x48>
 8015dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd4:	f383 8811 	msr	BASEPRI, r3
 8015dd8:	f3bf 8f6f 	isb	sy
 8015ddc:	f3bf 8f4f 	dsb	sy
 8015de0:	603b      	str	r3, [r7, #0]
 8015de2:	e7fe      	b.n	8015de2 <vPortEnterCritical+0x46>
	}
}
 8015de4:	bf00      	nop
 8015de6:	370c      	adds	r7, #12
 8015de8:	46bd      	mov	sp, r7
 8015dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dee:	4770      	bx	lr
 8015df0:	20000018 	.word	0x20000018
 8015df4:	e000ed04 	.word	0xe000ed04

08015df8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015dfe:	4b11      	ldr	r3, [pc, #68]	; (8015e44 <vPortExitCritical+0x4c>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d109      	bne.n	8015e1a <vPortExitCritical+0x22>
 8015e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e0a:	f383 8811 	msr	BASEPRI, r3
 8015e0e:	f3bf 8f6f 	isb	sy
 8015e12:	f3bf 8f4f 	dsb	sy
 8015e16:	607b      	str	r3, [r7, #4]
 8015e18:	e7fe      	b.n	8015e18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8015e1a:	4b0a      	ldr	r3, [pc, #40]	; (8015e44 <vPortExitCritical+0x4c>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	3b01      	subs	r3, #1
 8015e20:	4a08      	ldr	r2, [pc, #32]	; (8015e44 <vPortExitCritical+0x4c>)
 8015e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015e24:	4b07      	ldr	r3, [pc, #28]	; (8015e44 <vPortExitCritical+0x4c>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d104      	bne.n	8015e36 <vPortExitCritical+0x3e>
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015e36:	bf00      	nop
 8015e38:	370c      	adds	r7, #12
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e40:	4770      	bx	lr
 8015e42:	bf00      	nop
 8015e44:	20000018 	.word	0x20000018
	...

08015e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015e50:	f3ef 8009 	mrs	r0, PSP
 8015e54:	f3bf 8f6f 	isb	sy
 8015e58:	4b15      	ldr	r3, [pc, #84]	; (8015eb0 <pxCurrentTCBConst>)
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	f01e 0f10 	tst.w	lr, #16
 8015e60:	bf08      	it	eq
 8015e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6a:	6010      	str	r0, [r2, #0]
 8015e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015e74:	f380 8811 	msr	BASEPRI, r0
 8015e78:	f3bf 8f4f 	dsb	sy
 8015e7c:	f3bf 8f6f 	isb	sy
 8015e80:	f001 faba 	bl	80173f8 <vTaskSwitchContext>
 8015e84:	f04f 0000 	mov.w	r0, #0
 8015e88:	f380 8811 	msr	BASEPRI, r0
 8015e8c:	bc09      	pop	{r0, r3}
 8015e8e:	6819      	ldr	r1, [r3, #0]
 8015e90:	6808      	ldr	r0, [r1, #0]
 8015e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e96:	f01e 0f10 	tst.w	lr, #16
 8015e9a:	bf08      	it	eq
 8015e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ea0:	f380 8809 	msr	PSP, r0
 8015ea4:	f3bf 8f6f 	isb	sy
 8015ea8:	4770      	bx	lr
 8015eaa:	bf00      	nop
 8015eac:	f3af 8000 	nop.w

08015eb0 <pxCurrentTCBConst>:
 8015eb0:	20012f40 	.word	0x20012f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015eb4:	bf00      	nop
 8015eb6:	bf00      	nop

08015eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8015ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec2:	f383 8811 	msr	BASEPRI, r3
 8015ec6:	f3bf 8f6f 	isb	sy
 8015eca:	f3bf 8f4f 	dsb	sy
 8015ece:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015ed0:	f001 f9da 	bl	8017288 <xTaskIncrementTick>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d003      	beq.n	8015ee2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015eda:	4b06      	ldr	r3, [pc, #24]	; (8015ef4 <SysTick_Handler+0x3c>)
 8015edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ee0:	601a      	str	r2, [r3, #0]
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015eec:	bf00      	nop
 8015eee:	3708      	adds	r7, #8
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	e000ed04 	.word	0xe000ed04

08015ef8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015ef8:	b480      	push	{r7}
 8015efa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015efc:	4b08      	ldr	r3, [pc, #32]	; (8015f20 <vPortSetupTimerInterrupt+0x28>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015f02:	4b08      	ldr	r3, [pc, #32]	; (8015f24 <vPortSetupTimerInterrupt+0x2c>)
 8015f04:	2200      	movs	r2, #0
 8015f06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015f08:	4b07      	ldr	r3, [pc, #28]	; (8015f28 <vPortSetupTimerInterrupt+0x30>)
 8015f0a:	4a08      	ldr	r2, [pc, #32]	; (8015f2c <vPortSetupTimerInterrupt+0x34>)
 8015f0c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015f0e:	4b04      	ldr	r3, [pc, #16]	; (8015f20 <vPortSetupTimerInterrupt+0x28>)
 8015f10:	2207      	movs	r2, #7
 8015f12:	601a      	str	r2, [r3, #0]
}
 8015f14:	bf00      	nop
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr
 8015f1e:	bf00      	nop
 8015f20:	e000e010 	.word	0xe000e010
 8015f24:	e000e018 	.word	0xe000e018
 8015f28:	e000e014 	.word	0xe000e014
 8015f2c:	0002903f 	.word	0x0002903f

08015f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015f40 <vPortEnableVFP+0x10>
 8015f34:	6801      	ldr	r1, [r0, #0]
 8015f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015f3a:	6001      	str	r1, [r0, #0]
 8015f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015f3e:	bf00      	nop
 8015f40:	e000ed88 	.word	0xe000ed88

08015f44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015f44:	b480      	push	{r7}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015f4a:	f3ef 8305 	mrs	r3, IPSR
 8015f4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2b0f      	cmp	r3, #15
 8015f54:	d913      	bls.n	8015f7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015f56:	4a16      	ldr	r2, [pc, #88]	; (8015fb0 <vPortValidateInterruptPriority+0x6c>)
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	4413      	add	r3, r2
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015f60:	4b14      	ldr	r3, [pc, #80]	; (8015fb4 <vPortValidateInterruptPriority+0x70>)
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	7afa      	ldrb	r2, [r7, #11]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d209      	bcs.n	8015f7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8015f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6e:	f383 8811 	msr	BASEPRI, r3
 8015f72:	f3bf 8f6f 	isb	sy
 8015f76:	f3bf 8f4f 	dsb	sy
 8015f7a:	607b      	str	r3, [r7, #4]
 8015f7c:	e7fe      	b.n	8015f7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015f7e:	4b0e      	ldr	r3, [pc, #56]	; (8015fb8 <vPortValidateInterruptPriority+0x74>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015f86:	4b0d      	ldr	r3, [pc, #52]	; (8015fbc <vPortValidateInterruptPriority+0x78>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	d909      	bls.n	8015fa2 <vPortValidateInterruptPriority+0x5e>
 8015f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f92:	f383 8811 	msr	BASEPRI, r3
 8015f96:	f3bf 8f6f 	isb	sy
 8015f9a:	f3bf 8f4f 	dsb	sy
 8015f9e:	603b      	str	r3, [r7, #0]
 8015fa0:	e7fe      	b.n	8015fa0 <vPortValidateInterruptPriority+0x5c>
	}
 8015fa2:	bf00      	nop
 8015fa4:	3714      	adds	r7, #20
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr
 8015fae:	bf00      	nop
 8015fb0:	e000e3f0 	.word	0xe000e3f0
 8015fb4:	20012f38 	.word	0x20012f38
 8015fb8:	e000ed0c 	.word	0xe000ed0c
 8015fbc:	20012f3c 	.word	0x20012f3c

08015fc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f103 0208 	add.w	r2, r3, #8
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8015fd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f103 0208 	add.w	r2, r3, #8
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f103 0208 	add.w	r2, r3, #8
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015ff4:	bf00      	nop
 8015ff6:	370c      	adds	r7, #12
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffe:	4770      	bx	lr

08016000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2200      	movs	r2, #0
 801600c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801600e:	bf00      	nop
 8016010:	370c      	adds	r7, #12
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr

0801601a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801601a:	b480      	push	{r7}
 801601c:	b085      	sub	sp, #20
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	68fa      	ldr	r2, [r7, #12]
 801602e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	689a      	ldr	r2, [r3, #8]
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	689b      	ldr	r3, [r3, #8]
 801603c:	683a      	ldr	r2, [r7, #0]
 801603e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	683a      	ldr	r2, [r7, #0]
 8016044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	687a      	ldr	r2, [r7, #4]
 801604a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	1c5a      	adds	r2, r3, #1
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	601a      	str	r2, [r3, #0]
}
 8016056:	bf00      	nop
 8016058:	3714      	adds	r7, #20
 801605a:	46bd      	mov	sp, r7
 801605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016060:	4770      	bx	lr

08016062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016062:	b480      	push	{r7}
 8016064:	b085      	sub	sp, #20
 8016066:	af00      	add	r7, sp, #0
 8016068:	6078      	str	r0, [r7, #4]
 801606a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016078:	d103      	bne.n	8016082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	691b      	ldr	r3, [r3, #16]
 801607e:	60fb      	str	r3, [r7, #12]
 8016080:	e00c      	b.n	801609c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	3308      	adds	r3, #8
 8016086:	60fb      	str	r3, [r7, #12]
 8016088:	e002      	b.n	8016090 <vListInsert+0x2e>
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	60fb      	str	r3, [r7, #12]
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	681a      	ldr	r2, [r3, #0]
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	429a      	cmp	r2, r3
 801609a:	d9f6      	bls.n	801608a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	685a      	ldr	r2, [r3, #4]
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	683a      	ldr	r2, [r7, #0]
 80160aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	68fa      	ldr	r2, [r7, #12]
 80160b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	683a      	ldr	r2, [r7, #0]
 80160b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	687a      	ldr	r2, [r7, #4]
 80160bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	1c5a      	adds	r2, r3, #1
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	601a      	str	r2, [r3, #0]
}
 80160c8:	bf00      	nop
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80160d4:	b480      	push	{r7}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	691b      	ldr	r3, [r3, #16]
 80160e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	6892      	ldr	r2, [r2, #8]
 80160ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	689b      	ldr	r3, [r3, #8]
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	6852      	ldr	r2, [r2, #4]
 80160f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	685a      	ldr	r2, [r3, #4]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d103      	bne.n	8016108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	689a      	ldr	r2, [r3, #8]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2200      	movs	r2, #0
 801610c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	1e5a      	subs	r2, r3, #1
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	681b      	ldr	r3, [r3, #0]
}
 801611c:	4618      	mov	r0, r3
 801611e:	3714      	adds	r7, #20
 8016120:	46bd      	mov	sp, r7
 8016122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016126:	4770      	bx	lr

08016128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b084      	sub	sp, #16
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d109      	bne.n	8016150 <xQueueGenericReset+0x28>
 801613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016140:	f383 8811 	msr	BASEPRI, r3
 8016144:	f3bf 8f6f 	isb	sy
 8016148:	f3bf 8f4f 	dsb	sy
 801614c:	60bb      	str	r3, [r7, #8]
 801614e:	e7fe      	b.n	801614e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8016150:	f7ff fe24 	bl	8015d9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681a      	ldr	r2, [r3, #0]
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801615c:	68f9      	ldr	r1, [r7, #12]
 801615e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016160:	fb01 f303 	mul.w	r3, r1, r3
 8016164:	441a      	add	r2, r3
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	2200      	movs	r2, #0
 801616e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681a      	ldr	r2, [r3, #0]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681a      	ldr	r2, [r3, #0]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016180:	3b01      	subs	r3, #1
 8016182:	68f9      	ldr	r1, [r7, #12]
 8016184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016186:	fb01 f303 	mul.w	r3, r1, r3
 801618a:	441a      	add	r2, r3
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	22ff      	movs	r2, #255	; 0xff
 8016194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	22ff      	movs	r2, #255	; 0xff
 801619c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d114      	bne.n	80161d0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	691b      	ldr	r3, [r3, #16]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d01a      	beq.n	80161e4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	3310      	adds	r3, #16
 80161b2:	4618      	mov	r0, r3
 80161b4:	f001 f9c8 	bl	8017548 <xTaskRemoveFromEventList>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d012      	beq.n	80161e4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80161be:	4b0d      	ldr	r3, [pc, #52]	; (80161f4 <xQueueGenericReset+0xcc>)
 80161c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161c4:	601a      	str	r2, [r3, #0]
 80161c6:	f3bf 8f4f 	dsb	sy
 80161ca:	f3bf 8f6f 	isb	sy
 80161ce:	e009      	b.n	80161e4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	3310      	adds	r3, #16
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7ff fef3 	bl	8015fc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	3324      	adds	r3, #36	; 0x24
 80161de:	4618      	mov	r0, r3
 80161e0:	f7ff feee 	bl	8015fc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80161e4:	f7ff fe08 	bl	8015df8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80161e8:	2301      	movs	r3, #1
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	e000ed04 	.word	0xe000ed04

080161f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b08a      	sub	sp, #40	; 0x28
 80161fc:	af02      	add	r7, sp, #8
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	60b9      	str	r1, [r7, #8]
 8016202:	4613      	mov	r3, r2
 8016204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d109      	bne.n	8016220 <xQueueGenericCreate+0x28>
 801620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016210:	f383 8811 	msr	BASEPRI, r3
 8016214:	f3bf 8f6f 	isb	sy
 8016218:	f3bf 8f4f 	dsb	sy
 801621c:	613b      	str	r3, [r7, #16]
 801621e:	e7fe      	b.n	801621e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d102      	bne.n	801622c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016226:	2300      	movs	r3, #0
 8016228:	61fb      	str	r3, [r7, #28]
 801622a:	e004      	b.n	8016236 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	68ba      	ldr	r2, [r7, #8]
 8016230:	fb02 f303 	mul.w	r3, r2, r3
 8016234:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016236:	69fb      	ldr	r3, [r7, #28]
 8016238:	3348      	adds	r3, #72	; 0x48
 801623a:	4618      	mov	r0, r3
 801623c:	f7ff fab0 	bl	80157a0 <pvPortMalloc>
 8016240:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d00d      	beq.n	8016264 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016248:	69bb      	ldr	r3, [r7, #24]
 801624a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	3348      	adds	r3, #72	; 0x48
 8016250:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016252:	79fa      	ldrb	r2, [r7, #7]
 8016254:	69bb      	ldr	r3, [r7, #24]
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	4613      	mov	r3, r2
 801625a:	697a      	ldr	r2, [r7, #20]
 801625c:	68b9      	ldr	r1, [r7, #8]
 801625e:	68f8      	ldr	r0, [r7, #12]
 8016260:	f000 f805 	bl	801626e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016264:	69bb      	ldr	r3, [r7, #24]
	}
 8016266:	4618      	mov	r0, r3
 8016268:	3720      	adds	r7, #32
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b084      	sub	sp, #16
 8016272:	af00      	add	r7, sp, #0
 8016274:	60f8      	str	r0, [r7, #12]
 8016276:	60b9      	str	r1, [r7, #8]
 8016278:	607a      	str	r2, [r7, #4]
 801627a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d103      	bne.n	801628a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016282:	69bb      	ldr	r3, [r7, #24]
 8016284:	69ba      	ldr	r2, [r7, #24]
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	e002      	b.n	8016290 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801628a:	69bb      	ldr	r3, [r7, #24]
 801628c:	687a      	ldr	r2, [r7, #4]
 801628e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	68fa      	ldr	r2, [r7, #12]
 8016294:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	68ba      	ldr	r2, [r7, #8]
 801629a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801629c:	2101      	movs	r1, #1
 801629e:	69b8      	ldr	r0, [r7, #24]
 80162a0:	f7ff ff42 	bl	8016128 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80162a4:	bf00      	nop
 80162a6:	3710      	adds	r7, #16
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d00e      	beq.n	80162d8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2200      	movs	r2, #0
 80162be:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2200      	movs	r2, #0
 80162c4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2200      	movs	r2, #0
 80162ca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80162cc:	2300      	movs	r3, #0
 80162ce:	2200      	movs	r2, #0
 80162d0:	2100      	movs	r1, #0
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 f884 	bl	80163e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80162d8:	bf00      	nop
 80162da:	3708      	adds	r7, #8
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}

080162e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b086      	sub	sp, #24
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	4603      	mov	r3, r0
 80162e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80162ea:	2301      	movs	r3, #1
 80162ec:	617b      	str	r3, [r7, #20]
 80162ee:	2300      	movs	r3, #0
 80162f0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80162f2:	79fb      	ldrb	r3, [r7, #7]
 80162f4:	461a      	mov	r2, r3
 80162f6:	6939      	ldr	r1, [r7, #16]
 80162f8:	6978      	ldr	r0, [r7, #20]
 80162fa:	f7ff ff7d 	bl	80161f8 <xQueueGenericCreate>
 80162fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f7ff ffd3 	bl	80162ac <prvInitialiseMutex>

		return xNewQueue;
 8016306:	68fb      	ldr	r3, [r7, #12]
	}
 8016308:	4618      	mov	r0, r3
 801630a:	3718      	adds	r7, #24
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016310:	b590      	push	{r4, r7, lr}
 8016312:	b087      	sub	sp, #28
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d109      	bne.n	8016336 <xQueueGiveMutexRecursive+0x26>
 8016322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016326:	f383 8811 	msr	BASEPRI, r3
 801632a:	f3bf 8f6f 	isb	sy
 801632e:	f3bf 8f4f 	dsb	sy
 8016332:	60fb      	str	r3, [r7, #12]
 8016334:	e7fe      	b.n	8016334 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016336:	693b      	ldr	r3, [r7, #16]
 8016338:	689c      	ldr	r4, [r3, #8]
 801633a:	f001 fa9d 	bl	8017878 <xTaskGetCurrentTaskHandle>
 801633e:	4603      	mov	r3, r0
 8016340:	429c      	cmp	r4, r3
 8016342:	d111      	bne.n	8016368 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	1e5a      	subs	r2, r3, #1
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d105      	bne.n	8016362 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016356:	2300      	movs	r3, #0
 8016358:	2200      	movs	r2, #0
 801635a:	2100      	movs	r1, #0
 801635c:	6938      	ldr	r0, [r7, #16]
 801635e:	f000 f83f 	bl	80163e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016362:	2301      	movs	r3, #1
 8016364:	617b      	str	r3, [r7, #20]
 8016366:	e001      	b.n	801636c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016368:	2300      	movs	r3, #0
 801636a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801636c:	697b      	ldr	r3, [r7, #20]
	}
 801636e:	4618      	mov	r0, r3
 8016370:	371c      	adds	r7, #28
 8016372:	46bd      	mov	sp, r7
 8016374:	bd90      	pop	{r4, r7, pc}

08016376 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016376:	b590      	push	{r4, r7, lr}
 8016378:	b087      	sub	sp, #28
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
 801637e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016384:	693b      	ldr	r3, [r7, #16]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d109      	bne.n	801639e <xQueueTakeMutexRecursive+0x28>
 801638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801638e:	f383 8811 	msr	BASEPRI, r3
 8016392:	f3bf 8f6f 	isb	sy
 8016396:	f3bf 8f4f 	dsb	sy
 801639a:	60fb      	str	r3, [r7, #12]
 801639c:	e7fe      	b.n	801639c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801639e:	693b      	ldr	r3, [r7, #16]
 80163a0:	689c      	ldr	r4, [r3, #8]
 80163a2:	f001 fa69 	bl	8017878 <xTaskGetCurrentTaskHandle>
 80163a6:	4603      	mov	r3, r0
 80163a8:	429c      	cmp	r4, r3
 80163aa:	d107      	bne.n	80163bc <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	1c5a      	adds	r2, r3, #1
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80163b6:	2301      	movs	r3, #1
 80163b8:	617b      	str	r3, [r7, #20]
 80163ba:	e00c      	b.n	80163d6 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	6938      	ldr	r0, [r7, #16]
 80163c0:	f000 fa78 	bl	80168b4 <xQueueSemaphoreTake>
 80163c4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d004      	beq.n	80163d6 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	68db      	ldr	r3, [r3, #12]
 80163d0:	1c5a      	adds	r2, r3, #1
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80163d6:	697b      	ldr	r3, [r7, #20]
	}
 80163d8:	4618      	mov	r0, r3
 80163da:	371c      	adds	r7, #28
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd90      	pop	{r4, r7, pc}

080163e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b08e      	sub	sp, #56	; 0x38
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	60b9      	str	r1, [r7, #8]
 80163ea:	607a      	str	r2, [r7, #4]
 80163ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80163ee:	2300      	movs	r3, #0
 80163f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80163f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d109      	bne.n	8016410 <xQueueGenericSend+0x30>
 80163fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016400:	f383 8811 	msr	BASEPRI, r3
 8016404:	f3bf 8f6f 	isb	sy
 8016408:	f3bf 8f4f 	dsb	sy
 801640c:	62bb      	str	r3, [r7, #40]	; 0x28
 801640e:	e7fe      	b.n	801640e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d103      	bne.n	801641e <xQueueGenericSend+0x3e>
 8016416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801641a:	2b00      	cmp	r3, #0
 801641c:	d101      	bne.n	8016422 <xQueueGenericSend+0x42>
 801641e:	2301      	movs	r3, #1
 8016420:	e000      	b.n	8016424 <xQueueGenericSend+0x44>
 8016422:	2300      	movs	r3, #0
 8016424:	2b00      	cmp	r3, #0
 8016426:	d109      	bne.n	801643c <xQueueGenericSend+0x5c>
 8016428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801642c:	f383 8811 	msr	BASEPRI, r3
 8016430:	f3bf 8f6f 	isb	sy
 8016434:	f3bf 8f4f 	dsb	sy
 8016438:	627b      	str	r3, [r7, #36]	; 0x24
 801643a:	e7fe      	b.n	801643a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801643c:	683b      	ldr	r3, [r7, #0]
 801643e:	2b02      	cmp	r3, #2
 8016440:	d103      	bne.n	801644a <xQueueGenericSend+0x6a>
 8016442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016446:	2b01      	cmp	r3, #1
 8016448:	d101      	bne.n	801644e <xQueueGenericSend+0x6e>
 801644a:	2301      	movs	r3, #1
 801644c:	e000      	b.n	8016450 <xQueueGenericSend+0x70>
 801644e:	2300      	movs	r3, #0
 8016450:	2b00      	cmp	r3, #0
 8016452:	d109      	bne.n	8016468 <xQueueGenericSend+0x88>
 8016454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016458:	f383 8811 	msr	BASEPRI, r3
 801645c:	f3bf 8f6f 	isb	sy
 8016460:	f3bf 8f4f 	dsb	sy
 8016464:	623b      	str	r3, [r7, #32]
 8016466:	e7fe      	b.n	8016466 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016468:	f001 fa16 	bl	8017898 <xTaskGetSchedulerState>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	d102      	bne.n	8016478 <xQueueGenericSend+0x98>
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d101      	bne.n	801647c <xQueueGenericSend+0x9c>
 8016478:	2301      	movs	r3, #1
 801647a:	e000      	b.n	801647e <xQueueGenericSend+0x9e>
 801647c:	2300      	movs	r3, #0
 801647e:	2b00      	cmp	r3, #0
 8016480:	d109      	bne.n	8016496 <xQueueGenericSend+0xb6>
 8016482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016486:	f383 8811 	msr	BASEPRI, r3
 801648a:	f3bf 8f6f 	isb	sy
 801648e:	f3bf 8f4f 	dsb	sy
 8016492:	61fb      	str	r3, [r7, #28]
 8016494:	e7fe      	b.n	8016494 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016496:	f7ff fc81 	bl	8015d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d302      	bcc.n	80164ac <xQueueGenericSend+0xcc>
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	2b02      	cmp	r3, #2
 80164aa:	d129      	bne.n	8016500 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80164ac:	683a      	ldr	r2, [r7, #0]
 80164ae:	68b9      	ldr	r1, [r7, #8]
 80164b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164b2:	f000 fb39 	bl	8016b28 <prvCopyDataToQueue>
 80164b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80164b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d010      	beq.n	80164e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80164c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c2:	3324      	adds	r3, #36	; 0x24
 80164c4:	4618      	mov	r0, r3
 80164c6:	f001 f83f 	bl	8017548 <xTaskRemoveFromEventList>
 80164ca:	4603      	mov	r3, r0
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d013      	beq.n	80164f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80164d0:	4b3f      	ldr	r3, [pc, #252]	; (80165d0 <xQueueGenericSend+0x1f0>)
 80164d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164d6:	601a      	str	r2, [r3, #0]
 80164d8:	f3bf 8f4f 	dsb	sy
 80164dc:	f3bf 8f6f 	isb	sy
 80164e0:	e00a      	b.n	80164f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80164e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d007      	beq.n	80164f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80164e8:	4b39      	ldr	r3, [pc, #228]	; (80165d0 <xQueueGenericSend+0x1f0>)
 80164ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164ee:	601a      	str	r2, [r3, #0]
 80164f0:	f3bf 8f4f 	dsb	sy
 80164f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80164f8:	f7ff fc7e 	bl	8015df8 <vPortExitCritical>
				return pdPASS;
 80164fc:	2301      	movs	r3, #1
 80164fe:	e063      	b.n	80165c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d103      	bne.n	801650e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016506:	f7ff fc77 	bl	8015df8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801650a:	2300      	movs	r3, #0
 801650c:	e05c      	b.n	80165c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016510:	2b00      	cmp	r3, #0
 8016512:	d106      	bne.n	8016522 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016514:	f107 0314 	add.w	r3, r7, #20
 8016518:	4618      	mov	r0, r3
 801651a:	f001 f877 	bl	801760c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801651e:	2301      	movs	r3, #1
 8016520:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016522:	f7ff fc69 	bl	8015df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016526:	f000 fdf5 	bl	8017114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801652a:	f7ff fc37 	bl	8015d9c <vPortEnterCritical>
 801652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016534:	b25b      	sxtb	r3, r3
 8016536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801653a:	d103      	bne.n	8016544 <xQueueGenericSend+0x164>
 801653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801653e:	2200      	movs	r2, #0
 8016540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801654a:	b25b      	sxtb	r3, r3
 801654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016550:	d103      	bne.n	801655a <xQueueGenericSend+0x17a>
 8016552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016554:	2200      	movs	r2, #0
 8016556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801655a:	f7ff fc4d 	bl	8015df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801655e:	1d3a      	adds	r2, r7, #4
 8016560:	f107 0314 	add.w	r3, r7, #20
 8016564:	4611      	mov	r1, r2
 8016566:	4618      	mov	r0, r3
 8016568:	f001 f866 	bl	8017638 <xTaskCheckForTimeOut>
 801656c:	4603      	mov	r3, r0
 801656e:	2b00      	cmp	r3, #0
 8016570:	d124      	bne.n	80165bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016574:	f000 fbd0 	bl	8016d18 <prvIsQueueFull>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d018      	beq.n	80165b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016580:	3310      	adds	r3, #16
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	4611      	mov	r1, r2
 8016586:	4618      	mov	r0, r3
 8016588:	f000 ff90 	bl	80174ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801658c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801658e:	f000 fb5b 	bl	8016c48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016592:	f000 fdcd 	bl	8017130 <xTaskResumeAll>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	f47f af7c 	bne.w	8016496 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801659e:	4b0c      	ldr	r3, [pc, #48]	; (80165d0 <xQueueGenericSend+0x1f0>)
 80165a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165a4:	601a      	str	r2, [r3, #0]
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	e772      	b.n	8016496 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80165b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165b2:	f000 fb49 	bl	8016c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165b6:	f000 fdbb 	bl	8017130 <xTaskResumeAll>
 80165ba:	e76c      	b.n	8016496 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80165bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165be:	f000 fb43 	bl	8016c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165c2:	f000 fdb5 	bl	8017130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80165c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3738      	adds	r7, #56	; 0x38
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	e000ed04 	.word	0xe000ed04

080165d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b08e      	sub	sp, #56	; 0x38
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	607a      	str	r2, [r7, #4]
 80165e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80165e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d109      	bne.n	8016600 <xQueueGenericSendFromISR+0x2c>
 80165ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f0:	f383 8811 	msr	BASEPRI, r3
 80165f4:	f3bf 8f6f 	isb	sy
 80165f8:	f3bf 8f4f 	dsb	sy
 80165fc:	627b      	str	r3, [r7, #36]	; 0x24
 80165fe:	e7fe      	b.n	80165fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d103      	bne.n	801660e <xQueueGenericSendFromISR+0x3a>
 8016606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801660a:	2b00      	cmp	r3, #0
 801660c:	d101      	bne.n	8016612 <xQueueGenericSendFromISR+0x3e>
 801660e:	2301      	movs	r3, #1
 8016610:	e000      	b.n	8016614 <xQueueGenericSendFromISR+0x40>
 8016612:	2300      	movs	r3, #0
 8016614:	2b00      	cmp	r3, #0
 8016616:	d109      	bne.n	801662c <xQueueGenericSendFromISR+0x58>
 8016618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801661c:	f383 8811 	msr	BASEPRI, r3
 8016620:	f3bf 8f6f 	isb	sy
 8016624:	f3bf 8f4f 	dsb	sy
 8016628:	623b      	str	r3, [r7, #32]
 801662a:	e7fe      	b.n	801662a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	2b02      	cmp	r3, #2
 8016630:	d103      	bne.n	801663a <xQueueGenericSendFromISR+0x66>
 8016632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016636:	2b01      	cmp	r3, #1
 8016638:	d101      	bne.n	801663e <xQueueGenericSendFromISR+0x6a>
 801663a:	2301      	movs	r3, #1
 801663c:	e000      	b.n	8016640 <xQueueGenericSendFromISR+0x6c>
 801663e:	2300      	movs	r3, #0
 8016640:	2b00      	cmp	r3, #0
 8016642:	d109      	bne.n	8016658 <xQueueGenericSendFromISR+0x84>
 8016644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016648:	f383 8811 	msr	BASEPRI, r3
 801664c:	f3bf 8f6f 	isb	sy
 8016650:	f3bf 8f4f 	dsb	sy
 8016654:	61fb      	str	r3, [r7, #28]
 8016656:	e7fe      	b.n	8016656 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016658:	f7ff fc74 	bl	8015f44 <vPortValidateInterruptPriority>
	__asm volatile
 801665c:	f3ef 8211 	mrs	r2, BASEPRI
 8016660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016664:	f383 8811 	msr	BASEPRI, r3
 8016668:	f3bf 8f6f 	isb	sy
 801666c:	f3bf 8f4f 	dsb	sy
 8016670:	61ba      	str	r2, [r7, #24]
 8016672:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016674:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016676:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016680:	429a      	cmp	r2, r3
 8016682:	d302      	bcc.n	801668a <xQueueGenericSendFromISR+0xb6>
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	2b02      	cmp	r3, #2
 8016688:	d12c      	bne.n	80166e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016694:	683a      	ldr	r2, [r7, #0]
 8016696:	68b9      	ldr	r1, [r7, #8]
 8016698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801669a:	f000 fa45 	bl	8016b28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801669e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80166a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166a6:	d112      	bne.n	80166ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80166a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d016      	beq.n	80166de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80166b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b2:	3324      	adds	r3, #36	; 0x24
 80166b4:	4618      	mov	r0, r3
 80166b6:	f000 ff47 	bl	8017548 <xTaskRemoveFromEventList>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00e      	beq.n	80166de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00b      	beq.n	80166de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2201      	movs	r2, #1
 80166ca:	601a      	str	r2, [r3, #0]
 80166cc:	e007      	b.n	80166de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80166ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166d2:	3301      	adds	r3, #1
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	b25a      	sxtb	r2, r3
 80166d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80166de:	2301      	movs	r3, #1
 80166e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80166e2:	e001      	b.n	80166e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80166e4:	2300      	movs	r3, #0
 80166e6:	637b      	str	r3, [r7, #52]	; 0x34
 80166e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80166f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3738      	adds	r7, #56	; 0x38
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b08c      	sub	sp, #48	; 0x30
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016708:	2300      	movs	r3, #0
 801670a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016712:	2b00      	cmp	r3, #0
 8016714:	d109      	bne.n	801672a <xQueueReceive+0x2e>
	__asm volatile
 8016716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671a:	f383 8811 	msr	BASEPRI, r3
 801671e:	f3bf 8f6f 	isb	sy
 8016722:	f3bf 8f4f 	dsb	sy
 8016726:	623b      	str	r3, [r7, #32]
 8016728:	e7fe      	b.n	8016728 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d103      	bne.n	8016738 <xQueueReceive+0x3c>
 8016730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016734:	2b00      	cmp	r3, #0
 8016736:	d101      	bne.n	801673c <xQueueReceive+0x40>
 8016738:	2301      	movs	r3, #1
 801673a:	e000      	b.n	801673e <xQueueReceive+0x42>
 801673c:	2300      	movs	r3, #0
 801673e:	2b00      	cmp	r3, #0
 8016740:	d109      	bne.n	8016756 <xQueueReceive+0x5a>
 8016742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016746:	f383 8811 	msr	BASEPRI, r3
 801674a:	f3bf 8f6f 	isb	sy
 801674e:	f3bf 8f4f 	dsb	sy
 8016752:	61fb      	str	r3, [r7, #28]
 8016754:	e7fe      	b.n	8016754 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016756:	f001 f89f 	bl	8017898 <xTaskGetSchedulerState>
 801675a:	4603      	mov	r3, r0
 801675c:	2b00      	cmp	r3, #0
 801675e:	d102      	bne.n	8016766 <xQueueReceive+0x6a>
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d101      	bne.n	801676a <xQueueReceive+0x6e>
 8016766:	2301      	movs	r3, #1
 8016768:	e000      	b.n	801676c <xQueueReceive+0x70>
 801676a:	2300      	movs	r3, #0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d109      	bne.n	8016784 <xQueueReceive+0x88>
 8016770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016774:	f383 8811 	msr	BASEPRI, r3
 8016778:	f3bf 8f6f 	isb	sy
 801677c:	f3bf 8f4f 	dsb	sy
 8016780:	61bb      	str	r3, [r7, #24]
 8016782:	e7fe      	b.n	8016782 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016784:	f7ff fb0a 	bl	8015d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016790:	2b00      	cmp	r3, #0
 8016792:	d01f      	beq.n	80167d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016794:	68b9      	ldr	r1, [r7, #8]
 8016796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016798:	f000 fa30 	bl	8016bfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801679e:	1e5a      	subs	r2, r3, #1
 80167a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80167a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a6:	691b      	ldr	r3, [r3, #16]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00f      	beq.n	80167cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80167ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ae:	3310      	adds	r3, #16
 80167b0:	4618      	mov	r0, r3
 80167b2:	f000 fec9 	bl	8017548 <xTaskRemoveFromEventList>
 80167b6:	4603      	mov	r3, r0
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d007      	beq.n	80167cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80167bc:	4b3c      	ldr	r3, [pc, #240]	; (80168b0 <xQueueReceive+0x1b4>)
 80167be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167c2:	601a      	str	r2, [r3, #0]
 80167c4:	f3bf 8f4f 	dsb	sy
 80167c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80167cc:	f7ff fb14 	bl	8015df8 <vPortExitCritical>
				return pdPASS;
 80167d0:	2301      	movs	r3, #1
 80167d2:	e069      	b.n	80168a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d103      	bne.n	80167e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80167da:	f7ff fb0d 	bl	8015df8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80167de:	2300      	movs	r3, #0
 80167e0:	e062      	b.n	80168a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80167e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d106      	bne.n	80167f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80167e8:	f107 0310 	add.w	r3, r7, #16
 80167ec:	4618      	mov	r0, r3
 80167ee:	f000 ff0d 	bl	801760c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80167f2:	2301      	movs	r3, #1
 80167f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80167f6:	f7ff faff 	bl	8015df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80167fa:	f000 fc8b 	bl	8017114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80167fe:	f7ff facd 	bl	8015d9c <vPortEnterCritical>
 8016802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016808:	b25b      	sxtb	r3, r3
 801680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801680e:	d103      	bne.n	8016818 <xQueueReceive+0x11c>
 8016810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016812:	2200      	movs	r2, #0
 8016814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801681e:	b25b      	sxtb	r3, r3
 8016820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016824:	d103      	bne.n	801682e <xQueueReceive+0x132>
 8016826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016828:	2200      	movs	r2, #0
 801682a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801682e:	f7ff fae3 	bl	8015df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016832:	1d3a      	adds	r2, r7, #4
 8016834:	f107 0310 	add.w	r3, r7, #16
 8016838:	4611      	mov	r1, r2
 801683a:	4618      	mov	r0, r3
 801683c:	f000 fefc 	bl	8017638 <xTaskCheckForTimeOut>
 8016840:	4603      	mov	r3, r0
 8016842:	2b00      	cmp	r3, #0
 8016844:	d123      	bne.n	801688e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016848:	f000 fa50 	bl	8016cec <prvIsQueueEmpty>
 801684c:	4603      	mov	r3, r0
 801684e:	2b00      	cmp	r3, #0
 8016850:	d017      	beq.n	8016882 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016854:	3324      	adds	r3, #36	; 0x24
 8016856:	687a      	ldr	r2, [r7, #4]
 8016858:	4611      	mov	r1, r2
 801685a:	4618      	mov	r0, r3
 801685c:	f000 fe26 	bl	80174ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016862:	f000 f9f1 	bl	8016c48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016866:	f000 fc63 	bl	8017130 <xTaskResumeAll>
 801686a:	4603      	mov	r3, r0
 801686c:	2b00      	cmp	r3, #0
 801686e:	d189      	bne.n	8016784 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8016870:	4b0f      	ldr	r3, [pc, #60]	; (80168b0 <xQueueReceive+0x1b4>)
 8016872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016876:	601a      	str	r2, [r3, #0]
 8016878:	f3bf 8f4f 	dsb	sy
 801687c:	f3bf 8f6f 	isb	sy
 8016880:	e780      	b.n	8016784 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016884:	f000 f9e0 	bl	8016c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016888:	f000 fc52 	bl	8017130 <xTaskResumeAll>
 801688c:	e77a      	b.n	8016784 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801688e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016890:	f000 f9da 	bl	8016c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016894:	f000 fc4c 	bl	8017130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801689a:	f000 fa27 	bl	8016cec <prvIsQueueEmpty>
 801689e:	4603      	mov	r3, r0
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	f43f af6f 	beq.w	8016784 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80168a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3730      	adds	r7, #48	; 0x30
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}
 80168b0:	e000ed04 	.word	0xe000ed04

080168b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b08e      	sub	sp, #56	; 0x38
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80168be:	2300      	movs	r3, #0
 80168c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80168c6:	2300      	movs	r3, #0
 80168c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80168ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d109      	bne.n	80168e4 <xQueueSemaphoreTake+0x30>
 80168d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d4:	f383 8811 	msr	BASEPRI, r3
 80168d8:	f3bf 8f6f 	isb	sy
 80168dc:	f3bf 8f4f 	dsb	sy
 80168e0:	623b      	str	r3, [r7, #32]
 80168e2:	e7fe      	b.n	80168e2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80168e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d009      	beq.n	8016900 <xQueueSemaphoreTake+0x4c>
 80168ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f0:	f383 8811 	msr	BASEPRI, r3
 80168f4:	f3bf 8f6f 	isb	sy
 80168f8:	f3bf 8f4f 	dsb	sy
 80168fc:	61fb      	str	r3, [r7, #28]
 80168fe:	e7fe      	b.n	80168fe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016900:	f000 ffca 	bl	8017898 <xTaskGetSchedulerState>
 8016904:	4603      	mov	r3, r0
 8016906:	2b00      	cmp	r3, #0
 8016908:	d102      	bne.n	8016910 <xQueueSemaphoreTake+0x5c>
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d101      	bne.n	8016914 <xQueueSemaphoreTake+0x60>
 8016910:	2301      	movs	r3, #1
 8016912:	e000      	b.n	8016916 <xQueueSemaphoreTake+0x62>
 8016914:	2300      	movs	r3, #0
 8016916:	2b00      	cmp	r3, #0
 8016918:	d109      	bne.n	801692e <xQueueSemaphoreTake+0x7a>
 801691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801691e:	f383 8811 	msr	BASEPRI, r3
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	f3bf 8f4f 	dsb	sy
 801692a:	61bb      	str	r3, [r7, #24]
 801692c:	e7fe      	b.n	801692c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801692e:	f7ff fa35 	bl	8015d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016936:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801693a:	2b00      	cmp	r3, #0
 801693c:	d024      	beq.n	8016988 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016940:	1e5a      	subs	r2, r3, #1
 8016942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016944:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d104      	bne.n	8016958 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801694e:	f001 f95d 	bl	8017c0c <pvTaskIncrementMutexHeldCount>
 8016952:	4602      	mov	r2, r0
 8016954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016956:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695a:	691b      	ldr	r3, [r3, #16]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d00f      	beq.n	8016980 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016962:	3310      	adds	r3, #16
 8016964:	4618      	mov	r0, r3
 8016966:	f000 fdef 	bl	8017548 <xTaskRemoveFromEventList>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d007      	beq.n	8016980 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016970:	4b53      	ldr	r3, [pc, #332]	; (8016ac0 <xQueueSemaphoreTake+0x20c>)
 8016972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016976:	601a      	str	r2, [r3, #0]
 8016978:	f3bf 8f4f 	dsb	sy
 801697c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016980:	f7ff fa3a 	bl	8015df8 <vPortExitCritical>
				return pdPASS;
 8016984:	2301      	movs	r3, #1
 8016986:	e096      	b.n	8016ab6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016988:	683b      	ldr	r3, [r7, #0]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d110      	bne.n	80169b0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016990:	2b00      	cmp	r3, #0
 8016992:	d009      	beq.n	80169a8 <xQueueSemaphoreTake+0xf4>
 8016994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016998:	f383 8811 	msr	BASEPRI, r3
 801699c:	f3bf 8f6f 	isb	sy
 80169a0:	f3bf 8f4f 	dsb	sy
 80169a4:	617b      	str	r3, [r7, #20]
 80169a6:	e7fe      	b.n	80169a6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80169a8:	f7ff fa26 	bl	8015df8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80169ac:	2300      	movs	r3, #0
 80169ae:	e082      	b.n	8016ab6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80169b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d106      	bne.n	80169c4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80169b6:	f107 030c 	add.w	r3, r7, #12
 80169ba:	4618      	mov	r0, r3
 80169bc:	f000 fe26 	bl	801760c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80169c0:	2301      	movs	r3, #1
 80169c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80169c4:	f7ff fa18 	bl	8015df8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80169c8:	f000 fba4 	bl	8017114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80169cc:	f7ff f9e6 	bl	8015d9c <vPortEnterCritical>
 80169d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80169d6:	b25b      	sxtb	r3, r3
 80169d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169dc:	d103      	bne.n	80169e6 <xQueueSemaphoreTake+0x132>
 80169de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e0:	2200      	movs	r2, #0
 80169e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80169e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169ec:	b25b      	sxtb	r3, r3
 80169ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169f2:	d103      	bne.n	80169fc <xQueueSemaphoreTake+0x148>
 80169f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f6:	2200      	movs	r2, #0
 80169f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80169fc:	f7ff f9fc 	bl	8015df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016a00:	463a      	mov	r2, r7
 8016a02:	f107 030c 	add.w	r3, r7, #12
 8016a06:	4611      	mov	r1, r2
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f000 fe15 	bl	8017638 <xTaskCheckForTimeOut>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d132      	bne.n	8016a7a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a16:	f000 f969 	bl	8016cec <prvIsQueueEmpty>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d026      	beq.n	8016a6e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d109      	bne.n	8016a3c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8016a28:	f7ff f9b8 	bl	8015d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a2e:	689b      	ldr	r3, [r3, #8]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f000 ff4f 	bl	80178d4 <xTaskPriorityInherit>
 8016a36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016a38:	f7ff f9de 	bl	8015df8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a3e:	3324      	adds	r3, #36	; 0x24
 8016a40:	683a      	ldr	r2, [r7, #0]
 8016a42:	4611      	mov	r1, r2
 8016a44:	4618      	mov	r0, r3
 8016a46:	f000 fd31 	bl	80174ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a4c:	f000 f8fc 	bl	8016c48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016a50:	f000 fb6e 	bl	8017130 <xTaskResumeAll>
 8016a54:	4603      	mov	r3, r0
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	f47f af69 	bne.w	801692e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8016a5c:	4b18      	ldr	r3, [pc, #96]	; (8016ac0 <xQueueSemaphoreTake+0x20c>)
 8016a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a62:	601a      	str	r2, [r3, #0]
 8016a64:	f3bf 8f4f 	dsb	sy
 8016a68:	f3bf 8f6f 	isb	sy
 8016a6c:	e75f      	b.n	801692e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a70:	f000 f8ea 	bl	8016c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016a74:	f000 fb5c 	bl	8017130 <xTaskResumeAll>
 8016a78:	e759      	b.n	801692e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a7c:	f000 f8e4 	bl	8016c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016a80:	f000 fb56 	bl	8017130 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a86:	f000 f931 	bl	8016cec <prvIsQueueEmpty>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f43f af4e 	beq.w	801692e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d00d      	beq.n	8016ab4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8016a98:	f7ff f980 	bl	8015d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a9e:	f000 f82b 	bl	8016af8 <prvGetDisinheritPriorityAfterTimeout>
 8016aa2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa6:	689b      	ldr	r3, [r3, #8]
 8016aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f001 f816 	bl	8017adc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016ab0:	f7ff f9a2 	bl	8015df8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ab4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3738      	adds	r7, #56	; 0x38
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
 8016abe:	bf00      	nop
 8016ac0:	e000ed04 	.word	0xe000ed04

08016ac4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b084      	sub	sp, #16
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d109      	bne.n	8016aea <vQueueDelete+0x26>
 8016ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ada:	f383 8811 	msr	BASEPRI, r3
 8016ade:	f3bf 8f6f 	isb	sy
 8016ae2:	f3bf 8f4f 	dsb	sy
 8016ae6:	60bb      	str	r3, [r7, #8]
 8016ae8:	e7fe      	b.n	8016ae8 <vQueueDelete+0x24>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8016aea:	68f8      	ldr	r0, [r7, #12]
 8016aec:	f7fe ff1a 	bl	8015924 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016af0:	bf00      	nop
 8016af2:	3710      	adds	r7, #16
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}

08016af8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016af8:	b480      	push	{r7}
 8016afa:	b085      	sub	sp, #20
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d006      	beq.n	8016b16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	f1c3 0305 	rsb	r3, r3, #5
 8016b12:	60fb      	str	r3, [r7, #12]
 8016b14:	e001      	b.n	8016b1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016b16:	2300      	movs	r3, #0
 8016b18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
	}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3714      	adds	r7, #20
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b086      	sub	sp, #24
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016b34:	2300      	movs	r3, #0
 8016b36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d10d      	bne.n	8016b62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d14d      	bne.n	8016bea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	689b      	ldr	r3, [r3, #8]
 8016b52:	4618      	mov	r0, r3
 8016b54:	f000 ff3e 	bl	80179d4 <xTaskPriorityDisinherit>
 8016b58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	609a      	str	r2, [r3, #8]
 8016b60:	e043      	b.n	8016bea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d119      	bne.n	8016b9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	6858      	ldr	r0, [r3, #4]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b70:	461a      	mov	r2, r3
 8016b72:	68b9      	ldr	r1, [r7, #8]
 8016b74:	f001 fd8f 	bl	8018696 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	685a      	ldr	r2, [r3, #4]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b80:	441a      	add	r2, r3
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	685a      	ldr	r2, [r3, #4]
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	689b      	ldr	r3, [r3, #8]
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d32b      	bcc.n	8016bea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	605a      	str	r2, [r3, #4]
 8016b9a:	e026      	b.n	8016bea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	68d8      	ldr	r0, [r3, #12]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	68b9      	ldr	r1, [r7, #8]
 8016ba8:	f001 fd75 	bl	8018696 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	68da      	ldr	r2, [r3, #12]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bb4:	425b      	negs	r3, r3
 8016bb6:	441a      	add	r2, r3
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	68da      	ldr	r2, [r3, #12]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d207      	bcs.n	8016bd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	689a      	ldr	r2, [r3, #8]
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bd0:	425b      	negs	r3, r3
 8016bd2:	441a      	add	r2, r3
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2b02      	cmp	r3, #2
 8016bdc:	d105      	bne.n	8016bea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d002      	beq.n	8016bea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	3b01      	subs	r3, #1
 8016be8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	1c5a      	adds	r2, r3, #1
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016bf2:	697b      	ldr	r3, [r7, #20]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3718      	adds	r7, #24
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d018      	beq.n	8016c40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	68da      	ldr	r2, [r3, #12]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c16:	441a      	add	r2, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	68da      	ldr	r2, [r3, #12]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	689b      	ldr	r3, [r3, #8]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d303      	bcc.n	8016c30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681a      	ldr	r2, [r3, #0]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	68d9      	ldr	r1, [r3, #12]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c38:	461a      	mov	r2, r3
 8016c3a:	6838      	ldr	r0, [r7, #0]
 8016c3c:	f001 fd2b 	bl	8018696 <memcpy>
	}
}
 8016c40:	bf00      	nop
 8016c42:	3708      	adds	r7, #8
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}

08016c48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b084      	sub	sp, #16
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016c50:	f7ff f8a4 	bl	8015d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c5c:	e011      	b.n	8016c82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d012      	beq.n	8016c8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	3324      	adds	r3, #36	; 0x24
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f000 fc6c 	bl	8017548 <xTaskRemoveFromEventList>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d001      	beq.n	8016c7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016c76:	f000 fd3f 	bl	80176f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016c7a:	7bfb      	ldrb	r3, [r7, #15]
 8016c7c:	3b01      	subs	r3, #1
 8016c7e:	b2db      	uxtb	r3, r3
 8016c80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	dce9      	bgt.n	8016c5e <prvUnlockQueue+0x16>
 8016c8a:	e000      	b.n	8016c8e <prvUnlockQueue+0x46>
					break;
 8016c8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	22ff      	movs	r2, #255	; 0xff
 8016c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016c96:	f7ff f8af 	bl	8015df8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016c9a:	f7ff f87f 	bl	8015d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ca4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ca6:	e011      	b.n	8016ccc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	691b      	ldr	r3, [r3, #16]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d012      	beq.n	8016cd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	3310      	adds	r3, #16
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f000 fc47 	bl	8017548 <xTaskRemoveFromEventList>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016cc0:	f000 fd1a 	bl	80176f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016cc4:	7bbb      	ldrb	r3, [r7, #14]
 8016cc6:	3b01      	subs	r3, #1
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	dce9      	bgt.n	8016ca8 <prvUnlockQueue+0x60>
 8016cd4:	e000      	b.n	8016cd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016cd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	22ff      	movs	r2, #255	; 0xff
 8016cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016ce0:	f7ff f88a 	bl	8015df8 <vPortExitCritical>
}
 8016ce4:	bf00      	nop
 8016ce6:	3710      	adds	r7, #16
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}

08016cec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b084      	sub	sp, #16
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016cf4:	f7ff f852 	bl	8015d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d102      	bne.n	8016d06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016d00:	2301      	movs	r3, #1
 8016d02:	60fb      	str	r3, [r7, #12]
 8016d04:	e001      	b.n	8016d0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016d06:	2300      	movs	r3, #0
 8016d08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d0a:	f7ff f875 	bl	8015df8 <vPortExitCritical>

	return xReturn;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3710      	adds	r7, #16
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b084      	sub	sp, #16
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d20:	f7ff f83c 	bl	8015d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d102      	bne.n	8016d36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016d30:	2301      	movs	r3, #1
 8016d32:	60fb      	str	r3, [r7, #12]
 8016d34:	e001      	b.n	8016d3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016d36:	2300      	movs	r3, #0
 8016d38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d3a:	f7ff f85d 	bl	8015df8 <vPortExitCritical>

	return xReturn;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	3710      	adds	r7, #16
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b086      	sub	sp, #24
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016d58:	f7ff f820 	bl	8015d9c <vPortEnterCritical>
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d62:	b25b      	sxtb	r3, r3
 8016d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d68:	d103      	bne.n	8016d72 <vQueueWaitForMessageRestricted+0x2a>
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d78:	b25b      	sxtb	r3, r3
 8016d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d7e:	d103      	bne.n	8016d88 <vQueueWaitForMessageRestricted+0x40>
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	2200      	movs	r2, #0
 8016d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d88:	f7ff f836 	bl	8015df8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d106      	bne.n	8016da2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	3324      	adds	r3, #36	; 0x24
 8016d98:	687a      	ldr	r2, [r7, #4]
 8016d9a:	68b9      	ldr	r1, [r7, #8]
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f000 fba9 	bl	80174f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016da2:	6978      	ldr	r0, [r7, #20]
 8016da4:	f7ff ff50 	bl	8016c48 <prvUnlockQueue>
	}
 8016da8:	bf00      	nop
 8016daa:	3718      	adds	r7, #24
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b08c      	sub	sp, #48	; 0x30
 8016db4:	af04      	add	r7, sp, #16
 8016db6:	60f8      	str	r0, [r7, #12]
 8016db8:	60b9      	str	r1, [r7, #8]
 8016dba:	603b      	str	r3, [r7, #0]
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016dc0:	88fb      	ldrh	r3, [r7, #6]
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7fe fceb 	bl	80157a0 <pvPortMalloc>
 8016dca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d00e      	beq.n	8016df0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016dd2:	2050      	movs	r0, #80	; 0x50
 8016dd4:	f7fe fce4 	bl	80157a0 <pvPortMalloc>
 8016dd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016dda:	69fb      	ldr	r3, [r7, #28]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d003      	beq.n	8016de8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016de0:	69fb      	ldr	r3, [r7, #28]
 8016de2:	697a      	ldr	r2, [r7, #20]
 8016de4:	631a      	str	r2, [r3, #48]	; 0x30
 8016de6:	e005      	b.n	8016df4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016de8:	6978      	ldr	r0, [r7, #20]
 8016dea:	f7fe fd9b 	bl	8015924 <vPortFree>
 8016dee:	e001      	b.n	8016df4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016df0:	2300      	movs	r3, #0
 8016df2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016df4:	69fb      	ldr	r3, [r7, #28]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d013      	beq.n	8016e22 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016dfa:	88fa      	ldrh	r2, [r7, #6]
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	9303      	str	r3, [sp, #12]
 8016e00:	69fb      	ldr	r3, [r7, #28]
 8016e02:	9302      	str	r3, [sp, #8]
 8016e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e06:	9301      	str	r3, [sp, #4]
 8016e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e0a:	9300      	str	r3, [sp, #0]
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	68b9      	ldr	r1, [r7, #8]
 8016e10:	68f8      	ldr	r0, [r7, #12]
 8016e12:	f000 f80e 	bl	8016e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016e16:	69f8      	ldr	r0, [r7, #28]
 8016e18:	f000 f892 	bl	8016f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	61bb      	str	r3, [r7, #24]
 8016e20:	e002      	b.n	8016e28 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016e22:	f04f 33ff 	mov.w	r3, #4294967295
 8016e26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016e28:	69bb      	ldr	r3, [r7, #24]
	}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3720      	adds	r7, #32
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b088      	sub	sp, #32
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	60f8      	str	r0, [r7, #12]
 8016e3a:	60b9      	str	r1, [r7, #8]
 8016e3c:	607a      	str	r2, [r7, #4]
 8016e3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016e4a:	3b01      	subs	r3, #1
 8016e4c:	009b      	lsls	r3, r3, #2
 8016e4e:	4413      	add	r3, r2
 8016e50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016e52:	69bb      	ldr	r3, [r7, #24]
 8016e54:	f023 0307 	bic.w	r3, r3, #7
 8016e58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	f003 0307 	and.w	r3, r3, #7
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d009      	beq.n	8016e78 <prvInitialiseNewTask+0x46>
 8016e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e68:	f383 8811 	msr	BASEPRI, r3
 8016e6c:	f3bf 8f6f 	isb	sy
 8016e70:	f3bf 8f4f 	dsb	sy
 8016e74:	617b      	str	r3, [r7, #20]
 8016e76:	e7fe      	b.n	8016e76 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d01f      	beq.n	8016ebe <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e7e:	2300      	movs	r3, #0
 8016e80:	61fb      	str	r3, [r7, #28]
 8016e82:	e012      	b.n	8016eaa <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016e84:	68ba      	ldr	r2, [r7, #8]
 8016e86:	69fb      	ldr	r3, [r7, #28]
 8016e88:	4413      	add	r3, r2
 8016e8a:	7819      	ldrb	r1, [r3, #0]
 8016e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e8e:	69fb      	ldr	r3, [r7, #28]
 8016e90:	4413      	add	r3, r2
 8016e92:	3334      	adds	r3, #52	; 0x34
 8016e94:	460a      	mov	r2, r1
 8016e96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016e98:	68ba      	ldr	r2, [r7, #8]
 8016e9a:	69fb      	ldr	r3, [r7, #28]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d006      	beq.n	8016eb2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016ea4:	69fb      	ldr	r3, [r7, #28]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	61fb      	str	r3, [r7, #28]
 8016eaa:	69fb      	ldr	r3, [r7, #28]
 8016eac:	2b09      	cmp	r3, #9
 8016eae:	d9e9      	bls.n	8016e84 <prvInitialiseNewTask+0x52>
 8016eb0:	e000      	b.n	8016eb4 <prvInitialiseNewTask+0x82>
			{
				break;
 8016eb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8016ebc:	e003      	b.n	8016ec6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec8:	2b04      	cmp	r3, #4
 8016eca:	d901      	bls.n	8016ed0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016ecc:	2304      	movs	r3, #4
 8016ece:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ed4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eda:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8016edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ede:	2200      	movs	r2, #0
 8016ee0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee4:	3304      	adds	r3, #4
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7ff f88a 	bl	8016000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eee:	3318      	adds	r3, #24
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7ff f885 	bl	8016000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016efa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efe:	f1c3 0205 	rsb	r2, r3, #5
 8016f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0e:	2200      	movs	r2, #0
 8016f10:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f14:	2200      	movs	r2, #0
 8016f16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016f1a:	683a      	ldr	r2, [r7, #0]
 8016f1c:	68f9      	ldr	r1, [r7, #12]
 8016f1e:	69b8      	ldr	r0, [r7, #24]
 8016f20:	f7fe fe14 	bl	8015b4c <pxPortInitialiseStack>
 8016f24:	4602      	mov	r2, r0
 8016f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d002      	beq.n	8016f36 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f36:	bf00      	nop
 8016f38:	3720      	adds	r7, #32
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
	...

08016f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016f48:	f7fe ff28 	bl	8015d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016f4c:	4b2a      	ldr	r3, [pc, #168]	; (8016ff8 <prvAddNewTaskToReadyList+0xb8>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	3301      	adds	r3, #1
 8016f52:	4a29      	ldr	r2, [pc, #164]	; (8016ff8 <prvAddNewTaskToReadyList+0xb8>)
 8016f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016f56:	4b29      	ldr	r3, [pc, #164]	; (8016ffc <prvAddNewTaskToReadyList+0xbc>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d109      	bne.n	8016f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016f5e:	4a27      	ldr	r2, [pc, #156]	; (8016ffc <prvAddNewTaskToReadyList+0xbc>)
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016f64:	4b24      	ldr	r3, [pc, #144]	; (8016ff8 <prvAddNewTaskToReadyList+0xb8>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	2b01      	cmp	r3, #1
 8016f6a:	d110      	bne.n	8016f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016f6c:	f000 fbe8 	bl	8017740 <prvInitialiseTaskLists>
 8016f70:	e00d      	b.n	8016f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016f72:	4b23      	ldr	r3, [pc, #140]	; (8017000 <prvAddNewTaskToReadyList+0xc0>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d109      	bne.n	8016f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016f7a:	4b20      	ldr	r3, [pc, #128]	; (8016ffc <prvAddNewTaskToReadyList+0xbc>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d802      	bhi.n	8016f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016f88:	4a1c      	ldr	r2, [pc, #112]	; (8016ffc <prvAddNewTaskToReadyList+0xbc>)
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016f8e:	4b1d      	ldr	r3, [pc, #116]	; (8017004 <prvAddNewTaskToReadyList+0xc4>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	3301      	adds	r3, #1
 8016f94:	4a1b      	ldr	r2, [pc, #108]	; (8017004 <prvAddNewTaskToReadyList+0xc4>)
 8016f96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f9c:	2201      	movs	r2, #1
 8016f9e:	409a      	lsls	r2, r3
 8016fa0:	4b19      	ldr	r3, [pc, #100]	; (8017008 <prvAddNewTaskToReadyList+0xc8>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	4313      	orrs	r3, r2
 8016fa6:	4a18      	ldr	r2, [pc, #96]	; (8017008 <prvAddNewTaskToReadyList+0xc8>)
 8016fa8:	6013      	str	r3, [r2, #0]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fae:	4613      	mov	r3, r2
 8016fb0:	009b      	lsls	r3, r3, #2
 8016fb2:	4413      	add	r3, r2
 8016fb4:	009b      	lsls	r3, r3, #2
 8016fb6:	4a15      	ldr	r2, [pc, #84]	; (801700c <prvAddNewTaskToReadyList+0xcc>)
 8016fb8:	441a      	add	r2, r3
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	3304      	adds	r3, #4
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	4610      	mov	r0, r2
 8016fc2:	f7ff f82a 	bl	801601a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016fc6:	f7fe ff17 	bl	8015df8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016fca:	4b0d      	ldr	r3, [pc, #52]	; (8017000 <prvAddNewTaskToReadyList+0xc0>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d00e      	beq.n	8016ff0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016fd2:	4b0a      	ldr	r3, [pc, #40]	; (8016ffc <prvAddNewTaskToReadyList+0xbc>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fdc:	429a      	cmp	r2, r3
 8016fde:	d207      	bcs.n	8016ff0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016fe0:	4b0b      	ldr	r3, [pc, #44]	; (8017010 <prvAddNewTaskToReadyList+0xd0>)
 8016fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fe6:	601a      	str	r2, [r3, #0]
 8016fe8:	f3bf 8f4f 	dsb	sy
 8016fec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ff0:	bf00      	nop
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}
 8016ff8:	20013018 	.word	0x20013018
 8016ffc:	20012f40 	.word	0x20012f40
 8017000:	20013024 	.word	0x20013024
 8017004:	20013034 	.word	0x20013034
 8017008:	20013020 	.word	0x20013020
 801700c:	20012f44 	.word	0x20012f44
 8017010:	e000ed04 	.word	0xe000ed04

08017014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801701c:	2300      	movs	r3, #0
 801701e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d016      	beq.n	8017054 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017026:	4b13      	ldr	r3, [pc, #76]	; (8017074 <vTaskDelay+0x60>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d009      	beq.n	8017042 <vTaskDelay+0x2e>
 801702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017032:	f383 8811 	msr	BASEPRI, r3
 8017036:	f3bf 8f6f 	isb	sy
 801703a:	f3bf 8f4f 	dsb	sy
 801703e:	60bb      	str	r3, [r7, #8]
 8017040:	e7fe      	b.n	8017040 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8017042:	f000 f867 	bl	8017114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017046:	2100      	movs	r1, #0
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f000 fdf3 	bl	8017c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801704e:	f000 f86f 	bl	8017130 <xTaskResumeAll>
 8017052:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d107      	bne.n	801706a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801705a:	4b07      	ldr	r3, [pc, #28]	; (8017078 <vTaskDelay+0x64>)
 801705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017060:	601a      	str	r2, [r3, #0]
 8017062:	f3bf 8f4f 	dsb	sy
 8017066:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801706a:	bf00      	nop
 801706c:	3710      	adds	r7, #16
 801706e:	46bd      	mov	sp, r7
 8017070:	bd80      	pop	{r7, pc}
 8017072:	bf00      	nop
 8017074:	20013040 	.word	0x20013040
 8017078:	e000ed04 	.word	0xe000ed04

0801707c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b086      	sub	sp, #24
 8017080:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8017082:	4b1e      	ldr	r3, [pc, #120]	; (80170fc <vTaskStartScheduler+0x80>)
 8017084:	9301      	str	r3, [sp, #4]
 8017086:	2300      	movs	r3, #0
 8017088:	9300      	str	r3, [sp, #0]
 801708a:	2300      	movs	r3, #0
 801708c:	2282      	movs	r2, #130	; 0x82
 801708e:	491c      	ldr	r1, [pc, #112]	; (8017100 <vTaskStartScheduler+0x84>)
 8017090:	481c      	ldr	r0, [pc, #112]	; (8017104 <vTaskStartScheduler+0x88>)
 8017092:	f7ff fe8d 	bl	8016db0 <xTaskCreate>
 8017096:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2b01      	cmp	r3, #1
 801709c:	d102      	bne.n	80170a4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 801709e:	f000 fe2f 	bl	8017d00 <xTimerCreateTimerTask>
 80170a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d115      	bne.n	80170d6 <vTaskStartScheduler+0x5a>
 80170aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ae:	f383 8811 	msr	BASEPRI, r3
 80170b2:	f3bf 8f6f 	isb	sy
 80170b6:	f3bf 8f4f 	dsb	sy
 80170ba:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80170bc:	4b12      	ldr	r3, [pc, #72]	; (8017108 <vTaskStartScheduler+0x8c>)
 80170be:	f04f 32ff 	mov.w	r2, #4294967295
 80170c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80170c4:	4b11      	ldr	r3, [pc, #68]	; (801710c <vTaskStartScheduler+0x90>)
 80170c6:	2201      	movs	r2, #1
 80170c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80170ca:	4b11      	ldr	r3, [pc, #68]	; (8017110 <vTaskStartScheduler+0x94>)
 80170cc:	2200      	movs	r2, #0
 80170ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80170d0:	f7fe fdc6 	bl	8015c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80170d4:	e00d      	b.n	80170f2 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170dc:	d109      	bne.n	80170f2 <vTaskStartScheduler+0x76>
 80170de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170e2:	f383 8811 	msr	BASEPRI, r3
 80170e6:	f3bf 8f6f 	isb	sy
 80170ea:	f3bf 8f4f 	dsb	sy
 80170ee:	607b      	str	r3, [r7, #4]
 80170f0:	e7fe      	b.n	80170f0 <vTaskStartScheduler+0x74>
}
 80170f2:	bf00      	nop
 80170f4:	3710      	adds	r7, #16
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	2001303c 	.word	0x2001303c
 8017100:	0801c660 	.word	0x0801c660
 8017104:	08017711 	.word	0x08017711
 8017108:	20013038 	.word	0x20013038
 801710c:	20013024 	.word	0x20013024
 8017110:	2001301c 	.word	0x2001301c

08017114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017114:	b480      	push	{r7}
 8017116:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017118:	4b04      	ldr	r3, [pc, #16]	; (801712c <vTaskSuspendAll+0x18>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	3301      	adds	r3, #1
 801711e:	4a03      	ldr	r2, [pc, #12]	; (801712c <vTaskSuspendAll+0x18>)
 8017120:	6013      	str	r3, [r2, #0]
}
 8017122:	bf00      	nop
 8017124:	46bd      	mov	sp, r7
 8017126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712a:	4770      	bx	lr
 801712c:	20013040 	.word	0x20013040

08017130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017136:	2300      	movs	r3, #0
 8017138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801713a:	2300      	movs	r3, #0
 801713c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801713e:	4b41      	ldr	r3, [pc, #260]	; (8017244 <xTaskResumeAll+0x114>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d109      	bne.n	801715a <xTaskResumeAll+0x2a>
 8017146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801714a:	f383 8811 	msr	BASEPRI, r3
 801714e:	f3bf 8f6f 	isb	sy
 8017152:	f3bf 8f4f 	dsb	sy
 8017156:	603b      	str	r3, [r7, #0]
 8017158:	e7fe      	b.n	8017158 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801715a:	f7fe fe1f 	bl	8015d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801715e:	4b39      	ldr	r3, [pc, #228]	; (8017244 <xTaskResumeAll+0x114>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	3b01      	subs	r3, #1
 8017164:	4a37      	ldr	r2, [pc, #220]	; (8017244 <xTaskResumeAll+0x114>)
 8017166:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017168:	4b36      	ldr	r3, [pc, #216]	; (8017244 <xTaskResumeAll+0x114>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d161      	bne.n	8017234 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017170:	4b35      	ldr	r3, [pc, #212]	; (8017248 <xTaskResumeAll+0x118>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d05d      	beq.n	8017234 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017178:	e02e      	b.n	80171d8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801717a:	4b34      	ldr	r3, [pc, #208]	; (801724c <xTaskResumeAll+0x11c>)
 801717c:	68db      	ldr	r3, [r3, #12]
 801717e:	68db      	ldr	r3, [r3, #12]
 8017180:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	3318      	adds	r3, #24
 8017186:	4618      	mov	r0, r3
 8017188:	f7fe ffa4 	bl	80160d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	3304      	adds	r3, #4
 8017190:	4618      	mov	r0, r3
 8017192:	f7fe ff9f 	bl	80160d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801719a:	2201      	movs	r2, #1
 801719c:	409a      	lsls	r2, r3
 801719e:	4b2c      	ldr	r3, [pc, #176]	; (8017250 <xTaskResumeAll+0x120>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	4313      	orrs	r3, r2
 80171a4:	4a2a      	ldr	r2, [pc, #168]	; (8017250 <xTaskResumeAll+0x120>)
 80171a6:	6013      	str	r3, [r2, #0]
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ac:	4613      	mov	r3, r2
 80171ae:	009b      	lsls	r3, r3, #2
 80171b0:	4413      	add	r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	4a27      	ldr	r2, [pc, #156]	; (8017254 <xTaskResumeAll+0x124>)
 80171b6:	441a      	add	r2, r3
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	3304      	adds	r3, #4
 80171bc:	4619      	mov	r1, r3
 80171be:	4610      	mov	r0, r2
 80171c0:	f7fe ff2b 	bl	801601a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171c8:	4b23      	ldr	r3, [pc, #140]	; (8017258 <xTaskResumeAll+0x128>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d302      	bcc.n	80171d8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80171d2:	4b22      	ldr	r3, [pc, #136]	; (801725c <xTaskResumeAll+0x12c>)
 80171d4:	2201      	movs	r2, #1
 80171d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80171d8:	4b1c      	ldr	r3, [pc, #112]	; (801724c <xTaskResumeAll+0x11c>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d1cc      	bne.n	801717a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d001      	beq.n	80171ea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80171e6:	f000 fb27 	bl	8017838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80171ea:	4b1d      	ldr	r3, [pc, #116]	; (8017260 <xTaskResumeAll+0x130>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d010      	beq.n	8017218 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80171f6:	f000 f847 	bl	8017288 <xTaskIncrementTick>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d002      	beq.n	8017206 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8017200:	4b16      	ldr	r3, [pc, #88]	; (801725c <xTaskResumeAll+0x12c>)
 8017202:	2201      	movs	r2, #1
 8017204:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	3b01      	subs	r3, #1
 801720a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d1f1      	bne.n	80171f6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8017212:	4b13      	ldr	r3, [pc, #76]	; (8017260 <xTaskResumeAll+0x130>)
 8017214:	2200      	movs	r2, #0
 8017216:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017218:	4b10      	ldr	r3, [pc, #64]	; (801725c <xTaskResumeAll+0x12c>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d009      	beq.n	8017234 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017220:	2301      	movs	r3, #1
 8017222:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017224:	4b0f      	ldr	r3, [pc, #60]	; (8017264 <xTaskResumeAll+0x134>)
 8017226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801722a:	601a      	str	r2, [r3, #0]
 801722c:	f3bf 8f4f 	dsb	sy
 8017230:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017234:	f7fe fde0 	bl	8015df8 <vPortExitCritical>

	return xAlreadyYielded;
 8017238:	68bb      	ldr	r3, [r7, #8]
}
 801723a:	4618      	mov	r0, r3
 801723c:	3710      	adds	r7, #16
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}
 8017242:	bf00      	nop
 8017244:	20013040 	.word	0x20013040
 8017248:	20013018 	.word	0x20013018
 801724c:	20012fd8 	.word	0x20012fd8
 8017250:	20013020 	.word	0x20013020
 8017254:	20012f44 	.word	0x20012f44
 8017258:	20012f40 	.word	0x20012f40
 801725c:	2001302c 	.word	0x2001302c
 8017260:	20013028 	.word	0x20013028
 8017264:	e000ed04 	.word	0xe000ed04

08017268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017268:	b480      	push	{r7}
 801726a:	b083      	sub	sp, #12
 801726c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801726e:	4b05      	ldr	r3, [pc, #20]	; (8017284 <xTaskGetTickCount+0x1c>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017274:	687b      	ldr	r3, [r7, #4]
}
 8017276:	4618      	mov	r0, r3
 8017278:	370c      	adds	r7, #12
 801727a:	46bd      	mov	sp, r7
 801727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop
 8017284:	2001301c 	.word	0x2001301c

08017288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b086      	sub	sp, #24
 801728c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801728e:	2300      	movs	r3, #0
 8017290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017292:	4b4e      	ldr	r3, [pc, #312]	; (80173cc <xTaskIncrementTick+0x144>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	f040 8087 	bne.w	80173aa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801729c:	4b4c      	ldr	r3, [pc, #304]	; (80173d0 <xTaskIncrementTick+0x148>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	3301      	adds	r3, #1
 80172a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80172a4:	4a4a      	ldr	r2, [pc, #296]	; (80173d0 <xTaskIncrementTick+0x148>)
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d11f      	bne.n	80172f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80172b0:	4b48      	ldr	r3, [pc, #288]	; (80173d4 <xTaskIncrementTick+0x14c>)
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d009      	beq.n	80172ce <xTaskIncrementTick+0x46>
 80172ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172be:	f383 8811 	msr	BASEPRI, r3
 80172c2:	f3bf 8f6f 	isb	sy
 80172c6:	f3bf 8f4f 	dsb	sy
 80172ca:	603b      	str	r3, [r7, #0]
 80172cc:	e7fe      	b.n	80172cc <xTaskIncrementTick+0x44>
 80172ce:	4b41      	ldr	r3, [pc, #260]	; (80173d4 <xTaskIncrementTick+0x14c>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	60fb      	str	r3, [r7, #12]
 80172d4:	4b40      	ldr	r3, [pc, #256]	; (80173d8 <xTaskIncrementTick+0x150>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	4a3e      	ldr	r2, [pc, #248]	; (80173d4 <xTaskIncrementTick+0x14c>)
 80172da:	6013      	str	r3, [r2, #0]
 80172dc:	4a3e      	ldr	r2, [pc, #248]	; (80173d8 <xTaskIncrementTick+0x150>)
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	6013      	str	r3, [r2, #0]
 80172e2:	4b3e      	ldr	r3, [pc, #248]	; (80173dc <xTaskIncrementTick+0x154>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	3301      	adds	r3, #1
 80172e8:	4a3c      	ldr	r2, [pc, #240]	; (80173dc <xTaskIncrementTick+0x154>)
 80172ea:	6013      	str	r3, [r2, #0]
 80172ec:	f000 faa4 	bl	8017838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80172f0:	4b3b      	ldr	r3, [pc, #236]	; (80173e0 <xTaskIncrementTick+0x158>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	693a      	ldr	r2, [r7, #16]
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d348      	bcc.n	801738c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80172fa:	4b36      	ldr	r3, [pc, #216]	; (80173d4 <xTaskIncrementTick+0x14c>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d104      	bne.n	801730e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017304:	4b36      	ldr	r3, [pc, #216]	; (80173e0 <xTaskIncrementTick+0x158>)
 8017306:	f04f 32ff 	mov.w	r2, #4294967295
 801730a:	601a      	str	r2, [r3, #0]
					break;
 801730c:	e03e      	b.n	801738c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801730e:	4b31      	ldr	r3, [pc, #196]	; (80173d4 <xTaskIncrementTick+0x14c>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	68db      	ldr	r3, [r3, #12]
 8017314:	68db      	ldr	r3, [r3, #12]
 8017316:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801731e:	693a      	ldr	r2, [r7, #16]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	429a      	cmp	r2, r3
 8017324:	d203      	bcs.n	801732e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017326:	4a2e      	ldr	r2, [pc, #184]	; (80173e0 <xTaskIncrementTick+0x158>)
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801732c:	e02e      	b.n	801738c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	3304      	adds	r3, #4
 8017332:	4618      	mov	r0, r3
 8017334:	f7fe fece 	bl	80160d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801733c:	2b00      	cmp	r3, #0
 801733e:	d004      	beq.n	801734a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	3318      	adds	r3, #24
 8017344:	4618      	mov	r0, r3
 8017346:	f7fe fec5 	bl	80160d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801734e:	2201      	movs	r2, #1
 8017350:	409a      	lsls	r2, r3
 8017352:	4b24      	ldr	r3, [pc, #144]	; (80173e4 <xTaskIncrementTick+0x15c>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	4313      	orrs	r3, r2
 8017358:	4a22      	ldr	r2, [pc, #136]	; (80173e4 <xTaskIncrementTick+0x15c>)
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017360:	4613      	mov	r3, r2
 8017362:	009b      	lsls	r3, r3, #2
 8017364:	4413      	add	r3, r2
 8017366:	009b      	lsls	r3, r3, #2
 8017368:	4a1f      	ldr	r2, [pc, #124]	; (80173e8 <xTaskIncrementTick+0x160>)
 801736a:	441a      	add	r2, r3
 801736c:	68bb      	ldr	r3, [r7, #8]
 801736e:	3304      	adds	r3, #4
 8017370:	4619      	mov	r1, r3
 8017372:	4610      	mov	r0, r2
 8017374:	f7fe fe51 	bl	801601a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801737c:	4b1b      	ldr	r3, [pc, #108]	; (80173ec <xTaskIncrementTick+0x164>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017382:	429a      	cmp	r2, r3
 8017384:	d3b9      	bcc.n	80172fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8017386:	2301      	movs	r3, #1
 8017388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801738a:	e7b6      	b.n	80172fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801738c:	4b17      	ldr	r3, [pc, #92]	; (80173ec <xTaskIncrementTick+0x164>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017392:	4915      	ldr	r1, [pc, #84]	; (80173e8 <xTaskIncrementTick+0x160>)
 8017394:	4613      	mov	r3, r2
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	4413      	add	r3, r2
 801739a:	009b      	lsls	r3, r3, #2
 801739c:	440b      	add	r3, r1
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	2b01      	cmp	r3, #1
 80173a2:	d907      	bls.n	80173b4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80173a4:	2301      	movs	r3, #1
 80173a6:	617b      	str	r3, [r7, #20]
 80173a8:	e004      	b.n	80173b4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80173aa:	4b11      	ldr	r3, [pc, #68]	; (80173f0 <xTaskIncrementTick+0x168>)
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	3301      	adds	r3, #1
 80173b0:	4a0f      	ldr	r2, [pc, #60]	; (80173f0 <xTaskIncrementTick+0x168>)
 80173b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80173b4:	4b0f      	ldr	r3, [pc, #60]	; (80173f4 <xTaskIncrementTick+0x16c>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d001      	beq.n	80173c0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80173bc:	2301      	movs	r3, #1
 80173be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80173c0:	697b      	ldr	r3, [r7, #20]
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3718      	adds	r7, #24
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	20013040 	.word	0x20013040
 80173d0:	2001301c 	.word	0x2001301c
 80173d4:	20012fd0 	.word	0x20012fd0
 80173d8:	20012fd4 	.word	0x20012fd4
 80173dc:	20013030 	.word	0x20013030
 80173e0:	20013038 	.word	0x20013038
 80173e4:	20013020 	.word	0x20013020
 80173e8:	20012f44 	.word	0x20012f44
 80173ec:	20012f40 	.word	0x20012f40
 80173f0:	20013028 	.word	0x20013028
 80173f4:	2001302c 	.word	0x2001302c

080173f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80173f8:	b480      	push	{r7}
 80173fa:	b087      	sub	sp, #28
 80173fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80173fe:	4b26      	ldr	r3, [pc, #152]	; (8017498 <vTaskSwitchContext+0xa0>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d003      	beq.n	801740e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017406:	4b25      	ldr	r3, [pc, #148]	; (801749c <vTaskSwitchContext+0xa4>)
 8017408:	2201      	movs	r2, #1
 801740a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801740c:	e03e      	b.n	801748c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 801740e:	4b23      	ldr	r3, [pc, #140]	; (801749c <vTaskSwitchContext+0xa4>)
 8017410:	2200      	movs	r2, #0
 8017412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017414:	4b22      	ldr	r3, [pc, #136]	; (80174a0 <vTaskSwitchContext+0xa8>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	fab3 f383 	clz	r3, r3
 8017420:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017422:	7afb      	ldrb	r3, [r7, #11]
 8017424:	f1c3 031f 	rsb	r3, r3, #31
 8017428:	617b      	str	r3, [r7, #20]
 801742a:	491e      	ldr	r1, [pc, #120]	; (80174a4 <vTaskSwitchContext+0xac>)
 801742c:	697a      	ldr	r2, [r7, #20]
 801742e:	4613      	mov	r3, r2
 8017430:	009b      	lsls	r3, r3, #2
 8017432:	4413      	add	r3, r2
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	440b      	add	r3, r1
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d109      	bne.n	8017452 <vTaskSwitchContext+0x5a>
	__asm volatile
 801743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017442:	f383 8811 	msr	BASEPRI, r3
 8017446:	f3bf 8f6f 	isb	sy
 801744a:	f3bf 8f4f 	dsb	sy
 801744e:	607b      	str	r3, [r7, #4]
 8017450:	e7fe      	b.n	8017450 <vTaskSwitchContext+0x58>
 8017452:	697a      	ldr	r2, [r7, #20]
 8017454:	4613      	mov	r3, r2
 8017456:	009b      	lsls	r3, r3, #2
 8017458:	4413      	add	r3, r2
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	4a11      	ldr	r2, [pc, #68]	; (80174a4 <vTaskSwitchContext+0xac>)
 801745e:	4413      	add	r3, r2
 8017460:	613b      	str	r3, [r7, #16]
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	685a      	ldr	r2, [r3, #4]
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	605a      	str	r2, [r3, #4]
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	685a      	ldr	r2, [r3, #4]
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	3308      	adds	r3, #8
 8017474:	429a      	cmp	r2, r3
 8017476:	d104      	bne.n	8017482 <vTaskSwitchContext+0x8a>
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	685a      	ldr	r2, [r3, #4]
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	605a      	str	r2, [r3, #4]
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	68db      	ldr	r3, [r3, #12]
 8017488:	4a07      	ldr	r2, [pc, #28]	; (80174a8 <vTaskSwitchContext+0xb0>)
 801748a:	6013      	str	r3, [r2, #0]
}
 801748c:	bf00      	nop
 801748e:	371c      	adds	r7, #28
 8017490:	46bd      	mov	sp, r7
 8017492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017496:	4770      	bx	lr
 8017498:	20013040 	.word	0x20013040
 801749c:	2001302c 	.word	0x2001302c
 80174a0:	20013020 	.word	0x20013020
 80174a4:	20012f44 	.word	0x20012f44
 80174a8:	20012f40 	.word	0x20012f40

080174ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b084      	sub	sp, #16
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d109      	bne.n	80174d0 <vTaskPlaceOnEventList+0x24>
 80174bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174c0:	f383 8811 	msr	BASEPRI, r3
 80174c4:	f3bf 8f6f 	isb	sy
 80174c8:	f3bf 8f4f 	dsb	sy
 80174cc:	60fb      	str	r3, [r7, #12]
 80174ce:	e7fe      	b.n	80174ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80174d0:	4b07      	ldr	r3, [pc, #28]	; (80174f0 <vTaskPlaceOnEventList+0x44>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	3318      	adds	r3, #24
 80174d6:	4619      	mov	r1, r3
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	f7fe fdc2 	bl	8016062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80174de:	2101      	movs	r1, #1
 80174e0:	6838      	ldr	r0, [r7, #0]
 80174e2:	f000 fba7 	bl	8017c34 <prvAddCurrentTaskToDelayedList>
}
 80174e6:	bf00      	nop
 80174e8:	3710      	adds	r7, #16
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	bf00      	nop
 80174f0:	20012f40 	.word	0x20012f40

080174f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b086      	sub	sp, #24
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d109      	bne.n	801751a <vTaskPlaceOnEventListRestricted+0x26>
 8017506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801750a:	f383 8811 	msr	BASEPRI, r3
 801750e:	f3bf 8f6f 	isb	sy
 8017512:	f3bf 8f4f 	dsb	sy
 8017516:	617b      	str	r3, [r7, #20]
 8017518:	e7fe      	b.n	8017518 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801751a:	4b0a      	ldr	r3, [pc, #40]	; (8017544 <vTaskPlaceOnEventListRestricted+0x50>)
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	3318      	adds	r3, #24
 8017520:	4619      	mov	r1, r3
 8017522:	68f8      	ldr	r0, [r7, #12]
 8017524:	f7fe fd79 	bl	801601a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d002      	beq.n	8017534 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801752e:	f04f 33ff 	mov.w	r3, #4294967295
 8017532:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017534:	6879      	ldr	r1, [r7, #4]
 8017536:	68b8      	ldr	r0, [r7, #8]
 8017538:	f000 fb7c 	bl	8017c34 <prvAddCurrentTaskToDelayedList>
	}
 801753c:	bf00      	nop
 801753e:	3718      	adds	r7, #24
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	20012f40 	.word	0x20012f40

08017548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b086      	sub	sp, #24
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	68db      	ldr	r3, [r3, #12]
 8017556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017558:	693b      	ldr	r3, [r7, #16]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d109      	bne.n	8017572 <xTaskRemoveFromEventList+0x2a>
 801755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017562:	f383 8811 	msr	BASEPRI, r3
 8017566:	f3bf 8f6f 	isb	sy
 801756a:	f3bf 8f4f 	dsb	sy
 801756e:	60fb      	str	r3, [r7, #12]
 8017570:	e7fe      	b.n	8017570 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	3318      	adds	r3, #24
 8017576:	4618      	mov	r0, r3
 8017578:	f7fe fdac 	bl	80160d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801757c:	4b1d      	ldr	r3, [pc, #116]	; (80175f4 <xTaskRemoveFromEventList+0xac>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d11c      	bne.n	80175be <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017584:	693b      	ldr	r3, [r7, #16]
 8017586:	3304      	adds	r3, #4
 8017588:	4618      	mov	r0, r3
 801758a:	f7fe fda3 	bl	80160d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017592:	2201      	movs	r2, #1
 8017594:	409a      	lsls	r2, r3
 8017596:	4b18      	ldr	r3, [pc, #96]	; (80175f8 <xTaskRemoveFromEventList+0xb0>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	4313      	orrs	r3, r2
 801759c:	4a16      	ldr	r2, [pc, #88]	; (80175f8 <xTaskRemoveFromEventList+0xb0>)
 801759e:	6013      	str	r3, [r2, #0]
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175a4:	4613      	mov	r3, r2
 80175a6:	009b      	lsls	r3, r3, #2
 80175a8:	4413      	add	r3, r2
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	4a13      	ldr	r2, [pc, #76]	; (80175fc <xTaskRemoveFromEventList+0xb4>)
 80175ae:	441a      	add	r2, r3
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	3304      	adds	r3, #4
 80175b4:	4619      	mov	r1, r3
 80175b6:	4610      	mov	r0, r2
 80175b8:	f7fe fd2f 	bl	801601a <vListInsertEnd>
 80175bc:	e005      	b.n	80175ca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	3318      	adds	r3, #24
 80175c2:	4619      	mov	r1, r3
 80175c4:	480e      	ldr	r0, [pc, #56]	; (8017600 <xTaskRemoveFromEventList+0xb8>)
 80175c6:	f7fe fd28 	bl	801601a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ce:	4b0d      	ldr	r3, [pc, #52]	; (8017604 <xTaskRemoveFromEventList+0xbc>)
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d905      	bls.n	80175e4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80175d8:	2301      	movs	r3, #1
 80175da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80175dc:	4b0a      	ldr	r3, [pc, #40]	; (8017608 <xTaskRemoveFromEventList+0xc0>)
 80175de:	2201      	movs	r2, #1
 80175e0:	601a      	str	r2, [r3, #0]
 80175e2:	e001      	b.n	80175e8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80175e4:	2300      	movs	r3, #0
 80175e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80175e8:	697b      	ldr	r3, [r7, #20]
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	3718      	adds	r7, #24
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd80      	pop	{r7, pc}
 80175f2:	bf00      	nop
 80175f4:	20013040 	.word	0x20013040
 80175f8:	20013020 	.word	0x20013020
 80175fc:	20012f44 	.word	0x20012f44
 8017600:	20012fd8 	.word	0x20012fd8
 8017604:	20012f40 	.word	0x20012f40
 8017608:	2001302c 	.word	0x2001302c

0801760c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801760c:	b480      	push	{r7}
 801760e:	b083      	sub	sp, #12
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017614:	4b06      	ldr	r3, [pc, #24]	; (8017630 <vTaskInternalSetTimeOutState+0x24>)
 8017616:	681a      	ldr	r2, [r3, #0]
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801761c:	4b05      	ldr	r3, [pc, #20]	; (8017634 <vTaskInternalSetTimeOutState+0x28>)
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	605a      	str	r2, [r3, #4]
}
 8017624:	bf00      	nop
 8017626:	370c      	adds	r7, #12
 8017628:	46bd      	mov	sp, r7
 801762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762e:	4770      	bx	lr
 8017630:	20013030 	.word	0x20013030
 8017634:	2001301c 	.word	0x2001301c

08017638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b088      	sub	sp, #32
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d109      	bne.n	801765c <xTaskCheckForTimeOut+0x24>
 8017648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801764c:	f383 8811 	msr	BASEPRI, r3
 8017650:	f3bf 8f6f 	isb	sy
 8017654:	f3bf 8f4f 	dsb	sy
 8017658:	613b      	str	r3, [r7, #16]
 801765a:	e7fe      	b.n	801765a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d109      	bne.n	8017676 <xTaskCheckForTimeOut+0x3e>
 8017662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017666:	f383 8811 	msr	BASEPRI, r3
 801766a:	f3bf 8f6f 	isb	sy
 801766e:	f3bf 8f4f 	dsb	sy
 8017672:	60fb      	str	r3, [r7, #12]
 8017674:	e7fe      	b.n	8017674 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8017676:	f7fe fb91 	bl	8015d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801767a:	4b1d      	ldr	r3, [pc, #116]	; (80176f0 <xTaskCheckForTimeOut+0xb8>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	69ba      	ldr	r2, [r7, #24]
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017692:	d102      	bne.n	801769a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017694:	2300      	movs	r3, #0
 8017696:	61fb      	str	r3, [r7, #28]
 8017698:	e023      	b.n	80176e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	4b15      	ldr	r3, [pc, #84]	; (80176f4 <xTaskCheckForTimeOut+0xbc>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d007      	beq.n	80176b6 <xTaskCheckForTimeOut+0x7e>
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	685a      	ldr	r2, [r3, #4]
 80176aa:	69bb      	ldr	r3, [r7, #24]
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d802      	bhi.n	80176b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80176b0:	2301      	movs	r3, #1
 80176b2:	61fb      	str	r3, [r7, #28]
 80176b4:	e015      	b.n	80176e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	429a      	cmp	r2, r3
 80176be:	d90b      	bls.n	80176d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	681a      	ldr	r2, [r3, #0]
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	1ad2      	subs	r2, r2, r3
 80176c8:	683b      	ldr	r3, [r7, #0]
 80176ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f7ff ff9d 	bl	801760c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80176d2:	2300      	movs	r3, #0
 80176d4:	61fb      	str	r3, [r7, #28]
 80176d6:	e004      	b.n	80176e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	2200      	movs	r2, #0
 80176dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80176de:	2301      	movs	r3, #1
 80176e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80176e2:	f7fe fb89 	bl	8015df8 <vPortExitCritical>

	return xReturn;
 80176e6:	69fb      	ldr	r3, [r7, #28]
}
 80176e8:	4618      	mov	r0, r3
 80176ea:	3720      	adds	r7, #32
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	2001301c 	.word	0x2001301c
 80176f4:	20013030 	.word	0x20013030

080176f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80176f8:	b480      	push	{r7}
 80176fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80176fc:	4b03      	ldr	r3, [pc, #12]	; (801770c <vTaskMissedYield+0x14>)
 80176fe:	2201      	movs	r2, #1
 8017700:	601a      	str	r2, [r3, #0]
}
 8017702:	bf00      	nop
 8017704:	46bd      	mov	sp, r7
 8017706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770a:	4770      	bx	lr
 801770c:	2001302c 	.word	0x2001302c

08017710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017718:	f000 f852 	bl	80177c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801771c:	4b06      	ldr	r3, [pc, #24]	; (8017738 <prvIdleTask+0x28>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	2b01      	cmp	r3, #1
 8017722:	d9f9      	bls.n	8017718 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017724:	4b05      	ldr	r3, [pc, #20]	; (801773c <prvIdleTask+0x2c>)
 8017726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801772a:	601a      	str	r2, [r3, #0]
 801772c:	f3bf 8f4f 	dsb	sy
 8017730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017734:	e7f0      	b.n	8017718 <prvIdleTask+0x8>
 8017736:	bf00      	nop
 8017738:	20012f44 	.word	0x20012f44
 801773c:	e000ed04 	.word	0xe000ed04

08017740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017746:	2300      	movs	r3, #0
 8017748:	607b      	str	r3, [r7, #4]
 801774a:	e00c      	b.n	8017766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801774c:	687a      	ldr	r2, [r7, #4]
 801774e:	4613      	mov	r3, r2
 8017750:	009b      	lsls	r3, r3, #2
 8017752:	4413      	add	r3, r2
 8017754:	009b      	lsls	r3, r3, #2
 8017756:	4a12      	ldr	r2, [pc, #72]	; (80177a0 <prvInitialiseTaskLists+0x60>)
 8017758:	4413      	add	r3, r2
 801775a:	4618      	mov	r0, r3
 801775c:	f7fe fc30 	bl	8015fc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	3301      	adds	r3, #1
 8017764:	607b      	str	r3, [r7, #4]
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	2b04      	cmp	r3, #4
 801776a:	d9ef      	bls.n	801774c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801776c:	480d      	ldr	r0, [pc, #52]	; (80177a4 <prvInitialiseTaskLists+0x64>)
 801776e:	f7fe fc27 	bl	8015fc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017772:	480d      	ldr	r0, [pc, #52]	; (80177a8 <prvInitialiseTaskLists+0x68>)
 8017774:	f7fe fc24 	bl	8015fc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017778:	480c      	ldr	r0, [pc, #48]	; (80177ac <prvInitialiseTaskLists+0x6c>)
 801777a:	f7fe fc21 	bl	8015fc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801777e:	480c      	ldr	r0, [pc, #48]	; (80177b0 <prvInitialiseTaskLists+0x70>)
 8017780:	f7fe fc1e 	bl	8015fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017784:	480b      	ldr	r0, [pc, #44]	; (80177b4 <prvInitialiseTaskLists+0x74>)
 8017786:	f7fe fc1b 	bl	8015fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801778a:	4b0b      	ldr	r3, [pc, #44]	; (80177b8 <prvInitialiseTaskLists+0x78>)
 801778c:	4a05      	ldr	r2, [pc, #20]	; (80177a4 <prvInitialiseTaskLists+0x64>)
 801778e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017790:	4b0a      	ldr	r3, [pc, #40]	; (80177bc <prvInitialiseTaskLists+0x7c>)
 8017792:	4a05      	ldr	r2, [pc, #20]	; (80177a8 <prvInitialiseTaskLists+0x68>)
 8017794:	601a      	str	r2, [r3, #0]
}
 8017796:	bf00      	nop
 8017798:	3708      	adds	r7, #8
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	20012f44 	.word	0x20012f44
 80177a4:	20012fa8 	.word	0x20012fa8
 80177a8:	20012fbc 	.word	0x20012fbc
 80177ac:	20012fd8 	.word	0x20012fd8
 80177b0:	20012fec 	.word	0x20012fec
 80177b4:	20013004 	.word	0x20013004
 80177b8:	20012fd0 	.word	0x20012fd0
 80177bc:	20012fd4 	.word	0x20012fd4

080177c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b082      	sub	sp, #8
 80177c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80177c6:	e019      	b.n	80177fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80177c8:	f7fe fae8 	bl	8015d9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177cc:	4b0f      	ldr	r3, [pc, #60]	; (801780c <prvCheckTasksWaitingTermination+0x4c>)
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	68db      	ldr	r3, [r3, #12]
 80177d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	3304      	adds	r3, #4
 80177d8:	4618      	mov	r0, r3
 80177da:	f7fe fc7b 	bl	80160d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80177de:	4b0c      	ldr	r3, [pc, #48]	; (8017810 <prvCheckTasksWaitingTermination+0x50>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	3b01      	subs	r3, #1
 80177e4:	4a0a      	ldr	r2, [pc, #40]	; (8017810 <prvCheckTasksWaitingTermination+0x50>)
 80177e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80177e8:	4b0a      	ldr	r3, [pc, #40]	; (8017814 <prvCheckTasksWaitingTermination+0x54>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	3b01      	subs	r3, #1
 80177ee:	4a09      	ldr	r2, [pc, #36]	; (8017814 <prvCheckTasksWaitingTermination+0x54>)
 80177f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80177f2:	f7fe fb01 	bl	8015df8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80177f6:	6878      	ldr	r0, [r7, #4]
 80177f8:	f000 f80e 	bl	8017818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80177fc:	4b05      	ldr	r3, [pc, #20]	; (8017814 <prvCheckTasksWaitingTermination+0x54>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d1e1      	bne.n	80177c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017804:	bf00      	nop
 8017806:	3708      	adds	r7, #8
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}
 801780c:	20012fec 	.word	0x20012fec
 8017810:	20013018 	.word	0x20013018
 8017814:	20013000 	.word	0x20013000

08017818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017824:	4618      	mov	r0, r3
 8017826:	f7fe f87d 	bl	8015924 <vPortFree>
			vPortFree( pxTCB );
 801782a:	6878      	ldr	r0, [r7, #4]
 801782c:	f7fe f87a 	bl	8015924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017830:	bf00      	nop
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017838:	b480      	push	{r7}
 801783a:	b083      	sub	sp, #12
 801783c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801783e:	4b0c      	ldr	r3, [pc, #48]	; (8017870 <prvResetNextTaskUnblockTime+0x38>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d104      	bne.n	8017852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017848:	4b0a      	ldr	r3, [pc, #40]	; (8017874 <prvResetNextTaskUnblockTime+0x3c>)
 801784a:	f04f 32ff 	mov.w	r2, #4294967295
 801784e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017850:	e008      	b.n	8017864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017852:	4b07      	ldr	r3, [pc, #28]	; (8017870 <prvResetNextTaskUnblockTime+0x38>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	68db      	ldr	r3, [r3, #12]
 801785a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	4a04      	ldr	r2, [pc, #16]	; (8017874 <prvResetNextTaskUnblockTime+0x3c>)
 8017862:	6013      	str	r3, [r2, #0]
}
 8017864:	bf00      	nop
 8017866:	370c      	adds	r7, #12
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr
 8017870:	20012fd0 	.word	0x20012fd0
 8017874:	20013038 	.word	0x20013038

08017878 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017878:	b480      	push	{r7}
 801787a:	b083      	sub	sp, #12
 801787c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801787e:	4b05      	ldr	r3, [pc, #20]	; (8017894 <xTaskGetCurrentTaskHandle+0x1c>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017884:	687b      	ldr	r3, [r7, #4]
	}
 8017886:	4618      	mov	r0, r3
 8017888:	370c      	adds	r7, #12
 801788a:	46bd      	mov	sp, r7
 801788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017890:	4770      	bx	lr
 8017892:	bf00      	nop
 8017894:	20012f40 	.word	0x20012f40

08017898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017898:	b480      	push	{r7}
 801789a:	b083      	sub	sp, #12
 801789c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801789e:	4b0b      	ldr	r3, [pc, #44]	; (80178cc <xTaskGetSchedulerState+0x34>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d102      	bne.n	80178ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80178a6:	2301      	movs	r3, #1
 80178a8:	607b      	str	r3, [r7, #4]
 80178aa:	e008      	b.n	80178be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178ac:	4b08      	ldr	r3, [pc, #32]	; (80178d0 <xTaskGetSchedulerState+0x38>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d102      	bne.n	80178ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80178b4:	2302      	movs	r3, #2
 80178b6:	607b      	str	r3, [r7, #4]
 80178b8:	e001      	b.n	80178be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80178ba:	2300      	movs	r3, #0
 80178bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80178be:	687b      	ldr	r3, [r7, #4]
	}
 80178c0:	4618      	mov	r0, r3
 80178c2:	370c      	adds	r7, #12
 80178c4:	46bd      	mov	sp, r7
 80178c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ca:	4770      	bx	lr
 80178cc:	20013024 	.word	0x20013024
 80178d0:	20013040 	.word	0x20013040

080178d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b084      	sub	sp, #16
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80178e0:	2300      	movs	r3, #0
 80178e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d069      	beq.n	80179be <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80178ea:	68bb      	ldr	r3, [r7, #8]
 80178ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ee:	4b36      	ldr	r3, [pc, #216]	; (80179c8 <xTaskPriorityInherit+0xf4>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d259      	bcs.n	80179ac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80178f8:	68bb      	ldr	r3, [r7, #8]
 80178fa:	699b      	ldr	r3, [r3, #24]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	db06      	blt.n	801790e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017900:	4b31      	ldr	r3, [pc, #196]	; (80179c8 <xTaskPriorityInherit+0xf4>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017906:	f1c3 0205 	rsb	r2, r3, #5
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	6959      	ldr	r1, [r3, #20]
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017916:	4613      	mov	r3, r2
 8017918:	009b      	lsls	r3, r3, #2
 801791a:	4413      	add	r3, r2
 801791c:	009b      	lsls	r3, r3, #2
 801791e:	4a2b      	ldr	r2, [pc, #172]	; (80179cc <xTaskPriorityInherit+0xf8>)
 8017920:	4413      	add	r3, r2
 8017922:	4299      	cmp	r1, r3
 8017924:	d13a      	bne.n	801799c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	3304      	adds	r3, #4
 801792a:	4618      	mov	r0, r3
 801792c:	f7fe fbd2 	bl	80160d4 <uxListRemove>
 8017930:	4603      	mov	r3, r0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d115      	bne.n	8017962 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801793a:	4924      	ldr	r1, [pc, #144]	; (80179cc <xTaskPriorityInherit+0xf8>)
 801793c:	4613      	mov	r3, r2
 801793e:	009b      	lsls	r3, r3, #2
 8017940:	4413      	add	r3, r2
 8017942:	009b      	lsls	r3, r3, #2
 8017944:	440b      	add	r3, r1
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d10a      	bne.n	8017962 <xTaskPriorityInherit+0x8e>
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017950:	2201      	movs	r2, #1
 8017952:	fa02 f303 	lsl.w	r3, r2, r3
 8017956:	43da      	mvns	r2, r3
 8017958:	4b1d      	ldr	r3, [pc, #116]	; (80179d0 <xTaskPriorityInherit+0xfc>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	4013      	ands	r3, r2
 801795e:	4a1c      	ldr	r2, [pc, #112]	; (80179d0 <xTaskPriorityInherit+0xfc>)
 8017960:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017962:	4b19      	ldr	r3, [pc, #100]	; (80179c8 <xTaskPriorityInherit+0xf4>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017968:	68bb      	ldr	r3, [r7, #8]
 801796a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017970:	2201      	movs	r2, #1
 8017972:	409a      	lsls	r2, r3
 8017974:	4b16      	ldr	r3, [pc, #88]	; (80179d0 <xTaskPriorityInherit+0xfc>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	4313      	orrs	r3, r2
 801797a:	4a15      	ldr	r2, [pc, #84]	; (80179d0 <xTaskPriorityInherit+0xfc>)
 801797c:	6013      	str	r3, [r2, #0]
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017982:	4613      	mov	r3, r2
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	4413      	add	r3, r2
 8017988:	009b      	lsls	r3, r3, #2
 801798a:	4a10      	ldr	r2, [pc, #64]	; (80179cc <xTaskPriorityInherit+0xf8>)
 801798c:	441a      	add	r2, r3
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	3304      	adds	r3, #4
 8017992:	4619      	mov	r1, r3
 8017994:	4610      	mov	r0, r2
 8017996:	f7fe fb40 	bl	801601a <vListInsertEnd>
 801799a:	e004      	b.n	80179a6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801799c:	4b0a      	ldr	r3, [pc, #40]	; (80179c8 <xTaskPriorityInherit+0xf4>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a2:	68bb      	ldr	r3, [r7, #8]
 80179a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80179a6:	2301      	movs	r3, #1
 80179a8:	60fb      	str	r3, [r7, #12]
 80179aa:	e008      	b.n	80179be <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80179ac:	68bb      	ldr	r3, [r7, #8]
 80179ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80179b0:	4b05      	ldr	r3, [pc, #20]	; (80179c8 <xTaskPriorityInherit+0xf4>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d201      	bcs.n	80179be <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80179ba:	2301      	movs	r3, #1
 80179bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80179be:	68fb      	ldr	r3, [r7, #12]
	}
 80179c0:	4618      	mov	r0, r3
 80179c2:	3710      	adds	r7, #16
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}
 80179c8:	20012f40 	.word	0x20012f40
 80179cc:	20012f44 	.word	0x20012f44
 80179d0:	20013020 	.word	0x20013020

080179d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b086      	sub	sp, #24
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80179e0:	2300      	movs	r3, #0
 80179e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d06c      	beq.n	8017ac4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80179ea:	4b39      	ldr	r3, [pc, #228]	; (8017ad0 <xTaskPriorityDisinherit+0xfc>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	693a      	ldr	r2, [r7, #16]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d009      	beq.n	8017a08 <xTaskPriorityDisinherit+0x34>
 80179f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	60fb      	str	r3, [r7, #12]
 8017a06:	e7fe      	b.n	8017a06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d109      	bne.n	8017a24 <xTaskPriorityDisinherit+0x50>
 8017a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a14:	f383 8811 	msr	BASEPRI, r3
 8017a18:	f3bf 8f6f 	isb	sy
 8017a1c:	f3bf 8f4f 	dsb	sy
 8017a20:	60bb      	str	r3, [r7, #8]
 8017a22:	e7fe      	b.n	8017a22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8017a24:	693b      	ldr	r3, [r7, #16]
 8017a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a28:	1e5a      	subs	r2, r3, #1
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a32:	693b      	ldr	r3, [r7, #16]
 8017a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a36:	429a      	cmp	r2, r3
 8017a38:	d044      	beq.n	8017ac4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017a3a:	693b      	ldr	r3, [r7, #16]
 8017a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d140      	bne.n	8017ac4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017a42:	693b      	ldr	r3, [r7, #16]
 8017a44:	3304      	adds	r3, #4
 8017a46:	4618      	mov	r0, r3
 8017a48:	f7fe fb44 	bl	80160d4 <uxListRemove>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d115      	bne.n	8017a7e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a56:	491f      	ldr	r1, [pc, #124]	; (8017ad4 <xTaskPriorityDisinherit+0x100>)
 8017a58:	4613      	mov	r3, r2
 8017a5a:	009b      	lsls	r3, r3, #2
 8017a5c:	4413      	add	r3, r2
 8017a5e:	009b      	lsls	r3, r3, #2
 8017a60:	440b      	add	r3, r1
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d10a      	bne.n	8017a7e <xTaskPriorityDisinherit+0xaa>
 8017a68:	693b      	ldr	r3, [r7, #16]
 8017a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a6c:	2201      	movs	r2, #1
 8017a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8017a72:	43da      	mvns	r2, r3
 8017a74:	4b18      	ldr	r3, [pc, #96]	; (8017ad8 <xTaskPriorityDisinherit+0x104>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	4013      	ands	r3, r2
 8017a7a:	4a17      	ldr	r2, [pc, #92]	; (8017ad8 <xTaskPriorityDisinherit+0x104>)
 8017a7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017a7e:	693b      	ldr	r3, [r7, #16]
 8017a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a8a:	f1c3 0205 	rsb	r2, r3, #5
 8017a8e:	693b      	ldr	r3, [r7, #16]
 8017a90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a96:	2201      	movs	r2, #1
 8017a98:	409a      	lsls	r2, r3
 8017a9a:	4b0f      	ldr	r3, [pc, #60]	; (8017ad8 <xTaskPriorityDisinherit+0x104>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	4313      	orrs	r3, r2
 8017aa0:	4a0d      	ldr	r2, [pc, #52]	; (8017ad8 <xTaskPriorityDisinherit+0x104>)
 8017aa2:	6013      	str	r3, [r2, #0]
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aa8:	4613      	mov	r3, r2
 8017aaa:	009b      	lsls	r3, r3, #2
 8017aac:	4413      	add	r3, r2
 8017aae:	009b      	lsls	r3, r3, #2
 8017ab0:	4a08      	ldr	r2, [pc, #32]	; (8017ad4 <xTaskPriorityDisinherit+0x100>)
 8017ab2:	441a      	add	r2, r3
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	3304      	adds	r3, #4
 8017ab8:	4619      	mov	r1, r3
 8017aba:	4610      	mov	r0, r2
 8017abc:	f7fe faad 	bl	801601a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017ac4:	697b      	ldr	r3, [r7, #20]
	}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3718      	adds	r7, #24
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	20012f40 	.word	0x20012f40
 8017ad4:	20012f44 	.word	0x20012f44
 8017ad8:	20013020 	.word	0x20013020

08017adc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b088      	sub	sp, #32
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017aea:	2301      	movs	r3, #1
 8017aec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f000 8081 	beq.w	8017bf8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017af6:	69bb      	ldr	r3, [r7, #24]
 8017af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d109      	bne.n	8017b12 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8017afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b02:	f383 8811 	msr	BASEPRI, r3
 8017b06:	f3bf 8f6f 	isb	sy
 8017b0a:	f3bf 8f4f 	dsb	sy
 8017b0e:	60fb      	str	r3, [r7, #12]
 8017b10:	e7fe      	b.n	8017b10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d202      	bcs.n	8017b22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	61fb      	str	r3, [r7, #28]
 8017b20:	e002      	b.n	8017b28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017b22:	69bb      	ldr	r3, [r7, #24]
 8017b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017b28:	69bb      	ldr	r3, [r7, #24]
 8017b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b2c:	69fb      	ldr	r3, [r7, #28]
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d062      	beq.n	8017bf8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017b32:	69bb      	ldr	r3, [r7, #24]
 8017b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d15d      	bne.n	8017bf8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017b3c:	4b30      	ldr	r3, [pc, #192]	; (8017c00 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	69ba      	ldr	r2, [r7, #24]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d109      	bne.n	8017b5a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8017b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b4a:	f383 8811 	msr	BASEPRI, r3
 8017b4e:	f3bf 8f6f 	isb	sy
 8017b52:	f3bf 8f4f 	dsb	sy
 8017b56:	60bb      	str	r3, [r7, #8]
 8017b58:	e7fe      	b.n	8017b58 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017b5a:	69bb      	ldr	r3, [r7, #24]
 8017b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b5e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017b60:	69bb      	ldr	r3, [r7, #24]
 8017b62:	69fa      	ldr	r2, [r7, #28]
 8017b64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017b66:	69bb      	ldr	r3, [r7, #24]
 8017b68:	699b      	ldr	r3, [r3, #24]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	db04      	blt.n	8017b78 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	f1c3 0205 	rsb	r2, r3, #5
 8017b74:	69bb      	ldr	r3, [r7, #24]
 8017b76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017b78:	69bb      	ldr	r3, [r7, #24]
 8017b7a:	6959      	ldr	r1, [r3, #20]
 8017b7c:	693a      	ldr	r2, [r7, #16]
 8017b7e:	4613      	mov	r3, r2
 8017b80:	009b      	lsls	r3, r3, #2
 8017b82:	4413      	add	r3, r2
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	4a1f      	ldr	r2, [pc, #124]	; (8017c04 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8017b88:	4413      	add	r3, r2
 8017b8a:	4299      	cmp	r1, r3
 8017b8c:	d134      	bne.n	8017bf8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017b8e:	69bb      	ldr	r3, [r7, #24]
 8017b90:	3304      	adds	r3, #4
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7fe fa9e 	bl	80160d4 <uxListRemove>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d115      	bne.n	8017bca <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ba2:	4918      	ldr	r1, [pc, #96]	; (8017c04 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	4413      	add	r3, r2
 8017baa:	009b      	lsls	r3, r3, #2
 8017bac:	440b      	add	r3, r1
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d10a      	bne.n	8017bca <vTaskPriorityDisinheritAfterTimeout+0xee>
 8017bb4:	69bb      	ldr	r3, [r7, #24]
 8017bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bb8:	2201      	movs	r2, #1
 8017bba:	fa02 f303 	lsl.w	r3, r2, r3
 8017bbe:	43da      	mvns	r2, r3
 8017bc0:	4b11      	ldr	r3, [pc, #68]	; (8017c08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	4013      	ands	r3, r2
 8017bc6:	4a10      	ldr	r2, [pc, #64]	; (8017c08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017bc8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bce:	2201      	movs	r2, #1
 8017bd0:	409a      	lsls	r2, r3
 8017bd2:	4b0d      	ldr	r3, [pc, #52]	; (8017c08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	4313      	orrs	r3, r2
 8017bd8:	4a0b      	ldr	r2, [pc, #44]	; (8017c08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017bda:	6013      	str	r3, [r2, #0]
 8017bdc:	69bb      	ldr	r3, [r7, #24]
 8017bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017be0:	4613      	mov	r3, r2
 8017be2:	009b      	lsls	r3, r3, #2
 8017be4:	4413      	add	r3, r2
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	4a06      	ldr	r2, [pc, #24]	; (8017c04 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8017bea:	441a      	add	r2, r3
 8017bec:	69bb      	ldr	r3, [r7, #24]
 8017bee:	3304      	adds	r3, #4
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	4610      	mov	r0, r2
 8017bf4:	f7fe fa11 	bl	801601a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017bf8:	bf00      	nop
 8017bfa:	3720      	adds	r7, #32
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	20012f40 	.word	0x20012f40
 8017c04:	20012f44 	.word	0x20012f44
 8017c08:	20013020 	.word	0x20013020

08017c0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017c0c:	b480      	push	{r7}
 8017c0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017c10:	4b07      	ldr	r3, [pc, #28]	; (8017c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d004      	beq.n	8017c22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017c18:	4b05      	ldr	r3, [pc, #20]	; (8017c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017c1e:	3201      	adds	r2, #1
 8017c20:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8017c22:	4b03      	ldr	r3, [pc, #12]	; (8017c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c24:	681b      	ldr	r3, [r3, #0]
	}
 8017c26:	4618      	mov	r0, r3
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr
 8017c30:	20012f40 	.word	0x20012f40

08017c34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b084      	sub	sp, #16
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017c3e:	4b29      	ldr	r3, [pc, #164]	; (8017ce4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c44:	4b28      	ldr	r3, [pc, #160]	; (8017ce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	3304      	adds	r3, #4
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f7fe fa42 	bl	80160d4 <uxListRemove>
 8017c50:	4603      	mov	r3, r0
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d10b      	bne.n	8017c6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017c56:	4b24      	ldr	r3, [pc, #144]	; (8017ce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c5c:	2201      	movs	r2, #1
 8017c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8017c62:	43da      	mvns	r2, r3
 8017c64:	4b21      	ldr	r3, [pc, #132]	; (8017cec <prvAddCurrentTaskToDelayedList+0xb8>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	4013      	ands	r3, r2
 8017c6a:	4a20      	ldr	r2, [pc, #128]	; (8017cec <prvAddCurrentTaskToDelayedList+0xb8>)
 8017c6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c74:	d10a      	bne.n	8017c8c <prvAddCurrentTaskToDelayedList+0x58>
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d007      	beq.n	8017c8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c7c:	4b1a      	ldr	r3, [pc, #104]	; (8017ce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	3304      	adds	r3, #4
 8017c82:	4619      	mov	r1, r3
 8017c84:	481a      	ldr	r0, [pc, #104]	; (8017cf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017c86:	f7fe f9c8 	bl	801601a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017c8a:	e026      	b.n	8017cda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017c8c:	68fa      	ldr	r2, [r7, #12]
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	4413      	add	r3, r2
 8017c92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017c94:	4b14      	ldr	r3, [pc, #80]	; (8017ce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	68ba      	ldr	r2, [r7, #8]
 8017c9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017c9c:	68ba      	ldr	r2, [r7, #8]
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d209      	bcs.n	8017cb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017ca4:	4b13      	ldr	r3, [pc, #76]	; (8017cf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017ca6:	681a      	ldr	r2, [r3, #0]
 8017ca8:	4b0f      	ldr	r3, [pc, #60]	; (8017ce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	3304      	adds	r3, #4
 8017cae:	4619      	mov	r1, r3
 8017cb0:	4610      	mov	r0, r2
 8017cb2:	f7fe f9d6 	bl	8016062 <vListInsert>
}
 8017cb6:	e010      	b.n	8017cda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017cb8:	4b0f      	ldr	r3, [pc, #60]	; (8017cf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017cba:	681a      	ldr	r2, [r3, #0]
 8017cbc:	4b0a      	ldr	r3, [pc, #40]	; (8017ce8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	3304      	adds	r3, #4
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	4610      	mov	r0, r2
 8017cc6:	f7fe f9cc 	bl	8016062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017cca:	4b0c      	ldr	r3, [pc, #48]	; (8017cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	68ba      	ldr	r2, [r7, #8]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d202      	bcs.n	8017cda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017cd4:	4a09      	ldr	r2, [pc, #36]	; (8017cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	6013      	str	r3, [r2, #0]
}
 8017cda:	bf00      	nop
 8017cdc:	3710      	adds	r7, #16
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	2001301c 	.word	0x2001301c
 8017ce8:	20012f40 	.word	0x20012f40
 8017cec:	20013020 	.word	0x20013020
 8017cf0:	20013004 	.word	0x20013004
 8017cf4:	20012fd4 	.word	0x20012fd4
 8017cf8:	20012fd0 	.word	0x20012fd0
 8017cfc:	20013038 	.word	0x20013038

08017d00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b084      	sub	sp, #16
 8017d04:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8017d06:	2300      	movs	r3, #0
 8017d08:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017d0a:	f000 fad1 	bl	80182b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017d0e:	4b11      	ldr	r3, [pc, #68]	; (8017d54 <xTimerCreateTimerTask+0x54>)
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d00b      	beq.n	8017d2e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8017d16:	4b10      	ldr	r3, [pc, #64]	; (8017d58 <xTimerCreateTimerTask+0x58>)
 8017d18:	9301      	str	r3, [sp, #4]
 8017d1a:	2302      	movs	r3, #2
 8017d1c:	9300      	str	r3, [sp, #0]
 8017d1e:	2300      	movs	r3, #0
 8017d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017d24:	490d      	ldr	r1, [pc, #52]	; (8017d5c <xTimerCreateTimerTask+0x5c>)
 8017d26:	480e      	ldr	r0, [pc, #56]	; (8017d60 <xTimerCreateTimerTask+0x60>)
 8017d28:	f7ff f842 	bl	8016db0 <xTaskCreate>
 8017d2c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d109      	bne.n	8017d48 <xTimerCreateTimerTask+0x48>
 8017d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d38:	f383 8811 	msr	BASEPRI, r3
 8017d3c:	f3bf 8f6f 	isb	sy
 8017d40:	f3bf 8f4f 	dsb	sy
 8017d44:	603b      	str	r3, [r7, #0]
 8017d46:	e7fe      	b.n	8017d46 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8017d48:	687b      	ldr	r3, [r7, #4]
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3708      	adds	r7, #8
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	20013074 	.word	0x20013074
 8017d58:	20013078 	.word	0x20013078
 8017d5c:	0801c668 	.word	0x0801c668
 8017d60:	08017e95 	.word	0x08017e95

08017d64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b08a      	sub	sp, #40	; 0x28
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	60f8      	str	r0, [r7, #12]
 8017d6c:	60b9      	str	r1, [r7, #8]
 8017d6e:	607a      	str	r2, [r7, #4]
 8017d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017d72:	2300      	movs	r3, #0
 8017d74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d109      	bne.n	8017d90 <xTimerGenericCommand+0x2c>
 8017d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d80:	f383 8811 	msr	BASEPRI, r3
 8017d84:	f3bf 8f6f 	isb	sy
 8017d88:	f3bf 8f4f 	dsb	sy
 8017d8c:	623b      	str	r3, [r7, #32]
 8017d8e:	e7fe      	b.n	8017d8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017d90:	4b19      	ldr	r3, [pc, #100]	; (8017df8 <xTimerGenericCommand+0x94>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d02a      	beq.n	8017dee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	2b05      	cmp	r3, #5
 8017da8:	dc18      	bgt.n	8017ddc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017daa:	f7ff fd75 	bl	8017898 <xTaskGetSchedulerState>
 8017dae:	4603      	mov	r3, r0
 8017db0:	2b02      	cmp	r3, #2
 8017db2:	d109      	bne.n	8017dc8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017db4:	4b10      	ldr	r3, [pc, #64]	; (8017df8 <xTimerGenericCommand+0x94>)
 8017db6:	6818      	ldr	r0, [r3, #0]
 8017db8:	f107 0114 	add.w	r1, r7, #20
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017dc0:	f7fe fb0e 	bl	80163e0 <xQueueGenericSend>
 8017dc4:	6278      	str	r0, [r7, #36]	; 0x24
 8017dc6:	e012      	b.n	8017dee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017dc8:	4b0b      	ldr	r3, [pc, #44]	; (8017df8 <xTimerGenericCommand+0x94>)
 8017dca:	6818      	ldr	r0, [r3, #0]
 8017dcc:	f107 0114 	add.w	r1, r7, #20
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	f7fe fb04 	bl	80163e0 <xQueueGenericSend>
 8017dd8:	6278      	str	r0, [r7, #36]	; 0x24
 8017dda:	e008      	b.n	8017dee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017ddc:	4b06      	ldr	r3, [pc, #24]	; (8017df8 <xTimerGenericCommand+0x94>)
 8017dde:	6818      	ldr	r0, [r3, #0]
 8017de0:	f107 0114 	add.w	r1, r7, #20
 8017de4:	2300      	movs	r3, #0
 8017de6:	683a      	ldr	r2, [r7, #0]
 8017de8:	f7fe fbf4 	bl	80165d4 <xQueueGenericSendFromISR>
 8017dec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3728      	adds	r7, #40	; 0x28
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	20013074 	.word	0x20013074

08017dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b088      	sub	sp, #32
 8017e00:	af02      	add	r7, sp, #8
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e06:	4b22      	ldr	r3, [pc, #136]	; (8017e90 <prvProcessExpiredTimer+0x94>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	68db      	ldr	r3, [r3, #12]
 8017e0c:	68db      	ldr	r3, [r3, #12]
 8017e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	3304      	adds	r3, #4
 8017e14:	4618      	mov	r0, r3
 8017e16:	f7fe f95d 	bl	80160d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e1a:	697b      	ldr	r3, [r7, #20]
 8017e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e20:	f003 0304 	and.w	r3, r3, #4
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d021      	beq.n	8017e6c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017e28:	697b      	ldr	r3, [r7, #20]
 8017e2a:	699a      	ldr	r2, [r3, #24]
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	18d1      	adds	r1, r2, r3
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	6978      	ldr	r0, [r7, #20]
 8017e36:	f000 f8d1 	bl	8017fdc <prvInsertTimerInActiveList>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d01e      	beq.n	8017e7e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e40:	2300      	movs	r3, #0
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	2300      	movs	r3, #0
 8017e46:	687a      	ldr	r2, [r7, #4]
 8017e48:	2100      	movs	r1, #0
 8017e4a:	6978      	ldr	r0, [r7, #20]
 8017e4c:	f7ff ff8a 	bl	8017d64 <xTimerGenericCommand>
 8017e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d112      	bne.n	8017e7e <prvProcessExpiredTimer+0x82>
 8017e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e5c:	f383 8811 	msr	BASEPRI, r3
 8017e60:	f3bf 8f6f 	isb	sy
 8017e64:	f3bf 8f4f 	dsb	sy
 8017e68:	60fb      	str	r3, [r7, #12]
 8017e6a:	e7fe      	b.n	8017e6a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017e6c:	697b      	ldr	r3, [r7, #20]
 8017e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e72:	f023 0301 	bic.w	r3, r3, #1
 8017e76:	b2da      	uxtb	r2, r3
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e7e:	697b      	ldr	r3, [r7, #20]
 8017e80:	6a1b      	ldr	r3, [r3, #32]
 8017e82:	6978      	ldr	r0, [r7, #20]
 8017e84:	4798      	blx	r3
}
 8017e86:	bf00      	nop
 8017e88:	3718      	adds	r7, #24
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	bf00      	nop
 8017e90:	2001306c 	.word	0x2001306c

08017e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017e9c:	f107 0308 	add.w	r3, r7, #8
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f000 f857 	bl	8017f54 <prvGetNextExpireTime>
 8017ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017ea8:	68bb      	ldr	r3, [r7, #8]
 8017eaa:	4619      	mov	r1, r3
 8017eac:	68f8      	ldr	r0, [r7, #12]
 8017eae:	f000 f803 	bl	8017eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017eb2:	f000 f8d5 	bl	8018060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017eb6:	e7f1      	b.n	8017e9c <prvTimerTask+0x8>

08017eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b084      	sub	sp, #16
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017ec2:	f7ff f927 	bl	8017114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017ec6:	f107 0308 	add.w	r3, r7, #8
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f000 f866 	bl	8017f9c <prvSampleTimeNow>
 8017ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d130      	bne.n	8017f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d10a      	bne.n	8017ef4 <prvProcessTimerOrBlockTask+0x3c>
 8017ede:	687a      	ldr	r2, [r7, #4]
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d806      	bhi.n	8017ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017ee6:	f7ff f923 	bl	8017130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017eea:	68f9      	ldr	r1, [r7, #12]
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f7ff ff85 	bl	8017dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017ef2:	e024      	b.n	8017f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017ef4:	683b      	ldr	r3, [r7, #0]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d008      	beq.n	8017f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017efa:	4b13      	ldr	r3, [pc, #76]	; (8017f48 <prvProcessTimerOrBlockTask+0x90>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d101      	bne.n	8017f08 <prvProcessTimerOrBlockTask+0x50>
 8017f04:	2301      	movs	r3, #1
 8017f06:	e000      	b.n	8017f0a <prvProcessTimerOrBlockTask+0x52>
 8017f08:	2300      	movs	r3, #0
 8017f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017f0c:	4b0f      	ldr	r3, [pc, #60]	; (8017f4c <prvProcessTimerOrBlockTask+0x94>)
 8017f0e:	6818      	ldr	r0, [r3, #0]
 8017f10:	687a      	ldr	r2, [r7, #4]
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	1ad3      	subs	r3, r2, r3
 8017f16:	683a      	ldr	r2, [r7, #0]
 8017f18:	4619      	mov	r1, r3
 8017f1a:	f7fe ff15 	bl	8016d48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017f1e:	f7ff f907 	bl	8017130 <xTaskResumeAll>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d10a      	bne.n	8017f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017f28:	4b09      	ldr	r3, [pc, #36]	; (8017f50 <prvProcessTimerOrBlockTask+0x98>)
 8017f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f2e:	601a      	str	r2, [r3, #0]
 8017f30:	f3bf 8f4f 	dsb	sy
 8017f34:	f3bf 8f6f 	isb	sy
}
 8017f38:	e001      	b.n	8017f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017f3a:	f7ff f8f9 	bl	8017130 <xTaskResumeAll>
}
 8017f3e:	bf00      	nop
 8017f40:	3710      	adds	r7, #16
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}
 8017f46:	bf00      	nop
 8017f48:	20013070 	.word	0x20013070
 8017f4c:	20013074 	.word	0x20013074
 8017f50:	e000ed04 	.word	0xe000ed04

08017f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017f54:	b480      	push	{r7}
 8017f56:	b085      	sub	sp, #20
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017f5c:	4b0e      	ldr	r3, [pc, #56]	; (8017f98 <prvGetNextExpireTime+0x44>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d101      	bne.n	8017f6a <prvGetNextExpireTime+0x16>
 8017f66:	2201      	movs	r2, #1
 8017f68:	e000      	b.n	8017f6c <prvGetNextExpireTime+0x18>
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d105      	bne.n	8017f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017f78:	4b07      	ldr	r3, [pc, #28]	; (8017f98 <prvGetNextExpireTime+0x44>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	68db      	ldr	r3, [r3, #12]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	60fb      	str	r3, [r7, #12]
 8017f82:	e001      	b.n	8017f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017f84:	2300      	movs	r3, #0
 8017f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017f88:	68fb      	ldr	r3, [r7, #12]
}
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3714      	adds	r7, #20
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f94:	4770      	bx	lr
 8017f96:	bf00      	nop
 8017f98:	2001306c 	.word	0x2001306c

08017f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b084      	sub	sp, #16
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017fa4:	f7ff f960 	bl	8017268 <xTaskGetTickCount>
 8017fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017faa:	4b0b      	ldr	r3, [pc, #44]	; (8017fd8 <prvSampleTimeNow+0x3c>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	68fa      	ldr	r2, [r7, #12]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d205      	bcs.n	8017fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017fb4:	f000 f918 	bl	80181e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2201      	movs	r2, #1
 8017fbc:	601a      	str	r2, [r3, #0]
 8017fbe:	e002      	b.n	8017fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017fc6:	4a04      	ldr	r2, [pc, #16]	; (8017fd8 <prvSampleTimeNow+0x3c>)
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017fcc:	68fb      	ldr	r3, [r7, #12]
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3710      	adds	r7, #16
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	2001307c 	.word	0x2001307c

08017fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b086      	sub	sp, #24
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	60f8      	str	r0, [r7, #12]
 8017fe4:	60b9      	str	r1, [r7, #8]
 8017fe6:	607a      	str	r2, [r7, #4]
 8017fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017fea:	2300      	movs	r3, #0
 8017fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	68ba      	ldr	r2, [r7, #8]
 8017ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	68fa      	ldr	r2, [r7, #12]
 8017ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017ffa:	68ba      	ldr	r2, [r7, #8]
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	429a      	cmp	r2, r3
 8018000:	d812      	bhi.n	8018028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018002:	687a      	ldr	r2, [r7, #4]
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	1ad2      	subs	r2, r2, r3
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	699b      	ldr	r3, [r3, #24]
 801800c:	429a      	cmp	r2, r3
 801800e:	d302      	bcc.n	8018016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018010:	2301      	movs	r3, #1
 8018012:	617b      	str	r3, [r7, #20]
 8018014:	e01b      	b.n	801804e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018016:	4b10      	ldr	r3, [pc, #64]	; (8018058 <prvInsertTimerInActiveList+0x7c>)
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	3304      	adds	r3, #4
 801801e:	4619      	mov	r1, r3
 8018020:	4610      	mov	r0, r2
 8018022:	f7fe f81e 	bl	8016062 <vListInsert>
 8018026:	e012      	b.n	801804e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018028:	687a      	ldr	r2, [r7, #4]
 801802a:	683b      	ldr	r3, [r7, #0]
 801802c:	429a      	cmp	r2, r3
 801802e:	d206      	bcs.n	801803e <prvInsertTimerInActiveList+0x62>
 8018030:	68ba      	ldr	r2, [r7, #8]
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	429a      	cmp	r2, r3
 8018036:	d302      	bcc.n	801803e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018038:	2301      	movs	r3, #1
 801803a:	617b      	str	r3, [r7, #20]
 801803c:	e007      	b.n	801804e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801803e:	4b07      	ldr	r3, [pc, #28]	; (801805c <prvInsertTimerInActiveList+0x80>)
 8018040:	681a      	ldr	r2, [r3, #0]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	3304      	adds	r3, #4
 8018046:	4619      	mov	r1, r3
 8018048:	4610      	mov	r0, r2
 801804a:	f7fe f80a 	bl	8016062 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801804e:	697b      	ldr	r3, [r7, #20]
}
 8018050:	4618      	mov	r0, r3
 8018052:	3718      	adds	r7, #24
 8018054:	46bd      	mov	sp, r7
 8018056:	bd80      	pop	{r7, pc}
 8018058:	20013070 	.word	0x20013070
 801805c:	2001306c 	.word	0x2001306c

08018060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b08c      	sub	sp, #48	; 0x30
 8018064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018066:	e0ac      	b.n	80181c2 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	2b00      	cmp	r3, #0
 801806c:	f2c0 80a9 	blt.w	80181c2 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018076:	695b      	ldr	r3, [r3, #20]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d004      	beq.n	8018086 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801807e:	3304      	adds	r3, #4
 8018080:	4618      	mov	r0, r3
 8018082:	f7fe f827 	bl	80160d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018086:	1d3b      	adds	r3, r7, #4
 8018088:	4618      	mov	r0, r3
 801808a:	f7ff ff87 	bl	8017f9c <prvSampleTimeNow>
 801808e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	2b09      	cmp	r3, #9
 8018094:	f200 8094 	bhi.w	80181c0 <prvProcessReceivedCommands+0x160>
 8018098:	a201      	add	r2, pc, #4	; (adr r2, 80180a0 <prvProcessReceivedCommands+0x40>)
 801809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801809e:	bf00      	nop
 80180a0:	080180c9 	.word	0x080180c9
 80180a4:	080180c9 	.word	0x080180c9
 80180a8:	080180c9 	.word	0x080180c9
 80180ac:	0801813b 	.word	0x0801813b
 80180b0:	0801814f 	.word	0x0801814f
 80180b4:	08018197 	.word	0x08018197
 80180b8:	080180c9 	.word	0x080180c9
 80180bc:	080180c9 	.word	0x080180c9
 80180c0:	0801813b 	.word	0x0801813b
 80180c4:	0801814f 	.word	0x0801814f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80180c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180ce:	f043 0301 	orr.w	r3, r3, #1
 80180d2:	b2da      	uxtb	r2, r3
 80180d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80180da:	68fa      	ldr	r2, [r7, #12]
 80180dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180de:	699b      	ldr	r3, [r3, #24]
 80180e0:	18d1      	adds	r1, r2, r3
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	6a3a      	ldr	r2, [r7, #32]
 80180e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180e8:	f7ff ff78 	bl	8017fdc <prvInsertTimerInActiveList>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d067      	beq.n	80181c2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80180f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f4:	6a1b      	ldr	r3, [r3, #32]
 80180f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80180fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018100:	f003 0304 	and.w	r3, r3, #4
 8018104:	2b00      	cmp	r3, #0
 8018106:	d05c      	beq.n	80181c2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018108:	68fa      	ldr	r2, [r7, #12]
 801810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810c:	699b      	ldr	r3, [r3, #24]
 801810e:	441a      	add	r2, r3
 8018110:	2300      	movs	r3, #0
 8018112:	9300      	str	r3, [sp, #0]
 8018114:	2300      	movs	r3, #0
 8018116:	2100      	movs	r1, #0
 8018118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801811a:	f7ff fe23 	bl	8017d64 <xTimerGenericCommand>
 801811e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8018120:	69fb      	ldr	r3, [r7, #28]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d14d      	bne.n	80181c2 <prvProcessReceivedCommands+0x162>
 8018126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801812a:	f383 8811 	msr	BASEPRI, r3
 801812e:	f3bf 8f6f 	isb	sy
 8018132:	f3bf 8f4f 	dsb	sy
 8018136:	61bb      	str	r3, [r7, #24]
 8018138:	e7fe      	b.n	8018138 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801813c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018140:	f023 0301 	bic.w	r3, r3, #1
 8018144:	b2da      	uxtb	r2, r3
 8018146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 801814c:	e039      	b.n	80181c2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018154:	f043 0301 	orr.w	r3, r3, #1
 8018158:	b2da      	uxtb	r2, r3
 801815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018160:	68fa      	ldr	r2, [r7, #12]
 8018162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018164:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018168:	699b      	ldr	r3, [r3, #24]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d109      	bne.n	8018182 <prvProcessReceivedCommands+0x122>
 801816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018172:	f383 8811 	msr	BASEPRI, r3
 8018176:	f3bf 8f6f 	isb	sy
 801817a:	f3bf 8f4f 	dsb	sy
 801817e:	617b      	str	r3, [r7, #20]
 8018180:	e7fe      	b.n	8018180 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018184:	699a      	ldr	r2, [r3, #24]
 8018186:	6a3b      	ldr	r3, [r7, #32]
 8018188:	18d1      	adds	r1, r2, r3
 801818a:	6a3b      	ldr	r3, [r7, #32]
 801818c:	6a3a      	ldr	r2, [r7, #32]
 801818e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018190:	f7ff ff24 	bl	8017fdc <prvInsertTimerInActiveList>
					break;
 8018194:	e015      	b.n	80181c2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801819c:	f003 0302 	and.w	r3, r3, #2
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d103      	bne.n	80181ac <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80181a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181a6:	f7fd fbbd 	bl	8015924 <vPortFree>
 80181aa:	e00a      	b.n	80181c2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80181ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80181b2:	f023 0301 	bic.w	r3, r3, #1
 80181b6:	b2da      	uxtb	r2, r3
 80181b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80181be:	e000      	b.n	80181c2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80181c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80181c2:	4b08      	ldr	r3, [pc, #32]	; (80181e4 <prvProcessReceivedCommands+0x184>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	f107 0108 	add.w	r1, r7, #8
 80181ca:	2200      	movs	r2, #0
 80181cc:	4618      	mov	r0, r3
 80181ce:	f7fe fa95 	bl	80166fc <xQueueReceive>
 80181d2:	4603      	mov	r3, r0
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	f47f af47 	bne.w	8018068 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80181da:	bf00      	nop
 80181dc:	3728      	adds	r7, #40	; 0x28
 80181de:	46bd      	mov	sp, r7
 80181e0:	bd80      	pop	{r7, pc}
 80181e2:	bf00      	nop
 80181e4:	20013074 	.word	0x20013074

080181e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b088      	sub	sp, #32
 80181ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80181ee:	e047      	b.n	8018280 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80181f0:	4b2d      	ldr	r3, [pc, #180]	; (80182a8 <prvSwitchTimerLists+0xc0>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	68db      	ldr	r3, [r3, #12]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181fa:	4b2b      	ldr	r3, [pc, #172]	; (80182a8 <prvSwitchTimerLists+0xc0>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	68db      	ldr	r3, [r3, #12]
 8018200:	68db      	ldr	r3, [r3, #12]
 8018202:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	3304      	adds	r3, #4
 8018208:	4618      	mov	r0, r3
 801820a:	f7fd ff63 	bl	80160d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	6a1b      	ldr	r3, [r3, #32]
 8018212:	6938      	ldr	r0, [r7, #16]
 8018214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018216:	693b      	ldr	r3, [r7, #16]
 8018218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801821c:	f003 0304 	and.w	r3, r3, #4
 8018220:	2b00      	cmp	r3, #0
 8018222:	d02d      	beq.n	8018280 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	699a      	ldr	r2, [r3, #24]
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	4413      	add	r3, r2
 801822c:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 801822e:	68fa      	ldr	r2, [r7, #12]
 8018230:	697b      	ldr	r3, [r7, #20]
 8018232:	429a      	cmp	r2, r3
 8018234:	d90e      	bls.n	8018254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	68fa      	ldr	r2, [r7, #12]
 801823a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801823c:	693b      	ldr	r3, [r7, #16]
 801823e:	693a      	ldr	r2, [r7, #16]
 8018240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018242:	4b19      	ldr	r3, [pc, #100]	; (80182a8 <prvSwitchTimerLists+0xc0>)
 8018244:	681a      	ldr	r2, [r3, #0]
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	3304      	adds	r3, #4
 801824a:	4619      	mov	r1, r3
 801824c:	4610      	mov	r0, r2
 801824e:	f7fd ff08 	bl	8016062 <vListInsert>
 8018252:	e015      	b.n	8018280 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018254:	2300      	movs	r3, #0
 8018256:	9300      	str	r3, [sp, #0]
 8018258:	2300      	movs	r3, #0
 801825a:	697a      	ldr	r2, [r7, #20]
 801825c:	2100      	movs	r1, #0
 801825e:	6938      	ldr	r0, [r7, #16]
 8018260:	f7ff fd80 	bl	8017d64 <xTimerGenericCommand>
 8018264:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8018266:	68bb      	ldr	r3, [r7, #8]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d109      	bne.n	8018280 <prvSwitchTimerLists+0x98>
 801826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018270:	f383 8811 	msr	BASEPRI, r3
 8018274:	f3bf 8f6f 	isb	sy
 8018278:	f3bf 8f4f 	dsb	sy
 801827c:	603b      	str	r3, [r7, #0]
 801827e:	e7fe      	b.n	801827e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018280:	4b09      	ldr	r3, [pc, #36]	; (80182a8 <prvSwitchTimerLists+0xc0>)
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d1b2      	bne.n	80181f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801828a:	4b07      	ldr	r3, [pc, #28]	; (80182a8 <prvSwitchTimerLists+0xc0>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8018290:	4b06      	ldr	r3, [pc, #24]	; (80182ac <prvSwitchTimerLists+0xc4>)
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	4a04      	ldr	r2, [pc, #16]	; (80182a8 <prvSwitchTimerLists+0xc0>)
 8018296:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018298:	4a04      	ldr	r2, [pc, #16]	; (80182ac <prvSwitchTimerLists+0xc4>)
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	6013      	str	r3, [r2, #0]
}
 801829e:	bf00      	nop
 80182a0:	3718      	adds	r7, #24
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bd80      	pop	{r7, pc}
 80182a6:	bf00      	nop
 80182a8:	2001306c 	.word	0x2001306c
 80182ac:	20013070 	.word	0x20013070

080182b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80182b4:	f7fd fd72 	bl	8015d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80182b8:	4b0d      	ldr	r3, [pc, #52]	; (80182f0 <prvCheckForValidListAndQueue+0x40>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d113      	bne.n	80182e8 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80182c0:	480c      	ldr	r0, [pc, #48]	; (80182f4 <prvCheckForValidListAndQueue+0x44>)
 80182c2:	f7fd fe7d 	bl	8015fc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80182c6:	480c      	ldr	r0, [pc, #48]	; (80182f8 <prvCheckForValidListAndQueue+0x48>)
 80182c8:	f7fd fe7a 	bl	8015fc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80182cc:	4b0b      	ldr	r3, [pc, #44]	; (80182fc <prvCheckForValidListAndQueue+0x4c>)
 80182ce:	4a09      	ldr	r2, [pc, #36]	; (80182f4 <prvCheckForValidListAndQueue+0x44>)
 80182d0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80182d2:	4b0b      	ldr	r3, [pc, #44]	; (8018300 <prvCheckForValidListAndQueue+0x50>)
 80182d4:	4a08      	ldr	r2, [pc, #32]	; (80182f8 <prvCheckForValidListAndQueue+0x48>)
 80182d6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80182d8:	2200      	movs	r2, #0
 80182da:	210c      	movs	r1, #12
 80182dc:	200a      	movs	r0, #10
 80182de:	f7fd ff8b 	bl	80161f8 <xQueueGenericCreate>
 80182e2:	4602      	mov	r2, r0
 80182e4:	4b02      	ldr	r3, [pc, #8]	; (80182f0 <prvCheckForValidListAndQueue+0x40>)
 80182e6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80182e8:	f7fd fd86 	bl	8015df8 <vPortExitCritical>
}
 80182ec:	bf00      	nop
 80182ee:	bd80      	pop	{r7, pc}
 80182f0:	20013074 	.word	0x20013074
 80182f4:	20013044 	.word	0x20013044
 80182f8:	20013058 	.word	0x20013058
 80182fc:	2001306c 	.word	0x2001306c
 8018300:	20013070 	.word	0x20013070

08018304 <abort>:
 8018304:	b508      	push	{r3, lr}
 8018306:	2006      	movs	r0, #6
 8018308:	f000 fabc 	bl	8018884 <raise>
 801830c:	2001      	movs	r0, #1
 801830e:	f000 fba9 	bl	8018a64 <_exit>
	...

08018314 <__sflush_r>:
 8018314:	898a      	ldrh	r2, [r1, #12]
 8018316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801831a:	4605      	mov	r5, r0
 801831c:	0710      	lsls	r0, r2, #28
 801831e:	460c      	mov	r4, r1
 8018320:	d45a      	bmi.n	80183d8 <__sflush_r+0xc4>
 8018322:	684b      	ldr	r3, [r1, #4]
 8018324:	2b00      	cmp	r3, #0
 8018326:	dc05      	bgt.n	8018334 <__sflush_r+0x20>
 8018328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801832a:	2b00      	cmp	r3, #0
 801832c:	dc02      	bgt.n	8018334 <__sflush_r+0x20>
 801832e:	2000      	movs	r0, #0
 8018330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018336:	2e00      	cmp	r6, #0
 8018338:	d0f9      	beq.n	801832e <__sflush_r+0x1a>
 801833a:	2300      	movs	r3, #0
 801833c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018340:	682f      	ldr	r7, [r5, #0]
 8018342:	602b      	str	r3, [r5, #0]
 8018344:	d033      	beq.n	80183ae <__sflush_r+0x9a>
 8018346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018348:	89a3      	ldrh	r3, [r4, #12]
 801834a:	075a      	lsls	r2, r3, #29
 801834c:	d505      	bpl.n	801835a <__sflush_r+0x46>
 801834e:	6863      	ldr	r3, [r4, #4]
 8018350:	1ac0      	subs	r0, r0, r3
 8018352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018354:	b10b      	cbz	r3, 801835a <__sflush_r+0x46>
 8018356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018358:	1ac0      	subs	r0, r0, r3
 801835a:	2300      	movs	r3, #0
 801835c:	4602      	mov	r2, r0
 801835e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018360:	6a21      	ldr	r1, [r4, #32]
 8018362:	4628      	mov	r0, r5
 8018364:	47b0      	blx	r6
 8018366:	1c43      	adds	r3, r0, #1
 8018368:	89a3      	ldrh	r3, [r4, #12]
 801836a:	d106      	bne.n	801837a <__sflush_r+0x66>
 801836c:	6829      	ldr	r1, [r5, #0]
 801836e:	291d      	cmp	r1, #29
 8018370:	d84b      	bhi.n	801840a <__sflush_r+0xf6>
 8018372:	4a2b      	ldr	r2, [pc, #172]	; (8018420 <__sflush_r+0x10c>)
 8018374:	40ca      	lsrs	r2, r1
 8018376:	07d6      	lsls	r6, r2, #31
 8018378:	d547      	bpl.n	801840a <__sflush_r+0xf6>
 801837a:	2200      	movs	r2, #0
 801837c:	6062      	str	r2, [r4, #4]
 801837e:	04d9      	lsls	r1, r3, #19
 8018380:	6922      	ldr	r2, [r4, #16]
 8018382:	6022      	str	r2, [r4, #0]
 8018384:	d504      	bpl.n	8018390 <__sflush_r+0x7c>
 8018386:	1c42      	adds	r2, r0, #1
 8018388:	d101      	bne.n	801838e <__sflush_r+0x7a>
 801838a:	682b      	ldr	r3, [r5, #0]
 801838c:	b903      	cbnz	r3, 8018390 <__sflush_r+0x7c>
 801838e:	6560      	str	r0, [r4, #84]	; 0x54
 8018390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018392:	602f      	str	r7, [r5, #0]
 8018394:	2900      	cmp	r1, #0
 8018396:	d0ca      	beq.n	801832e <__sflush_r+0x1a>
 8018398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801839c:	4299      	cmp	r1, r3
 801839e:	d002      	beq.n	80183a6 <__sflush_r+0x92>
 80183a0:	4628      	mov	r0, r5
 80183a2:	f000 f98b 	bl	80186bc <_free_r>
 80183a6:	2000      	movs	r0, #0
 80183a8:	6360      	str	r0, [r4, #52]	; 0x34
 80183aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ae:	6a21      	ldr	r1, [r4, #32]
 80183b0:	2301      	movs	r3, #1
 80183b2:	4628      	mov	r0, r5
 80183b4:	47b0      	blx	r6
 80183b6:	1c41      	adds	r1, r0, #1
 80183b8:	d1c6      	bne.n	8018348 <__sflush_r+0x34>
 80183ba:	682b      	ldr	r3, [r5, #0]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d0c3      	beq.n	8018348 <__sflush_r+0x34>
 80183c0:	2b1d      	cmp	r3, #29
 80183c2:	d001      	beq.n	80183c8 <__sflush_r+0xb4>
 80183c4:	2b16      	cmp	r3, #22
 80183c6:	d101      	bne.n	80183cc <__sflush_r+0xb8>
 80183c8:	602f      	str	r7, [r5, #0]
 80183ca:	e7b0      	b.n	801832e <__sflush_r+0x1a>
 80183cc:	89a3      	ldrh	r3, [r4, #12]
 80183ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183d2:	81a3      	strh	r3, [r4, #12]
 80183d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183d8:	690f      	ldr	r7, [r1, #16]
 80183da:	2f00      	cmp	r7, #0
 80183dc:	d0a7      	beq.n	801832e <__sflush_r+0x1a>
 80183de:	0793      	lsls	r3, r2, #30
 80183e0:	680e      	ldr	r6, [r1, #0]
 80183e2:	bf08      	it	eq
 80183e4:	694b      	ldreq	r3, [r1, #20]
 80183e6:	600f      	str	r7, [r1, #0]
 80183e8:	bf18      	it	ne
 80183ea:	2300      	movne	r3, #0
 80183ec:	eba6 0807 	sub.w	r8, r6, r7
 80183f0:	608b      	str	r3, [r1, #8]
 80183f2:	f1b8 0f00 	cmp.w	r8, #0
 80183f6:	dd9a      	ble.n	801832e <__sflush_r+0x1a>
 80183f8:	4643      	mov	r3, r8
 80183fa:	463a      	mov	r2, r7
 80183fc:	6a21      	ldr	r1, [r4, #32]
 80183fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018400:	4628      	mov	r0, r5
 8018402:	47b0      	blx	r6
 8018404:	2800      	cmp	r0, #0
 8018406:	dc07      	bgt.n	8018418 <__sflush_r+0x104>
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801840e:	81a3      	strh	r3, [r4, #12]
 8018410:	f04f 30ff 	mov.w	r0, #4294967295
 8018414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018418:	4407      	add	r7, r0
 801841a:	eba8 0800 	sub.w	r8, r8, r0
 801841e:	e7e8      	b.n	80183f2 <__sflush_r+0xde>
 8018420:	20400001 	.word	0x20400001

08018424 <_fflush_r>:
 8018424:	b538      	push	{r3, r4, r5, lr}
 8018426:	690b      	ldr	r3, [r1, #16]
 8018428:	4605      	mov	r5, r0
 801842a:	460c      	mov	r4, r1
 801842c:	b1db      	cbz	r3, 8018466 <_fflush_r+0x42>
 801842e:	b118      	cbz	r0, 8018438 <_fflush_r+0x14>
 8018430:	6983      	ldr	r3, [r0, #24]
 8018432:	b90b      	cbnz	r3, 8018438 <_fflush_r+0x14>
 8018434:	f000 f872 	bl	801851c <__sinit>
 8018438:	4b0c      	ldr	r3, [pc, #48]	; (801846c <_fflush_r+0x48>)
 801843a:	429c      	cmp	r4, r3
 801843c:	d109      	bne.n	8018452 <_fflush_r+0x2e>
 801843e:	686c      	ldr	r4, [r5, #4]
 8018440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018444:	b17b      	cbz	r3, 8018466 <_fflush_r+0x42>
 8018446:	4621      	mov	r1, r4
 8018448:	4628      	mov	r0, r5
 801844a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801844e:	f7ff bf61 	b.w	8018314 <__sflush_r>
 8018452:	4b07      	ldr	r3, [pc, #28]	; (8018470 <_fflush_r+0x4c>)
 8018454:	429c      	cmp	r4, r3
 8018456:	d101      	bne.n	801845c <_fflush_r+0x38>
 8018458:	68ac      	ldr	r4, [r5, #8]
 801845a:	e7f1      	b.n	8018440 <_fflush_r+0x1c>
 801845c:	4b05      	ldr	r3, [pc, #20]	; (8018474 <_fflush_r+0x50>)
 801845e:	429c      	cmp	r4, r3
 8018460:	bf08      	it	eq
 8018462:	68ec      	ldreq	r4, [r5, #12]
 8018464:	e7ec      	b.n	8018440 <_fflush_r+0x1c>
 8018466:	2000      	movs	r0, #0
 8018468:	bd38      	pop	{r3, r4, r5, pc}
 801846a:	bf00      	nop
 801846c:	0801c854 	.word	0x0801c854
 8018470:	0801c874 	.word	0x0801c874
 8018474:	0801c834 	.word	0x0801c834

08018478 <fflush>:
 8018478:	4601      	mov	r1, r0
 801847a:	b920      	cbnz	r0, 8018486 <fflush+0xe>
 801847c:	4b04      	ldr	r3, [pc, #16]	; (8018490 <fflush+0x18>)
 801847e:	4905      	ldr	r1, [pc, #20]	; (8018494 <fflush+0x1c>)
 8018480:	6818      	ldr	r0, [r3, #0]
 8018482:	f000 b8b7 	b.w	80185f4 <_fwalk_reent>
 8018486:	4b04      	ldr	r3, [pc, #16]	; (8018498 <fflush+0x20>)
 8018488:	6818      	ldr	r0, [r3, #0]
 801848a:	f7ff bfcb 	b.w	8018424 <_fflush_r>
 801848e:	bf00      	nop
 8018490:	0801c894 	.word	0x0801c894
 8018494:	08018425 	.word	0x08018425
 8018498:	2000001c 	.word	0x2000001c

0801849c <_cleanup_r>:
 801849c:	4901      	ldr	r1, [pc, #4]	; (80184a4 <_cleanup_r+0x8>)
 801849e:	f000 b8a9 	b.w	80185f4 <_fwalk_reent>
 80184a2:	bf00      	nop
 80184a4:	08018425 	.word	0x08018425

080184a8 <std.isra.0>:
 80184a8:	2300      	movs	r3, #0
 80184aa:	b510      	push	{r4, lr}
 80184ac:	4604      	mov	r4, r0
 80184ae:	6003      	str	r3, [r0, #0]
 80184b0:	6043      	str	r3, [r0, #4]
 80184b2:	6083      	str	r3, [r0, #8]
 80184b4:	8181      	strh	r1, [r0, #12]
 80184b6:	6643      	str	r3, [r0, #100]	; 0x64
 80184b8:	81c2      	strh	r2, [r0, #14]
 80184ba:	6103      	str	r3, [r0, #16]
 80184bc:	6143      	str	r3, [r0, #20]
 80184be:	6183      	str	r3, [r0, #24]
 80184c0:	4619      	mov	r1, r3
 80184c2:	2208      	movs	r2, #8
 80184c4:	305c      	adds	r0, #92	; 0x5c
 80184c6:	f000 f8f1 	bl	80186ac <memset>
 80184ca:	4b05      	ldr	r3, [pc, #20]	; (80184e0 <std.isra.0+0x38>)
 80184cc:	6263      	str	r3, [r4, #36]	; 0x24
 80184ce:	4b05      	ldr	r3, [pc, #20]	; (80184e4 <std.isra.0+0x3c>)
 80184d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80184d2:	4b05      	ldr	r3, [pc, #20]	; (80184e8 <std.isra.0+0x40>)
 80184d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80184d6:	4b05      	ldr	r3, [pc, #20]	; (80184ec <std.isra.0+0x44>)
 80184d8:	6224      	str	r4, [r4, #32]
 80184da:	6323      	str	r3, [r4, #48]	; 0x30
 80184dc:	bd10      	pop	{r4, pc}
 80184de:	bf00      	nop
 80184e0:	080188bd 	.word	0x080188bd
 80184e4:	080188df 	.word	0x080188df
 80184e8:	08018917 	.word	0x08018917
 80184ec:	0801893b 	.word	0x0801893b

080184f0 <__sfmoreglue>:
 80184f0:	b570      	push	{r4, r5, r6, lr}
 80184f2:	1e4a      	subs	r2, r1, #1
 80184f4:	2568      	movs	r5, #104	; 0x68
 80184f6:	4355      	muls	r5, r2
 80184f8:	460e      	mov	r6, r1
 80184fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80184fe:	f000 f92b 	bl	8018758 <_malloc_r>
 8018502:	4604      	mov	r4, r0
 8018504:	b140      	cbz	r0, 8018518 <__sfmoreglue+0x28>
 8018506:	2100      	movs	r1, #0
 8018508:	e880 0042 	stmia.w	r0, {r1, r6}
 801850c:	300c      	adds	r0, #12
 801850e:	60a0      	str	r0, [r4, #8]
 8018510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018514:	f000 f8ca 	bl	80186ac <memset>
 8018518:	4620      	mov	r0, r4
 801851a:	bd70      	pop	{r4, r5, r6, pc}

0801851c <__sinit>:
 801851c:	6983      	ldr	r3, [r0, #24]
 801851e:	b510      	push	{r4, lr}
 8018520:	4604      	mov	r4, r0
 8018522:	bb33      	cbnz	r3, 8018572 <__sinit+0x56>
 8018524:	6483      	str	r3, [r0, #72]	; 0x48
 8018526:	64c3      	str	r3, [r0, #76]	; 0x4c
 8018528:	6503      	str	r3, [r0, #80]	; 0x50
 801852a:	4b12      	ldr	r3, [pc, #72]	; (8018574 <__sinit+0x58>)
 801852c:	4a12      	ldr	r2, [pc, #72]	; (8018578 <__sinit+0x5c>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	6282      	str	r2, [r0, #40]	; 0x28
 8018532:	4298      	cmp	r0, r3
 8018534:	bf04      	itt	eq
 8018536:	2301      	moveq	r3, #1
 8018538:	6183      	streq	r3, [r0, #24]
 801853a:	f000 f81f 	bl	801857c <__sfp>
 801853e:	6060      	str	r0, [r4, #4]
 8018540:	4620      	mov	r0, r4
 8018542:	f000 f81b 	bl	801857c <__sfp>
 8018546:	60a0      	str	r0, [r4, #8]
 8018548:	4620      	mov	r0, r4
 801854a:	f000 f817 	bl	801857c <__sfp>
 801854e:	2200      	movs	r2, #0
 8018550:	60e0      	str	r0, [r4, #12]
 8018552:	2104      	movs	r1, #4
 8018554:	6860      	ldr	r0, [r4, #4]
 8018556:	f7ff ffa7 	bl	80184a8 <std.isra.0>
 801855a:	2201      	movs	r2, #1
 801855c:	2109      	movs	r1, #9
 801855e:	68a0      	ldr	r0, [r4, #8]
 8018560:	f7ff ffa2 	bl	80184a8 <std.isra.0>
 8018564:	2202      	movs	r2, #2
 8018566:	2112      	movs	r1, #18
 8018568:	68e0      	ldr	r0, [r4, #12]
 801856a:	f7ff ff9d 	bl	80184a8 <std.isra.0>
 801856e:	2301      	movs	r3, #1
 8018570:	61a3      	str	r3, [r4, #24]
 8018572:	bd10      	pop	{r4, pc}
 8018574:	0801c894 	.word	0x0801c894
 8018578:	0801849d 	.word	0x0801849d

0801857c <__sfp>:
 801857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801857e:	4b1c      	ldr	r3, [pc, #112]	; (80185f0 <__sfp+0x74>)
 8018580:	681e      	ldr	r6, [r3, #0]
 8018582:	69b3      	ldr	r3, [r6, #24]
 8018584:	4607      	mov	r7, r0
 8018586:	b913      	cbnz	r3, 801858e <__sfp+0x12>
 8018588:	4630      	mov	r0, r6
 801858a:	f7ff ffc7 	bl	801851c <__sinit>
 801858e:	3648      	adds	r6, #72	; 0x48
 8018590:	68b4      	ldr	r4, [r6, #8]
 8018592:	6873      	ldr	r3, [r6, #4]
 8018594:	3b01      	subs	r3, #1
 8018596:	d503      	bpl.n	80185a0 <__sfp+0x24>
 8018598:	6833      	ldr	r3, [r6, #0]
 801859a:	b133      	cbz	r3, 80185aa <__sfp+0x2e>
 801859c:	6836      	ldr	r6, [r6, #0]
 801859e:	e7f7      	b.n	8018590 <__sfp+0x14>
 80185a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80185a4:	b16d      	cbz	r5, 80185c2 <__sfp+0x46>
 80185a6:	3468      	adds	r4, #104	; 0x68
 80185a8:	e7f4      	b.n	8018594 <__sfp+0x18>
 80185aa:	2104      	movs	r1, #4
 80185ac:	4638      	mov	r0, r7
 80185ae:	f7ff ff9f 	bl	80184f0 <__sfmoreglue>
 80185b2:	6030      	str	r0, [r6, #0]
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d1f1      	bne.n	801859c <__sfp+0x20>
 80185b8:	230c      	movs	r3, #12
 80185ba:	603b      	str	r3, [r7, #0]
 80185bc:	4604      	mov	r4, r0
 80185be:	4620      	mov	r0, r4
 80185c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185c6:	81e3      	strh	r3, [r4, #14]
 80185c8:	2301      	movs	r3, #1
 80185ca:	81a3      	strh	r3, [r4, #12]
 80185cc:	6665      	str	r5, [r4, #100]	; 0x64
 80185ce:	6025      	str	r5, [r4, #0]
 80185d0:	60a5      	str	r5, [r4, #8]
 80185d2:	6065      	str	r5, [r4, #4]
 80185d4:	6125      	str	r5, [r4, #16]
 80185d6:	6165      	str	r5, [r4, #20]
 80185d8:	61a5      	str	r5, [r4, #24]
 80185da:	2208      	movs	r2, #8
 80185dc:	4629      	mov	r1, r5
 80185de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80185e2:	f000 f863 	bl	80186ac <memset>
 80185e6:	6365      	str	r5, [r4, #52]	; 0x34
 80185e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80185ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80185ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80185ee:	e7e6      	b.n	80185be <__sfp+0x42>
 80185f0:	0801c894 	.word	0x0801c894

080185f4 <_fwalk_reent>:
 80185f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185f8:	4680      	mov	r8, r0
 80185fa:	4689      	mov	r9, r1
 80185fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018600:	2600      	movs	r6, #0
 8018602:	b914      	cbnz	r4, 801860a <_fwalk_reent+0x16>
 8018604:	4630      	mov	r0, r6
 8018606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801860a:	68a5      	ldr	r5, [r4, #8]
 801860c:	6867      	ldr	r7, [r4, #4]
 801860e:	3f01      	subs	r7, #1
 8018610:	d501      	bpl.n	8018616 <_fwalk_reent+0x22>
 8018612:	6824      	ldr	r4, [r4, #0]
 8018614:	e7f5      	b.n	8018602 <_fwalk_reent+0xe>
 8018616:	89ab      	ldrh	r3, [r5, #12]
 8018618:	2b01      	cmp	r3, #1
 801861a:	d907      	bls.n	801862c <_fwalk_reent+0x38>
 801861c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018620:	3301      	adds	r3, #1
 8018622:	d003      	beq.n	801862c <_fwalk_reent+0x38>
 8018624:	4629      	mov	r1, r5
 8018626:	4640      	mov	r0, r8
 8018628:	47c8      	blx	r9
 801862a:	4306      	orrs	r6, r0
 801862c:	3568      	adds	r5, #104	; 0x68
 801862e:	e7ee      	b.n	801860e <_fwalk_reent+0x1a>

08018630 <__libc_init_array>:
 8018630:	b570      	push	{r4, r5, r6, lr}
 8018632:	4e0d      	ldr	r6, [pc, #52]	; (8018668 <__libc_init_array+0x38>)
 8018634:	4c0d      	ldr	r4, [pc, #52]	; (801866c <__libc_init_array+0x3c>)
 8018636:	1ba4      	subs	r4, r4, r6
 8018638:	10a4      	asrs	r4, r4, #2
 801863a:	2500      	movs	r5, #0
 801863c:	42a5      	cmp	r5, r4
 801863e:	d109      	bne.n	8018654 <__libc_init_array+0x24>
 8018640:	4e0b      	ldr	r6, [pc, #44]	; (8018670 <__libc_init_array+0x40>)
 8018642:	4c0c      	ldr	r4, [pc, #48]	; (8018674 <__libc_init_array+0x44>)
 8018644:	f000 fa10 	bl	8018a68 <_init>
 8018648:	1ba4      	subs	r4, r4, r6
 801864a:	10a4      	asrs	r4, r4, #2
 801864c:	2500      	movs	r5, #0
 801864e:	42a5      	cmp	r5, r4
 8018650:	d105      	bne.n	801865e <__libc_init_array+0x2e>
 8018652:	bd70      	pop	{r4, r5, r6, pc}
 8018654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018658:	4798      	blx	r3
 801865a:	3501      	adds	r5, #1
 801865c:	e7ee      	b.n	801863c <__libc_init_array+0xc>
 801865e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018662:	4798      	blx	r3
 8018664:	3501      	adds	r5, #1
 8018666:	e7f2      	b.n	801864e <__libc_init_array+0x1e>
 8018668:	0801c898 	.word	0x0801c898
 801866c:	0801c898 	.word	0x0801c898
 8018670:	0801c898 	.word	0x0801c898
 8018674:	0801c89c 	.word	0x0801c89c

08018678 <memcmp>:
 8018678:	b510      	push	{r4, lr}
 801867a:	3901      	subs	r1, #1
 801867c:	4402      	add	r2, r0
 801867e:	4290      	cmp	r0, r2
 8018680:	d101      	bne.n	8018686 <memcmp+0xe>
 8018682:	2000      	movs	r0, #0
 8018684:	bd10      	pop	{r4, pc}
 8018686:	f810 3b01 	ldrb.w	r3, [r0], #1
 801868a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801868e:	42a3      	cmp	r3, r4
 8018690:	d0f5      	beq.n	801867e <memcmp+0x6>
 8018692:	1b18      	subs	r0, r3, r4
 8018694:	bd10      	pop	{r4, pc}

08018696 <memcpy>:
 8018696:	b510      	push	{r4, lr}
 8018698:	1e43      	subs	r3, r0, #1
 801869a:	440a      	add	r2, r1
 801869c:	4291      	cmp	r1, r2
 801869e:	d100      	bne.n	80186a2 <memcpy+0xc>
 80186a0:	bd10      	pop	{r4, pc}
 80186a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80186aa:	e7f7      	b.n	801869c <memcpy+0x6>

080186ac <memset>:
 80186ac:	4402      	add	r2, r0
 80186ae:	4603      	mov	r3, r0
 80186b0:	4293      	cmp	r3, r2
 80186b2:	d100      	bne.n	80186b6 <memset+0xa>
 80186b4:	4770      	bx	lr
 80186b6:	f803 1b01 	strb.w	r1, [r3], #1
 80186ba:	e7f9      	b.n	80186b0 <memset+0x4>

080186bc <_free_r>:
 80186bc:	b538      	push	{r3, r4, r5, lr}
 80186be:	4605      	mov	r5, r0
 80186c0:	2900      	cmp	r1, #0
 80186c2:	d045      	beq.n	8018750 <_free_r+0x94>
 80186c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186c8:	1f0c      	subs	r4, r1, #4
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	bfb8      	it	lt
 80186ce:	18e4      	addlt	r4, r4, r3
 80186d0:	f000 f976 	bl	80189c0 <__malloc_lock>
 80186d4:	4a1f      	ldr	r2, [pc, #124]	; (8018754 <_free_r+0x98>)
 80186d6:	6813      	ldr	r3, [r2, #0]
 80186d8:	4610      	mov	r0, r2
 80186da:	b933      	cbnz	r3, 80186ea <_free_r+0x2e>
 80186dc:	6063      	str	r3, [r4, #4]
 80186de:	6014      	str	r4, [r2, #0]
 80186e0:	4628      	mov	r0, r5
 80186e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186e6:	f000 b96c 	b.w	80189c2 <__malloc_unlock>
 80186ea:	42a3      	cmp	r3, r4
 80186ec:	d90c      	bls.n	8018708 <_free_r+0x4c>
 80186ee:	6821      	ldr	r1, [r4, #0]
 80186f0:	1862      	adds	r2, r4, r1
 80186f2:	4293      	cmp	r3, r2
 80186f4:	bf04      	itt	eq
 80186f6:	681a      	ldreq	r2, [r3, #0]
 80186f8:	685b      	ldreq	r3, [r3, #4]
 80186fa:	6063      	str	r3, [r4, #4]
 80186fc:	bf04      	itt	eq
 80186fe:	1852      	addeq	r2, r2, r1
 8018700:	6022      	streq	r2, [r4, #0]
 8018702:	6004      	str	r4, [r0, #0]
 8018704:	e7ec      	b.n	80186e0 <_free_r+0x24>
 8018706:	4613      	mov	r3, r2
 8018708:	685a      	ldr	r2, [r3, #4]
 801870a:	b10a      	cbz	r2, 8018710 <_free_r+0x54>
 801870c:	42a2      	cmp	r2, r4
 801870e:	d9fa      	bls.n	8018706 <_free_r+0x4a>
 8018710:	6819      	ldr	r1, [r3, #0]
 8018712:	1858      	adds	r0, r3, r1
 8018714:	42a0      	cmp	r0, r4
 8018716:	d10b      	bne.n	8018730 <_free_r+0x74>
 8018718:	6820      	ldr	r0, [r4, #0]
 801871a:	4401      	add	r1, r0
 801871c:	1858      	adds	r0, r3, r1
 801871e:	4282      	cmp	r2, r0
 8018720:	6019      	str	r1, [r3, #0]
 8018722:	d1dd      	bne.n	80186e0 <_free_r+0x24>
 8018724:	6810      	ldr	r0, [r2, #0]
 8018726:	6852      	ldr	r2, [r2, #4]
 8018728:	605a      	str	r2, [r3, #4]
 801872a:	4401      	add	r1, r0
 801872c:	6019      	str	r1, [r3, #0]
 801872e:	e7d7      	b.n	80186e0 <_free_r+0x24>
 8018730:	d902      	bls.n	8018738 <_free_r+0x7c>
 8018732:	230c      	movs	r3, #12
 8018734:	602b      	str	r3, [r5, #0]
 8018736:	e7d3      	b.n	80186e0 <_free_r+0x24>
 8018738:	6820      	ldr	r0, [r4, #0]
 801873a:	1821      	adds	r1, r4, r0
 801873c:	428a      	cmp	r2, r1
 801873e:	bf04      	itt	eq
 8018740:	6811      	ldreq	r1, [r2, #0]
 8018742:	6852      	ldreq	r2, [r2, #4]
 8018744:	6062      	str	r2, [r4, #4]
 8018746:	bf04      	itt	eq
 8018748:	1809      	addeq	r1, r1, r0
 801874a:	6021      	streq	r1, [r4, #0]
 801874c:	605c      	str	r4, [r3, #4]
 801874e:	e7c7      	b.n	80186e0 <_free_r+0x24>
 8018750:	bd38      	pop	{r3, r4, r5, pc}
 8018752:	bf00      	nop
 8018754:	20013080 	.word	0x20013080

08018758 <_malloc_r>:
 8018758:	b570      	push	{r4, r5, r6, lr}
 801875a:	1ccd      	adds	r5, r1, #3
 801875c:	f025 0503 	bic.w	r5, r5, #3
 8018760:	3508      	adds	r5, #8
 8018762:	2d0c      	cmp	r5, #12
 8018764:	bf38      	it	cc
 8018766:	250c      	movcc	r5, #12
 8018768:	2d00      	cmp	r5, #0
 801876a:	4606      	mov	r6, r0
 801876c:	db01      	blt.n	8018772 <_malloc_r+0x1a>
 801876e:	42a9      	cmp	r1, r5
 8018770:	d903      	bls.n	801877a <_malloc_r+0x22>
 8018772:	230c      	movs	r3, #12
 8018774:	6033      	str	r3, [r6, #0]
 8018776:	2000      	movs	r0, #0
 8018778:	bd70      	pop	{r4, r5, r6, pc}
 801877a:	f000 f921 	bl	80189c0 <__malloc_lock>
 801877e:	4a23      	ldr	r2, [pc, #140]	; (801880c <_malloc_r+0xb4>)
 8018780:	6814      	ldr	r4, [r2, #0]
 8018782:	4621      	mov	r1, r4
 8018784:	b991      	cbnz	r1, 80187ac <_malloc_r+0x54>
 8018786:	4c22      	ldr	r4, [pc, #136]	; (8018810 <_malloc_r+0xb8>)
 8018788:	6823      	ldr	r3, [r4, #0]
 801878a:	b91b      	cbnz	r3, 8018794 <_malloc_r+0x3c>
 801878c:	4630      	mov	r0, r6
 801878e:	f000 f841 	bl	8018814 <_sbrk_r>
 8018792:	6020      	str	r0, [r4, #0]
 8018794:	4629      	mov	r1, r5
 8018796:	4630      	mov	r0, r6
 8018798:	f000 f83c 	bl	8018814 <_sbrk_r>
 801879c:	1c43      	adds	r3, r0, #1
 801879e:	d126      	bne.n	80187ee <_malloc_r+0x96>
 80187a0:	230c      	movs	r3, #12
 80187a2:	6033      	str	r3, [r6, #0]
 80187a4:	4630      	mov	r0, r6
 80187a6:	f000 f90c 	bl	80189c2 <__malloc_unlock>
 80187aa:	e7e4      	b.n	8018776 <_malloc_r+0x1e>
 80187ac:	680b      	ldr	r3, [r1, #0]
 80187ae:	1b5b      	subs	r3, r3, r5
 80187b0:	d41a      	bmi.n	80187e8 <_malloc_r+0x90>
 80187b2:	2b0b      	cmp	r3, #11
 80187b4:	d90f      	bls.n	80187d6 <_malloc_r+0x7e>
 80187b6:	600b      	str	r3, [r1, #0]
 80187b8:	50cd      	str	r5, [r1, r3]
 80187ba:	18cc      	adds	r4, r1, r3
 80187bc:	4630      	mov	r0, r6
 80187be:	f000 f900 	bl	80189c2 <__malloc_unlock>
 80187c2:	f104 000b 	add.w	r0, r4, #11
 80187c6:	1d23      	adds	r3, r4, #4
 80187c8:	f020 0007 	bic.w	r0, r0, #7
 80187cc:	1ac3      	subs	r3, r0, r3
 80187ce:	d01b      	beq.n	8018808 <_malloc_r+0xb0>
 80187d0:	425a      	negs	r2, r3
 80187d2:	50e2      	str	r2, [r4, r3]
 80187d4:	bd70      	pop	{r4, r5, r6, pc}
 80187d6:	428c      	cmp	r4, r1
 80187d8:	bf0d      	iteet	eq
 80187da:	6863      	ldreq	r3, [r4, #4]
 80187dc:	684b      	ldrne	r3, [r1, #4]
 80187de:	6063      	strne	r3, [r4, #4]
 80187e0:	6013      	streq	r3, [r2, #0]
 80187e2:	bf18      	it	ne
 80187e4:	460c      	movne	r4, r1
 80187e6:	e7e9      	b.n	80187bc <_malloc_r+0x64>
 80187e8:	460c      	mov	r4, r1
 80187ea:	6849      	ldr	r1, [r1, #4]
 80187ec:	e7ca      	b.n	8018784 <_malloc_r+0x2c>
 80187ee:	1cc4      	adds	r4, r0, #3
 80187f0:	f024 0403 	bic.w	r4, r4, #3
 80187f4:	42a0      	cmp	r0, r4
 80187f6:	d005      	beq.n	8018804 <_malloc_r+0xac>
 80187f8:	1a21      	subs	r1, r4, r0
 80187fa:	4630      	mov	r0, r6
 80187fc:	f000 f80a 	bl	8018814 <_sbrk_r>
 8018800:	3001      	adds	r0, #1
 8018802:	d0cd      	beq.n	80187a0 <_malloc_r+0x48>
 8018804:	6025      	str	r5, [r4, #0]
 8018806:	e7d9      	b.n	80187bc <_malloc_r+0x64>
 8018808:	bd70      	pop	{r4, r5, r6, pc}
 801880a:	bf00      	nop
 801880c:	20013080 	.word	0x20013080
 8018810:	20013084 	.word	0x20013084

08018814 <_sbrk_r>:
 8018814:	b538      	push	{r3, r4, r5, lr}
 8018816:	4c06      	ldr	r4, [pc, #24]	; (8018830 <_sbrk_r+0x1c>)
 8018818:	2300      	movs	r3, #0
 801881a:	4605      	mov	r5, r0
 801881c:	4608      	mov	r0, r1
 801881e:	6023      	str	r3, [r4, #0]
 8018820:	f000 f90a 	bl	8018a38 <_sbrk>
 8018824:	1c43      	adds	r3, r0, #1
 8018826:	d102      	bne.n	801882e <_sbrk_r+0x1a>
 8018828:	6823      	ldr	r3, [r4, #0]
 801882a:	b103      	cbz	r3, 801882e <_sbrk_r+0x1a>
 801882c:	602b      	str	r3, [r5, #0]
 801882e:	bd38      	pop	{r3, r4, r5, pc}
 8018830:	20016f68 	.word	0x20016f68

08018834 <_raise_r>:
 8018834:	291f      	cmp	r1, #31
 8018836:	b538      	push	{r3, r4, r5, lr}
 8018838:	4604      	mov	r4, r0
 801883a:	460d      	mov	r5, r1
 801883c:	d904      	bls.n	8018848 <_raise_r+0x14>
 801883e:	2316      	movs	r3, #22
 8018840:	6003      	str	r3, [r0, #0]
 8018842:	f04f 30ff 	mov.w	r0, #4294967295
 8018846:	bd38      	pop	{r3, r4, r5, pc}
 8018848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801884a:	b112      	cbz	r2, 8018852 <_raise_r+0x1e>
 801884c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018850:	b94b      	cbnz	r3, 8018866 <_raise_r+0x32>
 8018852:	4620      	mov	r0, r4
 8018854:	f000 f830 	bl	80188b8 <_getpid_r>
 8018858:	462a      	mov	r2, r5
 801885a:	4601      	mov	r1, r0
 801885c:	4620      	mov	r0, r4
 801885e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018862:	f000 b817 	b.w	8018894 <_kill_r>
 8018866:	2b01      	cmp	r3, #1
 8018868:	d00a      	beq.n	8018880 <_raise_r+0x4c>
 801886a:	1c59      	adds	r1, r3, #1
 801886c:	d103      	bne.n	8018876 <_raise_r+0x42>
 801886e:	2316      	movs	r3, #22
 8018870:	6003      	str	r3, [r0, #0]
 8018872:	2001      	movs	r0, #1
 8018874:	bd38      	pop	{r3, r4, r5, pc}
 8018876:	2400      	movs	r4, #0
 8018878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801887c:	4628      	mov	r0, r5
 801887e:	4798      	blx	r3
 8018880:	2000      	movs	r0, #0
 8018882:	bd38      	pop	{r3, r4, r5, pc}

08018884 <raise>:
 8018884:	4b02      	ldr	r3, [pc, #8]	; (8018890 <raise+0xc>)
 8018886:	4601      	mov	r1, r0
 8018888:	6818      	ldr	r0, [r3, #0]
 801888a:	f7ff bfd3 	b.w	8018834 <_raise_r>
 801888e:	bf00      	nop
 8018890:	2000001c 	.word	0x2000001c

08018894 <_kill_r>:
 8018894:	b538      	push	{r3, r4, r5, lr}
 8018896:	4c07      	ldr	r4, [pc, #28]	; (80188b4 <_kill_r+0x20>)
 8018898:	2300      	movs	r3, #0
 801889a:	4605      	mov	r5, r0
 801889c:	4608      	mov	r0, r1
 801889e:	4611      	mov	r1, r2
 80188a0:	6023      	str	r3, [r4, #0]
 80188a2:	f000 f8b1 	bl	8018a08 <_kill>
 80188a6:	1c43      	adds	r3, r0, #1
 80188a8:	d102      	bne.n	80188b0 <_kill_r+0x1c>
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	b103      	cbz	r3, 80188b0 <_kill_r+0x1c>
 80188ae:	602b      	str	r3, [r5, #0]
 80188b0:	bd38      	pop	{r3, r4, r5, pc}
 80188b2:	bf00      	nop
 80188b4:	20016f68 	.word	0x20016f68

080188b8 <_getpid_r>:
 80188b8:	f000 b89e 	b.w	80189f8 <_getpid>

080188bc <__sread>:
 80188bc:	b510      	push	{r4, lr}
 80188be:	460c      	mov	r4, r1
 80188c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188c4:	f000 f87e 	bl	80189c4 <_read_r>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	bfab      	itete	ge
 80188cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80188ce:	89a3      	ldrhlt	r3, [r4, #12]
 80188d0:	181b      	addge	r3, r3, r0
 80188d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80188d6:	bfac      	ite	ge
 80188d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80188da:	81a3      	strhlt	r3, [r4, #12]
 80188dc:	bd10      	pop	{r4, pc}

080188de <__swrite>:
 80188de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188e2:	461f      	mov	r7, r3
 80188e4:	898b      	ldrh	r3, [r1, #12]
 80188e6:	05db      	lsls	r3, r3, #23
 80188e8:	4605      	mov	r5, r0
 80188ea:	460c      	mov	r4, r1
 80188ec:	4616      	mov	r6, r2
 80188ee:	d505      	bpl.n	80188fc <__swrite+0x1e>
 80188f0:	2302      	movs	r3, #2
 80188f2:	2200      	movs	r2, #0
 80188f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188f8:	f000 f850 	bl	801899c <_lseek_r>
 80188fc:	89a3      	ldrh	r3, [r4, #12]
 80188fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018906:	81a3      	strh	r3, [r4, #12]
 8018908:	4632      	mov	r2, r6
 801890a:	463b      	mov	r3, r7
 801890c:	4628      	mov	r0, r5
 801890e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018912:	f000 b821 	b.w	8018958 <_write_r>

08018916 <__sseek>:
 8018916:	b510      	push	{r4, lr}
 8018918:	460c      	mov	r4, r1
 801891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801891e:	f000 f83d 	bl	801899c <_lseek_r>
 8018922:	1c43      	adds	r3, r0, #1
 8018924:	89a3      	ldrh	r3, [r4, #12]
 8018926:	bf15      	itete	ne
 8018928:	6560      	strne	r0, [r4, #84]	; 0x54
 801892a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801892e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018932:	81a3      	strheq	r3, [r4, #12]
 8018934:	bf18      	it	ne
 8018936:	81a3      	strhne	r3, [r4, #12]
 8018938:	bd10      	pop	{r4, pc}

0801893a <__sclose>:
 801893a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801893e:	f000 b81d 	b.w	801897c <_close_r>
	...

08018944 <read>:
 8018944:	4613      	mov	r3, r2
 8018946:	460a      	mov	r2, r1
 8018948:	4601      	mov	r1, r0
 801894a:	4802      	ldr	r0, [pc, #8]	; (8018954 <read+0x10>)
 801894c:	6800      	ldr	r0, [r0, #0]
 801894e:	f000 b839 	b.w	80189c4 <_read_r>
 8018952:	bf00      	nop
 8018954:	2000001c 	.word	0x2000001c

08018958 <_write_r>:
 8018958:	b538      	push	{r3, r4, r5, lr}
 801895a:	4c07      	ldr	r4, [pc, #28]	; (8018978 <_write_r+0x20>)
 801895c:	4605      	mov	r5, r0
 801895e:	4608      	mov	r0, r1
 8018960:	4611      	mov	r1, r2
 8018962:	2200      	movs	r2, #0
 8018964:	6022      	str	r2, [r4, #0]
 8018966:	461a      	mov	r2, r3
 8018968:	f000 f874 	bl	8018a54 <_write>
 801896c:	1c43      	adds	r3, r0, #1
 801896e:	d102      	bne.n	8018976 <_write_r+0x1e>
 8018970:	6823      	ldr	r3, [r4, #0]
 8018972:	b103      	cbz	r3, 8018976 <_write_r+0x1e>
 8018974:	602b      	str	r3, [r5, #0]
 8018976:	bd38      	pop	{r3, r4, r5, pc}
 8018978:	20016f68 	.word	0x20016f68

0801897c <_close_r>:
 801897c:	b538      	push	{r3, r4, r5, lr}
 801897e:	4c06      	ldr	r4, [pc, #24]	; (8018998 <_close_r+0x1c>)
 8018980:	2300      	movs	r3, #0
 8018982:	4605      	mov	r5, r0
 8018984:	4608      	mov	r0, r1
 8018986:	6023      	str	r3, [r4, #0]
 8018988:	f000 f82e 	bl	80189e8 <_close>
 801898c:	1c43      	adds	r3, r0, #1
 801898e:	d102      	bne.n	8018996 <_close_r+0x1a>
 8018990:	6823      	ldr	r3, [r4, #0]
 8018992:	b103      	cbz	r3, 8018996 <_close_r+0x1a>
 8018994:	602b      	str	r3, [r5, #0]
 8018996:	bd38      	pop	{r3, r4, r5, pc}
 8018998:	20016f68 	.word	0x20016f68

0801899c <_lseek_r>:
 801899c:	b538      	push	{r3, r4, r5, lr}
 801899e:	4c07      	ldr	r4, [pc, #28]	; (80189bc <_lseek_r+0x20>)
 80189a0:	4605      	mov	r5, r0
 80189a2:	4608      	mov	r0, r1
 80189a4:	4611      	mov	r1, r2
 80189a6:	2200      	movs	r2, #0
 80189a8:	6022      	str	r2, [r4, #0]
 80189aa:	461a      	mov	r2, r3
 80189ac:	f000 f834 	bl	8018a18 <_lseek>
 80189b0:	1c43      	adds	r3, r0, #1
 80189b2:	d102      	bne.n	80189ba <_lseek_r+0x1e>
 80189b4:	6823      	ldr	r3, [r4, #0]
 80189b6:	b103      	cbz	r3, 80189ba <_lseek_r+0x1e>
 80189b8:	602b      	str	r3, [r5, #0]
 80189ba:	bd38      	pop	{r3, r4, r5, pc}
 80189bc:	20016f68 	.word	0x20016f68

080189c0 <__malloc_lock>:
 80189c0:	4770      	bx	lr

080189c2 <__malloc_unlock>:
 80189c2:	4770      	bx	lr

080189c4 <_read_r>:
 80189c4:	b538      	push	{r3, r4, r5, lr}
 80189c6:	4c07      	ldr	r4, [pc, #28]	; (80189e4 <_read_r+0x20>)
 80189c8:	4605      	mov	r5, r0
 80189ca:	4608      	mov	r0, r1
 80189cc:	4611      	mov	r1, r2
 80189ce:	2200      	movs	r2, #0
 80189d0:	6022      	str	r2, [r4, #0]
 80189d2:	461a      	mov	r2, r3
 80189d4:	f000 f828 	bl	8018a28 <_read>
 80189d8:	1c43      	adds	r3, r0, #1
 80189da:	d102      	bne.n	80189e2 <_read_r+0x1e>
 80189dc:	6823      	ldr	r3, [r4, #0]
 80189de:	b103      	cbz	r3, 80189e2 <_read_r+0x1e>
 80189e0:	602b      	str	r3, [r5, #0]
 80189e2:	bd38      	pop	{r3, r4, r5, pc}
 80189e4:	20016f68 	.word	0x20016f68

080189e8 <_close>:
 80189e8:	4b02      	ldr	r3, [pc, #8]	; (80189f4 <_close+0xc>)
 80189ea:	2258      	movs	r2, #88	; 0x58
 80189ec:	601a      	str	r2, [r3, #0]
 80189ee:	f04f 30ff 	mov.w	r0, #4294967295
 80189f2:	4770      	bx	lr
 80189f4:	20016f68 	.word	0x20016f68

080189f8 <_getpid>:
 80189f8:	4b02      	ldr	r3, [pc, #8]	; (8018a04 <_getpid+0xc>)
 80189fa:	2258      	movs	r2, #88	; 0x58
 80189fc:	601a      	str	r2, [r3, #0]
 80189fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018a02:	4770      	bx	lr
 8018a04:	20016f68 	.word	0x20016f68

08018a08 <_kill>:
 8018a08:	4b02      	ldr	r3, [pc, #8]	; (8018a14 <_kill+0xc>)
 8018a0a:	2258      	movs	r2, #88	; 0x58
 8018a0c:	601a      	str	r2, [r3, #0]
 8018a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a12:	4770      	bx	lr
 8018a14:	20016f68 	.word	0x20016f68

08018a18 <_lseek>:
 8018a18:	4b02      	ldr	r3, [pc, #8]	; (8018a24 <_lseek+0xc>)
 8018a1a:	2258      	movs	r2, #88	; 0x58
 8018a1c:	601a      	str	r2, [r3, #0]
 8018a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a22:	4770      	bx	lr
 8018a24:	20016f68 	.word	0x20016f68

08018a28 <_read>:
 8018a28:	4b02      	ldr	r3, [pc, #8]	; (8018a34 <_read+0xc>)
 8018a2a:	2258      	movs	r2, #88	; 0x58
 8018a2c:	601a      	str	r2, [r3, #0]
 8018a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a32:	4770      	bx	lr
 8018a34:	20016f68 	.word	0x20016f68

08018a38 <_sbrk>:
 8018a38:	4b04      	ldr	r3, [pc, #16]	; (8018a4c <_sbrk+0x14>)
 8018a3a:	6819      	ldr	r1, [r3, #0]
 8018a3c:	4602      	mov	r2, r0
 8018a3e:	b909      	cbnz	r1, 8018a44 <_sbrk+0xc>
 8018a40:	4903      	ldr	r1, [pc, #12]	; (8018a50 <_sbrk+0x18>)
 8018a42:	6019      	str	r1, [r3, #0]
 8018a44:	6818      	ldr	r0, [r3, #0]
 8018a46:	4402      	add	r2, r0
 8018a48:	601a      	str	r2, [r3, #0]
 8018a4a:	4770      	bx	lr
 8018a4c:	20013088 	.word	0x20013088
 8018a50:	20016f6c 	.word	0x20016f6c

08018a54 <_write>:
 8018a54:	4b02      	ldr	r3, [pc, #8]	; (8018a60 <_write+0xc>)
 8018a56:	2258      	movs	r2, #88	; 0x58
 8018a58:	601a      	str	r2, [r3, #0]
 8018a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a5e:	4770      	bx	lr
 8018a60:	20016f68 	.word	0x20016f68

08018a64 <_exit>:
 8018a64:	e7fe      	b.n	8018a64 <_exit>
	...

08018a68 <_init>:
 8018a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a6a:	bf00      	nop
 8018a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a6e:	bc08      	pop	{r3}
 8018a70:	469e      	mov	lr, r3
 8018a72:	4770      	bx	lr

08018a74 <_fini>:
 8018a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a76:	bf00      	nop
 8018a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a7a:	bc08      	pop	{r3}
 8018a7c:	469e      	mov	lr, r3
 8018a7e:	4770      	bx	lr
