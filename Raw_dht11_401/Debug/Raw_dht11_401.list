
Raw_dht11_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000210c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080022ac  080022ac  000122ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800232c  0800232c  0001232c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000c8  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000138  20000138  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000cca5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e19  00000000  00000000  0002cd45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006058  00000000  00000000  0002eb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  00034bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  000354f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000449f  00000000  00000000  00036060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003a83  00000000  00000000  0003a4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003df82  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001eb0  00000000  00000000  0003e000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002294 	.word	0x08002294

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002294 	.word	0x08002294

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f8aa 	bl	8000710 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f85e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 f914 	bl	800183c <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000a4 	.word	0x200000a4
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200000a4 	.word	0x200000a4

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	0200      	lsls	r0, r0, #8
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
 80006a8:	fa05 f303 	lsl.w	r3, r5, r3
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	bf8c      	ite	hi
 80006b2:	3c03      	subhi	r4, #3
 80006b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b6:	4019      	ands	r1, r3
 80006b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	fa05 f404 	lsl.w	r4, r5, r4
 80006be:	3c01      	subs	r4, #1
 80006c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfad      	iteet	ge
 80006ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	f000 000f 	andlt.w	r0, r0, #15
 80006d6:	4b06      	ldrlt	r3, [pc, #24]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfb5      	itete	lt
 80006de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006f4:	2800      	cmp	r0, #0
 80006f6:	db08      	blt.n	800070a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	2301      	movs	r3, #1
 80006fc:	f000 001f 	and.w	r0, r0, #31
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x18>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	3801      	subs	r0, #1
 8000712:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000716:	d20a      	bcs.n	800072e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	21f0      	movs	r1, #240	; 0xf0
 8000720:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e010 	.word	0xe000e010
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000740:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80008d4 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000748:	4a60      	ldr	r2, [pc, #384]	; (80008cc <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800074c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000750:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000752:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000754:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000758:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800075a:	42ac      	cmp	r4, r5
 800075c:	f040 80a6 	bne.w	80008ac <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000760:	684c      	ldr	r4, [r1, #4]
 8000762:	f024 0c10 	bic.w	ip, r4, #16
 8000766:	f10c 36ff 	add.w	r6, ip, #4294967295
 800076a:	2e01      	cmp	r6, #1
 800076c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000770:	d812      	bhi.n	8000798 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000772:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000774:	2603      	movs	r6, #3
 8000776:	fa06 f60e 	lsl.w	r6, r6, lr
 800077a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800077e:	68ce      	ldr	r6, [r1, #12]
 8000780:	fa06 f60e 	lsl.w	r6, r6, lr
 8000784:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000786:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000788:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800078a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800078e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000792:	409e      	lsls	r6, r3
 8000794:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000796:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000798:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800079a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800079c:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a0:	43f6      	mvns	r6, r6
 80007a2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007a6:	688f      	ldr	r7, [r1, #8]
 80007a8:	fa07 f70e 	lsl.w	r7, r7, lr
 80007ac:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b6:	d116      	bne.n	80007e6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007b8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007bc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007c4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007cc:	f04f 0c0f 	mov.w	ip, #15
 80007d0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007d4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007d8:	690f      	ldr	r7, [r1, #16]
 80007da:	fa07 f70b 	lsl.w	r7, r7, fp
 80007de:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007e2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007e6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ea:	f004 0703 	and.w	r7, r4, #3
 80007ee:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007f2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007f6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f8:	00e6      	lsls	r6, r4, #3
 80007fa:	d557      	bpl.n	80008ac <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fc:	f04f 0b00 	mov.w	fp, #0
 8000800:	f8cd b00c 	str.w	fp, [sp, #12]
 8000804:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000808:	4e31      	ldr	r6, [pc, #196]	; (80008d0 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800080e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000812:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000816:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800081a:	9703      	str	r7, [sp, #12]
 800081c:	9f03      	ldr	r7, [sp, #12]
 800081e:	f023 0703 	bic.w	r7, r3, #3
 8000822:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000826:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800082e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000832:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000836:	f04f 0e0f 	mov.w	lr, #15
 800083a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000840:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000844:	d039      	beq.n	80008ba <HAL_GPIO_Init+0x17e>
 8000846:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800084a:	42b0      	cmp	r0, r6
 800084c:	d037      	beq.n	80008be <HAL_GPIO_Init+0x182>
 800084e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000852:	42b0      	cmp	r0, r6
 8000854:	d035      	beq.n	80008c2 <HAL_GPIO_Init+0x186>
 8000856:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800085a:	42b0      	cmp	r0, r6
 800085c:	d033      	beq.n	80008c6 <HAL_GPIO_Init+0x18a>
 800085e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000862:	42b0      	cmp	r0, r6
 8000864:	bf14      	ite	ne
 8000866:	2607      	movne	r6, #7
 8000868:	2604      	moveq	r6, #4
 800086a:	fa06 f60c 	lsl.w	r6, r6, ip
 800086e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000872:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000874:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000876:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000878:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800087c:	bf0c      	ite	eq
 800087e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000880:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000882:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000884:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000886:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800088a:	bf0c      	ite	eq
 800088c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800088e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000890:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000892:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000894:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000898:	bf0c      	ite	eq
 800089a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800089c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800089e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008a0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf54      	ite	pl
 80008a6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008a8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008aa:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ac:	3301      	adds	r3, #1
 80008ae:	2b10      	cmp	r3, #16
 80008b0:	f47f af4f 	bne.w	8000752 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008b4:	b005      	add	sp, #20
 80008b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ba:	465e      	mov	r6, fp
 80008bc:	e7d5      	b.n	800086a <HAL_GPIO_Init+0x12e>
 80008be:	2601      	movs	r6, #1
 80008c0:	e7d3      	b.n	800086a <HAL_GPIO_Init+0x12e>
 80008c2:	2602      	movs	r6, #2
 80008c4:	e7d1      	b.n	800086a <HAL_GPIO_Init+0x12e>
 80008c6:	2603      	movs	r6, #3
 80008c8:	e7cf      	b.n	800086a <HAL_GPIO_Init+0x12e>
 80008ca:	bf00      	nop
 80008cc:	40013c00 	.word	0x40013c00
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008d8:	6903      	ldr	r3, [r0, #16]
 80008da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008dc:	bf14      	ite	ne
 80008de:	2001      	movne	r0, #1
 80008e0:	2000      	moveq	r0, #0
 80008e2:	4770      	bx	lr

080008e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008e4:	b10a      	cbz	r2, 80008ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008e6:	6181      	str	r1, [r0, #24]
 80008e8:	4770      	bx	lr
 80008ea:	0409      	lsls	r1, r1, #16
 80008ec:	e7fb      	b.n	80008e6 <HAL_GPIO_WritePin+0x2>
	...

080008f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f4:	4604      	mov	r4, r0
 80008f6:	b908      	cbnz	r0, 80008fc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008f8:	2001      	movs	r0, #1
 80008fa:	e03f      	b.n	800097c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	07dd      	lsls	r5, r3, #31
 8000900:	d410      	bmi.n	8000924 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	0798      	lsls	r0, r3, #30
 8000906:	d45a      	bmi.n	80009be <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	071a      	lsls	r2, r3, #28
 800090c:	f100 809c 	bmi.w	8000a48 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	075b      	lsls	r3, r3, #29
 8000914:	f100 80ba 	bmi.w	8000a8c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000918:	69a0      	ldr	r0, [r4, #24]
 800091a:	2800      	cmp	r0, #0
 800091c:	f040 811b 	bne.w	8000b56 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000920:	2000      	movs	r0, #0
 8000922:	e02b      	b.n	800097c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000924:	4ba4      	ldr	r3, [pc, #656]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	f002 020c 	and.w	r2, r2, #12
 800092c:	2a04      	cmp	r2, #4
 800092e:	d007      	beq.n	8000940 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000936:	2a08      	cmp	r2, #8
 8000938:	d10a      	bne.n	8000950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	0259      	lsls	r1, r3, #9
 800093e:	d507      	bpl.n	8000950 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000940:	4b9d      	ldr	r3, [pc, #628]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	039a      	lsls	r2, r3, #14
 8000946:	d5dc      	bpl.n	8000902 <HAL_RCC_OscConfig+0x12>
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1d9      	bne.n	8000902 <HAL_RCC_OscConfig+0x12>
 800094e:	e7d3      	b.n	80008f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	4d99      	ldr	r5, [pc, #612]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000958:	d113      	bne.n	8000982 <HAL_RCC_OscConfig+0x92>
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000960:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000962:	f7ff fe67 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	4d94      	ldr	r5, [pc, #592]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000968:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	039b      	lsls	r3, r3, #14
 800096e:	d4c8      	bmi.n	8000902 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000970:	f7ff fe60 	bl	8000634 <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	2864      	cmp	r0, #100	; 0x64
 8000978:	d9f7      	bls.n	800096a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800097a:	2003      	movs	r0, #3
}
 800097c:	b002      	add	sp, #8
 800097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000986:	d104      	bne.n	8000992 <HAL_RCC_OscConfig+0xa2>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098e:	602b      	str	r3, [r5, #0]
 8000990:	e7e3      	b.n	800095a <HAL_RCC_OscConfig+0x6a>
 8000992:	682a      	ldr	r2, [r5, #0]
 8000994:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000998:	602a      	str	r2, [r5, #0]
 800099a:	682a      	ldr	r2, [r5, #0]
 800099c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009a0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1dd      	bne.n	8000962 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80009a6:	f7ff fe45 	bl	8000634 <HAL_GetTick>
 80009aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	039f      	lsls	r7, r3, #14
 80009b0:	d5a7      	bpl.n	8000902 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b2:	f7ff fe3f 	bl	8000634 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2864      	cmp	r0, #100	; 0x64
 80009ba:	d9f7      	bls.n	80009ac <HAL_RCC_OscConfig+0xbc>
 80009bc:	e7dd      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009be:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f012 0f0c 	tst.w	r2, #12
 80009c6:	d007      	beq.n	80009d8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ce:	2a08      	cmp	r2, #8
 80009d0:	d111      	bne.n	80009f6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	025e      	lsls	r6, r3, #9
 80009d6:	d40e      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	4b77      	ldr	r3, [pc, #476]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0795      	lsls	r5, r2, #30
 80009de:	d502      	bpl.n	80009e6 <HAL_RCC_OscConfig+0xf6>
 80009e0:	68e2      	ldr	r2, [r4, #12]
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d188      	bne.n	80008f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	6921      	ldr	r1, [r4, #16]
 80009ea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	e788      	b.n	8000908 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009f6:	68e2      	ldr	r2, [r4, #12]
 80009f8:	4b70      	ldr	r3, [pc, #448]	; (8000bbc <HAL_RCC_OscConfig+0x2cc>)
 80009fa:	b1b2      	cbz	r2, 8000a2a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fe18 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a04:	4d6c      	ldr	r5, [pc, #432]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	0798      	lsls	r0, r3, #30
 8000a0c:	d507      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	6922      	ldr	r2, [r4, #16]
 8000a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a1a:	602b      	str	r3, [r5, #0]
 8000a1c:	e774      	b.n	8000908 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fe09 	bl	8000634 <HAL_GetTick>
 8000a22:	1b80      	subs	r0, r0, r6
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d9ef      	bls.n	8000a08 <HAL_RCC_OscConfig+0x118>
 8000a28:	e7a7      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fe02 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a30:	4d61      	ldr	r5, [pc, #388]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	0799      	lsls	r1, r3, #30
 8000a38:	f57f af66 	bpl.w	8000908 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fdfa 	bl	8000634 <HAL_GetTick>
 8000a40:	1b80      	subs	r0, r0, r6
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x144>
 8000a46:	e798      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a48:	6962      	ldr	r2, [r4, #20]
 8000a4a:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <HAL_RCC_OscConfig+0x2d0>)
 8000a4c:	b17a      	cbz	r2, 8000a6e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a52:	f7ff fdef 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a56:	4d58      	ldr	r5, [pc, #352]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5c:	079f      	lsls	r7, r3, #30
 8000a5e:	f53f af57 	bmi.w	8000910 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a62:	f7ff fde7 	bl	8000634 <HAL_GetTick>
 8000a66:	1b80      	subs	r0, r0, r6
 8000a68:	2802      	cmp	r0, #2
 8000a6a:	d9f6      	bls.n	8000a5a <HAL_RCC_OscConfig+0x16a>
 8000a6c:	e785      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a70:	f7ff fde0 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a74:	4d50      	ldr	r5, [pc, #320]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	f57f af48 	bpl.w	8000910 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a80:	f7ff fdd8 	bl	8000634 <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9f6      	bls.n	8000a78 <HAL_RCC_OscConfig+0x188>
 8000a8a:	e776      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a94:	d128      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	9201      	str	r2, [sp, #4]
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aaa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	4d45      	ldr	r5, [pc, #276]	; (8000bc4 <HAL_RCC_OscConfig+0x2d4>)
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	05d9      	lsls	r1, r3, #23
 8000ab2:	d51b      	bpl.n	8000aec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	68a3      	ldr	r3, [r4, #8]
 8000ab6:	4d40      	ldr	r5, [pc, #256]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d127      	bne.n	8000b0c <HAL_RCC_OscConfig+0x21c>
 8000abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ac4:	f7ff fdb6 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac8:	4d3b      	ldr	r5, [pc, #236]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000aca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000acc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ad2:	079b      	lsls	r3, r3, #30
 8000ad4:	d539      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f43f af1e 	beq.w	8000918 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000adc:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000ade:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	e717      	b.n	8000918 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e7df      	b.n	8000aac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000af4:	f7ff fd9e 	bl	8000634 <HAL_GetTick>
 8000af8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	05da      	lsls	r2, r3, #23
 8000afe:	d4d9      	bmi.n	8000ab4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b00:	f7ff fd98 	bl	8000634 <HAL_GetTick>
 8000b04:	1bc0      	subs	r0, r0, r7
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9f7      	bls.n	8000afa <HAL_RCC_OscConfig+0x20a>
 8000b0a:	e736      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d104      	bne.n	8000b1a <HAL_RCC_OscConfig+0x22a>
 8000b10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	672b      	str	r3, [r5, #112]	; 0x70
 8000b18:	e7d0      	b.n	8000abc <HAL_RCC_OscConfig+0x1cc>
 8000b1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b1c:	f022 0201 	bic.w	r2, r2, #1
 8000b20:	672a      	str	r2, [r5, #112]	; 0x70
 8000b22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b24:	f022 0204 	bic.w	r2, r2, #4
 8000b28:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1ca      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fd81 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b3a:	0798      	lsls	r0, r3, #30
 8000b3c:	d5cb      	bpl.n	8000ad6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fd79 	bl	8000634 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9f7      	bls.n	8000b38 <HAL_RCC_OscConfig+0x248>
 8000b48:	e717      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fd73 	bl	8000634 <HAL_GetTick>
 8000b4e:	1bc0      	subs	r0, r0, r7
 8000b50:	4540      	cmp	r0, r8
 8000b52:	d9bd      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x1e0>
 8000b54:	e711      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b56:	4d18      	ldr	r5, [pc, #96]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
 8000b58:	68ab      	ldr	r3, [r5, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d047      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x302>
 8000b62:	4e19      	ldr	r6, [pc, #100]	; (8000bc8 <HAL_RCC_OscConfig+0x2d8>)
 8000b64:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b66:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b68:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b6a:	d135      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fd62 	bl	8000634 <HAL_GetTick>
 8000b70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	0199      	lsls	r1, r3, #6
 8000b76:	d429      	bmi.n	8000bcc <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b78:	6a22      	ldr	r2, [r4, #32]
 8000b7a:	69e3      	ldr	r3, [r4, #28]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b8e:	0852      	lsrs	r2, r2, #1
 8000b90:	3a01      	subs	r2, #1
 8000b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b96:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b98:	2301      	movs	r3, #1
 8000b9a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fd4a 	bl	8000634 <HAL_GetTick>
 8000ba0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	019a      	lsls	r2, r3, #6
 8000ba6:	f53f aebb 	bmi.w	8000920 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000baa:	f7ff fd43 	bl	8000634 <HAL_GetTick>
 8000bae:	1b40      	subs	r0, r0, r5
 8000bb0:	2802      	cmp	r0, #2
 8000bb2:	d9f6      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x2b2>
 8000bb4:	e6e1      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	42470000 	.word	0x42470000
 8000bc0:	42470e80 	.word	0x42470e80
 8000bc4:	40007000 	.word	0x40007000
 8000bc8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bcc:	f7ff fd32 	bl	8000634 <HAL_GetTick>
 8000bd0:	1bc0      	subs	r0, r0, r7
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9cd      	bls.n	8000b72 <HAL_RCC_OscConfig+0x282>
 8000bd6:	e6d0      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fd2c 	bl	8000634 <HAL_GetTick>
 8000bdc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	f57f ae9d 	bpl.w	8000920 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be6:	f7ff fd25 	bl	8000634 <HAL_GetTick>
 8000bea:	1b00      	subs	r0, r0, r4
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d9f6      	bls.n	8000bde <HAL_RCC_OscConfig+0x2ee>
 8000bf0:	e6c3      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bf2:	2801      	cmp	r0, #1
 8000bf4:	f43f aec2 	beq.w	800097c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000bf8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bfa:	69e3      	ldr	r3, [r4, #28]
 8000bfc:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f47f ae79 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
 8000c06:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c08:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	f47f ae73 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c18:	4003      	ands	r3, r0
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f47f ae6c 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c22:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f47f ae66 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c2e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c32:	1ac0      	subs	r0, r0, r3
 8000c34:	bf18      	it	ne
 8000c36:	2001      	movne	r0, #1
 8000c38:	e6a0      	b.n	800097c <HAL_RCC_OscConfig+0x8c>
 8000c3a:	bf00      	nop

08000c3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c3c:	4913      	ldr	r1, [pc, #76]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c40:	688b      	ldr	r3, [r1, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d003      	beq.n	8000c52 <HAL_RCC_GetSysClockFreq+0x16>
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d003      	beq.n	8000c56 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c4e:	4810      	ldr	r0, [pc, #64]	; (8000c90 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c50:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c52:	4810      	ldr	r0, [pc, #64]	; (8000c94 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c54:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c56:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c58:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c5c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c60:	bf14      	ite	ne
 8000c62:	480c      	ldrne	r0, [pc, #48]	; (8000c94 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c64:	480a      	ldreq	r0, [pc, #40]	; (8000c90 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c66:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c6a:	bf18      	it	ne
 8000c6c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c72:	fba1 0100 	umull	r0, r1, r1, r0
 8000c76:	f7ff fb0b 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c82:	3301      	adds	r3, #1
 8000c84:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c86:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c8a:	bd08      	pop	{r3, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	00f42400 	.word	0x00f42400
 8000c94:	007a1200 	.word	0x007a1200

08000c98 <HAL_RCC_ClockConfig>:
{
 8000c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	b910      	cbnz	r0, 8000ca8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_RCC_ClockConfig+0x124>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	f002 020f 	and.w	r2, r2, #15
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	d329      	bcc.n	8000d08 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb4:	6821      	ldr	r1, [r4, #0]
 8000cb6:	078f      	lsls	r7, r1, #30
 8000cb8:	d42e      	bmi.n	8000d18 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cba:	07c8      	lsls	r0, r1, #31
 8000cbc:	d441      	bmi.n	8000d42 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <HAL_RCC_ClockConfig+0x124>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	f002 020f 	and.w	r2, r2, #15
 8000cc6:	4295      	cmp	r5, r2
 8000cc8:	d367      	bcc.n	8000d9a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cca:	6822      	ldr	r2, [r4, #0]
 8000ccc:	0751      	lsls	r1, r2, #29
 8000cce:	d46d      	bmi.n	8000dac <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd0:	0713      	lsls	r3, r2, #28
 8000cd2:	d507      	bpl.n	8000ce4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cd4:	4a3a      	ldr	r2, [pc, #232]	; (8000dc0 <HAL_RCC_ClockConfig+0x128>)
 8000cd6:	6921      	ldr	r1, [r4, #16]
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ce2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ce4:	f7ff ffaa 	bl	8000c3c <HAL_RCC_GetSysClockFreq>
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_RCC_ClockConfig+0x128>)
 8000cea:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <HAL_RCC_ClockConfig+0x12c>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	40d8      	lsrs	r0, r3
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_RCC_ClockConfig+0x130>)
 8000cf8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <HAL_RCC_ClockConfig+0x134>)
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	f7ff fc4f 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000d02:	2000      	movs	r0, #0
 8000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d08:	b2ca      	uxtb	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d1c5      	bne.n	8000ca2 <HAL_RCC_ClockConfig+0xa>
 8000d16:	e7cd      	b.n	8000cb4 <HAL_RCC_ClockConfig+0x1c>
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d1a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d1e:	bf1e      	ittt	ne
 8000d20:	689a      	ldrne	r2, [r3, #8]
 8000d22:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d26:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d28:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d2a:	bf42      	ittt	mi
 8000d2c:	689a      	ldrmi	r2, [r3, #8]
 8000d2e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d32:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	68a0      	ldr	r0, [r4, #8]
 8000d38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d3c:	4302      	orrs	r2, r0
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	e7bb      	b.n	8000cba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d42:	6862      	ldr	r2, [r4, #4]
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_RCC_ClockConfig+0x128>)
 8000d46:	2a01      	cmp	r2, #1
 8000d48:	d11d      	bne.n	8000d86 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d50:	d0a7      	beq.n	8000ca2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d52:	4e1b      	ldr	r6, [pc, #108]	; (8000dc0 <HAL_RCC_ClockConfig+0x128>)
 8000d54:	68b3      	ldr	r3, [r6, #8]
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d5e:	f7ff fc69 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d62:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d68:	68b3      	ldr	r3, [r6, #8]
 8000d6a:	6862      	ldr	r2, [r4, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d74:	d0a3      	beq.n	8000cbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d76:	f7ff fc5d 	bl	8000634 <HAL_GetTick>
 8000d7a:	1bc0      	subs	r0, r0, r7
 8000d7c:	4540      	cmp	r0, r8
 8000d7e:	d9f3      	bls.n	8000d68 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d80:	2003      	movs	r0, #3
}
 8000d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d86:	1e91      	subs	r1, r2, #2
 8000d88:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d8a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d8c:	d802      	bhi.n	8000d94 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d92:	e7dd      	b.n	8000d50 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d94:	f013 0f02 	tst.w	r3, #2
 8000d98:	e7da      	b.n	8000d50 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9a:	b2ea      	uxtb	r2, r5
 8000d9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	429d      	cmp	r5, r3
 8000da6:	f47f af7c 	bne.w	8000ca2 <HAL_RCC_ClockConfig+0xa>
 8000daa:	e78e      	b.n	8000cca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dac:	4904      	ldr	r1, [pc, #16]	; (8000dc0 <HAL_RCC_ClockConfig+0x128>)
 8000dae:	68e0      	ldr	r0, [r4, #12]
 8000db0:	688b      	ldr	r3, [r1, #8]
 8000db2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000db6:	4303      	orrs	r3, r0
 8000db8:	608b      	str	r3, [r1, #8]
 8000dba:	e789      	b.n	8000cd0 <HAL_RCC_ClockConfig+0x38>
 8000dbc:	40023c00 	.word	0x40023c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	080022d7 	.word	0x080022d7
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	4a03      	ldr	r2, [pc, #12]	; (8000dec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dde:	6810      	ldr	r0, [r2, #0]
}
 8000de0:	40d8      	lsrs	r0, r3
 8000de2:	4770      	bx	lr
 8000de4:	40023800 	.word	0x40023800
 8000de8:	080022e7 	.word	0x080022e7
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dfe:	6810      	ldr	r0, [r2, #0]
}
 8000e00:	40d8      	lsrs	r0, r3
 8000e02:	4770      	bx	lr
 8000e04:	40023800 	.word	0x40023800
 8000e08:	080022e7 	.word	0x080022e7
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000e16:	6803      	ldr	r3, [r0, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000e1e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000e20:	bf1e      	ittt	ne
 8000e22:	681a      	ldrne	r2, [r3, #0]
 8000e24:	f042 0201 	orrne.w	r2, r2, #1
 8000e28:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8000e30:	2000      	movs	r0, #0
 8000e32:	4770      	bx	lr

08000e34 <HAL_TIM_PeriodElapsedCallback>:
 8000e34:	4770      	bx	lr

08000e36 <HAL_TIM_OC_DelayElapsedCallback>:
 8000e36:	4770      	bx	lr

08000e38 <HAL_TIM_IC_CaptureCallback>:
 8000e38:	4770      	bx	lr

08000e3a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e3a:	4770      	bx	lr

08000e3c <HAL_TIM_TriggerCallback>:
 8000e3c:	4770      	bx	lr

08000e3e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	0791      	lsls	r1, r2, #30
{
 8000e44:	b510      	push	{r4, lr}
 8000e46:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e48:	d50e      	bpl.n	8000e68 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	0792      	lsls	r2, r2, #30
 8000e4e:	d50b      	bpl.n	8000e68 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e50:	f06f 0202 	mvn.w	r2, #2
 8000e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e56:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e58:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e5a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e5c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e5e:	d077      	beq.n	8000f50 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000e60:	f7ff ffea 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e64:	2300      	movs	r3, #0
 8000e66:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	0750      	lsls	r0, r2, #29
 8000e6e:	d510      	bpl.n	8000e92 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	0751      	lsls	r1, r2, #29
 8000e74:	d50d      	bpl.n	8000e92 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e76:	f06f 0204 	mvn.w	r2, #4
 8000e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e7c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e7e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e80:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e84:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e88:	d068      	beq.n	8000f5c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e8a:	f7ff ffd5 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	0712      	lsls	r2, r2, #28
 8000e98:	d50f      	bpl.n	8000eba <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	0710      	lsls	r0, r2, #28
 8000e9e:	d50c      	bpl.n	8000eba <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000ea0:	f06f 0208 	mvn.w	r2, #8
 8000ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ea6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ea8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000eaa:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000eac:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000eae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000eb0:	d05a      	beq.n	8000f68 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb2:	f7ff ffc1 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	06d2      	lsls	r2, r2, #27
 8000ec0:	d510      	bpl.n	8000ee4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	06d0      	lsls	r0, r2, #27
 8000ec6:	d50d      	bpl.n	8000ee4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ec8:	f06f 0210 	mvn.w	r2, #16
 8000ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ece:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ed0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ed2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ed6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ed8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000eda:	d04b      	beq.n	8000f74 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000edc:	f7ff ffac 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	07d1      	lsls	r1, r2, #31
 8000eea:	d508      	bpl.n	8000efe <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	07d2      	lsls	r2, r2, #31
 8000ef0:	d505      	bpl.n	8000efe <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ef2:	f06f 0201 	mvn.w	r2, #1
 8000ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f7ff ff9b 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	0610      	lsls	r0, r2, #24
 8000f04:	d508      	bpl.n	8000f18 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	0611      	lsls	r1, r2, #24
 8000f0a:	d505      	bpl.n	8000f18 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000f12:	4620      	mov	r0, r4
 8000f14:	f000 f977 	bl	8001206 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	0652      	lsls	r2, r2, #25
 8000f1e:	d508      	bpl.n	8000f32 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	0650      	lsls	r0, r2, #25
 8000f24:	d505      	bpl.n	8000f32 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff ff85 	bl	8000e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	0691      	lsls	r1, r2, #26
 8000f38:	d522      	bpl.n	8000f80 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	0692      	lsls	r2, r2, #26
 8000f3e:	d51f      	bpl.n	8000f80 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f40:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000f44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f46:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000f4c:	f000 b95a 	b.w	8001204 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f50:	f7ff ff71 	bl	8000e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff ff70 	bl	8000e3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000f5a:	e783      	b.n	8000e64 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f5c:	f7ff ff6b 	bl	8000e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff ff6a 	bl	8000e3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000f66:	e792      	b.n	8000e8e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f68:	f7ff ff65 	bl	8000e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ff64 	bl	8000e3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000f72:	e7a0      	b.n	8000eb6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f74:	f7ff ff5f 	bl	8000e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff ff5e 	bl	8000e3a <HAL_TIM_PWM_PulseFinishedCallback>
 8000f7e:	e7af      	b.n	8000ee0 <HAL_TIM_IRQHandler+0xa2>
 8000f80:	bd10      	pop	{r4, pc}
	...

08000f84 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f84:	4a24      	ldr	r2, [pc, #144]	; (8001018 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000f86:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	d00e      	beq.n	8000faa <TIM_Base_SetConfig+0x26>
 8000f8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f90:	d00b      	beq.n	8000faa <TIM_Base_SetConfig+0x26>
 8000f92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f96:	4290      	cmp	r0, r2
 8000f98:	d007      	beq.n	8000faa <TIM_Base_SetConfig+0x26>
 8000f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9e:	4290      	cmp	r0, r2
 8000fa0:	d003      	beq.n	8000faa <TIM_Base_SetConfig+0x26>
 8000fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa6:	4290      	cmp	r0, r2
 8000fa8:	d115      	bne.n	8000fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000faa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000fb0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <TIM_Base_SetConfig+0x94>)
 8000fb4:	4290      	cmp	r0, r2
 8000fb6:	d019      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fb8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fbc:	d016      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fbe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000fc2:	4290      	cmp	r0, r2
 8000fc4:	d012      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fca:	4290      	cmp	r0, r2
 8000fcc:	d00e      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fd2:	4290      	cmp	r0, r2
 8000fd4:	d00a      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <TIM_Base_SetConfig+0x98>)
 8000fd8:	4290      	cmp	r0, r2
 8000fda:	d007      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe0:	4290      	cmp	r0, r2
 8000fe2:	d003      	beq.n	8000fec <TIM_Base_SetConfig+0x68>
 8000fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe8:	4290      	cmp	r0, r2
 8000fea:	d103      	bne.n	8000ff4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fec:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ff2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ff4:	694a      	ldr	r2, [r1, #20]
 8000ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ffa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000ffc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ffe:	688b      	ldr	r3, [r1, #8]
 8001000:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001002:	680b      	ldr	r3, [r1, #0]
 8001004:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <TIM_Base_SetConfig+0x94>)
 8001008:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800100a:	bf04      	itt	eq
 800100c:	690b      	ldreq	r3, [r1, #16]
 800100e:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001010:	2301      	movs	r3, #1
 8001012:	6143      	str	r3, [r0, #20]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40010000 	.word	0x40010000
 800101c:	40014000 	.word	0x40014000

08001020 <HAL_TIM_Base_Init>:
{
 8001020:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001022:	4604      	mov	r4, r0
 8001024:	b1a0      	cbz	r0, 8001050 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001026:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800102a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800102e:	b91b      	cbnz	r3, 8001038 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001030:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001034:	f000 fc22 	bl	800187c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001038:	2302      	movs	r3, #2
 800103a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800103e:	6820      	ldr	r0, [r4, #0]
 8001040:	1d21      	adds	r1, r4, #4
 8001042:	f7ff ff9f 	bl	8000f84 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001046:	2301      	movs	r3, #1
 8001048:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800104c:	2000      	movs	r0, #0
 800104e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
}
 8001052:	bd10      	pop	{r4, pc}

08001054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001054:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001056:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001058:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800105a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800105e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001062:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001064:	6083      	str	r3, [r0, #8]
 8001066:	bd10      	pop	{r4, pc}

08001068 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001068:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800106c:	2b01      	cmp	r3, #1
{
 800106e:	b570      	push	{r4, r5, r6, lr}
 8001070:	4604      	mov	r4, r0
 8001072:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001076:	d019      	beq.n	80010ac <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001078:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800107c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800107e:	2301      	movs	r3, #1
 8001080:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001084:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800108a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800108e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001090:	680b      	ldr	r3, [r1, #0]
 8001092:	2b40      	cmp	r3, #64	; 0x40
 8001094:	d065      	beq.n	8001162 <HAL_TIM_ConfigClockSource+0xfa>
 8001096:	d815      	bhi.n	80010c4 <HAL_TIM_ConfigClockSource+0x5c>
 8001098:	2b10      	cmp	r3, #16
 800109a:	d00c      	beq.n	80010b6 <HAL_TIM_ConfigClockSource+0x4e>
 800109c:	d807      	bhi.n	80010ae <HAL_TIM_ConfigClockSource+0x46>
 800109e:	b153      	cbz	r3, 80010b6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80010a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80010a2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80010a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80010a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80010ae:	2b20      	cmp	r3, #32
 80010b0:	d001      	beq.n	80010b6 <HAL_TIM_ConfigClockSource+0x4e>
 80010b2:	2b30      	cmp	r3, #48	; 0x30
 80010b4:	d1f4      	bne.n	80010a0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80010b6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010b8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80010bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010c0:	4313      	orrs	r3, r2
 80010c2:	e01a      	b.n	80010fa <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80010c4:	2b60      	cmp	r3, #96	; 0x60
 80010c6:	d034      	beq.n	8001132 <HAL_TIM_ConfigClockSource+0xca>
 80010c8:	d819      	bhi.n	80010fe <HAL_TIM_ConfigClockSource+0x96>
 80010ca:	2b50      	cmp	r3, #80	; 0x50
 80010cc:	d1e8      	bne.n	80010a0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80010ce:	684a      	ldr	r2, [r1, #4]
 80010d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80010d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010d4:	6a05      	ldr	r5, [r0, #32]
 80010d6:	f025 0501 	bic.w	r5, r5, #1
 80010da:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010dc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80010de:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80010e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010e6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80010ea:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80010ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80010f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010f6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80010fa:	6083      	str	r3, [r0, #8]
 80010fc:	e7d0      	b.n	80010a0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80010fe:	2b70      	cmp	r3, #112	; 0x70
 8001100:	d00c      	beq.n	800111c <HAL_TIM_ConfigClockSource+0xb4>
 8001102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001106:	d1cb      	bne.n	80010a0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001108:	68cb      	ldr	r3, [r1, #12]
 800110a:	684a      	ldr	r2, [r1, #4]
 800110c:	6889      	ldr	r1, [r1, #8]
 800110e:	f7ff ffa1 	bl	8001054 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001112:	6822      	ldr	r2, [r4, #0]
 8001114:	6893      	ldr	r3, [r2, #8]
 8001116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111a:	e008      	b.n	800112e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800111c:	68cb      	ldr	r3, [r1, #12]
 800111e:	684a      	ldr	r2, [r1, #4]
 8001120:	6889      	ldr	r1, [r1, #8]
 8001122:	f7ff ff97 	bl	8001054 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800112a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800112e:	6093      	str	r3, [r2, #8]
      break;
 8001130:	e7b6      	b.n	80010a0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001132:	684d      	ldr	r5, [r1, #4]
 8001134:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001136:	6a01      	ldr	r1, [r0, #32]
 8001138:	f021 0110 	bic.w	r1, r1, #16
 800113c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800113e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001140:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001142:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800114a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800114e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001152:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001154:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001156:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800115c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001160:	e7cb      	b.n	80010fa <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001162:	684a      	ldr	r2, [r1, #4]
 8001164:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001166:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001168:	6a05      	ldr	r5, [r0, #32]
 800116a:	f025 0501 	bic.w	r5, r5, #1
 800116e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001170:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001172:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800117a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800117e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001180:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001182:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001184:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800118a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800118e:	e7b4      	b.n	80010fa <HAL_TIM_ConfigClockSource+0x92>

08001190 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001190:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001194:	2b01      	cmp	r3, #1
{
 8001196:	b530      	push	{r4, r5, lr}
 8001198:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800119c:	d02d      	beq.n	80011fa <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800119e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80011a2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80011a4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80011a6:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80011a8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80011ac:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80011ae:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80011b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80011b4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80011b6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011b8:	4c11      	ldr	r4, [pc, #68]	; (8001200 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	d012      	beq.n	80011e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80011be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c2:	d00f      	beq.n	80011e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80011c4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80011c8:	42a3      	cmp	r3, r4
 80011ca:	d00b      	beq.n	80011e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80011cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011d0:	42a3      	cmp	r3, r4
 80011d2:	d007      	beq.n	80011e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80011d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011d8:	42a3      	cmp	r3, r4
 80011da:	d003      	beq.n	80011e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80011dc:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80011e0:	42a3      	cmp	r3, r4
 80011e2:	d104      	bne.n	80011ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011e4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80011e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011ea:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80011ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80011f4:	2300      	movs	r3, #0
 80011f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80011fa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_TIMEx_CommutCallback>:
 8001204:	4770      	bx	lr

08001206 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001206:	4770      	bx	lr

08001208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001208:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800120a:	6803      	ldr	r3, [r0, #0]
 800120c:	68c1      	ldr	r1, [r0, #12]
 800120e:	691a      	ldr	r2, [r3, #16]
{
 8001210:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001212:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001216:	430a      	orrs	r2, r1
 8001218:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800121a:	6925      	ldr	r5, [r4, #16]
 800121c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800121e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001220:	69c0      	ldr	r0, [r0, #28]
 8001222:	432a      	orrs	r2, r5
 8001224:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001226:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800122a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800122c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001230:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001232:	430a      	orrs	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001236:	695a      	ldr	r2, [r3, #20]
 8001238:	69a1      	ldr	r1, [r4, #24]
 800123a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800123e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001240:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001248:	d129      	bne.n	800129e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800124a:	4293      	cmp	r3, r2
 800124c:	d003      	beq.n	8001256 <UART_SetConfig+0x4e>
 800124e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001252:	4293      	cmp	r3, r2
 8001254:	d120      	bne.n	8001298 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001256:	f7ff fdcb 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800125a:	6862      	ldr	r2, [r4, #4]
 800125c:	6825      	ldr	r5, [r4, #0]
 800125e:	1892      	adds	r2, r2, r2
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	f04f 0119 	mov.w	r1, #25
 8001268:	415b      	adcs	r3, r3
 800126a:	fba0 0101 	umull	r0, r1, r0, r1
 800126e:	f7ff f80f 	bl	8000290 <__aeabi_uldivmod>
 8001272:	2164      	movs	r1, #100	; 0x64
 8001274:	fbb0 f4f1 	udiv	r4, r0, r1
 8001278:	fb01 0314 	mls	r3, r1, r4, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	3332      	adds	r3, #50	; 0x32
 8001280:	fbb3 f3f1 	udiv	r3, r3, r1
 8001284:	f003 0207 	and.w	r2, r3, #7
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800128e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001292:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001294:	60ab      	str	r3, [r5, #8]
 8001296:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001298:	f7ff fd9a 	bl	8000dd0 <HAL_RCC_GetPCLK1Freq>
 800129c:	e7dd      	b.n	800125a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800129e:	4293      	cmp	r3, r2
 80012a0:	d002      	beq.n	80012a8 <UART_SetConfig+0xa0>
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <UART_SetConfig+0xd8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d116      	bne.n	80012d6 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80012a8:	f7ff fda2 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	6825      	ldr	r5, [r4, #0]
 80012b0:	2119      	movs	r1, #25
 80012b2:	009a      	lsls	r2, r3, #2
 80012b4:	fba0 0101 	umull	r0, r1, r0, r1
 80012b8:	0f9b      	lsrs	r3, r3, #30
 80012ba:	f7fe ffe9 	bl	8000290 <__aeabi_uldivmod>
 80012be:	2264      	movs	r2, #100	; 0x64
 80012c0:	fbb0 f1f2 	udiv	r1, r0, r2
 80012c4:	fb02 0311 	mls	r3, r2, r1, r0
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	3332      	adds	r3, #50	; 0x32
 80012cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80012d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80012d4:	e7de      	b.n	8001294 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80012d6:	f7ff fd7b 	bl	8000dd0 <HAL_RCC_GetPCLK1Freq>
 80012da:	e7e7      	b.n	80012ac <UART_SetConfig+0xa4>
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40011400 	.word	0x40011400

080012e4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	4604      	mov	r4, r0
 80012e8:	460e      	mov	r6, r1
 80012ea:	4617      	mov	r7, r2
 80012ec:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012ee:	6821      	ldr	r1, [r4, #0]
 80012f0:	680b      	ldr	r3, [r1, #0]
 80012f2:	ea36 0303 	bics.w	r3, r6, r3
 80012f6:	d101      	bne.n	80012fc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012f8:	2000      	movs	r0, #0
}
 80012fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012fc:	1c6b      	adds	r3, r5, #1
 80012fe:	d0f7      	beq.n	80012f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001300:	b995      	cbnz	r5, 8001328 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800130a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001314:	2320      	movs	r3, #32
 8001316:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800131a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800131e:	2300      	movs	r3, #0
 8001320:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001324:	2003      	movs	r0, #3
 8001326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001328:	f7ff f984 	bl	8000634 <HAL_GetTick>
 800132c:	1bc0      	subs	r0, r0, r7
 800132e:	4285      	cmp	r5, r0
 8001330:	d2dd      	bcs.n	80012ee <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001332:	e7e6      	b.n	8001302 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001334 <HAL_UART_Init>:
{
 8001334:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001336:	4604      	mov	r4, r0
 8001338:	b340      	cbz	r0, 800138c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800133a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800133e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001342:	b91b      	cbnz	r3, 800134c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001344:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001348:	f000 fab6 	bl	80018b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800134c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800134e:	2324      	movs	r3, #36	; 0x24
 8001350:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001354:	68d3      	ldr	r3, [r2, #12]
 8001356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800135a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff ff53 	bl	8001208 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800136a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001372:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800137a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800137c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800137e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001380:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001382:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001386:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800138a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800138c:	2001      	movs	r0, #1
}
 800138e:	bd10      	pop	{r4, pc}

08001390 <HAL_UART_Transmit>:
{
 8001390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001394:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001396:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800139a:	2b20      	cmp	r3, #32
{
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
 80013a0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80013a2:	d151      	bne.n	8001448 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d04c      	beq.n	8001442 <HAL_UART_Transmit+0xb2>
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d04a      	beq.n	8001442 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80013ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d049      	beq.n	8001448 <HAL_UART_Transmit+0xb8>
 80013b4:	2301      	movs	r3, #1
 80013b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ba:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013be:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c0:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80013c8:	f7ff f934 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80013cc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80013d0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80013d2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80013d6:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80013da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b95b      	cbnz	r3, 80013f8 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4632      	mov	r2, r6
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff ff7c 	bl	80012e4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013ec:	b9a0      	cbnz	r0, 8001418 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80013ee:	2320      	movs	r3, #32
 80013f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80013f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80013f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001406:	4632      	mov	r2, r6
 8001408:	463b      	mov	r3, r7
 800140a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800140e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001410:	d10e      	bne.n	8001430 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001412:	f7ff ff67 	bl	80012e4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001416:	b110      	cbz	r0, 800141e <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001418:	2003      	movs	r0, #3
 800141a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800141e:	882b      	ldrh	r3, [r5, #0]
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001426:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001428:	6923      	ldr	r3, [r4, #16]
 800142a:	b943      	cbnz	r3, 800143e <HAL_UART_Transmit+0xae>
          pData += 2U;
 800142c:	3502      	adds	r5, #2
 800142e:	e7d4      	b.n	80013da <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001430:	f7ff ff58 	bl	80012e4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001434:	2800      	cmp	r0, #0
 8001436:	d1ef      	bne.n	8001418 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	782a      	ldrb	r2, [r5, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	3501      	adds	r5, #1
 8001440:	e7cb      	b.n	80013da <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001442:	2001      	movs	r0, #1
 8001444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001448:	2002      	movs	r0, #2
}
 800144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800144e <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800144e:	b530      	push	{r4, r5, lr}
 8001450:	b087      	sub	sp, #28
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	2214      	movs	r2, #20
 8001458:	2100      	movs	r1, #0
 800145a:	a801      	add	r0, sp, #4
 800145c:	f000 faec 	bl	8001a38 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001462:	a901      	add	r1, sp, #4
 8001464:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001466:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800146a:	f7ff f967 	bl	800073c <HAL_GPIO_Init>
}
 800146e:	b007      	add	sp, #28
 8001470:	bd30      	pop	{r4, r5, pc}

08001472 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b530      	push	{r4, r5, lr}
 8001474:	b087      	sub	sp, #28
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	2214      	movs	r2, #20
 800147c:	2100      	movs	r1, #0
 800147e:	a801      	add	r0, sp, #4
 8001480:	f000 fada 	bl	8001a38 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001484:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001486:	a901      	add	r1, sp, #4
 8001488:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 800148a:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800148e:	f7ff f955 	bl	800073c <HAL_GPIO_Init>
}
 8001492:	b007      	add	sp, #28
 8001494:	bd30      	pop	{r4, r5, pc}
	...

08001498 <delay>:
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
	/* change your code here for the delay in microseconds */

	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <delay+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim5))<time);}
 80014a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a2:	4282      	cmp	r2, r0
 80014a4:	d3fc      	bcc.n	80014a0 <delay+0x8>
 80014a6:	4770      	bx	lr
 80014a8:	200000ac 	.word	0x200000ac

080014ac <DHT11_Start>:
{
 80014ac:	b510      	push	{r4, lr}
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80014ae:	4c10      	ldr	r4, [pc, #64]	; (80014f0 <DHT11_Start+0x44>)
 80014b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff ffca 	bl	800144e <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff fa0f 	bl	80008e4 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 80014c6:	f244 6050 	movw	r0, #18000	; 0x4650
 80014ca:	f7ff ffe5 	bl	8001498 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	4620      	mov	r0, r4
 80014d4:	2201      	movs	r2, #1
 80014d6:	f7ff fa05 	bl	80008e4 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 80014da:	2014      	movs	r0, #20
 80014dc:	f7ff ffdc 	bl	8001498 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80014e0:	4620      	mov	r0, r4
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80014e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80014ea:	f7ff bfc2 	b.w	8001472 <Set_Pin_Input>
 80014ee:	bf00      	nop
 80014f0:	40020000 	.word	0x40020000

080014f4 <DHT11_Check_Response>:
{
 80014f4:	b538      	push	{r3, r4, r5, lr}
	delay (40);
 80014f6:	2028      	movs	r0, #40	; 0x28
 80014f8:	f7ff ffce 	bl	8001498 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80014fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <DHT11_Check_Response+0x44>)
 8001502:	f7ff f9e9 	bl	80008d8 <HAL_GPIO_ReadPin>
 8001506:	b9a8      	cbnz	r0, 8001534 <DHT11_Check_Response+0x40>
		delay (80);
 8001508:	2050      	movs	r0, #80	; 0x50
 800150a:	f7ff ffc5 	bl	8001498 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800150e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <DHT11_Check_Response+0x44>)
 8001514:	f7ff f9e0 	bl	80008d8 <HAL_GPIO_ReadPin>
		else Response = -1; // 255
 8001518:	2800      	cmp	r0, #0
 800151a:	bf14      	ite	ne
 800151c:	2401      	movne	r4, #1
 800151e:	24ff      	moveq	r4, #255	; 0xff
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001520:	4d05      	ldr	r5, [pc, #20]	; (8001538 <DHT11_Check_Response+0x44>)
 8001522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001526:	4628      	mov	r0, r5
 8001528:	f7ff f9d6 	bl	80008d8 <HAL_GPIO_ReadPin>
 800152c:	2800      	cmp	r0, #0
 800152e:	d1f8      	bne.n	8001522 <DHT11_Check_Response+0x2e>
}
 8001530:	4620      	mov	r0, r4
 8001532:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t Response = 0;
 8001534:	2400      	movs	r4, #0
 8001536:	e7f3      	b.n	8001520 <DHT11_Check_Response+0x2c>
 8001538:	40020000 	.word	0x40020000

0800153c <DHT11_Read>:
{
 800153c:	b570      	push	{r4, r5, r6, lr}
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800153e:	4e13      	ldr	r6, [pc, #76]	; (800158c <DHT11_Read+0x50>)
{
 8001540:	2400      	movs	r4, #0
 8001542:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001548:	4630      	mov	r0, r6
 800154a:	f7ff f9c5 	bl	80008d8 <HAL_GPIO_ReadPin>
 800154e:	2800      	cmp	r0, #0
 8001550:	d0f8      	beq.n	8001544 <DHT11_Read+0x8>
		delay (40);   // wait for 40 us
 8001552:	2028      	movs	r0, #40	; 0x28
 8001554:	f7ff ffa0 	bl	8001498 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155c:	4630      	mov	r0, r6
 800155e:	f7ff f9bb 	bl	80008d8 <HAL_GPIO_ReadPin>
 8001562:	2301      	movs	r3, #1
			i&= ~(1<<(7-j));   // write 0
 8001564:	40ab      	lsls	r3, r5
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001566:	b968      	cbnz	r0, 8001584 <DHT11_Read+0x48>
			i&= ~(1<<(7-j));   // write 0
 8001568:	ea24 0403 	bic.w	r4, r4, r3
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800156c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001570:	4630      	mov	r0, r6
 8001572:	f7ff f9b1 	bl	80008d8 <HAL_GPIO_ReadPin>
 8001576:	2800      	cmp	r0, #0
 8001578:	d1f8      	bne.n	800156c <DHT11_Read+0x30>
	for (j=0;j<8;j++)
 800157a:	f115 35ff 	adds.w	r5, r5, #4294967295
 800157e:	d2e1      	bcs.n	8001544 <DHT11_Read+0x8>
}
 8001580:	4620      	mov	r0, r4
 8001582:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001584:	431c      	orrs	r4, r3
 8001586:	b2e4      	uxtb	r4, r4
 8001588:	e7f0      	b.n	800156c <DHT11_Read+0x30>
 800158a:	bf00      	nop
 800158c:	40020000 	.word	0x40020000

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001594:	2230      	movs	r2, #48	; 0x30
 8001596:	2100      	movs	r1, #0
 8001598:	a808      	add	r0, sp, #32
 800159a:	f000 fa4d 	bl	8001a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159e:	2100      	movs	r1, #0
 80015a0:	2214      	movs	r2, #20
 80015a2:	a803      	add	r0, sp, #12
 80015a4:	f000 fa48 	bl	8001a38 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	2400      	movs	r4, #0
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <SystemClock_Config+0x90>)
 80015ac:	9401      	str	r4, [sp, #4]
 80015ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b8:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c2:	9402      	str	r4, [sp, #8]
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015de:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e6:	2304      	movs	r3, #4
 80015e8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015ea:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ec:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ee:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015f0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015f4:	2307      	movs	r3, #7
 80015f6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fa:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fe:	f7ff f977 	bl	80008f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001606:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800160c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001612:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001616:	f7ff fb3f 	bl	8000c98 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800161a:	b014      	add	sp, #80	; 0x50
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <main>:
{
 8001628:	b580      	push	{r7, lr}
 800162a:	f5ad 6dfe 	sub.w	sp, sp, #2032	; 0x7f0
  HAL_Init();
 800162e:	f7fe ffdb 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001632:	f7ff ffad 	bl	8001590 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	2214      	movs	r2, #20
 8001638:	2100      	movs	r1, #0
 800163a:	a808      	add	r0, sp, #32
 800163c:	f000 f9fc 	bl	8001a38 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	2400      	movs	r4, #0
 8001642:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <main+0x1c4>)
 8001644:	9402      	str	r4, [sp, #8]
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001648:	4869      	ldr	r0, [pc, #420]	; (80017f0 <main+0x1c8>)
  huart2.Instance = USART2;
 800164a:	4d6a      	ldr	r5, [pc, #424]	; (80017f4 <main+0x1cc>)
  htim5.Instance = TIM5;
 800164c:	4e6a      	ldr	r6, [pc, #424]	; (80017f8 <main+0x1d0>)
	  Presence = DHT11_Check_Response();
 800164e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8001838 <main+0x210>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	f042 0204 	orr.w	r2, r2, #4
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
 8001658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165a:	f002 0204 	and.w	r2, r2, #4
 800165e:	9202      	str	r2, [sp, #8]
 8001660:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	9403      	str	r4, [sp, #12]
 8001664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
 800166c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001672:	9203      	str	r2, [sp, #12]
 8001674:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	9404      	str	r4, [sp, #16]
 8001678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
 8001680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001682:	f002 0201 	and.w	r2, r2, #1
 8001686:	9204      	str	r2, [sp, #16]
 8001688:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	9405      	str	r4, [sp, #20]
 800168c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168e:	f042 0202 	orr.w	r2, r2, #2
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800169a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800169e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016a2:	f7ff f91f 	bl	80008e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016aa:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ac:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ae:	4b53      	ldr	r3, [pc, #332]	; (80017fc <main+0x1d4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b0:	4853      	ldr	r0, [pc, #332]	; (8001800 <main+0x1d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f7ff f841 	bl	800073c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ba:	2320      	movs	r3, #32
 80016bc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016be:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c2:	484b      	ldr	r0, [pc, #300]	; (80017f0 <main+0x1c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f7ff f837 	bl	800073c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_INOUT_PIN_Pin */
  GPIO_InitStruct.Pin = DHT11_INOUT_PIN_Pin;
 80016ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DHT11_INOUT_PIN_GPIO_Port, &GPIO_InitStruct);
 80016d2:	a908      	add	r1, sp, #32
 80016d4:	4846      	ldr	r0, [pc, #280]	; (80017f0 <main+0x1c8>)
  GPIO_InitStruct.Pin = DHT11_INOUT_PIN_Pin;
 80016d6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(DHT11_INOUT_PIN_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f7ff f82e 	bl	800073c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80016e0:	4a48      	ldr	r2, [pc, #288]	; (8001804 <main+0x1dc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 80016e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016e8:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ec:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ee:	230c      	movs	r3, #12
 80016f0:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f2:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f4:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	f7ff fe1b 	bl	8001334 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	2210      	movs	r2, #16
 8001700:	4621      	mov	r1, r4
 8001702:	a808      	add	r0, sp, #32
 8001704:	f000 f998 	bl	8001a38 <memset>
  htim5.Init.Prescaler = 50-1;
 8001708:	493f      	ldr	r1, [pc, #252]	; (8001808 <main+0x1e0>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	60b4      	str	r4, [r6, #8]
  htim5.Init.Prescaler = 50-1;
 800170c:	2331      	movs	r3, #49	; 0x31
 800170e:	e886 000a 	stmia.w	r6, {r1, r3}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001712:	4630      	mov	r0, r6
  htim5.Init.Period = 0xffff-1;
 8001714:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001718:	60f3      	str	r3, [r6, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	6134      	str	r4, [r6, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171c:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171e:	9406      	str	r4, [sp, #24]
 8001720:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001722:	f7ff fc7d 	bl	8001020 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800172a:	a908      	add	r1, sp, #32
 800172c:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001730:	f7ff fc9a 	bl	8001068 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001734:	a906      	add	r1, sp, #24
 8001736:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800173c:	f7ff fd28 	bl	8001190 <HAL_TIMEx_MasterConfigSynchronization>
HAL_TIM_Base_Start(&htim5);
 8001740:	4630      	mov	r0, r6
 8001742:	f7ff fb65 	bl	8000e10 <HAL_TIM_Base_Start>
 sprintf(buffer,"hello hhhhhh\n\r");
 8001746:	4931      	ldr	r1, [pc, #196]	; (800180c <main+0x1e4>)
	  Rh_byte1 = DHT11_Read ();
 8001748:	4e31      	ldr	r6, [pc, #196]	; (8001810 <main+0x1e8>)
 sprintf(buffer,"hello hhhhhh\n\r");
 800174a:	a808      	add	r0, sp, #32
 800174c:	f000 f9a0 	bl	8001a90 <strcpy>
 HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 8001750:	a808      	add	r0, sp, #32
 8001752:	f7fe fd45 	bl	80001e0 <strlen>
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	b282      	uxth	r2, r0
 800175c:	a908      	add	r1, sp, #32
 800175e:	4628      	mov	r0, r5
 8001760:	f7ff fe16 	bl	8001390 <HAL_UART_Transmit>
	  Rh_byte2 = DHT11_Read ();
 8001764:	4d2b      	ldr	r5, [pc, #172]	; (8001814 <main+0x1ec>)
	  Temp_byte1 = DHT11_Read ();
 8001766:	4f2c      	ldr	r7, [pc, #176]	; (8001818 <main+0x1f0>)
	  Temp_byte2 = DHT11_Read ();
 8001768:	4c2c      	ldr	r4, [pc, #176]	; (800181c <main+0x1f4>)
	  DHT11_Start();
 800176a:	f7ff fe9f 	bl	80014ac <DHT11_Start>
	  Presence = DHT11_Check_Response();
 800176e:	f7ff fec1 	bl	80014f4 <DHT11_Check_Response>
 8001772:	f888 0000 	strb.w	r0, [r8]
	  Rh_byte1 = DHT11_Read ();
 8001776:	f7ff fee1 	bl	800153c <DHT11_Read>
 800177a:	7030      	strb	r0, [r6, #0]
	  Rh_byte2 = DHT11_Read ();
 800177c:	f7ff fede 	bl	800153c <DHT11_Read>
 8001780:	7028      	strb	r0, [r5, #0]
	  Temp_byte1 = DHT11_Read ();
 8001782:	f7ff fedb 	bl	800153c <DHT11_Read>
 8001786:	7038      	strb	r0, [r7, #0]
	  Temp_byte2 = DHT11_Read ();
 8001788:	f7ff fed8 	bl	800153c <DHT11_Read>
 800178c:	7020      	strb	r0, [r4, #0]
	  SUM = DHT11_Read();
 800178e:	f7ff fed5 	bl	800153c <DHT11_Read>
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <main+0x1f8>)
	  TEMP = Temp_byte1;
 8001794:	7839      	ldrb	r1, [r7, #0]
	  SUM = DHT11_Read();
 8001796:	8018      	strh	r0, [r3, #0]
	  TEMP = Temp_byte1;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <main+0x1fc>)
	  RH = Rh_byte1;
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <main+0x200>)
	  TEMP = Temp_byte1;
 800179c:	8019      	strh	r1, [r3, #0]
	  Temperature = (float) TEMP;
 800179e:	ee07 1a90 	vmov	s15, r1
	  RH = Rh_byte1;
 80017a2:	7833      	ldrb	r3, [r6, #0]
 80017a4:	8013      	strh	r3, [r2, #0]
	  Temperature = (float) TEMP;
 80017a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <main+0x204>)
 80017ac:	edc2 7a00 	vstr	s15, [r2]
	  Humidity = (float) RH;
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <main+0x208>)
 80017b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  sprintf(buffer, "\n\r RH:- %d.%d TEMP:- %d.%d ",Rh_byte2,Rh_byte1,Temp_byte2,Temp_byte1);
 80017ba:	a808      	add	r0, sp, #32
	  Humidity = (float) RH;
 80017bc:	edc2 7a00 	vstr	s15, [r2]
	  sprintf(buffer, "\n\r RH:- %d.%d TEMP:- %d.%d ",Rh_byte2,Rh_byte1,Temp_byte2,Temp_byte1);
 80017c0:	782a      	ldrb	r2, [r5, #0]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	7821      	ldrb	r1, [r4, #0]
 80017c6:	9100      	str	r1, [sp, #0]
 80017c8:	491a      	ldr	r1, [pc, #104]	; (8001834 <main+0x20c>)
 80017ca:	f000 f93d 	bl	8001a48 <siprintf>
	  HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 80017ce:	a808      	add	r0, sp, #32
 80017d0:	f7fe fd06 	bl	80001e0 <strlen>
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	b282      	uxth	r2, r0
 80017da:	a908      	add	r1, sp, #32
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <main+0x1cc>)
 80017de:	f7ff fdd7 	bl	8001390 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80017e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e6:	f7fe ff2b 	bl	8000640 <HAL_Delay>
 80017ea:	e7bc      	b.n	8001766 <main+0x13e>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	200000f0 	.word	0x200000f0
 80017f8:	200000ac 	.word	0x200000ac
 80017fc:	10210000 	.word	0x10210000
 8001800:	40020800 	.word	0x40020800
 8001804:	40004400 	.word	0x40004400
 8001808:	40000c00 	.word	0x40000c00
 800180c:	080022ac 	.word	0x080022ac
 8001810:	200000a8 	.word	0x200000a8
 8001814:	200000ef 	.word	0x200000ef
 8001818:	200000ee 	.word	0x200000ee
 800181c:	20000132 	.word	0x20000132
 8001820:	20000130 	.word	0x20000130
 8001824:	200000ec 	.word	0x200000ec
 8001828:	200000aa 	.word	0x200000aa
 800182c:	20000094 	.word	0x20000094
 8001830:	2000008c 	.word	0x2000008c
 8001834:	080022bb 	.word	0x080022bb
 8001838:	20000090 	.word	0x20000090

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_MspInit+0x3c>)
 8001840:	2100      	movs	r1, #0
 8001842:	9100      	str	r1, [sp, #0]
 8001844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
 800184c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800184e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001852:	9200      	str	r2, [sp, #0]
 8001854:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	9101      	str	r1, [sp, #4]
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001868:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186c:	f7fe fefc 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	b003      	add	sp, #12
 8001872:	f85d fb04 	ldr.w	pc, [sp], #4
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM5)
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_TIM_Base_MspInit+0x38>)
 8001880:	6802      	ldr	r2, [r0, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d113      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001886:	2200      	movs	r2, #0
 8001888:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800188c:	9201      	str	r2, [sp, #4]
 800188e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001890:	f041 0108 	orr.w	r1, r1, #8
 8001894:	6419      	str	r1, [r3, #64]	; 0x40
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	9301      	str	r3, [sp, #4]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800189e:	2032      	movs	r0, #50	; 0x32
 80018a0:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018a4:	f7fe fef2 	bl	800068c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018a8:	2032      	movs	r0, #50	; 0x32
 80018aa:	f7fe ff23 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018ae:	b003      	add	sp, #12
 80018b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80018b4:	40000c00 	.word	0x40000c00

080018b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4604      	mov	r4, r0
 80018bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	2214      	movs	r2, #20
 80018c0:	2100      	movs	r1, #0
 80018c2:	a803      	add	r0, sp, #12
 80018c4:	f000 f8b8 	bl	8001a38 <memset>
  if(huart->Instance==USART2)
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_UART_MspInit+0x60>)
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d120      	bne.n	8001912 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80018d4:	2100      	movs	r1, #0
 80018d6:	9101      	str	r1, [sp, #4]
 80018d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	4810      	ldr	r0, [pc, #64]	; (800191c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80018dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
 80018e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	9102      	str	r1, [sp, #8]
 80018ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001900:	230c      	movs	r3, #12
 8001902:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190a:	2307      	movs	r3, #7
 800190c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f7fe ff15 	bl	800073c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001912:	b008      	add	sp, #32
 8001914:	bd10      	pop	{r4, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40020000 	.word	0x40020000

08001920 <NMI_Handler>:
 8001920:	4770      	bx	lr

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler>

0800192a <SVC_Handler>:
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f7fe be74 	b.w	800061c <HAL_IncTick>

08001934 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001934:	4801      	ldr	r0, [pc, #4]	; (800193c <TIM5_IRQHandler+0x8>)
 8001936:	f7ff ba82 	b.w	8000e3e <HAL_TIM_IRQHandler>
 800193a:	bf00      	nop
 800193c:	200000ac 	.word	0x200000ac

08001940 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001940:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <_sbrk+0x2c>)
 8001944:	6819      	ldr	r1, [r3, #0]
{
 8001946:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001948:	b909      	cbnz	r1, 800194e <_sbrk+0xe>
		heap_end = &end;
 800194a:	4909      	ldr	r1, [pc, #36]	; (8001970 <_sbrk+0x30>)
 800194c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800194e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001950:	4669      	mov	r1, sp
 8001952:	4402      	add	r2, r0
 8001954:	428a      	cmp	r2, r1
 8001956:	d906      	bls.n	8001966 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001958:	f000 f844 	bl	80019e4 <__errno>
 800195c:	230c      	movs	r3, #12
 800195e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001966:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001968:	bd08      	pop	{r3, pc}
 800196a:	bf00      	nop
 800196c:	20000098 	.word	0x20000098
 8001970:	20000138 	.word	0x20000138

08001974 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SystemInit+0x18>)
 8001976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800197a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800197e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001994:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001996:	e003      	b.n	80019a0 <LoopCopyDataInit>

08001998 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800199a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800199c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199e:	3104      	adds	r1, #4

080019a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a8:	d3f6      	bcc.n	8001998 <CopyDataInit>
  ldr  r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019ac:	e002      	b.n	80019b4 <LoopFillZerobss>

080019ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019b0:	f842 3b04 	str.w	r3, [r2], #4

080019b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b8:	d3f9      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ba:	f7ff ffdb 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f000 f817 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7ff fe31 	bl	8001628 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80019cc:	08002334 	.word	0x08002334
  ldr  r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019dc:	20000138 	.word	0x20000138

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <__errno>:
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <__errno+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	4e0d      	ldr	r6, [pc, #52]	; (8001a28 <__libc_init_array+0x38>)
 80019f4:	4c0d      	ldr	r4, [pc, #52]	; (8001a2c <__libc_init_array+0x3c>)
 80019f6:	1ba4      	subs	r4, r4, r6
 80019f8:	10a4      	asrs	r4, r4, #2
 80019fa:	2500      	movs	r5, #0
 80019fc:	42a5      	cmp	r5, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	4e0b      	ldr	r6, [pc, #44]	; (8001a30 <__libc_init_array+0x40>)
 8001a02:	4c0c      	ldr	r4, [pc, #48]	; (8001a34 <__libc_init_array+0x44>)
 8001a04:	f000 fc46 	bl	8002294 <_init>
 8001a08:	1ba4      	subs	r4, r4, r6
 8001a0a:	10a4      	asrs	r4, r4, #2
 8001a0c:	2500      	movs	r5, #0
 8001a0e:	42a5      	cmp	r5, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a18:	4798      	blx	r3
 8001a1a:	3501      	adds	r5, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a22:	4798      	blx	r3
 8001a24:	3501      	adds	r5, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	0800232c 	.word	0x0800232c
 8001a2c:	0800232c 	.word	0x0800232c
 8001a30:	0800232c 	.word	0x0800232c
 8001a34:	08002330 	.word	0x08002330

08001a38 <memset>:
 8001a38:	4402      	add	r2, r0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <memset+0xa>
 8001a40:	4770      	bx	lr
 8001a42:	f803 1b01 	strb.w	r1, [r3], #1
 8001a46:	e7f9      	b.n	8001a3c <memset+0x4>

08001a48 <siprintf>:
 8001a48:	b40e      	push	{r1, r2, r3}
 8001a4a:	b500      	push	{lr}
 8001a4c:	b09c      	sub	sp, #112	; 0x70
 8001a4e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a52:	ab1d      	add	r3, sp, #116	; 0x74
 8001a54:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001a58:	9002      	str	r0, [sp, #8]
 8001a5a:	9006      	str	r0, [sp, #24]
 8001a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <siprintf+0x44>)
 8001a62:	9104      	str	r1, [sp, #16]
 8001a64:	9107      	str	r1, [sp, #28]
 8001a66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a6e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001a72:	6800      	ldr	r0, [r0, #0]
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	a902      	add	r1, sp, #8
 8001a78:	f000 f86e 	bl	8001b58 <_svfiprintf_r>
 8001a7c:	9b02      	ldr	r3, [sp, #8]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	b01c      	add	sp, #112	; 0x70
 8001a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a88:	b003      	add	sp, #12
 8001a8a:	4770      	bx	lr
 8001a8c:	2000000c 	.word	0x2000000c

08001a90 <strcpy>:
 8001a90:	4603      	mov	r3, r0
 8001a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a96:	f803 2b01 	strb.w	r2, [r3], #1
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d1f9      	bne.n	8001a92 <strcpy+0x2>
 8001a9e:	4770      	bx	lr

08001aa0 <__ssputs_r>:
 8001aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa4:	688e      	ldr	r6, [r1, #8]
 8001aa6:	429e      	cmp	r6, r3
 8001aa8:	4682      	mov	sl, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4691      	mov	r9, r2
 8001aae:	4698      	mov	r8, r3
 8001ab0:	d835      	bhi.n	8001b1e <__ssputs_r+0x7e>
 8001ab2:	898a      	ldrh	r2, [r1, #12]
 8001ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ab8:	d031      	beq.n	8001b1e <__ssputs_r+0x7e>
 8001aba:	6825      	ldr	r5, [r4, #0]
 8001abc:	6909      	ldr	r1, [r1, #16]
 8001abe:	1a6f      	subs	r7, r5, r1
 8001ac0:	6965      	ldr	r5, [r4, #20]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ac8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001acc:	f108 0301 	add.w	r3, r8, #1
 8001ad0:	443b      	add	r3, r7
 8001ad2:	429d      	cmp	r5, r3
 8001ad4:	bf38      	it	cc
 8001ad6:	461d      	movcc	r5, r3
 8001ad8:	0553      	lsls	r3, r2, #21
 8001ada:	d531      	bpl.n	8001b40 <__ssputs_r+0xa0>
 8001adc:	4629      	mov	r1, r5
 8001ade:	f000 fb39 	bl	8002154 <_malloc_r>
 8001ae2:	4606      	mov	r6, r0
 8001ae4:	b950      	cbnz	r0, 8001afc <__ssputs_r+0x5c>
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	f8ca 3000 	str.w	r3, [sl]
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af2:	81a3      	strh	r3, [r4, #12]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001afc:	463a      	mov	r2, r7
 8001afe:	6921      	ldr	r1, [r4, #16]
 8001b00:	f000 fab4 	bl	800206c <memcpy>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0e:	81a3      	strh	r3, [r4, #12]
 8001b10:	6126      	str	r6, [r4, #16]
 8001b12:	6165      	str	r5, [r4, #20]
 8001b14:	443e      	add	r6, r7
 8001b16:	1bed      	subs	r5, r5, r7
 8001b18:	6026      	str	r6, [r4, #0]
 8001b1a:	60a5      	str	r5, [r4, #8]
 8001b1c:	4646      	mov	r6, r8
 8001b1e:	4546      	cmp	r6, r8
 8001b20:	bf28      	it	cs
 8001b22:	4646      	movcs	r6, r8
 8001b24:	4632      	mov	r2, r6
 8001b26:	4649      	mov	r1, r9
 8001b28:	6820      	ldr	r0, [r4, #0]
 8001b2a:	f000 faaa 	bl	8002082 <memmove>
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	1b9b      	subs	r3, r3, r6
 8001b32:	60a3      	str	r3, [r4, #8]
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	441e      	add	r6, r3
 8001b38:	6026      	str	r6, [r4, #0]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b40:	462a      	mov	r2, r5
 8001b42:	f000 fb65 	bl	8002210 <_realloc_r>
 8001b46:	4606      	mov	r6, r0
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1e1      	bne.n	8001b10 <__ssputs_r+0x70>
 8001b4c:	6921      	ldr	r1, [r4, #16]
 8001b4e:	4650      	mov	r0, sl
 8001b50:	f000 fab2 	bl	80020b8 <_free_r>
 8001b54:	e7c7      	b.n	8001ae6 <__ssputs_r+0x46>
	...

08001b58 <_svfiprintf_r>:
 8001b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b5c:	b09d      	sub	sp, #116	; 0x74
 8001b5e:	4680      	mov	r8, r0
 8001b60:	9303      	str	r3, [sp, #12]
 8001b62:	898b      	ldrh	r3, [r1, #12]
 8001b64:	061c      	lsls	r4, r3, #24
 8001b66:	460d      	mov	r5, r1
 8001b68:	4616      	mov	r6, r2
 8001b6a:	d50f      	bpl.n	8001b8c <_svfiprintf_r+0x34>
 8001b6c:	690b      	ldr	r3, [r1, #16]
 8001b6e:	b96b      	cbnz	r3, 8001b8c <_svfiprintf_r+0x34>
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	f000 faef 	bl	8002154 <_malloc_r>
 8001b76:	6028      	str	r0, [r5, #0]
 8001b78:	6128      	str	r0, [r5, #16]
 8001b7a:	b928      	cbnz	r0, 8001b88 <_svfiprintf_r+0x30>
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	f8c8 3000 	str.w	r3, [r8]
 8001b82:	f04f 30ff 	mov.w	r0, #4294967295
 8001b86:	e0c5      	b.n	8001d14 <_svfiprintf_r+0x1bc>
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	616b      	str	r3, [r5, #20]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b90:	2320      	movs	r3, #32
 8001b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b96:	2330      	movs	r3, #48	; 0x30
 8001b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b9c:	f04f 0b01 	mov.w	fp, #1
 8001ba0:	4637      	mov	r7, r6
 8001ba2:	463c      	mov	r4, r7
 8001ba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d13c      	bne.n	8001c26 <_svfiprintf_r+0xce>
 8001bac:	ebb7 0a06 	subs.w	sl, r7, r6
 8001bb0:	d00b      	beq.n	8001bca <_svfiprintf_r+0x72>
 8001bb2:	4653      	mov	r3, sl
 8001bb4:	4632      	mov	r2, r6
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	4640      	mov	r0, r8
 8001bba:	f7ff ff71 	bl	8001aa0 <__ssputs_r>
 8001bbe:	3001      	adds	r0, #1
 8001bc0:	f000 80a3 	beq.w	8001d0a <_svfiprintf_r+0x1b2>
 8001bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bc6:	4453      	add	r3, sl
 8001bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8001bca:	783b      	ldrb	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 809c 	beq.w	8001d0a <_svfiprintf_r+0x1b2>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	9304      	str	r3, [sp, #16]
 8001bda:	9307      	str	r3, [sp, #28]
 8001bdc:	9205      	str	r2, [sp, #20]
 8001bde:	9306      	str	r3, [sp, #24]
 8001be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001be4:	931a      	str	r3, [sp, #104]	; 0x68
 8001be6:	2205      	movs	r2, #5
 8001be8:	7821      	ldrb	r1, [r4, #0]
 8001bea:	4850      	ldr	r0, [pc, #320]	; (8001d2c <_svfiprintf_r+0x1d4>)
 8001bec:	f7fe fb00 	bl	80001f0 <memchr>
 8001bf0:	1c67      	adds	r7, r4, #1
 8001bf2:	9b04      	ldr	r3, [sp, #16]
 8001bf4:	b9d8      	cbnz	r0, 8001c2e <_svfiprintf_r+0xd6>
 8001bf6:	06d9      	lsls	r1, r3, #27
 8001bf8:	bf44      	itt	mi
 8001bfa:	2220      	movmi	r2, #32
 8001bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c00:	071a      	lsls	r2, r3, #28
 8001c02:	bf44      	itt	mi
 8001c04:	222b      	movmi	r2, #43	; 0x2b
 8001c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c0a:	7822      	ldrb	r2, [r4, #0]
 8001c0c:	2a2a      	cmp	r2, #42	; 0x2a
 8001c0e:	d016      	beq.n	8001c3e <_svfiprintf_r+0xe6>
 8001c10:	9a07      	ldr	r2, [sp, #28]
 8001c12:	2100      	movs	r1, #0
 8001c14:	200a      	movs	r0, #10
 8001c16:	4627      	mov	r7, r4
 8001c18:	3401      	adds	r4, #1
 8001c1a:	783b      	ldrb	r3, [r7, #0]
 8001c1c:	3b30      	subs	r3, #48	; 0x30
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d951      	bls.n	8001cc6 <_svfiprintf_r+0x16e>
 8001c22:	b1c9      	cbz	r1, 8001c58 <_svfiprintf_r+0x100>
 8001c24:	e011      	b.n	8001c4a <_svfiprintf_r+0xf2>
 8001c26:	2b25      	cmp	r3, #37	; 0x25
 8001c28:	d0c0      	beq.n	8001bac <_svfiprintf_r+0x54>
 8001c2a:	4627      	mov	r7, r4
 8001c2c:	e7b9      	b.n	8001ba2 <_svfiprintf_r+0x4a>
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <_svfiprintf_r+0x1d4>)
 8001c30:	1a80      	subs	r0, r0, r2
 8001c32:	fa0b f000 	lsl.w	r0, fp, r0
 8001c36:	4318      	orrs	r0, r3
 8001c38:	9004      	str	r0, [sp, #16]
 8001c3a:	463c      	mov	r4, r7
 8001c3c:	e7d3      	b.n	8001be6 <_svfiprintf_r+0x8e>
 8001c3e:	9a03      	ldr	r2, [sp, #12]
 8001c40:	1d11      	adds	r1, r2, #4
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	9103      	str	r1, [sp, #12]
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	db01      	blt.n	8001c4e <_svfiprintf_r+0xf6>
 8001c4a:	9207      	str	r2, [sp, #28]
 8001c4c:	e004      	b.n	8001c58 <_svfiprintf_r+0x100>
 8001c4e:	4252      	negs	r2, r2
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	9207      	str	r2, [sp, #28]
 8001c56:	9304      	str	r3, [sp, #16]
 8001c58:	783b      	ldrb	r3, [r7, #0]
 8001c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001c5c:	d10e      	bne.n	8001c7c <_svfiprintf_r+0x124>
 8001c5e:	787b      	ldrb	r3, [r7, #1]
 8001c60:	2b2a      	cmp	r3, #42	; 0x2a
 8001c62:	f107 0101 	add.w	r1, r7, #1
 8001c66:	d132      	bne.n	8001cce <_svfiprintf_r+0x176>
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	1d1a      	adds	r2, r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	9203      	str	r2, [sp, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfb8      	it	lt
 8001c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c78:	3702      	adds	r7, #2
 8001c7a:	9305      	str	r3, [sp, #20]
 8001c7c:	4c2c      	ldr	r4, [pc, #176]	; (8001d30 <_svfiprintf_r+0x1d8>)
 8001c7e:	7839      	ldrb	r1, [r7, #0]
 8001c80:	2203      	movs	r2, #3
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7fe fab4 	bl	80001f0 <memchr>
 8001c88:	b138      	cbz	r0, 8001c9a <_svfiprintf_r+0x142>
 8001c8a:	2340      	movs	r3, #64	; 0x40
 8001c8c:	1b00      	subs	r0, r0, r4
 8001c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8001c92:	9b04      	ldr	r3, [sp, #16]
 8001c94:	4303      	orrs	r3, r0
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	3701      	adds	r7, #1
 8001c9a:	7839      	ldrb	r1, [r7, #0]
 8001c9c:	4825      	ldr	r0, [pc, #148]	; (8001d34 <_svfiprintf_r+0x1dc>)
 8001c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ca2:	2206      	movs	r2, #6
 8001ca4:	1c7e      	adds	r6, r7, #1
 8001ca6:	f7fe faa3 	bl	80001f0 <memchr>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d035      	beq.n	8001d1a <_svfiprintf_r+0x1c2>
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <_svfiprintf_r+0x1e0>)
 8001cb0:	b9fb      	cbnz	r3, 8001cf2 <_svfiprintf_r+0x19a>
 8001cb2:	9b03      	ldr	r3, [sp, #12]
 8001cb4:	3307      	adds	r3, #7
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	3308      	adds	r3, #8
 8001cbc:	9303      	str	r3, [sp, #12]
 8001cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cc0:	444b      	add	r3, r9
 8001cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8001cc4:	e76c      	b.n	8001ba0 <_svfiprintf_r+0x48>
 8001cc6:	fb00 3202 	mla	r2, r0, r2, r3
 8001cca:	2101      	movs	r1, #1
 8001ccc:	e7a3      	b.n	8001c16 <_svfiprintf_r+0xbe>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9305      	str	r3, [sp, #20]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	240a      	movs	r4, #10
 8001cd6:	460f      	mov	r7, r1
 8001cd8:	3101      	adds	r1, #1
 8001cda:	783a      	ldrb	r2, [r7, #0]
 8001cdc:	3a30      	subs	r2, #48	; 0x30
 8001cde:	2a09      	cmp	r2, #9
 8001ce0:	d903      	bls.n	8001cea <_svfiprintf_r+0x192>
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ca      	beq.n	8001c7c <_svfiprintf_r+0x124>
 8001ce6:	9005      	str	r0, [sp, #20]
 8001ce8:	e7c8      	b.n	8001c7c <_svfiprintf_r+0x124>
 8001cea:	fb04 2000 	mla	r0, r4, r0, r2
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e7f1      	b.n	8001cd6 <_svfiprintf_r+0x17e>
 8001cf2:	ab03      	add	r3, sp, #12
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_svfiprintf_r+0x1e4>)
 8001cfa:	a904      	add	r1, sp, #16
 8001cfc:	4640      	mov	r0, r8
 8001cfe:	f3af 8000 	nop.w
 8001d02:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d06:	4681      	mov	r9, r0
 8001d08:	d1d9      	bne.n	8001cbe <_svfiprintf_r+0x166>
 8001d0a:	89ab      	ldrh	r3, [r5, #12]
 8001d0c:	065b      	lsls	r3, r3, #25
 8001d0e:	f53f af38 	bmi.w	8001b82 <_svfiprintf_r+0x2a>
 8001d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d14:	b01d      	add	sp, #116	; 0x74
 8001d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d1a:	ab03      	add	r3, sp, #12
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	462a      	mov	r2, r5
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <_svfiprintf_r+0x1e4>)
 8001d22:	a904      	add	r1, sp, #16
 8001d24:	4640      	mov	r0, r8
 8001d26:	f000 f881 	bl	8001e2c <_printf_i>
 8001d2a:	e7ea      	b.n	8001d02 <_svfiprintf_r+0x1aa>
 8001d2c:	080022ef 	.word	0x080022ef
 8001d30:	080022f5 	.word	0x080022f5
 8001d34:	080022f9 	.word	0x080022f9
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	08001aa1 	.word	0x08001aa1

08001d40 <_printf_common>:
 8001d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d44:	4691      	mov	r9, r2
 8001d46:	461f      	mov	r7, r3
 8001d48:	688a      	ldr	r2, [r1, #8]
 8001d4a:	690b      	ldr	r3, [r1, #16]
 8001d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	bfb8      	it	lt
 8001d54:	4613      	movlt	r3, r2
 8001d56:	f8c9 3000 	str.w	r3, [r9]
 8001d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d5e:	4606      	mov	r6, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	b112      	cbz	r2, 8001d6a <_printf_common+0x2a>
 8001d64:	3301      	adds	r3, #1
 8001d66:	f8c9 3000 	str.w	r3, [r9]
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	0699      	lsls	r1, r3, #26
 8001d6e:	bf42      	ittt	mi
 8001d70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d74:	3302      	addmi	r3, #2
 8001d76:	f8c9 3000 	strmi.w	r3, [r9]
 8001d7a:	6825      	ldr	r5, [r4, #0]
 8001d7c:	f015 0506 	ands.w	r5, r5, #6
 8001d80:	d107      	bne.n	8001d92 <_printf_common+0x52>
 8001d82:	f104 0a19 	add.w	sl, r4, #25
 8001d86:	68e3      	ldr	r3, [r4, #12]
 8001d88:	f8d9 2000 	ldr.w	r2, [r9]
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	429d      	cmp	r5, r3
 8001d90:	db29      	blt.n	8001de6 <_printf_common+0xa6>
 8001d92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	3300      	adds	r3, #0
 8001d9a:	bf18      	it	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	0692      	lsls	r2, r2, #26
 8001da0:	d42e      	bmi.n	8001e00 <_printf_common+0xc0>
 8001da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001da6:	4639      	mov	r1, r7
 8001da8:	4630      	mov	r0, r6
 8001daa:	47c0      	blx	r8
 8001dac:	3001      	adds	r0, #1
 8001dae:	d021      	beq.n	8001df4 <_printf_common+0xb4>
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	68e5      	ldr	r5, [r4, #12]
 8001db4:	f8d9 2000 	ldr.w	r2, [r9]
 8001db8:	f003 0306 	and.w	r3, r3, #6
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	bf08      	it	eq
 8001dc0:	1aad      	subeq	r5, r5, r2
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	6922      	ldr	r2, [r4, #16]
 8001dc6:	bf0c      	ite	eq
 8001dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dcc:	2500      	movne	r5, #0
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	bfc4      	itt	gt
 8001dd2:	1a9b      	subgt	r3, r3, r2
 8001dd4:	18ed      	addgt	r5, r5, r3
 8001dd6:	f04f 0900 	mov.w	r9, #0
 8001dda:	341a      	adds	r4, #26
 8001ddc:	454d      	cmp	r5, r9
 8001dde:	d11b      	bne.n	8001e18 <_printf_common+0xd8>
 8001de0:	2000      	movs	r0, #0
 8001de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de6:	2301      	movs	r3, #1
 8001de8:	4652      	mov	r2, sl
 8001dea:	4639      	mov	r1, r7
 8001dec:	4630      	mov	r0, r6
 8001dee:	47c0      	blx	r8
 8001df0:	3001      	adds	r0, #1
 8001df2:	d103      	bne.n	8001dfc <_printf_common+0xbc>
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dfc:	3501      	adds	r5, #1
 8001dfe:	e7c2      	b.n	8001d86 <_printf_common+0x46>
 8001e00:	18e1      	adds	r1, r4, r3
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	2030      	movs	r0, #48	; 0x30
 8001e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e0a:	4422      	add	r2, r4
 8001e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e14:	3302      	adds	r3, #2
 8001e16:	e7c4      	b.n	8001da2 <_printf_common+0x62>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	4639      	mov	r1, r7
 8001e1e:	4630      	mov	r0, r6
 8001e20:	47c0      	blx	r8
 8001e22:	3001      	adds	r0, #1
 8001e24:	d0e6      	beq.n	8001df4 <_printf_common+0xb4>
 8001e26:	f109 0901 	add.w	r9, r9, #1
 8001e2a:	e7d7      	b.n	8001ddc <_printf_common+0x9c>

08001e2c <_printf_i>:
 8001e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e30:	4617      	mov	r7, r2
 8001e32:	7e0a      	ldrb	r2, [r1, #24]
 8001e34:	b085      	sub	sp, #20
 8001e36:	2a6e      	cmp	r2, #110	; 0x6e
 8001e38:	4698      	mov	r8, r3
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001e44:	f000 80bc 	beq.w	8001fc0 <_printf_i+0x194>
 8001e48:	d81a      	bhi.n	8001e80 <_printf_i+0x54>
 8001e4a:	2a63      	cmp	r2, #99	; 0x63
 8001e4c:	d02e      	beq.n	8001eac <_printf_i+0x80>
 8001e4e:	d80a      	bhi.n	8001e66 <_printf_i+0x3a>
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	f000 80c8 	beq.w	8001fe6 <_printf_i+0x1ba>
 8001e56:	2a58      	cmp	r2, #88	; 0x58
 8001e58:	f000 808a 	beq.w	8001f70 <_printf_i+0x144>
 8001e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001e64:	e02a      	b.n	8001ebc <_printf_i+0x90>
 8001e66:	2a64      	cmp	r2, #100	; 0x64
 8001e68:	d001      	beq.n	8001e6e <_printf_i+0x42>
 8001e6a:	2a69      	cmp	r2, #105	; 0x69
 8001e6c:	d1f6      	bne.n	8001e5c <_printf_i+0x30>
 8001e6e:	6821      	ldr	r1, [r4, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e76:	d023      	beq.n	8001ec0 <_printf_i+0x94>
 8001e78:	1d11      	adds	r1, r2, #4
 8001e7a:	6019      	str	r1, [r3, #0]
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	e027      	b.n	8001ed0 <_printf_i+0xa4>
 8001e80:	2a73      	cmp	r2, #115	; 0x73
 8001e82:	f000 80b4 	beq.w	8001fee <_printf_i+0x1c2>
 8001e86:	d808      	bhi.n	8001e9a <_printf_i+0x6e>
 8001e88:	2a6f      	cmp	r2, #111	; 0x6f
 8001e8a:	d02a      	beq.n	8001ee2 <_printf_i+0xb6>
 8001e8c:	2a70      	cmp	r2, #112	; 0x70
 8001e8e:	d1e5      	bne.n	8001e5c <_printf_i+0x30>
 8001e90:	680a      	ldr	r2, [r1, #0]
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	600a      	str	r2, [r1, #0]
 8001e98:	e003      	b.n	8001ea2 <_printf_i+0x76>
 8001e9a:	2a75      	cmp	r2, #117	; 0x75
 8001e9c:	d021      	beq.n	8001ee2 <_printf_i+0xb6>
 8001e9e:	2a78      	cmp	r2, #120	; 0x78
 8001ea0:	d1dc      	bne.n	8001e5c <_printf_i+0x30>
 8001ea2:	2278      	movs	r2, #120	; 0x78
 8001ea4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001ea8:	496e      	ldr	r1, [pc, #440]	; (8002064 <_printf_i+0x238>)
 8001eaa:	e064      	b.n	8001f76 <_printf_i+0x14a>
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001eb2:	1d11      	adds	r1, r2, #4
 8001eb4:	6019      	str	r1, [r3, #0]
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0a3      	b.n	8002008 <_printf_i+0x1dc>
 8001ec0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ec4:	f102 0104 	add.w	r1, r2, #4
 8001ec8:	6019      	str	r1, [r3, #0]
 8001eca:	d0d7      	beq.n	8001e7c <_printf_i+0x50>
 8001ecc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da03      	bge.n	8001edc <_printf_i+0xb0>
 8001ed4:	222d      	movs	r2, #45	; 0x2d
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001edc:	4962      	ldr	r1, [pc, #392]	; (8002068 <_printf_i+0x23c>)
 8001ede:	220a      	movs	r2, #10
 8001ee0:	e017      	b.n	8001f12 <_printf_i+0xe6>
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001eea:	d003      	beq.n	8001ef4 <_printf_i+0xc8>
 8001eec:	1d08      	adds	r0, r1, #4
 8001eee:	6018      	str	r0, [r3, #0]
 8001ef0:	680b      	ldr	r3, [r1, #0]
 8001ef2:	e006      	b.n	8001f02 <_printf_i+0xd6>
 8001ef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ef8:	f101 0004 	add.w	r0, r1, #4
 8001efc:	6018      	str	r0, [r3, #0]
 8001efe:	d0f7      	beq.n	8001ef0 <_printf_i+0xc4>
 8001f00:	880b      	ldrh	r3, [r1, #0]
 8001f02:	4959      	ldr	r1, [pc, #356]	; (8002068 <_printf_i+0x23c>)
 8001f04:	2a6f      	cmp	r2, #111	; 0x6f
 8001f06:	bf14      	ite	ne
 8001f08:	220a      	movne	r2, #10
 8001f0a:	2208      	moveq	r2, #8
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f12:	6865      	ldr	r5, [r4, #4]
 8001f14:	60a5      	str	r5, [r4, #8]
 8001f16:	2d00      	cmp	r5, #0
 8001f18:	f2c0 809c 	blt.w	8002054 <_printf_i+0x228>
 8001f1c:	6820      	ldr	r0, [r4, #0]
 8001f1e:	f020 0004 	bic.w	r0, r0, #4
 8001f22:	6020      	str	r0, [r4, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d13f      	bne.n	8001fa8 <_printf_i+0x17c>
 8001f28:	2d00      	cmp	r5, #0
 8001f2a:	f040 8095 	bne.w	8002058 <_printf_i+0x22c>
 8001f2e:	4675      	mov	r5, lr
 8001f30:	2a08      	cmp	r2, #8
 8001f32:	d10b      	bne.n	8001f4c <_printf_i+0x120>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	07da      	lsls	r2, r3, #31
 8001f38:	d508      	bpl.n	8001f4c <_printf_i+0x120>
 8001f3a:	6923      	ldr	r3, [r4, #16]
 8001f3c:	6862      	ldr	r2, [r4, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	bfde      	ittt	le
 8001f42:	2330      	movle	r3, #48	; 0x30
 8001f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f4c:	ebae 0305 	sub.w	r3, lr, r5
 8001f50:	6123      	str	r3, [r4, #16]
 8001f52:	f8cd 8000 	str.w	r8, [sp]
 8001f56:	463b      	mov	r3, r7
 8001f58:	aa03      	add	r2, sp, #12
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f7ff feef 	bl	8001d40 <_printf_common>
 8001f62:	3001      	adds	r0, #1
 8001f64:	d155      	bne.n	8002012 <_printf_i+0x1e6>
 8001f66:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6a:	b005      	add	sp, #20
 8001f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f70:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001f74:	493c      	ldr	r1, [pc, #240]	; (8002068 <_printf_i+0x23c>)
 8001f76:	6822      	ldr	r2, [r4, #0]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f7e:	f100 0504 	add.w	r5, r0, #4
 8001f82:	601d      	str	r5, [r3, #0]
 8001f84:	d001      	beq.n	8001f8a <_printf_i+0x15e>
 8001f86:	6803      	ldr	r3, [r0, #0]
 8001f88:	e002      	b.n	8001f90 <_printf_i+0x164>
 8001f8a:	0655      	lsls	r5, r2, #25
 8001f8c:	d5fb      	bpl.n	8001f86 <_printf_i+0x15a>
 8001f8e:	8803      	ldrh	r3, [r0, #0]
 8001f90:	07d0      	lsls	r0, r2, #31
 8001f92:	bf44      	itt	mi
 8001f94:	f042 0220 	orrmi.w	r2, r2, #32
 8001f98:	6022      	strmi	r2, [r4, #0]
 8001f9a:	b91b      	cbnz	r3, 8001fa4 <_printf_i+0x178>
 8001f9c:	6822      	ldr	r2, [r4, #0]
 8001f9e:	f022 0220 	bic.w	r2, r2, #32
 8001fa2:	6022      	str	r2, [r4, #0]
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	e7b1      	b.n	8001f0c <_printf_i+0xe0>
 8001fa8:	4675      	mov	r5, lr
 8001faa:	fbb3 f0f2 	udiv	r0, r3, r2
 8001fae:	fb02 3310 	mls	r3, r2, r0, r3
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d1f5      	bne.n	8001faa <_printf_i+0x17e>
 8001fbe:	e7b7      	b.n	8001f30 <_printf_i+0x104>
 8001fc0:	6808      	ldr	r0, [r1, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6949      	ldr	r1, [r1, #20]
 8001fc6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fca:	d004      	beq.n	8001fd6 <_printf_i+0x1aa>
 8001fcc:	1d10      	adds	r0, r2, #4
 8001fce:	6018      	str	r0, [r3, #0]
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	6019      	str	r1, [r3, #0]
 8001fd4:	e007      	b.n	8001fe6 <_printf_i+0x1ba>
 8001fd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fda:	f102 0004 	add.w	r0, r2, #4
 8001fde:	6018      	str	r0, [r3, #0]
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	d0f6      	beq.n	8001fd2 <_printf_i+0x1a6>
 8001fe4:	8019      	strh	r1, [r3, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	6123      	str	r3, [r4, #16]
 8001fea:	4675      	mov	r5, lr
 8001fec:	e7b1      	b.n	8001f52 <_printf_i+0x126>
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	1d11      	adds	r1, r2, #4
 8001ff2:	6019      	str	r1, [r3, #0]
 8001ff4:	6815      	ldr	r5, [r2, #0]
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f7fe f8f8 	bl	80001f0 <memchr>
 8002000:	b108      	cbz	r0, 8002006 <_printf_i+0x1da>
 8002002:	1b40      	subs	r0, r0, r5
 8002004:	6060      	str	r0, [r4, #4]
 8002006:	6863      	ldr	r3, [r4, #4]
 8002008:	6123      	str	r3, [r4, #16]
 800200a:	2300      	movs	r3, #0
 800200c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002010:	e79f      	b.n	8001f52 <_printf_i+0x126>
 8002012:	6923      	ldr	r3, [r4, #16]
 8002014:	462a      	mov	r2, r5
 8002016:	4639      	mov	r1, r7
 8002018:	4630      	mov	r0, r6
 800201a:	47c0      	blx	r8
 800201c:	3001      	adds	r0, #1
 800201e:	d0a2      	beq.n	8001f66 <_printf_i+0x13a>
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	079b      	lsls	r3, r3, #30
 8002024:	d507      	bpl.n	8002036 <_printf_i+0x20a>
 8002026:	2500      	movs	r5, #0
 8002028:	f104 0919 	add.w	r9, r4, #25
 800202c:	68e3      	ldr	r3, [r4, #12]
 800202e:	9a03      	ldr	r2, [sp, #12]
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	429d      	cmp	r5, r3
 8002034:	db05      	blt.n	8002042 <_printf_i+0x216>
 8002036:	68e0      	ldr	r0, [r4, #12]
 8002038:	9b03      	ldr	r3, [sp, #12]
 800203a:	4298      	cmp	r0, r3
 800203c:	bfb8      	it	lt
 800203e:	4618      	movlt	r0, r3
 8002040:	e793      	b.n	8001f6a <_printf_i+0x13e>
 8002042:	2301      	movs	r3, #1
 8002044:	464a      	mov	r2, r9
 8002046:	4639      	mov	r1, r7
 8002048:	4630      	mov	r0, r6
 800204a:	47c0      	blx	r8
 800204c:	3001      	adds	r0, #1
 800204e:	d08a      	beq.n	8001f66 <_printf_i+0x13a>
 8002050:	3501      	adds	r5, #1
 8002052:	e7eb      	b.n	800202c <_printf_i+0x200>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1a7      	bne.n	8001fa8 <_printf_i+0x17c>
 8002058:	780b      	ldrb	r3, [r1, #0]
 800205a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800205e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002062:	e765      	b.n	8001f30 <_printf_i+0x104>
 8002064:	08002311 	.word	0x08002311
 8002068:	08002300 	.word	0x08002300

0800206c <memcpy>:
 800206c:	b510      	push	{r4, lr}
 800206e:	1e43      	subs	r3, r0, #1
 8002070:	440a      	add	r2, r1
 8002072:	4291      	cmp	r1, r2
 8002074:	d100      	bne.n	8002078 <memcpy+0xc>
 8002076:	bd10      	pop	{r4, pc}
 8002078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800207c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002080:	e7f7      	b.n	8002072 <memcpy+0x6>

08002082 <memmove>:
 8002082:	4288      	cmp	r0, r1
 8002084:	b510      	push	{r4, lr}
 8002086:	eb01 0302 	add.w	r3, r1, r2
 800208a:	d803      	bhi.n	8002094 <memmove+0x12>
 800208c:	1e42      	subs	r2, r0, #1
 800208e:	4299      	cmp	r1, r3
 8002090:	d10c      	bne.n	80020ac <memmove+0x2a>
 8002092:	bd10      	pop	{r4, pc}
 8002094:	4298      	cmp	r0, r3
 8002096:	d2f9      	bcs.n	800208c <memmove+0xa>
 8002098:	1881      	adds	r1, r0, r2
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	42d3      	cmn	r3, r2
 800209e:	d100      	bne.n	80020a2 <memmove+0x20>
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80020aa:	e7f7      	b.n	800209c <memmove+0x1a>
 80020ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80020b4:	e7eb      	b.n	800208e <memmove+0xc>
	...

080020b8 <_free_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	4605      	mov	r5, r0
 80020bc:	2900      	cmp	r1, #0
 80020be:	d045      	beq.n	800214c <_free_r+0x94>
 80020c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020c4:	1f0c      	subs	r4, r1, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bfb8      	it	lt
 80020ca:	18e4      	addlt	r4, r4, r3
 80020cc:	f000 f8d6 	bl	800227c <__malloc_lock>
 80020d0:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <_free_r+0x98>)
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	4610      	mov	r0, r2
 80020d6:	b933      	cbnz	r3, 80020e6 <_free_r+0x2e>
 80020d8:	6063      	str	r3, [r4, #4]
 80020da:	6014      	str	r4, [r2, #0]
 80020dc:	4628      	mov	r0, r5
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020e2:	f000 b8cc 	b.w	800227e <__malloc_unlock>
 80020e6:	42a3      	cmp	r3, r4
 80020e8:	d90c      	bls.n	8002104 <_free_r+0x4c>
 80020ea:	6821      	ldr	r1, [r4, #0]
 80020ec:	1862      	adds	r2, r4, r1
 80020ee:	4293      	cmp	r3, r2
 80020f0:	bf04      	itt	eq
 80020f2:	681a      	ldreq	r2, [r3, #0]
 80020f4:	685b      	ldreq	r3, [r3, #4]
 80020f6:	6063      	str	r3, [r4, #4]
 80020f8:	bf04      	itt	eq
 80020fa:	1852      	addeq	r2, r2, r1
 80020fc:	6022      	streq	r2, [r4, #0]
 80020fe:	6004      	str	r4, [r0, #0]
 8002100:	e7ec      	b.n	80020dc <_free_r+0x24>
 8002102:	4613      	mov	r3, r2
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	b10a      	cbz	r2, 800210c <_free_r+0x54>
 8002108:	42a2      	cmp	r2, r4
 800210a:	d9fa      	bls.n	8002102 <_free_r+0x4a>
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	1858      	adds	r0, r3, r1
 8002110:	42a0      	cmp	r0, r4
 8002112:	d10b      	bne.n	800212c <_free_r+0x74>
 8002114:	6820      	ldr	r0, [r4, #0]
 8002116:	4401      	add	r1, r0
 8002118:	1858      	adds	r0, r3, r1
 800211a:	4282      	cmp	r2, r0
 800211c:	6019      	str	r1, [r3, #0]
 800211e:	d1dd      	bne.n	80020dc <_free_r+0x24>
 8002120:	6810      	ldr	r0, [r2, #0]
 8002122:	6852      	ldr	r2, [r2, #4]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	4401      	add	r1, r0
 8002128:	6019      	str	r1, [r3, #0]
 800212a:	e7d7      	b.n	80020dc <_free_r+0x24>
 800212c:	d902      	bls.n	8002134 <_free_r+0x7c>
 800212e:	230c      	movs	r3, #12
 8002130:	602b      	str	r3, [r5, #0]
 8002132:	e7d3      	b.n	80020dc <_free_r+0x24>
 8002134:	6820      	ldr	r0, [r4, #0]
 8002136:	1821      	adds	r1, r4, r0
 8002138:	428a      	cmp	r2, r1
 800213a:	bf04      	itt	eq
 800213c:	6811      	ldreq	r1, [r2, #0]
 800213e:	6852      	ldreq	r2, [r2, #4]
 8002140:	6062      	str	r2, [r4, #4]
 8002142:	bf04      	itt	eq
 8002144:	1809      	addeq	r1, r1, r0
 8002146:	6021      	streq	r1, [r4, #0]
 8002148:	605c      	str	r4, [r3, #4]
 800214a:	e7c7      	b.n	80020dc <_free_r+0x24>
 800214c:	bd38      	pop	{r3, r4, r5, pc}
 800214e:	bf00      	nop
 8002150:	2000009c 	.word	0x2000009c

08002154 <_malloc_r>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	1ccd      	adds	r5, r1, #3
 8002158:	f025 0503 	bic.w	r5, r5, #3
 800215c:	3508      	adds	r5, #8
 800215e:	2d0c      	cmp	r5, #12
 8002160:	bf38      	it	cc
 8002162:	250c      	movcc	r5, #12
 8002164:	2d00      	cmp	r5, #0
 8002166:	4606      	mov	r6, r0
 8002168:	db01      	blt.n	800216e <_malloc_r+0x1a>
 800216a:	42a9      	cmp	r1, r5
 800216c:	d903      	bls.n	8002176 <_malloc_r+0x22>
 800216e:	230c      	movs	r3, #12
 8002170:	6033      	str	r3, [r6, #0]
 8002172:	2000      	movs	r0, #0
 8002174:	bd70      	pop	{r4, r5, r6, pc}
 8002176:	f000 f881 	bl	800227c <__malloc_lock>
 800217a:	4a23      	ldr	r2, [pc, #140]	; (8002208 <_malloc_r+0xb4>)
 800217c:	6814      	ldr	r4, [r2, #0]
 800217e:	4621      	mov	r1, r4
 8002180:	b991      	cbnz	r1, 80021a8 <_malloc_r+0x54>
 8002182:	4c22      	ldr	r4, [pc, #136]	; (800220c <_malloc_r+0xb8>)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	b91b      	cbnz	r3, 8002190 <_malloc_r+0x3c>
 8002188:	4630      	mov	r0, r6
 800218a:	f000 f867 	bl	800225c <_sbrk_r>
 800218e:	6020      	str	r0, [r4, #0]
 8002190:	4629      	mov	r1, r5
 8002192:	4630      	mov	r0, r6
 8002194:	f000 f862 	bl	800225c <_sbrk_r>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d126      	bne.n	80021ea <_malloc_r+0x96>
 800219c:	230c      	movs	r3, #12
 800219e:	6033      	str	r3, [r6, #0]
 80021a0:	4630      	mov	r0, r6
 80021a2:	f000 f86c 	bl	800227e <__malloc_unlock>
 80021a6:	e7e4      	b.n	8002172 <_malloc_r+0x1e>
 80021a8:	680b      	ldr	r3, [r1, #0]
 80021aa:	1b5b      	subs	r3, r3, r5
 80021ac:	d41a      	bmi.n	80021e4 <_malloc_r+0x90>
 80021ae:	2b0b      	cmp	r3, #11
 80021b0:	d90f      	bls.n	80021d2 <_malloc_r+0x7e>
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	50cd      	str	r5, [r1, r3]
 80021b6:	18cc      	adds	r4, r1, r3
 80021b8:	4630      	mov	r0, r6
 80021ba:	f000 f860 	bl	800227e <__malloc_unlock>
 80021be:	f104 000b 	add.w	r0, r4, #11
 80021c2:	1d23      	adds	r3, r4, #4
 80021c4:	f020 0007 	bic.w	r0, r0, #7
 80021c8:	1ac3      	subs	r3, r0, r3
 80021ca:	d01b      	beq.n	8002204 <_malloc_r+0xb0>
 80021cc:	425a      	negs	r2, r3
 80021ce:	50e2      	str	r2, [r4, r3]
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
 80021d2:	428c      	cmp	r4, r1
 80021d4:	bf0d      	iteet	eq
 80021d6:	6863      	ldreq	r3, [r4, #4]
 80021d8:	684b      	ldrne	r3, [r1, #4]
 80021da:	6063      	strne	r3, [r4, #4]
 80021dc:	6013      	streq	r3, [r2, #0]
 80021de:	bf18      	it	ne
 80021e0:	460c      	movne	r4, r1
 80021e2:	e7e9      	b.n	80021b8 <_malloc_r+0x64>
 80021e4:	460c      	mov	r4, r1
 80021e6:	6849      	ldr	r1, [r1, #4]
 80021e8:	e7ca      	b.n	8002180 <_malloc_r+0x2c>
 80021ea:	1cc4      	adds	r4, r0, #3
 80021ec:	f024 0403 	bic.w	r4, r4, #3
 80021f0:	42a0      	cmp	r0, r4
 80021f2:	d005      	beq.n	8002200 <_malloc_r+0xac>
 80021f4:	1a21      	subs	r1, r4, r0
 80021f6:	4630      	mov	r0, r6
 80021f8:	f000 f830 	bl	800225c <_sbrk_r>
 80021fc:	3001      	adds	r0, #1
 80021fe:	d0cd      	beq.n	800219c <_malloc_r+0x48>
 8002200:	6025      	str	r5, [r4, #0]
 8002202:	e7d9      	b.n	80021b8 <_malloc_r+0x64>
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	bf00      	nop
 8002208:	2000009c 	.word	0x2000009c
 800220c:	200000a0 	.word	0x200000a0

08002210 <_realloc_r>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	4607      	mov	r7, r0
 8002214:	4614      	mov	r4, r2
 8002216:	460e      	mov	r6, r1
 8002218:	b921      	cbnz	r1, 8002224 <_realloc_r+0x14>
 800221a:	4611      	mov	r1, r2
 800221c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002220:	f7ff bf98 	b.w	8002154 <_malloc_r>
 8002224:	b922      	cbnz	r2, 8002230 <_realloc_r+0x20>
 8002226:	f7ff ff47 	bl	80020b8 <_free_r>
 800222a:	4625      	mov	r5, r4
 800222c:	4628      	mov	r0, r5
 800222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002230:	f000 f826 	bl	8002280 <_malloc_usable_size_r>
 8002234:	4284      	cmp	r4, r0
 8002236:	d90f      	bls.n	8002258 <_realloc_r+0x48>
 8002238:	4621      	mov	r1, r4
 800223a:	4638      	mov	r0, r7
 800223c:	f7ff ff8a 	bl	8002154 <_malloc_r>
 8002240:	4605      	mov	r5, r0
 8002242:	2800      	cmp	r0, #0
 8002244:	d0f2      	beq.n	800222c <_realloc_r+0x1c>
 8002246:	4631      	mov	r1, r6
 8002248:	4622      	mov	r2, r4
 800224a:	f7ff ff0f 	bl	800206c <memcpy>
 800224e:	4631      	mov	r1, r6
 8002250:	4638      	mov	r0, r7
 8002252:	f7ff ff31 	bl	80020b8 <_free_r>
 8002256:	e7e9      	b.n	800222c <_realloc_r+0x1c>
 8002258:	4635      	mov	r5, r6
 800225a:	e7e7      	b.n	800222c <_realloc_r+0x1c>

0800225c <_sbrk_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4c06      	ldr	r4, [pc, #24]	; (8002278 <_sbrk_r+0x1c>)
 8002260:	2300      	movs	r3, #0
 8002262:	4605      	mov	r5, r0
 8002264:	4608      	mov	r0, r1
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	f7ff fb6a 	bl	8001940 <_sbrk>
 800226c:	1c43      	adds	r3, r0, #1
 800226e:	d102      	bne.n	8002276 <_sbrk_r+0x1a>
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	b103      	cbz	r3, 8002276 <_sbrk_r+0x1a>
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	bd38      	pop	{r3, r4, r5, pc}
 8002278:	20000134 	.word	0x20000134

0800227c <__malloc_lock>:
 800227c:	4770      	bx	lr

0800227e <__malloc_unlock>:
 800227e:	4770      	bx	lr

08002280 <_malloc_usable_size_r>:
 8002280:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002284:	2800      	cmp	r0, #0
 8002286:	f1a0 0004 	sub.w	r0, r0, #4
 800228a:	bfbc      	itt	lt
 800228c:	580b      	ldrlt	r3, [r1, r0]
 800228e:	18c0      	addlt	r0, r0, r3
 8002290:	4770      	bx	lr
	...

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
