
http_raw_disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002718  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae98  0800ae98  0001ae98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800aea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          00005f10  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20005f88  20005f88  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002ca6c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005e59  00000000  00000000  0004cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c465  00000000  00000000  0005296d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  0005edd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  0005fb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b691  00000000  00000000  00061000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000523a  00000000  00000000  0006c691  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000718cb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002c38  00000000  00000000  00071948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008760 	.word	0x08008760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008760 	.word	0x08008760

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_InitTick+0x3c>)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_InitTick+0x40>)
{
 80005b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	7818      	ldrb	r0, [r3, #0]
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c2:	6810      	ldr	r0, [r2, #0]
 80005c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c8:	f000 f89c 	bl	8000704 <HAL_SYSTICK_Config>
 80005cc:	4604      	mov	r4, r0
 80005ce:	b958      	cbnz	r0, 80005e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d0:	2d0f      	cmp	r5, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	4602      	mov	r2, r0
 80005d6:	4629      	mov	r1, r5
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f85e 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_InitTick+0x44>)
 80005e2:	4620      	mov	r0, r4
 80005e4:	601d      	str	r5, [r3, #0]
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000010 	.word	0x20000010
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_Init>:
{
 80005f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_Init+0x30>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000602:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000612:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f82f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc8 	bl	80005b0 <HAL_InitTick>
  HAL_MspInit();
 8000620:	f007 f89c 	bl	800775c <HAL_MspInit>
}
 8000624:	2000      	movs	r0, #0
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40023c00 	.word	0x40023c00

0800062c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x10>)
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_IncTick+0x14>)
 8000630:	6811      	ldr	r1, [r2, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000658 	.word	0x20000658
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_GetTick+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000658 	.word	0x20000658

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fff6 	bl	8000644 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000658:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	bf1c      	itt	ne
 800065c:	4b05      	ldrne	r3, [pc, #20]	; (8000674 <HAL_Delay+0x24>)
 800065e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000662:	bf18      	it	ne
 8000664:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000666:	f7ff ffed 	bl	8000644 <HAL_GetTick>
 800066a:	1b40      	subs	r0, r0, r5
 800066c:	4284      	cmp	r4, r0
 800066e:	d8fa      	bhi.n	8000666 <HAL_Delay+0x16>
  {
  }
}
 8000670:	bd38      	pop	{r3, r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfad      	iteet	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfb5      	itete	lt
 80006ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	3801      	subs	r0, #1
 8000706:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070a:	d20a      	bcs.n	8000722 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000710:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	21f0      	movs	r1, #240	; 0xf0
 8000714:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 8000730:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <ETH_Delay.constprop.4+0x20>)
 8000734:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	fbb3 f3f2 	udiv	r3, r3, r2
 800073e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8000740:	bf00      	nop
  } 
  while (Delay --);
 8000742:	9b01      	ldr	r3, [sp, #4]
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	9201      	str	r2, [sp, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f9      	bne.n	8000740 <ETH_Delay.constprop.4+0x10>
}
 800074c:	b002      	add	sp, #8
 800074e:	4770      	bx	lr
 8000750:	20000010 	.word	0x20000010

08000754 <ETH_FlushTransmitFIFO>:
{
 8000754:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8000756:	2300      	movs	r3, #0
 8000758:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800075a:	f241 0118 	movw	r1, #4120	; 0x1018
 800075e:	6803      	ldr	r3, [r0, #0]
 8000760:	585a      	ldr	r2, [r3, r1]
 8000762:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000766:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000768:	585b      	ldr	r3, [r3, r1]
 800076a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800076c:	f7ff ffe0 	bl	8000730 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000770:	9a01      	ldr	r2, [sp, #4]
 8000772:	6803      	ldr	r3, [r0, #0]
 8000774:	505a      	str	r2, [r3, r1]
}
 8000776:	b003      	add	sp, #12
 8000778:	f85d fb04 	ldr.w	pc, [sp], #4

0800077c <ETH_MACDMAConfig>:
{
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000780:	b129      	cbz	r1, 800078e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000786:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800078c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800078e:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000790:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 8000792:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8000794:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000796:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000798:	68a3      	ldr	r3, [r4, #8]
 800079a:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800079e:	4830      	ldr	r0, [pc, #192]	; (8000860 <ETH_MACDMAConfig+0xe4>)
 80007a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a4:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007a8:	bf0c      	ite	eq
 80007aa:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80007ae:	2100      	movne	r1, #0
 80007b0:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80007b2:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80007b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b6:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80007b8:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ba:	f7ff ff49 	bl	8000650 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80007be:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007c0:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80007c2:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c4:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007c6:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80007c8:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ca:	f7ff ff41 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007d2:	2500      	movs	r5, #0
 80007d4:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007d6:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007d8:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007da:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007de:	0412      	lsls	r2, r2, #16
 80007e0:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007e6:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e8:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80007ea:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ec:	f7ff ff30 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007f0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80007f4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007f6:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007f8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007fa:	f7ff ff29 	bl	8000650 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007fe:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000802:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000804:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000808:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 800080a:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800080c:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800080e:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000812:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000816:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000818:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800081a:	f7ff ff19 	bl	8000650 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800081e:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 8000822:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000828:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800082a:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 800082c:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800082e:	f7ff ff0f 	bl	8000650 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000832:	6822      	ldr	r2, [r4, #0]
 8000834:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000838:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800083a:	69a3      	ldr	r3, [r4, #24]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d107      	bne.n	8000850 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000840:	f241 011c 	movw	r1, #4124	; 0x101c
 8000844:	5853      	ldr	r3, [r2, r1]
 8000846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000850:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000854:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000856:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000858:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <ETH_MACDMAConfig+0xf4>)
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	ff20810f 	.word	0xff20810f
 8000864:	f8de3f23 	.word	0xf8de3f23
 8000868:	02c12080 	.word	0x02c12080
 800086c:	40028040 	.word	0x40028040
 8000870:	40028044 	.word	0x40028044

08000874 <HAL_ETH_DMATxDescListInit>:
{
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000876:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800087a:	2c01      	cmp	r4, #1
 800087c:	f04f 0402 	mov.w	r4, #2
 8000880:	d033      	beq.n	80008ea <HAL_ETH_DMATxDescListInit+0x76>
 8000882:	2501      	movs	r5, #1
 8000884:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000888:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800088c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800088e:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 8000892:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000894:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000898:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 800089c:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 80008a0:	429d      	cmp	r5, r3
 80008a2:	d10b      	bne.n	80008bc <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008a4:	6802      	ldr	r2, [r0, #0]
 80008a6:	f241 0310 	movw	r3, #4112	; 0x1010
 80008aa:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008ac:	2301      	movs	r3, #1
 80008ae:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008b2:	2300      	movs	r3, #0
 80008b4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008b8:	4618      	mov	r0, r3
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008bc:	fb0e 2605 	mla	r6, lr, r5, r2
 80008c0:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008c4:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008c6:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008ca:	b92e      	cbnz	r6, 80008d8 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008cc:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80008d0:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008d4:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80008d8:	4565      	cmp	r5, ip
 80008da:	bf2c      	ite	cs
 80008dc:	460e      	movcs	r6, r1
 80008de:	4626      	movcc	r6, r4
 80008e0:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 80008e4:	3501      	adds	r5, #1
 80008e6:	3420      	adds	r4, #32
 80008e8:	e7da      	b.n	80008a0 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80008ea:	4620      	mov	r0, r4
}
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ee <HAL_ETH_DMARxDescListInit>:
{
 80008ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80008f2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	f04f 0402 	mov.w	r4, #2
 80008fc:	d030      	beq.n	8000960 <HAL_ETH_DMARxDescListInit+0x72>
 80008fe:	2501      	movs	r5, #1
 8000900:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000904:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000908:	6281      	str	r1, [r0, #40]	; 0x28
 800090a:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 800090e:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000910:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000914:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000918:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 800091c:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 8000920:	429d      	cmp	r5, r3
 8000922:	d10c      	bne.n	800093e <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000924:	6802      	ldr	r2, [r0, #0]
 8000926:	f241 030c 	movw	r3, #4108	; 0x100c
 800092a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800092c:	2301      	movs	r3, #1
 800092e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000932:	2300      	movs	r3, #0
 8000934:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000938:	4618      	mov	r0, r3
 800093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800093e:	fb0e 2805 	mla	r8, lr, r5, r2
 8000942:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000946:	4565      	cmp	r5, ip
 8000948:	bf2c      	ite	cs
 800094a:	4688      	movcs	r8, r1
 800094c:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800094e:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000952:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000956:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 800095a:	3501      	adds	r5, #1
 800095c:	3420      	adds	r4, #32
 800095e:	e7df      	b.n	8000920 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000960:	4620      	mov	r0, r4
}
 8000962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000968 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000968:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800096c:	2b01      	cmp	r3, #1
{
 800096e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000970:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000974:	d068      	beq.n	8000a48 <HAL_ETH_TransmitFrame+0xe0>
 8000976:	2201      	movs	r2, #1
 8000978:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800097c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000980:	b929      	cbnz	r1, 800098e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000982:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000986:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800098a:	4610      	mov	r0, r2
 800098c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800098e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000990:	681c      	ldr	r4, [r3, #0]
 8000992:	2c00      	cmp	r4, #0
 8000994:	da06      	bge.n	80009a4 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000996:	2312      	movs	r3, #18
 8000998:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800099c:	2300      	movs	r3, #0
 800099e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80009a2:	e7f2      	b.n	800098a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80009a4:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80009a8:	42a1      	cmp	r1, r4
 80009aa:	d92e      	bls.n	8000a0a <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80009ac:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80009b0:	fb04 1412 	mls	r4, r4, r2, r1
 80009b4:	b33c      	cbz	r4, 8000a06 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80009b6:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80009b8:	4c24      	ldr	r4, [pc, #144]	; (8000a4c <HAL_ETH_TransmitFrame+0xe4>)
 80009ba:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80009be:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009c2:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009c6:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009c8:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80009cc:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80009ce:	681d      	ldr	r5, [r3, #0]
 80009d0:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80009d4:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80009d6:	b91c      	cbnz	r4, 80009e0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009d8:	681d      	ldr	r5, [r3, #0]
 80009da:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80009de:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80009e0:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009e2:	bf08      	it	eq
 80009e4:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009e6:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009e8:	bf04      	itt	eq
 80009ea:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80009ee:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f0:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009f2:	bf08      	it	eq
 80009f4:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80009f6:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80009fc:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009fe:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a00:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8000a02:	d1e4      	bne.n	80009ce <HAL_ETH_TransmitFrame+0x66>
 8000a04:	e00d      	b.n	8000a22 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 8000a06:	2a01      	cmp	r2, #1
 8000a08:	d1d6      	bne.n	80009b8 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000a10:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a12:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a14:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a1c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a1e:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a24:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	5899      	ldr	r1, [r3, r2]
 8000a2c:	0749      	lsls	r1, r1, #29
 8000a2e:	d505      	bpl.n	8000a3c <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a30:	2104      	movs	r1, #4
 8000a32:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000a34:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a38:	2100      	movs	r1, #0
 8000a3a:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a42:	2300      	movs	r3, #0
 8000a44:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a48:	4618      	mov	r0, r3
}
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	fffffa0c 	.word	0xfffffa0c

08000a50 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8000a50:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a54:	2b01      	cmp	r3, #1
{
 8000a56:	b530      	push	{r4, r5, lr}
 8000a58:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a5c:	d023      	beq.n	8000aa6 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8000a5e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a64:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000a66:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a68:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 8000a6a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a6e:	db27      	blt.n	8000ac0 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68d9      	ldr	r1, [r3, #12]
 8000a74:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a78:	d017      	beq.n	8000aaa <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8000a7a:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a7c:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8000a7e:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8000a80:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000a82:	bf08      	it	eq
 8000a84:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a86:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8000a88:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a8a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a8e:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8000a90:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a9e:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000aa0:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000aa2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000aaa:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000aac:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000aae:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8000ab0:	bf55      	itete	pl
 8000ab2:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000ab4:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8000ab6:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000ab8:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8000aba:	bf4c      	ite	mi
 8000abc:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8000abe:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8000ac0:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000ac2:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000ac4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ac8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000acc:	e7eb      	b.n	8000aa6 <HAL_ETH_GetReceivedFrame+0x56>

08000ace <HAL_ETH_ReadPHYRegister>:
{
 8000ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ad0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ad4:	2b82      	cmp	r3, #130	; 0x82
{
 8000ad6:	4605      	mov	r5, r0
 8000ad8:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ada:	d030      	beq.n	8000b3e <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000adc:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ade:	2382      	movs	r3, #130	; 0x82
 8000ae0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ae4:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ae6:	0189      	lsls	r1, r1, #6
 8000ae8:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000aec:	f003 011c 	and.w	r1, r3, #28
 8000af0:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000af2:	8a04      	ldrh	r4, [r0, #16]
 8000af4:	02e4      	lsls	r4, r4, #11
 8000af6:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000af8:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000afa:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000afe:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b00:	f7ff fda0 	bl	8000644 <HAL_GetTick>
 8000b04:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b06:	f014 0001 	ands.w	r0, r4, #1
 8000b0a:	d107      	bne.n	8000b1c <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b1c:	f7ff fd92 	bl	8000644 <HAL_GetTick>
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b26:	d307      	bcc.n	8000b38 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b34:	2003      	movs	r0, #3
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	691c      	ldr	r4, [r3, #16]
 8000b3c:	e7e3      	b.n	8000b06 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b3e:	2002      	movs	r0, #2
}
 8000b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b42 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b42:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b46:	2b42      	cmp	r3, #66	; 0x42
{
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b4c:	d02e      	beq.n	8000bac <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b4e:	2342      	movs	r3, #66	; 0x42
 8000b50:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b54:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b56:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b58:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b5a:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b5e:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b62:	f000 001c 	and.w	r0, r0, #28
 8000b66:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b68:	8a2c      	ldrh	r4, [r5, #16]
 8000b6a:	02e4      	lsls	r4, r4, #11
 8000b6c:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b6e:	4304      	orrs	r4, r0
 8000b70:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b72:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b74:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b76:	f7ff fd65 	bl	8000644 <HAL_GetTick>
 8000b7a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b7c:	f014 0001 	ands.w	r0, r4, #1
 8000b80:	d103      	bne.n	8000b8a <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000b8a:	f7ff fd5b 	bl	8000644 <HAL_GetTick>
 8000b8e:	1b80      	subs	r0, r0, r6
 8000b90:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b94:	d307      	bcc.n	8000ba6 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	691c      	ldr	r4, [r3, #16]
 8000baa:	e7e7      	b.n	8000b7c <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000bac:	2002      	movs	r0, #2
}
 8000bae:	bd70      	pop	{r4, r5, r6, pc}

08000bb0 <HAL_ETH_Init>:
{
 8000bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	f000 80de 	beq.w	8000d7a <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bbe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bc6:	b91b      	cbnz	r3, 8000bd0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000bc8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000bcc:	f006 fb22 	bl	8007214 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <HAL_ETH_Init+0x1d0>)
 8000bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000be8:	4b66      	ldr	r3, [pc, #408]	; (8000d84 <HAL_ETH_Init+0x1d4>)
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000bf0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	6a21      	ldr	r1, [r4, #32]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	f042 0201 	orr.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c08:	f7ff fd1c 	bl	8000644 <HAL_GetTick>
 8000c0c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	07d0      	lsls	r0, r2, #31
 8000c18:	d41d      	bmi.n	8000c56 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c1a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c1c:	f000 fc5c 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c20:	4b59      	ldr	r3, [pc, #356]	; (8000d88 <HAL_ETH_Init+0x1d8>)
 8000c22:	4a5a      	ldr	r2, [pc, #360]	; (8000d8c <HAL_ETH_Init+0x1dc>)
 8000c24:	4403      	add	r3, r0
 8000c26:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c28:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c2c:	d822      	bhi.n	8000c74 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c2e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c32:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c38:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f7ff ff80 	bl	8000b42 <HAL_ETH_WritePHYRegister>
 8000c42:	4605      	mov	r5, r0
 8000c44:	b368      	cbz	r0, 8000ca2 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000c46:	2101      	movs	r1, #1
 8000c48:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000c4a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c4c:	f7ff fd96 	bl	800077c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c50:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c54:	e00b      	b.n	8000c6e <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c56:	f7ff fcf5 	bl	8000644 <HAL_GetTick>
 8000c5a:	1b40      	subs	r0, r0, r5
 8000c5c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c60:	d9d5      	bls.n	8000c0e <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c62:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c64:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c66:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c6e:	4628      	mov	r0, r5
 8000c70:	b003      	add	sp, #12
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000c74:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_ETH_Init+0x1e0>)
 8000c76:	4a47      	ldr	r2, [pc, #284]	; (8000d94 <HAL_ETH_Init+0x1e4>)
 8000c78:	4403      	add	r3, r0
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d802      	bhi.n	8000c84 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c7e:	f045 050c 	orr.w	r5, r5, #12
 8000c82:	e7d6      	b.n	8000c32 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000c84:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_ETH_Init+0x1e8>)
 8000c86:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_ETH_Init+0x1ec>)
 8000c88:	4403      	add	r3, r0
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d9d1      	bls.n	8000c32 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <HAL_ETH_Init+0x1f0>)
 8000c90:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <HAL_ETH_Init+0x1f4>)
 8000c92:	4403      	add	r3, r0
 8000c94:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000c96:	bf94      	ite	ls
 8000c98:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000c9c:	f045 0510 	orrhi.w	r5, r5, #16
 8000ca0:	e7c7      	b.n	8000c32 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	f7ff fcd4 	bl	8000650 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ca8:	6863      	ldr	r3, [r4, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d053      	beq.n	8000d56 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000cae:	f7ff fcc9 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cb2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cb6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cb8:	466a      	mov	r2, sp
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff ff06 	bl	8000ace <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cc2:	f7ff fcbf 	bl	8000644 <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	42b8      	cmp	r0, r7
 8000cca:	d90b      	bls.n	8000ce4 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f7ff fd54 	bl	800077c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000ce0:	2503      	movs	r5, #3
 8000ce2:	e7c4      	b.n	8000c6e <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ce4:	9b00      	ldr	r3, [sp, #0]
 8000ce6:	0759      	lsls	r1, r3, #29
 8000ce8:	d5e6      	bpl.n	8000cb8 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff ff26 	bl	8000b42 <HAL_ETH_WritePHYRegister>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d1a5      	bne.n	8000c46 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000cfa:	f7ff fca3 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000cfe:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d02:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d04:	466a      	mov	r2, sp
 8000d06:	2101      	movs	r1, #1
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff fee0 	bl	8000ace <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d0e:	f7ff fc99 	bl	8000644 <HAL_GetTick>
 8000d12:	1b80      	subs	r0, r0, r6
 8000d14:	42b8      	cmp	r0, r7
 8000d16:	d8d9      	bhi.n	8000ccc <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d18:	9b00      	ldr	r3, [sp, #0]
 8000d1a:	069a      	lsls	r2, r3, #26
 8000d1c:	d5f2      	bpl.n	8000d04 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d1e:	466a      	mov	r2, sp
 8000d20:	211f      	movs	r1, #31
 8000d22:	4620      	mov	r0, r4
 8000d24:	f7ff fed3 	bl	8000ace <HAL_ETH_ReadPHYRegister>
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	d18c      	bne.n	8000c46 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d2c:	9b00      	ldr	r3, [sp, #0]
 8000d2e:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d32:	bf18      	it	ne
 8000d34:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d38:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d3a:	bf4c      	ite	mi
 8000d3c:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d3e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d42:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d44:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d46:	2100      	movs	r1, #0
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff fd17 	bl	800077c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d54:	e78b      	b.n	8000c6e <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d56:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d58:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d5a:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d5c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d60:	b292      	uxth	r2, r2
 8000d62:	4629      	mov	r1, r5
 8000d64:	4620      	mov	r0, r4
 8000d66:	f7ff feec 	bl	8000b42 <HAL_ETH_WritePHYRegister>
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	f47f af6b 	bne.w	8000c46 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d70:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d74:	f7ff fc6c 	bl	8000650 <HAL_Delay>
 8000d78:	e7e5      	b.n	8000d46 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000d7a:	2501      	movs	r5, #1
 8000d7c:	e777      	b.n	8000c6e <HAL_ETH_Init+0xbe>
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40013800 	.word	0x40013800
 8000d88:	feced300 	.word	0xfeced300
 8000d8c:	00e4e1bf 	.word	0x00e4e1bf
 8000d90:	fde9f140 	.word	0xfde9f140
 8000d94:	017d783f 	.word	0x017d783f
 8000d98:	fc6c7900 	.word	0xfc6c7900
 8000d9c:	026259ff 	.word	0x026259ff
 8000da0:	fa0a1f00 	.word	0xfa0a1f00
 8000da4:	02faf07f 	.word	0x02faf07f

08000da8 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000da8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000dac:	2b01      	cmp	r3, #1
{  
 8000dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000db0:	4605      	mov	r5, r0
 8000db2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000db6:	d031      	beq.n	8000e1c <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000db8:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dba:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000dbc:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000dc0:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dc2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000dc4:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dc6:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000dca:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dce:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000dd4:	f7ff fcac 	bl	8000730 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	9a01      	ldr	r2, [sp, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000dde:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f042 0204 	orr.w	r2, r2, #4
 8000de6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000dec:	f7ff fca0 	bl	8000730 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	9a00      	ldr	r2, [sp, #0]
 8000df4:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000df6:	4628      	mov	r0, r5
 8000df8:	f7ff fcac 	bl	8000754 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000dfc:	682a      	ldr	r2, [r5, #0]
 8000dfe:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e02:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e04:	58d1      	ldr	r1, [r2, r3]
 8000e06:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e0a:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e0c:	58d1      	ldr	r1, [r2, r3]
 8000e0e:	f041 0102 	orr.w	r1, r1, #2
 8000e12:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e14:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e18:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000fd8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4a68      	ldr	r2, [pc, #416]	; (8000fd0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000fdc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e34:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e36:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e38:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000e3a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	f040 80b0 	bne.w	8000fa4 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e44:	684c      	ldr	r4, [r1, #4]
 8000e46:	f024 0c10 	bic.w	ip, r4, #16
 8000e4a:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000e4e:	2e01      	cmp	r6, #1
 8000e50:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e54:	d812      	bhi.n	8000e7c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000e56:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e58:	2603      	movs	r6, #3
 8000e5a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e5e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e62:	68ce      	ldr	r6, [r1, #12]
 8000e64:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e68:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000e6a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e6c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e6e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e72:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e76:	409e      	lsls	r6, r3
 8000e78:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000e7a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000e7e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e80:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e84:	43f6      	mvns	r6, r6
 8000e86:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	688f      	ldr	r7, [r1, #8]
 8000e8c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e90:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000e98:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9a:	d116      	bne.n	8000eca <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ea0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000eb0:	f04f 0c0f 	mov.w	ip, #15
 8000eb4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000eb8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	690f      	ldr	r7, [r1, #16]
 8000ebe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ec2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000eca:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ecc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ece:	f004 0703 	and.w	r7, r4, #3
 8000ed2:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ed6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000eda:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000edc:	00e6      	lsls	r6, r4, #3
 8000ede:	d561      	bpl.n	8000fa4 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee0:	f04f 0b00 	mov.w	fp, #0
 8000ee4:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ee8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eec:	4e39      	ldr	r6, [pc, #228]	; (8000fd4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ef2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ef6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000efa:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000efe:	9703      	str	r7, [sp, #12]
 8000f00:	9f03      	ldr	r7, [sp, #12]
 8000f02:	f023 0703 	bic.w	r7, r3, #3
 8000f06:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f0a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f1a:	f04f 0e0f 	mov.w	lr, #15
 8000f1e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f28:	d043      	beq.n	8000fb2 <HAL_GPIO_Init+0x192>
 8000f2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f2e:	42b0      	cmp	r0, r6
 8000f30:	d041      	beq.n	8000fb6 <HAL_GPIO_Init+0x196>
 8000f32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f36:	42b0      	cmp	r0, r6
 8000f38:	d03f      	beq.n	8000fba <HAL_GPIO_Init+0x19a>
 8000f3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f3e:	42b0      	cmp	r0, r6
 8000f40:	d03d      	beq.n	8000fbe <HAL_GPIO_Init+0x19e>
 8000f42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f46:	42b0      	cmp	r0, r6
 8000f48:	d03b      	beq.n	8000fc2 <HAL_GPIO_Init+0x1a2>
 8000f4a:	4548      	cmp	r0, r9
 8000f4c:	d03b      	beq.n	8000fc6 <HAL_GPIO_Init+0x1a6>
 8000f4e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f52:	42b0      	cmp	r0, r6
 8000f54:	d039      	beq.n	8000fca <HAL_GPIO_Init+0x1aa>
 8000f56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f5a:	42b0      	cmp	r0, r6
 8000f5c:	bf14      	ite	ne
 8000f5e:	2608      	movne	r6, #8
 8000f60:	2607      	moveq	r6, #7
 8000f62:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f66:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000f6c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f74:	bf0c      	ite	eq
 8000f76:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000f78:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000f7a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f7c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f82:	bf0c      	ite	eq
 8000f84:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000f86:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000f88:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f90:	bf0c      	ite	eq
 8000f92:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000f94:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000f96:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	bf54      	ite	pl
 8000f9e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fa0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fa2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	2b10      	cmp	r3, #16
 8000fa8:	f47f af45 	bne.w	8000e36 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fac:	b005      	add	sp, #20
 8000fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	465e      	mov	r6, fp
 8000fb4:	e7d5      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fb6:	2601      	movs	r6, #1
 8000fb8:	e7d3      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fba:	2602      	movs	r6, #2
 8000fbc:	e7d1      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fbe:	2603      	movs	r6, #3
 8000fc0:	e7cf      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fc2:	2604      	movs	r6, #4
 8000fc4:	e7cd      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fc6:	2605      	movs	r6, #5
 8000fc8:	e7cb      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fca:	2606      	movs	r6, #6
 8000fcc:	e7c9      	b.n	8000f62 <HAL_GPIO_Init+0x142>
 8000fce:	bf00      	nop
 8000fd0:	40013c00 	.word	0x40013c00
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021400 	.word	0x40021400

08000fe0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	b10a      	cbz	r2, 8000fe6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe2:	6181      	str	r1, [r0, #24]
 8000fe4:	4770      	bx	lr
 8000fe6:	0409      	lsls	r1, r1, #16
 8000fe8:	e7fb      	b.n	8000fe2 <HAL_GPIO_WritePin+0x2>

08000fea <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fea:	6943      	ldr	r3, [r0, #20]
 8000fec:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ff0:	bf08      	it	eq
 8000ff2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff4:	6181      	str	r1, [r0, #24]
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	b908      	cbnz	r0, 8001004 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
 8001002:	e03f      	b.n	8001084 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001004:	6803      	ldr	r3, [r0, #0]
 8001006:	07dd      	lsls	r5, r3, #31
 8001008:	d410      	bmi.n	800102c <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	0798      	lsls	r0, r3, #30
 800100e:	d45a      	bmi.n	80010c6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	071a      	lsls	r2, r3, #28
 8001014:	f100 809c 	bmi.w	8001150 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	075b      	lsls	r3, r3, #29
 800101c:	f100 80ba 	bmi.w	8001194 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001020:	69a0      	ldr	r0, [r4, #24]
 8001022:	2800      	cmp	r0, #0
 8001024:	f040 811b 	bne.w	800125e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001028:	2000      	movs	r0, #0
 800102a:	e02b      	b.n	8001084 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102c:	4ba4      	ldr	r3, [pc, #656]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	f002 020c 	and.w	r2, r2, #12
 8001034:	2a04      	cmp	r2, #4
 8001036:	d007      	beq.n	8001048 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103e:	2a08      	cmp	r2, #8
 8001040:	d10a      	bne.n	8001058 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	0259      	lsls	r1, r3, #9
 8001046:	d507      	bpl.n	8001058 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	4b9d      	ldr	r3, [pc, #628]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	039a      	lsls	r2, r3, #14
 800104e:	d5dc      	bpl.n	800100a <HAL_RCC_OscConfig+0x12>
 8001050:	6863      	ldr	r3, [r4, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1d9      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
 8001056:	e7d3      	b.n	8001000 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	4d99      	ldr	r5, [pc, #612]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d113      	bne.n	800108a <HAL_RCC_OscConfig+0x92>
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800106a:	f7ff faeb 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4d94      	ldr	r5, [pc, #592]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001070:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	039b      	lsls	r3, r3, #14
 8001076:	d4c8      	bmi.n	800100a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fae4 	bl	8000644 <HAL_GetTick>
 800107c:	1b80      	subs	r0, r0, r6
 800107e:	2864      	cmp	r0, #100	; 0x64
 8001080:	d9f7      	bls.n	8001072 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
}
 8001084:	b002      	add	sp, #8
 8001086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108e:	d104      	bne.n	800109a <HAL_RCC_OscConfig+0xa2>
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001096:	602b      	str	r3, [r5, #0]
 8001098:	e7e3      	b.n	8001062 <HAL_RCC_OscConfig+0x6a>
 800109a:	682a      	ldr	r2, [r5, #0]
 800109c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010a0:	602a      	str	r2, [r5, #0]
 80010a2:	682a      	ldr	r2, [r5, #0]
 80010a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010a8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1dd      	bne.n	800106a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80010ae:	f7ff fac9 	bl	8000644 <HAL_GetTick>
 80010b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	039f      	lsls	r7, r3, #14
 80010b8:	d5a7      	bpl.n	800100a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ba:	f7ff fac3 	bl	8000644 <HAL_GetTick>
 80010be:	1b80      	subs	r0, r0, r6
 80010c0:	2864      	cmp	r0, #100	; 0x64
 80010c2:	d9f7      	bls.n	80010b4 <HAL_RCC_OscConfig+0xbc>
 80010c4:	e7dd      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c6:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	f012 0f0c 	tst.w	r2, #12
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010d6:	2a08      	cmp	r2, #8
 80010d8:	d111      	bne.n	80010fe <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	025e      	lsls	r6, r3, #9
 80010de:	d40e      	bmi.n	80010fe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e0:	4b77      	ldr	r3, [pc, #476]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	0795      	lsls	r5, r2, #30
 80010e6:	d502      	bpl.n	80010ee <HAL_RCC_OscConfig+0xf6>
 80010e8:	68e2      	ldr	r2, [r4, #12]
 80010ea:	2a01      	cmp	r2, #1
 80010ec:	d188      	bne.n	8001000 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	6921      	ldr	r1, [r4, #16]
 80010f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80010f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80010fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fc:	e788      	b.n	8001010 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010fe:	68e2      	ldr	r2, [r4, #12]
 8001100:	4b70      	ldr	r3, [pc, #448]	; (80012c4 <HAL_RCC_OscConfig+0x2cc>)
 8001102:	b1b2      	cbz	r2, 8001132 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001108:	f7ff fa9c 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4d6c      	ldr	r5, [pc, #432]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800110e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	0798      	lsls	r0, r3, #30
 8001114:	d507      	bpl.n	8001126 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	6922      	ldr	r2, [r4, #16]
 800111a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800111e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001122:	602b      	str	r3, [r5, #0]
 8001124:	e774      	b.n	8001010 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fa8d 	bl	8000644 <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	2802      	cmp	r0, #2
 800112e:	d9ef      	bls.n	8001110 <HAL_RCC_OscConfig+0x118>
 8001130:	e7a7      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001132:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001134:	f7ff fa86 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001138:	4d61      	ldr	r5, [pc, #388]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800113a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	0799      	lsls	r1, r3, #30
 8001140:	f57f af66 	bpl.w	8001010 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fa7e 	bl	8000644 <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f6      	bls.n	800113c <HAL_RCC_OscConfig+0x144>
 800114e:	e798      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001150:	6962      	ldr	r2, [r4, #20]
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_RCC_OscConfig+0x2d0>)
 8001154:	b17a      	cbz	r2, 8001176 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800115a:	f7ff fa73 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	4d58      	ldr	r5, [pc, #352]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001160:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001164:	079f      	lsls	r7, r3, #30
 8001166:	f53f af57 	bmi.w	8001018 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fa6b 	bl	8000644 <HAL_GetTick>
 800116e:	1b80      	subs	r0, r0, r6
 8001170:	2802      	cmp	r0, #2
 8001172:	d9f6      	bls.n	8001162 <HAL_RCC_OscConfig+0x16a>
 8001174:	e785      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001176:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001178:	f7ff fa64 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4d50      	ldr	r5, [pc, #320]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800117e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001180:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001182:	0798      	lsls	r0, r3, #30
 8001184:	f57f af48 	bpl.w	8001018 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fa5c 	bl	8000644 <HAL_GetTick>
 800118c:	1b80      	subs	r0, r0, r6
 800118e:	2802      	cmp	r0, #2
 8001190:	d9f6      	bls.n	8001180 <HAL_RCC_OscConfig+0x188>
 8001192:	e776      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 8001196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001198:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800119c:	d128      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	9201      	str	r2, [sp, #4]
 80011a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b4:	4d45      	ldr	r5, [pc, #276]	; (80012cc <HAL_RCC_OscConfig+0x2d4>)
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	05d9      	lsls	r1, r3, #23
 80011ba:	d51b      	bpl.n	80011f4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011bc:	68a3      	ldr	r3, [r4, #8]
 80011be:	4d40      	ldr	r5, [pc, #256]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d127      	bne.n	8001214 <HAL_RCC_OscConfig+0x21c>
 80011c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011cc:	f7ff fa3a 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	4d3b      	ldr	r5, [pc, #236]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80011d2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011da:	079b      	lsls	r3, r3, #30
 80011dc:	d539      	bpl.n	8001252 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80011de:	2e00      	cmp	r6, #0
 80011e0:	f43f af1e 	beq.w	8001020 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 80011e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	e717      	b.n	8001020 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80011f0:	2600      	movs	r6, #0
 80011f2:	e7df      	b.n	80011b4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011fc:	f7ff fa22 	bl	8000644 <HAL_GetTick>
 8001200:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	05da      	lsls	r2, r3, #23
 8001206:	d4d9      	bmi.n	80011bc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001208:	f7ff fa1c 	bl	8000644 <HAL_GetTick>
 800120c:	1bc0      	subs	r0, r0, r7
 800120e:	2802      	cmp	r0, #2
 8001210:	d9f7      	bls.n	8001202 <HAL_RCC_OscConfig+0x20a>
 8001212:	e736      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	2b05      	cmp	r3, #5
 8001216:	d104      	bne.n	8001222 <HAL_RCC_OscConfig+0x22a>
 8001218:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	672b      	str	r3, [r5, #112]	; 0x70
 8001220:	e7d0      	b.n	80011c4 <HAL_RCC_OscConfig+0x1cc>
 8001222:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	672a      	str	r2, [r5, #112]	; 0x70
 800122a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800122c:	f022 0204 	bic.w	r2, r2, #4
 8001230:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ca      	bne.n	80011cc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001236:	f7ff fa05 	bl	8000644 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800123e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001242:	0798      	lsls	r0, r3, #30
 8001244:	d5cb      	bpl.n	80011de <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff f9fd 	bl	8000644 <HAL_GetTick>
 800124a:	1bc0      	subs	r0, r0, r7
 800124c:	4540      	cmp	r0, r8
 800124e:	d9f7      	bls.n	8001240 <HAL_RCC_OscConfig+0x248>
 8001250:	e717      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff f9f7 	bl	8000644 <HAL_GetTick>
 8001256:	1bc0      	subs	r0, r0, r7
 8001258:	4540      	cmp	r0, r8
 800125a:	d9bd      	bls.n	80011d8 <HAL_RCC_OscConfig+0x1e0>
 800125c:	e711      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800125e:	4d18      	ldr	r5, [pc, #96]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
 8001260:	68ab      	ldr	r3, [r5, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b08      	cmp	r3, #8
 8001268:	d047      	beq.n	80012fa <HAL_RCC_OscConfig+0x302>
 800126a:	4e19      	ldr	r6, [pc, #100]	; (80012d0 <HAL_RCC_OscConfig+0x2d8>)
 800126c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001270:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001272:	d135      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001274:	f7ff f9e6 	bl	8000644 <HAL_GetTick>
 8001278:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	0199      	lsls	r1, r3, #6
 800127e:	d429      	bmi.n	80012d4 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001280:	6a22      	ldr	r2, [r4, #32]
 8001282:	69e3      	ldr	r3, [r4, #28]
 8001284:	4313      	orrs	r3, r2
 8001286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001288:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800128c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800128e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001292:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001294:	4c0a      	ldr	r4, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001296:	0852      	lsrs	r2, r2, #1
 8001298:	3a01      	subs	r2, #1
 800129a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800129e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012a0:	2301      	movs	r3, #1
 80012a2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012a4:	f7ff f9ce 	bl	8000644 <HAL_GetTick>
 80012a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	019a      	lsls	r2, r3, #6
 80012ae:	f53f aebb 	bmi.w	8001028 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff f9c7 	bl	8000644 <HAL_GetTick>
 80012b6:	1b40      	subs	r0, r0, r5
 80012b8:	2802      	cmp	r0, #2
 80012ba:	d9f6      	bls.n	80012aa <HAL_RCC_OscConfig+0x2b2>
 80012bc:	e6e1      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	42470000 	.word	0x42470000
 80012c8:	42470e80 	.word	0x42470e80
 80012cc:	40007000 	.word	0x40007000
 80012d0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff f9b6 	bl	8000644 <HAL_GetTick>
 80012d8:	1bc0      	subs	r0, r0, r7
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9cd      	bls.n	800127a <HAL_RCC_OscConfig+0x282>
 80012de:	e6d0      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80012e0:	f7ff f9b0 	bl	8000644 <HAL_GetTick>
 80012e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	f57f ae9d 	bpl.w	8001028 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff f9a9 	bl	8000644 <HAL_GetTick>
 80012f2:	1b00      	subs	r0, r0, r4
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d9f6      	bls.n	80012e6 <HAL_RCC_OscConfig+0x2ee>
 80012f8:	e6c3      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fa:	2801      	cmp	r0, #1
 80012fc:	f43f aec2 	beq.w	8001084 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001300:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	69e3      	ldr	r3, [r4, #28]
 8001304:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001308:	429a      	cmp	r2, r3
 800130a:	f47f ae79 	bne.w	8001000 <HAL_RCC_OscConfig+0x8>
 800130e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001310:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001314:	4293      	cmp	r3, r2
 8001316:	f47f ae73 	bne.w	8001000 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800131a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800131c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001320:	4003      	ands	r3, r0
 8001322:	4293      	cmp	r3, r2
 8001324:	f47f ae6c 	bne.w	8001000 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001328:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800132a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800132e:	4293      	cmp	r3, r2
 8001330:	f47f ae66 	bne.w	8001000 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001336:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 800133a:	1ac0      	subs	r0, r0, r3
 800133c:	bf18      	it	ne
 800133e:	2001      	movne	r0, #1
 8001340:	e6a0      	b.n	8001084 <HAL_RCC_OscConfig+0x8c>
 8001342:	bf00      	nop

08001344 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001344:	4913      	ldr	r1, [pc, #76]	; (8001394 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001346:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001348:	688b      	ldr	r3, [r1, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d003      	beq.n	800135a <HAL_RCC_GetSysClockFreq+0x16>
 8001352:	2b08      	cmp	r3, #8
 8001354:	d003      	beq.n	800135e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001356:	4810      	ldr	r0, [pc, #64]	; (8001398 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001358:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800135a:	4810      	ldr	r0, [pc, #64]	; (800139c <HAL_RCC_GetSysClockFreq+0x58>)
 800135c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001360:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001362:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001364:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001368:	bf14      	ite	ne
 800136a:	480c      	ldrne	r0, [pc, #48]	; (800139c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136c:	480a      	ldreq	r0, [pc, #40]	; (8001398 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001372:	bf18      	it	ne
 8001374:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001376:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137a:	fba1 0100 	umull	r0, r1, r1, r0
 800137e:	f7fe ff8f 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_RCC_GetSysClockFreq+0x50>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800138a:	3301      	adds	r3, #1
 800138c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800138e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001392:	bd08      	pop	{r3, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	00f42400 	.word	0x00f42400
 800139c:	007a1200 	.word	0x007a1200

080013a0 <HAL_RCC_ClockConfig>:
{
 80013a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013a6:	4604      	mov	r4, r0
 80013a8:	b910      	cbnz	r0, 80013b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_RCC_ClockConfig+0x124>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	f002 020f 	and.w	r2, r2, #15
 80013b8:	428a      	cmp	r2, r1
 80013ba:	d329      	bcc.n	8001410 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	6821      	ldr	r1, [r4, #0]
 80013be:	078f      	lsls	r7, r1, #30
 80013c0:	d42e      	bmi.n	8001420 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c2:	07c8      	lsls	r0, r1, #31
 80013c4:	d441      	bmi.n	800144a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_ClockConfig+0x124>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f002 020f 	and.w	r2, r2, #15
 80013ce:	4295      	cmp	r5, r2
 80013d0:	d367      	bcc.n	80014a2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	0751      	lsls	r1, r2, #29
 80013d6:	d46d      	bmi.n	80014b4 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	0713      	lsls	r3, r2, #28
 80013da:	d507      	bpl.n	80013ec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013dc:	4a3a      	ldr	r2, [pc, #232]	; (80014c8 <HAL_RCC_ClockConfig+0x128>)
 80013de:	6921      	ldr	r1, [r4, #16]
 80013e0:	6893      	ldr	r3, [r2, #8]
 80013e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ec:	f7ff ffaa 	bl	8001344 <HAL_RCC_GetSysClockFreq>
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <HAL_RCC_ClockConfig+0x128>)
 80013f2:	4a36      	ldr	r2, [pc, #216]	; (80014cc <HAL_RCC_ClockConfig+0x12c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	40d8      	lsrs	r0, r3
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_ClockConfig+0x130>)
 8001400:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_RCC_ClockConfig+0x134>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	f7ff f8d3 	bl	80005b0 <HAL_InitTick>
  return HAL_OK;
 800140a:	2000      	movs	r0, #0
 800140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001410:	b2ca      	uxtb	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	4299      	cmp	r1, r3
 800141c:	d1c5      	bne.n	80013aa <HAL_RCC_ClockConfig+0xa>
 800141e:	e7cd      	b.n	80013bc <HAL_RCC_ClockConfig+0x1c>
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001422:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001426:	bf1e      	ittt	ne
 8001428:	689a      	ldrne	r2, [r3, #8]
 800142a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800142e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001432:	bf42      	ittt	mi
 8001434:	689a      	ldrmi	r2, [r3, #8]
 8001436:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800143a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68a0      	ldr	r0, [r4, #8]
 8001440:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001444:	4302      	orrs	r2, r0
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e7bb      	b.n	80013c2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	6862      	ldr	r2, [r4, #4]
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_ClockConfig+0x128>)
 800144e:	2a01      	cmp	r2, #1
 8001450:	d11d      	bne.n	800148e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	d0a7      	beq.n	80013aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	4e1b      	ldr	r6, [pc, #108]	; (80014c8 <HAL_RCC_ClockConfig+0x128>)
 800145c:	68b3      	ldr	r3, [r6, #8]
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	4313      	orrs	r3, r2
 8001464:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001466:	f7ff f8ed 	bl	8000644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800146e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001470:	68b3      	ldr	r3, [r6, #8]
 8001472:	6862      	ldr	r2, [r4, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800147c:	d0a3      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff f8e1 	bl	8000644 <HAL_GetTick>
 8001482:	1bc0      	subs	r0, r0, r7
 8001484:	4540      	cmp	r0, r8
 8001486:	d9f3      	bls.n	8001470 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001488:	2003      	movs	r0, #3
}
 800148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	1e91      	subs	r1, r2, #2
 8001490:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001494:	d802      	bhi.n	800149c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001496:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800149a:	e7dd      	b.n	8001458 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	f013 0f02 	tst.w	r3, #2
 80014a0:	e7da      	b.n	8001458 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	b2ea      	uxtb	r2, r5
 80014a4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	429d      	cmp	r5, r3
 80014ae:	f47f af7c 	bne.w	80013aa <HAL_RCC_ClockConfig+0xa>
 80014b2:	e78e      	b.n	80013d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b4:	4904      	ldr	r1, [pc, #16]	; (80014c8 <HAL_RCC_ClockConfig+0x128>)
 80014b6:	68e0      	ldr	r0, [r4, #12]
 80014b8:	688b      	ldr	r3, [r1, #8]
 80014ba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014be:	4303      	orrs	r3, r0
 80014c0:	608b      	str	r3, [r1, #8]
 80014c2:	e789      	b.n	80013d8 <HAL_RCC_ClockConfig+0x38>
 80014c4:	40023c00 	.word	0x40023c00
 80014c8:	40023800 	.word	0x40023800
 80014cc:	0800ade6 	.word	0x0800ade6
 80014d0:	20000010 	.word	0x20000010
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014d8:	4b01      	ldr	r3, [pc, #4]	; (80014e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000010 	.word	0x20000010

080014e4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80014e8:	4605      	mov	r5, r0
 80014ea:	b1a8      	cbz	r0, 8001518 <fs_open+0x34>
 80014ec:	b1a1      	cbz	r1, 8001518 <fs_open+0x34>
 80014ee:	4c0c      	ldr	r4, [pc, #48]	; (8001520 <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 80014f0:	6861      	ldr	r1, [r4, #4]
 80014f2:	4630      	mov	r0, r6
 80014f4:	f7fe fe6c 	bl	80001d0 <strcmp>
 80014f8:	b940      	cbnz	r0, 800150c <fs_open+0x28>
      file->data = (const char *)f->data;
 80014fa:	68a3      	ldr	r3, [r4, #8]
 80014fc:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 80014fe:	68e3      	ldr	r3, [r4, #12]
 8001500:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 8001502:	60ab      	str	r3, [r5, #8]
      file->pextension = NULL;
 8001504:	60e8      	str	r0, [r5, #12]
      file->flags = f->flags;
 8001506:	7c23      	ldrb	r3, [r4, #16]
 8001508:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800150a:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800150c:	6824      	ldr	r4, [r4, #0]
 800150e:	2c00      	cmp	r4, #0
 8001510:	d1ee      	bne.n	80014f0 <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 8001512:	f06f 0005 	mvn.w	r0, #5
 8001516:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 8001518:	f06f 000f 	mvn.w	r0, #15
}
 800151c:	bd70      	pop	{r4, r5, r6, pc}
 800151e:	bf00      	nop
 8001520:	080094f8 	.word	0x080094f8

08001524 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8001524:	4770      	bx	lr

08001526 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8001526:	6842      	ldr	r2, [r0, #4]
 8001528:	6880      	ldr	r0, [r0, #8]
}
 800152a:	1a10      	subs	r0, r2, r0
 800152c:	4770      	bx	lr
	...

08001530 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8001530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001534:	4605      	mov	r5, r0
 8001536:	460f      	mov	r7, r1
 8001538:	4698      	mov	r8, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800153a:	4616      	mov	r6, r2
 800153c:	b932      	cbnz	r2, 800154c <http_write+0x1c>
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <http_write+0x70>)
 8001540:	4918      	ldr	r1, [pc, #96]	; (80015a4 <http_write+0x74>)
 8001542:	4819      	ldr	r0, [pc, #100]	; (80015a8 <http_write+0x78>)
 8001544:	f44f 7204 	mov.w	r2, #528	; 0x210
 8001548:	f006 f9f2 	bl	8007930 <iprintf>
  len = *length;
 800154c:	8830      	ldrh	r0, [r6, #0]
  if (len == 0) {
 800154e:	b328      	cbz	r0, 800159c <http_write+0x6c>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8001550:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8001552:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8001556:	0064      	lsls	r4, r4, #1
 8001558:	b2a4      	uxth	r4, r4
 800155a:	429c      	cmp	r4, r3
 800155c:	bf28      	it	cs
 800155e:	461c      	movcs	r4, r3
 8001560:	4284      	cmp	r4, r0
 8001562:	bf28      	it	cs
 8001564:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8001566:	4643      	mov	r3, r8
 8001568:	4622      	mov	r2, r4
 800156a:	4639      	mov	r1, r7
 800156c:	4628      	mov	r0, r5
 800156e:	f004 fda1 	bl	80060b4 <tcp_write>
    if (err == ERR_MEM) {
 8001572:	1c43      	adds	r3, r0, #1
 8001574:	d10d      	bne.n	8001592 <http_write+0x62>
      if ((tcp_sndbuf(pcb) == 0) ||
 8001576:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800157a:	b133      	cbz	r3, 800158a <http_write+0x5a>
 800157c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8001580:	2b07      	cmp	r3, #7
 8001582:	d802      	bhi.n	800158a <http_write+0x5a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 8001584:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8001586:	2c01      	cmp	r4, #1
 8001588:	d8ed      	bhi.n	8001566 <http_write+0x36>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	8033      	strh	r3, [r6, #0]
 800158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (err == ERR_OK) {
 8001592:	2800      	cmp	r0, #0
 8001594:	d1f9      	bne.n	800158a <http_write+0x5a>
    *length = len;
 8001596:	8034      	strh	r4, [r6, #0]
 8001598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 800159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a0:	08009632 	.word	0x08009632
 80015a4:	08009669 	.word	0x08009669
 80015a8:	08009678 	.word	0x08009678

080015ac <http_state_eof>:
{
 80015ac:	b510      	push	{r4, lr}
 80015ae:	4604      	mov	r4, r0
  if(hs->handle) {
 80015b0:	6940      	ldr	r0, [r0, #20]
 80015b2:	b118      	cbz	r0, 80015bc <http_state_eof+0x10>
    fs_close(hs->handle);
 80015b4:	f7ff ffb6 	bl	8001524 <fs_close>
    hs->handle = NULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80015bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80015be:	b118      	cbz	r0, 80015c8 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 80015c0:	f001 fef4 	bl	80033ac <mem_free>
    hs->ssi = NULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80015c8:	6a20      	ldr	r0, [r4, #32]
 80015ca:	b118      	cbz	r0, 80015d4 <http_state_eof+0x28>
    pbuf_free(hs->req);
 80015cc:	f002 fa5a 	bl	8003a84 <pbuf_free>
    hs->req = NULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	6223      	str	r3, [r4, #32]
 80015d4:	bd10      	pop	{r4, pc}
	...

080015d8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80015d8:	b538      	push	{r3, r4, r5, lr}
 80015da:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 80015dc:	490a      	ldr	r1, [pc, #40]	; (8001608 <http_get_404_file+0x30>)
 80015de:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 80015e0:	4604      	mov	r4, r0
 80015e2:	f7ff ff7f 	bl	80014e4 <fs_open>
  if (err != ERR_OK) {
 80015e6:	b168      	cbz	r0, 8001604 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80015e8:	4908      	ldr	r1, [pc, #32]	; (800160c <http_get_404_file+0x34>)
 80015ea:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff ff79 	bl	80014e4 <fs_open>
    if (err != ERR_OK) {
 80015f2:	b138      	cbz	r0, 8001604 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80015f4:	4906      	ldr	r1, [pc, #24]	; (8001610 <http_get_404_file+0x38>)
 80015f6:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff ff73 	bl	80014e4 <fs_open>
      if (err != ERR_OK) {
 80015fe:	b108      	cbz	r0, 8001604 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8001600:	2400      	movs	r4, #0
 8001602:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8001604:	4620      	mov	r0, r4
 8001606:	bd38      	pop	{r3, r4, r5, pc}
 8001608:	08009544 	.word	0x08009544
 800160c:	0800954e 	.word	0x0800954e
 8001610:	08009557 	.word	0x08009557

08001614 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8001618:	4615      	mov	r5, r2
 800161a:	bb2a      	cbnz	r2, 8001668 <http_accept+0x54>
 800161c:	b321      	cbz	r1, 8001668 <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800161e:	2101      	movs	r1, #1
 8001620:	4620      	mov	r0, r4
 8001622:	f002 fe85 	bl	8004330 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8001626:	2030      	movs	r0, #48	; 0x30
 8001628:	f001 ffe0 	bl	80035ec <mem_malloc>
  if (ret != NULL) {
 800162c:	4606      	mov	r6, r0
 800162e:	b1f0      	cbz	r0, 800166e <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 8001630:	2230      	movs	r2, #48	; 0x30
 8001632:	4629      	mov	r1, r5
 8001634:	f006 f974 	bl	8007920 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8001638:	4631      	mov	r1, r6
 800163a:	4620      	mov	r0, r4
  hs->pcb = pcb;
 800163c:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 800163e:	f002 fe79 	bl	8004334 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8001642:	490c      	ldr	r1, [pc, #48]	; (8001674 <http_accept+0x60>)
 8001644:	4620      	mov	r0, r4
 8001646:	f002 fe79 	bl	800433c <tcp_recv>
  tcp_err(pcb, http_err);
 800164a:	490b      	ldr	r1, [pc, #44]	; (8001678 <http_accept+0x64>)
 800164c:	4620      	mov	r0, r4
 800164e:	f002 fea1 	bl	8004394 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8001652:	490a      	ldr	r1, [pc, #40]	; (800167c <http_accept+0x68>)
 8001654:	4620      	mov	r0, r4
 8001656:	2204      	movs	r2, #4
 8001658:	f002 feba 	bl	80043d0 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <http_accept+0x6c>)
 800165e:	4620      	mov	r0, r4
 8001660:	f002 fe82 	bl	8004368 <tcp_sent>

  return ERR_OK;
}
 8001664:	4628      	mov	r0, r5
 8001666:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8001668:	f06f 0505 	mvn.w	r5, #5
 800166c:	e7fa      	b.n	8001664 <http_accept+0x50>
    return ERR_MEM;
 800166e:	f04f 35ff 	mov.w	r5, #4294967295
 8001672:	e7f7      	b.n	8001664 <http_accept+0x50>
 8001674:	08001b6d 	.word	0x08001b6d
 8001678:	08001eed 	.word	0x08001eed
 800167c:	08001b31 	.word	0x08001b31
 8001680:	08001b19 	.word	0x08001b19

08001684 <http_close_conn>:
{
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
  tcp_arg(pcb, NULL);
 800168a:	2100      	movs	r1, #0
 800168c:	f002 fe52 	bl	8004334 <tcp_arg>
  tcp_recv(pcb, NULL);
 8001690:	2100      	movs	r1, #0
 8001692:	4620      	mov	r0, r4
 8001694:	f002 fe52 	bl	800433c <tcp_recv>
  tcp_err(pcb, NULL);
 8001698:	2100      	movs	r1, #0
 800169a:	4620      	mov	r0, r4
 800169c:	f002 fe7a 	bl	8004394 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	4611      	mov	r1, r2
 80016a4:	4620      	mov	r0, r4
 80016a6:	f002 fe93 	bl	80043d0 <tcp_poll>
  tcp_sent(pcb, NULL);
 80016aa:	2100      	movs	r1, #0
 80016ac:	4620      	mov	r0, r4
 80016ae:	f002 fe5b 	bl	8004368 <tcp_sent>
  if (hs != NULL) {
 80016b2:	b12d      	cbz	r5, 80016c0 <http_close_conn+0x3c>
    http_state_eof(hs);
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff ff79 	bl	80015ac <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80016ba:	4628      	mov	r0, r5
 80016bc:	f001 fe76 	bl	80033ac <mem_free>
  err = tcp_close(pcb);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f003 f973 	bl	80049ac <tcp_close>
  if (err != ERR_OK) {
 80016c6:	4605      	mov	r5, r0
 80016c8:	b120      	cbz	r0, 80016d4 <http_close_conn+0x50>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80016ca:	2204      	movs	r2, #4
 80016cc:	4902      	ldr	r1, [pc, #8]	; (80016d8 <http_close_conn+0x54>)
 80016ce:	4620      	mov	r0, r4
 80016d0:	f002 fe7e 	bl	80043d0 <tcp_poll>
}
 80016d4:	4628      	mov	r0, r5
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	08001b31 	.word	0x08001b31

080016dc <http_send>:
{
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	4680      	mov	r8, r0
 80016e2:	b087      	sub	sp, #28
  if (hs == NULL) {
 80016e4:	460d      	mov	r5, r1
 80016e6:	2900      	cmp	r1, #0
 80016e8:	f000 81fd 	beq.w	8001ae6 <http_send+0x40a>
  if (hs->left == 0) {
 80016ec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80016ee:	b9ab      	cbnz	r3, 800171c <http_send+0x40>
  if (hs->handle == NULL) {
 80016f0:	6948      	ldr	r0, [r1, #20]
 80016f2:	b940      	cbnz	r0, 8001706 <http_send+0x2a>
    http_close_conn(pcb, hs);
 80016f4:	4629      	mov	r1, r5
 80016f6:	4640      	mov	r0, r8
 80016f8:	f7ff ffc4 	bl	8001684 <http_close_conn>
      return 0;
 80016fc:	2600      	movs	r6, #0
}
 80016fe:	4630      	mov	r0, r6
 8001700:	b007      	add	sp, #28
 8001702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8001706:	f7ff ff0e 	bl	8001526 <fs_bytes_left>
  if (bytes_left <= 0) {
 800170a:	2800      	cmp	r0, #0
 800170c:	ddf2      	ble.n	80016f4 <http_send+0x18>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800170e:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <http_send+0x1f4>)
 8001710:	4970      	ldr	r1, [pc, #448]	; (80018d4 <http_send+0x1f8>)
 8001712:	4871      	ldr	r0, [pc, #452]	; (80018d8 <http_send+0x1fc>)
 8001714:	f240 4283 	movw	r2, #1155	; 0x483
 8001718:	f006 f90a 	bl	8007930 <iprintf>
  if(hs->ssi) {
 800171c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800171e:	2c00      	cmp	r4, #0
 8001720:	f000 81cc 	beq.w	8001abc <http_send+0x3e0>
  len = tcp_sndbuf(pcb);
 8001724:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8001728:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(ssi->parsed > hs->file) {
 800172c:	69a9      	ldr	r1, [r5, #24]
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	428b      	cmp	r3, r1
 8001732:	d82b      	bhi.n	800178c <http_send+0xb0>
  u8_t data_to_send = 0;
 8001734:	2600      	movs	r6, #0
  err_t err = ERR_OK;
 8001736:	46b1      	mov	r9, r6
  while((ssi->parse_left) && (err == ERR_OK)) {
 8001738:	68a3      	ldr	r3, [r4, #8]
    if (len == 0) {
 800173a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  while((ssi->parse_left) && (err == ERR_OK)) {
 800173e:	b113      	cbz	r3, 8001746 <http_send+0x6a>
 8001740:	f1b9 0f00 	cmp.w	r9, #0
 8001744:	d049      	beq.n	80017da <http_send+0xfe>
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8001746:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800174a:	2b04      	cmp	r3, #4
 800174c:	d03a      	beq.n	80017c4 <http_send+0xe8>
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	69a9      	ldr	r1, [r5, #24]
 8001752:	428b      	cmp	r3, r1
 8001754:	d936      	bls.n	80017c4 <http_send+0xe8>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8001756:	1a5b      	subs	r3, r3, r1
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	4293      	cmp	r3, r2
 800175e:	bfa8      	it	ge
 8001760:	4613      	movge	r3, r2
 8001762:	aa06      	add	r2, sp, #24
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8001764:	4640      	mov	r0, r8
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8001766:	f822 3d02 	strh.w	r3, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800176a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800176c:	3300      	adds	r3, #0
 800176e:	bf18      	it	ne
 8001770:	2301      	movne	r3, #1
 8001772:	f7ff fedd 	bl	8001530 <http_write>
    if (err == ERR_OK) {
 8001776:	bb28      	cbnz	r0, 80017c4 <http_send+0xe8>
    hs->file += len;
 8001778:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800177c:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 800177e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8001780:	440a      	add	r2, r1
    hs->left -= len;
 8001782:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8001784:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8001786:	626b      	str	r3, [r5, #36]	; 0x24
    data_to_send = 1;
 8001788:	2601      	movs	r6, #1
 800178a:	e01b      	b.n	80017c4 <http_send+0xe8>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800178c:	1a5b      	subs	r3, r3, r1
 800178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001792:	4293      	cmp	r3, r2
 8001794:	bfa8      	it	ge
 8001796:	4613      	movge	r3, r2
 8001798:	aa06      	add	r2, sp, #24
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800179a:	4640      	mov	r0, r8
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800179c:	f822 3d02 	strh.w	r3, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80017a0:	2301      	movs	r3, #1
 80017a2:	f7ff fec5 	bl	8001530 <http_write>
    if (err == ERR_OK) {
 80017a6:	4681      	mov	r9, r0
 80017a8:	b9a8      	cbnz	r0, 80017d6 <http_send+0xfa>
      hs->file += len;
 80017aa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80017ae:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 80017b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 80017b2:	440a      	add	r2, r1
      hs->left -= len;
 80017b4:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 80017b6:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 80017b8:	626b      	str	r3, [r5, #36]	; 0x24
      data_to_send = 1;
 80017ba:	2601      	movs	r6, #1
    if(tcp_sndbuf(pcb) == 0) {
 80017bc:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1b9      	bne.n	8001738 <http_send+0x5c>
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80017c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d199      	bne.n	80016fe <http_send+0x22>
 80017ca:	6968      	ldr	r0, [r5, #20]
 80017cc:	f7ff feab 	bl	8001526 <fs_bytes_left>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	dc94      	bgt.n	80016fe <http_send+0x22>
 80017d4:	e78e      	b.n	80016f4 <http_send+0x18>
  u8_t data_to_send = 0;
 80017d6:	2600      	movs	r6, #0
 80017d8:	e7f0      	b.n	80017bc <http_send+0xe0>
    if (len == 0) {
 80017da:	2900      	cmp	r1, #0
 80017dc:	d0f2      	beq.n	80017c4 <http_send+0xe8>
    switch(ssi->tag_state) {
 80017de:	f894 20db 	ldrb.w	r2, [r4, #219]	; 0xdb
 80017e2:	2a04      	cmp	r2, #4
 80017e4:	d8ab      	bhi.n	800173e <http_send+0x62>
 80017e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80017ea:	0005      	.short	0x0005
 80017ec:	002b0012 	.word	0x002b0012
 80017f0:	0132007f 	.word	0x0132007f
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	7811      	ldrb	r1, [r2, #0]
 80017f8:	293c      	cmp	r1, #60	; 0x3c
          ssi->tag_state = TAG_LEADIN;
 80017fa:	bf02      	ittt	eq
 80017fc:	2101      	moveq	r1, #1
 80017fe:	f884 10db 	strbeq.w	r1, [r4, #219]	; 0xdb
          ssi->tag_index = 1;
 8001802:	81a1      	strheq	r1, [r4, #12]
        ssi->parse_left--;
 8001804:	3b01      	subs	r3, #1
          ssi->parsed++;
 8001806:	3201      	adds	r2, #1
          ssi->parse_left--;
 8001808:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 800180a:	6022      	str	r2, [r4, #0]
 800180c:	e794      	b.n	8001738 <http_send+0x5c>
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800180e:	89a2      	ldrh	r2, [r4, #12]
 8001810:	2a05      	cmp	r2, #5
 8001812:	d105      	bne.n	8001820 <http_send+0x144>
          ssi->tag_index = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	81a3      	strh	r3, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8001818:	2302      	movs	r3, #2
              ssi->tag_state = TAG_NONE;
 800181a:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
 800181e:	e78b      	b.n	8001738 <http_send+0x5c>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8001820:	6821      	ldr	r1, [r4, #0]
 8001822:	482e      	ldr	r0, [pc, #184]	; (80018dc <http_send+0x200>)
 8001824:	780f      	ldrb	r7, [r1, #0]
 8001826:	5c10      	ldrb	r0, [r2, r0]
 8001828:	4287      	cmp	r7, r0
            ssi->tag_index++;
 800182a:	bf0b      	itete	eq
 800182c:	3201      	addeq	r2, #1
            ssi->tag_state = TAG_NONE;
 800182e:	2200      	movne	r2, #0
            ssi->tag_index++;
 8001830:	81a2      	strheq	r2, [r4, #12]
            ssi->tag_state = TAG_NONE;
 8001832:	f884 20db 	strbne.w	r2, [r4, #219]	; 0xdb
          ssi->parse_left--;
 8001836:	3b01      	subs	r3, #1
          ssi->parsed++;
 8001838:	3101      	adds	r1, #1
          ssi->parse_left--;
 800183a:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 800183c:	6021      	str	r1, [r4, #0]
 800183e:	e77b      	b.n	8001738 <http_send+0x5c>
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8001840:	89a2      	ldrh	r2, [r4, #12]
 8001842:	6821      	ldr	r1, [r4, #0]
 8001844:	b94a      	cbnz	r2, 800185a <http_send+0x17e>
 8001846:	7808      	ldrb	r0, [r1, #0]
 8001848:	3809      	subs	r0, #9
 800184a:	b2c0      	uxtb	r0, r0
 800184c:	2817      	cmp	r0, #23
 800184e:	d804      	bhi.n	800185a <http_send+0x17e>
 8001850:	4f23      	ldr	r7, [pc, #140]	; (80018e0 <http_send+0x204>)
 8001852:	fa27 f000 	lsr.w	r0, r7, r0
 8001856:	07c7      	lsls	r7, r0, #31
 8001858:	d4ed      	bmi.n	8001836 <http_send+0x15a>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800185a:	780b      	ldrb	r3, [r1, #0]
 800185c:	2b20      	cmp	r3, #32
 800185e:	d007      	beq.n	8001870 <http_send+0x194>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8001860:	f1a3 0009 	sub.w	r0, r3, #9
 8001864:	2801      	cmp	r0, #1
 8001866:	d903      	bls.n	8001870 <http_send+0x194>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8001868:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800186c:	2b0d      	cmp	r3, #13
 800186e:	d122      	bne.n	80018b6 <http_send+0x1da>
          if(ssi->tag_index == 0) {
 8001870:	b942      	cbnz	r2, 8001884 <http_send+0x1a8>
            ssi->tag_state = TAG_NONE;
 8001872:	f884 20db 	strb.w	r2, [r4, #219]	; 0xdb
        ssi->parse_left--;
 8001876:	68a3      	ldr	r3, [r4, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	6023      	str	r3, [r4, #0]
 8001882:	e759      	b.n	8001738 <http_send+0x5c>
            ssi->tag_state = TAG_LEADOUT;
 8001884:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8001886:	2aff      	cmp	r2, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8001888:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800188c:	d906      	bls.n	800189c <http_send+0x1c0>
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <http_send+0x1f4>)
 8001890:	4914      	ldr	r1, [pc, #80]	; (80018e4 <http_send+0x208>)
 8001892:	4811      	ldr	r0, [pc, #68]	; (80018d8 <http_send+0x1fc>)
 8001894:	f240 521b 	movw	r2, #1307	; 0x51b
 8001898:	f006 f84a 	bl	8007930 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800189c:	89a3      	ldrh	r3, [r4, #12]
 800189e:	7423      	strb	r3, [r4, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 80018a0:	4423      	add	r3, r4
 80018a2:	2200      	movs	r2, #0
 80018a4:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b2d      	cmp	r3, #45	; 0x2d
              ssi->tag_index = 1;
 80018ac:	bf06      	itte	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	81a3      	strheq	r3, [r4, #12]
              ssi->tag_index = 0;
 80018b2:	81a2      	strhne	r2, [r4, #12]
 80018b4:	e7df      	b.n	8001876 <http_send+0x19a>
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80018b6:	2a07      	cmp	r2, #7
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80018b8:	bf9f      	itttt	ls
 80018ba:	1c53      	addls	r3, r2, #1
 80018bc:	81a3      	strhls	r3, [r4, #12]
 80018be:	1912      	addls	r2, r2, r4
 80018c0:	780b      	ldrbls	r3, [r1, #0]
 80018c2:	bf92      	itee	ls
 80018c4:	7453      	strbls	r3, [r2, #17]
            ssi->tag_state = TAG_NONE;
 80018c6:	2300      	movhi	r3, #0
 80018c8:	f884 30db 	strbhi.w	r3, [r4, #219]	; 0xdb
 80018cc:	e7d3      	b.n	8001876 <http_send+0x19a>
 80018ce:	bf00      	nop
 80018d0:	08009632 	.word	0x08009632
 80018d4:	080095b3 	.word	0x080095b3
 80018d8:	08009678 	.word	0x08009678
 80018dc:	080095ea 	.word	0x080095ea
 80018e0:	00800013 	.word	0x00800013
 80018e4:	080095f0 	.word	0x080095f0
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80018e8:	89a1      	ldrh	r1, [r4, #12]
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b949      	cbnz	r1, 8001904 <http_send+0x228>
 80018f0:	7810      	ldrb	r0, [r2, #0]
 80018f2:	3809      	subs	r0, #9
 80018f4:	b2c0      	uxtb	r0, r0
 80018f6:	2817      	cmp	r0, #23
 80018f8:	d804      	bhi.n	8001904 <http_send+0x228>
 80018fa:	4f7c      	ldr	r7, [pc, #496]	; (8001aec <http_send+0x410>)
 80018fc:	fa27 f000 	lsr.w	r0, r7, r0
 8001900:	07c0      	lsls	r0, r0, #31
 8001902:	d480      	bmi.n	8001806 <http_send+0x12a>
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 8001904:	487a      	ldr	r0, [pc, #488]	; (8001af0 <http_send+0x414>)
 8001906:	f812 7b01 	ldrb.w	r7, [r2], #1
 800190a:	5c08      	ldrb	r0, [r1, r0]
          ssi->parse_left--;
 800190c:	60a3      	str	r3, [r4, #8]
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800190e:	4287      	cmp	r7, r0
          ssi->parsed++;
 8001910:	6022      	str	r2, [r4, #0]
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 8001912:	f040 809a 	bne.w	8001a4a <http_send+0x36e>
          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 8001916:	2902      	cmp	r1, #2
 8001918:	f040 8094 	bne.w	8001a44 <http_send+0x368>
  ssi = hs->ssi;
 800191c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800191e:	b937      	cbnz	r7, 800192e <http_send+0x252>
 8001920:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <http_send+0x418>)
 8001922:	4975      	ldr	r1, [pc, #468]	; (8001af8 <http_send+0x41c>)
 8001924:	4875      	ldr	r0, [pc, #468]	; (8001afc <http_send+0x420>)
 8001926:	f240 22fd 	movw	r2, #765	; 0x2fd
 800192a:	f006 f801 	bl	8007930 <iprintf>
  if(g_pfnSSIHandler
 800192e:	4b74      	ldr	r3, [pc, #464]	; (8001b00 <http_send+0x424>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f107 0211 	add.w	r2, r7, #17
 8001936:	9201      	str	r2, [sp, #4]
 8001938:	b163      	cbz	r3, 8001954 <http_send+0x278>
     && g_ppcTags && g_iNumTags
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <http_send+0x428>)
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	b14a      	cbz	r2, 8001954 <http_send+0x278>
 8001940:	4971      	ldr	r1, [pc, #452]	; (8001b08 <http_send+0x42c>)
 8001942:	f8d1 b000 	ldr.w	fp, [r1]
 8001946:	f1bb 0f00 	cmp.w	fp, #0
 800194a:	d003      	beq.n	8001954 <http_send+0x278>
 800194c:	f04f 0a00 	mov.w	sl, #0
    for(tag = 0; tag < g_iNumTags; tag++) {
 8001950:	45d3      	cmp	fp, sl
 8001952:	dc3b      	bgt.n	80019cc <http_send+0x2f0>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8001954:	9801      	ldr	r0, [sp, #4]
 8001956:	f7fe fc45 	bl	80001e4 <strlen>
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800195a:	4b6c      	ldr	r3, [pc, #432]	; (8001b0c <http_send+0x430>)
 800195c:	2809      	cmp	r0, #9
 800195e:	bf28      	it	cs
 8001960:	2009      	movcs	r0, #9
 8001962:	f107 0b1a 	add.w	fp, r7, #26
 8001966:	4682      	mov	sl, r0
 8001968:	465a      	mov	r2, fp
 800196a:	f103 0110 	add.w	r1, r3, #16
 800196e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001972:	f842 0b04 	str.w	r0, [r2], #4
 8001976:	428b      	cmp	r3, r1
 8001978:	d1f9      	bne.n	800196e <http_send+0x292>
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	8013      	strh	r3, [r2, #0]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800197e:	9901      	ldr	r1, [sp, #4]
 8001980:	4652      	mov	r2, sl
 8001982:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001986:	f005 ffc0 	bl	800790a <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800198a:	4961      	ldr	r1, [pc, #388]	; (8001b10 <http_send+0x434>)
 800198c:	f10a 022c 	add.w	r2, sl, #44	; 0x2c
 8001990:	6809      	ldr	r1, [r1, #0]
 8001992:	50b9      	str	r1, [r7, r2]
 8001994:	18bb      	adds	r3, r7, r2
 8001996:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <http_send+0x434>)
 8001998:	8892      	ldrh	r2, [r2, #4]
 800199a:	809a      	strh	r2, [r3, #4]
 800199c:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <http_send+0x434>)
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800199e:	44ba      	add	sl, r7
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80019a0:	7992      	ldrb	r2, [r2, #6]
 80019a2:	719a      	strb	r2, [r3, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f88a 3033 	strb.w	r3, [sl, #51]	; 0x33
  len = strlen(ssi->tag_insert);
 80019aa:	4658      	mov	r0, fp
 80019ac:	f7fe fc1a 	bl	80001e4 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80019b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 80019b4:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80019b6:	d306      	bcc.n	80019c6 <http_send+0x2ea>
 80019b8:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <http_send+0x418>)
 80019ba:	4956      	ldr	r1, [pc, #344]	; (8001b14 <http_send+0x438>)
 80019bc:	484f      	ldr	r0, [pc, #316]	; (8001afc <http_send+0x420>)
 80019be:	f240 3236 	movw	r2, #822	; 0x336
 80019c2:	f005 ffb5 	bl	8007930 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 80019c6:	f8a7 a00e 	strh.w	sl, [r7, #14]
 80019ca:	e00f      	b.n	80019ec <http_send+0x310>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 80019cc:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80019d0:	9801      	ldr	r0, [sp, #4]
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	f7fe fbfb 	bl	80001d0 <strcmp>
 80019da:	9a02      	ldr	r2, [sp, #8]
 80019dc:	9b03      	ldr	r3, [sp, #12]
 80019de:	bb70      	cbnz	r0, 8001a3e <http_send+0x362>
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 80019e0:	22c0      	movs	r2, #192	; 0xc0
 80019e2:	f107 011a 	add.w	r1, r7, #26
 80019e6:	4650      	mov	r0, sl
 80019e8:	4798      	blx	r3
 80019ea:	81f8      	strh	r0, [r7, #14]
            ssi->tag_index = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	81a3      	strh	r3, [r4, #12]
            ssi->tag_state = TAG_SENDING;
 80019f0:	2304      	movs	r3, #4
 80019f2:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
            if (ssi->tag_end > hs->file) {
 80019f6:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_end = ssi->parsed;
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	6063      	str	r3, [r4, #4]
            if (ssi->tag_end > hs->file) {
 80019fc:	428b      	cmp	r3, r1
 80019fe:	f67f ae9b 	bls.w	8001738 <http_send+0x5c>
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8001a02:	1a5b      	subs	r3, r3, r1
 8001a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	bfa8      	it	ge
 8001a0c:	4613      	movge	r3, r2
 8001a0e:	aa06      	add	r2, sp, #24
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8001a10:	4640      	mov	r0, r8
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8001a12:	f822 3d02 	strh.w	r3, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8001a16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001a18:	3300      	adds	r3, #0
 8001a1a:	bf18      	it	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	f7ff fd87 	bl	8001530 <http_write>
              if (err == ERR_OK) {
 8001a22:	4681      	mov	r9, r0
 8001a24:	2800      	cmp	r0, #0
 8001a26:	f47f ae87 	bne.w	8001738 <http_send+0x5c>
            hs->file += len;
 8001a2a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8001a2e:	69aa      	ldr	r2, [r5, #24]
            hs->left -= len;
 8001a30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            hs->file += len;
 8001a32:	440a      	add	r2, r1
            hs->left -= len;
 8001a34:	1a5b      	subs	r3, r3, r1
            hs->file += len;
 8001a36:	61aa      	str	r2, [r5, #24]
            hs->left -= len;
 8001a38:	626b      	str	r3, [r5, #36]	; 0x24
              data_to_send = 1;
 8001a3a:	2601      	movs	r6, #1
 8001a3c:	e67c      	b.n	8001738 <http_send+0x5c>
    for(tag = 0; tag < g_iNumTags; tag++) {
 8001a3e:	f10a 0a01 	add.w	sl, sl, #1
 8001a42:	e785      	b.n	8001950 <http_send+0x274>
            ssi->tag_index++;
 8001a44:	3101      	adds	r1, #1
 8001a46:	81a1      	strh	r1, [r4, #12]
 8001a48:	e676      	b.n	8001738 <http_send+0x5c>
          ssi->tag_state = TAG_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e6e5      	b.n	800181a <http_send+0x13e>
        if(ssi->tag_end > hs->file) {
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	69a9      	ldr	r1, [r5, #24]
 8001a52:	428b      	cmp	r3, r1
 8001a54:	d917      	bls.n	8001a86 <http_send+0x3aa>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bfa8      	it	ge
 8001a60:	4613      	movge	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0de      	beq.n	8001a2a <http_send+0x34e>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8001a6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001a6e:	3300      	adds	r3, #0
 8001a70:	bf18      	it	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	f10d 0216 	add.w	r2, sp, #22
 8001a78:	4640      	mov	r0, r8
 8001a7a:	f7ff fd59 	bl	8001530 <http_write>
          if (err == ERR_OK) {
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d0d3      	beq.n	8001a2a <http_send+0x34e>
 8001a82:	4681      	mov	r9, r0
 8001a84:	e658      	b.n	8001738 <http_send+0x5c>
          if(ssi->tag_index < ssi->tag_insert_len) {
 8001a86:	89a1      	ldrh	r1, [r4, #12]
 8001a88:	89e3      	ldrh	r3, [r4, #14]
 8001a8a:	4299      	cmp	r1, r3
 8001a8c:	d213      	bcs.n	8001ab6 <http_send+0x3da>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8001a8e:	aa06      	add	r2, sp, #24
 8001a90:	1a5b      	subs	r3, r3, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8001a92:	311a      	adds	r1, #26
            len = (ssi->tag_insert_len - ssi->tag_index);
 8001a94:	f822 3d02 	strh.w	r3, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8001a98:	4421      	add	r1, r4
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	f7ff fd47 	bl	8001530 <http_write>
            if (err == ERR_OK) {
 8001aa2:	4681      	mov	r9, r0
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	f47f ae47 	bne.w	8001738 <http_send+0x5c>
              ssi->tag_index += len;
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	81a3      	strh	r3, [r4, #12]
 8001ab4:	e7c1      	b.n	8001a3a <http_send+0x35e>
              ssi->tag_index = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	81a3      	strh	r3, [r4, #12]
 8001aba:	e6ae      	b.n	800181a <http_send+0x13e>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8001abc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001ac6:	428b      	cmp	r3, r1
 8001ac8:	bf88      	it	hi
 8001aca:	4613      	movhi	r3, r2
 8001acc:	aa06      	add	r2, sp, #24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8001ace:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8001ad0:	f822 3d02 	strh.w	r3, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8001ad4:	4640      	mov	r0, r8
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	f7ff fd2a 	bl	8001530 <http_write>
  if (err == ERR_OK) {
 8001adc:	2800      	cmp	r0, #0
 8001ade:	f43f ae4b 	beq.w	8001778 <http_send+0x9c>
  u8_t data_to_send = 0;
 8001ae2:	4626      	mov	r6, r4
 8001ae4:	e66e      	b.n	80017c4 <http_send+0xe8>
    return 0;
 8001ae6:	460e      	mov	r6, r1
 8001ae8:	e609      	b.n	80016fe <http_send+0x22>
 8001aea:	bf00      	nop
 8001aec:	00800013 	.word	0x00800013
 8001af0:	08009607 	.word	0x08009607
 8001af4:	08009632 	.word	0x08009632
 8001af8:	0800960b 	.word	0x0800960b
 8001afc:	08009678 	.word	0x08009678
 8001b00:	2000065c 	.word	0x2000065c
 8001b04:	20000664 	.word	0x20000664
 8001b08:	20000660 	.word	0x20000660
 8001b0c:	08009617 	.word	0x08009617
 8001b10:	0800962a 	.word	0x0800962a
 8001b14:	08009b80 	.word	0x08009b80

08001b18 <http_sent>:
{
 8001b18:	b508      	push	{r3, lr}
 8001b1a:	460b      	mov	r3, r1
  if (hs == NULL) {
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	b128      	cbz	r0, 8001b2c <http_sent+0x14>
  hs->retries = 0;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fdd8 	bl	80016dc <http_send>
}
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	bd08      	pop	{r3, pc}

08001b30 <http_poll>:
{
 8001b30:	b510      	push	{r4, lr}
 8001b32:	460c      	mov	r4, r1
  if (hs == NULL) {
 8001b34:	4601      	mov	r1, r0
 8001b36:	b920      	cbnz	r0, 8001b42 <http_poll+0x12>
      http_close_conn(pcb, hs);
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fda3 	bl	8001684 <http_close_conn>
}
 8001b3e:	2000      	movs	r0, #0
 8001b40:	bd10      	pop	{r4, pc}
    hs->retries++;
 8001b42:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8001b4a:	2b04      	cmp	r3, #4
    hs->retries++;
 8001b4c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8001b50:	d0f2      	beq.n	8001b38 <http_poll+0x8>
    if(hs && (hs->handle)) {
 8001b52:	6943      	ldr	r3, [r0, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f2      	beq.n	8001b3e <http_poll+0xe>
      if(http_send(pcb, hs)) {
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff fdbf 	bl	80016dc <http_send>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d0ed      	beq.n	8001b3e <http_poll+0xe>
        tcp_output(pcb);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f004 fe2c 	bl	80067c0 <tcp_output>
 8001b68:	e7e9      	b.n	8001b3e <http_poll+0xe>
	...

08001b6c <http_recv>:
{
 8001b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b70:	b087      	sub	sp, #28
 8001b72:	4604      	mov	r4, r0
 8001b74:	9102      	str	r1, [sp, #8]
 8001b76:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8001b78:	469a      	mov	sl, r3
 8001b7a:	b94b      	cbnz	r3, 8001b90 <http_recv+0x24>
 8001b7c:	b152      	cbz	r2, 8001b94 <http_recv+0x28>
 8001b7e:	b988      	cbnz	r0, 8001ba4 <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8001b80:	9802      	ldr	r0, [sp, #8]
 8001b82:	8929      	ldrh	r1, [r5, #8]
 8001b84:	f002 fb7e 	bl	8004284 <tcp_recved>
      pbuf_free(p);
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f001 ff7b 	bl	8003a84 <pbuf_free>
 8001b8e:	e001      	b.n	8001b94 <http_recv+0x28>
    if (p != NULL) {
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d1f5      	bne.n	8001b80 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8001b94:	4621      	mov	r1, r4
 8001b96:	9802      	ldr	r0, [sp, #8]
 8001b98:	f7ff fd74 	bl	8001684 <http_close_conn>
}
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	b007      	add	sp, #28
 8001ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 8001ba4:	8911      	ldrh	r1, [r2, #8]
 8001ba6:	9802      	ldr	r0, [sp, #8]
 8001ba8:	f002 fb6c 	bl	8004284 <tcp_recved>
    if (hs->handle == NULL) {
 8001bac:	6963      	ldr	r3, [r4, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8160 	bne.w	8001e74 <http_recv+0x308>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8001bb4:	69a3      	ldr	r3, [r4, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 8195 	bne.w	8001ee6 <http_recv+0x37a>
  if (hs->req == NULL) {
 8001bbc:	6a20      	ldr	r0, [r4, #32]
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	f040 808f 	bne.w	8001ce2 <http_recv+0x176>
    hs->req = p;
 8001bc4:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f002 f912 	bl	8003df0 <pbuf_ref>
  if (hs->req->next != NULL) {
 8001bcc:	6a20      	ldr	r0, [r4, #32]
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 808a 	beq.w	8001cea <http_recv+0x17e>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8001bd6:	f8b0 9008 	ldrh.w	r9, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8001bda:	49b4      	ldr	r1, [pc, #720]	; (8001eac <http_recv+0x340>)
    data = httpd_req_buf;
 8001bdc:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8001eac <http_recv+0x340>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8001be0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001be4:	4599      	cmp	r9, r3
 8001be6:	bf28      	it	cs
 8001be8:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8001bea:	464a      	mov	r2, r9
 8001bec:	2300      	movs	r3, #0
 8001bee:	f002 f9d7 	bl	8003fa0 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8001bf2:	f1b9 0f06 	cmp.w	r9, #6
 8001bf6:	f240 8129 	bls.w	8001e4c <http_recv+0x2e0>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8001bfa:	464a      	mov	r2, r9
 8001bfc:	49ac      	ldr	r1, [pc, #688]	; (8001eb0 <http_recv+0x344>)
 8001bfe:	4640      	mov	r0, r8
 8001c00:	f000 f9c5 	bl	8001f8e <lwip_strnstr>
    if (crlf != NULL) {
 8001c04:	2800      	cmp	r0, #0
 8001c06:	f000 8121 	beq.w	8001e4c <http_recv+0x2e0>
      if (!strncmp(data, "GET ", 4)) {
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	49a9      	ldr	r1, [pc, #676]	; (8001eb4 <http_recv+0x348>)
 8001c0e:	4640      	mov	r0, r8
 8001c10:	f005 feb4 	bl	800797c <strncmp>
 8001c14:	9001      	str	r0, [sp, #4]
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d16c      	bne.n	8001cf4 <http_recv+0x188>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8001c1a:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8001c1e:	b29b      	uxth	r3, r3
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8001c20:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8001c24:	461a      	mov	r2, r3
 8001c26:	49a4      	ldr	r1, [pc, #656]	; (8001eb8 <http_recv+0x34c>)
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	f000 f9af 	bl	8001f8e <lwip_strnstr>
        sp1 = data + 3;
 8001c30:	f108 0b03 	add.w	fp, r8, #3
      if (sp2 == NULL) {
 8001c34:	4607      	mov	r7, r0
 8001c36:	9b03      	ldr	r3, [sp, #12]
 8001c38:	b950      	cbnz	r0, 8001c50 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	499c      	ldr	r1, [pc, #624]	; (8001eb0 <http_recv+0x344>)
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f000 f9a5 	bl	8001f8e <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8001c44:	4607      	mov	r7, r0
 8001c46:	2800      	cmp	r0, #0
 8001c48:	f000 8100 	beq.w	8001e4c <http_recv+0x2e0>
        is_09 = 1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9301      	str	r3, [sp, #4]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8001c50:	45bb      	cmp	fp, r7
 8001c52:	f080 80fb 	bcs.w	8001e4c <http_recv+0x2e0>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8001c56:	464a      	mov	r2, r9
 8001c58:	4998      	ldr	r1, [pc, #608]	; (8001ebc <http_recv+0x350>)
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	f000 f997 	bl	8001f8e <lwip_strnstr>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	f000 80f3 	beq.w	8001e4c <http_recv+0x2e0>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8001c66:	1bbf      	subs	r7, r7, r6
          uri[uri_len] = 0;
 8001c68:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f888 3003 	strb.w	r3, [r8, #3]
  size_t uri_len = strlen(uri);
 8001c70:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8001c72:	55f3      	strb	r3, [r6, r7]
 8001c74:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 8001c76:	f7fe fab5 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	f000 80ac 	beq.w	8001dd8 <http_recv+0x26c>
 8001c80:	1e47      	subs	r7, r0, #1
 8001c82:	5df3      	ldrb	r3, [r6, r7]
 8001c84:	2b2f      	cmp	r3, #47	; 0x2f
 8001c86:	f040 80a7 	bne.w	8001dd8 <http_recv+0x26c>
 8001c8a:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <http_recv+0x354>)
 8001c8c:	429e      	cmp	r6, r3
 8001c8e:	469b      	mov	fp, r3
 8001c90:	d102      	bne.n	8001c98 <http_recv+0x12c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8001c92:	2801      	cmp	r0, #1
 8001c94:	f040 80a0 	bne.w	8001dd8 <http_recv+0x26c>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8001c98:	2f3f      	cmp	r7, #63	; 0x3f
 8001c9a:	bf28      	it	cs
 8001c9c:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 8001c9e:	b13f      	cbz	r7, 8001cb0 <http_recv+0x144>
      MEMCPY(http_uri_buf, uri, copy_len);
 8001ca0:	463a      	mov	r2, r7
 8001ca2:	4631      	mov	r1, r6
 8001ca4:	4886      	ldr	r0, [pc, #536]	; (8001ec0 <http_recv+0x354>)
 8001ca6:	f005 fe30 	bl	800790a <memcpy>
      http_uri_buf[copy_len] = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f80b 3007 	strb.w	r3, [fp, r7]
        file_name = g_psDefaultFilenames[loop].name;
 8001cb0:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8001ec4 <http_recv+0x358>
        is_09 = 1;
 8001cb4:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 8001cb8:	b317      	cbz	r7, 8001d00 <http_recv+0x194>
        if (len_left > 0) {
 8001cba:	f1d7 023f 	rsbs	r2, r7, #63	; 0x3f
 8001cbe:	d00e      	beq.n	8001cde <http_recv+0x172>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8001cc0:	f859 6038 	ldr.w	r6, [r9, r8, lsl #3]
 8001cc4:	9203      	str	r2, [sp, #12]
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f7fe fa8c 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8001ccc:	9a03      	ldr	r2, [sp, #12]
 8001cce:	4282      	cmp	r2, r0
 8001cd0:	bf28      	it	cs
 8001cd2:	4602      	movcs	r2, r0
 8001cd4:	4631      	mov	r1, r6
 8001cd6:	eb0b 0007 	add.w	r0, fp, r7
 8001cda:	f005 fe16 	bl	800790a <memcpy>
        file_name = http_uri_buf;
 8001cde:	4a78      	ldr	r2, [pc, #480]	; (8001ec0 <http_recv+0x354>)
 8001ce0:	e010      	b.n	8001d04 <http_recv+0x198>
    pbuf_cat(hs->req, p);
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	f002 f898 	bl	8003e18 <pbuf_cat>
 8001ce8:	e76d      	b.n	8001bc6 <http_recv+0x5a>
    data = (char *)p->payload;
 8001cea:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 8001cee:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 8001cf2:	e77e      	b.n	8001bf2 <http_recv+0x86>
        data[4] = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f888 3004 	strb.w	r3, [r8, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8001cfa:	f06f 0a0f 	mvn.w	sl, #15
 8001cfe:	e054      	b.n	8001daa <http_recv+0x23e>
        file_name = g_psDefaultFilenames[loop].name;
 8001d00:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 8001d04:	9203      	str	r2, [sp, #12]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f7ff fbeb 	bl	80014e4 <fs_open>
 8001d0e:	4626      	mov	r6, r4
      if(err == ERR_OK) {
 8001d10:	9a03      	ldr	r2, [sp, #12]
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d15a      	bne.n	8001dcc <http_recv+0x260>
        tag_check = g_psDefaultFilenames[loop].shtml;
 8001d16:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <http_recv+0x358>)
        uri = file_name;
 8001d18:	9205      	str	r2, [sp, #20]
        tag_check = g_psDefaultFilenames[loop].shtml;
 8001d1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8001d1e:	791b      	ldrb	r3, [r3, #4]
    if (tag_check) {
 8001d20:	b193      	cbz	r3, 8001d48 <http_recv+0x1dc>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8001d22:	20dc      	movs	r0, #220	; 0xdc
 8001d24:	f001 fc62 	bl	80035ec <mem_malloc>
  if (ret != NULL) {
 8001d28:	4607      	mov	r7, r0
 8001d2a:	b168      	cbz	r0, 8001d48 <http_recv+0x1dc>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8001d2c:	22dc      	movs	r2, #220	; 0xdc
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f005 fdf6 	bl	8007920 <memset>
        ssi->tag_index = 0;
 8001d34:	2300      	movs	r3, #0
        ssi->parse_left = file->len;
 8001d36:	6872      	ldr	r2, [r6, #4]
        ssi->tag_index = 0;
 8001d38:	81bb      	strh	r3, [r7, #12]
        ssi->tag_state = TAG_NONE;
 8001d3a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        ssi->parsed = file->data;
 8001d3e:	6833      	ldr	r3, [r6, #0]
 8001d40:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8001d42:	60ba      	str	r2, [r7, #8]
        ssi->tag_end = file->data;
 8001d44:	607b      	str	r3, [r7, #4]
        hs->ssi = ssi;
 8001d46:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->file = file->data;
 8001d48:	6833      	ldr	r3, [r6, #0]
 8001d4a:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8001d4c:	6873      	ldr	r3, [r6, #4]
    hs->handle = file;
 8001d4e:	6166      	str	r6, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da06      	bge.n	8001d62 <http_recv+0x1f6>
 8001d54:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <http_recv+0x35c>)
 8001d56:	495d      	ldr	r1, [pc, #372]	; (8001ecc <http_recv+0x360>)
 8001d58:	485d      	ldr	r0, [pc, #372]	; (8001ed0 <http_recv+0x364>)
 8001d5a:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8001d5e:	f005 fde7 	bl	8007930 <iprintf>
      hs->left = file->len;
 8001d62:	6873      	ldr	r3, [r6, #4]
 8001d64:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8001d6c:	6963      	ldr	r3, [r4, #20]
 8001d6e:	7c1b      	ldrb	r3, [r3, #16]
 8001d70:	07da      	lsls	r2, r3, #31
 8001d72:	f100 80b3 	bmi.w	8001edc <http_recv+0x370>
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <http_recv+0x35c>)
 8001d78:	4956      	ldr	r1, [pc, #344]	; (8001ed4 <http_recv+0x368>)
 8001d7a:	4855      	ldr	r0, [pc, #340]	; (8001ed0 <http_recv+0x364>)
 8001d7c:	f640 02df 	movw	r2, #2271	; 0x8df
 8001d80:	f005 fdd6 	bl	8007930 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8001d84:	9b01      	ldr	r3, [sp, #4]
 8001d86:	b183      	cbz	r3, 8001daa <http_recv+0x23e>
 8001d88:	6963      	ldr	r3, [r4, #20]
 8001d8a:	7c1b      	ldrb	r3, [r3, #16]
 8001d8c:	07db      	lsls	r3, r3, #31
 8001d8e:	d50c      	bpl.n	8001daa <http_recv+0x23e>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8001d90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d92:	494a      	ldr	r1, [pc, #296]	; (8001ebc <http_recv+0x350>)
 8001d94:	69a0      	ldr	r0, [r4, #24]
 8001d96:	f000 f8fa 	bl	8001f8e <lwip_strnstr>
      if (file_start != NULL) {
 8001d9a:	b130      	cbz	r0, 8001daa <http_recv+0x23e>
        size_t diff = file_start + 4 - hs->file;
 8001d9c:	69a3      	ldr	r3, [r4, #24]
 8001d9e:	3004      	adds	r0, #4
 8001da0:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8001da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8001da4:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 8001daa:	6a20      	ldr	r0, [r4, #32]
 8001dac:	b118      	cbz	r0, 8001db6 <http_recv+0x24a>
          pbuf_free(hs->req);
 8001dae:	f001 fe69 	bl	8003a84 <pbuf_free>
          hs->req = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8001db6:	4628      	mov	r0, r5
 8001db8:	f001 fe64 	bl	8003a84 <pbuf_free>
      if (parsed == ERR_OK) {
 8001dbc:	f1ba 0f00 	cmp.w	sl, #0
 8001dc0:	d153      	bne.n	8001e6a <http_recv+0x2fe>
          http_send(pcb, hs);
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	9802      	ldr	r0, [sp, #8]
 8001dc6:	f7ff fc89 	bl	80016dc <http_send>
 8001dca:	e6e7      	b.n	8001b9c <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8001dcc:	f108 0801 	add.w	r8, r8, #1
 8001dd0:	f1b8 0f05 	cmp.w	r8, #5
 8001dd4:	f47f af70 	bne.w	8001cb8 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8001dd8:	213f      	movs	r1, #63	; 0x3f
 8001dda:	9805      	ldr	r0, [sp, #20]
 8001ddc:	f005 fdc0 	bl	8007960 <strchr>
    if (params != NULL) {
 8001de0:	b108      	cbz	r0, 8001de6 <http_recv+0x27a>
      *params = '\0';
 8001de2:	2300      	movs	r3, #0
 8001de4:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8001de6:	9905      	ldr	r1, [sp, #20]
 8001de8:	4620      	mov	r0, r4
 8001dea:	4626      	mov	r6, r4
 8001dec:	f7ff fb7a 	bl	80014e4 <fs_open>
    if (err == ERR_OK) {
 8001df0:	b130      	cbz	r0, 8001e00 <http_recv+0x294>
      file = http_get_404_file(hs, &uri);
 8001df2:	a905      	add	r1, sp, #20
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff fbef 	bl	80015d8 <http_get_404_file>
    if (file != NULL) {
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d03d      	beq.n	8001e7c <http_recv+0x310>
      char* param = (char*)strstr(uri, "?");
 8001e00:	213f      	movs	r1, #63	; 0x3f
 8001e02:	9805      	ldr	r0, [sp, #20]
 8001e04:	f005 fdac 	bl	8007960 <strchr>
      if (param != NULL) {
 8001e08:	4680      	mov	r8, r0
 8001e0a:	b108      	cbz	r0, 8001e10 <http_recv+0x2a4>
         *param = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	7003      	strb	r3, [r0, #0]
      sub = uri;
 8001e10:	f8dd 9014 	ldr.w	r9, [sp, #20]
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8001e14:	212e      	movs	r1, #46	; 0x2e
 8001e16:	4648      	mov	r0, r9
 8001e18:	f005 fda2 	bl	8007960 <strchr>
 8001e1c:	4607      	mov	r7, r0
 8001e1e:	b978      	cbnz	r0, 8001e40 <http_recv+0x2d4>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8001e20:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8001ed8 <http_recv+0x36c>
 8001e24:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
 8001e28:	4648      	mov	r0, r9
 8001e2a:	f000 f8ce 	bl	8001fca <lwip_stricmp>
 8001e2e:	b398      	cbz	r0, 8001e98 <http_recv+0x32c>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8001e30:	3701      	adds	r7, #1
 8001e32:	2f04      	cmp	r7, #4
 8001e34:	d1f6      	bne.n	8001e24 <http_recv+0x2b8>
      if (param != NULL) {
 8001e36:	f1b8 0f00 	cmp.w	r8, #0
 8001e3a:	d085      	beq.n	8001d48 <http_recv+0x1dc>
      tag_check = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e030      	b.n	8001ea2 <http_recv+0x336>
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8001e40:	212e      	movs	r1, #46	; 0x2e
 8001e42:	1c78      	adds	r0, r7, #1
 8001e44:	f005 fd8c 	bl	8007960 <strchr>
 8001e48:	46b9      	mov	r9, r7
 8001e4a:	e7e7      	b.n	8001e1c <http_recv+0x2b0>
  clen = pbuf_clen(hs->req);
 8001e4c:	6a20      	ldr	r0, [r4, #32]
 8001e4e:	f001 ffc7 	bl	8003de0 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8001e52:	6a23      	ldr	r3, [r4, #32]
 8001e54:	891b      	ldrh	r3, [r3, #8]
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	f4bf af4e 	bcs.w	8001cfa <http_recv+0x18e>
 8001e5e:	2805      	cmp	r0, #5
 8001e60:	f63f af4b 	bhi.w	8001cfa <http_recv+0x18e>
 8001e64:	f06f 0a04 	mvn.w	sl, #4
 8001e68:	e7a5      	b.n	8001db6 <http_recv+0x24a>
      } else if (parsed == ERR_ARG) {
 8001e6a:	f11a 0f10 	cmn.w	sl, #16
 8001e6e:	f47f ae95 	bne.w	8001b9c <http_recv+0x30>
 8001e72:	e68f      	b.n	8001b94 <http_recv+0x28>
      pbuf_free(p);
 8001e74:	4628      	mov	r0, r5
 8001e76:	f001 fe05 	bl	8003a84 <pbuf_free>
 8001e7a:	e68f      	b.n	8001b9c <http_recv+0x30>
    file = http_get_404_file(hs, &uri);
 8001e7c:	a905      	add	r1, sp, #20
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff fbaa 	bl	80015d8 <http_get_404_file>
  if (file != NULL) {
 8001e84:	4606      	mov	r6, r0
 8001e86:	2800      	cmp	r0, #0
 8001e88:	f47f af5e 	bne.w	8001d48 <http_recv+0x1dc>
    hs->handle = NULL;
 8001e8c:	6166      	str	r6, [r4, #20]
    hs->file = NULL;
 8001e8e:	61a6      	str	r6, [r4, #24]
    hs->left = 0;
 8001e90:	6266      	str	r6, [r4, #36]	; 0x24
    hs->retries = 0;
 8001e92:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 8001e96:	e788      	b.n	8001daa <http_recv+0x23e>
      if (param != NULL) {
 8001e98:	f1b8 0f00 	cmp.w	r8, #0
 8001e9c:	f43f af41 	beq.w	8001d22 <http_recv+0x1b6>
          tag_check = 1;
 8001ea0:	2301      	movs	r3, #1
         *param = '?';
 8001ea2:	223f      	movs	r2, #63	; 0x3f
 8001ea4:	f888 2000 	strb.w	r2, [r8]
 8001ea8:	e73a      	b.n	8001d20 <http_recv+0x1b4>
 8001eaa:	bf00      	nop
 8001eac:	200000d4 	.word	0x200000d4
 8001eb0:	08009569 	.word	0x08009569
 8001eb4:	08009562 	.word	0x08009562
 8001eb8:	0800ae60 	.word	0x0800ae60
 8001ebc:	08009567 	.word	0x08009567
 8001ec0:	20000094 	.word	0x20000094
 8001ec4:	0800951c 	.word	0x0800951c
 8001ec8:	08009632 	.word	0x08009632
 8001ecc:	0800956c 	.word	0x0800956c
 8001ed0:	08009678 	.word	0x08009678
 8001ed4:	0800958a 	.word	0x0800958a
 8001ed8:	0800950c 	.word	0x0800950c
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8001edc:	9b01      	ldr	r3, [sp, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f43f af63 	beq.w	8001daa <http_recv+0x23e>
 8001ee4:	e754      	b.n	8001d90 <http_recv+0x224>
    return ERR_USE;
 8001ee6:	f06f 0a07 	mvn.w	sl, #7
 8001eea:	e75e      	b.n	8001daa <http_recv+0x23e>

08001eec <http_err>:
{
 8001eec:	b510      	push	{r4, lr}
  if (hs != NULL) {
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b130      	cbz	r0, 8001f00 <http_err+0x14>
    http_state_eof(hs);
 8001ef2:	f7ff fb5b 	bl	80015ac <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8001ef6:	4620      	mov	r0, r4
}
 8001ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8001efc:	f001 ba56 	b.w	80033ac <mem_free>
 8001f00:	bd10      	pop	{r4, pc}
	...

08001f04 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8001f04:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8001f06:	202e      	movs	r0, #46	; 0x2e
 8001f08:	f002 ff32 	bl	8004d70 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	b930      	cbnz	r0, 8001f1e <httpd_init+0x1a>
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <httpd_init+0x64>)
 8001f12:	4916      	ldr	r1, [pc, #88]	; (8001f6c <httpd_init+0x68>)
 8001f14:	4816      	ldr	r0, [pc, #88]	; (8001f70 <httpd_init+0x6c>)
 8001f16:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8001f1a:	f005 fd09 	bl	8007930 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4620      	mov	r0, r4
 8001f22:	f002 fa05 	bl	8004330 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8001f26:	2250      	movs	r2, #80	; 0x50
 8001f28:	4912      	ldr	r1, [pc, #72]	; (8001f74 <httpd_init+0x70>)
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f002 f8d8 	bl	80040e0 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8001f30:	b130      	cbz	r0, 8001f40 <httpd_init+0x3c>
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <httpd_init+0x64>)
 8001f34:	4910      	ldr	r1, [pc, #64]	; (8001f78 <httpd_init+0x74>)
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <httpd_init+0x6c>)
 8001f38:	f640 2215 	movw	r2, #2581	; 0xa15
 8001f3c:	f005 fcf8 	bl	8007930 <iprintf>
  pcb = tcp_listen(pcb);
 8001f40:	4620      	mov	r0, r4
 8001f42:	21ff      	movs	r1, #255	; 0xff
 8001f44:	f002 f96e 	bl	8004224 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8001f48:	4604      	mov	r4, r0
 8001f4a:	b930      	cbnz	r0, 8001f5a <httpd_init+0x56>
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <httpd_init+0x64>)
 8001f4e:	490b      	ldr	r1, [pc, #44]	; (8001f7c <httpd_init+0x78>)
 8001f50:	4807      	ldr	r0, [pc, #28]	; (8001f70 <httpd_init+0x6c>)
 8001f52:	f640 2217 	movw	r2, #2583	; 0xa17
 8001f56:	f005 fceb 	bl	8007930 <iprintf>
  tcp_accept(pcb, http_accept);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4908      	ldr	r1, [pc, #32]	; (8001f80 <httpd_init+0x7c>)
}
 8001f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8001f62:	f002 ba2f 	b.w	80043c4 <tcp_accept>
 8001f66:	bf00      	nop
 8001f68:	08009632 	.word	0x08009632
 8001f6c:	080096a0 	.word	0x080096a0
 8001f70:	08009678 	.word	0x08009678
 8001f74:	08009a18 	.word	0x08009a18
 8001f78:	080096bb 	.word	0x080096bb
 8001f7c:	080096d7 	.word	0x080096d7
 8001f80:	08001615 	.word	0x08001615

08001f84 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8001f84:	ba40      	rev16	r0, r0
}
 8001f86:	b280      	uxth	r0, r0
 8001f88:	4770      	bx	lr

08001f8a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8001f8a:	ba00      	rev	r0, r0
 8001f8c:	4770      	bx	lr

08001f8e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8001f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f90:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8001f92:	4608      	mov	r0, r1
{
 8001f94:	460f      	mov	r7, r1
 8001f96:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8001f98:	f7fe f924 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 8001f9c:	4606      	mov	r6, r0
 8001f9e:	b190      	cbz	r0, 8001fc6 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8001fa0:	4425      	add	r5, r4
 8001fa2:	7820      	ldrb	r0, [r4, #0]
 8001fa4:	b180      	cbz	r0, 8001fc8 <lwip_strnstr+0x3a>
 8001fa6:	19a3      	adds	r3, r4, r6
 8001fa8:	429d      	cmp	r5, r3
 8001faa:	d201      	bcs.n	8001fb0 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8001fac:	2000      	movs	r0, #0
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8001fb0:	783b      	ldrb	r3, [r7, #0]
 8001fb2:	4283      	cmp	r3, r0
 8001fb4:	d105      	bne.n	8001fc2 <lwip_strnstr+0x34>
 8001fb6:	4632      	mov	r2, r6
 8001fb8:	4639      	mov	r1, r7
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f005 fcde 	bl	800797c <strncmp>
 8001fc0:	b108      	cbz	r0, 8001fc6 <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8001fc2:	3401      	adds	r4, #1
 8001fc4:	e7ed      	b.n	8001fa2 <lwip_strnstr+0x14>
 8001fc6:	4620      	mov	r0, r4
}
 8001fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fca <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8001fca:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 8001fcc:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8001fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d009      	beq.n	8001fec <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 8001fd8:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8001fdc:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8001fe0:	2d19      	cmp	r5, #25
 8001fe2:	d807      	bhi.n	8001ff4 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	4294      	cmp	r4, r2
 8001fea:	d103      	bne.n	8001ff4 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1ed      	bne.n	8001fcc <lwip_stricmp+0x2>
  return 0;
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd30      	pop	{r4, r5, pc}
        return 1;
 8001ff4:	2001      	movs	r0, #1
}
 8001ff6:	bd30      	pop	{r4, r5, pc}

08001ff8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8001ff8:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8001ffa:	f001 f9b7 	bl	800336c <mem_init>
  memp_init();
 8001ffe:	f001 fbc9 	bl	8003794 <memp_init>
  pbuf_init();
  netif_init();
 8002002:	f001 fc14 	bl	800382e <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8002006:	f004 ff81 	bl	8006f0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800200a:	f002 f867 	bl	80040dc <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800200e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8002012:	f004 bf2b 	b.w	8006e6c <sys_timeouts_init>
	...

08002018 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8002018:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800201a:	2618      	movs	r6, #24
 800201c:	4c07      	ldr	r4, [pc, #28]	; (800203c <etharp_free_entry+0x24>)
 800201e:	4346      	muls	r6, r0
{
 8002020:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8002022:	59a0      	ldr	r0, [r4, r6]
 8002024:	b118      	cbz	r0, 800202e <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8002026:	f001 fd2d 	bl	8003a84 <pbuf_free>
    arp_table[i].q = NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800202e:	2318      	movs	r3, #24
 8002030:	fb03 4405 	mla	r4, r3, r5, r4
 8002034:	2300      	movs	r3, #0
 8002036:	7523      	strb	r3, [r4, #20]
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	bf00      	nop
 800203c:	200004d4 	.word	0x200004d4

08002040 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8002040:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002044:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002046:	4689      	mov	r9, r1
 8002048:	4692      	mov	sl, r2
 800204a:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800204c:	4607      	mov	r7, r0
 800204e:	b930      	cbnz	r0, 800205e <etharp_raw+0x1e>
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <etharp_raw+0xc4>)
 8002052:	492d      	ldr	r1, [pc, #180]	; (8002108 <etharp_raw+0xc8>)
 8002054:	482d      	ldr	r0, [pc, #180]	; (800210c <etharp_raw+0xcc>)
 8002056:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800205a:	f005 fc69 	bl	8007930 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800205e:	2200      	movs	r2, #0
 8002060:	211c      	movs	r1, #28
 8002062:	2002      	movs	r0, #2
 8002064:	f001 fd70 	bl	8003b48 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8002068:	4606      	mov	r6, r0
 800206a:	2800      	cmp	r0, #0
 800206c:	d047      	beq.n	80020fe <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800206e:	8943      	ldrh	r3, [r0, #10]
 8002070:	2b1b      	cmp	r3, #27
 8002072:	d806      	bhi.n	8002082 <etharp_raw+0x42>
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <etharp_raw+0xc4>)
 8002076:	4926      	ldr	r1, [pc, #152]	; (8002110 <etharp_raw+0xd0>)
 8002078:	4824      	ldr	r0, [pc, #144]	; (800210c <etharp_raw+0xcc>)
 800207a:	f240 4264 	movw	r2, #1124	; 0x464
 800207e:	f005 fc57 	bl	8007930 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8002082:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8002086:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8002088:	f7ff ff7c 	bl	8001f84 <lwip_htons>
 800208c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800208e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002092:	2b06      	cmp	r3, #6
 8002094:	d006      	beq.n	80020a4 <etharp_raw+0x64>
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <etharp_raw+0xc4>)
 8002098:	491e      	ldr	r1, [pc, #120]	; (8002114 <etharp_raw+0xd4>)
 800209a:	481c      	ldr	r0, [pc, #112]	; (800210c <etharp_raw+0xcc>)
 800209c:	f240 426b 	movw	r2, #1131	; 0x46b
 80020a0:	f005 fc46 	bl	8007930 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80020a4:	f8d8 3000 	ldr.w	r3, [r8]
 80020a8:	60a3      	str	r3, [r4, #8]
 80020aa:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80020ae:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	f8c4 3012 	str.w	r3, [r4, #18]
 80020b6:	88ab      	ldrh	r3, [r5, #4]
 80020b8:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80020ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80020c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020c8:	2301      	movs	r3, #1
 80020ca:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80020cc:	2308      	movs	r3, #8
 80020ce:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80020d0:	2306      	movs	r3, #6
 80020d2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80020d4:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020d6:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 80020d8:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80020da:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020de:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80020e0:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80020e2:	464a      	mov	r2, r9
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4631      	mov	r1, r6
 80020e8:	4653      	mov	r3, sl
 80020ea:	4638      	mov	r0, r7
 80020ec:	f005 f80a 	bl	8007104 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80020f0:	4630      	mov	r0, r6
 80020f2:	f001 fcc7 	bl	8003a84 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80020f6:	4628      	mov	r0, r5
}
 80020f8:	b002      	add	sp, #8
 80020fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80020fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002102:	e7f9      	b.n	80020f8 <etharp_raw+0xb8>
 8002104:	0800982a 	.word	0x0800982a
 8002108:	08009861 	.word	0x08009861
 800210c:	08009678 	.word	0x08009678
 8002110:	0800986f 	.word	0x0800986f
 8002114:	080098a0 	.word	0x080098a0

08002118 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8002118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <etharp_find_entry.isra.0+0x100>)
 800211e:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8002120:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8002122:	4605      	mov	r5, r0
 8002124:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8002126:	4694      	mov	ip, r2
 8002128:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800212a:	4681      	mov	r9, r0
 800212c:	4680      	mov	r8, r0
 800212e:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8002130:	4696      	mov	lr, r2
 8002132:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8002134:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8002138:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800213a:	d112      	bne.n	8002162 <etharp_find_entry.isra.0+0x4a>
 800213c:	b99f      	cbnz	r7, 8002166 <etharp_find_entry.isra.0+0x4e>
      empty = i;
 800213e:	fa4f fe80 	sxtb.w	lr, r0
 8002142:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8002144:	280a      	cmp	r0, #10
 8002146:	f103 0318 	add.w	r3, r3, #24
 800214a:	d1f3      	bne.n	8002134 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800214c:	9b01      	ldr	r3, [sp, #4]
 800214e:	0799      	lsls	r1, r3, #30
 8002150:	d404      	bmi.n	800215c <etharp_find_entry.isra.0+0x44>
 8002152:	f1be 0f0a 	cmp.w	lr, #10
 8002156:	d11c      	bne.n	8002192 <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8002158:	07db      	lsls	r3, r3, #31
 800215a:	d435      	bmi.n	80021c8 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	e009      	b.n	8002176 <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8002162:	2f00      	cmp	r7, #0
 8002164:	d0ed      	beq.n	8002142 <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8002166:	2d00      	cmp	r5, #0
 8002168:	d04a      	beq.n	8002200 <etharp_find_entry.isra.0+0xe8>
 800216a:	6829      	ldr	r1, [r5, #0]
 800216c:	468a      	mov	sl, r1
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	458a      	cmp	sl, r1
 8002172:	d145      	bne.n	8002200 <etharp_find_entry.isra.0+0xe8>
        return i;
 8002174:	b240      	sxtb	r0, r0
}
 8002176:	b003      	add	sp, #12
 8002178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800217c:	45c2      	cmp	sl, r8
 800217e:	d3e0      	bcc.n	8002142 <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8002180:	fa4f fc80 	sxtb.w	ip, r0
 8002184:	46d0      	mov	r8, sl
 8002186:	e7dc      	b.n	8002142 <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8002188:	45ca      	cmp	sl, r9
            old_stable = i;
 800218a:	bf24      	itt	cs
 800218c:	b244      	sxtbcs	r4, r0
 800218e:	46d1      	movcs	r9, sl
 8002190:	e7d7      	b.n	8002142 <etharp_find_entry.isra.0+0x2a>
    i = empty;
 8002192:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8002196:	2318      	movs	r3, #24
 8002198:	fb03 6307 	mla	r3, r3, r7, r6
 800219c:	7d1b      	ldrb	r3, [r3, #20]
 800219e:	b133      	cbz	r3, 80021ae <etharp_find_entry.isra.0+0x96>
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <etharp_find_entry.isra.0+0x104>)
 80021a2:	491f      	ldr	r1, [pc, #124]	; (8002220 <etharp_find_entry.isra.0+0x108>)
 80021a4:	481f      	ldr	r0, [pc, #124]	; (8002224 <etharp_find_entry.isra.0+0x10c>)
 80021a6:	f240 1287 	movw	r2, #391	; 0x187
 80021aa:	f005 fbc1 	bl	8007930 <iprintf>
  if (ipaddr != NULL) {
 80021ae:	b125      	cbz	r5, 80021ba <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80021b0:	2318      	movs	r3, #24
 80021b2:	fb03 6307 	mla	r3, r3, r7, r6
 80021b6:	682a      	ldr	r2, [r5, #0]
 80021b8:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80021ba:	2318      	movs	r3, #24
 80021bc:	fb03 6607 	mla	r6, r3, r7, r6
 80021c0:	2300      	movs	r3, #0
 80021c2:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 80021c4:	b278      	sxtb	r0, r7
 80021c6:	e7d6      	b.n	8002176 <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 80021c8:	2c0a      	cmp	r4, #10
 80021ca:	d00f      	beq.n	80021ec <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80021cc:	2318      	movs	r3, #24
      i = old_stable;
 80021ce:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80021d0:	435c      	muls	r4, r3
 80021d2:	5933      	ldr	r3, [r6, r4]
 80021d4:	b133      	cbz	r3, 80021e4 <etharp_find_entry.isra.0+0xcc>
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <etharp_find_entry.isra.0+0x104>)
 80021d8:	4913      	ldr	r1, [pc, #76]	; (8002228 <etharp_find_entry.isra.0+0x110>)
 80021da:	4812      	ldr	r0, [pc, #72]	; (8002224 <etharp_find_entry.isra.0+0x10c>)
 80021dc:	f240 126f 	movw	r2, #367	; 0x16f
 80021e0:	f005 fba6 	bl	8007930 <iprintf>
    etharp_free_entry(i);
 80021e4:	4638      	mov	r0, r7
 80021e6:	f7ff ff17 	bl	8002018 <etharp_free_entry>
 80021ea:	e7d4      	b.n	8002196 <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80021ec:	f1bc 0f0a 	cmp.w	ip, #10
 80021f0:	d002      	beq.n	80021f8 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 80021f2:	fa5f f78c 	uxtb.w	r7, ip
 80021f6:	e7f5      	b.n	80021e4 <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80021f8:	2a0a      	cmp	r2, #10
 80021fa:	d0af      	beq.n	800215c <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 80021fc:	b2d7      	uxtb	r7, r2
 80021fe:	e7f1      	b.n	80021e4 <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8002200:	2f01      	cmp	r7, #1
 8002202:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8002206:	d1bf      	bne.n	8002188 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 8002208:	681f      	ldr	r7, [r3, #0]
 800220a:	2f00      	cmp	r7, #0
 800220c:	d0b6      	beq.n	800217c <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 800220e:	45da      	cmp	sl, fp
 8002210:	d397      	bcc.n	8002142 <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8002212:	b242      	sxtb	r2, r0
 8002214:	46d3      	mov	fp, sl
 8002216:	e794      	b.n	8002142 <etharp_find_entry.isra.0+0x2a>
 8002218:	200004d4 	.word	0x200004d4
 800221c:	0800982a 	.word	0x0800982a
 8002220:	0800974c 	.word	0x0800974c
 8002224:	08009678 	.word	0x08009678
 8002228:	08009735 	.word	0x08009735

0800222c <etharp_cleanup_netif>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	4d08      	ldr	r5, [pc, #32]	; (8002250 <etharp_cleanup_netif+0x24>)
 8002230:	4606      	mov	r6, r0
 8002232:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8002234:	7d2b      	ldrb	r3, [r5, #20]
 8002236:	b12b      	cbz	r3, 8002244 <etharp_cleanup_netif+0x18>
 8002238:	68ab      	ldr	r3, [r5, #8]
 800223a:	42b3      	cmp	r3, r6
 800223c:	d102      	bne.n	8002244 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800223e:	4620      	mov	r0, r4
 8002240:	f7ff feea 	bl	8002018 <etharp_free_entry>
 8002244:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8002246:	2c0a      	cmp	r4, #10
 8002248:	f105 0518 	add.w	r5, r5, #24
 800224c:	d1f2      	bne.n	8002234 <etharp_cleanup_netif+0x8>
}
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	200004d4 	.word	0x200004d4

08002254 <etharp_input>:
{
 8002254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002258:	4680      	mov	r8, r0
 800225a:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800225c:	460c      	mov	r4, r1
 800225e:	b949      	cbnz	r1, 8002274 <etharp_input+0x20>
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <etharp_input+0x128>)
 8002262:	4947      	ldr	r1, [pc, #284]	; (8002380 <etharp_input+0x12c>)
 8002264:	4847      	ldr	r0, [pc, #284]	; (8002384 <etharp_input+0x130>)
 8002266:	f44f 7222 	mov.w	r2, #648	; 0x288
 800226a:	f005 fb61 	bl	8007930 <iprintf>
}
 800226e:	b006      	add	sp, #24
 8002270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8002274:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8002276:	882b      	ldrh	r3, [r5, #0]
 8002278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227c:	d108      	bne.n	8002290 <etharp_input+0x3c>
 800227e:	792b      	ldrb	r3, [r5, #4]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d105      	bne.n	8002290 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8002284:	796b      	ldrb	r3, [r5, #5]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d102      	bne.n	8002290 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800228a:	886b      	ldrh	r3, [r5, #2]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d003      	beq.n	8002298 <etharp_input+0x44>
  pbuf_free(p);
 8002290:	4640      	mov	r0, r8
 8002292:	f001 fbf7 	bl	8003a84 <pbuf_free>
 8002296:	e7ea      	b.n	800226e <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8002298:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800229a:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800229e:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80022a0:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80022a2:	b116      	cbz	r6, 80022aa <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80022a4:	1b9b      	subs	r3, r3, r6
 80022a6:	425e      	negs	r6, r3
 80022a8:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80022aa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	bf14      	ite	ne
 80022b2:	f04f 0901 	movne.w	r9, #1
 80022b6:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80022ba:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80022bc:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80022c0:	d006      	beq.n	80022d0 <etharp_input+0x7c>
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <etharp_input+0x128>)
 80022c4:	4930      	ldr	r1, [pc, #192]	; (8002388 <etharp_input+0x134>)
 80022c6:	482f      	ldr	r0, [pc, #188]	; (8002384 <etharp_input+0x130>)
 80022c8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80022cc:	f005 fb30 	bl	8007930 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80022d0:	9805      	ldr	r0, [sp, #20]
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d03c      	beq.n	8002350 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80022d6:	4621      	mov	r1, r4
 80022d8:	f000 fc95 	bl	8002c06 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80022dc:	4682      	mov	sl, r0
 80022de:	bbb8      	cbnz	r0, 8002350 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 80022e0:	9b05      	ldr	r3, [sp, #20]
 80022e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80022e6:	2be0      	cmp	r3, #224	; 0xe0
 80022e8:	d032      	beq.n	8002350 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 80022ea:	4649      	mov	r1, r9
 80022ec:	a805      	add	r0, sp, #20
 80022ee:	f7ff ff13 	bl	8002118 <etharp_find_entry.isra.0>
  if (i < 0) {
 80022f2:	2800      	cmp	r0, #0
 80022f4:	db2c      	blt.n	8002350 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <etharp_input+0x138>)
 80022f8:	2218      	movs	r2, #24
 80022fa:	fb02 f100 	mul.w	r1, r2, r0
 80022fe:	eb03 0e01 	add.w	lr, r3, r1
 8002302:	f04f 0c02 	mov.w	ip, #2
 8002306:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800230a:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 800230e:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8002312:	fb12 c200 	smlabb	r2, r2, r0, ip
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	5098      	str	r0, [r3, r2]
 800231a:	eb03 0c02 	add.w	ip, r3, r2
 800231e:	88ba      	ldrh	r2, [r7, #4]
 8002320:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8002324:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8002328:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 800232c:	f1b9 0f00 	cmp.w	r9, #0
 8002330:	d00e      	beq.n	8002350 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8002332:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8002336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8002340:	463b      	mov	r3, r7
 8002342:	4649      	mov	r1, r9
 8002344:	4620      	mov	r0, r4
 8002346:	f004 fedd 	bl	8007104 <ethernet_output>
    pbuf_free(p);
 800234a:	4648      	mov	r0, r9
 800234c:	f001 fb9a 	bl	8003a84 <pbuf_free>
  switch (hdr->opcode) {
 8002350:	88eb      	ldrh	r3, [r5, #6]
 8002352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002356:	d19b      	bne.n	8002290 <etharp_input+0x3c>
    if (for_us) {
 8002358:	2e00      	cmp	r6, #0
 800235a:	d099      	beq.n	8002290 <etharp_input+0x3c>
      etharp_raw(netif,
 800235c:	2202      	movs	r2, #2
 800235e:	9203      	str	r2, [sp, #12]
 8002360:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8002362:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8002366:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8002368:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	9701      	str	r7, [sp, #4]
 800236e:	463a      	mov	r2, r7
 8002370:	4619      	mov	r1, r3
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff fe64 	bl	8002040 <etharp_raw>
 8002378:	e78a      	b.n	8002290 <etharp_input+0x3c>
 800237a:	bf00      	nop
 800237c:	0800982a 	.word	0x0800982a
 8002380:	08009861 	.word	0x08009861
 8002384:	08009678 	.word	0x08009678
 8002388:	08009794 	.word	0x08009794
 800238c:	200004d4 	.word	0x200004d4

08002390 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8002390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002392:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002394:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8002398:	9102      	str	r1, [sp, #8]
 800239a:	2401      	movs	r4, #1
 800239c:	4905      	ldr	r1, [pc, #20]	; (80023b4 <etharp_request+0x24>)
 800239e:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80023a0:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	9403      	str	r4, [sp, #12]
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <etharp_request+0x28>)
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7ff fe49 	bl	8002040 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80023ae:	b004      	add	sp, #16
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	bf00      	nop
 80023b4:	0800adcc 	.word	0x0800adcc
 80023b8:	0800ad60 	.word	0x0800ad60

080023bc <etharp_tmr>:
{
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	4c13      	ldr	r4, [pc, #76]	; (800240c <etharp_tmr+0x50>)
 80023c0:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80023c2:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80023c4:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80023c6:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80023c8:	b16a      	cbz	r2, 80023e6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80023ca:	89e3      	ldrh	r3, [r4, #14]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80023d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80023d4:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80023d6:	d203      	bcs.n	80023e0 <etharp_tmr+0x24>
 80023d8:	2a01      	cmp	r2, #1
 80023da:	d10a      	bne.n	80023f2 <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d90c      	bls.n	80023fa <etharp_tmr+0x3e>
        etharp_free_entry(i);
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7ff fe19 	bl	8002018 <etharp_free_entry>
 80023e6:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80023e8:	2d0a      	cmp	r5, #10
 80023ea:	f104 0418 	add.w	r4, r4, #24
 80023ee:	d1ea      	bne.n	80023c6 <etharp_tmr+0xa>
 80023f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80023f2:	2a03      	cmp	r2, #3
 80023f4:	d106      	bne.n	8002404 <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80023f6:	7427      	strb	r7, [r4, #16]
 80023f8:	e7f5      	b.n	80023e6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80023fa:	4621      	mov	r1, r4
 80023fc:	6860      	ldr	r0, [r4, #4]
 80023fe:	f7ff ffc7 	bl	8002390 <etharp_request>
 8002402:	e7f0      	b.n	80023e6 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8002404:	2a04      	cmp	r2, #4
 8002406:	d1ee      	bne.n	80023e6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8002408:	7426      	strb	r6, [r4, #16]
 800240a:	e7ec      	b.n	80023e6 <etharp_tmr+0x2a>
 800240c:	200004d8 	.word	0x200004d8

08002410 <etharp_output_to_arp_index>:
{
 8002410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002414:	4d27      	ldr	r5, [pc, #156]	; (80024b4 <etharp_output_to_arp_index+0xa4>)
{
 8002416:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002418:	2218      	movs	r2, #24
 800241a:	fb02 5204 	mla	r2, r2, r4, r5
{
 800241e:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002420:	7d12      	ldrb	r2, [r2, #20]
 8002422:	2a01      	cmp	r2, #1
{
 8002424:	4606      	mov	r6, r0
 8002426:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002428:	d806      	bhi.n	8002438 <etharp_output_to_arp_index+0x28>
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <etharp_output_to_arp_index+0xa8>)
 800242c:	4923      	ldr	r1, [pc, #140]	; (80024bc <etharp_output_to_arp_index+0xac>)
 800242e:	4824      	ldr	r0, [pc, #144]	; (80024c0 <etharp_output_to_arp_index+0xb0>)
 8002430:	f240 22ed 	movw	r2, #749	; 0x2ed
 8002434:	f005 fa7c 	bl	8007930 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8002438:	2118      	movs	r1, #24
 800243a:	fb01 5904 	mla	r9, r1, r4, r5
 800243e:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8002442:	f899 3014 	ldrb.w	r3, [r9, #20]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d10d      	bne.n	8002466 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800244a:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800244e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8002452:	d917      	bls.n	8002484 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8002454:	4649      	mov	r1, r9
 8002456:	3104      	adds	r1, #4
 8002458:	4630      	mov	r0, r6
 800245a:	f7ff ff99 	bl	8002390 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800245e:	b910      	cbnz	r0, 8002466 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8002460:	2303      	movs	r3, #3
 8002462:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8002466:	2318      	movs	r3, #24
 8002468:	fb03 5304 	mla	r3, r3, r4, r5
 800246c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002470:	9200      	str	r2, [sp, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	463a      	mov	r2, r7
 8002476:	4641      	mov	r1, r8
 8002478:	4630      	mov	r0, r6
 800247a:	f004 fe43 	bl	8007104 <ethernet_output>
}
 800247e:	b005      	add	sp, #20
 8002480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8002484:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002488:	d3ed      	bcc.n	8002466 <etharp_output_to_arp_index+0x56>
 800248a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800248e:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8002490:	f103 020c 	add.w	r2, r3, #12
 8002494:	3304      	adds	r3, #4
 8002496:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <etharp_output_to_arp_index+0xb4>)
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80024a0:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80024a2:	9103      	str	r1, [sp, #12]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	442a      	add	r2, r5
 80024a8:	463b      	mov	r3, r7
 80024aa:	4639      	mov	r1, r7
 80024ac:	4630      	mov	r0, r6
 80024ae:	f7ff fdc7 	bl	8002040 <etharp_raw>
 80024b2:	e7d4      	b.n	800245e <etharp_output_to_arp_index+0x4e>
 80024b4:	200004d4 	.word	0x200004d4
 80024b8:	0800982a 	.word	0x0800982a
 80024bc:	080097b8 	.word	0x080097b8
 80024c0:	08009678 	.word	0x08009678
 80024c4:	0800adcc 	.word	0x0800adcc

080024c8 <etharp_query>:
{
 80024c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80024cc:	4689      	mov	r9, r1
 80024ce:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80024d0:	4601      	mov	r1, r0
 80024d2:	f8d9 0000 	ldr.w	r0, [r9]
{
 80024d6:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80024d8:	f000 fb95 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 80024dc:	4604      	mov	r4, r0
 80024de:	2800      	cmp	r0, #0
 80024e0:	d15e      	bne.n	80025a0 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 80024e2:	f8d9 3000 	ldr.w	r3, [r9]
 80024e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80024ea:	2ae0      	cmp	r2, #224	; 0xe0
 80024ec:	d058      	beq.n	80025a0 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d056      	beq.n	80025a0 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80024f2:	2101      	movs	r1, #1
 80024f4:	4648      	mov	r0, r9
 80024f6:	f7ff fe0f 	bl	8002118 <etharp_find_entry.isra.0>
  if (i < 0) {
 80024fa:	1e05      	subs	r5, r0, #0
 80024fc:	db53      	blt.n	80025a6 <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80024fe:	4f40      	ldr	r7, [pc, #256]	; (8002600 <etharp_query+0x138>)
 8002500:	2318      	movs	r3, #24
 8002502:	fb03 7305 	mla	r3, r3, r5, r7
 8002506:	7d1a      	ldrb	r2, [r3, #20]
 8002508:	b91a      	cbnz	r2, 8002512 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800250a:	2401      	movs	r4, #1
 800250c:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 800250e:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8002512:	2318      	movs	r3, #24
 8002514:	fb03 7305 	mla	r3, r3, r5, r7
 8002518:	7d1b      	ldrb	r3, [r3, #20]
 800251a:	b933      	cbnz	r3, 800252a <etharp_query+0x62>
 800251c:	4b39      	ldr	r3, [pc, #228]	; (8002604 <etharp_query+0x13c>)
 800251e:	493a      	ldr	r1, [pc, #232]	; (8002608 <etharp_query+0x140>)
 8002520:	483a      	ldr	r0, [pc, #232]	; (800260c <etharp_query+0x144>)
 8002522:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002526:	f005 fa03 	bl	8007930 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800252a:	b90c      	cbnz	r4, 8002530 <etharp_query+0x68>
 800252c:	2e00      	cmp	r6, #0
 800252e:	d13c      	bne.n	80025aa <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8002530:	4649      	mov	r1, r9
 8002532:	4640      	mov	r0, r8
 8002534:	f7ff ff2c 	bl	8002390 <etharp_request>
    if (q == NULL) {
 8002538:	2e00      	cmp	r6, #0
 800253a:	d138      	bne.n	80025ae <etharp_query+0xe6>
}
 800253c:	b002      	add	sp, #8
 800253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8002542:	d1fb      	bne.n	800253c <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8002544:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002604 <etharp_query+0x13c>
 8002548:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002614 <etharp_query+0x14c>
 800254c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800260c <etharp_query+0x144>
 8002550:	4634      	mov	r4, r6
    while (p) {
 8002552:	b99c      	cbnz	r4, 800257c <etharp_query+0xb4>
      pbuf_ref(p);
 8002554:	4630      	mov	r0, r6
 8002556:	f001 fc4b 	bl	8003df0 <pbuf_ref>
    if (p != NULL) {
 800255a:	2e00      	cmp	r6, #0
 800255c:	d04c      	beq.n	80025f8 <etharp_query+0x130>
 800255e:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8002560:	2318      	movs	r3, #24
 8002562:	fb03 f205 	mul.w	r2, r3, r5
 8002566:	461c      	mov	r4, r3
 8002568:	58b8      	ldr	r0, [r7, r2]
 800256a:	b108      	cbz	r0, 8002570 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 800256c:	f001 fa8a 	bl	8003a84 <pbuf_free>
      arp_table[i].q = p;
 8002570:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8002574:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8002576:	f847 8003 	str.w	r8, [r7, r3]
 800257a:	e7df      	b.n	800253c <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800257c:	8962      	ldrh	r2, [r4, #10]
 800257e:	8923      	ldrh	r3, [r4, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	d108      	bne.n	8002596 <etharp_query+0xce>
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	b133      	cbz	r3, 8002596 <etharp_query+0xce>
 8002588:	4643      	mov	r3, r8
 800258a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800258e:	4649      	mov	r1, r9
 8002590:	4650      	mov	r0, sl
 8002592:	f005 f9cd 	bl	8007930 <iprintf>
      if (p->type != PBUF_ROM) {
 8002596:	7b23      	ldrb	r3, [r4, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d11e      	bne.n	80025da <etharp_query+0x112>
      p = p->next;
 800259c:	6824      	ldr	r4, [r4, #0]
 800259e:	e7d8      	b.n	8002552 <etharp_query+0x8a>
    return ERR_ARG;
 80025a0:	f06f 000f 	mvn.w	r0, #15
 80025a4:	e7ca      	b.n	800253c <etharp_query+0x74>
 80025a6:	4628      	mov	r0, r5
 80025a8:	e7c8      	b.n	800253c <etharp_query+0x74>
  err_t result = ERR_MEM;
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80025ae:	2318      	movs	r3, #24
 80025b0:	fb03 7205 	mla	r2, r3, r5, r7
 80025b4:	7d12      	ldrb	r2, [r2, #20]
 80025b6:	2a01      	cmp	r2, #1
 80025b8:	d9c3      	bls.n	8002542 <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <etharp_query+0x148>)
 80025bc:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80025be:	220c      	movs	r2, #12
 80025c0:	fb13 2305 	smlabb	r3, r3, r5, r2
 80025c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c8:	9200      	str	r2, [sp, #0]
 80025ca:	443b      	add	r3, r7
 80025cc:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80025d0:	4631      	mov	r1, r6
 80025d2:	4640      	mov	r0, r8
 80025d4:	f004 fd96 	bl	8007104 <ethernet_output>
 80025d8:	e7b0      	b.n	800253c <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80025da:	2200      	movs	r2, #0
 80025dc:	8921      	ldrh	r1, [r4, #8]
 80025de:	2002      	movs	r0, #2
 80025e0:	f001 fab2 	bl	8003b48 <pbuf_alloc>
      if (p != NULL) {
 80025e4:	4680      	mov	r8, r0
 80025e6:	b138      	cbz	r0, 80025f8 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80025e8:	4631      	mov	r1, r6
 80025ea:	f001 fc4f 	bl	8003e8c <pbuf_copy>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d0b6      	beq.n	8002560 <etharp_query+0x98>
          pbuf_free(p);
 80025f2:	4640      	mov	r0, r8
 80025f4:	f001 fa46 	bl	8003a84 <pbuf_free>
      result = ERR_MEM;
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	e79e      	b.n	800253c <etharp_query+0x74>
 80025fe:	bf00      	nop
 8002600:	200004d4 	.word	0x200004d4
 8002604:	0800982a 	.word	0x0800982a
 8002608:	080097e8 	.word	0x080097e8
 800260c:	08009678 	.word	0x08009678
 8002610:	200005c4 	.word	0x200005c4
 8002614:	08009810 	.word	0x08009810

08002618 <etharp_output>:
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	460e      	mov	r6, r1
 800261c:	b085      	sub	sp, #20
 800261e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8002620:	4604      	mov	r4, r0
 8002622:	b930      	cbnz	r0, 8002632 <etharp_output+0x1a>
 8002624:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <etharp_output+0x108>)
 8002626:	493f      	ldr	r1, [pc, #252]	; (8002724 <etharp_output+0x10c>)
 8002628:	483f      	ldr	r0, [pc, #252]	; (8002728 <etharp_output+0x110>)
 800262a:	f240 321b 	movw	r2, #795	; 0x31b
 800262e:	f005 f97f 	bl	8007930 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8002632:	b936      	cbnz	r6, 8002642 <etharp_output+0x2a>
 8002634:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <etharp_output+0x108>)
 8002636:	493d      	ldr	r1, [pc, #244]	; (800272c <etharp_output+0x114>)
 8002638:	483b      	ldr	r0, [pc, #236]	; (8002728 <etharp_output+0x110>)
 800263a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800263e:	f005 f977 	bl	8007930 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8002642:	b935      	cbnz	r5, 8002652 <etharp_output+0x3a>
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <etharp_output+0x108>)
 8002646:	493a      	ldr	r1, [pc, #232]	; (8002730 <etharp_output+0x118>)
 8002648:	4837      	ldr	r0, [pc, #220]	; (8002728 <etharp_output+0x110>)
 800264a:	f240 321d 	movw	r2, #797	; 0x31d
 800264e:	f005 f96f 	bl	8007930 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8002652:	4621      	mov	r1, r4
 8002654:	6828      	ldr	r0, [r5, #0]
 8002656:	f000 fad6 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 800265a:	2800      	cmp	r0, #0
 800265c:	d15b      	bne.n	8002716 <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800265e:	682b      	ldr	r3, [r5, #0]
 8002660:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002664:	2ae0      	cmp	r2, #224	; 0xe0
 8002666:	d11d      	bne.n	80026a4 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8002668:	2301      	movs	r3, #1
 800266a:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800266e:	235e      	movs	r3, #94	; 0x5e
 8002670:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8002674:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8002676:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800267a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800267e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8002682:	78ab      	ldrb	r3, [r5, #2]
 8002684:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8002688:	78eb      	ldrb	r3, [r5, #3]
 800268a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800268e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8002690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	4631      	mov	r1, r6
 8002698:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800269c:	4620      	mov	r0, r4
 800269e:	f004 fd31 	bl	8007104 <ethernet_output>
 80026a2:	e01f      	b.n	80026e4 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80026a4:	6862      	ldr	r2, [r4, #4]
 80026a6:	68a1      	ldr	r1, [r4, #8]
 80026a8:	405a      	eors	r2, r3
 80026aa:	420a      	tst	r2, r1
 80026ac:	d008      	beq.n	80026c0 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 80026ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80026b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80026b8:	68e3      	ldr	r3, [r4, #12]
 80026ba:	b373      	cbz	r3, 800271a <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80026bc:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80026c0:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <etharp_output+0x11c>)
 80026c2:	491d      	ldr	r1, [pc, #116]	; (8002738 <etharp_output+0x120>)
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	2018      	movs	r0, #24
 80026c8:	fb00 1002 	mla	r0, r0, r2, r1
 80026cc:	7d01      	ldrb	r1, [r0, #20]
 80026ce:	2901      	cmp	r1, #1
 80026d0:	4619      	mov	r1, r3
 80026d2:	d909      	bls.n	80026e8 <etharp_output+0xd0>
 80026d4:	682f      	ldr	r7, [r5, #0]
 80026d6:	6843      	ldr	r3, [r0, #4]
 80026d8:	429f      	cmp	r7, r3
 80026da:	d105      	bne.n	80026e8 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80026dc:	4631      	mov	r1, r6
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff fe96 	bl	8002410 <etharp_output_to_arp_index>
}
 80026e4:	b005      	add	sp, #20
 80026e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <etharp_output+0x120>)
{
 80026ea:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80026ec:	7d18      	ldrb	r0, [r3, #20]
 80026ee:	2801      	cmp	r0, #1
 80026f0:	d906      	bls.n	8002700 <etharp_output+0xe8>
 80026f2:	682f      	ldr	r7, [r5, #0]
 80026f4:	6858      	ldr	r0, [r3, #4]
 80026f6:	4287      	cmp	r7, r0
 80026f8:	d102      	bne.n	8002700 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	700a      	strb	r2, [r1, #0]
 80026fe:	e7ed      	b.n	80026dc <etharp_output+0xc4>
 8002700:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8002702:	2a0a      	cmp	r2, #10
 8002704:	f103 0318 	add.w	r3, r3, #24
 8002708:	d1f0      	bne.n	80026ec <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 800270a:	4632      	mov	r2, r6
 800270c:	4629      	mov	r1, r5
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff feda 	bl	80024c8 <etharp_query>
 8002714:	e7e6      	b.n	80026e4 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <etharp_output+0x124>)
 8002718:	e7ba      	b.n	8002690 <etharp_output+0x78>
            return ERR_RTE;
 800271a:	f06f 0003 	mvn.w	r0, #3
 800271e:	e7e1      	b.n	80026e4 <etharp_output+0xcc>
 8002720:	0800982a 	.word	0x0800982a
 8002724:	08009861 	.word	0x08009861
 8002728:	08009678 	.word	0x08009678
 800272c:	0800a20f 	.word	0x0800a20f
 8002730:	08009775 	.word	0x08009775
 8002734:	200005c4 	.word	0x200005c4
 8002738:	200004d4 	.word	0x200004d4
 800273c:	0800ad60 	.word	0x0800ad60

08002740 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	b087      	sub	sp, #28
 8002746:	460f      	mov	r7, r1
 8002748:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800274a:	2124      	movs	r1, #36	; 0x24
 800274c:	2200      	movs	r2, #0
 800274e:	2001      	movs	r0, #1
 8002750:	f001 f9fa 	bl	8003b48 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8002754:	4605      	mov	r5, r0
 8002756:	b3a0      	cbz	r0, 80027c2 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8002758:	8943      	ldrh	r3, [r0, #10]
 800275a:	2b23      	cmp	r3, #35	; 0x23
 800275c:	d806      	bhi.n	800276c <icmp_send_response.isra.0+0x2c>
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <icmp_send_response.isra.0+0x88>)
 8002760:	491a      	ldr	r1, [pc, #104]	; (80027cc <icmp_send_response.isra.0+0x8c>)
 8002762:	481b      	ldr	r0, [pc, #108]	; (80027d0 <icmp_send_response.isra.0+0x90>)
 8002764:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8002768:	f005 f8e2 	bl	8007930 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800276c:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800276e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	7123      	strb	r3, [r4, #4]
 8002774:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8002776:	71a3      	strb	r3, [r4, #6]
 8002778:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800277a:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800277c:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800277e:	4613      	mov	r3, r2
 8002780:	f104 0108 	add.w	r1, r4, #8
 8002784:	f102 001c 	add.w	r0, r2, #28
 8002788:	f853 6b04 	ldr.w	r6, [r3], #4
 800278c:	f841 6b04 	str.w	r6, [r1], #4
 8002790:	4283      	cmp	r3, r0
 8002792:	d1f9      	bne.n	8002788 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8002794:	ae06      	add	r6, sp, #24
 8002796:	68d3      	ldr	r3, [r2, #12]
 8002798:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800279c:	4630      	mov	r0, r6
 800279e:	f000 f8bb 	bl	8002918 <ip4_route>
#endif
  if (netif != NULL) {
 80027a2:	b158      	cbz	r0, 80027bc <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80027a4:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80027a6:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80027a8:	70a1      	strb	r1, [r4, #2]
 80027aa:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80027ac:	4632      	mov	r2, r6
 80027ae:	9002      	str	r0, [sp, #8]
 80027b0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80027b4:	4628      	mov	r0, r5
 80027b6:	23ff      	movs	r3, #255	; 0xff
 80027b8:	f000 fa14 	bl	8002be4 <ip4_output_if>
  }
  pbuf_free(q);
 80027bc:	4628      	mov	r0, r5
 80027be:	f001 f961 	bl	8003a84 <pbuf_free>
}
 80027c2:	b007      	add	sp, #28
 80027c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	08009948 	.word	0x08009948
 80027cc:	0800997d 	.word	0x0800997d
 80027d0:	08009678 	.word	0x08009678

080027d4 <icmp_input>:
{
 80027d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <icmp_input+0x118>)
 80027da:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 80027de:	f899 5000 	ldrb.w	r5, [r9]
 80027e2:	f005 050f 	and.w	r5, r5, #15
 80027e6:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80027e8:	2d13      	cmp	r5, #19
{
 80027ea:	b085      	sub	sp, #20
 80027ec:	4604      	mov	r4, r0
 80027ee:	4688      	mov	r8, r1
 80027f0:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 80027f2:	d92a      	bls.n	800284a <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80027f4:	8942      	ldrh	r2, [r0, #10]
 80027f6:	2a03      	cmp	r2, #3
 80027f8:	d927      	bls.n	800284a <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80027fa:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	2a08      	cmp	r2, #8
 8002800:	d123      	bne.n	800284a <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002802:	6958      	ldr	r0, [r3, #20]
 8002804:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8002808:	2ae0      	cmp	r2, #224	; 0xe0
 800280a:	d01e      	beq.n	800284a <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	f000 f9fa 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 8002812:	4606      	mov	r6, r0
 8002814:	b9c8      	cbnz	r0, 800284a <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8002816:	8923      	ldrh	r3, [r4, #8]
 8002818:	2b07      	cmp	r3, #7
 800281a:	d916      	bls.n	800284a <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800281c:	f105 010e 	add.w	r1, r5, #14
 8002820:	4620      	mov	r0, r4
 8002822:	f001 f929 	bl	8003a78 <pbuf_header>
 8002826:	2800      	cmp	r0, #0
 8002828:	d04f      	beq.n	80028ca <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800282a:	8921      	ldrh	r1, [r4, #8]
 800282c:	4429      	add	r1, r5
 800282e:	4632      	mov	r2, r6
 8002830:	b289      	uxth	r1, r1
 8002832:	2002      	movs	r0, #2
 8002834:	f001 f988 	bl	8003b48 <pbuf_alloc>
      if (r == NULL) {
 8002838:	4606      	mov	r6, r0
 800283a:	b130      	cbz	r0, 800284a <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800283c:	8942      	ldrh	r2, [r0, #10]
 800283e:	f105 0308 	add.w	r3, r5, #8
 8002842:	429a      	cmp	r2, r3
 8002844:	d207      	bcs.n	8002856 <icmp_input+0x82>
        pbuf_free(r);
 8002846:	f001 f91d 	bl	8003a84 <pbuf_free>
  pbuf_free(p);
 800284a:	4620      	mov	r0, r4
}
 800284c:	b005      	add	sp, #20
 800284e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8002852:	f001 b917 	b.w	8003a84 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8002856:	4649      	mov	r1, r9
 8002858:	462a      	mov	r2, r5
 800285a:	6840      	ldr	r0, [r0, #4]
 800285c:	f005 f855 	bl	800790a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8002860:	4269      	negs	r1, r5
 8002862:	4630      	mov	r0, r6
 8002864:	f001 f908 	bl	8003a78 <pbuf_header>
 8002868:	b138      	cbz	r0, 800287a <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <icmp_input+0x11c>)
 800286c:	4921      	ldr	r1, [pc, #132]	; (80028f4 <icmp_input+0x120>)
 800286e:	4822      	ldr	r0, [pc, #136]	; (80028f8 <icmp_input+0x124>)
 8002870:	22af      	movs	r2, #175	; 0xaf
 8002872:	f005 f85d 	bl	8007930 <iprintf>
        pbuf_free(r);
 8002876:	4630      	mov	r0, r6
 8002878:	e7e5      	b.n	8002846 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800287a:	4621      	mov	r1, r4
 800287c:	4630      	mov	r0, r6
 800287e:	f001 fb05 	bl	8003e8c <pbuf_copy>
 8002882:	2800      	cmp	r0, #0
 8002884:	d1f7      	bne.n	8002876 <icmp_input+0xa2>
      pbuf_free(p);
 8002886:	4620      	mov	r0, r4
 8002888:	f001 f8fc 	bl	8003a84 <pbuf_free>
 800288c:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 800288e:	4629      	mov	r1, r5
 8002890:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8002892:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8002894:	f001 f8f0 	bl	8003a78 <pbuf_header>
 8002898:	4602      	mov	r2, r0
 800289a:	2800      	cmp	r0, #0
 800289c:	d1d5      	bne.n	800284a <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800289e:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80028a8:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80028aa:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 80028ac:	70b0      	strb	r0, [r6, #2]
 80028ae:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80028b0:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80028b2:	7288      	strb	r0, [r1, #10]
 80028b4:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80028b6:	2101      	movs	r1, #1
 80028b8:	9101      	str	r1, [sp, #4]
 80028ba:	9000      	str	r0, [sp, #0]
 80028bc:	f8cd 8008 	str.w	r8, [sp, #8]
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <icmp_input+0x128>)
 80028c2:	4620      	mov	r0, r4
 80028c4:	f000 f98e 	bl	8002be4 <ip4_output_if>
 80028c8:	e7bf      	b.n	800284a <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80028ca:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80028ce:	31f2      	adds	r1, #242	; 0xf2
 80028d0:	b209      	sxth	r1, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	f001 f8d0 	bl	8003a78 <pbuf_header>
 80028d8:	2800      	cmp	r0, #0
 80028da:	d0d8      	beq.n	800288e <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <icmp_input+0x11c>)
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <icmp_input+0x12c>)
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <icmp_input+0x124>)
 80028e2:	22c0      	movs	r2, #192	; 0xc0
 80028e4:	f005 f824 	bl	8007930 <iprintf>
        goto icmperr;
 80028e8:	e7af      	b.n	800284a <icmp_input+0x76>
 80028ea:	bf00      	nop
 80028ec:	20000668 	.word	0x20000668
 80028f0:	08009948 	.word	0x08009948
 80028f4:	080098e1 	.word	0x080098e1
 80028f8:	08009678 	.word	0x08009678
 80028fc:	2000067c 	.word	0x2000067c
 8002900:	08009916 	.word	0x08009916

08002904 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8002904:	460a      	mov	r2, r1
 8002906:	3004      	adds	r0, #4
 8002908:	2103      	movs	r1, #3
 800290a:	f7ff bf19 	b.w	8002740 <icmp_send_response.isra.0>

0800290e <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 800290e:	460a      	mov	r2, r1
 8002910:	3004      	adds	r0, #4
 8002912:	210b      	movs	r1, #11
 8002914:	f7ff bf14 	b.w	8002740 <icmp_send_response.isra.0>

08002918 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8002918:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <ip4_route+0x50>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b96b      	cbnz	r3, 800293c <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <ip4_route+0x54>)
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	b1ea      	cbz	r2, 8002962 <ip4_route+0x4a>
 8002926:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800292a:	f001 0105 	and.w	r1, r1, #5
 800292e:	2905      	cmp	r1, #5
 8002930:	d117      	bne.n	8002962 <ip4_route+0x4a>
 8002932:	6851      	ldr	r1, [r2, #4]
 8002934:	2900      	cmp	r1, #0
 8002936:	bf18      	it	ne
 8002938:	4613      	movne	r3, r2
 800293a:	e012      	b.n	8002962 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800293c:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8002940:	f004 0205 	and.w	r2, r4, #5
 8002944:	2a05      	cmp	r2, #5
 8002946:	d1e9      	bne.n	800291c <ip4_route+0x4>
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	2a00      	cmp	r2, #0
 800294c:	d0e6      	beq.n	800291c <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800294e:	6801      	ldr	r1, [r0, #0]
 8002950:	689d      	ldr	r5, [r3, #8]
 8002952:	404a      	eors	r2, r1
 8002954:	422a      	tst	r2, r5
 8002956:	d004      	beq.n	8002962 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8002958:	07a2      	lsls	r2, r4, #30
 800295a:	d4df      	bmi.n	800291c <ip4_route+0x4>
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4291      	cmp	r1, r2
 8002960:	d1dc      	bne.n	800291c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8002962:	4618      	mov	r0, r3
 8002964:	bd30      	pop	{r4, r5, pc}
 8002966:	bf00      	nop
 8002968:	20002e2c 	.word	0x20002e2c
 800296c:	20002e30 	.word	0x20002e30

08002970 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8002970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8002974:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8002976:	f897 9000 	ldrb.w	r9, [r7]
 800297a:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800297e:	2b04      	cmp	r3, #4
{
 8002980:	4605      	mov	r5, r0
 8002982:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8002984:	d005      	beq.n	8002992 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8002986:	4628      	mov	r0, r5
 8002988:	f001 f87c 	bl	8003a84 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800298c:	2000      	movs	r0, #0
 800298e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8002992:	8878      	ldrh	r0, [r7, #2]
 8002994:	f7ff faf6 	bl	8001f84 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8002998:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 800299a:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 800299e:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 80029a0:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80029a4:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80029a6:	d903      	bls.n	80029b0 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80029a8:	4601      	mov	r1, r0
 80029aa:	4628      	mov	r0, r5
 80029ac:	f001 f9a8 	bl	8003d00 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80029b0:	896b      	ldrh	r3, [r5, #10]
 80029b2:	454b      	cmp	r3, r9
 80029b4:	d3e7      	bcc.n	8002986 <ip4_input+0x16>
 80029b6:	892b      	ldrh	r3, [r5, #8]
 80029b8:	42a3      	cmp	r3, r4
 80029ba:	d3e4      	bcc.n	8002986 <ip4_input+0x16>
 80029bc:	f1b9 0f13 	cmp.w	r9, #19
 80029c0:	d9e1      	bls.n	8002986 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4c49      	ldr	r4, [pc, #292]	; (8002aec <ip4_input+0x17c>)
 80029c6:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80029c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80029d0:	2be0      	cmp	r3, #224	; 0xe0
 80029d2:	d139      	bne.n	8002a48 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80029d4:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 80029d8:	07da      	lsls	r2, r3, #31
 80029da:	d503      	bpl.n	80029e4 <ip4_input+0x74>
 80029dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d158      	bne.n	8002a96 <ip4_input+0x126>
      netif = NULL;
 80029e4:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80029e6:	4641      	mov	r1, r8
 80029e8:	6920      	ldr	r0, [r4, #16]
 80029ea:	f000 f90c 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d1c9      	bne.n	8002986 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80029f2:	6923      	ldr	r3, [r4, #16]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80029f8:	2be0      	cmp	r3, #224	; 0xe0
 80029fa:	d0c4      	beq.n	8002986 <ip4_input+0x16>
  if (netif == NULL) {
 80029fc:	2e00      	cmp	r6, #0
 80029fe:	d0c2      	beq.n	8002986 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a06:	b133      	cbz	r3, 8002a16 <ip4_input+0xa6>
    p = ip4_reass(p);
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 fa2b 	bl	8002e64 <ip4_reass>
    if (p == NULL) {
 8002a0e:	4605      	mov	r5, r0
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d0bb      	beq.n	800298c <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8002a14:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8002a16:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8002a18:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8002a1c:	783b      	ldrb	r3, [r7, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8002a24:	f1c9 0100 	rsb	r1, r9, #0
 8002a28:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8002a2a:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8002a2c:	f001 f824 	bl	8003a78 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8002a30:	7a7b      	ldrb	r3, [r7, #9]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d03d      	beq.n	8002ab2 <ip4_input+0x142>
 8002a36:	2b11      	cmp	r3, #17
 8002a38:	d02f      	beq.n	8002a9a <ip4_input+0x12a>
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d13e      	bne.n	8002abc <ip4_input+0x14c>
      icmp_input(p, inp);
 8002a3e:	4641      	mov	r1, r8
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7ff fec7 	bl	80027d4 <icmp_input>
      break;
 8002a46:	e02c      	b.n	8002aa2 <ip4_input+0x132>
        netif = netif_list;
 8002a48:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8002af0 <ip4_input+0x180>
 8002a4c:	4646      	mov	r6, r8
 8002a4e:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002a52:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8002a56:	07db      	lsls	r3, r3, #31
 8002a58:	d404      	bmi.n	8002a64 <ip4_input+0xf4>
      if (first) {
 8002a5a:	f1ba 0f00 	cmp.w	sl, #0
 8002a5e:	d10d      	bne.n	8002a7c <ip4_input+0x10c>
        netif = netif->next;
 8002a60:	6836      	ldr	r6, [r6, #0]
 8002a62:	e010      	b.n	8002a86 <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002a64:	6873      	ldr	r3, [r6, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f7      	beq.n	8002a5a <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002a6a:	6960      	ldr	r0, [r4, #20]
 8002a6c:	4283      	cmp	r3, r0
 8002a6e:	d0ba      	beq.n	80029e6 <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8002a70:	4631      	mov	r1, r6
 8002a72:	f000 f8c8 	bl	8002c06 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d0ef      	beq.n	8002a5a <ip4_input+0xea>
 8002a7a:	e7b4      	b.n	80029e6 <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8002a7c:	7d23      	ldrb	r3, [r4, #20]
 8002a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a80:	d0b0      	beq.n	80029e4 <ip4_input+0x74>
        netif = netif_list;
 8002a82:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8002a86:	4546      	cmp	r6, r8
        netif = netif->next;
 8002a88:	bf08      	it	eq
 8002a8a:	6836      	ldreq	r6, [r6, #0]
 8002a8c:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8002a90:	2e00      	cmp	r6, #0
 8002a92:	d1de      	bne.n	8002a52 <ip4_input+0xe2>
 8002a94:	e7a6      	b.n	80029e4 <ip4_input+0x74>
 8002a96:	4646      	mov	r6, r8
 8002a98:	e7a5      	b.n	80029e6 <ip4_input+0x76>
      udp_input(p, inp);
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f004 fa37 	bl	8006f10 <udp_input>
  ip_data.current_netif = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8002aa6:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8002aa8:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8002aaa:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8002aac:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8002aae:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8002ab0:	e76c      	b.n	800298c <ip4_input+0x1c>
      tcp_input(p, inp);
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f002 fd1b 	bl	80054f0 <tcp_input>
      break;
 8002aba:	e7f2      	b.n	8002aa2 <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002abc:	4631      	mov	r1, r6
 8002abe:	6960      	ldr	r0, [r4, #20]
 8002ac0:	f000 f8a1 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 8002ac4:	b968      	cbnz	r0, 8002ae2 <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002ac6:	6963      	ldr	r3, [r4, #20]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002acc:	2be0      	cmp	r3, #224	; 0xe0
 8002ace:	d008      	beq.n	8002ae2 <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 ffd3 	bl	8003a7e <pbuf_header_force>
        p->payload = iphdr;
 8002ad8:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8002ada:	2102      	movs	r1, #2
 8002adc:	4628      	mov	r0, r5
 8002ade:	f7ff ff11 	bl	8002904 <icmp_dest_unreach>
      pbuf_free(p);
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 ffce 	bl	8003a84 <pbuf_free>
 8002ae8:	e7db      	b.n	8002aa2 <ip4_input+0x132>
 8002aea:	bf00      	nop
 8002aec:	20000668 	.word	0x20000668
 8002af0:	20002e2c 	.word	0x20002e2c

08002af4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8002af4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af8:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002afa:	89c3      	ldrh	r3, [r0, #14]
{
 8002afc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002b00:	2b01      	cmp	r3, #1
{
 8002b02:	4605      	mov	r5, r0
 8002b04:	468a      	mov	sl, r1
 8002b06:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002b08:	d006      	beq.n	8002b18 <ip4_output_if_src+0x24>
 8002b0a:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <ip4_output_if_src+0xd8>)
 8002b0c:	4930      	ldr	r1, [pc, #192]	; (8002bd0 <ip4_output_if_src+0xdc>)
 8002b0e:	4831      	ldr	r0, [pc, #196]	; (8002bd4 <ip4_output_if_src+0xe0>)
 8002b10:	f240 3233 	movw	r2, #819	; 0x333
 8002b14:	f004 ff0c 	bl	8007930 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8002b18:	2e00      	cmp	r6, #0
 8002b1a:	d047      	beq.n	8002bac <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8002b1c:	2114      	movs	r1, #20
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f000 ffaa 	bl	8003a78 <pbuf_header>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d14e      	bne.n	8002bc6 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8002b28:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8002b2a:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8002b2c:	2b13      	cmp	r3, #19
 8002b2e:	d806      	bhi.n	8002b3e <ip4_output_if_src+0x4a>
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <ip4_output_if_src+0xd8>)
 8002b32:	4929      	ldr	r1, [pc, #164]	; (8002bd8 <ip4_output_if_src+0xe4>)
 8002b34:	4827      	ldr	r0, [pc, #156]	; (8002bd4 <ip4_output_if_src+0xe0>)
 8002b36:	f240 3261 	movw	r2, #865	; 0x361
 8002b3a:	f004 fef9 	bl	8007930 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8002b3e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8002b42:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8002b44:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8002b46:	6833      	ldr	r3, [r6, #0]
 8002b48:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8002b4a:	2345      	movs	r3, #69	; 0x45
 8002b4c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8002b4e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002b52:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002b54:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002b56:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002be0 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002b5a:	f7ff fa13 	bl	8001f84 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8002b5e:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002b60:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8002b62:	71a7      	strb	r7, [r4, #6]
 8002b64:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002b66:	f8b9 0000 	ldrh.w	r0, [r9]
 8002b6a:	f7ff fa0b 	bl	8001f84 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8002b6e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002b72:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8002b74:	3301      	adds	r3, #1
 8002b76:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8002b7a:	f1ba 0f00 	cmp.w	sl, #0
 8002b7e:	d112      	bne.n	8002ba6 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <ip4_output_if_src+0xe8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8002b84:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8002b86:	72a7      	strb	r7, [r4, #10]
 8002b88:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8002b8a:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8002b8e:	b19b      	cbz	r3, 8002bb8 <ip4_output_if_src+0xc4>
 8002b90:	892a      	ldrh	r2, [r5, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8002b96:	4632      	mov	r2, r6
 8002b98:	4641      	mov	r1, r8
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 fb0c 	bl	80031b8 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8002ba0:	b002      	add	sp, #8
 8002ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8002ba6:	f8da 3000 	ldr.w	r3, [sl]
 8002baa:	e7eb      	b.n	8002b84 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8002bac:	686b      	ldr	r3, [r5, #4]
 8002bae:	ae02      	add	r6, sp, #8
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f846 3d04 	str.w	r3, [r6, #-4]!
 8002bb6:	e7e8      	b.n	8002b8a <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8002bb8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	4798      	blx	r3
 8002bc4:	e7ec      	b.n	8002ba0 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8002bc6:	f06f 0001 	mvn.w	r0, #1
 8002bca:	e7e9      	b.n	8002ba0 <ip4_output_if_src+0xac>
 8002bcc:	080099a9 	.word	0x080099a9
 8002bd0:	080099dd 	.word	0x080099dd
 8002bd4:	08009678 	.word	0x08009678
 8002bd8:	080099e9 	.word	0x080099e9
 8002bdc:	08009a18 	.word	0x08009a18
 8002be0:	200005c6 	.word	0x200005c6

08002be4 <ip4_output_if>:
{
 8002be4:	b4f0      	push	{r4, r5, r6, r7}
 8002be6:	9c06      	ldr	r4, [sp, #24]
 8002be8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8002bec:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8002bf0:	b11a      	cbz	r2, 8002bfa <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8002bf2:	b109      	cbz	r1, 8002bf8 <ip4_output_if+0x14>
 8002bf4:	680f      	ldr	r7, [r1, #0]
 8002bf6:	b907      	cbnz	r7, 8002bfa <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8002bf8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8002bfa:	9406      	str	r4, [sp, #24]
 8002bfc:	9605      	str	r6, [sp, #20]
 8002bfe:	9504      	str	r5, [sp, #16]
}
 8002c00:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8002c02:	f7ff bf77 	b.w	8002af4 <ip4_output_if_src>

08002c06 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8002c06:	1e43      	subs	r3, r0, #1
 8002c08:	3303      	adds	r3, #3
 8002c0a:	d811      	bhi.n	8002c30 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8002c0c:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8002c10:	f013 0302 	ands.w	r3, r3, #2
 8002c14:	d00e      	beq.n	8002c34 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8002c16:	684a      	ldr	r2, [r1, #4]
 8002c18:	4290      	cmp	r0, r2
 8002c1a:	d00b      	beq.n	8002c34 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8002c1c:	688b      	ldr	r3, [r1, #8]
 8002c1e:	4042      	eors	r2, r0
 8002c20:	421a      	tst	r2, r3
 8002c22:	d107      	bne.n	8002c34 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4383      	bics	r3, r0
    return 1;
 8002c28:	bf0c      	ite	eq
 8002c2a:	2001      	moveq	r0, #1
 8002c2c:	2000      	movne	r0, #0
 8002c2e:	4770      	bx	lr
 8002c30:	2001      	movs	r0, #1
 8002c32:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8002c34:	2000      	movs	r0, #0
  }
}
 8002c36:	4770      	bx	lr

08002c38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8002c38:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <ip_reass_dequeue_datagram+0x34>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4282      	cmp	r2, r0
{
 8002c40:	4604      	mov	r4, r0
 8002c42:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8002c44:	d107      	bne.n	8002c56 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8002c46:	6802      	ldr	r2, [r0, #0]
 8002c48:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	2004      	movs	r0, #4
}
 8002c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8002c52:	f000 bdc9 	b.w	80037e8 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8002c56:	b931      	cbnz	r1, 8002c66 <ip_reass_dequeue_datagram+0x2e>
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <ip_reass_dequeue_datagram+0x38>)
 8002c5a:	4906      	ldr	r1, [pc, #24]	; (8002c74 <ip_reass_dequeue_datagram+0x3c>)
 8002c5c:	4806      	ldr	r0, [pc, #24]	; (8002c78 <ip_reass_dequeue_datagram+0x40>)
 8002c5e:	f240 1245 	movw	r2, #325	; 0x145
 8002c62:	f004 fe65 	bl	8007930 <iprintf>
    prev->next = ipr->next;
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	e7ee      	b.n	8002c4a <ip_reass_dequeue_datagram+0x12>
 8002c6c:	200005cc 	.word	0x200005cc
 8002c70:	08009b01 	.word	0x08009b01
 8002c74:	08009b3a 	.word	0x08009b3a
 8002c78:	08009678 	.word	0x08009678

08002c7c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8002c7c:	4281      	cmp	r1, r0
{
 8002c7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c82:	4605      	mov	r5, r0
 8002c84:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8002c86:	d105      	bne.n	8002c94 <ip_reass_free_complete_datagram+0x18>
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <ip_reass_free_complete_datagram+0xcc>)
 8002c8a:	4930      	ldr	r1, [pc, #192]	; (8002d4c <ip_reass_free_complete_datagram+0xd0>)
 8002c8c:	4830      	ldr	r0, [pc, #192]	; (8002d50 <ip_reass_free_complete_datagram+0xd4>)
 8002c8e:	22ab      	movs	r2, #171	; 0xab
 8002c90:	f004 fe4e 	bl	8007930 <iprintf>
  if (prev != NULL) {
 8002c94:	b147      	cbz	r7, 8002ca8 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	429d      	cmp	r5, r3
 8002c9a:	d005      	beq.n	8002ca8 <ip_reass_free_complete_datagram+0x2c>
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <ip_reass_free_complete_datagram+0xcc>)
 8002c9e:	492d      	ldr	r1, [pc, #180]	; (8002d54 <ip_reass_free_complete_datagram+0xd8>)
 8002ca0:	482b      	ldr	r0, [pc, #172]	; (8002d50 <ip_reass_free_complete_datagram+0xd4>)
 8002ca2:	22ad      	movs	r2, #173	; 0xad
 8002ca4:	f004 fe44 	bl	8007930 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8002ca8:	686e      	ldr	r6, [r5, #4]
 8002caa:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8002cac:	889a      	ldrh	r2, [r3, #4]
 8002cae:	bb92      	cbnz	r2, 8002d16 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8002cb4:	f105 011c 	add.w	r1, r5, #28
 8002cb8:	f105 0208 	add.w	r2, r5, #8
 8002cbc:	f852 0b04 	ldr.w	r0, [r2], #4
 8002cc0:	f843 0b04 	str.w	r0, [r3], #4
 8002cc4:	428a      	cmp	r2, r1
 8002cc6:	d1f9      	bne.n	8002cbc <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4630      	mov	r0, r6
 8002ccc:	f7ff fe1f 	bl	800290e <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f001 f885 	bl	8003de0 <pbuf_clen>
 8002cd6:	4604      	mov	r4, r0
    pbuf_free(p);
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f000 fed3 	bl	8003a84 <pbuf_free>
  p = ipr->p;
 8002cde:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8002ce0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002d48 <ip_reass_free_complete_datagram+0xcc>
 8002ce4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002d60 <ip_reass_free_complete_datagram+0xe4>
 8002ce8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8002d50 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8002cec:	b9ae      	cbnz	r6, 8002d1a <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8002cee:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8002cf0:	4d19      	ldr	r5, [pc, #100]	; (8002d58 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8002cf2:	4639      	mov	r1, r7
 8002cf4:	f7ff ffa0 	bl	8002c38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8002cf8:	882b      	ldrh	r3, [r5, #0]
 8002cfa:	42a3      	cmp	r3, r4
 8002cfc:	d205      	bcs.n	8002d0a <ip_reass_free_complete_datagram+0x8e>
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <ip_reass_free_complete_datagram+0xcc>)
 8002d00:	4916      	ldr	r1, [pc, #88]	; (8002d5c <ip_reass_free_complete_datagram+0xe0>)
 8002d02:	4813      	ldr	r0, [pc, #76]	; (8002d50 <ip_reass_free_complete_datagram+0xd4>)
 8002d04:	22d2      	movs	r2, #210	; 0xd2
 8002d06:	f004 fe13 	bl	8007930 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8002d0a:	882b      	ldrh	r3, [r5, #0]
 8002d0c:	1b1b      	subs	r3, r3, r4
 8002d0e:	802b      	strh	r3, [r5, #0]
}
 8002d10:	4620      	mov	r0, r4
 8002d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8002d16:	2400      	movs	r4, #0
 8002d18:	e7e1      	b.n	8002cde <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8002d1a:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8002d1c:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8002d1e:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8002d22:	f001 f85d 	bl	8003de0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8002d26:	4404      	add	r4, r0
 8002d28:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8002d2c:	db05      	blt.n	8002d3a <ip_reass_free_complete_datagram+0xbe>
 8002d2e:	4643      	mov	r3, r8
 8002d30:	22cc      	movs	r2, #204	; 0xcc
 8002d32:	4649      	mov	r1, r9
 8002d34:	4650      	mov	r0, sl
 8002d36:	f004 fdfb 	bl	8007930 <iprintf>
    pbuf_free(pcur);
 8002d3a:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8002d3c:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8002d3e:	f000 fea1 	bl	8003a84 <pbuf_free>
    p = iprh->next_pbuf;
 8002d42:	465e      	mov	r6, fp
 8002d44:	e7d2      	b.n	8002cec <ip_reass_free_complete_datagram+0x70>
 8002d46:	bf00      	nop
 8002d48:	08009b01 	.word	0x08009b01
 8002d4c:	08009b53 	.word	0x08009b53
 8002d50:	08009678 	.word	0x08009678
 8002d54:	08009b5f 	.word	0x08009b5f
 8002d58:	200005c8 	.word	0x200005c8
 8002d5c:	08009b8e 	.word	0x08009b8e
 8002d60:	08009b71 	.word	0x08009b71

08002d64 <ip_reass_remove_oldest_datagram>:
{
 8002d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8002d68:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002dd8 <ip_reass_remove_oldest_datagram+0x74>
{
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8002d70:	2500      	movs	r5, #0
    other_datagrams = 0;
 8002d72:	2400      	movs	r4, #0
    r = reassdatagrams;
 8002d74:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8002d78:	4621      	mov	r1, r4
    prev = NULL;
 8002d7a:	46a6      	mov	lr, r4
    oldest = NULL;
 8002d7c:	4620      	mov	r0, r4
    while (r != NULL) {
 8002d7e:	b953      	cbnz	r3, 8002d96 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8002d80:	b110      	cbz	r0, 8002d88 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8002d82:	f7ff ff7b 	bl	8002c7c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8002d86:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8002d88:	42bd      	cmp	r5, r7
 8002d8a:	da01      	bge.n	8002d90 <ip_reass_remove_oldest_datagram+0x2c>
 8002d8c:	2c01      	cmp	r4, #1
 8002d8e:	dcf0      	bgt.n	8002d72 <ip_reass_remove_oldest_datagram+0xe>
}
 8002d90:	4628      	mov	r0, r5
 8002d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8002d96:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	4562      	cmp	r2, ip
 8002d9e:	d109      	bne.n	8002db4 <ip_reass_remove_oldest_datagram+0x50>
 8002da0:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	4562      	cmp	r2, ip
 8002da8:	d104      	bne.n	8002db4 <ip_reass_remove_oldest_datagram+0x50>
 8002daa:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8002dae:	88b2      	ldrh	r2, [r6, #4]
 8002db0:	4594      	cmp	ip, r2
 8002db2:	d008      	beq.n	8002dc6 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8002db4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8002db6:	b160      	cbz	r0, 8002dd2 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8002db8:	7fc2      	ldrb	r2, [r0, #31]
 8002dba:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8002dbe:	4594      	cmp	ip, r2
 8002dc0:	bf9c      	itt	ls
 8002dc2:	4671      	movls	r1, lr
 8002dc4:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	bf18      	it	ne
 8002dcc:	469e      	movne	lr, r3
 8002dce:	4613      	mov	r3, r2
 8002dd0:	e7d5      	b.n	8002d7e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8002dd2:	4671      	mov	r1, lr
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	e7f6      	b.n	8002dc6 <ip_reass_remove_oldest_datagram+0x62>
 8002dd8:	200005cc 	.word	0x200005cc

08002ddc <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8002ddc:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8002dde:	4604      	mov	r4, r0
 8002de0:	b930      	cbnz	r0, 8002df0 <ip_frag_free_pbuf_custom_ref+0x14>
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <ip_frag_free_pbuf_custom_ref+0x20>)
 8002de4:	4906      	ldr	r1, [pc, #24]	; (8002e00 <ip_frag_free_pbuf_custom_ref+0x24>)
 8002de6:	4807      	ldr	r0, [pc, #28]	; (8002e04 <ip_frag_free_pbuf_custom_ref+0x28>)
 8002de8:	f240 22ae 	movw	r2, #686	; 0x2ae
 8002dec:	f004 fda0 	bl	8007930 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8002df0:	4621      	mov	r1, r4
 8002df2:	2005      	movs	r0, #5
}
 8002df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8002df8:	f000 bcf6 	b.w	80037e8 <memp_free>
 8002dfc:	08009b01 	.word	0x08009b01
 8002e00:	0800a1cb 	.word	0x0800a1cb
 8002e04:	08009678 	.word	0x08009678

08002e08 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8002e08:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	b930      	cbnz	r0, 8002e1c <ipfrag_free_pbuf_custom+0x14>
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <ipfrag_free_pbuf_custom+0x28>)
 8002e10:	4908      	ldr	r1, [pc, #32]	; (8002e34 <ipfrag_free_pbuf_custom+0x2c>)
 8002e12:	4809      	ldr	r0, [pc, #36]	; (8002e38 <ipfrag_free_pbuf_custom+0x30>)
 8002e14:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8002e18:	f004 fd8a 	bl	8007930 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8002e1c:	6960      	ldr	r0, [r4, #20]
 8002e1e:	b108      	cbz	r0, 8002e24 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8002e20:	f000 fe30 	bl	8003a84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8002e24:	4620      	mov	r0, r4
}
 8002e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8002e2a:	f7ff bfd7 	b.w	8002ddc <ip_frag_free_pbuf_custom_ref>
 8002e2e:	bf00      	nop
 8002e30:	08009b01 	.word	0x08009b01
 8002e34:	08009ba9 	.word	0x08009ba9
 8002e38:	08009678 	.word	0x08009678

08002e3c <ip_reass_tmr>:
{
 8002e3c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <ip_reass_tmr+0x24>)
 8002e40:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8002e42:	2400      	movs	r4, #0
  while (r != NULL) {
 8002e44:	b900      	cbnz	r0, 8002e48 <ip_reass_tmr+0xc>
}
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8002e48:	7fc3      	ldrb	r3, [r0, #31]
 8002e4a:	6805      	ldr	r5, [r0, #0]
 8002e4c:	b123      	cbz	r3, 8002e58 <ip_reass_tmr+0x1c>
      r->timer--;
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	77c3      	strb	r3, [r0, #31]
 8002e52:	4604      	mov	r4, r0
      r = r->next;
 8002e54:	4628      	mov	r0, r5
 8002e56:	e7f5      	b.n	8002e44 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f7ff ff0f 	bl	8002c7c <ip_reass_free_complete_datagram>
 8002e5e:	e7f9      	b.n	8002e54 <ip_reass_tmr+0x18>
 8002e60:	200005cc 	.word	0x200005cc

08002e64 <ip4_reass>:
{
 8002e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8002e68:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8002e6a:	782b      	ldrb	r3, [r5, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	2b05      	cmp	r3, #5
{
 8002e72:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8002e74:	f040 808c 	bne.w	8002f90 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002e78:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8002e7a:	4cb4      	ldr	r4, [pc, #720]	; (800314c <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002e7c:	f7ff f882 	bl	8001f84 <lwip_htons>
 8002e80:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8002e84:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002e88:	8868      	ldrh	r0, [r5, #2]
 8002e8a:	f7ff f87b 	bl	8001f84 <lwip_htons>
 8002e8e:	782b      	ldrb	r3, [r5, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8002e98:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8002e9a:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002e9c:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8002e9e:	f000 ff9f 	bl	8003de0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8002ea2:	8823      	ldrh	r3, [r4, #0]
 8002ea4:	4403      	add	r3, r0
 8002ea6:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8002ea8:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8002eaa:	dc68      	bgt.n	8002f7e <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8002eac:	4ea8      	ldr	r6, [pc, #672]	; (8003150 <ip4_reass+0x2ec>)
 8002eae:	6834      	ldr	r4, [r6, #0]
 8002eb0:	2c00      	cmp	r4, #0
 8002eb2:	d172      	bne.n	8002f9a <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8002eb4:	2004      	movs	r0, #4
 8002eb6:	f000 fc7b 	bl	80037b0 <memp_malloc>
  if (ipr == NULL) {
 8002eba:	4604      	mov	r4, r0
 8002ebc:	b958      	cbnz	r0, 8002ed6 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f7ff ff4f 	bl	8002d64 <ip_reass_remove_oldest_datagram>
 8002ec6:	4582      	cmp	sl, r0
 8002ec8:	dc62      	bgt.n	8002f90 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8002eca:	2004      	movs	r0, #4
 8002ecc:	f000 fc70 	bl	80037b0 <memp_malloc>
    if (ipr == NULL)
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d05c      	beq.n	8002f90 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4620      	mov	r0, r4
 8002edc:	f004 fd20 	bl	8007920 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8002ee4:	6833      	ldr	r3, [r6, #0]
 8002ee6:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8002ee8:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8002eea:	462b      	mov	r3, r5
 8002eec:	f104 0208 	add.w	r2, r4, #8
 8002ef0:	f105 0114 	add.w	r1, r5, #20
 8002ef4:	f853 0b04 	ldr.w	r0, [r3], #4
 8002ef8:	f842 0b04 	str.w	r0, [r2], #4
 8002efc:	428b      	cmp	r3, r1
 8002efe:	d1f9      	bne.n	8002ef4 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8002f00:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8002f04:	f01b 0b20 	ands.w	fp, fp, #32
 8002f08:	d108      	bne.n	8002f1c <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	444b      	add	r3, r9
 8002f0e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8002f10:	4599      	cmp	r9, r3
 8002f12:	d83d      	bhi.n	8002f90 <ip4_reass+0x12c>
 8002f14:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d839      	bhi.n	8002f90 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8002f1c:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002f1e:	8868      	ldrh	r0, [r5, #2]
 8002f20:	f7ff f830 	bl	8001f84 <lwip_htons>
 8002f24:	f895 8000 	ldrb.w	r8, [r5]
 8002f28:	f008 080f 	and.w	r8, r8, #15
 8002f2c:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002f30:	88e8      	ldrh	r0, [r5, #6]
 8002f32:	f7ff f827 	bl	8001f84 <lwip_htons>
 8002f36:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002f3a:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002f3e:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8002f40:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8002f42:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8002f46:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8002f48:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8002f4c:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8002f4e:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8002f50:	7035      	strb	r5, [r6, #0]
 8002f52:	7075      	strb	r5, [r6, #1]
 8002f54:	70b5      	strb	r5, [r6, #2]
 8002f56:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8002f58:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8002f5a:	4672      	mov	r2, lr
  int valid = 1;
 8002f5c:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8002f60:	bb52      	cbnz	r2, 8002fb8 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8002f62:	2d00      	cmp	r5, #0
 8002f64:	f040 8092 	bne.w	800308c <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8002f68:	f1be 0f00 	cmp.w	lr, #0
 8002f6c:	d07d      	beq.n	800306a <ip4_reass+0x206>
 8002f6e:	4b79      	ldr	r3, [pc, #484]	; (8003154 <ip4_reass+0x2f0>)
 8002f70:	4979      	ldr	r1, [pc, #484]	; (8003158 <ip4_reass+0x2f4>)
 8002f72:	487a      	ldr	r0, [pc, #488]	; (800315c <ip4_reass+0x2f8>)
 8002f74:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8002f78:	f004 fcda 	bl	8007930 <iprintf>
 8002f7c:	e075      	b.n	800306a <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8002f7e:	4601      	mov	r1, r0
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7ff feef 	bl	8002d64 <ip_reass_remove_oldest_datagram>
 8002f86:	b118      	cbz	r0, 8002f90 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8002f88:	8823      	ldrh	r3, [r4, #0]
 8002f8a:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8002f8c:	2b0a      	cmp	r3, #10
 8002f8e:	dd8d      	ble.n	8002eac <ip4_reass+0x48>
  pbuf_free(p);
 8002f90:	4638      	mov	r0, r7
 8002f92:	f000 fd77 	bl	8003a84 <pbuf_free>
  return NULL;
 8002f96:	2500      	movs	r5, #0
 8002f98:	e0d4      	b.n	8003144 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8002f9a:	68eb      	ldr	r3, [r5, #12]
 8002f9c:	6962      	ldr	r2, [r4, #20]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d108      	bne.n	8002fb4 <ip4_reass+0x150>
 8002fa2:	692b      	ldr	r3, [r5, #16]
 8002fa4:	69a2      	ldr	r2, [r4, #24]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d104      	bne.n	8002fb4 <ip4_reass+0x150>
 8002faa:	89a2      	ldrh	r2, [r4, #12]
 8002fac:	88ab      	ldrh	r3, [r5, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	f000 80dc 	beq.w	800316c <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8002fb4:	6824      	ldr	r4, [r4, #0]
 8002fb6:	e77b      	b.n	8002eb0 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8002fb8:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8002fbc:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8002fc0:	4288      	cmp	r0, r1
 8002fc2:	d254      	bcs.n	800306e <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8002fc4:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8002fc6:	2d00      	cmp	r5, #0
 8002fc8:	d04d      	beq.n	8003066 <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8002fca:	88ea      	ldrh	r2, [r5, #6]
 8002fcc:	4290      	cmp	r0, r2
 8002fce:	f0c0 8091 	bcc.w	80030f4 <ip4_reass+0x290>
 8002fd2:	428b      	cmp	r3, r1
 8002fd4:	f200 808e 	bhi.w	80030f4 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8002fd8:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8002fda:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8002fdc:	f040 80e4 	bne.w	80031a8 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8002fe0:	f1bb 0f00 	cmp.w	fp, #0
 8002fe4:	d004      	beq.n	8002ff0 <ip4_reass+0x18c>
 8002fe6:	7fa3      	ldrb	r3, [r4, #30]
 8002fe8:	f013 0301 	ands.w	r3, r3, #1
 8002fec:	f000 80da 	beq.w	80031a4 <ip4_reass+0x340>
    if (valid) {
 8002ff0:	f1b8 0f00 	cmp.w	r8, #0
 8002ff4:	d159      	bne.n	80030aa <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8002ff6:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8002ffa:	4e54      	ldr	r6, [pc, #336]	; (800314c <ip4_reass+0x2e8>)
 8002ffc:	8833      	ldrh	r3, [r6, #0]
 8002ffe:	449a      	add	sl, r3
 8003000:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8003004:	f1bb 0f00 	cmp.w	fp, #0
 8003008:	d107      	bne.n	800301a <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800300a:	9b01      	ldr	r3, [sp, #4]
 800300c:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800300e:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8003010:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800301a:	f1b8 0f01 	cmp.w	r8, #1
 800301e:	d1ba      	bne.n	8002f96 <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8003020:	8ba3      	ldrh	r3, [r4, #28]
 8003022:	3314      	adds	r3, #20
 8003024:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8003026:	6863      	ldr	r3, [r4, #4]
 8003028:	685d      	ldr	r5, [r3, #4]
 800302a:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800302c:	f104 0308 	add.w	r3, r4, #8
 8003030:	462a      	mov	r2, r5
 8003032:	f104 011c 	add.w	r1, r4, #28
 8003036:	f853 0b04 	ldr.w	r0, [r3], #4
 800303a:	f842 0b04 	str.w	r0, [r2], #4
 800303e:	428b      	cmp	r3, r1
 8003040:	d1f9      	bne.n	8003036 <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8003042:	8ba0      	ldrh	r0, [r4, #28]
 8003044:	f7fe ff9e 	bl	8001f84 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8003048:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800304a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800304c:	71ab      	strb	r3, [r5, #6]
 800304e:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8003050:	72ab      	strb	r3, [r5, #10]
 8003052:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8003054:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8003056:	2f00      	cmp	r7, #0
 8003058:	d157      	bne.n	800310a <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <ip4_reass+0x2ec>)
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	428c      	cmp	r4, r1
 8003060:	d165      	bne.n	800312e <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8003062:	4639      	mov	r1, r7
 8003064:	e065      	b.n	8003132 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8003066:	428b      	cmp	r3, r1
 8003068:	d844      	bhi.n	80030f4 <ip4_reass+0x290>
      ipr->p = new_p;
 800306a:	6067      	str	r7, [r4, #4]
 800306c:	e7b8      	b.n	8002fe0 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800306e:	d041      	beq.n	80030f4 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8003070:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003074:	4282      	cmp	r2, r0
 8003076:	d83d      	bhi.n	80030f4 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8003078:	b125      	cbz	r5, 8003084 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800307a:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 800307c:	428a      	cmp	r2, r1
 800307e:	bf18      	it	ne
 8003080:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8003084:	f8dc 2000 	ldr.w	r2, [ip]
 8003088:	4665      	mov	r5, ip
 800308a:	e769      	b.n	8002f60 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800308c:	88eb      	ldrh	r3, [r5, #6]
 800308e:	4283      	cmp	r3, r0
 8003090:	d906      	bls.n	80030a0 <ip4_reass+0x23c>
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <ip4_reass+0x2f0>)
 8003094:	4932      	ldr	r1, [pc, #200]	; (8003160 <ip4_reass+0x2fc>)
 8003096:	4831      	ldr	r0, [pc, #196]	; (800315c <ip4_reass+0x2f8>)
 8003098:	f240 12ab 	movw	r2, #427	; 0x1ab
 800309c:	f004 fc48 	bl	8007930 <iprintf>
      iprh_prev->next_pbuf = new_p;
 80030a0:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80030a2:	88ea      	ldrh	r2, [r5, #6]
 80030a4:	88b3      	ldrh	r3, [r6, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	e798      	b.n	8002fdc <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80030aa:	6863      	ldr	r3, [r4, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0a2      	beq.n	8002ff6 <ip4_reass+0x192>
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	888b      	ldrh	r3, [r1, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d19e      	bne.n	8002ff6 <ip4_reass+0x192>
        q = iprh->next_pbuf;
 80030b8:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80030ba:	b99b      	cbnz	r3, 80030e4 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 80030bc:	42b1      	cmp	r1, r6
 80030be:	d106      	bne.n	80030ce <ip4_reass+0x26a>
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <ip4_reass+0x2f0>)
 80030c2:	4928      	ldr	r1, [pc, #160]	; (8003164 <ip4_reass+0x300>)
 80030c4:	4825      	ldr	r0, [pc, #148]	; (800315c <ip4_reass+0x2f8>)
 80030c6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80030ca:	f004 fc31 	bl	8007930 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80030ce:	6833      	ldr	r3, [r6, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d092      	beq.n	8002ffa <ip4_reass+0x196>
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <ip4_reass+0x2f0>)
 80030d6:	4924      	ldr	r1, [pc, #144]	; (8003168 <ip4_reass+0x304>)
 80030d8:	4820      	ldr	r0, [pc, #128]	; (800315c <ip4_reass+0x2f8>)
 80030da:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80030de:	f004 fc27 	bl	8007930 <iprintf>
 80030e2:	e78a      	b.n	8002ffa <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 80030e4:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80030e6:	88f0      	ldrh	r0, [r6, #6]
 80030e8:	8893      	ldrh	r3, [r2, #4]
 80030ea:	4298      	cmp	r0, r3
 80030ec:	d183      	bne.n	8002ff6 <ip4_reass+0x192>
          q = iprh->next_pbuf;
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	4616      	mov	r6, r2
 80030f2:	e7e2      	b.n	80030ba <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80030f4:	4638      	mov	r0, r7
 80030f6:	f000 fe73 	bl	8003de0 <pbuf_clen>
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <ip4_reass+0x2e8>)
 80030fc:	8813      	ldrh	r3, [r2, #0]
 80030fe:	1a18      	subs	r0, r3, r0
 8003100:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8003102:	4638      	mov	r0, r7
 8003104:	f000 fcbe 	bl	8003a84 <pbuf_free>
 8003108:	e742      	b.n	8002f90 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800310a:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 800310e:	f06f 0113 	mvn.w	r1, #19
 8003112:	4638      	mov	r0, r7
 8003114:	f000 fcb0 	bl	8003a78 <pbuf_header>
      pbuf_cat(p, r);
 8003118:	4639      	mov	r1, r7
 800311a:	4628      	mov	r0, r5
 800311c:	f000 fe7c 	bl	8003e18 <pbuf_cat>
      r = iprh->next_pbuf;
 8003120:	f8d8 7000 	ldr.w	r7, [r8]
 8003124:	e797      	b.n	8003056 <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8003126:	680b      	ldr	r3, [r1, #0]
 8003128:	429c      	cmp	r4, r3
 800312a:	d002      	beq.n	8003132 <ip4_reass+0x2ce>
 800312c:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800312e:	2900      	cmp	r1, #0
 8003130:	d1f9      	bne.n	8003126 <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8003132:	4620      	mov	r0, r4
 8003134:	f7ff fd80 	bl	8002c38 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8003138:	4628      	mov	r0, r5
 800313a:	f000 fe51 	bl	8003de0 <pbuf_clen>
 800313e:	8833      	ldrh	r3, [r6, #0]
 8003140:	1a18      	subs	r0, r3, r0
 8003142:	8030      	strh	r0, [r6, #0]
}
 8003144:	4628      	mov	r0, r5
 8003146:	b003      	add	sp, #12
 8003148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314c:	200005c8 	.word	0x200005c8
 8003150:	200005cc 	.word	0x200005cc
 8003154:	08009b01 	.word	0x08009b01
 8003158:	08009a9b 	.word	0x08009a9b
 800315c:	08009678 	.word	0x08009678
 8003160:	08009a7d 	.word	0x08009a7d
 8003164:	08009ad2 	.word	0x08009ad2
 8003168:	08009adf 	.word	0x08009adf
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800316c:	88e8      	ldrh	r0, [r5, #6]
 800316e:	f7fe ff09 	bl	8001f84 <lwip_htons>
 8003172:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003176:	2800      	cmp	r0, #0
 8003178:	f47f aec2 	bne.w	8002f00 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800317c:	89e0      	ldrh	r0, [r4, #14]
 800317e:	f7fe ff01 	bl	8001f84 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8003182:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003186:	2800      	cmp	r0, #0
 8003188:	f43f aeba 	beq.w	8002f00 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800318c:	462b      	mov	r3, r5
 800318e:	f104 0208 	add.w	r2, r4, #8
 8003192:	f105 0114 	add.w	r1, r5, #20
 8003196:	f853 0b04 	ldr.w	r0, [r3], #4
 800319a:	f842 0b04 	str.w	r0, [r2], #4
 800319e:	428b      	cmp	r3, r1
 80031a0:	d1f9      	bne.n	8003196 <ip4_reass+0x332>
 80031a2:	e6ad      	b.n	8002f00 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80031a4:	4698      	mov	r8, r3
 80031a6:	e728      	b.n	8002ffa <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80031a8:	f1bb 0f00 	cmp.w	fp, #0
 80031ac:	f43f af23 	beq.w	8002ff6 <ip4_reass+0x192>
 80031b0:	f04f 0800 	mov.w	r8, #0
 80031b4:	e717      	b.n	8002fe6 <ip4_reass+0x182>
 80031b6:	bf00      	nop

080031b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80031b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80031bc:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 80031c0:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80031c2:	2308      	movs	r3, #8
 80031c4:	f1a8 0814 	sub.w	r8, r8, #20
 80031c8:	fb98 f8f3 	sdiv	r8, r8, r3
 80031cc:	fa1f f388 	uxth.w	r3, r8
 80031d0:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80031d2:	6843      	ldr	r3, [r0, #4]
{
 80031d4:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80031d6:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80031d8:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80031da:	f006 060f 	and.w	r6, r6, #15
 80031de:	00b6      	lsls	r6, r6, #2
 80031e0:	2e14      	cmp	r6, #20
{
 80031e2:	4607      	mov	r7, r0
 80031e4:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80031e6:	d00b      	beq.n	8003200 <ip4_frag+0x48>
 80031e8:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <ip4_frag+0x19c>)
 80031ea:	495b      	ldr	r1, [pc, #364]	; (8003358 <ip4_frag+0x1a0>)
 80031ec:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80031f0:	485a      	ldr	r0, [pc, #360]	; (800335c <ip4_frag+0x1a4>)
 80031f2:	f004 fb9d 	bl	8007930 <iprintf>
 80031f6:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80031fa:	b00b      	add	sp, #44	; 0x2c
 80031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8003200:	9b02      	ldr	r3, [sp, #8]
 8003202:	88d8      	ldrh	r0, [r3, #6]
 8003204:	f7fe febe 	bl	8001f84 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8003208:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800320c:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8003210:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8003212:	d004      	beq.n	800321e <ip4_frag+0x66>
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <ip4_frag+0x19c>)
 8003216:	4952      	ldr	r1, [pc, #328]	; (8003360 <ip4_frag+0x1a8>)
 8003218:	f240 22e6 	movw	r2, #742	; 0x2e6
 800321c:	e7e8      	b.n	80031f0 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 800321e:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8003220:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8003224:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8003226:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800322a:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800322c:	9307      	str	r3, [sp, #28]
  while (left) {
 800322e:	b90d      	cbnz	r5, 8003234 <ip4_frag+0x7c>
  return ERR_OK;
 8003230:	4628      	mov	r0, r5
 8003232:	e7e2      	b.n	80031fa <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8003234:	9b07      	ldr	r3, [sp, #28]
 8003236:	42ab      	cmp	r3, r5
 8003238:	bfa8      	it	ge
 800323a:	462b      	movge	r3, r5
 800323c:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800323e:	2200      	movs	r2, #0
 8003240:	2114      	movs	r1, #20
 8003242:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8003244:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8003246:	f000 fc7f 	bl	8003b48 <pbuf_alloc>
    if (rambuf == NULL) {
 800324a:	4680      	mov	r8, r0
 800324c:	b370      	cbz	r0, 80032ac <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	2b13      	cmp	r3, #19
 8003252:	d806      	bhi.n	8003262 <ip4_frag+0xaa>
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <ip4_frag+0x19c>)
 8003256:	4943      	ldr	r1, [pc, #268]	; (8003364 <ip4_frag+0x1ac>)
 8003258:	4840      	ldr	r0, [pc, #256]	; (800335c <ip4_frag+0x1a4>)
 800325a:	f240 3209 	movw	r2, #777	; 0x309
 800325e:	f004 fb67 	bl	8007930 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003268:	4619      	mov	r1, r3
 800326a:	3114      	adds	r1, #20
 800326c:	f853 0b04 	ldr.w	r0, [r3], #4
 8003270:	f842 0b04 	str.w	r0, [r2], #4
 8003274:	428b      	cmp	r3, r1
 8003276:	d1f9      	bne.n	800326c <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8003278:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800327c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8003280:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8003282:	f1b9 0f00 	cmp.w	r9, #0
 8003286:	d037      	beq.n	80032f8 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8003288:	897c      	ldrh	r4, [r7, #10]
 800328a:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800328c:	b2a4      	uxth	r4, r4
 800328e:	454c      	cmp	r4, r9
 8003290:	bf28      	it	cs
 8003292:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8003294:	b914      	cbnz	r4, 800329c <ip4_frag+0xe4>
        p = p->next;
 8003296:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8003298:	2600      	movs	r6, #0
 800329a:	e7f2      	b.n	8003282 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800329c:	2005      	movs	r0, #5
 800329e:	f000 fa87 	bl	80037b0 <memp_malloc>
      if (pcr == NULL) {
 80032a2:	4682      	mov	sl, r0
 80032a4:	b928      	cbnz	r0, 80032b2 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 80032a6:	4640      	mov	r0, r8
 80032a8:	f000 fbec 	bl	8003a84 <pbuf_free>
  return ERR_MEM;
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	e7a3      	b.n	80031fa <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80032b2:	9401      	str	r4, [sp, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4433      	add	r3, r6
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	4603      	mov	r3, r0
 80032be:	4621      	mov	r1, r4
 80032c0:	2004      	movs	r0, #4
 80032c2:	f000 fba1 	bl	8003a08 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80032c6:	b918      	cbnz	r0, 80032d0 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 80032c8:	4650      	mov	r0, sl
 80032ca:	f7ff fd87 	bl	8002ddc <ip_frag_free_pbuf_custom_ref>
 80032ce:	e7ea      	b.n	80032a6 <ip4_frag+0xee>
 80032d0:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 80032d2:	4638      	mov	r0, r7
 80032d4:	f000 fd8c 	bl	8003df0 <pbuf_ref>
      left_to_copy -= newpbuflen;
 80032d8:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <ip4_frag+0x1b0>)
      pcr->original = p;
 80032de:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80032e2:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80032e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032e8:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80032ea:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80032ee:	f000 fd93 	bl	8003e18 <pbuf_cat>
      if (left_to_copy) {
 80032f2:	f1b9 0f00 	cmp.w	r9, #0
 80032f6:	d1ce      	bne.n	8003296 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 80032f8:	9b04      	ldr	r3, [sp, #16]
 80032fa:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80032fe:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8003302:	3b13      	subs	r3, #19
    if (!last) {
 8003304:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8003306:	bfa8      	it	ge
 8003308:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800330c:	f7fe fe3a 	bl	8001f84 <lwip_htons>
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8003314:	9b05      	ldr	r3, [sp, #20]
 8003316:	f103 0014 	add.w	r0, r3, #20
 800331a:	b280      	uxth	r0, r0
 800331c:	f7fe fe32 	bl	8001f84 <lwip_htons>
 8003320:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8003322:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8003324:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8003326:	2300      	movs	r3, #0
 8003328:	7293      	strb	r3, [r2, #10]
 800332a:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800332c:	4641      	mov	r1, r8
 800332e:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003332:	9a08      	ldr	r2, [sp, #32]
 8003334:	4658      	mov	r0, fp
 8003336:	4798      	blx	r3
    pbuf_free(rambuf);
 8003338:	4640      	mov	r0, r8
 800333a:	f000 fba3 	bl	8003a84 <pbuf_free>
    left -= fragsize;
 800333e:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8003340:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8003342:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8003344:	9b04      	ldr	r3, [sp, #16]
 8003346:	4413      	add	r3, r2
    poff += newpbuflen;
 8003348:	4426      	add	r6, r4
    ofo += nfb;
 800334a:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 800334c:	b2b6      	uxth	r6, r6
    left -= fragsize;
 800334e:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	e76c      	b.n	800322e <ip4_frag+0x76>
 8003354:	08009b01 	.word	0x08009b01
 8003358:	08009a1c 	.word	0x08009a1c
 800335c:	08009678 	.word	0x08009678
 8003360:	08009a43 	.word	0x08009a43
 8003364:	08009a5d 	.word	0x08009a5d
 8003368:	08002e09 	.word	0x08002e09

0800336c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <mem_init+0x30>)
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <mem_init+0x34>)
 8003370:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8003374:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003376:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8003378:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 800337a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 800337e:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003380:	4908      	ldr	r1, [pc, #32]	; (80033a4 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8003382:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003384:	1898      	adds	r0, r3, r2
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8003386:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800338a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800338e:	4a06      	ldr	r2, [pc, #24]	; (80033a8 <mem_init+0x3c>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003390:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8003392:	2101      	movs	r1, #1
 8003394:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4770      	bx	lr
 800339c:	20000683 	.word	0x20000683
 80033a0:	200005d4 	.word	0x200005d4
 80033a4:	200005d8 	.word	0x200005d8
 80033a8:	200005d0 	.word	0x200005d0

080033ac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80033ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80033b0:	4604      	mov	r4, r0
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f000 8088 	beq.w	80034c8 <mem_free+0x11c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80033b8:	0783      	lsls	r3, r0, #30
 80033ba:	d006      	beq.n	80033ca <mem_free+0x1e>
 80033bc:	4b43      	ldr	r3, [pc, #268]	; (80034cc <mem_free+0x120>)
 80033be:	4944      	ldr	r1, [pc, #272]	; (80034d0 <mem_free+0x124>)
 80033c0:	4844      	ldr	r0, [pc, #272]	; (80034d4 <mem_free+0x128>)
 80033c2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80033c6:	f004 fab3 	bl	8007930 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80033ca:	4f43      	ldr	r7, [pc, #268]	; (80034d8 <mem_free+0x12c>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d303      	bcc.n	80033da <mem_free+0x2e>
 80033d2:	4b42      	ldr	r3, [pc, #264]	; (80034dc <mem_free+0x130>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429c      	cmp	r4, r3
 80033d8:	d306      	bcc.n	80033e8 <mem_free+0x3c>
 80033da:	4b3c      	ldr	r3, [pc, #240]	; (80034cc <mem_free+0x120>)
 80033dc:	4940      	ldr	r1, [pc, #256]	; (80034e0 <mem_free+0x134>)
 80033de:	483d      	ldr	r0, [pc, #244]	; (80034d4 <mem_free+0x128>)
 80033e0:	f240 12af 	movw	r2, #431	; 0x1af
 80033e4:	f004 faa4 	bl	8007930 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	429c      	cmp	r4, r3
 80033ec:	d36c      	bcc.n	80034c8 <mem_free+0x11c>
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <mem_free+0x130>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4294      	cmp	r4, r2
 80033f4:	4698      	mov	r8, r3
 80033f6:	d267      	bcs.n	80034c8 <mem_free+0x11c>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80033f8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80033fc:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003400:	b933      	cbnz	r3, 8003410 <mem_free+0x64>
 8003402:	4b32      	ldr	r3, [pc, #200]	; (80034cc <mem_free+0x120>)
 8003404:	4937      	ldr	r1, [pc, #220]	; (80034e4 <mem_free+0x138>)
 8003406:	4833      	ldr	r0, [pc, #204]	; (80034d4 <mem_free+0x128>)
 8003408:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800340c:	f004 fa90 	bl	8007930 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8003410:	4e35      	ldr	r6, [pc, #212]	; (80034e8 <mem_free+0x13c>)
  mem->used = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800341c:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800341e:	bf38      	it	cc
 8003420:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003422:	429d      	cmp	r5, r3
 8003424:	d206      	bcs.n	8003434 <mem_free+0x88>
 8003426:	4b29      	ldr	r3, [pc, #164]	; (80034cc <mem_free+0x120>)
 8003428:	4930      	ldr	r1, [pc, #192]	; (80034ec <mem_free+0x140>)
 800342a:	482a      	ldr	r0, [pc, #168]	; (80034d4 <mem_free+0x128>)
 800342c:	f240 125d 	movw	r2, #349	; 0x15d
 8003430:	f004 fa7e 	bl	8007930 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003434:	f8d8 3000 	ldr.w	r3, [r8]
 8003438:	429d      	cmp	r5, r3
 800343a:	d306      	bcc.n	800344a <mem_free+0x9e>
 800343c:	4b23      	ldr	r3, [pc, #140]	; (80034cc <mem_free+0x120>)
 800343e:	492c      	ldr	r1, [pc, #176]	; (80034f0 <mem_free+0x144>)
 8003440:	4824      	ldr	r0, [pc, #144]	; (80034d4 <mem_free+0x128>)
 8003442:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003446:	f004 fa73 	bl	8007930 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800344a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800344e:	b133      	cbz	r3, 800345e <mem_free+0xb2>
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <mem_free+0x120>)
 8003452:	4928      	ldr	r1, [pc, #160]	; (80034f4 <mem_free+0x148>)
 8003454:	481f      	ldr	r0, [pc, #124]	; (80034d4 <mem_free+0x128>)
 8003456:	f240 125f 	movw	r2, #351	; 0x15f
 800345a:	f004 fa69 	bl	8007930 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800345e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8003462:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003466:	d906      	bls.n	8003476 <mem_free+0xca>
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <mem_free+0x120>)
 800346a:	4923      	ldr	r1, [pc, #140]	; (80034f8 <mem_free+0x14c>)
 800346c:	4819      	ldr	r0, [pc, #100]	; (80034d4 <mem_free+0x128>)
 800346e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003472:	f004 fa5d 	bl	8007930 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800347c:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800347e:	4295      	cmp	r5, r2
 8003480:	d010      	beq.n	80034a4 <mem_free+0xf8>
 8003482:	7910      	ldrb	r0, [r2, #4]
 8003484:	b970      	cbnz	r0, 80034a4 <mem_free+0xf8>
 8003486:	f8d8 0000 	ldr.w	r0, [r8]
 800348a:	4282      	cmp	r2, r0
 800348c:	d00a      	beq.n	80034a4 <mem_free+0xf8>
    if (lfree == nmem) {
 800348e:	6830      	ldr	r0, [r6, #0]
 8003490:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8003492:	5a5a      	ldrh	r2, [r3, r1]
 8003494:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003498:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800349a:	bf08      	it	eq
 800349c:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800349e:	441a      	add	r2, r3
 80034a0:	1ae9      	subs	r1, r5, r3
 80034a2:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80034a4:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80034a8:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80034aa:	428d      	cmp	r5, r1
 80034ac:	d00c      	beq.n	80034c8 <mem_free+0x11c>
 80034ae:	7908      	ldrb	r0, [r1, #4]
 80034b0:	b950      	cbnz	r0, 80034c8 <mem_free+0x11c>
    if (lfree == mem) {
 80034b2:	6830      	ldr	r0, [r6, #0]
 80034b4:	4285      	cmp	r5, r0
      lfree = pmem;
 80034b6:	bf08      	it	eq
 80034b8:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80034ba:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80034be:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80034c0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80034c4:	440b      	add	r3, r1
 80034c6:	805a      	strh	r2, [r3, #2]
 80034c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034cc:	08009bb5 	.word	0x08009bb5
 80034d0:	08009be4 	.word	0x08009be4
 80034d4:	08009678 	.word	0x08009678
 80034d8:	200005d4 	.word	0x200005d4
 80034dc:	200005d8 	.word	0x200005d8
 80034e0:	08009c05 	.word	0x08009c05
 80034e4:	08009c1c 	.word	0x08009c1c
 80034e8:	200005d0 	.word	0x200005d0
 80034ec:	08009c30 	.word	0x08009c30
 80034f0:	08009c47 	.word	0x08009c47
 80034f4:	08009c61 	.word	0x08009c61
 80034f8:	08009c7c 	.word	0x08009c7c

080034fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80034fe:	3103      	adds	r1, #3
 8003500:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8003504:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8003506:	2d0b      	cmp	r5, #11
{
 8003508:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 800350a:	d904      	bls.n	8003516 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800350c:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8003510:	d902      	bls.n	8003518 <mem_trim+0x1c>
    return NULL;
 8003512:	2400      	movs	r4, #0
 8003514:	e059      	b.n	80035ca <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 8003516:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003518:	4e2d      	ldr	r6, [pc, #180]	; (80035d0 <mem_trim+0xd4>)
 800351a:	6832      	ldr	r2, [r6, #0]
 800351c:	42a2      	cmp	r2, r4
 800351e:	d803      	bhi.n	8003528 <mem_trim+0x2c>
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <mem_trim+0xd8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429c      	cmp	r4, r3
 8003526:	d306      	bcc.n	8003536 <mem_trim+0x3a>
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <mem_trim+0xdc>)
 800352a:	492c      	ldr	r1, [pc, #176]	; (80035dc <mem_trim+0xe0>)
 800352c:	482c      	ldr	r0, [pc, #176]	; (80035e0 <mem_trim+0xe4>)
 800352e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003532:	f004 f9fd 	bl	8007930 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003536:	6833      	ldr	r3, [r6, #0]
 8003538:	429c      	cmp	r4, r3
 800353a:	d346      	bcc.n	80035ca <mem_trim+0xce>
 800353c:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <mem_trim+0xd8>)
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	4294      	cmp	r4, r2
 8003542:	d242      	bcs.n	80035ca <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003544:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003548:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800354c:	1ad2      	subs	r2, r2, r3
 800354e:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003550:	f1a0 0108 	sub.w	r1, r0, #8
 8003554:	1a89      	subs	r1, r1, r2
 8003556:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003558:	42a9      	cmp	r1, r5
 800355a:	d219      	bcs.n	8003590 <mem_trim+0x94>
 800355c:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <mem_trim+0xdc>)
 800355e:	4921      	ldr	r1, [pc, #132]	; (80035e4 <mem_trim+0xe8>)
 8003560:	481f      	ldr	r0, [pc, #124]	; (80035e0 <mem_trim+0xe4>)
 8003562:	f240 2206 	movw	r2, #518	; 0x206
 8003566:	f004 f9e3 	bl	8007930 <iprintf>
 800356a:	e7d2      	b.n	8003512 <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800356c:	f105 0614 	add.w	r6, r5, #20
 8003570:	428e      	cmp	r6, r1
 8003572:	d82a      	bhi.n	80035ca <mem_trim+0xce>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8003574:	4e1c      	ldr	r6, [pc, #112]	; (80035e8 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003576:	f102 0108 	add.w	r1, r2, #8
 800357a:	440d      	add	r5, r1
    if (mem2 < lfree) {
 800357c:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800357e:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003580:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8003582:	42b9      	cmp	r1, r7
      lfree = mem2;
 8003584:	bf38      	it	cc
 8003586:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 8003588:	2600      	movs	r6, #0
 800358a:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 800358c:	5358      	strh	r0, [r3, r5]
 800358e:	e013      	b.n	80035b8 <mem_trim+0xbc>
  if (newsize == size) {
 8003590:	d01b      	beq.n	80035ca <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003592:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 8003594:	7937      	ldrb	r7, [r6, #4]
 8003596:	2f00      	cmp	r7, #0
 8003598:	d1e8      	bne.n	800356c <mem_trim+0x70>
    next = mem2->next;
 800359a:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 800359c:	4812      	ldr	r0, [pc, #72]	; (80035e8 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800359e:	f102 0108 	add.w	r1, r2, #8
 80035a2:	440d      	add	r5, r1
    if (lfree == mem2) {
 80035a4:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80035a6:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 80035a8:	428e      	cmp	r6, r1
 80035aa:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 80035ae:	bf08      	it	eq
 80035b0:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 80035b2:	2000      	movs	r0, #0
 80035b4:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 80035b6:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 80035b8:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 80035ba:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80035be:	5b5a      	ldrh	r2, [r3, r5]
 80035c0:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80035c4:	d001      	beq.n	80035ca <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80035c6:	4413      	add	r3, r2
 80035c8:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80035ca:	4620      	mov	r0, r4
 80035cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200005d4 	.word	0x200005d4
 80035d4:	200005d8 	.word	0x200005d8
 80035d8:	08009bb5 	.word	0x08009bb5
 80035dc:	08009d41 	.word	0x08009d41
 80035e0:	08009678 	.word	0x08009678
 80035e4:	08009d58 	.word	0x08009d58
 80035e8:	200005d0 	.word	0x200005d0

080035ec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80035f0:	b148      	cbz	r0, 8003606 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80035f2:	3003      	adds	r0, #3
 80035f4:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80035f8:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 80035fa:	2d0b      	cmp	r5, #11
 80035fc:	d905      	bls.n	800360a <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80035fe:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8003602:	d903      	bls.n	800360c <mem_malloc+0x20>
    return NULL;
 8003604:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8003606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 800360a:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800360c:	4837      	ldr	r0, [pc, #220]	; (80036ec <mem_malloc+0x100>)
 800360e:	4e38      	ldr	r6, [pc, #224]	; (80036f0 <mem_malloc+0x104>)
 8003610:	6807      	ldr	r7, [r0, #0]
 8003612:	6831      	ldr	r1, [r6, #0]
 8003614:	1a7b      	subs	r3, r7, r1
 8003616:	b29b      	uxth	r3, r3
 8003618:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800361c:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003620:	4543      	cmp	r3, r8
 8003622:	d2ef      	bcs.n	8003604 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8003624:	18cc      	adds	r4, r1, r3
 8003626:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 800362a:	f894 c004 	ldrb.w	ip, [r4, #4]
 800362e:	f1bc 0f00 	cmp.w	ip, #0
 8003632:	d158      	bne.n	80036e6 <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003634:	eba9 0203 	sub.w	r2, r9, r3
 8003638:	4472      	add	r2, lr
      if ((!mem->used) &&
 800363a:	4295      	cmp	r5, r2
 800363c:	d853      	bhi.n	80036e6 <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800363e:	f105 0814 	add.w	r8, r5, #20
 8003642:	4542      	cmp	r2, r8
 8003644:	d349      	bcc.n	80036da <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8003646:	f105 0208 	add.w	r2, r5, #8
 800364a:	441a      	add	r2, r3
 800364c:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800364e:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8003652:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 8003656:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 800365a:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 800365e:	2301      	movs	r3, #1
          mem->next = ptr2;
 8003660:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8003662:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003664:	5a8b      	ldrh	r3, [r1, r2]
 8003666:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800366a:	d001      	beq.n	8003670 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800366c:	4419      	add	r1, r3
 800366e:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8003670:	42a7      	cmp	r7, r4
 8003672:	4f20      	ldr	r7, [pc, #128]	; (80036f4 <mem_malloc+0x108>)
 8003674:	d111      	bne.n	800369a <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 8003676:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8003678:	6836      	ldr	r6, [r6, #0]
 800367a:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800367c:	791a      	ldrb	r2, [r3, #4]
 800367e:	b10a      	cbz	r2, 8003684 <mem_malloc+0x98>
 8003680:	428b      	cmp	r3, r1
 8003682:	d12d      	bne.n	80036e0 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003684:	428b      	cmp	r3, r1
          lfree = cur;
 8003686:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003688:	d007      	beq.n	800369a <mem_malloc+0xae>
 800368a:	b132      	cbz	r2, 800369a <mem_malloc+0xae>
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <mem_malloc+0x10c>)
 800368e:	491b      	ldr	r1, [pc, #108]	; (80036fc <mem_malloc+0x110>)
 8003690:	481b      	ldr	r0, [pc, #108]	; (8003700 <mem_malloc+0x114>)
 8003692:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003696:	f004 f94b 	bl	8007930 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800369a:	3508      	adds	r5, #8
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4425      	add	r5, r4
 80036a0:	42ab      	cmp	r3, r5
 80036a2:	d206      	bcs.n	80036b2 <mem_malloc+0xc6>
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <mem_malloc+0x10c>)
 80036a6:	4917      	ldr	r1, [pc, #92]	; (8003704 <mem_malloc+0x118>)
 80036a8:	4815      	ldr	r0, [pc, #84]	; (8003700 <mem_malloc+0x114>)
 80036aa:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80036ae:	f004 f93f 	bl	8007930 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80036b2:	07a3      	lsls	r3, r4, #30
 80036b4:	d00d      	beq.n	80036d2 <mem_malloc+0xe6>
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <mem_malloc+0x10c>)
 80036b8:	4913      	ldr	r1, [pc, #76]	; (8003708 <mem_malloc+0x11c>)
 80036ba:	4811      	ldr	r0, [pc, #68]	; (8003700 <mem_malloc+0x114>)
 80036bc:	f240 22d6 	movw	r2, #726	; 0x2d6
 80036c0:	f004 f936 	bl	8007930 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <mem_malloc+0x10c>)
 80036c6:	4911      	ldr	r1, [pc, #68]	; (800370c <mem_malloc+0x120>)
 80036c8:	480d      	ldr	r0, [pc, #52]	; (8003700 <mem_malloc+0x114>)
 80036ca:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80036ce:	f004 f92f 	bl	8007930 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80036d2:	f104 0008 	add.w	r0, r4, #8
 80036d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	7123      	strb	r3, [r4, #4]
 80036de:	e7c7      	b.n	8003670 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4433      	add	r3, r6
 80036e4:	e7ca      	b.n	800367c <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80036e6:	4673      	mov	r3, lr
 80036e8:	e79a      	b.n	8003620 <mem_malloc+0x34>
 80036ea:	bf00      	nop
 80036ec:	200005d0 	.word	0x200005d0
 80036f0:	200005d4 	.word	0x200005d4
 80036f4:	200005d8 	.word	0x200005d8
 80036f8:	08009bb5 	.word	0x08009bb5
 80036fc:	08009ca6 	.word	0x08009ca6
 8003700:	08009678 	.word	0x08009678
 8003704:	08009cbf 	.word	0x08009cbf
 8003708:	08009cef 	.word	0x08009cef
 800370c:	08009d1e 	.word	0x08009d1e

08003710 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8003710:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003712:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003714:	b154      	cbz	r4, 800372c <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800371a:	07a3      	lsls	r3, r4, #30
 800371c:	d006      	beq.n	800372c <do_memp_malloc_pool.isra.0+0x1c>
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <do_memp_malloc_pool.isra.0+0x20>)
 8003720:	4904      	ldr	r1, [pc, #16]	; (8003734 <do_memp_malloc_pool.isra.0+0x24>)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <do_memp_malloc_pool.isra.0+0x28>)
 8003724:	f240 1249 	movw	r2, #329	; 0x149
 8003728:	f004 f902 	bl	8007930 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 800372c:	4620      	mov	r0, r4
 800372e:	bd10      	pop	{r4, pc}
 8003730:	08009d98 	.word	0x08009d98
 8003734:	08009dc8 	.word	0x08009dc8
 8003738:	08009678 	.word	0x08009678

0800373c <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800373c:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800373e:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8003740:	4605      	mov	r5, r0
 8003742:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8003744:	d006      	beq.n	8003754 <do_memp_free_pool.isra.1+0x18>
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <do_memp_free_pool.isra.1+0x24>)
 8003748:	4906      	ldr	r1, [pc, #24]	; (8003764 <do_memp_free_pool.isra.1+0x28>)
 800374a:	4807      	ldr	r0, [pc, #28]	; (8003768 <do_memp_free_pool.isra.1+0x2c>)
 800374c:	f240 129d 	movw	r2, #413	; 0x19d
 8003750:	f004 f8ee 	bl	8007930 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800375a:	601c      	str	r4, [r3, #0]
 800375c:	bd38      	pop	{r3, r4, r5, pc}
 800375e:	bf00      	nop
 8003760:	08009d98 	.word	0x08009d98
 8003764:	08009d78 	.word	0x08009d78
 8003768:	08009678 	.word	0x08009678

0800376c <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800376c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800376e:	6881      	ldr	r1, [r0, #8]
{
 8003770:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8003772:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8003774:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8003776:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8003778:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800377a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800377e:	42a2      	cmp	r2, r4
 8003780:	db00      	blt.n	8003784 <memp_init_pool+0x18>
}
 8003782:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8003784:	680d      	ldr	r5, [r1, #0]
 8003786:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003788:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800378a:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800378c:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800378e:	442b      	add	r3, r5
 8003790:	e7f5      	b.n	800377e <memp_init_pool+0x12>
	...

08003794 <memp_init>:
{
 8003794:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8003796:	4d05      	ldr	r5, [pc, #20]	; (80037ac <memp_init+0x18>)
{
 8003798:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 800379a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800379e:	3401      	adds	r4, #1
 80037a0:	f7ff ffe4 	bl	800376c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80037a4:	2c09      	cmp	r4, #9
 80037a6:	d1f8      	bne.n	800379a <memp_init+0x6>
}
 80037a8:	bd38      	pop	{r3, r4, r5, pc}
 80037aa:	bf00      	nop
 80037ac:	08009e90 	.word	0x08009e90

080037b0 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037b0:	2808      	cmp	r0, #8
{
 80037b2:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037b4:	d807      	bhi.n	80037c6 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <memp_malloc+0x28>)
 80037b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80037bc:	6898      	ldr	r0, [r3, #8]
}
 80037be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80037c2:	f7ff bfa5 	b.w	8003710 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <memp_malloc+0x2c>)
 80037c8:	4905      	ldr	r1, [pc, #20]	; (80037e0 <memp_malloc+0x30>)
 80037ca:	4806      	ldr	r0, [pc, #24]	; (80037e4 <memp_malloc+0x34>)
 80037cc:	f240 1287 	movw	r2, #391	; 0x187
 80037d0:	f004 f8ae 	bl	8007930 <iprintf>
}
 80037d4:	2000      	movs	r0, #0
 80037d6:	bd08      	pop	{r3, pc}
 80037d8:	08009e90 	.word	0x08009e90
 80037dc:	08009d98 	.word	0x08009d98
 80037e0:	08009e73 	.word	0x08009e73
 80037e4:	08009678 	.word	0x08009678

080037e8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80037e8:	2808      	cmp	r0, #8
 80037ea:	d906      	bls.n	80037fa <memp_free+0x12>
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <memp_free+0x24>)
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <memp_free+0x28>)
 80037f0:	4808      	ldr	r0, [pc, #32]	; (8003814 <memp_free+0x2c>)
 80037f2:	f240 12db 	movw	r2, #475	; 0x1db
 80037f6:	f004 b89b 	b.w	8007930 <iprintf>

  if (mem == NULL) {
 80037fa:	b129      	cbz	r1, 8003808 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <memp_free+0x30>)
 80037fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003802:	3008      	adds	r0, #8
 8003804:	f7ff bf9a 	b.w	800373c <do_memp_free_pool.isra.1>
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	08009d98 	.word	0x08009d98
 8003810:	08009e58 	.word	0x08009e58
 8003814:	08009678 	.word	0x08009678
 8003818:	08009e90 	.word	0x08009e90

0800381c <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800381c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8003820:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8003822:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003824:	d502      	bpl.n	800382c <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8003826:	3104      	adds	r1, #4
 8003828:	f7fe bdb2 	b.w	8002390 <etharp_request>
 800382c:	4770      	bx	lr

0800382e <netif_init>:
{
 800382e:	4770      	bx	lr

08003830 <netif_set_ipaddr>:
{
 8003830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003832:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003834:	460c      	mov	r4, r1
 8003836:	b1b9      	cbz	r1, 8003868 <netif_set_ipaddr+0x38>
 8003838:	680b      	ldr	r3, [r1, #0]
 800383a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800383c:	9a01      	ldr	r2, [sp, #4]
 800383e:	686b      	ldr	r3, [r5, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d00f      	beq.n	8003864 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003844:	1d2e      	adds	r6, r5, #4
 8003846:	a901      	add	r1, sp, #4
 8003848:	4630      	mov	r0, r6
 800384a:	f001 fab1 	bl	8004db0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800384e:	a901      	add	r1, sp, #4
 8003850:	4630      	mov	r0, r6
 8003852:	f003 fbf5 	bl	8007040 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003856:	b104      	cbz	r4, 800385a <netif_set_ipaddr+0x2a>
 8003858:	6824      	ldr	r4, [r4, #0]
 800385a:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800385c:	b114      	cbz	r4, 8003864 <netif_set_ipaddr+0x34>
 800385e:	4628      	mov	r0, r5
 8003860:	f7ff ffdc 	bl	800381c <netif_issue_reports.part.0>
}
 8003864:	b002      	add	sp, #8
 8003866:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <netif_set_ipaddr+0x40>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	e7e5      	b.n	800383a <netif_set_ipaddr+0xa>
 800386e:	bf00      	nop
 8003870:	08009a18 	.word	0x08009a18

08003874 <netif_set_addr>:
{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4606      	mov	r6, r0
 8003878:	4615      	mov	r5, r2
 800387a:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 800387c:	b109      	cbz	r1, 8003882 <netif_set_addr+0xe>
 800387e:	680b      	ldr	r3, [r1, #0]
 8003880:	b94b      	cbnz	r3, 8003896 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8003882:	4630      	mov	r0, r6
 8003884:	f7ff ffd4 	bl	8003830 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003888:	b105      	cbz	r5, 800388c <netif_set_addr+0x18>
 800388a:	682d      	ldr	r5, [r5, #0]
 800388c:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800388e:	b104      	cbz	r4, 8003892 <netif_set_addr+0x1e>
 8003890:	6824      	ldr	r4, [r4, #0]
 8003892:	60f4      	str	r4, [r6, #12]
 8003894:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003896:	b102      	cbz	r2, 800389a <netif_set_addr+0x26>
 8003898:	6815      	ldr	r5, [r2, #0]
 800389a:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800389c:	b104      	cbz	r4, 80038a0 <netif_set_addr+0x2c>
 800389e:	6824      	ldr	r4, [r4, #0]
 80038a0:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 80038a2:	4630      	mov	r0, r6
}
 80038a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80038a8:	f7ff bfc2 	b.w	8003830 <netif_set_ipaddr>

080038ac <netif_add>:
{
 80038ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80038b2:	4604      	mov	r4, r0
 80038b4:	460f      	mov	r7, r1
 80038b6:	4690      	mov	r8, r2
 80038b8:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 80038ba:	b92e      	cbnz	r6, 80038c8 <netif_add+0x1c>
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <netif_add+0x68>)
 80038be:	4916      	ldr	r1, [pc, #88]	; (8003918 <netif_add+0x6c>)
 80038c0:	4816      	ldr	r0, [pc, #88]	; (800391c <netif_add+0x70>)
 80038c2:	22fb      	movs	r2, #251	; 0xfb
 80038c4:	f004 f834 	bl	8007930 <iprintf>
  netif->num = netif_num++;
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80038d0:	9b08      	ldr	r3, [sp, #32]
 80038d2:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80038d4:	7813      	ldrb	r3, [r2, #0]
 80038d6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80038da:	2500      	movs	r5, #0
  netif->num = netif_num++;
 80038dc:	1c59      	adds	r1, r3, #1
  netif->input = input;
 80038de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80038e0:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 80038e2:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80038e4:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80038e6:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80038e8:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80038ea:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 80038ec:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 80038f0:	464b      	mov	r3, r9
 80038f2:	4642      	mov	r2, r8
 80038f4:	4639      	mov	r1, r7
 80038f6:	f7ff ffbd 	bl	8003874 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80038fa:	4620      	mov	r0, r4
 80038fc:	47b0      	blx	r6
 80038fe:	b930      	cbnz	r0, 800390e <netif_add+0x62>
  netif->next = netif_list;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <netif_add+0x78>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8003906:	601c      	str	r4, [r3, #0]
}
 8003908:	4620      	mov	r0, r4
 800390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800390e:	462c      	mov	r4, r5
 8003910:	e7fa      	b.n	8003908 <netif_add+0x5c>
 8003912:	bf00      	nop
 8003914:	08009eb4 	.word	0x08009eb4
 8003918:	08009ee5 	.word	0x08009ee5
 800391c:	08009678 	.word	0x08009678
 8003920:	20000600 	.word	0x20000600
 8003924:	20002e2c 	.word	0x20002e2c

08003928 <netif_set_default>:
  netif_default = netif;
 8003928:	4b01      	ldr	r3, [pc, #4]	; (8003930 <netif_set_default+0x8>)
 800392a:	6018      	str	r0, [r3, #0]
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20002e30 	.word	0x20002e30

08003934 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003934:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8003938:	07d1      	lsls	r1, r2, #31
 800393a:	d409      	bmi.n	8003950 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 800393c:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003940:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8003942:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003946:	d503      	bpl.n	8003950 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003948:	6843      	ldr	r3, [r0, #4]
 800394a:	b10b      	cbz	r3, 8003950 <netif_set_up+0x1c>
 800394c:	f7ff bf66 	b.w	800381c <netif_issue_reports.part.0>
 8003950:	4770      	bx	lr

08003952 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8003952:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8003956:	07d9      	lsls	r1, r3, #31
 8003958:	d507      	bpl.n	800396a <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 800395a:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800395e:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8003960:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003964:	d501      	bpl.n	800396a <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8003966:	f7fe bc61 	b.w	800222c <etharp_cleanup_netif>
 800396a:	4770      	bx	lr

0800396c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800396c:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800396e:	4604      	mov	r4, r0
 8003970:	2800      	cmp	r0, #0
 8003972:	d12f      	bne.n	80039d4 <pbuf_header_impl+0x68>
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <pbuf_header_impl+0x88>)
 8003976:	4920      	ldr	r1, [pc, #128]	; (80039f8 <pbuf_header_impl+0x8c>)
 8003978:	4820      	ldr	r0, [pc, #128]	; (80039fc <pbuf_header_impl+0x90>)
 800397a:	f240 223f 	movw	r2, #575	; 0x23f
 800397e:	f003 ffd7 	bl	8007930 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8003982:	2000      	movs	r0, #0
 8003984:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8003986:	b288      	uxth	r0, r1
  type = p->type;
 8003988:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 800398a:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800398c:	b10d      	cbz	r5, 8003992 <pbuf_header_impl+0x26>
 800398e:	2d03      	cmp	r5, #3
 8003990:	d106      	bne.n	80039a0 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8003992:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8003994:	f104 0210 	add.w	r2, r4, #16
 8003998:	4293      	cmp	r3, r2
 800399a:	d20a      	bcs.n	80039b2 <pbuf_header_impl+0x46>
      return 1;
 800399c:	2001      	movs	r0, #1
 800399e:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80039a0:	3d01      	subs	r5, #1
 80039a2:	2d01      	cmp	r5, #1
 80039a4:	d811      	bhi.n	80039ca <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80039a6:	2900      	cmp	r1, #0
 80039a8:	da0c      	bge.n	80039c4 <pbuf_header_impl+0x58>
 80039aa:	8962      	ldrh	r2, [r4, #10]
 80039ac:	4282      	cmp	r2, r0
 80039ae:	d3f5      	bcc.n	800399c <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80039b0:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 80039b2:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80039b4:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 80039b6:	8963      	ldrh	r3, [r4, #10]
 80039b8:	b289      	uxth	r1, r1
 80039ba:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80039bc:	4401      	add	r1, r0
  p->len += header_size_increment;
 80039be:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80039c0:	8121      	strh	r1, [r4, #8]
 80039c2:	e7de      	b.n	8003982 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 80039c4:	2a00      	cmp	r2, #0
 80039c6:	d1f3      	bne.n	80039b0 <pbuf_header_impl+0x44>
 80039c8:	e7e8      	b.n	800399c <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <pbuf_header_impl+0x88>)
 80039cc:	490c      	ldr	r1, [pc, #48]	; (8003a00 <pbuf_header_impl+0x94>)
 80039ce:	f240 2277 	movw	r2, #631	; 0x277
 80039d2:	e00b      	b.n	80039ec <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 80039d4:	2900      	cmp	r1, #0
 80039d6:	d0d4      	beq.n	8003982 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 80039d8:	dad5      	bge.n	8003986 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 80039da:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80039dc:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80039de:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80039e0:	4283      	cmp	r3, r0
 80039e2:	d2d1      	bcs.n	8003988 <pbuf_header_impl+0x1c>
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <pbuf_header_impl+0x88>)
 80039e6:	4907      	ldr	r1, [pc, #28]	; (8003a04 <pbuf_header_impl+0x98>)
 80039e8:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 80039ec:	4803      	ldr	r0, [pc, #12]	; (80039fc <pbuf_header_impl+0x90>)
 80039ee:	f003 ff9f 	bl	8007930 <iprintf>
 80039f2:	e7d3      	b.n	800399c <pbuf_header_impl+0x30>
 80039f4:	0800a161 	.word	0x0800a161
 80039f8:	0800a1cb 	.word	0x0800a1cb
 80039fc:	08009678 	.word	0x08009678
 8003a00:	0800a1af 	.word	0x0800a1af
 8003a04:	0800a191 	.word	0x0800a191

08003a08 <pbuf_alloced_custom>:
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8003a0c:	2804      	cmp	r0, #4
 8003a0e:	d81e      	bhi.n	8003a4e <pbuf_alloced_custom+0x46>
 8003a10:	e8df f000 	tbb	[pc, r0]
 8003a14:	1b280326 	.word	0x1b280326
 8003a18:	1b          	.byte	0x1b
 8003a19:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003a1a:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8003a1c:	3403      	adds	r4, #3
 8003a1e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8003a22:	f024 0403 	bic.w	r4, r4, #3
 8003a26:	190e      	adds	r6, r1, r4
 8003a28:	4286      	cmp	r6, r0
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	d80b      	bhi.n	8003a48 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8003a30:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8003a32:	b1cd      	cbz	r5, 8003a68 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8003a34:	442c      	add	r4, r5
 8003a36:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8003a38:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8003a3a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8003a3c:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8003a3e:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8003a40:	8119      	strh	r1, [r3, #8]
 8003a42:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8003a44:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8003a46:	4618      	mov	r0, r3
}
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8003a4a:	2400      	movs	r4, #0
    break;
 8003a4c:	e7e6      	b.n	8003a1c <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <pbuf_alloced_custom+0x64>)
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <pbuf_alloced_custom+0x68>)
 8003a52:	4808      	ldr	r0, [pc, #32]	; (8003a74 <pbuf_alloced_custom+0x6c>)
 8003a54:	f240 12c5 	movw	r2, #453	; 0x1c5
 8003a58:	f003 ff6a 	bl	8007930 <iprintf>
    return NULL;
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003a60:	2436      	movs	r4, #54	; 0x36
 8003a62:	e7db      	b.n	8003a1c <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003a64:	240e      	movs	r4, #14
 8003a66:	e7d9      	b.n	8003a1c <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8003a68:	605d      	str	r5, [r3, #4]
 8003a6a:	e7e5      	b.n	8003a38 <pbuf_alloced_custom+0x30>
 8003a6c:	0800a161 	.word	0x0800a161
 8003a70:	08009fa4 	.word	0x08009fa4
 8003a74:	08009678 	.word	0x08009678

08003a78 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f7ff bf77 	b.w	800396c <pbuf_header_impl>

08003a7e <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f7ff bf74 	b.w	800396c <pbuf_header_impl>

08003a84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003a88:	4604      	mov	r4, r0
 8003a8a:	b950      	cbnz	r0, 8003aa2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <pbuf_free+0xac>)
 8003a8e:	4929      	ldr	r1, [pc, #164]	; (8003b34 <pbuf_free+0xb0>)
 8003a90:	4829      	ldr	r0, [pc, #164]	; (8003b38 <pbuf_free+0xb4>)
 8003a92:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003a96:	f003 ff4b 	bl	8007930 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003a9a:	4626      	mov	r6, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8003aa2:	7b03      	ldrb	r3, [r0, #12]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d906      	bls.n	8003ab6 <pbuf_free+0x32>
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <pbuf_free+0xac>)
 8003aaa:	4924      	ldr	r1, [pc, #144]	; (8003b3c <pbuf_free+0xb8>)
 8003aac:	4822      	ldr	r0, [pc, #136]	; (8003b38 <pbuf_free+0xb4>)
 8003aae:	f240 22de 	movw	r2, #734	; 0x2de
 8003ab2:	f003 ff3d 	bl	8007930 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003ab6:	4f1e      	ldr	r7, [pc, #120]	; (8003b30 <pbuf_free+0xac>)
 8003ab8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003b44 <pbuf_free+0xc0>
 8003abc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003b38 <pbuf_free+0xb4>
{
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8003ac4:	2c00      	cmp	r4, #0
 8003ac6:	d0e9      	beq.n	8003a9c <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003ac8:	89e3      	ldrh	r3, [r4, #14]
 8003aca:	b933      	cbnz	r3, 8003ada <pbuf_free+0x56>
 8003acc:	463b      	mov	r3, r7
 8003ace:	f240 22eb 	movw	r2, #747	; 0x2eb
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	f003 ff2b 	bl	8007930 <iprintf>
    ref = --(p->ref);
 8003ada:	89e3      	ldrh	r3, [r4, #14]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1da      	bne.n	8003a9c <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003ae6:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8003ae8:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003aea:	079b      	lsls	r3, r3, #30
 8003aec:	d50e      	bpl.n	8003b0c <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	b933      	cbnz	r3, 8003b00 <pbuf_free+0x7c>
 8003af2:	463b      	mov	r3, r7
 8003af4:	f240 22f9 	movw	r2, #761	; 0x2f9
 8003af8:	4911      	ldr	r1, [pc, #68]	; (8003b40 <pbuf_free+0xbc>)
 8003afa:	4640      	mov	r0, r8
 8003afc:	f003 ff18 	bl	8007930 <iprintf>
        pc->custom_free_function(p);
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	4620      	mov	r0, r4
 8003b04:	4798      	blx	r3
 8003b06:	3501      	adds	r5, #1
      p = q;
 8003b08:	4634      	mov	r4, r6
 8003b0a:	e7da      	b.n	8003ac2 <pbuf_free+0x3e>
      type = p->type;
 8003b0c:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d104      	bne.n	8003b1c <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8003b12:	4621      	mov	r1, r4
 8003b14:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8003b16:	f7ff fe67 	bl	80037e8 <memp_free>
 8003b1a:	e7f4      	b.n	8003b06 <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d802      	bhi.n	8003b28 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8003b22:	4621      	mov	r1, r4
 8003b24:	2007      	movs	r0, #7
 8003b26:	e7f6      	b.n	8003b16 <pbuf_free+0x92>
          mem_free(p);
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff fc3f 	bl	80033ac <mem_free>
 8003b2e:	e7ea      	b.n	8003b06 <pbuf_free+0x82>
 8003b30:	0800a161 	.word	0x0800a161
 8003b34:	0800a1cb 	.word	0x0800a1cb
 8003b38:	08009678 	.word	0x08009678
 8003b3c:	0800a115 	.word	0x0800a115
 8003b40:	0800a140 	.word	0x0800a140
 8003b44:	0800a12a 	.word	0x0800a12a

08003b48 <pbuf_alloc>:
{
 8003b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	460e      	mov	r6, r1
 8003b4e:	4617      	mov	r7, r2
  switch (layer) {
 8003b50:	2804      	cmp	r0, #4
 8003b52:	d80e      	bhi.n	8003b72 <pbuf_alloc+0x2a>
 8003b54:	e8df f000 	tbb	[pc, r0]
 8003b58:	0b170315 	.word	0x0b170315
 8003b5c:	0b          	.byte	0x0b
 8003b5d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003b5e:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8003b60:	2f03      	cmp	r7, #3
 8003b62:	f200 80b9 	bhi.w	8003cd8 <pbuf_alloc+0x190>
 8003b66:	e8df f007 	tbb	[pc, r7]
 8003b6a:	a98c      	.short	0xa98c
 8003b6c:	10a9      	.short	0x10a9
    offset = 0;
 8003b6e:	2500      	movs	r5, #0
    break;
 8003b70:	e7f6      	b.n	8003b60 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003b72:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <pbuf_alloc+0x19c>)
 8003b74:	495c      	ldr	r1, [pc, #368]	; (8003ce8 <pbuf_alloc+0x1a0>)
 8003b76:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003b7a:	485c      	ldr	r0, [pc, #368]	; (8003cec <pbuf_alloc+0x1a4>)
 8003b7c:	f003 fed8 	bl	8007930 <iprintf>
 8003b80:	e008      	b.n	8003b94 <pbuf_alloc+0x4c>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003b82:	2536      	movs	r5, #54	; 0x36
 8003b84:	e7ec      	b.n	8003b60 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003b86:	250e      	movs	r5, #14
 8003b88:	e7ea      	b.n	8003b60 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003b8a:	2008      	movs	r0, #8
 8003b8c:	f7ff fe10 	bl	80037b0 <memp_malloc>
    if (p == NULL) {
 8003b90:	4604      	mov	r4, r0
 8003b92:	b918      	cbnz	r0, 8003b9c <pbuf_alloc+0x54>
    return NULL;
 8003b94:	2400      	movs	r4, #0
}
 8003b96:	4620      	mov	r0, r4
 8003b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003ba4:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003ba6:	3503      	adds	r5, #3
 8003ba8:	f025 0503 	bic.w	r5, r5, #3
 8003bac:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
 8003bb0:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003bb2:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003bb6:	bf28      	it	cs
 8003bb8:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003bc0:	f500 7704 	add.w	r7, r0, #528	; 0x210
 8003bc4:	442b      	add	r3, r5
 8003bc6:	429f      	cmp	r7, r3
    p->tot_len = length;
 8003bc8:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003bca:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003bcc:	d206      	bcs.n	8003bdc <pbuf_alloc+0x94>
 8003bce:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <pbuf_alloc+0x19c>)
 8003bd0:	4947      	ldr	r1, [pc, #284]	; (8003cf0 <pbuf_alloc+0x1a8>)
 8003bd2:	4846      	ldr	r0, [pc, #280]	; (8003cec <pbuf_alloc+0x1a4>)
 8003bd4:	f44f 7298 	mov.w	r2, #304	; 0x130
 8003bd8:	f003 feaa 	bl	8007930 <iprintf>
    p->ref = 1;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8003be0:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003be2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8003ce4 <pbuf_alloc+0x19c>
 8003be6:	f8df a114 	ldr.w	sl, [pc, #276]	; 8003cfc <pbuf_alloc+0x1b4>
 8003bea:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8003cec <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 8003bee:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8003bf0:	46a3      	mov	fp, r4
 8003bf2:	2e00      	cmp	r6, #0
 8003bf4:	dc04      	bgt.n	8003c00 <pbuf_alloc+0xb8>
  p->ref = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	7363      	strb	r3, [r4, #13]
  return p;
 8003bfe:	e7ca      	b.n	8003b96 <pbuf_alloc+0x4e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003c00:	2008      	movs	r0, #8
 8003c02:	f7ff fdd5 	bl	80037b0 <memp_malloc>
 8003c06:	2300      	movs	r3, #0
      if (q == NULL) {
 8003c08:	4605      	mov	r5, r0
 8003c0a:	b918      	cbnz	r0, 8003c14 <pbuf_alloc+0xcc>
        pbuf_free(p);
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7ff ff39 	bl	8003a84 <pbuf_free>
 8003c12:	e7bf      	b.n	8003b94 <pbuf_alloc+0x4c>
      q->flags = 0;
 8003c14:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8003c16:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8003c1c:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c1e:	429e      	cmp	r6, r3
      q->type = type;
 8003c20:	7302      	strb	r2, [r0, #12]
      r->next = q;
 8003c22:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c26:	d106      	bne.n	8003c36 <pbuf_alloc+0xee>
 8003c28:	4643      	mov	r3, r8
 8003c2a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003c2e:	4651      	mov	r1, sl
 8003c30:	4648      	mov	r0, r9
 8003c32:	f003 fe7d 	bl	8007930 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8003c36:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      q->tot_len = (u16_t)rem_len;
 8003c3c:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003c3e:	bf28      	it	cs
 8003c40:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8003c44:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8003c46:	f105 0310 	add.w	r3, r5, #16
 8003c4a:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8003c4c:	079b      	lsls	r3, r3, #30
 8003c4e:	d006      	beq.n	8003c5e <pbuf_alloc+0x116>
 8003c50:	4643      	mov	r3, r8
 8003c52:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8003c56:	4927      	ldr	r1, [pc, #156]	; (8003cf4 <pbuf_alloc+0x1ac>)
 8003c58:	4648      	mov	r0, r9
 8003c5a:	f003 fe69 	bl	8007930 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003c5e:	8962      	ldrh	r2, [r4, #10]
 8003c60:	6863      	ldr	r3, [r4, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	429f      	cmp	r7, r3
 8003c66:	d206      	bcs.n	8003c76 <pbuf_alloc+0x12e>
 8003c68:	4643      	mov	r3, r8
 8003c6a:	f240 1255 	movw	r2, #341	; 0x155
 8003c6e:	4920      	ldr	r1, [pc, #128]	; (8003cf0 <pbuf_alloc+0x1a8>)
 8003c70:	4648      	mov	r0, r9
 8003c72:	f003 fe5d 	bl	8007930 <iprintf>
      q->ref = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8003c7a:	896b      	ldrh	r3, [r5, #10]
 8003c7c:	46ab      	mov	fp, r5
 8003c7e:	1af6      	subs	r6, r6, r3
 8003c80:	e7b7      	b.n	8003bf2 <pbuf_alloc+0xaa>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8003c82:	f105 0013 	add.w	r0, r5, #19
 8003c86:	1cf3      	adds	r3, r6, #3
 8003c88:	f023 0303 	bic.w	r3, r3, #3
 8003c8c:	f020 0003 	bic.w	r0, r0, #3
 8003c90:	4418      	add	r0, r3
 8003c92:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8003c94:	4298      	cmp	r0, r3
 8003c96:	f4ff af7d 	bcc.w	8003b94 <pbuf_alloc+0x4c>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8003c9a:	f7ff fca7 	bl	80035ec <mem_malloc>
    if (p == NULL) {
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	f43f af77 	beq.w	8003b94 <pbuf_alloc+0x4c>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003ca6:	4405      	add	r5, r0
 8003ca8:	3513      	adds	r5, #19
    p->next = NULL;
 8003caa:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003cac:	f025 0503 	bic.w	r5, r5, #3
 8003cb0:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8003cb2:	8106      	strh	r6, [r0, #8]
 8003cb4:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8003cb6:	6003      	str	r3, [r0, #0]
    p->type = type;
 8003cb8:	7303      	strb	r3, [r0, #12]
 8003cba:	e79c      	b.n	8003bf6 <pbuf_alloc+0xae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003cbc:	2007      	movs	r0, #7
 8003cbe:	f7ff fd77 	bl	80037b0 <memp_malloc>
    if (p == NULL) {
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	f43f af65 	beq.w	8003b94 <pbuf_alloc+0x4c>
    p->payload = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8003cce:	8106      	strh	r6, [r0, #8]
 8003cd0:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8003cd2:	6003      	str	r3, [r0, #0]
    p->type = type;
 8003cd4:	7307      	strb	r7, [r0, #12]
    break;
 8003cd6:	e78e      	b.n	8003bf6 <pbuf_alloc+0xae>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <pbuf_alloc+0x19c>)
 8003cda:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <pbuf_alloc+0x1b0>)
 8003cdc:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003ce0:	e74b      	b.n	8003b7a <pbuf_alloc+0x32>
 8003ce2:	bf00      	nop
 8003ce4:	0800a161 	.word	0x0800a161
 8003ce8:	08009efc 	.word	0x08009efc
 8003cec:	08009678 	.word	0x08009678
 8003cf0:	08009f17 	.word	0x08009f17
 8003cf4:	08009f5c 	.word	0x08009f5c
 8003cf8:	08009f89 	.word	0x08009f89
 8003cfc:	08009f48 	.word	0x08009f48

08003d00 <pbuf_realloc>:
{
 8003d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d04:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003d06:	4604      	mov	r4, r0
 8003d08:	b930      	cbnz	r0, 8003d18 <pbuf_realloc+0x18>
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <pbuf_realloc+0xc4>)
 8003d0c:	492e      	ldr	r1, [pc, #184]	; (8003dc8 <pbuf_realloc+0xc8>)
 8003d0e:	482f      	ldr	r0, [pc, #188]	; (8003dcc <pbuf_realloc+0xcc>)
 8003d10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003d14:	f003 fe0c 	bl	8007930 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8003d18:	7b23      	ldrb	r3, [r4, #12]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d906      	bls.n	8003d2c <pbuf_realloc+0x2c>
 8003d1e:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <pbuf_realloc+0xc4>)
 8003d20:	492b      	ldr	r1, [pc, #172]	; (8003dd0 <pbuf_realloc+0xd0>)
 8003d22:	482a      	ldr	r0, [pc, #168]	; (8003dcc <pbuf_realloc+0xcc>)
 8003d24:	f240 12f7 	movw	r2, #503	; 0x1f7
 8003d28:	f003 fe02 	bl	8007930 <iprintf>
  if (new_len >= p->tot_len) {
 8003d2c:	8926      	ldrh	r6, [r4, #8]
 8003d2e:	42ae      	cmp	r6, r5
 8003d30:	d945      	bls.n	8003dbe <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003d32:	4f24      	ldr	r7, [pc, #144]	; (8003dc4 <pbuf_realloc+0xc4>)
 8003d34:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003ddc <pbuf_realloc+0xdc>
 8003d38:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003dcc <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8003d3c:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8003d3e:	8963      	ldrh	r3, [r4, #10]
 8003d40:	429d      	cmp	r5, r3
 8003d42:	d819      	bhi.n	8003d78 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8003d44:	7b22      	ldrb	r2, [r4, #12]
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	d131      	bne.n	8003dae <pbuf_realloc+0xae>
 8003d4a:	429d      	cmp	r5, r3
 8003d4c:	d02f      	beq.n	8003dae <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8003d4e:	7b63      	ldrb	r3, [r4, #13]
 8003d50:	079b      	lsls	r3, r3, #30
 8003d52:	d42c      	bmi.n	8003dae <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8003d54:	6861      	ldr	r1, [r4, #4]
 8003d56:	1b09      	subs	r1, r1, r4
 8003d58:	4429      	add	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	b289      	uxth	r1, r1
 8003d5e:	f7ff fbcd 	bl	80034fc <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8003d62:	4604      	mov	r4, r0
 8003d64:	bb18      	cbnz	r0, 8003dae <pbuf_realloc+0xae>
 8003d66:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <pbuf_realloc+0xc4>)
 8003d68:	491a      	ldr	r1, [pc, #104]	; (8003dd4 <pbuf_realloc+0xd4>)
 8003d6a:	4818      	ldr	r0, [pc, #96]	; (8003dcc <pbuf_realloc+0xcc>)
 8003d6c:	f240 221d 	movw	r2, #541	; 0x21d
 8003d70:	f003 fdde 	bl	8007930 <iprintf>
  q->len = rem_len;
 8003d74:	8164      	strh	r4, [r4, #10]
 8003d76:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8003d78:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003d7a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003d7e:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8003d80:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003d82:	dd06      	ble.n	8003d92 <pbuf_realloc+0x92>
 8003d84:	463b      	mov	r3, r7
 8003d86:	f240 220b 	movw	r2, #523	; 0x20b
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	f003 fdcf 	bl	8007930 <iprintf>
    q->tot_len += (u16_t)grow;
 8003d92:	8923      	ldrh	r3, [r4, #8]
 8003d94:	4433      	add	r3, r6
 8003d96:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8003d98:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003d9a:	2c00      	cmp	r4, #0
 8003d9c:	d1cf      	bne.n	8003d3e <pbuf_realloc+0x3e>
 8003d9e:	463b      	mov	r3, r7
 8003da0:	f240 220f 	movw	r2, #527	; 0x20f
 8003da4:	490c      	ldr	r1, [pc, #48]	; (8003dd8 <pbuf_realloc+0xd8>)
 8003da6:	4640      	mov	r0, r8
 8003da8:	f003 fdc2 	bl	8007930 <iprintf>
 8003dac:	e7c7      	b.n	8003d3e <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8003dae:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8003db0:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8003db2:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8003db4:	b108      	cbz	r0, 8003dba <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8003db6:	f7ff fe65 	bl	8003a84 <pbuf_free>
  q->next = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc2:	bf00      	nop
 8003dc4:	0800a161 	.word	0x0800a161
 8003dc8:	0800a1bd 	.word	0x0800a1bd
 8003dcc:	08009678 	.word	0x08009678
 8003dd0:	0800a1d5 	.word	0x0800a1d5
 8003dd4:	0800a219 	.word	0x0800a219
 8003dd8:	0800a201 	.word	0x0800a201
 8003ddc:	0800a1f0 	.word	0x0800a1f0

08003de0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003de0:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8003de2:	2200      	movs	r2, #0
 8003de4:	b290      	uxth	r0, r2
 8003de6:	3201      	adds	r2, #1
 8003de8:	b903      	cbnz	r3, 8003dec <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8003dea:	4770      	bx	lr
    p = p->next;
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	e7f9      	b.n	8003de4 <pbuf_clen+0x4>

08003df0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8003df0:	b158      	cbz	r0, 8003e0a <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 8003df2:	89c3      	ldrh	r3, [r0, #14]
 8003df4:	3301      	adds	r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8003dfa:	b933      	cbnz	r3, 8003e0a <pbuf_ref+0x1a>
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <pbuf_ref+0x1c>)
 8003dfe:	4904      	ldr	r1, [pc, #16]	; (8003e10 <pbuf_ref+0x20>)
 8003e00:	4804      	ldr	r0, [pc, #16]	; (8003e14 <pbuf_ref+0x24>)
 8003e02:	f240 3239 	movw	r2, #825	; 0x339
 8003e06:	f003 bd93 	b.w	8007930 <iprintf>
 8003e0a:	4770      	bx	lr
 8003e0c:	0800a161 	.word	0x0800a161
 8003e10:	0800a235 	.word	0x0800a235
 8003e14:	08009678 	.word	0x08009678

08003e18 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	b100      	cbz	r0, 8003e22 <pbuf_cat+0xa>
 8003e20:	b969      	cbnz	r1, 8003e3e <pbuf_cat+0x26>
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <pbuf_cat+0x60>)
 8003e24:	4915      	ldr	r1, [pc, #84]	; (8003e7c <pbuf_cat+0x64>)
 8003e26:	4816      	ldr	r0, [pc, #88]	; (8003e80 <pbuf_cat+0x68>)
 8003e28:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8003e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003e30:	f003 bd7e 	b.w	8007930 <iprintf>
    p->tot_len += t->tot_len;
 8003e34:	8923      	ldrh	r3, [r4, #8]
 8003e36:	8929      	ldrh	r1, [r5, #8]
 8003e38:	440b      	add	r3, r1
 8003e3a:	8123      	strh	r3, [r4, #8]
 8003e3c:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	d1f7      	bne.n	8003e34 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8003e44:	8922      	ldrh	r2, [r4, #8]
 8003e46:	8963      	ldrh	r3, [r4, #10]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d006      	beq.n	8003e5a <pbuf_cat+0x42>
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <pbuf_cat+0x60>)
 8003e4e:	490d      	ldr	r1, [pc, #52]	; (8003e84 <pbuf_cat+0x6c>)
 8003e50:	480b      	ldr	r0, [pc, #44]	; (8003e80 <pbuf_cat+0x68>)
 8003e52:	f240 3255 	movw	r2, #853	; 0x355
 8003e56:	f003 fd6b 	bl	8007930 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	b133      	cbz	r3, 8003e6c <pbuf_cat+0x54>
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <pbuf_cat+0x60>)
 8003e60:	4909      	ldr	r1, [pc, #36]	; (8003e88 <pbuf_cat+0x70>)
 8003e62:	4807      	ldr	r0, [pc, #28]	; (8003e80 <pbuf_cat+0x68>)
 8003e64:	f240 3256 	movw	r2, #854	; 0x356
 8003e68:	f003 fd62 	bl	8007930 <iprintf>
  p->tot_len += t->tot_len;
 8003e6c:	892a      	ldrh	r2, [r5, #8]
 8003e6e:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8003e70:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8003e72:	4413      	add	r3, r2
 8003e74:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	0800a161 	.word	0x0800a161
 8003e7c:	08009fc8 	.word	0x08009fc8
 8003e80:	08009678 	.word	0x08009678
 8003e84:	08009ffd 	.word	0x08009ffd
 8003e88:	0800a02a 	.word	0x0800a02a

08003e8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8003e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8003e92:	4605      	mov	r5, r0
 8003e94:	b120      	cbz	r0, 8003ea0 <pbuf_copy+0x14>
 8003e96:	b119      	cbz	r1, 8003ea0 <pbuf_copy+0x14>
 8003e98:	8902      	ldrh	r2, [r0, #8]
 8003e9a:	890b      	ldrh	r3, [r1, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d20a      	bcs.n	8003eb6 <pbuf_copy+0x2a>
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <pbuf_copy+0xf8>)
 8003ea2:	4939      	ldr	r1, [pc, #228]	; (8003f88 <pbuf_copy+0xfc>)
 8003ea4:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8003ea8:	4838      	ldr	r0, [pc, #224]	; (8003f8c <pbuf_copy+0x100>)
 8003eaa:	f003 fd41 	bl	8007930 <iprintf>
 8003eae:	f06f 000f 	mvn.w	r0, #15
 8003eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb6:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003eba:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003f84 <pbuf_copy+0xf8>
 8003ebe:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8003f9c <pbuf_copy+0x110>
 8003ec2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8003f8c <pbuf_copy+0x100>
 8003ec6:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003ec8:	896e      	ldrh	r6, [r5, #10]
 8003eca:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003ecc:	6868      	ldr	r0, [r5, #4]
 8003ece:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003ed0:	1bf6      	subs	r6, r6, r7
 8003ed2:	eba3 030b 	sub.w	r3, r3, fp
 8003ed6:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8003ed8:	bfac      	ite	ge
 8003eda:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8003edc:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003ede:	4632      	mov	r2, r6
 8003ee0:	4459      	add	r1, fp
 8003ee2:	4438      	add	r0, r7
 8003ee4:	f003 fd11 	bl	800790a <memcpy>
    offset_to += len;
 8003ee8:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003eea:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8003eec:	b2bf      	uxth	r7, r7
    offset_from += len;
 8003eee:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003ef0:	42bb      	cmp	r3, r7
    offset_from += len;
 8003ef2:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003ef6:	d206      	bcs.n	8003f06 <pbuf_copy+0x7a>
 8003ef8:	4643      	mov	r3, r8
 8003efa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8003efe:	4651      	mov	r1, sl
 8003f00:	4648      	mov	r0, r9
 8003f02:	f003 fd15 	bl	8007930 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8003f06:	8963      	ldrh	r3, [r4, #10]
 8003f08:	455b      	cmp	r3, fp
 8003f0a:	d206      	bcs.n	8003f1a <pbuf_copy+0x8e>
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	f240 32ce 	movw	r2, #974	; 0x3ce
 8003f12:	491f      	ldr	r1, [pc, #124]	; (8003f90 <pbuf_copy+0x104>)
 8003f14:	4648      	mov	r0, r9
 8003f16:	f003 fd0b 	bl	8007930 <iprintf>
    if (offset_from >= p_from->len) {
 8003f1a:	8963      	ldrh	r3, [r4, #10]
 8003f1c:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8003f1e:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8003f20:	bf9c      	itt	ls
 8003f22:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8003f24:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8003f28:	42bb      	cmp	r3, r7
 8003f2a:	d11e      	bne.n	8003f6a <pbuf_copy+0xde>
      p_to = p_to->next;
 8003f2c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8003f2e:	b9dd      	cbnz	r5, 8003f68 <pbuf_copy+0xdc>
 8003f30:	b1bc      	cbz	r4, 8003f62 <pbuf_copy+0xd6>
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <pbuf_copy+0xf8>)
 8003f34:	4917      	ldr	r1, [pc, #92]	; (8003f94 <pbuf_copy+0x108>)
 8003f36:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8003f3a:	e7b5      	b.n	8003ea8 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003f3c:	8962      	ldrh	r2, [r4, #10]
 8003f3e:	8923      	ldrh	r3, [r4, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d114      	bne.n	8003f6e <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	b193      	cbz	r3, 8003f6e <pbuf_copy+0xe2>
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <pbuf_copy+0xf8>)
 8003f4a:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8003f4e:	4912      	ldr	r1, [pc, #72]	; (8003f98 <pbuf_copy+0x10c>)
 8003f50:	480e      	ldr	r0, [pc, #56]	; (8003f8c <pbuf_copy+0x100>)
 8003f52:	f003 fced 	bl	8007930 <iprintf>
 8003f56:	f06f 0005 	mvn.w	r0, #5
 8003f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8003f5e:	2c00      	cmp	r4, #0
 8003f60:	d1b2      	bne.n	8003ec8 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8003f62:	4620      	mov	r0, r4
 8003f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8003f68:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003f6a:	2c00      	cmp	r4, #0
 8003f6c:	d1e6      	bne.n	8003f3c <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8003f6e:	896a      	ldrh	r2, [r5, #10]
 8003f70:	892b      	ldrh	r3, [r5, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d1f3      	bne.n	8003f5e <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <pbuf_copy+0xd2>
 8003f7c:	4b01      	ldr	r3, [pc, #4]	; (8003f84 <pbuf_copy+0xf8>)
 8003f7e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8003f82:	e7e4      	b.n	8003f4e <pbuf_copy+0xc2>
 8003f84:	0800a161 	.word	0x0800a161
 8003f88:	0800a03a 	.word	0x0800a03a
 8003f8c:	08009678 	.word	0x08009678
 8003f90:	0800a081 	.word	0x0800a081
 8003f94:	0800a09c 	.word	0x0800a09c
 8003f98:	0800a0a9 	.word	0x0800a0a9
 8003f9c:	0800a06a 	.word	0x0800a06a

08003fa0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8003fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	460f      	mov	r7, r1
 8003fa6:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8003fa8:	4606      	mov	r6, r0
 8003faa:	b950      	cbnz	r0, 8003fc2 <pbuf_copy_partial+0x22>
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <pbuf_copy_partial+0x7c>)
 8003fae:	491c      	ldr	r1, [pc, #112]	; (8004020 <pbuf_copy_partial+0x80>)
 8003fb0:	481c      	ldr	r0, [pc, #112]	; (8004024 <pbuf_copy_partial+0x84>)
 8003fb2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8003fb6:	f003 fcbb 	bl	8007930 <iprintf>
 8003fba:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8003fc2:	b169      	cbz	r1, 8003fe0 <pbuf_copy_partial+0x40>
 8003fc4:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003fc6:	f1b8 0f00 	cmp.w	r8, #0
 8003fca:	d0f7      	beq.n	8003fbc <pbuf_copy_partial+0x1c>
 8003fcc:	2e00      	cmp	r6, #0
 8003fce:	d0f5      	beq.n	8003fbc <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8003fd0:	b17b      	cbz	r3, 8003ff2 <pbuf_copy_partial+0x52>
 8003fd2:	8971      	ldrh	r1, [r6, #10]
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	d30c      	bcc.n	8003ff2 <pbuf_copy_partial+0x52>
      offset -= p->len;
 8003fd8:	1a5b      	subs	r3, r3, r1
 8003fda:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003fdc:	6836      	ldr	r6, [r6, #0]
 8003fde:	e7f2      	b.n	8003fc6 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <pbuf_copy_partial+0x7c>)
 8003fe2:	4911      	ldr	r1, [pc, #68]	; (8004028 <pbuf_copy_partial+0x88>)
 8003fe4:	480f      	ldr	r0, [pc, #60]	; (8004024 <pbuf_copy_partial+0x84>)
 8003fe6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003fea:	f003 fca1 	bl	8007930 <iprintf>
 8003fee:	463d      	mov	r5, r7
 8003ff0:	e7e4      	b.n	8003fbc <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8003ff2:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8003ff4:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8003ff6:	1ae4      	subs	r4, r4, r3
 8003ff8:	b2a4      	uxth	r4, r4
 8003ffa:	4544      	cmp	r4, r8
 8003ffc:	bf28      	it	cs
 8003ffe:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004000:	4622      	mov	r2, r4
 8004002:	4419      	add	r1, r3
 8004004:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8004006:	4425      	add	r5, r4
      len -= buf_copy_len;
 8004008:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800400c:	f003 fc7d 	bl	800790a <memcpy>
      copied_total += buf_copy_len;
 8004010:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8004012:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	e7e0      	b.n	8003fdc <pbuf_copy_partial+0x3c>
 800401a:	bf00      	nop
 800401c:	0800a161 	.word	0x0800a161
 8004020:	0800a0d3 	.word	0x0800a0d3
 8004024:	08009678 	.word	0x08009678
 8004028:	0800a0f2 	.word	0x0800a0f2

0800402c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800402c:	4a11      	ldr	r2, [pc, #68]	; (8004074 <tcp_new_port+0x48>)
 800402e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004030:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004032:	4e11      	ldr	r6, [pc, #68]	; (8004078 <tcp_new_port+0x4c>)
{
 8004034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8004038:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800403c:	42a8      	cmp	r0, r5
 800403e:	bf1a      	itte	ne
 8004040:	3001      	addne	r0, #1
 8004042:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8004044:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 8004048:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800404a:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800404e:	6824      	ldr	r4, [r4, #0]
 8004050:	b924      	cbnz	r4, 800405c <tcp_new_port+0x30>
 8004052:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8004054:	2904      	cmp	r1, #4
 8004056:	d1f8      	bne.n	800404a <tcp_new_port+0x1e>
 8004058:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 800405c:	8ae7      	ldrh	r7, [r4, #22]
 800405e:	4287      	cmp	r7, r0
 8004060:	d106      	bne.n	8004070 <tcp_new_port+0x44>
 8004062:	3b01      	subs	r3, #1
 8004064:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e8      	bne.n	800403c <tcp_new_port+0x10>
 800406a:	8010      	strh	r0, [r2, #0]
          return 0;
 800406c:	4618      	mov	r0, r3
 800406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004070:	68e4      	ldr	r4, [r4, #12]
 8004072:	e7ed      	b.n	8004050 <tcp_new_port+0x24>
 8004074:	2000000c 	.word	0x2000000c
 8004078:	0800a358 	.word	0x0800a358

0800407c <tcp_close_shutdown_fin>:
{
 800407c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800407e:	4604      	mov	r4, r0
 8004080:	b930      	cbnz	r0, 8004090 <tcp_close_shutdown_fin+0x14>
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <tcp_close_shutdown_fin+0x54>)
 8004084:	4913      	ldr	r1, [pc, #76]	; (80040d4 <tcp_close_shutdown_fin+0x58>)
 8004086:	4814      	ldr	r0, [pc, #80]	; (80040d8 <tcp_close_shutdown_fin+0x5c>)
 8004088:	f240 124d 	movw	r2, #333	; 0x14d
 800408c:	f003 fc50 	bl	8007930 <iprintf>
  switch (pcb->state) {
 8004090:	7d23      	ldrb	r3, [r4, #20]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d003      	beq.n	800409e <tcp_close_shutdown_fin+0x22>
 8004096:	2b07      	cmp	r3, #7
 8004098:	d00c      	beq.n	80040b4 <tcp_close_shutdown_fin+0x38>
 800409a:	2b03      	cmp	r3, #3
 800409c:	d108      	bne.n	80040b0 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 800409e:	4620      	mov	r0, r4
 80040a0:	f002 fb36 	bl	8006710 <tcp_send_fin>
    if (err == ERR_OK) {
 80040a4:	b988      	cbnz	r0, 80040ca <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 80040a6:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80040a8:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80040aa:	4620      	mov	r0, r4
 80040ac:	f002 fb88 	bl	80067c0 <tcp_output>
 80040b0:	2000      	movs	r0, #0
 80040b2:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 80040b4:	4620      	mov	r0, r4
 80040b6:	f002 fb2b 	bl	8006710 <tcp_send_fin>
    if (err == ERR_OK) {
 80040ba:	b930      	cbnz	r0, 80040ca <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 80040bc:	2309      	movs	r3, #9
 80040be:	e7f3      	b.n	80040a8 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 80040c0:	7ea3      	ldrb	r3, [r4, #26]
 80040c2:	f043 0308 	orr.w	r3, r3, #8
 80040c6:	76a3      	strb	r3, [r4, #26]
 80040c8:	e7f2      	b.n	80040b0 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80040ca:	1c43      	adds	r3, r0, #1
 80040cc:	d0f8      	beq.n	80040c0 <tcp_close_shutdown_fin+0x44>
}
 80040ce:	bd10      	pop	{r4, pc}
 80040d0:	0800a2c6 	.word	0x0800a2c6
 80040d4:	0800a2f5 	.word	0x0800a2f5
 80040d8:	08009678 	.word	0x08009678

080040dc <tcp_init>:
{
 80040dc:	4770      	bx	lr
	...

080040e0 <tcp_bind>:
{
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80040e2:	4d1e      	ldr	r5, [pc, #120]	; (800415c <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80040e4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 80040e6:	2900      	cmp	r1, #0
 80040e8:	bf18      	it	ne
 80040ea:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80040ec:	b140      	cbz	r0, 8004100 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80040ee:	7d03      	ldrb	r3, [r0, #20]
 80040f0:	b14b      	cbz	r3, 8004106 <tcp_bind+0x26>
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <tcp_bind+0x80>)
 80040f4:	491b      	ldr	r1, [pc, #108]	; (8004164 <tcp_bind+0x84>)
 80040f6:	481c      	ldr	r0, [pc, #112]	; (8004168 <tcp_bind+0x88>)
 80040f8:	f44f 7211 	mov.w	r2, #580	; 0x244
 80040fc:	f003 fc18 	bl	8007930 <iprintf>
    return ERR_VAL;
 8004100:	f06f 0005 	mvn.w	r0, #5
}
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8004106:	b932      	cbnz	r2, 8004116 <tcp_bind+0x36>
    port = tcp_new_port();
 8004108:	f7ff ff90 	bl	800402c <tcp_new_port>
    if (port == 0) {
 800410c:	4602      	mov	r2, r0
 800410e:	b950      	cbnz	r0, 8004126 <tcp_bind+0x46>
      return ERR_BUF;
 8004110:	f06f 0001 	mvn.w	r0, #1
 8004114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8004116:	4f15      	ldr	r7, [pc, #84]	; (800416c <tcp_bind+0x8c>)
 8004118:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800411c:	6808      	ldr	r0, [r1, #0]
 800411e:	b970      	cbnz	r0, 800413e <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8004120:	3301      	adds	r3, #1
 8004122:	2b04      	cmp	r3, #4
 8004124:	d1f8      	bne.n	8004118 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	b103      	cbz	r3, 800412c <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800412a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <tcp_bind+0x90>)
  pcb->local_port = port;
 800412e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	60e2      	str	r2, [r4, #12]
 8004134:	601c      	str	r4, [r3, #0]
 8004136:	f002 fe63 	bl	8006e00 <tcp_timer_needed>
  return ERR_OK;
 800413a:	2000      	movs	r0, #0
 800413c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800413e:	8ac1      	ldrh	r1, [r0, #22]
 8004140:	4291      	cmp	r1, r2
 8004142:	d105      	bne.n	8004150 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8004144:	6806      	ldr	r6, [r0, #0]
 8004146:	b12e      	cbz	r6, 8004154 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8004148:	6829      	ldr	r1, [r5, #0]
 800414a:	b119      	cbz	r1, 8004154 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800414c:	428e      	cmp	r6, r1
 800414e:	d001      	beq.n	8004154 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8004150:	68c0      	ldr	r0, [r0, #12]
 8004152:	e7e4      	b.n	800411e <tcp_bind+0x3e>
              return ERR_USE;
 8004154:	f06f 0007 	mvn.w	r0, #7
 8004158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415a:	bf00      	nop
 800415c:	08009a18 	.word	0x08009a18
 8004160:	0800a2c6 	.word	0x0800a2c6
 8004164:	0800a285 	.word	0x0800a285
 8004168:	08009678 	.word	0x08009678
 800416c:	0800a358 	.word	0x0800a358
 8004170:	20002e44 	.word	0x20002e44

08004174 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8004174:	7d03      	ldrb	r3, [r0, #20]
{
 8004176:	b570      	push	{r4, r5, r6, lr}
 8004178:	4605      	mov	r5, r0
 800417a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800417c:	b16b      	cbz	r3, 800419a <tcp_listen_with_backlog_and_err+0x26>
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <tcp_listen_with_backlog_and_err+0x98>)
 8004180:	4923      	ldr	r1, [pc, #140]	; (8004210 <tcp_listen_with_backlog_and_err+0x9c>)
 8004182:	4824      	ldr	r0, [pc, #144]	; (8004214 <tcp_listen_with_backlog_and_err+0xa0>)
 8004184:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8004188:	f003 fbd2 	bl	8007930 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800418c:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800418e:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 8004192:	b106      	cbz	r6, 8004196 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 8004194:	7033      	strb	r3, [r6, #0]
}
 8004196:	4620      	mov	r0, r4
 8004198:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800419a:	2002      	movs	r0, #2
 800419c:	f7ff fb08 	bl	80037b0 <memp_malloc>
  if (lpcb == NULL) {
 80041a0:	4604      	mov	r4, r0
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d02f      	beq.n	8004206 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 80041a6:	692b      	ldr	r3, [r5, #16]
 80041a8:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 80041aa:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80041ac:	8aeb      	ldrh	r3, [r5, #22]
 80041ae:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80041b0:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80041b2:	7d6a      	ldrb	r2, [r5, #21]
 80041b4:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80041b6:	7a2a      	ldrb	r2, [r5, #8]
 80041b8:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 80041ba:	7aaa      	ldrb	r2, [r5, #10]
 80041bc:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 80041be:	7a6a      	ldrb	r2, [r5, #9]
 80041c0:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80041c2:	682a      	ldr	r2, [r5, #0]
 80041c4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80041c6:	b13b      	cbz	r3, 80041d8 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80041c8:	4a13      	ldr	r2, [pc, #76]	; (8004218 <tcp_listen_with_backlog_and_err+0xa4>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	429d      	cmp	r5, r3
 80041ce:	d112      	bne.n	80041f6 <tcp_listen_with_backlog_and_err+0x82>
 80041d0:	68eb      	ldr	r3, [r5, #12]
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 80041d8:	4629      	mov	r1, r5
 80041da:	2001      	movs	r0, #1
 80041dc:	f7ff fb04 	bl	80037e8 <memp_free>
  lpcb->accept = tcp_accept_null;
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <tcp_listen_with_backlog_and_err+0xa8>)
 80041e2:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <tcp_listen_with_backlog_and_err+0xac>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	60e2      	str	r2, [r4, #12]
 80041ea:	601c      	str	r4, [r3, #0]
 80041ec:	f002 fe08 	bl	8006e00 <tcp_timer_needed>
  res = ERR_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e7ce      	b.n	8004192 <tcp_listen_with_backlog_and_err+0x1e>
 80041f4:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ec      	beq.n	80041d4 <tcp_listen_with_backlog_and_err+0x60>
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4295      	cmp	r5, r2
 80041fe:	d1f9      	bne.n	80041f4 <tcp_listen_with_backlog_and_err+0x80>
 8004200:	68ea      	ldr	r2, [r5, #12]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e7e6      	b.n	80041d4 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	e7c2      	b.n	8004192 <tcp_listen_with_backlog_and_err+0x1e>
 800420c:	0800a2c6 	.word	0x0800a2c6
 8004210:	0800a335 	.word	0x0800a335
 8004214:	08009678 	.word	0x08009678
 8004218:	20002e44 	.word	0x20002e44
 800421c:	08004bd7 	.word	0x08004bd7
 8004220:	20002e40 	.word	0x20002e40

08004224 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8004224:	2200      	movs	r2, #0
 8004226:	f7ff bfa5 	b.w	8004174 <tcp_listen_with_backlog_and_err>
	...

0800422c <tcp_update_rcv_ann_wnd>:
{
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004230:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004232:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004234:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004236:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004238:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800423c:	1ac8      	subs	r0, r1, r3
 800423e:	42b2      	cmp	r2, r6
 8004240:	4428      	add	r0, r5
 8004242:	bf94      	ite	ls
 8004244:	1a82      	subls	r2, r0, r2
 8004246:	1b82      	subhi	r2, r0, r6
 8004248:	2a00      	cmp	r2, #0
 800424a:	db01      	blt.n	8004250 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800424c:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800424e:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004250:	1aea      	subs	r2, r5, r3
 8004252:	2a00      	cmp	r2, #0
 8004254:	dd02      	ble.n	800425c <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8004256:	2000      	movs	r0, #0
 8004258:	8560      	strh	r0, [r4, #42]	; 0x2a
 800425a:	bd70      	pop	{r4, r5, r6, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800425c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800425e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004262:	d306      	bcc.n	8004272 <tcp_update_rcv_ann_wnd+0x46>
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <tcp_update_rcv_ann_wnd+0x4c>)
 8004266:	4905      	ldr	r1, [pc, #20]	; (800427c <tcp_update_rcv_ann_wnd+0x50>)
 8004268:	4805      	ldr	r0, [pc, #20]	; (8004280 <tcp_update_rcv_ann_wnd+0x54>)
 800426a:	f44f 7242 	mov.w	r2, #776	; 0x308
 800426e:	f003 fb5f 	bl	8007930 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004272:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8004274:	2000      	movs	r0, #0
}
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	0800a2c6 	.word	0x0800a2c6
 800427c:	0800a5a5 	.word	0x0800a5a5
 8004280:	08009678 	.word	0x08009678

08004284 <tcp_recved>:
{
 8004284:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004286:	7d03      	ldrb	r3, [r0, #20]
 8004288:	2b01      	cmp	r3, #1
{
 800428a:	4604      	mov	r4, r0
 800428c:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800428e:	d106      	bne.n	800429e <tcp_recved+0x1a>
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <tcp_recved+0x70>)
 8004292:	4919      	ldr	r1, [pc, #100]	; (80042f8 <tcp_recved+0x74>)
 8004294:	4819      	ldr	r0, [pc, #100]	; (80042fc <tcp_recved+0x78>)
 8004296:	f44f 7248 	mov.w	r2, #800	; 0x320
 800429a:	f003 fb49 	bl	8007930 <iprintf>
  pcb->rcv_wnd += len;
 800429e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80042a0:	4429      	add	r1, r5
 80042a2:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80042a4:	f640 3368 	movw	r3, #2920	; 0xb68
 80042a8:	4299      	cmp	r1, r3
  pcb->rcv_wnd += len;
 80042aa:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80042ac:	d911      	bls.n	80042d2 <tcp_recved+0x4e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80042ae:	f640 3368 	movw	r3, #2920	; 0xb68
 80042b2:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff ffb9 	bl	800422c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80042ba:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80042be:	db17      	blt.n	80042f0 <tcp_recved+0x6c>
    tcp_ack_now(pcb);
 80042c0:	7ea3      	ldrb	r3, [r4, #26]
 80042c2:	f043 0302 	orr.w	r3, r3, #2
 80042c6:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80042c8:	4620      	mov	r0, r4
}
 80042ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80042ce:	f002 ba77 	b.w	80067c0 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 80042d2:	2900      	cmp	r1, #0
 80042d4:	d1ee      	bne.n	80042b4 <tcp_recved+0x30>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80042d6:	7d23      	ldrb	r3, [r4, #20]
 80042d8:	2b07      	cmp	r3, #7
 80042da:	d0e8      	beq.n	80042ae <tcp_recved+0x2a>
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d0e6      	beq.n	80042ae <tcp_recved+0x2a>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <tcp_recved+0x70>)
 80042e2:	4907      	ldr	r1, [pc, #28]	; (8004300 <tcp_recved+0x7c>)
 80042e4:	4805      	ldr	r0, [pc, #20]	; (80042fc <tcp_recved+0x78>)
 80042e6:	f240 322d 	movw	r2, #813	; 0x32d
 80042ea:	f003 fb21 	bl	8007930 <iprintf>
 80042ee:	e7e1      	b.n	80042b4 <tcp_recved+0x30>
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
 80042f2:	bf00      	nop
 80042f4:	0800a2c6 	.word	0x0800a2c6
 80042f8:	0800a3e5 	.word	0x0800a3e5
 80042fc:	08009678 	.word	0x08009678
 8004300:	0800a40b 	.word	0x0800a40b

08004304 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8004304:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8004306:	4604      	mov	r4, r0
 8004308:	b148      	cbz	r0, 800431e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800430a:	6840      	ldr	r0, [r0, #4]
 800430c:	b108      	cbz	r0, 8004312 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800430e:	f7ff fbb9 	bl	8003a84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004312:	4621      	mov	r1, r4
 8004314:	2003      	movs	r0, #3
  }
}
 8004316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800431a:	f7ff ba65 	b.w	80037e8 <memp_free>
 800431e:	bd10      	pop	{r4, pc}

08004320 <tcp_segs_free>:
{
 8004320:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8004322:	b900      	cbnz	r0, 8004326 <tcp_segs_free+0x6>
}
 8004324:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8004326:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8004328:	f7ff ffec 	bl	8004304 <tcp_seg_free>
    seg = next;
 800432c:	4620      	mov	r0, r4
 800432e:	e7f8      	b.n	8004322 <tcp_segs_free+0x2>

08004330 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8004330:	7541      	strb	r1, [r0, #21]
 8004332:	4770      	bx	lr

08004334 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8004334:	b100      	cbz	r0, 8004338 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8004336:	6101      	str	r1, [r0, #16]
 8004338:	4770      	bx	lr
	...

0800433c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8004340:	4604      	mov	r4, r0
 8004342:	b150      	cbz	r0, 800435a <tcp_recv+0x1e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8004344:	7d03      	ldrb	r3, [r0, #20]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d106      	bne.n	8004358 <tcp_recv+0x1c>
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <tcp_recv+0x20>)
 800434c:	4904      	ldr	r1, [pc, #16]	; (8004360 <tcp_recv+0x24>)
 800434e:	4805      	ldr	r0, [pc, #20]	; (8004364 <tcp_recv+0x28>)
 8004350:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8004354:	f003 faec 	bl	8007930 <iprintf>
    pcb->recv = recv;
 8004358:	67e5      	str	r5, [r4, #124]	; 0x7c
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	0800a2c6 	.word	0x0800a2c6
 8004360:	0800a3be 	.word	0x0800a3be
 8004364:	08009678 	.word	0x08009678

08004368 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800436c:	4604      	mov	r4, r0
 800436e:	b150      	cbz	r0, 8004386 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8004370:	7d03      	ldrb	r3, [r0, #20]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d106      	bne.n	8004384 <tcp_sent+0x1c>
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <tcp_sent+0x20>)
 8004378:	4904      	ldr	r1, [pc, #16]	; (800438c <tcp_sent+0x24>)
 800437a:	4805      	ldr	r0, [pc, #20]	; (8004390 <tcp_sent+0x28>)
 800437c:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8004380:	f003 fad6 	bl	8007930 <iprintf>
    pcb->sent = sent;
 8004384:	67a5      	str	r5, [r4, #120]	; 0x78
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	0800a2c6 	.word	0x0800a2c6
 800438c:	0800a42c 	.word	0x0800a42c
 8004390:	08009678 	.word	0x08009678

08004394 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8004398:	4604      	mov	r4, r0
 800439a:	b158      	cbz	r0, 80043b4 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800439c:	7d03      	ldrb	r3, [r0, #20]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d106      	bne.n	80043b0 <tcp_err+0x1c>
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <tcp_err+0x24>)
 80043a4:	4905      	ldr	r1, [pc, #20]	; (80043bc <tcp_err+0x28>)
 80043a6:	4806      	ldr	r0, [pc, #24]	; (80043c0 <tcp_err+0x2c>)
 80043a8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80043ac:	f003 fac0 	bl	8007930 <iprintf>
    pcb->errf = err;
 80043b0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	0800a2c6 	.word	0x0800a2c6
 80043bc:	0800a301 	.word	0x0800a301
 80043c0:	08009678 	.word	0x08009678

080043c4 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80043c4:	b118      	cbz	r0, 80043ce <tcp_accept+0xa>
 80043c6:	7d03      	ldrb	r3, [r0, #20]
 80043c8:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 80043ca:	bf08      	it	eq
 80043cc:	6181      	streq	r1, [r0, #24]
 80043ce:	4770      	bx	lr

080043d0 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80043d0:	7d03      	ldrb	r3, [r0, #20]
 80043d2:	2b01      	cmp	r3, #1
{
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4604      	mov	r4, r0
 80043d8:	460e      	mov	r6, r1
 80043da:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80043dc:	d106      	bne.n	80043ec <tcp_poll+0x1c>
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <tcp_poll+0x24>)
 80043e0:	4905      	ldr	r1, [pc, #20]	; (80043f8 <tcp_poll+0x28>)
 80043e2:	4806      	ldr	r0, [pc, #24]	; (80043fc <tcp_poll+0x2c>)
 80043e4:	f240 7203 	movw	r2, #1795	; 0x703
 80043e8:	f003 faa2 	bl	8007930 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80043ec:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 80043ee:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  pcb->pollinterval = interval;
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	0800a2c6 	.word	0x0800a2c6
 80043f8:	0800a3a0 	.word	0x0800a3a0
 80043fc:	08009678 	.word	0x08009678

08004400 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 8004400:	7d03      	ldrb	r3, [r0, #20]
 8004402:	2b01      	cmp	r3, #1
{
 8004404:	b510      	push	{r4, lr}
 8004406:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8004408:	d915      	bls.n	8004436 <tcp_pcb_purge+0x36>
 800440a:	2b0a      	cmp	r3, #10
 800440c:	d013      	beq.n	8004436 <tcp_pcb_purge+0x36>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800440e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8004410:	b118      	cbz	r0, 800441a <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8004412:	f7ff fb37 	bl	8003a84 <pbuf_free>
      pcb->refused_data = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800441a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800441e:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8004420:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004422:	f7ff ff7d 	bl	8004320 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8004426:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004428:	f7ff ff7a 	bl	8004320 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	66a3      	str	r3, [r4, #104]	; 0x68
 8004430:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8004432:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8004436:	bd10      	pop	{r4, pc}

08004438 <tcp_slowtmr>:
{
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800443c:	4eb8      	ldr	r6, [pc, #736]	; (8004720 <tcp_slowtmr+0x2e8>)
      tcp_active_pcbs_changed = 0;
 800443e:	f8df a314 	ldr.w	sl, [pc, #788]	; 8004754 <tcp_slowtmr+0x31c>
  ++tcp_ticks;
 8004442:	6833      	ldr	r3, [r6, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8004448:	4bb6      	ldr	r3, [pc, #728]	; (8004724 <tcp_slowtmr+0x2ec>)
 800444a:	781a      	ldrb	r2, [r3, #0]
{
 800444c:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 800444e:	3201      	adds	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8004454:	4fb4      	ldr	r7, [pc, #720]	; (8004728 <tcp_slowtmr+0x2f0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004456:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8004758 <tcp_slowtmr+0x320>
  pcb = tcp_active_pcbs;
 800445a:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 800445c:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8004460:	b96c      	cbnz	r4, 800447e <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8004462:	4fb2      	ldr	r7, [pc, #712]	; (800472c <tcp_slowtmr+0x2f4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004464:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8004758 <tcp_slowtmr+0x320>
  pcb = tcp_tw_pcbs;
 8004468:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800446a:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800475c <tcp_slowtmr+0x324>
 800446e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8004734 <tcp_slowtmr+0x2fc>
  while (pcb != NULL) {
 8004472:	2d00      	cmp	r5, #0
 8004474:	f040 8174 	bne.w	8004760 <tcp_slowtmr+0x328>
}
 8004478:	b005      	add	sp, #20
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800447e:	7d23      	ldrb	r3, [r4, #20]
 8004480:	b933      	cbnz	r3, 8004490 <tcp_slowtmr+0x58>
 8004482:	464b      	mov	r3, r9
 8004484:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004488:	49a9      	ldr	r1, [pc, #676]	; (8004730 <tcp_slowtmr+0x2f8>)
 800448a:	48aa      	ldr	r0, [pc, #680]	; (8004734 <tcp_slowtmr+0x2fc>)
 800448c:	f003 fa50 	bl	8007930 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8004490:	7d23      	ldrb	r3, [r4, #20]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d106      	bne.n	80044a4 <tcp_slowtmr+0x6c>
 8004496:	464b      	mov	r3, r9
 8004498:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800449c:	49a6      	ldr	r1, [pc, #664]	; (8004738 <tcp_slowtmr+0x300>)
 800449e:	48a5      	ldr	r0, [pc, #660]	; (8004734 <tcp_slowtmr+0x2fc>)
 80044a0:	f003 fa46 	bl	8007930 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80044a4:	7d23      	ldrb	r3, [r4, #20]
 80044a6:	2b0a      	cmp	r3, #10
 80044a8:	d106      	bne.n	80044b8 <tcp_slowtmr+0x80>
 80044aa:	464b      	mov	r3, r9
 80044ac:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80044b0:	49a2      	ldr	r1, [pc, #648]	; (800473c <tcp_slowtmr+0x304>)
 80044b2:	48a0      	ldr	r0, [pc, #640]	; (8004734 <tcp_slowtmr+0x2fc>)
 80044b4:	f003 fa3c 	bl	8007930 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80044b8:	9b02      	ldr	r3, [sp, #8]
 80044ba:	7f62      	ldrb	r2, [r4, #29]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d104      	bne.n	80044cc <tcp_slowtmr+0x94>
      pcb = pcb->next;
 80044c2:	68e5      	ldr	r5, [r4, #12]
 80044c4:	4644      	mov	r4, r8
      continue;
 80044c6:	46a0      	mov	r8, r4
 80044c8:	462c      	mov	r4, r5
 80044ca:	e7c9      	b.n	8004460 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80044cc:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80044ce:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80044d0:	2902      	cmp	r1, #2
 80044d2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80044d6:	d102      	bne.n	80044de <tcp_slowtmr+0xa6>
 80044d8:	2a05      	cmp	r2, #5
 80044da:	f200 80d4 	bhi.w	8004686 <tcp_slowtmr+0x24e>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80044de:	2a0b      	cmp	r2, #11
 80044e0:	f200 80d1 	bhi.w	8004686 <tcp_slowtmr+0x24e>
      if (pcb->persist_backoff > 0) {
 80044e4:	f894 b091 	ldrb.w	fp, [r4, #145]	; 0x91
 80044e8:	f1bb 0f00 	cmp.w	fp, #0
 80044ec:	f000 8094 	beq.w	8004618 <tcp_slowtmr+0x1e0>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80044f0:	4893      	ldr	r0, [pc, #588]	; (8004740 <tcp_slowtmr+0x308>)
        if (pcb->persist_cnt < backoff_cnt) {
 80044f2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80044f6:	4483      	add	fp, r0
 80044f8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80044fc:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 80044fe:	bf84      	itt	hi
 8004500:	3301      	addhi	r3, #1
 8004502:	f884 3090 	strbhi.w	r3, [r4, #144]	; 0x90
        if (pcb->persist_cnt >= backoff_cnt) {
 8004506:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800450a:	4293      	cmp	r3, r2
 800450c:	d274      	bcs.n	80045f8 <tcp_slowtmr+0x1c0>
    pcb_remove = 0;
 800450e:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8004512:	7d23      	ldrb	r3, [r4, #20]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d10b      	bne.n	8004530 <tcp_slowtmr+0xf8>
      if (pcb->flags & TF_RXCLOSED) {
 8004518:	7ea2      	ldrb	r2, [r4, #26]
 800451a:	06d2      	lsls	r2, r2, #27
 800451c:	d508      	bpl.n	8004530 <tcp_slowtmr+0xf8>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800451e:	6832      	ldr	r2, [r6, #0]
 8004520:	6a21      	ldr	r1, [r4, #32]
 8004522:	1a52      	subs	r2, r2, r1
 8004524:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8004526:	bf84      	itt	hi
 8004528:	f10b 0b01 	addhi.w	fp, fp, #1
 800452c:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004530:	7a25      	ldrb	r5, [r4, #8]
 8004532:	f015 0508 	ands.w	r5, r5, #8
 8004536:	d019      	beq.n	800456c <tcp_slowtmr+0x134>
 8004538:	2b04      	cmp	r3, #4
 800453a:	d002      	beq.n	8004542 <tcp_slowtmr+0x10a>
       ((pcb->state == ESTABLISHED) ||
 800453c:	2b07      	cmp	r3, #7
 800453e:	f040 80b7 	bne.w	80046b0 <tcp_slowtmr+0x278>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004542:	6831      	ldr	r1, [r6, #0]
 8004544:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004546:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800454a:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800454c:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8004550:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8004554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004558:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800455c:	4291      	cmp	r1, r2
 800455e:	f240 8095 	bls.w	800468c <tcp_slowtmr+0x254>
        ++pcb_remove;
 8004562:	f10b 0b01 	add.w	fp, fp, #1
 8004566:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 800456a:	2501      	movs	r5, #1
    if (pcb->state == SYN_RCVD) {
 800456c:	7d23      	ldrb	r3, [r4, #20]
 800456e:	2b03      	cmp	r3, #3
 8004570:	f040 80a0 	bne.w	80046b4 <tcp_slowtmr+0x27c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004574:	6833      	ldr	r3, [r6, #0]
 8004576:	6a22      	ldr	r2, [r4, #32]
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800457c:	d803      	bhi.n	8004586 <tcp_slowtmr+0x14e>
    if (pcb_remove) {
 800457e:	f1bb 0f00 	cmp.w	fp, #0
 8004582:	f000 80ab 	beq.w	80046dc <tcp_slowtmr+0x2a4>
      tcp_pcb_purge(pcb);
 8004586:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8004588:	f8d4 b088 	ldr.w	fp, [r4, #136]	; 0x88
      tcp_pcb_purge(pcb);
 800458c:	f7ff ff38 	bl	8004400 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004590:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	f000 8095 	beq.w	80046c4 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800459a:	429c      	cmp	r4, r3
 800459c:	d106      	bne.n	80045ac <tcp_slowtmr+0x174>
 800459e:	464b      	mov	r3, r9
 80045a0:	f240 4289 	movw	r2, #1161	; 0x489
 80045a4:	4967      	ldr	r1, [pc, #412]	; (8004744 <tcp_slowtmr+0x30c>)
 80045a6:	4863      	ldr	r0, [pc, #396]	; (8004734 <tcp_slowtmr+0x2fc>)
 80045a8:	f003 f9c2 	bl	8007930 <iprintf>
        prev->next = pcb->next;
 80045ac:	68e3      	ldr	r3, [r4, #12]
 80045ae:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 80045b2:	b14d      	cbz	r5, 80045c8 <tcp_slowtmr+0x190>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80045b4:	8b23      	ldrh	r3, [r4, #24]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	8ae3      	ldrh	r3, [r4, #22]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4622      	mov	r2, r4
 80045be:	1d23      	adds	r3, r4, #4
 80045c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80045c4:	f002 fa7a 	bl	8006abc <tcp_rst>
      err_arg = pcb->callback_arg;
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80045cc:	4621      	mov	r1, r4
 80045ce:	2001      	movs	r0, #1
      pcb = pcb->next;
 80045d0:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80045d2:	f7ff f909 	bl	80037e8 <memp_free>
      tcp_active_pcbs_changed = 0;
 80045d6:	2200      	movs	r2, #0
 80045d8:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80045dc:	f1bb 0f00 	cmp.w	fp, #0
 80045e0:	d004      	beq.n	80045ec <tcp_slowtmr+0x1b4>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	f06f 010c 	mvn.w	r1, #12
 80045e8:	4618      	mov	r0, r3
 80045ea:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80045ec:	f89a 3000 	ldrb.w	r3, [sl]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f43f af67 	beq.w	80044c4 <tcp_slowtmr+0x8c>
 80045f6:	e72d      	b.n	8004454 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80045f8:	4620      	mov	r0, r4
 80045fa:	f002 fb4f 	bl	8006c9c <tcp_zero_window_probe>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d185      	bne.n	800450e <tcp_slowtmr+0xd6>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8004602:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
            pcb->persist_cnt = 0;
 8004606:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800460a:	2b06      	cmp	r3, #6
 800460c:	f63f af7f 	bhi.w	800450e <tcp_slowtmr+0xd6>
              pcb->persist_backoff++;
 8004610:	3301      	adds	r3, #1
 8004612:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 8004616:	e77a      	b.n	800450e <tcp_slowtmr+0xd6>
        if (pcb->rtime >= 0) {
 8004618:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800461c:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800461e:	bfa4      	itt	ge
 8004620:	3301      	addge	r3, #1
 8004622:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8004624:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004626:	2b00      	cmp	r3, #0
 8004628:	f43f af71 	beq.w	800450e <tcp_slowtmr+0xd6>
 800462c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8004630:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8004634:	4298      	cmp	r0, r3
 8004636:	f6ff af6a 	blt.w	800450e <tcp_slowtmr+0xd6>
          if (pcb->state != SYN_SENT) {
 800463a:	2902      	cmp	r1, #2
 800463c:	d00a      	beq.n	8004654 <tcp_slowtmr+0x21c>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800463e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8004642:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8004646:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800464a:	493f      	ldr	r1, [pc, #252]	; (8004748 <tcp_slowtmr+0x310>)
 800464c:	5c8a      	ldrb	r2, [r1, r2]
 800464e:	4093      	lsls	r3, r2
 8004650:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8004654:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004656:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 800465a:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800465c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004660:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8004662:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8004666:	4293      	cmp	r3, r2
 8004668:	bf28      	it	cs
 800466a:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800466c:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 800466e:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004670:	b292      	uxth	r2, r2
 8004672:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8004674:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8004678:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 800467a:	bf38      	it	cc
 800467c:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8004680:	f002 fa76 	bl	8006b70 <tcp_rexmit_rto>
 8004684:	e745      	b.n	8004512 <tcp_slowtmr+0xda>
      ++pcb_remove;
 8004686:	f04f 0b01 	mov.w	fp, #1
 800468a:	e742      	b.n	8004512 <tcp_slowtmr+0xda>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800468c:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8004690:	4a2e      	ldr	r2, [pc, #184]	; (800474c <tcp_slowtmr+0x314>)
 8004692:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8004696:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800469a:	4299      	cmp	r1, r3
 800469c:	d908      	bls.n	80046b0 <tcp_slowtmr+0x278>
        err = tcp_keepalive(pcb);
 800469e:	4620      	mov	r0, r4
 80046a0:	f002 fad2 	bl	8006c48 <tcp_keepalive>
        if (err == ERR_OK) {
 80046a4:	b920      	cbnz	r0, 80046b0 <tcp_slowtmr+0x278>
          pcb->keep_cnt_sent++;
 80046a6:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 80046aa:	3301      	adds	r3, #1
 80046ac:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
    pcb_reset = 0;
 80046b0:	2500      	movs	r5, #0
 80046b2:	e75b      	b.n	800456c <tcp_slowtmr+0x134>
    if (pcb->state == LAST_ACK) {
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	f47f af62 	bne.w	800457e <tcp_slowtmr+0x146>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	6a22      	ldr	r2, [r4, #32]
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	2bf0      	cmp	r3, #240	; 0xf0
 80046c2:	e75b      	b.n	800457c <tcp_slowtmr+0x144>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d006      	beq.n	80046d6 <tcp_slowtmr+0x29e>
 80046c8:	464b      	mov	r3, r9
 80046ca:	f240 428d 	movw	r2, #1165	; 0x48d
 80046ce:	4920      	ldr	r1, [pc, #128]	; (8004750 <tcp_slowtmr+0x318>)
 80046d0:	4818      	ldr	r0, [pc, #96]	; (8004734 <tcp_slowtmr+0x2fc>)
 80046d2:	f003 f92d 	bl	8007930 <iprintf>
        tcp_active_pcbs = pcb->next;
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	e76a      	b.n	80045b2 <tcp_slowtmr+0x17a>
      ++prev->polltmr;
 80046dc:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80046de:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 80046e0:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80046e6:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80046e8:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80046ea:	f63f aeec 	bhi.w	80044c6 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80046ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        prev->polltmr = 0;
 80046f2:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80046f6:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80046fa:	b173      	cbz	r3, 800471a <tcp_slowtmr+0x2e2>
 80046fc:	4621      	mov	r1, r4
 80046fe:	6920      	ldr	r0, [r4, #16]
 8004700:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8004702:	f89a 3000 	ldrb.w	r3, [sl]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f aea4 	bne.w	8004454 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800470c:	2800      	cmp	r0, #0
 800470e:	f47f aeda 	bne.w	80044c6 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8004712:	4620      	mov	r0, r4
 8004714:	f002 f854 	bl	80067c0 <tcp_output>
 8004718:	e6d5      	b.n	80044c6 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800471a:	4658      	mov	r0, fp
 800471c:	e7f1      	b.n	8004702 <tcp_slowtmr+0x2ca>
 800471e:	bf00      	nop
 8004720:	20002e3c 	.word	0x20002e3c
 8004724:	20000602 	.word	0x20000602
 8004728:	20002e38 	.word	0x20002e38
 800472c:	20002e48 	.word	0x20002e48
 8004730:	0800a453 	.word	0x0800a453
 8004734:	08009678 	.word	0x08009678
 8004738:	0800a47d 	.word	0x0800a47d
 800473c:	0800a4a7 	.word	0x0800a4a7
 8004740:	0800a399 	.word	0x0800a399
 8004744:	0800a4d4 	.word	0x0800a4d4
 8004748:	0800a278 	.word	0x0800a278
 800474c:	000124f8 	.word	0x000124f8
 8004750:	0800a4ff 	.word	0x0800a4ff
 8004754:	20002e34 	.word	0x20002e34
 8004758:	0800a2c6 	.word	0x0800a2c6
 800475c:	0800a529 	.word	0x0800a529
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004760:	7d2b      	ldrb	r3, [r5, #20]
 8004762:	2b0a      	cmp	r3, #10
 8004764:	d006      	beq.n	8004774 <tcp_slowtmr+0x33c>
 8004766:	4643      	mov	r3, r8
 8004768:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800476c:	4651      	mov	r1, sl
 800476e:	4648      	mov	r0, r9
 8004770:	f003 f8de 	bl	8007930 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	6a2a      	ldr	r2, [r5, #32]
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	2bf0      	cmp	r3, #240	; 0xf0
 800477c:	d816      	bhi.n	80047ac <tcp_slowtmr+0x374>
      pcb = pcb->next;
 800477e:	462c      	mov	r4, r5
 8004780:	68ed      	ldr	r5, [r5, #12]
 8004782:	e676      	b.n	8004472 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	429d      	cmp	r5, r3
 8004788:	d106      	bne.n	8004798 <tcp_slowtmr+0x360>
 800478a:	4643      	mov	r3, r8
 800478c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004790:	490f      	ldr	r1, [pc, #60]	; (80047d0 <tcp_slowtmr+0x398>)
 8004792:	4648      	mov	r0, r9
 8004794:	f003 f8cc 	bl	8007930 <iprintf>
        prev->next = pcb->next;
 8004798:	68eb      	ldr	r3, [r5, #12]
 800479a:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800479c:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80047a0:	4629      	mov	r1, r5
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7ff f820 	bl	80037e8 <memp_free>
      pcb = pcb->next;
 80047a8:	465d      	mov	r5, fp
 80047aa:	e662      	b.n	8004472 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 80047ac:	4628      	mov	r0, r5
 80047ae:	f7ff fe27 	bl	8004400 <tcp_pcb_purge>
      if (prev != NULL) {
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	d1e6      	bne.n	8004784 <tcp_slowtmr+0x34c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	429d      	cmp	r5, r3
 80047ba:	d006      	beq.n	80047ca <tcp_slowtmr+0x392>
 80047bc:	4643      	mov	r3, r8
 80047be:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80047c2:	4904      	ldr	r1, [pc, #16]	; (80047d4 <tcp_slowtmr+0x39c>)
 80047c4:	4648      	mov	r0, r9
 80047c6:	f003 f8b3 	bl	8007930 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80047ca:	68eb      	ldr	r3, [r5, #12]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	e7e5      	b.n	800479c <tcp_slowtmr+0x364>
 80047d0:	0800a558 	.word	0x0800a558
 80047d4:	0800a57f 	.word	0x0800a57f

080047d8 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 80047d8:	6803      	ldr	r3, [r0, #0]
 80047da:	428b      	cmp	r3, r1
{
 80047dc:	b510      	push	{r4, lr}
 80047de:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80047e0:	d12e      	bne.n	8004840 <tcp_pcb_remove+0x68>
 80047e2:	68cb      	ldr	r3, [r1, #12]
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	2300      	movs	r3, #0
 80047e8:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80047ea:	4620      	mov	r0, r4
 80047ec:	f7ff fe08 	bl	8004400 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80047f0:	7d23      	ldrb	r3, [r4, #20]
 80047f2:	2b0a      	cmp	r3, #10
 80047f4:	d00a      	beq.n	800480c <tcp_pcb_remove+0x34>
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d008      	beq.n	800480c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80047fa:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80047fc:	07da      	lsls	r2, r3, #31
 80047fe:	d505      	bpl.n	800480c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8004806:	4620      	mov	r0, r4
 8004808:	f001 ffda 	bl	80067c0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800480c:	7d23      	ldrb	r3, [r4, #20]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d011      	beq.n	8004836 <tcp_pcb_remove+0x5e>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8004812:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004814:	b133      	cbz	r3, 8004824 <tcp_pcb_remove+0x4c>
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <tcp_pcb_remove+0x78>)
 8004818:	490e      	ldr	r1, [pc, #56]	; (8004854 <tcp_pcb_remove+0x7c>)
 800481a:	480f      	ldr	r0, [pc, #60]	; (8004858 <tcp_pcb_remove+0x80>)
 800481c:	f240 7253 	movw	r2, #1875	; 0x753
 8004820:	f003 f886 	bl	8007930 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004824:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004826:	b133      	cbz	r3, 8004836 <tcp_pcb_remove+0x5e>
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <tcp_pcb_remove+0x78>)
 800482a:	490c      	ldr	r1, [pc, #48]	; (800485c <tcp_pcb_remove+0x84>)
 800482c:	480a      	ldr	r0, [pc, #40]	; (8004858 <tcp_pcb_remove+0x80>)
 800482e:	f240 7254 	movw	r2, #1876	; 0x754
 8004832:	f003 f87d 	bl	8007930 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8004836:	2300      	movs	r3, #0
 8004838:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800483a:	82e3      	strh	r3, [r4, #22]
 800483c:	bd10      	pop	{r4, pc}
 800483e:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0d0      	beq.n	80047e6 <tcp_pcb_remove+0xe>
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4294      	cmp	r4, r2
 8004848:	d1f9      	bne.n	800483e <tcp_pcb_remove+0x66>
 800484a:	68e2      	ldr	r2, [r4, #12]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	e7ca      	b.n	80047e6 <tcp_pcb_remove+0xe>
 8004850:	0800a2c6 	.word	0x0800a2c6
 8004854:	0800a368 	.word	0x0800a368
 8004858:	08009678 	.word	0x08009678
 800485c:	0800a380 	.word	0x0800a380

08004860 <tcp_close_shutdown>:
{
 8004860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004862:	7d03      	ldrb	r3, [r0, #20]
 8004864:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004866:	2900      	cmp	r1, #0
 8004868:	d04a      	beq.n	8004900 <tcp_close_shutdown+0xa0>
 800486a:	2b04      	cmp	r3, #4
 800486c:	d001      	beq.n	8004872 <tcp_close_shutdown+0x12>
 800486e:	2b07      	cmp	r3, #7
 8004870:	d146      	bne.n	8004900 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004872:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004874:	b922      	cbnz	r2, 8004880 <tcp_close_shutdown+0x20>
 8004876:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8004878:	f640 3268 	movw	r2, #2920	; 0xb68
 800487c:	4291      	cmp	r1, r2
 800487e:	d03f      	beq.n	8004900 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004880:	7ea3      	ldrb	r3, [r4, #26]
 8004882:	06db      	lsls	r3, r3, #27
 8004884:	d406      	bmi.n	8004894 <tcp_close_shutdown+0x34>
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <tcp_close_shutdown+0x124>)
 8004888:	493f      	ldr	r1, [pc, #252]	; (8004988 <tcp_close_shutdown+0x128>)
 800488a:	4840      	ldr	r0, [pc, #256]	; (800498c <tcp_close_shutdown+0x12c>)
 800488c:	f240 120f 	movw	r2, #271	; 0x10f
 8004890:	f003 f84e 	bl	8007930 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004894:	8b23      	ldrh	r3, [r4, #24]
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	8ae3      	ldrh	r3, [r4, #22]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	4622      	mov	r2, r4
 800489e:	1d23      	adds	r3, r4, #4
 80048a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80048a4:	f002 f90a 	bl	8006abc <tcp_rst>
      tcp_pcb_purge(pcb);
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff fda9 	bl	8004400 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80048ae:	4a38      	ldr	r2, [pc, #224]	; (8004990 <tcp_close_shutdown+0x130>)
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	429c      	cmp	r4, r3
 80048b4:	d115      	bne.n	80048e2 <tcp_close_shutdown+0x82>
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	60e3      	str	r3, [r4, #12]
 80048be:	4b35      	ldr	r3, [pc, #212]	; (8004994 <tcp_close_shutdown+0x134>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80048c4:	7d23      	ldrb	r3, [r4, #20]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d113      	bne.n	80048f2 <tcp_close_shutdown+0x92>
        pcb->state = TIME_WAIT;
 80048ca:	230a      	movs	r3, #10
 80048cc:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80048ce:	4b32      	ldr	r3, [pc, #200]	; (8004998 <tcp_close_shutdown+0x138>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	60e2      	str	r2, [r4, #12]
 80048d4:	601c      	str	r4, [r3, #0]
 80048d6:	f002 fa93 	bl	8006e00 <tcp_timer_needed>
}
 80048da:	2000      	movs	r0, #0
 80048dc:	b003      	add	sp, #12
 80048de:	bd30      	pop	{r4, r5, pc}
 80048e0:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0e9      	beq.n	80048ba <tcp_close_shutdown+0x5a>
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	4294      	cmp	r4, r2
 80048ea:	d1f9      	bne.n	80048e0 <tcp_close_shutdown+0x80>
 80048ec:	68e2      	ldr	r2, [r4, #12]
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	e7e3      	b.n	80048ba <tcp_close_shutdown+0x5a>
        if (tcp_input_pcb == pcb) {
 80048f2:	4b2a      	ldr	r3, [pc, #168]	; (800499c <tcp_close_shutdown+0x13c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d117      	bne.n	800492a <tcp_close_shutdown+0xca>
          tcp_trigger_input_pcb_close();
 80048fa:	f001 faf5 	bl	8005ee8 <tcp_trigger_input_pcb_close>
 80048fe:	e7ec      	b.n	80048da <tcp_close_shutdown+0x7a>
  switch (pcb->state) {
 8004900:	2b01      	cmp	r3, #1
 8004902:	d020      	beq.n	8004946 <tcp_close_shutdown+0xe6>
 8004904:	d307      	bcc.n	8004916 <tcp_close_shutdown+0xb6>
 8004906:	2b02      	cmp	r3, #2
 8004908:	d033      	beq.n	8004972 <tcp_close_shutdown+0x112>
    return tcp_close_shutdown_fin(pcb);
 800490a:	4620      	mov	r0, r4
}
 800490c:	b003      	add	sp, #12
 800490e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8004912:	f7ff bbb3 	b.w	800407c <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8004916:	8ae3      	ldrh	r3, [r4, #22]
 8004918:	b13b      	cbz	r3, 800492a <tcp_close_shutdown+0xca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <tcp_close_shutdown+0x140>)
 800491c:	6813      	ldr	r3, [r2, #0]
 800491e:	429c      	cmp	r4, r3
 8004920:	d109      	bne.n	8004936 <tcp_close_shutdown+0xd6>
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	2300      	movs	r3, #0
 8004928:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 800492a:	4621      	mov	r1, r4
 800492c:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 800492e:	f7fe ff5b 	bl	80037e8 <memp_free>
    break;
 8004932:	e7d2      	b.n	80048da <tcp_close_shutdown+0x7a>
 8004934:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f5      	beq.n	8004926 <tcp_close_shutdown+0xc6>
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	4294      	cmp	r4, r2
 800493e:	d1f9      	bne.n	8004934 <tcp_close_shutdown+0xd4>
 8004940:	68e2      	ldr	r2, [r4, #12]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e7ef      	b.n	8004926 <tcp_close_shutdown+0xc6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004946:	4917      	ldr	r1, [pc, #92]	; (80049a4 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8004948:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800494a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800494e:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004950:	b94a      	cbnz	r2, 8004966 <tcp_close_shutdown+0x106>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004952:	3301      	adds	r3, #1
 8004954:	2b04      	cmp	r3, #4
 8004956:	d1f8      	bne.n	800494a <tcp_close_shutdown+0xea>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004958:	4621      	mov	r1, r4
 800495a:	4813      	ldr	r0, [pc, #76]	; (80049a8 <tcp_close_shutdown+0x148>)
 800495c:	f7ff ff3c 	bl	80047d8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004960:	4621      	mov	r1, r4
 8004962:	2002      	movs	r0, #2
 8004964:	e7e3      	b.n	800492e <tcp_close_shutdown+0xce>
      if (pcb->listener == lpcb) {
 8004966:	6f55      	ldr	r5, [r2, #116]	; 0x74
 8004968:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 800496a:	bf08      	it	eq
 800496c:	6750      	streq	r0, [r2, #116]	; 0x74
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800496e:	68d2      	ldr	r2, [r2, #12]
 8004970:	e7ee      	b.n	8004950 <tcp_close_shutdown+0xf0>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004972:	4621      	mov	r1, r4
 8004974:	4806      	ldr	r0, [pc, #24]	; (8004990 <tcp_close_shutdown+0x130>)
 8004976:	f7ff ff2f 	bl	80047d8 <tcp_pcb_remove>
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <tcp_close_shutdown+0x134>)
 800497c:	2001      	movs	r0, #1
 800497e:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004980:	4621      	mov	r1, r4
 8004982:	e7d4      	b.n	800492e <tcp_close_shutdown+0xce>
 8004984:	0800a2c6 	.word	0x0800a2c6
 8004988:	0800a2ad 	.word	0x0800a2ad
 800498c:	08009678 	.word	0x08009678
 8004990:	20002e38 	.word	0x20002e38
 8004994:	20002e34 	.word	0x20002e34
 8004998:	20002e48 	.word	0x20002e48
 800499c:	20002e4c 	.word	0x20002e4c
 80049a0:	20002e44 	.word	0x20002e44
 80049a4:	0800a358 	.word	0x0800a358
 80049a8:	20002e40 	.word	0x20002e40

080049ac <tcp_close>:
  if (pcb->state != LISTEN) {
 80049ac:	7d03      	ldrb	r3, [r0, #20]
 80049ae:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 80049b0:	bf1e      	ittt	ne
 80049b2:	7e83      	ldrbne	r3, [r0, #26]
 80049b4:	f043 0310 	orrne.w	r3, r3, #16
 80049b8:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80049ba:	2101      	movs	r1, #1
 80049bc:	f7ff bf50 	b.w	8004860 <tcp_close_shutdown>

080049c0 <tcp_recv_null>:
{
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4608      	mov	r0, r1
  if (p != NULL) {
 80049c4:	4614      	mov	r4, r2
 80049c6:	b13a      	cbz	r2, 80049d8 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 80049c8:	8911      	ldrh	r1, [r2, #8]
 80049ca:	f7ff fc5b 	bl	8004284 <tcp_recved>
    pbuf_free(p);
 80049ce:	4620      	mov	r0, r4
 80049d0:	f7ff f858 	bl	8003a84 <pbuf_free>
}
 80049d4:	2000      	movs	r0, #0
 80049d6:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1fb      	bne.n	80049d4 <tcp_recv_null+0x14>
}
 80049dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80049e0:	f7ff bfe4 	b.w	80049ac <tcp_close>

080049e4 <tcp_process_refused_data>:
{
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80049e6:	6f06      	ldr	r6, [r0, #112]	; 0x70
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80049e8:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
    u8_t refused_flags = pcb->refused_data->flags;
 80049ea:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80049ec:	2300      	movs	r3, #0
{
 80049ee:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 80049f0:	6703      	str	r3, [r0, #112]	; 0x70
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80049f2:	b1dd      	cbz	r5, 8004a2c <tcp_process_refused_data+0x48>
 80049f4:	4601      	mov	r1, r0
 80049f6:	4632      	mov	r2, r6
 80049f8:	6900      	ldr	r0, [r0, #16]
 80049fa:	47a8      	blx	r5
 80049fc:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80049fe:	b9e0      	cbnz	r0, 8004a3a <tcp_process_refused_data+0x56>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8004a00:	06bb      	lsls	r3, r7, #26
 8004a02:	d511      	bpl.n	8004a28 <tcp_process_refused_data+0x44>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004a04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8004a06:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004a08:	f640 3268 	movw	r2, #2920	; 0xb68
 8004a0c:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8004a0e:	bf1c      	itt	ne
 8004a10:	3301      	addne	r3, #1
 8004a12:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8004a14:	b146      	cbz	r6, 8004a28 <tcp_process_refused_data+0x44>
 8004a16:	2300      	movs	r3, #0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	6920      	ldr	r0, [r4, #16]
 8004a1e:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8004a20:	300d      	adds	r0, #13
 8004a22:	d101      	bne.n	8004a28 <tcp_process_refused_data+0x44>
          return ERR_ABRT;
 8004a24:	f06f 050c 	mvn.w	r5, #12
}
 8004a28:	4628      	mov	r0, r5
 8004a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	462b      	mov	r3, r5
 8004a30:	4632      	mov	r2, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	f7ff ffc4 	bl	80049c0 <tcp_recv_null>
 8004a38:	e7e0      	b.n	80049fc <tcp_process_refused_data+0x18>
    } else if (err == ERR_ABRT) {
 8004a3a:	f110 050d 	adds.w	r5, r0, #13
 8004a3e:	d0f1      	beq.n	8004a24 <tcp_process_refused_data+0x40>
      pcb->refused_data = refused_data;
 8004a40:	6726      	str	r6, [r4, #112]	; 0x70
      return ERR_INPROGRESS;
 8004a42:	f06f 0504 	mvn.w	r5, #4
 8004a46:	e7ef      	b.n	8004a28 <tcp_process_refused_data+0x44>

08004a48 <tcp_fasttmr>:
{
 8004a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8004a4c:	4d1b      	ldr	r5, [pc, #108]	; (8004abc <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8004a4e:	4f1c      	ldr	r7, [pc, #112]	; (8004ac0 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8004a50:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8004a52:	4e1c      	ldr	r6, [pc, #112]	; (8004ac4 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8004a54:	3301      	adds	r3, #1
 8004a56:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8004a58:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8004a5a:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8004a5e:	b90c      	cbnz	r4, 8004a64 <tcp_fasttmr+0x1c>
}
 8004a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8004a64:	782b      	ldrb	r3, [r5, #0]
 8004a66:	7f62      	ldrb	r2, [r4, #29]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d024      	beq.n	8004ab6 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8004a6c:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8004a6e:	7ea3      	ldrb	r3, [r4, #26]
 8004a70:	07d9      	lsls	r1, r3, #31
 8004a72:	d509      	bpl.n	8004a88 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f001 fea0 	bl	80067c0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8004a80:	7ea3      	ldrb	r3, [r4, #26]
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8004a88:	7ea3      	ldrb	r3, [r4, #26]
 8004a8a:	071a      	lsls	r2, r3, #28
 8004a8c:	d505      	bpl.n	8004a9a <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8004a8e:	f023 0308 	bic.w	r3, r3, #8
 8004a92:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff faf1 	bl	800407c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8004a9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      next = pcb->next;
 8004a9c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8004aa0:	b13b      	cbz	r3, 8004ab2 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8004aa2:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8004aa4:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8004aa8:	f7ff ff9c 	bl	80049e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8004aac:	7833      	ldrb	r3, [r6, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1d2      	bne.n	8004a58 <tcp_fasttmr+0x10>
{
 8004ab2:	464c      	mov	r4, r9
 8004ab4:	e7d3      	b.n	8004a5e <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8004ab6:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8004aba:	e7fa      	b.n	8004ab2 <tcp_fasttmr+0x6a>
 8004abc:	20000602 	.word	0x20000602
 8004ac0:	20002e38 	.word	0x20002e38
 8004ac4:	20002e34 	.word	0x20002e34

08004ac8 <tcp_tmr>:
{
 8004ac8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8004aca:	f7ff ffbd 	bl	8004a48 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8004ace:	4a06      	ldr	r2, [pc, #24]	; (8004ae8 <tcp_tmr+0x20>)
 8004ad0:	7813      	ldrb	r3, [r2, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	7013      	strb	r3, [r2, #0]
 8004ad8:	07db      	lsls	r3, r3, #31
 8004ada:	d503      	bpl.n	8004ae4 <tcp_tmr+0x1c>
}
 8004adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8004ae0:	f7ff bcaa 	b.w	8004438 <tcp_slowtmr>
 8004ae4:	bd08      	pop	{r3, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000601 	.word	0x20000601

08004aec <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004aec:	7d03      	ldrb	r3, [r0, #20]
 8004aee:	2b01      	cmp	r3, #1
{
 8004af0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4604      	mov	r4, r0
 8004af6:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004af8:	d106      	bne.n	8004b08 <tcp_abandon+0x1c>
 8004afa:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <tcp_abandon+0xc8>)
 8004afc:	492e      	ldr	r1, [pc, #184]	; (8004bb8 <tcp_abandon+0xcc>)
 8004afe:	482f      	ldr	r0, [pc, #188]	; (8004bbc <tcp_abandon+0xd0>)
 8004b00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b04:	f002 ff14 	bl	8007930 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8004b08:	7d23      	ldrb	r3, [r4, #20]
 8004b0a:	2b0a      	cmp	r3, #10
 8004b0c:	d10a      	bne.n	8004b24 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004b0e:	4621      	mov	r1, r4
 8004b10:	482b      	ldr	r0, [pc, #172]	; (8004bc0 <tcp_abandon+0xd4>)
 8004b12:	f7ff fe61 	bl	80047d8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8004b16:	4621      	mov	r1, r4
 8004b18:	2001      	movs	r0, #1
}
 8004b1a:	b002      	add	sp, #8
 8004b1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8004b20:	f7fe be62 	b.w	80037e8 <memp_free>
    seqno = pcb->snd_nxt;
 8004b24:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8004b28:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8004b2c:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    errf_arg = pcb->callback_arg;
 8004b30:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8004b34:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8004b36:	b99b      	cbnz	r3, 8004b60 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8004b38:	b13d      	cbz	r5, 8004b4a <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <tcp_abandon+0xd8>)
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	429c      	cmp	r4, r3
 8004b40:	d106      	bne.n	8004b50 <tcp_abandon+0x64>
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	2500      	movs	r5, #0
 8004b48:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8004b4a:	462e      	mov	r6, r5
 8004b4c:	e00f      	b.n	8004b6e <tcp_abandon+0x82>
 8004b4e:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f8      	beq.n	8004b46 <tcp_abandon+0x5a>
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	4294      	cmp	r4, r2
 8004b58:	d1f9      	bne.n	8004b4e <tcp_abandon+0x62>
 8004b5a:	68e2      	ldr	r2, [r4, #12]
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	e7f2      	b.n	8004b46 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004b60:	4621      	mov	r1, r4
 8004b62:	4819      	ldr	r0, [pc, #100]	; (8004bc8 <tcp_abandon+0xdc>)
 8004b64:	f7ff fe38 	bl	80047d8 <tcp_pcb_remove>
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <tcp_abandon+0xe0>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8004b6e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004b70:	b108      	cbz	r0, 8004b76 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8004b72:	f7ff fbd5 	bl	8004320 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004b76:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004b78:	b108      	cbz	r0, 8004b7e <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8004b7a:	f7ff fbd1 	bl	8004320 <tcp_segs_free>
    if (send_rst) {
 8004b7e:	b146      	cbz	r6, 8004b92 <tcp_abandon+0xa6>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004b80:	8b23      	ldrh	r3, [r4, #24]
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	9500      	str	r5, [sp, #0]
 8004b86:	1d23      	adds	r3, r4, #4
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	4648      	mov	r0, r9
 8004b8e:	f001 ff95 	bl	8006abc <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8004b92:	4621      	mov	r1, r4
 8004b94:	2001      	movs	r0, #1
 8004b96:	f7fe fe27 	bl	80037e8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004b9a:	b13f      	cbz	r7, 8004bac <tcp_abandon+0xc0>
 8004b9c:	f06f 010c 	mvn.w	r1, #12
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	463b      	mov	r3, r7
}
 8004ba4:	b002      	add	sp, #8
 8004ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004baa:	4718      	bx	r3
}
 8004bac:	b002      	add	sp, #8
 8004bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb2:	bf00      	nop
 8004bb4:	0800a2c6 	.word	0x0800a2c6
 8004bb8:	0800a247 	.word	0x0800a247
 8004bbc:	08009678 	.word	0x08009678
 8004bc0:	20002e48 	.word	0x20002e48
 8004bc4:	20002e44 	.word	0x20002e44
 8004bc8:	20002e38 	.word	0x20002e38
 8004bcc:	20002e34 	.word	0x20002e34

08004bd0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	f7ff bf8b 	b.w	8004aec <tcp_abandon>

08004bd6 <tcp_accept_null>:
{
 8004bd6:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8004bd8:	4608      	mov	r0, r1
 8004bda:	f7ff fff9 	bl	8004bd0 <tcp_abort>
}
 8004bde:	f06f 000c 	mvn.w	r0, #12
 8004be2:	bd08      	pop	{r3, pc}

08004be4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8004be8:	b901      	cbnz	r1, 8004bec <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8004bec:	680a      	ldr	r2, [r1, #0]
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	68cc      	ldr	r4, [r1, #12]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d102      	bne.n	8004bfc <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	f7ff ffea 	bl	8004bd0 <tcp_abort>
      pcb = pcb->next;
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	e7f3      	b.n	8004be8 <tcp_netif_ip_addr_changed_pcblist+0x4>

08004c00 <tcp_kill_state>:
{
 8004c00:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8004c02:	f1a0 0308 	sub.w	r3, r0, #8
 8004c06:	2b01      	cmp	r3, #1
{
 8004c08:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8004c0a:	d906      	bls.n	8004c1a <tcp_kill_state+0x1a>
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <tcp_kill_state+0x4c>)
 8004c0e:	4910      	ldr	r1, [pc, #64]	; (8004c50 <tcp_kill_state+0x50>)
 8004c10:	4810      	ldr	r0, [pc, #64]	; (8004c54 <tcp_kill_state+0x54>)
 8004c12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c16:	f002 fe8b 	bl	8007930 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <tcp_kill_state+0x58>)
 8004c1c:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <tcp_kill_state+0x5c>)
  inactivity = 0;
 8004c20:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c22:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8004c24:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c26:	b921      	cbnz	r1, 8004c32 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8004c28:	b170      	cbz	r0, 8004c48 <tcp_kill_state+0x48>
}
 8004c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8004c2e:	f7ff bf5d 	b.w	8004aec <tcp_abandon>
    if (pcb->state == state) {
 8004c32:	7d0b      	ldrb	r3, [r1, #20]
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d105      	bne.n	8004c44 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c38:	6a0b      	ldr	r3, [r1, #32]
 8004c3a:	1aeb      	subs	r3, r5, r3
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	bf9c      	itt	ls
 8004c40:	461a      	movls	r2, r3
 8004c42:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c44:	68c9      	ldr	r1, [r1, #12]
 8004c46:	e7ee      	b.n	8004c26 <tcp_kill_state+0x26>
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
 8004c4a:	bf00      	nop
 8004c4c:	0800a2c6 	.word	0x0800a2c6
 8004c50:	0800a327 	.word	0x0800a327
 8004c54:	08009678 	.word	0x08009678
 8004c58:	20002e38 	.word	0x20002e38
 8004c5c:	20002e3c 	.word	0x20002e3c

08004c60 <tcp_alloc>:
{
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004c64:	2001      	movs	r0, #1
 8004c66:	f7fe fda3 	bl	80037b0 <memp_malloc>
 8004c6a:	4d3b      	ldr	r5, [pc, #236]	; (8004d58 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	bb90      	cbnz	r0, 8004cd6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c70:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c72:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c74:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8004c76:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d157      	bne.n	8004d2c <tcp_alloc+0xcc>
  if (inactive != NULL) {
 8004c7c:	b114      	cbz	r4, 8004c84 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7ff ffa6 	bl	8004bd0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004c84:	2001      	movs	r0, #1
 8004c86:	f7fe fd93 	bl	80037b0 <memp_malloc>
    if (pcb == NULL) {
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	bb18      	cbnz	r0, 8004cd6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8004c8e:	2009      	movs	r0, #9
 8004c90:	f7ff ffb6 	bl	8004c00 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7fe fd8b 	bl	80037b0 <memp_malloc>
      if (pcb == NULL) {
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	b9d8      	cbnz	r0, 8004cd6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8004c9e:	2008      	movs	r0, #8
 8004ca0:	f7ff ffae 	bl	8004c00 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f7fe fd83 	bl	80037b0 <memp_malloc>
        if (pcb == NULL) {
 8004caa:	4604      	mov	r4, r0
 8004cac:	b998      	cbnz	r0, 8004cd6 <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004cb0:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004cb4:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004cb6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004cba:	bf0c      	ite	eq
 8004cbc:	4631      	moveq	r1, r6
 8004cbe:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d13b      	bne.n	8004d3c <tcp_alloc+0xdc>
  if (inactive != NULL) {
 8004cc4:	b114      	cbz	r4, 8004ccc <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff ff82 	bl	8004bd0 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7fe fd6f 	bl	80037b0 <memp_malloc>
  if (pcb != NULL) {
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	b340      	cbz	r0, 8004d28 <tcp_alloc+0xc8>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8004cd6:	2294      	movs	r2, #148	; 0x94
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f002 fe20 	bl	8007920 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8004ce0:	f640 3268 	movw	r2, #2920	; 0xb68
 8004ce4:	8562      	strh	r2, [r4, #42]	; 0x2a
 8004ce6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8004ce8:	22ff      	movs	r2, #255	; 0xff
 8004cea:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8004cec:	f44f 7206 	mov.w	r2, #536	; 0x218
 8004cf0:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8004cf2:	2206      	movs	r2, #6
 8004cf4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8004cf8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8004cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cfe:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8004d00:	2201      	movs	r2, #1
 8004d02:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8004d06:	682a      	ldr	r2, [r5, #0]
 8004d08:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8004d0a:	f241 63d0 	movw	r3, #5840	; 0x16d0
    pcb->last_timer = tcp_timer_ctr;
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8004d10:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8004d14:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 8004d1a:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 8004d1c:	67e3      	str	r3, [r4, #124]	; 0x7c
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8004d20:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 8004d22:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004d24:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8004d28:	4620      	mov	r0, r4
 8004d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	1a82      	subs	r2, r0, r2
 8004d30:	428a      	cmp	r2, r1
 8004d32:	bf24      	itt	cs
 8004d34:	461c      	movcs	r4, r3
 8004d36:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	e79d      	b.n	8004c78 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8004d3c:	7d5f      	ldrb	r7, [r3, #21]
 8004d3e:	428f      	cmp	r7, r1
 8004d40:	d807      	bhi.n	8004d52 <tcp_alloc+0xf2>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8004d48:	4282      	cmp	r2, r0
 8004d4a:	bf22      	ittt	cs
 8004d4c:	4639      	movcs	r1, r7
 8004d4e:	4610      	movcs	r0, r2
 8004d50:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	e7b4      	b.n	8004cc0 <tcp_alloc+0x60>
 8004d56:	bf00      	nop
 8004d58:	20002e3c 	.word	0x20002e3c
 8004d5c:	20002e48 	.word	0x20002e48
 8004d60:	20002e38 	.word	0x20002e38
 8004d64:	20000602 	.word	0x20000602
 8004d68:	080049c1 	.word	0x080049c1
 8004d6c:	006ddd00 	.word	0x006ddd00

08004d70 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8004d70:	2040      	movs	r0, #64	; 0x40
 8004d72:	f7ff bf75 	b.w	8004c60 <tcp_alloc>
	...

08004d78 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <tcp_next_iss+0x10>)
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <tcp_next_iss+0x14>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	4410      	add	r0, r2
 8004d82:	6018      	str	r0, [r3, #0]
}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000008 	.word	0x20000008
 8004d8c:	20002e3c 	.word	0x20002e3c

08004d90 <tcp_eff_send_mss_impl>:
{
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8004d94:	4608      	mov	r0, r1
 8004d96:	f7fd fdbf 	bl	8002918 <ip4_route>
    if (outif == NULL) {
 8004d9a:	b130      	cbz	r0, 8004daa <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8004d9c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8004d9e:	b123      	cbz	r3, 8004daa <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8004da0:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	429c      	cmp	r4, r3
 8004da6:	bf28      	it	cs
 8004da8:	461c      	movcs	r4, r3
}
 8004daa:	4620      	mov	r0, r4
 8004dac:	bd10      	pop	{r4, pc}
	...

08004db0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8004db4:	4604      	mov	r4, r0
 8004db6:	b180      	cbz	r0, 8004dda <tcp_netif_ip_addr_changed+0x2a>
 8004db8:	6803      	ldr	r3, [r0, #0]
 8004dba:	b173      	cbz	r3, 8004dda <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <tcp_netif_ip_addr_changed+0x40>)
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	f7ff ff10 	bl	8004be4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <tcp_netif_ip_addr_changed+0x44>)
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	f7ff ff0b 	bl	8004be4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8004dce:	b125      	cbz	r5, 8004dda <tcp_netif_ip_addr_changed+0x2a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b113      	cbz	r3, 8004dda <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <tcp_netif_ip_addr_changed+0x48>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	b903      	cbnz	r3, 8004ddc <tcp_netif_ip_addr_changed+0x2c>
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8004de0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8004de2:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8004de4:	bf04      	itt	eq
 8004de6:	6829      	ldreq	r1, [r5, #0]
 8004de8:	6019      	streq	r1, [r3, #0]
{
 8004dea:	4613      	mov	r3, r2
 8004dec:	e7f4      	b.n	8004dd8 <tcp_netif_ip_addr_changed+0x28>
 8004dee:	bf00      	nop
 8004df0:	20002e38 	.word	0x20002e38
 8004df4:	20002e44 	.word	0x20002e44
 8004df8:	20002e40 	.word	0x20002e40

08004dfc <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8004dfc:	7d03      	ldrb	r3, [r0, #20]
 8004dfe:	2b03      	cmp	r3, #3
{
 8004e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8004e06:	d806      	bhi.n	8004e16 <tcp_receive+0x1a>
 8004e08:	4b87      	ldr	r3, [pc, #540]	; (8005028 <tcp_receive+0x22c>)
 8004e0a:	4988      	ldr	r1, [pc, #544]	; (800502c <tcp_receive+0x230>)
 8004e0c:	4888      	ldr	r0, [pc, #544]	; (8005030 <tcp_receive+0x234>)
 8004e0e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8004e12:	f002 fd8d 	bl	8007930 <iprintf>

  if (flags & TCP_ACK) {
 8004e16:	4b87      	ldr	r3, [pc, #540]	; (8005034 <tcp_receive+0x238>)
 8004e18:	4e87      	ldr	r6, [pc, #540]	; (8005038 <tcp_receive+0x23c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f013 0f10 	tst.w	r3, #16
 8004e20:	f000 817c 	beq.w	800511c <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8004e24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e26:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8004e28:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8004e2c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8004e2e:	1a1d      	subs	r5, r3, r0
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	4d82      	ldr	r5, [pc, #520]	; (800503c <tcp_receive+0x240>)
 8004e34:	db0d      	blt.n	8004e52 <tcp_receive+0x56>
 8004e36:	4283      	cmp	r3, r0
 8004e38:	d103      	bne.n	8004e42 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	1acb      	subs	r3, r1, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db07      	blt.n	8004e52 <tcp_receive+0x56>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d11c      	bne.n	8004e82 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8004e48:	4b7d      	ldr	r3, [pc, #500]	; (8005040 <tcp_receive+0x244>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	89db      	ldrh	r3, [r3, #14]
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d917      	bls.n	8004e82 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8004e52:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8004e54:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8004e5c:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8004e5e:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8004e60:	6828      	ldr	r0, [r5, #0]
 8004e62:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8004e64:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8004e68:	bf38      	it	cc
 8004e6a:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8004e6e:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
      if (pcb->snd_wnd == 0) {
 8004e72:	2f00      	cmp	r7, #0
 8004e74:	d13c      	bne.n	8004ef0 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8004e76:	b920      	cbnz	r0, 8004e82 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8004e78:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
          pcb->persist_backoff = 1;
 8004e7c:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8004e7e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8004e88:	4f6e      	ldr	r7, [pc, #440]	; (8005044 <tcp_receive+0x248>)
 8004e8a:	eba3 000e 	sub.w	r0, r3, lr
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	dc37      	bgt.n	8004f02 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8004e92:	486d      	ldr	r0, [pc, #436]	; (8005048 <tcp_receive+0x24c>)
 8004e94:	8800      	ldrh	r0, [r0, #0]
 8004e96:	2800      	cmp	r0, #0
 8004e98:	f040 82aa 	bne.w	80053f0 <tcp_receive+0x5f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8004e9c:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8004e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ea0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004ea4:	4401      	add	r1, r0
 8004ea6:	428a      	cmp	r2, r1
 8004ea8:	f040 82a2 	bne.w	80053f0 <tcp_receive+0x5f4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8004eac:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	f2c0 829d 	blt.w	80053f0 <tcp_receive+0x5f4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8004eb6:	4573      	cmp	r3, lr
 8004eb8:	f040 829a 	bne.w	80053f0 <tcp_receive+0x5f4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8004ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ec0:	1c53      	adds	r3, r2, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8004ec6:	bf38      	it	cc
 8004ec8:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8004ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d911      	bls.n	8004ef8 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8004ed4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8004ed8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004eda:	4413      	add	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d201      	bcs.n	8004ee6 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8004ee2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004ee6:	f8df a140 	ldr.w	sl, [pc, #320]	; 8005028 <tcp_receive+0x22c>
 8004eea:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8005030 <tcp_receive+0x234>
 8004eee:	e108      	b.n	8005102 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0c6      	beq.n	8004e82 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e7c2      	b.n	8004e7e <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8004ef8:	d1f5      	bne.n	8004ee6 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8004efa:	4620      	mov	r0, r4
 8004efc:	f001 fe7d 	bl	8006bfa <tcp_rexmit_fast>
 8004f00:	e7f1      	b.n	8004ee6 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8004f02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004f04:	1a9a      	subs	r2, r3, r2
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	f300 808a 	bgt.w	8005020 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8004f0c:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8004f0e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8004f12:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8004f14:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8004f16:	bf41      	itttt	mi
 8004f18:	f022 0204 	bicmi.w	r2, r2, #4
 8004f1c:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8004f1e:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8004f22:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8004f26:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8004f28:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8004f2a:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8004f2c:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8004f30:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8004f32:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8004f36:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8004f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8004f3e:	d90f      	bls.n	8004f60 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8004f40:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8004f44:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8004f48:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8004f4a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8004f4c:	bf9c      	itt	ls
 8004f4e:	435b      	mulls	r3, r3
 8004f50:	fb93 f3f2 	sdivls	r3, r3, r2
 8004f54:	4413      	add	r3, r2
 8004f56:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8004f58:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8004f5a:	bf38      	it	cc
 8004f5c:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004f60:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005028 <tcp_receive+0x22c>
 8004f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005030 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 8004f68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004f6a:	b943      	cbnz	r3, 8004f7e <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 8004f6c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	d153      	bne.n	800501c <tcp_receive+0x220>
        pcb->rtime = -1;
 8004f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f78:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8004f7a:	76e3      	strb	r3, [r4, #27]
 8004f7c:	e7b3      	b.n	8004ee6 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	6858      	ldr	r0, [r3, #4]
 8004f82:	f7fd f802 	bl	8001f8a <lwip_htonl>
 8004f86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004f88:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4683      	mov	fp, r0
 8004f90:	8998      	ldrh	r0, [r3, #12]
 8004f92:	f7fc fff7 	bl	8001f84 <lwip_htons>
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	f010 0003 	ands.w	r0, r0, #3
 8004f9c:	eba8 0803 	sub.w	r8, r8, r3
 8004fa0:	bf18      	it	ne
 8004fa2:	2001      	movne	r0, #1
 8004fa4:	44d8      	add	r8, fp
 8004fa6:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8004fa8:	f1b8 0f00 	cmp.w	r8, #0
 8004fac:	dcde      	bgt.n	8004f6c <tcp_receive+0x170>
        next = pcb->unacked;
 8004fae:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004fb2:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8004fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fba:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004fbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004fc0:	f7fe ff0e 	bl	8003de0 <pbuf_clen>
 8004fc4:	4583      	cmp	fp, r0
 8004fc6:	d206      	bcs.n	8004fd6 <tcp_receive+0x1da>
 8004fc8:	464b      	mov	r3, r9
 8004fca:	f240 429e 	movw	r2, #1182	; 0x49e
 8004fce:	491f      	ldr	r1, [pc, #124]	; (800504c <tcp_receive+0x250>)
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	f002 fcad 	bl	8007930 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8004fd6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004fda:	f7fe ff01 	bl	8003de0 <pbuf_clen>
 8004fde:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8004fe2:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8004fe4:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8004fe6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8004fea:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8004fee:	4413      	add	r3, r2
        tcp_seg_free(next);
 8004ff0:	4640      	mov	r0, r8
        recv_acked += next->len;
 8004ff2:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8004ff4:	f7ff f986 	bl	8004304 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8004ff8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0b3      	beq.n	8004f68 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8005000:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1b0      	bne.n	8004f68 <tcp_receive+0x16c>
 8005006:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ad      	bne.n	8004f68 <tcp_receive+0x16c>
 800500c:	464b      	mov	r3, r9
 800500e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8005012:	490f      	ldr	r1, [pc, #60]	; (8005050 <tcp_receive+0x254>)
 8005014:	4650      	mov	r0, sl
 8005016:	f002 fc8b 	bl	8007930 <iprintf>
 800501a:	e7a5      	b.n	8004f68 <tcp_receive+0x16c>
        pcb->rtime = 0;
 800501c:	8623      	strh	r3, [r4, #48]	; 0x30
 800501e:	e7ac      	b.n	8004f7a <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8005020:	4620      	mov	r0, r4
 8005022:	f001 fb97 	bl	8006754 <tcp_send_empty_ack>
 8005026:	e75e      	b.n	8004ee6 <tcp_receive+0xea>
 8005028:	0800a775 	.word	0x0800a775
 800502c:	0800a7a7 	.word	0x0800a7a7
 8005030:	08009678 	.word	0x08009678
 8005034:	20000608 	.word	0x20000608
 8005038:	20000628 	.word	0x20000628
 800503c:	20000604 	.word	0x20000604
 8005040:	20000630 	.word	0x20000630
 8005044:	2000061c 	.word	0x2000061c
 8005048:	2000063e 	.word	0x2000063e
 800504c:	0800a7c0 	.word	0x0800a7c0
 8005050:	0800a7e8 	.word	0x0800a7e8
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8005054:	682a      	ldr	r2, [r5, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	9201      	str	r2, [sp, #4]
 800505a:	6858      	ldr	r0, [r3, #4]
 800505c:	f7fc ff95 	bl	8001f8a <lwip_htonl>
 8005060:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005062:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4683      	mov	fp, r0
 800506a:	8998      	ldrh	r0, [r3, #12]
 800506c:	f7fc ff8a 	bl	8001f84 <lwip_htons>
 8005070:	9a01      	ldr	r2, [sp, #4]
 8005072:	f010 0003 	ands.w	r0, r0, #3
 8005076:	eba2 0808 	sub.w	r8, r2, r8
 800507a:	bf18      	it	ne
 800507c:	2001      	movne	r0, #1
 800507e:	eba8 080b 	sub.w	r8, r8, fp
 8005082:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8005086:	f1b8 0f00 	cmp.w	r8, #0
 800508a:	db3d      	blt.n	8005108 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	2b00      	cmp	r3, #0
 8005094:	dc38      	bgt.n	8005108 <tcp_receive+0x30c>
      next = pcb->unsent;
 8005096:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800509a:	f8d8 3000 	ldr.w	r3, [r8]
 800509e:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80050a0:	b90b      	cbnz	r3, 80050a6 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 80050a2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80050a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80050aa:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 80050ae:	f7fe fe97 	bl	8003de0 <pbuf_clen>
 80050b2:	4583      	cmp	fp, r0
 80050b4:	d206      	bcs.n	80050c4 <tcp_receive+0x2c8>
 80050b6:	4653      	mov	r3, sl
 80050b8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80050bc:	49b4      	ldr	r1, [pc, #720]	; (8005390 <tcp_receive+0x594>)
 80050be:	4648      	mov	r0, r9
 80050c0:	f002 fc36 	bl	8007930 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80050c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80050c8:	f7fe fe8a 	bl	8003de0 <pbuf_clen>
 80050cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80050d0:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80050d2:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 80050d4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80050d8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 80050dc:	4413      	add	r3, r2
      tcp_seg_free(next);
 80050de:	4640      	mov	r0, r8
      recv_acked += next->len;
 80050e0:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 80050e2:	f7ff f90f 	bl	8004304 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80050e6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80050ea:	b153      	cbz	r3, 8005102 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80050ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80050ee:	b943      	cbnz	r3, 8005102 <tcp_receive+0x306>
 80050f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80050f2:	b933      	cbnz	r3, 8005102 <tcp_receive+0x306>
 80050f4:	4653      	mov	r3, sl
 80050f6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80050fa:	49a6      	ldr	r1, [pc, #664]	; (8005394 <tcp_receive+0x598>)
 80050fc:	4648      	mov	r0, r9
 80050fe:	f002 fc17 	bl	8007930 <iprintf>
    while (pcb->unsent != NULL &&
 8005102:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1a5      	bne.n	8005054 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8005108:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800510c:	883a      	ldrh	r2, [r7, #0]
 800510e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005110:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8005112:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005116:	2a00      	cmp	r2, #0
 8005118:	f040 80f4 	bne.w	8005304 <tcp_receive+0x508>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800511c:	4b9e      	ldr	r3, [pc, #632]	; (8005398 <tcp_receive+0x59c>)
 800511e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005120:	8818      	ldrh	r0, [r3, #0]
 8005122:	4698      	mov	r8, r3
 8005124:	2800      	cmp	r0, #0
 8005126:	f000 8157 	beq.w	80053d8 <tcp_receive+0x5dc>
 800512a:	7d23      	ldrb	r3, [r4, #20]
 800512c:	2b06      	cmp	r3, #6
 800512e:	f200 8153 	bhi.w	80053d8 <tcp_receive+0x5dc>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8005132:	6833      	ldr	r3, [r6, #0]
 8005134:	1ad5      	subs	r5, r2, r3
 8005136:	2d01      	cmp	r5, #1
 8005138:	f100 811c 	bmi.w	8005374 <tcp_receive+0x578>
 800513c:	f1c3 0101 	rsb	r1, r3, #1
 8005140:	1a09      	subs	r1, r1, r0
 8005142:	4411      	add	r1, r2
 8005144:	2900      	cmp	r1, #0
 8005146:	f300 8115 	bgt.w	8005374 <tcp_receive+0x578>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800514a:	4f94      	ldr	r7, [pc, #592]	; (800539c <tcp_receive+0x5a0>)
 800514c:	f8d7 9004 	ldr.w	r9, [r7, #4]
      off = pcb->rcv_nxt - seqno;
 8005150:	46aa      	mov	sl, r5
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8005152:	f1b9 0f00 	cmp.w	r9, #0
 8005156:	d106      	bne.n	8005166 <tcp_receive+0x36a>
 8005158:	4b91      	ldr	r3, [pc, #580]	; (80053a0 <tcp_receive+0x5a4>)
 800515a:	4992      	ldr	r1, [pc, #584]	; (80053a4 <tcp_receive+0x5a8>)
 800515c:	4892      	ldr	r0, [pc, #584]	; (80053a8 <tcp_receive+0x5ac>)
 800515e:	f240 523c 	movw	r2, #1340	; 0x53c
 8005162:	f002 fbe5 	bl	8007930 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8005166:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800516a:	429d      	cmp	r5, r3
 800516c:	dd06      	ble.n	800517c <tcp_receive+0x380>
 800516e:	4b8c      	ldr	r3, [pc, #560]	; (80053a0 <tcp_receive+0x5a4>)
 8005170:	498e      	ldr	r1, [pc, #568]	; (80053ac <tcp_receive+0x5b0>)
 8005172:	488d      	ldr	r0, [pc, #564]	; (80053a8 <tcp_receive+0x5ac>)
 8005174:	f240 523d 	movw	r2, #1341	; 0x53d
 8005178:	f002 fbda 	bl	8007930 <iprintf>
      if (inseg.p->len < off) {
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	8943      	ldrh	r3, [r0, #10]
 8005180:	429d      	cmp	r5, r3
 8005182:	f340 80ec 	ble.w	800535e <tcp_receive+0x562>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005186:	8903      	ldrh	r3, [r0, #8]
 8005188:	429d      	cmp	r5, r3
 800518a:	dd06      	ble.n	800519a <tcp_receive+0x39e>
 800518c:	4b84      	ldr	r3, [pc, #528]	; (80053a0 <tcp_receive+0x5a4>)
 800518e:	4988      	ldr	r1, [pc, #544]	; (80053b0 <tcp_receive+0x5b4>)
 8005190:	4885      	ldr	r0, [pc, #532]	; (80053a8 <tcp_receive+0x5ac>)
 8005192:	f240 523f 	movw	r2, #1343	; 0x53f
 8005196:	f002 fbcb 	bl	8007930 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8919      	ldrh	r1, [r3, #8]
 800519e:	1b4d      	subs	r5, r1, r5
 80051a0:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80051a2:	2200      	movs	r2, #0
        while (p->len < off) {
 80051a4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 80051a8:	459a      	cmp	sl, r3
 80051aa:	f300 80cf 	bgt.w	800534c <tcp_receive+0x550>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80051ae:	f1ca 0100 	rsb	r1, sl, #0
 80051b2:	b209      	sxth	r1, r1
 80051b4:	4648      	mov	r0, r9
 80051b6:	f7fe fc5f 	bl	8003a78 <pbuf_header>
 80051ba:	b130      	cbz	r0, 80051ca <tcp_receive+0x3ce>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80051bc:	4b78      	ldr	r3, [pc, #480]	; (80053a0 <tcp_receive+0x5a4>)
 80051be:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80051c2:	497c      	ldr	r1, [pc, #496]	; (80053b4 <tcp_receive+0x5b8>)
 80051c4:	4878      	ldr	r0, [pc, #480]	; (80053a8 <tcp_receive+0x5ac>)
 80051c6:	f002 fbb3 	bl	8007930 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80051ca:	6833      	ldr	r3, [r6, #0]
 80051cc:	8939      	ldrh	r1, [r7, #8]
 80051ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80051d0:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80051d2:	440b      	add	r3, r1
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	813b      	strh	r3, [r7, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80051dc:	6831      	ldr	r1, [r6, #0]
 80051de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051e0:	1a8b      	subs	r3, r1, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f2c0 80f2 	blt.w	80053cc <tcp_receive+0x5d0>
 80051e8:	1c4b      	adds	r3, r1, #1
 80051ea:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	1a1b      	subs	r3, r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f300 80eb 	bgt.w	80053cc <tcp_receive+0x5d0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80051f6:	4291      	cmp	r1, r2
 80051f8:	f040 80e8 	bne.w	80053cc <tcp_receive+0x5d0>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80051fc:	4d67      	ldr	r5, [pc, #412]	; (800539c <tcp_receive+0x5a0>)
 80051fe:	68eb      	ldr	r3, [r5, #12]
 8005200:	892f      	ldrh	r7, [r5, #8]
 8005202:	8998      	ldrh	r0, [r3, #12]
 8005204:	f7fc febe 	bl	8001f84 <lwip_htons>
 8005208:	f010 0003 	ands.w	r0, r0, #3
 800520c:	bf18      	it	ne
 800520e:	2001      	movne	r0, #1
 8005210:	4438      	add	r0, r7

        if (tcplen > pcb->rcv_wnd) {
 8005212:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8005214:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8005216:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8005218:	f8a8 0000 	strh.w	r0, [r8]
        if (tcplen > pcb->rcv_wnd) {
 800521c:	d241      	bcs.n	80052a2 <tcp_receive+0x4a6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800521e:	68eb      	ldr	r3, [r5, #12]
 8005220:	8998      	ldrh	r0, [r3, #12]
 8005222:	f7fc feaf 	bl	8001f84 <lwip_htons>
 8005226:	07c7      	lsls	r7, r0, #31
 8005228:	d50f      	bpl.n	800524a <tcp_receive+0x44e>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800522a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800522e:	f8b9 700c 	ldrh.w	r7, [r9, #12]
 8005232:	4638      	mov	r0, r7
 8005234:	f7fc fea6 	bl	8001f84 <lwip_htons>
 8005238:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800523c:	f7fc fea2 	bl	8001f84 <lwip_htons>
 8005240:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8005244:	4307      	orrs	r7, r0
 8005246:	f8a9 700c 	strh.w	r7, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800524a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800524c:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800524e:	68eb      	ldr	r3, [r5, #12]
 8005250:	8998      	ldrh	r0, [r3, #12]
 8005252:	f7fc fe97 	bl	8001f84 <lwip_htons>
 8005256:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8005258:	bf48      	it	mi
 800525a:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800525c:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 800525e:	bf44      	itt	mi
 8005260:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005264:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8005266:	8929      	ldrh	r1, [r5, #8]
 8005268:	f7fe fd4a 	bl	8003d00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800526c:	68eb      	ldr	r3, [r5, #12]
 800526e:	892f      	ldrh	r7, [r5, #8]
 8005270:	8998      	ldrh	r0, [r3, #12]
 8005272:	f7fc fe87 	bl	8001f84 <lwip_htons>
 8005276:	f010 0003 	ands.w	r0, r0, #3
 800527a:	bf18      	it	ne
 800527c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800527e:	6833      	ldr	r3, [r6, #0]
 8005280:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8005282:	4438      	add	r0, r7
 8005284:	b280      	uxth	r0, r0
 8005286:	f8a8 0000 	strh.w	r0, [r8]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800528a:	4418      	add	r0, r3
 800528c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800528e:	4413      	add	r3, r2
 8005290:	4298      	cmp	r0, r3
 8005292:	d006      	beq.n	80052a2 <tcp_receive+0x4a6>
 8005294:	4b42      	ldr	r3, [pc, #264]	; (80053a0 <tcp_receive+0x5a4>)
 8005296:	4948      	ldr	r1, [pc, #288]	; (80053b8 <tcp_receive+0x5bc>)
 8005298:	4843      	ldr	r0, [pc, #268]	; (80053a8 <tcp_receive+0x5ac>)
 800529a:	f240 527f 	movw	r2, #1407	; 0x57f
 800529e:	f002 fb47 	bl	8007930 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80052a2:	f8b8 2000 	ldrh.w	r2, [r8]
 80052a6:	6833      	ldr	r3, [r6, #0]
 80052a8:	4413      	add	r3, r2
 80052aa:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80052ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d206      	bcs.n	80052c0 <tcp_receive+0x4c4>
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <tcp_receive+0x5a4>)
 80052b4:	4941      	ldr	r1, [pc, #260]	; (80053bc <tcp_receive+0x5c0>)
 80052b6:	483c      	ldr	r0, [pc, #240]	; (80053a8 <tcp_receive+0x5ac>)
 80052b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80052bc:	f002 fb38 	bl	8007930 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80052c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052c2:	f8b8 2000 	ldrh.w	r2, [r8]
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7fe ffae 	bl	800422c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80052d0:	686b      	ldr	r3, [r5, #4]
 80052d2:	891a      	ldrh	r2, [r3, #8]
 80052d4:	b11a      	cbz	r2, 80052de <tcp_receive+0x4e2>
          recv_data = inseg.p;
 80052d6:	4a3a      	ldr	r2, [pc, #232]	; (80053c0 <tcp_receive+0x5c4>)
 80052d8:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80052de:	68eb      	ldr	r3, [r5, #12]
 80052e0:	8998      	ldrh	r0, [r3, #12]
 80052e2:	f7fc fe4f 	bl	8001f84 <lwip_htons>
 80052e6:	07c1      	lsls	r1, r0, #31
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80052e8:	bf41      	itttt	mi
 80052ea:	4a36      	ldrmi	r2, [pc, #216]	; (80053c4 <tcp_receive+0x5c8>)
 80052ec:	7813      	ldrbmi	r3, [r2, #0]
 80052ee:	f043 0320 	orrmi.w	r3, r3, #32
 80052f2:	7013      	strbmi	r3, [r2, #0]
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80052f4:	7ea3      	ldrb	r3, [r4, #26]
 80052f6:	07da      	lsls	r2, r3, #31
 80052f8:	d544      	bpl.n	8005384 <tcp_receive+0x588>
 80052fa:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	e041      	b.n	8005388 <tcp_receive+0x58c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005306:	6829      	ldr	r1, [r5, #0]
 8005308:	1a5b      	subs	r3, r3, r1
 800530a:	2b00      	cmp	r3, #0
 800530c:	f6bf af06 	bge.w	800511c <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005310:	4b2d      	ldr	r3, [pc, #180]	; (80053c8 <tcp_receive+0x5cc>)
      m = m - (pcb->sa >> 3);
 8005312:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 800531a:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 800531e:	b289      	uxth	r1, r1
 8005320:	b20b      	sxth	r3, r1
      if (m < 0) {
 8005322:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8005324:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8005328:	4408      	add	r0, r1
        m = -m;
 800532a:	bfbc      	itt	lt
 800532c:	4249      	neglt	r1, r1
 800532e:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8005330:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8005334:	4413      	add	r3, r2
      pcb->sa += m;
 8005336:	b200      	sxth	r0, r0
      pcb->sv += m;
 8005338:	b29b      	uxth	r3, r3
 800533a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800533c:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8005340:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8005344:	2300      	movs	r3, #0
      pcb->sa += m;
 8005346:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8005348:	6363      	str	r3, [r4, #52]	; 0x34
 800534a:	e6e7      	b.n	800511c <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 800534c:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8005350:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 8005354:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 8005358:	f8d9 9000 	ldr.w	r9, [r9]
 800535c:	e722      	b.n	80051a4 <tcp_receive+0x3a8>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800535e:	4269      	negs	r1, r5
 8005360:	b209      	sxth	r1, r1
 8005362:	f7fe fb89 	bl	8003a78 <pbuf_header>
 8005366:	2800      	cmp	r0, #0
 8005368:	f43f af2f 	beq.w	80051ca <tcp_receive+0x3ce>
          LWIP_ASSERT("pbuf_header failed", 0);
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <tcp_receive+0x5a4>)
 800536e:	f240 5251 	movw	r2, #1361	; 0x551
 8005372:	e726      	b.n	80051c2 <tcp_receive+0x3c6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8005378:	bfbe      	ittt	lt
 800537a:	7ea3      	ldrblt	r3, [r4, #26]
 800537c:	f043 0302 	orrlt.w	r3, r3, #2
 8005380:	76a3      	strblt	r3, [r4, #26]
 8005382:	e72b      	b.n	80051dc <tcp_receive+0x3e0>
        tcp_ack(pcb);
 8005384:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8005388:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 800538a:	b003      	add	sp, #12
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005390:	0800a7c0 	.word	0x0800a7c0
 8005394:	0800a7e8 	.word	0x0800a7e8
 8005398:	2000063e 	.word	0x2000063e
 800539c:	2000060c 	.word	0x2000060c
 80053a0:	0800a775 	.word	0x0800a775
 80053a4:	0800a808 	.word	0x0800a808
 80053a8:	08009678 	.word	0x08009678
 80053ac:	0800a818 	.word	0x0800a818
 80053b0:	0800a827 	.word	0x0800a827
 80053b4:	0800a837 	.word	0x0800a837
 80053b8:	0800a84a 	.word	0x0800a84a
 80053bc:	0800a881 	.word	0x0800a881
 80053c0:	20000620 	.word	0x20000620
 80053c4:	20000624 	.word	0x20000624
 80053c8:	20002e3c 	.word	0x20002e3c
        tcp_send_empty_ack(pcb);
 80053cc:	4620      	mov	r0, r4
}
 80053ce:	b003      	add	sp, #12
 80053d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 80053d4:	f001 b9be 	b.w	8006754 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80053d8:	6833      	ldr	r3, [r6, #0]
 80053da:	1a99      	subs	r1, r3, r2
 80053dc:	2900      	cmp	r1, #0
 80053de:	db05      	blt.n	80053ec <tcp_receive+0x5f0>
 80053e0:	3301      	adds	r3, #1
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	ddce      	ble.n	800538a <tcp_receive+0x58e>
      tcp_ack_now(pcb);
 80053ec:	7ea3      	ldrb	r3, [r4, #26]
 80053ee:	e786      	b.n	80052fe <tcp_receive+0x502>
        pcb->dupacks = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f6:	e576      	b.n	8004ee6 <tcp_receive+0xea>

080053f8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <tcp_getoptbyte+0x30>)
 80053fa:	4a0c      	ldr	r2, [pc, #48]	; (800542c <tcp_getoptbyte+0x34>)
 80053fc:	6819      	ldr	r1, [r3, #0]
{
 80053fe:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8005400:	b121      	cbz	r1, 800540c <tcp_getoptbyte+0x14>
 8005402:	480b      	ldr	r0, [pc, #44]	; (8005430 <tcp_getoptbyte+0x38>)
 8005404:	8813      	ldrh	r3, [r2, #0]
 8005406:	8800      	ldrh	r0, [r0, #0]
 8005408:	4283      	cmp	r3, r0
 800540a:	d207      	bcs.n	800541c <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 800540e:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8005410:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8005412:	440b      	add	r3, r1
 8005414:	1c48      	adds	r0, r1, #1
 8005416:	8010      	strh	r0, [r2, #0]
 8005418:	7d18      	ldrb	r0, [r3, #20]
 800541a:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800541c:	1c5c      	adds	r4, r3, #1
 800541e:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8005420:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8005422:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8005424:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8005426:	bd10      	pop	{r4, pc}
 8005428:	20000638 	.word	0x20000638
 800542c:	2000062c 	.word	0x2000062c
 8005430:	20000634 	.word	0x20000634
 8005434:	20000630 	.word	0x20000630

08005438 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800543c:	4d1a      	ldr	r5, [pc, #104]	; (80054a8 <tcp_parseopt.isra.1.part.2+0x70>)
 800543e:	4e1b      	ldr	r6, [pc, #108]	; (80054ac <tcp_parseopt.isra.1.part.2+0x74>)
 8005440:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8005442:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005444:	802b      	strh	r3, [r5, #0]
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005446:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800544a:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800544e:	8834      	ldrh	r4, [r6, #0]
 8005450:	882b      	ldrh	r3, [r5, #0]
 8005452:	42a3      	cmp	r3, r4
 8005454:	d301      	bcc.n	800545a <tcp_parseopt.isra.1.part.2+0x22>
 8005456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      u8_t opt = tcp_getoptbyte();
 800545a:	f7ff ffcd 	bl	80053f8 <tcp_getoptbyte>
      switch (opt) {
 800545e:	2801      	cmp	r0, #1
 8005460:	d0f5      	beq.n	800544e <tcp_parseopt.isra.1.part.2+0x16>
 8005462:	d3f8      	bcc.n	8005456 <tcp_parseopt.isra.1.part.2+0x1e>
 8005464:	2802      	cmp	r0, #2
 8005466:	d116      	bne.n	8005496 <tcp_parseopt.isra.1.part.2+0x5e>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005468:	f7ff ffc6 	bl	80053f8 <tcp_getoptbyte>
 800546c:	2804      	cmp	r0, #4
 800546e:	d1f2      	bne.n	8005456 <tcp_parseopt.isra.1.part.2+0x1e>
 8005470:	882b      	ldrh	r3, [r5, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	42a3      	cmp	r3, r4
 8005476:	daee      	bge.n	8005456 <tcp_parseopt.isra.1.part.2+0x1e>
        mss = (tcp_getoptbyte() << 8);
 8005478:	f7ff ffbe 	bl	80053f8 <tcp_getoptbyte>
 800547c:	0200      	lsls	r0, r0, #8
 800547e:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8005480:	f7ff ffba 	bl	80053f8 <tcp_getoptbyte>
 8005484:	4320      	orrs	r0, r4
 8005486:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005488:	1e43      	subs	r3, r0, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	4543      	cmp	r3, r8
 800548e:	bf88      	it	hi
 8005490:	4648      	movhi	r0, r9
 8005492:	8038      	strh	r0, [r7, #0]
 8005494:	e7db      	b.n	800544e <tcp_parseopt.isra.1.part.2+0x16>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8005496:	f7ff ffaf 	bl	80053f8 <tcp_getoptbyte>
        if (data < 2) {
 800549a:	2801      	cmp	r0, #1
 800549c:	d9db      	bls.n	8005456 <tcp_parseopt.isra.1.part.2+0x1e>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800549e:	882b      	ldrh	r3, [r5, #0]
 80054a0:	3b02      	subs	r3, #2
 80054a2:	4418      	add	r0, r3
 80054a4:	8028      	strh	r0, [r5, #0]
 80054a6:	e7d2      	b.n	800544e <tcp_parseopt.isra.1.part.2+0x16>
 80054a8:	2000062c 	.word	0x2000062c
 80054ac:	2000063c 	.word	0x2000063c

080054b0 <tcp_input_delayed_close>:
{
 80054b0:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <tcp_input_delayed_close+0x38>)
{
 80054b4:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 80054b6:	7818      	ldrb	r0, [r3, #0]
 80054b8:	f010 0010 	ands.w	r0, r0, #16
 80054bc:	d012      	beq.n	80054e4 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80054be:	7ea3      	ldrb	r3, [r4, #26]
 80054c0:	06db      	lsls	r3, r3, #27
 80054c2:	d406      	bmi.n	80054d2 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80054c4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80054c8:	b11b      	cbz	r3, 80054d2 <tcp_input_delayed_close+0x22>
 80054ca:	f06f 010e 	mvn.w	r1, #14
 80054ce:	6920      	ldr	r0, [r4, #16]
 80054d0:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80054d2:	4621      	mov	r1, r4
 80054d4:	4805      	ldr	r0, [pc, #20]	; (80054ec <tcp_input_delayed_close+0x3c>)
 80054d6:	f7ff f97f 	bl	80047d8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80054da:	2001      	movs	r0, #1
 80054dc:	4621      	mov	r1, r4
 80054de:	f7fe f983 	bl	80037e8 <memp_free>
 80054e2:	2001      	movs	r0, #1
}
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	bf00      	nop
 80054e8:	20000624 	.word	0x20000624
 80054ec:	20002e38 	.word	0x20002e38

080054f0 <tcp_input>:
{
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80054f4:	4e9f      	ldr	r6, [pc, #636]	; (8005774 <tcp_input+0x284>)
 80054f6:	6843      	ldr	r3, [r0, #4]
 80054f8:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 80054fa:	8943      	ldrh	r3, [r0, #10]
 80054fc:	2b13      	cmp	r3, #19
{
 80054fe:	b089      	sub	sp, #36	; 0x24
 8005500:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8005502:	f240 81b2 	bls.w	800586a <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005506:	4f9c      	ldr	r7, [pc, #624]	; (8005778 <tcp_input+0x288>)
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f7fd fb7b 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 8005510:	46b8      	mov	r8, r7
 8005512:	4604      	mov	r4, r0
 8005514:	2800      	cmp	r0, #0
 8005516:	f040 81a8 	bne.w	800586a <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005520:	2be0      	cmp	r3, #224	; 0xe0
 8005522:	f000 81a2 	beq.w	800586a <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005526:	6833      	ldr	r3, [r6, #0]
 8005528:	8998      	ldrh	r0, [r3, #12]
 800552a:	f7fc fd2b 	bl	8001f84 <lwip_htons>
 800552e:	0a81      	lsrs	r1, r0, #10
 8005530:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005534:	2913      	cmp	r1, #19
 8005536:	f240 8198 	bls.w	800586a <tcp_input+0x37a>
 800553a:	892b      	ldrh	r3, [r5, #8]
 800553c:	b289      	uxth	r1, r1
 800553e:	428b      	cmp	r3, r1
 8005540:	f0c0 8193 	bcc.w	800586a <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 8005544:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005546:	4a8d      	ldr	r2, [pc, #564]	; (800577c <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8005548:	4f8d      	ldr	r7, [pc, #564]	; (8005780 <tcp_input+0x290>)
 800554a:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800554c:	f1a1 0314 	sub.w	r3, r1, #20
 8005550:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8005552:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8005554:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005556:	8013      	strh	r3, [r2, #0]
 8005558:	4c8a      	ldr	r4, [pc, #552]	; (8005784 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 800555a:	d344      	bcc.n	80055e6 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800555c:	4249      	negs	r1, r1
 800555e:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8005560:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005562:	f7fe fa89 	bl	8003a78 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005566:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005568:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80057d8 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800556c:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800556e:	4f86      	ldr	r7, [pc, #536]	; (8005788 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005570:	f7fc fd08 	bl	8001f84 <lwip_htons>
 8005574:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005576:	6834      	ldr	r4, [r6, #0]
 8005578:	8860      	ldrh	r0, [r4, #2]
 800557a:	f7fc fd03 	bl	8001f84 <lwip_htons>
 800557e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005580:	6834      	ldr	r4, [r6, #0]
 8005582:	6860      	ldr	r0, [r4, #4]
 8005584:	f7fc fd01 	bl	8001f8a <lwip_htonl>
 8005588:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800558a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800558c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005590:	68a0      	ldr	r0, [r4, #8]
 8005592:	f7fc fcfa 	bl	8001f8a <lwip_htonl>
 8005596:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005598:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800559a:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800559c:	89e0      	ldrh	r0, [r4, #14]
 800559e:	f7fc fcf1 	bl	8001f84 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80055a2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80055a4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 80055a6:	8998      	ldrh	r0, [r3, #12]
 80055a8:	f7fc fcec 	bl	8001f84 <lwip_htons>
 80055ac:	b2c0      	uxtb	r0, r0
 80055ae:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80055b2:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 80055b4:	4a75      	ldr	r2, [pc, #468]	; (800578c <tcp_input+0x29c>)
 80055b6:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80055b8:	f010 0003 	ands.w	r0, r0, #3
 80055bc:	bf18      	it	ne
 80055be:	2001      	movne	r0, #1
 80055c0:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80055c2:	4973      	ldr	r1, [pc, #460]	; (8005790 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 80055c4:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80055c6:	4b73      	ldr	r3, [pc, #460]	; (8005794 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80055c8:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80055ca:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 80055cc:	f04f 0a00 	mov.w	sl, #0
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80055d4:	2c00      	cmp	r4, #0
 80055d6:	d140      	bne.n	800565a <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80055d8:	4b6f      	ldr	r3, [pc, #444]	; (8005798 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80055da:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800579c <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80055de:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80055e0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80057dc <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80055e4:	e148      	b.n	8005878 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	b92b      	cbnz	r3, 80055f6 <tcp_input+0x106>
 80055ea:	4b6c      	ldr	r3, [pc, #432]	; (800579c <tcp_input+0x2ac>)
 80055ec:	496c      	ldr	r1, [pc, #432]	; (80057a0 <tcp_input+0x2b0>)
 80055ee:	486d      	ldr	r0, [pc, #436]	; (80057a4 <tcp_input+0x2b4>)
 80055f0:	22b2      	movs	r2, #178	; 0xb2
 80055f2:	f002 f99d 	bl	8007930 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 80055f6:	f06f 0113 	mvn.w	r1, #19
 80055fa:	4628      	mov	r0, r5
 80055fc:	f7fe fa3c 	bl	8003a78 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005600:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8005602:	8969      	ldrh	r1, [r5, #10]
 8005604:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005606:	881c      	ldrh	r4, [r3, #0]
 8005608:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800560a:	4249      	negs	r1, r1
 800560c:	b209      	sxth	r1, r1
 800560e:	4628      	mov	r0, r5
 8005610:	f7fe fa32 	bl	8003a78 <pbuf_header>
    if (opt2len > p->next->len) {
 8005614:	6828      	ldr	r0, [r5, #0]
 8005616:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005618:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 800561a:	42a3      	cmp	r3, r4
 800561c:	f0c0 8125 	bcc.w	800586a <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8005620:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005622:	6843      	ldr	r3, [r0, #4]
 8005624:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8005626:	b209      	sxth	r1, r1
 8005628:	f7fe fa26 	bl	8003a78 <pbuf_header>
    p->tot_len -= opt2len;
 800562c:	892b      	ldrh	r3, [r5, #8]
 800562e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005630:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8005632:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005634:	b12b      	cbz	r3, 8005642 <tcp_input+0x152>
 8005636:	4b59      	ldr	r3, [pc, #356]	; (800579c <tcp_input+0x2ac>)
 8005638:	495b      	ldr	r1, [pc, #364]	; (80057a8 <tcp_input+0x2b8>)
 800563a:	485a      	ldr	r0, [pc, #360]	; (80057a4 <tcp_input+0x2b4>)
 800563c:	22cf      	movs	r2, #207	; 0xcf
 800563e:	f002 f977 	bl	8007930 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	892a      	ldrh	r2, [r5, #8]
 8005646:	891b      	ldrh	r3, [r3, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d08c      	beq.n	8005566 <tcp_input+0x76>
 800564c:	4b53      	ldr	r3, [pc, #332]	; (800579c <tcp_input+0x2ac>)
 800564e:	4957      	ldr	r1, [pc, #348]	; (80057ac <tcp_input+0x2bc>)
 8005650:	4854      	ldr	r0, [pc, #336]	; (80057a4 <tcp_input+0x2b4>)
 8005652:	22d0      	movs	r2, #208	; 0xd0
 8005654:	f002 f96c 	bl	8007930 <iprintf>
 8005658:	e785      	b.n	8005566 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800565a:	7d23      	ldrb	r3, [r4, #20]
 800565c:	b92b      	cbnz	r3, 800566a <tcp_input+0x17a>
 800565e:	4b4f      	ldr	r3, [pc, #316]	; (800579c <tcp_input+0x2ac>)
 8005660:	4953      	ldr	r1, [pc, #332]	; (80057b0 <tcp_input+0x2c0>)
 8005662:	4850      	ldr	r0, [pc, #320]	; (80057a4 <tcp_input+0x2b4>)
 8005664:	22e2      	movs	r2, #226	; 0xe2
 8005666:	f002 f963 	bl	8007930 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800566a:	7d23      	ldrb	r3, [r4, #20]
 800566c:	2b0a      	cmp	r3, #10
 800566e:	d105      	bne.n	800567c <tcp_input+0x18c>
 8005670:	4b4a      	ldr	r3, [pc, #296]	; (800579c <tcp_input+0x2ac>)
 8005672:	4950      	ldr	r1, [pc, #320]	; (80057b4 <tcp_input+0x2c4>)
 8005674:	484b      	ldr	r0, [pc, #300]	; (80057a4 <tcp_input+0x2b4>)
 8005676:	22e3      	movs	r2, #227	; 0xe3
 8005678:	f002 f95a 	bl	8007930 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800567c:	7d23      	ldrb	r3, [r4, #20]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <tcp_input+0x19e>
 8005682:	4b46      	ldr	r3, [pc, #280]	; (800579c <tcp_input+0x2ac>)
 8005684:	494c      	ldr	r1, [pc, #304]	; (80057b8 <tcp_input+0x2c8>)
 8005686:	4847      	ldr	r0, [pc, #284]	; (80057a4 <tcp_input+0x2b4>)
 8005688:	22e4      	movs	r2, #228	; 0xe4
 800568a:	f002 f951 	bl	8007930 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800568e:	6832      	ldr	r2, [r6, #0]
 8005690:	8b21      	ldrh	r1, [r4, #24]
 8005692:	8813      	ldrh	r3, [r2, #0]
 8005694:	4299      	cmp	r1, r3
 8005696:	68e3      	ldr	r3, [r4, #12]
 8005698:	d169      	bne.n	800576e <tcp_input+0x27e>
 800569a:	8ae1      	ldrh	r1, [r4, #22]
 800569c:	8852      	ldrh	r2, [r2, #2]
 800569e:	4291      	cmp	r1, r2
 80056a0:	d165      	bne.n	800576e <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 80056a2:	6861      	ldr	r1, [r4, #4]
 80056a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80056a8:	4291      	cmp	r1, r2
 80056aa:	d160      	bne.n	800576e <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80056ac:	6821      	ldr	r1, [r4, #0]
 80056ae:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80056b2:	4291      	cmp	r1, r2
 80056b4:	d15b      	bne.n	800576e <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80056b6:	429c      	cmp	r4, r3
 80056b8:	f040 8405 	bne.w	8005ec6 <tcp_input+0x9d6>
 80056bc:	4b37      	ldr	r3, [pc, #220]	; (800579c <tcp_input+0x2ac>)
 80056be:	493f      	ldr	r1, [pc, #252]	; (80057bc <tcp_input+0x2cc>)
 80056c0:	4838      	ldr	r0, [pc, #224]	; (80057a4 <tcp_input+0x2b4>)
 80056c2:	22ec      	movs	r2, #236	; 0xec
 80056c4:	f002 f934 	bl	8007930 <iprintf>
      if (prev != NULL) {
 80056c8:	f1ba 0f00 	cmp.w	sl, #0
 80056cc:	d007      	beq.n	80056de <tcp_input+0x1ee>
        prev->next = pcb->next;
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 80056d4:	f8d9 3000 	ldr.w	r3, [r9]
 80056d8:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 80056da:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	429c      	cmp	r4, r3
 80056e2:	d105      	bne.n	80056f0 <tcp_input+0x200>
 80056e4:	4b2d      	ldr	r3, [pc, #180]	; (800579c <tcp_input+0x2ac>)
 80056e6:	4936      	ldr	r1, [pc, #216]	; (80057c0 <tcp_input+0x2d0>)
 80056e8:	482e      	ldr	r0, [pc, #184]	; (80057a4 <tcp_input+0x2b4>)
 80056ea:	22f4      	movs	r2, #244	; 0xf4
 80056ec:	f002 f920 	bl	8007930 <iprintf>
    inseg.next = NULL;
 80056f0:	4b34      	ldr	r3, [pc, #208]	; (80057c4 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 80056f2:	8929      	ldrh	r1, [r5, #8]
 80056f4:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 80056f6:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 80056f8:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 80056fa:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 80056fc:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 80056fe:	4832      	ldr	r0, [pc, #200]	; (80057c8 <tcp_input+0x2d8>)
    recv_acked = 0;
 8005700:	4932      	ldr	r1, [pc, #200]	; (80057cc <tcp_input+0x2dc>)
    inseg.p = p;
 8005702:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8005704:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <tcp_input+0x2e0>)
    recv_flags = 0;
 8005706:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8005708:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 800570a:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 800570c:	9a03      	ldr	r2, [sp, #12]
 800570e:	9105      	str	r1, [sp, #20]
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	f012 0f08 	tst.w	r2, #8
 8005716:	4680      	mov	r8, r0
 8005718:	469a      	mov	sl, r3
 800571a:	d003      	beq.n	8005724 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 800571c:	7b6b      	ldrb	r3, [r5, #13]
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8005724:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005726:	4d2b      	ldr	r5, [pc, #172]	; (80057d4 <tcp_input+0x2e4>)
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8137 	beq.w	800599c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff f958 	bl	80049e4 <tcp_process_refused_data>
 8005734:	300d      	adds	r0, #13
 8005736:	d008      	beq.n	800574a <tcp_input+0x25a>
 8005738:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 812e 	beq.w	800599c <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005740:	9b04      	ldr	r3, [sp, #16]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8129 	beq.w	800599c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800574a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800574c:	b913      	cbnz	r3, 8005754 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 800574e:	4620      	mov	r0, r4
 8005750:	f001 f800 	bl	8006754 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8005754:	2400      	movs	r4, #0
 8005756:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8005758:	4d1a      	ldr	r5, [pc, #104]	; (80057c4 <tcp_input+0x2d4>)
    recv_data = NULL;
 800575a:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 800575e:	6868      	ldr	r0, [r5, #4]
 8005760:	b110      	cbz	r0, 8005768 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8005762:	f7fe f98f 	bl	8003a84 <pbuf_free>
      inseg.p = NULL;
 8005766:	606c      	str	r4, [r5, #4]
}
 8005768:	b009      	add	sp, #36	; 0x24
 800576a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800576e:	46a2      	mov	sl, r4
 8005770:	461c      	mov	r4, r3
 8005772:	e72f      	b.n	80055d4 <tcp_input+0xe4>
 8005774:	20000630 	.word	0x20000630
 8005778:	20000668 	.word	0x20000668
 800577c:	2000063c 	.word	0x2000063c
 8005780:	20000638 	.word	0x20000638
 8005784:	20000634 	.word	0x20000634
 8005788:	20000604 	.word	0x20000604
 800578c:	20000608 	.word	0x20000608
 8005790:	20002e38 	.word	0x20002e38
 8005794:	2000063e 	.word	0x2000063e
 8005798:	20002e48 	.word	0x20002e48
 800579c:	0800a775 	.word	0x0800a775
 80057a0:	0800a5bf 	.word	0x0800a5bf
 80057a4:	08009678 	.word	0x08009678
 80057a8:	0800a5cf 	.word	0x0800a5cf
 80057ac:	0800a5db 	.word	0x0800a5db
 80057b0:	0800a5fa 	.word	0x0800a5fa
 80057b4:	0800a621 	.word	0x0800a621
 80057b8:	0800a64b 	.word	0x0800a64b
 80057bc:	0800a672 	.word	0x0800a672
 80057c0:	0800a69d 	.word	0x0800a69d
 80057c4:	2000060c 	.word	0x2000060c
 80057c8:	20000624 	.word	0x20000624
 80057cc:	2000061c 	.word	0x2000061c
 80057d0:	20000620 	.word	0x20000620
 80057d4:	20002e4c 	.word	0x20002e4c
 80057d8:	20000628 	.word	0x20000628
 80057dc:	0800a6c7 	.word	0x0800a6c7
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80057e0:	7d23      	ldrb	r3, [r4, #20]
 80057e2:	2b0a      	cmp	r3, #10
 80057e4:	d005      	beq.n	80057f2 <tcp_input+0x302>
 80057e6:	4653      	mov	r3, sl
 80057e8:	22fe      	movs	r2, #254	; 0xfe
 80057ea:	4649      	mov	r1, r9
 80057ec:	489d      	ldr	r0, [pc, #628]	; (8005a64 <tcp_input+0x574>)
 80057ee:	f002 f89f 	bl	8007930 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80057f2:	6833      	ldr	r3, [r6, #0]
 80057f4:	8b22      	ldrh	r2, [r4, #24]
 80057f6:	8818      	ldrh	r0, [r3, #0]
 80057f8:	4290      	cmp	r0, r2
 80057fa:	d13c      	bne.n	8005876 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80057fc:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80057fe:	885a      	ldrh	r2, [r3, #2]
 8005800:	428a      	cmp	r2, r1
 8005802:	d138      	bne.n	8005876 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8005804:	6861      	ldr	r1, [r4, #4]
 8005806:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800580a:	4299      	cmp	r1, r3
 800580c:	d133      	bne.n	8005876 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800580e:	6821      	ldr	r1, [r4, #0]
 8005810:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005814:	4299      	cmp	r1, r3
 8005816:	d12e      	bne.n	8005876 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	0759      	lsls	r1, r3, #29
 800581e:	d424      	bmi.n	800586a <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8005820:	079e      	lsls	r6, r3, #30
 8005822:	d513      	bpl.n	800584c <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8005824:	f8db 1000 	ldr.w	r1, [fp]
 8005828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800582a:	1acb      	subs	r3, r1, r3
 800582c:	d413      	bmi.n	8005856 <tcp_input+0x366>
 800582e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8005830:	1b9b      	subs	r3, r3, r6
 8005832:	2b00      	cmp	r3, #0
 8005834:	dc0f      	bgt.n	8005856 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	881c      	ldrh	r4, [r3, #0]
 800583a:	9001      	str	r0, [sp, #4]
 800583c:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800583e:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <tcp_input+0x578>)
 8005840:	4421      	add	r1, r4
 8005842:	1d1a      	adds	r2, r3, #4
 8005844:	6838      	ldr	r0, [r7, #0]
 8005846:	f001 f939 	bl	8006abc <tcp_rst>
 800584a:	e00e      	b.n	800586a <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 800584c:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 800584e:	bf42      	ittt	mi
 8005850:	4b86      	ldrmi	r3, [pc, #536]	; (8005a6c <tcp_input+0x57c>)
 8005852:	681b      	ldrmi	r3, [r3, #0]
 8005854:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b133      	cbz	r3, 800586a <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 800585c:	7ea3      	ldrb	r3, [r4, #26]
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005864:	4620      	mov	r0, r4
 8005866:	f000 ffab 	bl	80067c0 <tcp_output>
  pbuf_free(p);
 800586a:	4628      	mov	r0, r5
}
 800586c:	b009      	add	sp, #36	; 0x24
 800586e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8005872:	f7fe b907 	b.w	8003a84 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005876:	68e4      	ldr	r4, [r4, #12]
 8005878:	2c00      	cmp	r4, #0
 800587a:	d1b1      	bne.n	80057e0 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800587c:	4b7c      	ldr	r3, [pc, #496]	; (8005a70 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 800587e:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005880:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8005882:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005886:	4689      	mov	r9, r1
 8005888:	f1b9 0f00 	cmp.w	r9, #0
 800588c:	d111      	bne.n	80058b2 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800588e:	8990      	ldrh	r0, [r2, #12]
 8005890:	f7fc fb78 	bl	8001f84 <lwip_htons>
 8005894:	0743      	lsls	r3, r0, #29
 8005896:	d4e8      	bmi.n	800586a <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005898:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800589a:	9a04      	ldr	r2, [sp, #16]
 800589c:	f8db 1000 	ldr.w	r1, [fp]
 80058a0:	8810      	ldrh	r0, [r2, #0]
 80058a2:	881a      	ldrh	r2, [r3, #0]
 80058a4:	9201      	str	r2, [sp, #4]
 80058a6:	885b      	ldrh	r3, [r3, #2]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	4b6f      	ldr	r3, [pc, #444]	; (8005a68 <tcp_input+0x578>)
 80058ac:	4401      	add	r1, r0
 80058ae:	1d1a      	adds	r2, r3, #4
 80058b0:	e7c8      	b.n	8005844 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 80058b2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80058b6:	8853      	ldrh	r3, [r2, #2]
 80058b8:	4283      	cmp	r3, r0
 80058ba:	d107      	bne.n	80058cc <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80058bc:	f8d9 3000 	ldr.w	r3, [r9]
 80058c0:	4573      	cmp	r3, lr
 80058c2:	f000 82dc 	beq.w	8005e7e <tcp_input+0x98e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 82d9 	beq.w	8005e7e <tcp_input+0x98e>
 80058cc:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80058ce:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80058d2:	e7d9      	b.n	8005888 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 80058d4:	0798      	lsls	r0, r3, #30
 80058d6:	d5c8      	bpl.n	800586a <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 80058d8:	f899 0015 	ldrb.w	r0, [r9, #21]
 80058dc:	f7ff f9c0 	bl	8004c60 <tcp_alloc>
    if (npcb == NULL) {
 80058e0:	4604      	mov	r4, r0
 80058e2:	b950      	cbnz	r0, 80058fa <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80058e4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0be      	beq.n	800586a <tcp_input+0x37a>
 80058ec:	4601      	mov	r1, r0
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80058f6:	4798      	blx	r3
 80058f8:	e7b7      	b.n	800586a <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80058fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80058fe:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8005900:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8005902:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005906:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8005908:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800590c:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800590e:	7813      	ldrb	r3, [r2, #0]
 8005910:	7852      	ldrb	r2, [r2, #1]
 8005912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005916:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8005918:	2303      	movs	r3, #3
 800591a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800591c:	f8db 3000 	ldr.w	r3, [fp]
 8005920:	3301      	adds	r3, #1
 8005922:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8005924:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8005926:	f7ff fa27 	bl	8004d78 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800592a:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800592e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005930:	3b01      	subs	r3, #1
 8005932:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8005934:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8005938:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800593a:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800593c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800593e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8005940:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8005944:	f899 3008 	ldrb.w	r3, [r9, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800594e:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <tcp_input+0x584>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	60e2      	str	r2, [r4, #12]
 8005954:	601c      	str	r4, [r3, #0]
 8005956:	f001 fa53 	bl	8006e00 <tcp_timer_needed>
 800595a:	4b47      	ldr	r3, [pc, #284]	; (8005a78 <tcp_input+0x588>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8005960:	9b06      	ldr	r3, [sp, #24]
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b11b      	cbz	r3, 800596e <tcp_input+0x47e>
 8005966:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800596a:	f7ff fd65 	bl	8005438 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 800596e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005970:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8005972:	89db      	ldrh	r3, [r3, #14]
 8005974:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005978:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800597a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800597e:	f7ff fa07 	bl	8004d90 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8005982:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005984:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8005986:	4620      	mov	r0, r4
 8005988:	f000 fe2a 	bl	80065e0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800598c:	2800      	cmp	r0, #0
 800598e:	f43f af69 	beq.w	8005864 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8005992:	2100      	movs	r1, #0
 8005994:	4620      	mov	r0, r4
 8005996:	f7ff f8a9 	bl	8004aec <tcp_abandon>
 800599a:	e766      	b.n	800586a <tcp_input+0x37a>
  if (flags & TCP_RST) {
 800599c:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 800599e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	0759      	lsls	r1, r3, #29
 80059a4:	d535      	bpl.n	8005a12 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 80059a6:	7d21      	ldrb	r1, [r4, #20]
 80059a8:	2902      	cmp	r1, #2
 80059aa:	d122      	bne.n	80059f2 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 80059ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d109      	bne.n	80059c8 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 80059b4:	f898 3000 	ldrb.w	r3, [r8]
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80059c0:	7ea3      	ldrb	r3, [r4, #26]
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80059c8:	f898 3000 	ldrb.w	r3, [r8]
 80059cc:	0719      	lsls	r1, r3, #28
 80059ce:	f140 81ed 	bpl.w	8005dac <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80059d2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80059d6:	b11b      	cbz	r3, 80059e0 <tcp_input+0x4f0>
 80059d8:	f06f 010d 	mvn.w	r1, #13
 80059dc:	6920      	ldr	r0, [r4, #16]
 80059de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80059e0:	4621      	mov	r1, r4
 80059e2:	4824      	ldr	r0, [pc, #144]	; (8005a74 <tcp_input+0x584>)
 80059e4:	f7fe fef8 	bl	80047d8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80059e8:	4621      	mov	r1, r4
 80059ea:	2001      	movs	r0, #1
 80059ec:	f7fd fefc 	bl	80037e8 <memp_free>
 80059f0:	e6b0      	b.n	8005754 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 80059f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059f4:	f8db 3000 	ldr.w	r3, [fp]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	f000 8259 	beq.w	8005eb0 <tcp_input+0x9c0>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	d4e2      	bmi.n	80059c8 <tcp_input+0x4d8>
 8005a02:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dcde      	bgt.n	80059c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8005a0a:	7ea3      	ldrb	r3, [r4, #26]
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	e7d9      	b.n	80059c6 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8005a12:	f013 0102 	ands.w	r1, r3, #2
 8005a16:	d003      	beq.n	8005a20 <tcp_input+0x530>
 8005a18:	7d22      	ldrb	r2, [r4, #20]
 8005a1a:	3a02      	subs	r2, #2
 8005a1c:	2a01      	cmp	r2, #1
 8005a1e:	d8f4      	bhi.n	8005a0a <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8005a20:	7ea2      	ldrb	r2, [r4, #26]
 8005a22:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8005a24:	bf5e      	ittt	pl
 8005a26:	4a11      	ldrpl	r2, [pc, #68]	; (8005a6c <tcp_input+0x57c>)
 8005a28:	6812      	ldrpl	r2, [r2, #0]
 8005a2a:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
  if (tcphdr_optlen != 0) {
 8005a32:	9a06      	ldr	r2, [sp, #24]
 8005a34:	8812      	ldrh	r2, [r2, #0]
 8005a36:	b13a      	cbz	r2, 8005a48 <tcp_input+0x558>
 8005a38:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8005a3c:	9107      	str	r1, [sp, #28]
 8005a3e:	9306      	str	r3, [sp, #24]
 8005a40:	f7ff fcfa 	bl	8005438 <tcp_parseopt.isra.1.part.2>
 8005a44:	9907      	ldr	r1, [sp, #28]
 8005a46:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8005a48:	7d22      	ldrb	r2, [r4, #20]
 8005a4a:	3a02      	subs	r2, #2
 8005a4c:	2a07      	cmp	r2, #7
 8005a4e:	d8bb      	bhi.n	80059c8 <tcp_input+0x4d8>
 8005a50:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005a54:	00940014 	.word	0x00940014
 8005a58:	010000fc 	.word	0x010000fc
 8005a5c:	00fc014a 	.word	0x00fc014a
 8005a60:	01830164 	.word	0x01830164
 8005a64:	08009678 	.word	0x08009678
 8005a68:	20000678 	.word	0x20000678
 8005a6c:	20002e3c 	.word	0x20002e3c
 8005a70:	20002e40 	.word	0x20002e40
 8005a74:	20002e38 	.word	0x20002e38
 8005a78:	20002e34 	.word	0x20002e34
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8005a7c:	f003 0212 	and.w	r2, r3, #18
 8005a80:	2a12      	cmp	r2, #18
 8005a82:	d15e      	bne.n	8005b42 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8005a84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	3201      	adds	r2, #1
 8005a8a:	428a      	cmp	r2, r1
 8005a8c:	d159      	bne.n	8005b42 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8005a8e:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8005a92:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8005a94:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8005a96:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8005a98:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8005a9a:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8005a9c:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8005a9e:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8005aa0:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8005aa2:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8005aa4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8005aa8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8005aac:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005aae:	18e1      	adds	r1, r4, r3
 8005ab0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8005ab2:	f7ff f96d 	bl	8004d90 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005ab6:	f241 121c 	movw	r2, #4380	; 0x111c
 8005aba:	0043      	lsls	r3, r0, #1
 8005abc:	4293      	cmp	r3, r2
 8005abe:	bf38      	it	cc
 8005ac0:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005ac2:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005ac4:	0080      	lsls	r0, r0, #2
 8005ac6:	4283      	cmp	r3, r0
 8005ac8:	bf28      	it	cs
 8005aca:	4603      	movcs	r3, r0
 8005acc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8005ad0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ad4:	b933      	cbnz	r3, 8005ae4 <tcp_input+0x5f4>
 8005ad6:	4bad      	ldr	r3, [pc, #692]	; (8005d8c <tcp_input+0x89c>)
 8005ad8:	49ad      	ldr	r1, [pc, #692]	; (8005d90 <tcp_input+0x8a0>)
 8005ada:	48ae      	ldr	r0, [pc, #696]	; (8005d94 <tcp_input+0x8a4>)
 8005adc:	f240 321a 	movw	r2, #794	; 0x31a
 8005ae0:	f001 ff26 	bl	8007930 <iprintf>
      --pcb->snd_queuelen;
 8005ae4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8005ae8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8005aea:	3b01      	subs	r3, #1
 8005aec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8005af0:	b9fe      	cbnz	r6, 8005b32 <tcp_input+0x642>
        rseg = pcb->unsent;
 8005af2:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8005af4:	b936      	cbnz	r6, 8005b04 <tcp_input+0x614>
 8005af6:	4ba5      	ldr	r3, [pc, #660]	; (8005d8c <tcp_input+0x89c>)
 8005af8:	49a7      	ldr	r1, [pc, #668]	; (8005d98 <tcp_input+0x8a8>)
 8005afa:	48a6      	ldr	r0, [pc, #664]	; (8005d94 <tcp_input+0x8a4>)
 8005afc:	f240 3222 	movw	r2, #802	; 0x322
 8005b00:	f001 ff16 	bl	8007930 <iprintf>
        pcb->unsent = rseg->next;
 8005b04:	6833      	ldr	r3, [r6, #0]
 8005b06:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7fe fbfb 	bl	8004304 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8005b0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005b10:	b993      	cbnz	r3, 8005b38 <tcp_input+0x648>
        pcb->rtime = -1;
 8005b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b16:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8005b18:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f43f af74 	beq.w	8005a0a <tcp_input+0x51a>
 8005b22:	2200      	movs	r2, #0
 8005b24:	4621      	mov	r1, r4
 8005b26:	6920      	ldr	r0, [r4, #16]
 8005b28:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8005b2a:	300d      	adds	r0, #13
 8005b2c:	f47f af6d 	bne.w	8005a0a <tcp_input+0x51a>
 8005b30:	e610      	b.n	8005754 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8005b32:	6833      	ldr	r3, [r6, #0]
 8005b34:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005b36:	e7e7      	b.n	8005b08 <tcp_input+0x618>
        pcb->rtime = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8005b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b40:	e7ea      	b.n	8005b18 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8005b42:	06db      	lsls	r3, r3, #27
 8005b44:	f57f af40 	bpl.w	80059c8 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005b48:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005b4a:	9a04      	ldr	r2, [sp, #16]
 8005b4c:	f8db 1000 	ldr.w	r1, [fp]
 8005b50:	8810      	ldrh	r0, [r2, #0]
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	9201      	str	r2, [sp, #4]
 8005b56:	885b      	ldrh	r3, [r3, #2]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4b90      	ldr	r3, [pc, #576]	; (8005d9c <tcp_input+0x8ac>)
 8005b5c:	4401      	add	r1, r0
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	6838      	ldr	r0, [r7, #0]
 8005b62:	f000 ffab 	bl	8006abc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8005b66:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	f63f af2c 	bhi.w	80059c8 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fffb 	bl	8006b70 <tcp_rexmit_rto>
 8005b7a:	e725      	b.n	80059c8 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8005b7c:	06d8      	lsls	r0, r3, #27
 8005b7e:	d557      	bpl.n	8005c30 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8005b80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b82:	6838      	ldr	r0, [r7, #0]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	42c3      	cmn	r3, r0
 8005b88:	d443      	bmi.n	8005c12 <tcp_input+0x722>
 8005b8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b8c:	1ac3      	subs	r3, r0, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	dc3f      	bgt.n	8005c12 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8005b92:	2304      	movs	r3, #4
 8005b94:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8005b96:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005b98:	b143      	cbz	r3, 8005bac <tcp_input+0x6bc>
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	b933      	cbnz	r3, 8005bac <tcp_input+0x6bc>
 8005b9e:	4b7b      	ldr	r3, [pc, #492]	; (8005d8c <tcp_input+0x89c>)
 8005ba0:	497f      	ldr	r1, [pc, #508]	; (8005da0 <tcp_input+0x8b0>)
 8005ba2:	487c      	ldr	r0, [pc, #496]	; (8005d94 <tcp_input+0x8a4>)
 8005ba4:	f240 3251 	movw	r2, #849	; 0x351
 8005ba8:	f001 fec2 	bl	8007930 <iprintf>
        if (pcb->listener == NULL) {
 8005bac:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005bae:	b91b      	cbnz	r3, 8005bb8 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7ff f80d 	bl	8004bd0 <tcp_abort>
            goto aborted;
 8005bb6:	e5cd      	b.n	8005754 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f8      	beq.n	8005bb0 <tcp_input+0x6c0>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	6920      	ldr	r0, [r4, #16]
 8005bc4:	4798      	blx	r3
        if (err != ERR_OK) {
 8005bc6:	b110      	cbz	r0, 8005bce <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8005bc8:	300d      	adds	r0, #13
 8005bca:	d1f1      	bne.n	8005bb0 <tcp_input+0x6c0>
 8005bcc:	e5c2      	b.n	8005754 <tcp_input+0x264>
        tcp_receive(pcb);
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff f914 	bl	8004dfc <tcp_receive>
        if (recv_acked != 0) {
 8005bd4:	9b05      	ldr	r3, [sp, #20]
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b113      	cbz	r3, 8005be0 <tcp_input+0x6f0>
          recv_acked--;
 8005bda:	9a05      	ldr	r2, [sp, #20]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005be0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005be2:	f241 111c 	movw	r1, #4380	; 0x111c
 8005be6:	0053      	lsls	r3, r2, #1
 8005be8:	428b      	cmp	r3, r1
 8005bea:	bf38      	it	cc
 8005bec:	460b      	movcc	r3, r1
 8005bee:	0092      	lsls	r2, r2, #2
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bf28      	it	cs
 8005bf4:	4613      	movcs	r3, r2
 8005bf6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8005bfa:	f898 3000 	ldrb.w	r3, [r8]
 8005bfe:	069a      	lsls	r2, r3, #26
 8005c00:	f57f aee2 	bpl.w	80059c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8005c04:	7ea3      	ldrb	r3, [r4, #26]
 8005c06:	f043 0302 	orr.w	r3, r3, #2
 8005c0a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8005c0c:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8005c0e:	7523      	strb	r3, [r4, #20]
 8005c10:	e6da      	b.n	80059c8 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005c12:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005c14:	9a04      	ldr	r2, [sp, #16]
 8005c16:	f8db 1000 	ldr.w	r1, [fp]
 8005c1a:	8816      	ldrh	r6, [r2, #0]
 8005c1c:	881a      	ldrh	r2, [r3, #0]
 8005c1e:	9201      	str	r2, [sp, #4]
 8005c20:	885b      	ldrh	r3, [r3, #2]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4b5d      	ldr	r3, [pc, #372]	; (8005d9c <tcp_input+0x8ac>)
 8005c26:	4431      	add	r1, r6
 8005c28:	1d1a      	adds	r2, r3, #4
 8005c2a:	f000 ff47 	bl	8006abc <tcp_rst>
 8005c2e:	e6cb      	b.n	80059c8 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8005c30:	2900      	cmp	r1, #0
 8005c32:	f43f aec9 	beq.w	80059c8 <tcp_input+0x4d8>
 8005c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c38:	f8db 2000 	ldr.w	r2, [fp]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f47f aec2 	bne.w	80059c8 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 ffaf 	bl	8006ba8 <tcp_rexmit>
 8005c4a:	e6bd      	b.n	80059c8 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7ff f8d5 	bl	8004dfc <tcp_receive>
 8005c52:	e7d2      	b.n	8005bfa <tcp_input+0x70a>
    tcp_receive(pcb);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff f8d1 	bl	8004dfc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8005c5a:	f898 3000 	ldrb.w	r3, [r8]
 8005c5e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8005c66:	d031      	beq.n	8005ccc <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005c68:	f013 0f10 	tst.w	r3, #16
 8005c6c:	7ea3      	ldrb	r3, [r4, #26]
 8005c6e:	d028      	beq.n	8005cc2 <tcp_input+0x7d2>
 8005c70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	4291      	cmp	r1, r2
 8005c76:	d124      	bne.n	8005cc2 <tcp_input+0x7d2>
 8005c78:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005c7a:	bb12      	cbnz	r2, 8005cc2 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7fe fbbc 	bl	8004400 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8005c88:	f8d9 3000 	ldr.w	r3, [r9]
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	d10a      	bne.n	8005ca6 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	f8c9 3000 	str.w	r3, [r9]
 8005c96:	e008      	b.n	8005caa <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	4294      	cmp	r4, r2
 8005c9c:	d102      	bne.n	8005ca4 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8005c9e:	68e2      	ldr	r2, [r4, #12]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	e002      	b.n	8005caa <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f6      	bne.n	8005c98 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8005caa:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <tcp_input+0x8b4>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8005cb0:	230a      	movs	r3, #10
 8005cb2:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8005cb4:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <tcp_input+0x8b8>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	60e2      	str	r2, [r4, #12]
 8005cba:	601c      	str	r4, [r3, #0]
 8005cbc:	f001 f8a0 	bl	8006e00 <tcp_timer_needed>
 8005cc0:	e682      	b.n	80059c8 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8005cc2:	f043 0302 	orr.w	r3, r3, #2
 8005cc6:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8005cc8:	2308      	movs	r3, #8
 8005cca:	e7a0      	b.n	8005c0e <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005ccc:	06db      	lsls	r3, r3, #27
 8005cce:	f57f ae7b 	bpl.w	80059c8 <tcp_input+0x4d8>
 8005cd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	f47f ae76 	bne.w	80059c8 <tcp_input+0x4d8>
 8005cdc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f47f ae72 	bne.w	80059c8 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8005ce4:	2306      	movs	r3, #6
 8005ce6:	e792      	b.n	8005c0e <tcp_input+0x71e>
    tcp_receive(pcb);
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f7ff f887 	bl	8004dfc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8005cee:	f898 3000 	ldrb.w	r3, [r8]
 8005cf2:	069f      	lsls	r7, r3, #26
 8005cf4:	f57f ae68 	bpl.w	80059c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8005cf8:	7ea3      	ldrb	r3, [r4, #26]
 8005cfa:	f043 0302 	orr.w	r3, r3, #2
 8005cfe:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8005d00:	4620      	mov	r0, r4
 8005d02:	f7fe fb7d 	bl	8004400 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005d06:	f8d9 3000 	ldr.w	r3, [r9]
 8005d0a:	429c      	cmp	r4, r3
 8005d0c:	d0c0      	beq.n	8005c90 <tcp_input+0x7a0>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0cb      	beq.n	8005caa <tcp_input+0x7ba>
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	4294      	cmp	r4, r2
 8005d16:	d0c2      	beq.n	8005c9e <tcp_input+0x7ae>
 8005d18:	4613      	mov	r3, r2
 8005d1a:	e7f8      	b.n	8005d0e <tcp_input+0x81e>
    tcp_receive(pcb);
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff f86d 	bl	8004dfc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	06de      	lsls	r6, r3, #27
 8005d28:	f57f ae4e 	bpl.w	80059c8 <tcp_input+0x4d8>
 8005d2c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	f47f ae49 	bne.w	80059c8 <tcp_input+0x4d8>
 8005d36:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f47f ae45 	bne.w	80059c8 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f7fe fb5e 	bl	8004400 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005d44:	f8d9 3000 	ldr.w	r3, [r9]
 8005d48:	429c      	cmp	r4, r3
 8005d4a:	d0a1      	beq.n	8005c90 <tcp_input+0x7a0>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ac      	beq.n	8005caa <tcp_input+0x7ba>
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	4294      	cmp	r4, r2
 8005d54:	d0a3      	beq.n	8005c9e <tcp_input+0x7ae>
 8005d56:	4613      	mov	r3, r2
 8005d58:	e7f8      	b.n	8005d4c <tcp_input+0x85c>
    tcp_receive(pcb);
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7ff f84e 	bl	8004dfc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	06d8      	lsls	r0, r3, #27
 8005d66:	f57f ae2f 	bpl.w	80059c8 <tcp_input+0x4d8>
 8005d6a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	f47f ae2a 	bne.w	80059c8 <tcp_input+0x4d8>
 8005d74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f47f ae26 	bne.w	80059c8 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8005d7c:	f898 3000 	ldrb.w	r3, [r8]
 8005d80:	f043 0310 	orr.w	r3, r3, #16
 8005d84:	f888 3000 	strb.w	r3, [r8]
 8005d88:	e61e      	b.n	80059c8 <tcp_input+0x4d8>
 8005d8a:	bf00      	nop
 8005d8c:	0800a775 	.word	0x0800a775
 8005d90:	0800a714 	.word	0x0800a714
 8005d94:	08009678 	.word	0x08009678
 8005d98:	0800a72a 	.word	0x0800a72a
 8005d9c:	20000678 	.word	0x20000678
 8005da0:	0800a73d 	.word	0x0800a73d
 8005da4:	20002e34 	.word	0x20002e34
 8005da8:	20002e48 	.word	0x20002e48
        if (recv_acked > 0) {
 8005dac:	9b05      	ldr	r3, [sp, #20]
 8005dae:	881a      	ldrh	r2, [r3, #0]
 8005db0:	b122      	cbz	r2, 8005dbc <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8005db2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005db4:	b9eb      	cbnz	r3, 8005df2 <tcp_input+0x902>
          recv_acked = 0;
 8005db6:	9a05      	ldr	r2, [sp, #20]
 8005db8:	2300      	movs	r3, #0
 8005dba:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff fb77 	bl	80054b0 <tcp_input_delayed_close>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f47f acc6 	bne.w	8005754 <tcp_input+0x264>
        if (recv_data != NULL) {
 8005dc8:	f8da 3000 	ldr.w	r3, [sl]
 8005dcc:	b333      	cbz	r3, 8005e1c <tcp_input+0x92c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8005dce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005dd0:	b133      	cbz	r3, 8005de0 <tcp_input+0x8f0>
 8005dd2:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <tcp_input+0x9e0>)
 8005dd4:	493f      	ldr	r1, [pc, #252]	; (8005ed4 <tcp_input+0x9e4>)
 8005dd6:	4840      	ldr	r0, [pc, #256]	; (8005ed8 <tcp_input+0x9e8>)
 8005dd8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005ddc:	f001 fda8 	bl	8007930 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8005de0:	7ea3      	ldrb	r3, [r4, #26]
 8005de2:	f013 0310 	ands.w	r3, r3, #16
 8005de6:	d00a      	beq.n	8005dfe <tcp_input+0x90e>
            pbuf_free(recv_data);
 8005de8:	f8da 0000 	ldr.w	r0, [sl]
 8005dec:	f7fd fe4a 	bl	8003a84 <pbuf_free>
 8005df0:	e6de      	b.n	8005bb0 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8005df2:	4621      	mov	r1, r4
 8005df4:	6920      	ldr	r0, [r4, #16]
 8005df6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8005df8:	300d      	adds	r0, #13
 8005dfa:	d1dc      	bne.n	8005db6 <tcp_input+0x8c6>
 8005dfc:	e4aa      	b.n	8005754 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8005dfe:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005e00:	b31e      	cbz	r6, 8005e4a <tcp_input+0x95a>
 8005e02:	f8da 2000 	ldr.w	r2, [sl]
 8005e06:	6920      	ldr	r0, [r4, #16]
 8005e08:	4621      	mov	r1, r4
 8005e0a:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8005e0c:	f110 0f0d 	cmn.w	r0, #13
 8005e10:	f43f aca0 	beq.w	8005754 <tcp_input+0x264>
          if (err != ERR_OK) {
 8005e14:	b110      	cbz	r0, 8005e1c <tcp_input+0x92c>
            pcb->refused_data = recv_data;
 8005e16:	f8da 3000 	ldr.w	r3, [sl]
 8005e1a:	6723      	str	r3, [r4, #112]	; 0x70
        if (recv_flags & TF_GOT_FIN) {
 8005e1c:	f898 3000 	ldrb.w	r3, [r8]
 8005e20:	069a      	lsls	r2, r3, #26
 8005e22:	d505      	bpl.n	8005e30 <tcp_input+0x940>
          if (pcb->refused_data != NULL) {
 8005e24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005e26:	b1c3      	cbz	r3, 8005e5a <tcp_input+0x96a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8005e28:	7b5a      	ldrb	r2, [r3, #13]
 8005e2a:	f042 0220 	orr.w	r2, r2, #32
 8005e2e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8005e30:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <tcp_input+0x9ec>)
 8005e32:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8005e34:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8005e36:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8005e38:	f7ff fb3a 	bl	80054b0 <tcp_input_delayed_close>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f47f ac89 	bne.w	8005754 <tcp_input+0x264>
        tcp_output(pcb);
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fcbc 	bl	80067c0 <tcp_output>
 8005e48:	e484      	b.n	8005754 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8005e4a:	4633      	mov	r3, r6
 8005e4c:	f8da 2000 	ldr.w	r2, [sl]
 8005e50:	4621      	mov	r1, r4
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7fe fdb4 	bl	80049c0 <tcp_recv_null>
 8005e58:	e7d8      	b.n	8005e0c <tcp_input+0x91c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005e5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8005e5c:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005e5e:	f640 3268 	movw	r2, #2920	; 0xb68
 8005e62:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 8005e64:	bf1c      	itt	ne
 8005e66:	3301      	addne	r3, #1
 8005e68:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	d0e0      	beq.n	8005e30 <tcp_input+0x940>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	461a      	mov	r2, r3
 8005e72:	4621      	mov	r1, r4
 8005e74:	6920      	ldr	r0, [r4, #16]
 8005e76:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8005e78:	300d      	adds	r0, #13
 8005e7a:	d1d9      	bne.n	8005e30 <tcp_input+0x940>
 8005e7c:	e46a      	b.n	8005754 <tcp_input+0x264>
      if (prev != NULL) {
 8005e7e:	b13c      	cbz	r4, 8005e90 <tcp_input+0x9a0>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8005e80:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005e84:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005e86:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <tcp_input+0x9f0>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8005e88:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005e8c:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	0759      	lsls	r1, r3, #29
 8005e96:	f53f ace8 	bmi.w	800586a <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8005e9a:	06dc      	lsls	r4, r3, #27
 8005e9c:	f57f ad1a 	bpl.w	80058d4 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005ea0:	9b04      	ldr	r3, [sp, #16]
 8005ea2:	f8db 1000 	ldr.w	r1, [fp]
 8005ea6:	881c      	ldrh	r4, [r3, #0]
 8005ea8:	8813      	ldrh	r3, [r2, #0]
 8005eaa:	e88d 0009 	stmia.w	sp, {r0, r3}
 8005eae:	e4c6      	b.n	800583e <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	f47f ad7f 	bne.w	80059b4 <tcp_input+0x4c4>
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <tcp_input+0x9e0>)
 8005eb8:	490a      	ldr	r1, [pc, #40]	; (8005ee4 <tcp_input+0x9f4>)
 8005eba:	4807      	ldr	r0, [pc, #28]	; (8005ed8 <tcp_input+0x9e8>)
 8005ebc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8005ec0:	f001 fd36 	bl	8007930 <iprintf>
 8005ec4:	e576      	b.n	80059b4 <tcp_input+0x4c4>
      if (prev != NULL) {
 8005ec6:	f1ba 0f00 	cmp.w	sl, #0
 8005eca:	f47f ac00 	bne.w	80056ce <tcp_input+0x1de>
 8005ece:	e40f      	b.n	80056f0 <tcp_input+0x200>
 8005ed0:	0800a775 	.word	0x0800a775
 8005ed4:	0800a75b 	.word	0x0800a75b
 8005ed8:	08009678 	.word	0x08009678
 8005edc:	20002e4c 	.word	0x20002e4c
 8005ee0:	20002e40 	.word	0x20002e40
 8005ee4:	0800a6f4 	.word	0x0800a6f4

08005ee8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8005ee8:	4a02      	ldr	r2, [pc, #8]	; (8005ef4 <tcp_trigger_input_pcb_close+0xc>)
 8005eea:	7813      	ldrb	r3, [r2, #0]
 8005eec:	f043 0310 	orr.w	r3, r3, #16
 8005ef0:	7013      	strb	r3, [r2, #0]
 8005ef2:	4770      	bx	lr
 8005ef4:	20000624 	.word	0x20000624

08005ef8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8005efc:	4294      	cmp	r4, r2
{
 8005efe:	461e      	mov	r6, r3
 8005f00:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8005f04:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8005f06:	d228      	bcs.n	8005f5a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8005f08:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8005f0c:	07ad      	lsls	r5, r5, #30
 8005f0e:	d407      	bmi.n	8005f20 <tcp_pbuf_prealloc+0x28>
 8005f10:	7e9d      	ldrb	r5, [r3, #26]
 8005f12:	066d      	lsls	r5, r5, #25
 8005f14:	d421      	bmi.n	8005f5a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8005f16:	b119      	cbz	r1, 8005f20 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8005f18:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005f1a:	b909      	cbnz	r1, 8005f20 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8005f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1e:	b1e3      	cbz	r3, 8005f5a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8005f20:	f204 53b7 	addw	r3, r4, #1463	; 0x5b7
 8005f24:	f023 0103 	bic.w	r1, r3, #3
 8005f28:	428a      	cmp	r2, r1
 8005f2a:	bf28      	it	cs
 8005f2c:	460a      	movcs	r2, r1
 8005f2e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8005f30:	2200      	movs	r2, #0
 8005f32:	f7fd fe09 	bl	8003b48 <pbuf_alloc>
  if (p == NULL) {
 8005f36:	4605      	mov	r5, r0
 8005f38:	b168      	cbz	r0, 8005f56 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8005f3a:	6803      	ldr	r3, [r0, #0]
 8005f3c:	b133      	cbz	r3, 8005f4c <tcp_pbuf_prealloc+0x54>
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <tcp_pbuf_prealloc+0x68>)
 8005f40:	4908      	ldr	r1, [pc, #32]	; (8005f64 <tcp_pbuf_prealloc+0x6c>)
 8005f42:	4809      	ldr	r0, [pc, #36]	; (8005f68 <tcp_pbuf_prealloc+0x70>)
 8005f44:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005f48:	f001 fcf2 	bl	8007930 <iprintf>
  *oversize = p->len - length;
 8005f4c:	896b      	ldrh	r3, [r5, #10]
 8005f4e:	1b1b      	subs	r3, r3, r4
 8005f50:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8005f52:	812c      	strh	r4, [r5, #8]
 8005f54:	816c      	strh	r4, [r5, #10]
  return p;
}
 8005f56:	4628      	mov	r0, r5
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	e7e8      	b.n	8005f30 <tcp_pbuf_prealloc+0x38>
 8005f5e:	bf00      	nop
 8005f60:	0800aa18 	.word	0x0800aa18
 8005f64:	0800aa4b 	.word	0x0800aa4b
 8005f68:	08009678 	.word	0x08009678

08005f6c <tcp_create_segment>:
{
 8005f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	f89d a020 	ldrb.w	sl, [sp, #32]
 8005f74:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8005f76:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8005f7a:	f04f 0003 	mov.w	r0, #3
{
 8005f7e:	460f      	mov	r7, r1
 8005f80:	4616      	mov	r6, r2
 8005f82:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8005f84:	bf14      	ite	ne
 8005f86:	2504      	movne	r5, #4
 8005f88:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8005f8a:	f7fd fc11 	bl	80037b0 <memp_malloc>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	b928      	cbnz	r0, 8005f9e <tcp_create_segment+0x32>
    pbuf_free(p);
 8005f92:	4638      	mov	r0, r7
 8005f94:	f7fd fd76 	bl	8003a84 <pbuf_free>
}
 8005f98:	4620      	mov	r0, r4
 8005f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8005f9e:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8005fa2:	2300      	movs	r3, #0
  seg->p = p;
 8005fa4:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8005fa8:	893b      	ldrh	r3, [r7, #8]
 8005faa:	fa1f fa85 	uxth.w	sl, r5
 8005fae:	4553      	cmp	r3, sl
 8005fb0:	d205      	bcs.n	8005fbe <tcp_create_segment+0x52>
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <tcp_create_segment+0xc4>)
 8005fb4:	491f      	ldr	r1, [pc, #124]	; (8006034 <tcp_create_segment+0xc8>)
 8005fb6:	4820      	ldr	r0, [pc, #128]	; (8006038 <tcp_create_segment+0xcc>)
 8005fb8:	22ba      	movs	r2, #186	; 0xba
 8005fba:	f001 fcb9 	bl	8007930 <iprintf>
  seg->len = p->tot_len - optlen;
 8005fbe:	893b      	ldrh	r3, [r7, #8]
 8005fc0:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8005fc4:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 8005fc6:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8005fc8:	2114      	movs	r1, #20
 8005fca:	f7fd fd55 	bl	8003a78 <pbuf_header>
 8005fce:	4607      	mov	r7, r0
 8005fd0:	b120      	cbz	r0, 8005fdc <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7fe f996 	bl	8004304 <tcp_seg_free>
    return NULL;
 8005fd8:	2400      	movs	r4, #0
 8005fda:	e7dd      	b.n	8005f98 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8005fdc:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8005fde:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8005fe2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005fe6:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8005fea:	f7fb ffcb 	bl	8001f84 <lwip_htons>
 8005fee:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8005ff2:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8005ff6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8005ffa:	f7fb ffc3 	bl	8001f84 <lwip_htons>
 8005ffe:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8006002:	4648      	mov	r0, r9
 8006004:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006008:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800600a:	f7fb ffbe 	bl	8001f8a <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800600e:	3505      	adds	r5, #5
 8006010:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8006014:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006018:	b2a8      	uxth	r0, r5
 800601a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800601e:	f7fb ffb1 	bl	8001f84 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8006022:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006024:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8006028:	749f      	strb	r7, [r3, #18]
 800602a:	74df      	strb	r7, [r3, #19]
  return seg;
 800602c:	e7b4      	b.n	8005f98 <tcp_create_segment+0x2c>
 800602e:	bf00      	nop
 8006030:	0800aa18 	.word	0x0800aa18
 8006034:	0800a8a0 	.word	0x0800a8a0
 8006038:	08009678 	.word	0x08009678

0800603c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800603c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800603e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8006040:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8006042:	4605      	mov	r5, r0
 8006044:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8006046:	2001      	movs	r0, #1
 8006048:	2200      	movs	r2, #0
 800604a:	f7fd fd7d 	bl	8003b48 <pbuf_alloc>
  if (p != NULL) {
 800604e:	4606      	mov	r6, r0
 8006050:	b340      	cbz	r0, 80060a4 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8006052:	8943      	ldrh	r3, [r0, #10]
 8006054:	2b13      	cmp	r3, #19
 8006056:	dc05      	bgt.n	8006064 <tcp_output_alloc_header.constprop.0+0x28>
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <tcp_output_alloc_header.constprop.0+0x6c>)
 800605a:	4914      	ldr	r1, [pc, #80]	; (80060ac <tcp_output_alloc_header.constprop.0+0x70>)
 800605c:	4814      	ldr	r0, [pc, #80]	; (80060b0 <tcp_output_alloc_header.constprop.0+0x74>)
 800605e:	2273      	movs	r2, #115	; 0x73
 8006060:	f001 fc66 	bl	8007930 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8006064:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8006066:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8006068:	f7fb ff8c 	bl	8001f84 <lwip_htons>
 800606c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800606e:	8b28      	ldrh	r0, [r5, #24]
 8006070:	f7fb ff88 	bl	8001f84 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8006074:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8006076:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8006078:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800607a:	f7fb ff86 	bl	8001f8a <lwip_htonl>
 800607e:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8006080:	f245 0010 	movw	r0, #20496	; 0x5010
 8006084:	f7fb ff7e 	bl	8001f84 <lwip_htons>
 8006088:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800608a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800608c:	f7fb ff7a 	bl	8001f84 <lwip_htons>
    tcphdr->chksum = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	7423      	strb	r3, [r4, #16]
 8006094:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8006096:	74a3      	strb	r3, [r4, #18]
 8006098:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800609a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800609c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800609e:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80060a0:	4413      	add	r3, r2
 80060a2:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80060a4:	4630      	mov	r0, r6
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a8:	0800aa18 	.word	0x0800aa18
 80060ac:	0800a9ea 	.word	0x0800a9ea
 80060b0:	08009678 	.word	0x08009678

080060b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80060b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	b091      	sub	sp, #68	; 0x44
 80060ba:	4605      	mov	r5, r0
 80060bc:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80060c4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 80060c8:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80060ca:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80060cc:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bf28      	it	cs
 80060d4:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf08      	it	eq
 80060da:	4613      	moveq	r3, r2
 80060dc:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80060de:	b959      	cbnz	r1, 80060f8 <tcp_write+0x44>
 80060e0:	4ba1      	ldr	r3, [pc, #644]	; (8006368 <tcp_write+0x2b4>)
 80060e2:	49a2      	ldr	r1, [pc, #648]	; (800636c <tcp_write+0x2b8>)
 80060e4:	48a2      	ldr	r0, [pc, #648]	; (8006370 <tcp_write+0x2bc>)
 80060e6:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80060ea:	f001 fc21 	bl	8007930 <iprintf>
 80060ee:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80060f2:	b011      	add	sp, #68	; 0x44
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80060f8:	7d2b      	ldrb	r3, [r5, #20]
 80060fa:	2b07      	cmp	r3, #7
 80060fc:	d003      	beq.n	8006106 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 80060fe:	3b02      	subs	r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	f200 8254 	bhi.w	80065ae <tcp_write+0x4fa>
  } else if (len == 0) {
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	b1db      	cbz	r3, 8006142 <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 800610a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800610e:	9a05      	ldr	r2, [sp, #20]
 8006110:	4293      	cmp	r3, r2
 8006112:	d206      	bcs.n	8006122 <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 8006114:	7eab      	ldrb	r3, [r5, #26]
 8006116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800611a:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	e7e7      	b.n	80060f2 <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8006122:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 8006126:	2a07      	cmp	r2, #7
 8006128:	d8f4      	bhi.n	8006114 <tcp_write+0x60>
 800612a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 800612c:	b30a      	cbz	r2, 8006172 <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800612e:	b943      	cbnz	r3, 8006142 <tcp_write+0x8e>
 8006130:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006132:	b933      	cbnz	r3, 8006142 <tcp_write+0x8e>
 8006134:	4b8c      	ldr	r3, [pc, #560]	; (8006368 <tcp_write+0x2b4>)
 8006136:	498f      	ldr	r1, [pc, #572]	; (8006374 <tcp_write+0x2c0>)
 8006138:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800613c:	488c      	ldr	r0, [pc, #560]	; (8006370 <tcp_write+0x2bc>)
 800613e:	f001 fbf7 	bl	8007930 <iprintf>
  if (pcb->unsent != NULL) {
 8006142:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8006144:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8006148:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800614a:	b9dc      	cbnz	r4, 8006184 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800614c:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 8006150:	f1b8 0f00 	cmp.w	r8, #0
 8006154:	f000 8103 	beq.w	800635e <tcp_write+0x2aa>
 8006158:	4b83      	ldr	r3, [pc, #524]	; (8006368 <tcp_write+0x2b4>)
 800615a:	4987      	ldr	r1, [pc, #540]	; (8006378 <tcp_write+0x2c4>)
 800615c:	4884      	ldr	r0, [pc, #528]	; (8006370 <tcp_write+0x2bc>)
 800615e:	f240 2225 	movw	r2, #549	; 0x225
 8006162:	f001 fbe5 	bl	8007930 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8006166:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 8006168:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 800616a:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 800616c:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800616e:	46a1      	mov	r9, r4
 8006170:	e094      	b.n	800629c <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8006172:	b913      	cbnz	r3, 800617a <tcp_write+0xc6>
 8006174:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0e3      	beq.n	8006142 <tcp_write+0x8e>
 800617a:	4b7b      	ldr	r3, [pc, #492]	; (8006368 <tcp_write+0x2b4>)
 800617c:	497f      	ldr	r1, [pc, #508]	; (800637c <tcp_write+0x2c8>)
 800617e:	f240 1259 	movw	r2, #345	; 0x159
 8006182:	e7db      	b.n	800613c <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8006184:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006186:	f8d7 b000 	ldr.w	fp, [r7]
 800618a:	f1bb 0f00 	cmp.w	fp, #0
 800618e:	f040 80b6 	bne.w	80062fe <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8006192:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8006194:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8006196:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800619a:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800619c:	bf14      	ite	ne
 800619e:	2404      	movne	r4, #4
 80061a0:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80061a2:	4423      	add	r3, r4
 80061a4:	429a      	cmp	r2, r3
 80061a6:	da06      	bge.n	80061b6 <tcp_write+0x102>
 80061a8:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <tcp_write+0x2b4>)
 80061aa:	4975      	ldr	r1, [pc, #468]	; (8006380 <tcp_write+0x2cc>)
 80061ac:	4870      	ldr	r0, [pc, #448]	; (8006370 <tcp_write+0x2bc>)
 80061ae:	f240 12c7 	movw	r2, #455	; 0x1c7
 80061b2:	f001 fbbd 	bl	8007930 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80061b6:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 80061ba:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 80061bc:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 80061c0:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 80061c4:	eba3 0909 	sub.w	r9, r3, r9
 80061c8:	eba9 0904 	sub.w	r9, r9, r4
 80061cc:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	f000 8096 	beq.w	8006302 <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80061d6:	45b1      	cmp	r9, r6
 80061d8:	d206      	bcs.n	80061e8 <tcp_write+0x134>
 80061da:	4b63      	ldr	r3, [pc, #396]	; (8006368 <tcp_write+0x2b4>)
 80061dc:	4969      	ldr	r1, [pc, #420]	; (8006384 <tcp_write+0x2d0>)
 80061de:	4864      	ldr	r0, [pc, #400]	; (8006370 <tcp_write+0x2bc>)
 80061e0:	f240 12d9 	movw	r2, #473	; 0x1d9
 80061e4:	f001 fba4 	bl	8007930 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80061e8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80061ec:	9a05      	ldr	r2, [sp, #20]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	bf28      	it	cs
 80061f2:	461a      	movcs	r2, r3
 80061f4:	454a      	cmp	r2, r9
 80061f6:	4616      	mov	r6, r2
 80061f8:	bfa8      	it	ge
 80061fa:	464e      	movge	r6, r9
      oversize -= oversize_used;
 80061fc:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 80061fe:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8006202:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8006206:	fa1f f989 	uxth.w	r9, r9
 800620a:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800620c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8006210:	b153      	cbz	r3, 8006228 <tcp_write+0x174>
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	429e      	cmp	r6, r3
 8006216:	f000 81cd 	beq.w	80065b4 <tcp_write+0x500>
 800621a:	4b53      	ldr	r3, [pc, #332]	; (8006368 <tcp_write+0x2b4>)
 800621c:	495a      	ldr	r1, [pc, #360]	; (8006388 <tcp_write+0x2d4>)
 800621e:	4854      	ldr	r0, [pc, #336]	; (8006370 <tcp_write+0x2bc>)
 8006220:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006224:	f001 fb84 	bl	8007930 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8006228:	9b05      	ldr	r3, [sp, #20]
 800622a:	429e      	cmp	r6, r3
 800622c:	f080 81c2 	bcs.w	80065b4 <tcp_write+0x500>
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	f000 808f 	beq.w	8006356 <tcp_write+0x2a2>
 8006238:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 800623c:	f1ba 0f00 	cmp.w	sl, #0
 8006240:	f000 808a 	beq.w	8006358 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8006244:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8006246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8006248:	454c      	cmp	r4, r9
 800624a:	bfa8      	it	ge
 800624c:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800624e:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8006250:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8006254:	d557      	bpl.n	8006306 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8006256:	2301      	movs	r3, #1
 8006258:	9302      	str	r3, [sp, #8]
 800625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	464a      	mov	r2, r9
 8006260:	9500      	str	r5, [sp, #0]
 8006262:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8006266:	4641      	mov	r1, r8
 8006268:	2004      	movs	r0, #4
 800626a:	f7ff fe45 	bl	8005ef8 <tcp_pbuf_prealloc>
 800626e:	4681      	mov	r9, r0
 8006270:	2800      	cmp	r0, #0
 8006272:	f000 8199 	beq.w	80065a8 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8006276:	9b08      	ldr	r3, [sp, #32]
 8006278:	6840      	ldr	r0, [r0, #4]
 800627a:	4642      	mov	r2, r8
 800627c:	1999      	adds	r1, r3, r6
 800627e:	f001 fb44 	bl	800790a <memcpy>
        queuelen += pbuf_clen(concat_p);
 8006282:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8006284:	f7fd fdac 	bl	8003de0 <pbuf_clen>
 8006288:	9b06      	ldr	r3, [sp, #24]
 800628a:	4403      	add	r3, r0
 800628c:	b29b      	uxth	r3, r3
 800628e:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8006290:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8006294:	44b0      	add	r8, r6
 8006296:	fa1f f888 	uxth.w	r8, r8
 800629a:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800629c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629e:	f04f 0b00 	mov.w	fp, #0
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80062aa:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 80062ac:	9b05      	ldr	r3, [sp, #20]
 80062ae:	4598      	cmp	r8, r3
 80062b0:	d370      	bcc.n	8006394 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 80062b2:	b146      	cbz	r6, 80062c6 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 80062b4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80062b8:	f1b8 0f00 	cmp.w	r8, #0
 80062bc:	f040 8110 	bne.w	80064e0 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 80062c0:	893b      	ldrh	r3, [r7, #8]
 80062c2:	441e      	add	r6, r3
 80062c4:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 80062c6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80062ca:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 80062ce:	f1b9 0f00 	cmp.w	r9, #0
 80062d2:	f000 811e 	beq.w	8006512 <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80062d6:	b937      	cbnz	r7, 80062e6 <tcp_write+0x232>
 80062d8:	4b23      	ldr	r3, [pc, #140]	; (8006368 <tcp_write+0x2b4>)
 80062da:	492c      	ldr	r1, [pc, #176]	; (800638c <tcp_write+0x2d8>)
 80062dc:	4824      	ldr	r0, [pc, #144]	; (8006370 <tcp_write+0x2bc>)
 80062de:	f240 22bb 	movw	r2, #699	; 0x2bb
 80062e2:	f001 fb25 	bl	8007930 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 80062e6:	4649      	mov	r1, r9
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fd fd95 	bl	8003e18 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80062ee:	893b      	ldrh	r3, [r7, #8]
 80062f0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 80062f4:	4413      	add	r3, r2
 80062f6:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 80062f8:	f8c7 b000 	str.w	fp, [r7]
 80062fc:	e12b      	b.n	8006556 <tcp_write+0x4a2>
 80062fe:	465f      	mov	r7, fp
 8006300:	e741      	b.n	8006186 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8006302:	4634      	mov	r4, r6
 8006304:	e782      	b.n	800620c <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 9000 	ldr.w	r9, [r3]
 800630c:	f1b9 0f00 	cmp.w	r9, #0
 8006310:	d112      	bne.n	8006338 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8006312:	7b1a      	ldrb	r2, [r3, #12]
 8006314:	2a01      	cmp	r2, #1
 8006316:	d111      	bne.n	800633c <tcp_write+0x288>
 8006318:	895a      	ldrh	r2, [r3, #10]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4413      	add	r3, r2
 800631e:	9a08      	ldr	r2, [sp, #32]
 8006320:	429a      	cmp	r2, r3
 8006322:	d10b      	bne.n	800633c <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8006324:	b136      	cbz	r6, 8006334 <tcp_write+0x280>
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <tcp_write+0x2b4>)
 8006328:	4919      	ldr	r1, [pc, #100]	; (8006390 <tcp_write+0x2dc>)
 800632a:	4811      	ldr	r0, [pc, #68]	; (8006370 <tcp_write+0x2bc>)
 800632c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006330:	f001 fafe 	bl	8007930 <iprintf>
          extendlen = seglen;
 8006334:	46c2      	mov	sl, r8
 8006336:	e7ad      	b.n	8006294 <tcp_write+0x1e0>
 8006338:	464b      	mov	r3, r9
 800633a:	e7e5      	b.n	8006308 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800633c:	2201      	movs	r2, #1
 800633e:	4641      	mov	r1, r8
 8006340:	2004      	movs	r0, #4
 8006342:	f7fd fc01 	bl	8003b48 <pbuf_alloc>
 8006346:	4681      	mov	r9, r0
 8006348:	2800      	cmp	r0, #0
 800634a:	f000 812d 	beq.w	80065a8 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800634e:	9b08      	ldr	r3, [sp, #32]
 8006350:	4433      	add	r3, r6
 8006352:	6043      	str	r3, [r0, #4]
 8006354:	e796      	b.n	8006284 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8006356:	46ca      	mov	sl, r9
 8006358:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800635a:	46d1      	mov	r9, sl
 800635c:	e79e      	b.n	800629c <tcp_write+0x1e8>
  u16_t extendlen = 0;
 800635e:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8006360:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8006362:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8006364:	46c1      	mov	r9, r8
 8006366:	e799      	b.n	800629c <tcp_write+0x1e8>
 8006368:	0800aa18 	.word	0x0800aa18
 800636c:	0800aa5f 	.word	0x0800aa5f
 8006370:	08009678 	.word	0x08009678
 8006374:	0800aa90 	.word	0x0800aa90
 8006378:	0800ab7a 	.word	0x0800ab7a
 800637c:	0800aaca 	.word	0x0800aaca
 8006380:	0800aafc 	.word	0x0800aafc
 8006384:	0800ab13 	.word	0x0800ab13
 8006388:	0800ab33 	.word	0x0800ab33
 800638c:	0800ac06 	.word	0x0800ac06
 8006390:	0800ab51 	.word	0x0800ab51
    u16_t left = len - pos;
 8006394:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8006396:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8006398:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 800639c:	b29b      	uxth	r3, r3
 800639e:	4293      	cmp	r3, r2
 80063a0:	bf28      	it	cs
 80063a2:	4613      	movcs	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80063a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063aa:	b363      	cbz	r3, 8006406 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80063ac:	fabb f38b 	clz	r3, fp
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	9500      	str	r5, [sp, #0]
 80063ba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80063be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063c0:	2000      	movs	r0, #0
 80063c2:	f7ff fd99 	bl	8005ef8 <tcp_pbuf_prealloc>
 80063c6:	4604      	mov	r4, r0
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d03b      	beq.n	8006444 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80063cc:	8943      	ldrh	r3, [r0, #10]
 80063ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d206      	bcs.n	80063e2 <tcp_write+0x32e>
 80063d4:	4b7b      	ldr	r3, [pc, #492]	; (80065c4 <tcp_write+0x510>)
 80063d6:	497c      	ldr	r1, [pc, #496]	; (80065c8 <tcp_write+0x514>)
 80063d8:	487c      	ldr	r0, [pc, #496]	; (80065cc <tcp_write+0x518>)
 80063da:	f240 2241 	movw	r2, #577	; 0x241
 80063de:	f001 faa7 	bl	8007930 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80063e2:	9b08      	ldr	r3, [sp, #32]
 80063e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e6:	6860      	ldr	r0, [r4, #4]
 80063e8:	eb03 0108 	add.w	r1, r3, r8
 80063ec:	f001 fa8d 	bl	800790a <memcpy>
    queuelen += pbuf_clen(p);
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7fd fcf5 	bl	8003de0 <pbuf_clen>
 80063f6:	9b06      	ldr	r3, [sp, #24]
 80063f8:	4403      	add	r3, r0
 80063fa:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80063fc:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 80063fe:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8006400:	d949      	bls.n	8006496 <tcp_write+0x3e2>
      pbuf_free(p);
 8006402:	4620      	mov	r0, r4
 8006404:	e01c      	b.n	8006440 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8006406:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800640a:	b133      	cbz	r3, 800641a <tcp_write+0x366>
 800640c:	4b6d      	ldr	r3, [pc, #436]	; (80065c4 <tcp_write+0x510>)
 800640e:	4970      	ldr	r1, [pc, #448]	; (80065d0 <tcp_write+0x51c>)
 8006410:	486e      	ldr	r0, [pc, #440]	; (80065cc <tcp_write+0x518>)
 8006412:	f240 224b 	movw	r2, #587	; 0x24b
 8006416:	f001 fa8b 	bl	8007930 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800641a:	2201      	movs	r2, #1
 800641c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800641e:	2000      	movs	r0, #0
 8006420:	f7fd fb92 	bl	8003b48 <pbuf_alloc>
 8006424:	b170      	cbz	r0, 8006444 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8006426:	9a08      	ldr	r2, [sp, #32]
 8006428:	900d      	str	r0, [sp, #52]	; 0x34
 800642a:	4442      	add	r2, r8
 800642c:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800642e:	2200      	movs	r2, #0
 8006430:	4611      	mov	r1, r2
 8006432:	4610      	mov	r0, r2
 8006434:	f7fd fb88 	bl	8003b48 <pbuf_alloc>
 8006438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800643a:	4604      	mov	r4, r0
 800643c:	bb38      	cbnz	r0, 800648e <tcp_write+0x3da>
        pbuf_free(p2);
 800643e:	4618      	mov	r0, r3
      pbuf_free(p);
 8006440:	f7fd fb20 	bl	8003a84 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8006444:	7eab      	ldrb	r3, [r5, #26]
 8006446:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800644a:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 800644c:	f1b9 0f00 	cmp.w	r9, #0
 8006450:	d002      	beq.n	8006458 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8006452:	4648      	mov	r0, r9
 8006454:	f7fd fb16 	bl	8003a84 <pbuf_free>
  if (queue != NULL) {
 8006458:	f1bb 0f00 	cmp.w	fp, #0
 800645c:	d002      	beq.n	8006464 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 800645e:	4658      	mov	r0, fp
 8006460:	f7fd ff5e 	bl	8004320 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8006464:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8006468:	2b00      	cmp	r3, #0
 800646a:	f43f ae57 	beq.w	800611c <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800646e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006470:	2b00      	cmp	r3, #0
 8006472:	f47f ae53 	bne.w	800611c <tcp_write+0x68>
 8006476:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f ae4f 	bne.w	800611c <tcp_write+0x68>
 800647e:	4b51      	ldr	r3, [pc, #324]	; (80065c4 <tcp_write+0x510>)
 8006480:	4954      	ldr	r1, [pc, #336]	; (80065d4 <tcp_write+0x520>)
 8006482:	4852      	ldr	r0, [pc, #328]	; (80065cc <tcp_write+0x518>)
 8006484:	f240 3202 	movw	r2, #770	; 0x302
 8006488:	f001 fa52 	bl	8007930 <iprintf>
 800648c:	e646      	b.n	800611c <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 800648e:	4619      	mov	r1, r3
 8006490:	f7fd fcc2 	bl	8003e18 <pbuf_cat>
 8006494:	e7ac      	b.n	80063f0 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8006496:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006498:	2200      	movs	r2, #0
 800649a:	4621      	mov	r1, r4
 800649c:	9200      	str	r2, [sp, #0]
 800649e:	4443      	add	r3, r8
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7ff fd63 	bl	8005f6c <tcp_create_segment>
 80064a6:	4604      	mov	r4, r0
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d0cb      	beq.n	8006444 <tcp_write+0x390>
    if (queue == NULL) {
 80064ac:	f1bb 0f00 	cmp.w	fp, #0
 80064b0:	d010      	beq.n	80064d4 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80064b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b4:	b933      	cbnz	r3, 80064c4 <tcp_write+0x410>
 80064b6:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <tcp_write+0x510>)
 80064b8:	4947      	ldr	r1, [pc, #284]	; (80065d8 <tcp_write+0x524>)
 80064ba:	4844      	ldr	r0, [pc, #272]	; (80065cc <tcp_write+0x518>)
 80064bc:	f240 2285 	movw	r2, #645	; 0x285
 80064c0:	f001 fa36 	bl	8007930 <iprintf>
      prev_seg->next = seg;
 80064c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c6:	601c      	str	r4, [r3, #0]
    pos += seglen;
 80064c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80064cc:	4498      	add	r8, r3
 80064ce:	fa1f f888 	uxth.w	r8, r8
 80064d2:	e6eb      	b.n	80062ac <tcp_write+0x1f8>
 80064d4:	4683      	mov	fp, r0
 80064d6:	e7f7      	b.n	80064c8 <tcp_write+0x414>
  if (oversize_used > 0) {
 80064d8:	f04f 0a00 	mov.w	sl, #0
 80064dc:	46d1      	mov	r9, sl
 80064de:	e6e9      	b.n	80062b4 <tcp_write+0x200>
      p->tot_len += oversize_used;
 80064e0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80064e4:	4433      	add	r3, r6
 80064e6:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 80064ea:	f8d8 3000 	ldr.w	r3, [r8]
 80064ee:	b96b      	cbnz	r3, 800650c <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80064f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064f4:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 80064f8:	9908      	ldr	r1, [sp, #32]
 80064fa:	4418      	add	r0, r3
 80064fc:	4632      	mov	r2, r6
 80064fe:	f001 fa04 	bl	800790a <memcpy>
        p->len += oversize_used;
 8006502:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006506:	4433      	add	r3, r6
 8006508:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800650c:	f8d8 8000 	ldr.w	r8, [r8]
 8006510:	e6d2      	b.n	80062b8 <tcp_write+0x204>
  } else if (extendlen > 0) {
 8006512:	f1ba 0f00 	cmp.w	sl, #0
 8006516:	d019      	beq.n	800654c <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8006518:	b10f      	cbz	r7, 800651e <tcp_write+0x46a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	b933      	cbnz	r3, 800652c <tcp_write+0x478>
 800651e:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <tcp_write+0x510>)
 8006520:	492e      	ldr	r1, [pc, #184]	; (80065dc <tcp_write+0x528>)
 8006522:	482a      	ldr	r0, [pc, #168]	; (80065cc <tcp_write+0x518>)
 8006524:	f240 22c1 	movw	r2, #705	; 0x2c1
 8006528:	f001 fa02 	bl	8007930 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	891a      	ldrh	r2, [r3, #8]
 8006530:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8006532:	4452      	add	r2, sl
 8006534:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8006536:	b939      	cbnz	r1, 8006548 <tcp_write+0x494>
    p->len += extendlen;
 8006538:	895a      	ldrh	r2, [r3, #10]
 800653a:	4452      	add	r2, sl
 800653c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800653e:	893b      	ldrh	r3, [r7, #8]
 8006540:	449a      	add	sl, r3
 8006542:	f8a7 a008 	strh.w	sl, [r7, #8]
 8006546:	e6d7      	b.n	80062f8 <tcp_write+0x244>
      p->tot_len += extendlen;
 8006548:	460b      	mov	r3, r1
 800654a:	e7f0      	b.n	800652e <tcp_write+0x47a>
  if (last_unsent == NULL) {
 800654c:	2f00      	cmp	r7, #0
 800654e:	f47f aed3 	bne.w	80062f8 <tcp_write+0x244>
    pcb->unsent = queue;
 8006552:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8006556:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006558:	9a05      	ldr	r2, [sp, #20]
 800655a:	4413      	add	r3, r2
 800655c:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 800655e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8006568:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800656c:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	b153      	cbz	r3, 800658a <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8006574:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006576:	b943      	cbnz	r3, 800658a <tcp_write+0x4d6>
 8006578:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800657a:	b933      	cbnz	r3, 800658a <tcp_write+0x4d6>
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <tcp_write+0x510>)
 800657e:	4915      	ldr	r1, [pc, #84]	; (80065d4 <tcp_write+0x520>)
 8006580:	4812      	ldr	r0, [pc, #72]	; (80065cc <tcp_write+0x518>)
 8006582:	f240 22ed 	movw	r2, #749	; 0x2ed
 8006586:	f001 f9d3 	bl	8007930 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800658a:	b15c      	cbz	r4, 80065a4 <tcp_write+0x4f0>
 800658c:	68e4      	ldr	r4, [r4, #12]
 800658e:	b14c      	cbz	r4, 80065a4 <tcp_write+0x4f0>
 8006590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006592:	f013 0602 	ands.w	r6, r3, #2
 8006596:	d105      	bne.n	80065a4 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8006598:	2008      	movs	r0, #8
 800659a:	89a5      	ldrh	r5, [r4, #12]
 800659c:	f7fb fcf2 	bl	8001f84 <lwip_htons>
 80065a0:	4328      	orrs	r0, r5
 80065a2:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 80065a4:	2000      	movs	r0, #0
 80065a6:	e5a4      	b.n	80060f2 <tcp_write+0x3e>
      p->tot_len += extendlen;
 80065a8:	f04f 0900 	mov.w	r9, #0
 80065ac:	e74a      	b.n	8006444 <tcp_write+0x390>
    return ERR_CONN;
 80065ae:	f06f 000a 	mvn.w	r0, #10
 80065b2:	e59e      	b.n	80060f2 <tcp_write+0x3e>
  if (oversize_used > 0) {
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d18f      	bne.n	80064d8 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 80065b8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80065bc:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 80065c0:	e69a      	b.n	80062f8 <tcp_write+0x244>
 80065c2:	bf00      	nop
 80065c4:	0800aa18 	.word	0x0800aa18
 80065c8:	0800aba9 	.word	0x0800aba9
 80065cc:	08009678 	.word	0x08009678
 80065d0:	0800abe7 	.word	0x0800abe7
 80065d4:	0800ac73 	.word	0x0800ac73
 80065d8:	0800abf5 	.word	0x0800abf5
 80065dc:	0800ac3e 	.word	0x0800ac3e

080065e0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80065e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80065e4:	f011 0803 	ands.w	r8, r1, #3
{
 80065e8:	4604      	mov	r4, r0
 80065ea:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80065ec:	d106      	bne.n	80065fc <tcp_enqueue_flags+0x1c>
 80065ee:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <tcp_enqueue_flags+0x114>)
 80065f0:	4941      	ldr	r1, [pc, #260]	; (80066f8 <tcp_enqueue_flags+0x118>)
 80065f2:	4842      	ldr	r0, [pc, #264]	; (80066fc <tcp_enqueue_flags+0x11c>)
 80065f4:	f240 321b 	movw	r2, #795	; 0x31b
 80065f8:	f001 f99a 	bl	8007930 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80065fc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006600:	2b07      	cmp	r3, #7
 8006602:	d90a      	bls.n	800661a <tcp_enqueue_flags+0x3a>
 8006604:	07f1      	lsls	r1, r6, #31
 8006606:	d408      	bmi.n	800661a <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8006608:	7ea3      	ldrb	r3, [r4, #26]
 800660a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800660e:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8006610:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8006614:	b003      	add	sp, #12
 8006616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800661a:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 800661e:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006620:	bf14      	ite	ne
 8006622:	2704      	movne	r7, #4
 8006624:	2700      	moveq	r7, #0
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	4639      	mov	r1, r7
 800662c:	4610      	mov	r0, r2
  u8_t optflags = 0;
 800662e:	bf14      	ite	ne
 8006630:	f04f 0901 	movne.w	r9, #1
 8006634:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006638:	f7fd fa86 	bl	8003b48 <pbuf_alloc>
 800663c:	4605      	mov	r5, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	d0e2      	beq.n	8006608 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8006642:	8943      	ldrh	r3, [r0, #10]
 8006644:	42bb      	cmp	r3, r7
 8006646:	d206      	bcs.n	8006656 <tcp_enqueue_flags+0x76>
 8006648:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <tcp_enqueue_flags+0x114>)
 800664a:	492d      	ldr	r1, [pc, #180]	; (8006700 <tcp_enqueue_flags+0x120>)
 800664c:	482b      	ldr	r0, [pc, #172]	; (80066fc <tcp_enqueue_flags+0x11c>)
 800664e:	f240 3241 	movw	r2, #833	; 0x341
 8006652:	f001 f96d 	bl	8007930 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8006656:	f8cd 9000 	str.w	r9, [sp]
 800665a:	4629      	mov	r1, r5
 800665c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665e:	4632      	mov	r2, r6
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff fc83 	bl	8005f6c <tcp_create_segment>
 8006666:	4605      	mov	r5, r0
 8006668:	2800      	cmp	r0, #0
 800666a:	d0cd      	beq.n	8006608 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800666c:	68c3      	ldr	r3, [r0, #12]
 800666e:	079a      	lsls	r2, r3, #30
 8006670:	d006      	beq.n	8006680 <tcp_enqueue_flags+0xa0>
 8006672:	4b20      	ldr	r3, [pc, #128]	; (80066f4 <tcp_enqueue_flags+0x114>)
 8006674:	4923      	ldr	r1, [pc, #140]	; (8006704 <tcp_enqueue_flags+0x124>)
 8006676:	4821      	ldr	r0, [pc, #132]	; (80066fc <tcp_enqueue_flags+0x11c>)
 8006678:	f240 3249 	movw	r2, #841	; 0x349
 800667c:	f001 f958 	bl	8007930 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8006680:	892b      	ldrh	r3, [r5, #8]
 8006682:	b133      	cbz	r3, 8006692 <tcp_enqueue_flags+0xb2>
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <tcp_enqueue_flags+0x114>)
 8006686:	4920      	ldr	r1, [pc, #128]	; (8006708 <tcp_enqueue_flags+0x128>)
 8006688:	481c      	ldr	r0, [pc, #112]	; (80066fc <tcp_enqueue_flags+0x11c>)
 800668a:	f240 324a 	movw	r2, #842	; 0x34a
 800668e:	f001 f94f 	bl	8007930 <iprintf>
  if (pcb->unsent == NULL) {
 8006692:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006694:	bb4b      	cbnz	r3, 80066ea <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8006696:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800669e:	f1b8 0f00 	cmp.w	r8, #0
 80066a2:	d002      	beq.n	80066aa <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 80066a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a6:	3301      	adds	r3, #1
 80066a8:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 80066aa:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 80066ac:	bf42      	ittt	mi
 80066ae:	7ea3      	ldrbmi	r3, [r4, #26]
 80066b0:	f043 0320 	orrmi.w	r3, r3, #32
 80066b4:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80066b6:	6868      	ldr	r0, [r5, #4]
 80066b8:	f7fd fb92 	bl	8003de0 <pbuf_clen>
 80066bc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80066c0:	4418      	add	r0, r3
 80066c2:	b280      	uxth	r0, r0
 80066c4:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d0a3      	beq.n	8006614 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80066cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80066ce:	b948      	cbnz	r0, 80066e4 <tcp_enqueue_flags+0x104>
 80066d0:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	d19e      	bne.n	8006614 <tcp_enqueue_flags+0x34>
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <tcp_enqueue_flags+0x114>)
 80066d8:	490c      	ldr	r1, [pc, #48]	; (800670c <tcp_enqueue_flags+0x12c>)
 80066da:	4808      	ldr	r0, [pc, #32]	; (80066fc <tcp_enqueue_flags+0x11c>)
 80066dc:	f240 326d 	movw	r2, #877	; 0x36d
 80066e0:	f001 f926 	bl	8007930 <iprintf>
  return ERR_OK;
 80066e4:	2000      	movs	r0, #0
 80066e6:	e795      	b.n	8006614 <tcp_enqueue_flags+0x34>
 80066e8:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	d1fb      	bne.n	80066e8 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 80066f0:	601d      	str	r5, [r3, #0]
 80066f2:	e7d1      	b.n	8006698 <tcp_enqueue_flags+0xb8>
 80066f4:	0800aa18 	.word	0x0800aa18
 80066f8:	0800a8b5 	.word	0x0800a8b5
 80066fc:	08009678 	.word	0x08009678
 8006700:	0800a90a 	.word	0x0800a90a
 8006704:	0800a943 	.word	0x0800a943
 8006708:	0800a95b 	.word	0x0800a95b
 800670c:	0800a985 	.word	0x0800a985

08006710 <tcp_send_fin>:
{
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8006712:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8006714:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8006716:	b934      	cbnz	r4, 8006726 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006718:	4628      	mov	r0, r5
 800671a:	2101      	movs	r1, #1
}
 800671c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006720:	f7ff bf5e 	b.w	80065e0 <tcp_enqueue_flags>
 8006724:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1fb      	bne.n	8006724 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800672c:	68e3      	ldr	r3, [r4, #12]
 800672e:	8998      	ldrh	r0, [r3, #12]
 8006730:	f7fb fc28 	bl	8001f84 <lwip_htons>
 8006734:	f010 0707 	ands.w	r7, r0, #7
 8006738:	d1ee      	bne.n	8006718 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800673a:	68e6      	ldr	r6, [r4, #12]
 800673c:	2001      	movs	r0, #1
 800673e:	89b4      	ldrh	r4, [r6, #12]
 8006740:	f7fb fc20 	bl	8001f84 <lwip_htons>
 8006744:	4320      	orrs	r0, r4
 8006746:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8006748:	7eab      	ldrb	r3, [r5, #26]
 800674a:	f043 0320 	orr.w	r3, r3, #32
 800674e:	76ab      	strb	r3, [r5, #26]
}
 8006750:	4638      	mov	r0, r7
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006754 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8006754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006756:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8006758:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800675a:	f7fb fc16 	bl	8001f8a <lwip_htonl>
 800675e:	2100      	movs	r1, #0
 8006760:	4602      	mov	r2, r0
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fc6a 	bl	800603c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8006768:	4606      	mov	r6, r0
 800676a:	b940      	cbnz	r0, 800677e <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800676c:	7ea3      	ldrb	r3, [r4, #26]
 800676e:	f043 0303 	orr.w	r3, r3, #3
 8006772:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8006774:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8006778:	4628      	mov	r0, r5
 800677a:	b004      	add	sp, #16
 800677c:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800677e:	1d25      	adds	r5, r4, #4
 8006780:	4628      	mov	r0, r5
 8006782:	f7fc f8c9 	bl	8002918 <ip4_route>
  if (netif == NULL) {
 8006786:	b1a0      	cbz	r0, 80067b2 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8006788:	2206      	movs	r2, #6
 800678a:	9201      	str	r2, [sp, #4]
 800678c:	7a62      	ldrb	r2, [r4, #9]
 800678e:	9002      	str	r0, [sp, #8]
 8006790:	9200      	str	r2, [sp, #0]
 8006792:	7aa3      	ldrb	r3, [r4, #10]
 8006794:	462a      	mov	r2, r5
 8006796:	4621      	mov	r1, r4
 8006798:	4630      	mov	r0, r6
 800679a:	f7fc fa23 	bl	8002be4 <ip4_output_if>
 800679e:	4605      	mov	r5, r0
  pbuf_free(p);
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7fd f96f 	bl	8003a84 <pbuf_free>
 80067a6:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 80067a8:	b135      	cbz	r5, 80067b8 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80067aa:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80067ae:	76a3      	strb	r3, [r4, #26]
 80067b0:	e7e2      	b.n	8006778 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 80067b2:	f06f 0503 	mvn.w	r5, #3
 80067b6:	e7f3      	b.n	80067a0 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80067b8:	f023 0303 	bic.w	r3, r3, #3
 80067bc:	e7f7      	b.n	80067ae <tcp_send_empty_ack+0x5a>
	...

080067c0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80067c4:	7d03      	ldrb	r3, [r0, #20]
 80067c6:	2b01      	cmp	r3, #1
{
 80067c8:	b087      	sub	sp, #28
 80067ca:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80067cc:	d106      	bne.n	80067dc <tcp_output+0x1c>
 80067ce:	4ba5      	ldr	r3, [pc, #660]	; (8006a64 <tcp_output+0x2a4>)
 80067d0:	49a5      	ldr	r1, [pc, #660]	; (8006a68 <tcp_output+0x2a8>)
 80067d2:	48a6      	ldr	r0, [pc, #664]	; (8006a6c <tcp_output+0x2ac>)
 80067d4:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80067d8:	f001 f8aa 	bl	8007930 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80067dc:	4ba4      	ldr	r3, [pc, #656]	; (8006a70 <tcp_output+0x2b0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429c      	cmp	r4, r3
 80067e2:	d052      	beq.n	800688a <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80067e4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80067e8:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 80067ec:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80067ee:	429f      	cmp	r7, r3
 80067f0:	bf28      	it	cs
 80067f2:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80067f4:	7ea3      	ldrb	r3, [r4, #26]
 80067f6:	0799      	lsls	r1, r3, #30
 80067f8:	d510      	bpl.n	800681c <tcp_output+0x5c>
 80067fa:	b92d      	cbnz	r5, 8006808 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 80067fc:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 80067fe:	b007      	add	sp, #28
 8006800:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8006804:	f7ff bfa6 	b.w	8006754 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8006808:	68eb      	ldr	r3, [r5, #12]
 800680a:	6858      	ldr	r0, [r3, #4]
 800680c:	f7fb fbbd 	bl	8001f8a <lwip_htonl>
 8006810:	892b      	ldrh	r3, [r5, #8]
 8006812:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	4418      	add	r0, r3
     (seg == NULL ||
 8006818:	4287      	cmp	r7, r0
 800681a:	d3ef      	bcc.n	80067fc <tcp_output+0x3c>
  useg = pcb->unacked;
 800681c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800681e:	2e00      	cmp	r6, #0
 8006820:	d136      	bne.n	8006890 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006822:	f104 0804 	add.w	r8, r4, #4
 8006826:	4640      	mov	r0, r8
 8006828:	f7fc f876 	bl	8002918 <ip4_route>
  if (netif == NULL) {
 800682c:	4681      	mov	r9, r0
 800682e:	2800      	cmp	r0, #0
 8006830:	f000 813c 	beq.w	8006aac <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8006834:	b10c      	cbz	r4, 800683a <tcp_output+0x7a>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	b913      	cbnz	r3, 8006840 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800683a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800683e:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8006840:	b1d5      	cbz	r5, 8006878 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8006842:	68eb      	ldr	r3, [r5, #12]
 8006844:	6858      	ldr	r0, [r3, #4]
 8006846:	f7fb fba0 	bl	8001f8a <lwip_htonl>
 800684a:	892b      	ldrh	r3, [r5, #8]
 800684c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	4418      	add	r0, r3
  if (seg != NULL &&
 8006852:	4287      	cmp	r7, r0
 8006854:	d26f      	bcs.n	8006936 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8006856:	2f00      	cmp	r7, #0
 8006858:	d06d      	beq.n	8006936 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800685a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800685e:	429f      	cmp	r7, r3
 8006860:	d169      	bne.n	8006936 <tcp_output+0x176>
 8006862:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d166      	bne.n	8006936 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8006868:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800686c:	b923      	cbnz	r3, 8006878 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800686e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      pcb->persist_backoff = 1;
 8006872:	2301      	movs	r3, #1
 8006874:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  if (pcb->unsent == NULL) {
 8006878:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800687a:	b913      	cbnz	r3, 8006882 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8006882:	7ea3      	ldrb	r3, [r4, #26]
 8006884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006888:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800688a:	2000      	movs	r0, #0
 800688c:	e0e6      	b.n	8006a5c <tcp_output+0x29c>
 800688e:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1fb      	bne.n	800688e <tcp_output+0xce>
 8006896:	e7c4      	b.n	8006822 <tcp_output+0x62>
    pcb->unsent = seg->next;
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800689c:	7d23      	ldrb	r3, [r4, #20]
 800689e:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80068a0:	bf1e      	ittt	ne
 80068a2:	7ea3      	ldrbne	r3, [r4, #26]
 80068a4:	f023 0303 	bicne.w	r3, r3, #3
 80068a8:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80068aa:	68eb      	ldr	r3, [r5, #12]
 80068ac:	6858      	ldr	r0, [r3, #4]
 80068ae:	f7fb fb6c 	bl	8001f8a <lwip_htonl>
 80068b2:	68e9      	ldr	r1, [r5, #12]
 80068b4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80068b8:	4683      	mov	fp, r0
 80068ba:	8988      	ldrh	r0, [r1, #12]
 80068bc:	f7fb fb62 	bl	8001f84 <lwip_htons>
 80068c0:	f010 0003 	ands.w	r0, r0, #3
 80068c4:	eb0b 030a 	add.w	r3, fp, sl
 80068c8:	bf18      	it	ne
 80068ca:	2001      	movne	r0, #1
 80068cc:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80068ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80068d0:	68ea      	ldr	r2, [r5, #12]
 80068d2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80068d6:	1a1b      	subs	r3, r3, r0
 80068d8:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 80068da:	bfb8      	it	lt
 80068dc:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80068de:	8990      	ldrh	r0, [r2, #12]
 80068e0:	f7fb fb50 	bl	8001f84 <lwip_htons>
 80068e4:	f010 0003 	ands.w	r0, r0, #3
 80068e8:	bf18      	it	ne
 80068ea:	2001      	movne	r0, #1
 80068ec:	eb10 0f0a 	cmn.w	r0, sl
 80068f0:	f000 80d8 	beq.w	8006aa4 <tcp_output+0x2e4>
      seg->next = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 80068f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068fa:	b913      	cbnz	r3, 8006902 <tcp_output+0x142>
        pcb->unacked = seg;
 80068fc:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 80068fe:	462e      	mov	r6, r5
 8006900:	e016      	b.n	8006930 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8006902:	68eb      	ldr	r3, [r5, #12]
 8006904:	6858      	ldr	r0, [r3, #4]
 8006906:	f7fb fb40 	bl	8001f8a <lwip_htonl>
 800690a:	68f2      	ldr	r2, [r6, #12]
 800690c:	4682      	mov	sl, r0
 800690e:	6850      	ldr	r0, [r2, #4]
 8006910:	f7fb fb3b 	bl	8001f8a <lwip_htonl>
 8006914:	ebaa 0000 	sub.w	r0, sl, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	f280 80c1 	bge.w	8006aa0 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800691e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	2a00      	cmp	r2, #0
 8006926:	f040 80a9 	bne.w	8006a7c <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800692e:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8006930:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8006932:	2d00      	cmp	r5, #0
 8006934:	d0a2      	beq.n	800687c <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8006936:	68eb      	ldr	r3, [r5, #12]
 8006938:	6858      	ldr	r0, [r3, #4]
 800693a:	f7fb fb26 	bl	8001f8a <lwip_htonl>
 800693e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006940:	1ac0      	subs	r0, r0, r3
 8006942:	892b      	ldrh	r3, [r5, #8]
 8006944:	4418      	add	r0, r3
  while (seg != NULL &&
 8006946:	4287      	cmp	r7, r0
 8006948:	d396      	bcc.n	8006878 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800694a:	68eb      	ldr	r3, [r5, #12]
 800694c:	8998      	ldrh	r0, [r3, #12]
 800694e:	f7fb fb19 	bl	8001f84 <lwip_htons>
 8006952:	0742      	lsls	r2, r0, #29
 8006954:	d506      	bpl.n	8006964 <tcp_output+0x1a4>
 8006956:	4b43      	ldr	r3, [pc, #268]	; (8006a64 <tcp_output+0x2a4>)
 8006958:	4946      	ldr	r1, [pc, #280]	; (8006a74 <tcp_output+0x2b4>)
 800695a:	4844      	ldr	r0, [pc, #272]	; (8006a6c <tcp_output+0x2ac>)
 800695c:	f240 4246 	movw	r2, #1094	; 0x446
 8006960:	f000 ffe6 	bl	8007930 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8006964:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006966:	b19b      	cbz	r3, 8006990 <tcp_output+0x1d0>
 8006968:	7ea2      	ldrb	r2, [r4, #26]
 800696a:	f012 0f44 	tst.w	r2, #68	; 0x44
 800696e:	d10f      	bne.n	8006990 <tcp_output+0x1d0>
 8006970:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006972:	b12b      	cbz	r3, 8006980 <tcp_output+0x1c0>
 8006974:	6819      	ldr	r1, [r3, #0]
 8006976:	b959      	cbnz	r1, 8006990 <tcp_output+0x1d0>
 8006978:	8919      	ldrh	r1, [r3, #8]
 800697a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800697c:	4299      	cmp	r1, r3
 800697e:	d207      	bcs.n	8006990 <tcp_output+0x1d0>
 8006980:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006984:	b123      	cbz	r3, 8006990 <tcp_output+0x1d0>
 8006986:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800698a:	2b07      	cmp	r3, #7
 800698c:	f240 8091 	bls.w	8006ab2 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8006990:	7d23      	ldrb	r3, [r4, #20]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d00a      	beq.n	80069ac <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8006996:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800699a:	2010      	movs	r0, #16
 800699c:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 80069a0:	f7fb faf0 	bl	8001f84 <lwip_htons>
 80069a4:	ea4b 0000 	orr.w	r0, fp, r0
 80069a8:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80069ac:	686b      	ldr	r3, [r5, #4]
 80069ae:	89db      	ldrh	r3, [r3, #14]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f47f af71 	bne.w	8006898 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80069b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069b8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80069bc:	f7fb fae5 	bl	8001f8a <lwip_htonl>
 80069c0:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80069c4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80069c6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80069ca:	f7fb fadb 	bl	8001f84 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80069ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80069d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80069d2:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80069d6:	4413      	add	r3, r2
 80069d8:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80069da:	7aab      	ldrb	r3, [r5, #10]
 80069dc:	07db      	lsls	r3, r3, #31
 80069de:	d50c      	bpl.n	80069fa <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80069e0:	4641      	mov	r1, r8
 80069e2:	f240 50b4 	movw	r0, #1460	; 0x5b4
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80069e6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80069ea:	f7fe f9d1 	bl	8004d90 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80069ee:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80069f2:	f7fb faca 	bl	8001f8a <lwip_htonl>
 80069f6:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80069fa:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80069fe:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8006a00:	bfbc      	itt	lt
 8006a02:	2300      	movlt	r3, #0
 8006a04:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8006a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a08:	b93b      	cbnz	r3, 8006a1a <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <tcp_output+0x2b8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8006a10:	68eb      	ldr	r3, [r5, #12]
 8006a12:	6858      	ldr	r0, [r3, #4]
 8006a14:	f7fb fab9 	bl	8001f8a <lwip_htonl>
 8006a18:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006a1a:	6868      	ldr	r0, [r5, #4]
 8006a1c:	68ea      	ldr	r2, [r5, #12]
 8006a1e:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8006a20:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8006a22:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8006a28:	1ac9      	subs	r1, r1, r3
 8006a2a:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8006a2c:	8901      	ldrh	r1, [r0, #8]
 8006a2e:	1acb      	subs	r3, r1, r3
 8006a30:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	7413      	strb	r3, [r2, #16]
 8006a36:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8006a38:	2206      	movs	r2, #6
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	7a62      	ldrb	r2, [r4, #9]
 8006a3e:	9200      	str	r2, [sp, #0]
 8006a40:	7aa3      	ldrb	r3, [r4, #10]
 8006a42:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a46:	4642      	mov	r2, r8
 8006a48:	4621      	mov	r1, r4
 8006a4a:	f7fc f8cb 	bl	8002be4 <ip4_output_if>
    if (err != ERR_OK) {
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f43f af22 	beq.w	8006898 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8006a54:	7ea3      	ldrb	r3, [r4, #26]
 8006a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a5a:	76a3      	strb	r3, [r4, #26]
}
 8006a5c:	b007      	add	sp, #28
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a62:	bf00      	nop
 8006a64:	0800aa18 	.word	0x0800aa18
 8006a68:	0800a9ad 	.word	0x0800a9ad
 8006a6c:	08009678 	.word	0x08009678
 8006a70:	20002e4c 	.word	0x20002e4c
 8006a74:	0800a9d3 	.word	0x0800a9d3
 8006a78:	20002e3c 	.word	0x20002e3c
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8006a7c:	68d2      	ldr	r2, [r2, #12]
 8006a7e:	9305      	str	r3, [sp, #20]
 8006a80:	6850      	ldr	r0, [r2, #4]
 8006a82:	f7fb fa82 	bl	8001f8a <lwip_htonl>
 8006a86:	68e9      	ldr	r1, [r5, #12]
 8006a88:	4682      	mov	sl, r0
 8006a8a:	6848      	ldr	r0, [r1, #4]
 8006a8c:	f7fb fa7d 	bl	8001f8a <lwip_htonl>
 8006a90:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8006a94:	2800      	cmp	r0, #0
 8006a96:	9b05      	ldr	r3, [sp, #20]
 8006a98:	f6bf af47 	bge.w	800692a <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	e740      	b.n	8006922 <tcp_output+0x162>
          useg->next = seg;
 8006aa0:	6035      	str	r5, [r6, #0]
 8006aa2:	e72c      	b.n	80068fe <tcp_output+0x13e>
      tcp_seg_free(seg);
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f7fd fc2d 	bl	8004304 <tcp_seg_free>
 8006aaa:	e741      	b.n	8006930 <tcp_output+0x170>
    return ERR_RTE;
 8006aac:	f06f 0003 	mvn.w	r0, #3
 8006ab0:	e7d4      	b.n	8006a5c <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8006ab2:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8006ab6:	f47f af6b 	bne.w	8006990 <tcp_output+0x1d0>
 8006aba:	e6dd      	b.n	8006878 <tcp_output+0xb8>

08006abc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8006abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	4681      	mov	r9, r0
 8006ac4:	460e      	mov	r6, r1
 8006ac6:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8006ac8:	2114      	movs	r1, #20
 8006aca:	2200      	movs	r2, #0
 8006acc:	2001      	movs	r0, #1
{
 8006ace:	461f      	mov	r7, r3
 8006ad0:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8006ad4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8006ad8:	f7fd f836 	bl	8003b48 <pbuf_alloc>
  if (p == NULL) {
 8006adc:	4605      	mov	r5, r0
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d03c      	beq.n	8006b5c <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8006ae2:	8943      	ldrh	r3, [r0, #10]
 8006ae4:	2b13      	cmp	r3, #19
 8006ae6:	d806      	bhi.n	8006af6 <tcp_rst+0x3a>
 8006ae8:	4b1e      	ldr	r3, [pc, #120]	; (8006b64 <tcp_rst+0xa8>)
 8006aea:	491f      	ldr	r1, [pc, #124]	; (8006b68 <tcp_rst+0xac>)
 8006aec:	481f      	ldr	r0, [pc, #124]	; (8006b6c <tcp_rst+0xb0>)
 8006aee:	f240 524d 	movw	r2, #1357	; 0x54d
 8006af2:	f000 ff1d 	bl	8007930 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8006af6:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8006af8:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8006afa:	f7fb fa43 	bl	8001f84 <lwip_htons>
 8006afe:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8006b00:	4650      	mov	r0, sl
 8006b02:	f7fb fa3f 	bl	8001f84 <lwip_htons>
 8006b06:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8006b08:	4648      	mov	r0, r9
 8006b0a:	f7fb fa3e 	bl	8001f8a <lwip_htonl>
 8006b0e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7fb fa3a 	bl	8001f8a <lwip_htonl>
 8006b16:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8006b18:	f245 0014 	movw	r0, #20500	; 0x5014
 8006b1c:	f7fb fa32 	bl	8001f84 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8006b20:	230b      	movs	r3, #11
 8006b22:	2600      	movs	r6, #0
 8006b24:	73a3      	strb	r3, [r4, #14]
 8006b26:	2368      	movs	r3, #104	; 0x68
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8006b28:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8006b2a:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8006b2c:	7426      	strb	r6, [r4, #16]
 8006b2e:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8006b30:	74a6      	strb	r6, [r4, #18]
 8006b32:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7fb feef 	bl	8002918 <ip4_route>
  if (netif != NULL) {
 8006b3a:	b148      	cbz	r0, 8006b50 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8006b3c:	2306      	movs	r3, #6
 8006b3e:	9002      	str	r0, [sp, #8]
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	9600      	str	r6, [sp, #0]
 8006b44:	23ff      	movs	r3, #255	; 0xff
 8006b46:	463a      	mov	r2, r7
 8006b48:	4641      	mov	r1, r8
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f7fc f84a 	bl	8002be4 <ip4_output_if>
  }
  pbuf_free(p);
 8006b50:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8006b52:	b005      	add	sp, #20
 8006b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8006b58:	f7fc bf94 	b.w	8003a84 <pbuf_free>
}
 8006b5c:	b005      	add	sp, #20
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	bf00      	nop
 8006b64:	0800aa18 	.word	0x0800aa18
 8006b68:	0800a9ea 	.word	0x0800a9ea
 8006b6c:	08009678 	.word	0x08009678

08006b70 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8006b70:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8006b72:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8006b74:	b1aa      	cbz	r2, 8006ba2 <tcp_rexmit_rto+0x32>
 8006b76:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8006b78:	680b      	ldr	r3, [r1, #0]
 8006b7a:	b983      	cbnz	r3, 8006b9e <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8006b7c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8006b7e:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8006b80:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8006b82:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8006b86:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8006b88:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8006b8a:	bf1c      	itt	ne
 8006b8c:	3301      	addne	r3, #1
 8006b8e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8006b96:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 8006b9a:	f7ff be11 	b.w	80067c0 <tcp_output>
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	e7ea      	b.n	8006b78 <tcp_rexmit_rto+0x8>
}
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8006baa:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8006bac:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8006bae:	b1ad      	cbz	r5, 8006bdc <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8006bb4:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8006bb8:	6833      	ldr	r3, [r6, #0]
 8006bba:	b983      	cbnz	r3, 8006bde <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8006bbc:	6833      	ldr	r3, [r6, #0]
 8006bbe:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8006bc0:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	b90b      	cbnz	r3, 8006bca <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8006bc6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8006bca:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006bce:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8006bd0:	bf1c      	itt	ne
 8006bd2:	3301      	addne	r3, #1
 8006bd4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6363      	str	r3, [r4, #52]	; 0x34
 8006bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	6858      	ldr	r0, [r3, #4]
 8006be2:	f7fb f9d2 	bl	8001f8a <lwip_htonl>
 8006be6:	68eb      	ldr	r3, [r5, #12]
 8006be8:	4607      	mov	r7, r0
 8006bea:	6858      	ldr	r0, [r3, #4]
 8006bec:	f7fb f9cd 	bl	8001f8a <lwip_htonl>
 8006bf0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	dae2      	bge.n	8006bbc <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8006bf6:	6836      	ldr	r6, [r6, #0]
 8006bf8:	e7de      	b.n	8006bb8 <tcp_rexmit+0x10>

08006bfa <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8006bfa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8006c00:	b30b      	cbz	r3, 8006c46 <tcp_rexmit_fast+0x4c>
 8006c02:	7e83      	ldrb	r3, [r0, #26]
 8006c04:	075b      	lsls	r3, r3, #29
 8006c06:	d41e      	bmi.n	8006c46 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8006c08:	f7ff ffce 	bl	8006ba8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8006c0c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8006c10:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf38      	it	cc
 8006c18:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8006c1a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8006c1c:	bf28      	it	cs
 8006c1e:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8006c20:	0059      	lsls	r1, r3, #1
 8006c22:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8006c24:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8006c28:	bf38      	it	cc
 8006c2a:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8006c2e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8006c32:	440b      	add	r3, r1
 8006c34:	4413      	add	r3, r2
 8006c36:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8006c3a:	7ea3      	ldrb	r3, [r4, #26]
 8006c3c:	f043 0304 	orr.w	r3, r3, #4
 8006c40:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	8623      	strh	r3, [r4, #48]	; 0x30
 8006c46:	bd10      	pop	{r4, pc}

08006c48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8006c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006c4a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8006c4c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006c4e:	3801      	subs	r0, #1
 8006c50:	f7fb f99b 	bl	8001f8a <lwip_htonl>
 8006c54:	2100      	movs	r1, #0
 8006c56:	4602      	mov	r2, r0
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff f9ef 	bl	800603c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b1c8      	cbz	r0, 8006c96 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006c62:	1d26      	adds	r6, r4, #4
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7fb fe57 	bl	8002918 <ip4_route>
  if (netif == NULL) {
 8006c6a:	b188      	cbz	r0, 8006c90 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	2206      	movs	r2, #6
 8006c70:	7aa3      	ldrb	r3, [r4, #10]
 8006c72:	9002      	str	r0, [sp, #8]
 8006c74:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006c78:	4628      	mov	r0, r5
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	f7fb ffb1 	bl	8002be4 <ip4_output_if>
 8006c82:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8006c84:	4628      	mov	r0, r5
 8006c86:	f7fc fefd 	bl	8003a84 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	b004      	add	sp, #16
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8006c90:	f06f 0403 	mvn.w	r4, #3
 8006c94:	e7f6      	b.n	8006c84 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8006c96:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9a:	e7f6      	b.n	8006c8a <tcp_keepalive+0x42>

08006c9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8006c9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8006ca0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8006ca2:	4606      	mov	r6, r0

  if (seg == NULL) {
 8006ca4:	b914      	cbnz	r4, 8006cac <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8006ca6:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8006ca8:	2c00      	cmp	r4, #0
 8006caa:	d042      	beq.n	8006d32 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8006cac:	68e3      	ldr	r3, [r4, #12]
 8006cae:	8998      	ldrh	r0, [r3, #12]
 8006cb0:	f7fb f968 	bl	8001f84 <lwip_htons>
 8006cb4:	f010 0501 	ands.w	r5, r0, #1
 8006cb8:	bf18      	it	ne
 8006cba:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8006cbc:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8006cbe:	bf1c      	itt	ne
 8006cc0:	fab5 f585 	clzne	r5, r5
 8006cc4:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	f085 0101 	eor.w	r1, r5, #1
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff f9b5 	bl	800603c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d03e      	beq.n	8006d56 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8006cd8:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8006cdc:	b36d      	cbz	r5, 8006d3a <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8006cde:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8006ce2:	2011      	movs	r0, #17
 8006ce4:	f7fb f94e 	bl	8001f84 <lwip_htons>
 8006ce8:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8006cec:	b2ad      	uxth	r5, r5
 8006cee:	4328      	orrs	r0, r5
 8006cf0:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8006cf4:	68e3      	ldr	r3, [r4, #12]
 8006cf6:	6858      	ldr	r0, [r3, #4]
 8006cf8:	f7fb f947 	bl	8001f8a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006cfc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8006cfe:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006d00:	1a1b      	subs	r3, r3, r0
 8006d02:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006d04:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 8006d08:	bfb8      	it	lt
 8006d0a:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7fb fe03 	bl	8002918 <ip4_route>
  if (netif == NULL) {
 8006d12:	b1e8      	cbz	r0, 8006d50 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8006d14:	2100      	movs	r1, #0
 8006d16:	2206      	movs	r2, #6
 8006d18:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006d1c:	9002      	str	r0, [sp, #8]
 8006d1e:	4622      	mov	r2, r4
 8006d20:	7ab3      	ldrb	r3, [r6, #10]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7fb ff5d 	bl	8002be4 <ip4_output_if>
 8006d2a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f7fc fea9 	bl	8003a84 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8006d32:	4620      	mov	r0, r4
 8006d34:	b004      	add	sp, #16
 8006d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8006d3a:	6860      	ldr	r0, [r4, #4]
 8006d3c:	8922      	ldrh	r2, [r4, #8]
 8006d3e:	8903      	ldrh	r3, [r0, #8]
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2201      	movs	r2, #1
 8006d46:	f108 0114 	add.w	r1, r8, #20
 8006d4a:	f7fd f929 	bl	8003fa0 <pbuf_copy_partial>
 8006d4e:	e7d1      	b.n	8006cf4 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8006d50:	f06f 0403 	mvn.w	r4, #3
 8006d54:	e7ea      	b.n	8006d2c <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 8006d56:	f04f 34ff 	mov.w	r4, #4294967295
 8006d5a:	e7ea      	b.n	8006d32 <tcp_zero_window_probe+0x96>

08006d5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8006d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d60:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8006d62:	2006      	movs	r0, #6
{
 8006d64:	460f      	mov	r7, r1
 8006d66:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8006d68:	f7fc fd22 	bl	80037b0 <memp_malloc>
  if (timeout == NULL) {
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	b938      	cbnz	r0, 8006d80 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8006d70:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <sys_timeout+0x90>)
 8006d72:	491f      	ldr	r1, [pc, #124]	; (8006df0 <sys_timeout+0x94>)
 8006d74:	481f      	ldr	r0, [pc, #124]	; (8006df4 <sys_timeout+0x98>)
 8006d76:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8006d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8006d7c:	f000 bdd8 	b.w	8007930 <iprintf>
  now = sys_now();
 8006d80:	f000 fbc4 	bl	800750c <sys_now>
  if (next_timeout == NULL) {
 8006d84:	4a1c      	ldr	r2, [pc, #112]	; (8006df8 <sys_timeout+0x9c>)
 8006d86:	491d      	ldr	r1, [pc, #116]	; (8006dfc <sys_timeout+0xa0>)
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	b95b      	cbnz	r3, 8006da4 <sys_timeout+0x48>
    timeouts_last_time = now;
 8006d8c:	6008      	str	r0, [r1, #0]
    diff = 0;
 8006d8e:	4618      	mov	r0, r3
  timeout->next = NULL;
 8006d90:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8006d92:	4428      	add	r0, r5
  timeout->next = NULL;
 8006d94:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 8006d96:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 8006d98:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8006d9a:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8006d9c:	b92b      	cbnz	r3, 8006daa <sys_timeout+0x4e>
    next_timeout = timeout;
 8006d9e:	6014      	str	r4, [r2, #0]
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8006da4:	6809      	ldr	r1, [r1, #0]
 8006da6:	1a40      	subs	r0, r0, r1
 8006da8:	e7f2      	b.n	8006d90 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	428d      	cmp	r5, r1
 8006dae:	d217      	bcs.n	8006de0 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 8006db0:	1b4d      	subs	r5, r1, r5
 8006db2:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	e7f2      	b.n	8006d9e <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8006db8:	684e      	ldr	r6, [r1, #4]
 8006dba:	42b2      	cmp	r2, r6
 8006dbc:	d312      	bcc.n	8006de4 <sys_timeout+0x88>
 8006dbe:	4608      	mov	r0, r1
      timeout->time -= t->time;
 8006dc0:	6841      	ldr	r1, [r0, #4]
 8006dc2:	6862      	ldr	r2, [r4, #4]
 8006dc4:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8006dc6:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8006dc8:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d1f4      	bne.n	8006db8 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 8006dce:	4295      	cmp	r5, r2
 8006dd0:	d202      	bcs.n	8006dd8 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	441d      	add	r5, r3
 8006dd6:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8006dd8:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8006dda:	6004      	str	r4, [r0, #0]
        break;
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	4618      	mov	r0, r3
 8006de2:	e7ed      	b.n	8006dc0 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 8006de4:	1ab2      	subs	r2, r6, r2
 8006de6:	604a      	str	r2, [r1, #4]
 8006de8:	e7f6      	b.n	8006dd8 <sys_timeout+0x7c>
 8006dea:	bf00      	nop
 8006dec:	0800acac 	.word	0x0800acac
 8006df0:	0800ace0 	.word	0x0800ace0
 8006df4:	08009678 	.word	0x08009678
 8006df8:	20000640 	.word	0x20000640
 8006dfc:	20000648 	.word	0x20000648

08006e00 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8006e00:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <tcp_timer_needed+0x24>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	b962      	cbnz	r2, 8006e20 <tcp_timer_needed+0x20>
 8006e06:	4a08      	ldr	r2, [pc, #32]	; (8006e28 <tcp_timer_needed+0x28>)
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	b912      	cbnz	r2, 8006e12 <tcp_timer_needed+0x12>
 8006e0c:	4a07      	ldr	r2, [pc, #28]	; (8006e2c <tcp_timer_needed+0x2c>)
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	b132      	cbz	r2, 8006e20 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006e16:	4906      	ldr	r1, [pc, #24]	; (8006e30 <tcp_timer_needed+0x30>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	20fa      	movs	r0, #250	; 0xfa
 8006e1c:	f7ff bf9e 	b.w	8006d5c <sys_timeout>
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000644 	.word	0x20000644
 8006e28:	20002e38 	.word	0x20002e38
 8006e2c:	20002e48 	.word	0x20002e48
 8006e30:	08006e35 	.word	0x08006e35

08006e34 <tcpip_tcp_timer>:
{
 8006e34:	b508      	push	{r3, lr}
  tcp_tmr();
 8006e36:	f7fd fe47 	bl	8004ac8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <tcpip_tcp_timer+0x28>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	b913      	cbnz	r3, 8006e46 <tcpip_tcp_timer+0x12>
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <tcpip_tcp_timer+0x2c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b133      	cbz	r3, 8006e54 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006e46:	2200      	movs	r2, #0
 8006e48:	4906      	ldr	r1, [pc, #24]	; (8006e64 <tcpip_tcp_timer+0x30>)
 8006e4a:	20fa      	movs	r0, #250	; 0xfa
}
 8006e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006e50:	f7ff bf84 	b.w	8006d5c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8006e54:	4a04      	ldr	r2, [pc, #16]	; (8006e68 <tcpip_tcp_timer+0x34>)
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	bd08      	pop	{r3, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20002e38 	.word	0x20002e38
 8006e60:	20002e48 	.word	0x20002e48
 8006e64:	08006e35 	.word	0x08006e35
 8006e68:	20000644 	.word	0x20000644

08006e6c <sys_timeouts_init>:
{
 8006e6c:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8006e6e:	4d0a      	ldr	r5, [pc, #40]	; (8006e98 <sys_timeouts_init+0x2c>)
 8006e70:	4c0a      	ldr	r4, [pc, #40]	; (8006e9c <sys_timeouts_init+0x30>)
 8006e72:	f105 0208 	add.w	r2, r5, #8
 8006e76:	4621      	mov	r1, r4
 8006e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e7c:	f7ff ff6e 	bl	8006d5c <sys_timeout>
 8006e80:	f105 0210 	add.w	r2, r5, #16
 8006e84:	4621      	mov	r1, r4
 8006e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e8a:	f7ff ff67 	bl	8006d5c <sys_timeout>
  timeouts_last_time = sys_now();
 8006e8e:	f000 fb3d 	bl	800750c <sys_now>
 8006e92:	4b03      	ldr	r3, [pc, #12]	; (8006ea0 <sys_timeouts_init+0x34>)
 8006e94:	6018      	str	r0, [r3, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	0800ac94 	.word	0x0800ac94
 8006e9c:	08006ea5 	.word	0x08006ea5
 8006ea0:	20000648 	.word	0x20000648

08006ea4 <cyclic_timer>:
{
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4604      	mov	r4, r0
  cyclic->handler();
 8006ea8:	6843      	ldr	r3, [r0, #4]
 8006eaa:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8006eac:	4622      	mov	r2, r4
 8006eae:	6820      	ldr	r0, [r4, #0]
 8006eb0:	4902      	ldr	r1, [pc, #8]	; (8006ebc <cyclic_timer+0x18>)
}
 8006eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8006eb6:	f7ff bf51 	b.w	8006d5c <sys_timeout>
 8006eba:	bf00      	nop
 8006ebc:	08006ea5 	.word	0x08006ea5

08006ec0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8006ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (next_timeout) {
 8006ec4:	4d0f      	ldr	r5, [pc, #60]	; (8006f04 <sys_check_timeouts+0x44>)
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	b1d3      	cbz	r3, 8006f00 <sys_check_timeouts+0x40>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8006eca:	4e0f      	ldr	r6, [pc, #60]	; (8006f08 <sys_check_timeouts+0x48>)
    now = sys_now();
 8006ecc:	f000 fb1e 	bl	800750c <sys_now>
    diff = now - timeouts_last_time;
 8006ed0:	6834      	ldr	r4, [r6, #0]
 8006ed2:	1b04      	subs	r4, r0, r4
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
      tmptimeout = next_timeout;
 8006ed4:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8006ed6:	b199      	cbz	r1, 8006f00 <sys_check_timeouts+0x40>
 8006ed8:	684b      	ldr	r3, [r1, #4]
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d310      	bcc.n	8006f00 <sys_check_timeouts+0x40>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 8006ede:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 8006ee0:	688f      	ldr	r7, [r1, #8]
        arg = tmptimeout->arg;
 8006ee2:	f8d1 800c 	ldr.w	r8, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 8006ee6:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 8006ee8:	1ae4      	subs	r4, r4, r3
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8006eea:	2006      	movs	r0, #6
        next_timeout = tmptimeout->next;
 8006eec:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 8006eee:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 8006ef0:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8006ef2:	f7fc fc79 	bl	80037e8 <memp_free>
        if (handler != NULL) {
 8006ef6:	2f00      	cmp	r7, #0
 8006ef8:	d0ec      	beq.n	8006ed4 <sys_check_timeouts+0x14>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8006efa:	4640      	mov	r0, r8
 8006efc:	47b8      	blx	r7
 8006efe:	e7e9      	b.n	8006ed4 <sys_check_timeouts+0x14>
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f04:	20000640 	.word	0x20000640
 8006f08:	20000648 	.word	0x20000648

08006f0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8006f0c:	4770      	bx	lr
	...

08006f10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8006f14:	8943      	ldrh	r3, [r0, #10]
 8006f16:	2b07      	cmp	r3, #7
{
 8006f18:	b085      	sub	sp, #20
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8006f1e:	d805      	bhi.n	8006f2c <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8006f20:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8006f22:	b005      	add	sp, #20
 8006f24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8006f28:	f7fc bdac 	b.w	8003a84 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8006f2c:	4e3e      	ldr	r6, [pc, #248]	; (8007028 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 8006f2e:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8006f30:	6831      	ldr	r1, [r6, #0]
 8006f32:	6970      	ldr	r0, [r6, #20]
 8006f34:	f7fb fe67 	bl	8002c06 <ip4_addr_isbroadcast_u32>
 8006f38:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8006f3a:	8820      	ldrh	r0, [r4, #0]
 8006f3c:	f7fb f822 	bl	8001f84 <lwip_htons>
 8006f40:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8006f42:	8860      	ldrh	r0, [r4, #2]
 8006f44:	f7fb f81e 	bl	8001f84 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f48:	4a38      	ldr	r2, [pc, #224]	; (800702c <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006f4a:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8006f4c:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8006f50:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8006f52:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f54:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 8006f56:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f58:	4603      	mov	r3, r0
  prev = NULL;
 8006f5a:	46a4      	mov	ip, r4
 8006f5c:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f5e:	b92b      	cbnz	r3, 8006f6c <udp_input+0x5c>
  if (pcb != NULL) {
 8006f60:	bb0c      	cbnz	r4, 8006fa6 <udp_input+0x96>
  if (for_us) {
 8006f62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006f66:	428b      	cmp	r3, r1
 8006f68:	d1da      	bne.n	8006f20 <udp_input+0x10>
 8006f6a:	e01c      	b.n	8006fa6 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 8006f6c:	8a5a      	ldrh	r2, [r3, #18]
 8006f6e:	4552      	cmp	r2, sl
 8006f70:	d12b      	bne.n	8006fca <udp_input+0xba>
 8006f72:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8006f74:	b32f      	cbz	r7, 8006fc2 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006f76:	b13a      	cbz	r2, 8006f88 <udp_input+0x78>
 8006f78:	1c4e      	adds	r6, r1, #1
 8006f7a:	d005      	beq.n	8006f88 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8006f7c:	404a      	eors	r2, r1
 8006f7e:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8006f80:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006f84:	4216      	tst	r6, r2
 8006f86:	d120      	bne.n	8006fca <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8006f88:	7c1a      	ldrb	r2, [r3, #16]
 8006f8a:	0752      	lsls	r2, r2, #29
 8006f8c:	d402      	bmi.n	8006f94 <udp_input+0x84>
 8006f8e:	2c00      	cmp	r4, #0
 8006f90:	bf08      	it	eq
 8006f92:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8006f94:	8a9a      	ldrh	r2, [r3, #20]
 8006f96:	4542      	cmp	r2, r8
 8006f98:	d117      	bne.n	8006fca <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8006f9a:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8006f9c:	b9c2      	cbnz	r2, 8006fd0 <udp_input+0xc0>
        if (prev != NULL) {
 8006f9e:	f1bc 0f00 	cmp.w	ip, #0
 8006fa2:	d118      	bne.n	8006fd6 <udp_input+0xc6>
 8006fa4:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8006fa6:	f06f 0107 	mvn.w	r1, #7
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7fc fd64 	bl	8003a78 <pbuf_header>
 8006fb0:	b1c0      	cbz	r0, 8006fe4 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8006fb2:	4b1f      	ldr	r3, [pc, #124]	; (8007030 <udp_input+0x120>)
 8006fb4:	491f      	ldr	r1, [pc, #124]	; (8007034 <udp_input+0x124>)
 8006fb6:	4820      	ldr	r0, [pc, #128]	; (8007038 <udp_input+0x128>)
 8006fb8:	f240 1255 	movw	r2, #341	; 0x155
 8006fbc:	f000 fcb8 	bl	8007930 <iprintf>
 8006fc0:	e7ae      	b.n	8006f20 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	d0e0      	beq.n	8006f88 <udp_input+0x78>
 8006fc6:	428a      	cmp	r2, r1
 8006fc8:	d0de      	beq.n	8006f88 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fca:	469c      	mov	ip, r3
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	e7c6      	b.n	8006f5e <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8006fd0:	4572      	cmp	r2, lr
 8006fd2:	d1fa      	bne.n	8006fca <udp_input+0xba>
 8006fd4:	e7e3      	b.n	8006f9e <udp_input+0x8e>
          prev->next = pcb->next;
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 8006fdc:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8006fe0:	60d8      	str	r0, [r3, #12]
 8006fe2:	e7df      	b.n	8006fa4 <udp_input+0x94>
    if (pcb != NULL) {
 8006fe4:	b164      	cbz	r4, 8007000 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8006fe6:	69a6      	ldr	r6, [r4, #24]
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d099      	beq.n	8006f20 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8006fec:	f8cd 8000 	str.w	r8, [sp]
 8006ff0:	4b12      	ldr	r3, [pc, #72]	; (800703c <udp_input+0x12c>)
 8006ff2:	69e0      	ldr	r0, [r4, #28]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	47b0      	blx	r6
}
 8006ffa:	b005      	add	sp, #20
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8007000:	2f00      	cmp	r7, #0
 8007002:	d18d      	bne.n	8006f20 <udp_input+0x10>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700c:	2be0      	cmp	r3, #224	; 0xe0
 800700e:	d087      	beq.n	8006f20 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	8999      	ldrh	r1, [r3, #12]
 8007014:	3108      	adds	r1, #8
 8007016:	b209      	sxth	r1, r1
 8007018:	4628      	mov	r0, r5
 800701a:	f7fc fd30 	bl	8003a7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800701e:	2103      	movs	r1, #3
 8007020:	4628      	mov	r0, r5
 8007022:	f7fb fc6f 	bl	8002904 <icmp_dest_unreach>
 8007026:	e77b      	b.n	8006f20 <udp_input+0x10>
 8007028:	20000668 	.word	0x20000668
 800702c:	20002e50 	.word	0x20002e50
 8007030:	0800ad1d 	.word	0x0800ad1d
 8007034:	0800ad4c 	.word	0x0800ad4c
 8007038:	08009678 	.word	0x08009678
 800703c:	20000678 	.word	0x20000678

08007040 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007040:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8007042:	b138      	cbz	r0, 8007054 <udp_netif_ip_addr_changed+0x14>
 8007044:	6803      	ldr	r3, [r0, #0]
 8007046:	b12b      	cbz	r3, 8007054 <udp_netif_ip_addr_changed+0x14>
 8007048:	b121      	cbz	r1, 8007054 <udp_netif_ip_addr_changed+0x14>
 800704a:	680b      	ldr	r3, [r1, #0]
 800704c:	b113      	cbz	r3, 8007054 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <udp_netif_ip_addr_changed+0x28>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	b903      	cbnz	r3, 8007056 <udp_netif_ip_addr_changed+0x16>
 8007054:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8007056:	681c      	ldr	r4, [r3, #0]
 8007058:	6802      	ldr	r2, [r0, #0]
 800705a:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800705c:	bf04      	itt	eq
 800705e:	680a      	ldreq	r2, [r1, #0]
 8007060:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	e7f5      	b.n	8007052 <udp_netif_ip_addr_changed+0x12>
 8007066:	bf00      	nop
 8007068:	20002e50 	.word	0x20002e50

0800706c <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800706c:	8943      	ldrh	r3, [r0, #10]
 800706e:	2b0e      	cmp	r3, #14
{
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4604      	mov	r4, r0
 8007074:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8007076:	d914      	bls.n	80070a2 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8007078:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800707a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800707c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800707e:	07d9      	lsls	r1, r3, #31
 8007080:	d50a      	bpl.n	8007098 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8007082:	2b01      	cmp	r3, #1
 8007084:	d111      	bne.n	80070aa <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8007086:	7843      	ldrb	r3, [r0, #1]
 8007088:	b933      	cbnz	r3, 8007098 <ethernet_input+0x2c>
 800708a:	7883      	ldrb	r3, [r0, #2]
 800708c:	2b5e      	cmp	r3, #94	; 0x5e
 800708e:	d103      	bne.n	8007098 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8007090:	7b63      	ldrb	r3, [r4, #13]
 8007092:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8007096:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8007098:	2e08      	cmp	r6, #8
 800709a:	d010      	beq.n	80070be <ethernet_input+0x52>
 800709c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80070a0:	d01e      	beq.n	80070e0 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7fc fcee 	bl	8003a84 <pbuf_free>
  return ERR_OK;
 80070a8:	e018      	b.n	80070dc <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80070aa:	2206      	movs	r2, #6
 80070ac:	4914      	ldr	r1, [pc, #80]	; (8007100 <ethernet_input+0x94>)
 80070ae:	f000 fc1d 	bl	80078ec <memcmp>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d1f0      	bne.n	8007098 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 80070b6:	7b63      	ldrb	r3, [r4, #13]
 80070b8:	f043 0308 	orr.w	r3, r3, #8
 80070bc:	e7eb      	b.n	8007096 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80070be:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80070c2:	071a      	lsls	r2, r3, #28
 80070c4:	d5ed      	bpl.n	80070a2 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80070c6:	f06f 010d 	mvn.w	r1, #13
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7fc fcd4 	bl	8003a78 <pbuf_header>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1e6      	bne.n	80070a2 <ethernet_input+0x36>
        ip4_input(p, netif);
 80070d4:	4629      	mov	r1, r5
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7fb fc4a 	bl	8002970 <ip4_input>
}
 80070dc:	2000      	movs	r0, #0
 80070de:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80070e0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	d5dc      	bpl.n	80070a2 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80070e8:	f06f 010d 	mvn.w	r1, #13
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7fc fcc3 	bl	8003a78 <pbuf_header>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1d5      	bne.n	80070a2 <ethernet_input+0x36>
        etharp_input(p, netif);
 80070f6:	4629      	mov	r1, r5
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7fb f8ab 	bl	8002254 <etharp_input>
      break;
 80070fe:	e7ed      	b.n	80070dc <ethernet_input+0x70>
 8007100:	0800ad60 	.word	0x0800ad60

08007104 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8007104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800710a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800710e:	460d      	mov	r5, r1
 8007110:	4616      	mov	r6, r2
 8007112:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8007114:	f7fa ff36 	bl	8001f84 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8007118:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800711a:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800711c:	4628      	mov	r0, r5
 800711e:	f7fc fcab 	bl	8003a78 <pbuf_header>
 8007122:	b9e0      	cbnz	r0, 800715e <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8007124:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8007126:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	600b      	str	r3, [r1, #0]
 800712e:	88bb      	ldrh	r3, [r7, #4]
 8007130:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8007132:	6833      	ldr	r3, [r6, #0]
 8007134:	f8c1 3006 	str.w	r3, [r1, #6]
 8007138:	88b3      	ldrh	r3, [r6, #4]
 800713a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800713c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007140:	2b06      	cmp	r3, #6
 8007142:	d006      	beq.n	8007152 <ethernet_output+0x4e>
 8007144:	4b08      	ldr	r3, [pc, #32]	; (8007168 <ethernet_output+0x64>)
 8007146:	4909      	ldr	r1, [pc, #36]	; (800716c <ethernet_output+0x68>)
 8007148:	4809      	ldr	r0, [pc, #36]	; (8007170 <ethernet_output+0x6c>)
 800714a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800714e:	f000 fbef 	bl	8007930 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8007152:	69a3      	ldr	r3, [r4, #24]
 8007154:	4629      	mov	r1, r5
 8007156:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8007158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800715c:	4718      	bx	r3
}
 800715e:	f06f 0001 	mvn.w	r0, #1
 8007162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007166:	bf00      	nop
 8007168:	0800ad66 	.word	0x0800ad66
 800716c:	0800ad9b 	.word	0x0800ad9b
 8007170:	08009678 	.word	0x08009678

08007174 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007178:	4a25      	ldr	r2, [pc, #148]	; (8007210 <low_level_output+0x9c>)
 800717a:	9200      	str	r2, [sp, #0]
 800717c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800717e:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007182:	68ab      	ldr	r3, [r5, #8]
{
 8007184:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8007186:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007188:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800718c:	b92c      	cbnz	r4, 800719a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800718e:	4639      	mov	r1, r7
 8007190:	481f      	ldr	r0, [pc, #124]	; (8007210 <low_level_output+0x9c>)
 8007192:	f7f9 fbe9 	bl	8000968 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8007196:	4620      	mov	r0, r4
 8007198:	e004      	b.n	80071a4 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800719a:	682a      	ldr	r2, [r5, #0]
 800719c:	2a00      	cmp	r2, #0
 800719e:	da11      	bge.n	80071c4 <low_level_output+0x50>
        errval = ERR_USE;
 80071a0:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	f241 0214 	movw	r2, #4116	; 0x1014
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	5899      	ldr	r1, [r3, r2]
 80071ae:	0689      	lsls	r1, r1, #26
 80071b0:	d505      	bpl.n	80071be <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80071b2:	2120      	movs	r1, #32
 80071b4:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80071b6:	f241 0204 	movw	r2, #4100	; 0x1004
 80071ba:	2100      	movs	r1, #0
 80071bc:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 80071be:	b003      	add	sp, #12
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 80071c4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80071c8:	4646      	mov	r6, r8
      payloadoffset = 0;
 80071ca:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80071ce:	eb06 0809 	add.w	r8, r6, r9
 80071d2:	45d8      	cmp	r8, fp
 80071d4:	eb03 0006 	add.w	r0, r3, r6
 80071d8:	6861      	ldr	r1, [r4, #4]
 80071da:	d808      	bhi.n	80071ee <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80071dc:	464a      	mov	r2, r9
 80071de:	4451      	add	r1, sl
 80071e0:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80071e2:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80071e4:	f000 fb91 	bl	800790a <memcpy>
  for(q = p; q != NULL; q = q->next)
 80071e8:	6824      	ldr	r4, [r4, #0]
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	e7ce      	b.n	800718c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80071ee:	ebab 0606 	sub.w	r6, fp, r6
 80071f2:	4632      	mov	r2, r6
 80071f4:	4451      	add	r1, sl
 80071f6:	f000 fb88 	bl	800790a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80071fa:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dbce      	blt.n	80071a0 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007202:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007204:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007206:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007208:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800720c:	2600      	movs	r6, #0
 800720e:	e7de      	b.n	80071ce <low_level_output+0x5a>
 8007210:	20004724 	.word	0x20004724

08007214 <HAL_ETH_MspInit>:
{
 8007214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800721a:	2214      	movs	r2, #20
 800721c:	2100      	movs	r1, #0
 800721e:	a807      	add	r0, sp, #28
 8007220:	f000 fb7e 	bl	8007920 <memset>
  if(ethHandle->Instance==ETH)
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	4b32      	ldr	r3, [pc, #200]	; (80072f0 <HAL_ETH_MspInit+0xdc>)
 8007228:	429a      	cmp	r2, r3
 800722a:	d15f      	bne.n	80072ec <HAL_ETH_MspInit+0xd8>
    __HAL_RCC_ETH_CLK_ENABLE();
 800722c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8007230:	2400      	movs	r4, #0
 8007232:	9401      	str	r4, [sp, #4]
 8007234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007236:	482f      	ldr	r0, [pc, #188]	; (80072f4 <HAL_ETH_MspInit+0xe0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8007238:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
 800723e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007240:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8007244:	9201      	str	r2, [sp, #4]
 8007246:	9a01      	ldr	r2, [sp, #4]
 8007248:	9402      	str	r4, [sp, #8]
 800724a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800724c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
 8007252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007254:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8007258:	9202      	str	r2, [sp, #8]
 800725a:	9a02      	ldr	r2, [sp, #8]
 800725c:	9403      	str	r4, [sp, #12]
 800725e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007260:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
 8007266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007268:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800726c:	9203      	str	r2, [sp, #12]
 800726e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007270:	9404      	str	r4, [sp, #16]
 8007272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007274:	f042 0204 	orr.w	r2, r2, #4
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
 800727a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727c:	f002 0204 	and.w	r2, r2, #4
 8007280:	9204      	str	r2, [sp, #16]
 8007282:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007284:	9405      	str	r4, [sp, #20]
 8007286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
 800728e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007290:	f002 0201 	and.w	r2, r2, #1
 8007294:	9205      	str	r2, [sp, #20]
 8007296:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007298:	9406      	str	r4, [sp, #24]
 800729a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800729c:	f042 0202 	orr.w	r2, r2, #2
 80072a0:	631a      	str	r2, [r3, #48]	; 0x30
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072aa:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ac:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072ae:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072b0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80072b4:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072b6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80072b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072bc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072be:	f7f9 fdaf 	bl	8000e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80072c2:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c4:	a907      	add	r1, sp, #28
 80072c6:	480c      	ldr	r0, [pc, #48]	; (80072f8 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80072c8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ca:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072cc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ce:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072d0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072d2:	f7f9 fda5 	bl	8000e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80072d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072da:	a907      	add	r1, sp, #28
 80072dc:	4807      	ldr	r0, [pc, #28]	; (80072fc <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80072de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072e4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072e6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e8:	f7f9 fd9a 	bl	8000e20 <HAL_GPIO_Init>
}
 80072ec:	b00d      	add	sp, #52	; 0x34
 80072ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f0:	40028000 	.word	0x40028000
 80072f4:	40020800 	.word	0x40020800
 80072f8:	40020000 	.word	0x40020000
 80072fc:	40020400 	.word	0x40020400

08007300 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007304:	4c35      	ldr	r4, [pc, #212]	; (80073dc <ethernetif_input+0xdc>)
{
 8007306:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007308:	4620      	mov	r0, r4
 800730a:	f7f9 fba1 	bl	8000a50 <HAL_ETH_GetReceivedFrame>
 800730e:	4605      	mov	r5, r0
 8007310:	2800      	cmp	r0, #0
 8007312:	d160      	bne.n	80073d6 <ethernetif_input+0xd6>
  len = heth.RxFrameInfos.length;
 8007314:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007318:	9300      	str	r3, [sp, #0]
  if (len > 0)
 800731a:	bb19      	cbnz	r1, 8007364 <ethernetif_input+0x64>
  struct pbuf *p = NULL;
 800731c:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800731e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007320:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007322:	2200      	movs	r2, #0
 8007324:	4282      	cmp	r2, r0
 8007326:	d14f      	bne.n	80073c8 <ethernetif_input+0xc8>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8007328:	f241 0114 	movw	r1, #4116	; 0x1014
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	5858      	ldr	r0, [r3, r1]
 8007330:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007332:	bf42      	ittt	mi
 8007334:	2080      	movmi	r0, #128	; 0x80
 8007336:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8007338:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 8007342:	bf48      	it	mi
 8007344:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007346:	2f00      	cmp	r7, #0
 8007348:	d045      	beq.n	80073d6 <ethernetif_input+0xd6>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	9901      	ldr	r1, [sp, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	4638      	mov	r0, r7
 8007352:	4798      	blx	r3
    
  if (err != ERR_OK)
 8007354:	2800      	cmp	r0, #0
 8007356:	d03e      	beq.n	80073d6 <ethernetif_input+0xd6>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007358:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 800735a:	b003      	add	sp, #12
 800735c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8007360:	f7fc bb90 	b.w	8003a84 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007364:	2203      	movs	r2, #3
 8007366:	2004      	movs	r0, #4
 8007368:	f7fc fbee 	bl	8003b48 <pbuf_alloc>
  if (p != NULL)
 800736c:	4607      	mov	r7, r0
 800736e:	2800      	cmp	r0, #0
 8007370:	d0d4      	beq.n	800731c <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007372:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8007376:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007378:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800737c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8007380:	462e      	mov	r6, r5
      payloadoffset = 0;
 8007382:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007386:	18b5      	adds	r5, r6, r2
 8007388:	9b00      	ldr	r3, [sp, #0]
 800738a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800738e:	455d      	cmp	r5, fp
 8007390:	eb03 0106 	add.w	r1, r3, r6
 8007394:	d808      	bhi.n	80073a8 <ethernetif_input+0xa8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007396:	4448      	add	r0, r9
 8007398:	f000 fab7 	bl	800790a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800739c:	f8d8 8000 	ldr.w	r8, [r8]
 80073a0:	f1b8 0f00 	cmp.w	r8, #0
 80073a4:	d1ea      	bne.n	800737c <ethernetif_input+0x7c>
 80073a6:	e7ba      	b.n	800731e <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80073a8:	ebab 0606 	sub.w	r6, fp, r6
 80073ac:	4632      	mov	r2, r6
 80073ae:	4448      	add	r0, r9
 80073b0:	f000 faab 	bl	800790a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80073b4:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80073b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80073bc:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80073be:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80073c0:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 80073c4:	2600      	movs	r6, #0
 80073c6:	e7de      	b.n	8007386 <ethernetif_input+0x86>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80073c8:	6819      	ldr	r1, [r3, #0]
 80073ca:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80073ce:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80073d0:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80073d2:	3201      	adds	r2, #1
 80073d4:	e7a6      	b.n	8007324 <ethernetif_input+0x24>
}
 80073d6:	b003      	add	sp, #12
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	20004724 	.word	0x20004724

080073e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80073e0:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80073e2:	4604      	mov	r4, r0
{
 80073e4:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80073e6:	b930      	cbnz	r0, 80073f6 <ethernetif_init+0x16>
 80073e8:	4b3d      	ldr	r3, [pc, #244]	; (80074e0 <ethernetif_init+0x100>)
 80073ea:	493e      	ldr	r1, [pc, #248]	; (80074e4 <ethernetif_init+0x104>)
 80073ec:	483e      	ldr	r0, [pc, #248]	; (80074e8 <ethernetif_init+0x108>)
 80073ee:	f240 2207 	movw	r2, #519	; 0x207
 80073f2:	f000 fa9d 	bl	8007930 <iprintf>
  heth.Instance = ETH;
 80073f6:	4d3d      	ldr	r5, [pc, #244]	; (80074ec <ethernetif_init+0x10c>)
 80073f8:	4a3d      	ldr	r2, [pc, #244]	; (80074f0 <ethernetif_init+0x110>)
 80073fa:	602a      	str	r2, [r5, #0]
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80073fc:	2373      	movs	r3, #115	; 0x73
 80073fe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8007402:	2374      	movs	r3, #116	; 0x74
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007404:	2201      	movs	r2, #1
  netif->name[1] = IFNAME1;
 8007406:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800740a:	4b3a      	ldr	r3, [pc, #232]	; (80074f4 <ethernetif_init+0x114>)
 800740c:	6163      	str	r3, [r4, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800740e:	606a      	str	r2, [r5, #4]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007410:	4b39      	ldr	r3, [pc, #228]	; (80074f8 <ethernetif_init+0x118>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007412:	822a      	strh	r2, [r5, #16]
  MACAddr[1] = 0x80;
 8007414:	2280      	movs	r2, #128	; 0x80
  netif->linkoutput = low_level_output;
 8007416:	61a3      	str	r3, [r4, #24]
  MACAddr[1] = 0x80;
 8007418:	f88d 2009 	strb.w	r2, [sp, #9]
  uint32_t regvalue = 0;
 800741c:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800741e:	22e1      	movs	r2, #225	; 0xe1
  uint32_t regvalue = 0;
 8007420:	9301      	str	r3, [sp, #4]
  MACAddr[0] = 0x00;
 8007422:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[2] = 0xE1;
 8007426:	f88d 200a 	strb.w	r2, [sp, #10]
  MACAddr[3] = 0x00;
 800742a:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 800742e:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0x00;
 8007432:	f88d 300d 	strb.w	r3, [sp, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007436:	aa02      	add	r2, sp, #8
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007438:	61ab      	str	r3, [r5, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800743a:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800743c:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800743e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 8007442:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007444:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007446:	f7f9 fbb3 	bl	8000bb0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800744a:	b928      	cbnz	r0, 8007458 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800744c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8007450:	f043 0304 	orr.w	r3, r3, #4
 8007454:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007458:	2304      	movs	r3, #4
 800745a:	4a28      	ldr	r2, [pc, #160]	; (80074fc <ethernetif_init+0x11c>)
 800745c:	4928      	ldr	r1, [pc, #160]	; (8007500 <ethernetif_init+0x120>)
 800745e:	4823      	ldr	r0, [pc, #140]	; (80074ec <ethernetif_init+0x10c>)
 8007460:	f7f9 fa08 	bl	8000874 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007464:	4927      	ldr	r1, [pc, #156]	; (8007504 <ethernetif_init+0x124>)
 8007466:	4a28      	ldr	r2, [pc, #160]	; (8007508 <ethernetif_init+0x128>)
 8007468:	4820      	ldr	r0, [pc, #128]	; (80074ec <ethernetif_init+0x10c>)
 800746a:	2304      	movs	r3, #4
 800746c:	f7f9 fa3f 	bl	80008ee <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007470:	2306      	movs	r3, #6
 8007472:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007476:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 8007478:	481c      	ldr	r0, [pc, #112]	; (80074ec <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800747a:	781a      	ldrb	r2, [r3, #0]
 800747c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007480:	785a      	ldrb	r2, [r3, #1]
 8007482:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007486:	789a      	ldrb	r2, [r3, #2]
 8007488:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800748c:	78da      	ldrb	r2, [r3, #3]
 800748e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007492:	791a      	ldrb	r2, [r3, #4]
 8007494:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007498:	795b      	ldrb	r3, [r3, #5]
 800749a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800749e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80074a2:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80074a4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80074a8:	f043 030a 	orr.w	r3, r3, #10
 80074ac:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 80074b0:	f7f9 fc7a 	bl	8000da8 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80074b4:	aa01      	add	r2, sp, #4
 80074b6:	211d      	movs	r1, #29
 80074b8:	480c      	ldr	r0, [pc, #48]	; (80074ec <ethernetif_init+0x10c>)
 80074ba:	f7f9 fb08 	bl	8000ace <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80074be:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80074c0:	480a      	ldr	r0, [pc, #40]	; (80074ec <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 80074c2:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80074c6:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 80074c8:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80074ca:	f7f9 fb3a 	bl	8000b42 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80074ce:	aa01      	add	r2, sp, #4
 80074d0:	211d      	movs	r1, #29
 80074d2:	4806      	ldr	r0, [pc, #24]	; (80074ec <ethernetif_init+0x10c>)
 80074d4:	f7f9 fafb 	bl	8000ace <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80074d8:	2000      	movs	r0, #0
 80074da:	b005      	add	sp, #20
 80074dc:	bd30      	pop	{r4, r5, pc}
 80074de:	bf00      	nop
 80074e0:	0800add2 	.word	0x0800add2
 80074e4:	08009861 	.word	0x08009861
 80074e8:	08009678 	.word	0x08009678
 80074ec:	20004724 	.word	0x20004724
 80074f0:	40028000 	.word	0x40028000
 80074f4:	08002619 	.word	0x08002619
 80074f8:	08007175 	.word	0x08007175
 80074fc:	2000476c 	.word	0x2000476c
 8007500:	20002e54 	.word	0x20002e54
 8007504:	200046a4 	.word	0x200046a4
 8007508:	20002ed4 	.word	0x20002ed4

0800750c <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800750c:	f7f9 b89a 	b.w	8000644 <HAL_GetTick>

08007510 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
	  IP_ADDRESS[3] = 123;
	  NETMASK_ADDRESS[0] = 255;
	  NETMASK_ADDRESS[1] = 255;
	  NETMASK_ADDRESS[2] = 0;
	  NETMASK_ADDRESS[3] = 0;
	  GATEWAY_ADDRESS[0] = 169;
 8007512:	4d2d      	ldr	r5, [pc, #180]	; (80075c8 <MX_LWIP_Init+0xb8>)
	  IP_ADDRESS[0] = 169;
 8007514:	4f2d      	ldr	r7, [pc, #180]	; (80075cc <MX_LWIP_Init+0xbc>)
	  NETMASK_ADDRESS[0] = 255;
 8007516:	4e2e      	ldr	r6, [pc, #184]	; (80075d0 <MX_LWIP_Init+0xc0>)
	  IP_ADDRESS[2] = 215;
 8007518:	23d7      	movs	r3, #215	; 0xd7
	  IP_ADDRESS[3] = 123;
 800751a:	207b      	movs	r0, #123	; 0x7b
{
 800751c:	b085      	sub	sp, #20
	  IP_ADDRESS[0] = 169;
 800751e:	21a9      	movs	r1, #169	; 0xa9
	  IP_ADDRESS[1] = 254;
 8007520:	22fe      	movs	r2, #254	; 0xfe
	  NETMASK_ADDRESS[2] = 0;
 8007522:	2400      	movs	r4, #0
	  GATEWAY_ADDRESS[1] = 254;
	  GATEWAY_ADDRESS[2] = 215;
 8007524:	70ab      	strb	r3, [r5, #2]
	  IP_ADDRESS[2] = 215;
 8007526:	70bb      	strb	r3, [r7, #2]
	  IP_ADDRESS[3] = 123;
 8007528:	70f8      	strb	r0, [r7, #3]
	  GATEWAY_ADDRESS[3] = 34;
 800752a:	2322      	movs	r3, #34	; 0x22
	  NETMASK_ADDRESS[0] = 255;
 800752c:	20ff      	movs	r0, #255	; 0xff
	  GATEWAY_ADDRESS[0] = 169;
 800752e:	7029      	strb	r1, [r5, #0]
	  GATEWAY_ADDRESS[1] = 254;
 8007530:	706a      	strb	r2, [r5, #1]
	  GATEWAY_ADDRESS[3] = 34;
 8007532:	70eb      	strb	r3, [r5, #3]
	  IP_ADDRESS[0] = 169;
 8007534:	7039      	strb	r1, [r7, #0]
	  IP_ADDRESS[1] = 254;
 8007536:	707a      	strb	r2, [r7, #1]
	  NETMASK_ADDRESS[0] = 255;
 8007538:	7030      	strb	r0, [r6, #0]
	  NETMASK_ADDRESS[1] = 255;
 800753a:	7070      	strb	r0, [r6, #1]
	  NETMASK_ADDRESS[2] = 0;
 800753c:	70b4      	strb	r4, [r6, #2]
	  NETMASK_ADDRESS[3] = 0;
 800753e:	70f4      	strb	r4, [r6, #3]
  lwip_init();
 8007540:	f7fa fd5a 	bl	8001ff8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007544:	787b      	ldrb	r3, [r7, #1]
 8007546:	783a      	ldrb	r2, [r7, #0]
 8007548:	4922      	ldr	r1, [pc, #136]	; (80075d4 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800754a:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	4313      	orrs	r3, r2
 8007556:	78ba      	ldrb	r2, [r7, #2]
 8007558:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800755c:	ba1b      	rev	r3, r3
 800755e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007560:	7873      	ldrb	r3, [r6, #1]
 8007562:	7832      	ldrb	r2, [r6, #0]
 8007564:	041b      	lsls	r3, r3, #16
 8007566:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800756a:	78f2      	ldrb	r2, [r6, #3]
 800756c:	4313      	orrs	r3, r2
 800756e:	78b2      	ldrb	r2, [r6, #2]
 8007570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007574:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <MX_LWIP_Init+0xc8>)
 8007576:	ba1b      	rev	r3, r3
 8007578:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800757a:	782b      	ldrb	r3, [r5, #0]
 800757c:	0400      	lsls	r0, r0, #16
 800757e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8007582:	78eb      	ldrb	r3, [r5, #3]
 8007584:	4318      	orrs	r0, r3
 8007586:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007588:	4d14      	ldr	r5, [pc, #80]	; (80075dc <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800758a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800758e:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <MX_LWIP_Init+0xd0>)
 8007590:	ba00      	rev	r0, r0
 8007592:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007594:	4813      	ldr	r0, [pc, #76]	; (80075e4 <MX_LWIP_Init+0xd4>)
 8007596:	9002      	str	r0, [sp, #8]
 8007598:	4813      	ldr	r0, [pc, #76]	; (80075e8 <MX_LWIP_Init+0xd8>)
 800759a:	9001      	str	r0, [sp, #4]
 800759c:	9400      	str	r4, [sp, #0]
 800759e:	4628      	mov	r0, r5
 80075a0:	f7fc f984 	bl	80038ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80075a4:	4628      	mov	r0, r5
 80075a6:	f7fc f9bf 	bl	8003928 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80075aa:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80075ae:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80075b0:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80075b2:	d504      	bpl.n	80075be <MX_LWIP_Init+0xae>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80075b4:	b005      	add	sp, #20
 80075b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 80075ba:	f7fc b9bb 	b.w	8003934 <netif_set_up>
}
 80075be:	b005      	add	sp, #20
 80075c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 80075c4:	f7fc b9c5 	b.w	8003952 <netif_set_down>
 80075c8:	20005f3c 	.word	0x20005f3c
 80075cc:	20005f78 	.word	0x20005f78
 80075d0:	20005f74 	.word	0x20005f74
 80075d4:	20005f70 	.word	0x20005f70
 80075d8:	20005f7c 	.word	0x20005f7c
 80075dc:	20005f40 	.word	0x20005f40
 80075e0:	20005f80 	.word	0x20005f80
 80075e4:	0800706d 	.word	0x0800706d
 80075e8:	080073e1 	.word	0x080073e1

080075ec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80075ec:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80075ee:	4803      	ldr	r0, [pc, #12]	; (80075fc <MX_LWIP_Process+0x10>)
 80075f0:	f7ff fe86 	bl	8007300 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80075f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 80075f8:	f7ff bc62 	b.w	8006ec0 <sys_check_timeouts>
 80075fc:	20005f40 	.word	0x20005f40

08007600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007600:	b530      	push	{r4, r5, lr}
 8007602:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007604:	2230      	movs	r2, #48	; 0x30
 8007606:	2100      	movs	r1, #0
 8007608:	a808      	add	r0, sp, #32
 800760a:	f000 f989 	bl	8007920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800760e:	2100      	movs	r1, #0
 8007610:	2214      	movs	r2, #20
 8007612:	a803      	add	r0, sp, #12
 8007614:	f000 f984 	bl	8007920 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007618:	2400      	movs	r4, #0
 800761a:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <SystemClock_Config+0x90>)
 800761c:	9401      	str	r4, [sp, #4]
 800761e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007620:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007630:	4b18      	ldr	r3, [pc, #96]	; (8007694 <SystemClock_Config+0x94>)
 8007632:	9402      	str	r4, [sp, #8]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007646:	2301      	movs	r3, #1
 8007648:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800764a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007650:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007654:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007656:	2304      	movs	r3, #4
 8007658:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800765a:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800765c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 800765e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007660:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007662:	2307      	movs	r3, #7
 8007664:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007666:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007668:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800766a:	f7f9 fcc5 	bl	8000ff8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800766e:	230f      	movs	r3, #15
 8007670:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007676:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007678:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800767a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800767e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007680:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007682:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007684:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007686:	f7f9 fe8b 	bl	80013a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800768a:	b015      	add	sp, #84	; 0x54
 800768c:	bd30      	pop	{r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	40023800 	.word	0x40023800
 8007694:	40007000 	.word	0x40007000

08007698 <main>:
{
 8007698:	b500      	push	{lr}
 800769a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800769c:	f7f8 ffac 	bl	80005f8 <HAL_Init>
  SystemClock_Config();
 80076a0:	f7ff ffae 	bl	8007600 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076a4:	2214      	movs	r2, #20
 80076a6:	2100      	movs	r1, #0
 80076a8:	eb0d 0002 	add.w	r0, sp, r2
 80076ac:	f000 f938 	bl	8007920 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076b0:	2400      	movs	r4, #0
 80076b2:	4b28      	ldr	r3, [pc, #160]	; (8007754 <main+0xbc>)
 80076b4:	9400      	str	r4, [sp, #0]
 80076b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80076b8:	4827      	ldr	r0, [pc, #156]	; (8007758 <main+0xc0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076ba:	f042 0204 	orr.w	r2, r2, #4
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
 80076c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c2:	f002 0204 	and.w	r2, r2, #4
 80076c6:	9200      	str	r2, [sp, #0]
 80076c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076ca:	9401      	str	r4, [sp, #4]
 80076cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
 80076d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80076da:	9201      	str	r2, [sp, #4]
 80076dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076de:	9402      	str	r4, [sp, #8]
 80076e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	631a      	str	r2, [r3, #48]	; 0x30
 80076e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ea:	f002 0201 	and.w	r2, r2, #1
 80076ee:	9202      	str	r2, [sp, #8]
 80076f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076f2:	9403      	str	r4, [sp, #12]
 80076f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f6:	f042 0202 	orr.w	r2, r2, #2
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
 80076fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fe:	f002 0202 	and.w	r2, r2, #2
 8007702:	9203      	str	r2, [sp, #12]
 8007704:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007706:	9404      	str	r4, [sp, #16]
 8007708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770a:	f042 0208 	orr.w	r2, r2, #8
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8007716:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007718:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800771a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800771e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8007720:	f7f9 fc5e 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007724:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007728:	a905      	add	r1, sp, #20
 800772a:	480b      	ldr	r0, [pc, #44]	; (8007758 <main+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800772c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800772e:	2301      	movs	r3, #1
 8007730:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007732:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007734:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007736:	f7f9 fb73 	bl	8000e20 <HAL_GPIO_Init>
 MX_LWIP_Init();
 800773a:	f7ff fee9 	bl	8007510 <MX_LWIP_Init>
 httpd_init();
 800773e:	f7fa fbe1 	bl	8001f04 <httpd_init>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8007742:	4c05      	ldr	r4, [pc, #20]	; (8007758 <main+0xc0>)
 8007744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007748:	4620      	mov	r0, r4
 800774a:	f7f9 fc4e 	bl	8000fea <HAL_GPIO_TogglePin>
	 MX_LWIP_Process();
 800774e:	f7ff ff4d 	bl	80075ec <MX_LWIP_Process>
 8007752:	e7f7      	b.n	8007744 <main+0xac>
 8007754:	40023800 	.word	0x40023800
 8007758:	40020c00 	.word	0x40020c00

0800775c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800775c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <HAL_MspInit+0x3c>)
 8007760:	2100      	movs	r1, #0
 8007762:	9100      	str	r1, [sp, #0]
 8007764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800776a:	645a      	str	r2, [r3, #68]	; 0x44
 800776c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800776e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007772:	9200      	str	r2, [sp, #0]
 8007774:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007776:	9101      	str	r1, [sp, #4]
 8007778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800777e:	641a      	str	r2, [r3, #64]	; 0x40
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007786:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007788:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800778a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800778c:	f7f8 ff74 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007790:	b003      	add	sp, #12
 8007792:	f85d fb04 	ldr.w	pc, [sp], #4
 8007796:	bf00      	nop
 8007798:	40023800 	.word	0x40023800

0800779c <NMI_Handler>:
 800779c:	4770      	bx	lr

0800779e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800779e:	e7fe      	b.n	800779e <HardFault_Handler>

080077a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077a0:	e7fe      	b.n	80077a0 <MemManage_Handler>

080077a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077a2:	e7fe      	b.n	80077a2 <BusFault_Handler>

080077a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077a4:	e7fe      	b.n	80077a4 <UsageFault_Handler>

080077a6 <SVC_Handler>:
 80077a6:	4770      	bx	lr

080077a8 <DebugMon_Handler>:
 80077a8:	4770      	bx	lr

080077aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077aa:	4770      	bx	lr

080077ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077ac:	f7f8 bf3e 	b.w	800062c <HAL_IncTick>

080077b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	460e      	mov	r6, r1
 80077b4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077b6:	460c      	mov	r4, r1
 80077b8:	1ba3      	subs	r3, r4, r6
 80077ba:	429d      	cmp	r5, r3
 80077bc:	dc01      	bgt.n	80077c2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80077be:	4628      	mov	r0, r5
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80077c2:	f3af 8000 	nop.w
 80077c6:	f804 0b01 	strb.w	r0, [r4], #1
 80077ca:	e7f5      	b.n	80077b8 <_read+0x8>

080077cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	460e      	mov	r6, r1
 80077d0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077d2:	460c      	mov	r4, r1
 80077d4:	1ba3      	subs	r3, r4, r6
 80077d6:	429d      	cmp	r5, r3
 80077d8:	dc01      	bgt.n	80077de <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80077da:	4628      	mov	r0, r5
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80077de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80077e2:	f3af 8000 	nop.w
 80077e6:	e7f5      	b.n	80077d4 <_write+0x8>

080077e8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80077e8:	4b09      	ldr	r3, [pc, #36]	; (8007810 <_sbrk+0x28>)
 80077ea:	6819      	ldr	r1, [r3, #0]
{
 80077ec:	4602      	mov	r2, r0
	if (heap_end == 0)
 80077ee:	b909      	cbnz	r1, 80077f4 <_sbrk+0xc>
		heap_end = &end;
 80077f0:	4908      	ldr	r1, [pc, #32]	; (8007814 <_sbrk+0x2c>)
 80077f2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80077f4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80077f6:	4669      	mov	r1, sp
 80077f8:	4402      	add	r2, r0
 80077fa:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80077fc:	bf89      	itett	hi
 80077fe:	4b06      	ldrhi	r3, [pc, #24]	; (8007818 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007800:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 8007802:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 8007804:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 8007808:	bf88      	it	hi
 800780a:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	2000064c 	.word	0x2000064c
 8007814:	20005f88 	.word	0x20005f88
 8007818:	20005f84 	.word	0x20005f84

0800781c <_close>:

int _close(int file)
{
	return -1;
}
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	4770      	bx	lr

08007822 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007826:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007828:	2000      	movs	r0, #0
 800782a:	4770      	bx	lr

0800782c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800782c:	2001      	movs	r0, #1
 800782e:	4770      	bx	lr

08007830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007830:	2000      	movs	r0, #0
 8007832:	4770      	bx	lr

08007834 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <SystemInit+0x18>)
 8007836:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800783a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800783e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007846:	609a      	str	r2, [r3, #8]
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	e000ed00 	.word	0xe000ed00

08007850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007856:	e003      	b.n	8007860 <LoopCopyDataInit>

08007858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007858:	4b0c      	ldr	r3, [pc, #48]	; (800788c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800785a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800785c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800785e:	3104      	adds	r1, #4

08007860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007860:	480b      	ldr	r0, [pc, #44]	; (8007890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007868:	d3f6      	bcc.n	8007858 <CopyDataInit>
  ldr  r2, =_sbss
 800786a:	4a0b      	ldr	r2, [pc, #44]	; (8007898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800786c:	e002      	b.n	8007874 <LoopFillZerobss>

0800786e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800786e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007870:	f842 3b04 	str.w	r3, [r2], #4

08007874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007874:	4b09      	ldr	r3, [pc, #36]	; (800789c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007878:	d3f9      	bcc.n	800786e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800787a:	f7ff ffdb 	bl	8007834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800787e:	f000 f811 	bl	80078a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007882:	f7ff ff09 	bl	8007698 <main>
  bx  lr    
 8007886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007888:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800788c:	0800aea0 	.word	0x0800aea0
  ldr  r0, =_sdata
 8007890:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007894:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8007898:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800789c:	20005f88 	.word	0x20005f88

080078a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078a0:	e7fe      	b.n	80078a0 <ADC_IRQHandler>
	...

080078a4 <__libc_init_array>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4e0d      	ldr	r6, [pc, #52]	; (80078dc <__libc_init_array+0x38>)
 80078a8:	4c0d      	ldr	r4, [pc, #52]	; (80078e0 <__libc_init_array+0x3c>)
 80078aa:	1ba4      	subs	r4, r4, r6
 80078ac:	10a4      	asrs	r4, r4, #2
 80078ae:	2500      	movs	r5, #0
 80078b0:	42a5      	cmp	r5, r4
 80078b2:	d109      	bne.n	80078c8 <__libc_init_array+0x24>
 80078b4:	4e0b      	ldr	r6, [pc, #44]	; (80078e4 <__libc_init_array+0x40>)
 80078b6:	4c0c      	ldr	r4, [pc, #48]	; (80078e8 <__libc_init_array+0x44>)
 80078b8:	f000 ff52 	bl	8008760 <_init>
 80078bc:	1ba4      	subs	r4, r4, r6
 80078be:	10a4      	asrs	r4, r4, #2
 80078c0:	2500      	movs	r5, #0
 80078c2:	42a5      	cmp	r5, r4
 80078c4:	d105      	bne.n	80078d2 <__libc_init_array+0x2e>
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078cc:	4798      	blx	r3
 80078ce:	3501      	adds	r5, #1
 80078d0:	e7ee      	b.n	80078b0 <__libc_init_array+0xc>
 80078d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d6:	4798      	blx	r3
 80078d8:	3501      	adds	r5, #1
 80078da:	e7f2      	b.n	80078c2 <__libc_init_array+0x1e>
 80078dc:	0800ae98 	.word	0x0800ae98
 80078e0:	0800ae98 	.word	0x0800ae98
 80078e4:	0800ae98 	.word	0x0800ae98
 80078e8:	0800ae9c 	.word	0x0800ae9c

080078ec <memcmp>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	3901      	subs	r1, #1
 80078f0:	4402      	add	r2, r0
 80078f2:	4290      	cmp	r0, r2
 80078f4:	d101      	bne.n	80078fa <memcmp+0xe>
 80078f6:	2000      	movs	r0, #0
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80078fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007902:	42a3      	cmp	r3, r4
 8007904:	d0f5      	beq.n	80078f2 <memcmp+0x6>
 8007906:	1b18      	subs	r0, r3, r4
 8007908:	bd10      	pop	{r4, pc}

0800790a <memcpy>:
 800790a:	b510      	push	{r4, lr}
 800790c:	1e43      	subs	r3, r0, #1
 800790e:	440a      	add	r2, r1
 8007910:	4291      	cmp	r1, r2
 8007912:	d100      	bne.n	8007916 <memcpy+0xc>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800791a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800791e:	e7f7      	b.n	8007910 <memcpy+0x6>

08007920 <memset>:
 8007920:	4402      	add	r2, r0
 8007922:	4603      	mov	r3, r0
 8007924:	4293      	cmp	r3, r2
 8007926:	d100      	bne.n	800792a <memset+0xa>
 8007928:	4770      	bx	lr
 800792a:	f803 1b01 	strb.w	r1, [r3], #1
 800792e:	e7f9      	b.n	8007924 <memset+0x4>

08007930 <iprintf>:
 8007930:	b40f      	push	{r0, r1, r2, r3}
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <iprintf+0x2c>)
 8007934:	b513      	push	{r0, r1, r4, lr}
 8007936:	681c      	ldr	r4, [r3, #0]
 8007938:	b124      	cbz	r4, 8007944 <iprintf+0x14>
 800793a:	69a3      	ldr	r3, [r4, #24]
 800793c:	b913      	cbnz	r3, 8007944 <iprintf+0x14>
 800793e:	4620      	mov	r0, r4
 8007940:	f000 f86e 	bl	8007a20 <__sinit>
 8007944:	ab05      	add	r3, sp, #20
 8007946:	9a04      	ldr	r2, [sp, #16]
 8007948:	68a1      	ldr	r1, [r4, #8]
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f9c7 	bl	8007ce0 <_vfiprintf_r>
 8007952:	b002      	add	sp, #8
 8007954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007958:	b004      	add	sp, #16
 800795a:	4770      	bx	lr
 800795c:	20000014 	.word	0x20000014

08007960 <strchr>:
 8007960:	b2c9      	uxtb	r1, r1
 8007962:	4603      	mov	r3, r0
 8007964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007968:	b11a      	cbz	r2, 8007972 <strchr+0x12>
 800796a:	4291      	cmp	r1, r2
 800796c:	d1f9      	bne.n	8007962 <strchr+0x2>
 800796e:	4618      	mov	r0, r3
 8007970:	4770      	bx	lr
 8007972:	2900      	cmp	r1, #0
 8007974:	bf0c      	ite	eq
 8007976:	4618      	moveq	r0, r3
 8007978:	2000      	movne	r0, #0
 800797a:	4770      	bx	lr

0800797c <strncmp>:
 800797c:	b510      	push	{r4, lr}
 800797e:	b16a      	cbz	r2, 800799c <strncmp+0x20>
 8007980:	3901      	subs	r1, #1
 8007982:	1884      	adds	r4, r0, r2
 8007984:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007988:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800798c:	4293      	cmp	r3, r2
 800798e:	d103      	bne.n	8007998 <strncmp+0x1c>
 8007990:	42a0      	cmp	r0, r4
 8007992:	d001      	beq.n	8007998 <strncmp+0x1c>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f5      	bne.n	8007984 <strncmp+0x8>
 8007998:	1a98      	subs	r0, r3, r2
 800799a:	bd10      	pop	{r4, pc}
 800799c:	4610      	mov	r0, r2
 800799e:	bd10      	pop	{r4, pc}

080079a0 <_cleanup_r>:
 80079a0:	4901      	ldr	r1, [pc, #4]	; (80079a8 <_cleanup_r+0x8>)
 80079a2:	f000 b8a9 	b.w	8007af8 <_fwalk_reent>
 80079a6:	bf00      	nop
 80079a8:	080085b5 	.word	0x080085b5

080079ac <std.isra.0>:
 80079ac:	2300      	movs	r3, #0
 80079ae:	b510      	push	{r4, lr}
 80079b0:	4604      	mov	r4, r0
 80079b2:	6003      	str	r3, [r0, #0]
 80079b4:	6043      	str	r3, [r0, #4]
 80079b6:	6083      	str	r3, [r0, #8]
 80079b8:	8181      	strh	r1, [r0, #12]
 80079ba:	6643      	str	r3, [r0, #100]	; 0x64
 80079bc:	81c2      	strh	r2, [r0, #14]
 80079be:	6103      	str	r3, [r0, #16]
 80079c0:	6143      	str	r3, [r0, #20]
 80079c2:	6183      	str	r3, [r0, #24]
 80079c4:	4619      	mov	r1, r3
 80079c6:	2208      	movs	r2, #8
 80079c8:	305c      	adds	r0, #92	; 0x5c
 80079ca:	f7ff ffa9 	bl	8007920 <memset>
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <std.isra.0+0x38>)
 80079d0:	6263      	str	r3, [r4, #36]	; 0x24
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <std.isra.0+0x3c>)
 80079d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <std.isra.0+0x40>)
 80079d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <std.isra.0+0x44>)
 80079dc:	6224      	str	r4, [r4, #32]
 80079de:	6323      	str	r3, [r4, #48]	; 0x30
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	08008259 	.word	0x08008259
 80079e8:	0800827b 	.word	0x0800827b
 80079ec:	080082b3 	.word	0x080082b3
 80079f0:	080082d7 	.word	0x080082d7

080079f4 <__sfmoreglue>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	1e4a      	subs	r2, r1, #1
 80079f8:	2568      	movs	r5, #104	; 0x68
 80079fa:	4355      	muls	r5, r2
 80079fc:	460e      	mov	r6, r1
 80079fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a02:	f000 f8e5 	bl	8007bd0 <_malloc_r>
 8007a06:	4604      	mov	r4, r0
 8007a08:	b140      	cbz	r0, 8007a1c <__sfmoreglue+0x28>
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	e880 0042 	stmia.w	r0, {r1, r6}
 8007a10:	300c      	adds	r0, #12
 8007a12:	60a0      	str	r0, [r4, #8]
 8007a14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a18:	f7ff ff82 	bl	8007920 <memset>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}

08007a20 <__sinit>:
 8007a20:	6983      	ldr	r3, [r0, #24]
 8007a22:	b510      	push	{r4, lr}
 8007a24:	4604      	mov	r4, r0
 8007a26:	bb33      	cbnz	r3, 8007a76 <__sinit+0x56>
 8007a28:	6483      	str	r3, [r0, #72]	; 0x48
 8007a2a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007a2c:	6503      	str	r3, [r0, #80]	; 0x50
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <__sinit+0x58>)
 8007a30:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <__sinit+0x5c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6282      	str	r2, [r0, #40]	; 0x28
 8007a36:	4298      	cmp	r0, r3
 8007a38:	bf04      	itt	eq
 8007a3a:	2301      	moveq	r3, #1
 8007a3c:	6183      	streq	r3, [r0, #24]
 8007a3e:	f000 f81f 	bl	8007a80 <__sfp>
 8007a42:	6060      	str	r0, [r4, #4]
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 f81b 	bl	8007a80 <__sfp>
 8007a4a:	60a0      	str	r0, [r4, #8]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f817 	bl	8007a80 <__sfp>
 8007a52:	2200      	movs	r2, #0
 8007a54:	60e0      	str	r0, [r4, #12]
 8007a56:	2104      	movs	r1, #4
 8007a58:	6860      	ldr	r0, [r4, #4]
 8007a5a:	f7ff ffa7 	bl	80079ac <std.isra.0>
 8007a5e:	2201      	movs	r2, #1
 8007a60:	2109      	movs	r1, #9
 8007a62:	68a0      	ldr	r0, [r4, #8]
 8007a64:	f7ff ffa2 	bl	80079ac <std.isra.0>
 8007a68:	2202      	movs	r2, #2
 8007a6a:	2112      	movs	r1, #18
 8007a6c:	68e0      	ldr	r0, [r4, #12]
 8007a6e:	f7ff ff9d 	bl	80079ac <std.isra.0>
 8007a72:	2301      	movs	r3, #1
 8007a74:	61a3      	str	r3, [r4, #24]
 8007a76:	bd10      	pop	{r4, pc}
 8007a78:	0800ae58 	.word	0x0800ae58
 8007a7c:	080079a1 	.word	0x080079a1

08007a80 <__sfp>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	4b1c      	ldr	r3, [pc, #112]	; (8007af4 <__sfp+0x74>)
 8007a84:	681e      	ldr	r6, [r3, #0]
 8007a86:	69b3      	ldr	r3, [r6, #24]
 8007a88:	4607      	mov	r7, r0
 8007a8a:	b913      	cbnz	r3, 8007a92 <__sfp+0x12>
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff ffc7 	bl	8007a20 <__sinit>
 8007a92:	3648      	adds	r6, #72	; 0x48
 8007a94:	68b4      	ldr	r4, [r6, #8]
 8007a96:	6873      	ldr	r3, [r6, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	d503      	bpl.n	8007aa4 <__sfp+0x24>
 8007a9c:	6833      	ldr	r3, [r6, #0]
 8007a9e:	b133      	cbz	r3, 8007aae <__sfp+0x2e>
 8007aa0:	6836      	ldr	r6, [r6, #0]
 8007aa2:	e7f7      	b.n	8007a94 <__sfp+0x14>
 8007aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007aa8:	b16d      	cbz	r5, 8007ac6 <__sfp+0x46>
 8007aaa:	3468      	adds	r4, #104	; 0x68
 8007aac:	e7f4      	b.n	8007a98 <__sfp+0x18>
 8007aae:	2104      	movs	r1, #4
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ff9f 	bl	80079f4 <__sfmoreglue>
 8007ab6:	6030      	str	r0, [r6, #0]
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d1f1      	bne.n	8007aa0 <__sfp+0x20>
 8007abc:	230c      	movs	r3, #12
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aca:	81e3      	strh	r3, [r4, #14]
 8007acc:	2301      	movs	r3, #1
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	6665      	str	r5, [r4, #100]	; 0x64
 8007ad2:	6025      	str	r5, [r4, #0]
 8007ad4:	60a5      	str	r5, [r4, #8]
 8007ad6:	6065      	str	r5, [r4, #4]
 8007ad8:	6125      	str	r5, [r4, #16]
 8007ada:	6165      	str	r5, [r4, #20]
 8007adc:	61a5      	str	r5, [r4, #24]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ae6:	f7ff ff1b 	bl	8007920 <memset>
 8007aea:	6365      	str	r5, [r4, #52]	; 0x34
 8007aec:	63a5      	str	r5, [r4, #56]	; 0x38
 8007aee:	64a5      	str	r5, [r4, #72]	; 0x48
 8007af0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007af2:	e7e6      	b.n	8007ac2 <__sfp+0x42>
 8007af4:	0800ae58 	.word	0x0800ae58

08007af8 <_fwalk_reent>:
 8007af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b04:	2600      	movs	r6, #0
 8007b06:	b914      	cbnz	r4, 8007b0e <_fwalk_reent+0x16>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b0e:	68a5      	ldr	r5, [r4, #8]
 8007b10:	6867      	ldr	r7, [r4, #4]
 8007b12:	3f01      	subs	r7, #1
 8007b14:	d501      	bpl.n	8007b1a <_fwalk_reent+0x22>
 8007b16:	6824      	ldr	r4, [r4, #0]
 8007b18:	e7f5      	b.n	8007b06 <_fwalk_reent+0xe>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d907      	bls.n	8007b30 <_fwalk_reent+0x38>
 8007b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b24:	3301      	adds	r3, #1
 8007b26:	d003      	beq.n	8007b30 <_fwalk_reent+0x38>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	47c8      	blx	r9
 8007b2e:	4306      	orrs	r6, r0
 8007b30:	3568      	adds	r5, #104	; 0x68
 8007b32:	e7ee      	b.n	8007b12 <_fwalk_reent+0x1a>

08007b34 <_free_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	2900      	cmp	r1, #0
 8007b3a:	d045      	beq.n	8007bc8 <_free_r+0x94>
 8007b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b40:	1f0c      	subs	r4, r1, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bfb8      	it	lt
 8007b46:	18e4      	addlt	r4, r4, r3
 8007b48:	f000 fdd4 	bl	80086f4 <__malloc_lock>
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <_free_r+0x98>)
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	4610      	mov	r0, r2
 8007b52:	b933      	cbnz	r3, 8007b62 <_free_r+0x2e>
 8007b54:	6063      	str	r3, [r4, #4]
 8007b56:	6014      	str	r4, [r2, #0]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b5e:	f000 bdca 	b.w	80086f6 <__malloc_unlock>
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	d90c      	bls.n	8007b80 <_free_r+0x4c>
 8007b66:	6821      	ldr	r1, [r4, #0]
 8007b68:	1862      	adds	r2, r4, r1
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	bf04      	itt	eq
 8007b6e:	681a      	ldreq	r2, [r3, #0]
 8007b70:	685b      	ldreq	r3, [r3, #4]
 8007b72:	6063      	str	r3, [r4, #4]
 8007b74:	bf04      	itt	eq
 8007b76:	1852      	addeq	r2, r2, r1
 8007b78:	6022      	streq	r2, [r4, #0]
 8007b7a:	6004      	str	r4, [r0, #0]
 8007b7c:	e7ec      	b.n	8007b58 <_free_r+0x24>
 8007b7e:	4613      	mov	r3, r2
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	b10a      	cbz	r2, 8007b88 <_free_r+0x54>
 8007b84:	42a2      	cmp	r2, r4
 8007b86:	d9fa      	bls.n	8007b7e <_free_r+0x4a>
 8007b88:	6819      	ldr	r1, [r3, #0]
 8007b8a:	1858      	adds	r0, r3, r1
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d10b      	bne.n	8007ba8 <_free_r+0x74>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	4401      	add	r1, r0
 8007b94:	1858      	adds	r0, r3, r1
 8007b96:	4282      	cmp	r2, r0
 8007b98:	6019      	str	r1, [r3, #0]
 8007b9a:	d1dd      	bne.n	8007b58 <_free_r+0x24>
 8007b9c:	6810      	ldr	r0, [r2, #0]
 8007b9e:	6852      	ldr	r2, [r2, #4]
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	6019      	str	r1, [r3, #0]
 8007ba6:	e7d7      	b.n	8007b58 <_free_r+0x24>
 8007ba8:	d902      	bls.n	8007bb0 <_free_r+0x7c>
 8007baa:	230c      	movs	r3, #12
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	e7d3      	b.n	8007b58 <_free_r+0x24>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	1821      	adds	r1, r4, r0
 8007bb4:	428a      	cmp	r2, r1
 8007bb6:	bf04      	itt	eq
 8007bb8:	6811      	ldreq	r1, [r2, #0]
 8007bba:	6852      	ldreq	r2, [r2, #4]
 8007bbc:	6062      	str	r2, [r4, #4]
 8007bbe:	bf04      	itt	eq
 8007bc0:	1809      	addeq	r1, r1, r0
 8007bc2:	6021      	streq	r1, [r4, #0]
 8007bc4:	605c      	str	r4, [r3, #4]
 8007bc6:	e7c7      	b.n	8007b58 <_free_r+0x24>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000650 	.word	0x20000650

08007bd0 <_malloc_r>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	1ccd      	adds	r5, r1, #3
 8007bd4:	f025 0503 	bic.w	r5, r5, #3
 8007bd8:	3508      	adds	r5, #8
 8007bda:	2d0c      	cmp	r5, #12
 8007bdc:	bf38      	it	cc
 8007bde:	250c      	movcc	r5, #12
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	db01      	blt.n	8007bea <_malloc_r+0x1a>
 8007be6:	42a9      	cmp	r1, r5
 8007be8:	d903      	bls.n	8007bf2 <_malloc_r+0x22>
 8007bea:	230c      	movs	r3, #12
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	2000      	movs	r0, #0
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	f000 fd7f 	bl	80086f4 <__malloc_lock>
 8007bf6:	4a23      	ldr	r2, [pc, #140]	; (8007c84 <_malloc_r+0xb4>)
 8007bf8:	6814      	ldr	r4, [r2, #0]
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	b991      	cbnz	r1, 8007c24 <_malloc_r+0x54>
 8007bfe:	4c22      	ldr	r4, [pc, #136]	; (8007c88 <_malloc_r+0xb8>)
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	b91b      	cbnz	r3, 8007c0c <_malloc_r+0x3c>
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 fb17 	bl	8008238 <_sbrk_r>
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 fb12 	bl	8008238 <_sbrk_r>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d126      	bne.n	8007c66 <_malloc_r+0x96>
 8007c18:	230c      	movs	r3, #12
 8007c1a:	6033      	str	r3, [r6, #0]
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 fd6a 	bl	80086f6 <__malloc_unlock>
 8007c22:	e7e4      	b.n	8007bee <_malloc_r+0x1e>
 8007c24:	680b      	ldr	r3, [r1, #0]
 8007c26:	1b5b      	subs	r3, r3, r5
 8007c28:	d41a      	bmi.n	8007c60 <_malloc_r+0x90>
 8007c2a:	2b0b      	cmp	r3, #11
 8007c2c:	d90f      	bls.n	8007c4e <_malloc_r+0x7e>
 8007c2e:	600b      	str	r3, [r1, #0]
 8007c30:	50cd      	str	r5, [r1, r3]
 8007c32:	18cc      	adds	r4, r1, r3
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 fd5e 	bl	80086f6 <__malloc_unlock>
 8007c3a:	f104 000b 	add.w	r0, r4, #11
 8007c3e:	1d23      	adds	r3, r4, #4
 8007c40:	f020 0007 	bic.w	r0, r0, #7
 8007c44:	1ac3      	subs	r3, r0, r3
 8007c46:	d01b      	beq.n	8007c80 <_malloc_r+0xb0>
 8007c48:	425a      	negs	r2, r3
 8007c4a:	50e2      	str	r2, [r4, r3]
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
 8007c4e:	428c      	cmp	r4, r1
 8007c50:	bf0d      	iteet	eq
 8007c52:	6863      	ldreq	r3, [r4, #4]
 8007c54:	684b      	ldrne	r3, [r1, #4]
 8007c56:	6063      	strne	r3, [r4, #4]
 8007c58:	6013      	streq	r3, [r2, #0]
 8007c5a:	bf18      	it	ne
 8007c5c:	460c      	movne	r4, r1
 8007c5e:	e7e9      	b.n	8007c34 <_malloc_r+0x64>
 8007c60:	460c      	mov	r4, r1
 8007c62:	6849      	ldr	r1, [r1, #4]
 8007c64:	e7ca      	b.n	8007bfc <_malloc_r+0x2c>
 8007c66:	1cc4      	adds	r4, r0, #3
 8007c68:	f024 0403 	bic.w	r4, r4, #3
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d005      	beq.n	8007c7c <_malloc_r+0xac>
 8007c70:	1a21      	subs	r1, r4, r0
 8007c72:	4630      	mov	r0, r6
 8007c74:	f000 fae0 	bl	8008238 <_sbrk_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0cd      	beq.n	8007c18 <_malloc_r+0x48>
 8007c7c:	6025      	str	r5, [r4, #0]
 8007c7e:	e7d9      	b.n	8007c34 <_malloc_r+0x64>
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
 8007c82:	bf00      	nop
 8007c84:	20000650 	.word	0x20000650
 8007c88:	20000654 	.word	0x20000654

08007c8c <__sfputc_r>:
 8007c8c:	6893      	ldr	r3, [r2, #8]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	b410      	push	{r4}
 8007c94:	6093      	str	r3, [r2, #8]
 8007c96:	da09      	bge.n	8007cac <__sfputc_r+0x20>
 8007c98:	6994      	ldr	r4, [r2, #24]
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	db02      	blt.n	8007ca4 <__sfputc_r+0x18>
 8007c9e:	b2cb      	uxtb	r3, r1
 8007ca0:	2b0a      	cmp	r3, #10
 8007ca2:	d103      	bne.n	8007cac <__sfputc_r+0x20>
 8007ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca8:	f000 bb1a 	b.w	80082e0 <__swbuf_r>
 8007cac:	6813      	ldr	r3, [r2, #0]
 8007cae:	1c58      	adds	r0, r3, #1
 8007cb0:	6010      	str	r0, [r2, #0]
 8007cb2:	7019      	strb	r1, [r3, #0]
 8007cb4:	b2c8      	uxtb	r0, r1
 8007cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <__sfputs_r>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	4614      	mov	r4, r2
 8007cc4:	18d5      	adds	r5, r2, r3
 8007cc6:	42ac      	cmp	r4, r5
 8007cc8:	d101      	bne.n	8007cce <__sfputs_r+0x12>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e007      	b.n	8007cde <__sfputs_r+0x22>
 8007cce:	463a      	mov	r2, r7
 8007cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7ff ffd9 	bl	8007c8c <__sfputc_r>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d1f3      	bne.n	8007cc6 <__sfputs_r+0xa>
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ce0 <_vfiprintf_r>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	b09d      	sub	sp, #116	; 0x74
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	4617      	mov	r7, r2
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	4606      	mov	r6, r0
 8007cee:	b118      	cbz	r0, 8007cf8 <_vfiprintf_r+0x18>
 8007cf0:	6983      	ldr	r3, [r0, #24]
 8007cf2:	b90b      	cbnz	r3, 8007cf8 <_vfiprintf_r+0x18>
 8007cf4:	f7ff fe94 	bl	8007a20 <__sinit>
 8007cf8:	4b7c      	ldr	r3, [pc, #496]	; (8007eec <_vfiprintf_r+0x20c>)
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d157      	bne.n	8007dae <_vfiprintf_r+0xce>
 8007cfe:	6874      	ldr	r4, [r6, #4]
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	0718      	lsls	r0, r3, #28
 8007d04:	d55d      	bpl.n	8007dc2 <_vfiprintf_r+0xe2>
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d05a      	beq.n	8007dc2 <_vfiprintf_r+0xe2>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	2320      	movs	r3, #32
 8007d12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d16:	2330      	movs	r3, #48	; 0x30
 8007d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d1c:	f04f 0b01 	mov.w	fp, #1
 8007d20:	46b8      	mov	r8, r7
 8007d22:	4645      	mov	r5, r8
 8007d24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d155      	bne.n	8007dd8 <_vfiprintf_r+0xf8>
 8007d2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007d30:	d00b      	beq.n	8007d4a <_vfiprintf_r+0x6a>
 8007d32:	4653      	mov	r3, sl
 8007d34:	463a      	mov	r2, r7
 8007d36:	4621      	mov	r1, r4
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7ff ffbf 	bl	8007cbc <__sfputs_r>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f000 80c4 	beq.w	8007ecc <_vfiprintf_r+0x1ec>
 8007d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d46:	4453      	add	r3, sl
 8007d48:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4a:	f898 3000 	ldrb.w	r3, [r8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80bc 	beq.w	8007ecc <_vfiprintf_r+0x1ec>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	9307      	str	r3, [sp, #28]
 8007d5e:	9205      	str	r2, [sp, #20]
 8007d60:	9306      	str	r3, [sp, #24]
 8007d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d66:	931a      	str	r3, [sp, #104]	; 0x68
 8007d68:	2205      	movs	r2, #5
 8007d6a:	7829      	ldrb	r1, [r5, #0]
 8007d6c:	4860      	ldr	r0, [pc, #384]	; (8007ef0 <_vfiprintf_r+0x210>)
 8007d6e:	f7f8 fa47 	bl	8000200 <memchr>
 8007d72:	f105 0801 	add.w	r8, r5, #1
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d131      	bne.n	8007de0 <_vfiprintf_r+0x100>
 8007d7c:	06d9      	lsls	r1, r3, #27
 8007d7e:	bf44      	itt	mi
 8007d80:	2220      	movmi	r2, #32
 8007d82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d86:	071a      	lsls	r2, r3, #28
 8007d88:	bf44      	itt	mi
 8007d8a:	222b      	movmi	r2, #43	; 0x2b
 8007d8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d90:	782a      	ldrb	r2, [r5, #0]
 8007d92:	2a2a      	cmp	r2, #42	; 0x2a
 8007d94:	d02c      	beq.n	8007df0 <_vfiprintf_r+0x110>
 8007d96:	9a07      	ldr	r2, [sp, #28]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	200a      	movs	r0, #10
 8007d9c:	46a8      	mov	r8, r5
 8007d9e:	3501      	adds	r5, #1
 8007da0:	f898 3000 	ldrb.w	r3, [r8]
 8007da4:	3b30      	subs	r3, #48	; 0x30
 8007da6:	2b09      	cmp	r3, #9
 8007da8:	d96d      	bls.n	8007e86 <_vfiprintf_r+0x1a6>
 8007daa:	b371      	cbz	r1, 8007e0a <_vfiprintf_r+0x12a>
 8007dac:	e026      	b.n	8007dfc <_vfiprintf_r+0x11c>
 8007dae:	4b51      	ldr	r3, [pc, #324]	; (8007ef4 <_vfiprintf_r+0x214>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	d101      	bne.n	8007db8 <_vfiprintf_r+0xd8>
 8007db4:	68b4      	ldr	r4, [r6, #8]
 8007db6:	e7a3      	b.n	8007d00 <_vfiprintf_r+0x20>
 8007db8:	4b4f      	ldr	r3, [pc, #316]	; (8007ef8 <_vfiprintf_r+0x218>)
 8007dba:	429c      	cmp	r4, r3
 8007dbc:	bf08      	it	eq
 8007dbe:	68f4      	ldreq	r4, [r6, #12]
 8007dc0:	e79e      	b.n	8007d00 <_vfiprintf_r+0x20>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 faef 	bl	80083a8 <__swsetup_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d09e      	beq.n	8007d0c <_vfiprintf_r+0x2c>
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd2:	b01d      	add	sp, #116	; 0x74
 8007dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd8:	2b25      	cmp	r3, #37	; 0x25
 8007dda:	d0a7      	beq.n	8007d2c <_vfiprintf_r+0x4c>
 8007ddc:	46a8      	mov	r8, r5
 8007dde:	e7a0      	b.n	8007d22 <_vfiprintf_r+0x42>
 8007de0:	4a43      	ldr	r2, [pc, #268]	; (8007ef0 <_vfiprintf_r+0x210>)
 8007de2:	1a80      	subs	r0, r0, r2
 8007de4:	fa0b f000 	lsl.w	r0, fp, r0
 8007de8:	4318      	orrs	r0, r3
 8007dea:	9004      	str	r0, [sp, #16]
 8007dec:	4645      	mov	r5, r8
 8007dee:	e7bb      	b.n	8007d68 <_vfiprintf_r+0x88>
 8007df0:	9a03      	ldr	r2, [sp, #12]
 8007df2:	1d11      	adds	r1, r2, #4
 8007df4:	6812      	ldr	r2, [r2, #0]
 8007df6:	9103      	str	r1, [sp, #12]
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	db01      	blt.n	8007e00 <_vfiprintf_r+0x120>
 8007dfc:	9207      	str	r2, [sp, #28]
 8007dfe:	e004      	b.n	8007e0a <_vfiprintf_r+0x12a>
 8007e00:	4252      	negs	r2, r2
 8007e02:	f043 0302 	orr.w	r3, r3, #2
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	f898 3000 	ldrb.w	r3, [r8]
 8007e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e10:	d110      	bne.n	8007e34 <_vfiprintf_r+0x154>
 8007e12:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e16:	2b2a      	cmp	r3, #42	; 0x2a
 8007e18:	f108 0101 	add.w	r1, r8, #1
 8007e1c:	d137      	bne.n	8007e8e <_vfiprintf_r+0x1ae>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	1d1a      	adds	r2, r3, #4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	9203      	str	r2, [sp, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e2e:	f108 0802 	add.w	r8, r8, #2
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	4d31      	ldr	r5, [pc, #196]	; (8007efc <_vfiprintf_r+0x21c>)
 8007e36:	f898 1000 	ldrb.w	r1, [r8]
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f7f8 f9df 	bl	8000200 <memchr>
 8007e42:	b140      	cbz	r0, 8007e56 <_vfiprintf_r+0x176>
 8007e44:	2340      	movs	r3, #64	; 0x40
 8007e46:	1b40      	subs	r0, r0, r5
 8007e48:	fa03 f000 	lsl.w	r0, r3, r0
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	4303      	orrs	r3, r0
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	f108 0801 	add.w	r8, r8, #1
 8007e56:	f898 1000 	ldrb.w	r1, [r8]
 8007e5a:	4829      	ldr	r0, [pc, #164]	; (8007f00 <_vfiprintf_r+0x220>)
 8007e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e60:	2206      	movs	r2, #6
 8007e62:	f108 0701 	add.w	r7, r8, #1
 8007e66:	f7f8 f9cb 	bl	8000200 <memchr>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d034      	beq.n	8007ed8 <_vfiprintf_r+0x1f8>
 8007e6e:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <_vfiprintf_r+0x224>)
 8007e70:	bb03      	cbnz	r3, 8007eb4 <_vfiprintf_r+0x1d4>
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	3307      	adds	r3, #7
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	9303      	str	r3, [sp, #12]
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	444b      	add	r3, r9
 8007e82:	9309      	str	r3, [sp, #36]	; 0x24
 8007e84:	e74c      	b.n	8007d20 <_vfiprintf_r+0x40>
 8007e86:	fb00 3202 	mla	r2, r0, r2, r3
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	e786      	b.n	8007d9c <_vfiprintf_r+0xbc>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	4618      	mov	r0, r3
 8007e94:	250a      	movs	r5, #10
 8007e96:	4688      	mov	r8, r1
 8007e98:	3101      	adds	r1, #1
 8007e9a:	f898 2000 	ldrb.w	r2, [r8]
 8007e9e:	3a30      	subs	r2, #48	; 0x30
 8007ea0:	2a09      	cmp	r2, #9
 8007ea2:	d903      	bls.n	8007eac <_vfiprintf_r+0x1cc>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0c5      	beq.n	8007e34 <_vfiprintf_r+0x154>
 8007ea8:	9005      	str	r0, [sp, #20]
 8007eaa:	e7c3      	b.n	8007e34 <_vfiprintf_r+0x154>
 8007eac:	fb05 2000 	mla	r0, r5, r0, r2
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e7f0      	b.n	8007e96 <_vfiprintf_r+0x1b6>
 8007eb4:	ab03      	add	r3, sp, #12
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <_vfiprintf_r+0x228>)
 8007ebc:	a904      	add	r1, sp, #16
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f3af 8000 	nop.w
 8007ec4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ec8:	4681      	mov	r9, r0
 8007eca:	d1d8      	bne.n	8007e7e <_vfiprintf_r+0x19e>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	065b      	lsls	r3, r3, #25
 8007ed0:	f53f af7d 	bmi.w	8007dce <_vfiprintf_r+0xee>
 8007ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed6:	e77c      	b.n	8007dd2 <_vfiprintf_r+0xf2>
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4622      	mov	r2, r4
 8007ede:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <_vfiprintf_r+0x228>)
 8007ee0:	a904      	add	r1, sp, #16
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f888 	bl	8007ff8 <_printf_i>
 8007ee8:	e7ec      	b.n	8007ec4 <_vfiprintf_r+0x1e4>
 8007eea:	bf00      	nop
 8007eec:	0800ae18 	.word	0x0800ae18
 8007ef0:	0800ae5c 	.word	0x0800ae5c
 8007ef4:	0800ae38 	.word	0x0800ae38
 8007ef8:	0800adf8 	.word	0x0800adf8
 8007efc:	0800ae62 	.word	0x0800ae62
 8007f00:	0800ae66 	.word	0x0800ae66
 8007f04:	00000000 	.word	0x00000000
 8007f08:	08007cbd 	.word	0x08007cbd

08007f0c <_printf_common>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	4691      	mov	r9, r2
 8007f12:	461f      	mov	r7, r3
 8007f14:	688a      	ldr	r2, [r1, #8]
 8007f16:	690b      	ldr	r3, [r1, #16]
 8007f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	bfb8      	it	lt
 8007f20:	4613      	movlt	r3, r2
 8007f22:	f8c9 3000 	str.w	r3, [r9]
 8007f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	b112      	cbz	r2, 8007f36 <_printf_common+0x2a>
 8007f30:	3301      	adds	r3, #1
 8007f32:	f8c9 3000 	str.w	r3, [r9]
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	0699      	lsls	r1, r3, #26
 8007f3a:	bf42      	ittt	mi
 8007f3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f40:	3302      	addmi	r3, #2
 8007f42:	f8c9 3000 	strmi.w	r3, [r9]
 8007f46:	6825      	ldr	r5, [r4, #0]
 8007f48:	f015 0506 	ands.w	r5, r5, #6
 8007f4c:	d107      	bne.n	8007f5e <_printf_common+0x52>
 8007f4e:	f104 0a19 	add.w	sl, r4, #25
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	f8d9 2000 	ldr.w	r2, [r9]
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	429d      	cmp	r5, r3
 8007f5c:	db29      	blt.n	8007fb2 <_printf_common+0xa6>
 8007f5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	3300      	adds	r3, #0
 8007f66:	bf18      	it	ne
 8007f68:	2301      	movne	r3, #1
 8007f6a:	0692      	lsls	r2, r2, #26
 8007f6c:	d42e      	bmi.n	8007fcc <_printf_common+0xc0>
 8007f6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f72:	4639      	mov	r1, r7
 8007f74:	4630      	mov	r0, r6
 8007f76:	47c0      	blx	r8
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d021      	beq.n	8007fc0 <_printf_common+0xb4>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	68e5      	ldr	r5, [r4, #12]
 8007f80:	f8d9 2000 	ldr.w	r2, [r9]
 8007f84:	f003 0306 	and.w	r3, r3, #6
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	bf08      	it	eq
 8007f8c:	1aad      	subeq	r5, r5, r2
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	6922      	ldr	r2, [r4, #16]
 8007f92:	bf0c      	ite	eq
 8007f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f98:	2500      	movne	r5, #0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bfc4      	itt	gt
 8007f9e:	1a9b      	subgt	r3, r3, r2
 8007fa0:	18ed      	addgt	r5, r5, r3
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	341a      	adds	r4, #26
 8007fa8:	454d      	cmp	r5, r9
 8007faa:	d11b      	bne.n	8007fe4 <_printf_common+0xd8>
 8007fac:	2000      	movs	r0, #0
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4630      	mov	r0, r6
 8007fba:	47c0      	blx	r8
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d103      	bne.n	8007fc8 <_printf_common+0xbc>
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	3501      	adds	r5, #1
 8007fca:	e7c2      	b.n	8007f52 <_printf_common+0x46>
 8007fcc:	18e1      	adds	r1, r4, r3
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	2030      	movs	r0, #48	; 0x30
 8007fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fd6:	4422      	add	r2, r4
 8007fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	e7c4      	b.n	8007f6e <_printf_common+0x62>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4639      	mov	r1, r7
 8007fea:	4630      	mov	r0, r6
 8007fec:	47c0      	blx	r8
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d0e6      	beq.n	8007fc0 <_printf_common+0xb4>
 8007ff2:	f109 0901 	add.w	r9, r9, #1
 8007ff6:	e7d7      	b.n	8007fa8 <_printf_common+0x9c>

08007ff8 <_printf_i>:
 8007ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ffc:	4617      	mov	r7, r2
 8007ffe:	7e0a      	ldrb	r2, [r1, #24]
 8008000:	b085      	sub	sp, #20
 8008002:	2a6e      	cmp	r2, #110	; 0x6e
 8008004:	4698      	mov	r8, r3
 8008006:	4606      	mov	r6, r0
 8008008:	460c      	mov	r4, r1
 800800a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008010:	f000 80bc 	beq.w	800818c <_printf_i+0x194>
 8008014:	d81a      	bhi.n	800804c <_printf_i+0x54>
 8008016:	2a63      	cmp	r2, #99	; 0x63
 8008018:	d02e      	beq.n	8008078 <_printf_i+0x80>
 800801a:	d80a      	bhi.n	8008032 <_printf_i+0x3a>
 800801c:	2a00      	cmp	r2, #0
 800801e:	f000 80c8 	beq.w	80081b2 <_printf_i+0x1ba>
 8008022:	2a58      	cmp	r2, #88	; 0x58
 8008024:	f000 808a 	beq.w	800813c <_printf_i+0x144>
 8008028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800802c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008030:	e02a      	b.n	8008088 <_printf_i+0x90>
 8008032:	2a64      	cmp	r2, #100	; 0x64
 8008034:	d001      	beq.n	800803a <_printf_i+0x42>
 8008036:	2a69      	cmp	r2, #105	; 0x69
 8008038:	d1f6      	bne.n	8008028 <_printf_i+0x30>
 800803a:	6821      	ldr	r1, [r4, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008042:	d023      	beq.n	800808c <_printf_i+0x94>
 8008044:	1d11      	adds	r1, r2, #4
 8008046:	6019      	str	r1, [r3, #0]
 8008048:	6813      	ldr	r3, [r2, #0]
 800804a:	e027      	b.n	800809c <_printf_i+0xa4>
 800804c:	2a73      	cmp	r2, #115	; 0x73
 800804e:	f000 80b4 	beq.w	80081ba <_printf_i+0x1c2>
 8008052:	d808      	bhi.n	8008066 <_printf_i+0x6e>
 8008054:	2a6f      	cmp	r2, #111	; 0x6f
 8008056:	d02a      	beq.n	80080ae <_printf_i+0xb6>
 8008058:	2a70      	cmp	r2, #112	; 0x70
 800805a:	d1e5      	bne.n	8008028 <_printf_i+0x30>
 800805c:	680a      	ldr	r2, [r1, #0]
 800805e:	f042 0220 	orr.w	r2, r2, #32
 8008062:	600a      	str	r2, [r1, #0]
 8008064:	e003      	b.n	800806e <_printf_i+0x76>
 8008066:	2a75      	cmp	r2, #117	; 0x75
 8008068:	d021      	beq.n	80080ae <_printf_i+0xb6>
 800806a:	2a78      	cmp	r2, #120	; 0x78
 800806c:	d1dc      	bne.n	8008028 <_printf_i+0x30>
 800806e:	2278      	movs	r2, #120	; 0x78
 8008070:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008074:	496e      	ldr	r1, [pc, #440]	; (8008230 <_printf_i+0x238>)
 8008076:	e064      	b.n	8008142 <_printf_i+0x14a>
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800807e:	1d11      	adds	r1, r2, #4
 8008080:	6019      	str	r1, [r3, #0]
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008088:	2301      	movs	r3, #1
 800808a:	e0a3      	b.n	80081d4 <_printf_i+0x1dc>
 800808c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008090:	f102 0104 	add.w	r1, r2, #4
 8008094:	6019      	str	r1, [r3, #0]
 8008096:	d0d7      	beq.n	8008048 <_printf_i+0x50>
 8008098:	f9b2 3000 	ldrsh.w	r3, [r2]
 800809c:	2b00      	cmp	r3, #0
 800809e:	da03      	bge.n	80080a8 <_printf_i+0xb0>
 80080a0:	222d      	movs	r2, #45	; 0x2d
 80080a2:	425b      	negs	r3, r3
 80080a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80080a8:	4962      	ldr	r1, [pc, #392]	; (8008234 <_printf_i+0x23c>)
 80080aa:	220a      	movs	r2, #10
 80080ac:	e017      	b.n	80080de <_printf_i+0xe6>
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	6819      	ldr	r1, [r3, #0]
 80080b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80080b6:	d003      	beq.n	80080c0 <_printf_i+0xc8>
 80080b8:	1d08      	adds	r0, r1, #4
 80080ba:	6018      	str	r0, [r3, #0]
 80080bc:	680b      	ldr	r3, [r1, #0]
 80080be:	e006      	b.n	80080ce <_printf_i+0xd6>
 80080c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080c4:	f101 0004 	add.w	r0, r1, #4
 80080c8:	6018      	str	r0, [r3, #0]
 80080ca:	d0f7      	beq.n	80080bc <_printf_i+0xc4>
 80080cc:	880b      	ldrh	r3, [r1, #0]
 80080ce:	4959      	ldr	r1, [pc, #356]	; (8008234 <_printf_i+0x23c>)
 80080d0:	2a6f      	cmp	r2, #111	; 0x6f
 80080d2:	bf14      	ite	ne
 80080d4:	220a      	movne	r2, #10
 80080d6:	2208      	moveq	r2, #8
 80080d8:	2000      	movs	r0, #0
 80080da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80080de:	6865      	ldr	r5, [r4, #4]
 80080e0:	60a5      	str	r5, [r4, #8]
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	f2c0 809c 	blt.w	8008220 <_printf_i+0x228>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	f020 0004 	bic.w	r0, r0, #4
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d13f      	bne.n	8008174 <_printf_i+0x17c>
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	f040 8095 	bne.w	8008224 <_printf_i+0x22c>
 80080fa:	4675      	mov	r5, lr
 80080fc:	2a08      	cmp	r2, #8
 80080fe:	d10b      	bne.n	8008118 <_printf_i+0x120>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	07da      	lsls	r2, r3, #31
 8008104:	d508      	bpl.n	8008118 <_printf_i+0x120>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	6862      	ldr	r2, [r4, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	bfde      	ittt	le
 800810e:	2330      	movle	r3, #48	; 0x30
 8008110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008118:	ebae 0305 	sub.w	r3, lr, r5
 800811c:	6123      	str	r3, [r4, #16]
 800811e:	f8cd 8000 	str.w	r8, [sp]
 8008122:	463b      	mov	r3, r7
 8008124:	aa03      	add	r2, sp, #12
 8008126:	4621      	mov	r1, r4
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff feef 	bl	8007f0c <_printf_common>
 800812e:	3001      	adds	r0, #1
 8008130:	d155      	bne.n	80081de <_printf_i+0x1e6>
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	b005      	add	sp, #20
 8008138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800813c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008140:	493c      	ldr	r1, [pc, #240]	; (8008234 <_printf_i+0x23c>)
 8008142:	6822      	ldr	r2, [r4, #0]
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	f012 0f80 	tst.w	r2, #128	; 0x80
 800814a:	f100 0504 	add.w	r5, r0, #4
 800814e:	601d      	str	r5, [r3, #0]
 8008150:	d001      	beq.n	8008156 <_printf_i+0x15e>
 8008152:	6803      	ldr	r3, [r0, #0]
 8008154:	e002      	b.n	800815c <_printf_i+0x164>
 8008156:	0655      	lsls	r5, r2, #25
 8008158:	d5fb      	bpl.n	8008152 <_printf_i+0x15a>
 800815a:	8803      	ldrh	r3, [r0, #0]
 800815c:	07d0      	lsls	r0, r2, #31
 800815e:	bf44      	itt	mi
 8008160:	f042 0220 	orrmi.w	r2, r2, #32
 8008164:	6022      	strmi	r2, [r4, #0]
 8008166:	b91b      	cbnz	r3, 8008170 <_printf_i+0x178>
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	f022 0220 	bic.w	r2, r2, #32
 800816e:	6022      	str	r2, [r4, #0]
 8008170:	2210      	movs	r2, #16
 8008172:	e7b1      	b.n	80080d8 <_printf_i+0xe0>
 8008174:	4675      	mov	r5, lr
 8008176:	fbb3 f0f2 	udiv	r0, r3, r2
 800817a:	fb02 3310 	mls	r3, r2, r0, r3
 800817e:	5ccb      	ldrb	r3, [r1, r3]
 8008180:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008184:	4603      	mov	r3, r0
 8008186:	2800      	cmp	r0, #0
 8008188:	d1f5      	bne.n	8008176 <_printf_i+0x17e>
 800818a:	e7b7      	b.n	80080fc <_printf_i+0x104>
 800818c:	6808      	ldr	r0, [r1, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	6949      	ldr	r1, [r1, #20]
 8008192:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008196:	d004      	beq.n	80081a2 <_printf_i+0x1aa>
 8008198:	1d10      	adds	r0, r2, #4
 800819a:	6018      	str	r0, [r3, #0]
 800819c:	6813      	ldr	r3, [r2, #0]
 800819e:	6019      	str	r1, [r3, #0]
 80081a0:	e007      	b.n	80081b2 <_printf_i+0x1ba>
 80081a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081a6:	f102 0004 	add.w	r0, r2, #4
 80081aa:	6018      	str	r0, [r3, #0]
 80081ac:	6813      	ldr	r3, [r2, #0]
 80081ae:	d0f6      	beq.n	800819e <_printf_i+0x1a6>
 80081b0:	8019      	strh	r1, [r3, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	4675      	mov	r5, lr
 80081b8:	e7b1      	b.n	800811e <_printf_i+0x126>
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	1d11      	adds	r1, r2, #4
 80081be:	6019      	str	r1, [r3, #0]
 80081c0:	6815      	ldr	r5, [r2, #0]
 80081c2:	6862      	ldr	r2, [r4, #4]
 80081c4:	2100      	movs	r1, #0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7f8 f81a 	bl	8000200 <memchr>
 80081cc:	b108      	cbz	r0, 80081d2 <_printf_i+0x1da>
 80081ce:	1b40      	subs	r0, r0, r5
 80081d0:	6060      	str	r0, [r4, #4]
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	6123      	str	r3, [r4, #16]
 80081d6:	2300      	movs	r3, #0
 80081d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081dc:	e79f      	b.n	800811e <_printf_i+0x126>
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	462a      	mov	r2, r5
 80081e2:	4639      	mov	r1, r7
 80081e4:	4630      	mov	r0, r6
 80081e6:	47c0      	blx	r8
 80081e8:	3001      	adds	r0, #1
 80081ea:	d0a2      	beq.n	8008132 <_printf_i+0x13a>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	079b      	lsls	r3, r3, #30
 80081f0:	d507      	bpl.n	8008202 <_printf_i+0x20a>
 80081f2:	2500      	movs	r5, #0
 80081f4:	f104 0919 	add.w	r9, r4, #25
 80081f8:	68e3      	ldr	r3, [r4, #12]
 80081fa:	9a03      	ldr	r2, [sp, #12]
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	429d      	cmp	r5, r3
 8008200:	db05      	blt.n	800820e <_printf_i+0x216>
 8008202:	68e0      	ldr	r0, [r4, #12]
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	4298      	cmp	r0, r3
 8008208:	bfb8      	it	lt
 800820a:	4618      	movlt	r0, r3
 800820c:	e793      	b.n	8008136 <_printf_i+0x13e>
 800820e:	2301      	movs	r3, #1
 8008210:	464a      	mov	r2, r9
 8008212:	4639      	mov	r1, r7
 8008214:	4630      	mov	r0, r6
 8008216:	47c0      	blx	r8
 8008218:	3001      	adds	r0, #1
 800821a:	d08a      	beq.n	8008132 <_printf_i+0x13a>
 800821c:	3501      	adds	r5, #1
 800821e:	e7eb      	b.n	80081f8 <_printf_i+0x200>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1a7      	bne.n	8008174 <_printf_i+0x17c>
 8008224:	780b      	ldrb	r3, [r1, #0]
 8008226:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800822a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800822e:	e765      	b.n	80080fc <_printf_i+0x104>
 8008230:	0800ae7e 	.word	0x0800ae7e
 8008234:	0800ae6d 	.word	0x0800ae6d

08008238 <_sbrk_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4c06      	ldr	r4, [pc, #24]	; (8008254 <_sbrk_r+0x1c>)
 800823c:	2300      	movs	r3, #0
 800823e:	4605      	mov	r5, r0
 8008240:	4608      	mov	r0, r1
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	f7ff fad0 	bl	80077e8 <_sbrk>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_sbrk_r+0x1a>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	b103      	cbz	r3, 8008252 <_sbrk_r+0x1a>
 8008250:	602b      	str	r3, [r5, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	20005f84 	.word	0x20005f84

08008258 <__sread>:
 8008258:	b510      	push	{r4, lr}
 800825a:	460c      	mov	r4, r1
 800825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008260:	f000 fa4a 	bl	80086f8 <_read_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	bfab      	itete	ge
 8008268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800826a:	89a3      	ldrhlt	r3, [r4, #12]
 800826c:	181b      	addge	r3, r3, r0
 800826e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008272:	bfac      	ite	ge
 8008274:	6563      	strge	r3, [r4, #84]	; 0x54
 8008276:	81a3      	strhlt	r3, [r4, #12]
 8008278:	bd10      	pop	{r4, pc}

0800827a <__swrite>:
 800827a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827e:	461f      	mov	r7, r3
 8008280:	898b      	ldrh	r3, [r1, #12]
 8008282:	05db      	lsls	r3, r3, #23
 8008284:	4605      	mov	r5, r0
 8008286:	460c      	mov	r4, r1
 8008288:	4616      	mov	r6, r2
 800828a:	d505      	bpl.n	8008298 <__swrite+0x1e>
 800828c:	2302      	movs	r3, #2
 800828e:	2200      	movs	r2, #0
 8008290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008294:	f000 f9b8 	bl	8008608 <_lseek_r>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	4632      	mov	r2, r6
 80082a6:	463b      	mov	r3, r7
 80082a8:	4628      	mov	r0, r5
 80082aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ae:	f000 b869 	b.w	8008384 <_write_r>

080082b2 <__sseek>:
 80082b2:	b510      	push	{r4, lr}
 80082b4:	460c      	mov	r4, r1
 80082b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ba:	f000 f9a5 	bl	8008608 <_lseek_r>
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	bf15      	itete	ne
 80082c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80082c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082ce:	81a3      	strheq	r3, [r4, #12]
 80082d0:	bf18      	it	ne
 80082d2:	81a3      	strhne	r3, [r4, #12]
 80082d4:	bd10      	pop	{r4, pc}

080082d6 <__sclose>:
 80082d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082da:	f000 b8d3 	b.w	8008484 <_close_r>
	...

080082e0 <__swbuf_r>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	460e      	mov	r6, r1
 80082e4:	4614      	mov	r4, r2
 80082e6:	4605      	mov	r5, r0
 80082e8:	b118      	cbz	r0, 80082f2 <__swbuf_r+0x12>
 80082ea:	6983      	ldr	r3, [r0, #24]
 80082ec:	b90b      	cbnz	r3, 80082f2 <__swbuf_r+0x12>
 80082ee:	f7ff fb97 	bl	8007a20 <__sinit>
 80082f2:	4b21      	ldr	r3, [pc, #132]	; (8008378 <__swbuf_r+0x98>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	d12a      	bne.n	800834e <__swbuf_r+0x6e>
 80082f8:	686c      	ldr	r4, [r5, #4]
 80082fa:	69a3      	ldr	r3, [r4, #24]
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	071a      	lsls	r2, r3, #28
 8008302:	d52e      	bpl.n	8008362 <__swbuf_r+0x82>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b363      	cbz	r3, 8008362 <__swbuf_r+0x82>
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1ac0      	subs	r0, r0, r3
 800830e:	6963      	ldr	r3, [r4, #20]
 8008310:	b2f6      	uxtb	r6, r6
 8008312:	4298      	cmp	r0, r3
 8008314:	4637      	mov	r7, r6
 8008316:	db04      	blt.n	8008322 <__swbuf_r+0x42>
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f94a 	bl	80085b4 <_fflush_r>
 8008320:	bb28      	cbnz	r0, 800836e <__swbuf_r+0x8e>
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	3b01      	subs	r3, #1
 8008326:	60a3      	str	r3, [r4, #8]
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	6022      	str	r2, [r4, #0]
 800832e:	701e      	strb	r6, [r3, #0]
 8008330:	6963      	ldr	r3, [r4, #20]
 8008332:	3001      	adds	r0, #1
 8008334:	4298      	cmp	r0, r3
 8008336:	d004      	beq.n	8008342 <__swbuf_r+0x62>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	07db      	lsls	r3, r3, #31
 800833c:	d519      	bpl.n	8008372 <__swbuf_r+0x92>
 800833e:	2e0a      	cmp	r6, #10
 8008340:	d117      	bne.n	8008372 <__swbuf_r+0x92>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f000 f935 	bl	80085b4 <_fflush_r>
 800834a:	b190      	cbz	r0, 8008372 <__swbuf_r+0x92>
 800834c:	e00f      	b.n	800836e <__swbuf_r+0x8e>
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <__swbuf_r+0x9c>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d101      	bne.n	8008358 <__swbuf_r+0x78>
 8008354:	68ac      	ldr	r4, [r5, #8]
 8008356:	e7d0      	b.n	80082fa <__swbuf_r+0x1a>
 8008358:	4b09      	ldr	r3, [pc, #36]	; (8008380 <__swbuf_r+0xa0>)
 800835a:	429c      	cmp	r4, r3
 800835c:	bf08      	it	eq
 800835e:	68ec      	ldreq	r4, [r5, #12]
 8008360:	e7cb      	b.n	80082fa <__swbuf_r+0x1a>
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f000 f81f 	bl	80083a8 <__swsetup_r>
 800836a:	2800      	cmp	r0, #0
 800836c:	d0cc      	beq.n	8008308 <__swbuf_r+0x28>
 800836e:	f04f 37ff 	mov.w	r7, #4294967295
 8008372:	4638      	mov	r0, r7
 8008374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008376:	bf00      	nop
 8008378:	0800ae18 	.word	0x0800ae18
 800837c:	0800ae38 	.word	0x0800ae38
 8008380:	0800adf8 	.word	0x0800adf8

08008384 <_write_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4c07      	ldr	r4, [pc, #28]	; (80083a4 <_write_r+0x20>)
 8008388:	4605      	mov	r5, r0
 800838a:	4608      	mov	r0, r1
 800838c:	4611      	mov	r1, r2
 800838e:	2200      	movs	r2, #0
 8008390:	6022      	str	r2, [r4, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	f7ff fa1a 	bl	80077cc <_write>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_write_r+0x1e>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_write_r+0x1e>
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20005f84 	.word	0x20005f84

080083a8 <__swsetup_r>:
 80083a8:	4b32      	ldr	r3, [pc, #200]	; (8008474 <__swsetup_r+0xcc>)
 80083aa:	b570      	push	{r4, r5, r6, lr}
 80083ac:	681d      	ldr	r5, [r3, #0]
 80083ae:	4606      	mov	r6, r0
 80083b0:	460c      	mov	r4, r1
 80083b2:	b125      	cbz	r5, 80083be <__swsetup_r+0x16>
 80083b4:	69ab      	ldr	r3, [r5, #24]
 80083b6:	b913      	cbnz	r3, 80083be <__swsetup_r+0x16>
 80083b8:	4628      	mov	r0, r5
 80083ba:	f7ff fb31 	bl	8007a20 <__sinit>
 80083be:	4b2e      	ldr	r3, [pc, #184]	; (8008478 <__swsetup_r+0xd0>)
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d10f      	bne.n	80083e4 <__swsetup_r+0x3c>
 80083c4:	686c      	ldr	r4, [r5, #4]
 80083c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	0715      	lsls	r5, r2, #28
 80083ce:	d42c      	bmi.n	800842a <__swsetup_r+0x82>
 80083d0:	06d0      	lsls	r0, r2, #27
 80083d2:	d411      	bmi.n	80083f8 <__swsetup_r+0x50>
 80083d4:	2209      	movs	r2, #9
 80083d6:	6032      	str	r2, [r6, #0]
 80083d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	4b25      	ldr	r3, [pc, #148]	; (800847c <__swsetup_r+0xd4>)
 80083e6:	429c      	cmp	r4, r3
 80083e8:	d101      	bne.n	80083ee <__swsetup_r+0x46>
 80083ea:	68ac      	ldr	r4, [r5, #8]
 80083ec:	e7eb      	b.n	80083c6 <__swsetup_r+0x1e>
 80083ee:	4b24      	ldr	r3, [pc, #144]	; (8008480 <__swsetup_r+0xd8>)
 80083f0:	429c      	cmp	r4, r3
 80083f2:	bf08      	it	eq
 80083f4:	68ec      	ldreq	r4, [r5, #12]
 80083f6:	e7e6      	b.n	80083c6 <__swsetup_r+0x1e>
 80083f8:	0751      	lsls	r1, r2, #29
 80083fa:	d512      	bpl.n	8008422 <__swsetup_r+0x7a>
 80083fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083fe:	b141      	cbz	r1, 8008412 <__swsetup_r+0x6a>
 8008400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008404:	4299      	cmp	r1, r3
 8008406:	d002      	beq.n	800840e <__swsetup_r+0x66>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff fb93 	bl	8007b34 <_free_r>
 800840e:	2300      	movs	r3, #0
 8008410:	6363      	str	r3, [r4, #52]	; 0x34
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	2300      	movs	r3, #0
 800841c:	6063      	str	r3, [r4, #4]
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f043 0308 	orr.w	r3, r3, #8
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	b94b      	cbnz	r3, 8008442 <__swsetup_r+0x9a>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008438:	d003      	beq.n	8008442 <__swsetup_r+0x9a>
 800843a:	4621      	mov	r1, r4
 800843c:	4630      	mov	r0, r6
 800843e:	f000 f919 	bl	8008674 <__smakebuf_r>
 8008442:	89a2      	ldrh	r2, [r4, #12]
 8008444:	f012 0301 	ands.w	r3, r2, #1
 8008448:	d00c      	beq.n	8008464 <__swsetup_r+0xbc>
 800844a:	2300      	movs	r3, #0
 800844c:	60a3      	str	r3, [r4, #8]
 800844e:	6963      	ldr	r3, [r4, #20]
 8008450:	425b      	negs	r3, r3
 8008452:	61a3      	str	r3, [r4, #24]
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	b953      	cbnz	r3, 800846e <__swsetup_r+0xc6>
 8008458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800845c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008460:	d1ba      	bne.n	80083d8 <__swsetup_r+0x30>
 8008462:	bd70      	pop	{r4, r5, r6, pc}
 8008464:	0792      	lsls	r2, r2, #30
 8008466:	bf58      	it	pl
 8008468:	6963      	ldrpl	r3, [r4, #20]
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	e7f2      	b.n	8008454 <__swsetup_r+0xac>
 800846e:	2000      	movs	r0, #0
 8008470:	e7f7      	b.n	8008462 <__swsetup_r+0xba>
 8008472:	bf00      	nop
 8008474:	20000014 	.word	0x20000014
 8008478:	0800ae18 	.word	0x0800ae18
 800847c:	0800ae38 	.word	0x0800ae38
 8008480:	0800adf8 	.word	0x0800adf8

08008484 <_close_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4c06      	ldr	r4, [pc, #24]	; (80084a0 <_close_r+0x1c>)
 8008488:	2300      	movs	r3, #0
 800848a:	4605      	mov	r5, r0
 800848c:	4608      	mov	r0, r1
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	f7ff f9c4 	bl	800781c <_close>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_close_r+0x1a>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	b103      	cbz	r3, 800849e <_close_r+0x1a>
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20005f84 	.word	0x20005f84

080084a4 <__sflush_r>:
 80084a4:	898a      	ldrh	r2, [r1, #12]
 80084a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	4605      	mov	r5, r0
 80084ac:	0710      	lsls	r0, r2, #28
 80084ae:	460c      	mov	r4, r1
 80084b0:	d45a      	bmi.n	8008568 <__sflush_r+0xc4>
 80084b2:	684b      	ldr	r3, [r1, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc05      	bgt.n	80084c4 <__sflush_r+0x20>
 80084b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc02      	bgt.n	80084c4 <__sflush_r+0x20>
 80084be:	2000      	movs	r0, #0
 80084c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d0f9      	beq.n	80084be <__sflush_r+0x1a>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d0:	682f      	ldr	r7, [r5, #0]
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	d033      	beq.n	800853e <__sflush_r+0x9a>
 80084d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	075a      	lsls	r2, r3, #29
 80084dc:	d505      	bpl.n	80084ea <__sflush_r+0x46>
 80084de:	6863      	ldr	r3, [r4, #4]
 80084e0:	1ac0      	subs	r0, r0, r3
 80084e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084e4:	b10b      	cbz	r3, 80084ea <__sflush_r+0x46>
 80084e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084e8:	1ac0      	subs	r0, r0, r3
 80084ea:	2300      	movs	r3, #0
 80084ec:	4602      	mov	r2, r0
 80084ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f0:	6a21      	ldr	r1, [r4, #32]
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b0      	blx	r6
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	d106      	bne.n	800850a <__sflush_r+0x66>
 80084fc:	6829      	ldr	r1, [r5, #0]
 80084fe:	291d      	cmp	r1, #29
 8008500:	d84b      	bhi.n	800859a <__sflush_r+0xf6>
 8008502:	4a2b      	ldr	r2, [pc, #172]	; (80085b0 <__sflush_r+0x10c>)
 8008504:	40ca      	lsrs	r2, r1
 8008506:	07d6      	lsls	r6, r2, #31
 8008508:	d547      	bpl.n	800859a <__sflush_r+0xf6>
 800850a:	2200      	movs	r2, #0
 800850c:	6062      	str	r2, [r4, #4]
 800850e:	04d9      	lsls	r1, r3, #19
 8008510:	6922      	ldr	r2, [r4, #16]
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	d504      	bpl.n	8008520 <__sflush_r+0x7c>
 8008516:	1c42      	adds	r2, r0, #1
 8008518:	d101      	bne.n	800851e <__sflush_r+0x7a>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	b903      	cbnz	r3, 8008520 <__sflush_r+0x7c>
 800851e:	6560      	str	r0, [r4, #84]	; 0x54
 8008520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008522:	602f      	str	r7, [r5, #0]
 8008524:	2900      	cmp	r1, #0
 8008526:	d0ca      	beq.n	80084be <__sflush_r+0x1a>
 8008528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <__sflush_r+0x92>
 8008530:	4628      	mov	r0, r5
 8008532:	f7ff faff 	bl	8007b34 <_free_r>
 8008536:	2000      	movs	r0, #0
 8008538:	6360      	str	r0, [r4, #52]	; 0x34
 800853a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853e:	6a21      	ldr	r1, [r4, #32]
 8008540:	2301      	movs	r3, #1
 8008542:	4628      	mov	r0, r5
 8008544:	47b0      	blx	r6
 8008546:	1c41      	adds	r1, r0, #1
 8008548:	d1c6      	bne.n	80084d8 <__sflush_r+0x34>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0c3      	beq.n	80084d8 <__sflush_r+0x34>
 8008550:	2b1d      	cmp	r3, #29
 8008552:	d001      	beq.n	8008558 <__sflush_r+0xb4>
 8008554:	2b16      	cmp	r3, #22
 8008556:	d101      	bne.n	800855c <__sflush_r+0xb8>
 8008558:	602f      	str	r7, [r5, #0]
 800855a:	e7b0      	b.n	80084be <__sflush_r+0x1a>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008568:	690f      	ldr	r7, [r1, #16]
 800856a:	2f00      	cmp	r7, #0
 800856c:	d0a7      	beq.n	80084be <__sflush_r+0x1a>
 800856e:	0793      	lsls	r3, r2, #30
 8008570:	680e      	ldr	r6, [r1, #0]
 8008572:	bf08      	it	eq
 8008574:	694b      	ldreq	r3, [r1, #20]
 8008576:	600f      	str	r7, [r1, #0]
 8008578:	bf18      	it	ne
 800857a:	2300      	movne	r3, #0
 800857c:	eba6 0807 	sub.w	r8, r6, r7
 8008580:	608b      	str	r3, [r1, #8]
 8008582:	f1b8 0f00 	cmp.w	r8, #0
 8008586:	dd9a      	ble.n	80084be <__sflush_r+0x1a>
 8008588:	4643      	mov	r3, r8
 800858a:	463a      	mov	r2, r7
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008590:	4628      	mov	r0, r5
 8008592:	47b0      	blx	r6
 8008594:	2800      	cmp	r0, #0
 8008596:	dc07      	bgt.n	80085a8 <__sflush_r+0x104>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859e:	81a3      	strh	r3, [r4, #12]
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	4407      	add	r7, r0
 80085aa:	eba8 0800 	sub.w	r8, r8, r0
 80085ae:	e7e8      	b.n	8008582 <__sflush_r+0xde>
 80085b0:	20400001 	.word	0x20400001

080085b4 <_fflush_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	690b      	ldr	r3, [r1, #16]
 80085b8:	4605      	mov	r5, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	b1db      	cbz	r3, 80085f6 <_fflush_r+0x42>
 80085be:	b118      	cbz	r0, 80085c8 <_fflush_r+0x14>
 80085c0:	6983      	ldr	r3, [r0, #24]
 80085c2:	b90b      	cbnz	r3, 80085c8 <_fflush_r+0x14>
 80085c4:	f7ff fa2c 	bl	8007a20 <__sinit>
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <_fflush_r+0x48>)
 80085ca:	429c      	cmp	r4, r3
 80085cc:	d109      	bne.n	80085e2 <_fflush_r+0x2e>
 80085ce:	686c      	ldr	r4, [r5, #4]
 80085d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d4:	b17b      	cbz	r3, 80085f6 <_fflush_r+0x42>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085de:	f7ff bf61 	b.w	80084a4 <__sflush_r>
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <_fflush_r+0x4c>)
 80085e4:	429c      	cmp	r4, r3
 80085e6:	d101      	bne.n	80085ec <_fflush_r+0x38>
 80085e8:	68ac      	ldr	r4, [r5, #8]
 80085ea:	e7f1      	b.n	80085d0 <_fflush_r+0x1c>
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <_fflush_r+0x50>)
 80085ee:	429c      	cmp	r4, r3
 80085f0:	bf08      	it	eq
 80085f2:	68ec      	ldreq	r4, [r5, #12]
 80085f4:	e7ec      	b.n	80085d0 <_fflush_r+0x1c>
 80085f6:	2000      	movs	r0, #0
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop
 80085fc:	0800ae18 	.word	0x0800ae18
 8008600:	0800ae38 	.word	0x0800ae38
 8008604:	0800adf8 	.word	0x0800adf8

08008608 <_lseek_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4c07      	ldr	r4, [pc, #28]	; (8008628 <_lseek_r+0x20>)
 800860c:	4605      	mov	r5, r0
 800860e:	4608      	mov	r0, r1
 8008610:	4611      	mov	r1, r2
 8008612:	2200      	movs	r2, #0
 8008614:	6022      	str	r2, [r4, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	f7ff f90a 	bl	8007830 <_lseek>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_lseek_r+0x1e>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	b103      	cbz	r3, 8008626 <_lseek_r+0x1e>
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	20005f84 	.word	0x20005f84

0800862c <__swhatbuf_r>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	460e      	mov	r6, r1
 8008630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008634:	2900      	cmp	r1, #0
 8008636:	b090      	sub	sp, #64	; 0x40
 8008638:	4614      	mov	r4, r2
 800863a:	461d      	mov	r5, r3
 800863c:	da07      	bge.n	800864e <__swhatbuf_r+0x22>
 800863e:	2300      	movs	r3, #0
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	89b3      	ldrh	r3, [r6, #12]
 8008644:	061a      	lsls	r2, r3, #24
 8008646:	d410      	bmi.n	800866a <__swhatbuf_r+0x3e>
 8008648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800864c:	e00e      	b.n	800866c <__swhatbuf_r+0x40>
 800864e:	aa01      	add	r2, sp, #4
 8008650:	f000 f864 	bl	800871c <_fstat_r>
 8008654:	2800      	cmp	r0, #0
 8008656:	dbf2      	blt.n	800863e <__swhatbuf_r+0x12>
 8008658:	9a02      	ldr	r2, [sp, #8]
 800865a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800865e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008662:	425a      	negs	r2, r3
 8008664:	415a      	adcs	r2, r3
 8008666:	602a      	str	r2, [r5, #0]
 8008668:	e7ee      	b.n	8008648 <__swhatbuf_r+0x1c>
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	2000      	movs	r0, #0
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	b010      	add	sp, #64	; 0x40
 8008672:	bd70      	pop	{r4, r5, r6, pc}

08008674 <__smakebuf_r>:
 8008674:	898b      	ldrh	r3, [r1, #12]
 8008676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008678:	079d      	lsls	r5, r3, #30
 800867a:	4606      	mov	r6, r0
 800867c:	460c      	mov	r4, r1
 800867e:	d507      	bpl.n	8008690 <__smakebuf_r+0x1c>
 8008680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	2301      	movs	r3, #1
 800868a:	6163      	str	r3, [r4, #20]
 800868c:	b002      	add	sp, #8
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	ab01      	add	r3, sp, #4
 8008692:	466a      	mov	r2, sp
 8008694:	f7ff ffca 	bl	800862c <__swhatbuf_r>
 8008698:	9900      	ldr	r1, [sp, #0]
 800869a:	4605      	mov	r5, r0
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff fa97 	bl	8007bd0 <_malloc_r>
 80086a2:	b948      	cbnz	r0, 80086b8 <__smakebuf_r+0x44>
 80086a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d4ef      	bmi.n	800868c <__smakebuf_r+0x18>
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	e7e3      	b.n	8008680 <__smakebuf_r+0xc>
 80086b8:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <__smakebuf_r+0x7c>)
 80086ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	6020      	str	r0, [r4, #0]
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	6163      	str	r3, [r4, #20]
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	6120      	str	r0, [r4, #16]
 80086ce:	b15b      	cbz	r3, 80086e8 <__smakebuf_r+0x74>
 80086d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d4:	4630      	mov	r0, r6
 80086d6:	f000 f833 	bl	8008740 <_isatty_r>
 80086da:	b128      	cbz	r0, 80086e8 <__smakebuf_r+0x74>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f023 0303 	bic.w	r3, r3, #3
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	431d      	orrs	r5, r3
 80086ec:	81a5      	strh	r5, [r4, #12]
 80086ee:	e7cd      	b.n	800868c <__smakebuf_r+0x18>
 80086f0:	080079a1 	.word	0x080079a1

080086f4 <__malloc_lock>:
 80086f4:	4770      	bx	lr

080086f6 <__malloc_unlock>:
 80086f6:	4770      	bx	lr

080086f8 <_read_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4c07      	ldr	r4, [pc, #28]	; (8008718 <_read_r+0x20>)
 80086fc:	4605      	mov	r5, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7ff f852 	bl	80077b0 <_read>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_read_r+0x1e>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	b103      	cbz	r3, 8008716 <_read_r+0x1e>
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20005f84 	.word	0x20005f84

0800871c <_fstat_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4c07      	ldr	r4, [pc, #28]	; (800873c <_fstat_r+0x20>)
 8008720:	2300      	movs	r3, #0
 8008722:	4605      	mov	r5, r0
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	f7ff f87a 	bl	8007822 <_fstat>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	d102      	bne.n	8008738 <_fstat_r+0x1c>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	b103      	cbz	r3, 8008738 <_fstat_r+0x1c>
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	bf00      	nop
 800873c:	20005f84 	.word	0x20005f84

08008740 <_isatty_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4c06      	ldr	r4, [pc, #24]	; (800875c <_isatty_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4605      	mov	r5, r0
 8008748:	4608      	mov	r0, r1
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	f7ff f86e 	bl	800782c <_isatty>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_isatty_r+0x1a>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	b103      	cbz	r3, 800875a <_isatty_r+0x1a>
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20005f84 	.word	0x20005f84

08008760 <_init>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr

0800876c <_fini>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	bf00      	nop
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr
