
Http_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003188  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f3e8  0800f3e8  0001f3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f3f0  0800f3f0  0001f3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f3f4  0800f3f4  0001f3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  0800f3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003dd4  24000090  0800f488  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000000  20000000  00030000  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0800f488  00030000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00049da9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007ec7  00000000  00000000  00069e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00015b20  00000000  00000000  00071d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  00087850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  00088fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00011fd8  00000000  00000000  0008b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a01c  00000000  00000000  0009d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000a7114  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004d5c  00000000  00000000  000a7190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c248 	.word	0x0800c248

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800c248 	.word	0x0800c248

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b97a 	b.w	80006bc <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	468c      	mov	ip, r1
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	9e08      	ldr	r6, [sp, #32]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d151      	bne.n	8000494 <__udivmoddi4+0xb4>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d96d      	bls.n	80004d2 <__udivmoddi4+0xf2>
 80003f6:	fab2 fe82 	clz	lr, r2
 80003fa:	f1be 0f00 	cmp.w	lr, #0
 80003fe:	d00b      	beq.n	8000418 <__udivmoddi4+0x38>
 8000400:	f1ce 0c20 	rsb	ip, lr, #32
 8000404:	fa01 f50e 	lsl.w	r5, r1, lr
 8000408:	fa20 fc0c 	lsr.w	ip, r0, ip
 800040c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000410:	ea4c 0c05 	orr.w	ip, ip, r5
 8000414:	fa00 f40e 	lsl.w	r4, r0, lr
 8000418:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800041c:	0c25      	lsrs	r5, r4, #16
 800041e:	fbbc f8fa 	udiv	r8, ip, sl
 8000422:	fa1f f987 	uxth.w	r9, r7
 8000426:	fb0a cc18 	mls	ip, sl, r8, ip
 800042a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800042e:	fb08 f309 	mul.w	r3, r8, r9
 8000432:	42ab      	cmp	r3, r5
 8000434:	d90a      	bls.n	800044c <__udivmoddi4+0x6c>
 8000436:	19ed      	adds	r5, r5, r7
 8000438:	f108 32ff 	add.w	r2, r8, #4294967295
 800043c:	f080 8123 	bcs.w	8000686 <__udivmoddi4+0x2a6>
 8000440:	42ab      	cmp	r3, r5
 8000442:	f240 8120 	bls.w	8000686 <__udivmoddi4+0x2a6>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	443d      	add	r5, r7
 800044c:	1aed      	subs	r5, r5, r3
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb5 f0fa 	udiv	r0, r5, sl
 8000454:	fb0a 5510 	mls	r5, sl, r0, r5
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb00 f909 	mul.w	r9, r0, r9
 8000460:	45a1      	cmp	r9, r4
 8000462:	d909      	bls.n	8000478 <__udivmoddi4+0x98>
 8000464:	19e4      	adds	r4, r4, r7
 8000466:	f100 33ff 	add.w	r3, r0, #4294967295
 800046a:	f080 810a 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8107 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000474:	3802      	subs	r0, #2
 8000476:	443c      	add	r4, r7
 8000478:	eba4 0409 	sub.w	r4, r4, r9
 800047c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000480:	2100      	movs	r1, #0
 8000482:	2e00      	cmp	r6, #0
 8000484:	d061      	beq.n	800054a <__udivmoddi4+0x16a>
 8000486:	fa24 f40e 	lsr.w	r4, r4, lr
 800048a:	2300      	movs	r3, #0
 800048c:	6034      	str	r4, [r6, #0]
 800048e:	6073      	str	r3, [r6, #4]
 8000490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000494:	428b      	cmp	r3, r1
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0xc8>
 8000498:	2e00      	cmp	r6, #0
 800049a:	d054      	beq.n	8000546 <__udivmoddi4+0x166>
 800049c:	2100      	movs	r1, #0
 800049e:	e886 0021 	stmia.w	r6, {r0, r5}
 80004a2:	4608      	mov	r0, r1
 80004a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a8:	fab3 f183 	clz	r1, r3
 80004ac:	2900      	cmp	r1, #0
 80004ae:	f040 808e 	bne.w	80005ce <__udivmoddi4+0x1ee>
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xdc>
 80004b6:	4282      	cmp	r2, r0
 80004b8:	f200 80fa 	bhi.w	80006b0 <__udivmoddi4+0x2d0>
 80004bc:	1a84      	subs	r4, r0, r2
 80004be:	eb65 0503 	sbc.w	r5, r5, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	46ac      	mov	ip, r5
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	d03f      	beq.n	800054a <__udivmoddi4+0x16a>
 80004ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	b912      	cbnz	r2, 80004da <__udivmoddi4+0xfa>
 80004d4:	2701      	movs	r7, #1
 80004d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004da:	fab7 fe87 	clz	lr, r7
 80004de:	f1be 0f00 	cmp.w	lr, #0
 80004e2:	d134      	bne.n	800054e <__udivmoddi4+0x16e>
 80004e4:	1beb      	subs	r3, r5, r7
 80004e6:	0c3a      	lsrs	r2, r7, #16
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	2101      	movs	r1, #1
 80004ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80004f2:	0c25      	lsrs	r5, r4, #16
 80004f4:	fb02 3318 	mls	r3, r2, r8, r3
 80004f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004fc:	fb0c f308 	mul.w	r3, ip, r8
 8000500:	42ab      	cmp	r3, r5
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x134>
 8000504:	19ed      	adds	r5, r5, r7
 8000506:	f108 30ff 	add.w	r0, r8, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x132>
 800050c:	42ab      	cmp	r3, r5
 800050e:	f200 80d1 	bhi.w	80006b4 <__udivmoddi4+0x2d4>
 8000512:	4680      	mov	r8, r0
 8000514:	1aed      	subs	r5, r5, r3
 8000516:	b2a3      	uxth	r3, r4
 8000518:	fbb5 f0f2 	udiv	r0, r5, r2
 800051c:	fb02 5510 	mls	r5, r2, r0, r5
 8000520:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000524:	fb0c fc00 	mul.w	ip, ip, r0
 8000528:	45a4      	cmp	ip, r4
 800052a:	d907      	bls.n	800053c <__udivmoddi4+0x15c>
 800052c:	19e4      	adds	r4, r4, r7
 800052e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x15a>
 8000534:	45a4      	cmp	ip, r4
 8000536:	f200 80b8 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 800053a:	4618      	mov	r0, r3
 800053c:	eba4 040c 	sub.w	r4, r4, ip
 8000540:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000544:	e79d      	b.n	8000482 <__udivmoddi4+0xa2>
 8000546:	4631      	mov	r1, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054e:	f1ce 0420 	rsb	r4, lr, #32
 8000552:	fa05 f30e 	lsl.w	r3, r5, lr
 8000556:	fa07 f70e 	lsl.w	r7, r7, lr
 800055a:	fa20 f804 	lsr.w	r8, r0, r4
 800055e:	0c3a      	lsrs	r2, r7, #16
 8000560:	fa25 f404 	lsr.w	r4, r5, r4
 8000564:	ea48 0803 	orr.w	r8, r8, r3
 8000568:	fbb4 f1f2 	udiv	r1, r4, r2
 800056c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000570:	fb02 4411 	mls	r4, r2, r1, r4
 8000574:	fa1f fc87 	uxth.w	ip, r7
 8000578:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800057c:	fb01 f30c 	mul.w	r3, r1, ip
 8000580:	42ab      	cmp	r3, r5
 8000582:	fa00 f40e 	lsl.w	r4, r0, lr
 8000586:	d909      	bls.n	800059c <__udivmoddi4+0x1bc>
 8000588:	19ed      	adds	r5, r5, r7
 800058a:	f101 30ff 	add.w	r0, r1, #4294967295
 800058e:	f080 808a 	bcs.w	80006a6 <__udivmoddi4+0x2c6>
 8000592:	42ab      	cmp	r3, r5
 8000594:	f240 8087 	bls.w	80006a6 <__udivmoddi4+0x2c6>
 8000598:	3902      	subs	r1, #2
 800059a:	443d      	add	r5, r7
 800059c:	1aeb      	subs	r3, r5, r3
 800059e:	fa1f f588 	uxth.w	r5, r8
 80005a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80005a6:	fb02 3310 	mls	r3, r2, r0, r3
 80005aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80005ae:	fb00 f30c 	mul.w	r3, r0, ip
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d907      	bls.n	80005c6 <__udivmoddi4+0x1e6>
 80005b6:	19ed      	adds	r5, r5, r7
 80005b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80005bc:	d26f      	bcs.n	800069e <__udivmoddi4+0x2be>
 80005be:	42ab      	cmp	r3, r5
 80005c0:	d96d      	bls.n	800069e <__udivmoddi4+0x2be>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443d      	add	r5, r7
 80005c6:	1aeb      	subs	r3, r5, r3
 80005c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005cc:	e78f      	b.n	80004ee <__udivmoddi4+0x10e>
 80005ce:	f1c1 0720 	rsb	r7, r1, #32
 80005d2:	fa22 f807 	lsr.w	r8, r2, r7
 80005d6:	408b      	lsls	r3, r1
 80005d8:	fa05 f401 	lsl.w	r4, r5, r1
 80005dc:	ea48 0303 	orr.w	r3, r8, r3
 80005e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005e8:	40fd      	lsrs	r5, r7
 80005ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80005ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80005f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005fa:	fa1f f883 	uxth.w	r8, r3
 80005fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000602:	fb09 f408 	mul.w	r4, r9, r8
 8000606:	42ac      	cmp	r4, r5
 8000608:	fa02 f201 	lsl.w	r2, r2, r1
 800060c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000610:	d908      	bls.n	8000624 <__udivmoddi4+0x244>
 8000612:	18ed      	adds	r5, r5, r3
 8000614:	f109 30ff 	add.w	r0, r9, #4294967295
 8000618:	d243      	bcs.n	80006a2 <__udivmoddi4+0x2c2>
 800061a:	42ac      	cmp	r4, r5
 800061c:	d941      	bls.n	80006a2 <__udivmoddi4+0x2c2>
 800061e:	f1a9 0902 	sub.w	r9, r9, #2
 8000622:	441d      	add	r5, r3
 8000624:	1b2d      	subs	r5, r5, r4
 8000626:	fa1f fe8e 	uxth.w	lr, lr
 800062a:	fbb5 f0fc 	udiv	r0, r5, ip
 800062e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000632:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000636:	fb00 f808 	mul.w	r8, r0, r8
 800063a:	45a0      	cmp	r8, r4
 800063c:	d907      	bls.n	800064e <__udivmoddi4+0x26e>
 800063e:	18e4      	adds	r4, r4, r3
 8000640:	f100 35ff 	add.w	r5, r0, #4294967295
 8000644:	d229      	bcs.n	800069a <__udivmoddi4+0x2ba>
 8000646:	45a0      	cmp	r8, r4
 8000648:	d927      	bls.n	800069a <__udivmoddi4+0x2ba>
 800064a:	3802      	subs	r0, #2
 800064c:	441c      	add	r4, r3
 800064e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000652:	eba4 0408 	sub.w	r4, r4, r8
 8000656:	fba0 8902 	umull	r8, r9, r0, r2
 800065a:	454c      	cmp	r4, r9
 800065c:	46c6      	mov	lr, r8
 800065e:	464d      	mov	r5, r9
 8000660:	d315      	bcc.n	800068e <__udivmoddi4+0x2ae>
 8000662:	d012      	beq.n	800068a <__udivmoddi4+0x2aa>
 8000664:	b156      	cbz	r6, 800067c <__udivmoddi4+0x29c>
 8000666:	ebba 030e 	subs.w	r3, sl, lr
 800066a:	eb64 0405 	sbc.w	r4, r4, r5
 800066e:	fa04 f707 	lsl.w	r7, r4, r7
 8000672:	40cb      	lsrs	r3, r1
 8000674:	431f      	orrs	r7, r3
 8000676:	40cc      	lsrs	r4, r1
 8000678:	6037      	str	r7, [r6, #0]
 800067a:	6074      	str	r4, [r6, #4]
 800067c:	2100      	movs	r1, #0
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	4618      	mov	r0, r3
 8000684:	e6f8      	b.n	8000478 <__udivmoddi4+0x98>
 8000686:	4690      	mov	r8, r2
 8000688:	e6e0      	b.n	800044c <__udivmoddi4+0x6c>
 800068a:	45c2      	cmp	sl, r8
 800068c:	d2ea      	bcs.n	8000664 <__udivmoddi4+0x284>
 800068e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000692:	eb69 0503 	sbc.w	r5, r9, r3
 8000696:	3801      	subs	r0, #1
 8000698:	e7e4      	b.n	8000664 <__udivmoddi4+0x284>
 800069a:	4628      	mov	r0, r5
 800069c:	e7d7      	b.n	800064e <__udivmoddi4+0x26e>
 800069e:	4640      	mov	r0, r8
 80006a0:	e791      	b.n	80005c6 <__udivmoddi4+0x1e6>
 80006a2:	4681      	mov	r9, r0
 80006a4:	e7be      	b.n	8000624 <__udivmoddi4+0x244>
 80006a6:	4601      	mov	r1, r0
 80006a8:	e778      	b.n	800059c <__udivmoddi4+0x1bc>
 80006aa:	3802      	subs	r0, #2
 80006ac:	443c      	add	r4, r7
 80006ae:	e745      	b.n	800053c <__udivmoddi4+0x15c>
 80006b0:	4608      	mov	r0, r1
 80006b2:	e708      	b.n	80004c6 <__udivmoddi4+0xe6>
 80006b4:	f1a8 0802 	sub.w	r8, r8, #2
 80006b8:	443d      	add	r5, r7
 80006ba:	e72b      	b.n	8000514 <__udivmoddi4+0x134>

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80006c0:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80006c2:	b170      	cbz	r0, 80006e2 <LAN8742_RegisterBusIO+0x22>
 80006c4:	68cc      	ldr	r4, [r1, #12]
 80006c6:	b164      	cbz	r4, 80006e2 <LAN8742_RegisterBusIO+0x22>
 80006c8:	688a      	ldr	r2, [r1, #8]
 80006ca:	b152      	cbz	r2, 80006e2 <LAN8742_RegisterBusIO+0x22>
 80006cc:	690b      	ldr	r3, [r1, #16]
 80006ce:	b143      	cbz	r3, 80006e2 <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 80006d0:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80006d2:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80006d4:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80006d6:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80006d8:	6144      	str	r4, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80006da:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80006dc:	6183      	str	r3, [r0, #24]
  
  return LAN8742_STATUS_OK;
 80006de:	2000      	movs	r0, #0
 80006e0:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006e6:	bd30      	pop	{r4, r5, pc}

080006e8 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80006e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80006ea:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 80006ec:	6846      	ldr	r6, [r0, #4]
 {
 80006ee:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80006f0:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d136      	bne.n	8000764 <LAN8742_Init+0x7c>
   {
     if(pObj->IO.Init != 0)
 80006f6:	6883      	ldr	r3, [r0, #8]
 80006f8:	b103      	cbz	r3, 80006fc <LAN8742_Init+0x14>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80006fa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80006fc:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80006fe:	2500      	movs	r5, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000700:	6023      	str	r3, [r4, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	aa01      	add	r2, sp, #4
 8000706:	2112      	movs	r1, #18
 8000708:	4630      	mov	r0, r6
 800070a:	4798      	blx	r3
 800070c:	2800      	cmp	r0, #0
 800070e:	db1d      	blt.n	800074c <LAN8742_Init+0x64>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000710:	9b01      	ldr	r3, [sp, #4]
 8000712:	f003 031f 	and.w	r3, r3, #31
 8000716:	42b3      	cmp	r3, r6
 8000718:	d11a      	bne.n	8000750 <LAN8742_Init+0x68>
       {
         pObj->DevAddr = addr;
         status = LAN8742_STATUS_OK;
 800071a:	2500      	movs	r5, #0
         pObj->DevAddr = addr;
 800071c:	6026      	str	r6, [r4, #0]
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800071e:	6820      	ldr	r0, [r4, #0]
 8000720:	281f      	cmp	r0, #31
 8000722:	d83a      	bhi.n	800079a <LAN8742_Init+0xb2>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000724:	b97d      	cbnz	r5, 8000746 <LAN8742_Init+0x5e>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000726:	6923      	ldr	r3, [r4, #16]
 8000728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800072c:	4629      	mov	r1, r5
 800072e:	4798      	blx	r3
 8000730:	2800      	cmp	r0, #0
 8000732:	db35      	blt.n	80007a0 <LAN8742_Init+0xb8>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000734:	6963      	ldr	r3, [r4, #20]
 8000736:	aa01      	add	r2, sp, #4
 8000738:	4629      	mov	r1, r5
 800073a:	6820      	ldr	r0, [r4, #0]
 800073c:	4798      	blx	r3
 800073e:	2800      	cmp	r0, #0
 8000740:	da0a      	bge.n	8000758 <LAN8742_Init+0x70>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000742:	f06f 0504 	mvn.w	r5, #4
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8000746:	4628      	mov	r0, r5
 8000748:	b002      	add	sp, #8
 800074a:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 800074c:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000750:	3601      	adds	r6, #1
 8000752:	2e20      	cmp	r6, #32
 8000754:	d1d5      	bne.n	8000702 <LAN8742_Init+0x1a>
 8000756:	e7e2      	b.n	800071e <LAN8742_Init+0x36>
           tickstart = pObj->IO.GetTick();
 8000758:	69a3      	ldr	r3, [r4, #24]
 800075a:	4798      	blx	r3
 800075c:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800075e:	9b01      	ldr	r3, [sp, #4]
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	d40c      	bmi.n	800077e <LAN8742_Init+0x96>
     tickstart =  pObj->IO.GetTick();
 8000764:	69a3      	ldr	r3, [r4, #24]
 8000766:	4798      	blx	r3
 8000768:	4605      	mov	r5, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800076a:	69a3      	ldr	r3, [r4, #24]
 800076c:	4798      	blx	r3
 800076e:	1b40      	subs	r0, r0, r5
 8000770:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000774:	d9f9      	bls.n	800076a <LAN8742_Init+0x82>
     pObj->Is_Initialized = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	2500      	movs	r5, #0
 800077a:	6063      	str	r3, [r4, #4]
 800077c:	e7e3      	b.n	8000746 <LAN8742_Init+0x5e>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800077e:	69a3      	ldr	r3, [r4, #24]
 8000780:	4798      	blx	r3
 8000782:	1b40      	subs	r0, r0, r5
 8000784:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000788:	d80d      	bhi.n	80007a6 <LAN8742_Init+0xbe>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800078a:	6963      	ldr	r3, [r4, #20]
 800078c:	aa01      	add	r2, sp, #4
 800078e:	2100      	movs	r1, #0
 8000790:	6820      	ldr	r0, [r4, #0]
 8000792:	4798      	blx	r3
 8000794:	2800      	cmp	r0, #0
 8000796:	dae2      	bge.n	800075e <LAN8742_Init+0x76>
 8000798:	e7d3      	b.n	8000742 <LAN8742_Init+0x5a>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800079a:	f06f 0502 	mvn.w	r5, #2
 800079e:	e7d2      	b.n	8000746 <LAN8742_Init+0x5e>
         status = LAN8742_STATUS_WRITE_ERROR;
 80007a0:	f06f 0503 	mvn.w	r5, #3
 80007a4:	e7cf      	b.n	8000746 <LAN8742_Init+0x5e>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80007a6:	f06f 0501 	mvn.w	r5, #1
   return status;
 80007aa:	e7cc      	b.n	8000746 <LAN8742_Init+0x5e>

080007ac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80007ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t readval = 0;
 80007ae:	2600      	movs	r6, #0
 80007b0:	ad02      	add	r5, sp, #8
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80007b2:	6943      	ldr	r3, [r0, #20]
{
 80007b4:	4604      	mov	r4, r0
  uint32_t readval = 0;
 80007b6:	f845 6d04 	str.w	r6, [r5, #-4]!
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80007ba:	2101      	movs	r1, #1
 80007bc:	462a      	mov	r2, r5
 80007be:	6800      	ldr	r0, [r0, #0]
 80007c0:	4798      	blx	r3
 80007c2:	42b0      	cmp	r0, r6
 80007c4:	da03      	bge.n	80007ce <LAN8742_GetLinkState+0x22>
  {
    return LAN8742_STATUS_READ_ERROR;
 80007c6:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 80007ca:	b002      	add	sp, #8
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80007ce:	6963      	ldr	r3, [r4, #20]
 80007d0:	462a      	mov	r2, r5
 80007d2:	2101      	movs	r1, #1
 80007d4:	6820      	ldr	r0, [r4, #0]
 80007d6:	4798      	blx	r3
 80007d8:	2800      	cmp	r0, #0
 80007da:	dbf4      	blt.n	80007c6 <LAN8742_GetLinkState+0x1a>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80007dc:	9b01      	ldr	r3, [sp, #4]
 80007de:	075b      	lsls	r3, r3, #29
 80007e0:	d52c      	bpl.n	800083c <LAN8742_GetLinkState+0x90>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80007e2:	6963      	ldr	r3, [r4, #20]
 80007e4:	462a      	mov	r2, r5
 80007e6:	4631      	mov	r1, r6
 80007e8:	6820      	ldr	r0, [r4, #0]
 80007ea:	4798      	blx	r3
 80007ec:	2800      	cmp	r0, #0
 80007ee:	dbea      	blt.n	80007c6 <LAN8742_GetLinkState+0x1a>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80007f0:	9b01      	ldr	r3, [sp, #4]
 80007f2:	04de      	lsls	r6, r3, #19
 80007f4:	d40e      	bmi.n	8000814 <LAN8742_GetLinkState+0x68>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80007f6:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 80007fa:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 80007fe:	d101      	bne.n	8000804 <LAN8742_GetLinkState+0x58>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000800:	2002      	movs	r0, #2
 8000802:	e7e2      	b.n	80007ca <LAN8742_GetLinkState+0x1e>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000804:	0498      	lsls	r0, r3, #18
 8000806:	d501      	bpl.n	800080c <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000808:	2003      	movs	r0, #3
 800080a:	e7de      	b.n	80007ca <LAN8742_GetLinkState+0x1e>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800080c:	05d9      	lsls	r1, r3, #23
 800080e:	d513      	bpl.n	8000838 <LAN8742_GetLinkState+0x8c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000810:	2004      	movs	r0, #4
 8000812:	e7da      	b.n	80007ca <LAN8742_GetLinkState+0x1e>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000814:	6963      	ldr	r3, [r4, #20]
 8000816:	462a      	mov	r2, r5
 8000818:	211f      	movs	r1, #31
 800081a:	6820      	ldr	r0, [r4, #0]
 800081c:	4798      	blx	r3
 800081e:	2800      	cmp	r0, #0
 8000820:	dbd1      	blt.n	80007c6 <LAN8742_GetLinkState+0x1a>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000822:	9b01      	ldr	r3, [sp, #4]
 8000824:	04da      	lsls	r2, r3, #19
 8000826:	d50b      	bpl.n	8000840 <LAN8742_GetLinkState+0x94>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000828:	f003 031c 	and.w	r3, r3, #28
 800082c:	2b18      	cmp	r3, #24
 800082e:	d0e7      	beq.n	8000800 <LAN8742_GetLinkState+0x54>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000830:	2b08      	cmp	r3, #8
 8000832:	d0e9      	beq.n	8000808 <LAN8742_GetLinkState+0x5c>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000834:	2b14      	cmp	r3, #20
 8000836:	d0eb      	beq.n	8000810 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000838:	2005      	movs	r0, #5
 800083a:	e7c6      	b.n	80007ca <LAN8742_GetLinkState+0x1e>
    return LAN8742_STATUS_LINK_DOWN;    
 800083c:	2001      	movs	r0, #1
 800083e:	e7c4      	b.n	80007ca <LAN8742_GetLinkState+0x1e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000840:	2006      	movs	r0, #6
 8000842:	e7c2      	b.n	80007ca <LAN8742_GetLinkState+0x1e>

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_InitTick+0x40>)
{
 8000848:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 800084a:	7818      	ldrb	r0, [r3, #0]
 800084c:	b908      	cbnz	r0, 8000852 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <HAL_InitTick+0x44>)
 8000858:	fbb3 f3f0 	udiv	r3, r3, r0
 800085c:	6810      	ldr	r0, [r2, #0]
 800085e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000862:	f000 f8bd 	bl	80009e0 <HAL_SYSTICK_Config>
 8000866:	4604      	mov	r4, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d1f0      	bne.n	800084e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	2d0f      	cmp	r5, #15
 800086e:	d8ee      	bhi.n	800084e <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000870:	4602      	mov	r2, r0
 8000872:	4629      	mov	r1, r5
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f000 f86c 	bl	8000954 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_InitTick+0x48>)
 800087e:	4620      	mov	r0, r4
 8000880:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000882:	bd38      	pop	{r3, r4, r5, pc}
 8000884:	24000000 	.word	0x24000000
 8000888:	24000024 	.word	0x24000024
 800088c:	24000004 	.word	0x24000004

08000890 <HAL_Init>:
{
 8000890:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000892:	2003      	movs	r0, #3
 8000894:	f000 f84c 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000898:	f001 fb9a 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 800089c:	490f      	ldr	r1, [pc, #60]	; (80008dc <HAL_Init+0x4c>)
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_Init+0x50>)
 80008a0:	698b      	ldr	r3, [r1, #24]
 80008a2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	f003 031f 	and.w	r3, r3, #31
 80008ac:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ae:	698b      	ldr	r3, [r1, #24]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	5cd3      	ldrb	r3, [r2, r3]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_Init+0x54>)
 80008b8:	f003 031f 	and.w	r3, r3, #31
 80008bc:	fa20 f303 	lsr.w	r3, r0, r3
 80008c0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_Init+0x58>)
 80008c4:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffbc 	bl	8000844 <HAL_InitTick>
 80008cc:	4604      	mov	r4, r0
 80008ce:	b918      	cbnz	r0, 80008d8 <HAL_Init+0x48>
  HAL_MspInit();
 80008d0:	f00a fc32 	bl	800b138 <HAL_MspInit>
}
 80008d4:	4620      	mov	r0, r4
 80008d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80008d8:	2401      	movs	r4, #1
 80008da:	e7fb      	b.n	80008d4 <HAL_Init+0x44>
 80008dc:	58024400 	.word	0x58024400
 80008e0:	0800f33d 	.word	0x0800f33d
 80008e4:	24000028 	.word	0x24000028
 80008e8:	24000024 	.word	0x24000024

080008ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <HAL_IncTick+0x10>)
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_IncTick+0x14>)
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	440b      	add	r3, r1
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	24000674 	.word	0x24000674
 8000900:	24000000 	.word	0x24000000

08000904 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <HAL_GetTick+0x8>)
 8000906:	6818      	ldr	r0, [r3, #0]
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	24000674 	.word	0x24000674

08000910 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <HAL_GetREVID+0x8>)
 8000912:	6818      	ldr	r0, [r3, #0]
}
 8000914:	0c00      	lsrs	r0, r0, #16
 8000916:	4770      	bx	lr
 8000918:	5c001000 	.word	0x5c001000

0800091c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800091e:	6853      	ldr	r3, [r2, #4]
 8000920:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000924:	4318      	orrs	r0, r3
 8000926:	6050      	str	r0, [r2, #4]
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400

08000930 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000932:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000936:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800093e:	041b      	lsls	r3, r3, #16
 8000940:	0c1b      	lsrs	r3, r3, #16
 8000942:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800094a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800094c:	60d3      	str	r3, [r2, #12]
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000956:	b530      	push	{r4, r5, lr}
 8000958:	68dc      	ldr	r4, [r3, #12]
 800095a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	2b04      	cmp	r3, #4
 8000966:	bf28      	it	cs
 8000968:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000970:	bf8c      	ite	hi
 8000972:	3c03      	subhi	r4, #3
 8000974:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000976:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800097a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000980:	ea01 0103 	and.w	r1, r1, r3
 8000984:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	fa05 f404 	lsl.w	r4, r5, r4
 800098c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000990:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	ea42 0201 	orr.w	r2, r2, r1
 8000998:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800099c:	db07      	blt.n	80009ae <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009a8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80009ac:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	f000 000f 	and.w	r0, r0, #15
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <HAL_NVIC_SetPriority+0x6c>)
 80009b6:	541a      	strb	r2, [r3, r0]
 80009b8:	bd30      	pop	{r4, r5, pc}
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00
 80009c0:	e000ed14 	.word	0xe000ed14

080009c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009c4:	2800      	cmp	r0, #0
 80009c6:	db08      	blt.n	80009da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c8:	0942      	lsrs	r2, r0, #5
 80009ca:	2301      	movs	r3, #1
 80009cc:	f000 001f 	and.w	r0, r0, #31
 80009d0:	fa03 f000 	lsl.w	r0, r3, r0
 80009d4:	4b01      	ldr	r3, [pc, #4]	; (80009dc <HAL_NVIC_EnableIRQ+0x18>)
 80009d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	3801      	subs	r0, #1
 80009e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009e6:	d20a      	bcs.n	80009fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	21f0      	movs	r1, #240	; 0xf0
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a0c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_MPU_Disable+0x18>)
 8000a12:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a18:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_MPU_Disable+0x1c>)
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	e000ed90 	.word	0xe000ed90

08000a2c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MPU_Enable+0x20>)
 8000a34:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a36:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a42:	f3bf 8f6f 	isb	sy
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00
 8000a4c:	e000ed90 	.word	0xe000ed90

08000a50 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000a50:	7843      	ldrb	r3, [r0, #1]
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_MPU_ConfigRegion+0x4c>)
{
 8000a54:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8000a56:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000a58:	7801      	ldrb	r1, [r0, #0]
 8000a5a:	b1d9      	cbz	r1, 8000a94 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000a5c:	6843      	ldr	r3, [r0, #4]
 8000a5e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a60:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a62:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a64:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a66:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a6a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000a6c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a6e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a72:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a74:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a78:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a7a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a7e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a84:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000a8a:	7a01      	ldrb	r1, [r0, #8]
 8000a8c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a90:	6113      	str	r3, [r2, #16]
 8000a92:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8000a94:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8000a96:	6111      	str	r1, [r2, #16]
 8000a98:	bd10      	pop	{r4, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000ed90 	.word	0xe000ed90

08000aa0 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000aa0:	688b      	ldr	r3, [r1, #8]
 8000aa2:	680a      	ldr	r2, [r1, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
              macconf->SourceAddrControl |
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000aa4:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000aa8:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000aaa:	7c0b      	ldrb	r3, [r1, #16]
 8000aac:	2b00      	cmp	r3, #0
{
 8000aae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000ab2:	bf08      	it	eq
 8000ab4:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
{
 8000ab8:	b085      	sub	sp, #20
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000aba:	bf18      	it	ne
 8000abc:	2300      	movne	r3, #0
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000abe:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000ac2:	7b4f      	ldrb	r7, [r1, #13]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000ac4:	9300      	str	r3, [sp, #0]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000ac6:	7c4b      	ldrb	r3, [r1, #17]
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000ac8:	7b8e      	ldrb	r6, [r1, #14]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000aca:	2b00      	cmp	r3, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000acc:	7bcd      	ldrb	r5, [r1, #15]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000ace:	7c8c      	ldrb	r4, [r1, #18]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000ad0:	bf0c      	ite	eq
 8000ad2:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8000ad6:	2300      	movne	r3, #0
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000ad8:	f891 901c 	ldrb.w	r9, [r1, #28]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	694b      	ldr	r3, [r1, #20]
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000ae0:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	698b      	ldr	r3, [r1, #24]
 8000ae8:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000aea:	7f8a      	ldrb	r2, [r1, #30]
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8000af4:	2200      	movne	r2, #0
 8000af6:	9202      	str	r2, [sp, #8]
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000af8:	7fca      	ldrb	r2, [r1, #31]
 8000afa:	9203      	str	r2, [sp, #12]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000afc:	f891 2020 	ldrb.w	r2, [r1, #32]
 8000b00:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000b02:	6802      	ldr	r2, [r0, #0]
 8000b04:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000b06:	f8d2 a000 	ldr.w	sl, [r2]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000b0a:	bf08      	it	eq
 8000b0c:	f44f 7880 	moveq.w	r8, #256	; 0x100
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000b10:	ea43 0300 	orr.w	r3, r3, r0
 8000b14:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000b16:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000b1a:	bf18      	it	ne
 8000b1c:	f04f 0800 	movne.w	r8, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000b20:	4303      	orrs	r3, r0
 8000b22:	9803      	ldr	r0, [sp, #12]
 8000b24:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 8000b28:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 8000b2c:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 8000b30:	ea43 030a 	orr.w	r3, r3, sl
 8000b34:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
 8000b38:	ea43 53ce 	orr.w	r3, r3, lr, lsl #23
 8000b3c:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 8000b40:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8000b44:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8000b48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4c:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8000b50:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000b54:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000b58:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8000b5c:	9800      	ldr	r0, [sp, #0]
 8000b5e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 8000b62:	4303      	orrs	r3, r0
 8000b64:	9801      	ldr	r0, [sp, #4]
 8000b66:	4303      	orrs	r3, r0
 8000b68:	9802      	ldr	r0, [sp, #8]
 8000b6a:	4303      	orrs	r3, r0
 8000b6c:	ea43 0308 	orr.w	r3, r3, r8
 8000b70:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000b72:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000b74:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000b78:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000b7c:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000b7e:	6853      	ldr	r3, [r2, #4]
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000b80:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000b84:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000b88:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000b8c:	bf0c      	ite	eq
 8000b8e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8000b92:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000b94:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8000b98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b9c:	f023 0307 	bic.w	r3, r3, #7
 8000ba0:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8000ba4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8000ba6:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 8000ba8:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000baa:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000bae:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8000bb2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000bb4:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000bb8:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000bbc:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000bbe:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000bc0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000bc2:	68d3      	ldr	r3, [r2, #12]
 8000bc4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8000bc8:	f023 0301 	bic.w	r3, r3, #1
 8000bcc:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000bce:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000bd2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000bd6:	60d3      	str	r3, [r2, #12]
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000bd8:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 8000bdc:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000bde:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000be0:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000be4:	bf0c      	ite	eq
 8000be6:	2080      	moveq	r0, #128	; 0x80
 8000be8:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000bea:	041b      	lsls	r3, r3, #16
 8000bec:	0c1b      	lsrs	r3, r3, #16
 8000bee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bf2:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8000bf4:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000bf6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8000bfa:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000bfe:	4303      	orrs	r3, r0
 8000c00:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000c02:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000c06:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000c0a:	f020 0003 	bic.w	r0, r0, #3
 8000c0e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000c10:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000c14:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000c18:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000c1e:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8000c22:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8000c26:	4303      	orrs	r3, r0
 8000c28:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000c2c:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000c30:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000c34:	2b00      	cmp	r3, #0

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000c36:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 8000c3a:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000c3e:	bf0c      	ite	eq
 8000c40:	2040      	moveq	r0, #64	; 0x40
 8000c42:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000c44:	432b      	orrs	r3, r5
 8000c46:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8000c4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c4e:	4303      	orrs	r3, r0
 8000c50:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8000c54:	b005      	add	sp, #20
 8000c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000c5c <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000c5c:	6802      	ldr	r2, [r0, #0]
 8000c5e:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8000c62:	6803      	ldr	r3, [r0, #0]
 8000c64:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 8000c68:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000c6a:	f023 0302 	bic.w	r3, r3, #2
 8000c6e:	680c      	ldr	r4, [r1, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000c70:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000c72:	4323      	orrs	r3, r4
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000c74:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000c78:	6003      	str	r3, [r0, #0]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000c7a:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000c7c:	5910      	ldr	r0, [r2, r4]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000c7e:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000c80:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000c84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8000c88:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000c8a:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000c8e:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000c90:	4303      	orrs	r3, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000c92:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000c94:	5113      	str	r3, [r2, r4]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000c96:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000c9a:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000c9c:	6825      	ldr	r5, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000c9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <ETH_SetDMAConfig+0x88>)
 8000ca4:	4028      	ands	r0, r5
 8000ca6:	4303      	orrs	r3, r0

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8000ca8:	7d08      	ldrb	r0, [r1, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000caa:	6023      	str	r3, [r4, #0]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000cac:	f241 1404 	movw	r4, #4356	; 0x1104
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000cb0:	7f4b      	ldrb	r3, [r1, #29]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000cb2:	5915      	ldr	r5, [r2, r4]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000cb4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8000cb6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8000cba:	6908      	ldr	r0, [r1, #16]
 8000cbc:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <ETH_SetDMAConfig+0x8c>)
 8000cc0:	4028      	ands	r0, r5

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000cc2:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000cc4:	4303      	orrs	r3, r0
 8000cc6:	5113      	str	r3, [r2, r4]
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000cc8:	f241 1408 	movw	r4, #4360	; 0x1108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000ccc:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000cce:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000cd0:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000cd4:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8000cd8:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	5113      	str	r3, [r2, r4]
 8000ce0:	bd30      	pop	{r4, r5, pc}
 8000ce2:	bf00      	nop
 8000ce4:	fffec000 	.word	0xfffec000
 8000ce8:	ffc0efef 	.word	0xffc0efef

08000cec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8000cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8000cf0:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	eb00 0986 	add.w	r9, r0, r6, lsl #2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t descnbr = 0, idx;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000cf8:	f8d9 3018 	ldr.w	r3, [r9, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	da03      	bge.n	8000d0a <ETH_Prepare_Tx_Descriptors+0x1e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);

      return HAL_ETH_ERROR_BUSY;
 8000d02:	2002      	movs	r0, #2

  dmatxdesclist->CurTxDesc = descidx;

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8000d04:	b003      	add	sp, #12
 8000d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8000d0a:	680c      	ldr	r4, [r1, #0]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8000d0c:	688f      	ldr	r7, [r1, #8]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8000d0e:	f014 0e04 	ands.w	lr, r4, #4
 8000d12:	d02a      	beq.n	8000d6a <ETH_Prepare_Tx_Descriptors+0x7e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8000d14:	68dd      	ldr	r5, [r3, #12]
 8000d16:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000d18:	0c2d      	lsrs	r5, r5, #16
 8000d1a:	042d      	lsls	r5, r5, #16
 8000d1c:	432a      	orrs	r2, r5
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8000d1e:	6805      	ldr	r5, [r0, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8000d20:	60da      	str	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d28:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8000d2a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8000d2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d30:	662a      	str	r2, [r5, #96]	; 0x60
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8000d32:	0722      	lsls	r2, r4, #28
 8000d34:	d519      	bpl.n	8000d6a <ETH_Prepare_Tx_Descriptors+0x7e>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	fa1f fc82 	uxth.w	ip, r2
 8000d3c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000d3e:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8000d42:	609a      	str	r2, [r3, #8]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d4a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	f422 2c40 	bic.w	ip, r2, #786432	; 0xc0000
 8000d52:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000d54:	ea4c 0202 	orr.w	r2, ip, r2
 8000d58:	60da      	str	r2, [r3, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8000d5a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8000d5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d60:	666a      	str	r2, [r5, #100]	; 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8000d62:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000d64:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000d68:	652a      	str	r2, [r5, #80]	; 0x50
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8000d6a:	f014 0810 	ands.w	r8, r4, #16
 8000d6e:	d00b      	beq.n	8000d88 <ETH_Prepare_Tx_Descriptors+0x9c>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8000d70:	689d      	ldr	r5, [r3, #8]
 8000d72:	698a      	ldr	r2, [r1, #24]
 8000d74:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8000d78:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000d7c:	432a      	orrs	r2, r5
 8000d7e:	609a      	str	r2, [r3, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000d86:	60da      	str	r2, [r3, #12]
  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8000d88:	f014 0c14 	ands.w	ip, r4, #20
 8000d8c:	d018      	beq.n	8000dc0 <ETH_Prepare_Tx_Descriptors+0xd4>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8000d8e:	68da      	ldr	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8000d90:	1c75      	adds	r5, r6, #1
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8000d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8000d96:	2d03      	cmp	r5, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8000d98:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8000d9a:	bf88      	it	hi
 8000d9c:	1ef5      	subhi	r5, r6, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000da4:	60da      	str	r2, [r3, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000da6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8000daa:	6992      	ldr	r2, [r2, #24]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8000dac:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8000db0:	f1bc 0f00 	cmp.w	ip, #0
 8000db4:	da6e      	bge.n	8000e94 <ETH_Prepare_Tx_Descriptors+0x1a8>
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	e7a0      	b.n	8000d02 <ETH_Prepare_Tx_Descriptors+0x16>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8000dc0:	4635      	mov	r5, r6
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8000dc2:	683a      	ldr	r2, [r7, #0]
  descnbr += 1U;
 8000dc4:	f10c 0c01 	add.w	ip, ip, #1
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8000dc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	f422 5a7f 	bic.w	sl, r2, #16320	; 0x3fc0
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
 8000dd6:	ea4a 0202 	orr.w	r2, sl, r2
 8000dda:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8000fc8 <ETH_Prepare_Tx_Descriptors+0x2dc>
 8000dde:	609a      	str	r2, [r3, #8]
  if(txbuffer->next != NULL)
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d05a      	beq.n	8000e9c <ETH_Prepare_Tx_Descriptors+0x1b0>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8000de6:	6817      	ldr	r7, [r2, #0]
 8000de8:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8000dea:	689f      	ldr	r7, [r3, #8]
 8000dec:	ea07 0a0a 	and.w	sl, r7, sl
 8000df0:	6857      	ldr	r7, [r2, #4]
 8000df2:	ea4a 4707 	orr.w	r7, sl, r7, lsl #16
 8000df6:	609f      	str	r7, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8000df8:	68df      	ldr	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8000dfa:	f1b8 0f00 	cmp.w	r8, #0
 8000dfe:	d054      	beq.n	8000eaa <ETH_Prepare_Tx_Descriptors+0x1be>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8000e00:	f427 08f0 	bic.w	r8, r7, #7864320	; 0x780000
 8000e04:	6a0f      	ldr	r7, [r1, #32]
 8000e06:	ea48 47c7 	orr.w	r7, r8, r7, lsl #19
 8000e0a:	60df      	str	r7, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8000e0c:	68df      	ldr	r7, [r3, #12]
 8000e0e:	ea4f 4897 	mov.w	r8, r7, lsr #18
 8000e12:	69cf      	ldr	r7, [r1, #28]
 8000e14:	ea4f 4888 	mov.w	r8, r8, lsl #18
 8000e18:	ea48 0707 	orr.w	r7, r8, r7
 8000e1c:	60df      	str	r7, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8000e1e:	68df      	ldr	r7, [r3, #12]
 8000e20:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8000e24:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8000e26:	f1be 0f00 	cmp.w	lr, #0
 8000e2a:	d006      	beq.n	8000e3a <ETH_Prepare_Tx_Descriptors+0x14e>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8000e2c:	689f      	ldr	r7, [r3, #8]
 8000e2e:	f427 4e40 	bic.w	lr, r7, #49152	; 0xc000
 8000e32:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8000e34:	ea4e 0707 	orr.w	r7, lr, r7
 8000e38:	609f      	str	r7, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8000e3a:	68df      	ldr	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8000e3c:	07a4      	lsls	r4, r4, #30
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8000e3e:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8000e42:	60df      	str	r7, [r3, #12]
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8000e44:	68df      	ldr	r7, [r3, #12]
 8000e46:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 8000e4a:	60df      	str	r7, [r3, #12]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8000e4c:	68df      	ldr	r7, [r3, #12]
 8000e4e:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000e52:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8000e54:	d505      	bpl.n	8000e62 <ETH_Prepare_Tx_Descriptors+0x176>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8000e56:	68df      	ldr	r7, [r3, #12]
 8000e58:	68cc      	ldr	r4, [r1, #12]
 8000e5a:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8000e5e:	433c      	orrs	r4, r7
 8000e60:	60dc      	str	r4, [r3, #12]
 8000e62:	4f59      	ldr	r7, [pc, #356]	; (8000fc8 <ETH_Prepare_Tx_Descriptors+0x2dc>)
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8000e64:	f8df b164 	ldr.w	fp, [pc, #356]	; 8000fcc <ETH_Prepare_Tx_Descriptors+0x2e0>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8000e68:	f8df e164 	ldr.w	lr, [pc, #356]	; 8000fd0 <ETH_Prepare_Tx_Descriptors+0x2e4>
  while (txbuffer->next != NULL)
 8000e6c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8000e70:	f1b8 0f00 	cmp.w	r8, #0
 8000e74:	d133      	bne.n	8000ede <ETH_Prepare_Tx_Descriptors+0x1f2>
  if(ItMode != ((uint32_t)RESET))
 8000e76:	9a01      	ldr	r2, [sp, #4]
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	f000 80a0 	beq.w	8000fbe <ETH_Prepare_Tx_Descriptors+0x2d2>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8000e84:	609a      	str	r2, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e8c:	60da      	str	r2, [r3, #12]
  dmatxdesclist->CurTxDesc = descidx;
 8000e8e:	6285      	str	r5, [r0, #40]	; 0x28
  return HAL_ETH_ERROR_NONE;
 8000e90:	2000      	movs	r0, #0
 8000e92:	e737      	b.n	8000d04 <ETH_Prepare_Tx_Descriptors+0x18>
 8000e94:	4613      	mov	r3, r2
    descnbr += 1U;
 8000e96:	f04f 0c01 	mov.w	ip, #1
 8000e9a:	e792      	b.n	8000dc2 <ETH_Prepare_Tx_Descriptors+0xd6>
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000e9c:	605a      	str	r2, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	ea02 020a 	and.w	r2, r2, sl
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	463a      	mov	r2, r7
 8000ea8:	e7a6      	b.n	8000df8 <ETH_Prepare_Tx_Descriptors+0x10c>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8000eaa:	f427 48ff 	bic.w	r8, r7, #32640	; 0x7f80
 8000eae:	684f      	ldr	r7, [r1, #4]
 8000eb0:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
 8000eb4:	ea48 0707 	orr.w	r7, r8, r7
 8000eb8:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8000eba:	07e7      	lsls	r7, r4, #31
 8000ebc:	d506      	bpl.n	8000ecc <ETH_Prepare_Tx_Descriptors+0x1e0>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8000ebe:	68df      	ldr	r7, [r3, #12]
 8000ec0:	f427 3840 	bic.w	r8, r7, #196608	; 0x30000
 8000ec4:	694f      	ldr	r7, [r1, #20]
 8000ec6:	ea48 0707 	orr.w	r7, r8, r7
 8000eca:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8000ecc:	06a7      	lsls	r7, r4, #26
 8000ece:	d5aa      	bpl.n	8000e26 <ETH_Prepare_Tx_Descriptors+0x13a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8000ed0:	68df      	ldr	r7, [r3, #12]
 8000ed2:	f027 6840 	bic.w	r8, r7, #201326592	; 0xc000000
 8000ed6:	690f      	ldr	r7, [r1, #16]
 8000ed8:	ea48 0707 	orr.w	r7, r8, r7
 8000edc:	e7a2      	b.n	8000e24 <ETH_Prepare_Tx_Descriptors+0x138>
    INCR_TX_DESC_INDEX(descidx, 1U);
 8000ede:	1c6c      	adds	r4, r5, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8000ee0:	68da      	ldr	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8000ee2:	2c03      	cmp	r4, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8000ee4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8000ee8:	bf88      	it	hi
 8000eea:	1eec      	subhi	r4, r5, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8000eec:	60da      	str	r2, [r3, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000eee:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8000ef2:	699b      	ldr	r3, [r3, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000efa:	60da      	str	r2, [r3, #12]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	da13      	bge.n	8000f2a <ETH_Prepare_Tx_Descriptors+0x23e>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000f02:	f8d9 1018 	ldr.w	r1, [r9, #24]
      for(idx = 0; idx < descnbr; idx ++)
 8000f06:	2200      	movs	r2, #0
 8000f08:	4594      	cmp	ip, r2
 8000f0a:	f43f aefa 	beq.w	8000d02 <ETH_Prepare_Tx_Descriptors+0x16>
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8000f0e:	68cb      	ldr	r3, [r1, #12]
      for(idx = 0; idx < descnbr; idx ++)
 8000f10:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8000f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f16:	60cb      	str	r3, [r1, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8000f18:	1c73      	adds	r3, r6, #1
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	bf88      	it	hi
 8000f1e:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000f20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for(idx = 0; idx < descnbr; idx ++)
 8000f24:	461e      	mov	r6, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000f26:	6989      	ldr	r1, [r1, #24]
 8000f28:	e7ee      	b.n	8000f08 <ETH_Prepare_Tx_Descriptors+0x21c>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8000f2a:	f8d8 2000 	ldr.w	r2, [r8]
    descnbr += 1U;
 8000f2e:	f10c 0c01 	add.w	ip, ip, #1
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8000f32:	601a      	str	r2, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8000f34:	689d      	ldr	r5, [r3, #8]
 8000f36:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000f3a:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8000f3e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000f42:	432a      	orrs	r2, r5
 8000f44:	609a      	str	r2, [r3, #8]
    if (txbuffer->next != NULL)
 8000f46:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8000f4a:	b312      	cbz	r2, 8000f92 <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8000f4c:	6815      	ldr	r5, [r2, #0]
 8000f4e:	605d      	str	r5, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8000f50:	689d      	ldr	r5, [r3, #8]
 8000f52:	ea05 0807 	and.w	r8, r5, r7
 8000f56:	6855      	ldr	r5, [r2, #4]
 8000f58:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 8000f5c:	609d      	str	r5, [r3, #8]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8000f5e:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8000f62:	68dd      	ldr	r5, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8000f64:	f01a 0f10 	tst.w	sl, #16
 8000f68:	d019      	beq.n	8000f9e <ETH_Prepare_Tx_Descriptors+0x2b2>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8000f6a:	ea05 080e 	and.w	r8, r5, lr
 8000f6e:	69cd      	ldr	r5, [r1, #28]
 8000f70:	ea48 0505 	orr.w	r5, r8, r5
 8000f74:	60dd      	str	r5, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8000f76:	68dd      	ldr	r5, [r3, #12]
 8000f78:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8000f7c:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8000f7e:	68dd      	ldr	r5, [r3, #12]
 8000f80:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000f84:	60dd      	str	r5, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8000f86:	68dd      	ldr	r5, [r3, #12]
 8000f88:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 8000f8c:	60dd      	str	r5, [r3, #12]
 8000f8e:	4625      	mov	r5, r4
 8000f90:	e76c      	b.n	8000e6c <ETH_Prepare_Tx_Descriptors+0x180>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000f92:	605a      	str	r2, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	403a      	ands	r2, r7
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	4642      	mov	r2, r8
 8000f9c:	e7df      	b.n	8000f5e <ETH_Prepare_Tx_Descriptors+0x272>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8000f9e:	ea05 080b 	and.w	r8, r5, fp
 8000fa2:	684d      	ldr	r5, [r1, #4]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8000fa4:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8000fa8:	ea48 0505 	orr.w	r5, r8, r5
 8000fac:	60dd      	str	r5, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8000fae:	d0e6      	beq.n	8000f7e <ETH_Prepare_Tx_Descriptors+0x292>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8000fb0:	68dd      	ldr	r5, [r3, #12]
 8000fb2:	f425 3840 	bic.w	r8, r5, #196608	; 0x30000
 8000fb6:	694d      	ldr	r5, [r1, #20]
 8000fb8:	ea48 0505 	orr.w	r5, r8, r5
 8000fbc:	e7de      	b.n	8000f7c <ETH_Prepare_Tx_Descriptors+0x290>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fc4:	e75e      	b.n	8000e84 <ETH_Prepare_Tx_Descriptors+0x198>
 8000fc6:	bf00      	nop
 8000fc8:	c000ffff 	.word	0xc000ffff
 8000fcc:	ffff8000 	.word	0xffff8000
 8000fd0:	fffc0000 	.word	0xfffc0000

08000fd4 <HAL_ETH_DescAssignMemory>:
  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8000fd4:	b10a      	cbz	r2, 8000fda <HAL_ETH_DescAssignMemory+0x6>
 8000fd6:	2903      	cmp	r1, #3
 8000fd8:	d903      	bls.n	8000fe2 <HAL_ETH_DescAssignMemory+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	65c3      	str	r3, [r0, #92]	; 0x5c
    return HAL_ERROR;
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4770      	bx	lr
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8000fe2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000fe6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8000fe8:	600a      	str	r2, [r1, #0]
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8000fea:	610a      	str	r2, [r1, #16]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8000fec:	68ca      	ldr	r2, [r1, #12]
 8000fee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ff2:	60ca      	str	r2, [r1, #12]
  if(pBuffer2 != NULL)
 8000ff4:	b12b      	cbz	r3, 8001002 <HAL_ETH_DescAssignMemory+0x2e>
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8000ff6:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8000ff8:	614b      	str	r3, [r1, #20]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8000ffa:	68cb      	ldr	r3, [r1, #12]
 8000ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001000:	60cb      	str	r3, [r1, #12]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001002:	68cb      	ldr	r3, [r1, #12]
  return HAL_OK;
 8001004:	2000      	movs	r0, #0
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800100a:	60cb      	str	r3, [r1, #12]
}
 800100c:	4770      	bx	lr

0800100e <HAL_ETH_Start>:
  if(heth->gState == HAL_ETH_STATE_READY)
 800100e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001010:	2910      	cmp	r1, #16
{
 8001012:	b510      	push	{r4, lr}
  if(heth->gState == HAL_ETH_STATE_READY)
 8001014:	d127      	bne.n	8001066 <HAL_ETH_Start+0x58>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001016:	2323      	movs	r3, #35	; 0x23
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001018:	f241 1404 	movw	r4, #4356	; 0x1104
    heth->gState = HAL_ETH_STATE_BUSY;
 800101c:	6543      	str	r3, [r0, #84]	; 0x54
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800101e:	6803      	ldr	r3, [r0, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f042 0202 	orr.w	r2, r2, #2
 8001026:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001030:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800103c:	591a      	ldr	r2, [r3, r4]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	511a      	str	r2, [r3, r4]
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001044:	f241 1408 	movw	r4, #4360	; 0x1108
 8001048:	591a      	ldr	r2, [r3, r4]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	511a      	str	r2, [r3, r4]
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001050:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800105a:	601a      	str	r2, [r3, #0]
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800105c:	2322      	movs	r3, #34	; 0x22
    heth->gState = HAL_ETH_STATE_READY;
 800105e:	6541      	str	r1, [r0, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001060:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
}
 8001068:	bd10      	pop	{r4, pc}

0800106a <HAL_ETH_Stop>:
  if(heth->gState != HAL_ETH_STATE_RESET)
 800106a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800106c:	b30b      	cbz	r3, 80010b2 <HAL_ETH_Stop+0x48>
    heth->gState = HAL_ETH_STATE_BUSY;
 800106e:	2323      	movs	r3, #35	; 0x23
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001070:	f241 1104 	movw	r1, #4356	; 0x1104
    heth->gState = HAL_ETH_STATE_BUSY;
 8001074:	6543      	str	r3, [r0, #84]	; 0x54
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	585a      	ldr	r2, [r3, r1]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	505a      	str	r2, [r3, r1]
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001080:	f241 1108 	movw	r1, #4360	; 0x1108
 8001084:	585a      	ldr	r2, [r3, r1]
 8001086:	f022 0201 	bic.w	r2, r2, #1
 800108a:	505a      	str	r2, [r3, r1]
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001094:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f022 0202 	bic.w	r2, r2, #2
 80010a6:	601a      	str	r2, [r3, #0]
    heth->gState = HAL_ETH_STATE_READY;
 80010a8:	2310      	movs	r3, #16
 80010aa:	6543      	str	r3, [r0, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 80010ac:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 80010ae:	2000      	movs	r0, #0
 80010b0:	4770      	bx	lr
    return HAL_ERROR;
 80010b2:	2001      	movs	r0, #1
}
 80010b4:	4770      	bx	lr

080010b6 <HAL_ETH_Transmit>:
{
 80010b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b8:	4604      	mov	r4, r0
 80010ba:	4615      	mov	r5, r2
  if(pTxConfig == NULL)
 80010bc:	b929      	cbnz	r1, 80010ca <HAL_ETH_Transmit+0x14>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80010be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80010c0:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80010c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
}
 80010c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(heth->gState == HAL_ETH_STATE_READY)
 80010ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	d1fa      	bne.n	80010c6 <HAL_ETH_Transmit+0x10>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f7ff fe0b 	bl	8000cec <ETH_Prepare_Tx_Descriptors>
 80010d6:	b118      	cbz	r0, 80010e0 <HAL_ETH_Transmit+0x2a>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80010d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	e7f1      	b.n	80010c4 <HAL_ETH_Transmit+0xe>
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80010e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010e2:	1d9a      	adds	r2, r3, #6
 80010e4:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	2a03      	cmp	r2, #3
 80010ec:	bf8a      	itet	hi
 80010ee:	3b03      	subhi	r3, #3
 80010f0:	62a2      	strls	r2, [r4, #40]	; 0x28
 80010f2:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80010f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	3206      	adds	r2, #6
 80010fa:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80010fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001102:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001104:	f7ff fbfe 	bl	8000904 <HAL_GetTick>
 8001108:	4607      	mov	r7, r0
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800110a:	68f3      	ldr	r3, [r6, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db03      	blt.n	8001118 <HAL_ETH_Transmit+0x62>
    heth->gState = HAL_ETH_STATE_READY;
 8001110:	2310      	movs	r3, #16
    return HAL_OK;
 8001112:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001114:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_OK;
 8001116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	04d2      	lsls	r2, r2, #19
 8001122:	d508      	bpl.n	8001136 <HAL_ETH_Transmit+0x80>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001124:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001126:	f042 0208 	orr.w	r2, r2, #8
 800112a:	65e2      	str	r2, [r4, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6623      	str	r3, [r4, #96]	; 0x60
        heth->gState = HAL_ETH_STATE_ERROR;
 8001130:	23e0      	movs	r3, #224	; 0xe0
          heth->gState = HAL_ETH_STATE_READY;
 8001132:	6563      	str	r3, [r4, #84]	; 0x54
 8001134:	e7c7      	b.n	80010c6 <HAL_ETH_Transmit+0x10>
      if(Timeout != HAL_MAX_DELAY)
 8001136:	1c6b      	adds	r3, r5, #1
 8001138:	d0e7      	beq.n	800110a <HAL_ETH_Transmit+0x54>
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800113a:	f7ff fbe3 	bl	8000904 <HAL_GetTick>
 800113e:	1bc0      	subs	r0, r0, r7
 8001140:	4285      	cmp	r5, r0
 8001142:	d301      	bcc.n	8001148 <HAL_ETH_Transmit+0x92>
 8001144:	2d00      	cmp	r5, #0
 8001146:	d1e0      	bne.n	800110a <HAL_ETH_Transmit+0x54>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001148:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	65e3      	str	r3, [r4, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001150:	2310      	movs	r3, #16
 8001152:	e7ee      	b.n	8001132 <HAL_ETH_Transmit+0x7c>

08001154 <HAL_ETH_IsRxDataAvailable>:
{
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr != 0U)
 8001156:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8001158:	b96d      	cbnz	r5, 8001176 <HAL_ETH_IsRxDataAvailable+0x22>
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800115a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800115c:	462a      	mov	r2, r5
 800115e:	4629      	mov	r1, r5
 8001160:	2705      	movs	r7, #5
 8001162:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001166:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001168:	68f3      	ldr	r3, [r6, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	da1c      	bge.n	80011a8 <HAL_ETH_IsRxDataAvailable+0x54>
  if(appdesccnt > 0U)
 800116e:	2900      	cmp	r1, #0
 8001170:	d13e      	bne.n	80011f0 <HAL_ETH_IsRxDataAvailable+0x9c>
  dmarxdesclist->AppDescNbr = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	6443      	str	r3, [r0, #68]	; 0x44
    return 0;
 8001176:	2000      	movs	r0, #0
}
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800117a:	68f6      	ldr	r6, [r6, #12]
 800117c:	00b6      	lsls	r6, r6, #2
 800117e:	d50a      	bpl.n	8001196 <HAL_ETH_IsRxDataAvailable+0x42>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001180:	2b03      	cmp	r3, #3
      appdesccnt = 1U;
 8001182:	f04f 0101 	mov.w	r1, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001186:	bf88      	it	hi
 8001188:	1ee3      	subhi	r3, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800118a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800118e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001190:	4622      	mov	r2, r4
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001192:	461c      	mov	r4, r3
 8001194:	e7e8      	b.n	8001168 <HAL_ETH_IsRxDataAvailable+0x14>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001196:	2b03      	cmp	r3, #3
      appdesccnt += 1U;
 8001198:	f101 0101 	add.w	r1, r1, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 800119c:	bf88      	it	hi
 800119e:	1ee3      	subhi	r3, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011a0:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80011a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011a6:	e7f4      	b.n	8001192 <HAL_ETH_IsRxDataAvailable+0x3e>
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80011a8:	3f01      	subs	r7, #1
 80011aa:	d0e0      	beq.n	800116e <HAL_ETH_IsRxDataAvailable+0x1a>
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80011ac:	68f3      	ldr	r3, [r6, #12]
 80011ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011b2:	f104 0301 	add.w	r3, r4, #1
 80011b6:	d0e0      	beq.n	800117a <HAL_ETH_IsRxDataAvailable+0x26>
      appdesccnt += 1U;
 80011b8:	3101      	adds	r1, #1
      if(appdesccnt == 1U)
 80011ba:	2901      	cmp	r1, #1
 80011bc:	bf08      	it	eq
 80011be:	4622      	moveq	r2, r4
      INCR_RX_DESC_INDEX(descidx, 1U);
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	bf88      	it	hi
 80011c4:	1ee3      	subhi	r3, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011c6:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80011ca:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80011cc:	68e5      	ldr	r5, [r4, #12]
 80011ce:	2d00      	cmp	r5, #0
 80011d0:	db09      	blt.n	80011e6 <HAL_ETH_IsRxDataAvailable+0x92>
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80011d2:	68e4      	ldr	r4, [r4, #12]
 80011d4:	0067      	lsls	r7, r4, #1
 80011d6:	d506      	bpl.n	80011e6 <HAL_ETH_IsRxDataAvailable+0x92>
          dmarxdesclist->AppContextDesc = 1;
 80011d8:	2401      	movs	r4, #1
 80011da:	6484      	str	r4, [r0, #72]	; 0x48
          INCR_RX_DESC_INDEX(descidx, 1U);
 80011dc:	191c      	adds	r4, r3, r4
 80011de:	2c03      	cmp	r4, #3
 80011e0:	bf8c      	ite	hi
 80011e2:	3b03      	subhi	r3, #3
 80011e4:	4623      	movls	r3, r4
      dmarxdesclist->CurRxDesc = descidx;
 80011e6:	63c3      	str	r3, [r0, #60]	; 0x3c
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80011e8:	6402      	str	r2, [r0, #64]	; 0x40
      dmarxdesclist->AppDescNbr = appdesccnt;
 80011ea:	6441      	str	r1, [r0, #68]	; 0x44
      return 1;
 80011ec:	2001      	movs	r0, #1
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011f0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80011f4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80011fa:	691c      	ldr	r4, [r3, #16]
 80011fc:	601c      	str	r4, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80011fe:	60de      	str	r6, [r3, #12]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001200:	695c      	ldr	r4, [r3, #20]
 8001202:	b12c      	cbz	r4, 8001210 <HAL_ETH_IsRxDataAvailable+0xbc>
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001204:	695c      	ldr	r4, [r3, #20]
 8001206:	609c      	str	r4, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001208:	68dc      	ldr	r4, [r3, #12]
 800120a:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 800120e:	60dc      	str	r4, [r3, #12]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001210:	68dc      	ldr	r4, [r3, #12]
 8001212:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001216:	60dc      	str	r4, [r3, #12]
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001218:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800121a:	b11c      	cbz	r4, 8001224 <HAL_ETH_IsRxDataAvailable+0xd0>
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800121c:	68dc      	ldr	r4, [r3, #12]
 800121e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8001222:	60dc      	str	r4, [r3, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001224:	1c53      	adds	r3, r2, #1
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001226:	3501      	adds	r5, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001228:	2b03      	cmp	r3, #3
 800122a:	bf8c      	ite	hi
 800122c:	3a03      	subhi	r2, #3
 800122e:	461a      	movls	r2, r3
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001230:	42a9      	cmp	r1, r5
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001232:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001238:	d1df      	bne.n	80011fa <HAL_ETH_IsRxDataAvailable+0xa6>
 800123a:	e79a      	b.n	8001172 <HAL_ETH_IsRxDataAvailable+0x1e>

0800123c <HAL_ETH_GetRxDataBuffer>:
{
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	4605      	mov	r5, r0
  if(rxbuff == NULL)
 8001240:	460c      	mov	r4, r1
 8001242:	b911      	cbnz	r1, 800124a <HAL_ETH_GetRxDataBuffer+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001244:	2001      	movs	r0, #1
 8001246:	65e8      	str	r0, [r5, #92]	; 0x5c
    return HAL_ERROR;
 8001248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(dmarxdesclist->AppDescNbr == 0U)
 800124a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800124c:	b1ab      	cbz	r3, 800127a <HAL_ETH_GetRxDataBuffer+0x3e>
      descidx = dmarxdesclist->FirstAppDesc;
 800124e:	6c29      	ldr	r1, [r5, #64]	; 0x40
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001250:	2600      	movs	r6, #0
 8001252:	6c6a      	ldr	r2, [r5, #68]	; 0x44
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001254:	eb05 0381 	add.w	r3, r5, r1, lsl #2
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001258:	46b6      	mov	lr, r6
 800125a:	1e57      	subs	r7, r2, #1
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800125e:	45be      	cmp	lr, r7
 8001260:	6968      	ldr	r0, [r5, #20]
 8001262:	d310      	bcc.n	8001286 <HAL_ETH_GetRxDataBuffer+0x4a>
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001264:	68da      	ldr	r2, [r3, #12]
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001266:	6919      	ldr	r1, [r3, #16]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001268:	f3c2 020e 	ubfx	r2, r2, #0, #15
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800126c:	6021      	str	r1, [r4, #0]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800126e:	1b92      	subs	r2, r2, r6
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001270:	4282      	cmp	r2, r0
 8001272:	d820      	bhi.n	80012b6 <HAL_ETH_GetRxDataBuffer+0x7a>
    rxbuff->len = lastdesclen;
 8001274:	6062      	str	r2, [r4, #4]
  return HAL_OK;
 8001276:	2000      	movs	r0, #0
}
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800127a:	f7ff ff6b 	bl	8001154 <HAL_ETH_IsRxDataAvailable>
 800127e:	2800      	cmp	r0, #0
 8001280:	d1e5      	bne.n	800124e <HAL_ETH_GetRxDataBuffer+0x12>
      return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001286:	691a      	ldr	r2, [r3, #16]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001288:	6060      	str	r0, [r4, #4]
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800128a:	6022      	str	r2, [r4, #0]
    if(dmarxdesc->BackupAddr1 != 0U)
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	b11a      	cbz	r2, 8001298 <HAL_ETH_GetRxDataBuffer+0x5c>
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001290:	68a4      	ldr	r4, [r4, #8]
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001292:	695a      	ldr	r2, [r3, #20]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001294:	6060      	str	r0, [r4, #4]
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001296:	6022      	str	r2, [r4, #0]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001298:	1c4a      	adds	r2, r1, #1
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800129a:	68de      	ldr	r6, [r3, #12]
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800129c:	68a4      	ldr	r4, [r4, #8]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800129e:	f10e 0e01 	add.w	lr, lr, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 80012a2:	2a03      	cmp	r2, #3
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80012a4:	f3c6 060e 	ubfx	r6, r6, #0, #15
    INCR_RX_DESC_INDEX(descidx, 1U);
 80012a8:	bf88      	it	hi
 80012aa:	1eca      	subhi	r2, r1, #3
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012ac:	eb05 0382 	add.w	r3, r5, r2, lsl #2
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80012b0:	4611      	mov	r1, r2
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	e7d3      	b.n	800125e <HAL_ETH_GetRxDataBuffer+0x22>
  else if(dmarxdesc->BackupAddr1 != 0U)
 80012b6:	6959      	ldr	r1, [r3, #20]
 80012b8:	2900      	cmp	r1, #0
 80012ba:	d0e2      	beq.n	8001282 <HAL_ETH_GetRxDataBuffer+0x46>
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80012bc:	68a1      	ldr	r1, [r4, #8]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80012be:	1a12      	subs	r2, r2, r0
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80012c0:	695b      	ldr	r3, [r3, #20]
    rxbuff->len = heth->Init.RxBuffLen;
 80012c2:	6060      	str	r0, [r4, #4]
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80012c4:	600b      	str	r3, [r1, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80012c6:	604a      	str	r2, [r1, #4]
 80012c8:	e7d5      	b.n	8001276 <HAL_ETH_GetRxDataBuffer+0x3a>

080012ca <HAL_ETH_GetRxDataLength>:
  if(dmarxdesclist->AppDescNbr == 0U)
 80012ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80012cc:	b570      	push	{r4, r5, r6, lr}
 80012ce:	4604      	mov	r4, r0
 80012d0:	460e      	mov	r6, r1
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80012d2:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if(dmarxdesclist->AppDescNbr == 0U)
 80012d4:	b16b      	cbz	r3, 80012f2 <HAL_ETH_GetRxDataLength+0x28>
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80012d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012d8:	442b      	add	r3, r5
 80012da:	1e5a      	subs	r2, r3, #1
 80012dc:	2a03      	cmp	r2, #3
 80012de:	d80e      	bhi.n	80012fe <HAL_ETH_GetRxDataLength+0x34>
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012e0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  return HAL_OK;
 80012e4:	2000      	movs	r0, #0
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012ee:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80012f2:	f7ff ff2f 	bl	8001154 <HAL_ETH_IsRxDataAvailable>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d1ed      	bne.n	80012d6 <HAL_ETH_GetRxDataLength+0xc>
      return HAL_ERROR;
 80012fa:	2001      	movs	r0, #1
}
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80012fe:	1f5a      	subs	r2, r3, #5
 8001300:	e7ee      	b.n	80012e0 <HAL_ETH_GetRxDataLength+0x16>

08001302 <HAL_ETH_BuildRxDescriptors>:
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001302:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001306:	2900      	cmp	r1, #0
 8001308:	d037      	beq.n	800137a <HAL_ETH_BuildRxDescriptors+0x78>
  if(dmarxdesclist->AppContextDesc != 0U)
 800130a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800130c:	b193      	cbz	r3, 8001334 <HAL_ETH_BuildRxDescriptors+0x32>
    totalappdescnbr += 1U;
 800130e:	1c4e      	adds	r6, r1, #1
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001310:	6c05      	ldr	r5, [r0, #64]	; 0x40
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001312:	2400      	movs	r4, #0
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001314:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8001318:	3901      	subs	r1, #1
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800131a:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001320:	42a6      	cmp	r6, r4
 8001322:	d109      	bne.n	8001338 <HAL_ETH_BuildRxDescriptors+0x36>
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001324:	6801      	ldr	r1, [r0, #0]
 8001326:	f241 1228 	movw	r2, #4392	; 0x1128
 800132a:	508b      	str	r3, [r1, r2]
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800132c:	2300      	movs	r3, #0
 800132e:	6443      	str	r3, [r0, #68]	; 0x44
  return HAL_OK;
 8001330:	4618      	mov	r0, r3
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	460e      	mov	r6, r1
 8001336:	e7eb      	b.n	8001310 <HAL_ETH_BuildRxDescriptors+0xe>
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800133c:	60df      	str	r7, [r3, #12]
    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	b12a      	cbz	r2, 800134e <HAL_ETH_BuildRxDescriptors+0x4c>
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800134c:	60da      	str	r2, [r3, #12]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001354:	60da      	str	r2, [r3, #12]
    if(dmarxdesclist->ItMode != 0U)
 8001356:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001358:	b11a      	cbz	r2, 8001362 <HAL_ETH_BuildRxDescriptors+0x60>
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001360:	60da      	str	r2, [r3, #12]
    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8001362:	428c      	cmp	r4, r1
 8001364:	d207      	bcs.n	8001376 <HAL_ETH_BuildRxDescriptors+0x74>
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001366:	1c6a      	adds	r2, r5, #1
 8001368:	2a03      	cmp	r2, #3
 800136a:	bf88      	it	hi
 800136c:	1eea      	subhi	r2, r5, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800136e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001372:	4615      	mov	r5, r2
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001376:	3401      	adds	r4, #1
 8001378:	e7d2      	b.n	8001320 <HAL_ETH_BuildRxDescriptors+0x1e>
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
}
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800137e <HAL_ETH_ReadPHYRegister>:
{
 800137e:	b570      	push	{r4, r5, r6, lr}
 8001380:	4604      	mov	r4, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001382:	6800      	ldr	r0, [r0, #0]
{
 8001384:	461d      	mov	r5, r3
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001386:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800138a:	07db      	lsls	r3, r3, #31
 800138c:	d501      	bpl.n	8001392 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
 8001390:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001392:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001396:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 800139a:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800139e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80013a2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80013a6:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80013aa:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 80013ae:	f7ff faa9 	bl	8000904 <HAL_GetTick>
 80013b2:	4606      	mov	r6, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 80013ba:	f010 0001 	ands.w	r0, r0, #1
 80013be:	d104      	bne.n	80013ca <HAL_ETH_ReadPHYRegister+0x4c>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80013c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	602b      	str	r3, [r5, #0]
}
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80013ca:	f7ff fa9b 	bl	8000904 <HAL_GetTick>
 80013ce:	1b80      	subs	r0, r0, r6
 80013d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80013d4:	d9ee      	bls.n	80013b4 <HAL_ETH_ReadPHYRegister+0x36>
 80013d6:	e7da      	b.n	800138e <HAL_ETH_ReadPHYRegister+0x10>

080013d8 <HAL_ETH_WritePHYRegister>:
{
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	4604      	mov	r4, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80013dc:	6800      	ldr	r0, [r0, #0]
 80013de:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 80013e2:	07ed      	lsls	r5, r5, #31
 80013e4:	d501      	bpl.n	80013ea <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
 80013e8:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80013ea:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 80013ee:	b29b      	uxth	r3, r3
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80013f0:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 80013f4:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80013f8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80013fc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <HAL_ETH_WritePHYRegister+0x5c>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001402:	f022 020c 	bic.w	r2, r2, #12
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001406:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800140a:	f042 0205 	orr.w	r2, r2, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800140e:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
  tickstart = HAL_GetTick();
 8001412:	f7ff fa77 	bl	8000904 <HAL_GetTick>
 8001416:	4605      	mov	r5, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800141e:	f010 0001 	ands.w	r0, r0, #1
 8001422:	d100      	bne.n	8001426 <HAL_ETH_WritePHYRegister+0x4e>
}
 8001424:	bd38      	pop	{r3, r4, r5, pc}
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001426:	f7ff fa6d 	bl	8000904 <HAL_GetTick>
 800142a:	1b40      	subs	r0, r0, r5
 800142c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001430:	d9f2      	bls.n	8001418 <HAL_ETH_WritePHYRegister+0x40>
 8001432:	e7d8      	b.n	80013e6 <HAL_ETH_WritePHYRegister+0xe>
 8001434:	40028000 	.word	0x40028000

08001438 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001438:	2900      	cmp	r1, #0
 800143a:	f000 80c1 	beq.w	80015c0 <HAL_ETH_GetMACConfig+0x188>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800143e:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001440:	2000      	movs	r0, #0
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f002 020c 	and.w	r2, r2, #12
 8001448:	62ca      	str	r2, [r1, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001450:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800145a:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8001462:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001466:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001470:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8001478:	f3c2 2280 	ubfx	r2, r2, #10, #1
 800147c:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 8001484:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800148c:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001494:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800149c:	614a      	str	r2, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80014a4:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 80014ac:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80014b0:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80014b8:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 80014bc:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f3c2 5200 	ubfx	r2, r2, #20, #1
 80014c4:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80014cc:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f3c2 5280 	ubfx	r2, r2, #22, #1
 80014d4:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 80014dc:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 80014e4:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 80014ec:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80014f4:	600a      	str	r2, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80014fc:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8001504:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001508:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001512:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	f3c2 4280 	ubfx	r2, r2, #18, #1
 800151c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8001526:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	f3c2 6244 	ubfx	r2, r2, #25, #5
 8001530:	63ca      	str	r2, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001538:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	f002 020f 	and.w	r2, r2, #15
 8001542:	644a      	str	r2, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001546:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800154a:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800154e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001550:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001554:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001558:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800155c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800155e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001562:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001566:	0c12      	lsrs	r2, r2, #16
 8001568:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800156a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800156e:	f002 0201 	and.w	r2, r2, #1
 8001572:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8001576:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800157a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800157e:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001582:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001586:	f002 0272 	and.w	r2, r2, #114	; 0x72
 800158a:	658a      	str	r2, [r1, #88]	; 0x58
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800158c:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8001590:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8001594:	65ca      	str	r2, [r1, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001596:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 800159a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800159e:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80015a2:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80015a6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80015aa:	f3c2 1200 	ubfx	r2, r2, #4, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80015ae:	f083 0340 	eor.w	r3, r3, #64	; 0x40
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80015b2:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80015b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015ba:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
  return HAL_OK;
 80015be:	4770      	bx	lr
    return HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
}
 80015c2:	4770      	bx	lr

080015c4 <HAL_ETH_SetMACConfig>:
{
 80015c4:	b508      	push	{r3, lr}
  if(macconf == NULL)
 80015c6:	b131      	cbz	r1, 80015d6 <HAL_ETH_SetMACConfig+0x12>
  if(heth->RxState == HAL_ETH_STATE_READY)
 80015c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d103      	bne.n	80015d6 <HAL_ETH_SetMACConfig+0x12>
    ETH_SetMACConfig(heth, macconf);
 80015ce:	f7ff fa67 	bl	8000aa0 <ETH_SetMACConfig>
    return HAL_OK;
 80015d2:	2000      	movs	r0, #0
 80015d4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
}
 80015d8:	bd08      	pop	{r3, pc}
	...

080015dc <HAL_ETH_SetMDIOClockRange>:
{
 80015dc:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 80015de:	6803      	ldr	r3, [r0, #0]
{
 80015e0:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 80015e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 80015e6:	f000 febd 	bl	8002364 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_ETH_SetMDIOClockRange+0x58>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80015ee:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80015f2:	4403      	add	r3, r0
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d805      	bhi.n	8001604 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80015f8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 8001602:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_ETH_SetMDIOClockRange+0x60>)
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001608:	4403      	add	r3, r0
 800160a:	4293      	cmp	r3, r2
 800160c:	d802      	bhi.n	8001614 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800160e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8001612:	e7f3      	b.n	80015fc <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001618:	4403      	add	r3, r0
 800161a:	4293      	cmp	r3, r2
 800161c:	d9ee      	bls.n	80015fc <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_ETH_SetMDIOClockRange+0x70>)
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001622:	4403      	add	r3, r0
 8001624:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001626:	bf94      	ite	ls
 8001628:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800162c:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8001630:	e7e4      	b.n	80015fc <HAL_ETH_SetMDIOClockRange+0x20>
 8001632:	bf00      	nop
 8001634:	feced300 	.word	0xfeced300
 8001638:	00e4e1bf 	.word	0x00e4e1bf
 800163c:	fde9f140 	.word	0xfde9f140
 8001640:	017d783f 	.word	0x017d783f
 8001644:	fc6c7900 	.word	0xfc6c7900
 8001648:	026259ff 	.word	0x026259ff
 800164c:	fa0a1f00 	.word	0xfa0a1f00
 8001650:	02faf07f 	.word	0x02faf07f

08001654 <HAL_ETH_Init>:
{
 8001654:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 8001656:	4605      	mov	r5, r0
{
 8001658:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 800165a:	2800      	cmp	r0, #0
 800165c:	f000 80bd 	beq.w	80017da <HAL_ETH_Init+0x186>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001660:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001662:	b90b      	cbnz	r3, 8001668 <HAL_ETH_Init+0x14>
    HAL_ETH_MspInit(heth);
 8001664:	f009 f92e 	bl	800a8c4 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 8001668:	2323      	movs	r3, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800166a:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 800166c:	656b      	str	r3, [r5, #84]	; 0x54
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b86      	ldr	r3, [pc, #536]	; (8001888 <HAL_ETH_Init+0x234>)
 8001670:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001674:	f042 0202 	orr.w	r2, r2, #2
 8001678:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800167c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001688:	2800      	cmp	r0, #0
 800168a:	f040 8098 	bne.w	80017be <HAL_ETH_Init+0x16a>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800168e:	f7ff f945 	bl	800091c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001692:	682b      	ldr	r3, [r5, #0]
 8001694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80016a0:	f7ff f930 	bl	8000904 <HAL_GetTick>
 80016a4:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	f014 0401 	ands.w	r4, r4, #1
 80016b2:	f040 8087 	bne.w	80017c4 <HAL_ETH_Init+0x170>
  ETH_MAC_MDIO_ClkConfig(heth);
 80016b6:	4628      	mov	r0, r5
 80016b8:	f7ff ff90 	bl	80015dc <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016bc:	682e      	ldr	r6, [r5, #0]
 80016be:	f000 fe51 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80016c2:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_ETH_Init+0x238>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016c4:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016c6:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80016c8:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016cc:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 80016d0:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80016d4:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80016d8:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80016da:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80016de:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80016e2:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80016e6:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 80016e8:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80016ec:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80016f0:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80016f2:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80016f4:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80016f6:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016fa:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80016fe:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001702:	fbb0 f0f3 	udiv	r0, r0, r3
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800170a:	3801      	subs	r0, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800170c:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800170e:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001712:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001716:	2601      	movs	r6, #1
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001718:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800171a:	2320      	movs	r3, #32
  ETH_SetMACConfig(heth, &macDefaultConf);
 800171c:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800171e:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001722:	9322      	str	r3, [sp, #136]	; 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001724:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8001728:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800172c:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800172e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001732:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001736:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001738:	2302      	movs	r3, #2
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800173a:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800173e:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 8001742:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 8001746:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 800174a:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.Support2KPacket = DISABLE;
 800174e:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001752:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001754:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001758:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800175c:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001760:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001764:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001766:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 800176a:	f7ff f999 	bl	8000aa0 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800176e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001772:	a902      	add	r1, sp, #8
 8001774:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001776:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800177a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800177c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 800177e:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001782:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001784:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001786:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001788:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800178c:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001790:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001794:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001798:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800179c:	f7ff fa5e 	bl	8000c5c <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017a0:	682b      	ldr	r3, [r5, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017a2:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017a4:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 80017a8:	680a      	ldr	r2, [r1, #0]
 80017aa:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 80017ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017b2:	600a      	str	r2, [r1, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017b4:	f010 0103 	ands.w	r1, r0, #3
 80017b8:	d011      	beq.n	80017de <HAL_ETH_Init+0x18a>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017ba:	65ee      	str	r6, [r5, #92]	; 0x5c
 80017bc:	e00b      	b.n	80017d6 <HAL_ETH_Init+0x182>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017c2:	e764      	b.n	800168e <HAL_ETH_Init+0x3a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80017c4:	f7ff f89e 	bl	8000904 <HAL_GetTick>
 80017c8:	1b80      	subs	r0, r0, r6
 80017ca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80017ce:	f67f af6a 	bls.w	80016a6 <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017d2:	2304      	movs	r3, #4
 80017d4:	65eb      	str	r3, [r5, #92]	; 0x5c
    heth->gState = HAL_ETH_STATE_ERROR;
 80017d6:	23e0      	movs	r3, #224	; 0xe0
 80017d8:	656b      	str	r3, [r5, #84]	; 0x54
    return HAL_ERROR;
 80017da:	2001      	movs	r0, #1
 80017dc:	e052      	b.n	8001884 <HAL_ETH_Init+0x230>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017de:	f241 1408 	movw	r4, #4360	; 0x1108
 80017e2:	591a      	ldr	r2, [r3, r4]
 80017e4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80017e8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80017ec:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 80017f0:	68e8      	ldr	r0, [r5, #12]
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017f2:	511a      	str	r2, [r3, r4]
 80017f4:	f100 0660 	add.w	r6, r0, #96	; 0x60
 80017f8:	f105 0418 	add.w	r4, r5, #24
    dmatxdesc = heth->Init.TxDesc + i;
 80017fc:	4602      	mov	r2, r0
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017fe:	6011      	str	r1, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001800:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001802:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001804:	60d1      	str	r1, [r2, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001806:	f844 2b04 	str.w	r2, [r4], #4
 800180a:	3218      	adds	r2, #24
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800180c:	42b2      	cmp	r2, r6
 800180e:	d1f6      	bne.n	80017fe <HAL_ETH_Init+0x1aa>
  heth->TxDescList.CurTxDesc = 0;
 8001810:	62a9      	str	r1, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001812:	f241 122c 	movw	r2, #4396	; 0x112c
 8001816:	2103      	movs	r1, #3
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001818:	2400      	movs	r4, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800181a:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800181c:	f241 1214 	movw	r2, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8001820:	6929      	ldr	r1, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001822:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001824:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 8001828:	f101 0660 	add.w	r6, r1, #96	; 0x60
 800182c:	6010      	str	r0, [r2, #0]
 800182e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dmarxdesc =  heth->Init.RxDesc + i;
 8001832:	460a      	mov	r2, r1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001834:	6014      	str	r4, [r2, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001836:	6054      	str	r4, [r2, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001838:	6094      	str	r4, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800183a:	60d4      	str	r4, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800183c:	6114      	str	r4, [r2, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800183e:	6154      	str	r4, [r2, #20]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001840:	f840 2b04 	str.w	r2, [r0], #4
 8001844:	3218      	adds	r2, #24
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001846:	42b2      	cmp	r2, r6
 8001848:	d1f4      	bne.n	8001834 <HAL_ETH_Init+0x1e0>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800184a:	2003      	movs	r0, #3
 800184c:	f241 1230 	movw	r2, #4400	; 0x1130
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001850:	63ec      	str	r4, [r5, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001852:	642c      	str	r4, [r5, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001854:	646c      	str	r4, [r5, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001856:	64ec      	str	r4, [r5, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001858:	64ac      	str	r4, [r5, #72]	; 0x48
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800185a:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800185c:	f241 121c 	movw	r2, #4380	; 0x111c
  return HAL_OK;
 8001860:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001862:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8001864:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8001868:	f241 1228 	movw	r2, #4392	; 0x1128
 800186c:	5099      	str	r1, [r3, r2]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800186e:	686a      	ldr	r2, [r5, #4]
 8001870:	8891      	ldrh	r1, [r2, #4]
 8001872:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001876:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001878:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 800187c:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800187e:	65ec      	str	r4, [r5, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001880:	656b      	str	r3, [r5, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001882:	65ab      	str	r3, [r5, #88]	; 0x58
}
 8001884:	b024      	add	sp, #144	; 0x90
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	58024400 	.word	0x58024400
 800188c:	000f4240 	.word	0x000f4240

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001894:	680b      	ldr	r3, [r1, #0]
{
 8001896:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8001a64 <HAL_GPIO_Init+0x1d4>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800189c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018a0:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80018a2:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 80018a4:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8001a68 <HAL_GPIO_Init+0x1d8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018a8:	9a01      	ldr	r2, [sp, #4]
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 80018ae:	b005      	add	sp, #20
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b4:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 80018b6:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b8:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 80018ba:	ea12 0507 	ands.w	r5, r2, r7
 80018be:	f000 80bb 	beq.w	8001a38 <HAL_GPIO_Init+0x1a8>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c2:	684a      	ldr	r2, [r1, #4]
 80018c4:	005e      	lsls	r6, r3, #1
 80018c6:	f022 0e10 	bic.w	lr, r2, #16
 80018ca:	f10e 34ff 	add.w	r4, lr, #4294967295
 80018ce:	2c01      	cmp	r4, #1
 80018d0:	d814      	bhi.n	80018fc <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018d2:	f04f 0a03 	mov.w	sl, #3
        temp = GPIOx->OSPEEDR;
 80018d6:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018da:	fa0a f406 	lsl.w	r4, sl, r6
 80018de:	ea2b 0a04 	bic.w	sl, fp, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	68cc      	ldr	r4, [r1, #12]
 80018e4:	40b4      	lsls	r4, r6
 80018e6:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 80018ea:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80018ec:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ee:	ea24 0707 	bic.w	r7, r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018f2:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80018f6:	409c      	lsls	r4, r3
 80018f8:	4327      	orrs	r7, r4
        GPIOx->OTYPER = temp;
 80018fa:	6047      	str	r7, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018fc:	2403      	movs	r4, #3
      temp = GPIOx->PUPDR;
 80018fe:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001900:	f1be 0f02 	cmp.w	lr, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001904:	fa04 f406 	lsl.w	r4, r4, r6
 8001908:	ea6f 0404 	mvn.w	r4, r4
 800190c:	ea07 0a04 	and.w	sl, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	688f      	ldr	r7, [r1, #8]
 8001912:	fa07 f706 	lsl.w	r7, r7, r6
 8001916:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800191a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	d116      	bne.n	800194c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 800191e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001922:	f003 0b07 	and.w	fp, r3, #7
 8001926:	f04f 0e0f 	mov.w	lr, #15
 800192a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800192e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001932:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001936:	fa0e fe0b 	lsl.w	lr, lr, fp
 800193a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800193e:	690f      	ldr	r7, [r1, #16]
 8001940:	fa07 f70b 	lsl.w	r7, r7, fp
 8001944:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001948:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800194c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800194e:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	f002 0703 	and.w	r7, r2, #3
 8001954:	fa07 f606 	lsl.w	r6, r7, r6
 8001958:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 800195a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195c:	00d4      	lsls	r4, r2, #3
 800195e:	d56b      	bpl.n	8001a38 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001960:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8001964:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001968:	f003 0703 	and.w	r7, r3, #3
 800196c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001970:	f044 0402 	orr.w	r4, r4, #2
 8001974:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001978:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 800197e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001982:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8001986:	f004 0402 	and.w	r4, r4, #2
 800198a:	9403      	str	r4, [sp, #12]
 800198c:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800198e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8001992:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001996:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800199a:	4c31      	ldr	r4, [pc, #196]	; (8001a60 <HAL_GPIO_Init+0x1d0>)
 800199c:	42a0      	cmp	r0, r4
 800199e:	d04d      	beq.n	8001a3c <HAL_GPIO_Init+0x1ac>
 80019a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019a4:	42a0      	cmp	r0, r4
 80019a6:	d04b      	beq.n	8001a40 <HAL_GPIO_Init+0x1b0>
 80019a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019ac:	42a0      	cmp	r0, r4
 80019ae:	d049      	beq.n	8001a44 <HAL_GPIO_Init+0x1b4>
 80019b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019b4:	42a0      	cmp	r0, r4
 80019b6:	d047      	beq.n	8001a48 <HAL_GPIO_Init+0x1b8>
 80019b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019bc:	42a0      	cmp	r0, r4
 80019be:	d045      	beq.n	8001a4c <HAL_GPIO_Init+0x1bc>
 80019c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019c4:	42a0      	cmp	r0, r4
 80019c6:	d043      	beq.n	8001a50 <HAL_GPIO_Init+0x1c0>
 80019c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019cc:	42a0      	cmp	r0, r4
 80019ce:	d041      	beq.n	8001a54 <HAL_GPIO_Init+0x1c4>
 80019d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d4:	42a0      	cmp	r0, r4
 80019d6:	d03f      	beq.n	8001a58 <HAL_GPIO_Init+0x1c8>
 80019d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019dc:	42a0      	cmp	r0, r4
 80019de:	d03d      	beq.n	8001a5c <HAL_GPIO_Init+0x1cc>
 80019e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019e4:	42a0      	cmp	r0, r4
 80019e6:	bf14      	ite	ne
 80019e8:	240a      	movne	r4, #10
 80019ea:	2409      	moveq	r4, #9
 80019ec:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ee:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 80019f6:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 80019fa:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 80019fe:	bf54      	ite	pl
 8001a00:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001a02:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a04:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8001a06:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8001a0a:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8001a0e:	bf54      	ite	pl
 8001a10:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001a12:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a14:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8001a16:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8001a1a:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8001a1e:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8001a22:	bf54      	ite	pl
 8001a24:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001a26:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8001a2a:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8001a2c:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8001a2e:	bf54      	ite	pl
 8001a30:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001a32:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8001a34:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8001a38:	3301      	adds	r3, #1
 8001a3a:	e735      	b.n	80018a8 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	e7d5      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a40:	2401      	movs	r4, #1
 8001a42:	e7d3      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a44:	2402      	movs	r4, #2
 8001a46:	e7d1      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a48:	2403      	movs	r4, #3
 8001a4a:	e7cf      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a4c:	2404      	movs	r4, #4
 8001a4e:	e7cd      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a50:	2405      	movs	r4, #5
 8001a52:	e7cb      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a54:	2406      	movs	r4, #6
 8001a56:	e7c9      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a58:	2407      	movs	r4, #7
 8001a5a:	e7c7      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a5c:	2408      	movs	r4, #8
 8001a5e:	e7c5      	b.n	80019ec <HAL_GPIO_Init+0x15c>
 8001a60:	58020000 	.word	0x58020000
 8001a64:	58024400 	.word	0x58024400
 8001a68:	58000080 	.word	0x58000080

08001a6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6c:	b10a      	cbz	r2, 8001a72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a6e:	6181      	str	r1, [r0, #24]
 8001a70:	4770      	bx	lr
 8001a72:	0409      	lsls	r1, r1, #16
 8001a74:	e7fb      	b.n	8001a6e <HAL_GPIO_WritePin+0x2>

08001a76 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a76:	6943      	ldr	r3, [r0, #20]
 8001a78:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a7c:	bf08      	it	eq
 8001a7e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a80:	6181      	str	r1, [r0, #24]
 8001a82:	4770      	bx	lr

08001a84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a84:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a86:	4c10      	ldr	r4, [pc, #64]	; (8001ac8 <HAL_PWREx_ConfigSupply+0x44>)
 8001a88:	68e3      	ldr	r3, [r4, #12]
 8001a8a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a8e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a90:	d105      	bne.n	8001a9e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a92:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a96:	1a18      	subs	r0, r3, r0
 8001a98:	bf18      	it	ne
 8001a9a:	2001      	movne	r0, #1
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a9e:	f023 0307 	bic.w	r3, r3, #7
 8001aa2:	4318      	orrs	r0, r3
 8001aa4:	60e0      	str	r0, [r4, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001aa6:	f7fe ff2d 	bl	8000904 <HAL_GetTick>
 8001aaa:	4605      	mov	r5, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aac:	6863      	ldr	r3, [r4, #4]
 8001aae:	049b      	lsls	r3, r3, #18
 8001ab0:	d501      	bpl.n	8001ab6 <HAL_PWREx_ConfigSupply+0x32>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ab6:	f7fe ff25 	bl	8000904 <HAL_GetTick>
 8001aba:	1b40      	subs	r0, r0, r5
 8001abc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ac0:	d9f4      	bls.n	8001aac <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8001ac2:	2001      	movs	r0, #1
}
 8001ac4:	bd38      	pop	{r3, r4, r5, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58024800 	.word	0x58024800

08001acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ace:	4604      	mov	r4, r0
 8001ad0:	b908      	cbnz	r0, 8001ad6 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	6803      	ldr	r3, [r0, #0]
 8001ad8:	07d8      	lsls	r0, r3, #31
 8001ada:	d45a      	bmi.n	8001b92 <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	0799      	lsls	r1, r3, #30
 8001ae0:	f100 80a7 	bmi.w	8001c32 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	06da      	lsls	r2, r3, #27
 8001ae8:	d523      	bpl.n	8001b32 <HAL_RCC_OscConfig+0x66>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4ba9      	ldr	r3, [pc, #676]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001aec:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aee:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001af4:	2a08      	cmp	r2, #8
 8001af6:	d007      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3c>
 8001af8:	2a18      	cmp	r2, #24
 8001afa:	f040 80fb 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x228>
 8001afe:	f001 0203 	and.w	r2, r1, #3
 8001b02:	2a01      	cmp	r2, #1
 8001b04:	f040 80f6 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x228>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	d502      	bpl.n	8001b14 <HAL_RCC_OscConfig+0x48>
 8001b0e:	69e3      	ldr	r3, [r4, #28]
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d1de      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b14:	f7fe fefc 	bl	8000910 <HAL_GetREVID>
 8001b18:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b1c:	4a9c      	ldr	r2, [pc, #624]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001b1e:	4298      	cmp	r0, r3
 8001b20:	6a21      	ldr	r1, [r4, #32]
 8001b22:	f200 80e0 	bhi.w	8001ce6 <HAL_RCC_OscConfig+0x21a>
 8001b26:	6853      	ldr	r3, [r2, #4]
 8001b28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b2c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8001b30:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	0719      	lsls	r1, r3, #28
 8001b36:	f100 8116 	bmi.w	8001d66 <HAL_RCC_OscConfig+0x29a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	069a      	lsls	r2, r3, #26
 8001b3e:	f100 813c 	bmi.w	8001dba <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	075d      	lsls	r5, r3, #29
 8001b46:	d51e      	bpl.n	8001b86 <HAL_RCC_OscConfig+0xba>
    PWR->CR1 |= PWR_CR1_DBP;
 8001b48:	4d92      	ldr	r5, [pc, #584]	; (8001d94 <HAL_RCC_OscConfig+0x2c8>)
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001b52:	f7fe fed7 	bl	8000904 <HAL_GetTick>
 8001b56:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	05da      	lsls	r2, r3, #23
 8001b5c:	f140 8152 	bpl.w	8001e04 <HAL_RCC_OscConfig+0x338>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	68a3      	ldr	r3, [r4, #8]
 8001b62:	4d8b      	ldr	r5, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	f040 8154 	bne.w	8001e12 <HAL_RCC_OscConfig+0x346>
 8001b6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b76:	f7fe fec5 	bl	8000904 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7a:	4e85      	ldr	r6, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8001b7c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001b80:	079b      	lsls	r3, r3, #30
 8001b82:	f140 816c 	bpl.w	8001e5e <HAL_RCC_OscConfig+0x392>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	f040 816f 	bne.w	8001e6c <HAL_RCC_OscConfig+0x3a0>
      }
    }
  }
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001b94:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b96:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b98:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b9c:	2a10      	cmp	r2, #16
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0xe0>
 8001ba0:	2a18      	cmp	r2, #24
 8001ba2:	d10a      	bne.n	8001bba <HAL_RCC_OscConfig+0xee>
 8001ba4:	f001 0203 	and.w	r2, r1, #3
 8001ba8:	2a02      	cmp	r2, #2
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0xee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	039a      	lsls	r2, r3, #14
 8001bb0:	d594      	bpl.n	8001adc <HAL_RCC_OscConfig+0x10>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d191      	bne.n	8001adc <HAL_RCC_OscConfig+0x10>
 8001bb8:	e78b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	4d74      	ldr	r5, [pc, #464]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x11c>
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fe9a 	bl	8000904 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd0:	4d6f      	ldr	r5, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001bd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	039b      	lsls	r3, r3, #14
 8001bd8:	d480      	bmi.n	8001adc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7fe fe93 	bl	8000904 <HAL_GetTick>
 8001bde:	1b80      	subs	r0, r0, r6
 8001be0:	2864      	cmp	r0, #100	; 0x64
 8001be2:	d9f7      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8001be4:	2003      	movs	r0, #3
 8001be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be8:	b9a3      	cbnz	r3, 8001c14 <HAL_RCC_OscConfig+0x148>
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf0:	602b      	str	r3, [r5, #0]
 8001bf2:	682b      	ldr	r3, [r5, #0]
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bfa:	f7fe fe83 	bl	8000904 <HAL_GetTick>
 8001bfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	039f      	lsls	r7, r3, #14
 8001c04:	f57f af6a 	bpl.w	8001adc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7fe fe7c 	bl	8000904 <HAL_GetTick>
 8001c0c:	1b80      	subs	r0, r0, r6
 8001c0e:	2864      	cmp	r0, #100	; 0x64
 8001c10:	d9f6      	bls.n	8001c00 <HAL_RCC_OscConfig+0x134>
 8001c12:	e7e7      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	d103      	bne.n	8001c24 <HAL_RCC_OscConfig+0x158>
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	e7cf      	b.n	8001bc4 <HAL_RCC_OscConfig+0xf8>
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	602b      	str	r3, [r5, #0]
 8001c2a:	682b      	ldr	r3, [r5, #0]
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	e7cb      	b.n	8001bca <HAL_RCC_OscConfig+0xfe>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c32:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001c34:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c36:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c38:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_OscConfig+0x17a>
 8001c3e:	2a18      	cmp	r2, #24
 8001c40:	d11b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1ae>
 8001c42:	078e      	lsls	r6, r1, #30
 8001c44:	d119      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	075d      	lsls	r5, r3, #29
 8001c4a:	d503      	bpl.n	8001c54 <HAL_RCC_OscConfig+0x188>
 8001c4c:	68e3      	ldr	r3, [r4, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f43f af3f 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	f7fe fe5c 	bl	8000910 <HAL_GetREVID>
 8001c58:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	6921      	ldr	r1, [r4, #16]
 8001c62:	6853      	ldr	r3, [r2, #4]
 8001c64:	bf95      	itete	ls
 8001c66:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 8001c6a:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 8001c6e:	ea43 3301 	orrls.w	r3, r3, r1, lsl #12
 8001c72:	ea43 6301 	orrhi.w	r3, r3, r1, lsl #24
 8001c76:	6053      	str	r3, [r2, #4]
 8001c78:	e734      	b.n	8001ae4 <HAL_RCC_OscConfig+0x18>
 8001c7a:	4d45      	ldr	r5, [pc, #276]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c7c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c7e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c80:	b30a      	cbz	r2, 8001cc6 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c82:	f023 0319 	bic.w	r3, r3, #25
 8001c86:	4313      	orrs	r3, r2
 8001c88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fe3b 	bl	8000904 <HAL_GetTick>
 8001c8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	0758      	lsls	r0, r3, #29
 8001c94:	d511      	bpl.n	8001cba <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	f7fe fe3b 	bl	8000910 <HAL_GetREVID>
 8001c9a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c9e:	6922      	ldr	r2, [r4, #16]
 8001ca0:	4298      	cmp	r0, r3
 8001ca2:	686b      	ldr	r3, [r5, #4]
 8001ca4:	bf95      	itete	ls
 8001ca6:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 8001caa:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 8001cae:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 8001cb2:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 8001cb6:	606b      	str	r3, [r5, #4]
 8001cb8:	e714      	b.n	8001ae4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cba:	f7fe fe23 	bl	8000904 <HAL_GetTick>
 8001cbe:	1b80      	subs	r0, r0, r6
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9e5      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1c4>
 8001cc4:	e78e      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fe1a 	bl	8000904 <HAL_GetTick>
 8001cd0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd2:	682b      	ldr	r3, [r5, #0]
 8001cd4:	0759      	lsls	r1, r3, #29
 8001cd6:	f57f af05 	bpl.w	8001ae4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cda:	f7fe fe13 	bl	8000904 <HAL_GetTick>
 8001cde:	1b80      	subs	r0, r0, r6
 8001ce0:	2802      	cmp	r0, #2
 8001ce2:	d9f6      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x206>
 8001ce4:	e77e      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ce6:	68d3      	ldr	r3, [r2, #12]
 8001ce8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001cec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001cf0:	60d3      	str	r3, [r2, #12]
 8001cf2:	e71e      	b.n	8001b32 <HAL_RCC_OscConfig+0x66>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001cf4:	69e3      	ldr	r3, [r4, #28]
 8001cf6:	4d26      	ldr	r5, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001cf8:	b323      	cbz	r3, 8001d44 <HAL_RCC_OscConfig+0x278>
        __HAL_RCC_CSI_ENABLE();
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d02:	f7fe fdff 	bl	8000904 <HAL_GetTick>
 8001d06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	05df      	lsls	r7, r3, #23
 8001d0c:	d50d      	bpl.n	8001d2a <HAL_RCC_OscConfig+0x25e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d0e:	f7fe fdff 	bl	8000910 <HAL_GetREVID>
 8001d12:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d16:	6a22      	ldr	r2, [r4, #32]
 8001d18:	4298      	cmp	r0, r3
 8001d1a:	d80c      	bhi.n	8001d36 <HAL_RCC_OscConfig+0x26a>
 8001d1c:	686b      	ldr	r3, [r5, #4]
 8001d1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d22:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001d26:	606b      	str	r3, [r5, #4]
 8001d28:	e703      	b.n	8001b32 <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d2a:	f7fe fdeb 	bl	8000904 <HAL_GetTick>
 8001d2e:	1b80      	subs	r0, r0, r6
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d9e9      	bls.n	8001d08 <HAL_RCC_OscConfig+0x23c>
 8001d34:	e756      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d36:	68eb      	ldr	r3, [r5, #12]
 8001d38:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001d3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d40:	60eb      	str	r3, [r5, #12]
 8001d42:	e6f6      	b.n	8001b32 <HAL_RCC_OscConfig+0x66>
        __HAL_RCC_CSI_DISABLE();
 8001d44:	682b      	ldr	r3, [r5, #0]
 8001d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fdda 	bl	8000904 <HAL_GetTick>
 8001d50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	05d8      	lsls	r0, r3, #23
 8001d56:	f57f aeec 	bpl.w	8001b32 <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d5a:	f7fe fdd3 	bl	8000904 <HAL_GetTick>
 8001d5e:	1b80      	subs	r0, r0, r6
 8001d60:	2802      	cmp	r0, #2
 8001d62:	d9f6      	bls.n	8001d52 <HAL_RCC_OscConfig+0x286>
 8001d64:	e73e      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d66:	6963      	ldr	r3, [r4, #20]
 8001d68:	4d09      	ldr	r5, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x2c4>)
 8001d6a:	b1ab      	cbz	r3, 8001d98 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 8001d6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001d74:	f7fe fdc6 	bl	8000904 <HAL_GetTick>
 8001d78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d7c:	079b      	lsls	r3, r3, #30
 8001d7e:	f53f aedc 	bmi.w	8001b3a <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d82:	f7fe fdbf 	bl	8000904 <HAL_GetTick>
 8001d86:	1b80      	subs	r0, r0, r6
 8001d88:	2802      	cmp	r0, #2
 8001d8a:	d9f6      	bls.n	8001d7a <HAL_RCC_OscConfig+0x2ae>
 8001d8c:	e72a      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
 8001d8e:	bf00      	nop
 8001d90:	58024400 	.word	0x58024400
 8001d94:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8001d98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001da0:	f7fe fdb0 	bl	8000904 <HAL_GetTick>
 8001da4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001da6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001da8:	079f      	lsls	r7, r3, #30
 8001daa:	f57f aec6 	bpl.w	8001b3a <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7fe fda9 	bl	8000904 <HAL_GetTick>
 8001db2:	1b80      	subs	r0, r0, r6
 8001db4:	2802      	cmp	r0, #2
 8001db6:	d9f6      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2da>
 8001db8:	e714      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001dba:	69a3      	ldr	r3, [r4, #24]
 8001dbc:	4d83      	ldr	r5, [pc, #524]	; (8001fcc <HAL_RCC_OscConfig+0x500>)
 8001dbe:	b183      	cbz	r3, 8001de2 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_HSI48_ENABLE();
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001dc8:	f7fe fd9c 	bl	8000904 <HAL_GetTick>
 8001dcc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	0498      	lsls	r0, r3, #18
 8001dd2:	f53f aeb6 	bmi.w	8001b42 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001dd6:	f7fe fd95 	bl	8000904 <HAL_GetTick>
 8001dda:	1b80      	subs	r0, r0, r6
 8001ddc:	2802      	cmp	r0, #2
 8001dde:	d9f6      	bls.n	8001dce <HAL_RCC_OscConfig+0x302>
 8001de0:	e700      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSI48_DISABLE();
 8001de2:	682b      	ldr	r3, [r5, #0]
 8001de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001dea:	f7fe fd8b 	bl	8000904 <HAL_GetTick>
 8001dee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	0499      	lsls	r1, r3, #18
 8001df4:	f57f aea5 	bpl.w	8001b42 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001df8:	f7fe fd84 	bl	8000904 <HAL_GetTick>
 8001dfc:	1b80      	subs	r0, r0, r6
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	d9f6      	bls.n	8001df0 <HAL_RCC_OscConfig+0x324>
 8001e02:	e6ef      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7fe fd7e 	bl	8000904 <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	2864      	cmp	r0, #100	; 0x64
 8001e0c:	f67f aea4 	bls.w	8001b58 <HAL_RCC_OscConfig+0x8c>
 8001e10:	e6e8      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e12:	b9b3      	cbnz	r3, 8001e42 <HAL_RCC_OscConfig+0x376>
 8001e14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	672b      	str	r3, [r5, #112]	; 0x70
 8001e20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e22:	f023 0304 	bic.w	r3, r3, #4
 8001e26:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e28:	f7fe fd6c 	bl	8000904 <HAL_GetTick>
 8001e2c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e30:	0798      	lsls	r0, r3, #30
 8001e32:	f57f aea8 	bpl.w	8001b86 <HAL_RCC_OscConfig+0xba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7fe fd65 	bl	8000904 <HAL_GetTick>
 8001e3a:	1b80      	subs	r0, r0, r6
 8001e3c:	42b8      	cmp	r0, r7
 8001e3e:	d9f6      	bls.n	8001e2e <HAL_RCC_OscConfig+0x362>
 8001e40:	e6d0      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e46:	d103      	bne.n	8001e50 <HAL_RCC_OscConfig+0x384>
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	672b      	str	r3, [r5, #112]	; 0x70
 8001e4e:	e68c      	b.n	8001b6a <HAL_RCC_OscConfig+0x9e>
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	672b      	str	r3, [r5, #112]	; 0x70
 8001e56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	e688      	b.n	8001b70 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fd51 	bl	8000904 <HAL_GetTick>
 8001e62:	1bc0      	subs	r0, r0, r7
 8001e64:	42a8      	cmp	r0, r5
 8001e66:	f67f ae8a 	bls.w	8001b7e <HAL_RCC_OscConfig+0xb2>
 8001e6a:	e6bb      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e6c:	4d57      	ldr	r5, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x500>)
 8001e6e:	692b      	ldr	r3, [r5, #16]
 8001e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e74:	2b18      	cmp	r3, #24
 8001e76:	d07a      	beq.n	8001f6e <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 8001e78:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e80:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e82:	d167      	bne.n	8001f54 <HAL_RCC_OscConfig+0x488>
        tickstart = HAL_GetTick();
 8001e84:	f7fe fd3e 	bl	8000904 <HAL_GetTick>
 8001e88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	0199      	lsls	r1, r3, #6
 8001e8e:	d45b      	bmi.n	8001f48 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e90:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001e92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e94:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001e98:	f023 0303 	bic.w	r3, r3, #3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ea0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001ea4:	62ab      	str	r3, [r5, #40]	; 0x28
 8001ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ea8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	3a01      	subs	r2, #1
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	0412      	lsls	r2, r2, #16
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	0612      	lsls	r2, r2, #24
 8001eca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ed2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eda:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001edc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eea:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001eec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001eee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ef0:	f023 030c 	bic.w	r3, r3, #12
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ef8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001efa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001efc:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f00:	4c32      	ldr	r4, [pc, #200]	; (8001fcc <HAL_RCC_OscConfig+0x500>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f02:	4313      	orrs	r3, r2
 8001f04:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fce9 	bl	8000904 <HAL_GetTick>
 8001f32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	019a      	lsls	r2, r3, #6
 8001f38:	f53f ae29 	bmi.w	8001b8e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe fce2 	bl	8000904 <HAL_GetTick>
 8001f40:	1b40      	subs	r0, r0, r5
 8001f42:	2802      	cmp	r0, #2
 8001f44:	d9f6      	bls.n	8001f34 <HAL_RCC_OscConfig+0x468>
 8001f46:	e64d      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fcdc 	bl	8000904 <HAL_GetTick>
 8001f4c:	1b80      	subs	r0, r0, r6
 8001f4e:	2802      	cmp	r0, #2
 8001f50:	d99b      	bls.n	8001e8a <HAL_RCC_OscConfig+0x3be>
 8001f52:	e647      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001f54:	f7fe fcd6 	bl	8000904 <HAL_GetTick>
 8001f58:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	f57f ae16 	bpl.w	8001b8e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fccf 	bl	8000904 <HAL_GetTick>
 8001f66:	1b00      	subs	r0, r0, r4
 8001f68:	2802      	cmp	r0, #2
 8001f6a:	d9f6      	bls.n	8001f5a <HAL_RCC_OscConfig+0x48e>
 8001f6c:	e63a      	b.n	8001be4 <HAL_RCC_OscConfig+0x118>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4fc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f7c:	4281      	cmp	r1, r0
 8001f7e:	f47f ada8 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f82:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f88:	428a      	cmp	r2, r1
 8001f8a:	f47f ada2 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f90:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001f94:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f96:	4291      	cmp	r1, r2
 8001f98:	f47f ad9b 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f9e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8001fa2:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa4:	4291      	cmp	r1, r2
 8001fa6:	f47f ad94 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001faa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001fac:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001fb0:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb2:	4291      	cmp	r1, r2
 8001fb4:	f47f ad8d 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001fba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001fbe:	3801      	subs	r0, #1
    return HAL_ERROR;
 8001fc0:	1a18      	subs	r0, r3, r0
 8001fc2:	bf18      	it	ne
 8001fc4:	2001      	movne	r0, #1
 8001fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 8001fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400

08001fd0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd0:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x124>)
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001fd8:	2a10      	cmp	r2, #16
{
 8001fda:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fdc:	d00e      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c>
 8001fde:	2a18      	cmp	r2, #24
 8001fe0:	d00e      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x30>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	f040 8083 	bne.w	80020ee <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4843      	ldr	r0, [pc, #268]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001fec:	f012 0f20 	tst.w	r2, #32
 8001ff0:	d07e      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001ff8:	40d8      	lsrs	r0, r3
 8001ffa:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ffc:	483f      	ldr	r0, [pc, #252]	; (80020fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ffe:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002000:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002002:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002006:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800200a:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 800200c:	2800      	cmp	r0, #0
 800200e:	d06f      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002010:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002014:	f002 0201 	and.w	r2, r2, #1
 8002018:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8002100 <HAL_RCC_GetSysClockFreq+0x130>
 800201c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002020:	4362      	muls	r2, r4
 8002022:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002026:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800202a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 800202e:	2a01      	cmp	r2, #1
 8002030:	ee07 0a90 	vmov	s15, r0
 8002034:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x70>
 800203a:	d30f      	bcc.n	800205c <HAL_RCC_GetSysClockFreq+0x8c>
 800203c:	2a02      	cmp	r2, #2
 800203e:	d048      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204e:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002052:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002104 <HAL_RCC_GetSysClockFreq+0x134>
 8002056:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800205a:	e037      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	0692      	lsls	r2, r2, #26
 8002060:	d527      	bpl.n	80020b2 <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8002066:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800206c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002072:	ee07 2a90 	vmov	s15, r2
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002086:	eee6 7a05 	vfma.f32	s15, s12, s10
 800208a:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002090:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800209a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800209c:	ee07 3a10 	vmov	s14, r3
 80020a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80020a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020a8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80020ac:	ee17 0a90 	vmov	r0, s15
 80020b0:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80020c4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002108 <HAL_RCC_GetSysClockFreq+0x138>
 80020c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80020d0:	e7dd      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e0:	eee6 7a05 	vfma.f32	s15, s12, s10
 80020e4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 800210c <HAL_RCC_GetSysClockFreq+0x13c>
 80020e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80020ec:	e7ee      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 80020ee:	4808      	ldr	r0, [pc, #32]	; (8002110 <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	bf00      	nop
 80020f4:	58024400 	.word	0x58024400
 80020f8:	03d09000 	.word	0x03d09000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	39000000 	.word	0x39000000
 8002104:	4a742400 	.word	0x4a742400
 8002108:	4c742400 	.word	0x4c742400
 800210c:	4af42400 	.word	0x4af42400
 8002110:	003d0900 	.word	0x003d0900

08002114 <HAL_RCC_ClockConfig>:
{
 8002114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002118:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800211a:	4604      	mov	r4, r0
 800211c:	b910      	cbnz	r0, 8002124 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800211e:	2001      	movs	r0, #1
 8002120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4a89      	ldr	r2, [pc, #548]	; (800234c <HAL_RCC_ClockConfig+0x238>)
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	428b      	cmp	r3, r1
 800212e:	f0c0 8093 	bcc.w	8002258 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	075f      	lsls	r7, r3, #29
 8002136:	f100 809b 	bmi.w	8002270 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213a:	071e      	lsls	r6, r3, #28
 800213c:	d50b      	bpl.n	8002156 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800213e:	4984      	ldr	r1, [pc, #528]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002140:	6966      	ldr	r6, [r4, #20]
 8002142:	69c8      	ldr	r0, [r1, #28]
 8002144:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002148:	4286      	cmp	r6, r0
 800214a:	d904      	bls.n	8002156 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800214c:	69ca      	ldr	r2, [r1, #28]
 800214e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002152:	4332      	orrs	r2, r6
 8002154:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	06d8      	lsls	r0, r3, #27
 8002158:	d50b      	bpl.n	8002172 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800215a:	497d      	ldr	r1, [pc, #500]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 800215c:	69a6      	ldr	r6, [r4, #24]
 800215e:	69c8      	ldr	r0, [r1, #28]
 8002160:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002164:	4286      	cmp	r6, r0
 8002166:	d904      	bls.n	8002172 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002168:	69ca      	ldr	r2, [r1, #28]
 800216a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800216e:	4332      	orrs	r2, r6
 8002170:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002172:	0699      	lsls	r1, r3, #26
 8002174:	d50b      	bpl.n	800218e <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002176:	4976      	ldr	r1, [pc, #472]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002178:	69e6      	ldr	r6, [r4, #28]
 800217a:	6a08      	ldr	r0, [r1, #32]
 800217c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002180:	4286      	cmp	r6, r0
 8002182:	d904      	bls.n	800218e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002184:	6a0a      	ldr	r2, [r1, #32]
 8002186:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800218a:	4332      	orrs	r2, r6
 800218c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218e:	079a      	lsls	r2, r3, #30
 8002190:	d50b      	bpl.n	80021aa <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002192:	496f      	ldr	r1, [pc, #444]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002194:	68e6      	ldr	r6, [r4, #12]
 8002196:	6988      	ldr	r0, [r1, #24]
 8002198:	f000 000f 	and.w	r0, r0, #15
 800219c:	4286      	cmp	r6, r0
 800219e:	d904      	bls.n	80021aa <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	698a      	ldr	r2, [r1, #24]
 80021a2:	f022 020f 	bic.w	r2, r2, #15
 80021a6:	4332      	orrs	r2, r6
 80021a8:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	07df      	lsls	r7, r3, #31
 80021ac:	d46e      	bmi.n	800228c <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	079e      	lsls	r6, r3, #30
 80021b2:	f100 80a2 	bmi.w	80022fa <HAL_RCC_ClockConfig+0x1e6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b6:	4965      	ldr	r1, [pc, #404]	; (800234c <HAL_RCC_ClockConfig+0x238>)
 80021b8:	680a      	ldr	r2, [r1, #0]
 80021ba:	f002 020f 	and.w	r2, r2, #15
 80021be:	4295      	cmp	r5, r2
 80021c0:	f0c0 80a9 	bcc.w	8002316 <HAL_RCC_ClockConfig+0x202>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021c4:	0758      	lsls	r0, r3, #29
 80021c6:	f100 80b2 	bmi.w	800232e <HAL_RCC_ClockConfig+0x21a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ca:	0719      	lsls	r1, r3, #28
 80021cc:	d50b      	bpl.n	80021e6 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ce:	4960      	ldr	r1, [pc, #384]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 80021d0:	6965      	ldr	r5, [r4, #20]
 80021d2:	69c8      	ldr	r0, [r1, #28]
 80021d4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80021d8:	4285      	cmp	r5, r0
 80021da:	d204      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021dc:	69ca      	ldr	r2, [r1, #28]
 80021de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021e2:	432a      	orrs	r2, r5
 80021e4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	06da      	lsls	r2, r3, #27
 80021e8:	d50b      	bpl.n	8002202 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021ea:	4959      	ldr	r1, [pc, #356]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 80021ec:	69a5      	ldr	r5, [r4, #24]
 80021ee:	69c8      	ldr	r0, [r1, #28]
 80021f0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80021f4:	4285      	cmp	r5, r0
 80021f6:	d204      	bcs.n	8002202 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021f8:	69ca      	ldr	r2, [r1, #28]
 80021fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021fe:	432a      	orrs	r2, r5
 8002200:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002202:	069b      	lsls	r3, r3, #26
 8002204:	d50b      	bpl.n	800221e <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002206:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002208:	69e0      	ldr	r0, [r4, #28]
 800220a:	6a11      	ldr	r1, [r2, #32]
 800220c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8002210:	4288      	cmp	r0, r1
 8002212:	d204      	bcs.n	800221e <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002214:	6a13      	ldr	r3, [r2, #32]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	4303      	orrs	r3, r0
 800221c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800221e:	f7ff fed7 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8002222:	494b      	ldr	r1, [pc, #300]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002224:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <HAL_RCC_ClockConfig+0x240>)
 8002226:	698b      	ldr	r3, [r1, #24]
 8002228:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002234:	698b      	ldr	r3, [r1, #24]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_RCC_ClockConfig+0x244>)
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa20 f303 	lsr.w	r3, r0, r3
 8002246:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002248:	4b44      	ldr	r3, [pc, #272]	; (800235c <HAL_RCC_ClockConfig+0x248>)
 800224a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_ClockConfig+0x24c>)
}
 800224e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	f7fe baf6 	b.w	8000844 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	f023 030f 	bic.w	r3, r3, #15
 800225e:	430b      	orrs	r3, r1
 8002260:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	4299      	cmp	r1, r3
 800226a:	f47f af58 	bne.w	800211e <HAL_RCC_ClockConfig+0xa>
 800226e:	e760      	b.n	8002132 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002270:	4937      	ldr	r1, [pc, #220]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002272:	6926      	ldr	r6, [r4, #16]
 8002274:	6988      	ldr	r0, [r1, #24]
 8002276:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800227a:	4286      	cmp	r6, r0
 800227c:	f67f af5d 	bls.w	800213a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002280:	698a      	ldr	r2, [r1, #24]
 8002282:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002286:	4332      	orrs	r2, r6
 8002288:	618a      	str	r2, [r1, #24]
 800228a:	e756      	b.n	800213a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 800228e:	68a1      	ldr	r1, [r4, #8]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002296:	430a      	orrs	r2, r1
 8002298:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800229c:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	2902      	cmp	r1, #2
 80022a0:	d11e      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x1cc>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a6:	f43f af3a 	beq.w	800211e <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b0:	4e27      	ldr	r6, [pc, #156]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	f022 0207 	bic.w	r2, r2, #7
 80022b6:	430a      	orrs	r2, r1
 80022b8:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80022ba:	f7fe fb23 	bl	8000904 <HAL_GetTick>
 80022be:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	6933      	ldr	r3, [r6, #16]
 80022c2:	6862      	ldr	r2, [r4, #4]
 80022c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022c8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80022cc:	f43f af6f 	beq.w	80021ae <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fb18 	bl	8000904 <HAL_GetTick>
 80022d4:	1bc0      	subs	r0, r0, r7
 80022d6:	4540      	cmp	r0, r8
 80022d8:	d9f2      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80022da:	2003      	movs	r0, #3
}
 80022dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e0:	2903      	cmp	r1, #3
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_ClockConfig+0x1d6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80022e8:	e7dd      	b.n	80022a6 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022ea:	2901      	cmp	r1, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x1e0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80022f2:	e7d8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f4:	f012 0f04 	tst.w	r2, #4
 80022f8:	e7d5      	b.n	80022a6 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022fa:	4915      	ldr	r1, [pc, #84]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 80022fc:	68e6      	ldr	r6, [r4, #12]
 80022fe:	6988      	ldr	r0, [r1, #24]
 8002300:	f000 000f 	and.w	r0, r0, #15
 8002304:	4286      	cmp	r6, r0
 8002306:	f4bf af56 	bcs.w	80021b6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230a:	698a      	ldr	r2, [r1, #24]
 800230c:	f022 020f 	bic.w	r2, r2, #15
 8002310:	4332      	orrs	r2, r6
 8002312:	618a      	str	r2, [r1, #24]
 8002314:	e74f      	b.n	80021b6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	680a      	ldr	r2, [r1, #0]
 8002318:	f022 020f 	bic.w	r2, r2, #15
 800231c:	432a      	orrs	r2, r5
 800231e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002320:	680a      	ldr	r2, [r1, #0]
 8002322:	f002 020f 	and.w	r2, r2, #15
 8002326:	4295      	cmp	r5, r2
 8002328:	f47f aef9 	bne.w	800211e <HAL_RCC_ClockConfig+0xa>
 800232c:	e74a      	b.n	80021c4 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <HAL_RCC_ClockConfig+0x23c>)
 8002330:	6925      	ldr	r5, [r4, #16]
 8002332:	6988      	ldr	r0, [r1, #24]
 8002334:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002338:	4285      	cmp	r5, r0
 800233a:	f4bf af46 	bcs.w	80021ca <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800233e:	698a      	ldr	r2, [r1, #24]
 8002340:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002344:	432a      	orrs	r2, r5
 8002346:	618a      	str	r2, [r1, #24]
 8002348:	e73f      	b.n	80021ca <HAL_RCC_ClockConfig+0xb6>
 800234a:	bf00      	nop
 800234c:	52002000 	.word	0x52002000
 8002350:	58024400 	.word	0x58024400
 8002354:	0800f33d 	.word	0x0800f33d
 8002358:	24000028 	.word	0x24000028
 800235c:	24000024 	.word	0x24000024
 8002360:	24000004 	.word	0x24000004

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002366:	f7ff fe33 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_RCC_GetHCLKFreq+0x34>)
 800236c:	490b      	ldr	r1, [pc, #44]	; (800239c <HAL_RCC_GetHCLKFreq+0x38>)
 800236e:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002370:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002372:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002376:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002384:	5c88      	ldrb	r0, [r1, r2]
 8002386:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002388:	f000 001f 	and.w	r0, r0, #31
 800238c:	fa23 f000 	lsr.w	r0, r3, r0
 8002390:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x40>)
 8002394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002396:	bd08      	pop	{r3, pc}
 8002398:	58024400 	.word	0x58024400
 800239c:	0800f33d 	.word	0x0800f33d
 80023a0:	24000028 	.word	0x24000028
 80023a4:	24000024 	.word	0x24000024

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023aa:	f7ff ffdb 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023b0:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023be:	40d8      	lsrs	r0, r3
 80023c0:	bd08      	pop	{r3, pc}
 80023c2:	bf00      	nop
 80023c4:	58024400 	.word	0x58024400
 80023c8:	0800f33d 	.word	0x0800f33d

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023ce:	f7ff ffc9 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80023e2:	40d8      	lsrs	r0, r3
 80023e4:	bd08      	pop	{r3, pc}
 80023e6:	bf00      	nop
 80023e8:	58024400 	.word	0x58024400
 80023ec:	0800f33d 	.word	0x0800f33d

080023f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80023f2:	4c3a      	ldr	r4, [pc, #232]	; (80024dc <RCCEx_PLL2_Config+0xec>)
{
 80023f4:	4606      	mov	r6, r0
 80023f6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80023f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d069      	beq.n	80024d6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002408:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240a:	f7fe fa7b 	bl	8000904 <HAL_GetTick>
 800240e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	011a      	lsls	r2, r3, #4
 8002414:	d44b      	bmi.n	80024ae <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002418:	6832      	ldr	r2, [r6, #0]
 800241a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800241e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002422:	62a3      	str	r3, [r4, #40]	; 0x28
 8002424:	68b3      	ldr	r3, [r6, #8]
 8002426:	68f2      	ldr	r2, [r6, #12]
 8002428:	3b01      	subs	r3, #1
 800242a:	3a01      	subs	r2, #1
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	0412      	lsls	r2, r2, #16
 8002430:	b29b      	uxth	r3, r3
 8002432:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002436:	4313      	orrs	r3, r2
 8002438:	6872      	ldr	r2, [r6, #4]
 800243a:	3a01      	subs	r2, #1
 800243c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002440:	4313      	orrs	r3, r2
 8002442:	6932      	ldr	r2, [r6, #16]
 8002444:	3a01      	subs	r2, #1
 8002446:	0612      	lsls	r2, r2, #24
 8002448:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800244c:	4313      	orrs	r3, r2
 800244e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002450:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002452:	6972      	ldr	r2, [r6, #20]
 8002454:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002458:	4313      	orrs	r3, r2
 800245a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800245c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800245e:	69b2      	ldr	r2, [r6, #24]
 8002460:	f023 0320 	bic.w	r3, r3, #32
 8002464:	4313      	orrs	r3, r2
 8002466:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800246a:	f023 0310 	bic.w	r3, r3, #16
 800246e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002472:	69f2      	ldr	r2, [r6, #28]
 8002474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002478:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800247c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002480:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800248a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800248c:	b9b5      	cbnz	r5, 80024bc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800248e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002492:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002494:	4c11      	ldr	r4, [pc, #68]	; (80024dc <RCCEx_PLL2_Config+0xec>)
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249e:	f7fe fa31 	bl	8000904 <HAL_GetTick>
 80024a2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	d50f      	bpl.n	80024ca <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 80024aa:	2000      	movs	r0, #0
 80024ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80024ae:	f7fe fa29 	bl	8000904 <HAL_GetTick>
 80024b2:	1bc0      	subs	r0, r0, r7
 80024b4:	2802      	cmp	r0, #2
 80024b6:	d9ab      	bls.n	8002410 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80024b8:	2003      	movs	r0, #3
 80024ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80024bc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80024be:	bf0c      	ite	eq
 80024c0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80024c4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80024c8:	e7e3      	b.n	8002492 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80024ca:	f7fe fa1b 	bl	8000904 <HAL_GetTick>
 80024ce:	1b40      	subs	r0, r0, r5
 80024d0:	2802      	cmp	r0, #2
 80024d2:	d9e7      	bls.n	80024a4 <RCCEx_PLL2_Config+0xb4>
 80024d4:	e7f0      	b.n	80024b8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80024d6:	2001      	movs	r0, #1
}
 80024d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024da:	bf00      	nop
 80024dc:	58024400 	.word	0x58024400

080024e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80024e2:	4c3a      	ldr	r4, [pc, #232]	; (80025cc <RCCEx_PLL3_Config+0xec>)
{
 80024e4:	4606      	mov	r6, r0
 80024e6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80024e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d069      	beq.n	80025c6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fa:	f7fe fa03 	bl	8000904 <HAL_GetTick>
 80024fe:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	009a      	lsls	r2, r3, #2
 8002504:	d44b      	bmi.n	800259e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002508:	6832      	ldr	r2, [r6, #0]
 800250a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800250e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002512:	62a3      	str	r3, [r4, #40]	; 0x28
 8002514:	68b3      	ldr	r3, [r6, #8]
 8002516:	68f2      	ldr	r2, [r6, #12]
 8002518:	3b01      	subs	r3, #1
 800251a:	3a01      	subs	r2, #1
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	0412      	lsls	r2, r2, #16
 8002520:	b29b      	uxth	r3, r3
 8002522:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002526:	4313      	orrs	r3, r2
 8002528:	6872      	ldr	r2, [r6, #4]
 800252a:	3a01      	subs	r2, #1
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002530:	4313      	orrs	r3, r2
 8002532:	6932      	ldr	r2, [r6, #16]
 8002534:	3a01      	subs	r2, #1
 8002536:	0612      	lsls	r2, r2, #24
 8002538:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800253c:	4313      	orrs	r3, r2
 800253e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002542:	6972      	ldr	r2, [r6, #20]
 8002544:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002548:	4313      	orrs	r3, r2
 800254a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800254c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800254e:	69b2      	ldr	r2, [r6, #24]
 8002550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002554:	4313      	orrs	r3, r2
 8002556:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800255a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800255e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002560:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002562:	69f2      	ldr	r2, [r6, #28]
 8002564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002568:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800256c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002570:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800257a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800257c:	b9b5      	cbnz	r5, 80025ac <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800257e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002582:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002584:	4c11      	ldr	r4, [pc, #68]	; (80025cc <RCCEx_PLL3_Config+0xec>)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258e:	f7fe f9b9 	bl	8000904 <HAL_GetTick>
 8002592:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	d50f      	bpl.n	80025ba <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800259a:	2000      	movs	r0, #0
 800259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800259e:	f7fe f9b1 	bl	8000904 <HAL_GetTick>
 80025a2:	1bc0      	subs	r0, r0, r7
 80025a4:	2802      	cmp	r0, #2
 80025a6:	d9ab      	bls.n	8002500 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80025a8:	2003      	movs	r0, #3
 80025aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80025ac:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80025ae:	bf0c      	ite	eq
 80025b0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80025b4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80025b8:	e7e3      	b.n	8002582 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80025ba:	f7fe f9a3 	bl	8000904 <HAL_GetTick>
 80025be:	1b40      	subs	r0, r0, r5
 80025c0:	2802      	cmp	r0, #2
 80025c2:	d9e7      	bls.n	8002594 <RCCEx_PLL3_Config+0xb4>
 80025c4:	e7f0      	b.n	80025a8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
}
 80025c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	58024400 	.word	0x58024400

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80025d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025d4:	6806      	ldr	r6, [r0, #0]
{
 80025d6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025d8:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 80025dc:	d023      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80025de:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80025e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e4:	d018      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80025e6:	d802      	bhi.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025e8:	b183      	cbz	r3, 800260c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 80025ea:	2601      	movs	r6, #1
 80025ec:	e01b      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80025ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f2:	d023      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80025f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025f8:	d1f7      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025fa:	4a9f      	ldr	r2, [pc, #636]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80025fc:	2600      	movs	r6, #0
 80025fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002600:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002602:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002606:	430b      	orrs	r3, r1
 8002608:	6513      	str	r3, [r2, #80]	; 0x50
 800260a:	e00c      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260c:	4a9a      	ldr	r2, [pc, #616]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800260e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002614:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002616:	e7f0      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002618:	2102      	movs	r1, #2
 800261a:	3004      	adds	r0, #4
 800261c:	f7ff fee8 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002620:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002622:	2800      	cmp	r0, #0
 8002624:	d0e9      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	05dd      	lsls	r5, r3, #23
 800262a:	d534      	bpl.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 800262c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800262e:	2b04      	cmp	r3, #4
 8002630:	d830      	bhi.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002632:	e8df f003 	tbb	[pc, r3]
 8002636:	0f08      	.short	0x0f08
 8002638:	0d29      	.short	0x0d29
 800263a:	0d          	.byte	0x0d
 800263b:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800263c:	2102      	movs	r1, #2
 800263e:	3024      	adds	r0, #36	; 0x24
 8002640:	f7ff ff4e 	bl	80024e0 <RCCEx_PLL3_Config>
 8002644:	e7ec      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002646:	4a8c      	ldr	r2, [pc, #560]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002648:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800264a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8002650:	4635      	mov	r5, r6
 8002652:	e004      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002654:	2100      	movs	r1, #0
 8002656:	1d20      	adds	r0, r4, #4
 8002658:	f7ff feca 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800265c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800265e:	b9e5      	cbnz	r5, 800269a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002660:	4a85      	ldr	r2, [pc, #532]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002662:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002664:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002666:	f023 0307 	bic.w	r3, r3, #7
 800266a:	430b      	orrs	r3, r1
 800266c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	0598      	lsls	r0, r3, #22
 8002672:	d521      	bpl.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002674:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d03b      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800267a:	d810      	bhi.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800267c:	b36b      	cbz	r3, 80026da <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d031      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8002682:	2601      	movs	r6, #1
 8002684:	4635      	mov	r5, r6
 8002686:	e017      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002688:	2100      	movs	r1, #0
 800268a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800268e:	f7ff ff27 	bl	80024e0 <RCCEx_PLL3_Config>
 8002692:	e7e3      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8002694:	2601      	movs	r6, #1
 8002696:	4635      	mov	r5, r6
 8002698:	e7e9      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800269a:	462e      	mov	r6, r5
 800269c:	e7e7      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 800269e:	2bc0      	cmp	r3, #192	; 0xc0
 80026a0:	d002      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80026a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a6:	d1ec      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 80026a8:	bb4d      	cbnz	r5, 80026fe <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026aa:	4a73      	ldr	r2, [pc, #460]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80026ac:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80026ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80026b0:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	0559      	lsls	r1, r3, #21
 80026bc:	d530      	bpl.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 80026be:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c6:	d047      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80026c8:	d81b      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d038      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80026ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d2:	d03b      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 80026d4:	2601      	movs	r6, #1
 80026d6:	4635      	mov	r5, r6
 80026d8:	e022      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026da:	4a67      	ldr	r2, [pc, #412]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80026dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80026e4:	e7e0      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026e6:	2100      	movs	r1, #0
 80026e8:	1d20      	adds	r0, r4, #4
 80026ea:	f7ff fe81 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026ee:	4605      	mov	r5, r0
      break;
 80026f0:	e7da      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026f2:	2100      	movs	r1, #0
 80026f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026f8:	f7ff fef2 	bl	80024e0 <RCCEx_PLL3_Config>
 80026fc:	e7f7      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80026fe:	462e      	mov	r6, r5
 8002700:	e7da      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002702:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002706:	d002      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800270c:	d1e2      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 800270e:	bb4d      	cbnz	r5, 8002764 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002710:	4a59      	ldr	r2, [pc, #356]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002712:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002716:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002718:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800271c:	430b      	orrs	r3, r1
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	051a      	lsls	r2, r3, #20
 8002724:	d52f      	bpl.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002726:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800272a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272e:	d041      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002730:	d81a      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002732:	b39b      	cbz	r3, 800279c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d036      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 800273a:	2601      	movs	r6, #1
 800273c:	4635      	mov	r5, r6
 800273e:	e022      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002740:	4a4d      	ldr	r2, [pc, #308]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002742:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800274a:	e7e0      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800274c:	2100      	movs	r1, #0
 800274e:	1d20      	adds	r0, r4, #4
 8002750:	f7ff fe4e 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002754:	4605      	mov	r5, r0
      break;
 8002756:	e7da      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002758:	2100      	movs	r1, #0
 800275a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800275e:	f7ff febf 	bl	80024e0 <RCCEx_PLL3_Config>
 8002762:	e7f7      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002764:	462e      	mov	r6, r5
 8002766:	e7db      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002768:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800276c:	d002      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800276e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002772:	d1e2      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8002774:	bb25      	cbnz	r5, 80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002776:	4a40      	ldr	r2, [pc, #256]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002778:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800277c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800277e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002782:	430b      	orrs	r3, r1
 8002784:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	d527      	bpl.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 800278c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800278e:	2b10      	cmp	r3, #16
 8002790:	d033      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002792:	d817      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8002794:	b1d3      	cbz	r3, 80027cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8002796:	2601      	movs	r6, #1
 8002798:	4635      	mov	r5, r6
 800279a:	e01f      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279c:	4a36      	ldr	r2, [pc, #216]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800279e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80027a6:	e7e5      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027a8:	2100      	movs	r1, #0
 80027aa:	1d20      	adds	r0, r4, #4
 80027ac:	f7ff fe20 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b0:	4605      	mov	r5, r0
      break;
 80027b2:	e7df      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b4:	2100      	movs	r1, #0
 80027b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027ba:	f7ff fe91 	bl	80024e0 <RCCEx_PLL3_Config>
 80027be:	e7f7      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80027c0:	462e      	mov	r6, r5
 80027c2:	e7e0      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d01e      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80027c8:	2b30      	cmp	r3, #48	; 0x30
 80027ca:	d1e4      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 80027cc:	bb0d      	cbnz	r5, 8002812 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80027d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80027d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80027d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027d8:	430b      	orrs	r3, r1
 80027da:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	04df      	lsls	r7, r3, #19
 80027e0:	d527      	bpl.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 80027e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e8:	d03e      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80027ea:	d814      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80027ec:	b383      	cbz	r3, 8002850 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d033      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 80027f4:	2601      	movs	r6, #1
 80027f6:	4635      	mov	r5, r6
 80027f8:	e01b      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80027fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002802:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002804:	e7e2      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002806:	2102      	movs	r1, #2
 8002808:	1d20      	adds	r0, r4, #4
 800280a:	f7ff fdf1 	bl	80023f0 <RCCEx_PLL2_Config>
 800280e:	4605      	mov	r5, r0
      break;
 8002810:	e7dc      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8002812:	462e      	mov	r6, r5
 8002814:	e7e2      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800281a:	d002      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x252>
 800281c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002820:	d1e8      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8002822:	bb3d      	cbnz	r5, 8002874 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002826:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002828:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800282a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282e:	430b      	orrs	r3, r1
 8002830:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	0498      	lsls	r0, r3, #18
 8002836:	d532      	bpl.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002838:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800283a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800283e:	d044      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002840:	d81c      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002842:	b323      	cbz	r3, 800288e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d039      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 800284a:	2601      	movs	r6, #1
 800284c:	4635      	mov	r5, r6
 800284e:	e026      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002850:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002852:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002858:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800285a:	e7e2      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800285c:	2100      	movs	r1, #0
 800285e:	1d20      	adds	r0, r4, #4
 8002860:	f7ff fdc6 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002864:	4605      	mov	r5, r0
      break;
 8002866:	e7dc      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002868:	2100      	movs	r1, #0
 800286a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800286e:	f7ff fe37 	bl	80024e0 <RCCEx_PLL3_Config>
 8002872:	e7f7      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8002874:	462e      	mov	r6, r5
 8002876:	e7dc      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002878:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 800287c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002880:	d005      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002886:	d002      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002888:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800288c:	d1dd      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 800288e:	bb15      	cbnz	r5, 80028d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002890:	4aa0      	ldr	r2, [pc, #640]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002892:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002894:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002896:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800289a:	430b      	orrs	r3, r1
 800289c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	0459      	lsls	r1, r3, #17
 80028a2:	d52d      	bpl.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80028a4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80028a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ac:	d04b      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ae:	d814      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80028b0:	b1e3      	cbz	r3, 80028ec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80028b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b6:	d040      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 80028b8:	2601      	movs	r6, #1
 80028ba:	4635      	mov	r5, r6
 80028bc:	e020      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028be:	2101      	movs	r1, #1
 80028c0:	1d20      	adds	r0, r4, #4
 80028c2:	f7ff fd95 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028c6:	4605      	mov	r5, r0
      break;
 80028c8:	e7e1      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028ca:	2101      	movs	r1, #1
 80028cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028d0:	f7ff fe06 	bl	80024e0 <RCCEx_PLL3_Config>
 80028d4:	e7f7      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80028d6:	462e      	mov	r6, r5
 80028d8:	e7e1      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d005      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80028e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e4:	d002      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80028e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028ea:	d1e5      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 80028ec:	2d00      	cmp	r5, #0
 80028ee:	d130      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028f0:	4a88      	ldr	r2, [pc, #544]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80028f2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80028f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028f8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	041a      	lsls	r2, r3, #16
 8002904:	d50f      	bpl.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8002906:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800290c:	d023      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800290e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002912:	d026      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002914:	bb5b      	cbnz	r3, 800296e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8002916:	bb6d      	cbnz	r5, 8002974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002918:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800291a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800291c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800291e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002922:	430b      	orrs	r3, r1
 8002924:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	01db      	lsls	r3, r3, #7
 800292a:	d533      	bpl.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 800292c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800292e:	2b03      	cmp	r3, #3
 8002930:	d87d      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002932:	e8df f003 	tbb	[pc, r3]
 8002936:	2126      	.short	0x2126
 8002938:	2676      	.short	0x2676
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800293a:	2101      	movs	r1, #1
 800293c:	1d20      	adds	r0, r4, #4
 800293e:	f7ff fd57 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002942:	4605      	mov	r5, r0
      break;
 8002944:	e7d2      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002946:	2101      	movs	r1, #1
 8002948:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800294c:	f7ff fdc8 	bl	80024e0 <RCCEx_PLL3_Config>
 8002950:	e7f7      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002952:	462e      	mov	r6, r5
 8002954:	e7d4      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002956:	4a6f      	ldr	r2, [pc, #444]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002958:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800295a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002960:	e7d9      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002962:	2101      	movs	r1, #1
 8002964:	1d20      	adds	r0, r4, #4
 8002966:	f7ff fd43 	bl	80023f0 <RCCEx_PLL2_Config>
 800296a:	4605      	mov	r5, r0
      break;
 800296c:	e7d3      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 800296e:	2601      	movs	r6, #1
 8002970:	4635      	mov	r5, r6
 8002972:	e7d8      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002974:	462e      	mov	r6, r5
 8002976:	e7d6      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002978:	4a66      	ldr	r2, [pc, #408]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800297a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002982:	2d00      	cmp	r5, #0
 8002984:	d156      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x464>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002986:	4a63      	ldr	r2, [pc, #396]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002988:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800298a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800298c:	f023 0303 	bic.w	r3, r3, #3
 8002990:	430b      	orrs	r3, r1
 8002992:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	025f      	lsls	r7, r3, #9
 8002998:	d556      	bpl.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x478>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800299a:	4f5f      	ldr	r7, [pc, #380]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80029a4:	f7fd ffae 	bl	8000904 <HAL_GetTick>
 80029a8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	05d8      	lsls	r0, r3, #23
 80029ae:	d543      	bpl.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x468>
    if(ret == HAL_OK)
 80029b0:	2d00      	cmp	r5, #0
 80029b2:	d161      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029b4:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80029b6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80029ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029bc:	4042      	eors	r2, r0
 80029be:	f412 7f40 	tst.w	r2, #768	; 0x300
 80029c2:	d00b      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80029cc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80029d0:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80029d4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80029d8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80029da:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80029e0:	d108      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
        tickstart = HAL_GetTick();
 80029e2:	f7fd ff8f 	bl	8000904 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e6:	4f4b      	ldr	r7, [pc, #300]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 80029e8:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f0:	0799      	lsls	r1, r3, #30
 80029f2:	d536      	bpl.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x492>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80029f8:	4946      	ldr	r1, [pc, #280]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80029fa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029fe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002a02:	d135      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a04:	6908      	ldr	r0, [r1, #16]
 8002a06:	4a45      	ldr	r2, [pc, #276]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8002a08:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002a0c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002a10:	4302      	orrs	r2, r0
 8002a12:	610a      	str	r2, [r1, #16]
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	4a3e      	ldr	r2, [pc, #248]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002a1a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	e012      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a22:	2102      	movs	r1, #2
 8002a24:	1d20      	adds	r0, r4, #4
 8002a26:	f7ff fce3 	bl	80023f0 <RCCEx_PLL2_Config>
 8002a2a:	4605      	mov	r5, r0
      break;
 8002a2c:	e7a9      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8002a2e:	2601      	movs	r6, #1
 8002a30:	4635      	mov	r5, r6
 8002a32:	e7af      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002a34:	462e      	mov	r6, r5
 8002a36:	e7ad      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fd ff64 	bl	8000904 <HAL_GetTick>
 8002a3c:	eba0 0008 	sub.w	r0, r0, r8
 8002a40:	2864      	cmp	r0, #100	; 0x64
 8002a42:	d9b2      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8002a44:	2603      	movs	r6, #3
 8002a46:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	07da      	lsls	r2, r3, #31
 8002a4c:	d524      	bpl.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a4e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d032      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8002a54:	d812      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002a56:	b1bb      	cbz	r3, 8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d028      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8002a5c:	2601      	movs	r6, #1
 8002a5e:	4635      	mov	r5, r6
 8002a60:	e01a      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fd ff4f 	bl	8000904 <HAL_GetTick>
 8002a66:	eba0 0008 	sub.w	r0, r0, r8
 8002a6a:	4548      	cmp	r0, r9
 8002a6c:	d9bf      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8002a6e:	e7e9      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x474>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a70:	690a      	ldr	r2, [r1, #16]
 8002a72:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002a76:	e7cc      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002a78:	462e      	mov	r6, r5
 8002a7a:	e7e5      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d003      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002a80:	2b28      	cmp	r3, #40	; 0x28
 8002a82:	d001      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002a84:	2b18      	cmp	r3, #24
 8002a86:	d1e9      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    if(ret == HAL_OK)
 8002a88:	b9ed      	cbnz	r5, 8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002a8c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002a8e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002a90:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	079b      	lsls	r3, r3, #30
 8002a9c:	d522      	bpl.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a9e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d831      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002aa4:	e8df f003 	tbb	[pc, r3]
 8002aa8:	162a1116 	.word	0x162a1116
 8002aac:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002aae:	2101      	movs	r1, #1
 8002ab0:	1d20      	adds	r0, r4, #4
 8002ab2:	f7ff fc9d 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ab6:	4605      	mov	r5, r0
      break;
 8002ab8:	e7e6      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aba:	2101      	movs	r1, #1
 8002abc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ac0:	f7ff fd0e 	bl	80024e0 <RCCEx_PLL3_Config>
 8002ac4:	e7f7      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ac6:	462e      	mov	r6, r5
 8002ac8:	e7e6      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002aca:	2101      	movs	r1, #1
 8002acc:	1d20      	adds	r0, r4, #4
 8002ace:	f7ff fc8f 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ad2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ad4:	b9dd      	cbnz	r5, 8002b0e <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002ad8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002ada:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002adc:	f023 0307 	bic.w	r3, r3, #7
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	075f      	lsls	r7, r3, #29
 8002ae8:	d528      	bpl.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002aea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d83a      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002af2:	e8df f003 	tbb	[pc, r3]
 8002af6:	151a      	.short	0x151a
 8002af8:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002afc:	2101      	movs	r1, #1
 8002afe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b02:	f7ff fced 	bl	80024e0 <RCCEx_PLL3_Config>
 8002b06:	e7e4      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8002b08:	2601      	movs	r6, #1
 8002b0a:	4635      	mov	r5, r6
 8002b0c:	e7ea      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b0e:	462e      	mov	r6, r5
 8002b10:	e7e8      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b12:	bf00      	nop
 8002b14:	58024400 	.word	0x58024400
 8002b18:	58024800 	.word	0x58024800
 8002b1c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b20:	2101      	movs	r1, #1
 8002b22:	1d20      	adds	r0, r4, #4
 8002b24:	f7ff fc64 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002b2a:	bb05      	cbnz	r5, 8002b6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b2c:	4a98      	ldr	r2, [pc, #608]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002b2e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002b32:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b34:	f023 0307 	bic.w	r3, r3, #7
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	0698      	lsls	r0, r3, #26
 8002b40:	d529      	bpl.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002b42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4a:	d03a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002b4c:	d811      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b4e:	b1cb      	cbz	r3, 8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b54:	d02f      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8002b56:	2601      	movs	r6, #1
 8002b58:	4635      	mov	r5, r6
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b62:	f7ff fcbd 	bl	80024e0 <RCCEx_PLL3_Config>
 8002b66:	e7df      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8002b68:	2601      	movs	r6, #1
 8002b6a:	4635      	mov	r5, r6
 8002b6c:	e7e6      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8002b6e:	462e      	mov	r6, r5
 8002b70:	e7e4      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d005      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002b7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b82:	d1e8      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8002b84:	bb1d      	cbnz	r5, 8002bce <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b86:	4a82      	ldr	r2, [pc, #520]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002b88:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002b8e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002b92:	430b      	orrs	r3, r1
 8002b94:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	0659      	lsls	r1, r3, #25
 8002b9a:	d52c      	bpl.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b9c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba4:	d03f      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8002ba6:	d814      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8002ba8:	b1e3      	cbz	r3, 8002be4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d034      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 8002bb0:	2601      	movs	r6, #1
 8002bb2:	4635      	mov	r5, r6
 8002bb4:	e01f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	1d20      	adds	r0, r4, #4
 8002bba:	f7ff fc19 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bbe:	4605      	mov	r5, r0
      break;
 8002bc0:	e7e0      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002bc8:	f7ff fc8a 	bl	80024e0 <RCCEx_PLL3_Config>
 8002bcc:	e7f7      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8002bce:	462e      	mov	r6, r5
 8002bd0:	e7e1      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002bd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002be2:	d1e5      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 8002be4:	bb2d      	cbnz	r5, 8002c32 <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be6:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002be8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002bec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002bee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	061a      	lsls	r2, r3, #24
 8002bfa:	d530      	bpl.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002bfc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c04:	f000 80a4 	beq.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8002c08:	d815      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8002c0a:	b1eb      	cbz	r3, 8002c48 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c10:	f000 8098 	beq.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 8002c14:	2601      	movs	r6, #1
 8002c16:	4635      	mov	r5, r6
 8002c18:	e021      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	1d20      	adds	r0, r4, #4
 8002c1e:	f7ff fbe7 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c22:	4605      	mov	r5, r0
      break;
 8002c24:	e7de      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c26:	2102      	movs	r1, #2
 8002c28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c2c:	f7ff fc58 	bl	80024e0 <RCCEx_PLL3_Config>
 8002c30:	e7f7      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002c32:	462e      	mov	r6, r5
 8002c34:	e7df      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c40:	d002      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c46:	d1e5      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	f040 8087 	bne.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c4e:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002c50:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002c54:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002c56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	071b      	lsls	r3, r3, #28
 8002c62:	d514      	bpl.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002c64:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c6e:	2102      	movs	r1, #2
 8002c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c74:	f7ff fc34 	bl	80024e0 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	bf18      	it	ne
 8002c7c:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002c7e:	4a44      	ldr	r2, [pc, #272]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002c80:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002c84:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002c86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	06df      	lsls	r7, r3, #27
 8002c92:	d514      	bpl.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002c94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d107      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ca4:	f7ff fc1c 	bl	80024e0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	bf18      	it	ne
 8002cac:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cae:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002cb0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002cb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	0318      	lsls	r0, r3, #12
 8002cc2:	d517      	bpl.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 8002cc4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002cc8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002ccc:	d048      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8002cce:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	d149      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cd8:	1d20      	adds	r0, r4, #4
 8002cda:	f7ff fb89 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d146      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce4:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002ce6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002cea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002cec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	0359      	lsls	r1, r3, #13
 8002cf8:	d518      	bpl.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 8002cfa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d02:	d038      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002d04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d08:	d007      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0e:	d139      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002d1a:	bbb5      	cbnz	r5, 8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d1e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002d22:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002d24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	03da      	lsls	r2, r3, #15
 8002d30:	d53e      	bpl.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002d32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d34:	b373      	cbz	r3, 8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	f000 8082 	beq.w	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x872>
      ret = HAL_ERROR;
 8002d3e:	2601      	movs	r6, #1
 8002d40:	4635      	mov	r5, r6
 8002d42:	e035      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d44:	2100      	movs	r1, #0
 8002d46:	1d20      	adds	r0, r4, #4
 8002d48:	f7ff fb52 	bl	80023f0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d4c:	4605      	mov	r5, r0
      break;
 8002d4e:	e77b      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d50:	2102      	movs	r1, #2
 8002d52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d56:	f7ff fbc3 	bl	80024e0 <RCCEx_PLL3_Config>
 8002d5a:	e7f7      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002d5c:	462e      	mov	r6, r5
 8002d5e:	e77e      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d60:	2102      	movs	r1, #2
 8002d62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d66:	f7ff fbbb 	bl	80024e0 <RCCEx_PLL3_Config>
 8002d6a:	e7b8      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8002d6c:	2601      	movs	r6, #1
 8002d6e:	4635      	mov	r5, r6
 8002d70:	e7c0      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x724>
 8002d72:	462e      	mov	r6, r5
 8002d74:	e7be      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d76:	2101      	movs	r1, #1
 8002d78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d7c:	f7ff fbb0 	bl	80024e0 <RCCEx_PLL3_Config>
 8002d80:	4605      	mov	r5, r0
      break;
 8002d82:	e7ca      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8002d84:	2601      	movs	r6, #1
 8002d86:	4635      	mov	r5, r6
 8002d88:	e7d0      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002d8a:	462e      	mov	r6, r5
 8002d8c:	e7ce      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002d8e:	bf00      	nop
 8002d90:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d94:	4a37      	ldr	r2, [pc, #220]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002d96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	d155      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002da4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002da6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dac:	430b      	orrs	r3, r1
 8002dae:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	d507      	bpl.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002db6:	2102      	movs	r1, #2
 8002db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002dbc:	f7ff fb90 	bl	80024e0 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	bf18      	it	ne
 8002dc4:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	039f      	lsls	r7, r3, #14
 8002dca:	d50e      	bpl.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8002dcc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002dce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002dd2:	d046      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x892>
 8002dd4:	d83d      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x882>
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d141      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    if(ret == HAL_OK)
 8002dda:	2d00      	cmp	r5, #0
 8002ddc:	d147      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dde:	4825      	ldr	r0, [pc, #148]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002de0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002de2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002de6:	430a      	orrs	r2, r1
 8002de8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dea:	02d8      	lsls	r0, r3, #11
 8002dec:	d506      	bpl.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dee:	4921      	ldr	r1, [pc, #132]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002df0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002df2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002df4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df8:	4302      	orrs	r2, r0
 8002dfa:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dfc:	0299      	lsls	r1, r3, #10
 8002dfe:	d506      	bpl.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e00:	491c      	ldr	r1, [pc, #112]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e02:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002e04:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002e06:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002e0a:	4302      	orrs	r2, r0
 8002e0c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002e0e:	005a      	lsls	r2, r3, #1
 8002e10:	d509      	bpl.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x856>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e14:	6911      	ldr	r1, [r2, #16]
 8002e16:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002e1a:	6111      	str	r1, [r2, #16]
 8002e1c:	6911      	ldr	r1, [r2, #16]
 8002e1e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8002e22:	4301      	orrs	r1, r0
 8002e24:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da06      	bge.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x868>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e30:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002e34:	430b      	orrs	r3, r1
 8002e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e38:	1c30      	adds	r0, r6, #0
 8002e3a:	bf18      	it	ne
 8002e3c:	2001      	movne	r0, #1
}
 8002e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e42:	2102      	movs	r1, #2
 8002e44:	1d20      	adds	r0, r4, #4
 8002e46:	f7ff fad3 	bl	80023f0 <RCCEx_PLL2_Config>
 8002e4a:	4605      	mov	r5, r0
      break;
 8002e4c:	e7a7      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002e4e:	462e      	mov	r6, r5
 8002e50:	e7ae      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8002e52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002e56:	d0c0      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002e58:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002e5c:	d0bd      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8002e5e:	2601      	movs	r6, #1
 8002e60:	e7c3      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e62:	4804      	ldr	r0, [pc, #16]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002e66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e6a:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002e6c:	e7b5      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002e6e:	462e      	mov	r6, r5
 8002e70:	e7bb      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400

08002e78 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002e78:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002e7a:	f7ff fa73 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8002e80:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
}
 8002e8e:	40d8      	lsrs	r0, r3
 8002e90:	bd08      	pop	{r3, pc}
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
 8002e98:	0800f33d 	.word	0x0800f33d

08002e9c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e9c:	494e      	ldr	r1, [pc, #312]	; (8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8002e9e:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ea0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002ea2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ea4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002ea6:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002eaa:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 808e 	beq.w	8002fce <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002eb2:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002eb6:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002eba:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002fdc <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 8002ebe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002ec2:	436a      	muls	r2, r5
 8002ec4:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ec8:	f004 0203 	and.w	r2, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ecc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 8002ed0:	2a01      	cmp	r2, #1
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eda:	d002      	beq.n	8002ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002edc:	d30f      	bcc.n	8002efe <HAL_RCCEx_GetPLL2ClockFreq+0x62>
 8002ede:	2a02      	cmp	r2, #2
 8002ee0:	d067      	beq.n	8002fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ee2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002ef4:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8002fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002ef8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002efc:	e056      	b.n	8002fac <HAL_RCCEx_GetPLL2ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002efe:	680b      	ldr	r3, [r1, #0]
 8002f00:	069b      	lsls	r3, r3, #26
 8002f02:	d546      	bpl.n	8002f92 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f04:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002f06:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f08:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002f0c:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f12:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002f14:	ee07 2a90 	vmov	s15, r2
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f28:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002f2c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002f32:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002f36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002f38:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002f3c:	ee07 3a10 	vmov	s14, r3
 8002f40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f44:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002f48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f4c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002f50:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002f54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002f56:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002f5a:	ee07 3a10 	vmov	s14, r3
 8002f5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f62:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002f66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f6a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002f6e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002f72:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002f74:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002f78:	ee07 3a10 	vmov	s14, r3
 8002f7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f80:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002f84:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002f88:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002f8c:	ed80 7a02 	vstr	s14, [r0, #8]
 8002f90:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002f92:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002fa4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002fa8:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002fac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002fb0:	e7be      	b.n	8002f30 <HAL_RCCEx_GetPLL2ClockFreq+0x94>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002fb2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002fc4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002fec <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002fc8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002fcc:	e7ee      	b.n	8002fac <HAL_RCCEx_GetPLL2ClockFreq+0x110>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002fce:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002fd0:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002fd2:	6083      	str	r3, [r0, #8]
 8002fd4:	bd30      	pop	{r4, r5, pc}
 8002fd6:	bf00      	nop
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	39000000 	.word	0x39000000
 8002fe0:	4a742400 	.word	0x4a742400
 8002fe4:	03d09000 	.word	0x03d09000
 8002fe8:	4c742400 	.word	0x4c742400
 8002fec:	4af42400 	.word	0x4af42400

08002ff0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ff0:	494e      	ldr	r1, [pc, #312]	; (800312c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8002ff2:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ff4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002ff6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002ff8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002ffa:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002ffe:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 808e 	beq.w	8003122 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003006:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800300a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800300e:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8003130 <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 8003012:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003016:	436a      	muls	r2, r5
 8003018:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800301c:	f004 0203 	and.w	r2, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003020:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 8003024:	2a01      	cmp	r2, #1
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800302e:	d002      	beq.n	8003036 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8003030:	d30f      	bcc.n	8003052 <HAL_RCCEx_GetPLL3ClockFreq+0x62>
 8003032:	2a02      	cmp	r2, #2
 8003034:	d067      	beq.n	8003106 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003036:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003044:	eee6 7a05 	vfma.f32	s15, s12, s10
 8003048:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8003134 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800304c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003050:	e056      	b.n	8003100 <HAL_RCCEx_GetPLL3ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003052:	680b      	ldr	r3, [r1, #0]
 8003054:	069b      	lsls	r3, r3, #26
 8003056:	d546      	bpl.n	80030e6 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003058:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800305a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800305c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8003060:	4a35      	ldr	r2, [pc, #212]	; (8003138 <HAL_RCCEx_GetPLL3ClockFreq+0x148>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003066:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003068:	ee07 2a90 	vmov	s15, r2
 800306c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003070:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8003080:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003086:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800308a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800308c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003090:	ee07 3a10 	vmov	s14, r3
 8003094:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003098:	ee37 7a25 	vadd.f32	s14, s14, s11
 800309c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80030a4:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80030a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030aa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80030ae:	ee07 3a10 	vmov	s14, r3
 80030b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030b6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80030ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030be:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80030c2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80030c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80030cc:	ee07 3a10 	vmov	s14, r3
 80030d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030d4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80030d8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80030dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80030e0:	ed80 7a02 	vstr	s14, [r0, #8]
 80030e4:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80030e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80030f8:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800313c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80030fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003100:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003104:	e7be      	b.n	8003084 <HAL_RCCEx_GetPLL3ClockFreq+0x94>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003106:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003114:	eee6 7a05 	vfma.f32	s15, s12, s10
 8003118:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8003140 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800311c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003120:	e7ee      	b.n	8003100 <HAL_RCCEx_GetPLL3ClockFreq+0x110>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003122:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003124:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003126:	6083      	str	r3, [r0, #8]
 8003128:	bd30      	pop	{r4, r5, pc}
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
 8003130:	39000000 	.word	0x39000000
 8003134:	4a742400 	.word	0x4a742400
 8003138:	03d09000 	.word	0x03d09000
 800313c:	4c742400 	.word	0x4c742400
 8003140:	4af42400 	.word	0x4af42400

08003144 <HAL_TIM_PeriodElapsedCallback>:
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_OC_DelayElapsedCallback>:
 8003146:	4770      	bx	lr

08003148 <HAL_TIM_IC_CaptureCallback>:
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_TriggerCallback>:
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800314e:	6803      	ldr	r3, [r0, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	0791      	lsls	r1, r2, #30
{
 8003154:	b510      	push	{r4, lr}
 8003156:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003158:	d50f      	bpl.n	800317a <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	0792      	lsls	r2, r2, #30
 800315e:	d50c      	bpl.n	800317a <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003160:	f06f 0202 	mvn.w	r2, #2
 8003164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003166:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003168:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800316a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800316c:	0799      	lsls	r1, r3, #30
 800316e:	f000 8085 	beq.w	800327c <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	f7ff ffe9 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	2300      	movs	r3, #0
 8003178:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	0752      	lsls	r2, r2, #29
 8003180:	d510      	bpl.n	80031a4 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	0750      	lsls	r0, r2, #29
 8003186:	d50d      	bpl.n	80031a4 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003188:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800318e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003190:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003192:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003194:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003196:	f413 7f40 	tst.w	r3, #768	; 0x300
 800319a:	d075      	beq.n	8003288 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800319c:	f7ff ffd4 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a0:	2300      	movs	r3, #0
 80031a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	0711      	lsls	r1, r2, #28
 80031aa:	d50f      	bpl.n	80031cc <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	0712      	lsls	r2, r2, #28
 80031b0:	d50c      	bpl.n	80031cc <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b2:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031bc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	079b      	lsls	r3, r3, #30
 80031c2:	d067      	beq.n	8003294 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80031c4:	f7ff ffc0 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c8:	2300      	movs	r3, #0
 80031ca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	06d0      	lsls	r0, r2, #27
 80031d2:	d510      	bpl.n	80031f6 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	06d1      	lsls	r1, r2, #27
 80031d8:	d50d      	bpl.n	80031f6 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031da:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e2:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031ec:	d058      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	f7ff ffab 	bl	8003148 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	2300      	movs	r3, #0
 80031f4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	07d2      	lsls	r2, r2, #31
 80031fc:	d508      	bpl.n	8003210 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	07d0      	lsls	r0, r2, #31
 8003202:	d505      	bpl.n	8003210 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003204:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003208:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800320a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800320c:	f7ff ff9a 	bl	8003144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	0611      	lsls	r1, r2, #24
 8003216:	d508      	bpl.n	800322a <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	0612      	lsls	r2, r2, #24
 800321c:	d505      	bpl.n	800322a <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800321e:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003222:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003224:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003226:	f000 f9c6 	bl	80035b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	05d0      	lsls	r0, r2, #23
 8003230:	d508      	bpl.n	8003244 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	0611      	lsls	r1, r2, #24
 8003236:	d505      	bpl.n	8003244 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003238:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800323c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800323e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003240:	f000 f9ba 	bl	80035b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	0652      	lsls	r2, r2, #25
 800324a:	d508      	bpl.n	800325e <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	0650      	lsls	r0, r2, #25
 8003250:	d505      	bpl.n	800325e <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003252:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003256:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003258:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800325a:	f7ff ff77 	bl	800314c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	0691      	lsls	r1, r2, #26
 8003264:	d522      	bpl.n	80032ac <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	0692      	lsls	r2, r2, #26
 800326a:	d51f      	bpl.n	80032ac <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003270:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003272:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003278:	f000 b99c 	b.w	80035b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327c:	f7ff ff63 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	4620      	mov	r0, r4
 8003282:	f7ff ff62 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
 8003286:	e776      	b.n	8003176 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003288:	f7ff ff5d 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff ff5c 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
 8003292:	e785      	b.n	80031a0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003294:	f7ff ff57 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff ff56 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
 800329e:	e793      	b.n	80031c8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a0:	f7ff ff51 	bl	8003146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	4620      	mov	r0, r4
 80032a6:	f7ff ff50 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
 80032aa:	e7a2      	b.n	80031f2 <HAL_TIM_IRQHandler+0xa4>
 80032ac:	bd10      	pop	{r4, pc}
	...

080032b0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b0:	4a30      	ldr	r2, [pc, #192]	; (8003374 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80032b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b4:	4290      	cmp	r0, r2
 80032b6:	d012      	beq.n	80032de <TIM_Base_SetConfig+0x2e>
 80032b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032bc:	d00f      	beq.n	80032de <TIM_Base_SetConfig+0x2e>
 80032be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80032c2:	4290      	cmp	r0, r2
 80032c4:	d00b      	beq.n	80032de <TIM_Base_SetConfig+0x2e>
 80032c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ca:	4290      	cmp	r0, r2
 80032cc:	d007      	beq.n	80032de <TIM_Base_SetConfig+0x2e>
 80032ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032d2:	4290      	cmp	r0, r2
 80032d4:	d003      	beq.n	80032de <TIM_Base_SetConfig+0x2e>
 80032d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80032da:	4290      	cmp	r0, r2
 80032dc:	d119      	bne.n	8003312 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80032de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032e4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e6:	4a23      	ldr	r2, [pc, #140]	; (8003374 <TIM_Base_SetConfig+0xc4>)
 80032e8:	4290      	cmp	r0, r2
 80032ea:	d01d      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 80032ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032f0:	d01a      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 80032f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80032f6:	4290      	cmp	r0, r2
 80032f8:	d016      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 80032fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032fe:	4290      	cmp	r0, r2
 8003300:	d012      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 8003302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003306:	4290      	cmp	r0, r2
 8003308:	d00e      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 800330a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800330e:	4290      	cmp	r0, r2
 8003310:	d00a      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <TIM_Base_SetConfig+0xc8>)
 8003314:	4290      	cmp	r0, r2
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 8003318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800331c:	4290      	cmp	r0, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x78>
 8003320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003324:	4290      	cmp	r0, r2
 8003326:	d103      	bne.n	8003330 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332c:	68ca      	ldr	r2, [r1, #12]
 800332e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	694a      	ldr	r2, [r1, #20]
 8003332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003336:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003338:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333a:	688b      	ldr	r3, [r1, #8]
 800333c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333e:	680b      	ldr	r3, [r1, #0]
 8003340:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <TIM_Base_SetConfig+0xc4>)
 8003344:	4298      	cmp	r0, r3
 8003346:	d00f      	beq.n	8003368 <TIM_Base_SetConfig+0xb8>
 8003348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334c:	4298      	cmp	r0, r3
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0xb8>
 8003350:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003354:	4298      	cmp	r0, r3
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0xb8>
 8003358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335c:	4298      	cmp	r0, r3
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0xb8>
 8003360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003364:	4298      	cmp	r0, r3
 8003366:	d101      	bne.n	800336c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003368:	690b      	ldr	r3, [r1, #16]
 800336a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800336c:	2301      	movs	r3, #1
 800336e:	6143      	str	r3, [r0, #20]
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40014000 	.word	0x40014000

0800337c <HAL_TIM_Base_Init>:
{
 800337c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800337e:	4604      	mov	r4, r0
 8003380:	b1a0      	cbz	r0, 80033ac <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003382:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003386:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800338a:	b91b      	cbnz	r3, 8003394 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800338c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003390:	f007 fee4 	bl	800b15c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800339a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339e:	f7ff ff87 	bl	80032b0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80033a2:	2301      	movs	r3, #1
  return HAL_OK;
 80033a4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
}
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b0:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b2:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80033b4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ba:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033be:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c0:	6083      	str	r3, [r0, #8]
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
{
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	4604      	mov	r4, r0
 80033ce:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80033d2:	d034      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80033d8:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80033da:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80033dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e2:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_TIM_ConfigClockSource+0x154>)
 80033e4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80033e6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80033e8:	680b      	ldr	r3, [r1, #0]
 80033ea:	2b60      	cmp	r3, #96	; 0x60
 80033ec:	d060      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0xec>
 80033ee:	d814      	bhi.n	800341a <HAL_TIM_ConfigClockSource+0x56>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d003      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x38>
 80033f4:	d80b      	bhi.n	800340e <HAL_TIM_ConfigClockSource+0x4a>
 80033f6:	b10b      	cbz	r3, 80033fc <HAL_TIM_ConfigClockSource+0x38>
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d11a      	bne.n	8003432 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 80033fc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fe:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003406:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	4313      	orrs	r3, r2
 800340c:	e04e      	b.n	80034ac <HAL_TIM_ConfigClockSource+0xe8>
  switch (sClockSourceConfig->ClockSource)
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d068      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x120>
 8003412:	2b50      	cmp	r3, #80	; 0x50
 8003414:	d032      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xb8>
 8003416:	2b30      	cmp	r3, #48	; 0x30
 8003418:	e7ef      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x36>
 800341a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800341e:	d0ed      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x38>
 8003420:	d80e      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x7c>
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003426:	d01f      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0xa4>
 8003428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342c:	d0e6      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x38>
 800342e:	2b70      	cmp	r3, #112	; 0x70
 8003430:	d00f      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x8e>
  htim->State = HAL_TIM_STATE_READY;
 8003432:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003434:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800343a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800343e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003440:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_TIM_ConfigClockSource+0x158>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d0da      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x38>
 8003446:	3210      	adds	r2, #16
 8003448:	4293      	cmp	r3, r2
 800344a:	d0d7      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x38>
 800344c:	3a20      	subs	r2, #32
 800344e:	4293      	cmp	r3, r2
 8003450:	e7d3      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	68cb      	ldr	r3, [r1, #12]
 8003454:	684a      	ldr	r2, [r1, #4]
 8003456:	6889      	ldr	r1, [r1, #8]
 8003458:	f7ff ffaa 	bl	80033b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003460:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003464:	6093      	str	r3, [r2, #8]
      break;
 8003466:	e7e4      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x6e>
      TIM_ETR_SetConfig(htim->Instance,
 8003468:	68cb      	ldr	r3, [r1, #12]
 800346a:	684a      	ldr	r2, [r1, #4]
 800346c:	6889      	ldr	r1, [r1, #8]
 800346e:	f7ff ff9f 	bl	80033b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	6893      	ldr	r3, [r2, #8]
 8003476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347a:	e7f3      	b.n	8003464 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347c:	684a      	ldr	r2, [r1, #4]
 800347e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003480:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003484:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003488:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800348c:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003496:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800349a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800349c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800349e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80034a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034a8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80034ac:	6083      	str	r3, [r0, #8]
 80034ae:	e7c0      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b0:	684d      	ldr	r5, [r1, #4]
 80034b2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	6a01      	ldr	r1, [r0, #32]
 80034b6:	f021 0110 	bic.w	r1, r1, #16
 80034ba:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034bc:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80034be:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034c8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80034cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80034d0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80034d2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80034d4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034de:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80034e2:	e7e3      	b.n	80034ac <HAL_TIM_ConfigClockSource+0xe8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e4:	684a      	ldr	r2, [r1, #4]
 80034e6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80034e8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ec:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f0:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80034f4:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f8:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034fe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003502:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003504:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003506:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003508:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003510:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003514:	e7ca      	b.n	80034ac <HAL_TIM_ConfigClockSource+0xe8>
 8003516:	bf00      	nop
 8003518:	ffce0088 	.word	0xffce0088
 800351c:	00100030 	.word	0x00100030

08003520 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003520:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	f04f 0302 	mov.w	r3, #2
{
 800352a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800352c:	d03a      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003532:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003534:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003536:	4d1c      	ldr	r5, [pc, #112]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  __HAL_LOCK(htim);
 8003538:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800353c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800353e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003540:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003542:	d002      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8003544:	4e19      	ldr	r6, [pc, #100]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8003546:	42b3      	cmp	r3, r6
 8003548:	d103      	bne.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800354a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800354e:	684e      	ldr	r6, [r1, #4]
 8003550:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003552:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003554:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003558:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800355a:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800355e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003560:	d015      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d012      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003568:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800356e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003576:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800357e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003586:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800358a:	4293      	cmp	r3, r2
 800358c:	d104      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358e:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003590:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003594:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003598:	2301      	movs	r3, #1
 800359a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800359e:	2300      	movs	r3, #0
 80035a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80035a4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40000400 	.word	0x40000400

080035b4 <HAL_TIMEx_CommutCallback>:
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIMEx_BreakCallback>:
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035b8:	4770      	bx	lr
 80035ba:	0000      	movs	r0, r0
 80035bc:	0000      	movs	r0, r0
	...

080035c0 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80035c0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c2:	69c2      	ldr	r2, [r0, #28]
 80035c4:	6881      	ldr	r1, [r0, #8]
{
 80035c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035ca:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ce:	681c      	ldr	r4, [r3, #0]
{
 80035d0:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d2:	4301      	orrs	r1, r0
 80035d4:	6968      	ldr	r0, [r5, #20]
 80035d6:	4301      	orrs	r1, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 80035d8:	6e68      	ldr	r0, [r5, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035da:	4311      	orrs	r1, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 80035dc:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035de:	48bb      	ldr	r0, [pc, #748]	; (80038cc <UART_SetConfig+0x30c>)
 80035e0:	4020      	ands	r0, r4
 80035e2:	4301      	orrs	r1, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e4:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80035ee:	4301      	orrs	r1, r0
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f0:	69a8      	ldr	r0, [r5, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f2:	6059      	str	r1, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035f4:	49b6      	ldr	r1, [pc, #728]	; (80038d0 <UART_SetConfig+0x310>)
 80035f6:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035f8:	bf1c      	itt	ne
 80035fa:	6a29      	ldrne	r1, [r5, #32]
 80035fc:	4308      	orrne	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035fe:	6899      	ldr	r1, [r3, #8]
 8003600:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8003604:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003608:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800360a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800360c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800360e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003610:	f021 010f 	bic.w	r1, r1, #15
 8003614:	4301      	orrs	r1, r0
 8003616:	62d9      	str	r1, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003618:	49ae      	ldr	r1, [pc, #696]	; (80038d4 <UART_SetConfig+0x314>)
 800361a:	428b      	cmp	r3, r1
 800361c:	d11d      	bne.n	800365a <UART_SetConfig+0x9a>
 800361e:	4bae      	ldr	r3, [pc, #696]	; (80038d8 <UART_SetConfig+0x318>)
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003626:	2b28      	cmp	r3, #40	; 0x28
 8003628:	f200 875e 	bhi.w	80044e8 <UART_SetConfig+0xf28>
 800362c:	49ab      	ldr	r1, [pc, #684]	; (80038dc <UART_SetConfig+0x31c>)
 800362e:	5ccc      	ldrb	r4, [r1, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003630:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003634:	f040 875f 	bne.w	80044f6 <UART_SetConfig+0xf36>
  {
    switch (clocksource)
 8003638:	2c08      	cmp	r4, #8
 800363a:	f000 84de 	beq.w	8003ffa <UART_SetConfig+0xa3a>
 800363e:	f200 83ba 	bhi.w	8003db6 <UART_SetConfig+0x7f6>
 8003642:	2c01      	cmp	r4, #1
 8003644:	f000 8432 	beq.w	8003eac <UART_SetConfig+0x8ec>
 8003648:	f0c0 83f4 	bcc.w	8003e34 <UART_SetConfig+0x874>
 800364c:	2c04      	cmp	r4, #4
 800364e:	f000 84af 	beq.w	8003fb0 <UART_SetConfig+0x9f0>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        break;
      default:
        ret = HAL_ERROR;
 8003652:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003654:	2300      	movs	r3, #0
 8003656:	f000 bc50 	b.w	8003efa <UART_SetConfig+0x93a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365a:	49a1      	ldr	r1, [pc, #644]	; (80038e0 <UART_SetConfig+0x320>)
 800365c:	428b      	cmp	r3, r1
 800365e:	d108      	bne.n	8003672 <UART_SetConfig+0xb2>
 8003660:	4b9d      	ldr	r3, [pc, #628]	; (80038d8 <UART_SetConfig+0x318>)
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	2b05      	cmp	r3, #5
 800366a:	f200 873a 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 800366e:	499d      	ldr	r1, [pc, #628]	; (80038e4 <UART_SetConfig+0x324>)
 8003670:	e7dd      	b.n	800362e <UART_SetConfig+0x6e>
 8003672:	499d      	ldr	r1, [pc, #628]	; (80038e8 <UART_SetConfig+0x328>)
 8003674:	428b      	cmp	r3, r1
 8003676:	d108      	bne.n	800368a <UART_SetConfig+0xca>
 8003678:	4b97      	ldr	r3, [pc, #604]	; (80038d8 <UART_SetConfig+0x318>)
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	2b05      	cmp	r3, #5
 8003682:	f200 872e 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 8003686:	4999      	ldr	r1, [pc, #612]	; (80038ec <UART_SetConfig+0x32c>)
 8003688:	e7d1      	b.n	800362e <UART_SetConfig+0x6e>
 800368a:	4999      	ldr	r1, [pc, #612]	; (80038f0 <UART_SetConfig+0x330>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d108      	bne.n	80036a2 <UART_SetConfig+0xe2>
 8003690:	4b91      	ldr	r3, [pc, #580]	; (80038d8 <UART_SetConfig+0x318>)
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	2b05      	cmp	r3, #5
 800369a:	f200 8722 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 800369e:	4995      	ldr	r1, [pc, #596]	; (80038f4 <UART_SetConfig+0x334>)
 80036a0:	e7c5      	b.n	800362e <UART_SetConfig+0x6e>
 80036a2:	4995      	ldr	r1, [pc, #596]	; (80038f8 <UART_SetConfig+0x338>)
 80036a4:	428b      	cmp	r3, r1
 80036a6:	d108      	bne.n	80036ba <UART_SetConfig+0xfa>
 80036a8:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <UART_SetConfig+0x318>)
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	f200 8716 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 80036b6:	4991      	ldr	r1, [pc, #580]	; (80038fc <UART_SetConfig+0x33c>)
 80036b8:	e7b9      	b.n	800362e <UART_SetConfig+0x6e>
 80036ba:	4991      	ldr	r1, [pc, #580]	; (8003900 <UART_SetConfig+0x340>)
 80036bc:	428b      	cmp	r3, r1
 80036be:	d108      	bne.n	80036d2 <UART_SetConfig+0x112>
 80036c0:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <UART_SetConfig+0x318>)
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c8:	2b28      	cmp	r3, #40	; 0x28
 80036ca:	f200 870a 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 80036ce:	498d      	ldr	r1, [pc, #564]	; (8003904 <UART_SetConfig+0x344>)
 80036d0:	e7ad      	b.n	800362e <UART_SetConfig+0x6e>
 80036d2:	498d      	ldr	r1, [pc, #564]	; (8003908 <UART_SetConfig+0x348>)
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d108      	bne.n	80036ea <UART_SetConfig+0x12a>
 80036d8:	4b7f      	ldr	r3, [pc, #508]	; (80038d8 <UART_SetConfig+0x318>)
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	f200 86fe 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 80036e6:	4989      	ldr	r1, [pc, #548]	; (800390c <UART_SetConfig+0x34c>)
 80036e8:	e7a1      	b.n	800362e <UART_SetConfig+0x6e>
 80036ea:	4989      	ldr	r1, [pc, #548]	; (8003910 <UART_SetConfig+0x350>)
 80036ec:	428b      	cmp	r3, r1
 80036ee:	d108      	bne.n	8003702 <UART_SetConfig+0x142>
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <UART_SetConfig+0x318>)
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	f200 86f2 	bhi.w	80044e2 <UART_SetConfig+0xf22>
 80036fe:	4985      	ldr	r1, [pc, #532]	; (8003914 <UART_SetConfig+0x354>)
 8003700:	e795      	b.n	800362e <UART_SetConfig+0x6e>
 8003702:	4973      	ldr	r1, [pc, #460]	; (80038d0 <UART_SetConfig+0x310>)
 8003704:	428b      	cmp	r3, r1
 8003706:	f040 86ec 	bne.w	80044e2 <UART_SetConfig+0xf22>
 800370a:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <UART_SetConfig+0x318>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	2b05      	cmp	r3, #5
 8003714:	d901      	bls.n	800371a <UART_SetConfig+0x15a>
        ret = HAL_ERROR;
 8003716:	2201      	movs	r2, #1
 8003718:	e0a6      	b.n	8003868 <UART_SetConfig+0x2a8>
 800371a:	4a7f      	ldr	r2, [pc, #508]	; (8003918 <UART_SetConfig+0x358>)
 800371c:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 800371e:	2c08      	cmp	r4, #8
 8003720:	f000 80c8 	beq.w	80038b4 <UART_SetConfig+0x2f4>
 8003724:	d82f      	bhi.n	8003786 <UART_SetConfig+0x1c6>
 8003726:	2c02      	cmp	r4, #2
 8003728:	d07d      	beq.n	8003826 <UART_SetConfig+0x266>
 800372a:	2c04      	cmp	r4, #4
 800372c:	d1f3      	bne.n	8003716 <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800372e:	4668      	mov	r0, sp
 8003730:	f7ff fbb4 	bl	8002e9c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003734:	9a01      	ldr	r2, [sp, #4]
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80c0 	beq.w	80038be <UART_SetConfig+0x2fe>
 800373e:	2b01      	cmp	r3, #1
 8003740:	f000 80bf 	beq.w	80038c2 <UART_SetConfig+0x302>
 8003744:	2b02      	cmp	r3, #2
 8003746:	f000 80be 	beq.w	80038c6 <UART_SetConfig+0x306>
 800374a:	2b03      	cmp	r3, #3
 800374c:	f000 80e8 	beq.w	8003920 <UART_SetConfig+0x360>
 8003750:	2b04      	cmp	r3, #4
 8003752:	f000 80ab 	beq.w	80038ac <UART_SetConfig+0x2ec>
 8003756:	2b05      	cmp	r3, #5
 8003758:	f000 80e4 	beq.w	8003924 <UART_SetConfig+0x364>
 800375c:	2b06      	cmp	r3, #6
 800375e:	f000 80e3 	beq.w	8003928 <UART_SetConfig+0x368>
 8003762:	2b07      	cmp	r3, #7
 8003764:	f000 80e2 	beq.w	800392c <UART_SetConfig+0x36c>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f000 80e1 	beq.w	8003930 <UART_SetConfig+0x370>
 800376e:	2b09      	cmp	r3, #9
 8003770:	f000 80e0 	beq.w	8003934 <UART_SetConfig+0x374>
 8003774:	2b0a      	cmp	r3, #10
 8003776:	f000 80df 	beq.w	8003938 <UART_SetConfig+0x378>
 800377a:	2b0b      	cmp	r3, #11
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003784:	e093      	b.n	80038ae <UART_SetConfig+0x2ee>
    switch (clocksource)
 8003786:	2c20      	cmp	r4, #32
 8003788:	f000 810a 	beq.w	80039a0 <UART_SetConfig+0x3e0>
 800378c:	2c40      	cmp	r4, #64	; 0x40
 800378e:	f000 8121 	beq.w	80039d4 <UART_SetConfig+0x414>
 8003792:	2c10      	cmp	r4, #16
 8003794:	d1bf      	bne.n	8003716 <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003796:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <UART_SetConfig+0x318>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	0692      	lsls	r2, r2, #26
 800379c:	f140 80e4 	bpl.w	8003968 <UART_SetConfig+0x3a8>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b5e      	ldr	r3, [pc, #376]	; (800391c <UART_SetConfig+0x35c>)
 80037a4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80037a8:	40d3      	lsrs	r3, r2
 80037aa:	2800      	cmp	r0, #0
 80037ac:	f000 80c6 	beq.w	800393c <UART_SetConfig+0x37c>
 80037b0:	2801      	cmp	r0, #1
 80037b2:	f000 80c5 	beq.w	8003940 <UART_SetConfig+0x380>
 80037b6:	2802      	cmp	r0, #2
 80037b8:	f000 80c4 	beq.w	8003944 <UART_SetConfig+0x384>
 80037bc:	2803      	cmp	r0, #3
 80037be:	f000 80c3 	beq.w	8003948 <UART_SetConfig+0x388>
 80037c2:	2804      	cmp	r0, #4
 80037c4:	f000 80c2 	beq.w	800394c <UART_SetConfig+0x38c>
 80037c8:	2805      	cmp	r0, #5
 80037ca:	f000 80c1 	beq.w	8003950 <UART_SetConfig+0x390>
 80037ce:	2806      	cmp	r0, #6
 80037d0:	f000 80c0 	beq.w	8003954 <UART_SetConfig+0x394>
 80037d4:	2807      	cmp	r0, #7
 80037d6:	f000 80bf 	beq.w	8003958 <UART_SetConfig+0x398>
 80037da:	2808      	cmp	r0, #8
 80037dc:	f000 80be 	beq.w	800395c <UART_SetConfig+0x39c>
 80037e0:	2809      	cmp	r0, #9
 80037e2:	f000 80bd 	beq.w	8003960 <UART_SetConfig+0x3a0>
 80037e6:	280a      	cmp	r0, #10
 80037e8:	f000 80bc 	beq.w	8003964 <UART_SetConfig+0x3a4>
 80037ec:	280b      	cmp	r0, #11
 80037ee:	bf14      	ite	ne
 80037f0:	2001      	movne	r0, #1
 80037f2:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80037f6:	fbb3 f2f0 	udiv	r2, r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037fa:	686e      	ldr	r6, [r5, #4]
 80037fc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003800:	4293      	cmp	r3, r2
 8003802:	d888      	bhi.n	8003716 <UART_SetConfig+0x156>
 8003804:	ebb2 3f06 	cmp.w	r2, r6, lsl #12
 8003808:	d885      	bhi.n	8003716 <UART_SetConfig+0x156>
        switch (clocksource)
 800380a:	2c08      	cmp	r4, #8
 800380c:	f000 81d2 	beq.w	8003bb4 <UART_SetConfig+0x5f4>
 8003810:	f200 8143 	bhi.w	8003a9a <UART_SetConfig+0x4da>
 8003814:	2c02      	cmp	r4, #2
 8003816:	f000 818d 	beq.w	8003b34 <UART_SetConfig+0x574>
 800381a:	2c04      	cmp	r4, #4
 800381c:	f000 81c5 	beq.w	8003baa <UART_SetConfig+0x5ea>
            ret = HAL_ERROR;
 8003820:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003822:	2000      	movs	r0, #0
 8003824:	e1b8      	b.n	8003b98 <UART_SetConfig+0x5d8>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003826:	f7ff fb27 	bl	8002e78 <HAL_RCCEx_GetD3PCLK1Freq>
 800382a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800382c:	b343      	cbz	r3, 8003880 <UART_SetConfig+0x2c0>
 800382e:	2b01      	cmp	r3, #1
 8003830:	d028      	beq.n	8003884 <UART_SetConfig+0x2c4>
 8003832:	2b02      	cmp	r3, #2
 8003834:	d028      	beq.n	8003888 <UART_SetConfig+0x2c8>
 8003836:	2b03      	cmp	r3, #3
 8003838:	d028      	beq.n	800388c <UART_SetConfig+0x2cc>
 800383a:	2b04      	cmp	r3, #4
 800383c:	d028      	beq.n	8003890 <UART_SetConfig+0x2d0>
 800383e:	2b05      	cmp	r3, #5
 8003840:	d028      	beq.n	8003894 <UART_SetConfig+0x2d4>
 8003842:	2b06      	cmp	r3, #6
 8003844:	d028      	beq.n	8003898 <UART_SetConfig+0x2d8>
 8003846:	2b07      	cmp	r3, #7
 8003848:	d028      	beq.n	800389c <UART_SetConfig+0x2dc>
 800384a:	2b08      	cmp	r3, #8
 800384c:	d028      	beq.n	80038a0 <UART_SetConfig+0x2e0>
 800384e:	2b09      	cmp	r3, #9
 8003850:	d028      	beq.n	80038a4 <UART_SetConfig+0x2e4>
 8003852:	2b0a      	cmp	r3, #10
 8003854:	d028      	beq.n	80038a8 <UART_SetConfig+0x2e8>
 8003856:	2b0b      	cmp	r3, #11
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003860:	fbb0 f2f3 	udiv	r2, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003864:	2a00      	cmp	r2, #0
 8003866:	d1c8      	bne.n	80037fa <UART_SetConfig+0x23a>
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003868:	2301      	movs	r3, #1
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;

  return ret;
}
 800386a:	4610      	mov	r0, r2
  huart->NbTxDataToProcess = 1;
 800386c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003870:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  huart->RxISR = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	66eb      	str	r3, [r5, #108]	; 0x6c
  huart->TxISR = NULL;
 8003878:	672b      	str	r3, [r5, #112]	; 0x70
}
 800387a:	b007      	add	sp, #28
 800387c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003880:	2301      	movs	r3, #1
 8003882:	e7ed      	b.n	8003860 <UART_SetConfig+0x2a0>
 8003884:	4623      	mov	r3, r4
 8003886:	e7eb      	b.n	8003860 <UART_SetConfig+0x2a0>
 8003888:	2304      	movs	r3, #4
 800388a:	e7e9      	b.n	8003860 <UART_SetConfig+0x2a0>
 800388c:	2306      	movs	r3, #6
 800388e:	e7e7      	b.n	8003860 <UART_SetConfig+0x2a0>
 8003890:	2308      	movs	r3, #8
 8003892:	e7e5      	b.n	8003860 <UART_SetConfig+0x2a0>
 8003894:	230a      	movs	r3, #10
 8003896:	e7e3      	b.n	8003860 <UART_SetConfig+0x2a0>
 8003898:	230c      	movs	r3, #12
 800389a:	e7e1      	b.n	8003860 <UART_SetConfig+0x2a0>
 800389c:	2310      	movs	r3, #16
 800389e:	e7df      	b.n	8003860 <UART_SetConfig+0x2a0>
 80038a0:	2320      	movs	r3, #32
 80038a2:	e7dd      	b.n	8003860 <UART_SetConfig+0x2a0>
 80038a4:	2340      	movs	r3, #64	; 0x40
 80038a6:	e7db      	b.n	8003860 <UART_SetConfig+0x2a0>
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	e7d9      	b.n	8003860 <UART_SetConfig+0x2a0>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80038ac:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80038ae:	fbb2 f2f3 	udiv	r2, r2, r3
        break;
 80038b2:	e7d7      	b.n	8003864 <UART_SetConfig+0x2a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038b4:	a803      	add	r0, sp, #12
 80038b6:	f7ff fb9b 	bl	8002ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80038ba:	9a04      	ldr	r2, [sp, #16]
 80038bc:	e73b      	b.n	8003736 <UART_SetConfig+0x176>
 80038be:	2301      	movs	r3, #1
 80038c0:	e7f5      	b.n	80038ae <UART_SetConfig+0x2ee>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e7f3      	b.n	80038ae <UART_SetConfig+0x2ee>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e7f1      	b.n	80038ae <UART_SetConfig+0x2ee>
 80038ca:	bf00      	nop
 80038cc:	cfff69f3 	.word	0xcfff69f3
 80038d0:	58000c00 	.word	0x58000c00
 80038d4:	40011000 	.word	0x40011000
 80038d8:	58024400 	.word	0x58024400
 80038dc:	0800c260 	.word	0x0800c260
 80038e0:	40004400 	.word	0x40004400
 80038e4:	0800c289 	.word	0x0800c289
 80038e8:	40004800 	.word	0x40004800
 80038ec:	0800c289 	.word	0x0800c289
 80038f0:	40004c00 	.word	0x40004c00
 80038f4:	0800c289 	.word	0x0800c289
 80038f8:	40005000 	.word	0x40005000
 80038fc:	0800c289 	.word	0x0800c289
 8003900:	40011400 	.word	0x40011400
 8003904:	0800c260 	.word	0x0800c260
 8003908:	40007800 	.word	0x40007800
 800390c:	0800c289 	.word	0x0800c289
 8003910:	40007c00 	.word	0x40007c00
 8003914:	0800c289 	.word	0x0800c289
 8003918:	0800c28f 	.word	0x0800c28f
 800391c:	03d09000 	.word	0x03d09000
 8003920:	2306      	movs	r3, #6
 8003922:	e7c4      	b.n	80038ae <UART_SetConfig+0x2ee>
 8003924:	230a      	movs	r3, #10
 8003926:	e7c2      	b.n	80038ae <UART_SetConfig+0x2ee>
 8003928:	230c      	movs	r3, #12
 800392a:	e7c0      	b.n	80038ae <UART_SetConfig+0x2ee>
 800392c:	2310      	movs	r3, #16
 800392e:	e7be      	b.n	80038ae <UART_SetConfig+0x2ee>
 8003930:	2320      	movs	r3, #32
 8003932:	e7bc      	b.n	80038ae <UART_SetConfig+0x2ee>
 8003934:	2340      	movs	r3, #64	; 0x40
 8003936:	e7ba      	b.n	80038ae <UART_SetConfig+0x2ee>
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	e7b8      	b.n	80038ae <UART_SetConfig+0x2ee>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800393c:	2001      	movs	r0, #1
 800393e:	e75a      	b.n	80037f6 <UART_SetConfig+0x236>
 8003940:	2002      	movs	r0, #2
 8003942:	e758      	b.n	80037f6 <UART_SetConfig+0x236>
 8003944:	2004      	movs	r0, #4
 8003946:	e756      	b.n	80037f6 <UART_SetConfig+0x236>
 8003948:	2006      	movs	r0, #6
 800394a:	e754      	b.n	80037f6 <UART_SetConfig+0x236>
 800394c:	2008      	movs	r0, #8
 800394e:	e752      	b.n	80037f6 <UART_SetConfig+0x236>
 8003950:	200a      	movs	r0, #10
 8003952:	e750      	b.n	80037f6 <UART_SetConfig+0x236>
 8003954:	200c      	movs	r0, #12
 8003956:	e74e      	b.n	80037f6 <UART_SetConfig+0x236>
 8003958:	2010      	movs	r0, #16
 800395a:	e74c      	b.n	80037f6 <UART_SetConfig+0x236>
 800395c:	2020      	movs	r0, #32
 800395e:	e74a      	b.n	80037f6 <UART_SetConfig+0x236>
 8003960:	2040      	movs	r0, #64	; 0x40
 8003962:	e748      	b.n	80037f6 <UART_SetConfig+0x236>
 8003964:	2080      	movs	r0, #128	; 0x80
 8003966:	e746      	b.n	80037f6 <UART_SetConfig+0x236>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003968:	2800      	cmp	r0, #0
 800396a:	d04f      	beq.n	8003a0c <UART_SetConfig+0x44c>
 800396c:	2801      	cmp	r0, #1
 800396e:	d04f      	beq.n	8003a10 <UART_SetConfig+0x450>
 8003970:	2802      	cmp	r0, #2
 8003972:	d04f      	beq.n	8003a14 <UART_SetConfig+0x454>
 8003974:	2803      	cmp	r0, #3
 8003976:	d04f      	beq.n	8003a18 <UART_SetConfig+0x458>
 8003978:	2804      	cmp	r0, #4
 800397a:	d04f      	beq.n	8003a1c <UART_SetConfig+0x45c>
 800397c:	2805      	cmp	r0, #5
 800397e:	d04f      	beq.n	8003a20 <UART_SetConfig+0x460>
 8003980:	2806      	cmp	r0, #6
 8003982:	d04f      	beq.n	8003a24 <UART_SetConfig+0x464>
 8003984:	2807      	cmp	r0, #7
 8003986:	d04f      	beq.n	8003a28 <UART_SetConfig+0x468>
 8003988:	2808      	cmp	r0, #8
 800398a:	d04f      	beq.n	8003a2c <UART_SetConfig+0x46c>
 800398c:	2809      	cmp	r0, #9
 800398e:	d04f      	beq.n	8003a30 <UART_SetConfig+0x470>
 8003990:	280a      	cmp	r0, #10
 8003992:	d051      	beq.n	8003a38 <UART_SetConfig+0x478>
 8003994:	4aad      	ldr	r2, [pc, #692]	; (8003c4c <UART_SetConfig+0x68c>)
 8003996:	4bae      	ldr	r3, [pc, #696]	; (8003c50 <UART_SetConfig+0x690>)
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003998:	280b      	cmp	r0, #11
 800399a:	bf18      	it	ne
 800399c:	461a      	movne	r2, r3
 800399e:	e72c      	b.n	80037fa <UART_SetConfig+0x23a>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d041      	beq.n	8003a28 <UART_SetConfig+0x468>
 80039a4:	2801      	cmp	r0, #1
 80039a6:	d041      	beq.n	8003a2c <UART_SetConfig+0x46c>
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d041      	beq.n	8003a30 <UART_SetConfig+0x470>
 80039ac:	2803      	cmp	r0, #3
 80039ae:	d041      	beq.n	8003a34 <UART_SetConfig+0x474>
 80039b0:	2804      	cmp	r0, #4
 80039b2:	d041      	beq.n	8003a38 <UART_SetConfig+0x478>
 80039b4:	2805      	cmp	r0, #5
 80039b6:	d041      	beq.n	8003a3c <UART_SetConfig+0x47c>
 80039b8:	2806      	cmp	r0, #6
 80039ba:	d041      	beq.n	8003a40 <UART_SetConfig+0x480>
 80039bc:	2807      	cmp	r0, #7
 80039be:	d041      	beq.n	8003a44 <UART_SetConfig+0x484>
 80039c0:	2808      	cmp	r0, #8
 80039c2:	d041      	beq.n	8003a48 <UART_SetConfig+0x488>
 80039c4:	2809      	cmp	r0, #9
 80039c6:	d041      	beq.n	8003a4c <UART_SetConfig+0x48c>
 80039c8:	280a      	cmp	r0, #10
 80039ca:	d042      	beq.n	8003a52 <UART_SetConfig+0x492>
 80039cc:	f643 5209 	movw	r2, #15625	; 0x3d09
 80039d0:	4ba0      	ldr	r3, [pc, #640]	; (8003c54 <UART_SetConfig+0x694>)
 80039d2:	e7e1      	b.n	8003998 <UART_SetConfig+0x3d8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d03f      	beq.n	8003a58 <UART_SetConfig+0x498>
 80039d8:	2801      	cmp	r0, #1
 80039da:	d040      	beq.n	8003a5e <UART_SetConfig+0x49e>
 80039dc:	2802      	cmp	r0, #2
 80039de:	d041      	beq.n	8003a64 <UART_SetConfig+0x4a4>
 80039e0:	2803      	cmp	r0, #3
 80039e2:	d042      	beq.n	8003a6a <UART_SetConfig+0x4aa>
 80039e4:	2804      	cmp	r0, #4
 80039e6:	d043      	beq.n	8003a70 <UART_SetConfig+0x4b0>
 80039e8:	2805      	cmp	r0, #5
 80039ea:	d044      	beq.n	8003a76 <UART_SetConfig+0x4b6>
 80039ec:	2806      	cmp	r0, #6
 80039ee:	d045      	beq.n	8003a7c <UART_SetConfig+0x4bc>
 80039f0:	2807      	cmp	r0, #7
 80039f2:	d046      	beq.n	8003a82 <UART_SetConfig+0x4c2>
 80039f4:	2808      	cmp	r0, #8
 80039f6:	d047      	beq.n	8003a88 <UART_SetConfig+0x4c8>
 80039f8:	2809      	cmp	r0, #9
 80039fa:	d048      	beq.n	8003a8e <UART_SetConfig+0x4ce>
 80039fc:	280a      	cmp	r0, #10
 80039fe:	d049      	beq.n	8003a94 <UART_SetConfig+0x4d4>
 8003a00:	280b      	cmp	r0, #11
 8003a02:	bf0c      	ite	eq
 8003a04:	2280      	moveq	r2, #128	; 0x80
 8003a06:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8003a0a:	e6f6      	b.n	80037fa <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a0c:	4a90      	ldr	r2, [pc, #576]	; (8003c50 <UART_SetConfig+0x690>)
 8003a0e:	e6f4      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a10:	4a91      	ldr	r2, [pc, #580]	; (8003c58 <UART_SetConfig+0x698>)
 8003a12:	e6f2      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a14:	4a91      	ldr	r2, [pc, #580]	; (8003c5c <UART_SetConfig+0x69c>)
 8003a16:	e6f0      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a18:	4a91      	ldr	r2, [pc, #580]	; (8003c60 <UART_SetConfig+0x6a0>)
 8003a1a:	e6ee      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a1c:	4a91      	ldr	r2, [pc, #580]	; (8003c64 <UART_SetConfig+0x6a4>)
 8003a1e:	e6ec      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a20:	4a91      	ldr	r2, [pc, #580]	; (8003c68 <UART_SetConfig+0x6a8>)
 8003a22:	e6ea      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a24:	4a91      	ldr	r2, [pc, #580]	; (8003c6c <UART_SetConfig+0x6ac>)
 8003a26:	e6e8      	b.n	80037fa <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a28:	4a8a      	ldr	r2, [pc, #552]	; (8003c54 <UART_SetConfig+0x694>)
 8003a2a:	e6e6      	b.n	80037fa <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a2c:	4a90      	ldr	r2, [pc, #576]	; (8003c70 <UART_SetConfig+0x6b0>)
 8003a2e:	e6e4      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a30:	4a90      	ldr	r2, [pc, #576]	; (8003c74 <UART_SetConfig+0x6b4>)
 8003a32:	e6e2      	b.n	80037fa <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a34:	4a90      	ldr	r2, [pc, #576]	; (8003c78 <UART_SetConfig+0x6b8>)
 8003a36:	e6e0      	b.n	80037fa <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a38:	4a90      	ldr	r2, [pc, #576]	; (8003c7c <UART_SetConfig+0x6bc>)
 8003a3a:	e6de      	b.n	80037fa <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a3c:	4a90      	ldr	r2, [pc, #576]	; (8003c80 <UART_SetConfig+0x6c0>)
 8003a3e:	e6dc      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a40:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <UART_SetConfig+0x6c4>)
 8003a42:	e6da      	b.n	80037fa <UART_SetConfig+0x23a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a44:	4a81      	ldr	r2, [pc, #516]	; (8003c4c <UART_SetConfig+0x68c>)
 8003a46:	e6d8      	b.n	80037fa <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a48:	4a8f      	ldr	r2, [pc, #572]	; (8003c88 <UART_SetConfig+0x6c8>)
 8003a4a:	e6d6      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a4c:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003a50:	e6d3      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a52:	f647 2212 	movw	r2, #31250	; 0x7a12
 8003a56:	e6d0      	b.n	80037fa <UART_SetConfig+0x23a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a5c:	e6cd      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a62:	e6ca      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a68:	e6c7      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a6a:	f241 5255 	movw	r2, #5461	; 0x1555
 8003a6e:	e6c4      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a74:	e6c1      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a76:	f640 42cc 	movw	r2, #3276	; 0xccc
 8003a7a:	e6be      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a7c:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8003a80:	e6bb      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a86:	e6b8      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a8c:	e6b5      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	e6b2      	b.n	80037fa <UART_SetConfig+0x23a>
 8003a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a98:	e6af      	b.n	80037fa <UART_SetConfig+0x23a>
        switch (clocksource)
 8003a9a:	2c20      	cmp	r4, #32
 8003a9c:	f000 811c 	beq.w	8003cd8 <UART_SetConfig+0x718>
 8003aa0:	2c40      	cmp	r4, #64	; 0x40
 8003aa2:	f000 814f 	beq.w	8003d44 <UART_SetConfig+0x784>
 8003aa6:	2c10      	cmp	r4, #16
 8003aa8:	f47f aeba 	bne.w	8003820 <UART_SetConfig+0x260>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aac:	4a77      	ldr	r2, [pc, #476]	; (8003c8c <UART_SetConfig+0x6cc>)
 8003aae:	0874      	lsrs	r4, r6, #1
 8003ab0:	6813      	ldr	r3, [r2, #0]
 8003ab2:	f013 0f20 	tst.w	r3, #32
 8003ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ab8:	f000 80ad 	beq.w	8003c16 <UART_SetConfig+0x656>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4864      	ldr	r0, [pc, #400]	; (8003c50 <UART_SetConfig+0x690>)
 8003ac0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003ac4:	40d0      	lsrs	r0, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a3 	beq.w	8003c12 <UART_SetConfig+0x652>
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f000 808c 	beq.w	8003bea <UART_SetConfig+0x62a>
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	f000 808b 	beq.w	8003bee <UART_SetConfig+0x62e>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	f000 808a 	beq.w	8003bf2 <UART_SetConfig+0x632>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	f000 8089 	beq.w	8003bf6 <UART_SetConfig+0x636>
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	f000 8088 	beq.w	8003bfa <UART_SetConfig+0x63a>
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	f000 8087 	beq.w	8003bfe <UART_SetConfig+0x63e>
 8003af0:	2b07      	cmp	r3, #7
 8003af2:	f000 8086 	beq.w	8003c02 <UART_SetConfig+0x642>
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	f000 8085 	beq.w	8003c06 <UART_SetConfig+0x646>
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	f000 8084 	beq.w	8003c0a <UART_SetConfig+0x64a>
 8003b02:	2b0a      	cmp	r3, #10
 8003b04:	f000 8083 	beq.w	8003c0e <UART_SetConfig+0x64e>
 8003b08:	2b0b      	cmp	r3, #11
 8003b0a:	f040 8082 	bne.w	8003c12 <UART_SetConfig+0x652>
 8003b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b12:	2300      	movs	r3, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	f7fc fc4b 	bl	80003b0 <__aeabi_uldivmod>
 8003b1a:	4632      	mov	r2, r6
 8003b1c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003b20:	2300      	movs	r3, #0
 8003b22:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003b26:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003b2a:	eb18 0004 	adds.w	r0, r8, r4
 8003b2e:	f149 0100 	adc.w	r1, r9, #0
 8003b32:	e02e      	b.n	8003b92 <UART_SetConfig+0x5d2>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003b34:	f7ff f9a0 	bl	8002e78 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d053      	beq.n	8003be6 <UART_SetConfig+0x626>
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d03d      	beq.n	8003bbe <UART_SetConfig+0x5fe>
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d03d      	beq.n	8003bc2 <UART_SetConfig+0x602>
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d03d      	beq.n	8003bc6 <UART_SetConfig+0x606>
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d03d      	beq.n	8003bca <UART_SetConfig+0x60a>
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d03d      	beq.n	8003bce <UART_SetConfig+0x60e>
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d03d      	beq.n	8003bd2 <UART_SetConfig+0x612>
 8003b56:	2b07      	cmp	r3, #7
 8003b58:	d03d      	beq.n	8003bd6 <UART_SetConfig+0x616>
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d03d      	beq.n	8003bda <UART_SetConfig+0x61a>
 8003b5e:	2b09      	cmp	r3, #9
 8003b60:	d03d      	beq.n	8003bde <UART_SetConfig+0x61e>
 8003b62:	2b0a      	cmp	r3, #10
 8003b64:	d03d      	beq.n	8003be2 <UART_SetConfig+0x622>
 8003b66:	2b0b      	cmp	r3, #11
 8003b68:	d13d      	bne.n	8003be6 <UART_SetConfig+0x626>
 8003b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	f7fc fc1d 	bl	80003b0 <__aeabi_uldivmod>
 8003b76:	686c      	ldr	r4, [r5, #4]
 8003b78:	020f      	lsls	r7, r1, #8
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	0206      	lsls	r6, r0, #8
 8003b7e:	4622      	mov	r2, r4
 8003b80:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003b84:	0860      	lsrs	r0, r4, #1
 8003b86:	eb16 0800 	adds.w	r8, r6, r0
 8003b8a:	f147 0900 	adc.w	r9, r7, #0
 8003b8e:	4640      	mov	r0, r8
 8003b90:	4649      	mov	r1, r9
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b92:	f7fc fc0d 	bl	80003b0 <__aeabi_uldivmod>
            break;
 8003b96:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b98:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <UART_SetConfig+0x6d0>)
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	f63f adb9 	bhi.w	8003716 <UART_SetConfig+0x156>
          huart->Instance->BRR = usartdiv;
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	60d8      	str	r0, [r3, #12]
 8003ba8:	e65e      	b.n	8003868 <UART_SetConfig+0x2a8>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003baa:	4668      	mov	r0, sp
 8003bac:	f7ff f976 	bl	8002e9c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb0:	9801      	ldr	r0, [sp, #4]
 8003bb2:	e7c1      	b.n	8003b38 <UART_SetConfig+0x578>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003bb4:	a803      	add	r0, sp, #12
 8003bb6:	f7ff fa1b 	bl	8002ff0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bba:	9804      	ldr	r0, [sp, #16]
 8003bbc:	e7bc      	b.n	8003b38 <UART_SetConfig+0x578>
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	e7d5      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	e7d3      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bc6:	2206      	movs	r2, #6
 8003bc8:	e7d1      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bca:	2208      	movs	r2, #8
 8003bcc:	e7cf      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bce:	220a      	movs	r2, #10
 8003bd0:	e7cd      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	e7cb      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	e7c9      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bda:	2220      	movs	r2, #32
 8003bdc:	e7c7      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	e7c5      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	e7c3      	b.n	8003b6e <UART_SetConfig+0x5ae>
 8003be6:	2201      	movs	r2, #1
 8003be8:	e7c1      	b.n	8003b6e <UART_SetConfig+0x5ae>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bea:	2202      	movs	r2, #2
 8003bec:	e791      	b.n	8003b12 <UART_SetConfig+0x552>
 8003bee:	2204      	movs	r2, #4
 8003bf0:	e78f      	b.n	8003b12 <UART_SetConfig+0x552>
 8003bf2:	2206      	movs	r2, #6
 8003bf4:	e78d      	b.n	8003b12 <UART_SetConfig+0x552>
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	e78b      	b.n	8003b12 <UART_SetConfig+0x552>
 8003bfa:	220a      	movs	r2, #10
 8003bfc:	e789      	b.n	8003b12 <UART_SetConfig+0x552>
 8003bfe:	220c      	movs	r2, #12
 8003c00:	e787      	b.n	8003b12 <UART_SetConfig+0x552>
 8003c02:	2210      	movs	r2, #16
 8003c04:	e785      	b.n	8003b12 <UART_SetConfig+0x552>
 8003c06:	2220      	movs	r2, #32
 8003c08:	e783      	b.n	8003b12 <UART_SetConfig+0x552>
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	e781      	b.n	8003b12 <UART_SetConfig+0x552>
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	e77f      	b.n	8003b12 <UART_SetConfig+0x552>
 8003c12:	2201      	movs	r2, #1
 8003c14:	e77d      	b.n	8003b12 <UART_SetConfig+0x552>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d05b      	beq.n	8003cd2 <UART_SetConfig+0x712>
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d03a      	beq.n	8003c94 <UART_SetConfig+0x6d4>
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d041      	beq.n	8003ca6 <UART_SetConfig+0x6e6>
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d041      	beq.n	8003caa <UART_SetConfig+0x6ea>
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d043      	beq.n	8003cb2 <UART_SetConfig+0x6f2>
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d043      	beq.n	8003cb6 <UART_SetConfig+0x6f6>
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d043      	beq.n	8003cba <UART_SetConfig+0x6fa>
 8003c32:	2b07      	cmp	r3, #7
 8003c34:	d045      	beq.n	8003cc2 <UART_SetConfig+0x702>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d045      	beq.n	8003cc6 <UART_SetConfig+0x706>
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d045      	beq.n	8003cca <UART_SetConfig+0x70a>
 8003c3e:	2b0a      	cmp	r3, #10
 8003c40:	d045      	beq.n	8003cce <UART_SetConfig+0x70e>
 8003c42:	2b0b      	cmp	r3, #11
 8003c44:	d145      	bne.n	8003cd2 <UART_SetConfig+0x712>
 8003c46:	4802      	ldr	r0, [pc, #8]	; (8003c50 <UART_SetConfig+0x690>)
 8003c48:	2100      	movs	r1, #0
 8003c4a:	e025      	b.n	8003c98 <UART_SetConfig+0x6d8>
 8003c4c:	0003d090 	.word	0x0003d090
 8003c50:	03d09000 	.word	0x03d09000
 8003c54:	003d0900 	.word	0x003d0900
 8003c58:	01e84800 	.word	0x01e84800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	00a2c2aa 	.word	0x00a2c2aa
 8003c64:	007a1200 	.word	0x007a1200
 8003c68:	0061a800 	.word	0x0061a800
 8003c6c:	00516155 	.word	0x00516155
 8003c70:	001e8480 	.word	0x001e8480
 8003c74:	000f4240 	.word	0x000f4240
 8003c78:	000a2c2a 	.word	0x000a2c2a
 8003c7c:	0007a120 	.word	0x0007a120
 8003c80:	00061a80 	.word	0x00061a80
 8003c84:	00051615 	.word	0x00051615
 8003c88:	0001e848 	.word	0x0001e848
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	000ffcff 	.word	0x000ffcff
 8003c94:	48ae      	ldr	r0, [pc, #696]	; (8003f50 <UART_SetConfig+0x990>)
 8003c96:	2101      	movs	r1, #1
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c98:	1900      	adds	r0, r0, r4
 8003c9a:	4632      	mov	r2, r6
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f141 0100 	adc.w	r1, r1, #0
 8003ca4:	e775      	b.n	8003b92 <UART_SetConfig+0x5d2>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca6:	48ab      	ldr	r0, [pc, #684]	; (8003f54 <UART_SetConfig+0x994>)
 8003ca8:	e7ce      	b.n	8003c48 <UART_SetConfig+0x688>
 8003caa:	a1a1      	add	r1, pc, #644	; (adr r1, 8003f30 <UART_SetConfig+0x970>)
 8003cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cb0:	e7f2      	b.n	8003c98 <UART_SetConfig+0x6d8>
 8003cb2:	48a9      	ldr	r0, [pc, #676]	; (8003f58 <UART_SetConfig+0x998>)
 8003cb4:	e7c8      	b.n	8003c48 <UART_SetConfig+0x688>
 8003cb6:	48a9      	ldr	r0, [pc, #676]	; (8003f5c <UART_SetConfig+0x99c>)
 8003cb8:	e7c6      	b.n	8003c48 <UART_SetConfig+0x688>
 8003cba:	a19f      	add	r1, pc, #636	; (adr r1, 8003f38 <UART_SetConfig+0x978>)
 8003cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc0:	e7ea      	b.n	8003c98 <UART_SetConfig+0x6d8>
 8003cc2:	48a7      	ldr	r0, [pc, #668]	; (8003f60 <UART_SetConfig+0x9a0>)
 8003cc4:	e7c0      	b.n	8003c48 <UART_SetConfig+0x688>
 8003cc6:	48a7      	ldr	r0, [pc, #668]	; (8003f64 <UART_SetConfig+0x9a4>)
 8003cc8:	e7be      	b.n	8003c48 <UART_SetConfig+0x688>
 8003cca:	48a7      	ldr	r0, [pc, #668]	; (8003f68 <UART_SetConfig+0x9a8>)
 8003ccc:	e7bc      	b.n	8003c48 <UART_SetConfig+0x688>
 8003cce:	48a7      	ldr	r0, [pc, #668]	; (8003f6c <UART_SetConfig+0x9ac>)
 8003cd0:	e7ba      	b.n	8003c48 <UART_SetConfig+0x688>
 8003cd2:	48a7      	ldr	r0, [pc, #668]	; (8003f70 <UART_SetConfig+0x9b0>)
 8003cd4:	2103      	movs	r1, #3
 8003cd6:	e7df      	b.n	8003c98 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cda:	b38b      	cbz	r3, 8003d40 <UART_SetConfig+0x780>
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d016      	beq.n	8003d0e <UART_SetConfig+0x74e>
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d016      	beq.n	8003d12 <UART_SetConfig+0x752>
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d016      	beq.n	8003d16 <UART_SetConfig+0x756>
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d019      	beq.n	8003d20 <UART_SetConfig+0x760>
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d019      	beq.n	8003d24 <UART_SetConfig+0x764>
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d019      	beq.n	8003d28 <UART_SetConfig+0x768>
 8003cf4:	2b07      	cmp	r3, #7
 8003cf6:	d01b      	beq.n	8003d30 <UART_SetConfig+0x770>
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d01b      	beq.n	8003d34 <UART_SetConfig+0x774>
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	d01b      	beq.n	8003d38 <UART_SetConfig+0x778>
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d01b      	beq.n	8003d3c <UART_SetConfig+0x77c>
 8003d04:	2b0b      	cmp	r3, #11
 8003d06:	d11b      	bne.n	8003d40 <UART_SetConfig+0x780>
 8003d08:	489a      	ldr	r0, [pc, #616]	; (8003f74 <UART_SetConfig+0x9b4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	e006      	b.n	8003d1c <UART_SetConfig+0x75c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d0e:	4895      	ldr	r0, [pc, #596]	; (8003f64 <UART_SetConfig+0x9a4>)
 8003d10:	e7fb      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d12:	4895      	ldr	r0, [pc, #596]	; (8003f68 <UART_SetConfig+0x9a8>)
 8003d14:	e7f9      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d16:	a18a      	add	r1, pc, #552	; (adr r1, 8003f40 <UART_SetConfig+0x980>)
 8003d18:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d1c:	0874      	lsrs	r4, r6, #1
 8003d1e:	e7bb      	b.n	8003c98 <UART_SetConfig+0x6d8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d20:	4892      	ldr	r0, [pc, #584]	; (8003f6c <UART_SetConfig+0x9ac>)
 8003d22:	e7f2      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d24:	4894      	ldr	r0, [pc, #592]	; (8003f78 <UART_SetConfig+0x9b8>)
 8003d26:	e7f0      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d28:	a187      	add	r1, pc, #540	; (adr r1, 8003f48 <UART_SetConfig+0x988>)
 8003d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d2e:	e7f5      	b.n	8003d1c <UART_SetConfig+0x75c>
 8003d30:	4892      	ldr	r0, [pc, #584]	; (8003f7c <UART_SetConfig+0x9bc>)
 8003d32:	e7ea      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d34:	4892      	ldr	r0, [pc, #584]	; (8003f80 <UART_SetConfig+0x9c0>)
 8003d36:	e7e8      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d38:	4892      	ldr	r0, [pc, #584]	; (8003f84 <UART_SetConfig+0x9c4>)
 8003d3a:	e7e6      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d3c:	4892      	ldr	r0, [pc, #584]	; (8003f88 <UART_SetConfig+0x9c8>)
 8003d3e:	e7e4      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d40:	4887      	ldr	r0, [pc, #540]	; (8003f60 <UART_SetConfig+0x9a0>)
 8003d42:	e7e2      	b.n	8003d0a <UART_SetConfig+0x74a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d46:	b39b      	cbz	r3, 8003db0 <UART_SetConfig+0x7f0>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d016      	beq.n	8003d7a <UART_SetConfig+0x7ba>
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d017      	beq.n	8003d80 <UART_SetConfig+0x7c0>
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d018      	beq.n	8003d86 <UART_SetConfig+0x7c6>
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d018      	beq.n	8003d8a <UART_SetConfig+0x7ca>
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d019      	beq.n	8003d90 <UART_SetConfig+0x7d0>
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d019      	beq.n	8003d94 <UART_SetConfig+0x7d4>
 8003d60:	2b07      	cmp	r3, #7
 8003d62:	d019      	beq.n	8003d98 <UART_SetConfig+0x7d8>
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d01a      	beq.n	8003d9e <UART_SetConfig+0x7de>
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d01b      	beq.n	8003da4 <UART_SetConfig+0x7e4>
 8003d6c:	2b0a      	cmp	r3, #10
 8003d6e:	d01c      	beq.n	8003daa <UART_SetConfig+0x7ea>
 8003d70:	2b0b      	cmp	r3, #11
 8003d72:	d11d      	bne.n	8003db0 <UART_SetConfig+0x7f0>
 8003d74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d78:	e7c7      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d7a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003d7e:	e7c4      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003d84:	e7c1      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d86:	4881      	ldr	r0, [pc, #516]	; (8003f8c <UART_SetConfig+0x9cc>)
 8003d88:	e7bf      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003d8e:	e7bc      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d90:	487f      	ldr	r0, [pc, #508]	; (8003f90 <UART_SetConfig+0x9d0>)
 8003d92:	e7ba      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d94:	487f      	ldr	r0, [pc, #508]	; (8003f94 <UART_SetConfig+0x9d4>)
 8003d96:	e7b8      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d9c:	e7b5      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003d9e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003da2:	e7b2      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003da4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003da8:	e7af      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003daa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003dae:	e7ac      	b.n	8003d0a <UART_SetConfig+0x74a>
 8003db0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003db4:	e7a9      	b.n	8003d0a <UART_SetConfig+0x74a>
    switch (clocksource)
 8003db6:	2c20      	cmp	r4, #32
 8003db8:	f000 818e 	beq.w	80040d8 <UART_SetConfig+0xb18>
 8003dbc:	2c40      	cmp	r4, #64	; 0x40
 8003dbe:	f000 81c4 	beq.w	800414a <UART_SetConfig+0xb8a>
 8003dc2:	2c10      	cmp	r4, #16
 8003dc4:	f47f ac45 	bne.w	8003652 <UART_SetConfig+0x92>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc8:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <UART_SetConfig+0x9d8>)
 8003dca:	6869      	ldr	r1, [r5, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	f012 0f20 	tst.w	r2, #32
 8003dd2:	f000 814b 	beq.w	800406c <UART_SetConfig+0xaac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a68      	ldr	r2, [pc, #416]	; (8003f7c <UART_SetConfig+0x9bc>)
 8003dda:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003dde:	fa22 f303 	lsr.w	r3, r2, r3
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f000 812c 	beq.w	8004040 <UART_SetConfig+0xa80>
 8003de8:	2801      	cmp	r0, #1
 8003dea:	f000 812b 	beq.w	8004044 <UART_SetConfig+0xa84>
 8003dee:	2802      	cmp	r0, #2
 8003df0:	f000 812a 	beq.w	8004048 <UART_SetConfig+0xa88>
 8003df4:	2803      	cmp	r0, #3
 8003df6:	f000 8129 	beq.w	800404c <UART_SetConfig+0xa8c>
 8003dfa:	2804      	cmp	r0, #4
 8003dfc:	f000 8128 	beq.w	8004050 <UART_SetConfig+0xa90>
 8003e00:	2805      	cmp	r0, #5
 8003e02:	f000 8127 	beq.w	8004054 <UART_SetConfig+0xa94>
 8003e06:	2806      	cmp	r0, #6
 8003e08:	f000 8126 	beq.w	8004058 <UART_SetConfig+0xa98>
 8003e0c:	2807      	cmp	r0, #7
 8003e0e:	f000 8125 	beq.w	800405c <UART_SetConfig+0xa9c>
 8003e12:	2808      	cmp	r0, #8
 8003e14:	f000 8124 	beq.w	8004060 <UART_SetConfig+0xaa0>
 8003e18:	2809      	cmp	r0, #9
 8003e1a:	f000 8123 	beq.w	8004064 <UART_SetConfig+0xaa4>
 8003e1e:	280a      	cmp	r0, #10
 8003e20:	f000 8122 	beq.w	8004068 <UART_SetConfig+0xaa8>
 8003e24:	280b      	cmp	r0, #11
 8003e26:	bf14      	ite	ne
 8003e28:	2201      	movne	r2, #1
 8003e2a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e32:	e01f      	b.n	8003e74 <UART_SetConfig+0x8b4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7fe fab8 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003e3a:	b309      	cbz	r1, 8003e80 <UART_SetConfig+0x8c0>
 8003e3c:	2901      	cmp	r1, #1
 8003e3e:	d021      	beq.n	8003e84 <UART_SetConfig+0x8c4>
 8003e40:	2902      	cmp	r1, #2
 8003e42:	d021      	beq.n	8003e88 <UART_SetConfig+0x8c8>
 8003e44:	2903      	cmp	r1, #3
 8003e46:	d021      	beq.n	8003e8c <UART_SetConfig+0x8cc>
 8003e48:	2904      	cmp	r1, #4
 8003e4a:	d021      	beq.n	8003e90 <UART_SetConfig+0x8d0>
 8003e4c:	2905      	cmp	r1, #5
 8003e4e:	d021      	beq.n	8003e94 <UART_SetConfig+0x8d4>
 8003e50:	2906      	cmp	r1, #6
 8003e52:	d021      	beq.n	8003e98 <UART_SetConfig+0x8d8>
 8003e54:	2907      	cmp	r1, #7
 8003e56:	d021      	beq.n	8003e9c <UART_SetConfig+0x8dc>
 8003e58:	2908      	cmp	r1, #8
 8003e5a:	d021      	beq.n	8003ea0 <UART_SetConfig+0x8e0>
 8003e5c:	2909      	cmp	r1, #9
 8003e5e:	d021      	beq.n	8003ea4 <UART_SetConfig+0x8e4>
 8003e60:	290a      	cmp	r1, #10
 8003e62:	d021      	beq.n	8003ea8 <UART_SetConfig+0x8e8>
 8003e64:	290b      	cmp	r1, #11
 8003e66:	bf14      	ite	ne
 8003e68:	2201      	movne	r2, #1
 8003e6a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003e6e:	6869      	ldr	r1, [r5, #4]
 8003e70:	fbb0 f2f2 	udiv	r2, r0, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e74:	084b      	lsrs	r3, r1, #1
 8003e76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e7e:	e03a      	b.n	8003ef6 <UART_SetConfig+0x936>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e80:	2201      	movs	r2, #1
 8003e82:	e7f4      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e84:	2202      	movs	r2, #2
 8003e86:	e7f2      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e88:	2204      	movs	r2, #4
 8003e8a:	e7f0      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e8c:	2206      	movs	r2, #6
 8003e8e:	e7ee      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e90:	2208      	movs	r2, #8
 8003e92:	e7ec      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e94:	220a      	movs	r2, #10
 8003e96:	e7ea      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e98:	220c      	movs	r2, #12
 8003e9a:	e7e8      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	e7e6      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	e7e4      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003ea4:	2240      	movs	r2, #64	; 0x40
 8003ea6:	e7e2      	b.n	8003e6e <UART_SetConfig+0x8ae>
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	e7e0      	b.n	8003e6e <UART_SetConfig+0x8ae>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7fe fa8e 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003eb2:	b1c2      	cbz	r2, 8003ee6 <UART_SetConfig+0x926>
 8003eb4:	2a01      	cmp	r2, #1
 8003eb6:	d02f      	beq.n	8003f18 <UART_SetConfig+0x958>
 8003eb8:	2a02      	cmp	r2, #2
 8003eba:	d02f      	beq.n	8003f1c <UART_SetConfig+0x95c>
 8003ebc:	2a03      	cmp	r2, #3
 8003ebe:	d02f      	beq.n	8003f20 <UART_SetConfig+0x960>
 8003ec0:	2a04      	cmp	r2, #4
 8003ec2:	d02f      	beq.n	8003f24 <UART_SetConfig+0x964>
 8003ec4:	2a05      	cmp	r2, #5
 8003ec6:	d02f      	beq.n	8003f28 <UART_SetConfig+0x968>
 8003ec8:	2a06      	cmp	r2, #6
 8003eca:	d067      	beq.n	8003f9c <UART_SetConfig+0x9dc>
 8003ecc:	2a07      	cmp	r2, #7
 8003ece:	d067      	beq.n	8003fa0 <UART_SetConfig+0x9e0>
 8003ed0:	2a08      	cmp	r2, #8
 8003ed2:	d067      	beq.n	8003fa4 <UART_SetConfig+0x9e4>
 8003ed4:	2a09      	cmp	r2, #9
 8003ed6:	d067      	beq.n	8003fa8 <UART_SetConfig+0x9e8>
 8003ed8:	2a0a      	cmp	r2, #10
 8003eda:	d067      	beq.n	8003fac <UART_SetConfig+0x9ec>
 8003edc:	2a0b      	cmp	r2, #11
 8003ede:	bf14      	ite	ne
 8003ee0:	2401      	movne	r4, #1
 8003ee2:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003ee6:	686a      	ldr	r2, [r5, #4]
 8003ee8:	fbb0 f4f4 	udiv	r4, r0, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eec:	0853      	lsrs	r3, r2, #1
 8003eee:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003efa:	f1a3 0010 	sub.w	r0, r3, #16
 8003efe:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003f02:	4288      	cmp	r0, r1
 8003f04:	f63f ac07 	bhi.w	8003716 <UART_SetConfig+0x156>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f08:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003f10:	6828      	ldr	r0, [r5, #0]
 8003f12:	430b      	orrs	r3, r1
 8003f14:	60c3      	str	r3, [r0, #12]
 8003f16:	e4a7      	b.n	8003868 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f18:	2402      	movs	r4, #2
 8003f1a:	e7e4      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003f1c:	2404      	movs	r4, #4
 8003f1e:	e7e2      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003f20:	2406      	movs	r4, #6
 8003f22:	e7e0      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003f24:	2408      	movs	r4, #8
 8003f26:	e7de      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003f28:	240a      	movs	r4, #10
 8003f2a:	e7dc      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003f2c:	f3af 8000 	nop.w
 8003f30:	a2c2aa00 	.word	0xa2c2aa00
 8003f34:	00000000 	.word	0x00000000
 8003f38:	51615500 	.word	0x51615500
 8003f3c:	00000000 	.word	0x00000000
 8003f40:	0a2c2a00 	.word	0x0a2c2a00
 8003f44:	00000000 	.word	0x00000000
 8003f48:	05161500 	.word	0x05161500
 8003f4c:	00000000 	.word	0x00000000
 8003f50:	e8480000 	.word	0xe8480000
 8003f54:	f4240000 	.word	0xf4240000
 8003f58:	7a120000 	.word	0x7a120000
 8003f5c:	61a80000 	.word	0x61a80000
 8003f60:	3d090000 	.word	0x3d090000
 8003f64:	1e848000 	.word	0x1e848000
 8003f68:	0f424000 	.word	0x0f424000
 8003f6c:	07a12000 	.word	0x07a12000
 8003f70:	d0900000 	.word	0xd0900000
 8003f74:	003d0900 	.word	0x003d0900
 8003f78:	061a8000 	.word	0x061a8000
 8003f7c:	03d09000 	.word	0x03d09000
 8003f80:	01e84800 	.word	0x01e84800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200
 8003f8c:	00155500 	.word	0x00155500
 8003f90:	000ccc00 	.word	0x000ccc00
 8003f94:	000aaa00 	.word	0x000aaa00
 8003f98:	58024400 	.word	0x58024400
 8003f9c:	240c      	movs	r4, #12
 8003f9e:	e7a2      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003fa0:	2410      	movs	r4, #16
 8003fa2:	e7a0      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003fa4:	2420      	movs	r4, #32
 8003fa6:	e79e      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003fa8:	2440      	movs	r4, #64	; 0x40
 8003faa:	e79c      	b.n	8003ee6 <UART_SetConfig+0x926>
 8003fac:	2480      	movs	r4, #128	; 0x80
 8003fae:	e79a      	b.n	8003ee6 <UART_SetConfig+0x926>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fb0:	4668      	mov	r0, sp
 8003fb2:	f7fe ff73 	bl	8002e9c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003fb8:	9b01      	ldr	r3, [sp, #4]
 8003fba:	b36a      	cbz	r2, 8004018 <UART_SetConfig+0xa58>
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	d02d      	beq.n	800401c <UART_SetConfig+0xa5c>
 8003fc0:	2a02      	cmp	r2, #2
 8003fc2:	d016      	beq.n	8003ff2 <UART_SetConfig+0xa32>
 8003fc4:	2a03      	cmp	r2, #3
 8003fc6:	d02d      	beq.n	8004024 <UART_SetConfig+0xa64>
 8003fc8:	2a04      	cmp	r2, #4
 8003fca:	d011      	beq.n	8003ff0 <UART_SetConfig+0xa30>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fcc:	2a05      	cmp	r2, #5
 8003fce:	d02b      	beq.n	8004028 <UART_SetConfig+0xa68>
 8003fd0:	2a06      	cmp	r2, #6
 8003fd2:	d02b      	beq.n	800402c <UART_SetConfig+0xa6c>
 8003fd4:	2a07      	cmp	r2, #7
 8003fd6:	d02b      	beq.n	8004030 <UART_SetConfig+0xa70>
 8003fd8:	2a08      	cmp	r2, #8
 8003fda:	d02b      	beq.n	8004034 <UART_SetConfig+0xa74>
 8003fdc:	2a09      	cmp	r2, #9
 8003fde:	d02b      	beq.n	8004038 <UART_SetConfig+0xa78>
 8003fe0:	2a0a      	cmp	r2, #10
 8003fe2:	d02b      	beq.n	800403c <UART_SetConfig+0xa7c>
 8003fe4:	2a0b      	cmp	r2, #11
 8003fe6:	bf14      	ite	ne
 8003fe8:	2401      	movne	r4, #1
 8003fea:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003fee:	e000      	b.n	8003ff2 <UART_SetConfig+0xa32>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff0:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff2:	686a      	ldr	r2, [r5, #4]
 8003ff4:	fbb3 f4f4 	udiv	r4, r3, r4
 8003ff8:	e778      	b.n	8003eec <UART_SetConfig+0x92c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ffa:	a803      	add	r0, sp, #12
 8003ffc:	f7fe fff8 	bl	8002ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004000:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004002:	9b04      	ldr	r3, [sp, #16]
 8004004:	b142      	cbz	r2, 8004018 <UART_SetConfig+0xa58>
 8004006:	2a01      	cmp	r2, #1
 8004008:	d008      	beq.n	800401c <UART_SetConfig+0xa5c>
 800400a:	2a02      	cmp	r2, #2
 800400c:	d008      	beq.n	8004020 <UART_SetConfig+0xa60>
 800400e:	2a03      	cmp	r2, #3
 8004010:	d008      	beq.n	8004024 <UART_SetConfig+0xa64>
 8004012:	2a04      	cmp	r2, #4
 8004014:	d1da      	bne.n	8003fcc <UART_SetConfig+0xa0c>
 8004016:	e7ec      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004018:	2401      	movs	r4, #1
 800401a:	e7ea      	b.n	8003ff2 <UART_SetConfig+0xa32>
 800401c:	2402      	movs	r4, #2
 800401e:	e7e8      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004020:	2404      	movs	r4, #4
 8004022:	e7e6      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004024:	2406      	movs	r4, #6
 8004026:	e7e4      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004028:	240a      	movs	r4, #10
 800402a:	e7e2      	b.n	8003ff2 <UART_SetConfig+0xa32>
 800402c:	240c      	movs	r4, #12
 800402e:	e7e0      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004030:	2410      	movs	r4, #16
 8004032:	e7de      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004034:	2420      	movs	r4, #32
 8004036:	e7dc      	b.n	8003ff2 <UART_SetConfig+0xa32>
 8004038:	2440      	movs	r4, #64	; 0x40
 800403a:	e7da      	b.n	8003ff2 <UART_SetConfig+0xa32>
 800403c:	2480      	movs	r4, #128	; 0x80
 800403e:	e7d8      	b.n	8003ff2 <UART_SetConfig+0xa32>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004040:	2201      	movs	r2, #1
 8004042:	e6f4      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004044:	2202      	movs	r2, #2
 8004046:	e6f2      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004048:	2204      	movs	r2, #4
 800404a:	e6f0      	b.n	8003e2e <UART_SetConfig+0x86e>
 800404c:	2206      	movs	r2, #6
 800404e:	e6ee      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004050:	2208      	movs	r2, #8
 8004052:	e6ec      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004054:	220a      	movs	r2, #10
 8004056:	e6ea      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004058:	220c      	movs	r2, #12
 800405a:	e6e8      	b.n	8003e2e <UART_SetConfig+0x86e>
 800405c:	2210      	movs	r2, #16
 800405e:	e6e6      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004060:	2220      	movs	r2, #32
 8004062:	e6e4      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004064:	2240      	movs	r2, #64	; 0x40
 8004066:	e6e2      	b.n	8003e2e <UART_SetConfig+0x86e>
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	e6e0      	b.n	8003e2e <UART_SetConfig+0x86e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800406c:	b1f0      	cbz	r0, 80040ac <UART_SetConfig+0xaec>
 800406e:	2801      	cmp	r0, #1
 8004070:	d01e      	beq.n	80040b0 <UART_SetConfig+0xaf0>
 8004072:	2802      	cmp	r0, #2
 8004074:	d01e      	beq.n	80040b4 <UART_SetConfig+0xaf4>
 8004076:	2803      	cmp	r0, #3
 8004078:	d01e      	beq.n	80040b8 <UART_SetConfig+0xaf8>
 800407a:	2804      	cmp	r0, #4
 800407c:	d01e      	beq.n	80040bc <UART_SetConfig+0xafc>
 800407e:	2805      	cmp	r0, #5
 8004080:	d01e      	beq.n	80040c0 <UART_SetConfig+0xb00>
 8004082:	2806      	cmp	r0, #6
 8004084:	d01e      	beq.n	80040c4 <UART_SetConfig+0xb04>
 8004086:	2807      	cmp	r0, #7
 8004088:	d01e      	beq.n	80040c8 <UART_SetConfig+0xb08>
 800408a:	2808      	cmp	r0, #8
 800408c:	d01e      	beq.n	80040cc <UART_SetConfig+0xb0c>
 800408e:	2809      	cmp	r0, #9
 8004090:	d01e      	beq.n	80040d0 <UART_SetConfig+0xb10>
 8004092:	280a      	cmp	r0, #10
 8004094:	d01e      	beq.n	80040d4 <UART_SetConfig+0xb14>
 8004096:	4ba3      	ldr	r3, [pc, #652]	; (8004324 <UART_SetConfig+0xd64>)
 8004098:	4aa3      	ldr	r2, [pc, #652]	; (8004328 <UART_SetConfig+0xd68>)
 800409a:	280b      	cmp	r0, #11
 800409c:	bf14      	ite	ne
 800409e:	4610      	movne	r0, r2
 80040a0:	4618      	moveq	r0, r3
 80040a2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80040a6:	fbb0 f3f1 	udiv	r3, r0, r1
 80040aa:	e724      	b.n	8003ef6 <UART_SetConfig+0x936>
 80040ac:	489e      	ldr	r0, [pc, #632]	; (8004328 <UART_SetConfig+0xd68>)
 80040ae:	e7f8      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040b0:	489e      	ldr	r0, [pc, #632]	; (800432c <UART_SetConfig+0xd6c>)
 80040b2:	e7f6      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040b4:	489e      	ldr	r0, [pc, #632]	; (8004330 <UART_SetConfig+0xd70>)
 80040b6:	e7f4      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040b8:	489e      	ldr	r0, [pc, #632]	; (8004334 <UART_SetConfig+0xd74>)
 80040ba:	e7f2      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040bc:	489e      	ldr	r0, [pc, #632]	; (8004338 <UART_SetConfig+0xd78>)
 80040be:	e7f0      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040c0:	489e      	ldr	r0, [pc, #632]	; (800433c <UART_SetConfig+0xd7c>)
 80040c2:	e7ee      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040c4:	489e      	ldr	r0, [pc, #632]	; (8004340 <UART_SetConfig+0xd80>)
 80040c6:	e7ec      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040c8:	489e      	ldr	r0, [pc, #632]	; (8004344 <UART_SetConfig+0xd84>)
 80040ca:	e7ea      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040cc:	489e      	ldr	r0, [pc, #632]	; (8004348 <UART_SetConfig+0xd88>)
 80040ce:	e7e8      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040d0:	489e      	ldr	r0, [pc, #632]	; (800434c <UART_SetConfig+0xd8c>)
 80040d2:	e7e6      	b.n	80040a2 <UART_SetConfig+0xae2>
 80040d4:	489e      	ldr	r0, [pc, #632]	; (8004350 <UART_SetConfig+0xd90>)
 80040d6:	e7e4      	b.n	80040a2 <UART_SetConfig+0xae2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040d8:	b300      	cbz	r0, 800411c <UART_SetConfig+0xb5c>
 80040da:	2801      	cmp	r0, #1
 80040dc:	d020      	beq.n	8004120 <UART_SetConfig+0xb60>
 80040de:	2802      	cmp	r0, #2
 80040e0:	d020      	beq.n	8004124 <UART_SetConfig+0xb64>
 80040e2:	2803      	cmp	r0, #3
 80040e4:	d020      	beq.n	8004128 <UART_SetConfig+0xb68>
 80040e6:	2804      	cmp	r0, #4
 80040e8:	d020      	beq.n	800412c <UART_SetConfig+0xb6c>
 80040ea:	2805      	cmp	r0, #5
 80040ec:	d020      	beq.n	8004130 <UART_SetConfig+0xb70>
 80040ee:	2806      	cmp	r0, #6
 80040f0:	d020      	beq.n	8004134 <UART_SetConfig+0xb74>
 80040f2:	2807      	cmp	r0, #7
 80040f4:	d020      	beq.n	8004138 <UART_SetConfig+0xb78>
 80040f6:	2808      	cmp	r0, #8
 80040f8:	d020      	beq.n	800413c <UART_SetConfig+0xb7c>
 80040fa:	2809      	cmp	r0, #9
 80040fc:	d020      	beq.n	8004140 <UART_SetConfig+0xb80>
 80040fe:	280a      	cmp	r0, #10
 8004100:	d020      	beq.n	8004144 <UART_SetConfig+0xb84>
 8004102:	f647 2212 	movw	r2, #31250	; 0x7a12
 8004106:	4b8f      	ldr	r3, [pc, #572]	; (8004344 <UART_SetConfig+0xd84>)
 8004108:	280b      	cmp	r0, #11
 800410a:	bf14      	ite	ne
 800410c:	4618      	movne	r0, r3
 800410e:	4610      	moveq	r0, r2
 8004110:	686b      	ldr	r3, [r5, #4]
 8004112:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004116:	fbb0 f3f3 	udiv	r3, r0, r3
 800411a:	e6ec      	b.n	8003ef6 <UART_SetConfig+0x936>
 800411c:	4889      	ldr	r0, [pc, #548]	; (8004344 <UART_SetConfig+0xd84>)
 800411e:	e7f7      	b.n	8004110 <UART_SetConfig+0xb50>
 8004120:	4889      	ldr	r0, [pc, #548]	; (8004348 <UART_SetConfig+0xd88>)
 8004122:	e7f5      	b.n	8004110 <UART_SetConfig+0xb50>
 8004124:	4889      	ldr	r0, [pc, #548]	; (800434c <UART_SetConfig+0xd8c>)
 8004126:	e7f3      	b.n	8004110 <UART_SetConfig+0xb50>
 8004128:	488a      	ldr	r0, [pc, #552]	; (8004354 <UART_SetConfig+0xd94>)
 800412a:	e7f1      	b.n	8004110 <UART_SetConfig+0xb50>
 800412c:	4888      	ldr	r0, [pc, #544]	; (8004350 <UART_SetConfig+0xd90>)
 800412e:	e7ef      	b.n	8004110 <UART_SetConfig+0xb50>
 8004130:	4889      	ldr	r0, [pc, #548]	; (8004358 <UART_SetConfig+0xd98>)
 8004132:	e7ed      	b.n	8004110 <UART_SetConfig+0xb50>
 8004134:	4889      	ldr	r0, [pc, #548]	; (800435c <UART_SetConfig+0xd9c>)
 8004136:	e7eb      	b.n	8004110 <UART_SetConfig+0xb50>
 8004138:	487a      	ldr	r0, [pc, #488]	; (8004324 <UART_SetConfig+0xd64>)
 800413a:	e7e9      	b.n	8004110 <UART_SetConfig+0xb50>
 800413c:	4888      	ldr	r0, [pc, #544]	; (8004360 <UART_SetConfig+0xda0>)
 800413e:	e7e7      	b.n	8004110 <UART_SetConfig+0xb50>
 8004140:	4888      	ldr	r0, [pc, #544]	; (8004364 <UART_SetConfig+0xda4>)
 8004142:	e7e5      	b.n	8004110 <UART_SetConfig+0xb50>
 8004144:	f24f 4024 	movw	r0, #62500	; 0xf424
 8004148:	e7e2      	b.n	8004110 <UART_SetConfig+0xb50>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800414a:	b1e8      	cbz	r0, 8004188 <UART_SetConfig+0xbc8>
 800414c:	2801      	cmp	r0, #1
 800414e:	d017      	beq.n	8004180 <UART_SetConfig+0xbc0>
 8004150:	2802      	cmp	r0, #2
 8004152:	d01c      	beq.n	800418e <UART_SetConfig+0xbce>
 8004154:	2803      	cmp	r0, #3
 8004156:	d01d      	beq.n	8004194 <UART_SetConfig+0xbd4>
 8004158:	2804      	cmp	r0, #4
 800415a:	d01e      	beq.n	800419a <UART_SetConfig+0xbda>
 800415c:	2805      	cmp	r0, #5
 800415e:	d01f      	beq.n	80041a0 <UART_SetConfig+0xbe0>
 8004160:	2806      	cmp	r0, #6
 8004162:	d020      	beq.n	80041a6 <UART_SetConfig+0xbe6>
 8004164:	2807      	cmp	r0, #7
 8004166:	d021      	beq.n	80041ac <UART_SetConfig+0xbec>
 8004168:	2808      	cmp	r0, #8
 800416a:	d022      	beq.n	80041b2 <UART_SetConfig+0xbf2>
 800416c:	2809      	cmp	r0, #9
 800416e:	d023      	beq.n	80041b8 <UART_SetConfig+0xbf8>
 8004170:	280a      	cmp	r0, #10
 8004172:	d024      	beq.n	80041be <UART_SetConfig+0xbfe>
 8004174:	280b      	cmp	r0, #11
 8004176:	bf14      	ite	ne
 8004178:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 800417c:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004180:	6869      	ldr	r1, [r5, #4]
 8004182:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8004186:	e678      	b.n	8003e7a <UART_SetConfig+0x8ba>
 8004188:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800418c:	e7f8      	b.n	8004180 <UART_SetConfig+0xbc0>
 800418e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004192:	e7f5      	b.n	8004180 <UART_SetConfig+0xbc0>
 8004194:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8004198:	e7f2      	b.n	8004180 <UART_SetConfig+0xbc0>
 800419a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800419e:	e7ef      	b.n	8004180 <UART_SetConfig+0xbc0>
 80041a0:	f641 1298 	movw	r2, #6552	; 0x1998
 80041a4:	e7ec      	b.n	8004180 <UART_SetConfig+0xbc0>
 80041a6:	f241 5254 	movw	r2, #5460	; 0x1554
 80041aa:	e7e9      	b.n	8004180 <UART_SetConfig+0xbc0>
 80041ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041b0:	e7e6      	b.n	8004180 <UART_SetConfig+0xbc0>
 80041b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b6:	e7e3      	b.n	8004180 <UART_SetConfig+0xbc0>
 80041b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041bc:	e7e0      	b.n	8004180 <UART_SetConfig+0xbc0>
 80041be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c2:	e7dd      	b.n	8004180 <UART_SetConfig+0xbc0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe f8f0 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041ca:	b363      	cbz	r3, 8004226 <UART_SetConfig+0xc66>
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d02c      	beq.n	800422a <UART_SetConfig+0xc6a>
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d02c      	beq.n	800422e <UART_SetConfig+0xc6e>
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d02c      	beq.n	8004232 <UART_SetConfig+0xc72>
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d02c      	beq.n	8004236 <UART_SetConfig+0xc76>
 80041dc:	2b05      	cmp	r3, #5
 80041de:	d02c      	beq.n	800423a <UART_SetConfig+0xc7a>
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d02c      	beq.n	800423e <UART_SetConfig+0xc7e>
 80041e4:	2b07      	cmp	r3, #7
 80041e6:	d02c      	beq.n	8004242 <UART_SetConfig+0xc82>
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d02c      	beq.n	8004246 <UART_SetConfig+0xc86>
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d02c      	beq.n	800424a <UART_SetConfig+0xc8a>
 80041f0:	2b0a      	cmp	r3, #10
 80041f2:	d02c      	beq.n	800424e <UART_SetConfig+0xc8e>
 80041f4:	2b0b      	cmp	r3, #11
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80041fe:	686a      	ldr	r2, [r5, #4]
 8004200:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004204:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004208:	fbb3 f3f2 	udiv	r3, r3, r2
 800420c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800420e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004210:	f1a3 0010 	sub.w	r0, r3, #16
 8004214:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004218:	4288      	cmp	r0, r1
 800421a:	f63f aa7c 	bhi.w	8003716 <UART_SetConfig+0x156>
      huart->Instance->BRR = usartdiv;
 800421e:	6829      	ldr	r1, [r5, #0]
 8004220:	60cb      	str	r3, [r1, #12]
 8004222:	f7ff bb21 	b.w	8003868 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004226:	2301      	movs	r3, #1
 8004228:	e7e9      	b.n	80041fe <UART_SetConfig+0xc3e>
 800422a:	2302      	movs	r3, #2
 800422c:	e7e7      	b.n	80041fe <UART_SetConfig+0xc3e>
 800422e:	2304      	movs	r3, #4
 8004230:	e7e5      	b.n	80041fe <UART_SetConfig+0xc3e>
 8004232:	2306      	movs	r3, #6
 8004234:	e7e3      	b.n	80041fe <UART_SetConfig+0xc3e>
 8004236:	2308      	movs	r3, #8
 8004238:	e7e1      	b.n	80041fe <UART_SetConfig+0xc3e>
 800423a:	230a      	movs	r3, #10
 800423c:	e7df      	b.n	80041fe <UART_SetConfig+0xc3e>
 800423e:	230c      	movs	r3, #12
 8004240:	e7dd      	b.n	80041fe <UART_SetConfig+0xc3e>
 8004242:	2310      	movs	r3, #16
 8004244:	e7db      	b.n	80041fe <UART_SetConfig+0xc3e>
 8004246:	2320      	movs	r3, #32
 8004248:	e7d9      	b.n	80041fe <UART_SetConfig+0xc3e>
 800424a:	2340      	movs	r3, #64	; 0x40
 800424c:	e7d7      	b.n	80041fe <UART_SetConfig+0xc3e>
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	e7d5      	b.n	80041fe <UART_SetConfig+0xc3e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004252:	f7fe f8bb 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004258:	b1c3      	cbz	r3, 800428c <UART_SetConfig+0xccc>
 800425a:	2b01      	cmp	r3, #1
 800425c:	d01a      	beq.n	8004294 <UART_SetConfig+0xcd4>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d01a      	beq.n	8004298 <UART_SetConfig+0xcd8>
 8004262:	2b03      	cmp	r3, #3
 8004264:	d01a      	beq.n	800429c <UART_SetConfig+0xcdc>
 8004266:	2b04      	cmp	r3, #4
 8004268:	d01a      	beq.n	80042a0 <UART_SetConfig+0xce0>
 800426a:	2b05      	cmp	r3, #5
 800426c:	d01a      	beq.n	80042a4 <UART_SetConfig+0xce4>
 800426e:	2b06      	cmp	r3, #6
 8004270:	d01a      	beq.n	80042a8 <UART_SetConfig+0xce8>
 8004272:	2b07      	cmp	r3, #7
 8004274:	d01a      	beq.n	80042ac <UART_SetConfig+0xcec>
 8004276:	2b08      	cmp	r3, #8
 8004278:	d01a      	beq.n	80042b0 <UART_SetConfig+0xcf0>
 800427a:	2b09      	cmp	r3, #9
 800427c:	d01a      	beq.n	80042b4 <UART_SetConfig+0xcf4>
 800427e:	2b0a      	cmp	r3, #10
 8004280:	d01a      	beq.n	80042b8 <UART_SetConfig+0xcf8>
 8004282:	2b0b      	cmp	r3, #11
 8004284:	bf14      	ite	ne
 8004286:	2401      	movne	r4, #1
 8004288:	f44f 7480 	moveq.w	r4, #256	; 0x100
 800428c:	686a      	ldr	r2, [r5, #4]
 800428e:	fbb0 f3f4 	udiv	r3, r0, r4
 8004292:	e7b7      	b.n	8004204 <UART_SetConfig+0xc44>
 8004294:	2402      	movs	r4, #2
 8004296:	e7f9      	b.n	800428c <UART_SetConfig+0xccc>
 8004298:	2404      	movs	r4, #4
 800429a:	e7f7      	b.n	800428c <UART_SetConfig+0xccc>
 800429c:	2406      	movs	r4, #6
 800429e:	e7f5      	b.n	800428c <UART_SetConfig+0xccc>
 80042a0:	2408      	movs	r4, #8
 80042a2:	e7f3      	b.n	800428c <UART_SetConfig+0xccc>
 80042a4:	240a      	movs	r4, #10
 80042a6:	e7f1      	b.n	800428c <UART_SetConfig+0xccc>
 80042a8:	240c      	movs	r4, #12
 80042aa:	e7ef      	b.n	800428c <UART_SetConfig+0xccc>
 80042ac:	2410      	movs	r4, #16
 80042ae:	e7ed      	b.n	800428c <UART_SetConfig+0xccc>
 80042b0:	2420      	movs	r4, #32
 80042b2:	e7eb      	b.n	800428c <UART_SetConfig+0xccc>
 80042b4:	2440      	movs	r4, #64	; 0x40
 80042b6:	e7e9      	b.n	800428c <UART_SetConfig+0xccc>
 80042b8:	2480      	movs	r4, #128	; 0x80
 80042ba:	e7e7      	b.n	800428c <UART_SetConfig+0xccc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042bc:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042be:	6868      	ldr	r0, [r5, #4]
 80042c0:	fbb3 f3f4 	udiv	r3, r3, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80042c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80042cc:	e79e      	b.n	800420c <UART_SetConfig+0xc4c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042ce:	a803      	add	r0, sp, #12
 80042d0:	f7fe fe8e 	bl	8002ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80042d6:	9b04      	ldr	r3, [sp, #16]
 80042d8:	b14a      	cbz	r2, 80042ee <UART_SetConfig+0xd2e>
 80042da:	2a01      	cmp	r2, #1
 80042dc:	d009      	beq.n	80042f2 <UART_SetConfig+0xd32>
 80042de:	2a02      	cmp	r2, #2
 80042e0:	d009      	beq.n	80042f6 <UART_SetConfig+0xd36>
 80042e2:	2a03      	cmp	r2, #3
 80042e4:	d009      	beq.n	80042fa <UART_SetConfig+0xd3a>
 80042e6:	2a04      	cmp	r2, #4
 80042e8:	f040 8125 	bne.w	8004536 <UART_SetConfig+0xf76>
 80042ec:	e7e7      	b.n	80042be <UART_SetConfig+0xcfe>
 80042ee:	2401      	movs	r4, #1
 80042f0:	e7e5      	b.n	80042be <UART_SetConfig+0xcfe>
 80042f2:	2402      	movs	r4, #2
 80042f4:	e7e3      	b.n	80042be <UART_SetConfig+0xcfe>
 80042f6:	2404      	movs	r4, #4
 80042f8:	e7e1      	b.n	80042be <UART_SetConfig+0xcfe>
 80042fa:	2406      	movs	r4, #6
 80042fc:	e7df      	b.n	80042be <UART_SetConfig+0xcfe>
 80042fe:	240a      	movs	r4, #10
 8004300:	e7dd      	b.n	80042be <UART_SetConfig+0xcfe>
 8004302:	240c      	movs	r4, #12
 8004304:	e7db      	b.n	80042be <UART_SetConfig+0xcfe>
 8004306:	2410      	movs	r4, #16
 8004308:	e7d9      	b.n	80042be <UART_SetConfig+0xcfe>
 800430a:	2420      	movs	r4, #32
 800430c:	e7d7      	b.n	80042be <UART_SetConfig+0xcfe>
 800430e:	2440      	movs	r4, #64	; 0x40
 8004310:	e7d5      	b.n	80042be <UART_SetConfig+0xcfe>
 8004312:	2480      	movs	r4, #128	; 0x80
 8004314:	e7d3      	b.n	80042be <UART_SetConfig+0xcfe>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004316:	2201      	movs	r2, #1
 8004318:	e160      	b.n	80045dc <UART_SetConfig+0x101c>
 800431a:	2202      	movs	r2, #2
 800431c:	e15e      	b.n	80045dc <UART_SetConfig+0x101c>
 800431e:	2204      	movs	r2, #4
 8004320:	e15c      	b.n	80045dc <UART_SetConfig+0x101c>
 8004322:	bf00      	nop
 8004324:	0007a120 	.word	0x0007a120
 8004328:	07a12000 	.word	0x07a12000
 800432c:	03d09000 	.word	0x03d09000
 8004330:	01e84800 	.word	0x01e84800
 8004334:	01458554 	.word	0x01458554
 8004338:	00f42400 	.word	0x00f42400
 800433c:	00c35000 	.word	0x00c35000
 8004340:	00a2c2aa 	.word	0x00a2c2aa
 8004344:	007a1200 	.word	0x007a1200
 8004348:	003d0900 	.word	0x003d0900
 800434c:	001e8480 	.word	0x001e8480
 8004350:	000f4240 	.word	0x000f4240
 8004354:	00145854 	.word	0x00145854
 8004358:	000c3500 	.word	0x000c3500
 800435c:	000a2c2a 	.word	0x000a2c2a
 8004360:	0003d090 	.word	0x0003d090
 8004364:	0001e848 	.word	0x0001e848
 8004368:	2206      	movs	r2, #6
 800436a:	e137      	b.n	80045dc <UART_SetConfig+0x101c>
 800436c:	2208      	movs	r2, #8
 800436e:	e135      	b.n	80045dc <UART_SetConfig+0x101c>
 8004370:	220a      	movs	r2, #10
 8004372:	e133      	b.n	80045dc <UART_SetConfig+0x101c>
 8004374:	220c      	movs	r2, #12
 8004376:	e131      	b.n	80045dc <UART_SetConfig+0x101c>
 8004378:	2210      	movs	r2, #16
 800437a:	e12f      	b.n	80045dc <UART_SetConfig+0x101c>
 800437c:	2220      	movs	r2, #32
 800437e:	e12d      	b.n	80045dc <UART_SetConfig+0x101c>
 8004380:	2240      	movs	r2, #64	; 0x40
 8004382:	e12b      	b.n	80045dc <UART_SetConfig+0x101c>
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	e129      	b.n	80045dc <UART_SetConfig+0x101c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004388:	b1f0      	cbz	r0, 80043c8 <UART_SetConfig+0xe08>
 800438a:	2801      	cmp	r0, #1
 800438c:	d01e      	beq.n	80043cc <UART_SetConfig+0xe0c>
 800438e:	2802      	cmp	r0, #2
 8004390:	d01e      	beq.n	80043d0 <UART_SetConfig+0xe10>
 8004392:	2803      	cmp	r0, #3
 8004394:	d01e      	beq.n	80043d4 <UART_SetConfig+0xe14>
 8004396:	2804      	cmp	r0, #4
 8004398:	d01e      	beq.n	80043d8 <UART_SetConfig+0xe18>
 800439a:	2805      	cmp	r0, #5
 800439c:	d01e      	beq.n	80043dc <UART_SetConfig+0xe1c>
 800439e:	2806      	cmp	r0, #6
 80043a0:	d01e      	beq.n	80043e0 <UART_SetConfig+0xe20>
 80043a2:	2807      	cmp	r0, #7
 80043a4:	d01e      	beq.n	80043e4 <UART_SetConfig+0xe24>
 80043a6:	2808      	cmp	r0, #8
 80043a8:	d01e      	beq.n	80043e8 <UART_SetConfig+0xe28>
 80043aa:	2809      	cmp	r0, #9
 80043ac:	d01e      	beq.n	80043ec <UART_SetConfig+0xe2c>
 80043ae:	280a      	cmp	r0, #10
 80043b0:	d01e      	beq.n	80043f0 <UART_SetConfig+0xe30>
 80043b2:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <UART_SetConfig+0x102c>)
 80043b4:	4a8e      	ldr	r2, [pc, #568]	; (80045f0 <UART_SetConfig+0x1030>)
 80043b6:	280b      	cmp	r0, #11
 80043b8:	bf14      	ite	ne
 80043ba:	4610      	movne	r0, r2
 80043bc:	4618      	moveq	r0, r3
 80043be:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80043c2:	fbb0 f3f1 	udiv	r3, r0, r1
 80043c6:	e721      	b.n	800420c <UART_SetConfig+0xc4c>
 80043c8:	4889      	ldr	r0, [pc, #548]	; (80045f0 <UART_SetConfig+0x1030>)
 80043ca:	e7f8      	b.n	80043be <UART_SetConfig+0xdfe>
 80043cc:	4889      	ldr	r0, [pc, #548]	; (80045f4 <UART_SetConfig+0x1034>)
 80043ce:	e7f6      	b.n	80043be <UART_SetConfig+0xdfe>
 80043d0:	4889      	ldr	r0, [pc, #548]	; (80045f8 <UART_SetConfig+0x1038>)
 80043d2:	e7f4      	b.n	80043be <UART_SetConfig+0xdfe>
 80043d4:	4889      	ldr	r0, [pc, #548]	; (80045fc <UART_SetConfig+0x103c>)
 80043d6:	e7f2      	b.n	80043be <UART_SetConfig+0xdfe>
 80043d8:	4889      	ldr	r0, [pc, #548]	; (8004600 <UART_SetConfig+0x1040>)
 80043da:	e7f0      	b.n	80043be <UART_SetConfig+0xdfe>
 80043dc:	4889      	ldr	r0, [pc, #548]	; (8004604 <UART_SetConfig+0x1044>)
 80043de:	e7ee      	b.n	80043be <UART_SetConfig+0xdfe>
 80043e0:	4889      	ldr	r0, [pc, #548]	; (8004608 <UART_SetConfig+0x1048>)
 80043e2:	e7ec      	b.n	80043be <UART_SetConfig+0xdfe>
 80043e4:	4889      	ldr	r0, [pc, #548]	; (800460c <UART_SetConfig+0x104c>)
 80043e6:	e7ea      	b.n	80043be <UART_SetConfig+0xdfe>
 80043e8:	4889      	ldr	r0, [pc, #548]	; (8004610 <UART_SetConfig+0x1050>)
 80043ea:	e7e8      	b.n	80043be <UART_SetConfig+0xdfe>
 80043ec:	4889      	ldr	r0, [pc, #548]	; (8004614 <UART_SetConfig+0x1054>)
 80043ee:	e7e6      	b.n	80043be <UART_SetConfig+0xdfe>
 80043f0:	4889      	ldr	r0, [pc, #548]	; (8004618 <UART_SetConfig+0x1058>)
 80043f2:	e7e4      	b.n	80043be <UART_SetConfig+0xdfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043f4:	b300      	cbz	r0, 8004438 <UART_SetConfig+0xe78>
 80043f6:	2801      	cmp	r0, #1
 80043f8:	d020      	beq.n	800443c <UART_SetConfig+0xe7c>
 80043fa:	2802      	cmp	r0, #2
 80043fc:	d020      	beq.n	8004440 <UART_SetConfig+0xe80>
 80043fe:	2803      	cmp	r0, #3
 8004400:	d020      	beq.n	8004444 <UART_SetConfig+0xe84>
 8004402:	2804      	cmp	r0, #4
 8004404:	d020      	beq.n	8004448 <UART_SetConfig+0xe88>
 8004406:	2805      	cmp	r0, #5
 8004408:	d020      	beq.n	800444c <UART_SetConfig+0xe8c>
 800440a:	2806      	cmp	r0, #6
 800440c:	d020      	beq.n	8004450 <UART_SetConfig+0xe90>
 800440e:	2807      	cmp	r0, #7
 8004410:	d020      	beq.n	8004454 <UART_SetConfig+0xe94>
 8004412:	2808      	cmp	r0, #8
 8004414:	d020      	beq.n	8004458 <UART_SetConfig+0xe98>
 8004416:	2809      	cmp	r0, #9
 8004418:	d020      	beq.n	800445c <UART_SetConfig+0xe9c>
 800441a:	280a      	cmp	r0, #10
 800441c:	d021      	beq.n	8004462 <UART_SetConfig+0xea2>
 800441e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004422:	4b7a      	ldr	r3, [pc, #488]	; (800460c <UART_SetConfig+0x104c>)
 8004424:	280b      	cmp	r0, #11
 8004426:	bf14      	ite	ne
 8004428:	4618      	movne	r0, r3
 800442a:	4610      	moveq	r0, r2
 800442c:	686b      	ldr	r3, [r5, #4]
 800442e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	e6e9      	b.n	800420c <UART_SetConfig+0xc4c>
 8004438:	4874      	ldr	r0, [pc, #464]	; (800460c <UART_SetConfig+0x104c>)
 800443a:	e7f7      	b.n	800442c <UART_SetConfig+0xe6c>
 800443c:	4874      	ldr	r0, [pc, #464]	; (8004610 <UART_SetConfig+0x1050>)
 800443e:	e7f5      	b.n	800442c <UART_SetConfig+0xe6c>
 8004440:	4874      	ldr	r0, [pc, #464]	; (8004614 <UART_SetConfig+0x1054>)
 8004442:	e7f3      	b.n	800442c <UART_SetConfig+0xe6c>
 8004444:	4875      	ldr	r0, [pc, #468]	; (800461c <UART_SetConfig+0x105c>)
 8004446:	e7f1      	b.n	800442c <UART_SetConfig+0xe6c>
 8004448:	4873      	ldr	r0, [pc, #460]	; (8004618 <UART_SetConfig+0x1058>)
 800444a:	e7ef      	b.n	800442c <UART_SetConfig+0xe6c>
 800444c:	4874      	ldr	r0, [pc, #464]	; (8004620 <UART_SetConfig+0x1060>)
 800444e:	e7ed      	b.n	800442c <UART_SetConfig+0xe6c>
 8004450:	4874      	ldr	r0, [pc, #464]	; (8004624 <UART_SetConfig+0x1064>)
 8004452:	e7eb      	b.n	800442c <UART_SetConfig+0xe6c>
 8004454:	4865      	ldr	r0, [pc, #404]	; (80045ec <UART_SetConfig+0x102c>)
 8004456:	e7e9      	b.n	800442c <UART_SetConfig+0xe6c>
 8004458:	4873      	ldr	r0, [pc, #460]	; (8004628 <UART_SetConfig+0x1068>)
 800445a:	e7e7      	b.n	800442c <UART_SetConfig+0xe6c>
 800445c:	f24f 4024 	movw	r0, #62500	; 0xf424
 8004460:	e7e4      	b.n	800442c <UART_SetConfig+0xe6c>
 8004462:	f647 2012 	movw	r0, #31250	; 0x7a12
 8004466:	e7e1      	b.n	800442c <UART_SetConfig+0xe6c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004468:	b1d0      	cbz	r0, 80044a0 <UART_SetConfig+0xee0>
 800446a:	2801      	cmp	r0, #1
 800446c:	d01b      	beq.n	80044a6 <UART_SetConfig+0xee6>
 800446e:	2802      	cmp	r0, #2
 8004470:	d01c      	beq.n	80044ac <UART_SetConfig+0xeec>
 8004472:	2803      	cmp	r0, #3
 8004474:	d01d      	beq.n	80044b2 <UART_SetConfig+0xef2>
 8004476:	2804      	cmp	r0, #4
 8004478:	d01e      	beq.n	80044b8 <UART_SetConfig+0xef8>
 800447a:	2805      	cmp	r0, #5
 800447c:	d01f      	beq.n	80044be <UART_SetConfig+0xefe>
 800447e:	2806      	cmp	r0, #6
 8004480:	d020      	beq.n	80044c4 <UART_SetConfig+0xf04>
 8004482:	2807      	cmp	r0, #7
 8004484:	d021      	beq.n	80044ca <UART_SetConfig+0xf0a>
 8004486:	2808      	cmp	r0, #8
 8004488:	d022      	beq.n	80044d0 <UART_SetConfig+0xf10>
 800448a:	2809      	cmp	r0, #9
 800448c:	d023      	beq.n	80044d6 <UART_SetConfig+0xf16>
 800448e:	280a      	cmp	r0, #10
 8004490:	d024      	beq.n	80044dc <UART_SetConfig+0xf1c>
 8004492:	280b      	cmp	r0, #11
 8004494:	bf14      	ite	ne
 8004496:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800449a:	2380      	moveq	r3, #128	; 0x80
 800449c:	6868      	ldr	r0, [r5, #4]
 800449e:	e711      	b.n	80042c4 <UART_SetConfig+0xd04>
 80044a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a4:	e7fa      	b.n	800449c <UART_SetConfig+0xedc>
 80044a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044aa:	e7f7      	b.n	800449c <UART_SetConfig+0xedc>
 80044ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044b0:	e7f4      	b.n	800449c <UART_SetConfig+0xedc>
 80044b2:	f241 5355 	movw	r3, #5461	; 0x1555
 80044b6:	e7f1      	b.n	800449c <UART_SetConfig+0xedc>
 80044b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044bc:	e7ee      	b.n	800449c <UART_SetConfig+0xedc>
 80044be:	f640 43cc 	movw	r3, #3276	; 0xccc
 80044c2:	e7eb      	b.n	800449c <UART_SetConfig+0xedc>
 80044c4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80044c8:	e7e8      	b.n	800449c <UART_SetConfig+0xedc>
 80044ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ce:	e7e5      	b.n	800449c <UART_SetConfig+0xedc>
 80044d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d4:	e7e2      	b.n	800449c <UART_SetConfig+0xedc>
 80044d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044da:	e7df      	b.n	800449c <UART_SetConfig+0xedc>
 80044dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e0:	e7dc      	b.n	800449c <UART_SetConfig+0xedc>
 80044e2:	2480      	movs	r4, #128	; 0x80
 80044e4:	f7ff b8a4 	b.w	8003630 <UART_SetConfig+0x70>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80044ec:	f43f a8b1 	beq.w	8003652 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 80044f0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e68c      	b.n	8004210 <UART_SetConfig+0xc50>
    switch (clocksource)
 80044f6:	2c08      	cmp	r4, #8
 80044f8:	f43f aee9 	beq.w	80042ce <UART_SetConfig+0xd0e>
 80044fc:	d833      	bhi.n	8004566 <UART_SetConfig+0xfa6>
 80044fe:	2c01      	cmp	r4, #1
 8004500:	f43f aea7 	beq.w	8004252 <UART_SetConfig+0xc92>
 8004504:	f4ff ae5e 	bcc.w	80041c4 <UART_SetConfig+0xc04>
 8004508:	2c04      	cmp	r4, #4
 800450a:	f47f a904 	bne.w	8003716 <UART_SetConfig+0x156>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800450e:	4668      	mov	r0, sp
 8004510:	f7fe fcc4 	bl	8002e9c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004514:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	2a00      	cmp	r2, #0
 800451a:	f43f aee8 	beq.w	80042ee <UART_SetConfig+0xd2e>
 800451e:	2a01      	cmp	r2, #1
 8004520:	f43f aee7 	beq.w	80042f2 <UART_SetConfig+0xd32>
 8004524:	2a02      	cmp	r2, #2
 8004526:	f43f aeca 	beq.w	80042be <UART_SetConfig+0xcfe>
 800452a:	2a03      	cmp	r2, #3
 800452c:	f43f aee5 	beq.w	80042fa <UART_SetConfig+0xd3a>
 8004530:	2a04      	cmp	r2, #4
 8004532:	f43f aec3 	beq.w	80042bc <UART_SetConfig+0xcfc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004536:	2a05      	cmp	r2, #5
 8004538:	f43f aee1 	beq.w	80042fe <UART_SetConfig+0xd3e>
 800453c:	2a06      	cmp	r2, #6
 800453e:	f43f aee0 	beq.w	8004302 <UART_SetConfig+0xd42>
 8004542:	2a07      	cmp	r2, #7
 8004544:	f43f aedf 	beq.w	8004306 <UART_SetConfig+0xd46>
 8004548:	2a08      	cmp	r2, #8
 800454a:	f43f aede 	beq.w	800430a <UART_SetConfig+0xd4a>
 800454e:	2a09      	cmp	r2, #9
 8004550:	f43f aedd 	beq.w	800430e <UART_SetConfig+0xd4e>
 8004554:	2a0a      	cmp	r2, #10
 8004556:	f43f aedc 	beq.w	8004312 <UART_SetConfig+0xd52>
 800455a:	2a0b      	cmp	r2, #11
 800455c:	bf14      	ite	ne
 800455e:	2401      	movne	r4, #1
 8004560:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8004564:	e6ab      	b.n	80042be <UART_SetConfig+0xcfe>
    switch (clocksource)
 8004566:	2c20      	cmp	r4, #32
 8004568:	f43f af44 	beq.w	80043f4 <UART_SetConfig+0xe34>
 800456c:	2c40      	cmp	r4, #64	; 0x40
 800456e:	f43f af7b 	beq.w	8004468 <UART_SetConfig+0xea8>
 8004572:	2c10      	cmp	r4, #16
 8004574:	f47f a8cf 	bne.w	8003716 <UART_SetConfig+0x156>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004578:	4b2c      	ldr	r3, [pc, #176]	; (800462c <UART_SetConfig+0x106c>)
 800457a:	6869      	ldr	r1, [r5, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f012 0f20 	tst.w	r2, #32
 8004582:	f43f af01 	beq.w	8004388 <UART_SetConfig+0xdc8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <UART_SetConfig+0x1030>)
 800458a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800458e:	40d3      	lsrs	r3, r2
 8004590:	2800      	cmp	r0, #0
 8004592:	f43f aec0 	beq.w	8004316 <UART_SetConfig+0xd56>
 8004596:	2801      	cmp	r0, #1
 8004598:	f43f aebf 	beq.w	800431a <UART_SetConfig+0xd5a>
 800459c:	2802      	cmp	r0, #2
 800459e:	f43f aebe 	beq.w	800431e <UART_SetConfig+0xd5e>
 80045a2:	2803      	cmp	r0, #3
 80045a4:	f43f aee0 	beq.w	8004368 <UART_SetConfig+0xda8>
 80045a8:	2804      	cmp	r0, #4
 80045aa:	f43f aedf 	beq.w	800436c <UART_SetConfig+0xdac>
 80045ae:	2805      	cmp	r0, #5
 80045b0:	f43f aede 	beq.w	8004370 <UART_SetConfig+0xdb0>
 80045b4:	2806      	cmp	r0, #6
 80045b6:	f43f aedd 	beq.w	8004374 <UART_SetConfig+0xdb4>
 80045ba:	2807      	cmp	r0, #7
 80045bc:	f43f aedc 	beq.w	8004378 <UART_SetConfig+0xdb8>
 80045c0:	2808      	cmp	r0, #8
 80045c2:	f43f aedb 	beq.w	800437c <UART_SetConfig+0xdbc>
 80045c6:	2809      	cmp	r0, #9
 80045c8:	f43f aeda 	beq.w	8004380 <UART_SetConfig+0xdc0>
 80045cc:	280a      	cmp	r0, #10
 80045ce:	f43f aed9 	beq.w	8004384 <UART_SetConfig+0xdc4>
 80045d2:	280b      	cmp	r0, #11
 80045d4:	bf14      	ite	ne
 80045d6:	2201      	movne	r2, #1
 80045d8:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80045dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80045e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80045e8:	e610      	b.n	800420c <UART_SetConfig+0xc4c>
 80045ea:	bf00      	nop
 80045ec:	0003d090 	.word	0x0003d090
 80045f0:	03d09000 	.word	0x03d09000
 80045f4:	01e84800 	.word	0x01e84800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	00a2c2aa 	.word	0x00a2c2aa
 8004600:	007a1200 	.word	0x007a1200
 8004604:	0061a800 	.word	0x0061a800
 8004608:	00516155 	.word	0x00516155
 800460c:	003d0900 	.word	0x003d0900
 8004610:	001e8480 	.word	0x001e8480
 8004614:	000f4240 	.word	0x000f4240
 8004618:	0007a120 	.word	0x0007a120
 800461c:	000a2c2a 	.word	0x000a2c2a
 8004620:	00061a80 	.word	0x00061a80
 8004624:	00051615 	.word	0x00051615
 8004628:	0001e848 	.word	0x0001e848
 800462c:	58024400 	.word	0x58024400

08004630 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004630:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004632:	07da      	lsls	r2, r3, #31
{
 8004634:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004636:	d506      	bpl.n	8004646 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004638:	6801      	ldr	r1, [r0, #0]
 800463a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800463c:	684a      	ldr	r2, [r1, #4]
 800463e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004642:	4322      	orrs	r2, r4
 8004644:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004646:	079c      	lsls	r4, r3, #30
 8004648:	d506      	bpl.n	8004658 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464a:	6801      	ldr	r1, [r0, #0]
 800464c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800464e:	684a      	ldr	r2, [r1, #4]
 8004650:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004654:	4322      	orrs	r2, r4
 8004656:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004658:	0759      	lsls	r1, r3, #29
 800465a:	d506      	bpl.n	800466a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800465c:	6801      	ldr	r1, [r0, #0]
 800465e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004660:	684a      	ldr	r2, [r1, #4]
 8004662:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004666:	4322      	orrs	r2, r4
 8004668:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800466a:	071a      	lsls	r2, r3, #28
 800466c:	d506      	bpl.n	800467c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466e:	6801      	ldr	r1, [r0, #0]
 8004670:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004672:	684a      	ldr	r2, [r1, #4]
 8004674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004678:	4322      	orrs	r2, r4
 800467a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800467c:	06dc      	lsls	r4, r3, #27
 800467e:	d506      	bpl.n	800468e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004680:	6801      	ldr	r1, [r0, #0]
 8004682:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004684:	688a      	ldr	r2, [r1, #8]
 8004686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800468a:	4322      	orrs	r2, r4
 800468c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468e:	0699      	lsls	r1, r3, #26
 8004690:	d506      	bpl.n	80046a0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004692:	6801      	ldr	r1, [r0, #0]
 8004694:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004696:	688a      	ldr	r2, [r1, #8]
 8004698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469c:	4322      	orrs	r2, r4
 800469e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	065a      	lsls	r2, r3, #25
 80046a2:	d510      	bpl.n	80046c6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a4:	6801      	ldr	r1, [r0, #0]
 80046a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80046a8:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80046b2:	ea42 0204 	orr.w	r2, r2, r4
 80046b6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b8:	d105      	bne.n	80046c6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ba:	684a      	ldr	r2, [r1, #4]
 80046bc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80046be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80046c2:	4322      	orrs	r2, r4
 80046c4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	d506      	bpl.n	80046d8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ca:	6802      	ldr	r2, [r0, #0]
 80046cc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80046ce:	6853      	ldr	r3, [r2, #4]
 80046d0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6053      	str	r3, [r2, #4]
 80046d8:	bd10      	pop	{r4, pc}

080046da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	9d06      	ldr	r5, [sp, #24]
 80046e0:	4604      	mov	r4, r0
 80046e2:	460f      	mov	r7, r1
 80046e4:	4616      	mov	r6, r2
 80046e6:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	69ca      	ldr	r2, [r1, #28]
 80046ec:	ea37 0302 	bics.w	r3, r7, r2
 80046f0:	bf0c      	ite	eq
 80046f2:	2201      	moveq	r2, #1
 80046f4:	2200      	movne	r2, #0
 80046f6:	42b2      	cmp	r2, r6
 80046f8:	d002      	beq.n	8004700 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2000      	movs	r0, #0
}
 80046fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004700:	1c68      	adds	r0, r5, #1
 8004702:	d0f2      	beq.n	80046ea <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7fc f8fe 	bl	8000904 <HAL_GetTick>
 8004708:	eba0 0008 	sub.w	r0, r0, r8
 800470c:	4285      	cmp	r5, r0
 800470e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004710:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	d300      	bcc.n	8004716 <UART_WaitOnFlagUntilTimeout+0x3c>
 8004714:	b98d      	cbnz	r5, 800473a <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800471a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471c:	6883      	ldr	r3, [r0, #8]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004724:	2320      	movs	r3, #32
 8004726:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800472a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800472e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004730:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004732:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800473a:	075a      	lsls	r2, r3, #29
 800473c:	d5d4      	bpl.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473e:	69c3      	ldr	r3, [r0, #28]
 8004740:	051b      	lsls	r3, r3, #20
 8004742:	d5d1      	bpl.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004748:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004750:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	6883      	ldr	r3, [r0, #8]
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800475a:	2320      	movs	r3, #32
 800475c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004760:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004764:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004768:	e7e1      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0x54>

0800476a <HAL_UART_Transmit>:
{
 800476a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800476e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004770:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8004774:	4604      	mov	r4, r0
 8004776:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004778:	2b20      	cmp	r3, #32
{
 800477a:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800477c:	d14e      	bne.n	800481c <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 800477e:	2900      	cmp	r1, #0
 8004780:	d04a      	beq.n	8004818 <HAL_UART_Transmit+0xae>
 8004782:	2a00      	cmp	r2, #0
 8004784:	d048      	beq.n	8004818 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8004786:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d046      	beq.n	800481c <HAL_UART_Transmit+0xb2>
 800478e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004792:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004796:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 80047a0:	f7fc f8b0 	bl	8000904 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80047a6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80047a8:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80047b0:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	d103      	bne.n	80047be <HAL_UART_Transmit+0x54>
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	b90b      	cbnz	r3, 80047be <HAL_UART_Transmit+0x54>
 80047ba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80047bc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80047be:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	463b      	mov	r3, r7
 80047c4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80047c8:	b292      	uxth	r2, r2
 80047ca:	b952      	cbnz	r2, 80047e2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff ff83 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 80047d4:	b958      	cbnz	r0, 80047ee <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80047d6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80047d8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 80047dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80047e0:	e006      	b.n	80047f0 <HAL_UART_Transmit+0x86>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e2:	2200      	movs	r2, #0
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff ff77 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 80047ec:	b118      	cbz	r0, 80047f6 <HAL_UART_Transmit+0x8c>
        return HAL_TIMEOUT;
 80047ee:	2003      	movs	r0, #3
}
 80047f0:	b003      	add	sp, #12
 80047f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047f6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80047f8:	b95e      	cbnz	r6, 8004812 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fa:	f835 3b02 	ldrh.w	r3, [r5], #2
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004802:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004804:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004808:	3b01      	subs	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004810:	e7d5      	b.n	80047be <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004812:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004816:	e7f4      	b.n	8004802 <HAL_UART_Transmit+0x98>
      return  HAL_ERROR;
 8004818:	2001      	movs	r0, #1
 800481a:	e7e9      	b.n	80047f0 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 800481c:	2002      	movs	r0, #2
 800481e:	e7e7      	b.n	80047f0 <HAL_UART_Transmit+0x86>

08004820 <UART_CheckIdleState>:
{
 8004820:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	2600      	movs	r6, #0
{
 8004824:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004826:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800482a:	f7fc f86b 	bl	8000904 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004830:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	071a      	lsls	r2, r3, #28
 8004836:	d417      	bmi.n	8004868 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	075b      	lsls	r3, r3, #29
 800483e:	d50a      	bpl.n	8004856 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800484a:	4620      	mov	r0, r4
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	462b      	mov	r3, r5
 8004850:	f7ff ff43 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 8004854:	b9a0      	cbnz	r0, 8004880 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004856:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004858:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800485a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800485e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004862:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004866:	e00c      	b.n	8004882 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486c:	4632      	mov	r2, r6
 800486e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	4620      	mov	r0, r4
 8004878:	f7ff ff2f 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 800487c:	2800      	cmp	r0, #0
 800487e:	d0db      	beq.n	8004838 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004880:	2003      	movs	r0, #3
}
 8004882:	b002      	add	sp, #8
 8004884:	bd70      	pop	{r4, r5, r6, pc}

08004886 <HAL_UART_Init>:
{
 8004886:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004888:	4604      	mov	r4, r0
 800488a:	b350      	cbz	r0, 80048e2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800488c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004890:	b91b      	cbnz	r3, 800489a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8004892:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004896:	f006 fc81 	bl	800b19c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800489a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800489e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ac:	f7fe fe88 	bl	80035c0 <UART_SetConfig>
 80048b0:	2801      	cmp	r0, #1
 80048b2:	d016      	beq.n	80048e2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048b6:	b113      	cbz	r3, 80048be <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7ff feb9 	bl	8004630 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048be:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80048c0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
}
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80048dc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80048de:	f7ff bf9f 	b.w	8004820 <UART_CheckIdleState>
}
 80048e2:	2001      	movs	r0, #1
 80048e4:	bd10      	pop	{r4, pc}

080048e6 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80048e8:	2203      	movs	r2, #3
 80048ea:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80048ec:	2104      	movs	r1, #4
 80048ee:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80048f0:	f88d 2003 	strb.w	r2, [sp, #3]
 80048f4:	2207      	movs	r2, #7
 80048f6:	f88d 3000 	strb.w	r3, [sp]
 80048fa:	f88d 2004 	strb.w	r2, [sp, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f88d 3001 	strb.w	r3, [sp, #1]
 8004904:	f88d 2006 	strb.w	r2, [sp, #6]
 8004908:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800490c:	2208      	movs	r2, #8
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800490e:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004912:	f88d 2008 	strb.w	r2, [sp, #8]
 8004916:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800491a:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800491c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004920:	f88d 1009 	strb.w	r1, [sp, #9]
 8004924:	f88d 400a 	strb.w	r4, [sp, #10]
 8004928:	f88d 100b 	strb.w	r1, [sp, #11]
 800492c:	f88d 300d 	strb.w	r3, [sp, #13]
 8004930:	f88d 300e 	strb.w	r3, [sp, #14]
 8004934:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004938:	b92a      	cbnz	r2, 8004946 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 800493a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800493e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8004942:	b004      	add	sp, #16
 8004944:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004946:	6802      	ldr	r2, [r0, #0]
 8004948:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800494a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800494c:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800494e:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004952:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 8004956:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800495a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800495e:	00d2      	lsls	r2, r2, #3
 8004960:	fb92 f2f1 	sdiv	r2, r2, r1
 8004964:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004968:	aa04      	add	r2, sp, #16
 800496a:	4413      	add	r3, r2
 800496c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004970:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004974:	00d2      	lsls	r2, r2, #3
 8004976:	fb92 f3f3 	sdiv	r3, r2, r3
 800497a:	e7e0      	b.n	800493e <UARTEx_SetNbDataToProcess+0x58>

0800497c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800497c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d014      	beq.n	80049ae <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004984:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004986:	2324      	movs	r3, #36	; 0x24
 8004988:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800498c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800498e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004990:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800499a:	2300      	movs	r3, #0
 800499c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800499e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80049a2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 80049a6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 80049aa:	4618      	mov	r0, r3
 80049ac:	4770      	bx	lr
  __HAL_LOCK(huart);
 80049ae:	2002      	movs	r0, #2
}
 80049b0:	4770      	bx	lr

080049b2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80049b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80049b4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 80049b8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d01b      	beq.n	80049f6 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80049be:	2301      	movs	r3, #1
 80049c0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80049c4:	2324      	movs	r3, #36	; 0x24
 80049c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ca:	6803      	ldr	r3, [r0, #0]
 80049cc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80049dc:	4311      	orrs	r1, r2
 80049de:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80049e0:	f7ff ff81 	bl	80048e6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e4:	6803      	ldr	r3, [r0, #0]
 80049e6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80049e8:	2320      	movs	r3, #32
 80049ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80049f4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80049f6:	2002      	movs	r0, #2
}
 80049f8:	bd38      	pop	{r3, r4, r5, pc}

080049fa <HAL_UARTEx_SetRxFifoThreshold>:
{
 80049fa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80049fc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8004a00:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d01b      	beq.n	8004a3e <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8004a06:	2301      	movs	r3, #1
 8004a08:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8004a0c:	2324      	movs	r3, #36	; 0x24
 8004a0e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004a24:	4311      	orrs	r1, r2
 8004a26:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004a28:	f7ff ff5d 	bl	80048e6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a2c:	6803      	ldr	r3, [r0, #0]
 8004a2e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004a30:	2320      	movs	r3, #32
 8004a32:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004a36:	2000      	movs	r0, #0
 8004a38:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8004a3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004a3e:	2002      	movs	r0, #2
}
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
	...

08004a44 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004a48:	4605      	mov	r5, r0
 8004a4a:	b1a8      	cbz	r0, 8004a78 <fs_open+0x34>
 8004a4c:	b1a1      	cbz	r1, 8004a78 <fs_open+0x34>
 8004a4e:	4c0c      	ldr	r4, [pc, #48]	; (8004a80 <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 8004a50:	6861      	ldr	r1, [r4, #4]
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7fb fc44 	bl	80002e0 <strcmp>
 8004a58:	b940      	cbnz	r0, 8004a6c <fs_open+0x28>
      file->data = (const char *)f->data;
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 8004a5e:	68e3      	ldr	r3, [r4, #12]
      file->index = f->len;
      file->pextension = NULL;
 8004a60:	60e8      	str	r0, [r5, #12]
      file->len = f->len;
 8004a62:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 8004a64:	60ab      	str	r3, [r5, #8]
      file->flags = f->flags;
 8004a66:	7c23      	ldrb	r3, [r4, #16]
 8004a68:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004a6c:	6824      	ldr	r4, [r4, #0]
 8004a6e:	2c00      	cmp	r4, #0
 8004a70:	d1ee      	bne.n	8004a50 <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004a72:	f06f 0005 	mvn.w	r0, #5
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 8004a78:	f06f 000f 	mvn.w	r0, #15
}
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
 8004a7e:	bf00      	nop
 8004a80:	0800da04 	.word	0x0800da04

08004a84 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004a84:	4770      	bx	lr

08004a86 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8004a86:	6842      	ldr	r2, [r0, #4]
 8004a88:	6880      	ldr	r0, [r0, #8]
}
 8004a8a:	1a10      	subs	r0, r2, r0
 8004a8c:	4770      	bx	lr

08004a8e <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	4604      	mov	r4, r0
  if(hs->handle) {
 8004a92:	6940      	ldr	r0, [r0, #20]
 8004a94:	b118      	cbz	r0, 8004a9e <http_state_eof+0x10>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004a96:	f7ff fff5 	bl	8004a84 <fs_close>
    hs->handle = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6163      	str	r3, [r4, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004a9e:	6a20      	ldr	r0, [r4, #32]
 8004aa0:	b118      	cbz	r0, 8004aaa <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8004aa2:	f002 f8a1 	bl	8006be8 <pbuf_free>
    hs->req = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6223      	str	r3, [r4, #32]
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8004ab0:	490a      	ldr	r1, [pc, #40]	; (8004adc <http_get_404_file+0x30>)
  err = fs_open(&hs->file_handle, *uri);
 8004ab2:	4604      	mov	r4, r0
  *uri = "/404.html";
 8004ab4:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004ab6:	f7ff ffc5 	bl	8004a44 <fs_open>
  if (err != ERR_OK) {
 8004aba:	b168      	cbz	r0, 8004ad8 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004abc:	4908      	ldr	r1, [pc, #32]	; (8004ae0 <http_get_404_file+0x34>)
    err = fs_open(&hs->file_handle, *uri);
 8004abe:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8004ac0:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004ac2:	f7ff ffbf 	bl	8004a44 <fs_open>
    if (err != ERR_OK) {
 8004ac6:	b138      	cbz	r0, 8004ad8 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8004ac8:	4906      	ldr	r1, [pc, #24]	; (8004ae4 <http_get_404_file+0x38>)
      err = fs_open(&hs->file_handle, *uri);
 8004aca:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8004acc:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004ace:	f7ff ffb9 	bl	8004a44 <fs_open>
      if (err != ERR_OK) {
 8004ad2:	b108      	cbz	r0, 8004ad8 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8004ad4:	2400      	movs	r4, #0
 8004ad6:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8004ad8:	4620      	mov	r0, r4
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	0800da40 	.word	0x0800da40
 8004ae0:	0800da4a 	.word	0x0800da4a
 8004ae4:	0800da53 	.word	0x0800da53

08004ae8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004aec:	4615      	mov	r5, r2
 8004aee:	bb2a      	cbnz	r2, 8004b3c <http_accept+0x54>
 8004af0:	b321      	cbz	r1, 8004b3c <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004af2:	2101      	movs	r1, #1
 8004af4:	4620      	mov	r0, r4
 8004af6:	f002 fcd1 	bl	800749c <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004afa:	202c      	movs	r0, #44	; 0x2c
 8004afc:	f001 fdce 	bl	800669c <mem_malloc>
  if (ret != NULL) {
 8004b00:	4606      	mov	r6, r0
 8004b02:	b1f0      	cbz	r0, 8004b42 <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 8004b04:	222c      	movs	r2, #44	; 0x2c
 8004b06:	4629      	mov	r1, r5
 8004b08:	f006 fc76 	bl	800b3f8 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8004b10:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 8004b12:	f002 fcdb 	bl	80074cc <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8004b16:	490c      	ldr	r1, [pc, #48]	; (8004b48 <http_accept+0x60>)
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f002 fcdb 	bl	80074d4 <tcp_recv>
  tcp_err(pcb, http_err);
 8004b1e:	490b      	ldr	r1, [pc, #44]	; (8004b4c <http_accept+0x64>)
 8004b20:	4620      	mov	r0, r4
 8004b22:	f002 fd05 	bl	8007530 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004b26:	490a      	ldr	r1, [pc, #40]	; (8004b50 <http_accept+0x68>)
 8004b28:	4620      	mov	r0, r4
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	f002 fd1e 	bl	800756c <tcp_poll>
  tcp_sent(pcb, http_sent);
 8004b30:	4908      	ldr	r1, [pc, #32]	; (8004b54 <http_accept+0x6c>)
 8004b32:	4620      	mov	r0, r4
 8004b34:	f002 fce6 	bl	8007504 <tcp_sent>

  return ERR_OK;
}
 8004b38:	4628      	mov	r0, r5
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8004b3c:	f06f 0505 	mvn.w	r5, #5
 8004b40:	e7fa      	b.n	8004b38 <http_accept+0x50>
    return ERR_MEM;
 8004b42:	f04f 35ff 	mov.w	r5, #4294967295
 8004b46:	e7f7      	b.n	8004b38 <http_accept+0x50>
 8004b48:	08004ce5 	.word	0x08004ce5
 8004b4c:	08004fc9 	.word	0x08004fc9
 8004b50:	08004ca9 	.word	0x08004ca9
 8004b54:	08004c91 	.word	0x08004c91

08004b58 <http_close_conn>:
{
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	460d      	mov	r5, r1
  tcp_arg(pcb, NULL);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f002 fcb4 	bl	80074cc <tcp_arg>
  tcp_recv(pcb, NULL);
 8004b64:	2100      	movs	r1, #0
 8004b66:	4620      	mov	r0, r4
 8004b68:	f002 fcb4 	bl	80074d4 <tcp_recv>
  tcp_err(pcb, NULL);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f002 fcde 	bl	8007530 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8004b74:	2200      	movs	r2, #0
 8004b76:	4620      	mov	r0, r4
 8004b78:	4611      	mov	r1, r2
 8004b7a:	f002 fcf7 	bl	800756c <tcp_poll>
  tcp_sent(pcb, NULL);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4620      	mov	r0, r4
 8004b82:	f002 fcbf 	bl	8007504 <tcp_sent>
  if (hs != NULL) {
 8004b86:	b12d      	cbz	r5, 8004b94 <http_close_conn+0x3c>
    http_state_eof(hs);
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f7ff ff80 	bl	8004a8e <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f001 fc62 	bl	8006458 <mem_free>
  err = tcp_close(pcb);
 8004b94:	4620      	mov	r0, r4
 8004b96:	f002 fff9 	bl	8007b8c <tcp_close>
  if (err != ERR_OK) {
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	b120      	cbz	r0, 8004ba8 <http_close_conn+0x50>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4902      	ldr	r1, [pc, #8]	; (8004bac <http_close_conn+0x54>)
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f002 fce2 	bl	800756c <tcp_poll>
}
 8004ba8:	4628      	mov	r0, r5
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	08004ca9 	.word	0x08004ca9

08004bb0 <http_send>:
{
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	4607      	mov	r7, r0
  if (hs == NULL) {
 8004bb6:	460d      	mov	r5, r1
 8004bb8:	b139      	cbz	r1, 8004bca <http_send+0x1a>
  if (hs->left == 0) {
 8004bba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004bbc:	b9a3      	cbnz	r3, 8004be8 <http_send+0x38>
  if (hs->handle == NULL) {
 8004bbe:	6948      	ldr	r0, [r1, #20]
 8004bc0:	b938      	cbnz	r0, 8004bd2 <http_send+0x22>
    http_close_conn(pcb, hs);
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ffc7 	bl	8004b58 <http_close_conn>
      return 0;
 8004bca:	2400      	movs	r4, #0
}
 8004bcc:	4620      	mov	r0, r4
 8004bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8004bd2:	f7ff ff58 	bl	8004a86 <fs_bytes_left>
  if (bytes_left <= 0) {
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	ddf3      	ble.n	8004bc2 <http_send+0x12>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8004bda:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <http_send+0xd4>)
 8004bdc:	f240 4283 	movw	r2, #1155	; 0x483
 8004be0:	4929      	ldr	r1, [pc, #164]	; (8004c88 <http_send+0xd8>)
 8004be2:	482a      	ldr	r0, [pc, #168]	; (8004c8c <http_send+0xdc>)
 8004be4:	f006 fc10 	bl	800b408 <iprintf>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8004be8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004bea:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004bee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004bf2:	f8d5 8018 	ldr.w	r8, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	bf98      	it	ls
 8004bfa:	4614      	movls	r4, r2
 8004bfc:	b2a1      	uxth	r1, r4
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004bfe:	f1b8 0f00 	cmp.w	r8, #0
 8004c02:	d032      	beq.n	8004c6a <http_send+0xba>
 8004c04:	6968      	ldr	r0, [r5, #20]
 8004c06:	b380      	cbz	r0, 8004c6a <http_send+0xba>
 8004c08:	6843      	ldr	r3, [r0, #4]
 8004c0a:	1a9a      	subs	r2, r3, r2
 8004c0c:	6803      	ldr	r3, [r0, #0]
 8004c0e:	4413      	add	r3, r2
 8004c10:	ebb8 0303 	subs.w	r3, r8, r3
 8004c14:	bf18      	it	ne
 8004c16:	2301      	movne	r3, #1
  if (len == 0) {
 8004c18:	b35c      	cbz	r4, 8004c72 <http_send+0xc2>
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004c1a:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
    err = tcp_write(pcb, ptr, len, apiflags);
 8004c1c:	b2de      	uxtb	r6, r3
 8004c1e:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004c22:	0064      	lsls	r4, r4, #1
 8004c24:	b2a4      	uxth	r4, r4
 8004c26:	4294      	cmp	r4, r2
 8004c28:	bf28      	it	cs
 8004c2a:	4614      	movcs	r4, r2
 8004c2c:	428c      	cmp	r4, r1
 8004c2e:	bf28      	it	cs
 8004c30:	460c      	movcs	r4, r1
    err = tcp_write(pcb, ptr, len, apiflags);
 8004c32:	4633      	mov	r3, r6
 8004c34:	4622      	mov	r2, r4
 8004c36:	4641      	mov	r1, r8
 8004c38:	4638      	mov	r0, r7
 8004c3a:	f004 fd41 	bl	80096c0 <tcp_write>
    if (err == ERR_MEM) {
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d115      	bne.n	8004c6e <http_send+0xbe>
      if ((tcp_sndbuf(pcb) == 0) ||
 8004c42:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004c46:	b133      	cbz	r3, 8004c56 <http_send+0xa6>
 8004c48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d802      	bhi.n	8004c56 <http_send+0xa6>
        len /= 2;
 8004c50:	0864      	lsrs	r4, r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 8004c52:	2c01      	cmp	r4, #1
 8004c54:	d8ed      	bhi.n	8004c32 <http_send+0x82>
  u8_t data_to_send = 0;
 8004c56:	2400      	movs	r4, #0
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8004c58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1b6      	bne.n	8004bcc <http_send+0x1c>
 8004c5e:	6968      	ldr	r0, [r5, #20]
 8004c60:	f7ff ff11 	bl	8004a86 <fs_bytes_left>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	dcb1      	bgt.n	8004bcc <http_send+0x1c>
 8004c68:	e7ab      	b.n	8004bc2 <http_send+0x12>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e7d4      	b.n	8004c18 <http_send+0x68>
  if (err == ERR_OK) {
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1f1      	bne.n	8004c56 <http_send+0xa6>
    hs->file += len;
 8004c72:	69ab      	ldr	r3, [r5, #24]
 8004c74:	4423      	add	r3, r4
 8004c76:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 8004c78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c7a:	1b1c      	subs	r4, r3, r4
 8004c7c:	626c      	str	r4, [r5, #36]	; 0x24
    data_to_send = 1;
 8004c7e:	2401      	movs	r4, #1
 8004c80:	e7ea      	b.n	8004c58 <http_send+0xa8>
 8004c82:	bf00      	nop
 8004c84:	0800daaf 	.word	0x0800daaf
 8004c88:	0800dae6 	.word	0x0800dae6
 8004c8c:	0800db1d 	.word	0x0800db1d

08004c90 <http_sent>:
{
 8004c90:	b508      	push	{r3, lr}
 8004c92:	460b      	mov	r3, r1
  if (hs == NULL) {
 8004c94:	4601      	mov	r1, r0
 8004c96:	b128      	cbz	r0, 8004ca4 <http_sent+0x14>
  hs->retries = 0;
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff86 	bl	8004bb0 <http_send>
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	bd08      	pop	{r3, pc}

08004ca8 <http_poll>:
{
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	460c      	mov	r4, r1
  if (hs == NULL) {
 8004cac:	4601      	mov	r1, r0
 8004cae:	b920      	cbnz	r0, 8004cba <http_poll+0x12>
      http_close_conn(pcb, hs);
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7ff ff51 	bl	8004b58 <http_close_conn>
}
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	bd10      	pop	{r4, pc}
    hs->retries++;
 8004cba:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8004cc2:	2b04      	cmp	r3, #4
    hs->retries++;
 8004cc4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8004cc8:	d0f2      	beq.n	8004cb0 <http_poll+0x8>
    if(hs && (hs->handle)) {
 8004cca:	6943      	ldr	r3, [r0, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f2      	beq.n	8004cb6 <http_poll+0xe>
      if(http_send(pcb, hs)) {
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7ff ff6d 	bl	8004bb0 <http_send>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d0ed      	beq.n	8004cb6 <http_poll+0xe>
        tcp_output(pcb);
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f005 f874 	bl	8009dc8 <tcp_output>
 8004ce0:	e7e9      	b.n	8004cb6 <http_poll+0xe>
	...

08004ce4 <http_recv>:
{
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	b087      	sub	sp, #28
 8004cea:	4604      	mov	r4, r0
 8004cec:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004cee:	469a      	mov	sl, r3
{
 8004cf0:	9102      	str	r1, [sp, #8]
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004cf2:	b94b      	cbnz	r3, 8004d08 <http_recv+0x24>
 8004cf4:	b152      	cbz	r2, 8004d0c <http_recv+0x28>
 8004cf6:	b988      	cbnz	r0, 8004d1c <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8004cf8:	9802      	ldr	r0, [sp, #8]
 8004cfa:	8929      	ldrh	r1, [r5, #8]
 8004cfc:	f002 fb7a 	bl	80073f4 <tcp_recved>
      pbuf_free(p);
 8004d00:	4628      	mov	r0, r5
 8004d02:	f001 ff71 	bl	8006be8 <pbuf_free>
 8004d06:	e001      	b.n	8004d0c <http_recv+0x28>
    if (p != NULL) {
 8004d08:	2a00      	cmp	r2, #0
 8004d0a:	d1f5      	bne.n	8004cf8 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	9802      	ldr	r0, [sp, #8]
 8004d10:	f7ff ff22 	bl	8004b58 <http_close_conn>
}
 8004d14:	2000      	movs	r0, #0
 8004d16:	b007      	add	sp, #28
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 8004d1c:	8911      	ldrh	r1, [r2, #8]
 8004d1e:	9802      	ldr	r0, [sp, #8]
 8004d20:	f002 fb68 	bl	80073f4 <tcp_recved>
    if (hs->handle == NULL) {
 8004d24:	6963      	ldr	r3, [r4, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 812d 	bne.w	8004f86 <http_recv+0x2a2>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8004d2c:	69a3      	ldr	r3, [r4, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 8131 	bne.w	8004f96 <http_recv+0x2b2>
  if (hs->req == NULL) {
 8004d34:	6a20      	ldr	r0, [r4, #32]
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f040 808f 	bne.w	8004e5a <http_recv+0x176>
    hs->req = p;
 8004d3c:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f002 f90c 	bl	8006f5c <pbuf_ref>
  if (hs->req->next != NULL) {
 8004d44:	6a20      	ldr	r0, [r4, #32]
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 808a 	beq.w	8004e62 <http_recv+0x17e>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8004d4e:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8004d52:	f240 33ff 	movw	r3, #1023	; 0x3ff
    data = httpd_req_buf;
 8004d56:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8004f9c <http_recv+0x2b8>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8004d5a:	4599      	cmp	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004d5c:	498f      	ldr	r1, [pc, #572]	; (8004f9c <http_recv+0x2b8>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8004d5e:	bf28      	it	cs
 8004d60:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004d62:	2300      	movs	r3, #0
 8004d64:	464a      	mov	r2, r9
 8004d66:	f002 f9d1 	bl	800710c <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8004d6a:	f1b9 0f06 	cmp.w	r9, #6
 8004d6e:	f240 80f7 	bls.w	8004f60 <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004d72:	464a      	mov	r2, r9
 8004d74:	498a      	ldr	r1, [pc, #552]	; (8004fa0 <http_recv+0x2bc>)
 8004d76:	4640      	mov	r0, r8
 8004d78:	f000 f977 	bl	800506a <lwip_strnstr>
    if (crlf != NULL) {
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f000 80ef 	beq.w	8004f60 <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 8004d82:	2204      	movs	r2, #4
 8004d84:	4987      	ldr	r1, [pc, #540]	; (8004fa4 <http_recv+0x2c0>)
 8004d86:	4640      	mov	r0, r8
 8004d88:	f006 fb6c 	bl	800b464 <strncmp>
 8004d8c:	9001      	str	r0, [sp, #4]
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d16c      	bne.n	8004e6c <http_recv+0x188>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8004d92:	f1a9 0304 	sub.w	r3, r9, #4
 8004d96:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004d9a:	4983      	ldr	r1, [pc, #524]	; (8004fa8 <http_recv+0x2c4>)
        sp1 = data + 3;
 8004d9c:	f108 0b03 	add.w	fp, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4630      	mov	r0, r6
 8004da4:	461a      	mov	r2, r3
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	f000 f95f 	bl	800506a <lwip_strnstr>
      if (sp2 == NULL) {
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	4607      	mov	r7, r0
 8004db0:	b950      	cbnz	r0, 8004dc8 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8004db2:	461a      	mov	r2, r3
 8004db4:	497a      	ldr	r1, [pc, #488]	; (8004fa0 <http_recv+0x2bc>)
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 f957 	bl	800506a <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f000 80ce 	beq.w	8004f60 <http_recv+0x27c>
        is_09 = 1;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	9301      	str	r3, [sp, #4]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004dc8:	45bb      	cmp	fp, r7
 8004dca:	f080 80c9 	bcs.w	8004f60 <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8004dce:	464a      	mov	r2, r9
 8004dd0:	4976      	ldr	r1, [pc, #472]	; (8004fac <http_recv+0x2c8>)
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f000 f949 	bl	800506a <lwip_strnstr>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f000 80c1 	beq.w	8004f60 <http_recv+0x27c>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8004dde:	1bbf      	subs	r7, r7, r6
          *sp1 = 0;
 8004de0:	2300      	movs	r3, #0
  size_t uri_len = strlen(uri);
 8004de2:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8004de4:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 8004de6:	f888 3003 	strb.w	r3, [r8, #3]
          uri[uri_len] = 0;
 8004dea:	55f3      	strb	r3, [r6, r7]
 8004dec:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 8004dee:	f7fb fa81 	bl	80002f4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8004df2:	2800      	cmp	r0, #0
 8004df4:	f000 8092 	beq.w	8004f1c <http_recv+0x238>
 8004df8:	1e47      	subs	r7, r0, #1
 8004dfa:	5df3      	ldrb	r3, [r6, r7]
 8004dfc:	2b2f      	cmp	r3, #47	; 0x2f
 8004dfe:	f040 808d 	bne.w	8004f1c <http_recv+0x238>
 8004e02:	4b6b      	ldr	r3, [pc, #428]	; (8004fb0 <http_recv+0x2cc>)
 8004e04:	429e      	cmp	r6, r3
 8004e06:	469b      	mov	fp, r3
 8004e08:	d102      	bne.n	8004e10 <http_recv+0x12c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004e0a:	2801      	cmp	r0, #1
 8004e0c:	f040 8086 	bne.w	8004f1c <http_recv+0x238>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004e10:	2f3f      	cmp	r7, #63	; 0x3f
 8004e12:	bf28      	it	cs
 8004e14:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 8004e16:	b13f      	cbz	r7, 8004e28 <http_recv+0x144>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004e18:	463a      	mov	r2, r7
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4864      	ldr	r0, [pc, #400]	; (8004fb0 <http_recv+0x2cc>)
 8004e1e:	f006 fae0 	bl	800b3e2 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f80b 3007 	strb.w	r3, [fp, r7]
        is_09 = 1;
 8004e28:	f04f 0800 	mov.w	r8, #0
        file_name = g_psDefaultFilenames[loop].name;
 8004e2c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8004fc4 <http_recv+0x2e0>
      if (copy_len > 0) {
 8004e30:	b317      	cbz	r7, 8004e78 <http_recv+0x194>
        if (len_left > 0) {
 8004e32:	f1d7 023f 	rsbs	r2, r7, #63	; 0x3f
 8004e36:	d00e      	beq.n	8004e56 <http_recv+0x172>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8004e38:	f859 6038 	ldr.w	r6, [r9, r8, lsl #3]
 8004e3c:	9203      	str	r2, [sp, #12]
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7fb fa58 	bl	80002f4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8004e44:	9a03      	ldr	r2, [sp, #12]
 8004e46:	4631      	mov	r1, r6
 8004e48:	4282      	cmp	r2, r0
 8004e4a:	bf28      	it	cs
 8004e4c:	4602      	movcs	r2, r0
 8004e4e:	eb0b 0007 	add.w	r0, fp, r7
 8004e52:	f006 fac6 	bl	800b3e2 <memcpy>
        file_name = http_uri_buf;
 8004e56:	4a56      	ldr	r2, [pc, #344]	; (8004fb0 <http_recv+0x2cc>)
 8004e58:	e010      	b.n	8004e7c <http_recv+0x198>
    pbuf_cat(hs->req, p);
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f002 f892 	bl	8006f84 <pbuf_cat>
 8004e60:	e76d      	b.n	8004d3e <http_recv+0x5a>
    data = (char *)p->payload;
 8004e62:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 8004e66:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 8004e6a:	e77e      	b.n	8004d6a <http_recv+0x86>
        data[4] = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f888 3004 	strb.w	r3, [r8, #4]
    return ERR_USE;
 8004e72:	f06f 0a0f 	mvn.w	sl, #15
 8004e76:	e03b      	b.n	8004ef0 <http_recv+0x20c>
        file_name = g_psDefaultFilenames[loop].name;
 8004e78:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4620      	mov	r0, r4
 8004e80:	9203      	str	r2, [sp, #12]
 8004e82:	4626      	mov	r6, r4
 8004e84:	f7ff fdde 	bl	8004a44 <fs_open>
      if(err == ERR_OK) {
 8004e88:	9a03      	ldr	r2, [sp, #12]
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d141      	bne.n	8004f12 <http_recv+0x22e>
        uri = file_name;
 8004e8e:	9205      	str	r2, [sp, #20]
    hs->file = file->data;
 8004e90:	6833      	ldr	r3, [r6, #0]
    hs->handle = file;
 8004e92:	6166      	str	r6, [r4, #20]
    hs->file = file->data;
 8004e94:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004e96:	6873      	ldr	r3, [r6, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da06      	bge.n	8004eaa <http_recv+0x1c6>
 8004e9c:	4b45      	ldr	r3, [pc, #276]	; (8004fb4 <http_recv+0x2d0>)
 8004e9e:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8004ea2:	4945      	ldr	r1, [pc, #276]	; (8004fb8 <http_recv+0x2d4>)
 8004ea4:	4845      	ldr	r0, [pc, #276]	; (8004fbc <http_recv+0x2d8>)
 8004ea6:	f006 faaf 	bl	800b408 <iprintf>
      hs->left = file->len;
 8004eaa:	6873      	ldr	r3, [r6, #4]
 8004eac:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8004eb4:	6963      	ldr	r3, [r4, #20]
 8004eb6:	7c1b      	ldrb	r3, [r3, #16]
 8004eb8:	07da      	lsls	r2, r3, #31
 8004eba:	d468      	bmi.n	8004f8e <http_recv+0x2aa>
 8004ebc:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <http_recv+0x2d0>)
 8004ebe:	f640 02df 	movw	r2, #2271	; 0x8df
 8004ec2:	493f      	ldr	r1, [pc, #252]	; (8004fc0 <http_recv+0x2dc>)
 8004ec4:	483d      	ldr	r0, [pc, #244]	; (8004fbc <http_recv+0x2d8>)
 8004ec6:	f006 fa9f 	bl	800b408 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004eca:	9b01      	ldr	r3, [sp, #4]
 8004ecc:	b183      	cbz	r3, 8004ef0 <http_recv+0x20c>
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	7c1b      	ldrb	r3, [r3, #16]
 8004ed2:	07db      	lsls	r3, r3, #31
 8004ed4:	d50c      	bpl.n	8004ef0 <http_recv+0x20c>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004ed6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ed8:	4934      	ldr	r1, [pc, #208]	; (8004fac <http_recv+0x2c8>)
 8004eda:	69a0      	ldr	r0, [r4, #24]
 8004edc:	f000 f8c5 	bl	800506a <lwip_strnstr>
      if (file_start != NULL) {
 8004ee0:	b130      	cbz	r0, 8004ef0 <http_recv+0x20c>
        size_t diff = file_start + 4 - hs->file;
 8004ee2:	69a3      	ldr	r3, [r4, #24]
 8004ee4:	3004      	adds	r0, #4
 8004ee6:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8004ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8004eea:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 8004ef0:	6a20      	ldr	r0, [r4, #32]
 8004ef2:	b118      	cbz	r0, 8004efc <http_recv+0x218>
          pbuf_free(hs->req);
 8004ef4:	f001 fe78 	bl	8006be8 <pbuf_free>
          hs->req = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8004efc:	4628      	mov	r0, r5
 8004efe:	f001 fe73 	bl	8006be8 <pbuf_free>
      if (parsed == ERR_OK) {
 8004f02:	f1ba 0f00 	cmp.w	sl, #0
 8004f06:	d139      	bne.n	8004f7c <http_recv+0x298>
          http_send(pcb, hs);
 8004f08:	4621      	mov	r1, r4
 8004f0a:	9802      	ldr	r0, [sp, #8]
 8004f0c:	f7ff fe50 	bl	8004bb0 <http_send>
 8004f10:	e700      	b.n	8004d14 <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004f12:	f108 0801 	add.w	r8, r8, #1
 8004f16:	f1b8 0f05 	cmp.w	r8, #5
 8004f1a:	d189      	bne.n	8004e30 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8004f1c:	213f      	movs	r1, #63	; 0x3f
 8004f1e:	9805      	ldr	r0, [sp, #20]
 8004f20:	f006 fa8a 	bl	800b438 <strchr>
    if (params != NULL) {
 8004f24:	b108      	cbz	r0, 8004f2a <http_recv+0x246>
      *params = '\0';
 8004f26:	2300      	movs	r3, #0
 8004f28:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8004f2a:	9905      	ldr	r1, [sp, #20]
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4626      	mov	r6, r4
 8004f30:	f7ff fd88 	bl	8004a44 <fs_open>
    if (err == ERR_OK) {
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d0ab      	beq.n	8004e90 <http_recv+0x1ac>
      file = http_get_404_file(hs, &uri);
 8004f38:	a905      	add	r1, sp, #20
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7ff fdb6 	bl	8004aac <http_get_404_file>
  if (file == NULL) {
 8004f40:	4606      	mov	r6, r0
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d1a4      	bne.n	8004e90 <http_recv+0x1ac>
    file = http_get_404_file(hs, &uri);
 8004f46:	a905      	add	r1, sp, #20
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7ff fdaf 	bl	8004aac <http_get_404_file>
  if (file != NULL) {
 8004f4e:	4606      	mov	r6, r0
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d19d      	bne.n	8004e90 <http_recv+0x1ac>
    hs->handle = NULL;
 8004f54:	6160      	str	r0, [r4, #20]
    hs->file = NULL;
 8004f56:	61a0      	str	r0, [r4, #24]
    hs->left = 0;
 8004f58:	6260      	str	r0, [r4, #36]	; 0x24
    hs->retries = 0;
 8004f5a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8004f5e:	e7c7      	b.n	8004ef0 <http_recv+0x20c>
  clen = pbuf_clen(hs->req);
 8004f60:	6a20      	ldr	r0, [r4, #32]
 8004f62:	f001 fff3 	bl	8006f4c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8004f66:	6a23      	ldr	r3, [r4, #32]
 8004f68:	891b      	ldrh	r3, [r3, #8]
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6e:	d280      	bcs.n	8004e72 <http_recv+0x18e>
 8004f70:	2805      	cmp	r0, #5
 8004f72:	f63f af7e 	bhi.w	8004e72 <http_recv+0x18e>
 8004f76:	f06f 0a04 	mvn.w	sl, #4
 8004f7a:	e7bf      	b.n	8004efc <http_recv+0x218>
      } else if (parsed == ERR_ARG) {
 8004f7c:	f11a 0f10 	cmn.w	sl, #16
 8004f80:	f47f aec8 	bne.w	8004d14 <http_recv+0x30>
 8004f84:	e6c2      	b.n	8004d0c <http_recv+0x28>
      pbuf_free(p);
 8004f86:	4628      	mov	r0, r5
 8004f88:	f001 fe2e 	bl	8006be8 <pbuf_free>
 8004f8c:	e6c2      	b.n	8004d14 <http_recv+0x30>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ad      	beq.n	8004ef0 <http_recv+0x20c>
 8004f94:	e79f      	b.n	8004ed6 <http_recv+0x1f2>
    return ERR_USE;
 8004f96:	f06f 0a07 	mvn.w	sl, #7
 8004f9a:	e7a9      	b.n	8004ef0 <http_recv+0x20c>
 8004f9c:	240000ec 	.word	0x240000ec
 8004fa0:	0800da65 	.word	0x0800da65
 8004fa4:	0800da5e 	.word	0x0800da5e
 8004fa8:	0800f3b8 	.word	0x0800f3b8
 8004fac:	0800da63 	.word	0x0800da63
 8004fb0:	240000ac 	.word	0x240000ac
 8004fb4:	0800daaf 	.word	0x0800daaf
 8004fb8:	0800da68 	.word	0x0800da68
 8004fbc:	0800db1d 	.word	0x0800db1d
 8004fc0:	0800da86 	.word	0x0800da86
 8004fc4:	0800da18 	.word	0x0800da18

08004fc8 <http_err>:
{
 8004fc8:	b510      	push	{r4, lr}
  if (hs != NULL) {
 8004fca:	4604      	mov	r4, r0
 8004fcc:	b130      	cbz	r0, 8004fdc <http_err+0x14>
    http_state_eof(hs);
 8004fce:	f7ff fd5e 	bl	8004a8e <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8004fd2:	4620      	mov	r0, r4
}
 8004fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8004fd8:	f001 ba3e 	b.w	8006458 <mem_free>
 8004fdc:	bd10      	pop	{r4, pc}
	...

08004fe0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004fe0:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8004fe2:	202e      	movs	r0, #46	; 0x2e
 8004fe4:	f002 ffba 	bl	8007f5c <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004fe8:	4604      	mov	r4, r0
 8004fea:	b930      	cbnz	r0, 8004ffa <httpd_init+0x1a>
 8004fec:	4b15      	ldr	r3, [pc, #84]	; (8005044 <httpd_init+0x64>)
 8004fee:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8004ff2:	4915      	ldr	r1, [pc, #84]	; (8005048 <httpd_init+0x68>)
 8004ff4:	4815      	ldr	r0, [pc, #84]	; (800504c <httpd_init+0x6c>)
 8004ff6:	f006 fa07 	bl	800b408 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f002 fa4d 	bl	800749c <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8005002:	2250      	movs	r2, #80	; 0x50
 8005004:	4912      	ldr	r1, [pc, #72]	; (8005050 <httpd_init+0x70>)
 8005006:	4620      	mov	r0, r4
 8005008:	f002 f922 	bl	8007250 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800500c:	b130      	cbz	r0, 800501c <httpd_init+0x3c>
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <httpd_init+0x64>)
 8005010:	f640 2215 	movw	r2, #2581	; 0xa15
 8005014:	490f      	ldr	r1, [pc, #60]	; (8005054 <httpd_init+0x74>)
 8005016:	480d      	ldr	r0, [pc, #52]	; (800504c <httpd_init+0x6c>)
 8005018:	f006 f9f6 	bl	800b408 <iprintf>
  pcb = tcp_listen(pcb);
 800501c:	4620      	mov	r0, r4
 800501e:	21ff      	movs	r1, #255	; 0xff
 8005020:	f002 f9b8 	bl	8007394 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005024:	4604      	mov	r4, r0
 8005026:	b930      	cbnz	r0, 8005036 <httpd_init+0x56>
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <httpd_init+0x64>)
 800502a:	f640 2217 	movw	r2, #2583	; 0xa17
 800502e:	490a      	ldr	r1, [pc, #40]	; (8005058 <httpd_init+0x78>)
 8005030:	4806      	ldr	r0, [pc, #24]	; (800504c <httpd_init+0x6c>)
 8005032:	f006 f9e9 	bl	800b408 <iprintf>
  tcp_accept(pcb, http_accept);
 8005036:	4620      	mov	r0, r4
 8005038:	4908      	ldr	r1, [pc, #32]	; (800505c <httpd_init+0x7c>)
}
 800503a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 800503e:	f002 ba8f 	b.w	8007560 <tcp_accept>
 8005042:	bf00      	nop
 8005044:	0800daaf 	.word	0x0800daaf
 8005048:	0800db45 	.word	0x0800db45
 800504c:	0800db1d 	.word	0x0800db1d
 8005050:	0800deb8 	.word	0x0800deb8
 8005054:	0800db60 	.word	0x0800db60
 8005058:	0800db7c 	.word	0x0800db7c
 800505c:	08004ae9 	.word	0x08004ae9

08005060 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005060:	ba40      	rev16	r0, r0
}
 8005062:	b280      	uxth	r0, r0
 8005064:	4770      	bx	lr

08005066 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8005066:	ba00      	rev	r0, r0
 8005068:	4770      	bx	lr

0800506a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800506a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506c:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 800506e:	4608      	mov	r0, r1
{
 8005070:	460f      	mov	r7, r1
 8005072:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8005074:	f7fb f93e 	bl	80002f4 <strlen>
  if (tokenlen == 0) {
 8005078:	4606      	mov	r6, r0
 800507a:	b190      	cbz	r0, 80050a2 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800507c:	4425      	add	r5, r4
 800507e:	7820      	ldrb	r0, [r4, #0]
 8005080:	b180      	cbz	r0, 80050a4 <lwip_strnstr+0x3a>
 8005082:	19a3      	adds	r3, r4, r6
 8005084:	429d      	cmp	r5, r3
 8005086:	d201      	bcs.n	800508c <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8005088:	2000      	movs	r0, #0
 800508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800508c:	783b      	ldrb	r3, [r7, #0]
 800508e:	4283      	cmp	r3, r0
 8005090:	d105      	bne.n	800509e <lwip_strnstr+0x34>
 8005092:	4632      	mov	r2, r6
 8005094:	4639      	mov	r1, r7
 8005096:	4620      	mov	r0, r4
 8005098:	f006 f9e4 	bl	800b464 <strncmp>
 800509c:	b108      	cbz	r0, 80050a2 <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800509e:	3401      	adds	r4, #1
 80050a0:	e7ed      	b.n	800507e <lwip_strnstr+0x14>
 80050a2:	4620      	mov	r0, r4
}
 80050a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80050a6:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80050a8:	f001 f9b6 	bl	8006418 <mem_init>
  memp_init();
 80050ac:	f001 fbca 	bl	8006844 <memp_init>
  pbuf_init();
  netif_init();
 80050b0:	f001 fc41 	bl	8006936 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80050b4:	f005 fa38 	bl	800a528 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80050b8:	f002 f8c8 	bl	800724c <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80050bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80050c0:	f005 b9d8 	b.w	800a474 <sys_timeouts_init>

080050c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80050c6:	2618      	movs	r6, #24
 80050c8:	4c07      	ldr	r4, [pc, #28]	; (80050e8 <etharp_free_entry+0x24>)
{
 80050ca:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80050cc:	4346      	muls	r6, r0
 80050ce:	59a0      	ldr	r0, [r4, r6]
 80050d0:	b118      	cbz	r0, 80050da <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80050d2:	f001 fd89 	bl	8006be8 <pbuf_free>
    arp_table[i].q = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80050da:	2318      	movs	r3, #24
 80050dc:	fb03 4405 	mla	r4, r3, r5, r4
 80050e0:	2300      	movs	r3, #0
 80050e2:	7523      	strb	r3, [r4, #20]
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
 80050e6:	bf00      	nop
 80050e8:	240004ec 	.word	0x240004ec

080050ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80050ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80050f2:	4689      	mov	r9, r1
 80050f4:	4692      	mov	sl, r2
 80050f6:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80050f8:	4607      	mov	r7, r0
 80050fa:	b930      	cbnz	r0, 800510a <etharp_raw+0x1e>
 80050fc:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <etharp_raw+0xc4>)
 80050fe:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005102:	492c      	ldr	r1, [pc, #176]	; (80051b4 <etharp_raw+0xc8>)
 8005104:	482c      	ldr	r0, [pc, #176]	; (80051b8 <etharp_raw+0xcc>)
 8005106:	f006 f97f 	bl	800b408 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800510a:	2200      	movs	r2, #0
 800510c:	211c      	movs	r1, #28
 800510e:	2002      	movs	r0, #2
 8005110:	f001 fdcc 	bl	8006cac <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005114:	4606      	mov	r6, r0
 8005116:	2800      	cmp	r0, #0
 8005118:	d047      	beq.n	80051aa <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800511a:	8943      	ldrh	r3, [r0, #10]
 800511c:	2b1b      	cmp	r3, #27
 800511e:	d806      	bhi.n	800512e <etharp_raw+0x42>
 8005120:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <etharp_raw+0xc4>)
 8005122:	f240 4264 	movw	r2, #1124	; 0x464
 8005126:	4925      	ldr	r1, [pc, #148]	; (80051bc <etharp_raw+0xd0>)
 8005128:	4823      	ldr	r0, [pc, #140]	; (80051b8 <etharp_raw+0xcc>)
 800512a:	f006 f96d 	bl	800b408 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800512e:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005130:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8005134:	f7ff ff94 	bl	8005060 <lwip_htons>
 8005138:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800513a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800513e:	2b06      	cmp	r3, #6
 8005140:	d006      	beq.n	8005150 <etharp_raw+0x64>
 8005142:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <etharp_raw+0xc4>)
 8005144:	f240 426b 	movw	r2, #1131	; 0x46b
 8005148:	491d      	ldr	r1, [pc, #116]	; (80051c0 <etharp_raw+0xd4>)
 800514a:	481b      	ldr	r0, [pc, #108]	; (80051b8 <etharp_raw+0xcc>)
 800514c:	f006 f95c 	bl	800b408 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8005150:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005154:	464a      	mov	r2, r9
 8005156:	4631      	mov	r1, r6
 8005158:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800515a:	60a3      	str	r3, [r4, #8]
 800515c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005160:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	f8c4 3012 	str.w	r3, [r4, #18]
 8005168:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800516a:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800516c:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005178:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800517a:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800517c:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800517e:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005180:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005182:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005184:	2308      	movs	r3, #8
 8005186:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8005188:	2306      	movs	r3, #6
 800518a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800518c:	2304      	movs	r3, #4
 800518e:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005190:	f640 0306 	movw	r3, #2054	; 0x806
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4653      	mov	r3, sl
 8005198:	f005 fac2 	bl	800a720 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800519c:	4630      	mov	r0, r6
 800519e:	f001 fd23 	bl	8006be8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80051a2:	4628      	mov	r0, r5
}
 80051a4:	b002      	add	sp, #8
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	e7f9      	b.n	80051a4 <etharp_raw+0xb8>
 80051b0:	0800dcca 	.word	0x0800dcca
 80051b4:	0800dd01 	.word	0x0800dd01
 80051b8:	0800db1d 	.word	0x0800db1d
 80051bc:	0800dd0f 	.word	0x0800dd0f
 80051c0:	0800dd40 	.word	0x0800dd40

080051c4 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80051c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 80051ca:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80051cc:	4605      	mov	r5, r0
 80051ce:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80051d0:	4694      	mov	ip, r2
 80051d2:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80051d4:	4681      	mov	r9, r0
 80051d6:	4680      	mov	r8, r0
 80051d8:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 80051da:	4696      	mov	lr, r2
 80051dc:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80051de:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80051e0:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 80051e4:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80051e6:	d111      	bne.n	800520c <etharp_find_entry.isra.0+0x48>
 80051e8:	b997      	cbnz	r7, 8005210 <etharp_find_entry.isra.0+0x4c>
      empty = i;
 80051ea:	fa4f fe80 	sxtb.w	lr, r0
 80051ee:	3001      	adds	r0, #1
 80051f0:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80051f2:	280a      	cmp	r0, #10
 80051f4:	d1f4      	bne.n	80051e0 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	0799      	lsls	r1, r3, #30
 80051fa:	d404      	bmi.n	8005206 <etharp_find_entry.isra.0+0x42>
 80051fc:	f1be 0f0a 	cmp.w	lr, #10
 8005200:	d11c      	bne.n	800523c <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005202:	07db      	lsls	r3, r3, #31
 8005204:	d435      	bmi.n	8005272 <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
 800520a:	e009      	b.n	8005220 <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800520c:	2f00      	cmp	r7, #0
 800520e:	d0ee      	beq.n	80051ee <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005210:	2d00      	cmp	r5, #0
 8005212:	d04a      	beq.n	80052aa <etharp_find_entry.isra.0+0xe6>
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	468a      	mov	sl, r1
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	458a      	cmp	sl, r1
 800521c:	d145      	bne.n	80052aa <etharp_find_entry.isra.0+0xe6>
        return i;
 800521e:	b240      	sxtb	r0, r0
}
 8005220:	b003      	add	sp, #12
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8005226:	45c2      	cmp	sl, r8
 8005228:	d3e1      	bcc.n	80051ee <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 800522a:	fa4f fc80 	sxtb.w	ip, r0
 800522e:	46d0      	mov	r8, sl
 8005230:	e7dd      	b.n	80051ee <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8005232:	45ca      	cmp	sl, r9
            old_stable = i;
 8005234:	bf24      	itt	cs
 8005236:	b244      	sxtbcs	r4, r0
 8005238:	46d1      	movcs	r9, sl
 800523a:	e7d8      	b.n	80051ee <etharp_find_entry.isra.0+0x2a>
    i = empty;
 800523c:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005240:	2318      	movs	r3, #24
 8005242:	fb03 6307 	mla	r3, r3, r7, r6
 8005246:	7d1b      	ldrb	r3, [r3, #20]
 8005248:	b133      	cbz	r3, 8005258 <etharp_find_entry.isra.0+0x94>
 800524a:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <etharp_find_entry.isra.0+0x104>)
 800524c:	f240 1287 	movw	r2, #391	; 0x187
 8005250:	491e      	ldr	r1, [pc, #120]	; (80052cc <etharp_find_entry.isra.0+0x108>)
 8005252:	481f      	ldr	r0, [pc, #124]	; (80052d0 <etharp_find_entry.isra.0+0x10c>)
 8005254:	f006 f8d8 	bl	800b408 <iprintf>
  if (ipaddr != NULL) {
 8005258:	b125      	cbz	r5, 8005264 <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800525a:	2318      	movs	r3, #24
 800525c:	682a      	ldr	r2, [r5, #0]
 800525e:	fb03 6307 	mla	r3, r3, r7, r6
 8005262:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8005264:	2318      	movs	r3, #24
  return (err_t)i;
 8005266:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 8005268:	fb03 6607 	mla	r6, r3, r7, r6
 800526c:	2300      	movs	r3, #0
 800526e:	8273      	strh	r3, [r6, #18]
 8005270:	e7d6      	b.n	8005220 <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 8005272:	2c0a      	cmp	r4, #10
 8005274:	d00f      	beq.n	8005296 <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005276:	2318      	movs	r3, #24
      i = old_stable;
 8005278:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800527a:	435c      	muls	r4, r3
 800527c:	5933      	ldr	r3, [r6, r4]
 800527e:	b133      	cbz	r3, 800528e <etharp_find_entry.isra.0+0xca>
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <etharp_find_entry.isra.0+0x104>)
 8005282:	f240 126f 	movw	r2, #367	; 0x16f
 8005286:	4913      	ldr	r1, [pc, #76]	; (80052d4 <etharp_find_entry.isra.0+0x110>)
 8005288:	4811      	ldr	r0, [pc, #68]	; (80052d0 <etharp_find_entry.isra.0+0x10c>)
 800528a:	f006 f8bd 	bl	800b408 <iprintf>
    etharp_free_entry(i);
 800528e:	4638      	mov	r0, r7
 8005290:	f7ff ff18 	bl	80050c4 <etharp_free_entry>
 8005294:	e7d4      	b.n	8005240 <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005296:	f1bc 0f0a 	cmp.w	ip, #10
 800529a:	d002      	beq.n	80052a2 <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 800529c:	fa5f f78c 	uxtb.w	r7, ip
 80052a0:	e7f5      	b.n	800528e <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80052a2:	2a0a      	cmp	r2, #10
 80052a4:	d0af      	beq.n	8005206 <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 80052a6:	b2d7      	uxtb	r7, r2
 80052a8:	e7f1      	b.n	800528e <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 80052aa:	2f01      	cmp	r7, #1
 80052ac:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 80052b0:	d1bf      	bne.n	8005232 <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 80052b2:	681f      	ldr	r7, [r3, #0]
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	d0b6      	beq.n	8005226 <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 80052b8:	45da      	cmp	sl, fp
 80052ba:	d398      	bcc.n	80051ee <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 80052bc:	b242      	sxtb	r2, r0
 80052be:	46d3      	mov	fp, sl
 80052c0:	e795      	b.n	80051ee <etharp_find_entry.isra.0+0x2a>
 80052c2:	bf00      	nop
 80052c4:	240004ec 	.word	0x240004ec
 80052c8:	0800dcca 	.word	0x0800dcca
 80052cc:	0800dbec 	.word	0x0800dbec
 80052d0:	0800db1d 	.word	0x0800db1d
 80052d4:	0800dbd5 	.word	0x0800dbd5

080052d8 <etharp_cleanup_netif>:
{
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4606      	mov	r6, r0
 80052dc:	4d07      	ldr	r5, [pc, #28]	; (80052fc <etharp_cleanup_netif+0x24>)
 80052de:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80052e0:	7d2b      	ldrb	r3, [r5, #20]
 80052e2:	b12b      	cbz	r3, 80052f0 <etharp_cleanup_netif+0x18>
 80052e4:	68ab      	ldr	r3, [r5, #8]
 80052e6:	42b3      	cmp	r3, r6
 80052e8:	d102      	bne.n	80052f0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff feea 	bl	80050c4 <etharp_free_entry>
 80052f0:	3401      	adds	r4, #1
 80052f2:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80052f4:	2c0a      	cmp	r4, #10
 80052f6:	d1f3      	bne.n	80052e0 <etharp_cleanup_netif+0x8>
}
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	bf00      	nop
 80052fc:	240004ec 	.word	0x240004ec

08005300 <etharp_input>:
{
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	4680      	mov	r8, r0
 8005306:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005308:	460c      	mov	r4, r1
 800530a:	b949      	cbnz	r1, 8005320 <etharp_input+0x20>
 800530c:	4b46      	ldr	r3, [pc, #280]	; (8005428 <etharp_input+0x128>)
 800530e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8005312:	4946      	ldr	r1, [pc, #280]	; (800542c <etharp_input+0x12c>)
 8005314:	4846      	ldr	r0, [pc, #280]	; (8005430 <etharp_input+0x130>)
 8005316:	f006 f877 	bl	800b408 <iprintf>
}
 800531a:	b006      	add	sp, #24
 800531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8005320:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005322:	882b      	ldrh	r3, [r5, #0]
 8005324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005328:	d108      	bne.n	800533c <etharp_input+0x3c>
 800532a:	792b      	ldrb	r3, [r5, #4]
 800532c:	2b06      	cmp	r3, #6
 800532e:	d105      	bne.n	800533c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005330:	796b      	ldrb	r3, [r5, #5]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d102      	bne.n	800533c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005336:	886b      	ldrh	r3, [r5, #2]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d003      	beq.n	8005344 <etharp_input+0x44>
  pbuf_free(p);
 800533c:	4640      	mov	r0, r8
 800533e:	f001 fc53 	bl	8006be8 <pbuf_free>
 8005342:	e7ea      	b.n	800531a <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8005344:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005348:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800534a:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800534c:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800534e:	b116      	cbz	r6, 8005356 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005350:	1b9b      	subs	r3, r3, r6
 8005352:	425e      	negs	r6, r3
 8005354:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005356:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005358:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800535c:	f105 0708 	add.w	r7, r5, #8
 8005360:	bf14      	ite	ne
 8005362:	f04f 0901 	movne.w	r9, #1
 8005366:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800536a:	2b06      	cmp	r3, #6
 800536c:	d006      	beq.n	800537c <etharp_input+0x7c>
 800536e:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <etharp_input+0x128>)
 8005370:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005374:	492f      	ldr	r1, [pc, #188]	; (8005434 <etharp_input+0x134>)
 8005376:	482e      	ldr	r0, [pc, #184]	; (8005430 <etharp_input+0x130>)
 8005378:	f006 f846 	bl	800b408 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800537c:	9805      	ldr	r0, [sp, #20]
 800537e:	2800      	cmp	r0, #0
 8005380:	d03c      	beq.n	80053fc <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005382:	4621      	mov	r1, r4
 8005384:	f000 fc95 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005388:	4682      	mov	sl, r0
 800538a:	bbb8      	cbnz	r0, 80053fc <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 800538c:	9b05      	ldr	r3, [sp, #20]
 800538e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005392:	2be0      	cmp	r3, #224	; 0xe0
 8005394:	d032      	beq.n	80053fc <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005396:	4649      	mov	r1, r9
 8005398:	a805      	add	r0, sp, #20
 800539a:	f7ff ff13 	bl	80051c4 <etharp_find_entry.isra.0>
  if (i < 0) {
 800539e:	2800      	cmp	r0, #0
 80053a0:	db2c      	blt.n	80053fc <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80053a2:	2218      	movs	r2, #24
 80053a4:	4b24      	ldr	r3, [pc, #144]	; (8005438 <etharp_input+0x138>)
 80053a6:	f04f 0c02 	mov.w	ip, #2
 80053aa:	fb02 f100 	mul.w	r1, r2, r0
 80053ae:	eb03 0e01 	add.w	lr, r3, r1
 80053b2:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80053b6:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80053ba:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80053be:	fb12 c200 	smlabb	r2, r2, r0, ip
 80053c2:	6838      	ldr	r0, [r7, #0]
 80053c4:	eb03 0c02 	add.w	ip, r3, r2
 80053c8:	5098      	str	r0, [r3, r2]
 80053ca:	88ba      	ldrh	r2, [r7, #4]
 80053cc:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80053d0:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 80053d4:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 80053d8:	f1b9 0f00 	cmp.w	r9, #0
 80053dc:	d00e      	beq.n	80053fc <etharp_input+0xfc>
    arp_table[i].q = NULL;
 80053de:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80053e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053e6:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80053ea:	4649      	mov	r1, r9
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	4620      	mov	r0, r4
 80053f0:	463b      	mov	r3, r7
 80053f2:	f005 f995 	bl	800a720 <ethernet_output>
    pbuf_free(p);
 80053f6:	4648      	mov	r0, r9
 80053f8:	f001 fbf6 	bl	8006be8 <pbuf_free>
  switch (hdr->opcode) {
 80053fc:	88eb      	ldrh	r3, [r5, #6]
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005402:	d19b      	bne.n	800533c <etharp_input+0x3c>
    if (for_us) {
 8005404:	2e00      	cmp	r6, #0
 8005406:	d099      	beq.n	800533c <etharp_input+0x3c>
      etharp_raw(netif,
 8005408:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800540a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 800540e:	9701      	str	r7, [sp, #4]
 8005410:	4620      	mov	r0, r4
 8005412:	9203      	str	r2, [sp, #12]
 8005414:	aa05      	add	r2, sp, #20
 8005416:	4619      	mov	r1, r3
 8005418:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800541a:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800541c:	9200      	str	r2, [sp, #0]
 800541e:	463a      	mov	r2, r7
 8005420:	f7ff fe64 	bl	80050ec <etharp_raw>
 8005424:	e78a      	b.n	800533c <etharp_input+0x3c>
 8005426:	bf00      	nop
 8005428:	0800dcca 	.word	0x0800dcca
 800542c:	0800dd01 	.word	0x0800dd01
 8005430:	0800db1d 	.word	0x0800db1d
 8005434:	0800dc34 	.word	0x0800dc34
 8005438:	240004ec 	.word	0x240004ec

0800543c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800543c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800543e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005440:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8005444:	9102      	str	r1, [sp, #8]
 8005446:	2401      	movs	r4, #1
 8005448:	4905      	ldr	r1, [pc, #20]	; (8005460 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800544a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800544c:	9403      	str	r4, [sp, #12]
 800544e:	9101      	str	r1, [sp, #4]
 8005450:	4619      	mov	r1, r3
 8005452:	9200      	str	r2, [sp, #0]
 8005454:	4a03      	ldr	r2, [pc, #12]	; (8005464 <etharp_request+0x28>)
 8005456:	f7ff fe49 	bl	80050ec <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800545a:	b004      	add	sp, #16
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	0800f2f4 	.word	0x0800f2f4
 8005464:	0800f288 	.word	0x0800f288

08005468 <etharp_tmr>:
{
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	4c13      	ldr	r4, [pc, #76]	; (80054b8 <etharp_tmr+0x50>)
 800546c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800546e:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005470:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8005472:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8005474:	b16a      	cbz	r2, 8005492 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005476:	89e3      	ldrh	r3, [r4, #14]
 8005478:	3301      	adds	r3, #1
 800547a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800547c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005480:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005482:	d203      	bcs.n	800548c <etharp_tmr+0x24>
 8005484:	2a01      	cmp	r2, #1
 8005486:	d109      	bne.n	800549c <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005488:	2b04      	cmp	r3, #4
 800548a:	d90b      	bls.n	80054a4 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 800548c:	4628      	mov	r0, r5
 800548e:	f7ff fe19 	bl	80050c4 <etharp_free_entry>
 8005492:	3501      	adds	r5, #1
 8005494:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005496:	2d0a      	cmp	r5, #10
 8005498:	d1eb      	bne.n	8005472 <etharp_tmr+0xa>
 800549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800549c:	2a03      	cmp	r2, #3
 800549e:	d106      	bne.n	80054ae <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80054a0:	7427      	strb	r7, [r4, #16]
 80054a2:	e7f6      	b.n	8005492 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80054a4:	4621      	mov	r1, r4
 80054a6:	6860      	ldr	r0, [r4, #4]
 80054a8:	f7ff ffc8 	bl	800543c <etharp_request>
 80054ac:	e7f1      	b.n	8005492 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80054ae:	2a04      	cmp	r2, #4
 80054b0:	d1ef      	bne.n	8005492 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80054b2:	7426      	strb	r6, [r4, #16]
 80054b4:	e7ed      	b.n	8005492 <etharp_tmr+0x2a>
 80054b6:	bf00      	nop
 80054b8:	240004f0 	.word	0x240004f0

080054bc <etharp_output_to_arp_index>:
{
 80054bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054c0:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80054c2:	4d27      	ldr	r5, [pc, #156]	; (8005560 <etharp_output_to_arp_index+0xa4>)
 80054c4:	2218      	movs	r2, #24
{
 80054c6:	b085      	sub	sp, #20
 80054c8:	4606      	mov	r6, r0
 80054ca:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80054cc:	fb02 5204 	mla	r2, r2, r4, r5
 80054d0:	7d12      	ldrb	r2, [r2, #20]
 80054d2:	2a01      	cmp	r2, #1
 80054d4:	d806      	bhi.n	80054e4 <etharp_output_to_arp_index+0x28>
 80054d6:	4b23      	ldr	r3, [pc, #140]	; (8005564 <etharp_output_to_arp_index+0xa8>)
 80054d8:	f240 22ed 	movw	r2, #749	; 0x2ed
 80054dc:	4922      	ldr	r1, [pc, #136]	; (8005568 <etharp_output_to_arp_index+0xac>)
 80054de:	4823      	ldr	r0, [pc, #140]	; (800556c <etharp_output_to_arp_index+0xb0>)
 80054e0:	f005 ff92 	bl	800b408 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80054e4:	2118      	movs	r1, #24
 80054e6:	f106 0725 	add.w	r7, r6, #37	; 0x25
 80054ea:	fb01 5904 	mla	r9, r1, r4, r5
 80054ee:	f899 3014 	ldrb.w	r3, [r9, #20]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d10d      	bne.n	8005512 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80054f6:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 80054fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80054fe:	d917      	bls.n	8005530 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005500:	4649      	mov	r1, r9
 8005502:	4630      	mov	r0, r6
 8005504:	3104      	adds	r1, #4
 8005506:	f7ff ff99 	bl	800543c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800550a:	b910      	cbnz	r0, 8005512 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800550c:	2303      	movs	r3, #3
 800550e:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005512:	2318      	movs	r3, #24
 8005514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005518:	4641      	mov	r1, r8
 800551a:	4630      	mov	r0, r6
 800551c:	fb03 5304 	mla	r3, r3, r4, r5
 8005520:	9200      	str	r2, [sp, #0]
 8005522:	463a      	mov	r2, r7
 8005524:	330c      	adds	r3, #12
 8005526:	f005 f8fb 	bl	800a720 <ethernet_output>
}
 800552a:	b005      	add	sp, #20
 800552c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005530:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005534:	d3ed      	bcc.n	8005512 <etharp_output_to_arp_index+0x56>
 8005536:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800553a:	2101      	movs	r1, #1
 800553c:	4630      	mov	r0, r6
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	9103      	str	r1, [sp, #12]
 8005542:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005544:	f103 020c 	add.w	r2, r3, #12
 8005548:	3304      	adds	r3, #4
 800554a:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800554c:	442a      	add	r2, r5
 800554e:	9302      	str	r3, [sp, #8]
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <etharp_output_to_arp_index+0xb4>)
 8005552:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005554:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	463b      	mov	r3, r7
 800555a:	f7ff fdc7 	bl	80050ec <etharp_raw>
 800555e:	e7d4      	b.n	800550a <etharp_output_to_arp_index+0x4e>
 8005560:	240004ec 	.word	0x240004ec
 8005564:	0800dcca 	.word	0x0800dcca
 8005568:	0800dc58 	.word	0x0800dc58
 800556c:	0800db1d 	.word	0x0800db1d
 8005570:	0800f2f4 	.word	0x0800f2f4

08005574 <etharp_query>:
{
 8005574:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	4689      	mov	r9, r1
 800557a:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800557c:	4601      	mov	r1, r0
{
 800557e:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005580:	f8d9 0000 	ldr.w	r0, [r9]
 8005584:	f000 fb95 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 8005588:	4604      	mov	r4, r0
 800558a:	2800      	cmp	r0, #0
 800558c:	d15e      	bne.n	800564c <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 800558e:	f8d9 3000 	ldr.w	r3, [r9]
 8005592:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005596:	2ae0      	cmp	r2, #224	; 0xe0
 8005598:	d058      	beq.n	800564c <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 800559a:	2b00      	cmp	r3, #0
 800559c:	d056      	beq.n	800564c <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800559e:	2101      	movs	r1, #1
 80055a0:	4648      	mov	r0, r9
 80055a2:	f7ff fe0f 	bl	80051c4 <etharp_find_entry.isra.0>
  if (i < 0) {
 80055a6:	1e05      	subs	r5, r0, #0
 80055a8:	db53      	blt.n	8005652 <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80055aa:	4f40      	ldr	r7, [pc, #256]	; (80056ac <etharp_query+0x138>)
 80055ac:	2318      	movs	r3, #24
 80055ae:	fb03 7305 	mla	r3, r3, r5, r7
 80055b2:	7d1a      	ldrb	r2, [r3, #20]
 80055b4:	b91a      	cbnz	r2, 80055be <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80055b6:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 80055b8:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80055bc:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80055be:	2318      	movs	r3, #24
 80055c0:	fb03 7305 	mla	r3, r3, r5, r7
 80055c4:	7d1b      	ldrb	r3, [r3, #20]
 80055c6:	b933      	cbnz	r3, 80055d6 <etharp_query+0x62>
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <etharp_query+0x13c>)
 80055ca:	f240 32c9 	movw	r2, #969	; 0x3c9
 80055ce:	4939      	ldr	r1, [pc, #228]	; (80056b4 <etharp_query+0x140>)
 80055d0:	4839      	ldr	r0, [pc, #228]	; (80056b8 <etharp_query+0x144>)
 80055d2:	f005 ff19 	bl	800b408 <iprintf>
  if (is_new_entry || (q == NULL)) {
 80055d6:	b90c      	cbnz	r4, 80055dc <etharp_query+0x68>
 80055d8:	2e00      	cmp	r6, #0
 80055da:	d13c      	bne.n	8005656 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 80055dc:	4649      	mov	r1, r9
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff ff2c 	bl	800543c <etharp_request>
    if (q == NULL) {
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	d138      	bne.n	800565a <etharp_query+0xe6>
}
 80055e8:	b002      	add	sp, #8
 80055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80055ee:	d1fb      	bne.n	80055e8 <etharp_query+0x74>
 80055f0:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80055f2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80056b0 <etharp_query+0x13c>
 80055f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80056c0 <etharp_query+0x14c>
 80055fa:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80056b8 <etharp_query+0x144>
    while (p) {
 80055fe:	b99c      	cbnz	r4, 8005628 <etharp_query+0xb4>
      pbuf_ref(p);
 8005600:	4630      	mov	r0, r6
 8005602:	f001 fcab 	bl	8006f5c <pbuf_ref>
    if (p != NULL) {
 8005606:	2e00      	cmp	r6, #0
 8005608:	d04c      	beq.n	80056a4 <etharp_query+0x130>
 800560a:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 800560c:	2318      	movs	r3, #24
 800560e:	fb03 f205 	mul.w	r2, r3, r5
 8005612:	461c      	mov	r4, r3
 8005614:	58b8      	ldr	r0, [r7, r2]
 8005616:	b108      	cbz	r0, 800561c <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8005618:	f001 fae6 	bl	8006be8 <pbuf_free>
      arp_table[i].q = p;
 800561c:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8005620:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8005622:	f847 8003 	str.w	r8, [r7, r3]
 8005626:	e7df      	b.n	80055e8 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005628:	8962      	ldrh	r2, [r4, #10]
 800562a:	8923      	ldrh	r3, [r4, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d108      	bne.n	8005642 <etharp_query+0xce>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	b133      	cbz	r3, 8005642 <etharp_query+0xce>
 8005634:	4643      	mov	r3, r8
 8005636:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800563a:	4649      	mov	r1, r9
 800563c:	4650      	mov	r0, sl
 800563e:	f005 fee3 	bl	800b408 <iprintf>
      if (p->type != PBUF_ROM) {
 8005642:	7b23      	ldrb	r3, [r4, #12]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d11e      	bne.n	8005686 <etharp_query+0x112>
      p = p->next;
 8005648:	6824      	ldr	r4, [r4, #0]
 800564a:	e7d8      	b.n	80055fe <etharp_query+0x8a>
    return ERR_ARG;
 800564c:	f06f 000f 	mvn.w	r0, #15
 8005650:	e7ca      	b.n	80055e8 <etharp_query+0x74>
 8005652:	4628      	mov	r0, r5
 8005654:	e7c8      	b.n	80055e8 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800565a:	2318      	movs	r3, #24
 800565c:	fb03 7205 	mla	r2, r3, r5, r7
 8005660:	7d12      	ldrb	r2, [r2, #20]
 8005662:	2a01      	cmp	r2, #1
 8005664:	d9c3      	bls.n	80055ee <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005668:	4631      	mov	r1, r6
 800566a:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 800566c:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800566e:	220c      	movs	r2, #12
 8005670:	fb13 2305 	smlabb	r3, r3, r5, r2
 8005674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005678:	443b      	add	r3, r7
 800567a:	9200      	str	r2, [sp, #0]
 800567c:	f108 0225 	add.w	r2, r8, #37	; 0x25
 8005680:	f005 f84e 	bl	800a720 <ethernet_output>
 8005684:	e7b0      	b.n	80055e8 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005686:	2200      	movs	r2, #0
 8005688:	8921      	ldrh	r1, [r4, #8]
 800568a:	2002      	movs	r0, #2
 800568c:	f001 fb0e 	bl	8006cac <pbuf_alloc>
      if (p != NULL) {
 8005690:	4680      	mov	r8, r0
 8005692:	b138      	cbz	r0, 80056a4 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005694:	4631      	mov	r1, r6
 8005696:	f001 fcaf 	bl	8006ff8 <pbuf_copy>
 800569a:	2800      	cmp	r0, #0
 800569c:	d0b6      	beq.n	800560c <etharp_query+0x98>
          pbuf_free(p);
 800569e:	4640      	mov	r0, r8
 80056a0:	f001 faa2 	bl	8006be8 <pbuf_free>
      result = ERR_MEM;
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e79e      	b.n	80055e8 <etharp_query+0x74>
 80056aa:	bf00      	nop
 80056ac:	240004ec 	.word	0x240004ec
 80056b0:	0800dcca 	.word	0x0800dcca
 80056b4:	0800dc88 	.word	0x0800dc88
 80056b8:	0800db1d 	.word	0x0800db1d
 80056bc:	240005dc 	.word	0x240005dc
 80056c0:	0800dcb0 	.word	0x0800dcb0

080056c4 <etharp_output>:
{
 80056c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c6:	460e      	mov	r6, r1
 80056c8:	b085      	sub	sp, #20
 80056ca:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80056cc:	4604      	mov	r4, r0
 80056ce:	b930      	cbnz	r0, 80056de <etharp_output+0x1a>
 80056d0:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <etharp_output+0x108>)
 80056d2:	f240 321b 	movw	r2, #795	; 0x31b
 80056d6:	493e      	ldr	r1, [pc, #248]	; (80057d0 <etharp_output+0x10c>)
 80056d8:	483e      	ldr	r0, [pc, #248]	; (80057d4 <etharp_output+0x110>)
 80056da:	f005 fe95 	bl	800b408 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80056de:	b936      	cbnz	r6, 80056ee <etharp_output+0x2a>
 80056e0:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <etharp_output+0x108>)
 80056e2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80056e6:	493c      	ldr	r1, [pc, #240]	; (80057d8 <etharp_output+0x114>)
 80056e8:	483a      	ldr	r0, [pc, #232]	; (80057d4 <etharp_output+0x110>)
 80056ea:	f005 fe8d 	bl	800b408 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80056ee:	b935      	cbnz	r5, 80056fe <etharp_output+0x3a>
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <etharp_output+0x108>)
 80056f2:	f240 321d 	movw	r2, #797	; 0x31d
 80056f6:	4939      	ldr	r1, [pc, #228]	; (80057dc <etharp_output+0x118>)
 80056f8:	4836      	ldr	r0, [pc, #216]	; (80057d4 <etharp_output+0x110>)
 80056fa:	f005 fe85 	bl	800b408 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80056fe:	4621      	mov	r1, r4
 8005700:	6828      	ldr	r0, [r5, #0]
 8005702:	f000 fad6 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 8005706:	2800      	cmp	r0, #0
 8005708:	d15a      	bne.n	80057c0 <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800570a:	682b      	ldr	r3, [r5, #0]
 800570c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005710:	2ae0      	cmp	r2, #224	; 0xe0
 8005712:	d11d      	bne.n	8005750 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005714:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005716:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800571a:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800571e:	235e      	movs	r3, #94	; 0x5e
 8005720:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005724:	786b      	ldrb	r3, [r5, #1]
 8005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800572e:	78ab      	ldrb	r3, [r5, #2]
 8005730:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005734:	78eb      	ldrb	r3, [r5, #3]
 8005736:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800573a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800573c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005740:	4631      	mov	r1, r6
 8005742:	4620      	mov	r0, r4
 8005744:	9200      	str	r2, [sp, #0]
 8005746:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800574a:	f004 ffe9 	bl	800a720 <ethernet_output>
 800574e:	e01f      	b.n	8005790 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005750:	6862      	ldr	r2, [r4, #4]
 8005752:	68a1      	ldr	r1, [r4, #8]
 8005754:	405a      	eors	r2, r3
 8005756:	420a      	tst	r2, r1
 8005758:	d008      	beq.n	800576c <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 800575a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800575c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005764:	68e3      	ldr	r3, [r4, #12]
 8005766:	b36b      	cbz	r3, 80057c4 <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 8005768:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <etharp_output+0x11c>)
 800576e:	2018      	movs	r0, #24
 8005770:	491c      	ldr	r1, [pc, #112]	; (80057e4 <etharp_output+0x120>)
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	fb00 1002 	mla	r0, r0, r2, r1
 8005778:	7d01      	ldrb	r1, [r0, #20]
 800577a:	2901      	cmp	r1, #1
 800577c:	4619      	mov	r1, r3
 800577e:	d909      	bls.n	8005794 <etharp_output+0xd0>
 8005780:	682f      	ldr	r7, [r5, #0]
 8005782:	6843      	ldr	r3, [r0, #4]
 8005784:	429f      	cmp	r7, r3
 8005786:	d105      	bne.n	8005794 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8005788:	4631      	mov	r1, r6
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff fe96 	bl	80054bc <etharp_output_to_arp_index>
}
 8005790:	b005      	add	sp, #20
 8005792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <etharp_output+0x120>)
{
 8005796:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005798:	7d18      	ldrb	r0, [r3, #20]
 800579a:	2801      	cmp	r0, #1
 800579c:	d906      	bls.n	80057ac <etharp_output+0xe8>
 800579e:	682f      	ldr	r7, [r5, #0]
 80057a0:	6858      	ldr	r0, [r3, #4]
 80057a2:	4287      	cmp	r7, r0
 80057a4:	d102      	bne.n	80057ac <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	700a      	strb	r2, [r1, #0]
 80057aa:	e7ed      	b.n	8005788 <etharp_output+0xc4>
 80057ac:	3201      	adds	r2, #1
 80057ae:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80057b0:	2a0a      	cmp	r2, #10
 80057b2:	d1f1      	bne.n	8005798 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 80057b4:	4632      	mov	r2, r6
 80057b6:	4629      	mov	r1, r5
 80057b8:	4620      	mov	r0, r4
 80057ba:	f7ff fedb 	bl	8005574 <etharp_query>
 80057be:	e7e7      	b.n	8005790 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <etharp_output+0x124>)
 80057c2:	e7bb      	b.n	800573c <etharp_output+0x78>
            return ERR_RTE;
 80057c4:	f06f 0003 	mvn.w	r0, #3
 80057c8:	e7e2      	b.n	8005790 <etharp_output+0xcc>
 80057ca:	bf00      	nop
 80057cc:	0800dcca 	.word	0x0800dcca
 80057d0:	0800dd01 	.word	0x0800dd01
 80057d4:	0800db1d 	.word	0x0800db1d
 80057d8:	0800e6c3 	.word	0x0800e6c3
 80057dc:	0800dc15 	.word	0x0800dc15
 80057e0:	240005dc 	.word	0x240005dc
 80057e4:	240004ec 	.word	0x240004ec
 80057e8:	0800f288 	.word	0x0800f288

080057ec <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 80057ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ee:	4604      	mov	r4, r0
 80057f0:	b087      	sub	sp, #28
 80057f2:	460f      	mov	r7, r1
 80057f4:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80057f6:	2124      	movs	r1, #36	; 0x24
 80057f8:	2200      	movs	r2, #0
 80057fa:	2001      	movs	r0, #1
 80057fc:	f001 fa56 	bl	8006cac <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005800:	4605      	mov	r5, r0
 8005802:	b3a0      	cbz	r0, 800586e <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005804:	8943      	ldrh	r3, [r0, #10]
 8005806:	2b23      	cmp	r3, #35	; 0x23
 8005808:	d806      	bhi.n	8005818 <icmp_send_response.isra.0+0x2c>
 800580a:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <icmp_send_response.isra.0+0x88>)
 800580c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005810:	4919      	ldr	r1, [pc, #100]	; (8005878 <icmp_send_response.isra.0+0x8c>)
 8005812:	481a      	ldr	r0, [pc, #104]	; (800587c <icmp_send_response.isra.0+0x90>)
 8005814:	f005 fdf8 	bl	800b408 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005818:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800581a:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800581c:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800581e:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8005822:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005824:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8005828:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800582a:	71a3      	strb	r3, [r4, #6]
 800582c:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800582e:	4613      	mov	r3, r2
  icmphdr->type = type;
 8005830:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8005832:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005834:	f853 6b04 	ldr.w	r6, [r3], #4
 8005838:	4283      	cmp	r3, r0
 800583a:	f841 6b04 	str.w	r6, [r1], #4
 800583e:	d1f9      	bne.n	8005834 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005840:	ae06      	add	r6, sp, #24
 8005842:	68d3      	ldr	r3, [r2, #12]
 8005844:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f8bb 	bl	80059c4 <ip4_route>
#endif
  if (netif != NULL) {
 800584e:	b158      	cbz	r0, 8005868 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005850:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005852:	2301      	movs	r3, #1
 8005854:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8005856:	70a1      	strb	r1, [r4, #2]
 8005858:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800585a:	9002      	str	r0, [sp, #8]
 800585c:	4628      	mov	r0, r5
 800585e:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005862:	23ff      	movs	r3, #255	; 0xff
 8005864:	f000 fa14 	bl	8005c90 <ip4_output_if>
  }
  pbuf_free(q);
 8005868:	4628      	mov	r0, r5
 800586a:	f001 f9bd 	bl	8006be8 <pbuf_free>
}
 800586e:	b007      	add	sp, #28
 8005870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005872:	bf00      	nop
 8005874:	0800dde8 	.word	0x0800dde8
 8005878:	0800de1d 	.word	0x0800de1d
 800587c:	0800db1d 	.word	0x0800db1d

08005880 <icmp_input>:
  iphdr_in = ip4_current_header();
 8005880:	4b45      	ldr	r3, [pc, #276]	; (8005998 <icmp_input+0x118>)
{
 8005882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8005886:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 800588a:	b085      	sub	sp, #20
 800588c:	4604      	mov	r4, r0
 800588e:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 8005890:	f899 5000 	ldrb.w	r5, [r9]
 8005894:	461f      	mov	r7, r3
 8005896:	f005 050f 	and.w	r5, r5, #15
 800589a:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800589c:	2d13      	cmp	r5, #19
 800589e:	d92a      	bls.n	80058f6 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80058a0:	8942      	ldrh	r2, [r0, #10]
 80058a2:	2a03      	cmp	r2, #3
 80058a4:	d927      	bls.n	80058f6 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80058a6:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80058a8:	7812      	ldrb	r2, [r2, #0]
 80058aa:	2a08      	cmp	r2, #8
 80058ac:	d123      	bne.n	80058f6 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80058ae:	6958      	ldr	r0, [r3, #20]
 80058b0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80058b4:	2ae0      	cmp	r2, #224	; 0xe0
 80058b6:	d01e      	beq.n	80058f6 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	f000 f9fa 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 80058be:	4606      	mov	r6, r0
 80058c0:	b9c8      	cbnz	r0, 80058f6 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80058c2:	8923      	ldrh	r3, [r4, #8]
 80058c4:	2b07      	cmp	r3, #7
 80058c6:	d916      	bls.n	80058f6 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80058c8:	f105 010e 	add.w	r1, r5, #14
 80058cc:	4620      	mov	r0, r4
 80058ce:	f001 f985 	bl	8006bdc <pbuf_header>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d04f      	beq.n	8005976 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80058d6:	8921      	ldrh	r1, [r4, #8]
 80058d8:	4632      	mov	r2, r6
 80058da:	2002      	movs	r0, #2
 80058dc:	4429      	add	r1, r5
 80058de:	b289      	uxth	r1, r1
 80058e0:	f001 f9e4 	bl	8006cac <pbuf_alloc>
      if (r == NULL) {
 80058e4:	4606      	mov	r6, r0
 80058e6:	b130      	cbz	r0, 80058f6 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80058e8:	8942      	ldrh	r2, [r0, #10]
 80058ea:	f105 0308 	add.w	r3, r5, #8
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d207      	bcs.n	8005902 <icmp_input+0x82>
        pbuf_free(r);
 80058f2:	f001 f979 	bl	8006be8 <pbuf_free>
  pbuf_free(p);
 80058f6:	4620      	mov	r0, r4
}
 80058f8:	b005      	add	sp, #20
 80058fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80058fe:	f001 b973 	b.w	8006be8 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8005902:	4649      	mov	r1, r9
 8005904:	462a      	mov	r2, r5
 8005906:	6840      	ldr	r0, [r0, #4]
 8005908:	f005 fd6b 	bl	800b3e2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800590c:	4269      	negs	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f001 f964 	bl	8006bdc <pbuf_header>
 8005914:	b138      	cbz	r0, 8005926 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005916:	4b21      	ldr	r3, [pc, #132]	; (800599c <icmp_input+0x11c>)
 8005918:	22af      	movs	r2, #175	; 0xaf
 800591a:	4921      	ldr	r1, [pc, #132]	; (80059a0 <icmp_input+0x120>)
 800591c:	4821      	ldr	r0, [pc, #132]	; (80059a4 <icmp_input+0x124>)
 800591e:	f005 fd73 	bl	800b408 <iprintf>
        pbuf_free(r);
 8005922:	4630      	mov	r0, r6
 8005924:	e7e5      	b.n	80058f2 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8005926:	4621      	mov	r1, r4
 8005928:	4630      	mov	r0, r6
 800592a:	f001 fb65 	bl	8006ff8 <pbuf_copy>
 800592e:	2800      	cmp	r0, #0
 8005930:	d1f7      	bne.n	8005922 <icmp_input+0xa2>
      pbuf_free(p);
 8005932:	4620      	mov	r0, r4
 8005934:	4634      	mov	r4, r6
 8005936:	f001 f957 	bl	8006be8 <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 800593a:	4629      	mov	r1, r5
 800593c:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800593e:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005940:	f001 f94c 	bl	8006bdc <pbuf_header>
 8005944:	4602      	mov	r2, r0
 8005946:	2800      	cmp	r0, #0
 8005948:	d1d5      	bne.n	80058f6 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800594a:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005954:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005956:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8005958:	70b0      	strb	r0, [r6, #2]
 800595a:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800595c:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800595e:	7288      	strb	r0, [r1, #10]
 8005960:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005962:	2101      	movs	r1, #1
 8005964:	9000      	str	r0, [sp, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	9101      	str	r1, [sp, #4]
 800596a:	f8cd 8008 	str.w	r8, [sp, #8]
 800596e:	490e      	ldr	r1, [pc, #56]	; (80059a8 <icmp_input+0x128>)
 8005970:	f000 f98e 	bl	8005c90 <ip4_output_if>
 8005974:	e7bf      	b.n	80058f6 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005976:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 800597a:	4620      	mov	r0, r4
 800597c:	31f2      	adds	r1, #242	; 0xf2
 800597e:	b209      	sxth	r1, r1
 8005980:	f001 f92c 	bl	8006bdc <pbuf_header>
 8005984:	2800      	cmp	r0, #0
 8005986:	d0d8      	beq.n	800593a <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005988:	4b04      	ldr	r3, [pc, #16]	; (800599c <icmp_input+0x11c>)
 800598a:	22c0      	movs	r2, #192	; 0xc0
 800598c:	4907      	ldr	r1, [pc, #28]	; (80059ac <icmp_input+0x12c>)
 800598e:	4805      	ldr	r0, [pc, #20]	; (80059a4 <icmp_input+0x124>)
 8005990:	f005 fd3a 	bl	800b408 <iprintf>
        goto icmperr;
 8005994:	e7af      	b.n	80058f6 <icmp_input+0x76>
 8005996:	bf00      	nop
 8005998:	24000678 	.word	0x24000678
 800599c:	0800dde8 	.word	0x0800dde8
 80059a0:	0800dd81 	.word	0x0800dd81
 80059a4:	0800db1d 	.word	0x0800db1d
 80059a8:	2400068c 	.word	0x2400068c
 80059ac:	0800ddb6 	.word	0x0800ddb6

080059b0 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80059b0:	460a      	mov	r2, r1
 80059b2:	3004      	adds	r0, #4
 80059b4:	2103      	movs	r1, #3
 80059b6:	f7ff bf19 	b.w	80057ec <icmp_send_response.isra.0>

080059ba <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 80059ba:	460a      	mov	r2, r1
 80059bc:	3004      	adds	r0, #4
 80059be:	210b      	movs	r1, #11
 80059c0:	f7ff bf14 	b.w	80057ec <icmp_send_response.isra.0>

080059c4 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <ip4_route+0x50>)
{
 80059c6:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	b96b      	cbnz	r3, 80059e8 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80059cc:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <ip4_route+0x54>)
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	b1ea      	cbz	r2, 8005a0e <ip4_route+0x4a>
 80059d2:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 80059d6:	f001 0105 	and.w	r1, r1, #5
 80059da:	2905      	cmp	r1, #5
 80059dc:	d117      	bne.n	8005a0e <ip4_route+0x4a>
 80059de:	6851      	ldr	r1, [r2, #4]
 80059e0:	2900      	cmp	r1, #0
 80059e2:	bf18      	it	ne
 80059e4:	4613      	movne	r3, r2
 80059e6:	e012      	b.n	8005a0e <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80059e8:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 80059ec:	f004 0205 	and.w	r2, r4, #5
 80059f0:	2a05      	cmp	r2, #5
 80059f2:	d1e9      	bne.n	80059c8 <ip4_route+0x4>
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d0e6      	beq.n	80059c8 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80059fa:	6801      	ldr	r1, [r0, #0]
 80059fc:	689d      	ldr	r5, [r3, #8]
 80059fe:	404a      	eors	r2, r1
 8005a00:	422a      	tst	r2, r5
 8005a02:	d004      	beq.n	8005a0e <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005a04:	07a2      	lsls	r2, r4, #30
 8005a06:	d4df      	bmi.n	80059c8 <ip4_route+0x4>
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	d1dc      	bne.n	80059c8 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	bd30      	pop	{r4, r5, pc}
 8005a12:	bf00      	nop
 8005a14:	24003b90 	.word	0x24003b90
 8005a18:	24003b94 	.word	0x24003b94

08005a1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005a20:	6847      	ldr	r7, [r0, #4]
{
 8005a22:	4605      	mov	r5, r0
 8005a24:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8005a26:	f897 9000 	ldrb.w	r9, [r7]
 8005a2a:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d005      	beq.n	8005a3e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005a32:	4628      	mov	r0, r5
 8005a34:	f001 f8d8 	bl	8006be8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005a3e:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 8005a40:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005a44:	f7ff fb0c 	bl	8005060 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005a48:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 8005a4a:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005a4e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005a50:	4283      	cmp	r3, r0
 8005a52:	d903      	bls.n	8005a5c <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8005a54:	4601      	mov	r1, r0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f001 fa08 	bl	8006e6c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005a5c:	896b      	ldrh	r3, [r5, #10]
 8005a5e:	454b      	cmp	r3, r9
 8005a60:	d3e7      	bcc.n	8005a32 <ip4_input+0x16>
 8005a62:	892b      	ldrh	r3, [r5, #8]
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d3e4      	bcc.n	8005a32 <ip4_input+0x16>
 8005a68:	f1b9 0f13 	cmp.w	r9, #19
 8005a6c:	d9e1      	bls.n	8005a32 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4c49      	ldr	r4, [pc, #292]	; (8005b98 <ip4_input+0x17c>)
 8005a72:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005a78:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005a7a:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005a7c:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005a7e:	d139      	bne.n	8005af4 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005a80:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8005a84:	07da      	lsls	r2, r3, #31
 8005a86:	d503      	bpl.n	8005a90 <ip4_input+0x74>
 8005a88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d158      	bne.n	8005b42 <ip4_input+0x126>
      netif = NULL;
 8005a90:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005a92:	4641      	mov	r1, r8
 8005a94:	6920      	ldr	r0, [r4, #16]
 8005a96:	f000 f90c 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d1c9      	bne.n	8005a32 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005aa4:	2be0      	cmp	r3, #224	; 0xe0
 8005aa6:	d0c4      	beq.n	8005a32 <ip4_input+0x16>
  if (netif == NULL) {
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d0c2      	beq.n	8005a32 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ab2:	b133      	cbz	r3, 8005ac2 <ip4_input+0xa6>
    p = ip4_reass(p);
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 fa2b 	bl	8005f10 <ip4_reass>
    if (p == NULL) {
 8005aba:	4605      	mov	r5, r0
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d0bb      	beq.n	8005a38 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8005ac0:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8005ac2:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005ac4:	f1c9 0100 	rsb	r1, r9, #0
 8005ac8:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8005aca:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8005ace:	783b      	ldrb	r3, [r7, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005ad8:	f001 f880 	bl	8006bdc <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8005adc:	7a7b      	ldrb	r3, [r7, #9]
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d03d      	beq.n	8005b5e <ip4_input+0x142>
 8005ae2:	2b11      	cmp	r3, #17
 8005ae4:	d02f      	beq.n	8005b46 <ip4_input+0x12a>
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d13e      	bne.n	8005b68 <ip4_input+0x14c>
      icmp_input(p, inp);
 8005aea:	4641      	mov	r1, r8
 8005aec:	4628      	mov	r0, r5
 8005aee:	f7ff fec7 	bl	8005880 <icmp_input>
      break;
 8005af2:	e02c      	b.n	8005b4e <ip4_input+0x132>
 8005af4:	4646      	mov	r6, r8
 8005af6:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8005afa:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8005b9c <ip4_input+0x180>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005afe:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8005b02:	07db      	lsls	r3, r3, #31
 8005b04:	d404      	bmi.n	8005b10 <ip4_input+0xf4>
      if (first) {
 8005b06:	f1ba 0f00 	cmp.w	sl, #0
 8005b0a:	d10d      	bne.n	8005b28 <ip4_input+0x10c>
        netif = netif->next;
 8005b0c:	6836      	ldr	r6, [r6, #0]
 8005b0e:	e010      	b.n	8005b32 <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005b10:	6873      	ldr	r3, [r6, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f7      	beq.n	8005b06 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005b16:	6960      	ldr	r0, [r4, #20]
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	d0ba      	beq.n	8005a92 <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	f000 f8c8 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d0ef      	beq.n	8005b06 <ip4_input+0xea>
 8005b26:	e7b4      	b.n	8005a92 <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8005b28:	7d23      	ldrb	r3, [r4, #20]
 8005b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2c:	d0b0      	beq.n	8005a90 <ip4_input+0x74>
        netif = netif_list;
 8005b2e:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8005b32:	4546      	cmp	r6, r8
 8005b34:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 8005b38:	bf08      	it	eq
 8005b3a:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 8005b3c:	2e00      	cmp	r6, #0
 8005b3e:	d1de      	bne.n	8005afe <ip4_input+0xe2>
 8005b40:	e7a6      	b.n	8005a90 <ip4_input+0x74>
 8005b42:	4646      	mov	r6, r8
 8005b44:	e7a5      	b.n	8005a92 <ip4_input+0x76>
      udp_input(p, inp);
 8005b46:	4641      	mov	r1, r8
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f004 fcef 	bl	800a52c <udp_input>
  ip_data.current_netif = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8005b52:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8005b54:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005b56:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005b58:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005b5a:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005b5c:	e76c      	b.n	8005a38 <ip4_input+0x1c>
      tcp_input(p, inp);
 8005b5e:	4641      	mov	r1, r8
 8005b60:	4628      	mov	r0, r5
 8005b62:	f002 ffcb 	bl	8008afc <tcp_input>
      break;
 8005b66:	e7f2      	b.n	8005b4e <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005b68:	4631      	mov	r1, r6
 8005b6a:	6960      	ldr	r0, [r4, #20]
 8005b6c:	f000 f8a1 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 8005b70:	b968      	cbnz	r0, 8005b8e <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005b72:	6963      	ldr	r3, [r4, #20]
 8005b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005b78:	2be0      	cmp	r3, #224	; 0xe0
 8005b7a:	d008      	beq.n	8005b8e <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f001 f82f 	bl	8006be2 <pbuf_header_force>
        p->payload = iphdr;
 8005b84:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8005b86:	2102      	movs	r1, #2
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f7ff ff11 	bl	80059b0 <icmp_dest_unreach>
      pbuf_free(p);
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f001 f82a 	bl	8006be8 <pbuf_free>
 8005b94:	e7db      	b.n	8005b4e <ip4_input+0x132>
 8005b96:	bf00      	nop
 8005b98:	24000678 	.word	0x24000678
 8005b9c:	24003b90 	.word	0x24003b90

08005ba0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8005ba0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005ba6:	89c3      	ldrh	r3, [r0, #14]
{
 8005ba8:	4605      	mov	r5, r0
 8005baa:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005bac:	2b01      	cmp	r3, #1
{
 8005bae:	4616      	mov	r6, r2
 8005bb0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005bb4:	d006      	beq.n	8005bc4 <ip4_output_if_src+0x24>
 8005bb6:	4b30      	ldr	r3, [pc, #192]	; (8005c78 <ip4_output_if_src+0xd8>)
 8005bb8:	f240 3233 	movw	r2, #819	; 0x333
 8005bbc:	492f      	ldr	r1, [pc, #188]	; (8005c7c <ip4_output_if_src+0xdc>)
 8005bbe:	4830      	ldr	r0, [pc, #192]	; (8005c80 <ip4_output_if_src+0xe0>)
 8005bc0:	f005 fc22 	bl	800b408 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8005bc4:	2e00      	cmp	r6, #0
 8005bc6:	d047      	beq.n	8005c58 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8005bc8:	2114      	movs	r1, #20
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f001 f806 	bl	8006bdc <pbuf_header>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d14e      	bne.n	8005c72 <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005bd4:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8005bd6:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005bd8:	2b13      	cmp	r3, #19
 8005bda:	d806      	bhi.n	8005bea <ip4_output_if_src+0x4a>
 8005bdc:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <ip4_output_if_src+0xd8>)
 8005bde:	f240 3261 	movw	r2, #865	; 0x361
 8005be2:	4928      	ldr	r1, [pc, #160]	; (8005c84 <ip4_output_if_src+0xe4>)
 8005be4:	4826      	ldr	r0, [pc, #152]	; (8005c80 <ip4_output_if_src+0xe0>)
 8005be6:	f005 fc0f 	bl	800b408 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8005bea:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8005bee:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8005bf0:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 8005bf2:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8005bf4:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005bf6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8005c8c <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 8005bfa:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8005bfc:	2345      	movs	r3, #69	; 0x45
 8005bfe:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8005c00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005c04:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005c06:	8928      	ldrh	r0, [r5, #8]
 8005c08:	f7ff fa2a 	bl	8005060 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8005c0c:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005c0e:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8005c10:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005c12:	f8b9 0000 	ldrh.w	r0, [r9]
 8005c16:	f7ff fa23 	bl	8005060 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8005c1a:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005c1e:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8005c20:	3301      	adds	r3, #1
 8005c22:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8005c26:	f1ba 0f00 	cmp.w	sl, #0
 8005c2a:	d112      	bne.n	8005c52 <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8005c2c:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <ip4_output_if_src+0xe8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8005c30:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8005c32:	72a7      	strb	r7, [r4, #10]
 8005c34:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8005c36:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8005c3a:	b19b      	cbz	r3, 8005c64 <ip4_output_if_src+0xc4>
 8005c3c:	892a      	ldrh	r2, [r5, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d910      	bls.n	8005c64 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8005c42:	4632      	mov	r2, r6
 8005c44:	4641      	mov	r1, r8
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fb0c 	bl	8006264 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8005c4c:	b002      	add	sp, #8
 8005c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8005c52:	f8da 3000 	ldr.w	r3, [sl]
 8005c56:	e7eb      	b.n	8005c30 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005c58:	686b      	ldr	r3, [r5, #4]
 8005c5a:	ae02      	add	r6, sp, #8
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f846 3d04 	str.w	r3, [r6, #-4]!
 8005c62:	e7e8      	b.n	8005c36 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8005c64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005c68:	4632      	mov	r2, r6
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4798      	blx	r3
 8005c70:	e7ec      	b.n	8005c4c <ip4_output_if_src+0xac>
      return ERR_BUF;
 8005c72:	f06f 0001 	mvn.w	r0, #1
 8005c76:	e7e9      	b.n	8005c4c <ip4_output_if_src+0xac>
 8005c78:	0800de49 	.word	0x0800de49
 8005c7c:	0800de7d 	.word	0x0800de7d
 8005c80:	0800db1d 	.word	0x0800db1d
 8005c84:	0800de89 	.word	0x0800de89
 8005c88:	0800deb8 	.word	0x0800deb8
 8005c8c:	240005de 	.word	0x240005de

08005c90 <ip4_output_if>:
{
 8005c90:	b4f0      	push	{r4, r5, r6, r7}
 8005c92:	9c06      	ldr	r4, [sp, #24]
 8005c94:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8005c98:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8005c9c:	b11a      	cbz	r2, 8005ca6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8005c9e:	b109      	cbz	r1, 8005ca4 <ip4_output_if+0x14>
 8005ca0:	680f      	ldr	r7, [r1, #0]
 8005ca2:	b907      	cbnz	r7, 8005ca6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8005ca4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005ca6:	9406      	str	r4, [sp, #24]
 8005ca8:	9605      	str	r6, [sp, #20]
 8005caa:	9504      	str	r5, [sp, #16]
}
 8005cac:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005cae:	f7ff bf77 	b.w	8005ba0 <ip4_output_if_src>

08005cb2 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8005cb2:	1e43      	subs	r3, r0, #1
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	d811      	bhi.n	8005cdc <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8005cb8:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8005cbc:	f013 0302 	ands.w	r3, r3, #2
 8005cc0:	d00e      	beq.n	8005ce0 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8005cc2:	684a      	ldr	r2, [r1, #4]
 8005cc4:	4290      	cmp	r0, r2
 8005cc6:	d00b      	beq.n	8005ce0 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8005cc8:	688b      	ldr	r3, [r1, #8]
 8005cca:	4042      	eors	r2, r0
 8005ccc:	421a      	tst	r2, r3
 8005cce:	d107      	bne.n	8005ce0 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	4383      	bics	r3, r0
    return 1;
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2001      	moveq	r0, #1
 8005cd8:	2000      	movne	r0, #0
 8005cda:	4770      	bx	lr
 8005cdc:	2001      	movs	r0, #1
 8005cde:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8005ce0:	2000      	movs	r0, #0
  }
}
 8005ce2:	4770      	bx	lr

08005ce4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8005ce4:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <ip_reass_dequeue_datagram+0x34>)
{
 8005ce8:	4604      	mov	r4, r0
 8005cea:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4282      	cmp	r2, r0
 8005cf0:	d107      	bne.n	8005d02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8005cf2:	6802      	ldr	r2, [r0, #0]
 8005cf4:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	2004      	movs	r0, #4
}
 8005cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8005cfe:	f000 bdf7 	b.w	80068f0 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8005d02:	b931      	cbnz	r1, 8005d12 <ip_reass_dequeue_datagram+0x2e>
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <ip_reass_dequeue_datagram+0x38>)
 8005d06:	f240 1245 	movw	r2, #325	; 0x145
 8005d0a:	4905      	ldr	r1, [pc, #20]	; (8005d20 <ip_reass_dequeue_datagram+0x3c>)
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <ip_reass_dequeue_datagram+0x40>)
 8005d0e:	f005 fb7b 	bl	800b408 <iprintf>
    prev->next = ipr->next;
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	e7ee      	b.n	8005cf6 <ip_reass_dequeue_datagram+0x12>
 8005d18:	240005e4 	.word	0x240005e4
 8005d1c:	0800dfa1 	.word	0x0800dfa1
 8005d20:	0800dfda 	.word	0x0800dfda
 8005d24:	0800db1d 	.word	0x0800db1d

08005d28 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005d28:	4281      	cmp	r1, r0
{
 8005d2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2e:	4605      	mov	r5, r0
 8005d30:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005d32:	d105      	bne.n	8005d40 <ip_reass_free_complete_datagram+0x18>
 8005d34:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <ip_reass_free_complete_datagram+0xcc>)
 8005d36:	22ab      	movs	r2, #171	; 0xab
 8005d38:	492f      	ldr	r1, [pc, #188]	; (8005df8 <ip_reass_free_complete_datagram+0xd0>)
 8005d3a:	4830      	ldr	r0, [pc, #192]	; (8005dfc <ip_reass_free_complete_datagram+0xd4>)
 8005d3c:	f005 fb64 	bl	800b408 <iprintf>
  if (prev != NULL) {
 8005d40:	b147      	cbz	r7, 8005d54 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	429d      	cmp	r5, r3
 8005d46:	d005      	beq.n	8005d54 <ip_reass_free_complete_datagram+0x2c>
 8005d48:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <ip_reass_free_complete_datagram+0xcc>)
 8005d4a:	22ad      	movs	r2, #173	; 0xad
 8005d4c:	492c      	ldr	r1, [pc, #176]	; (8005e00 <ip_reass_free_complete_datagram+0xd8>)
 8005d4e:	482b      	ldr	r0, [pc, #172]	; (8005dfc <ip_reass_free_complete_datagram+0xd4>)
 8005d50:	f005 fb5a 	bl	800b408 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8005d54:	686e      	ldr	r6, [r5, #4]
 8005d56:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8005d58:	889a      	ldrh	r2, [r3, #4]
 8005d5a:	bb92      	cbnz	r2, 8005dc2 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005d5c:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005d5e:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8005d62:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005d64:	f105 0208 	add.w	r2, r5, #8
 8005d68:	f852 0b04 	ldr.w	r0, [r2], #4
 8005d6c:	428a      	cmp	r2, r1
 8005d6e:	f843 0b04 	str.w	r0, [r3], #4
 8005d72:	d1f9      	bne.n	8005d68 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8005d74:	2101      	movs	r1, #1
 8005d76:	4630      	mov	r0, r6
 8005d78:	f7ff fe1f 	bl	80059ba <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f001 f8e5 	bl	8006f4c <pbuf_clen>
 8005d82:	4604      	mov	r4, r0
    pbuf_free(p);
 8005d84:	4630      	mov	r0, r6
 8005d86:	f000 ff2f 	bl	8006be8 <pbuf_free>
  p = ipr->p;
 8005d8a:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005d8c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005df4 <ip_reass_free_complete_datagram+0xcc>
 8005d90:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005e0c <ip_reass_free_complete_datagram+0xe4>
 8005d94:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005dfc <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8005d98:	b9ae      	cbnz	r6, 8005dc6 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8005d9a:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005d9c:	4d19      	ldr	r5, [pc, #100]	; (8005e04 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f7ff ffa0 	bl	8005ce4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005da4:	882b      	ldrh	r3, [r5, #0]
 8005da6:	42a3      	cmp	r3, r4
 8005da8:	d205      	bcs.n	8005db6 <ip_reass_free_complete_datagram+0x8e>
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <ip_reass_free_complete_datagram+0xcc>)
 8005dac:	22d2      	movs	r2, #210	; 0xd2
 8005dae:	4916      	ldr	r1, [pc, #88]	; (8005e08 <ip_reass_free_complete_datagram+0xe0>)
 8005db0:	4812      	ldr	r0, [pc, #72]	; (8005dfc <ip_reass_free_complete_datagram+0xd4>)
 8005db2:	f005 fb29 	bl	800b408 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8005db6:	882b      	ldrh	r3, [r5, #0]
}
 8005db8:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8005dba:	1b1b      	subs	r3, r3, r4
 8005dbc:	802b      	strh	r3, [r5, #0]
}
 8005dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8005dc2:	2400      	movs	r4, #0
 8005dc4:	e7e1      	b.n	8005d8a <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8005dc6:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8005dc8:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8005dca:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8005dce:	f001 f8bd 	bl	8006f4c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005dd2:	4404      	add	r4, r0
 8005dd4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005dd8:	db05      	blt.n	8005de6 <ip_reass_free_complete_datagram+0xbe>
 8005dda:	4643      	mov	r3, r8
 8005ddc:	22cc      	movs	r2, #204	; 0xcc
 8005dde:	4649      	mov	r1, r9
 8005de0:	4650      	mov	r0, sl
 8005de2:	f005 fb11 	bl	800b408 <iprintf>
    pbuf_free(pcur);
 8005de6:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8005de8:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8005dea:	f000 fefd 	bl	8006be8 <pbuf_free>
    p = iprh->next_pbuf;
 8005dee:	465e      	mov	r6, fp
 8005df0:	e7d2      	b.n	8005d98 <ip_reass_free_complete_datagram+0x70>
 8005df2:	bf00      	nop
 8005df4:	0800dfa1 	.word	0x0800dfa1
 8005df8:	0800dff3 	.word	0x0800dff3
 8005dfc:	0800db1d 	.word	0x0800db1d
 8005e00:	0800dfff 	.word	0x0800dfff
 8005e04:	240005e0 	.word	0x240005e0
 8005e08:	0800e02e 	.word	0x0800e02e
 8005e0c:	0800e011 	.word	0x0800e011

08005e10 <ip_reass_remove_oldest_datagram>:
{
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8005e18:	2500      	movs	r5, #0
    r = reassdatagrams;
 8005e1a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005e84 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8005e1e:	2400      	movs	r4, #0
    r = reassdatagrams;
 8005e20:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8005e24:	4621      	mov	r1, r4
    prev = NULL;
 8005e26:	46a6      	mov	lr, r4
    oldest = NULL;
 8005e28:	4620      	mov	r0, r4
    while (r != NULL) {
 8005e2a:	b953      	cbnz	r3, 8005e42 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8005e2c:	b110      	cbz	r0, 8005e34 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8005e2e:	f7ff ff7b 	bl	8005d28 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8005e32:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005e34:	42bd      	cmp	r5, r7
 8005e36:	da01      	bge.n	8005e3c <ip_reass_remove_oldest_datagram+0x2c>
 8005e38:	2c01      	cmp	r4, #1
 8005e3a:	dcf0      	bgt.n	8005e1e <ip_reass_remove_oldest_datagram+0xe>
}
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8005e42:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	4562      	cmp	r2, ip
 8005e4a:	d109      	bne.n	8005e60 <ip_reass_remove_oldest_datagram+0x50>
 8005e4c:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	4562      	cmp	r2, ip
 8005e54:	d104      	bne.n	8005e60 <ip_reass_remove_oldest_datagram+0x50>
 8005e56:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005e5a:	88b2      	ldrh	r2, [r6, #4]
 8005e5c:	4594      	cmp	ip, r2
 8005e5e:	d008      	beq.n	8005e72 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8005e60:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8005e62:	b160      	cbz	r0, 8005e7e <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8005e64:	7fc2      	ldrb	r2, [r0, #31]
 8005e66:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005e6a:	4594      	cmp	ip, r2
 8005e6c:	bf9c      	itt	ls
 8005e6e:	4671      	movls	r1, lr
 8005e70:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	bf18      	it	ne
 8005e78:	469e      	movne	lr, r3
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	e7d5      	b.n	8005e2a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8005e7e:	4671      	mov	r1, lr
 8005e80:	4618      	mov	r0, r3
 8005e82:	e7f6      	b.n	8005e72 <ip_reass_remove_oldest_datagram+0x62>
 8005e84:	240005e4 	.word	0x240005e4

08005e88 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8005e88:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	b930      	cbnz	r0, 8005e9c <ip_frag_free_pbuf_custom_ref+0x14>
 8005e8e:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <ip_frag_free_pbuf_custom_ref+0x20>)
 8005e90:	f240 22ae 	movw	r2, #686	; 0x2ae
 8005e94:	4905      	ldr	r1, [pc, #20]	; (8005eac <ip_frag_free_pbuf_custom_ref+0x24>)
 8005e96:	4806      	ldr	r0, [pc, #24]	; (8005eb0 <ip_frag_free_pbuf_custom_ref+0x28>)
 8005e98:	f005 fab6 	bl	800b408 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	2005      	movs	r0, #5
}
 8005ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8005ea4:	f000 bd24 	b.w	80068f0 <memp_free>
 8005ea8:	0800dfa1 	.word	0x0800dfa1
 8005eac:	0800e67f 	.word	0x0800e67f
 8005eb0:	0800db1d 	.word	0x0800db1d

08005eb4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8005eb4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	b930      	cbnz	r0, 8005ec8 <ipfrag_free_pbuf_custom+0x14>
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <ipfrag_free_pbuf_custom+0x28>)
 8005ebc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <ipfrag_free_pbuf_custom+0x2c>)
 8005ec2:	4808      	ldr	r0, [pc, #32]	; (8005ee4 <ipfrag_free_pbuf_custom+0x30>)
 8005ec4:	f005 faa0 	bl	800b408 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8005ec8:	6960      	ldr	r0, [r4, #20]
 8005eca:	b108      	cbz	r0, 8005ed0 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8005ecc:	f000 fe8c 	bl	8006be8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8005ed0:	4620      	mov	r0, r4
}
 8005ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8005ed6:	f7ff bfd7 	b.w	8005e88 <ip_frag_free_pbuf_custom_ref>
 8005eda:	bf00      	nop
 8005edc:	0800dfa1 	.word	0x0800dfa1
 8005ee0:	0800e049 	.word	0x0800e049
 8005ee4:	0800db1d 	.word	0x0800db1d

08005ee8 <ip_reass_tmr>:
{
 8005ee8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 8005eec:	2400      	movs	r4, #0
  r = reassdatagrams;
 8005eee:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8005ef0:	b900      	cbnz	r0, 8005ef4 <ip_reass_tmr+0xc>
}
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8005ef4:	7fc3      	ldrb	r3, [r0, #31]
 8005ef6:	6805      	ldr	r5, [r0, #0]
 8005ef8:	b123      	cbz	r3, 8005f04 <ip_reass_tmr+0x1c>
      r->timer--;
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4604      	mov	r4, r0
 8005efe:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8005f00:	4628      	mov	r0, r5
 8005f02:	e7f5      	b.n	8005ef0 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8005f04:	4621      	mov	r1, r4
 8005f06:	f7ff ff0f 	bl	8005d28 <ip_reass_free_complete_datagram>
 8005f0a:	e7f9      	b.n	8005f00 <ip_reass_tmr+0x18>
 8005f0c:	240005e4 	.word	0x240005e4

08005f10 <ip4_reass>:
{
 8005f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8005f14:	6845      	ldr	r5, [r0, #4]
{
 8005f16:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8005f18:	782b      	ldrb	r3, [r5, #0]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	f040 808c 	bne.w	800603c <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005f24:	88e8      	ldrh	r0, [r5, #6]
 8005f26:	f7ff f89b 	bl	8005060 <lwip_htons>
 8005f2a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005f2e:	4cb2      	ldr	r4, [pc, #712]	; (80061f8 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005f30:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005f34:	8868      	ldrh	r0, [r5, #2]
 8005f36:	f7ff f893 	bl	8005060 <lwip_htons>
 8005f3a:	782b      	ldrb	r3, [r5, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8005f44:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8005f46:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005f48:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8005f4a:	f000 ffff 	bl	8006f4c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005f4e:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8005f50:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005f52:	4403      	add	r3, r0
 8005f54:	2b0a      	cmp	r3, #10
 8005f56:	dc68      	bgt.n	800602a <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005f58:	4ea8      	ldr	r6, [pc, #672]	; (80061fc <ip4_reass+0x2ec>)
 8005f5a:	6834      	ldr	r4, [r6, #0]
 8005f5c:	2c00      	cmp	r4, #0
 8005f5e:	d172      	bne.n	8006046 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005f60:	2004      	movs	r0, #4
 8005f62:	f000 fc95 	bl	8006890 <memp_malloc>
  if (ipr == NULL) {
 8005f66:	4604      	mov	r4, r0
 8005f68:	b958      	cbnz	r0, 8005f82 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f7ff ff4f 	bl	8005e10 <ip_reass_remove_oldest_datagram>
 8005f72:	4582      	cmp	sl, r0
 8005f74:	dc62      	bgt.n	800603c <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005f76:	2004      	movs	r0, #4
 8005f78:	f000 fc8a 	bl	8006890 <memp_malloc>
    if (ipr == NULL)
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d05c      	beq.n	800603c <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8005f82:	2220      	movs	r2, #32
 8005f84:	2100      	movs	r1, #0
 8005f86:	4620      	mov	r0, r4
 8005f88:	f005 fa36 	bl	800b3f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005f8c:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005f8e:	f104 0208 	add.w	r2, r4, #8
 8005f92:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8005f96:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8005f98:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8005f9a:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8005f9c:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f853 0b04 	ldr.w	r0, [r3], #4
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	f842 0b04 	str.w	r0, [r2], #4
 8005faa:	d1f9      	bne.n	8005fa0 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8005fac:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8005fb0:	f01b 0b20 	ands.w	fp, fp, #32
 8005fb4:	d108      	bne.n	8005fc8 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	444b      	add	r3, r9
 8005fba:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8005fbc:	4599      	cmp	r9, r3
 8005fbe:	d83d      	bhi.n	800603c <ip4_reass+0x12c>
 8005fc0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d839      	bhi.n	800603c <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8005fc8:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005fca:	8868      	ldrh	r0, [r5, #2]
 8005fcc:	f7ff f848 	bl	8005060 <lwip_htons>
 8005fd0:	f895 8000 	ldrb.w	r8, [r5]
 8005fd4:	f008 080f 	and.w	r8, r8, #15
 8005fd8:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005fdc:	88e8      	ldrh	r0, [r5, #6]
 8005fde:	f7ff f83f 	bl	8005060 <lwip_htons>
 8005fe2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005fe6:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 8005fea:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005fee:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8005ff0:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 8005ff2:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 8005ff4:	4672      	mov	r2, lr
  iprh->end = offset + len;
 8005ff6:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 8005ffa:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 8005ffe:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 8006000:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8006002:	7075      	strb	r5, [r6, #1]
 8006004:	70b5      	strb	r5, [r6, #2]
 8006006:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8006008:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 800600a:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800600c:	bb52      	cbnz	r2, 8006064 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800600e:	2d00      	cmp	r5, #0
 8006010:	f040 8092 	bne.w	8006138 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006014:	f1be 0f00 	cmp.w	lr, #0
 8006018:	d07d      	beq.n	8006116 <ip4_reass+0x206>
 800601a:	4b79      	ldr	r3, [pc, #484]	; (8006200 <ip4_reass+0x2f0>)
 800601c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8006020:	4978      	ldr	r1, [pc, #480]	; (8006204 <ip4_reass+0x2f4>)
 8006022:	4879      	ldr	r0, [pc, #484]	; (8006208 <ip4_reass+0x2f8>)
 8006024:	f005 f9f0 	bl	800b408 <iprintf>
 8006028:	e075      	b.n	8006116 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800602a:	4601      	mov	r1, r0
 800602c:	4628      	mov	r0, r5
 800602e:	f7ff feef 	bl	8005e10 <ip_reass_remove_oldest_datagram>
 8006032:	b118      	cbz	r0, 800603c <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006034:	8823      	ldrh	r3, [r4, #0]
 8006036:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006038:	2b0a      	cmp	r3, #10
 800603a:	dd8d      	ble.n	8005f58 <ip4_reass+0x48>
  pbuf_free(p);
 800603c:	4638      	mov	r0, r7
 800603e:	f000 fdd3 	bl	8006be8 <pbuf_free>
  return NULL;
 8006042:	2500      	movs	r5, #0
 8006044:	e0d4      	b.n	80061f0 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006046:	68eb      	ldr	r3, [r5, #12]
 8006048:	6962      	ldr	r2, [r4, #20]
 800604a:	429a      	cmp	r2, r3
 800604c:	d108      	bne.n	8006060 <ip4_reass+0x150>
 800604e:	692b      	ldr	r3, [r5, #16]
 8006050:	69a2      	ldr	r2, [r4, #24]
 8006052:	429a      	cmp	r2, r3
 8006054:	d104      	bne.n	8006060 <ip4_reass+0x150>
 8006056:	89a2      	ldrh	r2, [r4, #12]
 8006058:	88ab      	ldrh	r3, [r5, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	f000 80dc 	beq.w	8006218 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006060:	6824      	ldr	r4, [r4, #0]
 8006062:	e77b      	b.n	8005f5c <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006064:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8006068:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800606c:	4288      	cmp	r0, r1
 800606e:	d254      	bcs.n	800611a <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8006070:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8006072:	2d00      	cmp	r5, #0
 8006074:	d04d      	beq.n	8006112 <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006076:	88ea      	ldrh	r2, [r5, #6]
 8006078:	4290      	cmp	r0, r2
 800607a:	f0c0 8091 	bcc.w	80061a0 <ip4_reass+0x290>
 800607e:	428b      	cmp	r3, r1
 8006080:	f200 808e 	bhi.w	80061a0 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 8006084:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8006086:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8006088:	f040 80e4 	bne.w	8006254 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800608c:	f1bb 0f00 	cmp.w	fp, #0
 8006090:	d004      	beq.n	800609c <ip4_reass+0x18c>
 8006092:	7fa3      	ldrb	r3, [r4, #30]
 8006094:	f013 0301 	ands.w	r3, r3, #1
 8006098:	f000 80da 	beq.w	8006250 <ip4_reass+0x340>
    if (valid) {
 800609c:	f1b8 0f00 	cmp.w	r8, #0
 80060a0:	d159      	bne.n	8006156 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 80060a2:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80060a6:	4e54      	ldr	r6, [pc, #336]	; (80061f8 <ip4_reass+0x2e8>)
 80060a8:	8833      	ldrh	r3, [r6, #0]
 80060aa:	449a      	add	sl, r3
 80060ac:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 80060b0:	f1bb 0f00 	cmp.w	fp, #0
 80060b4:	d107      	bne.n	80060c6 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80060ba:	7fa3      	ldrb	r3, [r4, #30]
 80060bc:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80060c0:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80060c4:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80060c6:	f1b8 0f01 	cmp.w	r8, #1
 80060ca:	d1ba      	bne.n	8006042 <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 80060cc:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80060ce:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 80060d2:	3314      	adds	r3, #20
 80060d4:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80060da:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80060de:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80060e0:	462a      	mov	r2, r5
 80060e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80060e6:	428b      	cmp	r3, r1
 80060e8:	f842 0b04 	str.w	r0, [r2], #4
 80060ec:	d1f9      	bne.n	80060e2 <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80060ee:	8ba0      	ldrh	r0, [r4, #28]
 80060f0:	f7fe ffb6 	bl	8005060 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80060f4:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80060f6:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80060f8:	71ab      	strb	r3, [r5, #6]
 80060fa:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80060fc:	72ab      	strb	r3, [r5, #10]
 80060fe:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8006100:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8006102:	2f00      	cmp	r7, #0
 8006104:	d157      	bne.n	80061b6 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8006106:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <ip4_reass+0x2ec>)
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	428c      	cmp	r4, r1
 800610c:	d165      	bne.n	80061da <ip4_reass+0x2ca>
      ipr_prev = NULL;
 800610e:	4639      	mov	r1, r7
 8006110:	e065      	b.n	80061de <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8006112:	428b      	cmp	r3, r1
 8006114:	d844      	bhi.n	80061a0 <ip4_reass+0x290>
      ipr->p = new_p;
 8006116:	6067      	str	r7, [r4, #4]
 8006118:	e7b8      	b.n	800608c <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 800611a:	d041      	beq.n	80061a0 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 800611c:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8006120:	4282      	cmp	r2, r0
 8006122:	d83d      	bhi.n	80061a0 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8006124:	b125      	cbz	r5, 8006130 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8006126:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8006128:	428a      	cmp	r2, r1
 800612a:	bf18      	it	ne
 800612c:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8006130:	f8dc 2000 	ldr.w	r2, [ip]
 8006134:	4665      	mov	r5, ip
 8006136:	e769      	b.n	800600c <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006138:	88eb      	ldrh	r3, [r5, #6]
 800613a:	4283      	cmp	r3, r0
 800613c:	d906      	bls.n	800614c <ip4_reass+0x23c>
 800613e:	4b30      	ldr	r3, [pc, #192]	; (8006200 <ip4_reass+0x2f0>)
 8006140:	f240 12ab 	movw	r2, #427	; 0x1ab
 8006144:	4931      	ldr	r1, [pc, #196]	; (800620c <ip4_reass+0x2fc>)
 8006146:	4830      	ldr	r0, [pc, #192]	; (8006208 <ip4_reass+0x2f8>)
 8006148:	f005 f95e 	bl	800b408 <iprintf>
      iprh_prev->next_pbuf = new_p;
 800614c:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800614e:	88ea      	ldrh	r2, [r5, #6]
 8006150:	88b3      	ldrh	r3, [r6, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	e798      	b.n	8006088 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0a2      	beq.n	80060a2 <ip4_reass+0x192>
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	888b      	ldrh	r3, [r1, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d19e      	bne.n	80060a2 <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8006164:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8006166:	b99b      	cbnz	r3, 8006190 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8006168:	42b1      	cmp	r1, r6
 800616a:	d106      	bne.n	800617a <ip4_reass+0x26a>
 800616c:	4b24      	ldr	r3, [pc, #144]	; (8006200 <ip4_reass+0x2f0>)
 800616e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006172:	4927      	ldr	r1, [pc, #156]	; (8006210 <ip4_reass+0x300>)
 8006174:	4824      	ldr	r0, [pc, #144]	; (8006208 <ip4_reass+0x2f8>)
 8006176:	f005 f947 	bl	800b408 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800617a:	6833      	ldr	r3, [r6, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d092      	beq.n	80060a6 <ip4_reass+0x196>
 8006180:	4b1f      	ldr	r3, [pc, #124]	; (8006200 <ip4_reass+0x2f0>)
 8006182:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8006186:	4923      	ldr	r1, [pc, #140]	; (8006214 <ip4_reass+0x304>)
 8006188:	481f      	ldr	r0, [pc, #124]	; (8006208 <ip4_reass+0x2f8>)
 800618a:	f005 f93d 	bl	800b408 <iprintf>
 800618e:	e78a      	b.n	80060a6 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8006190:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8006192:	88f0      	ldrh	r0, [r6, #6]
 8006194:	8893      	ldrh	r3, [r2, #4]
 8006196:	4298      	cmp	r0, r3
 8006198:	d183      	bne.n	80060a2 <ip4_reass+0x192>
          q = iprh->next_pbuf;
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	4616      	mov	r6, r2
 800619e:	e7e2      	b.n	8006166 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80061a0:	4638      	mov	r0, r7
 80061a2:	f000 fed3 	bl	8006f4c <pbuf_clen>
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <ip4_reass+0x2e8>)
 80061a8:	8813      	ldrh	r3, [r2, #0]
 80061aa:	1a18      	subs	r0, r3, r0
 80061ac:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80061ae:	4638      	mov	r0, r7
 80061b0:	f000 fd1a 	bl	8006be8 <pbuf_free>
 80061b4:	e742      	b.n	800603c <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 80061b6:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 80061ba:	f06f 0113 	mvn.w	r1, #19
 80061be:	4638      	mov	r0, r7
 80061c0:	f000 fd0c 	bl	8006bdc <pbuf_header>
      pbuf_cat(p, r);
 80061c4:	4639      	mov	r1, r7
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 fedc 	bl	8006f84 <pbuf_cat>
      r = iprh->next_pbuf;
 80061cc:	f8d8 7000 	ldr.w	r7, [r8]
 80061d0:	e797      	b.n	8006102 <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 80061d2:	680b      	ldr	r3, [r1, #0]
 80061d4:	429c      	cmp	r4, r3
 80061d6:	d002      	beq.n	80061de <ip4_reass+0x2ce>
 80061d8:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80061da:	2900      	cmp	r1, #0
 80061dc:	d1f9      	bne.n	80061d2 <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80061de:	4620      	mov	r0, r4
 80061e0:	f7ff fd80 	bl	8005ce4 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 feb1 	bl	8006f4c <pbuf_clen>
 80061ea:	8833      	ldrh	r3, [r6, #0]
 80061ec:	1a18      	subs	r0, r3, r0
 80061ee:	8030      	strh	r0, [r6, #0]
}
 80061f0:	4628      	mov	r0, r5
 80061f2:	b003      	add	sp, #12
 80061f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f8:	240005e0 	.word	0x240005e0
 80061fc:	240005e4 	.word	0x240005e4
 8006200:	0800dfa1 	.word	0x0800dfa1
 8006204:	0800df3b 	.word	0x0800df3b
 8006208:	0800db1d 	.word	0x0800db1d
 800620c:	0800df1d 	.word	0x0800df1d
 8006210:	0800df72 	.word	0x0800df72
 8006214:	0800df7f 	.word	0x0800df7f
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006218:	88e8      	ldrh	r0, [r5, #6]
 800621a:	f7fe ff21 	bl	8005060 <lwip_htons>
 800621e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006222:	2800      	cmp	r0, #0
 8006224:	f47f aec2 	bne.w	8005fac <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006228:	89e0      	ldrh	r0, [r4, #14]
 800622a:	f7fe ff19 	bl	8005060 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800622e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006232:	2800      	cmp	r0, #0
 8006234:	f43f aeba 	beq.w	8005fac <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006238:	462b      	mov	r3, r5
 800623a:	f104 0208 	add.w	r2, r4, #8
 800623e:	f105 0114 	add.w	r1, r5, #20
 8006242:	f853 0b04 	ldr.w	r0, [r3], #4
 8006246:	428b      	cmp	r3, r1
 8006248:	f842 0b04 	str.w	r0, [r2], #4
 800624c:	d1f9      	bne.n	8006242 <ip4_reass+0x332>
 800624e:	e6ad      	b.n	8005fac <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006250:	4698      	mov	r8, r3
 8006252:	e728      	b.n	80060a6 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006254:	f1bb 0f00 	cmp.w	fp, #0
 8006258:	f43f af23 	beq.w	80060a2 <ip4_reass+0x192>
 800625c:	f04f 0800 	mov.w	r8, #0
 8006260:	e717      	b.n	8006092 <ip4_reass+0x182>
 8006262:	bf00      	nop

08006264 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006268:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
 800626c:	2308      	movs	r3, #8
{
 800626e:	b08b      	sub	sp, #44	; 0x2c
 8006270:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006272:	f1a8 0814 	sub.w	r8, r8, #20
{
 8006276:	468b      	mov	fp, r1
 8006278:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800627a:	fb98 f8f3 	sdiv	r8, r8, r3
 800627e:	fa1f f388 	uxth.w	r3, r8
 8006282:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006284:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006286:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8006288:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800628a:	f006 060f 	and.w	r6, r6, #15
 800628e:	00b6      	lsls	r6, r6, #2
 8006290:	2e14      	cmp	r6, #20
 8006292:	d00b      	beq.n	80062ac <ip4_frag+0x48>
 8006294:	4b5a      	ldr	r3, [pc, #360]	; (8006400 <ip4_frag+0x19c>)
 8006296:	f240 22e1 	movw	r2, #737	; 0x2e1
 800629a:	495a      	ldr	r1, [pc, #360]	; (8006404 <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800629c:	485a      	ldr	r0, [pc, #360]	; (8006408 <ip4_frag+0x1a4>)
 800629e:	f005 f8b3 	bl	800b408 <iprintf>
 80062a2:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80062a6:	b00b      	add	sp, #44	; 0x2c
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	88d8      	ldrh	r0, [r3, #6]
 80062b0:	f7fe fed6 	bl	8005060 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80062b4:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80062b8:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 80062bc:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80062be:	d004      	beq.n	80062ca <ip4_frag+0x66>
 80062c0:	4b4f      	ldr	r3, [pc, #316]	; (8006400 <ip4_frag+0x19c>)
 80062c2:	f240 22e6 	movw	r2, #742	; 0x2e6
 80062c6:	4951      	ldr	r1, [pc, #324]	; (800640c <ip4_frag+0x1a8>)
 80062c8:	e7e8      	b.n	800629c <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 80062ca:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 80062cc:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 80062d0:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 80062d2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 80062d6:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 80062d8:	9307      	str	r3, [sp, #28]
  while (left) {
 80062da:	b90d      	cbnz	r5, 80062e0 <ip4_frag+0x7c>
  return ERR_OK;
 80062dc:	4628      	mov	r0, r5
 80062de:	e7e2      	b.n	80062a6 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 80062e0:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2114      	movs	r1, #20
 80062e6:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	bfa8      	it	ge
 80062ec:	462b      	movge	r3, r5
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80062f2:	f000 fcdb 	bl	8006cac <pbuf_alloc>
    if (rambuf == NULL) {
 80062f6:	4680      	mov	r8, r0
 80062f8:	b370      	cbz	r0, 8006358 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	2b13      	cmp	r3, #19
 80062fe:	d806      	bhi.n	800630e <ip4_frag+0xaa>
 8006300:	4b3f      	ldr	r3, [pc, #252]	; (8006400 <ip4_frag+0x19c>)
 8006302:	f240 3209 	movw	r2, #777	; 0x309
 8006306:	4942      	ldr	r1, [pc, #264]	; (8006410 <ip4_frag+0x1ac>)
 8006308:	483f      	ldr	r0, [pc, #252]	; (8006408 <ip4_frag+0x1a4>)
 800630a:	f005 f87d 	bl	800b408 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	3114      	adds	r1, #20
 8006318:	f853 0b04 	ldr.w	r0, [r3], #4
 800631c:	428b      	cmp	r3, r1
 800631e:	f842 0b04 	str.w	r0, [r2], #4
 8006322:	d1f9      	bne.n	8006318 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006324:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8006328:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800632c:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800632e:	f1b9 0f00 	cmp.w	r9, #0
 8006332:	d037      	beq.n	80063a4 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8006334:	897c      	ldrh	r4, [r7, #10]
 8006336:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006338:	b2a4      	uxth	r4, r4
 800633a:	454c      	cmp	r4, r9
 800633c:	bf28      	it	cs
 800633e:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8006340:	b914      	cbnz	r4, 8006348 <ip4_frag+0xe4>
        p = p->next;
 8006342:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8006344:	2600      	movs	r6, #0
 8006346:	e7f2      	b.n	800632e <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006348:	2005      	movs	r0, #5
 800634a:	f000 faa1 	bl	8006890 <memp_malloc>
      if (pcr == NULL) {
 800634e:	4682      	mov	sl, r0
 8006350:	b928      	cbnz	r0, 800635e <ip4_frag+0xfa>
        pbuf_free(rambuf);
 8006352:	4640      	mov	r0, r8
 8006354:	f000 fc48 	bl	8006be8 <pbuf_free>
  return ERR_MEM;
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	e7a3      	b.n	80062a6 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800635e:	9401      	str	r4, [sp, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4621      	mov	r1, r4
 8006366:	4433      	add	r3, r6
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4603      	mov	r3, r0
 800636c:	2004      	movs	r0, #4
 800636e:	f000 fbfd 	bl	8006b6c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006372:	b918      	cbnz	r0, 800637c <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006374:	4650      	mov	r0, sl
 8006376:	f7ff fd87 	bl	8005e88 <ip_frag_free_pbuf_custom_ref>
 800637a:	e7ea      	b.n	8006352 <ip4_frag+0xee>
 800637c:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 800637e:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8006382:	4638      	mov	r0, r7
 8006384:	f000 fdea 	bl	8006f5c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006388:	4b22      	ldr	r3, [pc, #136]	; (8006414 <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 800638a:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 800638e:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006392:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8006396:	4640      	mov	r0, r8
 8006398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800639a:	f000 fdf3 	bl	8006f84 <pbuf_cat>
      if (left_to_copy) {
 800639e:	f1b9 0f00 	cmp.w	r9, #0
 80063a2:	d1ce      	bne.n	8006342 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 80063a4:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 80063a6:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 80063a8:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80063ac:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
    poff += newpbuflen;
 80063b0:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 80063b2:	3b13      	subs	r3, #19
    if (!last) {
 80063b4:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 80063b6:	bfa8      	it	ge
 80063b8:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80063bc:	f7fe fe50 	bl	8005060 <lwip_htons>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80063c4:	9b05      	ldr	r3, [sp, #20]
 80063c6:	f103 0014 	add.w	r0, r3, #20
 80063ca:	b280      	uxth	r0, r0
 80063cc:	f7fe fe48 	bl	8005060 <lwip_htons>
 80063d0:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80063d2:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 80063d4:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80063d6:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80063d8:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 80063da:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 80063dc:	7293      	strb	r3, [r2, #10]
 80063de:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 80063e0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80063e4:	9a08      	ldr	r2, [sp, #32]
 80063e6:	4798      	blx	r3
    pbuf_free(rambuf);
 80063e8:	4640      	mov	r0, r8
 80063ea:	f000 fbfd 	bl	8006be8 <pbuf_free>
    left -= fragsize;
 80063ee:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 80063f0:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 80063f2:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	4413      	add	r3, r2
    left -= fragsize;
 80063f8:	b2ad      	uxth	r5, r5
    ofo += nfb;
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	e76c      	b.n	80062da <ip4_frag+0x76>
 8006400:	0800dfa1 	.word	0x0800dfa1
 8006404:	0800debc 	.word	0x0800debc
 8006408:	0800db1d 	.word	0x0800db1d
 800640c:	0800dee3 	.word	0x0800dee3
 8006410:	0800defd 	.word	0x0800defd
 8006414:	08005eb5 	.word	0x08005eb5

08006418 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800641a:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800641c:	4a0b      	ldr	r2, [pc, #44]	; (800644c <mem_init+0x34>)
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8006424:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 8006428:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800642a:	1898      	adds	r0, r3, r2
  mem->used = 0;
 800642c:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800642e:	4908      	ldr	r1, [pc, #32]	; (8006450 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8006430:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006432:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8006434:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8006436:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800643a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800643e:	4a05      	ldr	r2, [pc, #20]	; (8006454 <mem_init+0x3c>)
  ram_end->used = 1;
 8006440:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4770      	bx	lr
 8006448:	24000693 	.word	0x24000693
 800644c:	240005ec 	.word	0x240005ec
 8006450:	240005f0 	.word	0x240005f0
 8006454:	240005e8 	.word	0x240005e8

08006458 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800645c:	4604      	mov	r4, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	f000 8089 	beq.w	8006576 <mem_free+0x11e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006464:	0783      	lsls	r3, r0, #30
 8006466:	d006      	beq.n	8006476 <mem_free+0x1e>
 8006468:	4b44      	ldr	r3, [pc, #272]	; (800657c <mem_free+0x124>)
 800646a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800646e:	4944      	ldr	r1, [pc, #272]	; (8006580 <mem_free+0x128>)
 8006470:	4844      	ldr	r0, [pc, #272]	; (8006584 <mem_free+0x12c>)
 8006472:	f004 ffc9 	bl	800b408 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006476:	4f44      	ldr	r7, [pc, #272]	; (8006588 <mem_free+0x130>)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	429c      	cmp	r4, r3
 800647c:	d303      	bcc.n	8006486 <mem_free+0x2e>
 800647e:	4b43      	ldr	r3, [pc, #268]	; (800658c <mem_free+0x134>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	429c      	cmp	r4, r3
 8006484:	d306      	bcc.n	8006494 <mem_free+0x3c>
 8006486:	4b3d      	ldr	r3, [pc, #244]	; (800657c <mem_free+0x124>)
 8006488:	f240 12af 	movw	r2, #431	; 0x1af
 800648c:	4940      	ldr	r1, [pc, #256]	; (8006590 <mem_free+0x138>)
 800648e:	483d      	ldr	r0, [pc, #244]	; (8006584 <mem_free+0x12c>)
 8006490:	f004 ffba 	bl	800b408 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	429c      	cmp	r4, r3
 8006498:	d36d      	bcc.n	8006576 <mem_free+0x11e>
 800649a:	4b3c      	ldr	r3, [pc, #240]	; (800658c <mem_free+0x134>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4698      	mov	r8, r3
 80064a0:	4294      	cmp	r4, r2
 80064a2:	d268      	bcs.n	8006576 <mem_free+0x11e>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80064a4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80064a8:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80064ac:	b933      	cbnz	r3, 80064bc <mem_free+0x64>
 80064ae:	4b33      	ldr	r3, [pc, #204]	; (800657c <mem_free+0x124>)
 80064b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80064b4:	4937      	ldr	r1, [pc, #220]	; (8006594 <mem_free+0x13c>)
 80064b6:	4833      	ldr	r0, [pc, #204]	; (8006584 <mem_free+0x12c>)
 80064b8:	f004 ffa6 	bl	800b408 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80064bc:	2300      	movs	r3, #0

  if (mem < lfree) {
 80064be:	4e36      	ldr	r6, [pc, #216]	; (8006598 <mem_free+0x140>)
  mem->used = 0;
 80064c0:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80064c4:	6833      	ldr	r3, [r6, #0]
 80064c6:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80064c8:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80064ca:	bf38      	it	cc
 80064cc:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80064ce:	429d      	cmp	r5, r3
 80064d0:	d206      	bcs.n	80064e0 <mem_free+0x88>
 80064d2:	4b2a      	ldr	r3, [pc, #168]	; (800657c <mem_free+0x124>)
 80064d4:	f240 125d 	movw	r2, #349	; 0x15d
 80064d8:	4930      	ldr	r1, [pc, #192]	; (800659c <mem_free+0x144>)
 80064da:	482a      	ldr	r0, [pc, #168]	; (8006584 <mem_free+0x12c>)
 80064dc:	f004 ff94 	bl	800b408 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80064e0:	f8d8 3000 	ldr.w	r3, [r8]
 80064e4:	429d      	cmp	r5, r3
 80064e6:	d306      	bcc.n	80064f6 <mem_free+0x9e>
 80064e8:	4b24      	ldr	r3, [pc, #144]	; (800657c <mem_free+0x124>)
 80064ea:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80064ee:	492c      	ldr	r1, [pc, #176]	; (80065a0 <mem_free+0x148>)
 80064f0:	4824      	ldr	r0, [pc, #144]	; (8006584 <mem_free+0x12c>)
 80064f2:	f004 ff89 	bl	800b408 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80064f6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80064fa:	b133      	cbz	r3, 800650a <mem_free+0xb2>
 80064fc:	4b1f      	ldr	r3, [pc, #124]	; (800657c <mem_free+0x124>)
 80064fe:	f240 125f 	movw	r2, #351	; 0x15f
 8006502:	4928      	ldr	r1, [pc, #160]	; (80065a4 <mem_free+0x14c>)
 8006504:	481f      	ldr	r0, [pc, #124]	; (8006584 <mem_free+0x12c>)
 8006506:	f004 ff7f 	bl	800b408 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800650a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800650e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006512:	d906      	bls.n	8006522 <mem_free+0xca>
 8006514:	4b19      	ldr	r3, [pc, #100]	; (800657c <mem_free+0x124>)
 8006516:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800651a:	4923      	ldr	r1, [pc, #140]	; (80065a8 <mem_free+0x150>)
 800651c:	4819      	ldr	r0, [pc, #100]	; (8006584 <mem_free+0x12c>)
 800651e:	f004 ff73 	bl	800b408 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006528:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800652a:	4295      	cmp	r5, r2
 800652c:	d011      	beq.n	8006552 <mem_free+0xfa>
 800652e:	7910      	ldrb	r0, [r2, #4]
 8006530:	b978      	cbnz	r0, 8006552 <mem_free+0xfa>
 8006532:	f8d8 0000 	ldr.w	r0, [r8]
 8006536:	4282      	cmp	r2, r0
 8006538:	d00b      	beq.n	8006552 <mem_free+0xfa>
    if (lfree == nmem) {
 800653a:	6830      	ldr	r0, [r6, #0]
 800653c:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800653e:	5a5a      	ldrh	r2, [r3, r1]
 8006540:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006544:	5a5a      	ldrh	r2, [r3, r1]
 8006546:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 800654a:	bf08      	it	eq
 800654c:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800654e:	441a      	add	r2, r3
 8006550:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006552:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8006556:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006558:	428d      	cmp	r5, r1
 800655a:	d00c      	beq.n	8006576 <mem_free+0x11e>
 800655c:	7908      	ldrb	r0, [r1, #4]
 800655e:	b950      	cbnz	r0, 8006576 <mem_free+0x11e>
    if (lfree == mem) {
 8006560:	6830      	ldr	r0, [r6, #0]
 8006562:	4285      	cmp	r5, r0
      lfree = pmem;
 8006564:	bf08      	it	eq
 8006566:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006568:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800656c:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800656e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006572:	440b      	add	r3, r1
 8006574:	805a      	strh	r2, [r3, #2]
 8006576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800657a:	bf00      	nop
 800657c:	0800e055 	.word	0x0800e055
 8006580:	0800e084 	.word	0x0800e084
 8006584:	0800db1d 	.word	0x0800db1d
 8006588:	240005ec 	.word	0x240005ec
 800658c:	240005f0 	.word	0x240005f0
 8006590:	0800e0a5 	.word	0x0800e0a5
 8006594:	0800e0bc 	.word	0x0800e0bc
 8006598:	240005e8 	.word	0x240005e8
 800659c:	0800e0d0 	.word	0x0800e0d0
 80065a0:	0800e0e7 	.word	0x0800e0e7
 80065a4:	0800e101 	.word	0x0800e101
 80065a8:	0800e11c 	.word	0x0800e11c

080065ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80065ae:	3103      	adds	r1, #3
 80065b0:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 80065b4:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80065b6:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 80065b8:	2d0b      	cmp	r5, #11
 80065ba:	d904      	bls.n	80065c6 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80065bc:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80065c0:	d902      	bls.n	80065c8 <mem_trim+0x1c>
    return NULL;
 80065c2:	2400      	movs	r4, #0
 80065c4:	e059      	b.n	800667a <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 80065c6:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80065c8:	4e2d      	ldr	r6, [pc, #180]	; (8006680 <mem_trim+0xd4>)
 80065ca:	6832      	ldr	r2, [r6, #0]
 80065cc:	42a2      	cmp	r2, r4
 80065ce:	d803      	bhi.n	80065d8 <mem_trim+0x2c>
 80065d0:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <mem_trim+0xd8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d306      	bcc.n	80065e6 <mem_trim+0x3a>
 80065d8:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <mem_trim+0xdc>)
 80065da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80065de:	492b      	ldr	r1, [pc, #172]	; (800668c <mem_trim+0xe0>)
 80065e0:	482b      	ldr	r0, [pc, #172]	; (8006690 <mem_trim+0xe4>)
 80065e2:	f004 ff11 	bl	800b408 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80065e6:	6833      	ldr	r3, [r6, #0]
 80065e8:	429c      	cmp	r4, r3
 80065ea:	d346      	bcc.n	800667a <mem_trim+0xce>
 80065ec:	4a25      	ldr	r2, [pc, #148]	; (8006684 <mem_trim+0xd8>)
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	4294      	cmp	r4, r2
 80065f2:	d242      	bcs.n	800667a <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80065f4:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80065f8:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80065fc:	1ad2      	subs	r2, r2, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80065fe:	f1a0 0108 	sub.w	r1, r0, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006602:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006604:	1a89      	subs	r1, r1, r2
 8006606:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006608:	42a9      	cmp	r1, r5
 800660a:	d219      	bcs.n	8006640 <mem_trim+0x94>
 800660c:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <mem_trim+0xdc>)
 800660e:	f240 2206 	movw	r2, #518	; 0x206
 8006612:	4920      	ldr	r1, [pc, #128]	; (8006694 <mem_trim+0xe8>)
 8006614:	481e      	ldr	r0, [pc, #120]	; (8006690 <mem_trim+0xe4>)
 8006616:	f004 fef7 	bl	800b408 <iprintf>
 800661a:	e7d2      	b.n	80065c2 <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800661c:	f105 0614 	add.w	r6, r5, #20
 8006620:	428e      	cmp	r6, r1
 8006622:	d82a      	bhi.n	800667a <mem_trim+0xce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006624:	f102 0108 	add.w	r1, r2, #8
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8006628:	4e1b      	ldr	r6, [pc, #108]	; (8006698 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800662a:	440d      	add	r5, r1
    if (mem2 < lfree) {
 800662c:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800662e:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006630:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8006632:	42b9      	cmp	r1, r7
      lfree = mem2;
 8006634:	bf38      	it	cc
 8006636:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 8006638:	2600      	movs	r6, #0
 800663a:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 800663c:	5358      	strh	r0, [r3, r5]
 800663e:	e013      	b.n	8006668 <mem_trim+0xbc>
  if (newsize == size) {
 8006640:	d01b      	beq.n	800667a <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006642:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 8006644:	7937      	ldrb	r7, [r6, #4]
 8006646:	2f00      	cmp	r7, #0
 8006648:	d1e8      	bne.n	800661c <mem_trim+0x70>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800664a:	f102 0108 	add.w	r1, r2, #8
    next = mem2->next;
 800664e:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 8006650:	4811      	ldr	r0, [pc, #68]	; (8006698 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006652:	440d      	add	r5, r1
    if (lfree == mem2) {
 8006654:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006656:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8006658:	428e      	cmp	r6, r1
 800665a:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 800665e:	bf08      	it	eq
 8006660:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 8006662:	2000      	movs	r0, #0
 8006664:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 8006666:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8006668:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 800666a:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800666e:	5b5a      	ldrh	r2, [r3, r5]
 8006670:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8006674:	d001      	beq.n	800667a <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006676:	4413      	add	r3, r2
 8006678:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800667a:	4620      	mov	r0, r4
 800667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667e:	bf00      	nop
 8006680:	240005ec 	.word	0x240005ec
 8006684:	240005f0 	.word	0x240005f0
 8006688:	0800e055 	.word	0x0800e055
 800668c:	0800e1e1 	.word	0x0800e1e1
 8006690:	0800db1d 	.word	0x0800db1d
 8006694:	0800e1f8 	.word	0x0800e1f8
 8006698:	240005e8 	.word	0x240005e8

0800669c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80066a0:	b148      	cbz	r0, 80066b6 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80066a2:	3003      	adds	r0, #3
 80066a4:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80066a8:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 80066aa:	2d0b      	cmp	r5, #11
 80066ac:	d905      	bls.n	80066ba <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80066ae:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80066b2:	d903      	bls.n	80066bc <mem_malloc+0x20>
    return NULL;
 80066b4:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 80066b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 80066ba:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80066bc:	4837      	ldr	r0, [pc, #220]	; (800679c <mem_malloc+0x100>)
 80066be:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
 80066c2:	4e37      	ldr	r6, [pc, #220]	; (80067a0 <mem_malloc+0x104>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80066c4:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80066c8:	6807      	ldr	r7, [r0, #0]
 80066ca:	6831      	ldr	r1, [r6, #0]
 80066cc:	1a7b      	subs	r3, r7, r1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4543      	cmp	r3, r8
 80066d2:	d2ef      	bcs.n	80066b4 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 80066d4:	18cc      	adds	r4, r1, r3
 80066d6:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 80066da:	f894 c004 	ldrb.w	ip, [r4, #4]
 80066de:	f1bc 0f00 	cmp.w	ip, #0
 80066e2:	d158      	bne.n	8006796 <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80066e4:	eba9 0203 	sub.w	r2, r9, r3
 80066e8:	4472      	add	r2, lr
      if ((!mem->used) &&
 80066ea:	4295      	cmp	r5, r2
 80066ec:	d853      	bhi.n	8006796 <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80066ee:	f105 0814 	add.w	r8, r5, #20
 80066f2:	4542      	cmp	r2, r8
 80066f4:	d349      	bcc.n	800678a <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80066f6:	f105 0208 	add.w	r2, r5, #8
 80066fa:	441a      	add	r2, r3
 80066fc:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80066fe:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8006702:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 8006706:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 800670a:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 800670e:	2301      	movs	r3, #1
          mem->next = ptr2;
 8006710:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8006712:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006714:	5a8b      	ldrh	r3, [r1, r2]
 8006716:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800671a:	d001      	beq.n	8006720 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800671c:	4419      	add	r1, r3
 800671e:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8006720:	42a7      	cmp	r7, r4
 8006722:	4f20      	ldr	r7, [pc, #128]	; (80067a4 <mem_malloc+0x108>)
 8006724:	d111      	bne.n	800674a <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 8006726:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8006728:	4623      	mov	r3, r4
 800672a:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 800672c:	791a      	ldrb	r2, [r3, #4]
 800672e:	b10a      	cbz	r2, 8006734 <mem_malloc+0x98>
 8006730:	428b      	cmp	r3, r1
 8006732:	d12d      	bne.n	8006790 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006734:	428b      	cmp	r3, r1
          lfree = cur;
 8006736:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006738:	d007      	beq.n	800674a <mem_malloc+0xae>
 800673a:	b132      	cbz	r2, 800674a <mem_malloc+0xae>
 800673c:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <mem_malloc+0x10c>)
 800673e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006742:	491a      	ldr	r1, [pc, #104]	; (80067ac <mem_malloc+0x110>)
 8006744:	481a      	ldr	r0, [pc, #104]	; (80067b0 <mem_malloc+0x114>)
 8006746:	f004 fe5f 	bl	800b408 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800674a:	3508      	adds	r5, #8
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4425      	add	r5, r4
 8006750:	42ab      	cmp	r3, r5
 8006752:	d206      	bcs.n	8006762 <mem_malloc+0xc6>
 8006754:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <mem_malloc+0x10c>)
 8006756:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800675a:	4916      	ldr	r1, [pc, #88]	; (80067b4 <mem_malloc+0x118>)
 800675c:	4814      	ldr	r0, [pc, #80]	; (80067b0 <mem_malloc+0x114>)
 800675e:	f004 fe53 	bl	800b408 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006762:	07a3      	lsls	r3, r4, #30
 8006764:	d00d      	beq.n	8006782 <mem_malloc+0xe6>
 8006766:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <mem_malloc+0x10c>)
 8006768:	f240 22d6 	movw	r2, #726	; 0x2d6
 800676c:	4912      	ldr	r1, [pc, #72]	; (80067b8 <mem_malloc+0x11c>)
 800676e:	4810      	ldr	r0, [pc, #64]	; (80067b0 <mem_malloc+0x114>)
 8006770:	f004 fe4a 	bl	800b408 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <mem_malloc+0x10c>)
 8006776:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800677a:	4910      	ldr	r1, [pc, #64]	; (80067bc <mem_malloc+0x120>)
 800677c:	480c      	ldr	r0, [pc, #48]	; (80067b0 <mem_malloc+0x114>)
 800677e:	f004 fe43 	bl	800b408 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006782:	f104 0008 	add.w	r0, r4, #8
 8006786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800678a:	2301      	movs	r3, #1
 800678c:	7123      	strb	r3, [r4, #4]
 800678e:	e7c7      	b.n	8006720 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	4433      	add	r3, r6
 8006794:	e7ca      	b.n	800672c <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006796:	4673      	mov	r3, lr
 8006798:	e79a      	b.n	80066d0 <mem_malloc+0x34>
 800679a:	bf00      	nop
 800679c:	240005e8 	.word	0x240005e8
 80067a0:	240005ec 	.word	0x240005ec
 80067a4:	240005f0 	.word	0x240005f0
 80067a8:	0800e055 	.word	0x0800e055
 80067ac:	0800e146 	.word	0x0800e146
 80067b0:	0800db1d 	.word	0x0800db1d
 80067b4:	0800e15f 	.word	0x0800e15f
 80067b8:	0800e18f 	.word	0x0800e18f
 80067bc:	0800e1be 	.word	0x0800e1be

080067c0 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 80067c0:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80067c2:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80067c4:	b154      	cbz	r4, 80067dc <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80067ca:	07a3      	lsls	r3, r4, #30
 80067cc:	d006      	beq.n	80067dc <do_memp_malloc_pool.isra.0+0x1c>
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <do_memp_malloc_pool.isra.0+0x20>)
 80067d0:	f240 1249 	movw	r2, #329	; 0x149
 80067d4:	4903      	ldr	r1, [pc, #12]	; (80067e4 <do_memp_malloc_pool.isra.0+0x24>)
 80067d6:	4804      	ldr	r0, [pc, #16]	; (80067e8 <do_memp_malloc_pool.isra.0+0x28>)
 80067d8:	f004 fe16 	bl	800b408 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 80067dc:	4620      	mov	r0, r4
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	0800e238 	.word	0x0800e238
 80067e4:	0800e268 	.word	0x0800e268
 80067e8:	0800db1d 	.word	0x0800db1d

080067ec <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80067ec:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80067ee:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80067f0:	4605      	mov	r5, r0
 80067f2:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80067f4:	d006      	beq.n	8006804 <do_memp_free_pool.isra.1+0x18>
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <do_memp_free_pool.isra.1+0x24>)
 80067f8:	f240 129d 	movw	r2, #413	; 0x19d
 80067fc:	4905      	ldr	r1, [pc, #20]	; (8006814 <do_memp_free_pool.isra.1+0x28>)
 80067fe:	4806      	ldr	r0, [pc, #24]	; (8006818 <do_memp_free_pool.isra.1+0x2c>)
 8006800:	f004 fe02 	bl	800b408 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800680a:	601c      	str	r4, [r3, #0]
 800680c:	bd38      	pop	{r3, r4, r5, pc}
 800680e:	bf00      	nop
 8006810:	0800e238 	.word	0x0800e238
 8006814:	0800e218 	.word	0x0800e218
 8006818:	0800db1d 	.word	0x0800db1d

0800681c <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800681c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800681e:	2200      	movs	r2, #0
 8006820:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006822:	3303      	adds	r3, #3
{
 8006824:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006826:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800682a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800682c:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800682e:	42a2      	cmp	r2, r4
 8006830:	db00      	blt.n	8006834 <memp_init_pool+0x18>
}
 8006832:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8006834:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006836:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8006838:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800683a:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800683c:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800683e:	442b      	add	r3, r5
 8006840:	e7f5      	b.n	800682e <memp_init_pool+0x12>
	...

08006844 <memp_init>:
{
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8006848:	4d04      	ldr	r5, [pc, #16]	; (800685c <memp_init+0x18>)
 800684a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800684e:	3401      	adds	r4, #1
 8006850:	f7ff ffe4 	bl	800681c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006854:	2c09      	cmp	r4, #9
 8006856:	d1f8      	bne.n	800684a <memp_init+0x6>
}
 8006858:	bd38      	pop	{r3, r4, r5, pc}
 800685a:	bf00      	nop
 800685c:	0800e344 	.word	0x0800e344

08006860 <memp_malloc_pool>:
{
 8006860:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006862:	4604      	mov	r4, r0
 8006864:	b120      	cbz	r0, 8006870 <memp_malloc_pool+0x10>
  return do_memp_malloc_pool(desc);
 8006866:	6880      	ldr	r0, [r0, #8]
}
 8006868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800686c:	f7ff bfa8 	b.w	80067c0 <do_memp_malloc_pool.isra.0>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <memp_malloc_pool+0x24>)
 8006872:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006876:	4904      	ldr	r1, [pc, #16]	; (8006888 <memp_malloc_pool+0x28>)
 8006878:	4804      	ldr	r0, [pc, #16]	; (800688c <memp_malloc_pool+0x2c>)
 800687a:	f004 fdc5 	bl	800b408 <iprintf>
}
 800687e:	4620      	mov	r0, r4
 8006880:	bd10      	pop	{r4, pc}
 8006882:	bf00      	nop
 8006884:	0800e238 	.word	0x0800e238
 8006888:	0800e330 	.word	0x0800e330
 800688c:	0800db1d 	.word	0x0800db1d

08006890 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006890:	2808      	cmp	r0, #8
{
 8006892:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006894:	d807      	bhi.n	80068a6 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <memp_malloc+0x28>)
 8006898:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800689c:	6898      	ldr	r0, [r3, #8]
}
 800689e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80068a2:	f7ff bf8d 	b.w	80067c0 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80068a6:	4b05      	ldr	r3, [pc, #20]	; (80068bc <memp_malloc+0x2c>)
 80068a8:	f240 1287 	movw	r2, #391	; 0x187
 80068ac:	4904      	ldr	r1, [pc, #16]	; (80068c0 <memp_malloc+0x30>)
 80068ae:	4805      	ldr	r0, [pc, #20]	; (80068c4 <memp_malloc+0x34>)
 80068b0:	f004 fdaa 	bl	800b408 <iprintf>
}
 80068b4:	2000      	movs	r0, #0
 80068b6:	bd08      	pop	{r3, pc}
 80068b8:	0800e344 	.word	0x0800e344
 80068bc:	0800e238 	.word	0x0800e238
 80068c0:	0800e313 	.word	0x0800e313
 80068c4:	0800db1d 	.word	0x0800db1d

080068c8 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80068c8:	b948      	cbnz	r0, 80068de <memp_free_pool+0x16>
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <memp_free_pool+0x1c>)
 80068cc:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 80068d0:	4905      	ldr	r1, [pc, #20]	; (80068e8 <memp_free_pool+0x20>)
 80068d2:	4806      	ldr	r0, [pc, #24]	; (80068ec <memp_free_pool+0x24>)
 80068d4:	f004 bd98 	b.w	800b408 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 80068d8:	3008      	adds	r0, #8
 80068da:	f7ff bf87 	b.w	80067ec <do_memp_free_pool.isra.1>
  if ((desc == NULL) || (mem == NULL)) {
 80068de:	2900      	cmp	r1, #0
 80068e0:	d1fa      	bne.n	80068d8 <memp_free_pool+0x10>
}
 80068e2:	4770      	bx	lr
 80068e4:	0800e238 	.word	0x0800e238
 80068e8:	0800e330 	.word	0x0800e330
 80068ec:	0800db1d 	.word	0x0800db1d

080068f0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80068f0:	2808      	cmp	r0, #8
 80068f2:	d906      	bls.n	8006902 <memp_free+0x12>
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <memp_free+0x24>)
 80068f6:	f240 12db 	movw	r2, #475	; 0x1db
 80068fa:	4907      	ldr	r1, [pc, #28]	; (8006918 <memp_free+0x28>)
 80068fc:	4807      	ldr	r0, [pc, #28]	; (800691c <memp_free+0x2c>)
 80068fe:	f004 bd83 	b.w	800b408 <iprintf>

  if (mem == NULL) {
 8006902:	b129      	cbz	r1, 8006910 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <memp_free+0x30>)
 8006906:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800690a:	3008      	adds	r0, #8
 800690c:	f7ff bf6e 	b.w	80067ec <do_memp_free_pool.isra.1>
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	0800e238 	.word	0x0800e238
 8006918:	0800e2f8 	.word	0x0800e2f8
 800691c:	0800db1d 	.word	0x0800db1d
 8006920:	0800e344 	.word	0x0800e344

08006924 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006924:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
netif_issue_reports(struct netif* netif, u8_t report_type)
 8006928:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800692a:	071b      	lsls	r3, r3, #28
 800692c:	d502      	bpl.n	8006934 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800692e:	3104      	adds	r1, #4
 8006930:	f7fe bd84 	b.w	800543c <etharp_request>
 8006934:	4770      	bx	lr

08006936 <netif_init>:
{
 8006936:	4770      	bx	lr

08006938 <netif_set_ipaddr>:
{
 8006938:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800693a:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800693c:	460c      	mov	r4, r1
 800693e:	b1b9      	cbz	r1, 8006970 <netif_set_ipaddr+0x38>
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006944:	9a01      	ldr	r2, [sp, #4]
 8006946:	686b      	ldr	r3, [r5, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d00f      	beq.n	800696c <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800694c:	1d2e      	adds	r6, r5, #4
 800694e:	a901      	add	r1, sp, #4
 8006950:	4630      	mov	r0, r6
 8006952:	f001 fb23 	bl	8007f9c <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006956:	a901      	add	r1, sp, #4
 8006958:	4630      	mov	r0, r6
 800695a:	f003 fe7f 	bl	800a65c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800695e:	b104      	cbz	r4, 8006962 <netif_set_ipaddr+0x2a>
 8006960:	6824      	ldr	r4, [r4, #0]
 8006962:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006964:	b114      	cbz	r4, 800696c <netif_set_ipaddr+0x34>
 8006966:	4628      	mov	r0, r5
 8006968:	f7ff ffdc 	bl	8006924 <netif_issue_reports.part.0>
}
 800696c:	b002      	add	sp, #8
 800696e:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006970:	4b01      	ldr	r3, [pc, #4]	; (8006978 <netif_set_ipaddr+0x40>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	e7e5      	b.n	8006942 <netif_set_ipaddr+0xa>
 8006976:	bf00      	nop
 8006978:	0800deb8 	.word	0x0800deb8

0800697c <netif_set_addr>:
{
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4606      	mov	r6, r0
 8006980:	4615      	mov	r5, r2
 8006982:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8006984:	b109      	cbz	r1, 800698a <netif_set_addr+0xe>
 8006986:	680b      	ldr	r3, [r1, #0]
 8006988:	b94b      	cbnz	r3, 800699e <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800698a:	4630      	mov	r0, r6
 800698c:	f7ff ffd4 	bl	8006938 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006990:	b105      	cbz	r5, 8006994 <netif_set_addr+0x18>
 8006992:	682d      	ldr	r5, [r5, #0]
 8006994:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006996:	b104      	cbz	r4, 800699a <netif_set_addr+0x1e>
 8006998:	6824      	ldr	r4, [r4, #0]
 800699a:	60f4      	str	r4, [r6, #12]
 800699c:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800699e:	b102      	cbz	r2, 80069a2 <netif_set_addr+0x26>
 80069a0:	6815      	ldr	r5, [r2, #0]
 80069a2:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80069a4:	b104      	cbz	r4, 80069a8 <netif_set_addr+0x2c>
 80069a6:	6824      	ldr	r4, [r4, #0]
 80069a8:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 80069aa:	4630      	mov	r0, r6
}
 80069ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80069b0:	f7ff bfc2 	b.w	8006938 <netif_set_ipaddr>

080069b4 <netif_add>:
{
 80069b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069ba:	4604      	mov	r4, r0
 80069bc:	460f      	mov	r7, r1
 80069be:	4690      	mov	r8, r2
 80069c0:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 80069c2:	b92e      	cbnz	r6, 80069d0 <netif_add+0x1c>
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <netif_add+0x68>)
 80069c6:	22fb      	movs	r2, #251	; 0xfb
 80069c8:	4915      	ldr	r1, [pc, #84]	; (8006a20 <netif_add+0x6c>)
 80069ca:	4816      	ldr	r0, [pc, #88]	; (8006a24 <netif_add+0x70>)
 80069cc:	f004 fd1c 	bl	800b408 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80069d0:	2303      	movs	r3, #3
  netif->num = netif_num++;
 80069d2:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80069d4:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 80069d6:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80069d8:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80069dc:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80069de:	6065      	str	r5, [r4, #4]
  netif->state = state;
 80069e0:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80069e2:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 80069e4:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 80069e6:	1c59      	adds	r1, r3, #1
 80069e8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80069ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80069ee:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80069f0:	4642      	mov	r2, r8
  netif->input = input;
 80069f2:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80069f4:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 80069f6:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80069f8:	464b      	mov	r3, r9
  netif->flags = 0;
 80069fa:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 80069fe:	f7ff ffbd 	bl	800697c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8006a02:	4620      	mov	r0, r4
 8006a04:	47b0      	blx	r6
 8006a06:	b930      	cbnz	r0, 8006a16 <netif_add+0x62>
  netif->next = netif_list;
 8006a08:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <netif_add+0x78>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8006a0e:	601c      	str	r4, [r3, #0]
}
 8006a10:	4620      	mov	r0, r4
 8006a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006a16:	462c      	mov	r4, r5
 8006a18:	e7fa      	b.n	8006a10 <netif_add+0x5c>
 8006a1a:	bf00      	nop
 8006a1c:	0800e368 	.word	0x0800e368
 8006a20:	0800e399 	.word	0x0800e399
 8006a24:	0800db1d 	.word	0x0800db1d
 8006a28:	24000618 	.word	0x24000618
 8006a2c:	24003b90 	.word	0x24003b90

08006a30 <netif_set_default>:
  netif_default = netif;
 8006a30:	4b01      	ldr	r3, [pc, #4]	; (8006a38 <netif_set_default+0x8>)
 8006a32:	6018      	str	r0, [r3, #0]
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	24003b94 	.word	0x24003b94

08006a3c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006a3c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006a40:	07d1      	lsls	r1, r2, #31
 8006a42:	d409      	bmi.n	8006a58 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8006a44:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006a48:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8006a4a:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006a4e:	d503      	bpl.n	8006a58 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006a50:	6843      	ldr	r3, [r0, #4]
 8006a52:	b10b      	cbz	r3, 8006a58 <netif_set_up+0x1c>
 8006a54:	f7ff bf66 	b.w	8006924 <netif_issue_reports.part.0>
 8006a58:	4770      	bx	lr

08006a5a <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8006a5a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006a5e:	07d9      	lsls	r1, r3, #31
 8006a60:	d507      	bpl.n	8006a72 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8006a62:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006a66:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8006a68:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006a6c:	d501      	bpl.n	8006a72 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8006a6e:	f7fe bc33 	b.w	80052d8 <etharp_cleanup_netif>
 8006a72:	4770      	bx	lr

08006a74 <netif_set_link_up>:
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006a74:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006a78:	0751      	lsls	r1, r2, #29
 8006a7a:	d409      	bmi.n	8006a90 <netif_set_link_up+0x1c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006a7c:	f042 0104 	orr.w	r1, r2, #4

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8006a80:	07d2      	lsls	r2, r2, #31
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006a82:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_UP) {
 8006a86:	d503      	bpl.n	8006a90 <netif_set_link_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006a88:	6843      	ldr	r3, [r0, #4]
 8006a8a:	b10b      	cbz	r3, 8006a90 <netif_set_link_up+0x1c>
 8006a8c:	f7ff bf4a 	b.w	8006924 <netif_issue_reports.part.0>
 8006a90:	4770      	bx	lr

08006a92 <netif_set_link_down>:
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006a92:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006a96:	075a      	lsls	r2, r3, #29
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8006a98:	bf44      	itt	mi
 8006a9a:	f023 0304 	bicmi.w	r3, r3, #4
 8006a9e:	f880 302b 	strbmi.w	r3, [r0, #43]	; 0x2b
 8006aa2:	4770      	bx	lr

08006aa4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006aa4:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d12f      	bne.n	8006b0c <pbuf_header_impl+0x68>
 8006aac:	4b1f      	ldr	r3, [pc, #124]	; (8006b2c <pbuf_header_impl+0x88>)
 8006aae:	f240 223f 	movw	r2, #575	; 0x23f
 8006ab2:	491f      	ldr	r1, [pc, #124]	; (8006b30 <pbuf_header_impl+0x8c>)
 8006ab4:	481f      	ldr	r0, [pc, #124]	; (8006b34 <pbuf_header_impl+0x90>)
 8006ab6:	f004 fca7 	bl	800b408 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006aba:	2000      	movs	r0, #0
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8006abe:	b288      	uxth	r0, r1
  type = p->type;
 8006ac0:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 8006ac2:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006ac4:	b10d      	cbz	r5, 8006aca <pbuf_header_impl+0x26>
 8006ac6:	2d03      	cmp	r5, #3
 8006ac8:	d106      	bne.n	8006ad8 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006aca:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006acc:	f104 0210 	add.w	r2, r4, #16
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d20a      	bcs.n	8006aea <pbuf_header_impl+0x46>
      return 1;
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006ad8:	3d01      	subs	r5, #1
 8006ada:	2d01      	cmp	r5, #1
 8006adc:	d811      	bhi.n	8006b02 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006ade:	2900      	cmp	r1, #0
 8006ae0:	da0c      	bge.n	8006afc <pbuf_header_impl+0x58>
 8006ae2:	8962      	ldrh	r2, [r4, #10]
 8006ae4:	4282      	cmp	r2, r0
 8006ae6:	d3f5      	bcc.n	8006ad4 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006ae8:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 8006aea:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 8006aec:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006aee:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8006af0:	8963      	ldrh	r3, [r4, #10]
 8006af2:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 8006af4:	4401      	add	r1, r0
  p->len += header_size_increment;
 8006af6:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8006af8:	8121      	strh	r1, [r4, #8]
 8006afa:	e7de      	b.n	8006aba <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d1f3      	bne.n	8006ae8 <pbuf_header_impl+0x44>
 8006b00:	e7e8      	b.n	8006ad4 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <pbuf_header_impl+0x88>)
 8006b04:	f240 2277 	movw	r2, #631	; 0x277
 8006b08:	490b      	ldr	r1, [pc, #44]	; (8006b38 <pbuf_header_impl+0x94>)
 8006b0a:	e00b      	b.n	8006b24 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d0d4      	beq.n	8006aba <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8006b10:	dad5      	bge.n	8006abe <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8006b12:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006b14:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8006b16:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006b18:	4283      	cmp	r3, r0
 8006b1a:	d2d1      	bcs.n	8006ac0 <pbuf_header_impl+0x1c>
 8006b1c:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <pbuf_header_impl+0x88>)
 8006b1e:	f240 2247 	movw	r2, #583	; 0x247
 8006b22:	4906      	ldr	r1, [pc, #24]	; (8006b3c <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 8006b24:	4803      	ldr	r0, [pc, #12]	; (8006b34 <pbuf_header_impl+0x90>)
 8006b26:	f004 fc6f 	bl	800b408 <iprintf>
 8006b2a:	e7d3      	b.n	8006ad4 <pbuf_header_impl+0x30>
 8006b2c:	0800e615 	.word	0x0800e615
 8006b30:	0800e67f 	.word	0x0800e67f
 8006b34:	0800db1d 	.word	0x0800db1d
 8006b38:	0800e663 	.word	0x0800e663
 8006b3c:	0800e645 	.word	0x0800e645

08006b40 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <pbuf_free_ooseq+0x24>)
 8006b42:	2200      	movs	r2, #0
{
 8006b44:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006b46:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <pbuf_free_ooseq+0x28>)
 8006b4a:	681c      	ldr	r4, [r3, #0]
 8006b4c:	b904      	cbnz	r4, 8006b50 <pbuf_free_ooseq+0x10>
 8006b4e:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8006b50:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006b52:	b120      	cbz	r0, 8006b5e <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 8006b54:	f000 fc9a 	bl	800748c <tcp_segs_free>
      pcb->ooseq = NULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8006b5c:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b5e:	68e4      	ldr	r4, [r4, #12]
 8006b60:	e7f4      	b.n	8006b4c <pbuf_free_ooseq+0xc>
 8006b62:	bf00      	nop
 8006b64:	24003b98 	.word	0x24003b98
 8006b68:	24003ba0 	.word	0x24003ba0

08006b6c <pbuf_alloced_custom>:
{
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8006b70:	2804      	cmp	r0, #4
 8006b72:	d81e      	bhi.n	8006bb2 <pbuf_alloced_custom+0x46>
 8006b74:	e8df f000 	tbb	[pc, r0]
 8006b78:	1b280326 	.word	0x1b280326
 8006b7c:	1b          	.byte	0x1b
 8006b7d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006b7e:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006b80:	3403      	adds	r4, #3
 8006b82:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8006b86:	f024 0403 	bic.w	r4, r4, #3
 8006b8a:	190e      	adds	r6, r1, r4
 8006b8c:	4286      	cmp	r6, r0
 8006b8e:	f04f 0000 	mov.w	r0, #0
 8006b92:	d80b      	bhi.n	8006bac <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8006b94:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8006b96:	b1cd      	cbz	r5, 8006bcc <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006b98:	442c      	add	r4, r5
 8006b9a:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006b9c:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8006b9e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006ba0:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 8006ba2:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006ba4:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 8006ba6:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 8006ba8:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8006baa:	81da      	strh	r2, [r3, #14]
}
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8006bae:	2400      	movs	r4, #0
    break;
 8006bb0:	e7e6      	b.n	8006b80 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <pbuf_alloced_custom+0x64>)
 8006bb4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006bb8:	4906      	ldr	r1, [pc, #24]	; (8006bd4 <pbuf_alloced_custom+0x68>)
 8006bba:	4807      	ldr	r0, [pc, #28]	; (8006bd8 <pbuf_alloced_custom+0x6c>)
 8006bbc:	f004 fc24 	bl	800b408 <iprintf>
    return NULL;
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006bc4:	2436      	movs	r4, #54	; 0x36
 8006bc6:	e7db      	b.n	8006b80 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006bc8:	240e      	movs	r4, #14
 8006bca:	e7d9      	b.n	8006b80 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8006bcc:	605d      	str	r5, [r3, #4]
 8006bce:	e7e5      	b.n	8006b9c <pbuf_alloced_custom+0x30>
 8006bd0:	0800e615 	.word	0x0800e615
 8006bd4:	0800e458 	.word	0x0800e458
 8006bd8:	0800db1d 	.word	0x0800db1d

08006bdc <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f7ff bf61 	b.w	8006aa4 <pbuf_header_impl>

08006be2 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8006be2:	2201      	movs	r2, #1
 8006be4:	f7ff bf5e 	b.w	8006aa4 <pbuf_header_impl>

08006be8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006bec:	4604      	mov	r4, r0
 8006bee:	b950      	cbnz	r0, 8006c06 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006bf0:	4626      	mov	r6, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <pbuf_free+0xac>)
 8006bf4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006bf8:	4927      	ldr	r1, [pc, #156]	; (8006c98 <pbuf_free+0xb0>)
 8006bfa:	4828      	ldr	r0, [pc, #160]	; (8006c9c <pbuf_free+0xb4>)
 8006bfc:	f004 fc04 	bl	800b408 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006c00:	4630      	mov	r0, r6
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006c06:	7b03      	ldrb	r3, [r0, #12]
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d906      	bls.n	8006c1a <pbuf_free+0x32>
 8006c0c:	4b21      	ldr	r3, [pc, #132]	; (8006c94 <pbuf_free+0xac>)
 8006c0e:	f240 22de 	movw	r2, #734	; 0x2de
 8006c12:	4923      	ldr	r1, [pc, #140]	; (8006ca0 <pbuf_free+0xb8>)
 8006c14:	4821      	ldr	r0, [pc, #132]	; (8006c9c <pbuf_free+0xb4>)
 8006c16:	f004 fbf7 	bl	800b408 <iprintf>
{
 8006c1a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006c1c:	4f1d      	ldr	r7, [pc, #116]	; (8006c94 <pbuf_free+0xac>)
 8006c1e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8006ca8 <pbuf_free+0xc0>
 8006c22:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006c9c <pbuf_free+0xb4>
 8006c26:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8006c28:	2c00      	cmp	r4, #0
 8006c2a:	d0e9      	beq.n	8006c00 <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006c2c:	89e3      	ldrh	r3, [r4, #14]
 8006c2e:	b933      	cbnz	r3, 8006c3e <pbuf_free+0x56>
 8006c30:	463b      	mov	r3, r7
 8006c32:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006c36:	4649      	mov	r1, r9
 8006c38:	4640      	mov	r0, r8
 8006c3a:	f004 fbe5 	bl	800b408 <iprintf>
    ref = --(p->ref);
 8006c3e:	89e3      	ldrh	r3, [r4, #14]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1da      	bne.n	8006c00 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006c4a:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8006c4c:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006c4e:	079b      	lsls	r3, r3, #30
 8006c50:	d50e      	bpl.n	8006c70 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b933      	cbnz	r3, 8006c64 <pbuf_free+0x7c>
 8006c56:	463b      	mov	r3, r7
 8006c58:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006c5c:	4911      	ldr	r1, [pc, #68]	; (8006ca4 <pbuf_free+0xbc>)
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f004 fbd2 	bl	800b408 <iprintf>
        pc->custom_free_function(p);
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	4620      	mov	r0, r4
 8006c68:	4798      	blx	r3
 8006c6a:	3501      	adds	r5, #1
      p = q;
 8006c6c:	4634      	mov	r4, r6
 8006c6e:	e7da      	b.n	8006c26 <pbuf_free+0x3e>
      type = p->type;
 8006c70:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d104      	bne.n	8006c80 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8006c76:	4621      	mov	r1, r4
 8006c78:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8006c7a:	f7ff fe39 	bl	80068f0 <memp_free>
 8006c7e:	e7f4      	b.n	8006c6a <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006c80:	3b01      	subs	r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d802      	bhi.n	8006c8c <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8006c86:	4621      	mov	r1, r4
 8006c88:	2007      	movs	r0, #7
 8006c8a:	e7f6      	b.n	8006c7a <pbuf_free+0x92>
          mem_free(p);
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff fbe3 	bl	8006458 <mem_free>
 8006c92:	e7ea      	b.n	8006c6a <pbuf_free+0x82>
 8006c94:	0800e615 	.word	0x0800e615
 8006c98:	0800e67f 	.word	0x0800e67f
 8006c9c:	0800db1d 	.word	0x0800db1d
 8006ca0:	0800e5c9 	.word	0x0800e5c9
 8006ca4:	0800e5f4 	.word	0x0800e5f4
 8006ca8:	0800e5de 	.word	0x0800e5de

08006cac <pbuf_alloc>:
{
 8006cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	4617      	mov	r7, r2
  switch (layer) {
 8006cb4:	2804      	cmp	r0, #4
 8006cb6:	d80e      	bhi.n	8006cd6 <pbuf_alloc+0x2a>
 8006cb8:	e8df f000 	tbb	[pc, r0]
 8006cbc:	0b170315 	.word	0x0b170315
 8006cc0:	0b          	.byte	0x0b
 8006cc1:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006cc2:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8006cc4:	2f03      	cmp	r7, #3
 8006cc6:	f200 80bb 	bhi.w	8006e40 <pbuf_alloc+0x194>
 8006cca:	e8df f007 	tbb	[pc, r7]
 8006cce:	ac91      	.short	0xac91
 8006cd0:	10ac      	.short	0x10ac
    offset = 0;
 8006cd2:	2500      	movs	r5, #0
    break;
 8006cd4:	e7f6      	b.n	8006cc4 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8006cd6:	4b5d      	ldr	r3, [pc, #372]	; (8006e4c <pbuf_alloc+0x1a0>)
 8006cd8:	f44f 728b 	mov.w	r2, #278	; 0x116
 8006cdc:	495c      	ldr	r1, [pc, #368]	; (8006e50 <pbuf_alloc+0x1a4>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006cde:	485d      	ldr	r0, [pc, #372]	; (8006e54 <pbuf_alloc+0x1a8>)
 8006ce0:	f004 fb92 	bl	800b408 <iprintf>
 8006ce4:	e04a      	b.n	8006d7c <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006ce6:	2536      	movs	r5, #54	; 0x36
 8006ce8:	e7ec      	b.n	8006cc4 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006cea:	250e      	movs	r5, #14
 8006cec:	e7ea      	b.n	8006cc4 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006cee:	2008      	movs	r0, #8
 8006cf0:	f7ff fdce 	bl	8006890 <memp_malloc>
    if (p == NULL) {
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	b928      	cbnz	r0, 8006d04 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	4b57      	ldr	r3, [pc, #348]	; (8006e58 <pbuf_alloc+0x1ac>)
 8006cfc:	701a      	strb	r2, [r3, #0]
}
 8006cfe:	4620      	mov	r0, r4
 8006d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8006d04:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006d06:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 8006d0a:	8106      	strh	r6, [r0, #8]
    p->type = type;
 8006d0c:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006d12:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006d14:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006d16:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006d18:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006d1c:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006d20:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006d24:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006d26:	42b5      	cmp	r5, r6
 8006d28:	bf28      	it	cs
 8006d2a:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006d2c:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006d2e:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006d30:	429f      	cmp	r7, r3
 8006d32:	d206      	bcs.n	8006d42 <pbuf_alloc+0x96>
 8006d34:	4b45      	ldr	r3, [pc, #276]	; (8006e4c <pbuf_alloc+0x1a0>)
 8006d36:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006d3a:	4948      	ldr	r1, [pc, #288]	; (8006e5c <pbuf_alloc+0x1b0>)
 8006d3c:	4845      	ldr	r0, [pc, #276]	; (8006e54 <pbuf_alloc+0x1a8>)
 8006d3e:	f004 fb63 	bl	800b408 <iprintf>
    p->ref = 1;
 8006d42:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8006d44:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006d46:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8006e4c <pbuf_alloc+0x1a0>
    p->ref = 1;
 8006d4a:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8006d4c:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006d4e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8006e68 <pbuf_alloc+0x1bc>
    rem_len = length - p->len;
 8006d52:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006d54:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8006e54 <pbuf_alloc+0x1a8>
    while (rem_len > 0) {
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	dc04      	bgt.n	8006d66 <pbuf_alloc+0xba>
  p->ref = 1;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	7363      	strb	r3, [r4, #13]
  return p;
 8006d64:	e7cb      	b.n	8006cfe <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006d66:	2008      	movs	r0, #8
 8006d68:	f7ff fd92 	bl	8006890 <memp_malloc>
      if (q == NULL) {
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	b938      	cbnz	r0, 8006d80 <pbuf_alloc+0xd4>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006d70:	2201      	movs	r2, #1
 8006d72:	4b39      	ldr	r3, [pc, #228]	; (8006e58 <pbuf_alloc+0x1ac>)
        pbuf_free(p);
 8006d74:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006d76:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8006d78:	f7ff ff36 	bl	8006be8 <pbuf_free>
    return NULL;
 8006d7c:	2400      	movs	r4, #0
 8006d7e:	e7be      	b.n	8006cfe <pbuf_alloc+0x52>
      q->type = type;
 8006d80:	2303      	movs	r3, #3
 8006d82:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8006d88:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
      r->next = q;
 8006d8e:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006d92:	429e      	cmp	r6, r3
 8006d94:	d106      	bne.n	8006da4 <pbuf_alloc+0xf8>
 8006d96:	4643      	mov	r3, r8
 8006d98:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006d9c:	4651      	mov	r1, sl
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f004 fb32 	bl	800b408 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006da4:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006da6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8006daa:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006dac:	bf28      	it	cs
 8006dae:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006db2:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006db4:	f105 0310 	add.w	r3, r5, #16
 8006db8:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006dba:	079b      	lsls	r3, r3, #30
 8006dbc:	d006      	beq.n	8006dcc <pbuf_alloc+0x120>
 8006dbe:	4643      	mov	r3, r8
 8006dc0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006dc4:	4926      	ldr	r1, [pc, #152]	; (8006e60 <pbuf_alloc+0x1b4>)
 8006dc6:	4648      	mov	r0, r9
 8006dc8:	f004 fb1e 	bl	800b408 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006dcc:	8962      	ldrh	r2, [r4, #10]
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	429f      	cmp	r7, r3
 8006dd4:	d206      	bcs.n	8006de4 <pbuf_alloc+0x138>
 8006dd6:	4643      	mov	r3, r8
 8006dd8:	f240 1255 	movw	r2, #341	; 0x155
 8006ddc:	491f      	ldr	r1, [pc, #124]	; (8006e5c <pbuf_alloc+0x1b0>)
 8006dde:	4648      	mov	r0, r9
 8006de0:	f004 fb12 	bl	800b408 <iprintf>
      q->ref = 1;
 8006de4:	2301      	movs	r3, #1
      rem_len -= q->len;
 8006de6:	46ab      	mov	fp, r5
      q->ref = 1;
 8006de8:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8006dea:	896b      	ldrh	r3, [r5, #10]
 8006dec:	1af6      	subs	r6, r6, r3
 8006dee:	e7b3      	b.n	8006d58 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006df0:	f105 0013 	add.w	r0, r5, #19
 8006df4:	1cf3      	adds	r3, r6, #3
 8006df6:	f020 0003 	bic.w	r0, r0, #3
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	4418      	add	r0, r3
 8006e00:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006e02:	4298      	cmp	r0, r3
 8006e04:	d3ba      	bcc.n	8006d7c <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006e06:	f7ff fc49 	bl	800669c <mem_malloc>
    if (p == NULL) {
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d0b5      	beq.n	8006d7c <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006e10:	4405      	add	r5, r0
    p->next = NULL;
 8006e12:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8006e14:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006e16:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 8006e18:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8006e1a:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006e1c:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 8006e20:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006e22:	6045      	str	r5, [r0, #4]
 8006e24:	e79a      	b.n	8006d5c <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006e26:	2007      	movs	r0, #7
 8006e28:	f7ff fd32 	bl	8006890 <memp_malloc>
    if (p == NULL) {
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d0a4      	beq.n	8006d7c <pbuf_alloc+0xd0>
    p->payload = NULL;
 8006e32:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8006e34:	8106      	strh	r6, [r0, #8]
 8006e36:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 8006e38:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8006e3a:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006e3c:	7307      	strb	r7, [r0, #12]
    break;
 8006e3e:	e78d      	b.n	8006d5c <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <pbuf_alloc+0x1a0>)
 8006e42:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006e46:	4907      	ldr	r1, [pc, #28]	; (8006e64 <pbuf_alloc+0x1b8>)
 8006e48:	e749      	b.n	8006cde <pbuf_alloc+0x32>
 8006e4a:	bf00      	nop
 8006e4c:	0800e615 	.word	0x0800e615
 8006e50:	0800e3b0 	.word	0x0800e3b0
 8006e54:	0800db1d 	.word	0x0800db1d
 8006e58:	24003b98 	.word	0x24003b98
 8006e5c:	0800e3cb 	.word	0x0800e3cb
 8006e60:	0800e410 	.word	0x0800e410
 8006e64:	0800e43d 	.word	0x0800e43d
 8006e68:	0800e3fc 	.word	0x0800e3fc

08006e6c <pbuf_realloc>:
{
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006e72:	4604      	mov	r4, r0
 8006e74:	b930      	cbnz	r0, 8006e84 <pbuf_realloc+0x18>
 8006e76:	4b2e      	ldr	r3, [pc, #184]	; (8006f30 <pbuf_realloc+0xc4>)
 8006e78:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006e7c:	492d      	ldr	r1, [pc, #180]	; (8006f34 <pbuf_realloc+0xc8>)
 8006e7e:	482e      	ldr	r0, [pc, #184]	; (8006f38 <pbuf_realloc+0xcc>)
 8006e80:	f004 fac2 	bl	800b408 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006e84:	7b23      	ldrb	r3, [r4, #12]
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d906      	bls.n	8006e98 <pbuf_realloc+0x2c>
 8006e8a:	4b29      	ldr	r3, [pc, #164]	; (8006f30 <pbuf_realloc+0xc4>)
 8006e8c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006e90:	492a      	ldr	r1, [pc, #168]	; (8006f3c <pbuf_realloc+0xd0>)
 8006e92:	4829      	ldr	r0, [pc, #164]	; (8006f38 <pbuf_realloc+0xcc>)
 8006e94:	f004 fab8 	bl	800b408 <iprintf>
  if (new_len >= p->tot_len) {
 8006e98:	8926      	ldrh	r6, [r4, #8]
 8006e9a:	42ae      	cmp	r6, r5
 8006e9c:	d945      	bls.n	8006f2a <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 8006e9e:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006ea0:	4f23      	ldr	r7, [pc, #140]	; (8006f30 <pbuf_realloc+0xc4>)
 8006ea2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006f48 <pbuf_realloc+0xdc>
 8006ea6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006f38 <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 8006eaa:	8963      	ldrh	r3, [r4, #10]
 8006eac:	429d      	cmp	r5, r3
 8006eae:	d819      	bhi.n	8006ee4 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006eb0:	7b22      	ldrb	r2, [r4, #12]
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	d131      	bne.n	8006f1a <pbuf_realloc+0xae>
 8006eb6:	429d      	cmp	r5, r3
 8006eb8:	d02f      	beq.n	8006f1a <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006eba:	7b63      	ldrb	r3, [r4, #13]
 8006ebc:	079b      	lsls	r3, r3, #30
 8006ebe:	d42c      	bmi.n	8006f1a <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	1b09      	subs	r1, r1, r4
 8006ec6:	4429      	add	r1, r5
 8006ec8:	b289      	uxth	r1, r1
 8006eca:	f7ff fb6f 	bl	80065ac <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006ece:	4604      	mov	r4, r0
 8006ed0:	bb18      	cbnz	r0, 8006f1a <pbuf_realloc+0xae>
 8006ed2:	4b17      	ldr	r3, [pc, #92]	; (8006f30 <pbuf_realloc+0xc4>)
 8006ed4:	f240 221d 	movw	r2, #541	; 0x21d
 8006ed8:	4919      	ldr	r1, [pc, #100]	; (8006f40 <pbuf_realloc+0xd4>)
 8006eda:	4817      	ldr	r0, [pc, #92]	; (8006f38 <pbuf_realloc+0xcc>)
 8006edc:	f004 fa94 	bl	800b408 <iprintf>
  q->len = rem_len;
 8006ee0:	8164      	strh	r4, [r4, #10]
 8006ee2:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8006ee4:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006ee6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006eea:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8006eec:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006eee:	dd06      	ble.n	8006efe <pbuf_realloc+0x92>
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	f240 220b 	movw	r2, #523	; 0x20b
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	4640      	mov	r0, r8
 8006efa:	f004 fa85 	bl	800b408 <iprintf>
    q->tot_len += (u16_t)grow;
 8006efe:	8923      	ldrh	r3, [r4, #8]
 8006f00:	4433      	add	r3, r6
 8006f02:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8006f04:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	d1cf      	bne.n	8006eaa <pbuf_realloc+0x3e>
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	f240 220f 	movw	r2, #527	; 0x20f
 8006f10:	490c      	ldr	r1, [pc, #48]	; (8006f44 <pbuf_realloc+0xd8>)
 8006f12:	4640      	mov	r0, r8
 8006f14:	f004 fa78 	bl	800b408 <iprintf>
 8006f18:	e7c7      	b.n	8006eaa <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8006f1a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8006f1c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006f1e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006f20:	b108      	cbz	r0, 8006f26 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8006f22:	f7ff fe61 	bl	8006be8 <pbuf_free>
  q->next = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2e:	bf00      	nop
 8006f30:	0800e615 	.word	0x0800e615
 8006f34:	0800e671 	.word	0x0800e671
 8006f38:	0800db1d 	.word	0x0800db1d
 8006f3c:	0800e689 	.word	0x0800e689
 8006f40:	0800e6cd 	.word	0x0800e6cd
 8006f44:	0800e6b5 	.word	0x0800e6b5
 8006f48:	0800e6a4 	.word	0x0800e6a4

08006f4c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006f4c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8006f4e:	2200      	movs	r2, #0
 8006f50:	b290      	uxth	r0, r2
 8006f52:	3201      	adds	r2, #1
 8006f54:	b903      	cbnz	r3, 8006f58 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8006f56:	4770      	bx	lr
    p = p->next;
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	e7f9      	b.n	8006f50 <pbuf_clen+0x4>

08006f5c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8006f5c:	b158      	cbz	r0, 8006f76 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 8006f5e:	89c3      	ldrh	r3, [r0, #14]
 8006f60:	3301      	adds	r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006f66:	b933      	cbnz	r3, 8006f76 <pbuf_ref+0x1a>
 8006f68:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <pbuf_ref+0x1c>)
 8006f6a:	f240 3239 	movw	r2, #825	; 0x339
 8006f6e:	4903      	ldr	r1, [pc, #12]	; (8006f7c <pbuf_ref+0x20>)
 8006f70:	4803      	ldr	r0, [pc, #12]	; (8006f80 <pbuf_ref+0x24>)
 8006f72:	f004 ba49 	b.w	800b408 <iprintf>
 8006f76:	4770      	bx	lr
 8006f78:	0800e615 	.word	0x0800e615
 8006f7c:	0800e6e9 	.word	0x0800e6e9
 8006f80:	0800db1d 	.word	0x0800db1d

08006f84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f88:	4604      	mov	r4, r0
 8006f8a:	b100      	cbz	r0, 8006f8e <pbuf_cat+0xa>
 8006f8c:	b969      	cbnz	r1, 8006faa <pbuf_cat+0x26>
 8006f8e:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <pbuf_cat+0x60>)
 8006f90:	f240 324d 	movw	r2, #845	; 0x34d
 8006f94:	4914      	ldr	r1, [pc, #80]	; (8006fe8 <pbuf_cat+0x64>)
 8006f96:	4815      	ldr	r0, [pc, #84]	; (8006fec <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f9c:	f004 ba34 	b.w	800b408 <iprintf>
    p->tot_len += t->tot_len;
 8006fa0:	8923      	ldrh	r3, [r4, #8]
 8006fa2:	8929      	ldrh	r1, [r5, #8]
 8006fa4:	440b      	add	r3, r1
 8006fa6:	8123      	strh	r3, [r4, #8]
 8006fa8:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	d1f7      	bne.n	8006fa0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006fb0:	8922      	ldrh	r2, [r4, #8]
 8006fb2:	8963      	ldrh	r3, [r4, #10]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d006      	beq.n	8006fc6 <pbuf_cat+0x42>
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <pbuf_cat+0x60>)
 8006fba:	f240 3255 	movw	r2, #853	; 0x355
 8006fbe:	490c      	ldr	r1, [pc, #48]	; (8006ff0 <pbuf_cat+0x6c>)
 8006fc0:	480a      	ldr	r0, [pc, #40]	; (8006fec <pbuf_cat+0x68>)
 8006fc2:	f004 fa21 	bl	800b408 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	b133      	cbz	r3, 8006fd8 <pbuf_cat+0x54>
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <pbuf_cat+0x60>)
 8006fcc:	f240 3256 	movw	r2, #854	; 0x356
 8006fd0:	4908      	ldr	r1, [pc, #32]	; (8006ff4 <pbuf_cat+0x70>)
 8006fd2:	4806      	ldr	r0, [pc, #24]	; (8006fec <pbuf_cat+0x68>)
 8006fd4:	f004 fa18 	bl	800b408 <iprintf>
  p->tot_len += t->tot_len;
 8006fd8:	892a      	ldrh	r2, [r5, #8]
 8006fda:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8006fdc:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8006fde:	4413      	add	r3, r2
 8006fe0:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	0800e615 	.word	0x0800e615
 8006fe8:	0800e47c 	.word	0x0800e47c
 8006fec:	0800db1d 	.word	0x0800db1d
 8006ff0:	0800e4b1 	.word	0x0800e4b1
 8006ff4:	0800e4de 	.word	0x0800e4de

08006ff8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006ffe:	4605      	mov	r5, r0
 8007000:	b120      	cbz	r0, 800700c <pbuf_copy+0x14>
 8007002:	b119      	cbz	r1, 800700c <pbuf_copy+0x14>
 8007004:	8902      	ldrh	r2, [r0, #8]
 8007006:	890b      	ldrh	r3, [r1, #8]
 8007008:	429a      	cmp	r2, r3
 800700a:	d20a      	bcs.n	8007022 <pbuf_copy+0x2a>
 800700c:	4b38      	ldr	r3, [pc, #224]	; (80070f0 <pbuf_copy+0xf8>)
 800700e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007012:	4938      	ldr	r1, [pc, #224]	; (80070f4 <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007014:	4838      	ldr	r0, [pc, #224]	; (80070f8 <pbuf_copy+0x100>)
 8007016:	f004 f9f7 	bl	800b408 <iprintf>
 800701a:	f06f 000f 	mvn.w	r0, #15
 800701e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007026:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80070f0 <pbuf_copy+0xf8>
 800702a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8007108 <pbuf_copy+0x110>
 800702e:	465f      	mov	r7, fp
 8007030:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80070f8 <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007034:	896e      	ldrh	r6, [r5, #10]
 8007036:	8963      	ldrh	r3, [r4, #10]
 8007038:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800703a:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800703c:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007040:	6861      	ldr	r1, [r4, #4]
 8007042:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007044:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007046:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 8007048:	bfac      	ite	ge
 800704a:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800704c:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 800704e:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007050:	4632      	mov	r2, r6
 8007052:	f004 f9c6 	bl	800b3e2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007056:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8007058:	b2bf      	uxth	r7, r7
    offset_from += len;
 800705a:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800705c:	42bb      	cmp	r3, r7
    offset_from += len;
 800705e:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007062:	d206      	bcs.n	8007072 <pbuf_copy+0x7a>
 8007064:	4643      	mov	r3, r8
 8007066:	f240 32cd 	movw	r2, #973	; 0x3cd
 800706a:	4651      	mov	r1, sl
 800706c:	4648      	mov	r0, r9
 800706e:	f004 f9cb 	bl	800b408 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007072:	8963      	ldrh	r3, [r4, #10]
 8007074:	455b      	cmp	r3, fp
 8007076:	d206      	bcs.n	8007086 <pbuf_copy+0x8e>
 8007078:	4643      	mov	r3, r8
 800707a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800707e:	491f      	ldr	r1, [pc, #124]	; (80070fc <pbuf_copy+0x104>)
 8007080:	4648      	mov	r0, r9
 8007082:	f004 f9c1 	bl	800b408 <iprintf>
    if (offset_from >= p_from->len) {
 8007086:	8963      	ldrh	r3, [r4, #10]
 8007088:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800708a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800708c:	bf9c      	itt	ls
 800708e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8007090:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8007094:	42bb      	cmp	r3, r7
 8007096:	d11e      	bne.n	80070d6 <pbuf_copy+0xde>
      p_to = p_to->next;
 8007098:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800709a:	b9dd      	cbnz	r5, 80070d4 <pbuf_copy+0xdc>
 800709c:	b1bc      	cbz	r4, 80070ce <pbuf_copy+0xd6>
 800709e:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <pbuf_copy+0xf8>)
 80070a0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80070a4:	4916      	ldr	r1, [pc, #88]	; (8007100 <pbuf_copy+0x108>)
 80070a6:	e7b5      	b.n	8007014 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80070a8:	8962      	ldrh	r2, [r4, #10]
 80070aa:	8923      	ldrh	r3, [r4, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d114      	bne.n	80070da <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	b193      	cbz	r3, 80070da <pbuf_copy+0xe2>
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <pbuf_copy+0xf8>)
 80070b6:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070ba:	4912      	ldr	r1, [pc, #72]	; (8007104 <pbuf_copy+0x10c>)
 80070bc:	480e      	ldr	r0, [pc, #56]	; (80070f8 <pbuf_copy+0x100>)
 80070be:	f004 f9a3 	bl	800b408 <iprintf>
 80070c2:	f06f 0005 	mvn.w	r0, #5
 80070c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80070ca:	2c00      	cmp	r4, #0
 80070cc:	d1b2      	bne.n	8007034 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80070ce:	4620      	mov	r0, r4
 80070d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 80070d4:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	d1e6      	bne.n	80070a8 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80070da:	896a      	ldrh	r2, [r5, #10]
 80070dc:	892b      	ldrh	r3, [r5, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d1f3      	bne.n	80070ca <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <pbuf_copy+0xd2>
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <pbuf_copy+0xf8>)
 80070ea:	f240 32e3 	movw	r2, #995	; 0x3e3
 80070ee:	e7e4      	b.n	80070ba <pbuf_copy+0xc2>
 80070f0:	0800e615 	.word	0x0800e615
 80070f4:	0800e4ee 	.word	0x0800e4ee
 80070f8:	0800db1d 	.word	0x0800db1d
 80070fc:	0800e535 	.word	0x0800e535
 8007100:	0800e550 	.word	0x0800e550
 8007104:	0800e55d 	.word	0x0800e55d
 8007108:	0800e51e 	.word	0x0800e51e

0800710c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007110:	460f      	mov	r7, r1
 8007112:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007114:	4606      	mov	r6, r0
 8007116:	b950      	cbnz	r0, 800712e <pbuf_copy_partial+0x22>
 8007118:	4635      	mov	r5, r6
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <pbuf_copy_partial+0x7c>)
 800711c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007120:	491a      	ldr	r1, [pc, #104]	; (800718c <pbuf_copy_partial+0x80>)
 8007122:	481b      	ldr	r0, [pc, #108]	; (8007190 <pbuf_copy_partial+0x84>)
 8007124:	f004 f970 	bl	800b408 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007128:	4628      	mov	r0, r5
 800712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800712e:	b169      	cbz	r1, 800714c <pbuf_copy_partial+0x40>
 8007130:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007132:	f1b8 0f00 	cmp.w	r8, #0
 8007136:	d0f7      	beq.n	8007128 <pbuf_copy_partial+0x1c>
 8007138:	2e00      	cmp	r6, #0
 800713a:	d0f5      	beq.n	8007128 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800713c:	b17b      	cbz	r3, 800715e <pbuf_copy_partial+0x52>
 800713e:	8971      	ldrh	r1, [r6, #10]
 8007140:	428b      	cmp	r3, r1
 8007142:	d30c      	bcc.n	800715e <pbuf_copy_partial+0x52>
      offset -= p->len;
 8007144:	1a5b      	subs	r3, r3, r1
 8007146:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007148:	6836      	ldr	r6, [r6, #0]
 800714a:	e7f2      	b.n	8007132 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800714c:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <pbuf_copy_partial+0x7c>)
 800714e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007152:	4910      	ldr	r1, [pc, #64]	; (8007194 <pbuf_copy_partial+0x88>)
 8007154:	463d      	mov	r5, r7
 8007156:	480e      	ldr	r0, [pc, #56]	; (8007190 <pbuf_copy_partial+0x84>)
 8007158:	f004 f956 	bl	800b408 <iprintf>
 800715c:	e7e4      	b.n	8007128 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 800715e:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007160:	1978      	adds	r0, r7, r5
 8007162:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8007164:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007166:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 8007168:	b2a4      	uxth	r4, r4
 800716a:	4544      	cmp	r4, r8
 800716c:	bf28      	it	cs
 800716e:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007170:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 8007172:	4425      	add	r5, r4
      len -= buf_copy_len;
 8007174:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007178:	f004 f933 	bl	800b3e2 <memcpy>
      copied_total += buf_copy_len;
 800717c:	b2ad      	uxth	r5, r5
      offset = 0;
 800717e:	2300      	movs	r3, #0
      len -= buf_copy_len;
 8007180:	fa1f f884 	uxth.w	r8, r4
 8007184:	e7e0      	b.n	8007148 <pbuf_copy_partial+0x3c>
 8007186:	bf00      	nop
 8007188:	0800e615 	.word	0x0800e615
 800718c:	0800e587 	.word	0x0800e587
 8007190:	0800db1d 	.word	0x0800db1d
 8007194:	0800e5a6 	.word	0x0800e5a6

08007198 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007198:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <tcp_new_port+0x4c>)
 800719a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800719e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a0:	8810      	ldrh	r0, [r2, #0]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80071a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071a6:	4e10      	ldr	r6, [pc, #64]	; (80071e8 <tcp_new_port+0x50>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80071a8:	42a8      	cmp	r0, r5
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80071aa:	f04f 0100 	mov.w	r1, #0
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80071ae:	bf16      	itet	ne
 80071b0:	3001      	addne	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80071b2:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80071b6:	b280      	uxthne	r0, r0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071b8:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 80071bc:	6824      	ldr	r4, [r4, #0]
 80071be:	b924      	cbnz	r4, 80071ca <tcp_new_port+0x32>
 80071c0:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80071c2:	2904      	cmp	r1, #4
 80071c4:	d1f8      	bne.n	80071b8 <tcp_new_port+0x20>
 80071c6:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80071c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 80071ca:	8ae7      	ldrh	r7, [r4, #22]
 80071cc:	4287      	cmp	r7, r0
 80071ce:	d106      	bne.n	80071de <tcp_new_port+0x46>
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e7      	bne.n	80071a8 <tcp_new_port+0x10>
 80071d8:	8010      	strh	r0, [r2, #0]
          return 0;
 80071da:	4618      	mov	r0, r3
 80071dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80071de:	68e4      	ldr	r4, [r4, #12]
 80071e0:	e7ed      	b.n	80071be <tcp_new_port+0x26>
 80071e2:	bf00      	nop
 80071e4:	2400000c 	.word	0x2400000c
 80071e8:	0800e80c 	.word	0x0800e80c

080071ec <tcp_close_shutdown_fin>:
{
 80071ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80071ee:	4604      	mov	r4, r0
 80071f0:	b930      	cbnz	r0, 8007200 <tcp_close_shutdown_fin+0x14>
 80071f2:	4b13      	ldr	r3, [pc, #76]	; (8007240 <tcp_close_shutdown_fin+0x54>)
 80071f4:	f240 124d 	movw	r2, #333	; 0x14d
 80071f8:	4912      	ldr	r1, [pc, #72]	; (8007244 <tcp_close_shutdown_fin+0x58>)
 80071fa:	4813      	ldr	r0, [pc, #76]	; (8007248 <tcp_close_shutdown_fin+0x5c>)
 80071fc:	f004 f904 	bl	800b408 <iprintf>
  switch (pcb->state) {
 8007200:	7d23      	ldrb	r3, [r4, #20]
 8007202:	2b04      	cmp	r3, #4
 8007204:	d003      	beq.n	800720e <tcp_close_shutdown_fin+0x22>
 8007206:	2b07      	cmp	r3, #7
 8007208:	d00c      	beq.n	8007224 <tcp_close_shutdown_fin+0x38>
 800720a:	2b03      	cmp	r3, #3
 800720c:	d108      	bne.n	8007220 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 800720e:	4620      	mov	r0, r4
 8007210:	f002 fd82 	bl	8009d18 <tcp_send_fin>
    if (err == ERR_OK) {
 8007214:	b988      	cbnz	r0, 800723a <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 8007216:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 8007218:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800721a:	4620      	mov	r0, r4
 800721c:	f002 fdd4 	bl	8009dc8 <tcp_output>
 8007220:	2000      	movs	r0, #0
 8007222:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8007224:	4620      	mov	r0, r4
 8007226:	f002 fd77 	bl	8009d18 <tcp_send_fin>
    if (err == ERR_OK) {
 800722a:	b930      	cbnz	r0, 800723a <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 800722c:	2309      	movs	r3, #9
 800722e:	e7f3      	b.n	8007218 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8007230:	7ea3      	ldrb	r3, [r4, #26]
 8007232:	f043 0308 	orr.w	r3, r3, #8
 8007236:	76a3      	strb	r3, [r4, #26]
 8007238:	e7f2      	b.n	8007220 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d0f8      	beq.n	8007230 <tcp_close_shutdown_fin+0x44>
}
 800723e:	bd10      	pop	{r4, pc}
 8007240:	0800e77a 	.word	0x0800e77a
 8007244:	0800e7a9 	.word	0x0800e7a9
 8007248:	0800db1d 	.word	0x0800db1d

0800724c <tcp_init>:
{
 800724c:	4770      	bx	lr
	...

08007250 <tcp_bind>:
{
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8007252:	4d1e      	ldr	r5, [pc, #120]	; (80072cc <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007254:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8007256:	2900      	cmp	r1, #0
 8007258:	bf18      	it	ne
 800725a:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800725c:	b140      	cbz	r0, 8007270 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800725e:	7d03      	ldrb	r3, [r0, #20]
 8007260:	b14b      	cbz	r3, 8007276 <tcp_bind+0x26>
 8007262:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <tcp_bind+0x80>)
 8007264:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007268:	491a      	ldr	r1, [pc, #104]	; (80072d4 <tcp_bind+0x84>)
 800726a:	481b      	ldr	r0, [pc, #108]	; (80072d8 <tcp_bind+0x88>)
 800726c:	f004 f8cc 	bl	800b408 <iprintf>
    return ERR_VAL;
 8007270:	f06f 0005 	mvn.w	r0, #5
}
 8007274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8007276:	b932      	cbnz	r2, 8007286 <tcp_bind+0x36>
    port = tcp_new_port();
 8007278:	f7ff ff8e 	bl	8007198 <tcp_new_port>
    if (port == 0) {
 800727c:	4602      	mov	r2, r0
 800727e:	b950      	cbnz	r0, 8007296 <tcp_bind+0x46>
      return ERR_BUF;
 8007280:	f06f 0001 	mvn.w	r0, #1
 8007284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007286:	4f15      	ldr	r7, [pc, #84]	; (80072dc <tcp_bind+0x8c>)
 8007288:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800728c:	6808      	ldr	r0, [r1, #0]
 800728e:	b970      	cbnz	r0, 80072ae <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8007290:	3301      	adds	r3, #1
 8007292:	2b04      	cmp	r3, #4
 8007294:	d1f8      	bne.n	8007288 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	b103      	cbz	r3, 800729c <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800729a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800729c:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <tcp_bind+0x90>)
  pcb->local_port = port;
 800729e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	601c      	str	r4, [r3, #0]
 80072a4:	60e2      	str	r2, [r4, #12]
 80072a6:	f003 f8af 	bl	800a408 <tcp_timer_needed>
  return ERR_OK;
 80072aa:	2000      	movs	r0, #0
 80072ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 80072ae:	8ac1      	ldrh	r1, [r0, #22]
 80072b0:	4291      	cmp	r1, r2
 80072b2:	d105      	bne.n	80072c0 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 80072b4:	6806      	ldr	r6, [r0, #0]
 80072b6:	b12e      	cbz	r6, 80072c4 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 80072b8:	6829      	ldr	r1, [r5, #0]
 80072ba:	b119      	cbz	r1, 80072c4 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80072bc:	428e      	cmp	r6, r1
 80072be:	d001      	beq.n	80072c4 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80072c0:	68c0      	ldr	r0, [r0, #12]
 80072c2:	e7e4      	b.n	800728e <tcp_bind+0x3e>
              return ERR_USE;
 80072c4:	f06f 0007 	mvn.w	r0, #7
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ca:	bf00      	nop
 80072cc:	0800deb8 	.word	0x0800deb8
 80072d0:	0800e77a 	.word	0x0800e77a
 80072d4:	0800e739 	.word	0x0800e739
 80072d8:	0800db1d 	.word	0x0800db1d
 80072dc:	0800e80c 	.word	0x0800e80c
 80072e0:	24003bac 	.word	0x24003bac

080072e4 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80072e4:	7d03      	ldrb	r3, [r0, #20]
{
 80072e6:	b570      	push	{r4, r5, r6, lr}
 80072e8:	4605      	mov	r5, r0
 80072ea:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80072ec:	b16b      	cbz	r3, 800730a <tcp_listen_with_backlog_and_err+0x26>
 80072ee:	4b23      	ldr	r3, [pc, #140]	; (800737c <tcp_listen_with_backlog_and_err+0x98>)
 80072f0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80072f4:	4922      	ldr	r1, [pc, #136]	; (8007380 <tcp_listen_with_backlog_and_err+0x9c>)
  struct tcp_pcb_listen *lpcb = NULL;
 80072f6:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80072f8:	4822      	ldr	r0, [pc, #136]	; (8007384 <tcp_listen_with_backlog_and_err+0xa0>)
 80072fa:	f004 f885 	bl	800b408 <iprintf>
 80072fe:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 8007302:	b106      	cbz	r6, 8007306 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 8007304:	7033      	strb	r3, [r6, #0]
}
 8007306:	4620      	mov	r0, r4
 8007308:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800730a:	2002      	movs	r0, #2
 800730c:	f7ff fac0 	bl	8006890 <memp_malloc>
  if (lpcb == NULL) {
 8007310:	4604      	mov	r4, r0
 8007312:	2800      	cmp	r0, #0
 8007314:	d02f      	beq.n	8007376 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 8007316:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8007318:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800731a:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800731c:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800731e:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8007320:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8007322:	7d6a      	ldrb	r2, [r5, #21]
 8007324:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8007326:	7a2a      	ldrb	r2, [r5, #8]
 8007328:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800732a:	7aaa      	ldrb	r2, [r5, #10]
 800732c:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 800732e:	7a6a      	ldrb	r2, [r5, #9]
 8007330:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007332:	682a      	ldr	r2, [r5, #0]
 8007334:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8007336:	b13b      	cbz	r3, 8007348 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <tcp_listen_with_backlog_and_err+0xa4>)
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	429d      	cmp	r5, r3
 800733e:	d112      	bne.n	8007366 <tcp_listen_with_backlog_and_err+0x82>
 8007340:	68eb      	ldr	r3, [r5, #12]
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8007348:	4629      	mov	r1, r5
 800734a:	2001      	movs	r0, #1
 800734c:	f7ff fad0 	bl	80068f0 <memp_free>
  lpcb->accept = tcp_accept_null;
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <tcp_listen_with_backlog_and_err+0xa8>)
 8007352:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <tcp_listen_with_backlog_and_err+0xac>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	601c      	str	r4, [r3, #0]
 800735a:	60e2      	str	r2, [r4, #12]
 800735c:	f003 f854 	bl	800a408 <tcp_timer_needed>
  res = ERR_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	e7ce      	b.n	8007302 <tcp_listen_with_backlog_and_err+0x1e>
 8007364:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ec      	beq.n	8007344 <tcp_listen_with_backlog_and_err+0x60>
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	4295      	cmp	r5, r2
 800736e:	d1f9      	bne.n	8007364 <tcp_listen_with_backlog_and_err+0x80>
 8007370:	68ea      	ldr	r2, [r5, #12]
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	e7e6      	b.n	8007344 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8007376:	f04f 33ff 	mov.w	r3, #4294967295
 800737a:	e7c2      	b.n	8007302 <tcp_listen_with_backlog_and_err+0x1e>
 800737c:	0800e77a 	.word	0x0800e77a
 8007380:	0800e7e9 	.word	0x0800e7e9
 8007384:	0800db1d 	.word	0x0800db1d
 8007388:	24003bac 	.word	0x24003bac
 800738c:	08007dc3 	.word	0x08007dc3
 8007390:	24003ba8 	.word	0x24003ba8

08007394 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007394:	2200      	movs	r2, #0
 8007396:	f7ff bfa5 	b.w	80072e4 <tcp_listen_with_backlog_and_err>
	...

0800739c <tcp_update_rcv_ann_wnd>:
{
 800739c:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800739e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 80073a0:	4604      	mov	r4, r0
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80073a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80073a4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80073a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073a8:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80073aa:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80073ae:	4428      	add	r0, r5
 80073b0:	bf94      	ite	ls
 80073b2:	1a82      	subls	r2, r0, r2
 80073b4:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	db01      	blt.n	80073c0 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80073bc:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80073be:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073c0:	1aea      	subs	r2, r5, r3
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	dd02      	ble.n	80073cc <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 80073c6:	2000      	movs	r0, #0
 80073c8:	8560      	strh	r0, [r4, #42]	; 0x2a
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073cc:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073ce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80073d2:	d306      	bcc.n	80073e2 <tcp_update_rcv_ann_wnd+0x46>
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <tcp_update_rcv_ann_wnd+0x4c>)
 80073d6:	f44f 7242 	mov.w	r2, #776	; 0x308
 80073da:	4904      	ldr	r1, [pc, #16]	; (80073ec <tcp_update_rcv_ann_wnd+0x50>)
 80073dc:	4804      	ldr	r0, [pc, #16]	; (80073f0 <tcp_update_rcv_ann_wnd+0x54>)
 80073de:	f004 f813 	bl	800b408 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80073e2:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80073e4:	2000      	movs	r0, #0
}
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	0800e77a 	.word	0x0800e77a
 80073ec:	0800ea70 	.word	0x0800ea70
 80073f0:	0800db1d 	.word	0x0800db1d

080073f4 <tcp_recved>:
{
 80073f4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80073f6:	7d03      	ldrb	r3, [r0, #20]
{
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d106      	bne.n	800740e <tcp_recved+0x1a>
 8007400:	4b17      	ldr	r3, [pc, #92]	; (8007460 <tcp_recved+0x6c>)
 8007402:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007406:	4917      	ldr	r1, [pc, #92]	; (8007464 <tcp_recved+0x70>)
 8007408:	4817      	ldr	r0, [pc, #92]	; (8007468 <tcp_recved+0x74>)
 800740a:	f003 fffd 	bl	800b408 <iprintf>
  pcb->rcv_wnd += len;
 800740e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007410:	4429      	add	r1, r5
 8007412:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007414:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8007418:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800741a:	d911      	bls.n	8007440 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800741c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007420:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007422:	4620      	mov	r0, r4
 8007424:	f7ff ffba 	bl	800739c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007428:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800742c:	db17      	blt.n	800745e <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800742e:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 8007430:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8007432:	f043 0302 	orr.w	r3, r3, #2
 8007436:	76a3      	strb	r3, [r4, #26]
}
 8007438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800743c:	f002 bcc4 	b.w	8009dc8 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8007440:	2900      	cmp	r1, #0
 8007442:	d1ee      	bne.n	8007422 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007444:	7d23      	ldrb	r3, [r4, #20]
 8007446:	2b07      	cmp	r3, #7
 8007448:	d0e8      	beq.n	800741c <tcp_recved+0x28>
 800744a:	2b09      	cmp	r3, #9
 800744c:	d0e6      	beq.n	800741c <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800744e:	4b04      	ldr	r3, [pc, #16]	; (8007460 <tcp_recved+0x6c>)
 8007450:	f240 322d 	movw	r2, #813	; 0x32d
 8007454:	4905      	ldr	r1, [pc, #20]	; (800746c <tcp_recved+0x78>)
 8007456:	4804      	ldr	r0, [pc, #16]	; (8007468 <tcp_recved+0x74>)
 8007458:	f003 ffd6 	bl	800b408 <iprintf>
 800745c:	e7e1      	b.n	8007422 <tcp_recved+0x2e>
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	0800e77a 	.word	0x0800e77a
 8007464:	0800e8b0 	.word	0x0800e8b0
 8007468:	0800db1d 	.word	0x0800db1d
 800746c:	0800e8d6 	.word	0x0800e8d6

08007470 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007470:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8007472:	4604      	mov	r4, r0
 8007474:	b148      	cbz	r0, 800748a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8007476:	6840      	ldr	r0, [r0, #4]
 8007478:	b108      	cbz	r0, 800747e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800747a:	f7ff fbb5 	bl	8006be8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800747e:	4621      	mov	r1, r4
 8007480:	2003      	movs	r0, #3
  }
}
 8007482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8007486:	f7ff ba33 	b.w	80068f0 <memp_free>
 800748a:	bd10      	pop	{r4, pc}

0800748c <tcp_segs_free>:
{
 800748c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800748e:	b900      	cbnz	r0, 8007492 <tcp_segs_free+0x6>
}
 8007490:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8007492:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007494:	f7ff ffec 	bl	8007470 <tcp_seg_free>
    seg = next;
 8007498:	4620      	mov	r0, r4
 800749a:	e7f8      	b.n	800748e <tcp_segs_free+0x2>

0800749c <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 800749c:	7541      	strb	r1, [r0, #21]
 800749e:	4770      	bx	lr

080074a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80074a4:	2003      	movs	r0, #3
 80074a6:	f7ff f9f3 	bl	8006890 <memp_malloc>
  if (cseg == NULL) {
 80074aa:	4605      	mov	r5, r0
 80074ac:	b160      	cbz	r0, 80074c8 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80074ae:	4620      	mov	r0, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	f104 0210 	add.w	r2, r4, #16
 80074b6:	f850 1b04 	ldr.w	r1, [r0], #4
 80074ba:	4290      	cmp	r0, r2
 80074bc:	f843 1b04 	str.w	r1, [r3], #4
 80074c0:	d1f9      	bne.n	80074b6 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 80074c2:	6868      	ldr	r0, [r5, #4]
 80074c4:	f7ff fd4a 	bl	8006f5c <pbuf_ref>
  return cseg;
}
 80074c8:	4628      	mov	r0, r5
 80074ca:	bd38      	pop	{r3, r4, r5, pc}

080074cc <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80074cc:	b100      	cbz	r0, 80074d0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80074ce:	6101      	str	r1, [r0, #16]
 80074d0:	4770      	bx	lr
	...

080074d4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80074d8:	4604      	mov	r4, r0
 80074da:	b158      	cbz	r0, 80074f4 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80074dc:	7d03      	ldrb	r3, [r0, #20]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d106      	bne.n	80074f0 <tcp_recv+0x1c>
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <tcp_recv+0x24>)
 80074e4:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80074e8:	4904      	ldr	r1, [pc, #16]	; (80074fc <tcp_recv+0x28>)
 80074ea:	4805      	ldr	r0, [pc, #20]	; (8007500 <tcp_recv+0x2c>)
 80074ec:	f003 ff8c 	bl	800b408 <iprintf>
    pcb->recv = recv;
 80074f0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
 80074f6:	bf00      	nop
 80074f8:	0800e77a 	.word	0x0800e77a
 80074fc:	0800e889 	.word	0x0800e889
 8007500:	0800db1d 	.word	0x0800db1d

08007504 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007508:	4604      	mov	r4, r0
 800750a:	b150      	cbz	r0, 8007522 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800750c:	7d03      	ldrb	r3, [r0, #20]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d106      	bne.n	8007520 <tcp_sent+0x1c>
 8007512:	4b04      	ldr	r3, [pc, #16]	; (8007524 <tcp_sent+0x20>)
 8007514:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007518:	4903      	ldr	r1, [pc, #12]	; (8007528 <tcp_sent+0x24>)
 800751a:	4804      	ldr	r0, [pc, #16]	; (800752c <tcp_sent+0x28>)
 800751c:	f003 ff74 	bl	800b408 <iprintf>
    pcb->sent = sent;
 8007520:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	0800e77a 	.word	0x0800e77a
 8007528:	0800e8f7 	.word	0x0800e8f7
 800752c:	0800db1d 	.word	0x0800db1d

08007530 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007534:	4604      	mov	r4, r0
 8007536:	b158      	cbz	r0, 8007550 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007538:	7d03      	ldrb	r3, [r0, #20]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d106      	bne.n	800754c <tcp_err+0x1c>
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <tcp_err+0x24>)
 8007540:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8007544:	4904      	ldr	r1, [pc, #16]	; (8007558 <tcp_err+0x28>)
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <tcp_err+0x2c>)
 8007548:	f003 ff5e 	bl	800b408 <iprintf>
    pcb->errf = err;
 800754c:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	0800e77a 	.word	0x0800e77a
 8007558:	0800e7b5 	.word	0x0800e7b5
 800755c:	0800db1d 	.word	0x0800db1d

08007560 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007560:	b118      	cbz	r0, 800756a <tcp_accept+0xa>
 8007562:	7d03      	ldrb	r3, [r0, #20]
 8007564:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8007566:	bf08      	it	eq
 8007568:	6181      	streq	r1, [r0, #24]
 800756a:	4770      	bx	lr

0800756c <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800756c:	7d03      	ldrb	r3, [r0, #20]
 800756e:	2b01      	cmp	r3, #1
{
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	460e      	mov	r6, r1
 8007576:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007578:	d106      	bne.n	8007588 <tcp_poll+0x1c>
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <tcp_poll+0x24>)
 800757c:	f240 7203 	movw	r2, #1795	; 0x703
 8007580:	4904      	ldr	r1, [pc, #16]	; (8007594 <tcp_poll+0x28>)
 8007582:	4805      	ldr	r0, [pc, #20]	; (8007598 <tcp_poll+0x2c>)
 8007584:	f003 ff40 	bl	800b408 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007588:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800758c:	7725      	strb	r5, [r4, #28]
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	0800e77a 	.word	0x0800e77a
 8007594:	0800e86b 	.word	0x0800e86b
 8007598:	0800db1d 	.word	0x0800db1d

0800759c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800759c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800759e:	7d03      	ldrb	r3, [r0, #20]
{
 80075a0:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d919      	bls.n	80075da <tcp_pcb_purge+0x3e>
 80075a6:	2b0a      	cmp	r3, #10
 80075a8:	d017      	beq.n	80075da <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80075aa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80075ac:	b118      	cbz	r0, 80075b6 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80075ae:	f7ff fb1b 	bl	8006be8 <pbuf_free>
      pcb->refused_data = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80075b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 80075b8:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 80075ba:	f7ff ff67 	bl	800748c <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80075be:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 80075c2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 80075c4:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 80075c6:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 80075c8:	f7ff ff60 	bl	800748c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80075cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80075ce:	f7ff ff5d 	bl	800748c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80075d2:	66a5      	str	r5, [r4, #104]	; 0x68
 80075d4:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80075d6:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80075da:	bd38      	pop	{r3, r4, r5, pc}

080075dc <tcp_slowtmr>:
{
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80075e0:	4eb0      	ldr	r6, [pc, #704]	; (80078a4 <tcp_slowtmr+0x2c8>)
{
 80075e2:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 80075e4:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80078d8 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 80075e8:	6833      	ldr	r3, [r6, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80075ee:	4bae      	ldr	r3, [pc, #696]	; (80078a8 <tcp_slowtmr+0x2cc>)
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	9302      	str	r3, [sp, #8]
 80075f4:	3201      	adds	r2, #1
 80075f6:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 80075f8:	4fac      	ldr	r7, [pc, #688]	; (80078ac <tcp_slowtmr+0x2d0>)
  prev = NULL;
 80075fa:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80075fe:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80078dc <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8007602:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8007604:	b96c      	cbnz	r4, 8007622 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8007606:	4faa      	ldr	r7, [pc, #680]	; (80078b0 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007608:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80078dc <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 800760c:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800760e:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80078e0 <tcp_slowtmr+0x304>
 8007612:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80078b8 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8007616:	2d00      	cmp	r5, #0
 8007618:	f040 8185 	bne.w	8007926 <tcp_slowtmr+0x34a>
}
 800761c:	b005      	add	sp, #20
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007622:	7d23      	ldrb	r3, [r4, #20]
 8007624:	b933      	cbnz	r3, 8007634 <tcp_slowtmr+0x58>
 8007626:	464b      	mov	r3, r9
 8007628:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800762c:	49a1      	ldr	r1, [pc, #644]	; (80078b4 <tcp_slowtmr+0x2d8>)
 800762e:	48a2      	ldr	r0, [pc, #648]	; (80078b8 <tcp_slowtmr+0x2dc>)
 8007630:	f003 feea 	bl	800b408 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007634:	7d23      	ldrb	r3, [r4, #20]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d106      	bne.n	8007648 <tcp_slowtmr+0x6c>
 800763a:	464b      	mov	r3, r9
 800763c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007640:	499e      	ldr	r1, [pc, #632]	; (80078bc <tcp_slowtmr+0x2e0>)
 8007642:	489d      	ldr	r0, [pc, #628]	; (80078b8 <tcp_slowtmr+0x2dc>)
 8007644:	f003 fee0 	bl	800b408 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007648:	7d23      	ldrb	r3, [r4, #20]
 800764a:	2b0a      	cmp	r3, #10
 800764c:	d106      	bne.n	800765c <tcp_slowtmr+0x80>
 800764e:	464b      	mov	r3, r9
 8007650:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007654:	499a      	ldr	r1, [pc, #616]	; (80078c0 <tcp_slowtmr+0x2e4>)
 8007656:	4898      	ldr	r0, [pc, #608]	; (80078b8 <tcp_slowtmr+0x2dc>)
 8007658:	f003 fed6 	bl	800b408 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800765c:	9b02      	ldr	r3, [sp, #8]
 800765e:	7f62      	ldrb	r2, [r4, #29]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d104      	bne.n	8007670 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8007666:	68e5      	ldr	r5, [r4, #12]
 8007668:	4644      	mov	r4, r8
      continue;
 800766a:	46a0      	mov	r8, r4
 800766c:	462c      	mov	r4, r5
 800766e:	e7c9      	b.n	8007604 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007670:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8007672:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007674:	2902      	cmp	r1, #2
 8007676:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800767a:	d102      	bne.n	8007682 <tcp_slowtmr+0xa6>
 800767c:	2a05      	cmp	r2, #5
 800767e:	f200 80e6 	bhi.w	800784e <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007682:	2a0b      	cmp	r2, #11
 8007684:	f200 80e3 	bhi.w	800784e <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8007688:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800768c:	f1bb 0f00 	cmp.w	fp, #0
 8007690:	f000 80a6 	beq.w	80077e0 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007694:	488b      	ldr	r0, [pc, #556]	; (80078c4 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8007696:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800769a:	4483      	add	fp, r0
 800769c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80076a0:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 80076a2:	bf84      	itt	hi
 80076a4:	3301      	addhi	r3, #1
 80076a6:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80076aa:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f080 8085 	bcs.w	80077be <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 80076b4:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 80076b8:	7d23      	ldrb	r3, [r4, #20]
 80076ba:	2b06      	cmp	r3, #6
 80076bc:	d10b      	bne.n	80076d6 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 80076be:	7ea2      	ldrb	r2, [r4, #26]
 80076c0:	06d2      	lsls	r2, r2, #27
 80076c2:	d508      	bpl.n	80076d6 <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	6a21      	ldr	r1, [r4, #32]
 80076c8:	1a52      	subs	r2, r2, r1
 80076ca:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80076cc:	bf84      	itt	hi
 80076ce:	f10b 0b01 	addhi.w	fp, fp, #1
 80076d2:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076d6:	7a25      	ldrb	r5, [r4, #8]
 80076d8:	f015 0508 	ands.w	r5, r5, #8
 80076dc:	d019      	beq.n	8007712 <tcp_slowtmr+0x136>
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d002      	beq.n	80076e8 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 80076e2:	2b07      	cmp	r3, #7
 80076e4:	f040 80c8 	bne.w	8007878 <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80076e8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80076ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076f0:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80076f2:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076f6:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80076f8:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076fc:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80076fe:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007702:	4291      	cmp	r1, r2
 8007704:	f240 80a6 	bls.w	8007854 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8007708:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800770c:	2501      	movs	r5, #1
        ++pcb_remove;
 800770e:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8007712:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007714:	b168      	cbz	r0, 8007732 <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	6a22      	ldr	r2, [r4, #32]
 800771a:	1a9a      	subs	r2, r3, r2
 800771c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8007724:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8007728:	d303      	bcc.n	8007732 <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 800772a:	f7ff feaf 	bl	800748c <tcp_segs_free>
      pcb->ooseq = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8007732:	7d23      	ldrb	r3, [r4, #20]
 8007734:	2b03      	cmp	r3, #3
 8007736:	f040 80a1 	bne.w	800787c <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800773a:	6833      	ldr	r3, [r6, #0]
 800773c:	6a22      	ldr	r2, [r4, #32]
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007742:	d803      	bhi.n	800774c <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8007744:	f1bb 0f00 	cmp.w	fp, #0
 8007748:	f000 80cc 	beq.w	80078e4 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 800774c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800774e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8007752:	f7ff ff23 	bl	800759c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007756:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8007758:	f1b8 0f00 	cmp.w	r8, #0
 800775c:	f000 8096 	beq.w	800788c <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007760:	429c      	cmp	r4, r3
 8007762:	d106      	bne.n	8007772 <tcp_slowtmr+0x196>
 8007764:	464b      	mov	r3, r9
 8007766:	f240 4289 	movw	r2, #1161	; 0x489
 800776a:	4957      	ldr	r1, [pc, #348]	; (80078c8 <tcp_slowtmr+0x2ec>)
 800776c:	4852      	ldr	r0, [pc, #328]	; (80078b8 <tcp_slowtmr+0x2dc>)
 800776e:	f003 fe4b 	bl	800b408 <iprintf>
        prev->next = pcb->next;
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8007778:	b14d      	cbz	r5, 800778e <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800777a:	8b23      	ldrh	r3, [r4, #24]
 800777c:	4622      	mov	r2, r4
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	8ae3      	ldrh	r3, [r4, #22]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	1d23      	adds	r3, r4, #4
 8007786:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007788:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800778a:	f002 fc9b 	bl	800a0c4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800778e:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007790:	4621      	mov	r1, r4
 8007792:	2001      	movs	r0, #1
      pcb = pcb->next;
 8007794:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8007796:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007798:	f7ff f8aa 	bl	80068f0 <memp_free>
      tcp_active_pcbs_changed = 0;
 800779c:	2200      	movs	r2, #0
 800779e:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80077a2:	f1bb 0f00 	cmp.w	fp, #0
 80077a6:	d004      	beq.n	80077b2 <tcp_slowtmr+0x1d6>
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	f06f 010c 	mvn.w	r1, #12
 80077ae:	4618      	mov	r0, r3
 80077b0:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80077b2:	f89a 3000 	ldrb.w	r3, [sl]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f43f af56 	beq.w	8007668 <tcp_slowtmr+0x8c>
 80077bc:	e71c      	b.n	80075f8 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80077be:	4620      	mov	r0, r4
 80077c0:	f002 fd70 	bl	800a2a4 <tcp_zero_window_probe>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f47f af75 	bne.w	80076b4 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80077ca:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80077ce:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80077d2:	2b06      	cmp	r3, #6
 80077d4:	f63f af6e 	bhi.w	80076b4 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 80077d8:	3301      	adds	r3, #1
 80077da:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80077de:	e769      	b.n	80076b4 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 80077e0:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80077e4:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80077e6:	bfa4      	itt	ge
 80077e8:	3301      	addge	r3, #1
 80077ea:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80077ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f43f af60 	beq.w	80076b4 <tcp_slowtmr+0xd8>
 80077f4:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80077f8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80077fc:	4298      	cmp	r0, r3
 80077fe:	f6ff af59 	blt.w	80076b4 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 8007802:	2902      	cmp	r1, #2
 8007804:	d00a      	beq.n	800781c <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007806:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800780a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800780e:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8007812:	492e      	ldr	r1, [pc, #184]	; (80078cc <tcp_slowtmr+0x2f0>)
 8007814:	5c8a      	ldrb	r2, [r1, r2]
 8007816:	4093      	lsls	r3, r2
 8007818:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 800781c:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800781e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007822:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 8007824:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8007826:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007828:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 800782c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8007830:	4293      	cmp	r3, r2
 8007832:	bf28      	it	cs
 8007834:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007836:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8007838:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800783a:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 800783c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007840:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 8007842:	bf38      	it	cc
 8007844:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8007848:	f002 fc96 	bl	800a178 <tcp_rexmit_rto>
 800784c:	e734      	b.n	80076b8 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 800784e:	f04f 0b01 	mov.w	fp, #1
 8007852:	e731      	b.n	80076b8 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007854:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007858:	4a1d      	ldr	r2, [pc, #116]	; (80078d0 <tcp_slowtmr+0x2f4>)
 800785a:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800785e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007862:	4299      	cmp	r1, r3
 8007864:	d908      	bls.n	8007878 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8007866:	4620      	mov	r0, r4
 8007868:	f002 fcf2 	bl	800a250 <tcp_keepalive>
        if (err == ERR_OK) {
 800786c:	b920      	cbnz	r0, 8007878 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 800786e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007872:	3301      	adds	r3, #1
 8007874:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8007878:	2500      	movs	r5, #0
 800787a:	e74a      	b.n	8007712 <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 800787c:	2b09      	cmp	r3, #9
 800787e:	f47f af61 	bne.w	8007744 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007882:	6833      	ldr	r3, [r6, #0]
 8007884:	6a22      	ldr	r2, [r4, #32]
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	2bf0      	cmp	r3, #240	; 0xf0
 800788a:	e75a      	b.n	8007742 <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800788c:	429c      	cmp	r4, r3
 800788e:	d006      	beq.n	800789e <tcp_slowtmr+0x2c2>
 8007890:	464b      	mov	r3, r9
 8007892:	f240 428d 	movw	r2, #1165	; 0x48d
 8007896:	490f      	ldr	r1, [pc, #60]	; (80078d4 <tcp_slowtmr+0x2f8>)
 8007898:	4807      	ldr	r0, [pc, #28]	; (80078b8 <tcp_slowtmr+0x2dc>)
 800789a:	f003 fdb5 	bl	800b408 <iprintf>
        tcp_active_pcbs = pcb->next;
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	e769      	b.n	8007778 <tcp_slowtmr+0x19c>
 80078a4:	24003ba4 	.word	0x24003ba4
 80078a8:	2400061a 	.word	0x2400061a
 80078ac:	24003ba0 	.word	0x24003ba0
 80078b0:	24003bb0 	.word	0x24003bb0
 80078b4:	0800e91e 	.word	0x0800e91e
 80078b8:	0800db1d 	.word	0x0800db1d
 80078bc:	0800e948 	.word	0x0800e948
 80078c0:	0800e972 	.word	0x0800e972
 80078c4:	0800e864 	.word	0x0800e864
 80078c8:	0800e99f 	.word	0x0800e99f
 80078cc:	0800e72c 	.word	0x0800e72c
 80078d0:	000124f8 	.word	0x000124f8
 80078d4:	0800e9ca 	.word	0x0800e9ca
 80078d8:	24003b9c 	.word	0x24003b9c
 80078dc:	0800e77a 	.word	0x0800e77a
 80078e0:	0800e9f4 	.word	0x0800e9f4
      ++prev->polltmr;
 80078e4:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80078e6:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 80078e8:	3301      	adds	r3, #1
      pcb = pcb->next;
 80078ea:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80078ec:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80078ee:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80078f0:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80078f2:	f63f aeba 	bhi.w	800766a <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80078f6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80078fa:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80078fe:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8007902:	b173      	cbz	r3, 8007922 <tcp_slowtmr+0x346>
 8007904:	4621      	mov	r1, r4
 8007906:	6920      	ldr	r0, [r4, #16]
 8007908:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800790a:	f89a 3000 	ldrb.w	r3, [sl]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f47f ae72 	bne.w	80075f8 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8007914:	2800      	cmp	r0, #0
 8007916:	f47f aea8 	bne.w	800766a <tcp_slowtmr+0x8e>
          tcp_output(prev);
 800791a:	4620      	mov	r0, r4
 800791c:	f002 fa54 	bl	8009dc8 <tcp_output>
 8007920:	e6a3      	b.n	800766a <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8007922:	4658      	mov	r0, fp
 8007924:	e7f1      	b.n	800790a <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007926:	7d2b      	ldrb	r3, [r5, #20]
 8007928:	2b0a      	cmp	r3, #10
 800792a:	d006      	beq.n	800793a <tcp_slowtmr+0x35e>
 800792c:	4643      	mov	r3, r8
 800792e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007932:	4651      	mov	r1, sl
 8007934:	4648      	mov	r0, r9
 8007936:	f003 fd67 	bl	800b408 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800793a:	6833      	ldr	r3, [r6, #0]
 800793c:	6a2a      	ldr	r2, [r5, #32]
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	2bf0      	cmp	r3, #240	; 0xf0
 8007942:	d816      	bhi.n	8007972 <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8007944:	462c      	mov	r4, r5
 8007946:	68ed      	ldr	r5, [r5, #12]
 8007948:	e665      	b.n	8007616 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	429d      	cmp	r5, r3
 800794e:	d106      	bne.n	800795e <tcp_slowtmr+0x382>
 8007950:	4643      	mov	r3, r8
 8007952:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007956:	4910      	ldr	r1, [pc, #64]	; (8007998 <tcp_slowtmr+0x3bc>)
 8007958:	4648      	mov	r0, r9
 800795a:	f003 fd55 	bl	800b408 <iprintf>
        prev->next = pcb->next;
 800795e:	68eb      	ldr	r3, [r5, #12]
 8007960:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8007962:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007966:	4629      	mov	r1, r5
 8007968:	2001      	movs	r0, #1
 800796a:	f7fe ffc1 	bl	80068f0 <memp_free>
      pcb = pcb->next;
 800796e:	465d      	mov	r5, fp
 8007970:	e651      	b.n	8007616 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8007972:	4628      	mov	r0, r5
 8007974:	f7ff fe12 	bl	800759c <tcp_pcb_purge>
      if (prev != NULL) {
 8007978:	2c00      	cmp	r4, #0
 800797a:	d1e6      	bne.n	800794a <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	429d      	cmp	r5, r3
 8007980:	d006      	beq.n	8007990 <tcp_slowtmr+0x3b4>
 8007982:	4643      	mov	r3, r8
 8007984:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8007988:	4904      	ldr	r1, [pc, #16]	; (800799c <tcp_slowtmr+0x3c0>)
 800798a:	4648      	mov	r0, r9
 800798c:	f003 fd3c 	bl	800b408 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007990:	68eb      	ldr	r3, [r5, #12]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	e7e5      	b.n	8007962 <tcp_slowtmr+0x386>
 8007996:	bf00      	nop
 8007998:	0800ea23 	.word	0x0800ea23
 800799c:	0800ea4a 	.word	0x0800ea4a

080079a0 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 80079a0:	6803      	ldr	r3, [r0, #0]
 80079a2:	428b      	cmp	r3, r1
{
 80079a4:	b510      	push	{r4, lr}
 80079a6:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80079a8:	d137      	bne.n	8007a1a <tcp_pcb_remove+0x7a>
 80079aa:	68cb      	ldr	r3, [r1, #12]
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 80079b0:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80079b2:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80079b4:	f7ff fdf2 	bl	800759c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80079b8:	7d23      	ldrb	r3, [r4, #20]
 80079ba:	2b0a      	cmp	r3, #10
 80079bc:	d00a      	beq.n	80079d4 <tcp_pcb_remove+0x34>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d008      	beq.n	80079d4 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80079c2:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	d505      	bpl.n	80079d4 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 80079c8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 80079cc:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 80079ce:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80079d0:	f002 f9fa 	bl	8009dc8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80079d4:	7d23      	ldrb	r3, [r4, #20]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d01a      	beq.n	8007a10 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80079da:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80079dc:	b133      	cbz	r3, 80079ec <tcp_pcb_remove+0x4c>
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <tcp_pcb_remove+0x8c>)
 80079e0:	f240 7253 	movw	r2, #1875	; 0x753
 80079e4:	4912      	ldr	r1, [pc, #72]	; (8007a30 <tcp_pcb_remove+0x90>)
 80079e6:	4813      	ldr	r0, [pc, #76]	; (8007a34 <tcp_pcb_remove+0x94>)
 80079e8:	f003 fd0e 	bl	800b408 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80079ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80079ee:	b133      	cbz	r3, 80079fe <tcp_pcb_remove+0x5e>
 80079f0:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <tcp_pcb_remove+0x8c>)
 80079f2:	f240 7254 	movw	r2, #1876	; 0x754
 80079f6:	4910      	ldr	r1, [pc, #64]	; (8007a38 <tcp_pcb_remove+0x98>)
 80079f8:	480e      	ldr	r0, [pc, #56]	; (8007a34 <tcp_pcb_remove+0x94>)
 80079fa:	f003 fd05 	bl	800b408 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80079fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007a00:	b133      	cbz	r3, 8007a10 <tcp_pcb_remove+0x70>
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <tcp_pcb_remove+0x8c>)
 8007a04:	f240 7256 	movw	r2, #1878	; 0x756
 8007a08:	490c      	ldr	r1, [pc, #48]	; (8007a3c <tcp_pcb_remove+0x9c>)
 8007a0a:	480a      	ldr	r0, [pc, #40]	; (8007a34 <tcp_pcb_remove+0x94>)
 8007a0c:	f003 fcfc 	bl	800b408 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007a10:	2300      	movs	r3, #0
 8007a12:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007a14:	82e3      	strh	r3, [r4, #22]
 8007a16:	bd10      	pop	{r4, pc}
 8007a18:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0c7      	beq.n	80079ae <tcp_pcb_remove+0xe>
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	4294      	cmp	r4, r2
 8007a22:	d1f9      	bne.n	8007a18 <tcp_pcb_remove+0x78>
 8007a24:	68e2      	ldr	r2, [r4, #12]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e7c1      	b.n	80079ae <tcp_pcb_remove+0xe>
 8007a2a:	bf00      	nop
 8007a2c:	0800e77a 	.word	0x0800e77a
 8007a30:	0800e81c 	.word	0x0800e81c
 8007a34:	0800db1d 	.word	0x0800db1d
 8007a38:	0800e834 	.word	0x0800e834
 8007a3c:	0800e84d 	.word	0x0800e84d

08007a40 <tcp_close_shutdown>:
{
 8007a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a42:	7d03      	ldrb	r3, [r0, #20]
 8007a44:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d049      	beq.n	8007ade <tcp_close_shutdown+0x9e>
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d001      	beq.n	8007a52 <tcp_close_shutdown+0x12>
 8007a4e:	2b07      	cmp	r3, #7
 8007a50:	d145      	bne.n	8007ade <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007a52:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007a54:	b91a      	cbnz	r2, 8007a5e <tcp_close_shutdown+0x1e>
 8007a56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007a58:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8007a5c:	d03f      	beq.n	8007ade <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007a5e:	7ea3      	ldrb	r3, [r4, #26]
 8007a60:	06db      	lsls	r3, r3, #27
 8007a62:	d406      	bmi.n	8007a72 <tcp_close_shutdown+0x32>
 8007a64:	4b3f      	ldr	r3, [pc, #252]	; (8007b64 <tcp_close_shutdown+0x124>)
 8007a66:	f240 120f 	movw	r2, #271	; 0x10f
 8007a6a:	493f      	ldr	r1, [pc, #252]	; (8007b68 <tcp_close_shutdown+0x128>)
 8007a6c:	483f      	ldr	r0, [pc, #252]	; (8007b6c <tcp_close_shutdown+0x12c>)
 8007a6e:	f003 fccb 	bl	800b408 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007a72:	8b23      	ldrh	r3, [r4, #24]
 8007a74:	4622      	mov	r2, r4
 8007a76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	8ae3      	ldrh	r3, [r4, #22]
 8007a7c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	1d23      	adds	r3, r4, #4
 8007a82:	f002 fb1f 	bl	800a0c4 <tcp_rst>
      tcp_pcb_purge(pcb);
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7ff fd88 	bl	800759c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007a8c:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <tcp_close_shutdown+0x130>)
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	429c      	cmp	r4, r3
 8007a92:	d115      	bne.n	8007ac0 <tcp_close_shutdown+0x80>
 8007a94:	68e3      	ldr	r3, [r4, #12]
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	60e3      	str	r3, [r4, #12]
 8007a9e:	4b35      	ldr	r3, [pc, #212]	; (8007b74 <tcp_close_shutdown+0x134>)
 8007aa0:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007aa2:	7d23      	ldrb	r3, [r4, #20]
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d113      	bne.n	8007ad0 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8007aa8:	230a      	movs	r3, #10
 8007aaa:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007aac:	4b32      	ldr	r3, [pc, #200]	; (8007b78 <tcp_close_shutdown+0x138>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	601c      	str	r4, [r3, #0]
 8007ab2:	60e2      	str	r2, [r4, #12]
 8007ab4:	f002 fca8 	bl	800a408 <tcp_timer_needed>
}
 8007ab8:	2000      	movs	r0, #0
 8007aba:	b003      	add	sp, #12
 8007abc:	bd30      	pop	{r4, r5, pc}
 8007abe:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0e9      	beq.n	8007a98 <tcp_close_shutdown+0x58>
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	4294      	cmp	r4, r2
 8007ac8:	d1f9      	bne.n	8007abe <tcp_close_shutdown+0x7e>
 8007aca:	68e2      	ldr	r2, [r4, #12]
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	e7e3      	b.n	8007a98 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8007ad0:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <tcp_close_shutdown+0x13c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	d117      	bne.n	8007b08 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8007ad8:	f001 fd0e 	bl	80094f8 <tcp_trigger_input_pcb_close>
 8007adc:	e7ec      	b.n	8007ab8 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d020      	beq.n	8007b24 <tcp_close_shutdown+0xe4>
 8007ae2:	d307      	bcc.n	8007af4 <tcp_close_shutdown+0xb4>
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d033      	beq.n	8007b50 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8007ae8:	4620      	mov	r0, r4
}
 8007aea:	b003      	add	sp, #12
 8007aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8007af0:	f7ff bb7c 	b.w	80071ec <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8007af4:	8ae3      	ldrh	r3, [r4, #22]
 8007af6:	b13b      	cbz	r3, 8007b08 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <tcp_close_shutdown+0x140>)
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d109      	bne.n	8007b14 <tcp_close_shutdown+0xd4>
 8007b00:	68e3      	ldr	r3, [r4, #12]
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8007b08:	4621      	mov	r1, r4
 8007b0a:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8007b0c:	f7fe fef0 	bl	80068f0 <memp_free>
    break;
 8007b10:	e7d2      	b.n	8007ab8 <tcp_close_shutdown+0x78>
 8007b12:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f5      	beq.n	8007b04 <tcp_close_shutdown+0xc4>
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	4294      	cmp	r4, r2
 8007b1c:	d1f9      	bne.n	8007b12 <tcp_close_shutdown+0xd2>
 8007b1e:	68e2      	ldr	r2, [r4, #12]
 8007b20:	60da      	str	r2, [r3, #12]
 8007b22:	e7ef      	b.n	8007b04 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007b24:	4917      	ldr	r1, [pc, #92]	; (8007b84 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8007b26:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007b28:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007b2c:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007b2e:	b94a      	cbnz	r2, 8007b44 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007b30:	3301      	adds	r3, #1
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d1f8      	bne.n	8007b28 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007b36:	4621      	mov	r1, r4
 8007b38:	4813      	ldr	r0, [pc, #76]	; (8007b88 <tcp_close_shutdown+0x148>)
 8007b3a:	f7ff ff31 	bl	80079a0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007b3e:	4621      	mov	r1, r4
 8007b40:	2002      	movs	r0, #2
 8007b42:	e7e3      	b.n	8007b0c <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8007b44:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8007b46:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8007b48:	bf08      	it	eq
 8007b4a:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007b4c:	68d2      	ldr	r2, [r2, #12]
 8007b4e:	e7ee      	b.n	8007b2e <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007b50:	4621      	mov	r1, r4
 8007b52:	4807      	ldr	r0, [pc, #28]	; (8007b70 <tcp_close_shutdown+0x130>)
 8007b54:	f7ff ff24 	bl	80079a0 <tcp_pcb_remove>
 8007b58:	2001      	movs	r0, #1
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 8007b5c:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007b5e:	7018      	strb	r0, [r3, #0]
 8007b60:	e7d4      	b.n	8007b0c <tcp_close_shutdown+0xcc>
 8007b62:	bf00      	nop
 8007b64:	0800e77a 	.word	0x0800e77a
 8007b68:	0800e761 	.word	0x0800e761
 8007b6c:	0800db1d 	.word	0x0800db1d
 8007b70:	24003ba0 	.word	0x24003ba0
 8007b74:	24003b9c 	.word	0x24003b9c
 8007b78:	24003bb0 	.word	0x24003bb0
 8007b7c:	24003bb4 	.word	0x24003bb4
 8007b80:	24003bac 	.word	0x24003bac
 8007b84:	0800e80c 	.word	0x0800e80c
 8007b88:	24003ba8 	.word	0x24003ba8

08007b8c <tcp_close>:
  if (pcb->state != LISTEN) {
 8007b8c:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8007b8e:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8007b90:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8007b92:	bf1e      	ittt	ne
 8007b94:	7e83      	ldrbne	r3, [r0, #26]
 8007b96:	f043 0310 	orrne.w	r3, r3, #16
 8007b9a:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8007b9c:	f7ff bf50 	b.w	8007a40 <tcp_close_shutdown>

08007ba0 <tcp_recv_null>:
{
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4608      	mov	r0, r1
  if (p != NULL) {
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	b13a      	cbz	r2, 8007bb8 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8007ba8:	8911      	ldrh	r1, [r2, #8]
 8007baa:	f7ff fc23 	bl	80073f4 <tcp_recved>
    pbuf_free(p);
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7ff f81a 	bl	8006be8 <pbuf_free>
}
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1fb      	bne.n	8007bb4 <tcp_recv_null+0x14>
}
 8007bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007bc0:	f7ff bfe4 	b.w	8007b8c <tcp_close>

08007bc4 <tcp_process_refused_data>:
{
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8007bc6:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8007bc8:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007bca:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8007bce:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8007bd0:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007bd2:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007bd4:	b1dd      	cbz	r5, 8007c0e <tcp_process_refused_data+0x4a>
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	4632      	mov	r2, r6
 8007bda:	6900      	ldr	r0, [r0, #16]
 8007bdc:	47a8      	blx	r5
 8007bde:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007be0:	b9e0      	cbnz	r0, 8007c1c <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007be2:	06bb      	lsls	r3, r7, #26
 8007be4:	d511      	bpl.n	8007c0a <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007be6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007be8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8007bf0:	bf1c      	itt	ne
 8007bf2:	3301      	addne	r3, #1
 8007bf4:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007bf6:	b146      	cbz	r6, 8007c0a <tcp_process_refused_data+0x46>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	6920      	ldr	r0, [r4, #16]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007c02:	300d      	adds	r0, #13
 8007c04:	d101      	bne.n	8007c0a <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8007c06:	f06f 050c 	mvn.w	r5, #12
}
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c0e:	4601      	mov	r1, r0
 8007c10:	462b      	mov	r3, r5
 8007c12:	4632      	mov	r2, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	f7ff ffc3 	bl	8007ba0 <tcp_recv_null>
 8007c1a:	e7e0      	b.n	8007bde <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8007c1c:	f110 050d 	adds.w	r5, r0, #13
 8007c20:	d0f1      	beq.n	8007c06 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8007c22:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8007c24:	f06f 0504 	mvn.w	r5, #4
 8007c28:	e7ef      	b.n	8007c0a <tcp_process_refused_data+0x46>
	...

08007c2c <tcp_fasttmr>:
{
 8007c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8007c30:	4d1b      	ldr	r5, [pc, #108]	; (8007ca0 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8007c32:	4f1c      	ldr	r7, [pc, #112]	; (8007ca4 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8007c34:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8007c36:	4e1c      	ldr	r6, [pc, #112]	; (8007ca8 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8007c38:	3301      	adds	r3, #1
 8007c3a:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8007c3c:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8007c3e:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007c42:	b90c      	cbnz	r4, 8007c48 <tcp_fasttmr+0x1c>
}
 8007c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8007c48:	782b      	ldrb	r3, [r5, #0]
 8007c4a:	7f62      	ldrb	r2, [r4, #29]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d024      	beq.n	8007c9a <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007c50:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8007c52:	7ea3      	ldrb	r3, [r4, #26]
 8007c54:	07d9      	lsls	r1, r3, #31
 8007c56:	d509      	bpl.n	8007c6c <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8007c58:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8007c5c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8007c5e:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8007c60:	f002 f8b2 	bl	8009dc8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007c64:	7ea3      	ldrb	r3, [r4, #26]
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8007c6c:	7ea3      	ldrb	r3, [r4, #26]
 8007c6e:	071a      	lsls	r2, r3, #28
 8007c70:	d505      	bpl.n	8007c7e <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8007c72:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8007c76:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 8007c78:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007c7a:	f7ff fab7 	bl	80071ec <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8007c7e:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8007c80:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007c84:	b13b      	cbz	r3, 8007c96 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8007c86:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8007c88:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8007c8c:	f7ff ff9a 	bl	8007bc4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007c90:	7833      	ldrb	r3, [r6, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1d2      	bne.n	8007c3c <tcp_fasttmr+0x10>
{
 8007c96:	464c      	mov	r4, r9
 8007c98:	e7d3      	b.n	8007c42 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8007c9a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8007c9e:	e7fa      	b.n	8007c96 <tcp_fasttmr+0x6a>
 8007ca0:	2400061a 	.word	0x2400061a
 8007ca4:	24003ba0 	.word	0x24003ba0
 8007ca8:	24003b9c 	.word	0x24003b9c

08007cac <tcp_tmr>:
{
 8007cac:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8007cae:	f7ff ffbd 	bl	8007c2c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8007cb2:	4a06      	ldr	r2, [pc, #24]	; (8007ccc <tcp_tmr+0x20>)
 8007cb4:	7813      	ldrb	r3, [r2, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	7013      	strb	r3, [r2, #0]
 8007cbc:	07db      	lsls	r3, r3, #31
 8007cbe:	d503      	bpl.n	8007cc8 <tcp_tmr+0x1c>
}
 8007cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8007cc4:	f7ff bc8a 	b.w	80075dc <tcp_slowtmr>
 8007cc8:	bd08      	pop	{r3, pc}
 8007cca:	bf00      	nop
 8007ccc:	24000619 	.word	0x24000619

08007cd0 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007cd0:	7d03      	ldrb	r3, [r0, #20]
 8007cd2:	2b01      	cmp	r3, #1
{
 8007cd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4604      	mov	r4, r0
 8007cda:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007cdc:	d106      	bne.n	8007cec <tcp_abandon+0x1c>
 8007cde:	4b30      	ldr	r3, [pc, #192]	; (8007da0 <tcp_abandon+0xd0>)
 8007ce0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ce4:	492f      	ldr	r1, [pc, #188]	; (8007da4 <tcp_abandon+0xd4>)
 8007ce6:	4830      	ldr	r0, [pc, #192]	; (8007da8 <tcp_abandon+0xd8>)
 8007ce8:	f003 fb8e 	bl	800b408 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007cec:	7d23      	ldrb	r3, [r4, #20]
 8007cee:	2b0a      	cmp	r3, #10
 8007cf0:	d10a      	bne.n	8007d08 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	482d      	ldr	r0, [pc, #180]	; (8007dac <tcp_abandon+0xdc>)
 8007cf6:	f7ff fe53 	bl	80079a0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	2001      	movs	r0, #1
}
 8007cfe:	b002      	add	sp, #8
 8007d00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8007d04:	f7fe bdf4 	b.w	80068f0 <memp_free>
    seqno = pcb->snd_nxt;
 8007d08:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8007d0c:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007d10:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8007d14:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8007d18:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8007d1a:	b99b      	cbnz	r3, 8007d44 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8007d1c:	b13d      	cbz	r5, 8007d2e <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d1e:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <tcp_abandon+0xe0>)
 8007d20:	6813      	ldr	r3, [r2, #0]
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d106      	bne.n	8007d34 <tcp_abandon+0x64>
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8007d2e:	462e      	mov	r6, r5
 8007d30:	e00f      	b.n	8007d52 <tcp_abandon+0x82>
 8007d32:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0f8      	beq.n	8007d2a <tcp_abandon+0x5a>
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	4294      	cmp	r4, r2
 8007d3c:	d1f9      	bne.n	8007d32 <tcp_abandon+0x62>
 8007d3e:	68e2      	ldr	r2, [r4, #12]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e7f2      	b.n	8007d2a <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007d44:	4621      	mov	r1, r4
 8007d46:	481b      	ldr	r0, [pc, #108]	; (8007db4 <tcp_abandon+0xe4>)
 8007d48:	f7ff fe2a 	bl	80079a0 <tcp_pcb_remove>
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <tcp_abandon+0xe8>)
 8007d50:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007d52:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007d54:	b108      	cbz	r0, 8007d5a <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8007d56:	f7ff fb99 	bl	800748c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007d5a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007d5c:	b108      	cbz	r0, 8007d62 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8007d5e:	f7ff fb95 	bl	800748c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007d62:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007d64:	b108      	cbz	r0, 8007d6a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8007d66:	f7ff fb91 	bl	800748c <tcp_segs_free>
    if (send_rst) {
 8007d6a:	b146      	cbz	r6, 8007d7e <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007d6c:	8b23      	ldrh	r3, [r4, #24]
 8007d6e:	4622      	mov	r2, r4
 8007d70:	9500      	str	r5, [sp, #0]
 8007d72:	4651      	mov	r1, sl
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	4648      	mov	r0, r9
 8007d78:	1d23      	adds	r3, r4, #4
 8007d7a:	f002 f9a3 	bl	800a0c4 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8007d7e:	4621      	mov	r1, r4
 8007d80:	2001      	movs	r0, #1
 8007d82:	f7fe fdb5 	bl	80068f0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007d86:	b13f      	cbz	r7, 8007d98 <tcp_abandon+0xc8>
 8007d88:	f06f 010c 	mvn.w	r1, #12
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	463b      	mov	r3, r7
}
 8007d90:	b002      	add	sp, #8
 8007d92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007d96:	4718      	bx	r3
}
 8007d98:	b002      	add	sp, #8
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	bf00      	nop
 8007da0:	0800e77a 	.word	0x0800e77a
 8007da4:	0800e6fb 	.word	0x0800e6fb
 8007da8:	0800db1d 	.word	0x0800db1d
 8007dac:	24003bb0 	.word	0x24003bb0
 8007db0:	24003bac 	.word	0x24003bac
 8007db4:	24003ba0 	.word	0x24003ba0
 8007db8:	24003b9c 	.word	0x24003b9c

08007dbc <tcp_abort>:
  tcp_abandon(pcb, 1);
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	f7ff bf87 	b.w	8007cd0 <tcp_abandon>

08007dc2 <tcp_accept_null>:
  tcp_abort(pcb);
 8007dc2:	4608      	mov	r0, r1
{
 8007dc4:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8007dc6:	f7ff fff9 	bl	8007dbc <tcp_abort>
}
 8007dca:	f06f 000c 	mvn.w	r0, #12
 8007dce:	bd08      	pop	{r3, pc}

08007dd0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8007dd4:	b901      	cbnz	r1, 8007dd8 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007dd8:	680a      	ldr	r2, [r1, #0]
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	68cc      	ldr	r4, [r1, #12]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d102      	bne.n	8007de8 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8007de2:	4608      	mov	r0, r1
 8007de4:	f7ff ffea 	bl	8007dbc <tcp_abort>
      pcb = pcb->next;
 8007de8:	4621      	mov	r1, r4
 8007dea:	e7f3      	b.n	8007dd4 <tcp_netif_ip_addr_changed_pcblist+0x4>

08007dec <tcp_kill_state>:
{
 8007dec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007dee:	f1a0 0308 	sub.w	r3, r0, #8
{
 8007df2:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d906      	bls.n	8007e06 <tcp_kill_state+0x1a>
 8007df8:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <tcp_kill_state+0x4c>)
 8007dfa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007dfe:	490f      	ldr	r1, [pc, #60]	; (8007e3c <tcp_kill_state+0x50>)
 8007e00:	480f      	ldr	r0, [pc, #60]	; (8007e40 <tcp_kill_state+0x54>)
 8007e02:	f003 fb01 	bl	800b408 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <tcp_kill_state+0x58>)
  inactivity = 0;
 8007e08:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e0a:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8007e0c:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <tcp_kill_state+0x5c>)
 8007e10:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e12:	b921      	cbnz	r1, 8007e1e <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8007e14:	b170      	cbz	r0, 8007e34 <tcp_kill_state+0x48>
}
 8007e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8007e1a:	f7ff bf59 	b.w	8007cd0 <tcp_abandon>
    if (pcb->state == state) {
 8007e1e:	7d0b      	ldrb	r3, [r1, #20]
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d105      	bne.n	8007e30 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e24:	6a0b      	ldr	r3, [r1, #32]
 8007e26:	1aeb      	subs	r3, r5, r3
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	bf9c      	itt	ls
 8007e2c:	461a      	movls	r2, r3
 8007e2e:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e30:	68c9      	ldr	r1, [r1, #12]
 8007e32:	e7ee      	b.n	8007e12 <tcp_kill_state+0x26>
 8007e34:	bd38      	pop	{r3, r4, r5, pc}
 8007e36:	bf00      	nop
 8007e38:	0800e77a 	.word	0x0800e77a
 8007e3c:	0800e7db 	.word	0x0800e7db
 8007e40:	0800db1d 	.word	0x0800db1d
 8007e44:	24003ba0 	.word	0x24003ba0
 8007e48:	24003ba4 	.word	0x24003ba4

08007e4c <tcp_alloc>:
{
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e50:	2001      	movs	r0, #1
 8007e52:	f7fe fd1d 	bl	8006890 <memp_malloc>
 8007e56:	4d3b      	ldr	r5, [pc, #236]	; (8007f44 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8007e58:	4604      	mov	r4, r0
 8007e5a:	bb90      	cbnz	r0, 8007ec2 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e5c:	4b3a      	ldr	r3, [pc, #232]	; (8007f48 <tcp_alloc+0xfc>)
  inactivity = 0;
 8007e5e:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e60:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d158      	bne.n	8007f1a <tcp_alloc+0xce>
  if (inactive != NULL) {
 8007e68:	b114      	cbz	r4, 8007e70 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7ff ffa6 	bl	8007dbc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7fe fd0d 	bl	8006890 <memp_malloc>
    if (pcb == NULL) {
 8007e76:	4604      	mov	r4, r0
 8007e78:	bb18      	cbnz	r0, 8007ec2 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8007e7a:	2009      	movs	r0, #9
 8007e7c:	f7ff ffb6 	bl	8007dec <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e80:	2001      	movs	r0, #1
 8007e82:	f7fe fd05 	bl	8006890 <memp_malloc>
      if (pcb == NULL) {
 8007e86:	4604      	mov	r4, r0
 8007e88:	b9d8      	cbnz	r0, 8007ec2 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8007e8a:	2008      	movs	r0, #8
 8007e8c:	f7ff ffae 	bl	8007dec <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e90:	2001      	movs	r0, #1
 8007e92:	f7fe fcfd 	bl	8006890 <memp_malloc>
        if (pcb == NULL) {
 8007e96:	4604      	mov	r4, r0
 8007e98:	b998      	cbnz	r0, 8007ec2 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e9a:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e9e:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ea0:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007ea4:	bf0c      	ite	eq
 8007ea6:	4631      	moveq	r1, r6
 8007ea8:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d13c      	bne.n	8007f2a <tcp_alloc+0xde>
  if (inactive != NULL) {
 8007eb0:	b114      	cbz	r4, 8007eb8 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7ff ff82 	bl	8007dbc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7fe fce9 	bl	8006890 <memp_malloc>
  if (pcb != NULL) {
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	b348      	cbz	r0, 8007f16 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ec2:	2298      	movs	r2, #152	; 0x98
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f003 fa96 	bl	800b3f8 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007ecc:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 8007ed0:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8007ed4:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007ed6:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007ed8:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007eda:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8007edc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 8007ee0:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8007ee2:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8007ee6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8007eea:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007eec:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 8007eee:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007ef0:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007ef4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8007efa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 8007efe:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007f00:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 8007f04:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007f08:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007f0a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 8007f0e:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007f10:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <tcp_alloc+0x10c>)
 8007f12:	7812      	ldrb	r2, [r2, #0]
 8007f14:	7762      	strb	r2, [r4, #29]
}
 8007f16:	4620      	mov	r0, r4
 8007f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f1a:	6a1a      	ldr	r2, [r3, #32]
 8007f1c:	1a82      	subs	r2, r0, r2
 8007f1e:	428a      	cmp	r2, r1
 8007f20:	bf24      	itt	cs
 8007f22:	461c      	movcs	r4, r3
 8007f24:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	e79c      	b.n	8007e64 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8007f2a:	7d5f      	ldrb	r7, [r3, #21]
 8007f2c:	428f      	cmp	r7, r1
 8007f2e:	d807      	bhi.n	8007f40 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f30:	6a1a      	ldr	r2, [r3, #32]
 8007f32:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8007f36:	4282      	cmp	r2, r0
 8007f38:	bf22      	ittt	cs
 8007f3a:	4639      	movcs	r1, r7
 8007f3c:	4610      	movcs	r0, r2
 8007f3e:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	e7b3      	b.n	8007eac <tcp_alloc+0x60>
 8007f44:	24003ba4 	.word	0x24003ba4
 8007f48:	24003bb0 	.word	0x24003bb0
 8007f4c:	24003ba0 	.word	0x24003ba0
 8007f50:	08007ba1 	.word	0x08007ba1
 8007f54:	006ddd00 	.word	0x006ddd00
 8007f58:	2400061a 	.word	0x2400061a

08007f5c <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007f5c:	2040      	movs	r0, #64	; 0x40
 8007f5e:	f7ff bf75 	b.w	8007e4c <tcp_alloc>
	...

08007f64 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <tcp_next_iss+0x10>)
 8007f66:	4a04      	ldr	r2, [pc, #16]	; (8007f78 <tcp_next_iss+0x14>)
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	4410      	add	r0, r2
 8007f6e:	6018      	str	r0, [r3, #0]
}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	24000008 	.word	0x24000008
 8007f78:	24003ba4 	.word	0x24003ba4

08007f7c <tcp_eff_send_mss_impl>:
{
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8007f80:	4608      	mov	r0, r1
 8007f82:	f7fd fd1f 	bl	80059c4 <ip4_route>
    if (outif == NULL) {
 8007f86:	b130      	cbz	r0, 8007f96 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8007f88:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8007f8a:	b123      	cbz	r3, 8007f96 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007f8c:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	429c      	cmp	r4, r3
 8007f92:	bf28      	it	cs
 8007f94:	461c      	movcs	r4, r3
}
 8007f96:	4620      	mov	r0, r4
 8007f98:	bd10      	pop	{r4, pc}
	...

08007f9c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	b180      	cbz	r0, 8007fc6 <tcp_netif_ip_addr_changed+0x2a>
 8007fa4:	6803      	ldr	r3, [r0, #0]
 8007fa6:	b173      	cbz	r3, 8007fc6 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007fa8:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <tcp_netif_ip_addr_changed+0x40>)
 8007faa:	6819      	ldr	r1, [r3, #0]
 8007fac:	f7ff ff10 	bl	8007dd0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <tcp_netif_ip_addr_changed+0x44>)
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	6819      	ldr	r1, [r3, #0]
 8007fb6:	f7ff ff0b 	bl	8007dd0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007fba:	b125      	cbz	r5, 8007fc6 <tcp_netif_ip_addr_changed+0x2a>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b113      	cbz	r3, 8007fc6 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007fc0:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <tcp_netif_ip_addr_changed+0x48>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	b903      	cbnz	r3, 8007fc8 <tcp_netif_ip_addr_changed+0x2c>
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8007fcc:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007fce:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007fd0:	bf04      	itt	eq
 8007fd2:	6829      	ldreq	r1, [r5, #0]
 8007fd4:	6019      	streq	r1, [r3, #0]
{
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	e7f4      	b.n	8007fc4 <tcp_netif_ip_addr_changed+0x28>
 8007fda:	bf00      	nop
 8007fdc:	24003ba0 	.word	0x24003ba0
 8007fe0:	24003bac 	.word	0x24003bac
 8007fe4:	24003ba8 	.word	0x24003ba8

08007fe8 <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007fe8:	68c3      	ldr	r3, [r0, #12]
{
 8007fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007ff0:	8998      	ldrh	r0, [r3, #12]
{
 8007ff2:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007ff4:	f7fd f834 	bl	8005060 <lwip_htons>
 8007ff8:	07c2      	lsls	r2, r0, #31
 8007ffa:	d415      	bmi.n	8008028 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007ffc:	4e18      	ldr	r6, [pc, #96]	; (8008060 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8007ffe:	b1bc      	cbz	r4, 8008030 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008000:	68e7      	ldr	r7, [r4, #12]
 8008002:	6830      	ldr	r0, [r6, #0]
 8008004:	892b      	ldrh	r3, [r5, #8]
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	8922      	ldrh	r2, [r4, #8]
 800800a:	4403      	add	r3, r0
 800800c:	440a      	add	r2, r1
 800800e:	1a9a      	subs	r2, r3, r2
    while (next &&
 8008010:	2a00      	cmp	r2, #0
 8008012:	da10      	bge.n	8008036 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008014:	1a5b      	subs	r3, r3, r1
    if (next &&
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd0a      	ble.n	8008030 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800801a:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 800801c:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800801e:	b289      	uxth	r1, r1
 8008020:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008022:	f7fe ff23 	bl	8006e6c <pbuf_realloc>
 8008026:	e003      	b.n	8008030 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8008028:	4620      	mov	r0, r4
    next = NULL;
 800802a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800802c:	f7ff fa2e 	bl	800748c <tcp_segs_free>
    }
  }
  cseg->next = next;
 8008030:	602c      	str	r4, [r5, #0]
}
 8008032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008036:	89b8      	ldrh	r0, [r7, #12]
 8008038:	f7fd f812 	bl	8005060 <lwip_htons>
 800803c:	07c3      	lsls	r3, r0, #31
 800803e:	d509      	bpl.n	8008054 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008040:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008044:	2001      	movs	r0, #1
 8008046:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800804a:	f7fd f809 	bl	8005060 <lwip_htons>
 800804e:	4338      	orrs	r0, r7
 8008050:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8008054:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8008056:	4620      	mov	r0, r4
 8008058:	f7ff fa0a 	bl	8007470 <tcp_seg_free>
      next = next->next;
 800805c:	463c      	mov	r4, r7
 800805e:	e7ce      	b.n	8007ffe <tcp_oos_insert_segment+0x16>
 8008060:	24000640 	.word	0x24000640

08008064 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008064:	7d03      	ldrb	r3, [r0, #20]
 8008066:	2b03      	cmp	r3, #3
{
 8008068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800806e:	d806      	bhi.n	800807e <tcp_receive+0x1a>
 8008070:	4b89      	ldr	r3, [pc, #548]	; (8008298 <tcp_receive+0x234>)
 8008072:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008076:	4989      	ldr	r1, [pc, #548]	; (800829c <tcp_receive+0x238>)
 8008078:	4889      	ldr	r0, [pc, #548]	; (80082a0 <tcp_receive+0x23c>)
 800807a:	f003 f9c5 	bl	800b408 <iprintf>

  if (flags & TCP_ACK) {
 800807e:	4b89      	ldr	r3, [pc, #548]	; (80082a4 <tcp_receive+0x240>)
 8008080:	4e89      	ldr	r6, [pc, #548]	; (80082a8 <tcp_receive+0x244>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f013 0f10 	tst.w	r3, #16
 8008088:	f000 8180 	beq.w	800838c <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800808c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800808e:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008090:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008094:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008096:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008098:	2d00      	cmp	r5, #0
 800809a:	4d84      	ldr	r5, [pc, #528]	; (80082ac <tcp_receive+0x248>)
 800809c:	db0d      	blt.n	80080ba <tcp_receive+0x56>
 800809e:	4283      	cmp	r3, r0
 80080a0:	d103      	bne.n	80080aa <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	1acb      	subs	r3, r1, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	db07      	blt.n	80080ba <tcp_receive+0x56>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d11c      	bne.n	80080ea <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080b0:	4b7f      	ldr	r3, [pc, #508]	; (80082b0 <tcp_receive+0x24c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	89db      	ldrh	r3, [r3, #14]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d917      	bls.n	80080ea <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080ba:	4b7d      	ldr	r3, [pc, #500]	; (80082b0 <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080bc:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 80080c4:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080c6:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 80080c8:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080ca:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 80080ce:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80080d0:	bf38      	it	cc
 80080d2:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 80080d6:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80080da:	2f00      	cmp	r7, #0
 80080dc:	d13c      	bne.n	8008158 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 80080de:	b920      	cbnz	r0, 80080ea <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 80080e0:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 80080e2:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80080e6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80080ea:	682b      	ldr	r3, [r5, #0]
 80080ec:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 80080f0:	4f70      	ldr	r7, [pc, #448]	; (80082b4 <tcp_receive+0x250>)
 80080f2:	eba3 000e 	sub.w	r0, r3, lr
 80080f6:	2800      	cmp	r0, #0
 80080f8:	dc37      	bgt.n	800816a <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 80080fa:	486f      	ldr	r0, [pc, #444]	; (80082b8 <tcp_receive+0x254>)
 80080fc:	8800      	ldrh	r0, [r0, #0]
 80080fe:	2800      	cmp	r0, #0
 8008100:	f040 8476 	bne.w	80089f0 <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008104:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008108:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800810c:	4401      	add	r1, r0
 800810e:	428a      	cmp	r2, r1
 8008110:	f040 846e 	bne.w	80089f0 <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008114:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8008118:	2a00      	cmp	r2, #0
 800811a:	f2c0 8469 	blt.w	80089f0 <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800811e:	4573      	cmp	r3, lr
 8008120:	f040 8466 	bne.w	80089f0 <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008128:	1c53      	adds	r3, r2, #1
 800812a:	b2db      	uxtb	r3, r3
 800812c:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800812e:	bf38      	it	cc
 8008130:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008134:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008138:	2b03      	cmp	r3, #3
 800813a:	d911      	bls.n	8008160 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800813c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008140:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008142:	4413      	add	r3, r2
 8008144:	b29b      	uxth	r3, r3
 8008146:	429a      	cmp	r2, r3
 8008148:	d201      	bcs.n	800814e <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 800814a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800814e:	f8df a148 	ldr.w	sl, [pc, #328]	; 8008298 <tcp_receive+0x234>
 8008152:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80082a0 <tcp_receive+0x23c>
 8008156:	e10c      	b.n	8008372 <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 8008158:	2800      	cmp	r0, #0
 800815a:	d0c6      	beq.n	80080ea <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	e7c2      	b.n	80080e6 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8008160:	d1f5      	bne.n	800814e <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8008162:	4620      	mov	r0, r4
 8008164:	f002 f84d 	bl	800a202 <tcp_rexmit_fast>
 8008168:	e7f1      	b.n	800814e <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800816a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800816c:	1a9a      	subs	r2, r3, r2
 800816e:	2a00      	cmp	r2, #0
 8008170:	f300 808d 	bgt.w	800828e <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 8008174:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008176:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 800817a:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 800817c:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800817e:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 8008180:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 8008184:	bf48      	it	mi
 8008186:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 800818a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 800818e:	bf44      	itt	mi
 8008190:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008192:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 8008196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 800819a:	bf48      	it	mi
 800819c:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 80081a0:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80081a2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80081a4:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 80081a8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 80081ac:	d90f      	bls.n	80081ce <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 80081ae:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80081b2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80081b6:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80081b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80081ba:	bf9c      	itt	ls
 80081bc:	435b      	mulls	r3, r3
 80081be:	fb93 f3f2 	sdivls	r3, r3, r2
 80081c2:	4413      	add	r3, r2
 80081c4:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80081c6:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 80081c8:	bf38      	it	cc
 80081ca:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80081ce:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8008298 <tcp_receive+0x234>
 80081d2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80082a0 <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 80081d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081d8:	b943      	cbnz	r3, 80081ec <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 80081da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80081dc:	2300      	movs	r3, #0
 80081de:	2a00      	cmp	r2, #0
 80081e0:	d153      	bne.n	800828a <tcp_receive+0x226>
        pcb->rtime = -1;
 80081e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081e6:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80081e8:	76e3      	strb	r3, [r4, #27]
 80081ea:	e7b0      	b.n	800814e <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	6858      	ldr	r0, [r3, #4]
 80081f0:	f7fc ff39 	bl	8005066 <lwip_htonl>
 80081f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081f6:	4683      	mov	fp, r0
 80081f8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	8998      	ldrh	r0, [r3, #12]
 8008200:	f7fc ff2e 	bl	8005060 <lwip_htons>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	f010 0003 	ands.w	r0, r0, #3
 800820a:	eba8 0803 	sub.w	r8, r8, r3
 800820e:	bf18      	it	ne
 8008210:	2001      	movne	r0, #1
 8008212:	44d8      	add	r8, fp
 8008214:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8008216:	f1b8 0f00 	cmp.w	r8, #0
 800821a:	dcde      	bgt.n	80081da <tcp_receive+0x176>
        next = pcb->unacked;
 800821c:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008220:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8008224:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008228:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 800822c:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800822e:	f7fe fe8d 	bl	8006f4c <pbuf_clen>
 8008232:	4583      	cmp	fp, r0
 8008234:	d206      	bcs.n	8008244 <tcp_receive+0x1e0>
 8008236:	464b      	mov	r3, r9
 8008238:	f240 429e 	movw	r2, #1182	; 0x49e
 800823c:	491f      	ldr	r1, [pc, #124]	; (80082bc <tcp_receive+0x258>)
 800823e:	4650      	mov	r0, sl
 8008240:	f003 f8e2 	bl	800b408 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008244:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008248:	f7fe fe80 	bl	8006f4c <pbuf_clen>
 800824c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8008250:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008252:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8008254:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008258:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800825a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 800825e:	4640      	mov	r0, r8
        recv_acked += next->len;
 8008260:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8008262:	f7ff f905 	bl	8007470 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008266:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0b3      	beq.n	80081d6 <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800826e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1b0      	bne.n	80081d6 <tcp_receive+0x172>
 8008274:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1ad      	bne.n	80081d6 <tcp_receive+0x172>
 800827a:	464b      	mov	r3, r9
 800827c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008280:	490f      	ldr	r1, [pc, #60]	; (80082c0 <tcp_receive+0x25c>)
 8008282:	4650      	mov	r0, sl
 8008284:	f003 f8c0 	bl	800b408 <iprintf>
 8008288:	e7a5      	b.n	80081d6 <tcp_receive+0x172>
        pcb->rtime = 0;
 800828a:	8623      	strh	r3, [r4, #48]	; 0x30
 800828c:	e7ac      	b.n	80081e8 <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 800828e:	4620      	mov	r0, r4
 8008290:	f001 fd64 	bl	8009d5c <tcp_send_empty_ack>
 8008294:	e75b      	b.n	800814e <tcp_receive+0xea>
 8008296:	bf00      	nop
 8008298:	0800ec40 	.word	0x0800ec40
 800829c:	0800ec72 	.word	0x0800ec72
 80082a0:	0800db1d 	.word	0x0800db1d
 80082a4:	24000620 	.word	0x24000620
 80082a8:	24000640 	.word	0x24000640
 80082ac:	2400061c 	.word	0x2400061c
 80082b0:	24000648 	.word	0x24000648
 80082b4:	24000634 	.word	0x24000634
 80082b8:	24000656 	.word	0x24000656
 80082bc:	0800ec8b 	.word	0x0800ec8b
 80082c0:	0800ecb3 	.word	0x0800ecb3
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80082c4:	682a      	ldr	r2, [r5, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	9201      	str	r2, [sp, #4]
 80082ca:	6858      	ldr	r0, [r3, #4]
 80082cc:	f7fc fecb 	bl	8005066 <lwip_htonl>
 80082d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80082d2:	4683      	mov	fp, r0
 80082d4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	8998      	ldrh	r0, [r3, #12]
 80082dc:	f7fc fec0 	bl	8005060 <lwip_htons>
 80082e0:	9a01      	ldr	r2, [sp, #4]
 80082e2:	f010 0003 	ands.w	r0, r0, #3
 80082e6:	eba2 0808 	sub.w	r8, r2, r8
 80082ea:	bf18      	it	ne
 80082ec:	2001      	movne	r0, #1
 80082ee:	eba8 080b 	sub.w	r8, r8, fp
 80082f2:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80082f6:	f1b8 0f00 	cmp.w	r8, #0
 80082fa:	db3d      	blt.n	8008378 <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	2b00      	cmp	r3, #0
 8008304:	dc38      	bgt.n	8008378 <tcp_receive+0x314>
      next = pcb->unsent;
 8008306:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8008310:	b90b      	cbnz	r3, 8008316 <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 8008312:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008316:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800831a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800831e:	f7fe fe15 	bl	8006f4c <pbuf_clen>
 8008322:	4583      	cmp	fp, r0
 8008324:	d206      	bcs.n	8008334 <tcp_receive+0x2d0>
 8008326:	4653      	mov	r3, sl
 8008328:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800832c:	49ba      	ldr	r1, [pc, #744]	; (8008618 <tcp_receive+0x5b4>)
 800832e:	4648      	mov	r0, r9
 8008330:	f003 f86a 	bl	800b408 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008334:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008338:	f7fe fe08 	bl	8006f4c <pbuf_clen>
 800833c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008340:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008342:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8008344:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008348:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800834a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 800834e:	4640      	mov	r0, r8
      recv_acked += next->len;
 8008350:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8008352:	f7ff f88d 	bl	8007470 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008356:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800835a:	b153      	cbz	r3, 8008372 <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800835c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800835e:	b943      	cbnz	r3, 8008372 <tcp_receive+0x30e>
 8008360:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008362:	b933      	cbnz	r3, 8008372 <tcp_receive+0x30e>
 8008364:	4653      	mov	r3, sl
 8008366:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800836a:	49ac      	ldr	r1, [pc, #688]	; (800861c <tcp_receive+0x5b8>)
 800836c:	4648      	mov	r0, r9
 800836e:	f003 f84b 	bl	800b408 <iprintf>
    while (pcb->unsent != NULL &&
 8008372:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1a5      	bne.n	80082c4 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008378:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800837c:	883a      	ldrh	r2, [r7, #0]
 800837e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008380:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8008382:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008386:	2a00      	cmp	r2, #0
 8008388:	f040 8117 	bne.w	80085ba <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800838c:	4fa4      	ldr	r7, [pc, #656]	; (8008620 <tcp_receive+0x5bc>)
 800838e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008390:	8838      	ldrh	r0, [r7, #0]
 8008392:	2800      	cmp	r0, #0
 8008394:	f000 831f 	beq.w	80089d6 <tcp_receive+0x972>
 8008398:	7d23      	ldrb	r3, [r4, #20]
 800839a:	2b06      	cmp	r3, #6
 800839c:	f200 831b 	bhi.w	80089d6 <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80083a0:	6833      	ldr	r3, [r6, #0]
 80083a2:	1ad5      	subs	r5, r2, r3
 80083a4:	2d01      	cmp	r5, #1
 80083a6:	f100 815c 	bmi.w	8008662 <tcp_receive+0x5fe>
 80083aa:	f1c3 0101 	rsb	r1, r3, #1
 80083ae:	1a09      	subs	r1, r1, r0
 80083b0:	4411      	add	r1, r2
 80083b2:	2900      	cmp	r1, #0
 80083b4:	f300 8155 	bgt.w	8008662 <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80083b8:	4b9a      	ldr	r3, [pc, #616]	; (8008624 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 80083ba:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 80083bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80083c0:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	d106      	bne.n	80083d6 <tcp_receive+0x372>
 80083c8:	4b97      	ldr	r3, [pc, #604]	; (8008628 <tcp_receive+0x5c4>)
 80083ca:	f240 523c 	movw	r2, #1340	; 0x53c
 80083ce:	4997      	ldr	r1, [pc, #604]	; (800862c <tcp_receive+0x5c8>)
 80083d0:	4897      	ldr	r0, [pc, #604]	; (8008630 <tcp_receive+0x5cc>)
 80083d2:	f003 f819 	bl	800b408 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80083d6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80083da:	429d      	cmp	r5, r3
 80083dc:	dd06      	ble.n	80083ec <tcp_receive+0x388>
 80083de:	4b92      	ldr	r3, [pc, #584]	; (8008628 <tcp_receive+0x5c4>)
 80083e0:	f240 523d 	movw	r2, #1341	; 0x53d
 80083e4:	4993      	ldr	r1, [pc, #588]	; (8008634 <tcp_receive+0x5d0>)
 80083e6:	4892      	ldr	r0, [pc, #584]	; (8008630 <tcp_receive+0x5cc>)
 80083e8:	f003 f80e 	bl	800b408 <iprintf>
      if (inseg.p->len < off) {
 80083ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80083f0:	8943      	ldrh	r3, [r0, #10]
 80083f2:	429d      	cmp	r5, r3
 80083f4:	f340 812a 	ble.w	800864c <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80083f8:	8903      	ldrh	r3, [r0, #8]
 80083fa:	429d      	cmp	r5, r3
 80083fc:	dd06      	ble.n	800840c <tcp_receive+0x3a8>
 80083fe:	4b8a      	ldr	r3, [pc, #552]	; (8008628 <tcp_receive+0x5c4>)
 8008400:	f240 523f 	movw	r2, #1343	; 0x53f
 8008404:	498c      	ldr	r1, [pc, #560]	; (8008638 <tcp_receive+0x5d4>)
 8008406:	488a      	ldr	r0, [pc, #552]	; (8008630 <tcp_receive+0x5cc>)
 8008408:	f002 fffe 	bl	800b408 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800840c:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8008410:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008412:	8919      	ldrh	r1, [r3, #8]
 8008414:	1b4d      	subs	r5, r1, r5
 8008416:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 8008418:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800841c:	459a      	cmp	sl, r3
 800841e:	f300 80f1 	bgt.w	8008604 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008422:	f1ca 0100 	rsb	r1, sl, #0
 8008426:	4648      	mov	r0, r9
 8008428:	b209      	sxth	r1, r1
 800842a:	f7fe fbd7 	bl	8006bdc <pbuf_header>
 800842e:	b130      	cbz	r0, 800843e <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008430:	4b7d      	ldr	r3, [pc, #500]	; (8008628 <tcp_receive+0x5c4>)
 8008432:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008436:	4981      	ldr	r1, [pc, #516]	; (800863c <tcp_receive+0x5d8>)
 8008438:	487d      	ldr	r0, [pc, #500]	; (8008630 <tcp_receive+0x5cc>)
 800843a:	f002 ffe5 	bl	800b408 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800843e:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008442:	6833      	ldr	r3, [r6, #0]
 8008444:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008446:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008448:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008454:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008456:	6831      	ldr	r1, [r6, #0]
 8008458:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800845a:	1a8b      	subs	r3, r1, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	f2c0 82b4 	blt.w	80089ca <tcp_receive+0x966>
 8008462:	1c4b      	adds	r3, r1, #1
 8008464:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	1a1b      	subs	r3, r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	f300 82ad 	bgt.w	80089ca <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008470:	4291      	cmp	r1, r2
 8008472:	f040 81ca 	bne.w	800880a <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008476:	4d6b      	ldr	r5, [pc, #428]	; (8008624 <tcp_receive+0x5c0>)
 8008478:	68eb      	ldr	r3, [r5, #12]
 800847a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800847e:	8998      	ldrh	r0, [r3, #12]
 8008480:	f7fc fdee 	bl	8005060 <lwip_htons>
 8008484:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 8008488:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800848a:	bf18      	it	ne
 800848c:	2001      	movne	r0, #1
 800848e:	4440      	add	r0, r8
 8008490:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8008492:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8008494:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008496:	d241      	bcs.n	800851c <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008498:	68eb      	ldr	r3, [r5, #12]
 800849a:	8998      	ldrh	r0, [r3, #12]
 800849c:	f7fc fde0 	bl	8005060 <lwip_htons>
 80084a0:	07c2      	lsls	r2, r0, #31
 80084a2:	d510      	bpl.n	80084c6 <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80084a4:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80084a8:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80084ac:	4640      	mov	r0, r8
 80084ae:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80084b2:	f7fc fdd5 	bl	8005060 <lwip_htons>
 80084b6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80084ba:	f7fc fdd1 	bl	8005060 <lwip_htons>
 80084be:	ea40 0808 	orr.w	r8, r0, r8
 80084c2:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80084c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80084c8:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80084ca:	68eb      	ldr	r3, [r5, #12]
 80084cc:	8998      	ldrh	r0, [r3, #12]
 80084ce:	f7fc fdc7 	bl	8005060 <lwip_htons>
 80084d2:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 80084d4:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80084d6:	bf42      	ittt	mi
 80084d8:	892b      	ldrhmi	r3, [r5, #8]
 80084da:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80084de:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80084e0:	8929      	ldrh	r1, [r5, #8]
 80084e2:	f7fe fcc3 	bl	8006e6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80084e6:	68eb      	ldr	r3, [r5, #12]
 80084e8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80084ec:	8998      	ldrh	r0, [r3, #12]
 80084ee:	f7fc fdb7 	bl	8005060 <lwip_htons>
 80084f2:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80084f6:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 80084f8:	bf18      	it	ne
 80084fa:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80084fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80084fe:	4440      	add	r0, r8
 8008500:	b280      	uxth	r0, r0
 8008502:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008504:	4418      	add	r0, r3
 8008506:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008508:	4413      	add	r3, r2
 800850a:	4298      	cmp	r0, r3
 800850c:	d006      	beq.n	800851c <tcp_receive+0x4b8>
 800850e:	4b46      	ldr	r3, [pc, #280]	; (8008628 <tcp_receive+0x5c4>)
 8008510:	f240 527f 	movw	r2, #1407	; 0x57f
 8008514:	494a      	ldr	r1, [pc, #296]	; (8008640 <tcp_receive+0x5dc>)
 8008516:	4846      	ldr	r0, [pc, #280]	; (8008630 <tcp_receive+0x5cc>)
 8008518:	f002 ff76 	bl	800b408 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800851c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80ae 	beq.w	8008680 <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008524:	68eb      	ldr	r3, [r5, #12]
 8008526:	8998      	ldrh	r0, [r3, #12]
 8008528:	f7fc fd9a 	bl	8005060 <lwip_htons>
 800852c:	07c0      	lsls	r0, r0, #31
 800852e:	f100 80a4 	bmi.w	800867a <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8008532:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008536:	f1b8 0f00 	cmp.w	r8, #0
 800853a:	d03b      	beq.n	80085b4 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800853c:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8008540:	6830      	ldr	r0, [r6, #0]
 8008542:	883b      	ldrh	r3, [r7, #0]
 8008544:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008548:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800854c:	4403      	add	r3, r0
 800854e:	4411      	add	r1, r2
 8008550:	1a59      	subs	r1, r3, r1
            while (next &&
 8008552:	2900      	cmp	r1, #0
 8008554:	f280 80d1 	bge.w	80086fa <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8008558:	1a9b      	subs	r3, r3, r2
            if (next &&
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd2a      	ble.n	80085b4 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800855e:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008560:	1a12      	subs	r2, r2, r0
 8008562:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008564:	8998      	ldrh	r0, [r3, #12]
 8008566:	f7fc fd7b 	bl	8005060 <lwip_htons>
 800856a:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 800856c:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800856e:	bf42      	ittt	mi
 8008570:	892b      	ldrhmi	r3, [r5, #8]
 8008572:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008576:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008578:	8929      	ldrh	r1, [r5, #8]
 800857a:	f7fe fc77 	bl	8006e6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800857e:	68eb      	ldr	r3, [r5, #12]
 8008580:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8008584:	8998      	ldrh	r0, [r3, #12]
 8008586:	f7fc fd6b 	bl	8005060 <lwip_htons>
 800858a:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800858e:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8008590:	bf18      	it	ne
 8008592:	2001      	movne	r0, #1
 8008594:	4448      	add	r0, r9
 8008596:	b280      	uxth	r0, r0
 8008598:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800859a:	4418      	add	r0, r3
 800859c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	4298      	cmp	r0, r3
 80085a4:	d006      	beq.n	80085b4 <tcp_receive+0x550>
 80085a6:	4b20      	ldr	r3, [pc, #128]	; (8008628 <tcp_receive+0x5c4>)
 80085a8:	f240 52af 	movw	r2, #1455	; 0x5af
 80085ac:	4925      	ldr	r1, [pc, #148]	; (8008644 <tcp_receive+0x5e0>)
 80085ae:	4820      	ldr	r0, [pc, #128]	; (8008630 <tcp_receive+0x5cc>)
 80085b0:	f002 ff2a 	bl	800b408 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80085b4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80085b8:	e062      	b.n	8008680 <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80085ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085bc:	6829      	ldr	r1, [r5, #0]
 80085be:	1a5b      	subs	r3, r3, r1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f6bf aee3 	bge.w	800838c <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80085c6:	4b20      	ldr	r3, [pc, #128]	; (8008648 <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 80085c8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80085cc:	6819      	ldr	r1, [r3, #0]
 80085ce:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 80085d0:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 80085d4:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 80085d8:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 80085dc:	b289      	uxth	r1, r1
 80085de:	b20b      	sxth	r3, r1
      pcb->sa += m;
 80085e0:	4408      	add	r0, r1
      if (m < 0) {
 80085e2:	2b00      	cmp	r3, #0
      pcb->sa += m;
 80085e4:	b200      	sxth	r0, r0
        m = -m;
 80085e6:	bfb8      	it	lt
 80085e8:	4249      	neglt	r1, r1
      pcb->sa += m;
 80085ea:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 80085ec:	bfb8      	it	lt
 80085ee:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80085f0:	4413      	add	r3, r2
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80085f6:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80085fa:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	6363      	str	r3, [r4, #52]	; 0x34
 8008602:	e6c3      	b.n	800838c <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 8008604:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 8008608:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 800860c:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 8008610:	f8d9 9000 	ldr.w	r9, [r9]
 8008614:	e700      	b.n	8008418 <tcp_receive+0x3b4>
 8008616:	bf00      	nop
 8008618:	0800ec8b 	.word	0x0800ec8b
 800861c:	0800ecb3 	.word	0x0800ecb3
 8008620:	24000656 	.word	0x24000656
 8008624:	24000624 	.word	0x24000624
 8008628:	0800ec40 	.word	0x0800ec40
 800862c:	0800ecd3 	.word	0x0800ecd3
 8008630:	0800db1d 	.word	0x0800db1d
 8008634:	0800ece3 	.word	0x0800ece3
 8008638:	0800ecf2 	.word	0x0800ecf2
 800863c:	0800ed02 	.word	0x0800ed02
 8008640:	0800ed15 	.word	0x0800ed15
 8008644:	0800ed4c 	.word	0x0800ed4c
 8008648:	24003ba4 	.word	0x24003ba4
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800864c:	4269      	negs	r1, r5
 800864e:	b209      	sxth	r1, r1
 8008650:	f7fe fac4 	bl	8006bdc <pbuf_header>
 8008654:	2800      	cmp	r0, #0
 8008656:	f43f aef2 	beq.w	800843e <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 800865a:	4b9d      	ldr	r3, [pc, #628]	; (80088d0 <tcp_receive+0x86c>)
 800865c:	f240 5251 	movw	r2, #1361	; 0x551
 8008660:	e6e9      	b.n	8008436 <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8008666:	bfbe      	ittt	lt
 8008668:	7ea3      	ldrblt	r3, [r4, #26]
 800866a:	f043 0302 	orrlt.w	r3, r3, #2
 800866e:	76a3      	strblt	r3, [r4, #26]
 8008670:	e6f1      	b.n	8008456 <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 8008672:	6803      	ldr	r3, [r0, #0]
 8008674:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008676:	f7fe fefb 	bl	8007470 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800867a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800867c:	2800      	cmp	r0, #0
 800867e:	d1f8      	bne.n	8008672 <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008680:	883a      	ldrh	r2, [r7, #0]
 8008682:	6833      	ldr	r3, [r6, #0]
 8008684:	4413      	add	r3, r2
 8008686:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008688:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800868a:	4293      	cmp	r3, r2
 800868c:	d206      	bcs.n	800869c <tcp_receive+0x638>
 800868e:	4b90      	ldr	r3, [pc, #576]	; (80088d0 <tcp_receive+0x86c>)
 8008690:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008694:	498f      	ldr	r1, [pc, #572]	; (80088d4 <tcp_receive+0x870>)
 8008696:	4890      	ldr	r0, [pc, #576]	; (80088d8 <tcp_receive+0x874>)
 8008698:	f002 feb6 	bl	800b408 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800869c:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800869e:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 80086a0:	883a      	ldrh	r2, [r7, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80086a6:	f7fe fe79 	bl	800739c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80086aa:	686b      	ldr	r3, [r5, #4]
 80086ac:	891a      	ldrh	r2, [r3, #8]
 80086ae:	b11a      	cbz	r2, 80086b8 <tcp_receive+0x654>
          recv_data = inseg.p;
 80086b0:	4a8a      	ldr	r2, [pc, #552]	; (80088dc <tcp_receive+0x878>)
 80086b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086b8:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80086ba:	4f85      	ldr	r7, [pc, #532]	; (80088d0 <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086bc:	8998      	ldrh	r0, [r3, #12]
 80086be:	f7fc fccf 	bl	8005060 <lwip_htons>
 80086c2:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80086c4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80088e8 <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 80086c8:	bf48      	it	mi
 80086ca:	4a85      	ldrmi	r2, [pc, #532]	; (80088e0 <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80086cc:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80088d8 <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 80086d0:	bf42      	ittt	mi
 80086d2:	7813      	ldrbmi	r3, [r2, #0]
 80086d4:	f043 0320 	orrmi.w	r3, r3, #32
 80086d8:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80086da:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80086dc:	b125      	cbz	r5, 80086e8 <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80086de:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80086e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80086e2:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80086e4:	428b      	cmp	r3, r1
 80086e6:	d033      	beq.n	8008750 <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80086e8:	7ea3      	ldrb	r3, [r4, #26]
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	f140 8087 	bpl.w	80087fe <tcp_receive+0x79a>
 80086f0:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	e083      	b.n	8008802 <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80086fa:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80086fe:	f7fc fcaf 	bl	8005060 <lwip_htons>
 8008702:	07c1      	lsls	r1, r0, #31
 8008704:	d51d      	bpl.n	8008742 <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008706:	68eb      	ldr	r3, [r5, #12]
 8008708:	8998      	ldrh	r0, [r3, #12]
 800870a:	f7fc fca9 	bl	8005060 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800870e:	0782      	lsls	r2, r0, #30
 8008710:	d417      	bmi.n	8008742 <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008712:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008716:	2001      	movs	r0, #1
 8008718:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800871c:	f7fc fca0 	bl	8005060 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8008720:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008722:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8008726:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800872a:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800872e:	8998      	ldrh	r0, [r3, #12]
 8008730:	f7fc fc96 	bl	8005060 <lwip_htons>
 8008734:	f010 0003 	ands.w	r0, r0, #3
 8008738:	bf18      	it	ne
 800873a:	2001      	movne	r0, #1
 800873c:	4481      	add	r9, r0
 800873e:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8008742:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8008746:	4640      	mov	r0, r8
 8008748:	f7fe fe92 	bl	8007470 <tcp_seg_free>
              next = next->next;
 800874c:	46c8      	mov	r8, r9
 800874e:	e6f2      	b.n	8008536 <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008750:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008752:	8990      	ldrh	r0, [r2, #12]
 8008754:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008758:	f7fc fc82 	bl	8005060 <lwip_htons>
 800875c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008762:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008766:	bf18      	it	ne
 8008768:	2001      	movne	r0, #1
 800876a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800876c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800876e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008770:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008774:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008776:	8998      	ldrh	r0, [r3, #12]
 8008778:	f7fc fc72 	bl	8005060 <lwip_htons>
 800877c:	f010 0003 	ands.w	r0, r0, #3
 8008780:	bf18      	it	ne
 8008782:	2001      	movne	r0, #1
 8008784:	4458      	add	r0, fp
 8008786:	4582      	cmp	sl, r0
 8008788:	d206      	bcs.n	8008798 <tcp_receive+0x734>
 800878a:	463b      	mov	r3, r7
 800878c:	f240 52de 	movw	r2, #1502	; 0x5de
 8008790:	4641      	mov	r1, r8
 8008792:	4648      	mov	r0, r9
 8008794:	f002 fe38 	bl	800b408 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008798:	68eb      	ldr	r3, [r5, #12]
 800879a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800879e:	8998      	ldrh	r0, [r3, #12]
 80087a0:	f7fc fc5e 	bl	8005060 <lwip_htons>
 80087a4:	f010 0003 	ands.w	r0, r0, #3
 80087a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80087aa:	bf18      	it	ne
 80087ac:	2001      	movne	r0, #1
 80087ae:	4450      	add	r0, sl
 80087b0:	1a18      	subs	r0, r3, r0
 80087b2:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7fe fdf1 	bl	800739c <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80087ba:	6869      	ldr	r1, [r5, #4]
 80087bc:	890b      	ldrh	r3, [r1, #8]
 80087be:	b133      	cbz	r3, 80087ce <tcp_receive+0x76a>
            if (recv_data) {
 80087c0:	4b46      	ldr	r3, [pc, #280]	; (80088dc <tcp_receive+0x878>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	b1c8      	cbz	r0, 80087fa <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 80087c6:	f7fe fbdd 	bl	8006f84 <pbuf_cat>
            cseg->p = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80087ce:	68eb      	ldr	r3, [r5, #12]
 80087d0:	8998      	ldrh	r0, [r3, #12]
 80087d2:	f7fc fc45 	bl	8005060 <lwip_htons>
 80087d6:	07c0      	lsls	r0, r0, #31
 80087d8:	d509      	bpl.n	80087ee <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 80087da:	4a41      	ldr	r2, [pc, #260]	; (80088e0 <tcp_receive+0x87c>)
 80087dc:	7813      	ldrb	r3, [r2, #0]
 80087de:	f043 0320 	orr.w	r3, r3, #32
 80087e2:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80087e4:	7d23      	ldrb	r3, [r4, #20]
 80087e6:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80087e8:	bf04      	itt	eq
 80087ea:	2307      	moveq	r3, #7
 80087ec:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80087ee:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 80087f0:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 80087f2:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80087f4:	f7fe fe3c 	bl	8007470 <tcp_seg_free>
 80087f8:	e76f      	b.n	80086da <tcp_receive+0x676>
              recv_data = cseg->p;
 80087fa:	6019      	str	r1, [r3, #0]
 80087fc:	e7e5      	b.n	80087ca <tcp_receive+0x766>
        tcp_ack(pcb);
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8008804:	b003      	add	sp, #12
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 800880a:	4620      	mov	r0, r4
 800880c:	f001 faa6 	bl	8009d5c <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8008810:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008812:	b925      	cbnz	r5, 800881e <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008814:	4833      	ldr	r0, [pc, #204]	; (80088e4 <tcp_receive+0x880>)
 8008816:	f7fe fe43 	bl	80074a0 <tcp_seg_copy>
 800881a:	6720      	str	r0, [r4, #112]	; 0x70
 800881c:	e7f2      	b.n	8008804 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 800881e:	6833      	ldr	r3, [r6, #0]
 8008820:	f04f 0800 	mov.w	r8, #0
 8008824:	f103 3eff 	add.w	lr, r3, #4294967295
 8008828:	f103 0c01 	add.w	ip, r3, #1
 800882c:	68e8      	ldr	r0, [r5, #12]
 800882e:	6842      	ldr	r2, [r0, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d117      	bne.n	8008864 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 8008834:	482b      	ldr	r0, [pc, #172]	; (80088e4 <tcp_receive+0x880>)
 8008836:	892b      	ldrh	r3, [r5, #8]
 8008838:	8902      	ldrh	r2, [r0, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d9e2      	bls.n	8008804 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 800883e:	f7fe fe2f 	bl	80074a0 <tcp_seg_copy>
                if (cseg != NULL) {
 8008842:	2800      	cmp	r0, #0
 8008844:	d0de      	beq.n	8008804 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 8008846:	f1b8 0f00 	cmp.w	r8, #0
 800884a:	d009      	beq.n	8008860 <tcp_receive+0x7fc>
                    prev->next = cseg;
 800884c:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8008850:	4629      	mov	r1, r5
}
 8008852:	b003      	add	sp, #12
 8008854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8008858:	f7ff bbc6 	b.w	8007fe8 <tcp_oos_insert_segment>
 800885c:	460d      	mov	r5, r1
 800885e:	e7e5      	b.n	800882c <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 8008860:	6720      	str	r0, [r4, #112]	; 0x70
 8008862:	e7f5      	b.n	8008850 <tcp_receive+0x7ec>
              if (prev == NULL) {
 8008864:	f1b8 0f00 	cmp.w	r8, #0
 8008868:	d109      	bne.n	800887e <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800886a:	1a99      	subs	r1, r3, r2
 800886c:	2900      	cmp	r1, #0
 800886e:	da3d      	bge.n	80088ec <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8008870:	481c      	ldr	r0, [pc, #112]	; (80088e4 <tcp_receive+0x880>)
 8008872:	f7fe fe15 	bl	80074a0 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008876:	2800      	cmp	r0, #0
 8008878:	d0c4      	beq.n	8008804 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 800887a:	6720      	str	r0, [r4, #112]	; 0x70
 800887c:	e7e8      	b.n	8008850 <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800887e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8008882:	6849      	ldr	r1, [r1, #4]
 8008884:	ebae 0101 	sub.w	r1, lr, r1
 8008888:	2900      	cmp	r1, #0
 800888a:	db2f      	blt.n	80088ec <tcp_receive+0x888>
 800888c:	ebac 0102 	sub.w	r1, ip, r2
 8008890:	2900      	cmp	r1, #0
 8008892:	dc2b      	bgt.n	80088ec <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8008894:	4813      	ldr	r0, [pc, #76]	; (80088e4 <tcp_receive+0x880>)
 8008896:	f7fe fe03 	bl	80074a0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800889a:	4604      	mov	r4, r0
 800889c:	2800      	cmp	r0, #0
 800889e:	d0b1      	beq.n	8008804 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80088a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088a4:	6831      	ldr	r1, [r6, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	1a5b      	subs	r3, r3, r1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dd07      	ble.n	80088c4 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80088b4:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 80088b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80088ba:	b289      	uxth	r1, r1
 80088bc:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80088c0:	f7fe fad4 	bl	8006e6c <pbuf_realloc>
                    prev->next = cseg;
 80088c4:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80088c8:	4629      	mov	r1, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	e7c1      	b.n	8008852 <tcp_receive+0x7ee>
 80088ce:	bf00      	nop
 80088d0:	0800ec40 	.word	0x0800ec40
 80088d4:	0800ed87 	.word	0x0800ed87
 80088d8:	0800db1d 	.word	0x0800db1d
 80088dc:	24000638 	.word	0x24000638
 80088e0:	2400063c 	.word	0x2400063c
 80088e4:	24000624 	.word	0x24000624
 80088e8:	0800eda6 	.word	0x0800eda6
              if (next->next == NULL &&
 80088ec:	6829      	ldr	r1, [r5, #0]
 80088ee:	46a8      	mov	r8, r5
 80088f0:	2900      	cmp	r1, #0
 80088f2:	d1b3      	bne.n	800885c <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80088f4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd84      	ble.n	8008804 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088fa:	8980      	ldrh	r0, [r0, #12]
 80088fc:	f7fc fbb0 	bl	8005060 <lwip_htons>
 8008900:	07c2      	lsls	r2, r0, #31
 8008902:	f53f af7f 	bmi.w	8008804 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 8008906:	483d      	ldr	r0, [pc, #244]	; (80089fc <tcp_receive+0x998>)
 8008908:	f7fe fdca 	bl	80074a0 <tcp_seg_copy>
 800890c:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800890e:	2800      	cmp	r0, #0
 8008910:	f43f af78 	beq.w	8008804 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008914:	68eb      	ldr	r3, [r5, #12]
 8008916:	6831      	ldr	r1, [r6, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	892b      	ldrh	r3, [r5, #8]
 800891c:	4413      	add	r3, r2
 800891e:	1a5b      	subs	r3, r3, r1
 8008920:	2b00      	cmp	r3, #0
 8008922:	dd05      	ble.n	8008930 <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008924:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8008926:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008928:	b289      	uxth	r1, r1
 800892a:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800892c:	f7fe fa9e 	bl	8006e6c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008930:	6832      	ldr	r2, [r6, #0]
 8008932:	883b      	ldrh	r3, [r7, #0]
 8008934:	4413      	add	r3, r2
 8008936:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	2b00      	cmp	r3, #0
 8008940:	f77f af60 	ble.w	8008804 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	8998      	ldrh	r0, [r3, #12]
 800894a:	f7fc fb89 	bl	8005060 <lwip_htons>
 800894e:	07c3      	lsls	r3, r0, #31
 8008950:	d511      	bpl.n	8008976 <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8008958:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800895c:	4640      	mov	r0, r8
 800895e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008962:	f7fc fb7d 	bl	8005060 <lwip_htons>
 8008966:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800896a:	f7fc fb79 	bl	8005060 <lwip_htons>
 800896e:	ea40 0808 	orr.w	r8, r0, r8
 8008972:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008976:	6832      	ldr	r2, [r6, #0]
 8008978:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	1a89      	subs	r1, r1, r2
 800897e:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8008980:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008982:	4411      	add	r1, r2
 8008984:	b289      	uxth	r1, r1
 8008986:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008988:	f7fe fa70 	bl	8006e6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	891d      	ldrh	r5, [r3, #8]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	8998      	ldrh	r0, [r3, #12]
 8008994:	f7fc fb64 	bl	8005060 <lwip_htons>
 8008998:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800899c:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800899e:	bf18      	it	ne
 80089a0:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 80089a4:	4428      	add	r0, r5
 80089a6:	b280      	uxth	r0, r0
 80089a8:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089aa:	4418      	add	r0, r3
 80089ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089ae:	4413      	add	r3, r2
 80089b0:	4298      	cmp	r0, r3
 80089b2:	f43f af27 	beq.w	8008804 <tcp_receive+0x7a0>
 80089b6:	4b12      	ldr	r3, [pc, #72]	; (8008a00 <tcp_receive+0x99c>)
 80089b8:	f240 627b 	movw	r2, #1659	; 0x67b
 80089bc:	4911      	ldr	r1, [pc, #68]	; (8008a04 <tcp_receive+0x9a0>)
 80089be:	4812      	ldr	r0, [pc, #72]	; (8008a08 <tcp_receive+0x9a4>)
}
 80089c0:	b003      	add	sp, #12
 80089c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089c6:	f002 bd1f 	b.w	800b408 <iprintf>
      tcp_send_empty_ack(pcb);
 80089ca:	4620      	mov	r0, r4
}
 80089cc:	b003      	add	sp, #12
 80089ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 80089d2:	f001 b9c3 	b.w	8009d5c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80089d6:	6833      	ldr	r3, [r6, #0]
 80089d8:	1a99      	subs	r1, r3, r2
 80089da:	2900      	cmp	r1, #0
 80089dc:	db06      	blt.n	80089ec <tcp_receive+0x988>
 80089de:	3301      	adds	r3, #1
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f77f af0c 	ble.w	8008804 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 80089ec:	7ea3      	ldrb	r3, [r4, #26]
 80089ee:	e681      	b.n	80086f4 <tcp_receive+0x690>
        pcb->dupacks = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f6:	f7ff bbaa 	b.w	800814e <tcp_receive+0xea>
 80089fa:	bf00      	nop
 80089fc:	24000624 	.word	0x24000624
 8008a00:	0800ec40 	.word	0x0800ec40
 8008a04:	0800ed15 	.word	0x0800ed15
 8008a08:	0800db1d 	.word	0x0800db1d

08008a0c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <tcp_getoptbyte+0x30>)
 8008a0e:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <tcp_getoptbyte+0x34>)
 8008a10:	6819      	ldr	r1, [r3, #0]
{
 8008a12:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008a14:	b121      	cbz	r1, 8008a20 <tcp_getoptbyte+0x14>
 8008a16:	480b      	ldr	r0, [pc, #44]	; (8008a44 <tcp_getoptbyte+0x38>)
 8008a18:	8813      	ldrh	r3, [r2, #0]
 8008a1a:	8800      	ldrh	r0, [r0, #0]
 8008a1c:	4283      	cmp	r3, r0
 8008a1e:	d207      	bcs.n	8008a30 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008a20:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8008a22:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008a24:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008a26:	1c48      	adds	r0, r1, #1
 8008a28:	440b      	add	r3, r1
 8008a2a:	8010      	strh	r0, [r2, #0]
 8008a2c:	7d18      	ldrb	r0, [r3, #20]
 8008a2e:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008a30:	1c5c      	adds	r4, r3, #1
 8008a32:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8008a34:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008a36:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8008a38:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008a3a:	bd10      	pop	{r4, pc}
 8008a3c:	24000650 	.word	0x24000650
 8008a40:	24000644 	.word	0x24000644
 8008a44:	2400064c 	.word	0x2400064c
 8008a48:	24000648 	.word	0x24000648

08008a4c <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008a4e:	4d19      	ldr	r5, [pc, #100]	; (8008ab4 <tcp_parseopt.isra.1.part.2+0x68>)
 8008a50:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8008a52:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008a54:	4e18      	ldr	r6, [pc, #96]	; (8008ab8 <tcp_parseopt.isra.1.part.2+0x6c>)
 8008a56:	802b      	strh	r3, [r5, #0]
 8008a58:	8834      	ldrh	r4, [r6, #0]
 8008a5a:	882b      	ldrh	r3, [r5, #0]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d300      	bcc.n	8008a62 <tcp_parseopt.isra.1.part.2+0x16>
 8008a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8008a62:	f7ff ffd3 	bl	8008a0c <tcp_getoptbyte>
      switch (opt) {
 8008a66:	2801      	cmp	r0, #1
 8008a68:	d0f6      	beq.n	8008a58 <tcp_parseopt.isra.1.part.2+0xc>
 8008a6a:	d3f9      	bcc.n	8008a60 <tcp_parseopt.isra.1.part.2+0x14>
 8008a6c:	2802      	cmp	r0, #2
 8008a6e:	d117      	bne.n	8008aa0 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008a70:	f7ff ffcc 	bl	8008a0c <tcp_getoptbyte>
 8008a74:	2804      	cmp	r0, #4
 8008a76:	d1f3      	bne.n	8008a60 <tcp_parseopt.isra.1.part.2+0x14>
 8008a78:	882b      	ldrh	r3, [r5, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	daef      	bge.n	8008a60 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008a80:	f7ff ffc4 	bl	8008a0c <tcp_getoptbyte>
 8008a84:	0200      	lsls	r0, r0, #8
 8008a86:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8008a88:	f7ff ffc0 	bl	8008a0c <tcp_getoptbyte>
 8008a8c:	4320      	orrs	r0, r4
 8008a8e:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008a90:	1e43      	subs	r3, r0, #1
 8008a92:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008a96:	bf28      	it	cs
 8008a98:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8008a9c:	8038      	strh	r0, [r7, #0]
 8008a9e:	e7db      	b.n	8008a58 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008aa0:	f7ff ffb4 	bl	8008a0c <tcp_getoptbyte>
        if (data < 2) {
 8008aa4:	2801      	cmp	r0, #1
 8008aa6:	d9db      	bls.n	8008a60 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008aa8:	882b      	ldrh	r3, [r5, #0]
 8008aaa:	3b02      	subs	r3, #2
 8008aac:	4418      	add	r0, r3
 8008aae:	8028      	strh	r0, [r5, #0]
 8008ab0:	e7d2      	b.n	8008a58 <tcp_parseopt.isra.1.part.2+0xc>
 8008ab2:	bf00      	nop
 8008ab4:	24000644 	.word	0x24000644
 8008ab8:	24000654 	.word	0x24000654

08008abc <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8008abc:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <tcp_input_delayed_close+0x38>)
{
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8008ac2:	7818      	ldrb	r0, [r3, #0]
 8008ac4:	f010 0010 	ands.w	r0, r0, #16
 8008ac8:	d012      	beq.n	8008af0 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008aca:	7ea3      	ldrb	r3, [r4, #26]
 8008acc:	06db      	lsls	r3, r3, #27
 8008ace:	d406      	bmi.n	8008ade <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008ad0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008ad4:	b11b      	cbz	r3, 8008ade <tcp_input_delayed_close+0x22>
 8008ad6:	f06f 010e 	mvn.w	r1, #14
 8008ada:	6920      	ldr	r0, [r4, #16]
 8008adc:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4805      	ldr	r0, [pc, #20]	; (8008af8 <tcp_input_delayed_close+0x3c>)
 8008ae2:	f7fe ff5d 	bl	80079a0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f7fd ff01 	bl	80068f0 <memp_free>
 8008aee:	2001      	movs	r0, #1
}
 8008af0:	bd10      	pop	{r4, pc}
 8008af2:	bf00      	nop
 8008af4:	2400063c 	.word	0x2400063c
 8008af8:	24003ba0 	.word	0x24003ba0

08008afc <tcp_input>:
{
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8008b00:	6843      	ldr	r3, [r0, #4]
{
 8008b02:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8008b04:	4e9e      	ldr	r6, [pc, #632]	; (8008d80 <tcp_input+0x284>)
{
 8008b06:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8008b08:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008b0a:	8943      	ldrh	r3, [r0, #10]
 8008b0c:	2b13      	cmp	r3, #19
 8008b0e:	f240 81b2 	bls.w	8008e76 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b12:	4f9c      	ldr	r7, [pc, #624]	; (8008d84 <tcp_input+0x288>)
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	46b8      	mov	r8, r7
 8008b18:	6978      	ldr	r0, [r7, #20]
 8008b1a:	f7fd f8ca 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 8008b1e:	4604      	mov	r4, r0
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f040 81a8 	bne.w	8008e76 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b2c:	2be0      	cmp	r3, #224	; 0xe0
 8008b2e:	f000 81a2 	beq.w	8008e76 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008b32:	6833      	ldr	r3, [r6, #0]
 8008b34:	8998      	ldrh	r0, [r3, #12]
 8008b36:	f7fc fa93 	bl	8005060 <lwip_htons>
 8008b3a:	0a81      	lsrs	r1, r0, #10
 8008b3c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008b40:	2913      	cmp	r1, #19
 8008b42:	f240 8198 	bls.w	8008e76 <tcp_input+0x37a>
 8008b46:	b289      	uxth	r1, r1
 8008b48:	892b      	ldrh	r3, [r5, #8]
 8008b4a:	428b      	cmp	r3, r1
 8008b4c:	f0c0 8193 	bcc.w	8008e76 <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008b50:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8008b54:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008b56:	4a8c      	ldr	r2, [pc, #560]	; (8008d88 <tcp_input+0x28c>)
 8008b58:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8008b5a:	4f8c      	ldr	r7, [pc, #560]	; (8008d8c <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 8008b5c:	4288      	cmp	r0, r1
 8008b5e:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 8008b60:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008b62:	8013      	strh	r3, [r2, #0]
 8008b64:	4c8a      	ldr	r4, [pc, #552]	; (8008d90 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8008b66:	d344      	bcc.n	8008bf2 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008b68:	4249      	negs	r1, r1
 8008b6a:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8008b6c:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008b6e:	f7fe f835 	bl	8006bdc <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b72:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8008b74:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b78:	f8df b268 	ldr.w	fp, [pc, #616]	; 8008de4 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b7c:	8820      	ldrh	r0, [r4, #0]
 8008b7e:	f7fc fa6f 	bl	8005060 <lwip_htons>
 8008b82:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b84:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b86:	4f83      	ldr	r7, [pc, #524]	; (8008d94 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b88:	8860      	ldrh	r0, [r4, #2]
 8008b8a:	f7fc fa69 	bl	8005060 <lwip_htons>
 8008b8e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b90:	6834      	ldr	r4, [r6, #0]
 8008b92:	6860      	ldr	r0, [r4, #4]
 8008b94:	f7fc fa67 	bl	8005066 <lwip_htonl>
 8008b98:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b9a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b9c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008ba0:	68a0      	ldr	r0, [r4, #8]
 8008ba2:	f7fc fa60 	bl	8005066 <lwip_htonl>
 8008ba6:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008ba8:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008baa:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008bac:	89e0      	ldrh	r0, [r4, #14]
 8008bae:	f7fc fa57 	bl	8005060 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8008bb2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008bb4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8008bb6:	8998      	ldrh	r0, [r3, #12]
 8008bb8:	f7fc fa52 	bl	8005060 <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008bbc:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8008bbe:	b2c0      	uxtb	r0, r0
 8008bc0:	4a75      	ldr	r2, [pc, #468]	; (8008d98 <tcp_input+0x29c>)
 8008bc2:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008bc6:	f010 0003 	ands.w	r0, r0, #3
 8008bca:	9203      	str	r2, [sp, #12]
 8008bcc:	bf18      	it	ne
 8008bce:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 8008bd0:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008bd2:	4b72      	ldr	r3, [pc, #456]	; (8008d9c <tcp_input+0x2a0>)
 8008bd4:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd6:	4972      	ldr	r1, [pc, #456]	; (8008da0 <tcp_input+0x2a4>)
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	680c      	ldr	r4, [r1, #0]
 8008bdc:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008bde:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	d140      	bne.n	8008c66 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008be4:	4b6f      	ldr	r3, [pc, #444]	; (8008da4 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008be6:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8008da8 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bea:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008bec:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8008de8 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bf0:	e148      	b.n	8008e84 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b92b      	cbnz	r3, 8008c02 <tcp_input+0x106>
 8008bf6:	4b6c      	ldr	r3, [pc, #432]	; (8008da8 <tcp_input+0x2ac>)
 8008bf8:	22b2      	movs	r2, #178	; 0xb2
 8008bfa:	496c      	ldr	r1, [pc, #432]	; (8008dac <tcp_input+0x2b0>)
 8008bfc:	486c      	ldr	r0, [pc, #432]	; (8008db0 <tcp_input+0x2b4>)
 8008bfe:	f002 fc03 	bl	800b408 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8008c02:	f06f 0113 	mvn.w	r1, #19
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7fd ffe8 	bl	8006bdc <pbuf_header>
    tcphdr_opt1len = p->len;
 8008c0c:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008c0e:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008c10:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8008c12:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008c14:	881c      	ldrh	r4, [r3, #0]
 8008c16:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008c18:	4249      	negs	r1, r1
 8008c1a:	b209      	sxth	r1, r1
 8008c1c:	f7fd ffde 	bl	8006bdc <pbuf_header>
    if (opt2len > p->next->len) {
 8008c20:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008c22:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8008c24:	8943      	ldrh	r3, [r0, #10]
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	f0c0 8125 	bcc.w	8008e76 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8008c2c:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008c2e:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008c30:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008c32:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008c34:	f7fd ffd2 	bl	8006bdc <pbuf_header>
    p->tot_len -= opt2len;
 8008c38:	892b      	ldrh	r3, [r5, #8]
 8008c3a:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008c3c:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8008c3e:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008c40:	b12b      	cbz	r3, 8008c4e <tcp_input+0x152>
 8008c42:	4b59      	ldr	r3, [pc, #356]	; (8008da8 <tcp_input+0x2ac>)
 8008c44:	22cf      	movs	r2, #207	; 0xcf
 8008c46:	495b      	ldr	r1, [pc, #364]	; (8008db4 <tcp_input+0x2b8>)
 8008c48:	4859      	ldr	r0, [pc, #356]	; (8008db0 <tcp_input+0x2b4>)
 8008c4a:	f002 fbdd 	bl	800b408 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	892a      	ldrh	r2, [r5, #8]
 8008c52:	891b      	ldrh	r3, [r3, #8]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d08c      	beq.n	8008b72 <tcp_input+0x76>
 8008c58:	4b53      	ldr	r3, [pc, #332]	; (8008da8 <tcp_input+0x2ac>)
 8008c5a:	22d0      	movs	r2, #208	; 0xd0
 8008c5c:	4956      	ldr	r1, [pc, #344]	; (8008db8 <tcp_input+0x2bc>)
 8008c5e:	4854      	ldr	r0, [pc, #336]	; (8008db0 <tcp_input+0x2b4>)
 8008c60:	f002 fbd2 	bl	800b408 <iprintf>
 8008c64:	e785      	b.n	8008b72 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008c66:	7d23      	ldrb	r3, [r4, #20]
 8008c68:	b92b      	cbnz	r3, 8008c76 <tcp_input+0x17a>
 8008c6a:	4b4f      	ldr	r3, [pc, #316]	; (8008da8 <tcp_input+0x2ac>)
 8008c6c:	22e2      	movs	r2, #226	; 0xe2
 8008c6e:	4953      	ldr	r1, [pc, #332]	; (8008dbc <tcp_input+0x2c0>)
 8008c70:	484f      	ldr	r0, [pc, #316]	; (8008db0 <tcp_input+0x2b4>)
 8008c72:	f002 fbc9 	bl	800b408 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008c76:	7d23      	ldrb	r3, [r4, #20]
 8008c78:	2b0a      	cmp	r3, #10
 8008c7a:	d105      	bne.n	8008c88 <tcp_input+0x18c>
 8008c7c:	4b4a      	ldr	r3, [pc, #296]	; (8008da8 <tcp_input+0x2ac>)
 8008c7e:	22e3      	movs	r2, #227	; 0xe3
 8008c80:	494f      	ldr	r1, [pc, #316]	; (8008dc0 <tcp_input+0x2c4>)
 8008c82:	484b      	ldr	r0, [pc, #300]	; (8008db0 <tcp_input+0x2b4>)
 8008c84:	f002 fbc0 	bl	800b408 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c88:	7d23      	ldrb	r3, [r4, #20]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <tcp_input+0x19e>
 8008c8e:	4b46      	ldr	r3, [pc, #280]	; (8008da8 <tcp_input+0x2ac>)
 8008c90:	22e4      	movs	r2, #228	; 0xe4
 8008c92:	494c      	ldr	r1, [pc, #304]	; (8008dc4 <tcp_input+0x2c8>)
 8008c94:	4846      	ldr	r0, [pc, #280]	; (8008db0 <tcp_input+0x2b4>)
 8008c96:	f002 fbb7 	bl	800b408 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8008c9a:	6832      	ldr	r2, [r6, #0]
 8008c9c:	8b21      	ldrh	r1, [r4, #24]
 8008c9e:	8813      	ldrh	r3, [r2, #0]
 8008ca0:	4299      	cmp	r1, r3
 8008ca2:	68e3      	ldr	r3, [r4, #12]
 8008ca4:	d169      	bne.n	8008d7a <tcp_input+0x27e>
 8008ca6:	8ae1      	ldrh	r1, [r4, #22]
 8008ca8:	8852      	ldrh	r2, [r2, #2]
 8008caa:	4291      	cmp	r1, r2
 8008cac:	d165      	bne.n	8008d7a <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8008cae:	6861      	ldr	r1, [r4, #4]
 8008cb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cb4:	4291      	cmp	r1, r2
 8008cb6:	d160      	bne.n	8008d7a <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cb8:	6821      	ldr	r1, [r4, #0]
 8008cba:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8008cbe:	4291      	cmp	r1, r2
 8008cc0:	d15b      	bne.n	8008d7a <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	f040 8406 	bne.w	80094d4 <tcp_input+0x9d8>
 8008cc8:	4b37      	ldr	r3, [pc, #220]	; (8008da8 <tcp_input+0x2ac>)
 8008cca:	22ec      	movs	r2, #236	; 0xec
 8008ccc:	493e      	ldr	r1, [pc, #248]	; (8008dc8 <tcp_input+0x2cc>)
 8008cce:	4838      	ldr	r0, [pc, #224]	; (8008db0 <tcp_input+0x2b4>)
 8008cd0:	f002 fb9a 	bl	800b408 <iprintf>
      if (prev != NULL) {
 8008cd4:	f1ba 0f00 	cmp.w	sl, #0
 8008cd8:	d007      	beq.n	8008cea <tcp_input+0x1ee>
        prev->next = pcb->next;
 8008cda:	68e3      	ldr	r3, [r4, #12]
 8008cdc:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8008ce0:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 8008ce4:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 8008ce8:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008cea:	68e3      	ldr	r3, [r4, #12]
 8008cec:	429c      	cmp	r4, r3
 8008cee:	d105      	bne.n	8008cfc <tcp_input+0x200>
 8008cf0:	4b2d      	ldr	r3, [pc, #180]	; (8008da8 <tcp_input+0x2ac>)
 8008cf2:	22f4      	movs	r2, #244	; 0xf4
 8008cf4:	4935      	ldr	r1, [pc, #212]	; (8008dcc <tcp_input+0x2d0>)
 8008cf6:	482e      	ldr	r0, [pc, #184]	; (8008db0 <tcp_input+0x2b4>)
 8008cf8:	f002 fb86 	bl	800b408 <iprintf>
    inseg.next = NULL;
 8008cfc:	4b34      	ldr	r3, [pc, #208]	; (8008dd0 <tcp_input+0x2d4>)
 8008cfe:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 8008d00:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 8008d02:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008d04:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8008d06:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8008d08:	4832      	ldr	r0, [pc, #200]	; (8008dd4 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 8008d0a:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 8008d0c:	605d      	str	r5, [r3, #4]
 8008d0e:	4680      	mov	r8, r0
    recv_data = NULL;
 8008d10:	4b31      	ldr	r3, [pc, #196]	; (8008dd8 <tcp_input+0x2dc>)
    recv_acked = 0;
 8008d12:	4932      	ldr	r1, [pc, #200]	; (8008ddc <tcp_input+0x2e0>)
    recv_data = NULL;
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	469a      	mov	sl, r3
    recv_flags = 0;
 8008d18:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 8008d1a:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8008d1c:	9a03      	ldr	r2, [sp, #12]
 8008d1e:	9105      	str	r1, [sp, #20]
 8008d20:	7812      	ldrb	r2, [r2, #0]
 8008d22:	f012 0f08 	tst.w	r2, #8
 8008d26:	d003      	beq.n	8008d30 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8008d28:	7b6b      	ldrb	r3, [r5, #13]
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8008d30:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008d32:	4d2b      	ldr	r5, [pc, #172]	; (8008de0 <tcp_input+0x2e4>)
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 8137 	beq.w	8008fa8 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7fe ff42 	bl	8007bc4 <tcp_process_refused_data>
 8008d40:	300d      	adds	r0, #13
 8008d42:	d008      	beq.n	8008d56 <tcp_input+0x25a>
 8008d44:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 812e 	beq.w	8008fa8 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8129 	beq.w	8008fa8 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8008d56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d58:	b913      	cbnz	r3, 8008d60 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fffe 	bl	8009d5c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8008d60:	2400      	movs	r4, #0
 8008d62:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8008d64:	4d1a      	ldr	r5, [pc, #104]	; (8008dd0 <tcp_input+0x2d4>)
    recv_data = NULL;
 8008d66:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8008d6a:	6868      	ldr	r0, [r5, #4]
 8008d6c:	b110      	cbz	r0, 8008d74 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8008d6e:	f7fd ff3b 	bl	8006be8 <pbuf_free>
      inseg.p = NULL;
 8008d72:	606c      	str	r4, [r5, #4]
}
 8008d74:	b009      	add	sp, #36	; 0x24
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d7a:	46a2      	mov	sl, r4
 8008d7c:	461c      	mov	r4, r3
 8008d7e:	e72f      	b.n	8008be0 <tcp_input+0xe4>
 8008d80:	24000648 	.word	0x24000648
 8008d84:	24000678 	.word	0x24000678
 8008d88:	24000654 	.word	0x24000654
 8008d8c:	24000650 	.word	0x24000650
 8008d90:	2400064c 	.word	0x2400064c
 8008d94:	2400061c 	.word	0x2400061c
 8008d98:	24000620 	.word	0x24000620
 8008d9c:	24000656 	.word	0x24000656
 8008da0:	24003ba0 	.word	0x24003ba0
 8008da4:	24003bb0 	.word	0x24003bb0
 8008da8:	0800ec40 	.word	0x0800ec40
 8008dac:	0800ea8a 	.word	0x0800ea8a
 8008db0:	0800db1d 	.word	0x0800db1d
 8008db4:	0800ea9a 	.word	0x0800ea9a
 8008db8:	0800eaa6 	.word	0x0800eaa6
 8008dbc:	0800eac5 	.word	0x0800eac5
 8008dc0:	0800eaec 	.word	0x0800eaec
 8008dc4:	0800eb16 	.word	0x0800eb16
 8008dc8:	0800eb3d 	.word	0x0800eb3d
 8008dcc:	0800eb68 	.word	0x0800eb68
 8008dd0:	24000624 	.word	0x24000624
 8008dd4:	2400063c 	.word	0x2400063c
 8008dd8:	24000638 	.word	0x24000638
 8008ddc:	24000634 	.word	0x24000634
 8008de0:	24003bb4 	.word	0x24003bb4
 8008de4:	24000640 	.word	0x24000640
 8008de8:	0800eb92 	.word	0x0800eb92
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008dec:	7d23      	ldrb	r3, [r4, #20]
 8008dee:	2b0a      	cmp	r3, #10
 8008df0:	d005      	beq.n	8008dfe <tcp_input+0x302>
 8008df2:	4653      	mov	r3, sl
 8008df4:	22fe      	movs	r2, #254	; 0xfe
 8008df6:	4649      	mov	r1, r9
 8008df8:	489d      	ldr	r0, [pc, #628]	; (8009070 <tcp_input+0x574>)
 8008dfa:	f002 fb05 	bl	800b408 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8008dfe:	6833      	ldr	r3, [r6, #0]
 8008e00:	8b22      	ldrh	r2, [r4, #24]
 8008e02:	8818      	ldrh	r0, [r3, #0]
 8008e04:	4290      	cmp	r0, r2
 8008e06:	d13c      	bne.n	8008e82 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8008e08:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8008e0a:	885a      	ldrh	r2, [r3, #2]
 8008e0c:	428a      	cmp	r2, r1
 8008e0e:	d138      	bne.n	8008e82 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8008e10:	6861      	ldr	r1, [r4, #4]
 8008e12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008e16:	4299      	cmp	r1, r3
 8008e18:	d133      	bne.n	8008e82 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008e20:	4299      	cmp	r1, r3
 8008e22:	d12e      	bne.n	8008e82 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	0759      	lsls	r1, r3, #29
 8008e2a:	d424      	bmi.n	8008e76 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8008e2c:	079e      	lsls	r6, r3, #30
 8008e2e:	d513      	bpl.n	8008e58 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008e30:	f8db 1000 	ldr.w	r1, [fp]
 8008e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e36:	1acb      	subs	r3, r1, r3
 8008e38:	d413      	bmi.n	8008e62 <tcp_input+0x366>
 8008e3a:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8008e3c:	1b9b      	subs	r3, r3, r6
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dc0f      	bgt.n	8008e62 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	881c      	ldrh	r4, [r3, #0]
 8008e46:	9001      	str	r0, [sp, #4]
 8008e48:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e4a:	4b8a      	ldr	r3, [pc, #552]	; (8009074 <tcp_input+0x578>)
 8008e4c:	4421      	add	r1, r4
 8008e4e:	1d1a      	adds	r2, r3, #4
 8008e50:	6838      	ldr	r0, [r7, #0]
 8008e52:	f001 f937 	bl	800a0c4 <tcp_rst>
 8008e56:	e00e      	b.n	8008e76 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8008e58:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8008e5a:	bf42      	ittt	mi
 8008e5c:	4b86      	ldrmi	r3, [pc, #536]	; (8009078 <tcp_input+0x57c>)
 8008e5e:	681b      	ldrmi	r3, [r3, #0]
 8008e60:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8008e62:	9b04      	ldr	r3, [sp, #16]
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b133      	cbz	r3, 8008e76 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8008e68:	7ea3      	ldrb	r3, [r4, #26]
 8008e6a:	f043 0302 	orr.w	r3, r3, #2
 8008e6e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 ffa9 	bl	8009dc8 <tcp_output>
  pbuf_free(p);
 8008e76:	4628      	mov	r0, r5
}
 8008e78:	b009      	add	sp, #36	; 0x24
 8008e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8008e7e:	f7fd beb3 	b.w	8006be8 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e82:	68e4      	ldr	r4, [r4, #12]
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	d1b1      	bne.n	8008dec <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e88:	4b7c      	ldr	r3, [pc, #496]	; (800907c <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8008e8a:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e8c:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008e8e:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e92:	4689      	mov	r9, r1
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	d111      	bne.n	8008ebe <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008e9a:	8990      	ldrh	r0, [r2, #12]
 8008e9c:	f7fc f8e0 	bl	8005060 <lwip_htons>
 8008ea0:	0743      	lsls	r3, r0, #29
 8008ea2:	d4e8      	bmi.n	8008e76 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ea4:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ea6:	9a04      	ldr	r2, [sp, #16]
 8008ea8:	f8db 1000 	ldr.w	r1, [fp]
 8008eac:	8810      	ldrh	r0, [r2, #0]
 8008eae:	881a      	ldrh	r2, [r3, #0]
 8008eb0:	4401      	add	r1, r0
 8008eb2:	9201      	str	r2, [sp, #4]
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4b6e      	ldr	r3, [pc, #440]	; (8009074 <tcp_input+0x578>)
 8008eba:	1d1a      	adds	r2, r3, #4
 8008ebc:	e7c8      	b.n	8008e50 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8008ebe:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8008ec2:	8853      	ldrh	r3, [r2, #2]
 8008ec4:	4283      	cmp	r3, r0
 8008ec6:	d107      	bne.n	8008ed8 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008ec8:	f8d9 3000 	ldr.w	r3, [r9]
 8008ecc:	4573      	cmp	r3, lr
 8008ece:	f000 82dd 	beq.w	800948c <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 82da 	beq.w	800948c <tcp_input+0x990>
 8008ed8:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008eda:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8008ede:	e7d9      	b.n	8008e94 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8008ee0:	0798      	lsls	r0, r3, #30
 8008ee2:	d5c8      	bpl.n	8008e76 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8008ee4:	f899 0015 	ldrb.w	r0, [r9, #21]
 8008ee8:	f7fe ffb0 	bl	8007e4c <tcp_alloc>
    if (npcb == NULL) {
 8008eec:	4604      	mov	r4, r0
 8008eee:	b950      	cbnz	r0, 8008f06 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008ef0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0be      	beq.n	8008e76 <tcp_input+0x37a>
 8008ef8:	4601      	mov	r1, r0
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008f02:	4798      	blx	r3
 8008f04:	e7b7      	b.n	8008e76 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008f06:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8008f0a:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008f0c:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008f0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008f12:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008f14:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8008f18:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008f1a:	7813      	ldrb	r3, [r2, #0]
 8008f1c:	7852      	ldrb	r2, [r2, #1]
 8008f1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f22:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008f24:	2303      	movs	r3, #3
 8008f26:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008f28:	f8db 3000 	ldr.w	r3, [fp]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008f30:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008f32:	f7ff f817 	bl	8007f64 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008f36:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8008f3a:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008f3c:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8008f3e:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8008f40:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008f42:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 8008f48:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8008f4a:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8008f4c:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008f50:	f899 3008 	ldrb.w	r3, [r9, #8]
 8008f54:	f003 030c 	and.w	r3, r3, #12
 8008f58:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8008f5a:	4b49      	ldr	r3, [pc, #292]	; (8009080 <tcp_input+0x584>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	601c      	str	r4, [r3, #0]
 8008f60:	60e2      	str	r2, [r4, #12]
 8008f62:	f001 fa51 	bl	800a408 <tcp_timer_needed>
 8008f66:	4b47      	ldr	r3, [pc, #284]	; (8009084 <tcp_input+0x588>)
 8008f68:	2201      	movs	r2, #1
 8008f6a:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8008f6c:	9b06      	ldr	r3, [sp, #24]
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	b11b      	cbz	r3, 8008f7a <tcp_input+0x47e>
 8008f72:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8008f76:	f7ff fd69 	bl	8008a4c <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8008f7a:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008f7c:	1d21      	adds	r1, r4, #4
 8008f7e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8008f80:	89db      	ldrh	r3, [r3, #14]
 8008f82:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008f86:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008f8a:	f7fe fff7 	bl	8007f7c <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008f8e:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008f90:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fe2a 	bl	8009bec <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	f43f af69 	beq.w	8008e70 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7fe fe95 	bl	8007cd0 <tcp_abandon>
 8008fa6:	e766      	b.n	8008e76 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8008fa8:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8008faa:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	0759      	lsls	r1, r3, #29
 8008fb0:	d535      	bpl.n	800901e <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8008fb2:	7d21      	ldrb	r1, [r4, #20]
 8008fb4:	2902      	cmp	r1, #2
 8008fb6:	d122      	bne.n	8008ffe <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8008fb8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d109      	bne.n	8008fd4 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8008fc0:	f898 3000 	ldrb.w	r3, [r8]
 8008fc4:	f043 0308 	orr.w	r3, r3, #8
 8008fc8:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8008fcc:	7ea3      	ldrb	r3, [r4, #26]
 8008fce:	f023 0301 	bic.w	r3, r3, #1
 8008fd2:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8008fd4:	f898 3000 	ldrb.w	r3, [r8]
 8008fd8:	0719      	lsls	r1, r3, #28
 8008fda:	f140 81ed 	bpl.w	80093b8 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008fde:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008fe2:	b11b      	cbz	r3, 8008fec <tcp_input+0x4f0>
 8008fe4:	f06f 010d 	mvn.w	r1, #13
 8008fe8:	6920      	ldr	r0, [r4, #16]
 8008fea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008fec:	4621      	mov	r1, r4
 8008fee:	4824      	ldr	r0, [pc, #144]	; (8009080 <tcp_input+0x584>)
 8008ff0:	f7fe fcd6 	bl	80079a0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f7fd fc7a 	bl	80068f0 <memp_free>
 8008ffc:	e6b0      	b.n	8008d60 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8008ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009000:	f8db 3000 	ldr.w	r3, [fp]
 8009004:	429a      	cmp	r2, r3
 8009006:	f000 825a 	beq.w	80094be <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	d4e2      	bmi.n	8008fd4 <tcp_input+0x4d8>
 800900e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	2b00      	cmp	r3, #0
 8009014:	dcde      	bgt.n	8008fd4 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009016:	7ea3      	ldrb	r3, [r4, #26]
 8009018:	f043 0302 	orr.w	r3, r3, #2
 800901c:	e7d9      	b.n	8008fd2 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800901e:	f013 0102 	ands.w	r1, r3, #2
 8009022:	d003      	beq.n	800902c <tcp_input+0x530>
 8009024:	7d22      	ldrb	r2, [r4, #20]
 8009026:	3a02      	subs	r2, #2
 8009028:	2a01      	cmp	r2, #1
 800902a:	d8f4      	bhi.n	8009016 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800902c:	7ea2      	ldrb	r2, [r4, #26]
 800902e:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8009030:	bf5e      	ittt	pl
 8009032:	4a11      	ldrpl	r2, [pc, #68]	; (8009078 <tcp_input+0x57c>)
 8009034:	6812      	ldrpl	r2, [r2, #0]
 8009036:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8009038:	2200      	movs	r2, #0
 800903a:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 800903e:	9a06      	ldr	r2, [sp, #24]
 8009040:	8812      	ldrh	r2, [r2, #0]
 8009042:	b13a      	cbz	r2, 8009054 <tcp_input+0x558>
 8009044:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8009048:	9107      	str	r1, [sp, #28]
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	f7ff fcfe 	bl	8008a4c <tcp_parseopt.isra.1.part.2>
 8009050:	9907      	ldr	r1, [sp, #28]
 8009052:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8009054:	7d22      	ldrb	r2, [r4, #20]
 8009056:	3a02      	subs	r2, #2
 8009058:	2a07      	cmp	r2, #7
 800905a:	d8bb      	bhi.n	8008fd4 <tcp_input+0x4d8>
 800905c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009060:	00940014 	.word	0x00940014
 8009064:	010000fc 	.word	0x010000fc
 8009068:	00fc014a 	.word	0x00fc014a
 800906c:	01830164 	.word	0x01830164
 8009070:	0800db1d 	.word	0x0800db1d
 8009074:	24000688 	.word	0x24000688
 8009078:	24003ba4 	.word	0x24003ba4
 800907c:	24003ba8 	.word	0x24003ba8
 8009080:	24003ba0 	.word	0x24003ba0
 8009084:	24003b9c 	.word	0x24003b9c
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009088:	f003 0212 	and.w	r2, r3, #18
 800908c:	2a12      	cmp	r2, #18
 800908e:	d15e      	bne.n	800914e <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8009090:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	3201      	adds	r2, #1
 8009096:	428a      	cmp	r2, r1
 8009098:	d159      	bne.n	800914e <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 800909a:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 800909e:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 80090a0:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 80090a2:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80090a4:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090a6:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 80090a8:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80090aa:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 80090ac:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80090ae:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80090b0:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 80090b2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80090b6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090ba:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 80090bc:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090be:	f7fe ff5d 	bl	8007f7c <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80090c6:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090c8:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090ca:	0080      	lsls	r0, r0, #2
 80090cc:	4293      	cmp	r3, r2
 80090ce:	bf38      	it	cc
 80090d0:	4613      	movcc	r3, r2
 80090d2:	4283      	cmp	r3, r0
 80090d4:	bf28      	it	cs
 80090d6:	4603      	movcs	r3, r0
 80090d8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80090dc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80090e0:	b933      	cbnz	r3, 80090f0 <tcp_input+0x5f4>
 80090e2:	4bad      	ldr	r3, [pc, #692]	; (8009398 <tcp_input+0x89c>)
 80090e4:	f240 321a 	movw	r2, #794	; 0x31a
 80090e8:	49ac      	ldr	r1, [pc, #688]	; (800939c <tcp_input+0x8a0>)
 80090ea:	48ad      	ldr	r0, [pc, #692]	; (80093a0 <tcp_input+0x8a4>)
 80090ec:	f002 f98c 	bl	800b408 <iprintf>
      --pcb->snd_queuelen;
 80090f0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80090f4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80090f6:	3b01      	subs	r3, #1
 80090f8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80090fc:	b9fe      	cbnz	r6, 800913e <tcp_input+0x642>
        rseg = pcb->unsent;
 80090fe:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009100:	b936      	cbnz	r6, 8009110 <tcp_input+0x614>
 8009102:	4ba5      	ldr	r3, [pc, #660]	; (8009398 <tcp_input+0x89c>)
 8009104:	f240 3222 	movw	r2, #802	; 0x322
 8009108:	49a6      	ldr	r1, [pc, #664]	; (80093a4 <tcp_input+0x8a8>)
 800910a:	48a5      	ldr	r0, [pc, #660]	; (80093a0 <tcp_input+0x8a4>)
 800910c:	f002 f97c 	bl	800b408 <iprintf>
        pcb->unsent = rseg->next;
 8009110:	6833      	ldr	r3, [r6, #0]
 8009112:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8009114:	4630      	mov	r0, r6
 8009116:	f7fe f9ab 	bl	8007470 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800911a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800911c:	b993      	cbnz	r3, 8009144 <tcp_input+0x648>
        pcb->rtime = -1;
 800911e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009122:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009124:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009128:	2b00      	cmp	r3, #0
 800912a:	f43f af74 	beq.w	8009016 <tcp_input+0x51a>
 800912e:	2200      	movs	r2, #0
 8009130:	4621      	mov	r1, r4
 8009132:	6920      	ldr	r0, [r4, #16]
 8009134:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8009136:	300d      	adds	r0, #13
 8009138:	f47f af6d 	bne.w	8009016 <tcp_input+0x51a>
 800913c:	e610      	b.n	8008d60 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 800913e:	6833      	ldr	r3, [r6, #0]
 8009140:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009142:	e7e7      	b.n	8009114 <tcp_input+0x618>
        pcb->rtime = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800914c:	e7ea      	b.n	8009124 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 800914e:	06db      	lsls	r3, r3, #27
 8009150:	f57f af40 	bpl.w	8008fd4 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009154:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009156:	9a04      	ldr	r2, [sp, #16]
 8009158:	f8db 1000 	ldr.w	r1, [fp]
 800915c:	8810      	ldrh	r0, [r2, #0]
 800915e:	881a      	ldrh	r2, [r3, #0]
 8009160:	4401      	add	r1, r0
 8009162:	9201      	str	r2, [sp, #4]
 8009164:	885b      	ldrh	r3, [r3, #2]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4b8f      	ldr	r3, [pc, #572]	; (80093a8 <tcp_input+0x8ac>)
 800916a:	6838      	ldr	r0, [r7, #0]
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	f000 ffa9 	bl	800a0c4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009172:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009176:	2b05      	cmp	r3, #5
 8009178:	f63f af2c 	bhi.w	8008fd4 <tcp_input+0x4d8>
        pcb->rtime = 0;
 800917c:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 800917e:	4620      	mov	r0, r4
        pcb->rtime = 0;
 8009180:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009182:	f000 fff9 	bl	800a178 <tcp_rexmit_rto>
 8009186:	e725      	b.n	8008fd4 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8009188:	06d8      	lsls	r0, r3, #27
 800918a:	d557      	bpl.n	800923c <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800918c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800918e:	6838      	ldr	r0, [r7, #0]
 8009190:	43db      	mvns	r3, r3
 8009192:	42c3      	cmn	r3, r0
 8009194:	d443      	bmi.n	800921e <tcp_input+0x722>
 8009196:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009198:	1ac3      	subs	r3, r0, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	dc3f      	bgt.n	800921e <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 800919e:	2304      	movs	r3, #4
 80091a0:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80091a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80091a4:	b143      	cbz	r3, 80091b8 <tcp_input+0x6bc>
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	b933      	cbnz	r3, 80091b8 <tcp_input+0x6bc>
 80091aa:	4b7b      	ldr	r3, [pc, #492]	; (8009398 <tcp_input+0x89c>)
 80091ac:	f240 3251 	movw	r2, #849	; 0x351
 80091b0:	497e      	ldr	r1, [pc, #504]	; (80093ac <tcp_input+0x8b0>)
 80091b2:	487b      	ldr	r0, [pc, #492]	; (80093a0 <tcp_input+0x8a4>)
 80091b4:	f002 f928 	bl	800b408 <iprintf>
        if (pcb->listener == NULL) {
 80091b8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80091ba:	b91b      	cbnz	r3, 80091c4 <tcp_input+0x6c8>
            tcp_abort(pcb);
 80091bc:	4620      	mov	r0, r4
 80091be:	f7fe fdfd 	bl	8007dbc <tcp_abort>
            goto aborted;
 80091c2:	e5cd      	b.n	8008d60 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0f8      	beq.n	80091bc <tcp_input+0x6c0>
 80091ca:	2200      	movs	r2, #0
 80091cc:	4621      	mov	r1, r4
 80091ce:	6920      	ldr	r0, [r4, #16]
 80091d0:	4798      	blx	r3
        if (err != ERR_OK) {
 80091d2:	b110      	cbz	r0, 80091da <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 80091d4:	300d      	adds	r0, #13
 80091d6:	d1f1      	bne.n	80091bc <tcp_input+0x6c0>
 80091d8:	e5c2      	b.n	8008d60 <tcp_input+0x264>
        tcp_receive(pcb);
 80091da:	4620      	mov	r0, r4
 80091dc:	f7fe ff42 	bl	8008064 <tcp_receive>
        if (recv_acked != 0) {
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b113      	cbz	r3, 80091ec <tcp_input+0x6f0>
          recv_acked--;
 80091e6:	3b01      	subs	r3, #1
 80091e8:	9a05      	ldr	r2, [sp, #20]
 80091ea:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80091ec:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80091ee:	f241 111c 	movw	r1, #4380	; 0x111c
 80091f2:	0053      	lsls	r3, r2, #1
 80091f4:	0092      	lsls	r2, r2, #2
 80091f6:	428b      	cmp	r3, r1
 80091f8:	bf38      	it	cc
 80091fa:	460b      	movcc	r3, r1
 80091fc:	4293      	cmp	r3, r2
 80091fe:	bf28      	it	cs
 8009200:	4613      	movcs	r3, r2
 8009202:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009206:	f898 3000 	ldrb.w	r3, [r8]
 800920a:	069a      	lsls	r2, r3, #26
 800920c:	f57f aee2 	bpl.w	8008fd4 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009210:	7ea3      	ldrb	r3, [r4, #26]
 8009212:	f043 0302 	orr.w	r3, r3, #2
 8009216:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009218:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 800921a:	7523      	strb	r3, [r4, #20]
 800921c:	e6da      	b.n	8008fd4 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800921e:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009220:	9a04      	ldr	r2, [sp, #16]
 8009222:	f8db 1000 	ldr.w	r1, [fp]
 8009226:	8816      	ldrh	r6, [r2, #0]
 8009228:	881a      	ldrh	r2, [r3, #0]
 800922a:	4431      	add	r1, r6
 800922c:	9201      	str	r2, [sp, #4]
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4b5d      	ldr	r3, [pc, #372]	; (80093a8 <tcp_input+0x8ac>)
 8009234:	1d1a      	adds	r2, r3, #4
 8009236:	f000 ff45 	bl	800a0c4 <tcp_rst>
 800923a:	e6cb      	b.n	8008fd4 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800923c:	2900      	cmp	r1, #0
 800923e:	f43f aec9 	beq.w	8008fd4 <tcp_input+0x4d8>
 8009242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009244:	f8db 2000 	ldr.w	r2, [fp]
 8009248:	3b01      	subs	r3, #1
 800924a:	4293      	cmp	r3, r2
 800924c:	f47f aec2 	bne.w	8008fd4 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8009250:	4620      	mov	r0, r4
 8009252:	f000 ffad 	bl	800a1b0 <tcp_rexmit>
 8009256:	e6bd      	b.n	8008fd4 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8009258:	4620      	mov	r0, r4
 800925a:	f7fe ff03 	bl	8008064 <tcp_receive>
 800925e:	e7d2      	b.n	8009206 <tcp_input+0x70a>
    tcp_receive(pcb);
 8009260:	4620      	mov	r0, r4
 8009262:	f7fe feff 	bl	8008064 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009266:	f898 3000 	ldrb.w	r3, [r8]
 800926a:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8009272:	d031      	beq.n	80092d8 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009274:	f013 0f10 	tst.w	r3, #16
 8009278:	7ea3      	ldrb	r3, [r4, #26]
 800927a:	d028      	beq.n	80092ce <tcp_input+0x7d2>
 800927c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4291      	cmp	r1, r2
 8009282:	d124      	bne.n	80092ce <tcp_input+0x7d2>
 8009284:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009286:	bb12      	cbnz	r2, 80092ce <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8009288:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 800928c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800928e:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009290:	f7fe f984 	bl	800759c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009294:	f8d9 3000 	ldr.w	r3, [r9]
 8009298:	429c      	cmp	r4, r3
 800929a:	d10a      	bne.n	80092b2 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 800929c:	68e3      	ldr	r3, [r4, #12]
 800929e:	f8c9 3000 	str.w	r3, [r9]
 80092a2:	e008      	b.n	80092b6 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	4294      	cmp	r4, r2
 80092a8:	d102      	bne.n	80092b0 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 80092aa:	68e2      	ldr	r2, [r4, #12]
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	e002      	b.n	80092b6 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80092b0:	4613      	mov	r3, r2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1f6      	bne.n	80092a4 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 80092b6:	2201      	movs	r2, #1
 80092b8:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <tcp_input+0x8b4>)
 80092ba:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80092bc:	230a      	movs	r3, #10
 80092be:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80092c0:	4b3c      	ldr	r3, [pc, #240]	; (80093b4 <tcp_input+0x8b8>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	601c      	str	r4, [r3, #0]
 80092c6:	60e2      	str	r2, [r4, #12]
 80092c8:	f001 f89e 	bl	800a408 <tcp_timer_needed>
 80092cc:	e682      	b.n	8008fd4 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 80092ce:	f043 0302 	orr.w	r3, r3, #2
 80092d2:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80092d4:	2308      	movs	r3, #8
 80092d6:	e7a0      	b.n	800921a <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092d8:	06db      	lsls	r3, r3, #27
 80092da:	f57f ae7b 	bpl.w	8008fd4 <tcp_input+0x4d8>
 80092de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	f47f ae76 	bne.w	8008fd4 <tcp_input+0x4d8>
 80092e8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f47f ae72 	bne.w	8008fd4 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 80092f0:	2306      	movs	r3, #6
 80092f2:	e792      	b.n	800921a <tcp_input+0x71e>
    tcp_receive(pcb);
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7fe feb5 	bl	8008064 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80092fa:	f898 3000 	ldrb.w	r3, [r8]
 80092fe:	069f      	lsls	r7, r3, #26
 8009300:	f57f ae68 	bpl.w	8008fd4 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009304:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009306:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800930e:	f7fe f945 	bl	800759c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009312:	f8d9 3000 	ldr.w	r3, [r9]
 8009316:	429c      	cmp	r4, r3
 8009318:	d0c0      	beq.n	800929c <tcp_input+0x7a0>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0cb      	beq.n	80092b6 <tcp_input+0x7ba>
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	4294      	cmp	r4, r2
 8009322:	d0c2      	beq.n	80092aa <tcp_input+0x7ae>
 8009324:	4613      	mov	r3, r2
 8009326:	e7f8      	b.n	800931a <tcp_input+0x81e>
    tcp_receive(pcb);
 8009328:	4620      	mov	r0, r4
 800932a:	f7fe fe9b 	bl	8008064 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	06de      	lsls	r6, r3, #27
 8009334:	f57f ae4e 	bpl.w	8008fd4 <tcp_input+0x4d8>
 8009338:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	f47f ae49 	bne.w	8008fd4 <tcp_input+0x4d8>
 8009342:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009344:	2b00      	cmp	r3, #0
 8009346:	f47f ae45 	bne.w	8008fd4 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 800934a:	4620      	mov	r0, r4
 800934c:	f7fe f926 	bl	800759c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009350:	f8d9 3000 	ldr.w	r3, [r9]
 8009354:	429c      	cmp	r4, r3
 8009356:	d0a1      	beq.n	800929c <tcp_input+0x7a0>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0ac      	beq.n	80092b6 <tcp_input+0x7ba>
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	4294      	cmp	r4, r2
 8009360:	d0a3      	beq.n	80092aa <tcp_input+0x7ae>
 8009362:	4613      	mov	r3, r2
 8009364:	e7f8      	b.n	8009358 <tcp_input+0x85c>
    tcp_receive(pcb);
 8009366:	4620      	mov	r0, r4
 8009368:	f7fe fe7c 	bl	8008064 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	06d8      	lsls	r0, r3, #27
 8009372:	f57f ae2f 	bpl.w	8008fd4 <tcp_input+0x4d8>
 8009376:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	f47f ae2a 	bne.w	8008fd4 <tcp_input+0x4d8>
 8009380:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009382:	2b00      	cmp	r3, #0
 8009384:	f47f ae26 	bne.w	8008fd4 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8009388:	f898 3000 	ldrb.w	r3, [r8]
 800938c:	f043 0310 	orr.w	r3, r3, #16
 8009390:	f888 3000 	strb.w	r3, [r8]
 8009394:	e61e      	b.n	8008fd4 <tcp_input+0x4d8>
 8009396:	bf00      	nop
 8009398:	0800ec40 	.word	0x0800ec40
 800939c:	0800ebdf 	.word	0x0800ebdf
 80093a0:	0800db1d 	.word	0x0800db1d
 80093a4:	0800ebf5 	.word	0x0800ebf5
 80093a8:	24000688 	.word	0x24000688
 80093ac:	0800ec08 	.word	0x0800ec08
 80093b0:	24003b9c 	.word	0x24003b9c
 80093b4:	24003bb0 	.word	0x24003bb0
        if (recv_acked > 0) {
 80093b8:	9b05      	ldr	r3, [sp, #20]
 80093ba:	881a      	ldrh	r2, [r3, #0]
 80093bc:	b122      	cbz	r2, 80093c8 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80093be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80093c0:	b9eb      	cbnz	r3, 80093fe <tcp_input+0x902>
          recv_acked = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	9a05      	ldr	r2, [sp, #20]
 80093c6:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7ff fb77 	bl	8008abc <tcp_input_delayed_close>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f47f acc6 	bne.w	8008d60 <tcp_input+0x264>
        if (recv_data != NULL) {
 80093d4:	f8da 3000 	ldr.w	r3, [sl]
 80093d8:	b33b      	cbz	r3, 800942a <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80093da:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80093dc:	b133      	cbz	r3, 80093ec <tcp_input+0x8f0>
 80093de:	4b40      	ldr	r3, [pc, #256]	; (80094e0 <tcp_input+0x9e4>)
 80093e0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80093e4:	493f      	ldr	r1, [pc, #252]	; (80094e4 <tcp_input+0x9e8>)
 80093e6:	4840      	ldr	r0, [pc, #256]	; (80094e8 <tcp_input+0x9ec>)
 80093e8:	f002 f80e 	bl	800b408 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80093ec:	7ea3      	ldrb	r3, [r4, #26]
 80093ee:	f013 0310 	ands.w	r3, r3, #16
 80093f2:	d00a      	beq.n	800940a <tcp_input+0x90e>
            pbuf_free(recv_data);
 80093f4:	f8da 0000 	ldr.w	r0, [sl]
 80093f8:	f7fd fbf6 	bl	8006be8 <pbuf_free>
 80093fc:	e6de      	b.n	80091bc <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80093fe:	4621      	mov	r1, r4
 8009400:	6920      	ldr	r0, [r4, #16]
 8009402:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009404:	300d      	adds	r0, #13
 8009406:	d1dc      	bne.n	80093c2 <tcp_input+0x8c6>
 8009408:	e4aa      	b.n	8008d60 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800940a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800940e:	b31e      	cbz	r6, 8009458 <tcp_input+0x95c>
 8009410:	f8da 2000 	ldr.w	r2, [sl]
 8009414:	4621      	mov	r1, r4
 8009416:	6920      	ldr	r0, [r4, #16]
 8009418:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800941a:	f110 0f0d 	cmn.w	r0, #13
 800941e:	f43f ac9f 	beq.w	8008d60 <tcp_input+0x264>
          if (err != ERR_OK) {
 8009422:	b110      	cbz	r0, 800942a <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8009424:	f8da 3000 	ldr.w	r3, [sl]
 8009428:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800942a:	f898 3000 	ldrb.w	r3, [r8]
 800942e:	069a      	lsls	r2, r3, #26
 8009430:	d505      	bpl.n	800943e <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8009432:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009434:	b1c3      	cbz	r3, 8009468 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009436:	7b5a      	ldrb	r2, [r3, #13]
 8009438:	f042 0220 	orr.w	r2, r2, #32
 800943c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800943e:	2200      	movs	r2, #0
 8009440:	4b2a      	ldr	r3, [pc, #168]	; (80094ec <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 8009442:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009444:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009446:	f7ff fb39 	bl	8008abc <tcp_input_delayed_close>
 800944a:	2800      	cmp	r0, #0
 800944c:	f47f ac88 	bne.w	8008d60 <tcp_input+0x264>
        tcp_output(pcb);
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fcb9 	bl	8009dc8 <tcp_output>
 8009456:	e483      	b.n	8008d60 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009458:	4633      	mov	r3, r6
 800945a:	f8da 2000 	ldr.w	r2, [sl]
 800945e:	4621      	mov	r1, r4
 8009460:	4630      	mov	r0, r6
 8009462:	f7fe fb9d 	bl	8007ba0 <tcp_recv_null>
 8009466:	e7d8      	b.n	800941a <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009468:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800946a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800946e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8009472:	bf1c      	itt	ne
 8009474:	3301      	addne	r3, #1
 8009476:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009478:	2e00      	cmp	r6, #0
 800947a:	d0e0      	beq.n	800943e <tcp_input+0x942>
 800947c:	2300      	movs	r3, #0
 800947e:	4621      	mov	r1, r4
 8009480:	6920      	ldr	r0, [r4, #16]
 8009482:	461a      	mov	r2, r3
 8009484:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009486:	300d      	adds	r0, #13
 8009488:	d1d9      	bne.n	800943e <tcp_input+0x942>
 800948a:	e469      	b.n	8008d60 <tcp_input+0x264>
      if (prev != NULL) {
 800948c:	b13c      	cbz	r4, 800949e <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800948e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009492:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009494:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009496:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800949a:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	0759      	lsls	r1, r3, #29
 80094a4:	f53f ace7 	bmi.w	8008e76 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 80094a8:	06dc      	lsls	r4, r3, #27
 80094aa:	f57f ad19 	bpl.w	8008ee0 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	f8db 1000 	ldr.w	r1, [fp]
 80094b4:	881c      	ldrh	r4, [r3, #0]
 80094b6:	8813      	ldrh	r3, [r2, #0]
 80094b8:	e88d 0009 	stmia.w	sp, {r0, r3}
 80094bc:	e4c5      	b.n	8008e4a <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80094be:	2900      	cmp	r1, #0
 80094c0:	f47f ad7e 	bne.w	8008fc0 <tcp_input+0x4c4>
 80094c4:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <tcp_input+0x9e4>)
 80094c6:	f240 22e7 	movw	r2, #743	; 0x2e7
 80094ca:	490a      	ldr	r1, [pc, #40]	; (80094f4 <tcp_input+0x9f8>)
 80094cc:	4806      	ldr	r0, [pc, #24]	; (80094e8 <tcp_input+0x9ec>)
 80094ce:	f001 ff9b 	bl	800b408 <iprintf>
 80094d2:	e575      	b.n	8008fc0 <tcp_input+0x4c4>
      if (prev != NULL) {
 80094d4:	f1ba 0f00 	cmp.w	sl, #0
 80094d8:	f47f abff 	bne.w	8008cda <tcp_input+0x1de>
 80094dc:	e40e      	b.n	8008cfc <tcp_input+0x200>
 80094de:	bf00      	nop
 80094e0:	0800ec40 	.word	0x0800ec40
 80094e4:	0800ec26 	.word	0x0800ec26
 80094e8:	0800db1d 	.word	0x0800db1d
 80094ec:	24003bb4 	.word	0x24003bb4
 80094f0:	24003ba8 	.word	0x24003ba8
 80094f4:	0800ebbf 	.word	0x0800ebbf

080094f8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80094f8:	4a02      	ldr	r2, [pc, #8]	; (8009504 <tcp_trigger_input_pcb_close+0xc>)
 80094fa:	7813      	ldrb	r3, [r2, #0]
 80094fc:	f043 0310 	orr.w	r3, r3, #16
 8009500:	7013      	strb	r3, [r2, #0]
 8009502:	4770      	bx	lr
 8009504:	2400063c 	.word	0x2400063c

08009508 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	460c      	mov	r4, r1
 800950c:	461e      	mov	r6, r3
 800950e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009512:	4294      	cmp	r4, r2
{
 8009514:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8009516:	d228      	bcs.n	800956a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009518:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800951c:	07ad      	lsls	r5, r5, #30
 800951e:	d407      	bmi.n	8009530 <tcp_pbuf_prealloc+0x28>
 8009520:	7e9d      	ldrb	r5, [r3, #26]
 8009522:	066d      	lsls	r5, r5, #25
 8009524:	d421      	bmi.n	800956a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8009526:	b119      	cbz	r1, 8009530 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8009528:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800952a:	b909      	cbnz	r1, 8009530 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800952c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952e:	b1e3      	cbz	r3, 800956a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009530:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8009534:	f023 0103 	bic.w	r1, r3, #3
 8009538:	428a      	cmp	r2, r1
 800953a:	bf28      	it	cs
 800953c:	460a      	movcs	r2, r1
 800953e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009540:	2200      	movs	r2, #0
 8009542:	f7fd fbb3 	bl	8006cac <pbuf_alloc>
  if (p == NULL) {
 8009546:	4605      	mov	r5, r0
 8009548:	b168      	cbz	r0, 8009566 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800954a:	6803      	ldr	r3, [r0, #0]
 800954c:	b133      	cbz	r3, 800955c <tcp_pbuf_prealloc+0x54>
 800954e:	4b08      	ldr	r3, [pc, #32]	; (8009570 <tcp_pbuf_prealloc+0x68>)
 8009550:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009554:	4907      	ldr	r1, [pc, #28]	; (8009574 <tcp_pbuf_prealloc+0x6c>)
 8009556:	4808      	ldr	r0, [pc, #32]	; (8009578 <tcp_pbuf_prealloc+0x70>)
 8009558:	f001 ff56 	bl	800b408 <iprintf>
  *oversize = p->len - length;
 800955c:	896b      	ldrh	r3, [r5, #10]
 800955e:	1b1b      	subs	r3, r3, r4
 8009560:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009562:	812c      	strh	r4, [r5, #8]
 8009564:	816c      	strh	r4, [r5, #10]
  return p;
}
 8009566:	4628      	mov	r0, r5
 8009568:	bd70      	pop	{r4, r5, r6, pc}
 800956a:	4621      	mov	r1, r4
 800956c:	e7e8      	b.n	8009540 <tcp_pbuf_prealloc+0x38>
 800956e:	bf00      	nop
 8009570:	0800ef43 	.word	0x0800ef43
 8009574:	0800ef76 	.word	0x0800ef76
 8009578:	0800db1d 	.word	0x0800db1d

0800957c <tcp_create_segment>:
{
 800957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	f89d a020 	ldrb.w	sl, [sp, #32]
 8009584:	4680      	mov	r8, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009586:	2003      	movs	r0, #3
{
 8009588:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800958a:	f01a 0f01 	tst.w	sl, #1
{
 800958e:	4616      	mov	r6, r2
 8009590:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009592:	bf14      	ite	ne
 8009594:	2504      	movne	r5, #4
 8009596:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009598:	f7fd f97a 	bl	8006890 <memp_malloc>
 800959c:	4604      	mov	r4, r0
 800959e:	b928      	cbnz	r0, 80095ac <tcp_create_segment+0x30>
    pbuf_free(p);
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7fd fb21 	bl	8006be8 <pbuf_free>
}
 80095a6:	4620      	mov	r0, r4
 80095a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 80095ac:	2300      	movs	r3, #0
  seg->flags = optflags;
 80095ae:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80095b2:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 80095b6:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80095ba:	893b      	ldrh	r3, [r7, #8]
 80095bc:	4553      	cmp	r3, sl
 80095be:	d205      	bcs.n	80095cc <tcp_create_segment+0x50>
 80095c0:	4b1e      	ldr	r3, [pc, #120]	; (800963c <tcp_create_segment+0xc0>)
 80095c2:	22ba      	movs	r2, #186	; 0xba
 80095c4:	491e      	ldr	r1, [pc, #120]	; (8009640 <tcp_create_segment+0xc4>)
 80095c6:	481f      	ldr	r0, [pc, #124]	; (8009644 <tcp_create_segment+0xc8>)
 80095c8:	f001 ff1e 	bl	800b408 <iprintf>
  seg->len = p->tot_len - optlen;
 80095cc:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80095ce:	4638      	mov	r0, r7
 80095d0:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 80095d2:	eba3 030a 	sub.w	r3, r3, sl
 80095d6:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80095d8:	f7fd fb00 	bl	8006bdc <pbuf_header>
 80095dc:	4607      	mov	r7, r0
 80095de:	b120      	cbz	r0, 80095ea <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 80095e0:	4620      	mov	r0, r4
    return NULL;
 80095e2:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 80095e4:	f7fd ff44 	bl	8007470 <tcp_seg_free>
    return NULL;
 80095e8:	e7dd      	b.n	80095a6 <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80095ea:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80095ec:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80095ee:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80095f2:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80095f6:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80095f8:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80095fc:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009600:	f7fb fd2e 	bl	8005060 <lwip_htons>
 8009604:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009608:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800960c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009610:	f7fb fd26 	bl	8005060 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009614:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009618:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800961c:	4648      	mov	r0, r9
 800961e:	f7fb fd22 	bl	8005066 <lwip_htonl>
 8009622:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009626:	b2a8      	uxth	r0, r5
 8009628:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800962c:	f7fb fd18 	bl	8005060 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8009630:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009632:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8009636:	749f      	strb	r7, [r3, #18]
 8009638:	74df      	strb	r7, [r3, #19]
  return seg;
 800963a:	e7b4      	b.n	80095a6 <tcp_create_segment+0x2a>
 800963c:	0800ef43 	.word	0x0800ef43
 8009640:	0800edcb 	.word	0x0800edcb
 8009644:	0800db1d 	.word	0x0800db1d

08009648 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009648:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800964a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800964c:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800964e:	4605      	mov	r5, r0
 8009650:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009652:	2001      	movs	r0, #1
 8009654:	2200      	movs	r2, #0
 8009656:	f7fd fb29 	bl	8006cac <pbuf_alloc>
  if (p != NULL) {
 800965a:	4606      	mov	r6, r0
 800965c:	b340      	cbz	r0, 80096b0 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800965e:	8943      	ldrh	r3, [r0, #10]
 8009660:	2b13      	cmp	r3, #19
 8009662:	dc05      	bgt.n	8009670 <tcp_output_alloc_header.constprop.0+0x28>
 8009664:	4b13      	ldr	r3, [pc, #76]	; (80096b4 <tcp_output_alloc_header.constprop.0+0x6c>)
 8009666:	2273      	movs	r2, #115	; 0x73
 8009668:	4913      	ldr	r1, [pc, #76]	; (80096b8 <tcp_output_alloc_header.constprop.0+0x70>)
 800966a:	4814      	ldr	r0, [pc, #80]	; (80096bc <tcp_output_alloc_header.constprop.0+0x74>)
 800966c:	f001 fecc 	bl	800b408 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 8009670:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009672:	8ae8      	ldrh	r0, [r5, #22]
 8009674:	f7fb fcf4 	bl	8005060 <lwip_htons>
 8009678:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800967a:	8b28      	ldrh	r0, [r5, #24]
 800967c:	f7fb fcf0 	bl	8005060 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8009680:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009682:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009684:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009686:	f7fb fcee 	bl	8005066 <lwip_htonl>
 800968a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800968c:	f245 0010 	movw	r0, #20496	; 0x5010
 8009690:	f7fb fce6 	bl	8005060 <lwip_htons>
 8009694:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009696:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8009698:	f7fb fce2 	bl	8005060 <lwip_htons>
    tcphdr->chksum = 0;
 800969c:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800969e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 80096a0:	7423      	strb	r3, [r4, #16]
 80096a2:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 80096a4:	74a3      	strb	r3, [r4, #18]
 80096a6:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80096a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80096aa:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80096ac:	4413      	add	r3, r2
 80096ae:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80096b0:	4630      	mov	r0, r6
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b4:	0800ef43 	.word	0x0800ef43
 80096b8:	0800ef15 	.word	0x0800ef15
 80096bc:	0800db1d 	.word	0x0800db1d

080096c0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	b091      	sub	sp, #68	; 0x44
 80096c6:	4605      	mov	r5, r0
 80096c8:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80096ca:	2300      	movs	r3, #0
{
 80096cc:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 80096ce:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80096d2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80096d6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80096d8:	085b      	lsrs	r3, r3, #1
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80096da:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80096dc:	4293      	cmp	r3, r2
 80096de:	bf28      	it	cs
 80096e0:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bf08      	it	eq
 80096e6:	4613      	moveq	r3, r2
 80096e8:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80096ea:	b959      	cbnz	r1, 8009704 <tcp_write+0x44>
 80096ec:	4ba1      	ldr	r3, [pc, #644]	; (8009974 <tcp_write+0x2b4>)
 80096ee:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80096f2:	49a1      	ldr	r1, [pc, #644]	; (8009978 <tcp_write+0x2b8>)
 80096f4:	48a1      	ldr	r0, [pc, #644]	; (800997c <tcp_write+0x2bc>)
 80096f6:	f001 fe87 	bl	800b408 <iprintf>
 80096fa:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80096fe:	b011      	add	sp, #68	; 0x44
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 8009704:	7d2b      	ldrb	r3, [r5, #20]
 8009706:	2b07      	cmp	r3, #7
 8009708:	d003      	beq.n	8009712 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 800970a:	3b02      	subs	r3, #2
 800970c:	2b02      	cmp	r3, #2
 800970e:	f200 8254 	bhi.w	8009bba <tcp_write+0x4fa>
  } else if (len == 0) {
 8009712:	9b05      	ldr	r3, [sp, #20]
 8009714:	b1db      	cbz	r3, 800974e <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 8009716:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800971a:	9a05      	ldr	r2, [sp, #20]
 800971c:	4293      	cmp	r3, r2
 800971e:	d206      	bcs.n	800972e <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 8009720:	7eab      	ldrb	r3, [r5, #26]
 8009722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009726:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	e7e7      	b.n	80096fe <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800972e:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 8009732:	2a08      	cmp	r2, #8
 8009734:	d8f4      	bhi.n	8009720 <tcp_write+0x60>
 8009736:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8009738:	b30a      	cbz	r2, 800977e <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800973a:	b943      	cbnz	r3, 800974e <tcp_write+0x8e>
 800973c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800973e:	b933      	cbnz	r3, 800974e <tcp_write+0x8e>
 8009740:	4b8c      	ldr	r3, [pc, #560]	; (8009974 <tcp_write+0x2b4>)
 8009742:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009746:	498e      	ldr	r1, [pc, #568]	; (8009980 <tcp_write+0x2c0>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009748:	488c      	ldr	r0, [pc, #560]	; (800997c <tcp_write+0x2bc>)
 800974a:	f001 fe5d 	bl	800b408 <iprintf>
  queuelen = pcb->snd_queuelen;
 800974e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  if (pcb->unsent != NULL) {
 8009752:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8009754:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8009756:	b9dc      	cbnz	r4, 8009790 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009758:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 800975c:	f1b8 0f00 	cmp.w	r8, #0
 8009760:	f000 8103 	beq.w	800996a <tcp_write+0x2aa>
 8009764:	4b83      	ldr	r3, [pc, #524]	; (8009974 <tcp_write+0x2b4>)
 8009766:	f240 2225 	movw	r2, #549	; 0x225
 800976a:	4986      	ldr	r1, [pc, #536]	; (8009984 <tcp_write+0x2c4>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800976c:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800976e:	4883      	ldr	r0, [pc, #524]	; (800997c <tcp_write+0x2bc>)
  u16_t extendlen = 0;
 8009770:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009772:	f001 fe49 	bl	800b408 <iprintf>
  u16_t oversize_used = 0;
 8009776:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8009778:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800977a:	46a1      	mov	r9, r4
 800977c:	e094      	b.n	80098a8 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800977e:	b913      	cbnz	r3, 8009786 <tcp_write+0xc6>
 8009780:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0e3      	beq.n	800974e <tcp_write+0x8e>
 8009786:	4b7b      	ldr	r3, [pc, #492]	; (8009974 <tcp_write+0x2b4>)
 8009788:	f240 1259 	movw	r2, #345	; 0x159
 800978c:	497e      	ldr	r1, [pc, #504]	; (8009988 <tcp_write+0x2c8>)
 800978e:	e7db      	b.n	8009748 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8009790:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009792:	f8d7 b000 	ldr.w	fp, [r7]
 8009796:	f1bb 0f00 	cmp.w	fp, #0
 800979a:	f040 80b6 	bne.w	800990a <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800979e:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80097a0:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80097a2:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80097a6:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80097a8:	bf14      	ite	ne
 80097aa:	2404      	movne	r4, #4
 80097ac:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80097ae:	4423      	add	r3, r4
 80097b0:	429a      	cmp	r2, r3
 80097b2:	da06      	bge.n	80097c2 <tcp_write+0x102>
 80097b4:	4b6f      	ldr	r3, [pc, #444]	; (8009974 <tcp_write+0x2b4>)
 80097b6:	f240 12c7 	movw	r2, #455	; 0x1c7
 80097ba:	4974      	ldr	r1, [pc, #464]	; (800998c <tcp_write+0x2cc>)
 80097bc:	486f      	ldr	r0, [pc, #444]	; (800997c <tcp_write+0x2bc>)
 80097be:	f001 fe23 	bl	800b408 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80097c2:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 80097c6:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 80097c8:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
    space = mss_local - (last_unsent->len + unsent_optlen);
 80097cc:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 80097d0:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 80097d4:	eba9 0904 	sub.w	r9, r9, r4
 80097d8:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 80097dc:	2e00      	cmp	r6, #0
 80097de:	f000 8096 	beq.w	800990e <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80097e2:	45b1      	cmp	r9, r6
 80097e4:	d206      	bcs.n	80097f4 <tcp_write+0x134>
 80097e6:	4b63      	ldr	r3, [pc, #396]	; (8009974 <tcp_write+0x2b4>)
 80097e8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80097ec:	4968      	ldr	r1, [pc, #416]	; (8009990 <tcp_write+0x2d0>)
 80097ee:	4863      	ldr	r0, [pc, #396]	; (800997c <tcp_write+0x2bc>)
 80097f0:	f001 fe0a 	bl	800b408 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80097f4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80097f8:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80097fa:	9a05      	ldr	r2, [sp, #20]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	bf28      	it	cs
 8009800:	461a      	movcs	r2, r3
 8009802:	454a      	cmp	r2, r9
 8009804:	4616      	mov	r6, r2
 8009806:	bfa8      	it	ge
 8009808:	464e      	movge	r6, r9
      space -= oversize_used;
 800980a:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 800980e:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 8009810:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 8009814:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009818:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800981c:	b153      	cbz	r3, 8009834 <tcp_write+0x174>
 800981e:	9b05      	ldr	r3, [sp, #20]
 8009820:	429e      	cmp	r6, r3
 8009822:	f000 81cd 	beq.w	8009bc0 <tcp_write+0x500>
 8009826:	4b53      	ldr	r3, [pc, #332]	; (8009974 <tcp_write+0x2b4>)
 8009828:	f240 12e1 	movw	r2, #481	; 0x1e1
 800982c:	4959      	ldr	r1, [pc, #356]	; (8009994 <tcp_write+0x2d4>)
 800982e:	4853      	ldr	r0, [pc, #332]	; (800997c <tcp_write+0x2bc>)
 8009830:	f001 fdea 	bl	800b408 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009834:	9b05      	ldr	r3, [sp, #20]
 8009836:	429e      	cmp	r6, r3
 8009838:	f080 81c2 	bcs.w	8009bc0 <tcp_write+0x500>
 800983c:	f1b9 0f00 	cmp.w	r9, #0
 8009840:	f000 808f 	beq.w	8009962 <tcp_write+0x2a2>
 8009844:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8009848:	f1ba 0f00 	cmp.w	sl, #0
 800984c:	f000 808a 	beq.w	8009964 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009850:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009854:	454c      	cmp	r4, r9
 8009856:	bfa8      	it	ge
 8009858:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800985a:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800985c:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009860:	d557      	bpl.n	8009912 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009862:	2301      	movs	r3, #1
 8009864:	464a      	mov	r2, r9
 8009866:	9500      	str	r5, [sp, #0]
 8009868:	4641      	mov	r1, r8
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	2004      	movs	r0, #4
 800986e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009876:	f7ff fe47 	bl	8009508 <tcp_pbuf_prealloc>
 800987a:	4681      	mov	r9, r0
 800987c:	2800      	cmp	r0, #0
 800987e:	f000 8199 	beq.w	8009bb4 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	4642      	mov	r2, r8
 8009886:	6840      	ldr	r0, [r0, #4]
 8009888:	1999      	adds	r1, r3, r6
 800988a:	f001 fdaa 	bl	800b3e2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800988e:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8009890:	f7fd fb5c 	bl	8006f4c <pbuf_clen>
 8009894:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 8009896:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 800989a:	4403      	add	r3, r0
 800989c:	b29b      	uxth	r3, r3
 800989e:	9306      	str	r3, [sp, #24]
      pos += seglen;
 80098a0:	44b0      	add	r8, r6
 80098a2:	463c      	mov	r4, r7
 80098a4:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80098a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098aa:	f04f 0b00 	mov.w	fp, #0
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80098b6:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	4598      	cmp	r8, r3
 80098bc:	d370      	bcc.n	80099a0 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 80098be:	b146      	cbz	r6, 80098d2 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 80098c0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80098c4:	f1b8 0f00 	cmp.w	r8, #0
 80098c8:	f040 8110 	bne.w	8009aec <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 80098cc:	893b      	ldrh	r3, [r7, #8]
 80098ce:	441e      	add	r6, r3
 80098d0:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 80098d2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80098d6:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	f000 811e 	beq.w	8009b1e <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80098e2:	b937      	cbnz	r7, 80098f2 <tcp_write+0x232>
 80098e4:	4b23      	ldr	r3, [pc, #140]	; (8009974 <tcp_write+0x2b4>)
 80098e6:	f240 22bb 	movw	r2, #699	; 0x2bb
 80098ea:	492b      	ldr	r1, [pc, #172]	; (8009998 <tcp_write+0x2d8>)
 80098ec:	4823      	ldr	r0, [pc, #140]	; (800997c <tcp_write+0x2bc>)
 80098ee:	f001 fd8b 	bl	800b408 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 80098f2:	4649      	mov	r1, r9
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7fd fb45 	bl	8006f84 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8009900:	4413      	add	r3, r2
 8009902:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8009904:	f8c7 b000 	str.w	fp, [r7]
 8009908:	e12b      	b.n	8009b62 <tcp_write+0x4a2>
 800990a:	465f      	mov	r7, fp
 800990c:	e741      	b.n	8009792 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800990e:	4634      	mov	r4, r6
 8009910:	e782      	b.n	8009818 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 9000 	ldr.w	r9, [r3]
 8009918:	f1b9 0f00 	cmp.w	r9, #0
 800991c:	d112      	bne.n	8009944 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800991e:	7b1a      	ldrb	r2, [r3, #12]
 8009920:	2a01      	cmp	r2, #1
 8009922:	d111      	bne.n	8009948 <tcp_write+0x288>
 8009924:	895a      	ldrh	r2, [r3, #10]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4413      	add	r3, r2
 800992a:	9a08      	ldr	r2, [sp, #32]
 800992c:	429a      	cmp	r2, r3
 800992e:	d10b      	bne.n	8009948 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009930:	b136      	cbz	r6, 8009940 <tcp_write+0x280>
 8009932:	4b10      	ldr	r3, [pc, #64]	; (8009974 <tcp_write+0x2b4>)
 8009934:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8009938:	4918      	ldr	r1, [pc, #96]	; (800999c <tcp_write+0x2dc>)
 800993a:	4810      	ldr	r0, [pc, #64]	; (800997c <tcp_write+0x2bc>)
 800993c:	f001 fd64 	bl	800b408 <iprintf>
          extendlen = seglen;
 8009940:	46c2      	mov	sl, r8
 8009942:	e7ad      	b.n	80098a0 <tcp_write+0x1e0>
 8009944:	464b      	mov	r3, r9
 8009946:	e7e5      	b.n	8009914 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009948:	2201      	movs	r2, #1
 800994a:	4641      	mov	r1, r8
 800994c:	2004      	movs	r0, #4
 800994e:	f7fd f9ad 	bl	8006cac <pbuf_alloc>
 8009952:	4681      	mov	r9, r0
 8009954:	2800      	cmp	r0, #0
 8009956:	f000 812d 	beq.w	8009bb4 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	4433      	add	r3, r6
 800995e:	6043      	str	r3, [r0, #4]
 8009960:	e796      	b.n	8009890 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8009962:	46ca      	mov	sl, r9
 8009964:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8009966:	46d1      	mov	r9, sl
 8009968:	e79e      	b.n	80098a8 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 800996a:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800996c:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800996e:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8009970:	46c1      	mov	r9, r8
 8009972:	e799      	b.n	80098a8 <tcp_write+0x1e8>
 8009974:	0800ef43 	.word	0x0800ef43
 8009978:	0800ef8a 	.word	0x0800ef8a
 800997c:	0800db1d 	.word	0x0800db1d
 8009980:	0800efbb 	.word	0x0800efbb
 8009984:	0800f0a5 	.word	0x0800f0a5
 8009988:	0800eff5 	.word	0x0800eff5
 800998c:	0800f027 	.word	0x0800f027
 8009990:	0800f03e 	.word	0x0800f03e
 8009994:	0800f05e 	.word	0x0800f05e
 8009998:	0800f131 	.word	0x0800f131
 800999c:	0800f07c 	.word	0x0800f07c
    u16_t left = len - pos;
 80099a0:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 80099a2:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 80099a4:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4293      	cmp	r3, r2
 80099ac:	bf28      	it	cs
 80099ae:	4613      	movcs	r3, r2
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80099b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099b6:	b363      	cbz	r3, 8009a12 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80099b8:	fabb f38b 	clz	r3, fp
 80099bc:	9500      	str	r5, [sp, #0]
 80099be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099c0:	2000      	movs	r0, #0
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	9302      	str	r3, [sp, #8]
 80099c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80099ce:	f7ff fd9b 	bl	8009508 <tcp_pbuf_prealloc>
 80099d2:	4604      	mov	r4, r0
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d03b      	beq.n	8009a50 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80099d8:	8943      	ldrh	r3, [r0, #10]
 80099da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099dc:	4293      	cmp	r3, r2
 80099de:	d206      	bcs.n	80099ee <tcp_write+0x32e>
 80099e0:	4b7b      	ldr	r3, [pc, #492]	; (8009bd0 <tcp_write+0x510>)
 80099e2:	f240 2241 	movw	r2, #577	; 0x241
 80099e6:	497b      	ldr	r1, [pc, #492]	; (8009bd4 <tcp_write+0x514>)
 80099e8:	487b      	ldr	r0, [pc, #492]	; (8009bd8 <tcp_write+0x518>)
 80099ea:	f001 fd0d 	bl	800b408 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f2:	eb03 0108 	add.w	r1, r3, r8
 80099f6:	6860      	ldr	r0, [r4, #4]
 80099f8:	f001 fcf3 	bl	800b3e2 <memcpy>
    queuelen += pbuf_clen(p);
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7fd faa5 	bl	8006f4c <pbuf_clen>
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	4403      	add	r3, r0
 8009a06:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009a08:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8009a0a:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009a0c:	d949      	bls.n	8009aa2 <tcp_write+0x3e2>
      pbuf_free(p);
 8009a0e:	4620      	mov	r0, r4
 8009a10:	e01c      	b.n	8009a4c <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009a12:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009a16:	b133      	cbz	r3, 8009a26 <tcp_write+0x366>
 8009a18:	4b6d      	ldr	r3, [pc, #436]	; (8009bd0 <tcp_write+0x510>)
 8009a1a:	f240 224b 	movw	r2, #587	; 0x24b
 8009a1e:	496f      	ldr	r1, [pc, #444]	; (8009bdc <tcp_write+0x51c>)
 8009a20:	486d      	ldr	r0, [pc, #436]	; (8009bd8 <tcp_write+0x518>)
 8009a22:	f001 fcf1 	bl	800b408 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009a26:	2201      	movs	r2, #1
 8009a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	f7fd f93e 	bl	8006cac <pbuf_alloc>
 8009a30:	b170      	cbz	r0, 8009a50 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009a32:	9a08      	ldr	r2, [sp, #32]
 8009a34:	900d      	str	r0, [sp, #52]	; 0x34
 8009a36:	4442      	add	r2, r8
 8009a38:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4610      	mov	r0, r2
 8009a40:	f7fd f934 	bl	8006cac <pbuf_alloc>
 8009a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a46:	4604      	mov	r4, r0
 8009a48:	bb38      	cbnz	r0, 8009a9a <tcp_write+0x3da>
        pbuf_free(p2);
 8009a4a:	4618      	mov	r0, r3
      pbuf_free(p);
 8009a4c:	f7fd f8cc 	bl	8006be8 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8009a50:	7eab      	ldrb	r3, [r5, #26]
 8009a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a56:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8009a58:	f1b9 0f00 	cmp.w	r9, #0
 8009a5c:	d002      	beq.n	8009a64 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8009a5e:	4648      	mov	r0, r9
 8009a60:	f7fd f8c2 	bl	8006be8 <pbuf_free>
  if (queue != NULL) {
 8009a64:	f1bb 0f00 	cmp.w	fp, #0
 8009a68:	d002      	beq.n	8009a70 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8009a6a:	4658      	mov	r0, fp
 8009a6c:	f7fd fd0e 	bl	800748c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8009a70:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f43f ae57 	beq.w	8009728 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009a7a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f47f ae53 	bne.w	8009728 <tcp_write+0x68>
 8009a82:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f47f ae4f 	bne.w	8009728 <tcp_write+0x68>
 8009a8a:	4b51      	ldr	r3, [pc, #324]	; (8009bd0 <tcp_write+0x510>)
 8009a8c:	f240 3202 	movw	r2, #770	; 0x302
 8009a90:	4953      	ldr	r1, [pc, #332]	; (8009be0 <tcp_write+0x520>)
 8009a92:	4851      	ldr	r0, [pc, #324]	; (8009bd8 <tcp_write+0x518>)
 8009a94:	f001 fcb8 	bl	800b408 <iprintf>
 8009a98:	e646      	b.n	8009728 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f7fd fa72 	bl	8006f84 <pbuf_cat>
 8009aa0:	e7ac      	b.n	80099fc <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009aa2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	9200      	str	r2, [sp, #0]
 8009aac:	4443      	add	r3, r8
 8009aae:	f7ff fd65 	bl	800957c <tcp_create_segment>
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d0cb      	beq.n	8009a50 <tcp_write+0x390>
    if (queue == NULL) {
 8009ab8:	f1bb 0f00 	cmp.w	fp, #0
 8009abc:	d010      	beq.n	8009ae0 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac0:	b933      	cbnz	r3, 8009ad0 <tcp_write+0x410>
 8009ac2:	4b43      	ldr	r3, [pc, #268]	; (8009bd0 <tcp_write+0x510>)
 8009ac4:	f240 2285 	movw	r2, #645	; 0x285
 8009ac8:	4946      	ldr	r1, [pc, #280]	; (8009be4 <tcp_write+0x524>)
 8009aca:	4843      	ldr	r0, [pc, #268]	; (8009bd8 <tcp_write+0x518>)
 8009acc:	f001 fc9c 	bl	800b408 <iprintf>
      prev_seg->next = seg;
 8009ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad2:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8009ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad6:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ad8:	4498      	add	r8, r3
 8009ada:	fa1f f888 	uxth.w	r8, r8
 8009ade:	e6eb      	b.n	80098b8 <tcp_write+0x1f8>
 8009ae0:	4683      	mov	fp, r0
 8009ae2:	e7f7      	b.n	8009ad4 <tcp_write+0x414>
  if (oversize_used > 0) {
 8009ae4:	f04f 0a00 	mov.w	sl, #0
 8009ae8:	46d1      	mov	r9, sl
 8009aea:	e6e9      	b.n	80098c0 <tcp_write+0x200>
      p->tot_len += oversize_used;
 8009aec:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009af0:	4433      	add	r3, r6
 8009af2:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8009af6:	f8d8 3000 	ldr.w	r3, [r8]
 8009afa:	b96b      	cbnz	r3, 8009b18 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009afc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b00:	4632      	mov	r2, r6
 8009b02:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8009b06:	9908      	ldr	r1, [sp, #32]
 8009b08:	4418      	add	r0, r3
 8009b0a:	f001 fc6a 	bl	800b3e2 <memcpy>
        p->len += oversize_used;
 8009b0e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009b12:	4433      	add	r3, r6
 8009b14:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009b18:	f8d8 8000 	ldr.w	r8, [r8]
 8009b1c:	e6d2      	b.n	80098c4 <tcp_write+0x204>
  } else if (extendlen > 0) {
 8009b1e:	f1ba 0f00 	cmp.w	sl, #0
 8009b22:	d019      	beq.n	8009b58 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009b24:	b10f      	cbz	r7, 8009b2a <tcp_write+0x46a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	b933      	cbnz	r3, 8009b38 <tcp_write+0x478>
 8009b2a:	4b29      	ldr	r3, [pc, #164]	; (8009bd0 <tcp_write+0x510>)
 8009b2c:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009b30:	492d      	ldr	r1, [pc, #180]	; (8009be8 <tcp_write+0x528>)
 8009b32:	4829      	ldr	r0, [pc, #164]	; (8009bd8 <tcp_write+0x518>)
 8009b34:	f001 fc68 	bl	800b408 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	891a      	ldrh	r2, [r3, #8]
 8009b3c:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8009b3e:	4452      	add	r2, sl
 8009b40:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009b42:	b939      	cbnz	r1, 8009b54 <tcp_write+0x494>
    p->len += extendlen;
 8009b44:	895a      	ldrh	r2, [r3, #10]
 8009b46:	4452      	add	r2, sl
 8009b48:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009b4a:	893b      	ldrh	r3, [r7, #8]
 8009b4c:	449a      	add	sl, r3
 8009b4e:	f8a7 a008 	strh.w	sl, [r7, #8]
 8009b52:	e6d7      	b.n	8009904 <tcp_write+0x244>
      p->tot_len += extendlen;
 8009b54:	460b      	mov	r3, r1
 8009b56:	e7f0      	b.n	8009b3a <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8009b58:	2f00      	cmp	r7, #0
 8009b5a:	f47f aed3 	bne.w	8009904 <tcp_write+0x244>
    pcb->unsent = queue;
 8009b5e:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8009b62:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	4413      	add	r3, r2
 8009b68:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8009b6a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8009b74:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009b78:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009b7c:	9b06      	ldr	r3, [sp, #24]
 8009b7e:	b153      	cbz	r3, 8009b96 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009b80:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009b82:	b943      	cbnz	r3, 8009b96 <tcp_write+0x4d6>
 8009b84:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009b86:	b933      	cbnz	r3, 8009b96 <tcp_write+0x4d6>
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <tcp_write+0x510>)
 8009b8a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009b8e:	4914      	ldr	r1, [pc, #80]	; (8009be0 <tcp_write+0x520>)
 8009b90:	4811      	ldr	r0, [pc, #68]	; (8009bd8 <tcp_write+0x518>)
 8009b92:	f001 fc39 	bl	800b408 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8009b96:	b15c      	cbz	r4, 8009bb0 <tcp_write+0x4f0>
 8009b98:	68e4      	ldr	r4, [r4, #12]
 8009b9a:	b14c      	cbz	r4, 8009bb0 <tcp_write+0x4f0>
 8009b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9e:	f013 0602 	ands.w	r6, r3, #2
 8009ba2:	d105      	bne.n	8009bb0 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009ba4:	89a5      	ldrh	r5, [r4, #12]
 8009ba6:	2008      	movs	r0, #8
 8009ba8:	f7fb fa5a 	bl	8005060 <lwip_htons>
 8009bac:	4328      	orrs	r0, r5
 8009bae:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e5a4      	b.n	80096fe <tcp_write+0x3e>
      p->tot_len += extendlen;
 8009bb4:	f04f 0900 	mov.w	r9, #0
 8009bb8:	e74a      	b.n	8009a50 <tcp_write+0x390>
    return ERR_CONN;
 8009bba:	f06f 000a 	mvn.w	r0, #10
 8009bbe:	e59e      	b.n	80096fe <tcp_write+0x3e>
  if (oversize_used > 0) {
 8009bc0:	2e00      	cmp	r6, #0
 8009bc2:	d18f      	bne.n	8009ae4 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8009bc4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009bc8:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8009bcc:	e69a      	b.n	8009904 <tcp_write+0x244>
 8009bce:	bf00      	nop
 8009bd0:	0800ef43 	.word	0x0800ef43
 8009bd4:	0800f0d4 	.word	0x0800f0d4
 8009bd8:	0800db1d 	.word	0x0800db1d
 8009bdc:	0800f112 	.word	0x0800f112
 8009be0:	0800f19e 	.word	0x0800f19e
 8009be4:	0800f120 	.word	0x0800f120
 8009be8:	0800f169 	.word	0x0800f169

08009bec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009bf0:	f011 0803 	ands.w	r8, r1, #3
{
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009bf8:	d106      	bne.n	8009c08 <tcp_enqueue_flags+0x1c>
 8009bfa:	4b40      	ldr	r3, [pc, #256]	; (8009cfc <tcp_enqueue_flags+0x110>)
 8009bfc:	f240 321b 	movw	r2, #795	; 0x31b
 8009c00:	493f      	ldr	r1, [pc, #252]	; (8009d00 <tcp_enqueue_flags+0x114>)
 8009c02:	4840      	ldr	r0, [pc, #256]	; (8009d04 <tcp_enqueue_flags+0x118>)
 8009c04:	f001 fc00 	bl	800b408 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009c08:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d90a      	bls.n	8009c26 <tcp_enqueue_flags+0x3a>
 8009c10:	07f1      	lsls	r1, r6, #31
 8009c12:	d408      	bmi.n	8009c26 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8009c14:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009c16:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 8009c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c1e:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8009c20:	b003      	add	sp, #12
 8009c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c26:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009c2a:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 8009c2c:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009c2e:	4610      	mov	r0, r2
 8009c30:	bf15      	itete	ne
 8009c32:	2704      	movne	r7, #4
 8009c34:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 8009c36:	f04f 0901 	movne.w	r9, #1
 8009c3a:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7fd f834 	bl	8006cac <pbuf_alloc>
 8009c44:	4605      	mov	r5, r0
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0e4      	beq.n	8009c14 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009c4a:	8943      	ldrh	r3, [r0, #10]
 8009c4c:	42bb      	cmp	r3, r7
 8009c4e:	d206      	bcs.n	8009c5e <tcp_enqueue_flags+0x72>
 8009c50:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <tcp_enqueue_flags+0x110>)
 8009c52:	f240 3241 	movw	r2, #833	; 0x341
 8009c56:	492c      	ldr	r1, [pc, #176]	; (8009d08 <tcp_enqueue_flags+0x11c>)
 8009c58:	482a      	ldr	r0, [pc, #168]	; (8009d04 <tcp_enqueue_flags+0x118>)
 8009c5a:	f001 fbd5 	bl	800b408 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009c5e:	f8cd 9000 	str.w	r9, [sp]
 8009c62:	4629      	mov	r1, r5
 8009c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c66:	4632      	mov	r2, r6
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7ff fc87 	bl	800957c <tcp_create_segment>
 8009c6e:	4605      	mov	r5, r0
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d0cf      	beq.n	8009c14 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009c74:	68c3      	ldr	r3, [r0, #12]
 8009c76:	079a      	lsls	r2, r3, #30
 8009c78:	d006      	beq.n	8009c88 <tcp_enqueue_flags+0x9c>
 8009c7a:	4b20      	ldr	r3, [pc, #128]	; (8009cfc <tcp_enqueue_flags+0x110>)
 8009c7c:	f240 3249 	movw	r2, #841	; 0x349
 8009c80:	4922      	ldr	r1, [pc, #136]	; (8009d0c <tcp_enqueue_flags+0x120>)
 8009c82:	4820      	ldr	r0, [pc, #128]	; (8009d04 <tcp_enqueue_flags+0x118>)
 8009c84:	f001 fbc0 	bl	800b408 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009c88:	892b      	ldrh	r3, [r5, #8]
 8009c8a:	b133      	cbz	r3, 8009c9a <tcp_enqueue_flags+0xae>
 8009c8c:	4b1b      	ldr	r3, [pc, #108]	; (8009cfc <tcp_enqueue_flags+0x110>)
 8009c8e:	f240 324a 	movw	r2, #842	; 0x34a
 8009c92:	491f      	ldr	r1, [pc, #124]	; (8009d10 <tcp_enqueue_flags+0x124>)
 8009c94:	481b      	ldr	r0, [pc, #108]	; (8009d04 <tcp_enqueue_flags+0x118>)
 8009c96:	f001 fbb7 	bl	800b408 <iprintf>
  if (pcb->unsent == NULL) {
 8009c9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009c9c:	bb4b      	cbnz	r3, 8009cf2 <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 8009c9e:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009ca6:	f1b8 0f00 	cmp.w	r8, #0
 8009caa:	d002      	beq.n	8009cb2 <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 8009cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cae:	3301      	adds	r3, #1
 8009cb0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8009cb2:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8009cb4:	bf42      	ittt	mi
 8009cb6:	7ea3      	ldrbmi	r3, [r4, #26]
 8009cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8009cbc:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009cbe:	6868      	ldr	r0, [r5, #4]
 8009cc0:	f7fd f944 	bl	8006f4c <pbuf_clen>
 8009cc4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009cc8:	4418      	add	r0, r3
 8009cca:	b280      	uxth	r0, r0
 8009ccc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d0a5      	beq.n	8009c20 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009cd4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009cd6:	b948      	cbnz	r0, 8009cec <tcp_enqueue_flags+0x100>
 8009cd8:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	d1a0      	bne.n	8009c20 <tcp_enqueue_flags+0x34>
 8009cde:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <tcp_enqueue_flags+0x110>)
 8009ce0:	f240 326d 	movw	r2, #877	; 0x36d
 8009ce4:	490b      	ldr	r1, [pc, #44]	; (8009d14 <tcp_enqueue_flags+0x128>)
 8009ce6:	4807      	ldr	r0, [pc, #28]	; (8009d04 <tcp_enqueue_flags+0x118>)
 8009ce8:	f001 fb8e 	bl	800b408 <iprintf>
  return ERR_OK;
 8009cec:	2000      	movs	r0, #0
 8009cee:	e797      	b.n	8009c20 <tcp_enqueue_flags+0x34>
 8009cf0:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	d1fb      	bne.n	8009cf0 <tcp_enqueue_flags+0x104>
    useg->next = seg;
 8009cf8:	601d      	str	r5, [r3, #0]
 8009cfa:	e7d1      	b.n	8009ca0 <tcp_enqueue_flags+0xb4>
 8009cfc:	0800ef43 	.word	0x0800ef43
 8009d00:	0800ede0 	.word	0x0800ede0
 8009d04:	0800db1d 	.word	0x0800db1d
 8009d08:	0800ee35 	.word	0x0800ee35
 8009d0c:	0800ee6e 	.word	0x0800ee6e
 8009d10:	0800ee86 	.word	0x0800ee86
 8009d14:	0800eeb0 	.word	0x0800eeb0

08009d18 <tcp_send_fin>:
{
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8009d1a:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8009d1c:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8009d1e:	b934      	cbnz	r4, 8009d2e <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009d20:	4628      	mov	r0, r5
 8009d22:	2101      	movs	r1, #1
}
 8009d24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009d28:	f7ff bf60 	b.w	8009bec <tcp_enqueue_flags>
 8009d2c:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1fb      	bne.n	8009d2c <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009d34:	68e3      	ldr	r3, [r4, #12]
 8009d36:	8998      	ldrh	r0, [r3, #12]
 8009d38:	f7fb f992 	bl	8005060 <lwip_htons>
 8009d3c:	f010 0707 	ands.w	r7, r0, #7
 8009d40:	d1ee      	bne.n	8009d20 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009d42:	68e6      	ldr	r6, [r4, #12]
 8009d44:	2001      	movs	r0, #1
 8009d46:	89b4      	ldrh	r4, [r6, #12]
 8009d48:	f7fb f98a 	bl	8005060 <lwip_htons>
 8009d4c:	4320      	orrs	r0, r4
 8009d4e:	81b0      	strh	r0, [r6, #12]
}
 8009d50:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 8009d52:	7eab      	ldrb	r3, [r5, #26]
 8009d54:	f043 0320 	orr.w	r3, r3, #32
 8009d58:	76ab      	strb	r3, [r5, #26]
}
 8009d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009d5e:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009d60:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009d62:	f7fb f980 	bl	8005066 <lwip_htonl>
 8009d66:	2100      	movs	r1, #0
 8009d68:	4602      	mov	r2, r0
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff fc6c 	bl	8009648 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009d70:	4606      	mov	r6, r0
 8009d72:	b940      	cbnz	r0, 8009d86 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009d74:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009d76:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009d7a:	f043 0303 	orr.w	r3, r3, #3
 8009d7e:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8009d80:	4628      	mov	r0, r5
 8009d82:	b004      	add	sp, #16
 8009d84:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009d86:	1d25      	adds	r5, r4, #4
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f7fb fe1b 	bl	80059c4 <ip4_route>
  if (netif == NULL) {
 8009d8e:	b1a0      	cbz	r0, 8009dba <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009d90:	2206      	movs	r2, #6
 8009d92:	9002      	str	r0, [sp, #8]
 8009d94:	7aa3      	ldrb	r3, [r4, #10]
 8009d96:	4621      	mov	r1, r4
 8009d98:	9201      	str	r2, [sp, #4]
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	7a62      	ldrb	r2, [r4, #9]
 8009d9e:	9200      	str	r2, [sp, #0]
 8009da0:	462a      	mov	r2, r5
 8009da2:	f7fb ff75 	bl	8005c90 <ip4_output_if>
 8009da6:	4605      	mov	r5, r0
  pbuf_free(p);
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7fc ff1d 	bl	8006be8 <pbuf_free>
 8009dae:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8009db0:	b135      	cbz	r5, 8009dc0 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009db2:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009db6:	76a3      	strb	r3, [r4, #26]
 8009db8:	e7e2      	b.n	8009d80 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8009dba:	f06f 0503 	mvn.w	r5, #3
 8009dbe:	e7f3      	b.n	8009da8 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009dc0:	f023 0303 	bic.w	r3, r3, #3
 8009dc4:	e7f7      	b.n	8009db6 <tcp_send_empty_ack+0x5a>
	...

08009dc8 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009dc8:	7d03      	ldrb	r3, [r0, #20]
 8009dca:	2b01      	cmp	r3, #1
{
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009dd4:	d106      	bne.n	8009de4 <tcp_output+0x1c>
 8009dd6:	4ba5      	ldr	r3, [pc, #660]	; (800a06c <tcp_output+0x2a4>)
 8009dd8:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009ddc:	49a4      	ldr	r1, [pc, #656]	; (800a070 <tcp_output+0x2a8>)
 8009dde:	48a5      	ldr	r0, [pc, #660]	; (800a074 <tcp_output+0x2ac>)
 8009de0:	f001 fb12 	bl	800b408 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009de4:	4ba4      	ldr	r3, [pc, #656]	; (800a078 <tcp_output+0x2b0>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	429c      	cmp	r4, r3
 8009dea:	d052      	beq.n	8009e92 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009dec:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009df0:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8009df4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009df6:	429f      	cmp	r7, r3
 8009df8:	bf28      	it	cs
 8009dfa:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009dfc:	7ea3      	ldrb	r3, [r4, #26]
 8009dfe:	0799      	lsls	r1, r3, #30
 8009e00:	d510      	bpl.n	8009e24 <tcp_output+0x5c>
 8009e02:	b92d      	cbnz	r5, 8009e10 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8009e04:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8009e06:	b007      	add	sp, #28
 8009e08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8009e0c:	f7ff bfa6 	b.w	8009d5c <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009e10:	68eb      	ldr	r3, [r5, #12]
 8009e12:	6858      	ldr	r0, [r3, #4]
 8009e14:	f7fb f927 	bl	8005066 <lwip_htonl>
 8009e18:	892b      	ldrh	r3, [r5, #8]
 8009e1a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	4418      	add	r0, r3
     (seg == NULL ||
 8009e20:	4287      	cmp	r7, r0
 8009e22:	d3ef      	bcc.n	8009e04 <tcp_output+0x3c>
  useg = pcb->unacked;
 8009e24:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	d136      	bne.n	8009e98 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009e2a:	f104 0804 	add.w	r8, r4, #4
 8009e2e:	4640      	mov	r0, r8
 8009e30:	f7fb fdc8 	bl	80059c4 <ip4_route>
  if (netif == NULL) {
 8009e34:	4681      	mov	r9, r0
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f000 813c 	beq.w	800a0b4 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009e3c:	b10c      	cbz	r4, 8009e42 <tcp_output+0x7a>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	b913      	cbnz	r3, 8009e48 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009e42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009e46:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8009e48:	b1d5      	cbz	r5, 8009e80 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009e4a:	68eb      	ldr	r3, [r5, #12]
 8009e4c:	6858      	ldr	r0, [r3, #4]
 8009e4e:	f7fb f90a 	bl	8005066 <lwip_htonl>
 8009e52:	892b      	ldrh	r3, [r5, #8]
 8009e54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	4418      	add	r0, r3
  if (seg != NULL &&
 8009e5a:	4287      	cmp	r7, r0
 8009e5c:	d26f      	bcs.n	8009f3e <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009e5e:	2f00      	cmp	r7, #0
 8009e60:	d06d      	beq.n	8009f3e <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009e62:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8009e66:	429f      	cmp	r7, r3
 8009e68:	d169      	bne.n	8009f3e <tcp_output+0x176>
 8009e6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d166      	bne.n	8009f3e <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8009e70:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009e74:	b923      	cbnz	r3, 8009e80 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8009e76:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 8009e80:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009e82:	b913      	cbnz	r3, 8009e8a <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8009e8a:	7ea3      	ldrb	r3, [r4, #26]
 8009e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e90:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009e92:	2000      	movs	r0, #0
 8009e94:	e0e6      	b.n	800a064 <tcp_output+0x29c>
 8009e96:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8009e98:	6833      	ldr	r3, [r6, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1fb      	bne.n	8009e96 <tcp_output+0xce>
 8009e9e:	e7c4      	b.n	8009e2a <tcp_output+0x62>
    pcb->unsent = seg->next;
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009ea4:	7d23      	ldrb	r3, [r4, #20]
 8009ea6:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009ea8:	bf1e      	ittt	ne
 8009eaa:	7ea3      	ldrbne	r3, [r4, #26]
 8009eac:	f023 0303 	bicne.w	r3, r3, #3
 8009eb0:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009eb2:	68eb      	ldr	r3, [r5, #12]
 8009eb4:	6858      	ldr	r0, [r3, #4]
 8009eb6:	f7fb f8d6 	bl	8005066 <lwip_htonl>
 8009eba:	68e9      	ldr	r1, [r5, #12]
 8009ebc:	4683      	mov	fp, r0
 8009ebe:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009ec2:	8988      	ldrh	r0, [r1, #12]
 8009ec4:	f7fb f8cc 	bl	8005060 <lwip_htons>
 8009ec8:	f010 0003 	ands.w	r0, r0, #3
 8009ecc:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 8009ed0:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009ed2:	bf18      	it	ne
 8009ed4:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 8009ed6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009eda:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009edc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009ede:	1a1b      	subs	r3, r3, r0
 8009ee0:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8009ee2:	bfb8      	it	lt
 8009ee4:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8009ee6:	8990      	ldrh	r0, [r2, #12]
 8009ee8:	f7fb f8ba 	bl	8005060 <lwip_htons>
 8009eec:	f010 0003 	ands.w	r0, r0, #3
 8009ef0:	bf18      	it	ne
 8009ef2:	2001      	movne	r0, #1
 8009ef4:	eb10 0f0a 	cmn.w	r0, sl
 8009ef8:	f000 80d8 	beq.w	800a0ac <tcp_output+0x2e4>
      seg->next = NULL;
 8009efc:	2300      	movs	r3, #0
 8009efe:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8009f00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009f02:	b913      	cbnz	r3, 8009f0a <tcp_output+0x142>
        pcb->unacked = seg;
 8009f04:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8009f06:	462e      	mov	r6, r5
 8009f08:	e016      	b.n	8009f38 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009f0a:	68eb      	ldr	r3, [r5, #12]
 8009f0c:	6858      	ldr	r0, [r3, #4]
 8009f0e:	f7fb f8aa 	bl	8005066 <lwip_htonl>
 8009f12:	68f2      	ldr	r2, [r6, #12]
 8009f14:	4682      	mov	sl, r0
 8009f16:	6850      	ldr	r0, [r2, #4]
 8009f18:	f7fb f8a5 	bl	8005066 <lwip_htonl>
 8009f1c:	ebaa 0000 	sub.w	r0, sl, r0
 8009f20:	2800      	cmp	r0, #0
 8009f22:	f280 80c1 	bge.w	800a0a8 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009f26:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	f040 80a9 	bne.w	800a084 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8009f36:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8009f38:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	d0a2      	beq.n	8009e84 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009f3e:	68eb      	ldr	r3, [r5, #12]
 8009f40:	6858      	ldr	r0, [r3, #4]
 8009f42:	f7fb f890 	bl	8005066 <lwip_htonl>
 8009f46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009f48:	1ac0      	subs	r0, r0, r3
 8009f4a:	892b      	ldrh	r3, [r5, #8]
 8009f4c:	4418      	add	r0, r3
  while (seg != NULL &&
 8009f4e:	4287      	cmp	r7, r0
 8009f50:	d396      	bcc.n	8009e80 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 8009f52:	68eb      	ldr	r3, [r5, #12]
 8009f54:	8998      	ldrh	r0, [r3, #12]
 8009f56:	f7fb f883 	bl	8005060 <lwip_htons>
 8009f5a:	0742      	lsls	r2, r0, #29
 8009f5c:	d506      	bpl.n	8009f6c <tcp_output+0x1a4>
 8009f5e:	4b43      	ldr	r3, [pc, #268]	; (800a06c <tcp_output+0x2a4>)
 8009f60:	f240 4246 	movw	r2, #1094	; 0x446
 8009f64:	4945      	ldr	r1, [pc, #276]	; (800a07c <tcp_output+0x2b4>)
 8009f66:	4843      	ldr	r0, [pc, #268]	; (800a074 <tcp_output+0x2ac>)
 8009f68:	f001 fa4e 	bl	800b408 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009f6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009f6e:	b19b      	cbz	r3, 8009f98 <tcp_output+0x1d0>
 8009f70:	7ea2      	ldrb	r2, [r4, #26]
 8009f72:	f012 0f44 	tst.w	r2, #68	; 0x44
 8009f76:	d10f      	bne.n	8009f98 <tcp_output+0x1d0>
 8009f78:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009f7a:	b12b      	cbz	r3, 8009f88 <tcp_output+0x1c0>
 8009f7c:	6819      	ldr	r1, [r3, #0]
 8009f7e:	b959      	cbnz	r1, 8009f98 <tcp_output+0x1d0>
 8009f80:	8919      	ldrh	r1, [r3, #8]
 8009f82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009f84:	4299      	cmp	r1, r3
 8009f86:	d207      	bcs.n	8009f98 <tcp_output+0x1d0>
 8009f88:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009f8c:	b123      	cbz	r3, 8009f98 <tcp_output+0x1d0>
 8009f8e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	f240 8091 	bls.w	800a0ba <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8009f98:	7d23      	ldrb	r3, [r4, #20]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d00a      	beq.n	8009fb4 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009f9e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8009fa8:	f7fb f85a 	bl	8005060 <lwip_htons>
 8009fac:	ea4b 0000 	orr.w	r0, fp, r0
 8009fb0:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009fb4:	686b      	ldr	r3, [r5, #4]
 8009fb6:	89db      	ldrh	r3, [r3, #14]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	f47f af71 	bne.w	8009ea0 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009fbe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009fc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009fc4:	f7fb f84f 	bl	8005066 <lwip_htonl>
 8009fc8:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009fcc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009fce:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009fd2:	f7fb f845 	bl	8005060 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009fd6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009fda:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009fde:	4413      	add	r3, r2
 8009fe0:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009fe2:	7aab      	ldrb	r3, [r5, #10]
 8009fe4:	07db      	lsls	r3, r3, #31
 8009fe6:	d50c      	bpl.n	800a002 <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009fe8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009fec:	4641      	mov	r1, r8
 8009fee:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009ff2:	f7fd ffc3 	bl	8007f7c <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009ff6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009ffa:	f7fb f834 	bl	8005066 <lwip_htonl>
 8009ffe:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a002:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a006:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800a008:	bfbc      	itt	lt
 800a00a:	2300      	movlt	r3, #0
 800a00c:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a00e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a010:	b93b      	cbnz	r3, 800a022 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800a012:	4b1b      	ldr	r3, [pc, #108]	; (800a080 <tcp_output+0x2b8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a018:	68eb      	ldr	r3, [r5, #12]
 800a01a:	6858      	ldr	r0, [r3, #4]
 800a01c:	f7fb f823 	bl	8005066 <lwip_htonl>
 800a020:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a022:	6868      	ldr	r0, [r5, #4]
 800a024:	68ea      	ldr	r2, [r5, #12]
 800a026:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a028:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a02a:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800a02c:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a02e:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800a030:	1ac9      	subs	r1, r1, r3
 800a032:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800a034:	8901      	ldrh	r1, [r0, #8]
 800a036:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a038:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 800a03a:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	7413      	strb	r3, [r2, #16]
 800a040:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a042:	2206      	movs	r2, #6
 800a044:	7aa3      	ldrb	r3, [r4, #10]
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	7a62      	ldrb	r2, [r4, #9]
 800a04a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a04e:	9200      	str	r2, [sp, #0]
 800a050:	4642      	mov	r2, r8
 800a052:	f7fb fe1d 	bl	8005c90 <ip4_output_if>
    if (err != ERR_OK) {
 800a056:	2800      	cmp	r0, #0
 800a058:	f43f af22 	beq.w	8009ea0 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 800a05c:	7ea3      	ldrb	r3, [r4, #26]
 800a05e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a062:	76a3      	strb	r3, [r4, #26]
}
 800a064:	b007      	add	sp, #28
 800a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06a:	bf00      	nop
 800a06c:	0800ef43 	.word	0x0800ef43
 800a070:	0800eed8 	.word	0x0800eed8
 800a074:	0800db1d 	.word	0x0800db1d
 800a078:	24003bb4 	.word	0x24003bb4
 800a07c:	0800eefe 	.word	0x0800eefe
 800a080:	24003ba4 	.word	0x24003ba4
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a084:	68d2      	ldr	r2, [r2, #12]
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	6850      	ldr	r0, [r2, #4]
 800a08a:	f7fa ffec 	bl	8005066 <lwip_htonl>
 800a08e:	68e9      	ldr	r1, [r5, #12]
 800a090:	4682      	mov	sl, r0
 800a092:	6848      	ldr	r0, [r1, #4]
 800a094:	f7fa ffe7 	bl	8005066 <lwip_htonl>
 800a098:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800a09c:	9b05      	ldr	r3, [sp, #20]
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f6bf af47 	bge.w	8009f32 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	e740      	b.n	8009f2a <tcp_output+0x162>
          useg->next = seg;
 800a0a8:	6035      	str	r5, [r6, #0]
 800a0aa:	e72c      	b.n	8009f06 <tcp_output+0x13e>
      tcp_seg_free(seg);
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f7fd f9df 	bl	8007470 <tcp_seg_free>
 800a0b2:	e741      	b.n	8009f38 <tcp_output+0x170>
    return ERR_RTE;
 800a0b4:	f06f 0003 	mvn.w	r0, #3
 800a0b8:	e7d4      	b.n	800a064 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a0ba:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800a0be:	f47f af6b 	bne.w	8009f98 <tcp_output+0x1d0>
 800a0c2:	e6dd      	b.n	8009e80 <tcp_output+0xb8>

0800a0c4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	4681      	mov	r9, r0
 800a0cc:	460e      	mov	r6, r1
 800a0ce:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a0d0:	2114      	movs	r1, #20
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2001      	movs	r0, #1
{
 800a0d6:	461f      	mov	r7, r3
 800a0d8:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800a0dc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a0e0:	f7fc fde4 	bl	8006cac <pbuf_alloc>
  if (p == NULL) {
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d03c      	beq.n	800a164 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a0ea:	8943      	ldrh	r3, [r0, #10]
 800a0ec:	2b13      	cmp	r3, #19
 800a0ee:	d806      	bhi.n	800a0fe <tcp_rst+0x3a>
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <tcp_rst+0xa8>)
 800a0f2:	f240 524d 	movw	r2, #1357	; 0x54d
 800a0f6:	491e      	ldr	r1, [pc, #120]	; (800a170 <tcp_rst+0xac>)
 800a0f8:	481e      	ldr	r0, [pc, #120]	; (800a174 <tcp_rst+0xb0>)
 800a0fa:	f001 f985 	bl	800b408 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a0fe:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800a100:	4658      	mov	r0, fp
 800a102:	f7fa ffad 	bl	8005060 <lwip_htons>
 800a106:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a108:	4650      	mov	r0, sl
 800a10a:	f7fa ffa9 	bl	8005060 <lwip_htons>
 800a10e:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a110:	4648      	mov	r0, r9
 800a112:	f7fa ffa8 	bl	8005066 <lwip_htonl>
 800a116:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a118:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a11a:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 800a11c:	f7fa ffa3 	bl	8005066 <lwip_htonl>
 800a120:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a122:	f245 0014 	movw	r0, #20500	; 0x5014
 800a126:	f7fa ff9b 	bl	8005060 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a12a:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a12c:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a12e:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a130:	73a3      	strb	r3, [r4, #14]
 800a132:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 800a134:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a136:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 800a138:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800a13a:	74a6      	strb	r6, [r4, #18]
 800a13c:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 800a13e:	f7fb fc41 	bl	80059c4 <ip4_route>
  if (netif != NULL) {
 800a142:	b148      	cbz	r0, 800a158 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a144:	2306      	movs	r3, #6
 800a146:	9002      	str	r0, [sp, #8]
 800a148:	9600      	str	r6, [sp, #0]
 800a14a:	463a      	mov	r2, r7
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	4641      	mov	r1, r8
 800a150:	23ff      	movs	r3, #255	; 0xff
 800a152:	4628      	mov	r0, r5
 800a154:	f7fb fd9c 	bl	8005c90 <ip4_output_if>
  }
  pbuf_free(p);
 800a158:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a15a:	b005      	add	sp, #20
 800a15c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a160:	f7fc bd42 	b.w	8006be8 <pbuf_free>
}
 800a164:	b005      	add	sp, #20
 800a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16a:	bf00      	nop
 800a16c:	0800ef43 	.word	0x0800ef43
 800a170:	0800ef15 	.word	0x0800ef15
 800a174:	0800db1d 	.word	0x0800db1d

0800a178 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a178:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800a17a:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800a17c:	b1aa      	cbz	r2, 800a1aa <tcp_rexmit_rto+0x32>
 800a17e:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a180:	680b      	ldr	r3, [r1, #0]
 800a182:	b983      	cbnz	r3, 800a1a6 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a184:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800a186:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a188:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a18a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800a18e:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800a190:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800a192:	bf1c      	itt	ne
 800a194:	3301      	addne	r3, #1
 800a196:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a19a:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800a19c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 800a1a0:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 800a1a2:	f7ff be11 	b.w	8009dc8 <tcp_output>
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	e7ea      	b.n	800a180 <tcp_rexmit_rto+0x8>
}
 800a1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a1b2:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800a1b4:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800a1b6:	b1ad      	cbz	r5, 800a1e4 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800a1b8:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800a1ba:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 800a1be:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 800a1c0:	6833      	ldr	r3, [r6, #0]
 800a1c2:	b983      	cbnz	r3, 800a1e6 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800a1c4:	6833      	ldr	r3, [r6, #0]
 800a1c6:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800a1c8:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b90b      	cbnz	r3, 800a1d2 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a1ce:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a1d2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a1d6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800a1d8:	bf1c      	itt	ne
 800a1da:	3301      	addne	r3, #1
 800a1dc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	6858      	ldr	r0, [r3, #4]
 800a1ea:	f7fa ff3c 	bl	8005066 <lwip_htonl>
 800a1ee:	68eb      	ldr	r3, [r5, #12]
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	6858      	ldr	r0, [r3, #4]
 800a1f4:	f7fa ff37 	bl	8005066 <lwip_htonl>
 800a1f8:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	dae2      	bge.n	800a1c4 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800a1fe:	6836      	ldr	r6, [r6, #0]
 800a200:	e7de      	b.n	800a1c0 <tcp_rexmit+0x10>

0800a202 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a202:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800a204:	b510      	push	{r4, lr}
 800a206:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a208:	b30b      	cbz	r3, 800a24e <tcp_rexmit_fast+0x4c>
 800a20a:	7e83      	ldrb	r3, [r0, #26]
 800a20c:	075b      	lsls	r3, r3, #29
 800a20e:	d41e      	bmi.n	800a24e <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a210:	f7ff ffce 	bl	800a1b0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a214:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800a218:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a21c:	4293      	cmp	r3, r2
 800a21e:	bf38      	it	cc
 800a220:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a222:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a224:	bf28      	it	cs
 800a226:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a228:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a22a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a22e:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a230:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 800a232:	bf38      	it	cc
 800a234:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a238:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a23c:	4413      	add	r3, r2
 800a23e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a242:	7ea3      	ldrb	r3, [r4, #26]
 800a244:	f043 0304 	orr.w	r3, r3, #4
 800a248:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	8623      	strh	r3, [r4, #48]	; 0x30
 800a24e:	bd10      	pop	{r4, pc}

0800a250 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a252:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a254:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a256:	3801      	subs	r0, #1
 800a258:	f7fa ff05 	bl	8005066 <lwip_htonl>
 800a25c:	2100      	movs	r1, #0
 800a25e:	4602      	mov	r2, r0
 800a260:	4620      	mov	r0, r4
 800a262:	f7ff f9f1 	bl	8009648 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a266:	4605      	mov	r5, r0
 800a268:	b1c8      	cbz	r0, 800a29e <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a26a:	1d26      	adds	r6, r4, #4
 800a26c:	4630      	mov	r0, r6
 800a26e:	f7fb fba9 	bl	80059c4 <ip4_route>
  if (netif == NULL) {
 800a272:	b188      	cbz	r0, 800a298 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a274:	2100      	movs	r1, #0
 800a276:	2206      	movs	r2, #6
 800a278:	7aa3      	ldrb	r3, [r4, #10]
 800a27a:	9002      	str	r0, [sp, #8]
 800a27c:	4628      	mov	r0, r5
 800a27e:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a282:	4621      	mov	r1, r4
 800a284:	4632      	mov	r2, r6
 800a286:	f7fb fd03 	bl	8005c90 <ip4_output_if>
 800a28a:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a28c:	4628      	mov	r0, r5
 800a28e:	f7fc fcab 	bl	8006be8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a292:	4620      	mov	r0, r4
 800a294:	b004      	add	sp, #16
 800a296:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800a298:	f06f 0403 	mvn.w	r4, #3
 800a29c:	e7f6      	b.n	800a28c <tcp_keepalive+0x3c>
    return ERR_MEM;
 800a29e:	f04f 34ff 	mov.w	r4, #4294967295
 800a2a2:	e7f6      	b.n	800a292 <tcp_keepalive+0x42>

0800a2a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a2a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a2a8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800a2aa:	4606      	mov	r6, r0

  if (seg == NULL) {
 800a2ac:	b914      	cbnz	r4, 800a2b4 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800a2ae:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800a2b0:	2c00      	cmp	r4, #0
 800a2b2:	d041      	beq.n	800a338 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a2b4:	68e3      	ldr	r3, [r4, #12]
 800a2b6:	8998      	ldrh	r0, [r3, #12]
 800a2b8:	f7fa fed2 	bl	8005060 <lwip_htons>
 800a2bc:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a2c0:	68e3      	ldr	r3, [r4, #12]
 800a2c2:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a2c4:	bf18      	it	ne
 800a2c6:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a2c8:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a2ca:	bf1c      	itt	ne
 800a2cc:	fab5 f585 	clzne	r5, r5
 800a2d0:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a2d2:	f085 0101 	eor.w	r1, r5, #1
 800a2d6:	f7ff f9b7 	bl	8009648 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a2da:	4607      	mov	r7, r0
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d03d      	beq.n	800a35c <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a2e0:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a2e4:	b365      	cbz	r5, 800a340 <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a2e6:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800a2ea:	2011      	movs	r0, #17
 800a2ec:	f7fa feb8 	bl	8005060 <lwip_htons>
 800a2f0:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a2f4:	b2ad      	uxth	r5, r5
 800a2f6:	4328      	orrs	r0, r5
 800a2f8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a2fc:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a2fe:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a300:	6858      	ldr	r0, [r3, #4]
 800a302:	f7fa feb0 	bl	8005066 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a306:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a308:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a30a:	1a1b      	subs	r3, r3, r0
 800a30c:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800a30e:	bfb8      	it	lt
 800a310:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a312:	4620      	mov	r0, r4
 800a314:	f7fb fb56 	bl	80059c4 <ip4_route>
  if (netif == NULL) {
 800a318:	b1e8      	cbz	r0, 800a356 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a31a:	2100      	movs	r1, #0
 800a31c:	2206      	movs	r2, #6
 800a31e:	9002      	str	r0, [sp, #8]
 800a320:	4638      	mov	r0, r7
 800a322:	7ab3      	ldrb	r3, [r6, #10]
 800a324:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a328:	4622      	mov	r2, r4
 800a32a:	4631      	mov	r1, r6
 800a32c:	f7fb fcb0 	bl	8005c90 <ip4_output_if>
 800a330:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a332:	4638      	mov	r0, r7
 800a334:	f7fc fc58 	bl	8006be8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a338:	4620      	mov	r0, r4
 800a33a:	b004      	add	sp, #16
 800a33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a340:	6860      	ldr	r0, [r4, #4]
 800a342:	f108 0114 	add.w	r1, r8, #20
 800a346:	8922      	ldrh	r2, [r4, #8]
 800a348:	8903      	ldrh	r3, [r0, #8]
 800a34a:	1a9b      	subs	r3, r3, r2
 800a34c:	2201      	movs	r2, #1
 800a34e:	b29b      	uxth	r3, r3
 800a350:	f7fc fedc 	bl	800710c <pbuf_copy_partial>
 800a354:	e7d2      	b.n	800a2fc <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800a356:	f06f 0403 	mvn.w	r4, #3
 800a35a:	e7ea      	b.n	800a332 <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 800a35c:	f04f 34ff 	mov.w	r4, #4294967295
 800a360:	e7ea      	b.n	800a338 <tcp_zero_window_probe+0x94>
	...

0800a364 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a368:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a36a:	2006      	movs	r0, #6
{
 800a36c:	460f      	mov	r7, r1
 800a36e:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a370:	f7fc fa8e 	bl	8006890 <memp_malloc>
  if (timeout == NULL) {
 800a374:	4604      	mov	r4, r0
 800a376:	b938      	cbnz	r0, 800a388 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a378:	4b1e      	ldr	r3, [pc, #120]	; (800a3f4 <sys_timeout+0x90>)
 800a37a:	22d4      	movs	r2, #212	; 0xd4
 800a37c:	491e      	ldr	r1, [pc, #120]	; (800a3f8 <sys_timeout+0x94>)
 800a37e:	481f      	ldr	r0, [pc, #124]	; (800a3fc <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800a380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a384:	f001 b840 	b.w	800b408 <iprintf>
  now = sys_now();
 800a388:	f000 fb90 	bl	800aaac <sys_now>
  if (next_timeout == NULL) {
 800a38c:	4a1c      	ldr	r2, [pc, #112]	; (800a400 <sys_timeout+0x9c>)
 800a38e:	491d      	ldr	r1, [pc, #116]	; (800a404 <sys_timeout+0xa0>)
 800a390:	6813      	ldr	r3, [r2, #0]
 800a392:	b95b      	cbnz	r3, 800a3ac <sys_timeout+0x48>
    timeouts_last_time = now;
 800a394:	6008      	str	r0, [r1, #0]
    diff = 0;
 800a396:	4618      	mov	r0, r3
  timeout->next = NULL;
 800a398:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800a39a:	4428      	add	r0, r5
  timeout->h = handler;
 800a39c:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 800a39e:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 800a3a0:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800a3a2:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800a3a4:	b92b      	cbnz	r3, 800a3b2 <sys_timeout+0x4e>
    next_timeout = timeout;
 800a3a6:	6014      	str	r4, [r2, #0]
 800a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800a3ac:	6809      	ldr	r1, [r1, #0]
 800a3ae:	1a40      	subs	r0, r0, r1
 800a3b0:	e7f2      	b.n	800a398 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800a3b2:	6859      	ldr	r1, [r3, #4]
 800a3b4:	428d      	cmp	r5, r1
 800a3b6:	d217      	bcs.n	800a3e8 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800a3b8:	1b4d      	subs	r5, r1, r5
 800a3ba:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	e7f2      	b.n	800a3a6 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 800a3c0:	684e      	ldr	r6, [r1, #4]
 800a3c2:	42b2      	cmp	r2, r6
 800a3c4:	d312      	bcc.n	800a3ec <sys_timeout+0x88>
 800a3c6:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800a3c8:	6841      	ldr	r1, [r0, #4]
 800a3ca:	6862      	ldr	r2, [r4, #4]
 800a3cc:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800a3ce:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800a3d0:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	d1f4      	bne.n	800a3c0 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800a3d6:	4295      	cmp	r5, r2
 800a3d8:	d202      	bcs.n	800a3e0 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	441d      	add	r5, r3
 800a3de:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800a3e0:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800a3e2:	6004      	str	r4, [r0, #0]
        break;
 800a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	e7ed      	b.n	800a3c8 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 800a3ec:	1ab2      	subs	r2, r6, r2
 800a3ee:	604a      	str	r2, [r1, #4]
 800a3f0:	e7f6      	b.n	800a3e0 <sys_timeout+0x7c>
 800a3f2:	bf00      	nop
 800a3f4:	0800f1d4 	.word	0x0800f1d4
 800a3f8:	0800f208 	.word	0x0800f208
 800a3fc:	0800db1d 	.word	0x0800db1d
 800a400:	24000658 	.word	0x24000658
 800a404:	24000660 	.word	0x24000660

0800a408 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a408:	4b08      	ldr	r3, [pc, #32]	; (800a42c <tcp_timer_needed+0x24>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	b962      	cbnz	r2, 800a428 <tcp_timer_needed+0x20>
 800a40e:	4a08      	ldr	r2, [pc, #32]	; (800a430 <tcp_timer_needed+0x28>)
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	b912      	cbnz	r2, 800a41a <tcp_timer_needed+0x12>
 800a414:	4a07      	ldr	r2, [pc, #28]	; (800a434 <tcp_timer_needed+0x2c>)
 800a416:	6812      	ldr	r2, [r2, #0]
 800a418:	b132      	cbz	r2, 800a428 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a41a:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a41c:	4906      	ldr	r1, [pc, #24]	; (800a438 <tcp_timer_needed+0x30>)
 800a41e:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800a420:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a422:	2200      	movs	r2, #0
 800a424:	f7ff bf9e 	b.w	800a364 <sys_timeout>
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	2400065c 	.word	0x2400065c
 800a430:	24003ba0 	.word	0x24003ba0
 800a434:	24003bb0 	.word	0x24003bb0
 800a438:	0800a43d 	.word	0x0800a43d

0800a43c <tcpip_tcp_timer>:
{
 800a43c:	b508      	push	{r3, lr}
  tcp_tmr();
 800a43e:	f7fd fc35 	bl	8007cac <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a442:	4b08      	ldr	r3, [pc, #32]	; (800a464 <tcpip_tcp_timer+0x28>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	b913      	cbnz	r3, 800a44e <tcpip_tcp_timer+0x12>
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <tcpip_tcp_timer+0x2c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	b133      	cbz	r3, 800a45c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a44e:	2200      	movs	r2, #0
 800a450:	4906      	ldr	r1, [pc, #24]	; (800a46c <tcpip_tcp_timer+0x30>)
 800a452:	20fa      	movs	r0, #250	; 0xfa
}
 800a454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a458:	f7ff bf84 	b.w	800a364 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800a45c:	4a04      	ldr	r2, [pc, #16]	; (800a470 <tcpip_tcp_timer+0x34>)
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	bd08      	pop	{r3, pc}
 800a462:	bf00      	nop
 800a464:	24003ba0 	.word	0x24003ba0
 800a468:	24003bb0 	.word	0x24003bb0
 800a46c:	0800a43d 	.word	0x0800a43d
 800a470:	2400065c 	.word	0x2400065c

0800a474 <sys_timeouts_init>:
{
 800a474:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a476:	4d0a      	ldr	r5, [pc, #40]	; (800a4a0 <sys_timeouts_init+0x2c>)
 800a478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a47c:	4c09      	ldr	r4, [pc, #36]	; (800a4a4 <sys_timeouts_init+0x30>)
 800a47e:	f105 0208 	add.w	r2, r5, #8
 800a482:	4621      	mov	r1, r4
 800a484:	f7ff ff6e 	bl	800a364 <sys_timeout>
 800a488:	f105 0210 	add.w	r2, r5, #16
 800a48c:	4621      	mov	r1, r4
 800a48e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a492:	f7ff ff67 	bl	800a364 <sys_timeout>
  timeouts_last_time = sys_now();
 800a496:	f000 fb09 	bl	800aaac <sys_now>
 800a49a:	4b03      	ldr	r3, [pc, #12]	; (800a4a8 <sys_timeouts_init+0x34>)
 800a49c:	6018      	str	r0, [r3, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	0800f1bc 	.word	0x0800f1bc
 800a4a4:	0800a4ad 	.word	0x0800a4ad
 800a4a8:	24000660 	.word	0x24000660

0800a4ac <cyclic_timer>:
{
 800a4ac:	b510      	push	{r4, lr}
 800a4ae:	4604      	mov	r4, r0
  cyclic->handler();
 800a4b0:	6843      	ldr	r3, [r0, #4]
 800a4b2:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a4b4:	4903      	ldr	r1, [pc, #12]	; (800a4c4 <cyclic_timer+0x18>)
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	6820      	ldr	r0, [r4, #0]
}
 800a4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a4be:	f7ff bf51 	b.w	800a364 <sys_timeout>
 800a4c2:	bf00      	nop
 800a4c4:	0800a4ad 	.word	0x0800a4ad

0800a4c8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 800a4cc:	4d13      	ldr	r5, [pc, #76]	; (800a51c <sys_check_timeouts+0x54>)
 800a4ce:	682b      	ldr	r3, [r5, #0]
 800a4d0:	b30b      	cbz	r3, 800a516 <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a4d2:	4e13      	ldr	r6, [pc, #76]	; (800a520 <sys_check_timeouts+0x58>)
    now = sys_now();
 800a4d4:	f000 faea 	bl	800aaac <sys_now>
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a4d8:	4f12      	ldr	r7, [pc, #72]	; (800a524 <sys_check_timeouts+0x5c>)
    diff = now - timeouts_last_time;
 800a4da:	6834      	ldr	r4, [r6, #0]
 800a4dc:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 800a4de:	783b      	ldrb	r3, [r7, #0]
 800a4e0:	b10b      	cbz	r3, 800a4e6 <sys_check_timeouts+0x1e>
 800a4e2:	f7fc fb2d 	bl	8006b40 <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 800a4e6:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a4e8:	b1a9      	cbz	r1, 800a516 <sys_check_timeouts+0x4e>
 800a4ea:	684b      	ldr	r3, [r1, #4]
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	d312      	bcc.n	800a516 <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 800a4f0:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
 800a4f2:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 800a4f4:	f8d1 8008 	ldr.w	r8, [r1, #8]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a4f8:	2006      	movs	r0, #6
        timeouts_last_time += tmptimeout->time;
 800a4fa:	441a      	add	r2, r3
        next_timeout = tmptimeout->next;
 800a4fc:	680b      	ldr	r3, [r1, #0]
        arg = tmptimeout->arg;
 800a4fe:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 800a502:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 800a504:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a506:	f7fc f9f3 	bl	80068f0 <memp_free>
        if (handler != NULL) {
 800a50a:	f1b8 0f00 	cmp.w	r8, #0
 800a50e:	d0e6      	beq.n	800a4de <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a510:	4648      	mov	r0, r9
 800a512:	47c0      	blx	r8
 800a514:	e7e3      	b.n	800a4de <sys_check_timeouts+0x16>
 800a516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51a:	bf00      	nop
 800a51c:	24000658 	.word	0x24000658
 800a520:	24000660 	.word	0x24000660
 800a524:	24003b98 	.word	0x24003b98

0800a528 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a528:	4770      	bx	lr
	...

0800a52c <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a52c:	8943      	ldrh	r3, [r0, #10]
 800a52e:	2b07      	cmp	r3, #7
{
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	4605      	mov	r5, r0
 800a536:	b085      	sub	sp, #20
 800a538:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800a53a:	d805      	bhi.n	800a548 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a53c:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a53e:	b005      	add	sp, #20
 800a540:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800a544:	f7fc bb50 	b.w	8006be8 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a548:	4e3e      	ldr	r6, [pc, #248]	; (800a644 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800a54a:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a54c:	6831      	ldr	r1, [r6, #0]
 800a54e:	6970      	ldr	r0, [r6, #20]
 800a550:	f7fb fbaf 	bl	8005cb2 <ip4_addr_isbroadcast_u32>
 800a554:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800a556:	8820      	ldrh	r0, [r4, #0]
 800a558:	f7fa fd82 	bl	8005060 <lwip_htons>
 800a55c:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800a55e:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 800a560:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 800a562:	f7fa fd7d 	bl	8005060 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a566:	4a38      	ldr	r2, [pc, #224]	; (800a648 <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 800a568:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a56a:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a56c:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 800a56e:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a570:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800a574:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a576:	4603      	mov	r3, r0
 800a578:	9603      	str	r6, [sp, #12]
 800a57a:	b92b      	cbnz	r3, 800a588 <udp_input+0x5c>
  if (pcb != NULL) {
 800a57c:	bb0c      	cbnz	r4, 800a5c2 <udp_input+0x96>
  if (for_us) {
 800a57e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a582:	428b      	cmp	r3, r1
 800a584:	d1da      	bne.n	800a53c <udp_input+0x10>
 800a586:	e01c      	b.n	800a5c2 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800a588:	8a5a      	ldrh	r2, [r3, #18]
 800a58a:	4552      	cmp	r2, sl
 800a58c:	d12b      	bne.n	800a5e6 <udp_input+0xba>
 800a58e:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800a590:	b32f      	cbz	r7, 800a5de <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a592:	b13a      	cbz	r2, 800a5a4 <udp_input+0x78>
 800a594:	1c4e      	adds	r6, r1, #1
 800a596:	d005      	beq.n	800a5a4 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a598:	404a      	eors	r2, r1
 800a59a:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a59c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a5a0:	4216      	tst	r6, r2
 800a5a2:	d120      	bne.n	800a5e6 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a5a4:	7c1a      	ldrb	r2, [r3, #16]
 800a5a6:	0752      	lsls	r2, r2, #29
 800a5a8:	d402      	bmi.n	800a5b0 <udp_input+0x84>
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	bf08      	it	eq
 800a5ae:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800a5b0:	8a9a      	ldrh	r2, [r3, #20]
 800a5b2:	4542      	cmp	r2, r8
 800a5b4:	d117      	bne.n	800a5e6 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a5b6:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a5b8:	b9c2      	cbnz	r2, 800a5ec <udp_input+0xc0>
        if (prev != NULL) {
 800a5ba:	f1bc 0f00 	cmp.w	ip, #0
 800a5be:	d118      	bne.n	800a5f2 <udp_input+0xc6>
 800a5c0:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800a5c2:	f06f 0107 	mvn.w	r1, #7
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7fc fb08 	bl	8006bdc <pbuf_header>
 800a5cc:	b1c0      	cbz	r0, 800a600 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a5ce:	4b1f      	ldr	r3, [pc, #124]	; (800a64c <udp_input+0x120>)
 800a5d0:	f240 1255 	movw	r2, #341	; 0x155
 800a5d4:	491e      	ldr	r1, [pc, #120]	; (800a650 <udp_input+0x124>)
 800a5d6:	481f      	ldr	r0, [pc, #124]	; (800a654 <udp_input+0x128>)
 800a5d8:	f000 ff16 	bl	800b408 <iprintf>
 800a5dc:	e7ae      	b.n	800a53c <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	d0e0      	beq.n	800a5a4 <udp_input+0x78>
 800a5e2:	428a      	cmp	r2, r1
 800a5e4:	d0de      	beq.n	800a5a4 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5e6:	469c      	mov	ip, r3
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	e7c6      	b.n	800a57a <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a5ec:	4572      	cmp	r2, lr
 800a5ee:	d1fa      	bne.n	800a5e6 <udp_input+0xba>
 800a5f0:	e7e3      	b.n	800a5ba <udp_input+0x8e>
          prev->next = pcb->next;
 800a5f2:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 800a5f4:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 800a5f8:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 800a5fc:	60d8      	str	r0, [r3, #12]
 800a5fe:	e7df      	b.n	800a5c0 <udp_input+0x94>
    if (pcb != NULL) {
 800a600:	b164      	cbz	r4, 800a61c <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800a602:	69a6      	ldr	r6, [r4, #24]
 800a604:	2e00      	cmp	r6, #0
 800a606:	d099      	beq.n	800a53c <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a608:	f8cd 8000 	str.w	r8, [sp]
 800a60c:	462a      	mov	r2, r5
 800a60e:	4b12      	ldr	r3, [pc, #72]	; (800a658 <udp_input+0x12c>)
 800a610:	4621      	mov	r1, r4
 800a612:	69e0      	ldr	r0, [r4, #28]
 800a614:	47b0      	blx	r6
}
 800a616:	b005      	add	sp, #20
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a61c:	2f00      	cmp	r7, #0
 800a61e:	d18d      	bne.n	800a53c <udp_input+0x10>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a628:	2be0      	cmp	r3, #224	; 0xe0
 800a62a:	d087      	beq.n	800a53c <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	4628      	mov	r0, r5
 800a630:	8999      	ldrh	r1, [r3, #12]
 800a632:	3108      	adds	r1, #8
 800a634:	b209      	sxth	r1, r1
 800a636:	f7fc fad4 	bl	8006be2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a63a:	2103      	movs	r1, #3
 800a63c:	4628      	mov	r0, r5
 800a63e:	f7fb f9b7 	bl	80059b0 <icmp_dest_unreach>
 800a642:	e77b      	b.n	800a53c <udp_input+0x10>
 800a644:	24000678 	.word	0x24000678
 800a648:	24003bb8 	.word	0x24003bb8
 800a64c:	0800f245 	.word	0x0800f245
 800a650:	0800f274 	.word	0x0800f274
 800a654:	0800db1d 	.word	0x0800db1d
 800a658:	24000688 	.word	0x24000688

0800a65c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a65c:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a65e:	b138      	cbz	r0, 800a670 <udp_netif_ip_addr_changed+0x14>
 800a660:	6803      	ldr	r3, [r0, #0]
 800a662:	b12b      	cbz	r3, 800a670 <udp_netif_ip_addr_changed+0x14>
 800a664:	b121      	cbz	r1, 800a670 <udp_netif_ip_addr_changed+0x14>
 800a666:	680b      	ldr	r3, [r1, #0]
 800a668:	b113      	cbz	r3, 800a670 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a66a:	4b06      	ldr	r3, [pc, #24]	; (800a684 <udp_netif_ip_addr_changed+0x28>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	b903      	cbnz	r3, 800a672 <udp_netif_ip_addr_changed+0x16>
 800a670:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a672:	681c      	ldr	r4, [r3, #0]
 800a674:	6802      	ldr	r2, [r0, #0]
 800a676:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a678:	bf04      	itt	eq
 800a67a:	680a      	ldreq	r2, [r1, #0]
 800a67c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	e7f5      	b.n	800a66e <udp_netif_ip_addr_changed+0x12>
 800a682:	bf00      	nop
 800a684:	24003bb8 	.word	0x24003bb8

0800a688 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800a688:	8943      	ldrh	r3, [r0, #10]
 800a68a:	2b0e      	cmp	r3, #14
{
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800a692:	d914      	bls.n	800a6be <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a694:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a696:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800a698:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800a69a:	07d9      	lsls	r1, r3, #31
 800a69c:	d50a      	bpl.n	800a6b4 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d111      	bne.n	800a6c6 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a6a2:	7843      	ldrb	r3, [r0, #1]
 800a6a4:	b933      	cbnz	r3, 800a6b4 <ethernet_input+0x2c>
 800a6a6:	7883      	ldrb	r3, [r0, #2]
 800a6a8:	2b5e      	cmp	r3, #94	; 0x5e
 800a6aa:	d103      	bne.n	800a6b4 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a6ac:	7b63      	ldrb	r3, [r4, #13]
 800a6ae:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a6b2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800a6b4:	2e08      	cmp	r6, #8
 800a6b6:	d010      	beq.n	800a6da <ethernet_input+0x52>
 800a6b8:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800a6bc:	d01e      	beq.n	800a6fc <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7fc fa92 	bl	8006be8 <pbuf_free>
  return ERR_OK;
 800a6c4:	e018      	b.n	800a6f8 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a6c6:	2206      	movs	r2, #6
 800a6c8:	4914      	ldr	r1, [pc, #80]	; (800a71c <ethernet_input+0x94>)
 800a6ca:	f000 fe7b 	bl	800b3c4 <memcmp>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d1f0      	bne.n	800a6b4 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800a6d2:	7b63      	ldrb	r3, [r4, #13]
 800a6d4:	f043 0308 	orr.w	r3, r3, #8
 800a6d8:	e7eb      	b.n	800a6b2 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a6da:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800a6de:	071a      	lsls	r2, r3, #28
 800a6e0:	d5ed      	bpl.n	800a6be <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a6e2:	f06f 010d 	mvn.w	r1, #13
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7fc fa78 	bl	8006bdc <pbuf_header>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1e6      	bne.n	800a6be <ethernet_input+0x36>
        ip4_input(p, netif);
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7fb f992 	bl	8005a1c <ip4_input>
}
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a6fc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800a700:	071b      	lsls	r3, r3, #28
 800a702:	d5dc      	bpl.n	800a6be <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a704:	f06f 010d 	mvn.w	r1, #13
 800a708:	4620      	mov	r0, r4
 800a70a:	f7fc fa67 	bl	8006bdc <pbuf_header>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d1d5      	bne.n	800a6be <ethernet_input+0x36>
        etharp_input(p, netif);
 800a712:	4629      	mov	r1, r5
 800a714:	4620      	mov	r0, r4
 800a716:	f7fa fdf3 	bl	8005300 <etharp_input>
      break;
 800a71a:	e7ed      	b.n	800a6f8 <ethernet_input+0x70>
 800a71c:	0800f288 	.word	0x0800f288

0800a720 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a724:	460d      	mov	r5, r1
 800a726:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a728:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800a72c:	4616      	mov	r6, r2
 800a72e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800a730:	f7fa fc96 	bl	8005060 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800a734:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800a736:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800a738:	4628      	mov	r0, r5
 800a73a:	f7fc fa4f 	bl	8006bdc <pbuf_header>
 800a73e:	b9e0      	cbnz	r0, 800a77a <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800a740:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800a742:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	600b      	str	r3, [r1, #0]
 800a74a:	88bb      	ldrh	r3, [r7, #4]
 800a74c:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800a74e:	6833      	ldr	r3, [r6, #0]
 800a750:	f8c1 3006 	str.w	r3, [r1, #6]
 800a754:	88b3      	ldrh	r3, [r6, #4]
 800a756:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a758:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a75c:	2b06      	cmp	r3, #6
 800a75e:	d006      	beq.n	800a76e <ethernet_output+0x4e>
 800a760:	4b08      	ldr	r3, [pc, #32]	; (800a784 <ethernet_output+0x64>)
 800a762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a766:	4908      	ldr	r1, [pc, #32]	; (800a788 <ethernet_output+0x68>)
 800a768:	4808      	ldr	r0, [pc, #32]	; (800a78c <ethernet_output+0x6c>)
 800a76a:	f000 fe4d 	bl	800b408 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a76e:	69a3      	ldr	r3, [r4, #24]
 800a770:	4629      	mov	r1, r5
 800a772:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800a774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800a778:	4718      	bx	r3
}
 800a77a:	f06f 0001 	mvn.w	r0, #1
 800a77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a782:	bf00      	nop
 800a784:	0800f28e 	.word	0x0800f28e
 800a788:	0800f2c3 	.word	0x0800f2c3
 800a78c:	0800db1d 	.word	0x0800db1d

0800a790 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800a790:	2000      	movs	r0, #0
 800a792:	4770      	bx	lr

0800a794 <low_level_output>:
{
 800a794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a796:	b08d      	sub	sp, #52	; 0x34
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a798:	2230      	movs	r2, #48	; 0x30
{
 800a79a:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a79c:	2100      	movs	r1, #0
 800a79e:	4668      	mov	r0, sp
 800a7a0:	f000 fe2a 	bl	800b3f8 <memset>
  uint32_t i=0, framelen = 0;
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	466b      	mov	r3, sp
 800a7a8:	4611      	mov	r1, r2
  for(q = p; q != NULL; q = q->next)
 800a7aa:	bb7c      	cbnz	r4, 800a80c <low_level_output+0x78>
  TxConfig.Length = framelen;
 800a7ac:	4b21      	ldr	r3, [pc, #132]	; (800a834 <low_level_output+0xa0>)
 800a7ae:	605a      	str	r2, [r3, #4]
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a7b0:	4a21      	ldr	r2, [pc, #132]	; (800a838 <low_level_output+0xa4>)
  TxConfig.TxBuffer = Txbuffer;
 800a7b2:	f8c3 d008 	str.w	sp, [r3, #8]
 800a7b6:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a7ba:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a7be:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800a7c2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a7c6:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a7ca:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800a7ce:	07a5      	lsls	r5, r4, #30
 800a7d0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800a7d2:	ea03 0e06 	and.w	lr, r3, r6
 800a7d6:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a7d8:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800a7da:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways-- != 0U);
 800a7de:	3901      	subs	r1, #1
 800a7e0:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800a7e4:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 800a7e8:	1c4f      	adds	r7, r1, #1
 800a7ea:	d1f6      	bne.n	800a7da <low_level_output+0x46>
 800a7ec:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 800a7ee:	f113 0f20 	cmn.w	r3, #32
 800a7f2:	d1ee      	bne.n	800a7d2 <low_level_output+0x3e>
 800a7f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a7f8:	f3bf 8f6f 	isb	sy
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a7fc:	2214      	movs	r2, #20
 800a7fe:	490d      	ldr	r1, [pc, #52]	; (800a834 <low_level_output+0xa0>)
 800a800:	480e      	ldr	r0, [pc, #56]	; (800a83c <low_level_output+0xa8>)
 800a802:	f7f6 fc58 	bl	80010b6 <HAL_ETH_Transmit>
  return errval;
 800a806:	2000      	movs	r0, #0
}
 800a808:	b00d      	add	sp, #52	; 0x34
 800a80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(i >= ETH_TX_DESC_CNT)	
 800a80c:	2904      	cmp	r1, #4
 800a80e:	d00d      	beq.n	800a82c <low_level_output+0x98>
    Txbuffer[i].buffer = q->payload;
 800a810:	6860      	ldr	r0, [r4, #4]
 800a812:	6018      	str	r0, [r3, #0]
    Txbuffer[i].len = q->len;
 800a814:	8960      	ldrh	r0, [r4, #10]
 800a816:	6058      	str	r0, [r3, #4]
    framelen += q->len;
 800a818:	4402      	add	r2, r0
    if(i>0)
 800a81a:	b109      	cbz	r1, 800a820 <low_level_output+0x8c>
      Txbuffer[i-1].next = &Txbuffer[i];
 800a81c:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 800a820:	6824      	ldr	r4, [r4, #0]
 800a822:	b904      	cbnz	r4, 800a826 <low_level_output+0x92>
      Txbuffer[i].next = NULL;
 800a824:	609c      	str	r4, [r3, #8]
    i++;
 800a826:	3101      	adds	r1, #1
 800a828:	330c      	adds	r3, #12
 800a82a:	e7be      	b.n	800a7aa <low_level_output+0x16>
      return ERR_IF;
 800a82c:	f06f 000b 	mvn.w	r0, #11
 800a830:	e7ea      	b.n	800a808 <low_level_output+0x74>
 800a832:	bf00      	nop
 800a834:	24003d18 	.word	0x24003d18
 800a838:	e000ed00 	.word	0xe000ed00
 800a83c:	24003ca8 	.word	0x24003ca8

0800a840 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 800a840:	f7f6 b860 	b.w	8000904 <HAL_GetTick>

0800a844 <ETH_PHY_IO_Init>:
{  
 800a844:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 800a846:	4802      	ldr	r0, [pc, #8]	; (800a850 <ETH_PHY_IO_Init+0xc>)
 800a848:	f7f6 fec8 	bl	80015dc <HAL_ETH_SetMDIOClockRange>
}
 800a84c:	2000      	movs	r0, #0
 800a84e:	bd08      	pop	{r3, pc}
 800a850:	24003ca8 	.word	0x24003ca8

0800a854 <ETH_PHY_IO_ReadReg>:
{
 800a854:	b508      	push	{r3, lr}
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a856:	4613      	mov	r3, r2
 800a858:	460a      	mov	r2, r1
 800a85a:	4601      	mov	r1, r0
 800a85c:	4803      	ldr	r0, [pc, #12]	; (800a86c <ETH_PHY_IO_ReadReg+0x18>)
 800a85e:	f7f6 fd8e 	bl	800137e <HAL_ETH_ReadPHYRegister>
 800a862:	3000      	adds	r0, #0
 800a864:	bf18      	it	ne
 800a866:	2001      	movne	r0, #1
}
 800a868:	4240      	negs	r0, r0
 800a86a:	bd08      	pop	{r3, pc}
 800a86c:	24003ca8 	.word	0x24003ca8

0800a870 <ETH_PHY_IO_WriteReg>:
{
 800a870:	b508      	push	{r3, lr}
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a872:	4613      	mov	r3, r2
 800a874:	460a      	mov	r2, r1
 800a876:	4601      	mov	r1, r0
 800a878:	4803      	ldr	r0, [pc, #12]	; (800a888 <ETH_PHY_IO_WriteReg+0x18>)
 800a87a:	f7f6 fdad 	bl	80013d8 <HAL_ETH_WritePHYRegister>
 800a87e:	3000      	adds	r0, #0
 800a880:	bf18      	it	ne
 800a882:	2001      	movne	r0, #1
}
 800a884:	4240      	negs	r0, r0
 800a886:	bd08      	pop	{r3, pc}
 800a888:	24003ca8 	.word	0x24003ca8

0800a88c <pbuf_free_custom>:
{
 800a88c:	b430      	push	{r4, r5}
 800a88e:	4601      	mov	r1, r0
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800a890:	6844      	ldr	r4, [r0, #4]
 800a892:	8900      	ldrh	r0, [r0, #8]
 800a894:	4603      	mov	r3, r0
  __ASM volatile ("dsb 0xF":::"memory");
 800a896:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 800a89a:	4d08      	ldr	r5, [pc, #32]	; (800a8bc <pbuf_free_custom+0x30>)
 800a89c:	1ac2      	subs	r2, r0, r3
    while (op_size > 0) {
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	4422      	add	r2, r4
 800a8a2:	dc07      	bgt.n	800a8b4 <pbuf_free_custom+0x28>
 800a8a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a8a8:	f3bf 8f6f 	isb	sy
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a8ac:	4804      	ldr	r0, [pc, #16]	; (800a8c0 <pbuf_free_custom+0x34>)
}
 800a8ae:	bc30      	pop	{r4, r5}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a8b0:	f7fc b80a 	b.w	80068c8 <memp_free_pool>
      SCB->DCIMVAC = op_addr;
 800a8b4:	f8c5 225c 	str.w	r2, [r5, #604]	; 0x25c
      op_size -=           linesize;
 800a8b8:	3b20      	subs	r3, #32
 800a8ba:	e7ef      	b.n	800a89c <pbuf_free_custom+0x10>
 800a8bc:	e000ed00 	.word	0xe000ed00
 800a8c0:	0800f320 	.word	0x0800f320

0800a8c4 <HAL_ETH_MspInit>:
{
 800a8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c6:	b08d      	sub	sp, #52	; 0x34
 800a8c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8ca:	2214      	movs	r2, #20
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	a807      	add	r0, sp, #28
 800a8d0:	f000 fd92 	bl	800b3f8 <memset>
  if(ethHandle->Instance==ETH)
 800a8d4:	6822      	ldr	r2, [r4, #0]
 800a8d6:	4b49      	ldr	r3, [pc, #292]	; (800a9fc <HAL_ETH_MspInit+0x138>)
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	f040 808c 	bne.w	800a9f6 <HAL_ETH_MspInit+0x132>
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a8de:	4b48      	ldr	r3, [pc, #288]	; (800aa00 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8e0:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8e2:	240b      	movs	r4, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8e4:	2703      	movs	r7, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a8e6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8ea:	a907      	add	r1, sp, #28
 800a8ec:	4845      	ldr	r0, [pc, #276]	; (800aa04 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ee:	2500      	movs	r5, #0
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a8f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8f4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800a8f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a8fc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800a900:	9200      	str	r2, [sp, #0]
 800a902:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a904:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a908:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a90c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800a910:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a914:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800a918:	9201      	str	r2, [sp, #4]
 800a91a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a91c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a920:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a924:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800a928:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a92c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800a930:	9202      	str	r2, [sp, #8]
 800a932:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a934:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a938:	f042 0204 	orr.w	r2, r2, #4
 800a93c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a940:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a944:	f002 0204 	and.w	r2, r2, #4
 800a948:	9203      	str	r2, [sp, #12]
 800a94a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a94c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a950:	f042 0201 	orr.w	r2, r2, #1
 800a954:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a958:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a95c:	f002 0201 	and.w	r2, r2, #1
 800a960:	9204      	str	r2, [sp, #16]
 800a962:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a968:	f042 0202 	orr.w	r2, r2, #2
 800a96c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a974:	f002 0202 	and.w	r2, r2, #2
 800a978:	9205      	str	r2, [sp, #20]
 800a97a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a97c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a984:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a98c:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a992:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a994:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a996:	9306      	str	r3, [sp, #24]
 800a998:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a99a:	2332      	movs	r3, #50	; 0x32
 800a99c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a99e:	f7f6 ff77 	bl	8001890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800a9a2:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9a4:	a907      	add	r1, sp, #28
 800a9a6:	4818      	ldr	r0, [pc, #96]	; (800aa08 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800a9a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9aa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ac:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9ae:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9b0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9b2:	f7f6 ff6d 	bl	8001890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 800a9b6:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 800a9b8:	a907      	add	r1, sp, #28
 800a9ba:	4813      	ldr	r0, [pc, #76]	; (800aa08 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 800a9bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9be:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9c2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9c4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 800a9c6:	f7f6 ff63 	bl	8001890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a9ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a9ce:	a907      	add	r1, sp, #28
 800a9d0:	480e      	ldr	r0, [pc, #56]	; (800aa0c <HAL_ETH_MspInit+0x148>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a9d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9d8:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9da:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a9dc:	f7f6 ff58 	bl	8001890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a9e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a9e4:	a907      	add	r1, sp, #28
 800a9e6:	480a      	ldr	r0, [pc, #40]	; (800aa10 <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a9e8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ea:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ec:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9ee:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9f0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a9f2:	f7f6 ff4d 	bl	8001890 <HAL_GPIO_Init>
}
 800a9f6:	b00d      	add	sp, #52	; 0x34
 800a9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	40028000 	.word	0x40028000
 800aa00:	58024400 	.word	0x58024400
 800aa04:	58020800 	.word	0x58020800
 800aa08:	58020000 	.word	0x58020000
 800aa0c:	58020400 	.word	0x58020400
 800aa10:	58021800 	.word	0x58021800

0800aa14 <ethernetif_input>:
{
 800aa14:	b530      	push	{r4, r5, lr}
  uint32_t framelength = 0;
 800aa16:	2300      	movs	r3, #0
{
 800aa18:	b087      	sub	sp, #28
 800aa1a:	4604      	mov	r4, r0
  if (HAL_ETH_IsRxDataAvailable(&heth))
 800aa1c:	481f      	ldr	r0, [pc, #124]	; (800aa9c <ethernetif_input+0x88>)
  uint32_t framelength = 0;
 800aa1e:	9302      	str	r3, [sp, #8]
  if (HAL_ETH_IsRxDataAvailable(&heth))
 800aa20:	f7f6 fb98 	bl	8001154 <HAL_ETH_IsRxDataAvailable>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d032      	beq.n	800aa8e <ethernetif_input+0x7a>
    HAL_ETH_GetRxDataBuffer(&heth, &RxBuff);
 800aa28:	a903      	add	r1, sp, #12
 800aa2a:	481c      	ldr	r0, [pc, #112]	; (800aa9c <ethernetif_input+0x88>)
 800aa2c:	f7f6 fc06 	bl	800123c <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800aa30:	a902      	add	r1, sp, #8
 800aa32:	481a      	ldr	r0, [pc, #104]	; (800aa9c <ethernetif_input+0x88>)
 800aa34:	f7f6 fc49 	bl	80012ca <HAL_ETH_GetRxDataLength>
    HAL_ETH_BuildRxDescriptors(&heth);
 800aa38:	4818      	ldr	r0, [pc, #96]	; (800aa9c <ethernetif_input+0x88>)
 800aa3a:	f7f6 fc62 	bl	8001302 <HAL_ETH_BuildRxDescriptors>
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800aa3e:	9902      	ldr	r1, [sp, #8]
 800aa40:	9803      	ldr	r0, [sp, #12]
 800aa42:	460b      	mov	r3, r1
  __ASM volatile ("dsb 0xF":::"memory");
 800aa44:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 800aa48:	4d15      	ldr	r5, [pc, #84]	; (800aaa0 <ethernetif_input+0x8c>)
 800aa4a:	1aca      	subs	r2, r1, r3
    while (op_size > 0) {
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	4402      	add	r2, r0
 800aa50:	dc1f      	bgt.n	800aa92 <ethernetif_input+0x7e>
 800aa52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aa56:	f3bf 8f6f 	isb	sy
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aa5a:	4812      	ldr	r0, [pc, #72]	; (800aaa4 <ethernetif_input+0x90>)
 800aa5c:	f7fb ff00 	bl	8006860 <memp_malloc_pool>
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800aa60:	4a11      	ldr	r2, [pc, #68]	; (800aaa8 <ethernetif_input+0x94>)
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aa62:	4603      	mov	r3, r0
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800aa64:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800aa68:	6102      	str	r2, [r0, #16]
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800aa6a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800aa6e:	2004      	movs	r0, #4
 800aa70:	9201      	str	r2, [sp, #4]
 800aa72:	9a03      	ldr	r2, [sp, #12]
 800aa74:	9200      	str	r2, [sp, #0]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f7fc f878 	bl	8006b6c <pbuf_alloced_custom>
  if (p == NULL) return;
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	b130      	cbz	r0, 800aa8e <ethernetif_input+0x7a>
  err = netif->input(p, netif);
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	4621      	mov	r1, r4
 800aa84:	4798      	blx	r3
  if (err != ERR_OK)
 800aa86:	b110      	cbz	r0, 800aa8e <ethernetif_input+0x7a>
    pbuf_free(p);
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f7fc f8ad 	bl	8006be8 <pbuf_free>
}
 800aa8e:	b007      	add	sp, #28
 800aa90:	bd30      	pop	{r4, r5, pc}
      SCB->DCIMVAC = op_addr;
 800aa92:	f8c5 225c 	str.w	r2, [r5, #604]	; 0x25c
      op_size -=           linesize;
 800aa96:	3b20      	subs	r3, #32
 800aa98:	e7d7      	b.n	800aa4a <ethernetif_input+0x36>
 800aa9a:	bf00      	nop
 800aa9c:	24003ca8 	.word	0x24003ca8
 800aaa0:	e000ed00 	.word	0xe000ed00
 800aaa4:	0800f320 	.word	0x0800f320
 800aaa8:	0800a88d 	.word	0x0800a88d

0800aaac <sys_now>:
  return HAL_GetTick();
 800aaac:	f7f5 bf2a 	b.w	8000904 <HAL_GetTick>

0800aab0 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	4604      	mov	r4, r0
 800aab4:	b09a      	sub	sp, #104	; 0x68
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aab6:	4819      	ldr	r0, [pc, #100]	; (800ab1c <ethernet_link_check_state+0x6c>)
 800aab8:	f7f5 fe78 	bl	80007ac <LAN8742_GetLinkState>
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aabc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800aac0:	075b      	lsls	r3, r3, #29
 800aac2:	d50c      	bpl.n	800aade <ethernet_link_check_state+0x2e>
 800aac4:	2801      	cmp	r0, #1
 800aac6:	d808      	bhi.n	800aada <ethernet_link_check_state+0x2a>
  {
    HAL_ETH_Stop(&heth);
 800aac8:	4815      	ldr	r0, [pc, #84]	; (800ab20 <ethernet_link_check_state+0x70>)
 800aaca:	f7f6 face 	bl	800106a <HAL_ETH_Stop>
    netif_set_down(netif);
 800aace:	4620      	mov	r0, r4
 800aad0:	f7fb ffc3 	bl	8006a5a <netif_set_down>
    netif_set_link_down(netif);
 800aad4:	4620      	mov	r0, r4
 800aad6:	f7fb ffdc 	bl	8006a92 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800aada:	b01a      	add	sp, #104	; 0x68
 800aadc:	bd70      	pop	{r4, r5, r6, pc}
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800aade:	2801      	cmp	r0, #1
 800aae0:	d9fb      	bls.n	800aada <ethernet_link_check_state+0x2a>
 800aae2:	3802      	subs	r0, #2
 800aae4:	2803      	cmp	r0, #3
 800aae6:	d8f8      	bhi.n	800aada <ethernet_link_check_state+0x2a>
 800aae8:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <ethernet_link_check_state+0x74>)
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800aaea:	a901      	add	r1, sp, #4
 800aaec:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
 800aaf0:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <ethernet_link_check_state+0x78>)
 800aaf2:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 800aaf6:	480a      	ldr	r0, [pc, #40]	; (800ab20 <ethernet_link_check_state+0x70>)
 800aaf8:	f7f6 fc9e 	bl	8001438 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aafc:	a901      	add	r1, sp, #4
 800aafe:	4808      	ldr	r0, [pc, #32]	; (800ab20 <ethernet_link_check_state+0x70>)
      MACConf.DuplexMode = duplex;
 800ab00:	9607      	str	r6, [sp, #28]
      MACConf.Speed = speed;
 800ab02:	9506      	str	r5, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ab04:	f7f6 fd5e 	bl	80015c4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800ab08:	4805      	ldr	r0, [pc, #20]	; (800ab20 <ethernet_link_check_state+0x70>)
 800ab0a:	f7f6 fa80 	bl	800100e <HAL_ETH_Start>
      netif_set_up(netif);
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f7fb ff94 	bl	8006a3c <netif_set_up>
      netif_set_link_up(netif);
 800ab14:	4620      	mov	r0, r4
 800ab16:	f7fb ffad 	bl	8006a74 <netif_set_link_up>
}
 800ab1a:	e7de      	b.n	800aada <ethernet_link_check_state+0x2a>
 800ab1c:	24003c88 	.word	0x24003c88
 800ab20:	24003ca8 	.word	0x24003ca8
 800ab24:	0800f2fa 	.word	0x0800f2fa
 800ab28:	0800f302 	.word	0x0800f302

0800ab2c <ethernetif_init>:
{
 800ab2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ab30:	4604      	mov	r4, r0
 800ab32:	b930      	cbnz	r0, 800ab42 <ethernetif_init+0x16>
 800ab34:	4b40      	ldr	r3, [pc, #256]	; (800ac38 <ethernetif_init+0x10c>)
 800ab36:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ab3a:	4940      	ldr	r1, [pc, #256]	; (800ac3c <ethernetif_init+0x110>)
 800ab3c:	4840      	ldr	r0, [pc, #256]	; (800ac40 <ethernetif_init+0x114>)
 800ab3e:	f000 fc63 	bl	800b408 <iprintf>
  netif->name[0] = IFNAME0;
 800ab42:	2373      	movs	r3, #115	; 0x73
  heth.Instance = ETH;
 800ab44:	4e3f      	ldr	r6, [pc, #252]	; (800ac44 <ethernetif_init+0x118>)
  MACAddr[0] = 0x00;
 800ab46:	2500      	movs	r5, #0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ab48:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800ac68 <ethernetif_init+0x13c>
  netif->name[0] = IFNAME0;
 800ab4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800ab50:	2374      	movs	r3, #116	; 0x74
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ab52:	4630      	mov	r0, r6
  MACAddr[0] = 0x00;
 800ab54:	f88d 5000 	strb.w	r5, [sp]
  netif->name[1] = IFNAME1;
 800ab58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800ab5c:	f44f 69c0 	mov.w	r9, #1536	; 0x600
  netif->output = etharp_output;
 800ab60:	4b39      	ldr	r3, [pc, #228]	; (800ac48 <ethernetif_init+0x11c>)
  MACAddr[3] = 0x00;
 800ab62:	f88d 5003 	strb.w	r5, [sp, #3]
  netif->output = etharp_output;
 800ab66:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800ab68:	4b38      	ldr	r3, [pc, #224]	; (800ac4c <ethernetif_init+0x120>)
  MACAddr[4] = 0x00;
 800ab6a:	f88d 5004 	strb.w	r5, [sp, #4]
  netif->linkoutput = low_level_output;
 800ab6e:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 800ab70:	4b37      	ldr	r3, [pc, #220]	; (800ac50 <ethernetif_init+0x124>)
  MACAddr[5] = 0x00;
 800ab72:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Instance = ETH;
 800ab76:	6033      	str	r3, [r6, #0]
  MACAddr[1] = 0x80;
 800ab78:	2380      	movs	r3, #128	; 0x80
  heth.Init.MACAddr = &MACAddr[0];
 800ab7a:	f8c6 d004 	str.w	sp, [r6, #4]
  MACAddr[1] = 0x80;
 800ab7e:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 800ab82:	23e1      	movs	r3, #225	; 0xe1
 800ab84:	f88d 3002 	strb.w	r3, [sp, #2]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	7233      	strb	r3, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ab8c:	4b31      	ldr	r3, [pc, #196]	; (800ac54 <ethernetif_init+0x128>)
 800ab8e:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ab90:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <ethernetif_init+0x12c>)
 800ab92:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1524;
 800ab94:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800ab98:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ab9a:	f7f6 fd5b 	bl	8001654 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ab9e:	2234      	movs	r2, #52	; 0x34
 800aba0:	4629      	mov	r1, r5
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800aba2:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800aba4:	4640      	mov	r0, r8
 800aba6:	f000 fc27 	bl	800b3f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800abaa:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 800abac:	482b      	ldr	r0, [pc, #172]	; (800ac5c <ethernetif_init+0x130>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800abae:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800abb2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800abb6:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800abba:	f7fb fe2f 	bl	800681c <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800abbe:	2306      	movs	r3, #6
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800abc0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800ac6c <ethernetif_init+0x140>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800abc4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800abc8:	6873      	ldr	r3, [r6, #4]
 800abca:	781a      	ldrb	r2, [r3, #0]
 800abcc:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800abd0:	785a      	ldrb	r2, [r3, #1]
 800abd2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800abd6:	789a      	ldrb	r2, [r3, #2]
 800abd8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800abdc:	78da      	ldrb	r2, [r3, #3]
 800abde:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800abe2:	791a      	ldrb	r2, [r3, #4]
 800abe4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800abe8:	795b      	ldrb	r3, [r3, #5]
 800abea:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = ETH_MAX_PAYLOAD;
 800abee:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800abf2:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800abf4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800abf8:	f043 030a 	orr.w	r3, r3, #10
 800abfc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800ac00:	fb09 8205 	mla	r2, r9, r5, r8
 800ac04:	4629      	mov	r1, r5
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800ac06:	3501      	adds	r5, #1
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f7f6 f9e2 	bl	8000fd4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800ac10:	2d04      	cmp	r5, #4
 800ac12:	d1f5      	bne.n	800ac00 <ethernetif_init+0xd4>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ac14:	4912      	ldr	r1, [pc, #72]	; (800ac60 <ethernetif_init+0x134>)
 800ac16:	4813      	ldr	r0, [pc, #76]	; (800ac64 <ethernetif_init+0x138>)
 800ac18:	f7f5 fd52 	bl	80006c0 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 800ac1c:	4811      	ldr	r0, [pc, #68]	; (800ac64 <ethernetif_init+0x138>)
 800ac1e:	f7f5 fd63 	bl	80006e8 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800ac22:	b937      	cbnz	r7, 800ac32 <ethernetif_init+0x106>
  ethernet_link_check_state(netif);
 800ac24:	4620      	mov	r0, r4
 800ac26:	f7ff ff43 	bl	800aab0 <ethernet_link_check_state>
}
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	b003      	add	sp, #12
 800ac2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 800ac32:	f000 fa7f 	bl	800b134 <Error_Handler>
 800ac36:	e7f8      	b.n	800ac2a <ethernetif_init+0xfe>
 800ac38:	0800f30a 	.word	0x0800f30a
 800ac3c:	0800dd01 	.word	0x0800dd01
 800ac40:	0800db1d 	.word	0x0800db1d
 800ac44:	24003ca8 	.word	0x24003ca8
 800ac48:	080056c5 	.word	0x080056c5
 800ac4c:	0800a795 	.word	0x0800a795
 800ac50:	40028000 	.word	0x40028000
 800ac54:	30040060 	.word	0x30040060
 800ac58:	30040000 	.word	0x30040000
 800ac5c:	0800f320 	.word	0x0800f320
 800ac60:	24000010 	.word	0x24000010
 800ac64:	24003c88 	.word	0x24003c88
 800ac68:	24003d18 	.word	0x24003d18
 800ac6c:	30040200 	.word	0x30040200

0800ac70 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  /* Initilialize the LwIP stack without RTOS */
	  IP_ADDRESS[0] = 169;
 800ac72:	23a9      	movs	r3, #169	; 0xa9
 800ac74:	4f2c      	ldr	r7, [pc, #176]	; (800ad28 <MX_LWIP_Init+0xb8>)
	  IP_ADDRESS[3] = 35;
	  NETMASK_ADDRESS[0] = 255;
	  NETMASK_ADDRESS[1] = 255;
	  NETMASK_ADDRESS[2] = 0;
	  NETMASK_ADDRESS[3] = 0;
	  GATEWAY_ADDRESS[0] = 0;
 800ac76:	4d2d      	ldr	r5, [pc, #180]	; (800ad2c <MX_LWIP_Init+0xbc>)
	  NETMASK_ADDRESS[2] = 0;
 800ac78:	2400      	movs	r4, #0
	  IP_ADDRESS[0] = 169;
 800ac7a:	703b      	strb	r3, [r7, #0]
	  IP_ADDRESS[1] = 254;
 800ac7c:	23fe      	movs	r3, #254	; 0xfe
	  NETMASK_ADDRESS[0] = 255;
 800ac7e:	4e2c      	ldr	r6, [pc, #176]	; (800ad30 <MX_LWIP_Init+0xc0>)
{
 800ac80:	b085      	sub	sp, #20
	  IP_ADDRESS[1] = 254;
 800ac82:	707b      	strb	r3, [r7, #1]
	  IP_ADDRESS[2] = 215;
 800ac84:	23d7      	movs	r3, #215	; 0xd7
	  GATEWAY_ADDRESS[0] = 0;
 800ac86:	702c      	strb	r4, [r5, #0]
	  IP_ADDRESS[2] = 215;
 800ac88:	70bb      	strb	r3, [r7, #2]
	  IP_ADDRESS[3] = 35;
 800ac8a:	2323      	movs	r3, #35	; 0x23
	  GATEWAY_ADDRESS[1] = 0;
 800ac8c:	706c      	strb	r4, [r5, #1]
	  IP_ADDRESS[3] = 35;
 800ac8e:	70fb      	strb	r3, [r7, #3]
	  NETMASK_ADDRESS[0] = 255;
 800ac90:	23ff      	movs	r3, #255	; 0xff
	  GATEWAY_ADDRESS[2] = 0;
 800ac92:	70ac      	strb	r4, [r5, #2]
	  NETMASK_ADDRESS[0] = 255;
 800ac94:	7033      	strb	r3, [r6, #0]
	  NETMASK_ADDRESS[1] = 255;
 800ac96:	7073      	strb	r3, [r6, #1]
	  GATEWAY_ADDRESS[3] = 0;
 800ac98:	70ec      	strb	r4, [r5, #3]
	  NETMASK_ADDRESS[2] = 0;
 800ac9a:	70b4      	strb	r4, [r6, #2]
	  NETMASK_ADDRESS[3] = 0;
 800ac9c:	70f4      	strb	r4, [r6, #3]
  lwip_init();
 800ac9e:	f7fa fa02 	bl	80050a6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800aca2:	787b      	ldrb	r3, [r7, #1]
 800aca4:	783a      	ldrb	r2, [r7, #0]
 800aca6:	041b      	lsls	r3, r3, #16
 800aca8:	4922      	ldr	r1, [pc, #136]	; (800ad34 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800acaa:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800acac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800acb0:	78fa      	ldrb	r2, [r7, #3]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800acb2:	0400      	lsls	r0, r0, #16
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800acb4:	4313      	orrs	r3, r2
 800acb6:	78ba      	ldrb	r2, [r7, #2]
 800acb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800acbc:	7832      	ldrb	r2, [r6, #0]
 800acbe:	ba1b      	rev	r3, r3
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800acc0:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800acc2:	7873      	ldrb	r3, [r6, #1]
 800acc4:	041b      	lsls	r3, r3, #16
 800acc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800acca:	78f2      	ldrb	r2, [r6, #3]
 800accc:	4313      	orrs	r3, r2
 800acce:	78b2      	ldrb	r2, [r6, #2]
 800acd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800acd4:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <MX_LWIP_Init+0xc8>)
 800acd6:	ba1b      	rev	r3, r3
 800acd8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800acda:	782b      	ldrb	r3, [r5, #0]
 800acdc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800ace0:	78eb      	ldrb	r3, [r5, #3]
 800ace2:	4318      	orrs	r0, r3
 800ace4:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ace6:	4d15      	ldr	r5, [pc, #84]	; (800ad3c <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ace8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800acec:	4b14      	ldr	r3, [pc, #80]	; (800ad40 <MX_LWIP_Init+0xd0>)
 800acee:	ba00      	rev	r0, r0
 800acf0:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800acf2:	4814      	ldr	r0, [pc, #80]	; (800ad44 <MX_LWIP_Init+0xd4>)
 800acf4:	9400      	str	r4, [sp, #0]
 800acf6:	9002      	str	r0, [sp, #8]
 800acf8:	4813      	ldr	r0, [pc, #76]	; (800ad48 <MX_LWIP_Init+0xd8>)
 800acfa:	9001      	str	r0, [sp, #4]
 800acfc:	4628      	mov	r0, r5
 800acfe:	f7fb fe59 	bl	80069b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ad02:	4628      	mov	r0, r5
 800ad04:	f7fb fe94 	bl	8006a30 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ad08:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ad0c:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800ad0e:	075b      	lsls	r3, r3, #29
 800ad10:	d504      	bpl.n	800ad1c <MX_LWIP_Init+0xac>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ad12:	b005      	add	sp, #20
 800ad14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800ad18:	f7fb be90 	b.w	8006a3c <netif_set_up>
}
 800ad1c:	b005      	add	sp, #20
 800ad1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800ad22:	f7fb be9a 	b.w	8006a5a <netif_set_down>
 800ad26:	bf00      	nop
 800ad28:	24003d88 	.word	0x24003d88
 800ad2c:	24003d4c 	.word	0x24003d4c
 800ad30:	24003d84 	.word	0x24003d84
 800ad34:	24003d80 	.word	0x24003d80
 800ad38:	24003d8c 	.word	0x24003d8c
 800ad3c:	24003d50 	.word	0x24003d50
 800ad40:	24003d90 	.word	0x24003d90
 800ad44:	0800a689 	.word	0x0800a689
 800ad48:	0800ab2d 	.word	0x0800ab2d

0800ad4c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800ad4c:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800ad4e:	4803      	ldr	r0, [pc, #12]	; (800ad5c <MX_LWIP_Process+0x10>)
 800ad50:	f7ff fe60 	bl	800aa14 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800ad54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 800ad58:	f7ff bbb6 	b.w	800a4c8 <sys_check_timeouts>
 800ad5c:	24003d50 	.word	0x24003d50

0800ad60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad64:	224c      	movs	r2, #76	; 0x4c
 800ad66:	2100      	movs	r1, #0
 800ad68:	a80a      	add	r0, sp, #40	; 0x28
 800ad6a:	f000 fb45 	bl	800b3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad6e:	2220      	movs	r2, #32
 800ad70:	2100      	movs	r1, #0
 800ad72:	a802      	add	r0, sp, #8
 800ad74:	f000 fb40 	bl	800b3f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad78:	22bc      	movs	r2, #188	; 0xbc
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	a81d      	add	r0, sp, #116	; 0x74
 800ad7e:	f000 fb3b 	bl	800b3f8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ad82:	2002      	movs	r0, #2
 800ad84:	f7f6 fe7e 	bl	8001a84 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ad88:	2300      	movs	r3, #0
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	4b22      	ldr	r3, [pc, #136]	; (800ae18 <SystemClock_Config+0xb8>)
 800ad8e:	699a      	ldr	r2, [r3, #24]
 800ad90:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ad94:	619a      	str	r2, [r3, #24]
 800ad96:	699a      	ldr	r2, [r3, #24]
 800ad98:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800ad9c:	9201      	str	r2, [sp, #4]
 800ad9e:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <SystemClock_Config+0xbc>)
 800ada0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ada2:	f041 0101 	orr.w	r1, r1, #1
 800ada6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ada8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800adaa:	f002 0201 	and.w	r2, r2, #1
 800adae:	9201      	str	r2, [sp, #4]
 800adb0:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800adb2:	699a      	ldr	r2, [r3, #24]
 800adb4:	0492      	lsls	r2, r2, #18
 800adb6:	d5fc      	bpl.n	800adb2 <SystemClock_Config+0x52>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adb8:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800adba:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 120;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 20;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800adbc:	2500      	movs	r5, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800adbe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adc2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800adc4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 800adc6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 120;
 800adc8:	2378      	movs	r3, #120	; 0x78
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800adca:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 120;
 800adcc:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800adce:	2314      	movs	r3, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800add0:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800add2:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800add4:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800add6:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800add8:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = 2;
 800adda:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800addc:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800adde:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ade0:	951c      	str	r5, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ade2:	f7f6 fe73 	bl	8001acc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ade6:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ade8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800adec:	2104      	movs	r1, #4
 800adee:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800adf0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800adf2:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800adf4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800adf6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800adf8:	2308      	movs	r3, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800adfa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800adfc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800adfe:	2340      	movs	r3, #64	; 0x40
 800ae00:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ae02:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ae04:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ae06:	f7f7 f985 	bl	8002114 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ae0a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ae0c:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800ae0e:	953a      	str	r5, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ae10:	f7f7 fbde 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800ae14:	b04d      	add	sp, #308	; 0x134
 800ae16:	bd30      	pop	{r4, r5, pc}
 800ae18:	58024800 	.word	0x58024800
 800ae1c:	58000400 	.word	0x58000400

0800ae20 <main>:
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	f5ad 6dff 	sub.w	sp, sp, #2040	; 0x7f8
/* MPU Configuration */

void MPU_Config(void)
{

	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800ae26:	2210      	movs	r2, #16
 800ae28:	2100      	movs	r1, #0
	  /* Disables the MPU */
	  HAL_MPU_Disable();
	  /**Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800ae2a:	2400      	movs	r4, #0
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800ae2c:	a80a      	add	r0, sp, #40	; 0x28
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ae2e:	2501      	movs	r5, #1
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800ae30:	f000 fae2 	bl	800b3f8 <memset>
	  HAL_MPU_Disable();
 800ae34:	f7f5 fdea 	bl	8000a0c <HAL_MPU_Disable>
	  MPU_InitStruct.BaseAddress = 0x30040000;
 800ae38:	4bb1      	ldr	r3, [pc, #708]	; (800b100 <main+0x2e0>)
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ae3a:	a80a      	add	r0, sp, #40	; 0x28
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ae3c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
	  MPU_InitStruct.BaseAddress = 0x30040000;
 800ae40:	930b      	str	r3, [sp, #44]	; 0x2c
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800ae42:	2307      	movs	r3, #7
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800ae44:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800ae48:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ae4c:	2303      	movs	r3, #3
	  MPU_InitStruct.SubRegionDisable = 0x0;
 800ae4e:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ae52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800ae56:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ae5a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800ae5e:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ae62:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800ae66:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ae6a:	f7f5 fdf1 	bl	8000a50 <HAL_MPU_ConfigRegion>
	  /**Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
	  MPU_InitStruct.BaseAddress = 0x30044000;
 800ae6e:	4ba5      	ldr	r3, [pc, #660]	; (800b104 <main+0x2e4>)
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ae70:	a80a      	add	r0, sp, #40	; 0x28
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ae72:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
	  MPU_InitStruct.BaseAddress = 0x30044000;
 800ae76:	930b      	str	r3, [sp, #44]	; 0x2c
	  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800ae78:	230d      	movs	r3, #13
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800ae7a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
	  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800ae7e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	  MPU_InitStruct.SubRegionDisable = 0x0;
 800ae82:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800ae86:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
	  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800ae8a:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ae8e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800ae92:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800ae96:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800ae9a:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ae9e:	f7f5 fdd7 	bl	8000a50 <HAL_MPU_ConfigRegion>
	  /* Enables the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800aea2:	2004      	movs	r0, #4
 800aea4:	f7f5 fdc2 	bl	8000a2c <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 800aea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aeac:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800aeb0:	4b95      	ldr	r3, [pc, #596]	; (800b108 <main+0x2e8>)
 800aeb2:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800aeb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aeba:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800aebe:	695a      	ldr	r2, [r3, #20]
 800aec0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aec4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800aec6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aeca:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800aece:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800aed2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800aed6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800aeda:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800aede:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800aee2:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800aee6:	07a5      	lsls	r5, r4, #30
 800aee8:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800aeea:	ea02 0e06 	and.w	lr, r2, r6
 800aeee:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800aef0:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800aef2:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways-- != 0U);
 800aef6:	3901      	subs	r1, #1
 800aef8:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800aefc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800af00:	1c4f      	adds	r7, r1, #1
 800af02:	d1f6      	bne.n	800aef2 <main+0xd2>
 800af04:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 800af06:	f112 0f20 	cmn.w	r2, #32
 800af0a:	d1ee      	bne.n	800aeea <main+0xca>
 800af0c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800af10:	695a      	ldr	r2, [r3, #20]
 800af12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800af16:	615a      	str	r2, [r3, #20]
 800af18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800af1c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800af20:	f7f5 fcb6 	bl	8000890 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af24:	2400      	movs	r4, #0
  SystemClock_Config();
 800af26:	f7ff ff1b 	bl	800ad60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af2a:	2214      	movs	r2, #20
 800af2c:	2100      	movs	r1, #0
 800af2e:	a80a      	add	r0, sp, #40	; 0x28
 800af30:	f000 fa62 	bl	800b3f8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af34:	4b75      	ldr	r3, [pc, #468]	; (800b10c <main+0x2ec>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800af36:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800af3a:	4875      	ldr	r0, [pc, #468]	; (800b110 <main+0x2f0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af40:	2501      	movs	r5, #1
  htim2.Instance = TIM2;
 800af42:	4e74      	ldr	r6, [pc, #464]	; (800b114 <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af44:	f042 0204 	orr.w	r2, r2, #4
 800af48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800af4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af50:	f002 0204 	and.w	r2, r2, #4
 800af54:	9201      	str	r2, [sp, #4]
 800af56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800af58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800af64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af68:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800af6c:	9202      	str	r2, [sp, #8]
 800af6e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800af70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af74:	f042 0201 	orr.w	r2, r2, #1
 800af78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800af7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af80:	f002 0201 	and.w	r2, r2, #1
 800af84:	9203      	str	r2, [sp, #12]
 800af86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800af88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af8c:	f042 0202 	orr.w	r2, r2, #2
 800af90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800af94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800af98:	f002 0202 	and.w	r2, r2, #2
 800af9c:	9204      	str	r2, [sp, #16]
 800af9e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800afa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800afa4:	f042 0208 	orr.w	r2, r2, #8
 800afa8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800afac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800afb0:	f002 0208 	and.w	r2, r2, #8
 800afb4:	9205      	str	r2, [sp, #20]
 800afb6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800afb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800afbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800afc4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800afc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afce:	9306      	str	r3, [sp, #24]
 800afd0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800afd2:	f7f6 fd4b 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800afd6:	2200      	movs	r2, #0
 800afd8:	2140      	movs	r1, #64	; 0x40
 800afda:	484f      	ldr	r0, [pc, #316]	; (800b118 <main+0x2f8>)
 800afdc:	f7f6 fd46 	bl	8001a6c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800afe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800afe4:	a90a      	add	r1, sp, #40	; 0x28
 800afe6:	484d      	ldr	r0, [pc, #308]	; (800b11c <main+0x2fc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800afe8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800afea:	4b4d      	ldr	r3, [pc, #308]	; (800b120 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afec:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800afee:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800aff0:	f7f6 fc4e 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800aff4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aff8:	a90a      	add	r1, sp, #40	; 0x28
 800affa:	4845      	ldr	r0, [pc, #276]	; (800b110 <main+0x2f0>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800affc:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800affe:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b000:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b002:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b004:	f7f6 fc44 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b008:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b00a:	a90a      	add	r1, sp, #40	; 0x28
 800b00c:	4842      	ldr	r0, [pc, #264]	; (800b118 <main+0x2f8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b00e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b010:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b012:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b014:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b016:	f7f6 fc3b 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b01a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b01c:	a90a      	add	r1, sp, #40	; 0x28
 800b01e:	483e      	ldr	r0, [pc, #248]	; (800b118 <main+0x2f8>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b020:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b022:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b024:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b026:	f7f6 fc33 	bl	8001890 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b02a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b02e:	a90a      	add	r1, sp, #40	; 0x28
 800b030:	483c      	ldr	r0, [pc, #240]	; (800b124 <main+0x304>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b032:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b034:	2302      	movs	r3, #2
  huart3.Instance = USART3;
 800b036:	4d3c      	ldr	r5, [pc, #240]	; (800b128 <main+0x308>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b038:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b03a:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b03c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b03e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b040:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b042:	f7f6 fc25 	bl	8001890 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800b046:	4a39      	ldr	r2, [pc, #228]	; (800b12c <main+0x30c>)
 800b048:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b04c:	4628      	mov	r0, r5
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b04e:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b050:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b052:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b054:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b056:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b058:	622c      	str	r4, [r5, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b05a:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b05c:	62ac      	str	r4, [r5, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 800b05e:	e885 000c 	stmia.w	r5, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b062:	230c      	movs	r3, #12
 800b064:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b066:	f7f9 fc0e 	bl	8004886 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7f9 fca0 	bl	80049b2 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b072:	4621      	mov	r1, r4
 800b074:	4628      	mov	r0, r5
 800b076:	f7f9 fcc0 	bl	80049fa <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800b07a:	4628      	mov	r0, r5
 800b07c:	f7f9 fc7e 	bl	800497c <HAL_UARTEx_DisableFifoMode>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b080:	2210      	movs	r2, #16
 800b082:	4621      	mov	r1, r4
 800b084:	a80a      	add	r0, sp, #40	; 0x28
 800b086:	f000 f9b7 	bl	800b3f8 <memset>
  htim2.Instance = TIM2;
 800b08a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b08e:	4630      	mov	r0, r6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b090:	9407      	str	r4, [sp, #28]
 800b092:	9408      	str	r4, [sp, #32]
 800b094:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b096:	60b4      	str	r4, [r6, #8]
  htim2.Init.Period = 0;
 800b098:	60f4      	str	r4, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b09a:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b09c:	61b4      	str	r4, [r6, #24]
  htim2.Init.Prescaler = 0;
 800b09e:	e886 0018 	stmia.w	r6, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b0a2:	f7f8 f96b 	bl	800337c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b0a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b0aa:	a90a      	add	r1, sp, #40	; 0x28
 800b0ac:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b0ae:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b0b0:	f7f8 f988 	bl	80033c4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b0b4:	a907      	add	r1, sp, #28
 800b0b6:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0b8:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0ba:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b0bc:	f7f8 fa30 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800b0c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b0c4:	4812      	ldr	r0, [pc, #72]	; (800b110 <main+0x2f0>)
 800b0c6:	f7f6 fcd6 	bl	8001a76 <HAL_GPIO_TogglePin>
sprintf(go,"Hello Mohamed \n\r");
 800b0ca:	4919      	ldr	r1, [pc, #100]	; (800b130 <main+0x310>)
 800b0cc:	a80a      	add	r0, sp, #40	; 0x28
	     HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800b0ce:	4c10      	ldr	r4, [pc, #64]	; (800b110 <main+0x2f0>)
sprintf(go,"Hello Mohamed \n\r");
 800b0d0:	f000 f9c0 	bl	800b454 <strcpy>
HAL_UART_Transmit(&huart3,go,strlen(go),1000);
 800b0d4:	a80a      	add	r0, sp, #40	; 0x28
 800b0d6:	f7f5 f90d 	bl	80002f4 <strlen>
 800b0da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0de:	b282      	uxth	r2, r0
 800b0e0:	a90a      	add	r1, sp, #40	; 0x28
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7f9 fb41 	bl	800476a <HAL_UART_Transmit>
MX_LWIP_Init();
 800b0e8:	f7ff fdc2 	bl	800ac70 <MX_LWIP_Init>
  httpd_init();
 800b0ec:	f7f9 ff78 	bl	8004fe0 <httpd_init>
	     HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800b0f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f7f6 fcbe 	bl	8001a76 <HAL_GPIO_TogglePin>
		 MX_LWIP_Process();
 800b0fa:	f7ff fe27 	bl	800ad4c <MX_LWIP_Process>
 800b0fe:	e7f7      	b.n	800b0f0 <main+0x2d0>
 800b100:	30040000 	.word	0x30040000
 800b104:	30044000 	.word	0x30044000
 800b108:	e000ed00 	.word	0xe000ed00
 800b10c:	58024400 	.word	0x58024400
 800b110:	58020400 	.word	0x58020400
 800b114:	24003e20 	.word	0x24003e20
 800b118:	58021800 	.word	0x58021800
 800b11c:	58020800 	.word	0x58020800
 800b120:	11110000 	.word	0x11110000
 800b124:	58020000 	.word	0x58020000
 800b128:	24003d94 	.word	0x24003d94
 800b12c:	40004800 	.word	0x40004800
 800b130:	0800f32c 	.word	0x0800f32c

0800b134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b134:	4770      	bx	lr
	...

0800b138 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b138:	4b07      	ldr	r3, [pc, #28]	; (800b158 <HAL_MspInit+0x20>)
{
 800b13a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b13c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800b140:	f042 0202 	orr.w	r2, r2, #2
 800b144:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800b148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b154:	b002      	add	sp, #8
 800b156:	4770      	bx	lr
 800b158:	58024400 	.word	0x58024400

0800b15c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800b15c:	6803      	ldr	r3, [r0, #0]
 800b15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800b162:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800b164:	d114      	bne.n	800b190 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b166:	4b0c      	ldr	r3, [pc, #48]	; (800b198 <HAL_TIM_Base_MspInit+0x3c>)
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b168:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b16a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b16e:	f042 0201 	orr.w	r2, r2, #1
 800b172:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b176:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b17c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b186:	f7f5 fbe5 	bl	8000954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b18a:	201c      	movs	r0, #28
 800b18c:	f7f5 fc1a 	bl	80009c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b190:	b003      	add	sp, #12
 800b192:	f85d fb04 	ldr.w	pc, [sp], #4
 800b196:	bf00      	nop
 800b198:	58024400 	.word	0x58024400

0800b19c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b19c:	b510      	push	{r4, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1a2:	2214      	movs	r2, #20
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	a803      	add	r0, sp, #12
 800b1a8:	f000 f926 	bl	800b3f8 <memset>
  if(huart->Instance==USART3)
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	4b14      	ldr	r3, [pc, #80]	; (800b200 <HAL_UART_MspInit+0x64>)
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d123      	bne.n	800b1fc <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b1b4:	4b13      	ldr	r3, [pc, #76]	; (800b204 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b1b6:	a903      	add	r1, sp, #12
 800b1b8:	4813      	ldr	r0, [pc, #76]	; (800b208 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800b1ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b1be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b1c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b1c6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b1ca:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b1d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b1d6:	f042 0208 	orr.w	r2, r2, #8
 800b1da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b1de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1e2:	f003 0308 	and.w	r3, r3, #8
 800b1e6:	9302      	str	r3, [sp, #8]
 800b1e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b1ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b1ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b1f4:	2307      	movs	r3, #7
 800b1f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b1f8:	f7f6 fb4a 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b1fc:	b008      	add	sp, #32
 800b1fe:	bd10      	pop	{r4, pc}
 800b200:	40004800 	.word	0x40004800
 800b204:	58024400 	.word	0x58024400
 800b208:	58020c00 	.word	0x58020c00

0800b20c <NMI_Handler>:
 800b20c:	4770      	bx	lr

0800b20e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b20e:	e7fe      	b.n	800b20e <HardFault_Handler>

0800b210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b210:	e7fe      	b.n	800b210 <MemManage_Handler>

0800b212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b212:	e7fe      	b.n	800b212 <BusFault_Handler>

0800b214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b214:	e7fe      	b.n	800b214 <UsageFault_Handler>

0800b216 <SVC_Handler>:
 800b216:	4770      	bx	lr

0800b218 <DebugMon_Handler>:
 800b218:	4770      	bx	lr

0800b21a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b21a:	4770      	bx	lr

0800b21c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b21c:	f7f5 bb66 	b.w	80008ec <HAL_IncTick>

0800b220 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b220:	4801      	ldr	r0, [pc, #4]	; (800b228 <TIM2_IRQHandler+0x8>)
 800b222:	f7f7 bf94 	b.w	800314e <HAL_TIM_IRQHandler>
 800b226:	bf00      	nop
 800b228:	24003e20 	.word	0x24003e20

0800b22c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	460e      	mov	r6, r1
 800b230:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b232:	460c      	mov	r4, r1
 800b234:	1ba3      	subs	r3, r4, r6
 800b236:	429d      	cmp	r5, r3
 800b238:	dc01      	bgt.n	800b23e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800b23a:	4628      	mov	r0, r5
 800b23c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800b23e:	f3af 8000 	nop.w
 800b242:	f804 0b01 	strb.w	r0, [r4], #1
 800b246:	e7f5      	b.n	800b234 <_read+0x8>

0800b248 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	460e      	mov	r6, r1
 800b24c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b24e:	460c      	mov	r4, r1
 800b250:	1ba3      	subs	r3, r4, r6
 800b252:	429d      	cmp	r5, r3
 800b254:	dc01      	bgt.n	800b25a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800b256:	4628      	mov	r0, r5
 800b258:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800b25a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b25e:	f3af 8000 	nop.w
 800b262:	e7f5      	b.n	800b250 <_write+0x8>

0800b264 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b264:	4b09      	ldr	r3, [pc, #36]	; (800b28c <_sbrk+0x28>)
{
 800b266:	4602      	mov	r2, r0
	if (heap_end == 0)
 800b268:	6819      	ldr	r1, [r3, #0]
 800b26a:	b909      	cbnz	r1, 800b270 <_sbrk+0xc>
		heap_end = &end;
 800b26c:	4908      	ldr	r1, [pc, #32]	; (800b290 <_sbrk+0x2c>)
 800b26e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800b270:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800b272:	4669      	mov	r1, sp
 800b274:	4402      	add	r2, r0
 800b276:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b278:	bf83      	ittte	hi
 800b27a:	220c      	movhi	r2, #12
 800b27c:	4b05      	ldrhi	r3, [pc, #20]	; (800b294 <_sbrk+0x30>)
		return (caddr_t) -1;
 800b27e:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800b282:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800b284:	bf88      	it	hi
 800b286:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	24000668 	.word	0x24000668
 800b290:	20000000 	.word	0x20000000
 800b294:	24003e60 	.word	0x24003e60

0800b298 <_close>:

int _close(int file)
{
	return -1;
}
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	4770      	bx	lr

0800b29e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800b29e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800b2a2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800b2a4:	604b      	str	r3, [r1, #4]
}
 800b2a6:	4770      	bx	lr

0800b2a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	4770      	bx	lr

0800b2ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	4770      	bx	lr

0800b2b0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b2b0:	4918      	ldr	r1, [pc, #96]	; (800b314 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b2b2:	4819      	ldr	r0, [pc, #100]	; (800b318 <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b2b4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b2b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800b2bc:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b2be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <SystemInit+0x6c>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800b2d0:	681c      	ldr	r4, [r3, #0]
 800b2d2:	4020      	ands	r0, r4
 800b2d4:	6018      	str	r0, [r3, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b2d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b2d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b2da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800b2dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800b2de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800b2e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b2e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b2e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800b2e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b2ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b2ec:	6818      	ldr	r0, [r3, #0]
 800b2ee:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800b2f2:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b2f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <SystemInit+0x70>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	0c1b      	lsrs	r3, r3, #16
 800b2fc:	041b      	lsls	r3, r3, #16
 800b2fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b302:	d202      	bcs.n	800b30a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b304:	2201      	movs	r2, #1
 800b306:	4b07      	ldr	r3, [pc, #28]	; (800b324 <SystemInit+0x74>)
 800b308:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b30a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b30e:	608b      	str	r3, [r1, #8]
 800b310:	bd10      	pop	{r4, pc}
 800b312:	bf00      	nop
 800b314:	e000ed00 	.word	0xe000ed00
 800b318:	eaf6ed7f 	.word	0xeaf6ed7f
 800b31c:	58024400 	.word	0x58024400
 800b320:	5c001000 	.word	0x5c001000
 800b324:	51008108 	.word	0x51008108

0800b328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b328:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b32c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b32e:	e003      	b.n	800b338 <LoopCopyDataInit>

0800b330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b330:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b336:	3104      	adds	r1, #4

0800b338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b338:	480b      	ldr	r0, [pc, #44]	; (800b368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b33a:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b33c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b33e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b340:	d3f6      	bcc.n	800b330 <CopyDataInit>
  ldr  r2, =_sbss
 800b342:	4a0b      	ldr	r2, [pc, #44]	; (800b370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b344:	e002      	b.n	800b34c <LoopFillZerobss>

0800b346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b348:	f842 3b04 	str.w	r3, [r2], #4

0800b34c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b34c:	4b09      	ldr	r3, [pc, #36]	; (800b374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b34e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b350:	d3f9      	bcc.n	800b346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b352:	f7ff ffad 	bl	800b2b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b356:	f000 f811 	bl	800b37c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b35a:	f7ff fd61 	bl	800ae20 <main>
  bx  lr    
 800b35e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b360:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800b364:	0800f3f8 	.word	0x0800f3f8
  ldr  r0, =_sdata
 800b368:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800b36c:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 800b370:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 800b374:	24003e64 	.word	0x24003e64

0800b378 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b378:	e7fe      	b.n	800b378 <ADC3_IRQHandler>
	...

0800b37c <__libc_init_array>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	4e0d      	ldr	r6, [pc, #52]	; (800b3b4 <__libc_init_array+0x38>)
 800b380:	4c0d      	ldr	r4, [pc, #52]	; (800b3b8 <__libc_init_array+0x3c>)
 800b382:	1ba4      	subs	r4, r4, r6
 800b384:	10a4      	asrs	r4, r4, #2
 800b386:	2500      	movs	r5, #0
 800b388:	42a5      	cmp	r5, r4
 800b38a:	d109      	bne.n	800b3a0 <__libc_init_array+0x24>
 800b38c:	4e0b      	ldr	r6, [pc, #44]	; (800b3bc <__libc_init_array+0x40>)
 800b38e:	4c0c      	ldr	r4, [pc, #48]	; (800b3c0 <__libc_init_array+0x44>)
 800b390:	f000 ff5a 	bl	800c248 <_init>
 800b394:	1ba4      	subs	r4, r4, r6
 800b396:	10a4      	asrs	r4, r4, #2
 800b398:	2500      	movs	r5, #0
 800b39a:	42a5      	cmp	r5, r4
 800b39c:	d105      	bne.n	800b3aa <__libc_init_array+0x2e>
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3a4:	4798      	blx	r3
 800b3a6:	3501      	adds	r5, #1
 800b3a8:	e7ee      	b.n	800b388 <__libc_init_array+0xc>
 800b3aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3ae:	4798      	blx	r3
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	e7f2      	b.n	800b39a <__libc_init_array+0x1e>
 800b3b4:	0800f3f0 	.word	0x0800f3f0
 800b3b8:	0800f3f0 	.word	0x0800f3f0
 800b3bc:	0800f3f0 	.word	0x0800f3f0
 800b3c0:	0800f3f4 	.word	0x0800f3f4

0800b3c4 <memcmp>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	3901      	subs	r1, #1
 800b3c8:	4402      	add	r2, r0
 800b3ca:	4290      	cmp	r0, r2
 800b3cc:	d101      	bne.n	800b3d2 <memcmp+0xe>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	bd10      	pop	{r4, pc}
 800b3d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b3d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b3da:	42a3      	cmp	r3, r4
 800b3dc:	d0f5      	beq.n	800b3ca <memcmp+0x6>
 800b3de:	1b18      	subs	r0, r3, r4
 800b3e0:	bd10      	pop	{r4, pc}

0800b3e2 <memcpy>:
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	1e43      	subs	r3, r0, #1
 800b3e6:	440a      	add	r2, r1
 800b3e8:	4291      	cmp	r1, r2
 800b3ea:	d100      	bne.n	800b3ee <memcpy+0xc>
 800b3ec:	bd10      	pop	{r4, pc}
 800b3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3f6:	e7f7      	b.n	800b3e8 <memcpy+0x6>

0800b3f8 <memset>:
 800b3f8:	4402      	add	r2, r0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d100      	bne.n	800b402 <memset+0xa>
 800b400:	4770      	bx	lr
 800b402:	f803 1b01 	strb.w	r1, [r3], #1
 800b406:	e7f9      	b.n	800b3fc <memset+0x4>

0800b408 <iprintf>:
 800b408:	b40f      	push	{r0, r1, r2, r3}
 800b40a:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <iprintf+0x2c>)
 800b40c:	b513      	push	{r0, r1, r4, lr}
 800b40e:	681c      	ldr	r4, [r3, #0]
 800b410:	b124      	cbz	r4, 800b41c <iprintf+0x14>
 800b412:	69a3      	ldr	r3, [r4, #24]
 800b414:	b913      	cbnz	r3, 800b41c <iprintf+0x14>
 800b416:	4620      	mov	r0, r4
 800b418:	f000 f876 	bl	800b508 <__sinit>
 800b41c:	ab05      	add	r3, sp, #20
 800b41e:	9a04      	ldr	r2, [sp, #16]
 800b420:	68a1      	ldr	r1, [r4, #8]
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	4620      	mov	r0, r4
 800b426:	f000 f9cf 	bl	800b7c8 <_vfiprintf_r>
 800b42a:	b002      	add	sp, #8
 800b42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b430:	b004      	add	sp, #16
 800b432:	4770      	bx	lr
 800b434:	2400002c 	.word	0x2400002c

0800b438 <strchr>:
 800b438:	b2c9      	uxtb	r1, r1
 800b43a:	4603      	mov	r3, r0
 800b43c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b440:	b11a      	cbz	r2, 800b44a <strchr+0x12>
 800b442:	4291      	cmp	r1, r2
 800b444:	d1f9      	bne.n	800b43a <strchr+0x2>
 800b446:	4618      	mov	r0, r3
 800b448:	4770      	bx	lr
 800b44a:	2900      	cmp	r1, #0
 800b44c:	bf0c      	ite	eq
 800b44e:	4618      	moveq	r0, r3
 800b450:	2000      	movne	r0, #0
 800b452:	4770      	bx	lr

0800b454 <strcpy>:
 800b454:	4603      	mov	r3, r0
 800b456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b45a:	f803 2b01 	strb.w	r2, [r3], #1
 800b45e:	2a00      	cmp	r2, #0
 800b460:	d1f9      	bne.n	800b456 <strcpy+0x2>
 800b462:	4770      	bx	lr

0800b464 <strncmp>:
 800b464:	b510      	push	{r4, lr}
 800b466:	b16a      	cbz	r2, 800b484 <strncmp+0x20>
 800b468:	3901      	subs	r1, #1
 800b46a:	1884      	adds	r4, r0, r2
 800b46c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b470:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b474:	4293      	cmp	r3, r2
 800b476:	d103      	bne.n	800b480 <strncmp+0x1c>
 800b478:	42a0      	cmp	r0, r4
 800b47a:	d001      	beq.n	800b480 <strncmp+0x1c>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1f5      	bne.n	800b46c <strncmp+0x8>
 800b480:	1a98      	subs	r0, r3, r2
 800b482:	bd10      	pop	{r4, pc}
 800b484:	4610      	mov	r0, r2
 800b486:	bd10      	pop	{r4, pc}

0800b488 <_cleanup_r>:
 800b488:	4901      	ldr	r1, [pc, #4]	; (800b490 <_cleanup_r+0x8>)
 800b48a:	f000 b8a9 	b.w	800b5e0 <_fwalk_reent>
 800b48e:	bf00      	nop
 800b490:	0800c09d 	.word	0x0800c09d

0800b494 <std.isra.0>:
 800b494:	2300      	movs	r3, #0
 800b496:	b510      	push	{r4, lr}
 800b498:	4604      	mov	r4, r0
 800b49a:	6003      	str	r3, [r0, #0]
 800b49c:	6043      	str	r3, [r0, #4]
 800b49e:	6083      	str	r3, [r0, #8]
 800b4a0:	8181      	strh	r1, [r0, #12]
 800b4a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b4a4:	81c2      	strh	r2, [r0, #14]
 800b4a6:	6103      	str	r3, [r0, #16]
 800b4a8:	6143      	str	r3, [r0, #20]
 800b4aa:	6183      	str	r3, [r0, #24]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	2208      	movs	r2, #8
 800b4b0:	305c      	adds	r0, #92	; 0x5c
 800b4b2:	f7ff ffa1 	bl	800b3f8 <memset>
 800b4b6:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <std.isra.0+0x38>)
 800b4b8:	6263      	str	r3, [r4, #36]	; 0x24
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <std.isra.0+0x3c>)
 800b4bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <std.isra.0+0x40>)
 800b4c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <std.isra.0+0x44>)
 800b4c4:	6224      	str	r4, [r4, #32]
 800b4c6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4c8:	bd10      	pop	{r4, pc}
 800b4ca:	bf00      	nop
 800b4cc:	0800bd41 	.word	0x0800bd41
 800b4d0:	0800bd63 	.word	0x0800bd63
 800b4d4:	0800bd9b 	.word	0x0800bd9b
 800b4d8:	0800bdbf 	.word	0x0800bdbf

0800b4dc <__sfmoreglue>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	1e4a      	subs	r2, r1, #1
 800b4e0:	2568      	movs	r5, #104	; 0x68
 800b4e2:	4355      	muls	r5, r2
 800b4e4:	460e      	mov	r6, r1
 800b4e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4ea:	f000 f8e5 	bl	800b6b8 <_malloc_r>
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	b140      	cbz	r0, 800b504 <__sfmoreglue+0x28>
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	e880 0042 	stmia.w	r0, {r1, r6}
 800b4f8:	300c      	adds	r0, #12
 800b4fa:	60a0      	str	r0, [r4, #8]
 800b4fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b500:	f7ff ff7a 	bl	800b3f8 <memset>
 800b504:	4620      	mov	r0, r4
 800b506:	bd70      	pop	{r4, r5, r6, pc}

0800b508 <__sinit>:
 800b508:	6983      	ldr	r3, [r0, #24]
 800b50a:	b510      	push	{r4, lr}
 800b50c:	4604      	mov	r4, r0
 800b50e:	bb33      	cbnz	r3, 800b55e <__sinit+0x56>
 800b510:	6483      	str	r3, [r0, #72]	; 0x48
 800b512:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b514:	6503      	str	r3, [r0, #80]	; 0x50
 800b516:	4b12      	ldr	r3, [pc, #72]	; (800b560 <__sinit+0x58>)
 800b518:	4a12      	ldr	r2, [pc, #72]	; (800b564 <__sinit+0x5c>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6282      	str	r2, [r0, #40]	; 0x28
 800b51e:	4298      	cmp	r0, r3
 800b520:	bf04      	itt	eq
 800b522:	2301      	moveq	r3, #1
 800b524:	6183      	streq	r3, [r0, #24]
 800b526:	f000 f81f 	bl	800b568 <__sfp>
 800b52a:	6060      	str	r0, [r4, #4]
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 f81b 	bl	800b568 <__sfp>
 800b532:	60a0      	str	r0, [r4, #8]
 800b534:	4620      	mov	r0, r4
 800b536:	f000 f817 	bl	800b568 <__sfp>
 800b53a:	2200      	movs	r2, #0
 800b53c:	60e0      	str	r0, [r4, #12]
 800b53e:	2104      	movs	r1, #4
 800b540:	6860      	ldr	r0, [r4, #4]
 800b542:	f7ff ffa7 	bl	800b494 <std.isra.0>
 800b546:	2201      	movs	r2, #1
 800b548:	2109      	movs	r1, #9
 800b54a:	68a0      	ldr	r0, [r4, #8]
 800b54c:	f7ff ffa2 	bl	800b494 <std.isra.0>
 800b550:	2202      	movs	r2, #2
 800b552:	2112      	movs	r1, #18
 800b554:	68e0      	ldr	r0, [r4, #12]
 800b556:	f7ff ff9d 	bl	800b494 <std.isra.0>
 800b55a:	2301      	movs	r3, #1
 800b55c:	61a3      	str	r3, [r4, #24]
 800b55e:	bd10      	pop	{r4, pc}
 800b560:	0800f3b0 	.word	0x0800f3b0
 800b564:	0800b489 	.word	0x0800b489

0800b568 <__sfp>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <__sfp+0x74>)
 800b56c:	681e      	ldr	r6, [r3, #0]
 800b56e:	69b3      	ldr	r3, [r6, #24]
 800b570:	4607      	mov	r7, r0
 800b572:	b913      	cbnz	r3, 800b57a <__sfp+0x12>
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff ffc7 	bl	800b508 <__sinit>
 800b57a:	3648      	adds	r6, #72	; 0x48
 800b57c:	68b4      	ldr	r4, [r6, #8]
 800b57e:	6873      	ldr	r3, [r6, #4]
 800b580:	3b01      	subs	r3, #1
 800b582:	d503      	bpl.n	800b58c <__sfp+0x24>
 800b584:	6833      	ldr	r3, [r6, #0]
 800b586:	b133      	cbz	r3, 800b596 <__sfp+0x2e>
 800b588:	6836      	ldr	r6, [r6, #0]
 800b58a:	e7f7      	b.n	800b57c <__sfp+0x14>
 800b58c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b590:	b16d      	cbz	r5, 800b5ae <__sfp+0x46>
 800b592:	3468      	adds	r4, #104	; 0x68
 800b594:	e7f4      	b.n	800b580 <__sfp+0x18>
 800b596:	2104      	movs	r1, #4
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff ff9f 	bl	800b4dc <__sfmoreglue>
 800b59e:	6030      	str	r0, [r6, #0]
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d1f1      	bne.n	800b588 <__sfp+0x20>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5b2:	81e3      	strh	r3, [r4, #14]
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	6665      	str	r5, [r4, #100]	; 0x64
 800b5ba:	6025      	str	r5, [r4, #0]
 800b5bc:	60a5      	str	r5, [r4, #8]
 800b5be:	6065      	str	r5, [r4, #4]
 800b5c0:	6125      	str	r5, [r4, #16]
 800b5c2:	6165      	str	r5, [r4, #20]
 800b5c4:	61a5      	str	r5, [r4, #24]
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5ce:	f7ff ff13 	bl	800b3f8 <memset>
 800b5d2:	6365      	str	r5, [r4, #52]	; 0x34
 800b5d4:	63a5      	str	r5, [r4, #56]	; 0x38
 800b5d6:	64a5      	str	r5, [r4, #72]	; 0x48
 800b5d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b5da:	e7e6      	b.n	800b5aa <__sfp+0x42>
 800b5dc:	0800f3b0 	.word	0x0800f3b0

0800b5e0 <_fwalk_reent>:
 800b5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	4689      	mov	r9, r1
 800b5e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5ec:	2600      	movs	r6, #0
 800b5ee:	b914      	cbnz	r4, 800b5f6 <_fwalk_reent+0x16>
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f6:	68a5      	ldr	r5, [r4, #8]
 800b5f8:	6867      	ldr	r7, [r4, #4]
 800b5fa:	3f01      	subs	r7, #1
 800b5fc:	d501      	bpl.n	800b602 <_fwalk_reent+0x22>
 800b5fe:	6824      	ldr	r4, [r4, #0]
 800b600:	e7f5      	b.n	800b5ee <_fwalk_reent+0xe>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d907      	bls.n	800b618 <_fwalk_reent+0x38>
 800b608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b60c:	3301      	adds	r3, #1
 800b60e:	d003      	beq.n	800b618 <_fwalk_reent+0x38>
 800b610:	4629      	mov	r1, r5
 800b612:	4640      	mov	r0, r8
 800b614:	47c8      	blx	r9
 800b616:	4306      	orrs	r6, r0
 800b618:	3568      	adds	r5, #104	; 0x68
 800b61a:	e7ee      	b.n	800b5fa <_fwalk_reent+0x1a>

0800b61c <_free_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4605      	mov	r5, r0
 800b620:	2900      	cmp	r1, #0
 800b622:	d045      	beq.n	800b6b0 <_free_r+0x94>
 800b624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b628:	1f0c      	subs	r4, r1, #4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bfb8      	it	lt
 800b62e:	18e4      	addlt	r4, r4, r3
 800b630:	f000 fdd4 	bl	800c1dc <__malloc_lock>
 800b634:	4a1f      	ldr	r2, [pc, #124]	; (800b6b4 <_free_r+0x98>)
 800b636:	6813      	ldr	r3, [r2, #0]
 800b638:	4610      	mov	r0, r2
 800b63a:	b933      	cbnz	r3, 800b64a <_free_r+0x2e>
 800b63c:	6063      	str	r3, [r4, #4]
 800b63e:	6014      	str	r4, [r2, #0]
 800b640:	4628      	mov	r0, r5
 800b642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b646:	f000 bdca 	b.w	800c1de <__malloc_unlock>
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	d90c      	bls.n	800b668 <_free_r+0x4c>
 800b64e:	6821      	ldr	r1, [r4, #0]
 800b650:	1862      	adds	r2, r4, r1
 800b652:	4293      	cmp	r3, r2
 800b654:	bf04      	itt	eq
 800b656:	681a      	ldreq	r2, [r3, #0]
 800b658:	685b      	ldreq	r3, [r3, #4]
 800b65a:	6063      	str	r3, [r4, #4]
 800b65c:	bf04      	itt	eq
 800b65e:	1852      	addeq	r2, r2, r1
 800b660:	6022      	streq	r2, [r4, #0]
 800b662:	6004      	str	r4, [r0, #0]
 800b664:	e7ec      	b.n	800b640 <_free_r+0x24>
 800b666:	4613      	mov	r3, r2
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	b10a      	cbz	r2, 800b670 <_free_r+0x54>
 800b66c:	42a2      	cmp	r2, r4
 800b66e:	d9fa      	bls.n	800b666 <_free_r+0x4a>
 800b670:	6819      	ldr	r1, [r3, #0]
 800b672:	1858      	adds	r0, r3, r1
 800b674:	42a0      	cmp	r0, r4
 800b676:	d10b      	bne.n	800b690 <_free_r+0x74>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	4401      	add	r1, r0
 800b67c:	1858      	adds	r0, r3, r1
 800b67e:	4282      	cmp	r2, r0
 800b680:	6019      	str	r1, [r3, #0]
 800b682:	d1dd      	bne.n	800b640 <_free_r+0x24>
 800b684:	6810      	ldr	r0, [r2, #0]
 800b686:	6852      	ldr	r2, [r2, #4]
 800b688:	605a      	str	r2, [r3, #4]
 800b68a:	4401      	add	r1, r0
 800b68c:	6019      	str	r1, [r3, #0]
 800b68e:	e7d7      	b.n	800b640 <_free_r+0x24>
 800b690:	d902      	bls.n	800b698 <_free_r+0x7c>
 800b692:	230c      	movs	r3, #12
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	e7d3      	b.n	800b640 <_free_r+0x24>
 800b698:	6820      	ldr	r0, [r4, #0]
 800b69a:	1821      	adds	r1, r4, r0
 800b69c:	428a      	cmp	r2, r1
 800b69e:	bf04      	itt	eq
 800b6a0:	6811      	ldreq	r1, [r2, #0]
 800b6a2:	6852      	ldreq	r2, [r2, #4]
 800b6a4:	6062      	str	r2, [r4, #4]
 800b6a6:	bf04      	itt	eq
 800b6a8:	1809      	addeq	r1, r1, r0
 800b6aa:	6021      	streq	r1, [r4, #0]
 800b6ac:	605c      	str	r4, [r3, #4]
 800b6ae:	e7c7      	b.n	800b640 <_free_r+0x24>
 800b6b0:	bd38      	pop	{r3, r4, r5, pc}
 800b6b2:	bf00      	nop
 800b6b4:	2400066c 	.word	0x2400066c

0800b6b8 <_malloc_r>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	1ccd      	adds	r5, r1, #3
 800b6bc:	f025 0503 	bic.w	r5, r5, #3
 800b6c0:	3508      	adds	r5, #8
 800b6c2:	2d0c      	cmp	r5, #12
 800b6c4:	bf38      	it	cc
 800b6c6:	250c      	movcc	r5, #12
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	db01      	blt.n	800b6d2 <_malloc_r+0x1a>
 800b6ce:	42a9      	cmp	r1, r5
 800b6d0:	d903      	bls.n	800b6da <_malloc_r+0x22>
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
 800b6da:	f000 fd7f 	bl	800c1dc <__malloc_lock>
 800b6de:	4a23      	ldr	r2, [pc, #140]	; (800b76c <_malloc_r+0xb4>)
 800b6e0:	6814      	ldr	r4, [r2, #0]
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	b991      	cbnz	r1, 800b70c <_malloc_r+0x54>
 800b6e6:	4c22      	ldr	r4, [pc, #136]	; (800b770 <_malloc_r+0xb8>)
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	b91b      	cbnz	r3, 800b6f4 <_malloc_r+0x3c>
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	f000 fb17 	bl	800bd20 <_sbrk_r>
 800b6f2:	6020      	str	r0, [r4, #0]
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f000 fb12 	bl	800bd20 <_sbrk_r>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d126      	bne.n	800b74e <_malloc_r+0x96>
 800b700:	230c      	movs	r3, #12
 800b702:	6033      	str	r3, [r6, #0]
 800b704:	4630      	mov	r0, r6
 800b706:	f000 fd6a 	bl	800c1de <__malloc_unlock>
 800b70a:	e7e4      	b.n	800b6d6 <_malloc_r+0x1e>
 800b70c:	680b      	ldr	r3, [r1, #0]
 800b70e:	1b5b      	subs	r3, r3, r5
 800b710:	d41a      	bmi.n	800b748 <_malloc_r+0x90>
 800b712:	2b0b      	cmp	r3, #11
 800b714:	d90f      	bls.n	800b736 <_malloc_r+0x7e>
 800b716:	600b      	str	r3, [r1, #0]
 800b718:	50cd      	str	r5, [r1, r3]
 800b71a:	18cc      	adds	r4, r1, r3
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 fd5e 	bl	800c1de <__malloc_unlock>
 800b722:	f104 000b 	add.w	r0, r4, #11
 800b726:	1d23      	adds	r3, r4, #4
 800b728:	f020 0007 	bic.w	r0, r0, #7
 800b72c:	1ac3      	subs	r3, r0, r3
 800b72e:	d01b      	beq.n	800b768 <_malloc_r+0xb0>
 800b730:	425a      	negs	r2, r3
 800b732:	50e2      	str	r2, [r4, r3]
 800b734:	bd70      	pop	{r4, r5, r6, pc}
 800b736:	428c      	cmp	r4, r1
 800b738:	bf0d      	iteet	eq
 800b73a:	6863      	ldreq	r3, [r4, #4]
 800b73c:	684b      	ldrne	r3, [r1, #4]
 800b73e:	6063      	strne	r3, [r4, #4]
 800b740:	6013      	streq	r3, [r2, #0]
 800b742:	bf18      	it	ne
 800b744:	460c      	movne	r4, r1
 800b746:	e7e9      	b.n	800b71c <_malloc_r+0x64>
 800b748:	460c      	mov	r4, r1
 800b74a:	6849      	ldr	r1, [r1, #4]
 800b74c:	e7ca      	b.n	800b6e4 <_malloc_r+0x2c>
 800b74e:	1cc4      	adds	r4, r0, #3
 800b750:	f024 0403 	bic.w	r4, r4, #3
 800b754:	42a0      	cmp	r0, r4
 800b756:	d005      	beq.n	800b764 <_malloc_r+0xac>
 800b758:	1a21      	subs	r1, r4, r0
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 fae0 	bl	800bd20 <_sbrk_r>
 800b760:	3001      	adds	r0, #1
 800b762:	d0cd      	beq.n	800b700 <_malloc_r+0x48>
 800b764:	6025      	str	r5, [r4, #0]
 800b766:	e7d9      	b.n	800b71c <_malloc_r+0x64>
 800b768:	bd70      	pop	{r4, r5, r6, pc}
 800b76a:	bf00      	nop
 800b76c:	2400066c 	.word	0x2400066c
 800b770:	24000670 	.word	0x24000670

0800b774 <__sfputc_r>:
 800b774:	6893      	ldr	r3, [r2, #8]
 800b776:	3b01      	subs	r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	b410      	push	{r4}
 800b77c:	6093      	str	r3, [r2, #8]
 800b77e:	da09      	bge.n	800b794 <__sfputc_r+0x20>
 800b780:	6994      	ldr	r4, [r2, #24]
 800b782:	42a3      	cmp	r3, r4
 800b784:	db02      	blt.n	800b78c <__sfputc_r+0x18>
 800b786:	b2cb      	uxtb	r3, r1
 800b788:	2b0a      	cmp	r3, #10
 800b78a:	d103      	bne.n	800b794 <__sfputc_r+0x20>
 800b78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b790:	f000 bb1a 	b.w	800bdc8 <__swbuf_r>
 800b794:	6813      	ldr	r3, [r2, #0]
 800b796:	1c58      	adds	r0, r3, #1
 800b798:	6010      	str	r0, [r2, #0]
 800b79a:	7019      	strb	r1, [r3, #0]
 800b79c:	b2c8      	uxtb	r0, r1
 800b79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <__sfputs_r>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460f      	mov	r7, r1
 800b7aa:	4614      	mov	r4, r2
 800b7ac:	18d5      	adds	r5, r2, r3
 800b7ae:	42ac      	cmp	r4, r5
 800b7b0:	d101      	bne.n	800b7b6 <__sfputs_r+0x12>
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	e007      	b.n	800b7c6 <__sfputs_r+0x22>
 800b7b6:	463a      	mov	r2, r7
 800b7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff ffd9 	bl	800b774 <__sfputc_r>
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	d1f3      	bne.n	800b7ae <__sfputs_r+0xa>
 800b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7c8 <_vfiprintf_r>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	b09d      	sub	sp, #116	; 0x74
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	4617      	mov	r7, r2
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	b118      	cbz	r0, 800b7e0 <_vfiprintf_r+0x18>
 800b7d8:	6983      	ldr	r3, [r0, #24]
 800b7da:	b90b      	cbnz	r3, 800b7e0 <_vfiprintf_r+0x18>
 800b7dc:	f7ff fe94 	bl	800b508 <__sinit>
 800b7e0:	4b7c      	ldr	r3, [pc, #496]	; (800b9d4 <_vfiprintf_r+0x20c>)
 800b7e2:	429c      	cmp	r4, r3
 800b7e4:	d157      	bne.n	800b896 <_vfiprintf_r+0xce>
 800b7e6:	6874      	ldr	r4, [r6, #4]
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	0718      	lsls	r0, r3, #28
 800b7ec:	d55d      	bpl.n	800b8aa <_vfiprintf_r+0xe2>
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d05a      	beq.n	800b8aa <_vfiprintf_r+0xe2>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7fe:	2330      	movs	r3, #48	; 0x30
 800b800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b804:	f04f 0b01 	mov.w	fp, #1
 800b808:	46b8      	mov	r8, r7
 800b80a:	4645      	mov	r5, r8
 800b80c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d155      	bne.n	800b8c0 <_vfiprintf_r+0xf8>
 800b814:	ebb8 0a07 	subs.w	sl, r8, r7
 800b818:	d00b      	beq.n	800b832 <_vfiprintf_r+0x6a>
 800b81a:	4653      	mov	r3, sl
 800b81c:	463a      	mov	r2, r7
 800b81e:	4621      	mov	r1, r4
 800b820:	4630      	mov	r0, r6
 800b822:	f7ff ffbf 	bl	800b7a4 <__sfputs_r>
 800b826:	3001      	adds	r0, #1
 800b828:	f000 80c4 	beq.w	800b9b4 <_vfiprintf_r+0x1ec>
 800b82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82e:	4453      	add	r3, sl
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
 800b832:	f898 3000 	ldrb.w	r3, [r8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	f000 80bc 	beq.w	800b9b4 <_vfiprintf_r+0x1ec>
 800b83c:	2300      	movs	r3, #0
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295
 800b842:	9304      	str	r3, [sp, #16]
 800b844:	9307      	str	r3, [sp, #28]
 800b846:	9205      	str	r2, [sp, #20]
 800b848:	9306      	str	r3, [sp, #24]
 800b84a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b84e:	931a      	str	r3, [sp, #104]	; 0x68
 800b850:	2205      	movs	r2, #5
 800b852:	7829      	ldrb	r1, [r5, #0]
 800b854:	4860      	ldr	r0, [pc, #384]	; (800b9d8 <_vfiprintf_r+0x210>)
 800b856:	f7f4 fd5b 	bl	8000310 <memchr>
 800b85a:	f105 0801 	add.w	r8, r5, #1
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	2800      	cmp	r0, #0
 800b862:	d131      	bne.n	800b8c8 <_vfiprintf_r+0x100>
 800b864:	06d9      	lsls	r1, r3, #27
 800b866:	bf44      	itt	mi
 800b868:	2220      	movmi	r2, #32
 800b86a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b86e:	071a      	lsls	r2, r3, #28
 800b870:	bf44      	itt	mi
 800b872:	222b      	movmi	r2, #43	; 0x2b
 800b874:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b878:	782a      	ldrb	r2, [r5, #0]
 800b87a:	2a2a      	cmp	r2, #42	; 0x2a
 800b87c:	d02c      	beq.n	800b8d8 <_vfiprintf_r+0x110>
 800b87e:	9a07      	ldr	r2, [sp, #28]
 800b880:	2100      	movs	r1, #0
 800b882:	200a      	movs	r0, #10
 800b884:	46a8      	mov	r8, r5
 800b886:	3501      	adds	r5, #1
 800b888:	f898 3000 	ldrb.w	r3, [r8]
 800b88c:	3b30      	subs	r3, #48	; 0x30
 800b88e:	2b09      	cmp	r3, #9
 800b890:	d96d      	bls.n	800b96e <_vfiprintf_r+0x1a6>
 800b892:	b371      	cbz	r1, 800b8f2 <_vfiprintf_r+0x12a>
 800b894:	e026      	b.n	800b8e4 <_vfiprintf_r+0x11c>
 800b896:	4b51      	ldr	r3, [pc, #324]	; (800b9dc <_vfiprintf_r+0x214>)
 800b898:	429c      	cmp	r4, r3
 800b89a:	d101      	bne.n	800b8a0 <_vfiprintf_r+0xd8>
 800b89c:	68b4      	ldr	r4, [r6, #8]
 800b89e:	e7a3      	b.n	800b7e8 <_vfiprintf_r+0x20>
 800b8a0:	4b4f      	ldr	r3, [pc, #316]	; (800b9e0 <_vfiprintf_r+0x218>)
 800b8a2:	429c      	cmp	r4, r3
 800b8a4:	bf08      	it	eq
 800b8a6:	68f4      	ldreq	r4, [r6, #12]
 800b8a8:	e79e      	b.n	800b7e8 <_vfiprintf_r+0x20>
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f000 faef 	bl	800be90 <__swsetup_r>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d09e      	beq.n	800b7f4 <_vfiprintf_r+0x2c>
 800b8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ba:	b01d      	add	sp, #116	; 0x74
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c0:	2b25      	cmp	r3, #37	; 0x25
 800b8c2:	d0a7      	beq.n	800b814 <_vfiprintf_r+0x4c>
 800b8c4:	46a8      	mov	r8, r5
 800b8c6:	e7a0      	b.n	800b80a <_vfiprintf_r+0x42>
 800b8c8:	4a43      	ldr	r2, [pc, #268]	; (800b9d8 <_vfiprintf_r+0x210>)
 800b8ca:	1a80      	subs	r0, r0, r2
 800b8cc:	fa0b f000 	lsl.w	r0, fp, r0
 800b8d0:	4318      	orrs	r0, r3
 800b8d2:	9004      	str	r0, [sp, #16]
 800b8d4:	4645      	mov	r5, r8
 800b8d6:	e7bb      	b.n	800b850 <_vfiprintf_r+0x88>
 800b8d8:	9a03      	ldr	r2, [sp, #12]
 800b8da:	1d11      	adds	r1, r2, #4
 800b8dc:	6812      	ldr	r2, [r2, #0]
 800b8de:	9103      	str	r1, [sp, #12]
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	db01      	blt.n	800b8e8 <_vfiprintf_r+0x120>
 800b8e4:	9207      	str	r2, [sp, #28]
 800b8e6:	e004      	b.n	800b8f2 <_vfiprintf_r+0x12a>
 800b8e8:	4252      	negs	r2, r2
 800b8ea:	f043 0302 	orr.w	r3, r3, #2
 800b8ee:	9207      	str	r2, [sp, #28]
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	f898 3000 	ldrb.w	r3, [r8]
 800b8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f8:	d110      	bne.n	800b91c <_vfiprintf_r+0x154>
 800b8fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b900:	f108 0101 	add.w	r1, r8, #1
 800b904:	d137      	bne.n	800b976 <_vfiprintf_r+0x1ae>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	1d1a      	adds	r2, r3, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	9203      	str	r2, [sp, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfb8      	it	lt
 800b912:	f04f 33ff 	movlt.w	r3, #4294967295
 800b916:	f108 0802 	add.w	r8, r8, #2
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	4d31      	ldr	r5, [pc, #196]	; (800b9e4 <_vfiprintf_r+0x21c>)
 800b91e:	f898 1000 	ldrb.w	r1, [r8]
 800b922:	2203      	movs	r2, #3
 800b924:	4628      	mov	r0, r5
 800b926:	f7f4 fcf3 	bl	8000310 <memchr>
 800b92a:	b140      	cbz	r0, 800b93e <_vfiprintf_r+0x176>
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	1b40      	subs	r0, r0, r5
 800b930:	fa03 f000 	lsl.w	r0, r3, r0
 800b934:	9b04      	ldr	r3, [sp, #16]
 800b936:	4303      	orrs	r3, r0
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	f108 0801 	add.w	r8, r8, #1
 800b93e:	f898 1000 	ldrb.w	r1, [r8]
 800b942:	4829      	ldr	r0, [pc, #164]	; (800b9e8 <_vfiprintf_r+0x220>)
 800b944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b948:	2206      	movs	r2, #6
 800b94a:	f108 0701 	add.w	r7, r8, #1
 800b94e:	f7f4 fcdf 	bl	8000310 <memchr>
 800b952:	2800      	cmp	r0, #0
 800b954:	d034      	beq.n	800b9c0 <_vfiprintf_r+0x1f8>
 800b956:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <_vfiprintf_r+0x224>)
 800b958:	bb03      	cbnz	r3, 800b99c <_vfiprintf_r+0x1d4>
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	3307      	adds	r3, #7
 800b95e:	f023 0307 	bic.w	r3, r3, #7
 800b962:	3308      	adds	r3, #8
 800b964:	9303      	str	r3, [sp, #12]
 800b966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b968:	444b      	add	r3, r9
 800b96a:	9309      	str	r3, [sp, #36]	; 0x24
 800b96c:	e74c      	b.n	800b808 <_vfiprintf_r+0x40>
 800b96e:	fb00 3202 	mla	r2, r0, r2, r3
 800b972:	2101      	movs	r1, #1
 800b974:	e786      	b.n	800b884 <_vfiprintf_r+0xbc>
 800b976:	2300      	movs	r3, #0
 800b978:	9305      	str	r3, [sp, #20]
 800b97a:	4618      	mov	r0, r3
 800b97c:	250a      	movs	r5, #10
 800b97e:	4688      	mov	r8, r1
 800b980:	3101      	adds	r1, #1
 800b982:	f898 2000 	ldrb.w	r2, [r8]
 800b986:	3a30      	subs	r2, #48	; 0x30
 800b988:	2a09      	cmp	r2, #9
 800b98a:	d903      	bls.n	800b994 <_vfiprintf_r+0x1cc>
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0c5      	beq.n	800b91c <_vfiprintf_r+0x154>
 800b990:	9005      	str	r0, [sp, #20]
 800b992:	e7c3      	b.n	800b91c <_vfiprintf_r+0x154>
 800b994:	fb05 2000 	mla	r0, r5, r0, r2
 800b998:	2301      	movs	r3, #1
 800b99a:	e7f0      	b.n	800b97e <_vfiprintf_r+0x1b6>
 800b99c:	ab03      	add	r3, sp, #12
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4b13      	ldr	r3, [pc, #76]	; (800b9f0 <_vfiprintf_r+0x228>)
 800b9a4:	a904      	add	r1, sp, #16
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f3af 8000 	nop.w
 800b9ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b9b0:	4681      	mov	r9, r0
 800b9b2:	d1d8      	bne.n	800b966 <_vfiprintf_r+0x19e>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	065b      	lsls	r3, r3, #25
 800b9b8:	f53f af7d 	bmi.w	800b8b6 <_vfiprintf_r+0xee>
 800b9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9be:	e77c      	b.n	800b8ba <_vfiprintf_r+0xf2>
 800b9c0:	ab03      	add	r3, sp, #12
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4b0a      	ldr	r3, [pc, #40]	; (800b9f0 <_vfiprintf_r+0x228>)
 800b9c8:	a904      	add	r1, sp, #16
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f000 f888 	bl	800bae0 <_printf_i>
 800b9d0:	e7ec      	b.n	800b9ac <_vfiprintf_r+0x1e4>
 800b9d2:	bf00      	nop
 800b9d4:	0800f370 	.word	0x0800f370
 800b9d8:	0800f3b4 	.word	0x0800f3b4
 800b9dc:	0800f390 	.word	0x0800f390
 800b9e0:	0800f350 	.word	0x0800f350
 800b9e4:	0800f3ba 	.word	0x0800f3ba
 800b9e8:	0800f3be 	.word	0x0800f3be
 800b9ec:	00000000 	.word	0x00000000
 800b9f0:	0800b7a5 	.word	0x0800b7a5

0800b9f4 <_printf_common>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	4691      	mov	r9, r2
 800b9fa:	461f      	mov	r7, r3
 800b9fc:	688a      	ldr	r2, [r1, #8]
 800b9fe:	690b      	ldr	r3, [r1, #16]
 800ba00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	bfb8      	it	lt
 800ba08:	4613      	movlt	r3, r2
 800ba0a:	f8c9 3000 	str.w	r3, [r9]
 800ba0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba12:	4606      	mov	r6, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	b112      	cbz	r2, 800ba1e <_printf_common+0x2a>
 800ba18:	3301      	adds	r3, #1
 800ba1a:	f8c9 3000 	str.w	r3, [r9]
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	0699      	lsls	r1, r3, #26
 800ba22:	bf42      	ittt	mi
 800ba24:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ba28:	3302      	addmi	r3, #2
 800ba2a:	f8c9 3000 	strmi.w	r3, [r9]
 800ba2e:	6825      	ldr	r5, [r4, #0]
 800ba30:	f015 0506 	ands.w	r5, r5, #6
 800ba34:	d107      	bne.n	800ba46 <_printf_common+0x52>
 800ba36:	f104 0a19 	add.w	sl, r4, #25
 800ba3a:	68e3      	ldr	r3, [r4, #12]
 800ba3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ba40:	1a9b      	subs	r3, r3, r2
 800ba42:	429d      	cmp	r5, r3
 800ba44:	db29      	blt.n	800ba9a <_printf_common+0xa6>
 800ba46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	3300      	adds	r3, #0
 800ba4e:	bf18      	it	ne
 800ba50:	2301      	movne	r3, #1
 800ba52:	0692      	lsls	r2, r2, #26
 800ba54:	d42e      	bmi.n	800bab4 <_printf_common+0xc0>
 800ba56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	47c0      	blx	r8
 800ba60:	3001      	adds	r0, #1
 800ba62:	d021      	beq.n	800baa8 <_printf_common+0xb4>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	68e5      	ldr	r5, [r4, #12]
 800ba68:	f8d9 2000 	ldr.w	r2, [r9]
 800ba6c:	f003 0306 	and.w	r3, r3, #6
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	bf08      	it	eq
 800ba74:	1aad      	subeq	r5, r5, r2
 800ba76:	68a3      	ldr	r3, [r4, #8]
 800ba78:	6922      	ldr	r2, [r4, #16]
 800ba7a:	bf0c      	ite	eq
 800ba7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba80:	2500      	movne	r5, #0
 800ba82:	4293      	cmp	r3, r2
 800ba84:	bfc4      	itt	gt
 800ba86:	1a9b      	subgt	r3, r3, r2
 800ba88:	18ed      	addgt	r5, r5, r3
 800ba8a:	f04f 0900 	mov.w	r9, #0
 800ba8e:	341a      	adds	r4, #26
 800ba90:	454d      	cmp	r5, r9
 800ba92:	d11b      	bne.n	800bacc <_printf_common+0xd8>
 800ba94:	2000      	movs	r0, #0
 800ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4652      	mov	r2, sl
 800ba9e:	4639      	mov	r1, r7
 800baa0:	4630      	mov	r0, r6
 800baa2:	47c0      	blx	r8
 800baa4:	3001      	adds	r0, #1
 800baa6:	d103      	bne.n	800bab0 <_printf_common+0xbc>
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295
 800baac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab0:	3501      	adds	r5, #1
 800bab2:	e7c2      	b.n	800ba3a <_printf_common+0x46>
 800bab4:	18e1      	adds	r1, r4, r3
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	2030      	movs	r0, #48	; 0x30
 800baba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800babe:	4422      	add	r2, r4
 800bac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bac8:	3302      	adds	r3, #2
 800baca:	e7c4      	b.n	800ba56 <_printf_common+0x62>
 800bacc:	2301      	movs	r3, #1
 800bace:	4622      	mov	r2, r4
 800bad0:	4639      	mov	r1, r7
 800bad2:	4630      	mov	r0, r6
 800bad4:	47c0      	blx	r8
 800bad6:	3001      	adds	r0, #1
 800bad8:	d0e6      	beq.n	800baa8 <_printf_common+0xb4>
 800bada:	f109 0901 	add.w	r9, r9, #1
 800bade:	e7d7      	b.n	800ba90 <_printf_common+0x9c>

0800bae0 <_printf_i>:
 800bae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bae4:	4617      	mov	r7, r2
 800bae6:	7e0a      	ldrb	r2, [r1, #24]
 800bae8:	b085      	sub	sp, #20
 800baea:	2a6e      	cmp	r2, #110	; 0x6e
 800baec:	4698      	mov	r8, r3
 800baee:	4606      	mov	r6, r0
 800baf0:	460c      	mov	r4, r1
 800baf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800baf8:	f000 80bc 	beq.w	800bc74 <_printf_i+0x194>
 800bafc:	d81a      	bhi.n	800bb34 <_printf_i+0x54>
 800bafe:	2a63      	cmp	r2, #99	; 0x63
 800bb00:	d02e      	beq.n	800bb60 <_printf_i+0x80>
 800bb02:	d80a      	bhi.n	800bb1a <_printf_i+0x3a>
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	f000 80c8 	beq.w	800bc9a <_printf_i+0x1ba>
 800bb0a:	2a58      	cmp	r2, #88	; 0x58
 800bb0c:	f000 808a 	beq.w	800bc24 <_printf_i+0x144>
 800bb10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bb18:	e02a      	b.n	800bb70 <_printf_i+0x90>
 800bb1a:	2a64      	cmp	r2, #100	; 0x64
 800bb1c:	d001      	beq.n	800bb22 <_printf_i+0x42>
 800bb1e:	2a69      	cmp	r2, #105	; 0x69
 800bb20:	d1f6      	bne.n	800bb10 <_printf_i+0x30>
 800bb22:	6821      	ldr	r1, [r4, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bb2a:	d023      	beq.n	800bb74 <_printf_i+0x94>
 800bb2c:	1d11      	adds	r1, r2, #4
 800bb2e:	6019      	str	r1, [r3, #0]
 800bb30:	6813      	ldr	r3, [r2, #0]
 800bb32:	e027      	b.n	800bb84 <_printf_i+0xa4>
 800bb34:	2a73      	cmp	r2, #115	; 0x73
 800bb36:	f000 80b4 	beq.w	800bca2 <_printf_i+0x1c2>
 800bb3a:	d808      	bhi.n	800bb4e <_printf_i+0x6e>
 800bb3c:	2a6f      	cmp	r2, #111	; 0x6f
 800bb3e:	d02a      	beq.n	800bb96 <_printf_i+0xb6>
 800bb40:	2a70      	cmp	r2, #112	; 0x70
 800bb42:	d1e5      	bne.n	800bb10 <_printf_i+0x30>
 800bb44:	680a      	ldr	r2, [r1, #0]
 800bb46:	f042 0220 	orr.w	r2, r2, #32
 800bb4a:	600a      	str	r2, [r1, #0]
 800bb4c:	e003      	b.n	800bb56 <_printf_i+0x76>
 800bb4e:	2a75      	cmp	r2, #117	; 0x75
 800bb50:	d021      	beq.n	800bb96 <_printf_i+0xb6>
 800bb52:	2a78      	cmp	r2, #120	; 0x78
 800bb54:	d1dc      	bne.n	800bb10 <_printf_i+0x30>
 800bb56:	2278      	movs	r2, #120	; 0x78
 800bb58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800bb5c:	496e      	ldr	r1, [pc, #440]	; (800bd18 <_printf_i+0x238>)
 800bb5e:	e064      	b.n	800bc2a <_printf_i+0x14a>
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800bb66:	1d11      	adds	r1, r2, #4
 800bb68:	6019      	str	r1, [r3, #0]
 800bb6a:	6813      	ldr	r3, [r2, #0]
 800bb6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb70:	2301      	movs	r3, #1
 800bb72:	e0a3      	b.n	800bcbc <_printf_i+0x1dc>
 800bb74:	f011 0f40 	tst.w	r1, #64	; 0x40
 800bb78:	f102 0104 	add.w	r1, r2, #4
 800bb7c:	6019      	str	r1, [r3, #0]
 800bb7e:	d0d7      	beq.n	800bb30 <_printf_i+0x50>
 800bb80:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da03      	bge.n	800bb90 <_printf_i+0xb0>
 800bb88:	222d      	movs	r2, #45	; 0x2d
 800bb8a:	425b      	negs	r3, r3
 800bb8c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bb90:	4962      	ldr	r1, [pc, #392]	; (800bd1c <_printf_i+0x23c>)
 800bb92:	220a      	movs	r2, #10
 800bb94:	e017      	b.n	800bbc6 <_printf_i+0xe6>
 800bb96:	6820      	ldr	r0, [r4, #0]
 800bb98:	6819      	ldr	r1, [r3, #0]
 800bb9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bb9e:	d003      	beq.n	800bba8 <_printf_i+0xc8>
 800bba0:	1d08      	adds	r0, r1, #4
 800bba2:	6018      	str	r0, [r3, #0]
 800bba4:	680b      	ldr	r3, [r1, #0]
 800bba6:	e006      	b.n	800bbb6 <_printf_i+0xd6>
 800bba8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbac:	f101 0004 	add.w	r0, r1, #4
 800bbb0:	6018      	str	r0, [r3, #0]
 800bbb2:	d0f7      	beq.n	800bba4 <_printf_i+0xc4>
 800bbb4:	880b      	ldrh	r3, [r1, #0]
 800bbb6:	4959      	ldr	r1, [pc, #356]	; (800bd1c <_printf_i+0x23c>)
 800bbb8:	2a6f      	cmp	r2, #111	; 0x6f
 800bbba:	bf14      	ite	ne
 800bbbc:	220a      	movne	r2, #10
 800bbbe:	2208      	moveq	r2, #8
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800bbc6:	6865      	ldr	r5, [r4, #4]
 800bbc8:	60a5      	str	r5, [r4, #8]
 800bbca:	2d00      	cmp	r5, #0
 800bbcc:	f2c0 809c 	blt.w	800bd08 <_printf_i+0x228>
 800bbd0:	6820      	ldr	r0, [r4, #0]
 800bbd2:	f020 0004 	bic.w	r0, r0, #4
 800bbd6:	6020      	str	r0, [r4, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d13f      	bne.n	800bc5c <_printf_i+0x17c>
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	f040 8095 	bne.w	800bd0c <_printf_i+0x22c>
 800bbe2:	4675      	mov	r5, lr
 800bbe4:	2a08      	cmp	r2, #8
 800bbe6:	d10b      	bne.n	800bc00 <_printf_i+0x120>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	07da      	lsls	r2, r3, #31
 800bbec:	d508      	bpl.n	800bc00 <_printf_i+0x120>
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	6862      	ldr	r2, [r4, #4]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	bfde      	ittt	le
 800bbf6:	2330      	movle	r3, #48	; 0x30
 800bbf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc00:	ebae 0305 	sub.w	r3, lr, r5
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	f8cd 8000 	str.w	r8, [sp]
 800bc0a:	463b      	mov	r3, r7
 800bc0c:	aa03      	add	r2, sp, #12
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7ff feef 	bl	800b9f4 <_printf_common>
 800bc16:	3001      	adds	r0, #1
 800bc18:	d155      	bne.n	800bcc6 <_printf_i+0x1e6>
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1e:	b005      	add	sp, #20
 800bc20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc24:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800bc28:	493c      	ldr	r1, [pc, #240]	; (800bd1c <_printf_i+0x23c>)
 800bc2a:	6822      	ldr	r2, [r4, #0]
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bc32:	f100 0504 	add.w	r5, r0, #4
 800bc36:	601d      	str	r5, [r3, #0]
 800bc38:	d001      	beq.n	800bc3e <_printf_i+0x15e>
 800bc3a:	6803      	ldr	r3, [r0, #0]
 800bc3c:	e002      	b.n	800bc44 <_printf_i+0x164>
 800bc3e:	0655      	lsls	r5, r2, #25
 800bc40:	d5fb      	bpl.n	800bc3a <_printf_i+0x15a>
 800bc42:	8803      	ldrh	r3, [r0, #0]
 800bc44:	07d0      	lsls	r0, r2, #31
 800bc46:	bf44      	itt	mi
 800bc48:	f042 0220 	orrmi.w	r2, r2, #32
 800bc4c:	6022      	strmi	r2, [r4, #0]
 800bc4e:	b91b      	cbnz	r3, 800bc58 <_printf_i+0x178>
 800bc50:	6822      	ldr	r2, [r4, #0]
 800bc52:	f022 0220 	bic.w	r2, r2, #32
 800bc56:	6022      	str	r2, [r4, #0]
 800bc58:	2210      	movs	r2, #16
 800bc5a:	e7b1      	b.n	800bbc0 <_printf_i+0xe0>
 800bc5c:	4675      	mov	r5, lr
 800bc5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc62:	fb02 3310 	mls	r3, r2, r0, r3
 800bc66:	5ccb      	ldrb	r3, [r1, r3]
 800bc68:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d1f5      	bne.n	800bc5e <_printf_i+0x17e>
 800bc72:	e7b7      	b.n	800bbe4 <_printf_i+0x104>
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	6949      	ldr	r1, [r1, #20]
 800bc7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bc7e:	d004      	beq.n	800bc8a <_printf_i+0x1aa>
 800bc80:	1d10      	adds	r0, r2, #4
 800bc82:	6018      	str	r0, [r3, #0]
 800bc84:	6813      	ldr	r3, [r2, #0]
 800bc86:	6019      	str	r1, [r3, #0]
 800bc88:	e007      	b.n	800bc9a <_printf_i+0x1ba>
 800bc8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc8e:	f102 0004 	add.w	r0, r2, #4
 800bc92:	6018      	str	r0, [r3, #0]
 800bc94:	6813      	ldr	r3, [r2, #0]
 800bc96:	d0f6      	beq.n	800bc86 <_printf_i+0x1a6>
 800bc98:	8019      	strh	r1, [r3, #0]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	6123      	str	r3, [r4, #16]
 800bc9e:	4675      	mov	r5, lr
 800bca0:	e7b1      	b.n	800bc06 <_printf_i+0x126>
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	1d11      	adds	r1, r2, #4
 800bca6:	6019      	str	r1, [r3, #0]
 800bca8:	6815      	ldr	r5, [r2, #0]
 800bcaa:	6862      	ldr	r2, [r4, #4]
 800bcac:	2100      	movs	r1, #0
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f7f4 fb2e 	bl	8000310 <memchr>
 800bcb4:	b108      	cbz	r0, 800bcba <_printf_i+0x1da>
 800bcb6:	1b40      	subs	r0, r0, r5
 800bcb8:	6060      	str	r0, [r4, #4]
 800bcba:	6863      	ldr	r3, [r4, #4]
 800bcbc:	6123      	str	r3, [r4, #16]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcc4:	e79f      	b.n	800bc06 <_printf_i+0x126>
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	462a      	mov	r2, r5
 800bcca:	4639      	mov	r1, r7
 800bccc:	4630      	mov	r0, r6
 800bcce:	47c0      	blx	r8
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d0a2      	beq.n	800bc1a <_printf_i+0x13a>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	079b      	lsls	r3, r3, #30
 800bcd8:	d507      	bpl.n	800bcea <_printf_i+0x20a>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	f104 0919 	add.w	r9, r4, #25
 800bce0:	68e3      	ldr	r3, [r4, #12]
 800bce2:	9a03      	ldr	r2, [sp, #12]
 800bce4:	1a9b      	subs	r3, r3, r2
 800bce6:	429d      	cmp	r5, r3
 800bce8:	db05      	blt.n	800bcf6 <_printf_i+0x216>
 800bcea:	68e0      	ldr	r0, [r4, #12]
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	4298      	cmp	r0, r3
 800bcf0:	bfb8      	it	lt
 800bcf2:	4618      	movlt	r0, r3
 800bcf4:	e793      	b.n	800bc1e <_printf_i+0x13e>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	464a      	mov	r2, r9
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	47c0      	blx	r8
 800bd00:	3001      	adds	r0, #1
 800bd02:	d08a      	beq.n	800bc1a <_printf_i+0x13a>
 800bd04:	3501      	adds	r5, #1
 800bd06:	e7eb      	b.n	800bce0 <_printf_i+0x200>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1a7      	bne.n	800bc5c <_printf_i+0x17c>
 800bd0c:	780b      	ldrb	r3, [r1, #0]
 800bd0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd16:	e765      	b.n	800bbe4 <_printf_i+0x104>
 800bd18:	0800f3d6 	.word	0x0800f3d6
 800bd1c:	0800f3c5 	.word	0x0800f3c5

0800bd20 <_sbrk_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4c06      	ldr	r4, [pc, #24]	; (800bd3c <_sbrk_r+0x1c>)
 800bd24:	2300      	movs	r3, #0
 800bd26:	4605      	mov	r5, r0
 800bd28:	4608      	mov	r0, r1
 800bd2a:	6023      	str	r3, [r4, #0]
 800bd2c:	f7ff fa9a 	bl	800b264 <_sbrk>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	d102      	bne.n	800bd3a <_sbrk_r+0x1a>
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	b103      	cbz	r3, 800bd3a <_sbrk_r+0x1a>
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	24003e60 	.word	0x24003e60

0800bd40 <__sread>:
 800bd40:	b510      	push	{r4, lr}
 800bd42:	460c      	mov	r4, r1
 800bd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd48:	f000 fa4a 	bl	800c1e0 <_read_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	bfab      	itete	ge
 800bd50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd52:	89a3      	ldrhlt	r3, [r4, #12]
 800bd54:	181b      	addge	r3, r3, r0
 800bd56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd5a:	bfac      	ite	ge
 800bd5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd5e:	81a3      	strhlt	r3, [r4, #12]
 800bd60:	bd10      	pop	{r4, pc}

0800bd62 <__swrite>:
 800bd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd66:	461f      	mov	r7, r3
 800bd68:	898b      	ldrh	r3, [r1, #12]
 800bd6a:	05db      	lsls	r3, r3, #23
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	460c      	mov	r4, r1
 800bd70:	4616      	mov	r6, r2
 800bd72:	d505      	bpl.n	800bd80 <__swrite+0x1e>
 800bd74:	2302      	movs	r3, #2
 800bd76:	2200      	movs	r2, #0
 800bd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7c:	f000 f9b8 	bl	800c0f0 <_lseek_r>
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd8a:	81a3      	strh	r3, [r4, #12]
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	463b      	mov	r3, r7
 800bd90:	4628      	mov	r0, r5
 800bd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd96:	f000 b869 	b.w	800be6c <_write_r>

0800bd9a <__sseek>:
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda2:	f000 f9a5 	bl	800c0f0 <_lseek_r>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	bf15      	itete	ne
 800bdac:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdb6:	81a3      	strheq	r3, [r4, #12]
 800bdb8:	bf18      	it	ne
 800bdba:	81a3      	strhne	r3, [r4, #12]
 800bdbc:	bd10      	pop	{r4, pc}

0800bdbe <__sclose>:
 800bdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc2:	f000 b8d3 	b.w	800bf6c <_close_r>
	...

0800bdc8 <__swbuf_r>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	460e      	mov	r6, r1
 800bdcc:	4614      	mov	r4, r2
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b118      	cbz	r0, 800bdda <__swbuf_r+0x12>
 800bdd2:	6983      	ldr	r3, [r0, #24]
 800bdd4:	b90b      	cbnz	r3, 800bdda <__swbuf_r+0x12>
 800bdd6:	f7ff fb97 	bl	800b508 <__sinit>
 800bdda:	4b21      	ldr	r3, [pc, #132]	; (800be60 <__swbuf_r+0x98>)
 800bddc:	429c      	cmp	r4, r3
 800bdde:	d12a      	bne.n	800be36 <__swbuf_r+0x6e>
 800bde0:	686c      	ldr	r4, [r5, #4]
 800bde2:	69a3      	ldr	r3, [r4, #24]
 800bde4:	60a3      	str	r3, [r4, #8]
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	071a      	lsls	r2, r3, #28
 800bdea:	d52e      	bpl.n	800be4a <__swbuf_r+0x82>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	b363      	cbz	r3, 800be4a <__swbuf_r+0x82>
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	6820      	ldr	r0, [r4, #0]
 800bdf4:	1ac0      	subs	r0, r0, r3
 800bdf6:	6963      	ldr	r3, [r4, #20]
 800bdf8:	b2f6      	uxtb	r6, r6
 800bdfa:	4298      	cmp	r0, r3
 800bdfc:	4637      	mov	r7, r6
 800bdfe:	db04      	blt.n	800be0a <__swbuf_r+0x42>
 800be00:	4621      	mov	r1, r4
 800be02:	4628      	mov	r0, r5
 800be04:	f000 f94a 	bl	800c09c <_fflush_r>
 800be08:	bb28      	cbnz	r0, 800be56 <__swbuf_r+0x8e>
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	60a3      	str	r3, [r4, #8]
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	6022      	str	r2, [r4, #0]
 800be16:	701e      	strb	r6, [r3, #0]
 800be18:	6963      	ldr	r3, [r4, #20]
 800be1a:	3001      	adds	r0, #1
 800be1c:	4298      	cmp	r0, r3
 800be1e:	d004      	beq.n	800be2a <__swbuf_r+0x62>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	07db      	lsls	r3, r3, #31
 800be24:	d519      	bpl.n	800be5a <__swbuf_r+0x92>
 800be26:	2e0a      	cmp	r6, #10
 800be28:	d117      	bne.n	800be5a <__swbuf_r+0x92>
 800be2a:	4621      	mov	r1, r4
 800be2c:	4628      	mov	r0, r5
 800be2e:	f000 f935 	bl	800c09c <_fflush_r>
 800be32:	b190      	cbz	r0, 800be5a <__swbuf_r+0x92>
 800be34:	e00f      	b.n	800be56 <__swbuf_r+0x8e>
 800be36:	4b0b      	ldr	r3, [pc, #44]	; (800be64 <__swbuf_r+0x9c>)
 800be38:	429c      	cmp	r4, r3
 800be3a:	d101      	bne.n	800be40 <__swbuf_r+0x78>
 800be3c:	68ac      	ldr	r4, [r5, #8]
 800be3e:	e7d0      	b.n	800bde2 <__swbuf_r+0x1a>
 800be40:	4b09      	ldr	r3, [pc, #36]	; (800be68 <__swbuf_r+0xa0>)
 800be42:	429c      	cmp	r4, r3
 800be44:	bf08      	it	eq
 800be46:	68ec      	ldreq	r4, [r5, #12]
 800be48:	e7cb      	b.n	800bde2 <__swbuf_r+0x1a>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 f81f 	bl	800be90 <__swsetup_r>
 800be52:	2800      	cmp	r0, #0
 800be54:	d0cc      	beq.n	800bdf0 <__swbuf_r+0x28>
 800be56:	f04f 37ff 	mov.w	r7, #4294967295
 800be5a:	4638      	mov	r0, r7
 800be5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5e:	bf00      	nop
 800be60:	0800f370 	.word	0x0800f370
 800be64:	0800f390 	.word	0x0800f390
 800be68:	0800f350 	.word	0x0800f350

0800be6c <_write_r>:
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	4c07      	ldr	r4, [pc, #28]	; (800be8c <_write_r+0x20>)
 800be70:	4605      	mov	r5, r0
 800be72:	4608      	mov	r0, r1
 800be74:	4611      	mov	r1, r2
 800be76:	2200      	movs	r2, #0
 800be78:	6022      	str	r2, [r4, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	f7ff f9e4 	bl	800b248 <_write>
 800be80:	1c43      	adds	r3, r0, #1
 800be82:	d102      	bne.n	800be8a <_write_r+0x1e>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	b103      	cbz	r3, 800be8a <_write_r+0x1e>
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	bd38      	pop	{r3, r4, r5, pc}
 800be8c:	24003e60 	.word	0x24003e60

0800be90 <__swsetup_r>:
 800be90:	4b32      	ldr	r3, [pc, #200]	; (800bf5c <__swsetup_r+0xcc>)
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	681d      	ldr	r5, [r3, #0]
 800be96:	4606      	mov	r6, r0
 800be98:	460c      	mov	r4, r1
 800be9a:	b125      	cbz	r5, 800bea6 <__swsetup_r+0x16>
 800be9c:	69ab      	ldr	r3, [r5, #24]
 800be9e:	b913      	cbnz	r3, 800bea6 <__swsetup_r+0x16>
 800bea0:	4628      	mov	r0, r5
 800bea2:	f7ff fb31 	bl	800b508 <__sinit>
 800bea6:	4b2e      	ldr	r3, [pc, #184]	; (800bf60 <__swsetup_r+0xd0>)
 800bea8:	429c      	cmp	r4, r3
 800beaa:	d10f      	bne.n	800becc <__swsetup_r+0x3c>
 800beac:	686c      	ldr	r4, [r5, #4]
 800beae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	0715      	lsls	r5, r2, #28
 800beb6:	d42c      	bmi.n	800bf12 <__swsetup_r+0x82>
 800beb8:	06d0      	lsls	r0, r2, #27
 800beba:	d411      	bmi.n	800bee0 <__swsetup_r+0x50>
 800bebc:	2209      	movs	r2, #9
 800bebe:	6032      	str	r2, [r6, #0]
 800bec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	4b25      	ldr	r3, [pc, #148]	; (800bf64 <__swsetup_r+0xd4>)
 800bece:	429c      	cmp	r4, r3
 800bed0:	d101      	bne.n	800bed6 <__swsetup_r+0x46>
 800bed2:	68ac      	ldr	r4, [r5, #8]
 800bed4:	e7eb      	b.n	800beae <__swsetup_r+0x1e>
 800bed6:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <__swsetup_r+0xd8>)
 800bed8:	429c      	cmp	r4, r3
 800beda:	bf08      	it	eq
 800bedc:	68ec      	ldreq	r4, [r5, #12]
 800bede:	e7e6      	b.n	800beae <__swsetup_r+0x1e>
 800bee0:	0751      	lsls	r1, r2, #29
 800bee2:	d512      	bpl.n	800bf0a <__swsetup_r+0x7a>
 800bee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee6:	b141      	cbz	r1, 800befa <__swsetup_r+0x6a>
 800bee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beec:	4299      	cmp	r1, r3
 800beee:	d002      	beq.n	800bef6 <__swsetup_r+0x66>
 800bef0:	4630      	mov	r0, r6
 800bef2:	f7ff fb93 	bl	800b61c <_free_r>
 800bef6:	2300      	movs	r3, #0
 800bef8:	6363      	str	r3, [r4, #52]	; 0x34
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf00:	81a3      	strh	r3, [r4, #12]
 800bf02:	2300      	movs	r3, #0
 800bf04:	6063      	str	r3, [r4, #4]
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f043 0308 	orr.w	r3, r3, #8
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	b94b      	cbnz	r3, 800bf2a <__swsetup_r+0x9a>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf20:	d003      	beq.n	800bf2a <__swsetup_r+0x9a>
 800bf22:	4621      	mov	r1, r4
 800bf24:	4630      	mov	r0, r6
 800bf26:	f000 f919 	bl	800c15c <__smakebuf_r>
 800bf2a:	89a2      	ldrh	r2, [r4, #12]
 800bf2c:	f012 0301 	ands.w	r3, r2, #1
 800bf30:	d00c      	beq.n	800bf4c <__swsetup_r+0xbc>
 800bf32:	2300      	movs	r3, #0
 800bf34:	60a3      	str	r3, [r4, #8]
 800bf36:	6963      	ldr	r3, [r4, #20]
 800bf38:	425b      	negs	r3, r3
 800bf3a:	61a3      	str	r3, [r4, #24]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b953      	cbnz	r3, 800bf56 <__swsetup_r+0xc6>
 800bf40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bf48:	d1ba      	bne.n	800bec0 <__swsetup_r+0x30>
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	0792      	lsls	r2, r2, #30
 800bf4e:	bf58      	it	pl
 800bf50:	6963      	ldrpl	r3, [r4, #20]
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	e7f2      	b.n	800bf3c <__swsetup_r+0xac>
 800bf56:	2000      	movs	r0, #0
 800bf58:	e7f7      	b.n	800bf4a <__swsetup_r+0xba>
 800bf5a:	bf00      	nop
 800bf5c:	2400002c 	.word	0x2400002c
 800bf60:	0800f370 	.word	0x0800f370
 800bf64:	0800f390 	.word	0x0800f390
 800bf68:	0800f350 	.word	0x0800f350

0800bf6c <_close_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4c06      	ldr	r4, [pc, #24]	; (800bf88 <_close_r+0x1c>)
 800bf70:	2300      	movs	r3, #0
 800bf72:	4605      	mov	r5, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	f7ff f98e 	bl	800b298 <_close>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d102      	bne.n	800bf86 <_close_r+0x1a>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	b103      	cbz	r3, 800bf86 <_close_r+0x1a>
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	24003e60 	.word	0x24003e60

0800bf8c <__sflush_r>:
 800bf8c:	898a      	ldrh	r2, [r1, #12]
 800bf8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf92:	4605      	mov	r5, r0
 800bf94:	0710      	lsls	r0, r2, #28
 800bf96:	460c      	mov	r4, r1
 800bf98:	d45a      	bmi.n	800c050 <__sflush_r+0xc4>
 800bf9a:	684b      	ldr	r3, [r1, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dc05      	bgt.n	800bfac <__sflush_r+0x20>
 800bfa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dc02      	bgt.n	800bfac <__sflush_r+0x20>
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfae:	2e00      	cmp	r6, #0
 800bfb0:	d0f9      	beq.n	800bfa6 <__sflush_r+0x1a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfb8:	682f      	ldr	r7, [r5, #0]
 800bfba:	602b      	str	r3, [r5, #0]
 800bfbc:	d033      	beq.n	800c026 <__sflush_r+0x9a>
 800bfbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	075a      	lsls	r2, r3, #29
 800bfc4:	d505      	bpl.n	800bfd2 <__sflush_r+0x46>
 800bfc6:	6863      	ldr	r3, [r4, #4]
 800bfc8:	1ac0      	subs	r0, r0, r3
 800bfca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfcc:	b10b      	cbz	r3, 800bfd2 <__sflush_r+0x46>
 800bfce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfd0:	1ac0      	subs	r0, r0, r3
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfd8:	6a21      	ldr	r1, [r4, #32]
 800bfda:	4628      	mov	r0, r5
 800bfdc:	47b0      	blx	r6
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	d106      	bne.n	800bff2 <__sflush_r+0x66>
 800bfe4:	6829      	ldr	r1, [r5, #0]
 800bfe6:	291d      	cmp	r1, #29
 800bfe8:	d84b      	bhi.n	800c082 <__sflush_r+0xf6>
 800bfea:	4a2b      	ldr	r2, [pc, #172]	; (800c098 <__sflush_r+0x10c>)
 800bfec:	40ca      	lsrs	r2, r1
 800bfee:	07d6      	lsls	r6, r2, #31
 800bff0:	d547      	bpl.n	800c082 <__sflush_r+0xf6>
 800bff2:	2200      	movs	r2, #0
 800bff4:	6062      	str	r2, [r4, #4]
 800bff6:	04d9      	lsls	r1, r3, #19
 800bff8:	6922      	ldr	r2, [r4, #16]
 800bffa:	6022      	str	r2, [r4, #0]
 800bffc:	d504      	bpl.n	800c008 <__sflush_r+0x7c>
 800bffe:	1c42      	adds	r2, r0, #1
 800c000:	d101      	bne.n	800c006 <__sflush_r+0x7a>
 800c002:	682b      	ldr	r3, [r5, #0]
 800c004:	b903      	cbnz	r3, 800c008 <__sflush_r+0x7c>
 800c006:	6560      	str	r0, [r4, #84]	; 0x54
 800c008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c00a:	602f      	str	r7, [r5, #0]
 800c00c:	2900      	cmp	r1, #0
 800c00e:	d0ca      	beq.n	800bfa6 <__sflush_r+0x1a>
 800c010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c014:	4299      	cmp	r1, r3
 800c016:	d002      	beq.n	800c01e <__sflush_r+0x92>
 800c018:	4628      	mov	r0, r5
 800c01a:	f7ff faff 	bl	800b61c <_free_r>
 800c01e:	2000      	movs	r0, #0
 800c020:	6360      	str	r0, [r4, #52]	; 0x34
 800c022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c026:	6a21      	ldr	r1, [r4, #32]
 800c028:	2301      	movs	r3, #1
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b0      	blx	r6
 800c02e:	1c41      	adds	r1, r0, #1
 800c030:	d1c6      	bne.n	800bfc0 <__sflush_r+0x34>
 800c032:	682b      	ldr	r3, [r5, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0c3      	beq.n	800bfc0 <__sflush_r+0x34>
 800c038:	2b1d      	cmp	r3, #29
 800c03a:	d001      	beq.n	800c040 <__sflush_r+0xb4>
 800c03c:	2b16      	cmp	r3, #22
 800c03e:	d101      	bne.n	800c044 <__sflush_r+0xb8>
 800c040:	602f      	str	r7, [r5, #0]
 800c042:	e7b0      	b.n	800bfa6 <__sflush_r+0x1a>
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04a:	81a3      	strh	r3, [r4, #12]
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	690f      	ldr	r7, [r1, #16]
 800c052:	2f00      	cmp	r7, #0
 800c054:	d0a7      	beq.n	800bfa6 <__sflush_r+0x1a>
 800c056:	0793      	lsls	r3, r2, #30
 800c058:	680e      	ldr	r6, [r1, #0]
 800c05a:	bf08      	it	eq
 800c05c:	694b      	ldreq	r3, [r1, #20]
 800c05e:	600f      	str	r7, [r1, #0]
 800c060:	bf18      	it	ne
 800c062:	2300      	movne	r3, #0
 800c064:	eba6 0807 	sub.w	r8, r6, r7
 800c068:	608b      	str	r3, [r1, #8]
 800c06a:	f1b8 0f00 	cmp.w	r8, #0
 800c06e:	dd9a      	ble.n	800bfa6 <__sflush_r+0x1a>
 800c070:	4643      	mov	r3, r8
 800c072:	463a      	mov	r2, r7
 800c074:	6a21      	ldr	r1, [r4, #32]
 800c076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c078:	4628      	mov	r0, r5
 800c07a:	47b0      	blx	r6
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dc07      	bgt.n	800c090 <__sflush_r+0x104>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c090:	4407      	add	r7, r0
 800c092:	eba8 0800 	sub.w	r8, r8, r0
 800c096:	e7e8      	b.n	800c06a <__sflush_r+0xde>
 800c098:	20400001 	.word	0x20400001

0800c09c <_fflush_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b1db      	cbz	r3, 800c0de <_fflush_r+0x42>
 800c0a6:	b118      	cbz	r0, 800c0b0 <_fflush_r+0x14>
 800c0a8:	6983      	ldr	r3, [r0, #24]
 800c0aa:	b90b      	cbnz	r3, 800c0b0 <_fflush_r+0x14>
 800c0ac:	f7ff fa2c 	bl	800b508 <__sinit>
 800c0b0:	4b0c      	ldr	r3, [pc, #48]	; (800c0e4 <_fflush_r+0x48>)
 800c0b2:	429c      	cmp	r4, r3
 800c0b4:	d109      	bne.n	800c0ca <_fflush_r+0x2e>
 800c0b6:	686c      	ldr	r4, [r5, #4]
 800c0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0bc:	b17b      	cbz	r3, 800c0de <_fflush_r+0x42>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c6:	f7ff bf61 	b.w	800bf8c <__sflush_r>
 800c0ca:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <_fflush_r+0x4c>)
 800c0cc:	429c      	cmp	r4, r3
 800c0ce:	d101      	bne.n	800c0d4 <_fflush_r+0x38>
 800c0d0:	68ac      	ldr	r4, [r5, #8]
 800c0d2:	e7f1      	b.n	800c0b8 <_fflush_r+0x1c>
 800c0d4:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <_fflush_r+0x50>)
 800c0d6:	429c      	cmp	r4, r3
 800c0d8:	bf08      	it	eq
 800c0da:	68ec      	ldreq	r4, [r5, #12]
 800c0dc:	e7ec      	b.n	800c0b8 <_fflush_r+0x1c>
 800c0de:	2000      	movs	r0, #0
 800c0e0:	bd38      	pop	{r3, r4, r5, pc}
 800c0e2:	bf00      	nop
 800c0e4:	0800f370 	.word	0x0800f370
 800c0e8:	0800f390 	.word	0x0800f390
 800c0ec:	0800f350 	.word	0x0800f350

0800c0f0 <_lseek_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4c07      	ldr	r4, [pc, #28]	; (800c110 <_lseek_r+0x20>)
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	6022      	str	r2, [r4, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	f7ff f8d4 	bl	800b2ac <_lseek>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_lseek_r+0x1e>
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_lseek_r+0x1e>
 800c10c:	602b      	str	r3, [r5, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	24003e60 	.word	0x24003e60

0800c114 <__swhatbuf_r>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	460e      	mov	r6, r1
 800c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11c:	2900      	cmp	r1, #0
 800c11e:	b090      	sub	sp, #64	; 0x40
 800c120:	4614      	mov	r4, r2
 800c122:	461d      	mov	r5, r3
 800c124:	da07      	bge.n	800c136 <__swhatbuf_r+0x22>
 800c126:	2300      	movs	r3, #0
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	89b3      	ldrh	r3, [r6, #12]
 800c12c:	061a      	lsls	r2, r3, #24
 800c12e:	d410      	bmi.n	800c152 <__swhatbuf_r+0x3e>
 800c130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c134:	e00e      	b.n	800c154 <__swhatbuf_r+0x40>
 800c136:	aa01      	add	r2, sp, #4
 800c138:	f000 f864 	bl	800c204 <_fstat_r>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	dbf2      	blt.n	800c126 <__swhatbuf_r+0x12>
 800c140:	9a02      	ldr	r2, [sp, #8]
 800c142:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c146:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c14a:	425a      	negs	r2, r3
 800c14c:	415a      	adcs	r2, r3
 800c14e:	602a      	str	r2, [r5, #0]
 800c150:	e7ee      	b.n	800c130 <__swhatbuf_r+0x1c>
 800c152:	2340      	movs	r3, #64	; 0x40
 800c154:	2000      	movs	r0, #0
 800c156:	6023      	str	r3, [r4, #0]
 800c158:	b010      	add	sp, #64	; 0x40
 800c15a:	bd70      	pop	{r4, r5, r6, pc}

0800c15c <__smakebuf_r>:
 800c15c:	898b      	ldrh	r3, [r1, #12]
 800c15e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c160:	079d      	lsls	r5, r3, #30
 800c162:	4606      	mov	r6, r0
 800c164:	460c      	mov	r4, r1
 800c166:	d507      	bpl.n	800c178 <__smakebuf_r+0x1c>
 800c168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	2301      	movs	r3, #1
 800c172:	6163      	str	r3, [r4, #20]
 800c174:	b002      	add	sp, #8
 800c176:	bd70      	pop	{r4, r5, r6, pc}
 800c178:	ab01      	add	r3, sp, #4
 800c17a:	466a      	mov	r2, sp
 800c17c:	f7ff ffca 	bl	800c114 <__swhatbuf_r>
 800c180:	9900      	ldr	r1, [sp, #0]
 800c182:	4605      	mov	r5, r0
 800c184:	4630      	mov	r0, r6
 800c186:	f7ff fa97 	bl	800b6b8 <_malloc_r>
 800c18a:	b948      	cbnz	r0, 800c1a0 <__smakebuf_r+0x44>
 800c18c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c190:	059a      	lsls	r2, r3, #22
 800c192:	d4ef      	bmi.n	800c174 <__smakebuf_r+0x18>
 800c194:	f023 0303 	bic.w	r3, r3, #3
 800c198:	f043 0302 	orr.w	r3, r3, #2
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	e7e3      	b.n	800c168 <__smakebuf_r+0xc>
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <__smakebuf_r+0x7c>)
 800c1a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	6020      	str	r0, [r4, #0]
 800c1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	9b00      	ldr	r3, [sp, #0]
 800c1b0:	6163      	str	r3, [r4, #20]
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	6120      	str	r0, [r4, #16]
 800c1b6:	b15b      	cbz	r3, 800c1d0 <__smakebuf_r+0x74>
 800c1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f000 f833 	bl	800c228 <_isatty_r>
 800c1c2:	b128      	cbz	r0, 800c1d0 <__smakebuf_r+0x74>
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f023 0303 	bic.w	r3, r3, #3
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	431d      	orrs	r5, r3
 800c1d4:	81a5      	strh	r5, [r4, #12]
 800c1d6:	e7cd      	b.n	800c174 <__smakebuf_r+0x18>
 800c1d8:	0800b489 	.word	0x0800b489

0800c1dc <__malloc_lock>:
 800c1dc:	4770      	bx	lr

0800c1de <__malloc_unlock>:
 800c1de:	4770      	bx	lr

0800c1e0 <_read_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4c07      	ldr	r4, [pc, #28]	; (800c200 <_read_r+0x20>)
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	4608      	mov	r0, r1
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	6022      	str	r2, [r4, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f7ff f81c 	bl	800b22c <_read>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_read_r+0x1e>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_read_r+0x1e>
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	24003e60 	.word	0x24003e60

0800c204 <_fstat_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4c07      	ldr	r4, [pc, #28]	; (800c224 <_fstat_r+0x20>)
 800c208:	2300      	movs	r3, #0
 800c20a:	4605      	mov	r5, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	4611      	mov	r1, r2
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	f7ff f844 	bl	800b29e <_fstat>
 800c216:	1c43      	adds	r3, r0, #1
 800c218:	d102      	bne.n	800c220 <_fstat_r+0x1c>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	b103      	cbz	r3, 800c220 <_fstat_r+0x1c>
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	bd38      	pop	{r3, r4, r5, pc}
 800c222:	bf00      	nop
 800c224:	24003e60 	.word	0x24003e60

0800c228 <_isatty_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4c06      	ldr	r4, [pc, #24]	; (800c244 <_isatty_r+0x1c>)
 800c22c:	2300      	movs	r3, #0
 800c22e:	4605      	mov	r5, r0
 800c230:	4608      	mov	r0, r1
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	f7ff f838 	bl	800b2a8 <_isatty>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_isatty_r+0x1a>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_isatty_r+0x1a>
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	24003e60 	.word	0x24003e60

0800c248 <_init>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	bf00      	nop
 800c24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24e:	bc08      	pop	{r3}
 800c250:	469e      	mov	lr, r3
 800c252:	4770      	bx	lr

0800c254 <_fini>:
 800c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c256:	bf00      	nop
 800c258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25a:	bc08      	pop	{r3}
 800c25c:	469e      	mov	lr, r3
 800c25e:	4770      	bx	lr
