
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f4  20020000  0800483c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  000202f4  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  000202f4  2**0
                  CONTENTS
  9 .bss          00000cd0  200202f4  200202f4  000202f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20020fc4  20020fc4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5e8  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd1  00000000  00000000  0002e90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  000308e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005229  00000000  00000000  00031f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004888  00000000  00000000  000371b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003ba39  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003588  00000000  00000000  0003bab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200202f4 	.word	0x200202f4
 800021c:	00000000 	.word	0x00000000
 8000220:	08004558 	.word	0x08004558

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200202f8 	.word	0x200202f8
 800023c:	08004558 	.word	0x08004558

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	b08f      	sub	sp, #60	; 0x3c
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fd13 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 fa4b 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fb3d 	bl	8000c8c <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 8000612:	f000 fadd 	bl	8000bd0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000616:	f000 fb0b 	bl	8000c30 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
sprintf(buf,"Hello mohamed\n\r");
 800061a:	4a49      	ldr	r2, [pc, #292]	; (8000740 <main+0x140>)
 800061c:	4b49      	ldr	r3, [pc, #292]	; (8000744 <main+0x144>)
 800061e:	4614      	mov	r4, r2
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	6020      	str	r0, [r4, #0]
 8000626:	6061      	str	r1, [r4, #4]
 8000628:	60a2      	str	r2, [r4, #8]
 800062a:	60e3      	str	r3, [r4, #12]
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800062c:	4844      	ldr	r0, [pc, #272]	; (8000740 <main+0x140>)
 800062e:	f7ff fe07 	bl	8000240 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	4941      	ldr	r1, [pc, #260]	; (8000740 <main+0x140>)
 800063c:	4842      	ldr	r0, [pc, #264]	; (8000748 <main+0x148>)
 800063e:	f002 fae1 	bl	8002c04 <HAL_UART_Transmit>
sprintf(buf,"%s\n\r",t);
 8000642:	4a42      	ldr	r2, [pc, #264]	; (800074c <main+0x14c>)
 8000644:	4942      	ldr	r1, [pc, #264]	; (8000750 <main+0x150>)
 8000646:	483e      	ldr	r0, [pc, #248]	; (8000740 <main+0x140>)
 8000648:	f003 fa54 	bl	8003af4 <siprintf>
HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800064c:	483c      	ldr	r0, [pc, #240]	; (8000740 <main+0x140>)
 800064e:	f7ff fdf7 	bl	8000240 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	4939      	ldr	r1, [pc, #228]	; (8000740 <main+0x140>)
 800065c:	483a      	ldr	r0, [pc, #232]	; (8000748 <main+0x148>)
 800065e:	f002 fad1 	bl	8002c04 <HAL_UART_Transmit>
char *token;
int i=0;
 8000662:	2300      	movs	r3, #0
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
token = strtok(t, ":");
 8000666:	493b      	ldr	r1, [pc, #236]	; (8000754 <main+0x154>)
 8000668:	4838      	ldr	r0, [pc, #224]	; (800074c <main+0x14c>)
 800066a:	f003 fa67 	bl	8003b3c <strtok>
 800066e:	6378      	str	r0, [r7, #52]	; 0x34
volatile uint8_t years[4], Month[2], hours[2], mintues[2], days[2], second[2];
uint16_t years_int, Month_int, hours_int, mintues_int, days_int, second_int;
while(token != NULL){
 8000670:	e1fa      	b.n	8000a68 <main+0x468>
switch(i){
 8000672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000674:	2b0e      	cmp	r3, #14
 8000676:	f000 8165 	beq.w	8000944 <main+0x344>
 800067a:	2b0f      	cmp	r3, #15
 800067c:	f000 81ab 	beq.w	80009d6 <main+0x3d6>
 8000680:	2b0d      	cmp	r3, #13
 8000682:	d000      	beq.n	8000686 <main+0x86>
            default:
               // sprintf(buf,"                                                              ");

             //   sprintf(buf, "no:%d token: %s \n\r",i,token);
                //HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
                break;
 8000684:	e1e8      	b.n	8000a58 <main+0x458>
                sprintf(buf, " main token: %s \n\r",token);
 8000686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000688:	4933      	ldr	r1, [pc, #204]	; (8000758 <main+0x158>)
 800068a:	482d      	ldr	r0, [pc, #180]	; (8000740 <main+0x140>)
 800068c:	f003 fa32 	bl	8003af4 <siprintf>
                HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8000690:	482b      	ldr	r0, [pc, #172]	; (8000740 <main+0x140>)
 8000692:	f7ff fdd5 	bl	8000240 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	4928      	ldr	r1, [pc, #160]	; (8000740 <main+0x140>)
 80006a0:	4829      	ldr	r0, [pc, #164]	; (8000748 <main+0x148>)
 80006a2:	f002 faaf 	bl	8002c04 <HAL_UART_Transmit>
            	for (int ie=0; ie<15; ie++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006aa:	e05e      	b.n	800076a <main+0x16a>
            		switch(ie){
 80006ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ae:	3b02      	subs	r3, #2
 80006b0:	2b0c      	cmp	r3, #12
 80006b2:	d853      	bhi.n	800075c <main+0x15c>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <main+0xbc>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006f1 	.word	0x080006f1
 80006c0:	080006f9 	.word	0x080006f9
 80006c4:	08000701 	.word	0x08000701
 80006c8:	08000709 	.word	0x08000709
 80006cc:	0800075d 	.word	0x0800075d
 80006d0:	08000711 	.word	0x08000711
 80006d4:	08000719 	.word	0x08000719
 80006d8:	0800075d 	.word	0x0800075d
 80006dc:	08000721 	.word	0x08000721
 80006e0:	08000729 	.word	0x08000729
 80006e4:	0800075d 	.word	0x0800075d
 80006e8:	08000731 	.word	0x08000731
 80006ec:	08000739 	.word	0x08000739
            		years[0] = *(token);break;
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	753b      	strb	r3, [r7, #20]
 80006f6:	e032      	b.n	800075e <main+0x15e>
                      years[1] = *(token);break;
 80006f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	757b      	strb	r3, [r7, #21]
 80006fe:	e02e      	b.n	800075e <main+0x15e>
                     years[2] = *(token);break;
 8000700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	75bb      	strb	r3, [r7, #22]
 8000706:	e02a      	b.n	800075e <main+0x15e>
                     years[3] = *(token);   break;
 8000708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	75fb      	strb	r3, [r7, #23]
 800070e:	e026      	b.n	800075e <main+0x15e>
            			Month[0] = *(token);break;
 8000710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	743b      	strb	r3, [r7, #16]
 8000716:	e022      	b.n	800075e <main+0x15e>
              			Month[1] = *(token);break;
 8000718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	747b      	strb	r3, [r7, #17]
 800071e:	e01e      	b.n	800075e <main+0x15e>
             			days  [0] = *(token);break;
 8000720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	713b      	strb	r3, [r7, #4]
 8000726:	e01a      	b.n	800075e <main+0x15e>
             			days[1] = *(token);  break;
 8000728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	717b      	strb	r3, [r7, #5]
 800072e:	e016      	b.n	800075e <main+0x15e>
             			hours[0] = *(token);break;
 8000730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	733b      	strb	r3, [r7, #12]
 8000736:	e012      	b.n	800075e <main+0x15e>
             			hours[1] = *(token);break;
 8000738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	737b      	strb	r3, [r7, #13]
 800073e:	e00e      	b.n	800075e <main+0x15e>
 8000740:	20020b8c 	.word	0x20020b8c
 8000744:	08004570 	.word	0x08004570
 8000748:	2002031c 	.word	0x2002031c
 800074c:	20020000 	.word	0x20020000
 8000750:	08004580 	.word	0x08004580
 8000754:	08004588 	.word	0x08004588
 8000758:	0800458c 	.word	0x0800458c
                        break;
 800075c:	bf00      	nop
            		*token++;
 800075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000760:	3301      	adds	r3, #1
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
            	for (int ie=0; ie<15; ie++)
 8000764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000766:	3301      	adds	r3, #1
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076c:	2b0e      	cmp	r3, #14
 800076e:	dd9d      	ble.n	80006ac <main+0xac>
                sprintf(buf,"                                                             ");
 8000770:	4bc0      	ldr	r3, [pc, #768]	; (8000a74 <main+0x474>)
 8000772:	4ac1      	ldr	r2, [pc, #772]	; (8000a78 <main+0x478>)
 8000774:	4614      	mov	r4, r2
 8000776:	469e      	mov	lr, r3
 8000778:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800077c:	4675      	mov	r5, lr
 800077e:	4626      	mov	r6, r4
 8000780:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000782:	6028      	str	r0, [r5, #0]
 8000784:	6069      	str	r1, [r5, #4]
 8000786:	60aa      	str	r2, [r5, #8]
 8000788:	60eb      	str	r3, [r5, #12]
 800078a:	3410      	adds	r4, #16
 800078c:	f10e 0e10 	add.w	lr, lr, #16
 8000790:	4564      	cmp	r4, ip
 8000792:	d1f3      	bne.n	800077c <main+0x17c>
 8000794:	4675      	mov	r5, lr
 8000796:	4623      	mov	r3, r4
 8000798:	cb07      	ldmia	r3!, {r0, r1, r2}
 800079a:	6028      	str	r0, [r5, #0]
 800079c:	6069      	str	r1, [r5, #4]
 800079e:	60aa      	str	r2, [r5, #8]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	81ab      	strh	r3, [r5, #12]
                years_int = atoi(years);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 f96c 	bl	8003a86 <atoi>
 80007ae:	4603      	mov	r3, r0
 80007b0:	847b      	strh	r3, [r7, #34]	; 0x22
                sprintf(buf,"Value years is %d \n\r",years_int);
 80007b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007b4:	461a      	mov	r2, r3
 80007b6:	49b1      	ldr	r1, [pc, #708]	; (8000a7c <main+0x47c>)
 80007b8:	48ae      	ldr	r0, [pc, #696]	; (8000a74 <main+0x474>)
 80007ba:	f003 f99b 	bl	8003af4 <siprintf>
                HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80007be:	48ad      	ldr	r0, [pc, #692]	; (8000a74 <main+0x474>)
 80007c0:	f7ff fd3e 	bl	8000240 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	49a9      	ldr	r1, [pc, #676]	; (8000a74 <main+0x474>)
 80007ce:	48ac      	ldr	r0, [pc, #688]	; (8000a80 <main+0x480>)
 80007d0:	f002 fa18 	bl	8002c04 <HAL_UART_Transmit>
                sprintf(buf,"                                                              ");
 80007d4:	4ba7      	ldr	r3, [pc, #668]	; (8000a74 <main+0x474>)
 80007d6:	4aab      	ldr	r2, [pc, #684]	; (8000a84 <main+0x484>)
 80007d8:	4615      	mov	r5, r2
 80007da:	469e      	mov	lr, r3
 80007dc:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80007e0:	4674      	mov	r4, lr
 80007e2:	462e      	mov	r6, r5
 80007e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007e6:	6020      	str	r0, [r4, #0]
 80007e8:	6061      	str	r1, [r4, #4]
 80007ea:	60a2      	str	r2, [r4, #8]
 80007ec:	60e3      	str	r3, [r4, #12]
 80007ee:	3510      	adds	r5, #16
 80007f0:	f10e 0e10 	add.w	lr, lr, #16
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d1f3      	bne.n	80007e0 <main+0x1e0>
 80007f8:	4674      	mov	r4, lr
 80007fa:	462b      	mov	r3, r5
 80007fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007fe:	6020      	str	r0, [r4, #0]
 8000800:	6061      	str	r1, [r4, #4]
 8000802:	60a2      	str	r2, [r4, #8]
 8000804:	881a      	ldrh	r2, [r3, #0]
 8000806:	789b      	ldrb	r3, [r3, #2]
 8000808:	81a2      	strh	r2, [r4, #12]
 800080a:	73a3      	strb	r3, [r4, #14]
                Month_int = atoi(Month);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4618      	mov	r0, r3
 8000812:	f003 f938 	bl	8003a86 <atoi>
 8000816:	4603      	mov	r3, r0
 8000818:	843b      	strh	r3, [r7, #32]
                sprintf(buf,"Value  Mon:%d \n\r",Month_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800081a:	8c3b      	ldrh	r3, [r7, #32]
 800081c:	461a      	mov	r2, r3
 800081e:	499a      	ldr	r1, [pc, #616]	; (8000a88 <main+0x488>)
 8000820:	4894      	ldr	r0, [pc, #592]	; (8000a74 <main+0x474>)
 8000822:	f003 f967 	bl	8003af4 <siprintf>
 8000826:	4893      	ldr	r0, [pc, #588]	; (8000a74 <main+0x474>)
 8000828:	f7ff fd0a 	bl	8000240 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000834:	498f      	ldr	r1, [pc, #572]	; (8000a74 <main+0x474>)
 8000836:	4892      	ldr	r0, [pc, #584]	; (8000a80 <main+0x480>)
 8000838:	f002 f9e4 	bl	8002c04 <HAL_UART_Transmit>
                sprintf(buf,"                                                              ");
 800083c:	4b8d      	ldr	r3, [pc, #564]	; (8000a74 <main+0x474>)
 800083e:	4a91      	ldr	r2, [pc, #580]	; (8000a84 <main+0x484>)
 8000840:	4615      	mov	r5, r2
 8000842:	469e      	mov	lr, r3
 8000844:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8000848:	4674      	mov	r4, lr
 800084a:	462e      	mov	r6, r5
 800084c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800084e:	6020      	str	r0, [r4, #0]
 8000850:	6061      	str	r1, [r4, #4]
 8000852:	60a2      	str	r2, [r4, #8]
 8000854:	60e3      	str	r3, [r4, #12]
 8000856:	3510      	adds	r5, #16
 8000858:	f10e 0e10 	add.w	lr, lr, #16
 800085c:	4565      	cmp	r5, ip
 800085e:	d1f3      	bne.n	8000848 <main+0x248>
 8000860:	4674      	mov	r4, lr
 8000862:	462b      	mov	r3, r5
 8000864:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000866:	6020      	str	r0, [r4, #0]
 8000868:	6061      	str	r1, [r4, #4]
 800086a:	60a2      	str	r2, [r4, #8]
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	789b      	ldrb	r3, [r3, #2]
 8000870:	81a2      	strh	r2, [r4, #12]
 8000872:	73a3      	strb	r3, [r4, #14]
                days_int = atoi(days);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f905 	bl	8003a86 <atoi>
 800087c:	4603      	mov	r3, r0
 800087e:	83fb      	strh	r3, [r7, #30]
                sprintf(buf,"Value  days:%d \n\r",days_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8000880:	8bfb      	ldrh	r3, [r7, #30]
 8000882:	461a      	mov	r2, r3
 8000884:	4981      	ldr	r1, [pc, #516]	; (8000a8c <main+0x48c>)
 8000886:	487b      	ldr	r0, [pc, #492]	; (8000a74 <main+0x474>)
 8000888:	f003 f934 	bl	8003af4 <siprintf>
 800088c:	4879      	ldr	r0, [pc, #484]	; (8000a74 <main+0x474>)
 800088e:	f7ff fcd7 	bl	8000240 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	4976      	ldr	r1, [pc, #472]	; (8000a74 <main+0x474>)
 800089c:	4878      	ldr	r0, [pc, #480]	; (8000a80 <main+0x480>)
 800089e:	f002 f9b1 	bl	8002c04 <HAL_UART_Transmit>
                sprintf(buf,"                                                              ");
 80008a2:	4b74      	ldr	r3, [pc, #464]	; (8000a74 <main+0x474>)
 80008a4:	4a77      	ldr	r2, [pc, #476]	; (8000a84 <main+0x484>)
 80008a6:	4615      	mov	r5, r2
 80008a8:	469e      	mov	lr, r3
 80008aa:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80008ae:	4674      	mov	r4, lr
 80008b0:	462e      	mov	r6, r5
 80008b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008b4:	6020      	str	r0, [r4, #0]
 80008b6:	6061      	str	r1, [r4, #4]
 80008b8:	60a2      	str	r2, [r4, #8]
 80008ba:	60e3      	str	r3, [r4, #12]
 80008bc:	3510      	adds	r5, #16
 80008be:	f10e 0e10 	add.w	lr, lr, #16
 80008c2:	4565      	cmp	r5, ip
 80008c4:	d1f3      	bne.n	80008ae <main+0x2ae>
 80008c6:	4674      	mov	r4, lr
 80008c8:	462b      	mov	r3, r5
 80008ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008cc:	6020      	str	r0, [r4, #0]
 80008ce:	6061      	str	r1, [r4, #4]
 80008d0:	60a2      	str	r2, [r4, #8]
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	81a2      	strh	r2, [r4, #12]
 80008d8:	73a3      	strb	r3, [r4, #14]
                hours_int = atoi(hours);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 f8d1 	bl	8003a86 <atoi>
 80008e4:	4603      	mov	r3, r0
 80008e6:	83bb      	strh	r3, [r7, #28]
                sprintf(buf,"Value  ho:%d \n\r",hours_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80008e8:	8bbb      	ldrh	r3, [r7, #28]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4968      	ldr	r1, [pc, #416]	; (8000a90 <main+0x490>)
 80008ee:	4861      	ldr	r0, [pc, #388]	; (8000a74 <main+0x474>)
 80008f0:	f003 f900 	bl	8003af4 <siprintf>
 80008f4:	485f      	ldr	r0, [pc, #380]	; (8000a74 <main+0x474>)
 80008f6:	f7ff fca3 	bl	8000240 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	495c      	ldr	r1, [pc, #368]	; (8000a74 <main+0x474>)
 8000904:	485e      	ldr	r0, [pc, #376]	; (8000a80 <main+0x480>)
 8000906:	f002 f97d 	bl	8002c04 <HAL_UART_Transmit>
                sprintf(buf,"                                                              ");
 800090a:	4b5a      	ldr	r3, [pc, #360]	; (8000a74 <main+0x474>)
 800090c:	4a5d      	ldr	r2, [pc, #372]	; (8000a84 <main+0x484>)
 800090e:	4615      	mov	r5, r2
 8000910:	469e      	mov	lr, r3
 8000912:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8000916:	4674      	mov	r4, lr
 8000918:	462e      	mov	r6, r5
 800091a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800091c:	6020      	str	r0, [r4, #0]
 800091e:	6061      	str	r1, [r4, #4]
 8000920:	60a2      	str	r2, [r4, #8]
 8000922:	60e3      	str	r3, [r4, #12]
 8000924:	3510      	adds	r5, #16
 8000926:	f10e 0e10 	add.w	lr, lr, #16
 800092a:	4565      	cmp	r5, ip
 800092c:	d1f3      	bne.n	8000916 <main+0x316>
 800092e:	4674      	mov	r4, lr
 8000930:	462b      	mov	r3, r5
 8000932:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000934:	6020      	str	r0, [r4, #0]
 8000936:	6061      	str	r1, [r4, #4]
 8000938:	60a2      	str	r2, [r4, #8]
 800093a:	881a      	ldrh	r2, [r3, #0]
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	81a2      	strh	r2, [r4, #12]
 8000940:	73a3      	strb	r3, [r4, #14]
                break;
 8000942:	e089      	b.n	8000a58 <main+0x458>
            	for (int e=0; e<3; e++)
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
 8000948:	e00d      	b.n	8000966 <main+0x366>
            		mintues[e] = *(token);
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	7819      	ldrb	r1, [r3, #0]
 800094e:	f107 0208 	add.w	r2, r7, #8
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	4413      	add	r3, r2
 8000956:	460a      	mov	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
            		*token++;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3301      	adds	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            	for (int e=0; e<3; e++)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	3301      	adds	r3, #1
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
 8000966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000968:	2b02      	cmp	r3, #2
 800096a:	ddee      	ble.n	800094a <main+0x34a>
                sprintf(buf,"                                                              ");
 800096c:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <main+0x474>)
 800096e:	4a45      	ldr	r2, [pc, #276]	; (8000a84 <main+0x484>)
 8000970:	4615      	mov	r5, r2
 8000972:	469e      	mov	lr, r3
 8000974:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8000978:	4674      	mov	r4, lr
 800097a:	462e      	mov	r6, r5
 800097c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800097e:	6020      	str	r0, [r4, #0]
 8000980:	6061      	str	r1, [r4, #4]
 8000982:	60a2      	str	r2, [r4, #8]
 8000984:	60e3      	str	r3, [r4, #12]
 8000986:	3510      	adds	r5, #16
 8000988:	f10e 0e10 	add.w	lr, lr, #16
 800098c:	4565      	cmp	r5, ip
 800098e:	d1f3      	bne.n	8000978 <main+0x378>
 8000990:	4674      	mov	r4, lr
 8000992:	462b      	mov	r3, r5
 8000994:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000996:	6020      	str	r0, [r4, #0]
 8000998:	6061      	str	r1, [r4, #4]
 800099a:	60a2      	str	r2, [r4, #8]
 800099c:	881a      	ldrh	r2, [r3, #0]
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	81a2      	strh	r2, [r4, #12]
 80009a2:	73a3      	strb	r3, [r4, #14]
                mintues_int = atoi(mintues);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 f86c 	bl	8003a86 <atoi>
 80009ae:	4603      	mov	r3, r0
 80009b0:	837b      	strh	r3, [r7, #26]
                sprintf(buf,"Value mintues is %d \n\r",mintues_int);
 80009b2:	8b7b      	ldrh	r3, [r7, #26]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4937      	ldr	r1, [pc, #220]	; (8000a94 <main+0x494>)
 80009b8:	482e      	ldr	r0, [pc, #184]	; (8000a74 <main+0x474>)
 80009ba:	f003 f89b 	bl	8003af4 <siprintf>
                HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80009be:	482d      	ldr	r0, [pc, #180]	; (8000a74 <main+0x474>)
 80009c0:	f7ff fc3e 	bl	8000240 <strlen>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	4929      	ldr	r1, [pc, #164]	; (8000a74 <main+0x474>)
 80009ce:	482c      	ldr	r0, [pc, #176]	; (8000a80 <main+0x480>)
 80009d0:	f002 f918 	bl	8002c04 <HAL_UART_Transmit>
                break;
 80009d4:	e040      	b.n	8000a58 <main+0x458>
            	for (int h=0; h<3; h++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
 80009da:	e00c      	b.n	80009f6 <main+0x3f6>
            		second[h] = *(token);
 80009dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009de:	7819      	ldrb	r1, [r3, #0]
 80009e0:	463a      	mov	r2, r7
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	4413      	add	r3, r2
 80009e6:	460a      	mov	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
            		*token++;
 80009ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ec:	3301      	adds	r3, #1
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
            	for (int h=0; h<3; h++)
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	3301      	adds	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	ddef      	ble.n	80009dc <main+0x3dc>
                sprintf(buf,"                                                   ");
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <main+0x474>)
 80009fe:	4a26      	ldr	r2, [pc, #152]	; (8000a98 <main+0x498>)
 8000a00:	4614      	mov	r4, r2
 8000a02:	469e      	mov	lr, r3
 8000a04:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000a08:	4675      	mov	r5, lr
 8000a0a:	4626      	mov	r6, r4
 8000a0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a0e:	6028      	str	r0, [r5, #0]
 8000a10:	6069      	str	r1, [r5, #4]
 8000a12:	60aa      	str	r2, [r5, #8]
 8000a14:	60eb      	str	r3, [r5, #12]
 8000a16:	3410      	adds	r4, #16
 8000a18:	f10e 0e10 	add.w	lr, lr, #16
 8000a1c:	4564      	cmp	r4, ip
 8000a1e:	d1f3      	bne.n	8000a08 <main+0x408>
 8000a20:	4673      	mov	r3, lr
 8000a22:	4622      	mov	r2, r4
 8000a24:	6810      	ldr	r0, [r2, #0]
 8000a26:	6018      	str	r0, [r3, #0]
                second_int = atoi(second);
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f82b 	bl	8003a86 <atoi>
 8000a30:	4603      	mov	r3, r0
 8000a32:	833b      	strh	r3, [r7, #24]
                sprintf(buf,"Value second is %d \n\r",second_int);
 8000a34:	8b3b      	ldrh	r3, [r7, #24]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4918      	ldr	r1, [pc, #96]	; (8000a9c <main+0x49c>)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <main+0x474>)
 8000a3c:	f003 f85a 	bl	8003af4 <siprintf>
                HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <main+0x474>)
 8000a42:	f7ff fbfd 	bl	8000240 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	4909      	ldr	r1, [pc, #36]	; (8000a74 <main+0x474>)
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0x480>)
 8000a52:	f002 f8d7 	bl	8002c04 <HAL_UART_Transmit>
                break;
 8000a56:	bf00      	nop
}

    i++;
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
    token = strtok(NULL, ":");
 8000a5e:	4910      	ldr	r1, [pc, #64]	; (8000aa0 <main+0x4a0>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f003 f86b 	bl	8003b3c <strtok>
 8000a66:	6378      	str	r0, [r7, #52]	; 0x34
while(token != NULL){
 8000a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f47f ae01 	bne.w	8000672 <main+0x72>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x470>
 8000a72:	bf00      	nop
 8000a74:	20020b8c 	.word	0x20020b8c
 8000a78:	080045a0 	.word	0x080045a0
 8000a7c:	080045e0 	.word	0x080045e0
 8000a80:	2002031c 	.word	0x2002031c
 8000a84:	080045f8 	.word	0x080045f8
 8000a88:	08004638 	.word	0x08004638
 8000a8c:	0800464c 	.word	0x0800464c
 8000a90:	08004660 	.word	0x08004660
 8000a94:	08004670 	.word	0x08004670
 8000a98:	08004688 	.word	0x08004688
 8000a9c:	080046bc 	.word	0x080046bc
 8000aa0:	08004588 	.word	0x08004588

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0b8      	sub	sp, #224	; 0xe0
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aae:	2234      	movs	r2, #52	; 0x34
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 f816 	bl	8003ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2290      	movs	r2, #144	; 0x90
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 f807 	bl	8003ae4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad6:	f000 ff1b 	bl	8001910 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4a3a      	ldr	r2, [pc, #232]	; (8000bc4 <SystemClock_Config+0x120>)
 8000adc:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <SystemClock_Config+0x120>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <SystemClock_Config+0x120>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af2:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <SystemClock_Config+0x124>)
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <SystemClock_Config+0x124>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <SystemClock_Config+0x124>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b30:	2360      	movs	r3, #96	; 0x60
 8000b32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 ff42 	bl	80019d0 <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b52:	f000 f93d 	bl	8000dd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b56:	f000 feeb 	bl	8001930 <HAL_PWREx_EnableOverDrive>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b60:	f000 f936 	bl	8000dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f9ce 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b96:	f000 f91b 	bl	8000dd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <SystemClock_Config+0x128>)
 8000b9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fbb5 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000bb8:	f000 f90a 	bl	8000dd0 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	37e0      	adds	r7, #224	; 0xe0
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	00200100 	.word	0x00200100

08000bd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART3_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c14:	f001 ffa8 	bl	8002b68 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f8d7 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2002031c 	.word	0x2002031c
 8000c2c:	40004800 	.word	0x40004800

08000c30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3e:	2206      	movs	r2, #6
 8000c40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c74:	f000 fd03 	bl	800167e <HAL_PCD_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f8a7 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200203a0 	.word	0x200203a0

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000ca4:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cd4:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cec:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1a:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_GPIO_Init+0x134>)
 8000d3a:	f000 fc87 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <MX_GPIO_Init+0x138>)
 8000d44:	f000 fc82 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0x13c>)
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <MX_GPIO_Init+0x140>)
 8000d5e:	f000 facb 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d62:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_GPIO_Init+0x134>)
 8000d7c:	f000 fabc 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d80:	2340      	movs	r3, #64	; 0x40
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <MX_GPIO_Init+0x138>)
 8000d98:	f000 faae 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x138>)
 8000db0:	f000 faa2 	bl	80012f8 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40021800 	.word	0x40021800
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	40020800 	.word	0x40020800

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <Error_Handler+0x6>

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_UART_MspInit+0x7c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d128      	bne.n	8000e94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x80>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e90:	f000 fa32 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ec8:	d141      	bne.n	8000f4e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ee2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4817      	ldr	r0, [pc, #92]	; (8000f5c <HAL_PCD_MspInit+0xb4>)
 8000f00:	f000 f9fa 	bl	80012f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <HAL_PCD_MspInit+0xb4>)
 8000f1a:	f000 f9ed 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6353      	str	r3, [r2, #52]	; 0x34
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_PCD_MspInit+0xb0>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f87e 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x50>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x16>
		heap_end = &end;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <_sbrk+0x50>)
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <_sbrk+0x54>)
 8000fc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <_sbrk+0x50>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <_sbrk+0x50>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	466a      	mov	r2, sp
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d907      	bls.n	8000fee <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000fde:	f002 fd57 	bl	8003a90 <__errno>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	e006      	b.n	8000ffc <_sbrk+0x48>
	}

	heap_end += incr;
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <_sbrk+0x50>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <_sbrk+0x50>)
 8000ff8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20020310 	.word	0x20020310
 8001008:	20020fc4 	.word	0x20020fc4

0800100c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f92b 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f806 	bl	800104c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff feca 	bl	8000dd8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f937 	bl	80012de <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f90d 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20020118 	.word	0x20020118
 80010a4:	20020120 	.word	0x20020120
 80010a8:	2002011c 	.word	0x2002011c

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20020120 	.word	0x20020120
 80010d0:	20020fbc 	.word	0x20020fbc

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20020fbc 	.word	0x20020fbc

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_Delay+0x40>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad2      	subs	r2, r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3f7      	bcc.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20020120 	.word	0x20020120

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	4313      	orrs	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	05fa0000 	.word	0x05fa0000

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	490d      	ldr	r1, [pc, #52]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	4909      	ldr	r1, [pc, #36]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	2201      	movs	r2, #1
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	401a      	ands	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122e:	2101      	movs	r1, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	1e59      	subs	r1, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff90 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff49 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff5e 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff90 	bl	80011e8 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5f 	bl	8001194 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffb0 	bl	800124c <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	e175      	b.n	8001604 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 8164 	bne.w	80015fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d00b      	beq.n	8001356 <HAL_GPIO_Init+0x5e>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800134a:	2b11      	cmp	r3, #17
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b12      	cmp	r3, #18
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x100>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80be 	beq.w	80015fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4a65      	ldr	r2, [pc, #404]	; (8001618 <HAL_GPIO_Init+0x320>)
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_GPIO_Init+0x320>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_GPIO_Init+0x320>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800149a:	4a60      	ldr	r2, [pc, #384]	; (800161c <HAL_GPIO_Init+0x324>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a57      	ldr	r2, [pc, #348]	; (8001620 <HAL_GPIO_Init+0x328>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d037      	beq.n	8001536 <HAL_GPIO_Init+0x23e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a56      	ldr	r2, [pc, #344]	; (8001624 <HAL_GPIO_Init+0x32c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d031      	beq.n	8001532 <HAL_GPIO_Init+0x23a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a55      	ldr	r2, [pc, #340]	; (8001628 <HAL_GPIO_Init+0x330>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02b      	beq.n	800152e <HAL_GPIO_Init+0x236>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a54      	ldr	r2, [pc, #336]	; (800162c <HAL_GPIO_Init+0x334>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x232>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a53      	ldr	r2, [pc, #332]	; (8001630 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x22a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x226>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x222>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x21e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x21a>
 800150e:	2309      	movs	r3, #9
 8001510:	e012      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001512:	230a      	movs	r3, #10
 8001514:	e010      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001516:	2308      	movs	r3, #8
 8001518:	e00e      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800151a:	2307      	movs	r3, #7
 800151c:	e00c      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800151e:	2306      	movs	r3, #6
 8001520:	e00a      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001536:	2300      	movs	r3, #0
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001548:	4934      	ldr	r1, [pc, #208]	; (800161c <HAL_GPIO_Init+0x324>)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_GPIO_Init+0x350>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_GPIO_Init+0x350>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_GPIO_Init+0x350>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a4:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_GPIO_Init+0x350>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	f67f ae86 	bls.w	8001318 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800160c:	bf00      	nop
 800160e:	3724      	adds	r7, #36	; 0x24
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40021c00 	.word	0x40021c00
 8001640:	40022000 	.word	0x40022000
 8001644:	40022400 	.word	0x40022400
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800167e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001680:	b08f      	sub	sp, #60	; 0x3c
 8001682:	af0a      	add	r7, sp, #40	; 0x28
 8001684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e116      	b.n	80018be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fbfc 	bl	8000ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 ff4a 	bl	8003568 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	687e      	ldr	r6, [r7, #4]
 80016dc:	466d      	mov	r5, sp
 80016de:	f106 0410 	add.w	r4, r6, #16
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f2:	1d33      	adds	r3, r6, #4
 80016f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f001 fede 	bl	80034b8 <USB_CoreInit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0d7      	b.n	80018be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f001 ff38 	bl	800358a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e04a      	b.n	80017b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	333d      	adds	r3, #61	; 0x3d
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	333c      	adds	r3, #60	; 0x3c
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	b298      	uxth	r0, r3
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3342      	adds	r3, #66	; 0x42
 800175c:	4602      	mov	r2, r0
 800175e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	333f      	adds	r3, #63	; 0x3f
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3344      	adds	r3, #68	; 0x44
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3348      	adds	r3, #72	; 0x48
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3350      	adds	r3, #80	; 0x50
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3af      	bcc.n	8001720 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e044      	b.n	8001850 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	3301      	adds	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3b5      	bcc.n	80017c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	687e      	ldr	r6, [r7, #4]
 8001862:	466d      	mov	r5, sp
 8001864:	f106 0410 	add.w	r4, r6, #16
 8001868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001874:	e885 0003 	stmia.w	r5, {r0, r1}
 8001878:	1d33      	adds	r3, r6, #4
 800187a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f001 feaf 	bl	80035e0 <USB_DevInit>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e014      	b.n	80018be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f80b 	bl	80018c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 f864 	bl	8003984 <USB_DevDisconnect>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080018c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_PCDEx_ActivateLPM+0x44>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	10000003 	.word	0x10000003

08001910 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4a05      	ldr	r2, [pc, #20]	; (800192c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40007000 	.word	0x40007000

08001930 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001952:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195e:	f7ff fbb9 	bl	80010d4 <HAL_GetTick>
 8001962:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001964:	e009      	b.n	800197a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001966:	f7ff fbb5 	bl	80010d4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001974:	d901      	bls.n	800197a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e022      	b.n	80019c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001986:	d1ee      	bne.n	8001966 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001988:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001994:	f7ff fb9e 	bl	80010d4 <HAL_GetTick>
 8001998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800199a:	e009      	b.n	80019b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800199c:	f7ff fb9a 	bl	80010d4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019aa:	d901      	bls.n	80019b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e007      	b.n	80019c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019bc:	d1ee      	bne.n	800199c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e29b      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8087 	beq.w	8001b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f4:	4b96      	ldr	r3, [pc, #600]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d00c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a00:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x62>
 8001a0c:	4b90      	ldr	r3, [pc, #576]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x130>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d168      	bne.n	8001b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e275      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x7a>
 8001a3c:	4a84      	ldr	r2, [pc, #528]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e02e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x9c>
 8001a52:	4a7f      	ldr	r2, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4a7c      	ldr	r2, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a60:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0xc0>
 8001a76:	4a76      	ldr	r2, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a78:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4a73      	ldr	r2, [pc, #460]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a84:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd8>
 8001a90:	4a6f      	ldr	r2, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4a6c      	ldr	r2, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb10 	bl	80010d4 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb0c 	bl	80010d4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e229      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fafc 	bl	80010d4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff faf8 	bl	80010d4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e215      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x110>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d069      	beq.n	8001be2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0e:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x190>
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x17a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1e9      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4941      	ldr	r1, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e040      	b.n	8001be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d023      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff faae 	bl	80010d4 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff faaa 	bl	80010d4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1c7      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	492d      	ldr	r1, [pc, #180]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
 8001bae:	e018      	b.n	8001be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fa8a 	bl	80010d4 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fa86 	bl	80010d4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1a3      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d038      	beq.n	8001c60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa67 	bl	80010d4 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fa63 	bl	80010d4 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e180      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x23a>
 8001c28:	e01a      	b.n	8001c60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c36:	f7ff fa4d 	bl	80010d4 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fa49 	bl	80010d4 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d903      	bls.n	8001c54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e166      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
 8001c50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80a4 	beq.w	8001db6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b8c      	ldr	r3, [pc, #560]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4a89      	ldr	r2, [pc, #548]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c96:	4b83      	ldr	r3, [pc, #524]	; (8001ea4 <HAL_RCC_OscConfig+0x4d4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ca2:	4a80      	ldr	r2, [pc, #512]	; (8001ea4 <HAL_RCC_OscConfig+0x4d4>)
 8001ca4:	4b7f      	ldr	r3, [pc, #508]	; (8001ea4 <HAL_RCC_OscConfig+0x4d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fa11 	bl	80010d4 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff fa0d 	bl	80010d4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e12a      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc8:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCC_OscConfig+0x4d4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x31a>
 8001cdc:	4a70      	ldr	r2, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_OscConfig+0x376>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x33c>
 8001cf2:	4a6b      	ldr	r2, [pc, #428]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4a68      	ldr	r2, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x376>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x35e>
 8001d14:	4a62      	ldr	r2, [pc, #392]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x376>
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f9c1 	bl	80010d4 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff f9bd 	bl	80010d4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0d8      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ee      	beq.n	8001d56 <HAL_RCC_OscConfig+0x386>
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f9ab 	bl	80010d4 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff f9a7 	bl	80010d4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0c2      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4a3d      	ldr	r2, [pc, #244]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80ae 	beq.w	8001f1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc0:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d06d      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d14b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f978 	bl	80010d4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f974 	bl	80010d4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e091      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4926      	ldr	r1, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	019b      	lsls	r3, r3, #6
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	061b      	lsls	r3, r3, #24
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	071b      	lsls	r3, r3, #28
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f946 	bl	80010d4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f942 	bl	80010d4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e05f      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x47c>
 8001e6a:	e057      	b.n	8001f1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f92c 	bl	80010d4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f928 	bl	80010d4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_OscConfig+0x4d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4b0>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x54c>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x558>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d030      	beq.n	8001f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d129      	bne.n	8001f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d122      	bne.n	8001f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ede:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d119      	bne.n	8001f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10f      	bne.n	8001f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d210      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4967      	ldr	r1, [pc, #412]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 020f 	bic.w	r2, r3, #15
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4a59      	ldr	r2, [pc, #356]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4a53      	ldr	r2, [pc, #332]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa6:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4950      	ldr	r1, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d040      	beq.n	8002050 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e073      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	4939      	ldr	r1, [pc, #228]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002020:	f7ff f858 	bl	80010d4 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff f854 	bl	80010d4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e053      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 020c 	and.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	429a      	cmp	r2, r3
 800204e:	d1eb      	bne.n	8002028 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4924      	ldr	r1, [pc, #144]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 020f 	bic.w	r2, r3, #15
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4919      	ldr	r1, [pc, #100]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020aa:	4912      	ldr	r1, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f821 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020c2:	4601      	mov	r1, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	fa21 f303 	lsr.w	r3, r1, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1d0>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1d4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe ffb4 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00
 80020f4:	40023800 	.word	0x40023800
 80020f8:	080046d4 	.word	0x080046d4
 80020fc:	20020118 	.word	0x20020118
 8002100:	2002011c 	.word	0x2002011c

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002108:	b08f      	sub	sp, #60	; 0x3c
 800210a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211c:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d007      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
 8002128:	2b08      	cmp	r3, #8
 800212a:	d008      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x3a>
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 80b2 	bne.w	8002296 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002132:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002136:	e0b1      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800213c:	e0ae      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800213e:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002148:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d04e      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002154:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	f04f 0400 	mov.w	r4, #0
 800215e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	ea01 0103 	and.w	r1, r1, r3
 800216a:	ea02 0204 	and.w	r2, r2, r4
 800216e:	460b      	mov	r3, r1
 8002170:	4614      	mov	r4, r2
 8002172:	0160      	lsls	r0, r4, #5
 8002174:	6278      	str	r0, [r7, #36]	; 0x24
 8002176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002178:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800217c:	6278      	str	r0, [r7, #36]	; 0x24
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	eb64 0402 	sbc.w	r4, r4, r2
 800218c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002190:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002194:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002198:	ebb8 0803 	subs.w	r8, r8, r3
 800219c:	eb69 0904 	sbc.w	r9, r9, r4
 80021a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80021b8:	eb18 0801 	adds.w	r8, r8, r1
 80021bc:	eb49 0902 	adc.w	r9, r9, r2
 80021c0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80021d8:	4640      	mov	r0, r8
 80021da:	4649      	mov	r1, r9
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	f04f 0400 	mov.w	r4, #0
 80021e2:	461a      	mov	r2, r3
 80021e4:	4623      	mov	r3, r4
 80021e6:	f7fe f883 	bl	80002f0 <__aeabi_uldivmod>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
 80021f0:	e043      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	f04f 0400 	mov.w	r4, #0
 80021fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	ea01 0103 	and.w	r1, r1, r3
 8002208:	ea02 0204 	and.w	r2, r2, r4
 800220c:	460b      	mov	r3, r1
 800220e:	4614      	mov	r4, r2
 8002210:	0160      	lsls	r0, r4, #5
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	015b      	lsls	r3, r3, #5
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002224:	1a5b      	subs	r3, r3, r1
 8002226:	eb64 0402 	sbc.w	r4, r4, r2
 800222a:	01a6      	lsls	r6, r4, #6
 800222c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002230:	019d      	lsls	r5, r3, #6
 8002232:	1aed      	subs	r5, r5, r3
 8002234:	eb66 0604 	sbc.w	r6, r6, r4
 8002238:	00f3      	lsls	r3, r6, #3
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	00eb      	lsls	r3, r5, #3
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	e897 0060 	ldmia.w	r7, {r5, r6}
 800224c:	186d      	adds	r5, r5, r1
 800224e:	eb46 0602 	adc.w	r6, r6, r2
 8002252:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002256:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800225a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800225e:	4655      	mov	r5, sl
 8002260:	465e      	mov	r6, fp
 8002262:	4628      	mov	r0, r5
 8002264:	4631      	mov	r1, r6
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	f04f 0400 	mov.w	r4, #0
 800226c:	461a      	mov	r2, r3
 800226e:	4623      	mov	r3, r4
 8002270:	f7fe f83e 	bl	80002f0 <__aeabi_uldivmod>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	3301      	adds	r3, #1
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco / pllp;
 800228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002294:	e002      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800229a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800229e:	4618      	mov	r0, r3
 80022a0:	373c      	adds	r7, #60	; 0x3c
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	007a1200 	.word	0x007a1200

080022b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20020118 	.word	0x20020118

080022cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d4:	4601      	mov	r1, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0a9b      	lsrs	r3, r3, #10
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	080046e4 	.word	0x080046e4

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f8:	f7ff ffdc 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022fc:	4601      	mov	r1, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0b5b      	lsrs	r3, r3, #13
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	080046e4 	.word	0x080046e4

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002344:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002346:	4b69      	ldr	r3, [pc, #420]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800234e:	6093      	str	r3, [r2, #8]
 8002350:	4966      	ldr	r1, [pc, #408]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002352:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002366:	2301      	movs	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d017      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002376:	495d      	ldr	r1, [pc, #372]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002378:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800237e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002394:	d101      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d017      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023b2:	494e      	ldr	r1, [pc, #312]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d0:	d101      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 808b 	beq.w	8002516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4a3a      	ldr	r2, [pc, #232]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
 800240c:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002418:	4a35      	ldr	r2, [pc, #212]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fe56 	bl	80010d4 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe fe52 	bl	80010d4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e38d      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800243e:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002452:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d035      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	429a      	cmp	r2, r3
 8002466:	d02e      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002470:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002472:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800248a:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d114      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fe1a 	bl	80010d4 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe fe16 	bl	80010d4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e34f      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ee      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024d2:	d111      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024e4:	400b      	ands	r3, r1
 80024e6:	4313      	orrs	r3, r2
 80024e8:	6083      	str	r3, [r0, #8]
 80024ea:	e00b      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40007000 	.word	0x40007000
 80024f4:	0ffffcff 	.word	0x0ffffcff
 80024f8:	4ab2      	ldr	r2, [pc, #712]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80024fa:	4bb2      	ldr	r3, [pc, #712]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002502:	6093      	str	r3, [r2, #8]
 8002504:	49af      	ldr	r1, [pc, #700]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002506:	4baf      	ldr	r3, [pc, #700]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	4313      	orrs	r3, r2
 8002514:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d010      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002522:	4aa8      	ldr	r2, [pc, #672]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002524:	4ba7      	ldr	r3, [pc, #668]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002532:	49a4      	ldr	r1, [pc, #656]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002534:	4ba3      	ldr	r3, [pc, #652]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002536:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002550:	499c      	ldr	r1, [pc, #624]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002552:	4b9c      	ldr	r3, [pc, #624]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002572:	4994      	ldr	r1, [pc, #592]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002574:	4b93      	ldr	r3, [pc, #588]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002594:	498b      	ldr	r1, [pc, #556]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025b6:	4983      	ldr	r1, [pc, #524]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80025b8:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d8:	497a      	ldr	r1, [pc, #488]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80025da:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025fa:	4972      	ldr	r1, [pc, #456]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80025fc:	4b71      	ldr	r3, [pc, #452]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f023 020c 	bic.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800261c:	4969      	ldr	r1, [pc, #420]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800263e:	4961      	ldr	r1, [pc, #388]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002640:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002660:	4958      	ldr	r1, [pc, #352]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002662:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002682:	4950      	ldr	r1, [pc, #320]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002684:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026a4:	4947      	ldr	r1, [pc, #284]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026c6:	493f      	ldr	r1, [pc, #252]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026e8:	4936      	ldr	r1, [pc, #216]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d011      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800270a:	492e      	ldr	r1, [pc, #184]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002728:	d101      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800274a:	491e      	ldr	r1, [pc, #120]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800276c:	4915      	ldr	r1, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002790:	490c      	ldr	r1, [pc, #48]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	e001      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027de:	4981      	ldr	r1, [pc, #516]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027e0:	4b80      	ldr	r3, [pc, #512]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d006      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80d6 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800280a:	4a76      	ldr	r2, [pc, #472]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800280c:	4b75      	ldr	r3, [pc, #468]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002816:	f7fe fc5d 	bl	80010d4 <HAL_GetTick>
 800281a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800281e:	f7fe fc59 	bl	80010d4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	; 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e194      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002830:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d021      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11d      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800285e:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	0e1b      	lsrs	r3, r3, #24
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800286c:	495d      	ldr	r1, [pc, #372]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	019a      	lsls	r2, r3, #6
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	431a      	orrs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	071b      	lsls	r3, r3, #28
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02e      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d129      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028b8:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028cc:	0f1b      	lsrs	r3, r3, #28
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028d4:	4943      	ldr	r1, [pc, #268]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	019a      	lsls	r2, r3, #6
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	071b      	lsls	r3, r3, #28
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028f4:	493b      	ldr	r1, [pc, #236]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fc:	f023 021f 	bic.w	r2, r3, #31
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	3b01      	subs	r3, #1
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01d      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291e:	0e1b      	lsrs	r3, r3, #24
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002926:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292c:	0f1b      	lsrs	r3, r3, #28
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002934:	492b      	ldr	r1, [pc, #172]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	019a      	lsls	r2, r3, #6
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	431a      	orrs	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d011      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002960:	4920      	ldr	r1, [pc, #128]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	019a      	lsls	r2, r3, #6
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800298e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fba0 	bl	80010d4 <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002998:	f7fe fb9c 	bl	80010d4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0d7      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 80cd 	bne.w	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ca:	f7fe fb83 	bl	80010d4 <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029d2:	f7fe fb7f 	bl	80010d4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d903      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0ba      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80029e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029e8:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f4:	d0ed      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02e      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d12a      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a1e:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	0f1b      	lsrs	r3, r3, #28
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a3a:	494a      	ldr	r1, [pc, #296]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	019a      	lsls	r2, r3, #6
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	071b      	lsls	r3, r3, #28
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a5a:	4942      	ldr	r1, [pc, #264]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d022      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a88:	d11d      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	0e1b      	lsrs	r3, r3, #24
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	0f1b      	lsrs	r3, r3, #28
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002aa6:	492f      	ldr	r1, [pc, #188]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	019a      	lsls	r2, r3, #6
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	071b      	lsls	r3, r3, #28
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d028      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	0e1b      	lsrs	r3, r3, #24
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aee:	491d      	ldr	r1, [pc, #116]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	019a      	lsls	r2, r3, #6
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	071b      	lsls	r3, r3, #28
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b0e:	4915      	ldr	r1, [pc, #84]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe fad0 	bl	80010d4 <HAL_GetTick>
 8002b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b38:	f7fe facc 	bl	80010d4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e007      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b56:	d1ef      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e040      	b.n	8002bfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe f948 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8be 	bl	8002d28 <UART_SetConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e022      	b.n	8002bfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fb12 	bl	80031e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	6852      	ldr	r2, [r2, #4]
 8002bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	6892      	ldr	r2, [r2, #8]
 8002bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb99 	bl	800332c <UART_CheckIdleState>
 8002bfa:	4603      	mov	r3, r0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d17f      	bne.n	8002d1c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Transmit+0x24>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e078      	b.n	8002d1e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Transmit+0x36>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e071      	b.n	8002d1e <HAL_UART_Transmit+0x11a>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2221      	movs	r2, #33	; 0x21
 8002c4e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fa40 	bl	80010d4 <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d108      	bne.n	8002c82 <HAL_UART_Transmit+0x7e>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	e003      	b.n	8002c8a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c92:	e02b      	b.n	8002cec <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fb8d 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e037      	b.n	8002d1e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	8812      	ldrh	r2, [r2, #0]
 8002cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e007      	b.n	8002cda <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1cd      	bne.n	8002c94 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fb5b 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e005      	b.n	8002d1e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e000      	b.n	8002d1e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2302      	movs	r3, #2
  }
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	4bb3      	ldr	r3, [pc, #716]	; (8003024 <UART_SetConfig+0x2fc>)
 8002d58:	400b      	ands	r3, r1
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	6852      	ldr	r2, [r2, #4]
 8002d6a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68d2      	ldr	r2, [r2, #12]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	6892      	ldr	r2, [r2, #8]
 8002d90:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4aa2      	ldr	r2, [pc, #648]	; (8003028 <UART_SetConfig+0x300>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d121      	bne.n	8002de8 <UART_SetConfig+0xc0>
 8002da4:	4ba1      	ldr	r3, [pc, #644]	; (800302c <UART_SetConfig+0x304>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d816      	bhi.n	8002de0 <UART_SetConfig+0xb8>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <UART_SetConfig+0x90>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd5 	.word	0x08002dd5
 8002dc0:	08002dcf 	.word	0x08002dcf
 8002dc4:	08002ddb 	.word	0x08002ddb
 8002dc8:	2301      	movs	r3, #1
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e150      	b.n	8003070 <UART_SetConfig+0x348>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e14d      	b.n	8003070 <UART_SetConfig+0x348>
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e14a      	b.n	8003070 <UART_SetConfig+0x348>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	77fb      	strb	r3, [r7, #31]
 8002dde:	e147      	b.n	8003070 <UART_SetConfig+0x348>
 8002de0:	2310      	movs	r3, #16
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	bf00      	nop
 8002de6:	e143      	b.n	8003070 <UART_SetConfig+0x348>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a90      	ldr	r2, [pc, #576]	; (8003030 <UART_SetConfig+0x308>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d134      	bne.n	8002e5c <UART_SetConfig+0x134>
 8002df2:	4b8e      	ldr	r3, [pc, #568]	; (800302c <UART_SetConfig+0x304>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d829      	bhi.n	8002e54 <UART_SetConfig+0x12c>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <UART_SetConfig+0xe0>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e55 	.word	0x08002e55
 8002e10:	08002e55 	.word	0x08002e55
 8002e14:	08002e55 	.word	0x08002e55
 8002e18:	08002e49 	.word	0x08002e49
 8002e1c:	08002e55 	.word	0x08002e55
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002e55 	.word	0x08002e55
 8002e28:	08002e43 	.word	0x08002e43
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e55 	.word	0x08002e55
 8002e38:	08002e4f 	.word	0x08002e4f
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e116      	b.n	8003070 <UART_SetConfig+0x348>
 8002e42:	2302      	movs	r3, #2
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e113      	b.n	8003070 <UART_SetConfig+0x348>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e110      	b.n	8003070 <UART_SetConfig+0x348>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e10d      	b.n	8003070 <UART_SetConfig+0x348>
 8002e54:	2310      	movs	r3, #16
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	bf00      	nop
 8002e5a:	e109      	b.n	8003070 <UART_SetConfig+0x348>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a74      	ldr	r2, [pc, #464]	; (8003034 <UART_SetConfig+0x30c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d120      	bne.n	8002ea8 <UART_SetConfig+0x180>
 8002e66:	4b71      	ldr	r3, [pc, #452]	; (800302c <UART_SetConfig+0x304>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d00f      	beq.n	8002e94 <UART_SetConfig+0x16c>
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d802      	bhi.n	8002e7e <UART_SetConfig+0x156>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <UART_SetConfig+0x160>
 8002e7c:	e010      	b.n	8002ea0 <UART_SetConfig+0x178>
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d005      	beq.n	8002e8e <UART_SetConfig+0x166>
 8002e82:	2b30      	cmp	r3, #48	; 0x30
 8002e84:	d009      	beq.n	8002e9a <UART_SetConfig+0x172>
 8002e86:	e00b      	b.n	8002ea0 <UART_SetConfig+0x178>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	e0f0      	b.n	8003070 <UART_SetConfig+0x348>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e0ed      	b.n	8003070 <UART_SetConfig+0x348>
 8002e94:	2304      	movs	r3, #4
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e0ea      	b.n	8003070 <UART_SetConfig+0x348>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e0e7      	b.n	8003070 <UART_SetConfig+0x348>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	bf00      	nop
 8002ea6:	e0e3      	b.n	8003070 <UART_SetConfig+0x348>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a62      	ldr	r2, [pc, #392]	; (8003038 <UART_SetConfig+0x310>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d120      	bne.n	8002ef4 <UART_SetConfig+0x1cc>
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	; (800302c <UART_SetConfig+0x304>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d00f      	beq.n	8002ee0 <UART_SetConfig+0x1b8>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d802      	bhi.n	8002eca <UART_SetConfig+0x1a2>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <UART_SetConfig+0x1ac>
 8002ec8:	e010      	b.n	8002eec <UART_SetConfig+0x1c4>
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d005      	beq.n	8002eda <UART_SetConfig+0x1b2>
 8002ece:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed0:	d009      	beq.n	8002ee6 <UART_SetConfig+0x1be>
 8002ed2:	e00b      	b.n	8002eec <UART_SetConfig+0x1c4>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e0ca      	b.n	8003070 <UART_SetConfig+0x348>
 8002eda:	2302      	movs	r3, #2
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e0c7      	b.n	8003070 <UART_SetConfig+0x348>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e0c4      	b.n	8003070 <UART_SetConfig+0x348>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e0c1      	b.n	8003070 <UART_SetConfig+0x348>
 8002eec:	2310      	movs	r3, #16
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	bf00      	nop
 8002ef2:	e0bd      	b.n	8003070 <UART_SetConfig+0x348>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <UART_SetConfig+0x314>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d124      	bne.n	8002f48 <UART_SetConfig+0x220>
 8002efe:	4b4b      	ldr	r3, [pc, #300]	; (800302c <UART_SetConfig+0x304>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0c:	d012      	beq.n	8002f34 <UART_SetConfig+0x20c>
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d802      	bhi.n	8002f1a <UART_SetConfig+0x1f2>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <UART_SetConfig+0x200>
 8002f18:	e012      	b.n	8002f40 <UART_SetConfig+0x218>
 8002f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1e:	d006      	beq.n	8002f2e <UART_SetConfig+0x206>
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d009      	beq.n	8002f3a <UART_SetConfig+0x212>
 8002f26:	e00b      	b.n	8002f40 <UART_SetConfig+0x218>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e0a0      	b.n	8003070 <UART_SetConfig+0x348>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e09d      	b.n	8003070 <UART_SetConfig+0x348>
 8002f34:	2304      	movs	r3, #4
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e09a      	b.n	8003070 <UART_SetConfig+0x348>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e097      	b.n	8003070 <UART_SetConfig+0x348>
 8002f40:	2310      	movs	r3, #16
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	bf00      	nop
 8002f46:	e093      	b.n	8003070 <UART_SetConfig+0x348>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <UART_SetConfig+0x318>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d124      	bne.n	8002f9c <UART_SetConfig+0x274>
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <UART_SetConfig+0x304>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f60:	d012      	beq.n	8002f88 <UART_SetConfig+0x260>
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d802      	bhi.n	8002f6e <UART_SetConfig+0x246>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <UART_SetConfig+0x254>
 8002f6c:	e012      	b.n	8002f94 <UART_SetConfig+0x26c>
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f72:	d006      	beq.n	8002f82 <UART_SetConfig+0x25a>
 8002f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f78:	d009      	beq.n	8002f8e <UART_SetConfig+0x266>
 8002f7a:	e00b      	b.n	8002f94 <UART_SetConfig+0x26c>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e076      	b.n	8003070 <UART_SetConfig+0x348>
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e073      	b.n	8003070 <UART_SetConfig+0x348>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e070      	b.n	8003070 <UART_SetConfig+0x348>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e06d      	b.n	8003070 <UART_SetConfig+0x348>
 8002f94:	2310      	movs	r3, #16
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	bf00      	nop
 8002f9a:	e069      	b.n	8003070 <UART_SetConfig+0x348>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a28      	ldr	r2, [pc, #160]	; (8003044 <UART_SetConfig+0x31c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d124      	bne.n	8002ff0 <UART_SetConfig+0x2c8>
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <UART_SetConfig+0x304>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d012      	beq.n	8002fdc <UART_SetConfig+0x2b4>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d802      	bhi.n	8002fc2 <UART_SetConfig+0x29a>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <UART_SetConfig+0x2a8>
 8002fc0:	e012      	b.n	8002fe8 <UART_SetConfig+0x2c0>
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc6:	d006      	beq.n	8002fd6 <UART_SetConfig+0x2ae>
 8002fc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fcc:	d009      	beq.n	8002fe2 <UART_SetConfig+0x2ba>
 8002fce:	e00b      	b.n	8002fe8 <UART_SetConfig+0x2c0>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e04c      	b.n	8003070 <UART_SetConfig+0x348>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e049      	b.n	8003070 <UART_SetConfig+0x348>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e046      	b.n	8003070 <UART_SetConfig+0x348>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e043      	b.n	8003070 <UART_SetConfig+0x348>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	bf00      	nop
 8002fee:	e03f      	b.n	8003070 <UART_SetConfig+0x348>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <UART_SetConfig+0x320>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d138      	bne.n	800306c <UART_SetConfig+0x344>
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <UART_SetConfig+0x304>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d026      	beq.n	8003058 <UART_SetConfig+0x330>
 800300a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800300e:	d802      	bhi.n	8003016 <UART_SetConfig+0x2ee>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <UART_SetConfig+0x324>
 8003014:	e026      	b.n	8003064 <UART_SetConfig+0x33c>
 8003016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301a:	d01a      	beq.n	8003052 <UART_SetConfig+0x32a>
 800301c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003020:	d01d      	beq.n	800305e <UART_SetConfig+0x336>
 8003022:	e01f      	b.n	8003064 <UART_SetConfig+0x33c>
 8003024:	efff69f3 	.word	0xefff69f3
 8003028:	40011000 	.word	0x40011000
 800302c:	40023800 	.word	0x40023800
 8003030:	40004400 	.word	0x40004400
 8003034:	40004800 	.word	0x40004800
 8003038:	40004c00 	.word	0x40004c00
 800303c:	40005000 	.word	0x40005000
 8003040:	40011400 	.word	0x40011400
 8003044:	40007800 	.word	0x40007800
 8003048:	40007c00 	.word	0x40007c00
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e00e      	b.n	8003070 <UART_SetConfig+0x348>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e00b      	b.n	8003070 <UART_SetConfig+0x348>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e008      	b.n	8003070 <UART_SetConfig+0x348>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e005      	b.n	8003070 <UART_SetConfig+0x348>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	bf00      	nop
 800306a:	e001      	b.n	8003070 <UART_SetConfig+0x348>
 800306c:	2310      	movs	r3, #16
 800306e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003078:	d15c      	bne.n	8003134 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800307a:	7ffb      	ldrb	r3, [r7, #31]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d828      	bhi.n	80030d2 <UART_SetConfig+0x3aa>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x360>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030d3 	.word	0x080030d3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7ff f90e 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 80030b0:	61b8      	str	r0, [r7, #24]
        break;
 80030b2:	e013      	b.n	80030dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7ff f91e 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 80030b8:	61b8      	str	r0, [r7, #24]
        break;
 80030ba:	e00f      	b.n	80030dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <UART_SetConfig+0x4bc>)
 80030be:	61bb      	str	r3, [r7, #24]
        break;
 80030c0:	e00c      	b.n	80030dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7ff f81f 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80030c6:	61b8      	str	r0, [r7, #24]
        break;
 80030c8:	e008      	b.n	80030dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	61bb      	str	r3, [r7, #24]
        break;
 80030d0:	e004      	b.n	80030dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	77bb      	strb	r3, [r7, #30]
        break;
 80030da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d074      	beq.n	80031cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	005a      	lsls	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d916      	bls.n	800312e <UART_SetConfig+0x406>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003106:	d212      	bcs.n	800312e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b29a      	uxth	r2, r3
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	4313      	orrs	r3, r2
 8003122:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	89fa      	ldrh	r2, [r7, #14]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	e04e      	b.n	80031cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	77bb      	strb	r3, [r7, #30]
 8003132:	e04b      	b.n	80031cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d827      	bhi.n	800318a <UART_SetConfig+0x462>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <UART_SetConfig+0x418>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003165 	.word	0x08003165
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003175 	.word	0x08003175
 800314c:	0800318b 	.word	0x0800318b
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800318b 	.word	0x0800318b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7ff f8b2 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8003168:	61b8      	str	r0, [r7, #24]
        break;
 800316a:	e013      	b.n	8003194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7ff f8c2 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e00f      	b.n	8003194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <UART_SetConfig+0x4bc>)
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e00c      	b.n	8003194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7fe ffc3 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800317e:	61b8      	str	r0, [r7, #24]
        break;
 8003180:	e008      	b.n	8003194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003186:	61bb      	str	r3, [r7, #24]
        break;
 8003188:	e004      	b.n	8003194 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	77bb      	strb	r3, [r7, #30]
        break;
 8003192:	bf00      	nop
    }

    if (pclk != 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	085a      	lsrs	r2, r3, #1
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d908      	bls.n	80031c8 <UART_SetConfig+0x4a0>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d204      	bcs.n	80031c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	e001      	b.n	80031cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	00f42400 	.word	0x00f42400

080031e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	6852      	ldr	r2, [r2, #4]
 8003206:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	6852      	ldr	r2, [r2, #4]
 8003228:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	6852      	ldr	r2, [r2, #4]
 800324a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	6852      	ldr	r2, [r2, #4]
 800326c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	6892      	ldr	r2, [r2, #8]
 800328e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01a      	beq.n	80032fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e6:	d10a      	bne.n	80032fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	6852      	ldr	r2, [r2, #4]
 80032f2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	6852      	ldr	r2, [r2, #4]
 8003314:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800333c:	f7fd feca 	bl	80010d4 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d10e      	bne.n	800336e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f82d 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e023      	b.n	80033b6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d10e      	bne.n	800339a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f817 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e00d      	b.n	80033b6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ce:	e05e      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d05a      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fd fe7c 	bl	80010d4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad2      	subs	r2, r2, r3
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d802      	bhi.n	80033ee <UART_WaitOnFlagUntilTimeout+0x30>
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11b      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e043      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02c      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003442:	d124      	bne.n	800348e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800345c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e00f      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d091      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034b8:	b084      	sub	sp, #16
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	f107 001c 	add.w	r0, r7, #28
 80034c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d120      	bne.n	8003512 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b20      	ldr	r3, [pc, #128]	; (8003564 <USB_CoreInit+0xac>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa60 	bl	80039cc <USB_CoreReset>
 800350c:	4603      	mov	r3, r0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e010      	b.n	8003534 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa54 	bl	80039cc <USB_CoreReset>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10b      	bne.n	8003552 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f043 0206 	orr.w	r2, r3, #6
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800355e:	b004      	add	sp, #16
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	ffbdffbf 	.word	0xffbdffbf

08003568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 0201 	bic.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	e00b      	b.n	80035ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	e001      	b.n	80035ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e003      	b.n	80035d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80035ce:	2032      	movs	r0, #50	; 0x32
 80035d0:	f7fd fd8c 	bl	80010ec <HAL_Delay>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e0:	b084      	sub	sp, #16
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e009      	b.n	8003614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	2200      	movs	r2, #0
 800360c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3301      	adds	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0e      	cmp	r3, #14
 8003618:	d9f2      	bls.n	8003600 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11d      	bne.n	800365c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e005      	b.n	8003668 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800366e:	461a      	mov	r2, r3
 8003670:	2300      	movs	r3, #0
 8003672:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003692:	2100      	movs	r1, #0
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f95b 	bl	8003950 <USB_SetDevSpeed>
 800369a:	e018      	b.n	80036ce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800369c:	2101      	movs	r1, #1
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f956 	bl	8003950 <USB_SetDevSpeed>
 80036a4:	e013      	b.n	80036ce <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d10c      	bne.n	80036c6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036b2:	2100      	movs	r1, #0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f94b 	bl	8003950 <USB_SetDevSpeed>
 80036ba:	e008      	b.n	80036ce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036bc:	2101      	movs	r1, #1
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f946 	bl	8003950 <USB_SetDevSpeed>
 80036c4:	e003      	b.n	80036ce <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036c6:	2103      	movs	r1, #3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f941 	bl	8003950 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036ce:	2110      	movs	r1, #16
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8f5 	bl	80038c0 <USB_FlushTxFifo>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f913 	bl	800390c <USB_FlushRxFifo>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	461a      	mov	r2, r3
 80036f8:	2300      	movs	r3, #0
 80036fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	461a      	mov	r2, r3
 8003710:	2300      	movs	r3, #0
 8003712:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	e043      	b.n	80037a2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800372c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003730:	d118      	bne.n	8003764 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003744:	461a      	mov	r2, r3
 8003746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e013      	b.n	8003776 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	461a      	mov	r2, r3
 800375c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e008      	b.n	8003776 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	461a      	mov	r2, r3
 8003784:	2300      	movs	r3, #0
 8003786:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800379a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	3301      	adds	r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d8b7      	bhi.n	800371a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	e043      	b.n	8003838 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c6:	d118      	bne.n	80037fa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	461a      	mov	r2, r3
 80037dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e013      	b.n	800380c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e008      	b.n	800380c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	2300      	movs	r3, #0
 800381c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3301      	adds	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d8b7      	bhi.n	80037b0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003854:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003862:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <USB_DevInit+0x2d8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f043 0208 	orr.w	r2, r3, #8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <USB_DevInit+0x2dc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038b2:	b004      	add	sp, #16
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	803c3800 	.word	0x803c3800
 80038bc:	40000004 	.word	0x40000004

080038c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <USB_FlushTxFifo+0x48>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e006      	b.n	80038fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d0f0      	beq.n	80038da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	00030d40 	.word	0x00030d40

0800390c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2210      	movs	r2, #16
 800391c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <USB_FlushRxFifo+0x40>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e006      	b.n	800393e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d0f0      	beq.n	800391e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	00030d40 	.word	0x00030d40

08003950 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003966:	4619      	mov	r1, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0303 	bic.w	r3, r3, #3
 80039a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	461a      	mov	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <USB_CoreReset+0x64>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e01b      	b.n	8003a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	daf2      	bge.n	80039d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <USB_CoreReset+0x64>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d0f0      	beq.n	8003a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	00030d40 	.word	0x00030d40

08003a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a3a:	490e      	ldr	r1, [pc, #56]	; (8003a74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a3c:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a40:	e002      	b.n	8003a48 <LoopCopyDataInit>

08003a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a46:	3304      	adds	r3, #4

08003a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a4c:	d3f9      	bcc.n	8003a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4e:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a50:	4c0b      	ldr	r4, [pc, #44]	; (8003a80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a54:	e001      	b.n	8003a5a <LoopFillZerobss>

08003a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a58:	3204      	adds	r2, #4

08003a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a5c:	d3fb      	bcc.n	8003a56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a5e:	f7fd fad5 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a62:	f000 f81b 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a66:	f7fc fdcb 	bl	8000600 <main>
  bx  lr    
 8003a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003a70:	20020000 	.word	0x20020000
  ldr r1, =_edata
 8003a74:	200202f4 	.word	0x200202f4
  ldr r2, =_sidata
 8003a78:	0800483c 	.word	0x0800483c
  ldr r2, =_sbss
 8003a7c:	200202f4 	.word	0x200202f4
  ldr r4, =_ebss
 8003a80:	20020fc4 	.word	0x20020fc4

08003a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a84:	e7fe      	b.n	8003a84 <ADC_IRQHandler>

08003a86 <atoi>:
 8003a86:	220a      	movs	r2, #10
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f000 b92b 	b.w	8003ce4 <strtol>
	...

08003a90 <__errno>:
 8003a90:	4b01      	ldr	r3, [pc, #4]	; (8003a98 <__errno+0x8>)
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20020124 	.word	0x20020124

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	4e0d      	ldr	r6, [pc, #52]	; (8003ad4 <__libc_init_array+0x38>)
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	; (8003ad8 <__libc_init_array+0x3c>)
 8003aa2:	1ba4      	subs	r4, r4, r6
 8003aa4:	10a4      	asrs	r4, r4, #2
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	42a5      	cmp	r5, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	4e0b      	ldr	r6, [pc, #44]	; (8003adc <__libc_init_array+0x40>)
 8003aae:	4c0c      	ldr	r4, [pc, #48]	; (8003ae0 <__libc_init_array+0x44>)
 8003ab0:	f000 fd52 	bl	8004558 <_init>
 8003ab4:	1ba4      	subs	r4, r4, r6
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	2500      	movs	r5, #0
 8003aba:	42a5      	cmp	r5, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac4:	4798      	blx	r3
 8003ac6:	3501      	adds	r5, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ace:	4798      	blx	r3
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08004834 	.word	0x08004834
 8003ad8:	08004834 	.word	0x08004834
 8003adc:	08004834 	.word	0x08004834
 8003ae0:	08004838 	.word	0x08004838

08003ae4 <memset>:
 8003ae4:	4402      	add	r2, r0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d100      	bne.n	8003aee <memset+0xa>
 8003aec:	4770      	bx	lr
 8003aee:	f803 1b01 	strb.w	r1, [r3], #1
 8003af2:	e7f9      	b.n	8003ae8 <memset+0x4>

08003af4 <siprintf>:
 8003af4:	b40e      	push	{r1, r2, r3}
 8003af6:	b500      	push	{lr}
 8003af8:	b09c      	sub	sp, #112	; 0x70
 8003afa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003afe:	ab1d      	add	r3, sp, #116	; 0x74
 8003b00:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003b04:	9002      	str	r0, [sp, #8]
 8003b06:	9006      	str	r0, [sp, #24]
 8003b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b0c:	480a      	ldr	r0, [pc, #40]	; (8003b38 <siprintf+0x44>)
 8003b0e:	9104      	str	r1, [sp, #16]
 8003b10:	9107      	str	r1, [sp, #28]
 8003b12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b1a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003b1e:	6800      	ldr	r0, [r0, #0]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	a902      	add	r1, sp, #8
 8003b24:	f000 fa1a 	bl	8003f5c <_svfiprintf_r>
 8003b28:	9b02      	ldr	r3, [sp, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	b01c      	add	sp, #112	; 0x70
 8003b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b34:	b003      	add	sp, #12
 8003b36:	4770      	bx	lr
 8003b38:	20020124 	.word	0x20020124

08003b3c <strtok>:
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <strtok+0x50>)
 8003b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b42:	681d      	ldr	r5, [r3, #0]
 8003b44:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003b46:	4606      	mov	r6, r0
 8003b48:	460f      	mov	r7, r1
 8003b4a:	b9b4      	cbnz	r4, 8003b7a <strtok+0x3e>
 8003b4c:	2050      	movs	r0, #80	; 0x50
 8003b4e:	f000 f8e3 	bl	8003d18 <malloc>
 8003b52:	65a8      	str	r0, [r5, #88]	; 0x58
 8003b54:	6004      	str	r4, [r0, #0]
 8003b56:	6044      	str	r4, [r0, #4]
 8003b58:	6084      	str	r4, [r0, #8]
 8003b5a:	60c4      	str	r4, [r0, #12]
 8003b5c:	6104      	str	r4, [r0, #16]
 8003b5e:	6144      	str	r4, [r0, #20]
 8003b60:	6184      	str	r4, [r0, #24]
 8003b62:	6284      	str	r4, [r0, #40]	; 0x28
 8003b64:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003b66:	6304      	str	r4, [r0, #48]	; 0x30
 8003b68:	6344      	str	r4, [r0, #52]	; 0x34
 8003b6a:	6384      	str	r4, [r0, #56]	; 0x38
 8003b6c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003b6e:	6404      	str	r4, [r0, #64]	; 0x40
 8003b70:	6444      	str	r4, [r0, #68]	; 0x44
 8003b72:	6484      	str	r4, [r0, #72]	; 0x48
 8003b74:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003b76:	7704      	strb	r4, [r0, #28]
 8003b78:	6244      	str	r4, [r0, #36]	; 0x24
 8003b7a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003b7c:	4639      	mov	r1, r7
 8003b7e:	4630      	mov	r0, r6
 8003b80:	2301      	movs	r3, #1
 8003b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b86:	f000 b803 	b.w	8003b90 <__strtok_r>
 8003b8a:	bf00      	nop
 8003b8c:	20020124 	.word	0x20020124

08003b90 <__strtok_r>:
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b918      	cbnz	r0, 8003b9c <__strtok_r+0xc>
 8003b94:	6810      	ldr	r0, [r2, #0]
 8003b96:	b908      	cbnz	r0, 8003b9c <__strtok_r+0xc>
 8003b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	460f      	mov	r7, r1
 8003ba0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ba4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ba8:	b91e      	cbnz	r6, 8003bb2 <__strtok_r+0x22>
 8003baa:	b965      	cbnz	r5, 8003bc6 <__strtok_r+0x36>
 8003bac:	6015      	str	r5, [r2, #0]
 8003bae:	4628      	mov	r0, r5
 8003bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb2:	42b5      	cmp	r5, r6
 8003bb4:	d1f6      	bne.n	8003ba4 <__strtok_r+0x14>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1ef      	bne.n	8003b9a <__strtok_r+0xa>
 8003bba:	6014      	str	r4, [r2, #0]
 8003bbc:	7003      	strb	r3, [r0, #0]
 8003bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc0:	461c      	mov	r4, r3
 8003bc2:	e00c      	b.n	8003bde <__strtok_r+0x4e>
 8003bc4:	b915      	cbnz	r5, 8003bcc <__strtok_r+0x3c>
 8003bc6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003bca:	460e      	mov	r6, r1
 8003bcc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	d1f7      	bne.n	8003bc4 <__strtok_r+0x34>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f3      	beq.n	8003bc0 <__strtok_r+0x30>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003bde:	6014      	str	r4, [r2, #0]
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be2 <_strtol_l.isra.0>:
 8003be2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be6:	4680      	mov	r8, r0
 8003be8:	4689      	mov	r9, r1
 8003bea:	4692      	mov	sl, r2
 8003bec:	461f      	mov	r7, r3
 8003bee:	468b      	mov	fp, r1
 8003bf0:	465d      	mov	r5, fp
 8003bf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bf8:	f000 f88a 	bl	8003d10 <__locale_ctype_ptr_l>
 8003bfc:	4420      	add	r0, r4
 8003bfe:	7846      	ldrb	r6, [r0, #1]
 8003c00:	f016 0608 	ands.w	r6, r6, #8
 8003c04:	d10b      	bne.n	8003c1e <_strtol_l.isra.0+0x3c>
 8003c06:	2c2d      	cmp	r4, #45	; 0x2d
 8003c08:	d10b      	bne.n	8003c22 <_strtol_l.isra.0+0x40>
 8003c0a:	782c      	ldrb	r4, [r5, #0]
 8003c0c:	2601      	movs	r6, #1
 8003c0e:	f10b 0502 	add.w	r5, fp, #2
 8003c12:	b167      	cbz	r7, 8003c2e <_strtol_l.isra.0+0x4c>
 8003c14:	2f10      	cmp	r7, #16
 8003c16:	d114      	bne.n	8003c42 <_strtol_l.isra.0+0x60>
 8003c18:	2c30      	cmp	r4, #48	; 0x30
 8003c1a:	d00a      	beq.n	8003c32 <_strtol_l.isra.0+0x50>
 8003c1c:	e011      	b.n	8003c42 <_strtol_l.isra.0+0x60>
 8003c1e:	46ab      	mov	fp, r5
 8003c20:	e7e6      	b.n	8003bf0 <_strtol_l.isra.0+0xe>
 8003c22:	2c2b      	cmp	r4, #43	; 0x2b
 8003c24:	bf04      	itt	eq
 8003c26:	782c      	ldrbeq	r4, [r5, #0]
 8003c28:	f10b 0502 	addeq.w	r5, fp, #2
 8003c2c:	e7f1      	b.n	8003c12 <_strtol_l.isra.0+0x30>
 8003c2e:	2c30      	cmp	r4, #48	; 0x30
 8003c30:	d127      	bne.n	8003c82 <_strtol_l.isra.0+0xa0>
 8003c32:	782b      	ldrb	r3, [r5, #0]
 8003c34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c38:	2b58      	cmp	r3, #88	; 0x58
 8003c3a:	d14b      	bne.n	8003cd4 <_strtol_l.isra.0+0xf2>
 8003c3c:	786c      	ldrb	r4, [r5, #1]
 8003c3e:	2710      	movs	r7, #16
 8003c40:	3502      	adds	r5, #2
 8003c42:	2e00      	cmp	r6, #0
 8003c44:	bf0c      	ite	eq
 8003c46:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003c4a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003c4e:	2200      	movs	r2, #0
 8003c50:	fbb1 fef7 	udiv	lr, r1, r7
 8003c54:	4610      	mov	r0, r2
 8003c56:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003c5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003c5e:	2b09      	cmp	r3, #9
 8003c60:	d811      	bhi.n	8003c86 <_strtol_l.isra.0+0xa4>
 8003c62:	461c      	mov	r4, r3
 8003c64:	42a7      	cmp	r7, r4
 8003c66:	dd1d      	ble.n	8003ca4 <_strtol_l.isra.0+0xc2>
 8003c68:	1c53      	adds	r3, r2, #1
 8003c6a:	d007      	beq.n	8003c7c <_strtol_l.isra.0+0x9a>
 8003c6c:	4586      	cmp	lr, r0
 8003c6e:	d316      	bcc.n	8003c9e <_strtol_l.isra.0+0xbc>
 8003c70:	d101      	bne.n	8003c76 <_strtol_l.isra.0+0x94>
 8003c72:	45a4      	cmp	ip, r4
 8003c74:	db13      	blt.n	8003c9e <_strtol_l.isra.0+0xbc>
 8003c76:	fb00 4007 	mla	r0, r0, r7, r4
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c80:	e7eb      	b.n	8003c5a <_strtol_l.isra.0+0x78>
 8003c82:	270a      	movs	r7, #10
 8003c84:	e7dd      	b.n	8003c42 <_strtol_l.isra.0+0x60>
 8003c86:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003c8a:	2b19      	cmp	r3, #25
 8003c8c:	d801      	bhi.n	8003c92 <_strtol_l.isra.0+0xb0>
 8003c8e:	3c37      	subs	r4, #55	; 0x37
 8003c90:	e7e8      	b.n	8003c64 <_strtol_l.isra.0+0x82>
 8003c92:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003c96:	2b19      	cmp	r3, #25
 8003c98:	d804      	bhi.n	8003ca4 <_strtol_l.isra.0+0xc2>
 8003c9a:	3c57      	subs	r4, #87	; 0x57
 8003c9c:	e7e2      	b.n	8003c64 <_strtol_l.isra.0+0x82>
 8003c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca2:	e7eb      	b.n	8003c7c <_strtol_l.isra.0+0x9a>
 8003ca4:	1c53      	adds	r3, r2, #1
 8003ca6:	d108      	bne.n	8003cba <_strtol_l.isra.0+0xd8>
 8003ca8:	2322      	movs	r3, #34	; 0x22
 8003caa:	f8c8 3000 	str.w	r3, [r8]
 8003cae:	4608      	mov	r0, r1
 8003cb0:	f1ba 0f00 	cmp.w	sl, #0
 8003cb4:	d107      	bne.n	8003cc6 <_strtol_l.isra.0+0xe4>
 8003cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	b106      	cbz	r6, 8003cbe <_strtol_l.isra.0+0xdc>
 8003cbc:	4240      	negs	r0, r0
 8003cbe:	f1ba 0f00 	cmp.w	sl, #0
 8003cc2:	d00c      	beq.n	8003cde <_strtol_l.isra.0+0xfc>
 8003cc4:	b122      	cbz	r2, 8003cd0 <_strtol_l.isra.0+0xee>
 8003cc6:	3d01      	subs	r5, #1
 8003cc8:	f8ca 5000 	str.w	r5, [sl]
 8003ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd0:	464d      	mov	r5, r9
 8003cd2:	e7f9      	b.n	8003cc8 <_strtol_l.isra.0+0xe6>
 8003cd4:	2430      	movs	r4, #48	; 0x30
 8003cd6:	2f00      	cmp	r7, #0
 8003cd8:	d1b3      	bne.n	8003c42 <_strtol_l.isra.0+0x60>
 8003cda:	2708      	movs	r7, #8
 8003cdc:	e7b1      	b.n	8003c42 <_strtol_l.isra.0+0x60>
 8003cde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003ce4 <strtol>:
 8003ce4:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <strtol+0x24>)
 8003ce6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ce8:	681c      	ldr	r4, [r3, #0]
 8003cea:	4d08      	ldr	r5, [pc, #32]	; (8003d0c <strtol+0x28>)
 8003cec:	6a23      	ldr	r3, [r4, #32]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf08      	it	eq
 8003cf2:	462b      	moveq	r3, r5
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7ff ff70 	bl	8003be2 <_strtol_l.isra.0>
 8003d02:	b003      	add	sp, #12
 8003d04:	bd30      	pop	{r4, r5, pc}
 8003d06:	bf00      	nop
 8003d08:	20020124 	.word	0x20020124
 8003d0c:	20020188 	.word	0x20020188

08003d10 <__locale_ctype_ptr_l>:
 8003d10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003d14:	4770      	bx	lr
	...

08003d18 <malloc>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <malloc+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f000 b863 	b.w	8003de8 <_malloc_r>
 8003d22:	bf00      	nop
 8003d24:	20020124 	.word	0x20020124

08003d28 <__ascii_mbtowc>:
 8003d28:	b082      	sub	sp, #8
 8003d2a:	b901      	cbnz	r1, 8003d2e <__ascii_mbtowc+0x6>
 8003d2c:	a901      	add	r1, sp, #4
 8003d2e:	b142      	cbz	r2, 8003d42 <__ascii_mbtowc+0x1a>
 8003d30:	b14b      	cbz	r3, 8003d46 <__ascii_mbtowc+0x1e>
 8003d32:	7813      	ldrb	r3, [r2, #0]
 8003d34:	600b      	str	r3, [r1, #0]
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	1c10      	adds	r0, r2, #0
 8003d3a:	bf18      	it	ne
 8003d3c:	2001      	movne	r0, #1
 8003d3e:	b002      	add	sp, #8
 8003d40:	4770      	bx	lr
 8003d42:	4610      	mov	r0, r2
 8003d44:	e7fb      	b.n	8003d3e <__ascii_mbtowc+0x16>
 8003d46:	f06f 0001 	mvn.w	r0, #1
 8003d4a:	e7f8      	b.n	8003d3e <__ascii_mbtowc+0x16>

08003d4c <_free_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4605      	mov	r5, r0
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d045      	beq.n	8003de0 <_free_r+0x94>
 8003d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d58:	1f0c      	subs	r4, r1, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	18e4      	addlt	r4, r4, r3
 8003d60:	f000 fbc8 	bl	80044f4 <__malloc_lock>
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <_free_r+0x98>)
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	4610      	mov	r0, r2
 8003d6a:	b933      	cbnz	r3, 8003d7a <_free_r+0x2e>
 8003d6c:	6063      	str	r3, [r4, #4]
 8003d6e:	6014      	str	r4, [r2, #0]
 8003d70:	4628      	mov	r0, r5
 8003d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d76:	f000 bbbe 	b.w	80044f6 <__malloc_unlock>
 8003d7a:	42a3      	cmp	r3, r4
 8003d7c:	d90c      	bls.n	8003d98 <_free_r+0x4c>
 8003d7e:	6821      	ldr	r1, [r4, #0]
 8003d80:	1862      	adds	r2, r4, r1
 8003d82:	4293      	cmp	r3, r2
 8003d84:	bf04      	itt	eq
 8003d86:	681a      	ldreq	r2, [r3, #0]
 8003d88:	685b      	ldreq	r3, [r3, #4]
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	bf04      	itt	eq
 8003d8e:	1852      	addeq	r2, r2, r1
 8003d90:	6022      	streq	r2, [r4, #0]
 8003d92:	6004      	str	r4, [r0, #0]
 8003d94:	e7ec      	b.n	8003d70 <_free_r+0x24>
 8003d96:	4613      	mov	r3, r2
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	b10a      	cbz	r2, 8003da0 <_free_r+0x54>
 8003d9c:	42a2      	cmp	r2, r4
 8003d9e:	d9fa      	bls.n	8003d96 <_free_r+0x4a>
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	1858      	adds	r0, r3, r1
 8003da4:	42a0      	cmp	r0, r4
 8003da6:	d10b      	bne.n	8003dc0 <_free_r+0x74>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	4401      	add	r1, r0
 8003dac:	1858      	adds	r0, r3, r1
 8003dae:	4282      	cmp	r2, r0
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	d1dd      	bne.n	8003d70 <_free_r+0x24>
 8003db4:	6810      	ldr	r0, [r2, #0]
 8003db6:	6852      	ldr	r2, [r2, #4]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	4401      	add	r1, r0
 8003dbc:	6019      	str	r1, [r3, #0]
 8003dbe:	e7d7      	b.n	8003d70 <_free_r+0x24>
 8003dc0:	d902      	bls.n	8003dc8 <_free_r+0x7c>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	e7d3      	b.n	8003d70 <_free_r+0x24>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	1821      	adds	r1, r4, r0
 8003dcc:	428a      	cmp	r2, r1
 8003dce:	bf04      	itt	eq
 8003dd0:	6811      	ldreq	r1, [r2, #0]
 8003dd2:	6852      	ldreq	r2, [r2, #4]
 8003dd4:	6062      	str	r2, [r4, #4]
 8003dd6:	bf04      	itt	eq
 8003dd8:	1809      	addeq	r1, r1, r0
 8003dda:	6021      	streq	r1, [r4, #0]
 8003ddc:	605c      	str	r4, [r3, #4]
 8003dde:	e7c7      	b.n	8003d70 <_free_r+0x24>
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
 8003de2:	bf00      	nop
 8003de4:	20020314 	.word	0x20020314

08003de8 <_malloc_r>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	1ccd      	adds	r5, r1, #3
 8003dec:	f025 0503 	bic.w	r5, r5, #3
 8003df0:	3508      	adds	r5, #8
 8003df2:	2d0c      	cmp	r5, #12
 8003df4:	bf38      	it	cc
 8003df6:	250c      	movcc	r5, #12
 8003df8:	2d00      	cmp	r5, #0
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	db01      	blt.n	8003e02 <_malloc_r+0x1a>
 8003dfe:	42a9      	cmp	r1, r5
 8003e00:	d903      	bls.n	8003e0a <_malloc_r+0x22>
 8003e02:	230c      	movs	r3, #12
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	2000      	movs	r0, #0
 8003e08:	bd70      	pop	{r4, r5, r6, pc}
 8003e0a:	f000 fb73 	bl	80044f4 <__malloc_lock>
 8003e0e:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <_malloc_r+0xb4>)
 8003e10:	6814      	ldr	r4, [r2, #0]
 8003e12:	4621      	mov	r1, r4
 8003e14:	b991      	cbnz	r1, 8003e3c <_malloc_r+0x54>
 8003e16:	4c22      	ldr	r4, [pc, #136]	; (8003ea0 <_malloc_r+0xb8>)
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	b91b      	cbnz	r3, 8003e24 <_malloc_r+0x3c>
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f000 fb27 	bl	8004470 <_sbrk_r>
 8003e22:	6020      	str	r0, [r4, #0]
 8003e24:	4629      	mov	r1, r5
 8003e26:	4630      	mov	r0, r6
 8003e28:	f000 fb22 	bl	8004470 <_sbrk_r>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d126      	bne.n	8003e7e <_malloc_r+0x96>
 8003e30:	230c      	movs	r3, #12
 8003e32:	6033      	str	r3, [r6, #0]
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 fb5e 	bl	80044f6 <__malloc_unlock>
 8003e3a:	e7e4      	b.n	8003e06 <_malloc_r+0x1e>
 8003e3c:	680b      	ldr	r3, [r1, #0]
 8003e3e:	1b5b      	subs	r3, r3, r5
 8003e40:	d41a      	bmi.n	8003e78 <_malloc_r+0x90>
 8003e42:	2b0b      	cmp	r3, #11
 8003e44:	d90f      	bls.n	8003e66 <_malloc_r+0x7e>
 8003e46:	600b      	str	r3, [r1, #0]
 8003e48:	50cd      	str	r5, [r1, r3]
 8003e4a:	18cc      	adds	r4, r1, r3
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 fb52 	bl	80044f6 <__malloc_unlock>
 8003e52:	f104 000b 	add.w	r0, r4, #11
 8003e56:	1d23      	adds	r3, r4, #4
 8003e58:	f020 0007 	bic.w	r0, r0, #7
 8003e5c:	1ac3      	subs	r3, r0, r3
 8003e5e:	d01b      	beq.n	8003e98 <_malloc_r+0xb0>
 8003e60:	425a      	negs	r2, r3
 8003e62:	50e2      	str	r2, [r4, r3]
 8003e64:	bd70      	pop	{r4, r5, r6, pc}
 8003e66:	428c      	cmp	r4, r1
 8003e68:	bf0d      	iteet	eq
 8003e6a:	6863      	ldreq	r3, [r4, #4]
 8003e6c:	684b      	ldrne	r3, [r1, #4]
 8003e6e:	6063      	strne	r3, [r4, #4]
 8003e70:	6013      	streq	r3, [r2, #0]
 8003e72:	bf18      	it	ne
 8003e74:	460c      	movne	r4, r1
 8003e76:	e7e9      	b.n	8003e4c <_malloc_r+0x64>
 8003e78:	460c      	mov	r4, r1
 8003e7a:	6849      	ldr	r1, [r1, #4]
 8003e7c:	e7ca      	b.n	8003e14 <_malloc_r+0x2c>
 8003e7e:	1cc4      	adds	r4, r0, #3
 8003e80:	f024 0403 	bic.w	r4, r4, #3
 8003e84:	42a0      	cmp	r0, r4
 8003e86:	d005      	beq.n	8003e94 <_malloc_r+0xac>
 8003e88:	1a21      	subs	r1, r4, r0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f000 faf0 	bl	8004470 <_sbrk_r>
 8003e90:	3001      	adds	r0, #1
 8003e92:	d0cd      	beq.n	8003e30 <_malloc_r+0x48>
 8003e94:	6025      	str	r5, [r4, #0]
 8003e96:	e7d9      	b.n	8003e4c <_malloc_r+0x64>
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20020314 	.word	0x20020314
 8003ea0:	20020318 	.word	0x20020318

08003ea4 <__ssputs_r>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	688e      	ldr	r6, [r1, #8]
 8003eaa:	429e      	cmp	r6, r3
 8003eac:	4682      	mov	sl, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4691      	mov	r9, r2
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	d835      	bhi.n	8003f22 <__ssputs_r+0x7e>
 8003eb6:	898a      	ldrh	r2, [r1, #12]
 8003eb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ebc:	d031      	beq.n	8003f22 <__ssputs_r+0x7e>
 8003ebe:	6825      	ldr	r5, [r4, #0]
 8003ec0:	6909      	ldr	r1, [r1, #16]
 8003ec2:	1a6f      	subs	r7, r5, r1
 8003ec4:	6965      	ldr	r5, [r4, #20]
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ecc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ed0:	f108 0301 	add.w	r3, r8, #1
 8003ed4:	443b      	add	r3, r7
 8003ed6:	429d      	cmp	r5, r3
 8003ed8:	bf38      	it	cc
 8003eda:	461d      	movcc	r5, r3
 8003edc:	0553      	lsls	r3, r2, #21
 8003ede:	d531      	bpl.n	8003f44 <__ssputs_r+0xa0>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	f7ff ff81 	bl	8003de8 <_malloc_r>
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	b950      	cbnz	r0, 8003f00 <__ssputs_r+0x5c>
 8003eea:	230c      	movs	r3, #12
 8003eec:	f8ca 3000 	str.w	r3, [sl]
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f00:	463a      	mov	r2, r7
 8003f02:	6921      	ldr	r1, [r4, #16]
 8003f04:	f000 fad1 	bl	80044aa <memcpy>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	6126      	str	r6, [r4, #16]
 8003f16:	6165      	str	r5, [r4, #20]
 8003f18:	443e      	add	r6, r7
 8003f1a:	1bed      	subs	r5, r5, r7
 8003f1c:	6026      	str	r6, [r4, #0]
 8003f1e:	60a5      	str	r5, [r4, #8]
 8003f20:	4646      	mov	r6, r8
 8003f22:	4546      	cmp	r6, r8
 8003f24:	bf28      	it	cs
 8003f26:	4646      	movcs	r6, r8
 8003f28:	4632      	mov	r2, r6
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	f000 fac7 	bl	80044c0 <memmove>
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	1b9b      	subs	r3, r3, r6
 8003f36:	60a3      	str	r3, [r4, #8]
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	441e      	add	r6, r3
 8003f3c:	6026      	str	r6, [r4, #0]
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	462a      	mov	r2, r5
 8003f46:	f000 fad7 	bl	80044f8 <_realloc_r>
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d1e1      	bne.n	8003f14 <__ssputs_r+0x70>
 8003f50:	6921      	ldr	r1, [r4, #16]
 8003f52:	4650      	mov	r0, sl
 8003f54:	f7ff fefa 	bl	8003d4c <_free_r>
 8003f58:	e7c7      	b.n	8003eea <__ssputs_r+0x46>
	...

08003f5c <_svfiprintf_r>:
 8003f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f60:	b09d      	sub	sp, #116	; 0x74
 8003f62:	4680      	mov	r8, r0
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	898b      	ldrh	r3, [r1, #12]
 8003f68:	061c      	lsls	r4, r3, #24
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	d50f      	bpl.n	8003f90 <_svfiprintf_r+0x34>
 8003f70:	690b      	ldr	r3, [r1, #16]
 8003f72:	b96b      	cbnz	r3, 8003f90 <_svfiprintf_r+0x34>
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	f7ff ff37 	bl	8003de8 <_malloc_r>
 8003f7a:	6028      	str	r0, [r5, #0]
 8003f7c:	6128      	str	r0, [r5, #16]
 8003f7e:	b928      	cbnz	r0, 8003f8c <_svfiprintf_r+0x30>
 8003f80:	230c      	movs	r3, #12
 8003f82:	f8c8 3000 	str.w	r3, [r8]
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	e0c5      	b.n	8004118 <_svfiprintf_r+0x1bc>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	616b      	str	r3, [r5, #20]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9309      	str	r3, [sp, #36]	; 0x24
 8003f94:	2320      	movs	r3, #32
 8003f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f9a:	2330      	movs	r3, #48	; 0x30
 8003f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fa0:	f04f 0b01 	mov.w	fp, #1
 8003fa4:	4637      	mov	r7, r6
 8003fa6:	463c      	mov	r4, r7
 8003fa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d13c      	bne.n	800402a <_svfiprintf_r+0xce>
 8003fb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003fb4:	d00b      	beq.n	8003fce <_svfiprintf_r+0x72>
 8003fb6:	4653      	mov	r3, sl
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	f7ff ff71 	bl	8003ea4 <__ssputs_r>
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f000 80a3 	beq.w	800410e <_svfiprintf_r+0x1b2>
 8003fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fca:	4453      	add	r3, sl
 8003fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fce:	783b      	ldrb	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 809c 	beq.w	800410e <_svfiprintf_r+0x1b2>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	9304      	str	r3, [sp, #16]
 8003fde:	9307      	str	r3, [sp, #28]
 8003fe0:	9205      	str	r2, [sp, #20]
 8003fe2:	9306      	str	r3, [sp, #24]
 8003fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8003fea:	2205      	movs	r2, #5
 8003fec:	7821      	ldrb	r1, [r4, #0]
 8003fee:	4850      	ldr	r0, [pc, #320]	; (8004130 <_svfiprintf_r+0x1d4>)
 8003ff0:	f7fc f92e 	bl	8000250 <memchr>
 8003ff4:	1c67      	adds	r7, r4, #1
 8003ff6:	9b04      	ldr	r3, [sp, #16]
 8003ff8:	b9d8      	cbnz	r0, 8004032 <_svfiprintf_r+0xd6>
 8003ffa:	06d9      	lsls	r1, r3, #27
 8003ffc:	bf44      	itt	mi
 8003ffe:	2220      	movmi	r2, #32
 8004000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004004:	071a      	lsls	r2, r3, #28
 8004006:	bf44      	itt	mi
 8004008:	222b      	movmi	r2, #43	; 0x2b
 800400a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800400e:	7822      	ldrb	r2, [r4, #0]
 8004010:	2a2a      	cmp	r2, #42	; 0x2a
 8004012:	d016      	beq.n	8004042 <_svfiprintf_r+0xe6>
 8004014:	9a07      	ldr	r2, [sp, #28]
 8004016:	2100      	movs	r1, #0
 8004018:	200a      	movs	r0, #10
 800401a:	4627      	mov	r7, r4
 800401c:	3401      	adds	r4, #1
 800401e:	783b      	ldrb	r3, [r7, #0]
 8004020:	3b30      	subs	r3, #48	; 0x30
 8004022:	2b09      	cmp	r3, #9
 8004024:	d951      	bls.n	80040ca <_svfiprintf_r+0x16e>
 8004026:	b1c9      	cbz	r1, 800405c <_svfiprintf_r+0x100>
 8004028:	e011      	b.n	800404e <_svfiprintf_r+0xf2>
 800402a:	2b25      	cmp	r3, #37	; 0x25
 800402c:	d0c0      	beq.n	8003fb0 <_svfiprintf_r+0x54>
 800402e:	4627      	mov	r7, r4
 8004030:	e7b9      	b.n	8003fa6 <_svfiprintf_r+0x4a>
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <_svfiprintf_r+0x1d4>)
 8004034:	1a80      	subs	r0, r0, r2
 8004036:	fa0b f000 	lsl.w	r0, fp, r0
 800403a:	4318      	orrs	r0, r3
 800403c:	9004      	str	r0, [sp, #16]
 800403e:	463c      	mov	r4, r7
 8004040:	e7d3      	b.n	8003fea <_svfiprintf_r+0x8e>
 8004042:	9a03      	ldr	r2, [sp, #12]
 8004044:	1d11      	adds	r1, r2, #4
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	9103      	str	r1, [sp, #12]
 800404a:	2a00      	cmp	r2, #0
 800404c:	db01      	blt.n	8004052 <_svfiprintf_r+0xf6>
 800404e:	9207      	str	r2, [sp, #28]
 8004050:	e004      	b.n	800405c <_svfiprintf_r+0x100>
 8004052:	4252      	negs	r2, r2
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	9207      	str	r2, [sp, #28]
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	783b      	ldrb	r3, [r7, #0]
 800405e:	2b2e      	cmp	r3, #46	; 0x2e
 8004060:	d10e      	bne.n	8004080 <_svfiprintf_r+0x124>
 8004062:	787b      	ldrb	r3, [r7, #1]
 8004064:	2b2a      	cmp	r3, #42	; 0x2a
 8004066:	f107 0101 	add.w	r1, r7, #1
 800406a:	d132      	bne.n	80040d2 <_svfiprintf_r+0x176>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	bfb8      	it	lt
 8004078:	f04f 33ff 	movlt.w	r3, #4294967295
 800407c:	3702      	adds	r7, #2
 800407e:	9305      	str	r3, [sp, #20]
 8004080:	4c2c      	ldr	r4, [pc, #176]	; (8004134 <_svfiprintf_r+0x1d8>)
 8004082:	7839      	ldrb	r1, [r7, #0]
 8004084:	2203      	movs	r2, #3
 8004086:	4620      	mov	r0, r4
 8004088:	f7fc f8e2 	bl	8000250 <memchr>
 800408c:	b138      	cbz	r0, 800409e <_svfiprintf_r+0x142>
 800408e:	2340      	movs	r3, #64	; 0x40
 8004090:	1b00      	subs	r0, r0, r4
 8004092:	fa03 f000 	lsl.w	r0, r3, r0
 8004096:	9b04      	ldr	r3, [sp, #16]
 8004098:	4303      	orrs	r3, r0
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	3701      	adds	r7, #1
 800409e:	7839      	ldrb	r1, [r7, #0]
 80040a0:	4825      	ldr	r0, [pc, #148]	; (8004138 <_svfiprintf_r+0x1dc>)
 80040a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040a6:	2206      	movs	r2, #6
 80040a8:	1c7e      	adds	r6, r7, #1
 80040aa:	f7fc f8d1 	bl	8000250 <memchr>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d035      	beq.n	800411e <_svfiprintf_r+0x1c2>
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <_svfiprintf_r+0x1e0>)
 80040b4:	b9fb      	cbnz	r3, 80040f6 <_svfiprintf_r+0x19a>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	3307      	adds	r3, #7
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	3308      	adds	r3, #8
 80040c0:	9303      	str	r3, [sp, #12]
 80040c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c4:	444b      	add	r3, r9
 80040c6:	9309      	str	r3, [sp, #36]	; 0x24
 80040c8:	e76c      	b.n	8003fa4 <_svfiprintf_r+0x48>
 80040ca:	fb00 3202 	mla	r2, r0, r2, r3
 80040ce:	2101      	movs	r1, #1
 80040d0:	e7a3      	b.n	800401a <_svfiprintf_r+0xbe>
 80040d2:	2300      	movs	r3, #0
 80040d4:	9305      	str	r3, [sp, #20]
 80040d6:	4618      	mov	r0, r3
 80040d8:	240a      	movs	r4, #10
 80040da:	460f      	mov	r7, r1
 80040dc:	3101      	adds	r1, #1
 80040de:	783a      	ldrb	r2, [r7, #0]
 80040e0:	3a30      	subs	r2, #48	; 0x30
 80040e2:	2a09      	cmp	r2, #9
 80040e4:	d903      	bls.n	80040ee <_svfiprintf_r+0x192>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ca      	beq.n	8004080 <_svfiprintf_r+0x124>
 80040ea:	9005      	str	r0, [sp, #20]
 80040ec:	e7c8      	b.n	8004080 <_svfiprintf_r+0x124>
 80040ee:	fb04 2000 	mla	r0, r4, r0, r2
 80040f2:	2301      	movs	r3, #1
 80040f4:	e7f1      	b.n	80040da <_svfiprintf_r+0x17e>
 80040f6:	ab03      	add	r3, sp, #12
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	462a      	mov	r2, r5
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_svfiprintf_r+0x1e4>)
 80040fe:	a904      	add	r1, sp, #16
 8004100:	4640      	mov	r0, r8
 8004102:	f3af 8000 	nop.w
 8004106:	f1b0 3fff 	cmp.w	r0, #4294967295
 800410a:	4681      	mov	r9, r0
 800410c:	d1d9      	bne.n	80040c2 <_svfiprintf_r+0x166>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	065b      	lsls	r3, r3, #25
 8004112:	f53f af38 	bmi.w	8003f86 <_svfiprintf_r+0x2a>
 8004116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004118:	b01d      	add	sp, #116	; 0x74
 800411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800411e:	ab03      	add	r3, sp, #12
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	462a      	mov	r2, r5
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <_svfiprintf_r+0x1e4>)
 8004126:	a904      	add	r1, sp, #16
 8004128:	4640      	mov	r0, r8
 800412a:	f000 f881 	bl	8004230 <_printf_i>
 800412e:	e7ea      	b.n	8004106 <_svfiprintf_r+0x1aa>
 8004130:	080046f6 	.word	0x080046f6
 8004134:	080046fc 	.word	0x080046fc
 8004138:	08004700 	.word	0x08004700
 800413c:	00000000 	.word	0x00000000
 8004140:	08003ea5 	.word	0x08003ea5

08004144 <_printf_common>:
 8004144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	4691      	mov	r9, r2
 800414a:	461f      	mov	r7, r3
 800414c:	688a      	ldr	r2, [r1, #8]
 800414e:	690b      	ldr	r3, [r1, #16]
 8004150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004154:	4293      	cmp	r3, r2
 8004156:	bfb8      	it	lt
 8004158:	4613      	movlt	r3, r2
 800415a:	f8c9 3000 	str.w	r3, [r9]
 800415e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004162:	4606      	mov	r6, r0
 8004164:	460c      	mov	r4, r1
 8004166:	b112      	cbz	r2, 800416e <_printf_common+0x2a>
 8004168:	3301      	adds	r3, #1
 800416a:	f8c9 3000 	str.w	r3, [r9]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	0699      	lsls	r1, r3, #26
 8004172:	bf42      	ittt	mi
 8004174:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004178:	3302      	addmi	r3, #2
 800417a:	f8c9 3000 	strmi.w	r3, [r9]
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	f015 0506 	ands.w	r5, r5, #6
 8004184:	d107      	bne.n	8004196 <_printf_common+0x52>
 8004186:	f104 0a19 	add.w	sl, r4, #25
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	f8d9 2000 	ldr.w	r2, [r9]
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	429d      	cmp	r5, r3
 8004194:	db29      	blt.n	80041ea <_printf_common+0xa6>
 8004196:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	3300      	adds	r3, #0
 800419e:	bf18      	it	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	0692      	lsls	r2, r2, #26
 80041a4:	d42e      	bmi.n	8004204 <_printf_common+0xc0>
 80041a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041aa:	4639      	mov	r1, r7
 80041ac:	4630      	mov	r0, r6
 80041ae:	47c0      	blx	r8
 80041b0:	3001      	adds	r0, #1
 80041b2:	d021      	beq.n	80041f8 <_printf_common+0xb4>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	68e5      	ldr	r5, [r4, #12]
 80041b8:	f8d9 2000 	ldr.w	r2, [r9]
 80041bc:	f003 0306 	and.w	r3, r3, #6
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	bf08      	it	eq
 80041c4:	1aad      	subeq	r5, r5, r2
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	6922      	ldr	r2, [r4, #16]
 80041ca:	bf0c      	ite	eq
 80041cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d0:	2500      	movne	r5, #0
 80041d2:	4293      	cmp	r3, r2
 80041d4:	bfc4      	itt	gt
 80041d6:	1a9b      	subgt	r3, r3, r2
 80041d8:	18ed      	addgt	r5, r5, r3
 80041da:	f04f 0900 	mov.w	r9, #0
 80041de:	341a      	adds	r4, #26
 80041e0:	454d      	cmp	r5, r9
 80041e2:	d11b      	bne.n	800421c <_printf_common+0xd8>
 80041e4:	2000      	movs	r0, #0
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ea:	2301      	movs	r3, #1
 80041ec:	4652      	mov	r2, sl
 80041ee:	4639      	mov	r1, r7
 80041f0:	4630      	mov	r0, r6
 80041f2:	47c0      	blx	r8
 80041f4:	3001      	adds	r0, #1
 80041f6:	d103      	bne.n	8004200 <_printf_common+0xbc>
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	3501      	adds	r5, #1
 8004202:	e7c2      	b.n	800418a <_printf_common+0x46>
 8004204:	18e1      	adds	r1, r4, r3
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	2030      	movs	r0, #48	; 0x30
 800420a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800420e:	4422      	add	r2, r4
 8004210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004218:	3302      	adds	r3, #2
 800421a:	e7c4      	b.n	80041a6 <_printf_common+0x62>
 800421c:	2301      	movs	r3, #1
 800421e:	4622      	mov	r2, r4
 8004220:	4639      	mov	r1, r7
 8004222:	4630      	mov	r0, r6
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d0e6      	beq.n	80041f8 <_printf_common+0xb4>
 800422a:	f109 0901 	add.w	r9, r9, #1
 800422e:	e7d7      	b.n	80041e0 <_printf_common+0x9c>

08004230 <_printf_i>:
 8004230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004234:	4617      	mov	r7, r2
 8004236:	7e0a      	ldrb	r2, [r1, #24]
 8004238:	b085      	sub	sp, #20
 800423a:	2a6e      	cmp	r2, #110	; 0x6e
 800423c:	4698      	mov	r8, r3
 800423e:	4606      	mov	r6, r0
 8004240:	460c      	mov	r4, r1
 8004242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004244:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004248:	f000 80bc 	beq.w	80043c4 <_printf_i+0x194>
 800424c:	d81a      	bhi.n	8004284 <_printf_i+0x54>
 800424e:	2a63      	cmp	r2, #99	; 0x63
 8004250:	d02e      	beq.n	80042b0 <_printf_i+0x80>
 8004252:	d80a      	bhi.n	800426a <_printf_i+0x3a>
 8004254:	2a00      	cmp	r2, #0
 8004256:	f000 80c8 	beq.w	80043ea <_printf_i+0x1ba>
 800425a:	2a58      	cmp	r2, #88	; 0x58
 800425c:	f000 808a 	beq.w	8004374 <_printf_i+0x144>
 8004260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004264:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004268:	e02a      	b.n	80042c0 <_printf_i+0x90>
 800426a:	2a64      	cmp	r2, #100	; 0x64
 800426c:	d001      	beq.n	8004272 <_printf_i+0x42>
 800426e:	2a69      	cmp	r2, #105	; 0x69
 8004270:	d1f6      	bne.n	8004260 <_printf_i+0x30>
 8004272:	6821      	ldr	r1, [r4, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	f011 0f80 	tst.w	r1, #128	; 0x80
 800427a:	d023      	beq.n	80042c4 <_printf_i+0x94>
 800427c:	1d11      	adds	r1, r2, #4
 800427e:	6019      	str	r1, [r3, #0]
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	e027      	b.n	80042d4 <_printf_i+0xa4>
 8004284:	2a73      	cmp	r2, #115	; 0x73
 8004286:	f000 80b4 	beq.w	80043f2 <_printf_i+0x1c2>
 800428a:	d808      	bhi.n	800429e <_printf_i+0x6e>
 800428c:	2a6f      	cmp	r2, #111	; 0x6f
 800428e:	d02a      	beq.n	80042e6 <_printf_i+0xb6>
 8004290:	2a70      	cmp	r2, #112	; 0x70
 8004292:	d1e5      	bne.n	8004260 <_printf_i+0x30>
 8004294:	680a      	ldr	r2, [r1, #0]
 8004296:	f042 0220 	orr.w	r2, r2, #32
 800429a:	600a      	str	r2, [r1, #0]
 800429c:	e003      	b.n	80042a6 <_printf_i+0x76>
 800429e:	2a75      	cmp	r2, #117	; 0x75
 80042a0:	d021      	beq.n	80042e6 <_printf_i+0xb6>
 80042a2:	2a78      	cmp	r2, #120	; 0x78
 80042a4:	d1dc      	bne.n	8004260 <_printf_i+0x30>
 80042a6:	2278      	movs	r2, #120	; 0x78
 80042a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80042ac:	496e      	ldr	r1, [pc, #440]	; (8004468 <_printf_i+0x238>)
 80042ae:	e064      	b.n	800437a <_printf_i+0x14a>
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80042b6:	1d11      	adds	r1, r2, #4
 80042b8:	6019      	str	r1, [r3, #0]
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0a3      	b.n	800440c <_printf_i+0x1dc>
 80042c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80042c8:	f102 0104 	add.w	r1, r2, #4
 80042cc:	6019      	str	r1, [r3, #0]
 80042ce:	d0d7      	beq.n	8004280 <_printf_i+0x50>
 80042d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da03      	bge.n	80042e0 <_printf_i+0xb0>
 80042d8:	222d      	movs	r2, #45	; 0x2d
 80042da:	425b      	negs	r3, r3
 80042dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042e0:	4962      	ldr	r1, [pc, #392]	; (800446c <_printf_i+0x23c>)
 80042e2:	220a      	movs	r2, #10
 80042e4:	e017      	b.n	8004316 <_printf_i+0xe6>
 80042e6:	6820      	ldr	r0, [r4, #0]
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042ee:	d003      	beq.n	80042f8 <_printf_i+0xc8>
 80042f0:	1d08      	adds	r0, r1, #4
 80042f2:	6018      	str	r0, [r3, #0]
 80042f4:	680b      	ldr	r3, [r1, #0]
 80042f6:	e006      	b.n	8004306 <_printf_i+0xd6>
 80042f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042fc:	f101 0004 	add.w	r0, r1, #4
 8004300:	6018      	str	r0, [r3, #0]
 8004302:	d0f7      	beq.n	80042f4 <_printf_i+0xc4>
 8004304:	880b      	ldrh	r3, [r1, #0]
 8004306:	4959      	ldr	r1, [pc, #356]	; (800446c <_printf_i+0x23c>)
 8004308:	2a6f      	cmp	r2, #111	; 0x6f
 800430a:	bf14      	ite	ne
 800430c:	220a      	movne	r2, #10
 800430e:	2208      	moveq	r2, #8
 8004310:	2000      	movs	r0, #0
 8004312:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004316:	6865      	ldr	r5, [r4, #4]
 8004318:	60a5      	str	r5, [r4, #8]
 800431a:	2d00      	cmp	r5, #0
 800431c:	f2c0 809c 	blt.w	8004458 <_printf_i+0x228>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	f020 0004 	bic.w	r0, r0, #4
 8004326:	6020      	str	r0, [r4, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13f      	bne.n	80043ac <_printf_i+0x17c>
 800432c:	2d00      	cmp	r5, #0
 800432e:	f040 8095 	bne.w	800445c <_printf_i+0x22c>
 8004332:	4675      	mov	r5, lr
 8004334:	2a08      	cmp	r2, #8
 8004336:	d10b      	bne.n	8004350 <_printf_i+0x120>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	07da      	lsls	r2, r3, #31
 800433c:	d508      	bpl.n	8004350 <_printf_i+0x120>
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	6862      	ldr	r2, [r4, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	bfde      	ittt	le
 8004346:	2330      	movle	r3, #48	; 0x30
 8004348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800434c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004350:	ebae 0305 	sub.w	r3, lr, r5
 8004354:	6123      	str	r3, [r4, #16]
 8004356:	f8cd 8000 	str.w	r8, [sp]
 800435a:	463b      	mov	r3, r7
 800435c:	aa03      	add	r2, sp, #12
 800435e:	4621      	mov	r1, r4
 8004360:	4630      	mov	r0, r6
 8004362:	f7ff feef 	bl	8004144 <_printf_common>
 8004366:	3001      	adds	r0, #1
 8004368:	d155      	bne.n	8004416 <_printf_i+0x1e6>
 800436a:	f04f 30ff 	mov.w	r0, #4294967295
 800436e:	b005      	add	sp, #20
 8004370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004374:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004378:	493c      	ldr	r1, [pc, #240]	; (800446c <_printf_i+0x23c>)
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004382:	f100 0504 	add.w	r5, r0, #4
 8004386:	601d      	str	r5, [r3, #0]
 8004388:	d001      	beq.n	800438e <_printf_i+0x15e>
 800438a:	6803      	ldr	r3, [r0, #0]
 800438c:	e002      	b.n	8004394 <_printf_i+0x164>
 800438e:	0655      	lsls	r5, r2, #25
 8004390:	d5fb      	bpl.n	800438a <_printf_i+0x15a>
 8004392:	8803      	ldrh	r3, [r0, #0]
 8004394:	07d0      	lsls	r0, r2, #31
 8004396:	bf44      	itt	mi
 8004398:	f042 0220 	orrmi.w	r2, r2, #32
 800439c:	6022      	strmi	r2, [r4, #0]
 800439e:	b91b      	cbnz	r3, 80043a8 <_printf_i+0x178>
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	f022 0220 	bic.w	r2, r2, #32
 80043a6:	6022      	str	r2, [r4, #0]
 80043a8:	2210      	movs	r2, #16
 80043aa:	e7b1      	b.n	8004310 <_printf_i+0xe0>
 80043ac:	4675      	mov	r5, lr
 80043ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80043b2:	fb02 3310 	mls	r3, r2, r0, r3
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043bc:	4603      	mov	r3, r0
 80043be:	2800      	cmp	r0, #0
 80043c0:	d1f5      	bne.n	80043ae <_printf_i+0x17e>
 80043c2:	e7b7      	b.n	8004334 <_printf_i+0x104>
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	6949      	ldr	r1, [r1, #20]
 80043ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80043ce:	d004      	beq.n	80043da <_printf_i+0x1aa>
 80043d0:	1d10      	adds	r0, r2, #4
 80043d2:	6018      	str	r0, [r3, #0]
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	6019      	str	r1, [r3, #0]
 80043d8:	e007      	b.n	80043ea <_printf_i+0x1ba>
 80043da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043de:	f102 0004 	add.w	r0, r2, #4
 80043e2:	6018      	str	r0, [r3, #0]
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	d0f6      	beq.n	80043d6 <_printf_i+0x1a6>
 80043e8:	8019      	strh	r1, [r3, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	4675      	mov	r5, lr
 80043f0:	e7b1      	b.n	8004356 <_printf_i+0x126>
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	1d11      	adds	r1, r2, #4
 80043f6:	6019      	str	r1, [r3, #0]
 80043f8:	6815      	ldr	r5, [r2, #0]
 80043fa:	6862      	ldr	r2, [r4, #4]
 80043fc:	2100      	movs	r1, #0
 80043fe:	4628      	mov	r0, r5
 8004400:	f7fb ff26 	bl	8000250 <memchr>
 8004404:	b108      	cbz	r0, 800440a <_printf_i+0x1da>
 8004406:	1b40      	subs	r0, r0, r5
 8004408:	6060      	str	r0, [r4, #4]
 800440a:	6863      	ldr	r3, [r4, #4]
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	2300      	movs	r3, #0
 8004410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004414:	e79f      	b.n	8004356 <_printf_i+0x126>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	462a      	mov	r2, r5
 800441a:	4639      	mov	r1, r7
 800441c:	4630      	mov	r0, r6
 800441e:	47c0      	blx	r8
 8004420:	3001      	adds	r0, #1
 8004422:	d0a2      	beq.n	800436a <_printf_i+0x13a>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	079b      	lsls	r3, r3, #30
 8004428:	d507      	bpl.n	800443a <_printf_i+0x20a>
 800442a:	2500      	movs	r5, #0
 800442c:	f104 0919 	add.w	r9, r4, #25
 8004430:	68e3      	ldr	r3, [r4, #12]
 8004432:	9a03      	ldr	r2, [sp, #12]
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	429d      	cmp	r5, r3
 8004438:	db05      	blt.n	8004446 <_printf_i+0x216>
 800443a:	68e0      	ldr	r0, [r4, #12]
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	4298      	cmp	r0, r3
 8004440:	bfb8      	it	lt
 8004442:	4618      	movlt	r0, r3
 8004444:	e793      	b.n	800436e <_printf_i+0x13e>
 8004446:	2301      	movs	r3, #1
 8004448:	464a      	mov	r2, r9
 800444a:	4639      	mov	r1, r7
 800444c:	4630      	mov	r0, r6
 800444e:	47c0      	blx	r8
 8004450:	3001      	adds	r0, #1
 8004452:	d08a      	beq.n	800436a <_printf_i+0x13a>
 8004454:	3501      	adds	r5, #1
 8004456:	e7eb      	b.n	8004430 <_printf_i+0x200>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1a7      	bne.n	80043ac <_printf_i+0x17c>
 800445c:	780b      	ldrb	r3, [r1, #0]
 800445e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004466:	e765      	b.n	8004334 <_printf_i+0x104>
 8004468:	08004718 	.word	0x08004718
 800446c:	08004707 	.word	0x08004707

08004470 <_sbrk_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4c06      	ldr	r4, [pc, #24]	; (800448c <_sbrk_r+0x1c>)
 8004474:	2300      	movs	r3, #0
 8004476:	4605      	mov	r5, r0
 8004478:	4608      	mov	r0, r1
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	f7fc fd9a 	bl	8000fb4 <_sbrk>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_sbrk_r+0x1a>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	b103      	cbz	r3, 800448a <_sbrk_r+0x1a>
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	20020fc0 	.word	0x20020fc0

08004490 <__ascii_wctomb>:
 8004490:	b149      	cbz	r1, 80044a6 <__ascii_wctomb+0x16>
 8004492:	2aff      	cmp	r2, #255	; 0xff
 8004494:	bf85      	ittet	hi
 8004496:	238a      	movhi	r3, #138	; 0x8a
 8004498:	6003      	strhi	r3, [r0, #0]
 800449a:	700a      	strbls	r2, [r1, #0]
 800449c:	f04f 30ff 	movhi.w	r0, #4294967295
 80044a0:	bf98      	it	ls
 80044a2:	2001      	movls	r0, #1
 80044a4:	4770      	bx	lr
 80044a6:	4608      	mov	r0, r1
 80044a8:	4770      	bx	lr

080044aa <memcpy>:
 80044aa:	b510      	push	{r4, lr}
 80044ac:	1e43      	subs	r3, r0, #1
 80044ae:	440a      	add	r2, r1
 80044b0:	4291      	cmp	r1, r2
 80044b2:	d100      	bne.n	80044b6 <memcpy+0xc>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044be:	e7f7      	b.n	80044b0 <memcpy+0x6>

080044c0 <memmove>:
 80044c0:	4288      	cmp	r0, r1
 80044c2:	b510      	push	{r4, lr}
 80044c4:	eb01 0302 	add.w	r3, r1, r2
 80044c8:	d803      	bhi.n	80044d2 <memmove+0x12>
 80044ca:	1e42      	subs	r2, r0, #1
 80044cc:	4299      	cmp	r1, r3
 80044ce:	d10c      	bne.n	80044ea <memmove+0x2a>
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	4298      	cmp	r0, r3
 80044d4:	d2f9      	bcs.n	80044ca <memmove+0xa>
 80044d6:	1881      	adds	r1, r0, r2
 80044d8:	1ad2      	subs	r2, r2, r3
 80044da:	42d3      	cmn	r3, r2
 80044dc:	d100      	bne.n	80044e0 <memmove+0x20>
 80044de:	bd10      	pop	{r4, pc}
 80044e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044e8:	e7f7      	b.n	80044da <memmove+0x1a>
 80044ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044f2:	e7eb      	b.n	80044cc <memmove+0xc>

080044f4 <__malloc_lock>:
 80044f4:	4770      	bx	lr

080044f6 <__malloc_unlock>:
 80044f6:	4770      	bx	lr

080044f8 <_realloc_r>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	4607      	mov	r7, r0
 80044fc:	4614      	mov	r4, r2
 80044fe:	460e      	mov	r6, r1
 8004500:	b921      	cbnz	r1, 800450c <_realloc_r+0x14>
 8004502:	4611      	mov	r1, r2
 8004504:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004508:	f7ff bc6e 	b.w	8003de8 <_malloc_r>
 800450c:	b922      	cbnz	r2, 8004518 <_realloc_r+0x20>
 800450e:	f7ff fc1d 	bl	8003d4c <_free_r>
 8004512:	4625      	mov	r5, r4
 8004514:	4628      	mov	r0, r5
 8004516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004518:	f000 f814 	bl	8004544 <_malloc_usable_size_r>
 800451c:	4284      	cmp	r4, r0
 800451e:	d90f      	bls.n	8004540 <_realloc_r+0x48>
 8004520:	4621      	mov	r1, r4
 8004522:	4638      	mov	r0, r7
 8004524:	f7ff fc60 	bl	8003de8 <_malloc_r>
 8004528:	4605      	mov	r5, r0
 800452a:	2800      	cmp	r0, #0
 800452c:	d0f2      	beq.n	8004514 <_realloc_r+0x1c>
 800452e:	4631      	mov	r1, r6
 8004530:	4622      	mov	r2, r4
 8004532:	f7ff ffba 	bl	80044aa <memcpy>
 8004536:	4631      	mov	r1, r6
 8004538:	4638      	mov	r0, r7
 800453a:	f7ff fc07 	bl	8003d4c <_free_r>
 800453e:	e7e9      	b.n	8004514 <_realloc_r+0x1c>
 8004540:	4635      	mov	r5, r6
 8004542:	e7e7      	b.n	8004514 <_realloc_r+0x1c>

08004544 <_malloc_usable_size_r>:
 8004544:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004548:	2800      	cmp	r0, #0
 800454a:	f1a0 0004 	sub.w	r0, r0, #4
 800454e:	bfbc      	itt	lt
 8004550:	580b      	ldrlt	r3, [r1, r0]
 8004552:	18c0      	addlt	r0, r0, r3
 8004554:	4770      	bx	lr
	...

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
