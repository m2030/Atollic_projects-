
f767_http_Rtaos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003040  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4f4  0800f4f4  0001f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f4fc  0800f4fc  0001f4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f500  0800f500  0001f500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20020000  0800f504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  0002007c  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  0002007c  2**0
                  CONTENTS
  9 .bss          0000aec8  2002007c  2002007c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  2002af44  2002af44  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a5f4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000090c5  00000000  00000000  0006a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001868a  00000000  00000000  00073765  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001bc8  00000000  00000000  0008bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002bb0  00000000  00000000  0008d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013faa  00000000  00000000  00090568  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aabf  00000000  00000000  000a4512  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  000aefd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  000af050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2002007c 	.word	0x2002007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c49c 	.word	0x0800c49c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20020080 	.word	0x20020080
 800023c:	0800c49c 	.word	0x0800c49c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000622:	2003      	movs	r0, #3
 8000624:	f000 f82c 	bl	8000680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000628:	2000      	movs	r0, #0
 800062a:	f00a fecf 	bl	800b3cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f00a fe79 	bl	800b324 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000632:	2000      	movs	r0, #0
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <HAL_IncTick+0x10>)
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_IncTick+0x14>)
 800063c:	6811      	ldr	r1, [r2, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	440b      	add	r3, r1
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	2002461c 	.word	0x2002461c
 800064c:	20020000 	.word	0x20020000

08000650 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <HAL_GetTick+0x8>)
 8000652:	6818      	ldr	r0, [r3, #0]
}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	2002461c 	.word	0x2002461c

0800065c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800065c:	b538      	push	{r3, r4, r5, lr}
 800065e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff fff6 	bl	8000650 <HAL_GetTick>
 8000664:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000668:	bf1e      	ittt	ne
 800066a:	4b04      	ldrne	r3, [pc, #16]	; (800067c <HAL_Delay+0x20>)
 800066c:	781b      	ldrbne	r3, [r3, #0]
 800066e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	1b40      	subs	r0, r0, r5
 8000676:	4284      	cmp	r4, r0
 8000678:	d8fa      	bhi.n	8000670 <HAL_Delay+0x14>
  {
  }
}
 800067a:	bd38      	pop	{r3, r4, r5, pc}
 800067c:	20020000 	.word	0x20020000

08000680 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000682:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000686:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800068e:	041b      	lsls	r3, r3, #16
 8000690:	0c1b      	lsrs	r3, r3, #16
 8000692:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800069a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800069c:	60d3      	str	r3, [r2, #12]
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	68dc      	ldr	r4, [r3, #12]
 80006aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	bf28      	it	cs
 80006b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80006d0:	ea01 0103 	and.w	r1, r1, r3
 80006d4:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d8:	fa05 f404 	lsl.w	r4, r5, r4
 80006dc:	f104 34ff 	add.w	r4, r4, #4294967295
 80006e0:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	ea42 0201 	orr.w	r2, r2, r1
 80006e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006ec:	db07      	blt.n	80006fe <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006f8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006fc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	f000 000f 	and.w	r0, r0, #15
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_NVIC_SetPriority+0x6c>)
 8000706:	541a      	strb	r2, [r3, r0]
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	e000ed14 	.word	0xe000ed14

08000714 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000714:	2800      	cmp	r0, #0
 8000716:	db08      	blt.n	800072a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000718:	0942      	lsrs	r2, r0, #5
 800071a:	2301      	movs	r3, #1
 800071c:	f000 001f 	and.w	r0, r0, #31
 8000720:	fa03 f000 	lsl.w	r0, r3, r0
 8000724:	4b01      	ldr	r3, [pc, #4]	; (800072c <HAL_NVIC_EnableIRQ+0x18>)
 8000726:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100

08000730 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8000730:	2300      	movs	r3, #0
{
 8000732:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000734:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8000738:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800073a:	6803      	ldr	r3, [r0, #0]
{
 800073c:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800073e:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000740:	591a      	ldr	r2, [r3, r4]
 8000742:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000746:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000748:	591b      	ldr	r3, [r3, r4]
 800074a:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800074c:	f7ff ff86 	bl	800065c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	9a01      	ldr	r2, [sp, #4]
 8000754:	511a      	str	r2, [r3, r4]
}
 8000756:	b003      	add	sp, #12
 8000758:	bd30      	pop	{r4, r5, pc}
	...

0800075c <ETH_MACDMAConfig>:
{
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000760:	b129      	cbz	r1, 800076e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000766:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800076c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800076e:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8000770:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000772:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000774:	68e0      	ldr	r0, [r4, #12]
 8000776:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000778:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800077a:	bf08      	it	eq
 800077c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000780:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000784:	482e      	ldr	r0, [pc, #184]	; (8000840 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000786:	bf18      	it	ne
 8000788:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800078a:	4028      	ands	r0, r5
 800078c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000790:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000792:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000794:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000796:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000798:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800079a:	f7ff ff5f 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800079e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007a0:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a2:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80007a4:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007a6:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80007a8:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007aa:	f7ff ff57 	bl	800065c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80007ae:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80007b2:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007b4:	2500      	movs	r5, #0
 80007b6:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007b8:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80007ba:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80007bc:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007c0:	0412      	lsls	r2, r2, #16
 80007c2:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007c8:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80007ca:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007cc:	f7ff ff46 	bl	800065c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80007d0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80007d4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007d6:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80007d8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007da:	f7ff ff3f 	bl	800065c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80007de:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80007e4:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80007e6:	f241 0518 	movw	r5, #4120	; 0x1018
 80007ea:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007ec:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007ee:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007f2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80007f6:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80007f8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007fa:	f7ff ff2f 	bl	800065c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80007fe:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000800:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000804:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080a:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800080c:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800080e:	f7ff ff25 	bl	800065c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000812:	6822      	ldr	r2, [r4, #0]
 8000814:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000818:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800081a:	69a3      	ldr	r3, [r4, #24]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d107      	bne.n	8000830 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000820:	f241 011c 	movw	r1, #4124	; 0x101c
 8000824:	5853      	ldr	r3, [r2, r1]
 8000826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800082a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082e:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000830:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000832:	4a06      	ldr	r2, [pc, #24]	; (800084c <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000834:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000836:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000838:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <ETH_MACDMAConfig+0xf4>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	ff20810f 	.word	0xff20810f
 8000844:	f8de3f23 	.word	0xf8de3f23
 8000848:	02c12080 	.word	0x02c12080
 800084c:	40028040 	.word	0x40028040
 8000850:	40028044 	.word	0x40028044

08000854 <HAL_ETH_DMATxDescListInit>:
{
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000856:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800085a:	2c01      	cmp	r4, #1
 800085c:	f04f 0402 	mov.w	r4, #2
 8000860:	d033      	beq.n	80008ca <HAL_ETH_DMATxDescListInit+0x76>
 8000862:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000864:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000868:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 800086c:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000870:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000874:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000878:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 800087a:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 800087e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000880:	429d      	cmp	r5, r3
 8000882:	d10b      	bne.n	800089c <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000884:	6802      	ldr	r2, [r0, #0]
 8000886:	f241 0310 	movw	r3, #4112	; 0x1010
 800088a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800088c:	2301      	movs	r3, #1
 800088e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000892:	2300      	movs	r3, #0
 8000894:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000898:	4618      	mov	r0, r3
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800089c:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008a0:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008a4:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008a8:	69c6      	ldr	r6, [r0, #28]
 80008aa:	b92e      	cbnz	r6, 80008b8 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008ac:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80008b0:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008b4:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80008b8:	4565      	cmp	r5, ip
 80008ba:	bf2c      	ite	cs
 80008bc:	460e      	movcs	r6, r1
 80008be:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 80008c0:	3501      	adds	r5, #1
 80008c2:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80008c4:	f844 6c34 	str.w	r6, [r4, #-52]
 80008c8:	e7da      	b.n	8000880 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80008ca:	4620      	mov	r0, r4
}
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ce <HAL_ETH_DMARxDescListInit>:
{
 80008ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80008d2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008d6:	2c01      	cmp	r4, #1
 80008d8:	f04f 0402 	mov.w	r4, #2
 80008dc:	d030      	beq.n	8000940 <HAL_ETH_DMARxDescListInit+0x72>
 80008de:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80008e0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80008e8:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80008ec:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008f0:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80008f4:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008f6:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80008fa:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 80008fe:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8000900:	429d      	cmp	r5, r3
 8000902:	d10c      	bne.n	800091e <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000904:	6802      	ldr	r2, [r0, #0]
 8000906:	f241 030c 	movw	r3, #4108	; 0x100c
 800090a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800090c:	2301      	movs	r3, #1
 800090e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000912:	2300      	movs	r3, #0
 8000914:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000918:	4618      	mov	r0, r3
 800091a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800091e:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000922:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000926:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800092a:	4565      	cmp	r5, ip
 800092c:	bf2c      	ite	cs
 800092e:	4688      	movcs	r8, r1
 8000930:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000932:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 8000936:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000938:	f844 8c14 	str.w	r8, [r4, #-20]
 800093c:	3420      	adds	r4, #32
 800093e:	e7df      	b.n	8000900 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000940:	4620      	mov	r0, r4
}
 8000942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000948 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000948:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800094c:	2b01      	cmp	r3, #1
 800094e:	f04f 0302 	mov.w	r3, #2
{
 8000952:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000954:	d066      	beq.n	8000a24 <HAL_ETH_TransmitFrame+0xdc>
 8000956:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000958:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800095c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000960:	b929      	cbnz	r1, 800096e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000962:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000966:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800096a:	4610      	mov	r0, r2
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800096e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000970:	681c      	ldr	r4, [r3, #0]
 8000972:	2c00      	cmp	r4, #0
 8000974:	da06      	bge.n	8000984 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000976:	2312      	movs	r3, #18
 8000978:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800097c:	2300      	movs	r3, #0
 800097e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000982:	e7f2      	b.n	800096a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000984:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000988:	42a1      	cmp	r1, r4
 800098a:	d92c      	bls.n	80009e6 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800098c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000990:	fb04 1412 	mls	r4, r4, r2, r1
 8000994:	b32c      	cbz	r4, 80009e2 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000996:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000998:	4c23      	ldr	r4, [pc, #140]	; (8000a28 <HAL_ETH_TransmitFrame+0xe0>)
 800099a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800099e:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 80009a2:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80009a4:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009a8:	2400      	movs	r4, #0
 80009aa:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80009ae:	681d      	ldr	r5, [r3, #0]
 80009b0:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80009b4:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 80009b6:	b91c      	cbnz	r4, 80009c0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009b8:	681d      	ldr	r5, [r3, #0]
 80009ba:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80009be:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 80009c0:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009c2:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80009c4:	d104      	bne.n	80009d0 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009c6:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009c8:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80009ce:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009d0:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 80009d2:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009d4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80009d8:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009da:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009dc:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80009de:	d1e6      	bne.n	80009ae <HAL_ETH_TransmitFrame+0x66>
 80009e0:	e00d      	b.n	80009fe <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d1d8      	bne.n	8000998 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009e6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009e8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009ec:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009f0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009f2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009fa:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a00:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a04:	6803      	ldr	r3, [r0, #0]
 8000a06:	5899      	ldr	r1, [r3, r2]
 8000a08:	0749      	lsls	r1, r1, #29
 8000a0a:	d505      	bpl.n	8000a18 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000a10:	2100      	movs	r1, #0
 8000a12:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a16:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a24:	4618      	mov	r0, r3
}
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a28:	fffffa0c 	.word	0xfffffa0c

08000a2c <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a2c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	f04f 0302 	mov.w	r3, #2
{
 8000a36:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000a38:	d03b      	beq.n	8000ab2 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000a3a:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a3c:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8000a3e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000a42:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000a44:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	db01      	blt.n	8000a54 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a50:	3c01      	subs	r4, #1
 8000a52:	d106      	bne.n	8000a62 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a54:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a56:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a58:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a5c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a60:	e027      	b.n	8000ab2 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68dd      	ldr	r5, [r3, #12]
 8000a66:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a6a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a6e:	d103      	bne.n	8000a78 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a70:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000a72:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a74:	6285      	str	r5, [r0, #40]	; 0x28
 8000a76:	e7e7      	b.n	8000a48 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a7e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a80:	d102      	bne.n	8000a88 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000a82:	3201      	adds	r2, #1
 8000a84:	6382      	str	r2, [r0, #56]	; 0x38
 8000a86:	e7f5      	b.n	8000a74 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000a88:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a8a:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000a8c:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8000a8e:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a90:	bf08      	it	eq
 8000a92:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000aa0:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000aa2:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000aa4:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000aac:	2300      	movs	r3, #0
 8000aae:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd30      	pop	{r4, r5, pc}

08000ab6 <HAL_ETH_TxCpltCallback>:
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_ETH_ErrorCallback>:
{
 8000ab8:	4770      	bx	lr

08000aba <HAL_ETH_IRQHandler>:
{
 8000aba:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000abc:	6802      	ldr	r2, [r0, #0]
 8000abe:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000ac2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000ac4:	5995      	ldr	r5, [r2, r6]
 8000ac6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000aca:	d021      	beq.n	8000b10 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000acc:	f00a f9c0 	bl	800ae50 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000adc:	2300      	movs	r3, #0
 8000ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	f241 0514 	movw	r5, #4116	; 0x1014
 8000ae8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aec:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000aee:	595b      	ldr	r3, [r3, r5]
 8000af0:	041b      	lsls	r3, r3, #16
 8000af2:	d50c      	bpl.n	8000b0e <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000af4:	4620      	mov	r0, r4
 8000af6:	f7ff ffdf 	bl	8000ab8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b00:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000b10:	5993      	ldr	r3, [r2, r6]
 8000b12:	07da      	lsls	r2, r3, #31
 8000b14:	d5e5      	bpl.n	8000ae2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000b16:	f7ff ffce 	bl	8000ab6 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	6822      	ldr	r2, [r4, #0]
 8000b1e:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000b20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b24:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000b28:	e7db      	b.n	8000ae2 <HAL_ETH_IRQHandler+0x28>

08000b2a <HAL_ETH_ReadPHYRegister>:
{
 8000b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b2c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b30:	4605      	mov	r5, r0
 8000b32:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b34:	2b82      	cmp	r3, #130	; 0x82
 8000b36:	d030      	beq.n	8000b9a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000b38:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b3a:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b3c:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b3e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000b42:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b44:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b48:	f003 011c 	and.w	r1, r3, #28
 8000b4c:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b4e:	8a04      	ldrh	r4, [r0, #16]
 8000b50:	02e4      	lsls	r4, r4, #11
 8000b52:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b54:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b56:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b5a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b5c:	f7ff fd78 	bl	8000650 <HAL_GetTick>
 8000b60:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b62:	f014 0001 	ands.w	r0, r4, #1
 8000b66:	d107      	bne.n	8000b78 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b78:	f7ff fd6a 	bl	8000650 <HAL_GetTick>
 8000b7c:	1bc0      	subs	r0, r0, r7
 8000b7e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b82:	d307      	bcc.n	8000b94 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b84:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000b86:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000b88:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	691c      	ldr	r4, [r3, #16]
 8000b98:	e7e3      	b.n	8000b62 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b9a:	2002      	movs	r0, #2
}
 8000b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b9e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b9e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ba2:	2b42      	cmp	r3, #66	; 0x42
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000ba8:	d02e      	beq.n	8000c08 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000baa:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bac:	018c      	lsls	r4, r1, #6
 8000bae:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000bb0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bb4:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000bb8:	6803      	ldr	r3, [r0, #0]
 8000bba:	f044 0403 	orr.w	r4, r4, #3
 8000bbe:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bc0:	f000 001c 	and.w	r0, r0, #28
 8000bc4:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bc6:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000bc8:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bca:	02e4      	lsls	r4, r4, #11
 8000bcc:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000bce:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000bd0:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000bd2:	f7ff fd3d 	bl	8000650 <HAL_GetTick>
 8000bd6:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bd8:	f014 0001 	ands.w	r0, r4, #1
 8000bdc:	d103      	bne.n	8000be6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000be6:	f7ff fd33 	bl	8000650 <HAL_GetTick>
 8000bea:	1b80      	subs	r0, r0, r6
 8000bec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bf0:	d307      	bcc.n	8000c02 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bf2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bf4:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bf6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	691c      	ldr	r4, [r3, #16]
 8000c06:	e7e7      	b.n	8000bd8 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000c08:	2002      	movs	r0, #2
}
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}

08000c0c <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000c0c:	2300      	movs	r3, #0
{
 8000c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000c10:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000c12:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000c14:	2800      	cmp	r0, #0
 8000c16:	f000 80dc 	beq.w	8000dd2 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c1a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c22:	b91b      	cbnz	r3, 8000c2c <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c24:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c28:	f00a f884 	bl	800ad34 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2c:	4b6a      	ldr	r3, [pc, #424]	; (8000dd8 <HAL_ETH_Init+0x1cc>)
 8000c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c34:	645a      	str	r2, [r3, #68]	; 0x44
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c40:	4b66      	ldr	r3, [pc, #408]	; (8000ddc <HAL_ETH_Init+0x1d0>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c48:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	6a21      	ldr	r1, [r4, #32]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f042 0201 	orr.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c60:	f7ff fcf6 	bl	8000650 <HAL_GetTick>
 8000c64:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c6c:	6812      	ldr	r2, [r2, #0]
 8000c6e:	07d0      	lsls	r0, r2, #31
 8000c70:	d41d      	bmi.n	8000cae <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000c72:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c74:	f000 fcc4 	bl	8001600 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c78:	4b59      	ldr	r3, [pc, #356]	; (8000de0 <HAL_ETH_Init+0x1d4>)
 8000c7a:	4a5a      	ldr	r2, [pc, #360]	; (8000de4 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000c7c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c80:	4403      	add	r3, r0
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d822      	bhi.n	8000ccc <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c86:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c8a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c90:	2100      	movs	r1, #0
 8000c92:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c94:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c96:	f7ff ff82 	bl	8000b9e <HAL_ETH_WritePHYRegister>
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	b368      	cbz	r0, 8000cfa <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000c9e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff fd5a 	bl	800075c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000ca8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000cac:	e00b      	b.n	8000cc6 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cae:	f7ff fccf 	bl	8000650 <HAL_GetTick>
 8000cb2:	1b40      	subs	r0, r0, r5
 8000cb4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cb8:	d9d5      	bls.n	8000c66 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cba:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000cbc:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cbe:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	b003      	add	sp, #12
 8000cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000ccc:	4b46      	ldr	r3, [pc, #280]	; (8000de8 <HAL_ETH_Init+0x1dc>)
 8000cce:	4a47      	ldr	r2, [pc, #284]	; (8000dec <HAL_ETH_Init+0x1e0>)
 8000cd0:	4403      	add	r3, r0
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d802      	bhi.n	8000cdc <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cd6:	f045 050c 	orr.w	r5, r5, #12
 8000cda:	e7d6      	b.n	8000c8a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000cdc:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <HAL_ETH_Init+0x1e4>)
 8000cde:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_ETH_Init+0x1e8>)
 8000ce0:	4403      	add	r3, r0
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d9d1      	bls.n	8000c8a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000ce6:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <HAL_ETH_Init+0x1ec>)
 8000ce8:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <HAL_ETH_Init+0x1f0>)
 8000cea:	4403      	add	r3, r0
 8000cec:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cee:	bf94      	ite	ls
 8000cf0:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cf4:	f045 0510 	orrhi.w	r5, r5, #16
 8000cf8:	e7c7      	b.n	8000c8a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000cfa:	20ff      	movs	r0, #255	; 0xff
 8000cfc:	f7ff fcae 	bl	800065c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d00:	6863      	ldr	r3, [r4, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d053      	beq.n	8000dae <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000d06:	f7ff fca3 	bl	8000650 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d0a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d0e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d10:	466a      	mov	r2, sp
 8000d12:	2101      	movs	r1, #1
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff ff08 	bl	8000b2a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d1a:	f7ff fc99 	bl	8000650 <HAL_GetTick>
 8000d1e:	1b80      	subs	r0, r0, r6
 8000d20:	42b8      	cmp	r0, r7
 8000d22:	d90b      	bls.n	8000d3c <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d24:	2101      	movs	r1, #1
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff fd18 	bl	800075c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d2c:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d2e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d34:	2300      	movs	r3, #0
 8000d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d3a:	e7c4      	b.n	8000cc6 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d3c:	9b00      	ldr	r3, [sp, #0]
 8000d3e:	0759      	lsls	r1, r3, #29
 8000d40:	d5e6      	bpl.n	8000d10 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d46:	2100      	movs	r1, #0
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff ff28 	bl	8000b9e <HAL_ETH_WritePHYRegister>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d1a5      	bne.n	8000c9e <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d52:	f7ff fc7d 	bl	8000650 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d56:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d5a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d5c:	466a      	mov	r2, sp
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff fee2 	bl	8000b2a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d66:	f7ff fc73 	bl	8000650 <HAL_GetTick>
 8000d6a:	1b80      	subs	r0, r0, r6
 8000d6c:	42b8      	cmp	r0, r7
 8000d6e:	d8d9      	bhi.n	8000d24 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	069a      	lsls	r2, r3, #26
 8000d74:	d5f2      	bpl.n	8000d5c <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d76:	466a      	mov	r2, sp
 8000d78:	211f      	movs	r1, #31
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fed5 	bl	8000b2a <HAL_ETH_ReadPHYRegister>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d18c      	bne.n	8000c9e <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d84:	9b00      	ldr	r3, [sp, #0]
 8000d86:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d8a:	bf18      	it	ne
 8000d8c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d90:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d92:	bf4c      	ite	mi
 8000d94:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d96:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d9a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d9c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4620      	mov	r0, r4
 8000da2:	f7ff fcdb 	bl	800075c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000dac:	e78b      	b.n	8000cc6 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000dae:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000db0:	4629      	mov	r1, r5
 8000db2:	68e2      	ldr	r2, [r4, #12]
 8000db4:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000db6:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000db8:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000dbc:	b292      	uxth	r2, r2
 8000dbe:	f7ff feee 	bl	8000b9e <HAL_ETH_WritePHYRegister>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	f47f af6b 	bne.w	8000c9e <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000dc8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000dcc:	f7ff fc46 	bl	800065c <HAL_Delay>
 8000dd0:	e7e5      	b.n	8000d9e <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000dd2:	2501      	movs	r5, #1
 8000dd4:	e777      	b.n	8000cc6 <HAL_ETH_Init+0xba>
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	feced300 	.word	0xfeced300
 8000de4:	00e4e1bf 	.word	0x00e4e1bf
 8000de8:	fde9f140 	.word	0xfde9f140
 8000dec:	017d783f 	.word	0x017d783f
 8000df0:	fc6c7900 	.word	0xfc6c7900
 8000df4:	026259ff 	.word	0x026259ff
 8000df8:	fa0a1f00 	.word	0xfa0a1f00
 8000dfc:	02faf07f 	.word	0x02faf07f

08000e00 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000e00:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000e04:	2b01      	cmp	r3, #1
{  
 8000e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e08:	4605      	mov	r5, r0
 8000e0a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000e0e:	d033      	beq.n	8000e78 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000e10:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e12:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000e14:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000e18:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000e1a:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e1c:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e1e:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000e20:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e24:	f042 0208 	orr.w	r2, r2, #8
 8000e28:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e2e:	f7ff fc15 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e32:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e34:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000e36:	682b      	ldr	r3, [r5, #0]
 8000e38:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000e3a:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f042 0204 	orr.w	r2, r2, #4
 8000e42:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e48:	f7ff fc08 	bl	800065c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e4c:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e4e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000e50:	9a00      	ldr	r2, [sp, #0]
 8000e52:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e54:	f7ff fc6c 	bl	8000730 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e58:	682a      	ldr	r2, [r5, #0]
 8000e5a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e5e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e60:	58d1      	ldr	r1, [r2, r3]
 8000e62:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e66:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e68:	58d1      	ldr	r1, [r2, r3]
 8000e6a:	f041 0102 	orr.w	r1, r1, #2
 8000e6e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e70:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e74:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e80:	680b      	ldr	r3, [r1, #0]
{
 8000e82:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001048 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e88:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4a6c      	ldr	r2, [pc, #432]	; (8001040 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e8e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800104c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000e92:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e94:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000e96:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e98:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e9a:	42ac      	cmp	r4, r5
 8000e9c:	f040 80b6 	bne.w	800100c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea0:	684c      	ldr	r4, [r1, #4]
 8000ea2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ea6:	f024 0c10 	bic.w	ip, r4, #16
 8000eaa:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000eae:	2e01      	cmp	r6, #1
 8000eb0:	d812      	bhi.n	8000ed8 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb2:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000eb4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000eba:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ebe:	68ce      	ldr	r6, [r1, #12]
 8000ec0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ec4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ec6:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ec8:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000ecc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ece:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ed4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ed6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ed8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000eda:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000edc:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ee0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ee4:	ea6f 0606 	mvn.w	r6, r6
 8000ee8:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eec:	688f      	ldr	r7, [r1, #8]
 8000eee:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ef2:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000ef6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	d116      	bne.n	8000f28 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000efa:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000efe:	f003 0b07 	and.w	fp, r3, #7
 8000f02:	f04f 0c0f 	mov.w	ip, #15
 8000f06:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000f0a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000f0e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f12:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f16:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f1a:	690f      	ldr	r7, [r1, #16]
 8000f1c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f20:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f24:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f28:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f2a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f2c:	f004 0703 	and.w	r7, r4, #3
 8000f30:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f34:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f38:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3a:	00e6      	lsls	r6, r4, #3
 8000f3c:	d566      	bpl.n	800100c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000f42:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f46:	f003 0e03 	and.w	lr, r3, #3
 8000f4a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000f52:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000f5e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f62:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000f66:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000f6a:	9603      	str	r6, [sp, #12]
 8000f6c:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f6e:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f72:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f76:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f7a:	4e32      	ldr	r6, [pc, #200]	; (8001044 <HAL_GPIO_Init+0x1c8>)
 8000f7c:	42b0      	cmp	r0, r6
 8000f7e:	d04c      	beq.n	800101a <HAL_GPIO_Init+0x19e>
 8000f80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f84:	42b0      	cmp	r0, r6
 8000f86:	d04a      	beq.n	800101e <HAL_GPIO_Init+0x1a2>
 8000f88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f8c:	42b0      	cmp	r0, r6
 8000f8e:	d048      	beq.n	8001022 <HAL_GPIO_Init+0x1a6>
 8000f90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f94:	42b0      	cmp	r0, r6
 8000f96:	d046      	beq.n	8001026 <HAL_GPIO_Init+0x1aa>
 8000f98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f9c:	42b0      	cmp	r0, r6
 8000f9e:	d044      	beq.n	800102a <HAL_GPIO_Init+0x1ae>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d044      	beq.n	800102e <HAL_GPIO_Init+0x1b2>
 8000fa4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000fa8:	42b0      	cmp	r0, r6
 8000faa:	d042      	beq.n	8001032 <HAL_GPIO_Init+0x1b6>
 8000fac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fb0:	42b0      	cmp	r0, r6
 8000fb2:	d040      	beq.n	8001036 <HAL_GPIO_Init+0x1ba>
 8000fb4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fb8:	42b0      	cmp	r0, r6
 8000fba:	d03e      	beq.n	800103a <HAL_GPIO_Init+0x1be>
 8000fbc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fc0:	42b0      	cmp	r0, r6
 8000fc2:	bf14      	ite	ne
 8000fc4:	260a      	movne	r6, #10
 8000fc6:	2609      	moveq	r6, #9
 8000fc8:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fcc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fd0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fd4:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000fda:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	bf0c      	ite	eq
 8000fde:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fe0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000fe6:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000fe8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	bf0c      	ite	eq
 8000fec:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fee:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000ff4:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000ff6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	bf0c      	ite	eq
 8000ffa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000ffc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ffe:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001000:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001002:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001004:	bf54      	ite	pl
 8001006:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001008:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800100a:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800100c:	3301      	adds	r3, #1
 800100e:	2b10      	cmp	r3, #16
 8001010:	f47f af3f 	bne.w	8000e92 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001014:	b005      	add	sp, #20
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800101a:	2600      	movs	r6, #0
 800101c:	e7d4      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 800101e:	2601      	movs	r6, #1
 8001020:	e7d2      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 8001022:	2602      	movs	r6, #2
 8001024:	e7d0      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 8001026:	2603      	movs	r6, #3
 8001028:	e7ce      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 800102a:	2604      	movs	r6, #4
 800102c:	e7cc      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 800102e:	2605      	movs	r6, #5
 8001030:	e7ca      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 8001032:	2606      	movs	r6, #6
 8001034:	e7c8      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 8001036:	2607      	movs	r6, #7
 8001038:	e7c6      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 800103a:	2608      	movs	r6, #8
 800103c:	e7c4      	b.n	8000fc8 <HAL_GPIO_Init+0x14c>
 800103e:	bf00      	nop
 8001040:	40013c00 	.word	0x40013c00
 8001044:	40020000 	.word	0x40020000
 8001048:	40023800 	.word	0x40023800
 800104c:	40021400 	.word	0x40021400

08001050 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	b10a      	cbz	r2, 8001056 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001052:	6181      	str	r1, [r0, #24]
 8001054:	4770      	bx	lr
 8001056:	0409      	lsls	r1, r1, #16
 8001058:	e7fb      	b.n	8001052 <HAL_GPIO_WritePin+0x2>
	...

0800105c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800105c:	4a02      	ldr	r2, [pc, #8]	; (8001068 <HAL_PWR_EnableBkUpAccess+0xc>)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4770      	bx	lr
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800106e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001072:	4c19      	ldr	r4, [pc, #100]	; (80010d8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800108c:	f7ff fae0 	bl	8000650 <HAL_GetTick>
 8001090:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	03da      	lsls	r2, r3, #15
 8001096:	d50c      	bpl.n	80010b2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a0:	f7ff fad6 	bl	8000650 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a4:	4c0c      	ldr	r4, [pc, #48]	; (80010d8 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80010a6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a8:	6863      	ldr	r3, [r4, #4]
 80010aa:	039b      	lsls	r3, r3, #14
 80010ac:	d50a      	bpl.n	80010c4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80010ae:	2000      	movs	r0, #0
 80010b0:	e006      	b.n	80010c0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010b2:	f7ff facd 	bl	8000650 <HAL_GetTick>
 80010b6:	1b40      	subs	r0, r0, r5
 80010b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010bc:	d9e9      	bls.n	8001092 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
}
 80010c0:	b003      	add	sp, #12
 80010c2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c4:	f7ff fac4 	bl	8000650 <HAL_GetTick>
 80010c8:	1b40      	subs	r0, r0, r5
 80010ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010ce:	d9eb      	bls.n	80010a8 <HAL_PWREx_EnableOverDrive+0x3c>
 80010d0:	e7f5      	b.n	80010be <HAL_PWREx_EnableOverDrive+0x52>
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	4604      	mov	r4, r0
 80010e2:	b908      	cbnz	r0, 80010e8 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
 80010e6:	e03f      	b.n	8001168 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	07d8      	lsls	r0, r3, #31
 80010ec:	d410      	bmi.n	8001110 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	0799      	lsls	r1, r3, #30
 80010f2:	d460      	bmi.n	80011b6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	0719      	lsls	r1, r3, #28
 80010f8:	f100 80a5 	bmi.w	8001246 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	075a      	lsls	r2, r3, #29
 8001100:	f100 80c6 	bmi.w	8001290 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001104:	69a0      	ldr	r0, [r4, #24]
 8001106:	2800      	cmp	r0, #0
 8001108:	f040 8130 	bne.w	800136c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800110c:	2000      	movs	r0, #0
 800110e:	e02b      	b.n	8001168 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001110:	4b94      	ldr	r3, [pc, #592]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	f002 020c 	and.w	r2, r2, #12
 8001118:	2a04      	cmp	r2, #4
 800111a:	d007      	beq.n	800112c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	f002 020c 	and.w	r2, r2, #12
 8001122:	2a08      	cmp	r2, #8
 8001124:	d10a      	bne.n	800113c <HAL_RCC_OscConfig+0x60>
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	025a      	lsls	r2, r3, #9
 800112a:	d507      	bpl.n	800113c <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b8d      	ldr	r3, [pc, #564]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	039b      	lsls	r3, r3, #14
 8001132:	d5dc      	bpl.n	80010ee <HAL_RCC_OscConfig+0x12>
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1d9      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
 800113a:	e7d3      	b.n	80010e4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	4d89      	ldr	r5, [pc, #548]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d113      	bne.n	800116e <HAL_RCC_OscConfig+0x92>
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800114e:	f7ff fa7f 	bl	8000650 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4d84      	ldr	r5, [pc, #528]	; (8001364 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001154:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	682b      	ldr	r3, [r5, #0]
 8001158:	039f      	lsls	r7, r3, #14
 800115a:	d4c8      	bmi.n	80010ee <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fa78 	bl	8000650 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2864      	cmp	r0, #100	; 0x64
 8001164:	d9f7      	bls.n	8001156 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
}
 8001168:	b002      	add	sp, #8
 800116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116e:	b99b      	cbnz	r3, 8001198 <HAL_RCC_OscConfig+0xbc>
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	602b      	str	r3, [r5, #0]
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001180:	f7ff fa66 	bl	8000650 <HAL_GetTick>
 8001184:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	0398      	lsls	r0, r3, #14
 800118a:	d5b0      	bpl.n	80010ee <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fa60 	bl	8000650 <HAL_GetTick>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	2864      	cmp	r0, #100	; 0x64
 8001194:	d9f7      	bls.n	8001186 <HAL_RCC_OscConfig+0xaa>
 8001196:	e7e6      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	d103      	bne.n	80011a8 <HAL_RCC_OscConfig+0xcc>
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	602b      	str	r3, [r5, #0]
 80011a6:	e7ce      	b.n	8001146 <HAL_RCC_OscConfig+0x6a>
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ac:	602b      	str	r3, [r5, #0]
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b4:	e7ca      	b.n	800114c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b6:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	f012 0f0c 	tst.w	r2, #12
 80011be:	d007      	beq.n	80011d0 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	f002 020c 	and.w	r2, r2, #12
 80011c6:	2a08      	cmp	r2, #8
 80011c8:	d111      	bne.n	80011ee <HAL_RCC_OscConfig+0x112>
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	0259      	lsls	r1, r3, #9
 80011ce:	d40e      	bmi.n	80011ee <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d0:	4b64      	ldr	r3, [pc, #400]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	0792      	lsls	r2, r2, #30
 80011d6:	d502      	bpl.n	80011de <HAL_RCC_OscConfig+0x102>
 80011d8:	68e2      	ldr	r2, [r4, #12]
 80011da:	2a01      	cmp	r2, #1
 80011dc:	d182      	bne.n	80010e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6921      	ldr	r1, [r4, #16]
 80011e2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011ea:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ec:	e782      	b.n	80010f4 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011ee:	68e3      	ldr	r3, [r4, #12]
 80011f0:	4d5c      	ldr	r5, [pc, #368]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011f2:	b1bb      	cbz	r3, 8001224 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011fc:	f7ff fa28 	bl	8000650 <HAL_GetTick>
 8001200:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	079f      	lsls	r7, r3, #30
 8001206:	d507      	bpl.n	8001218 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	6922      	ldr	r2, [r4, #16]
 800120c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001210:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001214:	602b      	str	r3, [r5, #0]
 8001216:	e76d      	b.n	80010f4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fa1a 	bl	8000650 <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	2802      	cmp	r0, #2
 8001220:	d9ef      	bls.n	8001202 <HAL_RCC_OscConfig+0x126>
 8001222:	e7a0      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800122c:	f7ff fa10 	bl	8000650 <HAL_GetTick>
 8001230:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	0798      	lsls	r0, r3, #30
 8001236:	f57f af5d 	bpl.w	80010f4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fa09 	bl	8000650 <HAL_GetTick>
 800123e:	1b80      	subs	r0, r0, r6
 8001240:	2802      	cmp	r0, #2
 8001242:	d9f6      	bls.n	8001232 <HAL_RCC_OscConfig+0x156>
 8001244:	e78f      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001246:	6963      	ldr	r3, [r4, #20]
 8001248:	4d46      	ldr	r5, [pc, #280]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800124a:	b183      	cbz	r3, 800126e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800124c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001254:	f7ff f9fc 	bl	8000650 <HAL_GetTick>
 8001258:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800125c:	079b      	lsls	r3, r3, #30
 800125e:	f53f af4d 	bmi.w	80010fc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff f9f5 	bl	8000650 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	2802      	cmp	r0, #2
 800126a:	d9f6      	bls.n	800125a <HAL_RCC_OscConfig+0x17e>
 800126c:	e77b      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800126e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001276:	f7ff f9eb 	bl	8000650 <HAL_GetTick>
 800127a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800127e:	079f      	lsls	r7, r3, #30
 8001280:	f57f af3c 	bpl.w	80010fc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff f9e4 	bl	8000650 <HAL_GetTick>
 8001288:	1b80      	subs	r0, r0, r6
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f6      	bls.n	800127c <HAL_RCC_OscConfig+0x1a0>
 800128e:	e76a      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001294:	00d0      	lsls	r0, r2, #3
 8001296:	d427      	bmi.n	80012e8 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800129a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ac:	4d2e      	ldr	r5, [pc, #184]	; (8001368 <HAL_RCC_OscConfig+0x28c>)
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	05d9      	lsls	r1, r3, #23
 80012b2:	d51b      	bpl.n	80012ec <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	68a3      	ldr	r3, [r4, #8]
 80012b6:	4d2b      	ldr	r5, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d127      	bne.n	800130c <HAL_RCC_OscConfig+0x230>
 80012bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012c8:	f7ff f9c2 	bl	8000650 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	4f25      	ldr	r7, [pc, #148]	; (8001364 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80012ce:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d2:	079b      	lsls	r3, r3, #30
 80012d4:	d53f      	bpl.n	8001356 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 80012d6:	2e00      	cmp	r6, #0
 80012d8:	f43f af14 	beq.w	8001104 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	e70d      	b.n	8001104 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 80012e8:	2600      	movs	r6, #0
 80012ea:	e7df      	b.n	80012ac <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012f4:	f7ff f9ac 	bl	8000650 <HAL_GetTick>
 80012f8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	05da      	lsls	r2, r3, #23
 80012fe:	d4d9      	bmi.n	80012b4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001300:	f7ff f9a6 	bl	8000650 <HAL_GetTick>
 8001304:	1bc0      	subs	r0, r0, r7
 8001306:	2864      	cmp	r0, #100	; 0x64
 8001308:	d9f7      	bls.n	80012fa <HAL_RCC_OscConfig+0x21e>
 800130a:	e72c      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	b9ab      	cbnz	r3, 800133a <HAL_RCC_OscConfig+0x25e>
 800130e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001310:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	672b      	str	r3, [r5, #112]	; 0x70
 800131a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001322:	f7ff f995 	bl	8000650 <HAL_GetTick>
 8001326:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001328:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132a:	0798      	lsls	r0, r3, #30
 800132c:	d5d3      	bpl.n	80012d6 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff f98f 	bl	8000650 <HAL_GetTick>
 8001332:	1bc0      	subs	r0, r0, r7
 8001334:	4540      	cmp	r0, r8
 8001336:	d9f7      	bls.n	8001328 <HAL_RCC_OscConfig+0x24c>
 8001338:	e715      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133a:	2b05      	cmp	r3, #5
 800133c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800133e:	d103      	bne.n	8001348 <HAL_RCC_OscConfig+0x26c>
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	672b      	str	r3, [r5, #112]	; 0x70
 8001346:	e7b9      	b.n	80012bc <HAL_RCC_OscConfig+0x1e0>
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	672b      	str	r3, [r5, #112]	; 0x70
 800134e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	e7b5      	b.n	80012c2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff f97b 	bl	8000650 <HAL_GetTick>
 800135a:	eba0 0008 	sub.w	r0, r0, r8
 800135e:	42a8      	cmp	r0, r5
 8001360:	d9b6      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1f4>
 8001362:	e700      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800136c:	4d3c      	ldr	r5, [pc, #240]	; (8001460 <HAL_RCC_OscConfig+0x384>)
 800136e:	68ab      	ldr	r3, [r5, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d042      	beq.n	80013fe <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001378:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800137c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001380:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001382:	d12f      	bne.n	80013e4 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8001384:	f7ff f964 	bl	8000650 <HAL_GetTick>
 8001388:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	0199      	lsls	r1, r3, #6
 800138e:	d423      	bmi.n	80013d8 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001390:	6a22      	ldr	r2, [r4, #32]
 8001392:	69e3      	ldr	r3, [r4, #28]
 8001394:	4313      	orrs	r3, r2
 8001396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001398:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800139c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800139e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	4c2d      	ldr	r4, [pc, #180]	; (8001460 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ac:	0852      	lsrs	r2, r2, #1
 80013ae:	3a01      	subs	r2, #1
 80013b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013b4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013b6:	682b      	ldr	r3, [r5, #0]
 80013b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013be:	f7ff f947 	bl	8000650 <HAL_GetTick>
 80013c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	019a      	lsls	r2, r3, #6
 80013c8:	f53f aea0 	bmi.w	800110c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff f940 	bl	8000650 <HAL_GetTick>
 80013d0:	1b40      	subs	r0, r0, r5
 80013d2:	2802      	cmp	r0, #2
 80013d4:	d9f6      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2e8>
 80013d6:	e6c6      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff f93a 	bl	8000650 <HAL_GetTick>
 80013dc:	1b80      	subs	r0, r0, r6
 80013de:	2802      	cmp	r0, #2
 80013e0:	d9d3      	bls.n	800138a <HAL_RCC_OscConfig+0x2ae>
 80013e2:	e6c0      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80013e4:	f7ff f934 	bl	8000650 <HAL_GetTick>
 80013e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	019b      	lsls	r3, r3, #6
 80013ee:	f57f ae8d 	bpl.w	800110c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff f92d 	bl	8000650 <HAL_GetTick>
 80013f6:	1b00      	subs	r0, r0, r4
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f6      	bls.n	80013ea <HAL_RCC_OscConfig+0x30e>
 80013fc:	e6b3      	b.n	8001166 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fe:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001400:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001402:	f43f aeb1 	beq.w	8001168 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140a:	69e1      	ldr	r1, [r4, #28]
 800140c:	428a      	cmp	r2, r1
 800140e:	f47f ae69 	bne.w	80010e4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	6a21      	ldr	r1, [r4, #32]
 8001418:	428a      	cmp	r2, r1
 800141a:	f47f ae63 	bne.w	80010e4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800141e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001422:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001424:	401a      	ands	r2, r3
 8001426:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800142a:	f47f ae5b 	bne.w	80010e4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800142e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001430:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001434:	0852      	lsrs	r2, r2, #1
 8001436:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001438:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800143c:	f47f ae52 	bne.w	80010e4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001440:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001444:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001446:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800144a:	f47f ae4b 	bne.w	80010e4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800144e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001450:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001454:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8001458:	bf14      	ite	ne
 800145a:	2001      	movne	r0, #1
 800145c:	2000      	moveq	r0, #0
 800145e:	e683      	b.n	8001168 <HAL_RCC_OscConfig+0x8c>
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001464:	4913      	ldr	r1, [pc, #76]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001466:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001468:	688b      	ldr	r3, [r1, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b04      	cmp	r3, #4
 8001470:	d003      	beq.n	800147a <HAL_RCC_GetSysClockFreq+0x16>
 8001472:	2b08      	cmp	r3, #8
 8001474:	d003      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001476:	4810      	ldr	r0, [pc, #64]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001478:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800147a:	4810      	ldr	r0, [pc, #64]	; (80014bc <HAL_RCC_GetSysClockFreq+0x58>)
 800147c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800147e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001480:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001482:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001484:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001488:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001490:	bf1a      	itte	ne
 8001492:	480a      	ldrne	r0, [pc, #40]	; (80014bc <HAL_RCC_GetSysClockFreq+0x58>)
 8001494:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	4808      	ldreq	r0, [pc, #32]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001498:	fba1 0100 	umull	r0, r1, r1, r0
 800149c:	f7fe ff38 	bl	8000310 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x50>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014a8:	3301      	adds	r3, #1
 80014aa:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80014ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80014b0:	bd08      	pop	{r3, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	00f42400 	.word	0x00f42400
 80014bc:	007a1200 	.word	0x007a1200

080014c0 <HAL_RCC_ClockConfig>:
{
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80014c6:	4604      	mov	r4, r0
 80014c8:	b910      	cbnz	r0, 80014d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d0:	4a46      	ldr	r2, [pc, #280]	; (80015ec <HAL_RCC_ClockConfig+0x12c>)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	428b      	cmp	r3, r1
 80014da:	d329      	bcc.n	8001530 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	6821      	ldr	r1, [r4, #0]
 80014de:	078f      	lsls	r7, r1, #30
 80014e0:	d431      	bmi.n	8001546 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	07c8      	lsls	r0, r1, #31
 80014e4:	d444      	bmi.n	8001570 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e6:	4a41      	ldr	r2, [pc, #260]	; (80015ec <HAL_RCC_ClockConfig+0x12c>)
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	429d      	cmp	r5, r3
 80014f0:	d368      	bcc.n	80015c4 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	0751      	lsls	r1, r2, #29
 80014f6:	d471      	bmi.n	80015dc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	0713      	lsls	r3, r2, #28
 80014fa:	d507      	bpl.n	800150c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fc:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
 80014fe:	6921      	ldr	r1, [r4, #16]
 8001500:	6893      	ldr	r3, [r2, #8]
 8001502:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001506:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800150a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150c:	f7ff ffaa 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
 8001512:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <HAL_RCC_ClockConfig+0x134>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	40d8      	lsrs	r0, r3
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_RCC_ClockConfig+0x138>)
 8001520:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_ClockConfig+0x13c>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f009 ff51 	bl	800b3cc <HAL_InitTick>
  return HAL_OK;
 800152a:	2000      	movs	r0, #0
 800152c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001530:	6813      	ldr	r3, [r2, #0]
 8001532:	f023 030f 	bic.w	r3, r3, #15
 8001536:	430b      	orrs	r3, r1
 8001538:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	4299      	cmp	r1, r3
 8001542:	d1c2      	bne.n	80014ca <HAL_RCC_ClockConfig+0xa>
 8001544:	e7ca      	b.n	80014dc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001546:	f011 0f04 	tst.w	r1, #4
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
 800154c:	d003      	beq.n	8001556 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001554:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001556:	070e      	lsls	r6, r1, #28
 8001558:	d503      	bpl.n	8001562 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001560:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68a0      	ldr	r0, [r4, #8]
 8001566:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800156a:	4302      	orrs	r2, r0
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	e7b8      	b.n	80014e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	6861      	ldr	r1, [r4, #4]
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
 8001574:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	d0a4      	beq.n	80014ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001580:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001582:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4e1a      	ldr	r6, [pc, #104]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001588:	f022 0203 	bic.w	r2, r2, #3
 800158c:	430a      	orrs	r2, r1
 800158e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001590:	f7ff f85e 	bl	8000650 <HAL_GetTick>
 8001594:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	68b3      	ldr	r3, [r6, #8]
 8001598:	6862      	ldr	r2, [r4, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015a2:	d0a0      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7ff f854 	bl	8000650 <HAL_GetTick>
 80015a8:	1bc0      	subs	r0, r0, r7
 80015aa:	4540      	cmp	r0, r8
 80015ac:	d9f3      	bls.n	8001596 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80015ae:	2003      	movs	r0, #3
}
 80015b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b4:	2902      	cmp	r1, #2
 80015b6:	d102      	bne.n	80015be <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015bc:	e7df      	b.n	800157e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	f012 0f02 	tst.w	r2, #2
 80015c2:	e7dc      	b.n	800157e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f023 030f 	bic.w	r3, r3, #15
 80015ca:	432b      	orrs	r3, r5
 80015cc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	6813      	ldr	r3, [r2, #0]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	429d      	cmp	r5, r3
 80015d6:	f47f af78 	bne.w	80014ca <HAL_RCC_ClockConfig+0xa>
 80015da:	e78a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4904      	ldr	r1, [pc, #16]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
 80015de:	68e0      	ldr	r0, [r4, #12]
 80015e0:	688b      	ldr	r3, [r1, #8]
 80015e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015e6:	4303      	orrs	r3, r0
 80015e8:	608b      	str	r3, [r1, #8]
 80015ea:	e785      	b.n	80014f8 <HAL_RCC_ClockConfig+0x38>
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	0800f442 	.word	0x0800f442
 80015f8:	20020014 	.word	0x20020014
 80015fc:	20020004 	.word	0x20020004

08001600 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <HAL_RCC_GetHCLKFreq+0x8>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20020014 	.word	0x20020014

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x14>)
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800161a:	6810      	ldr	r0, [r2, #0]
}
 800161c:	40d8      	lsrs	r0, r3
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800
 8001624:	0800f452 	.word	0x0800f452
 8001628:	20020014 	.word	0x20020014

0800162c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x14>)
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800163a:	6810      	ldr	r0, [r2, #0]
}
 800163c:	40d8      	lsrs	r0, r3
 800163e:	4770      	bx	lr
 8001640:	40023800 	.word	0x40023800
 8001644:	0800f452 	.word	0x0800f452
 8001648:	20020014 	.word	0x20020014

0800164c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800164c:	230f      	movs	r3, #15
 800164e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_GetClockConfig+0x34>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001660:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001668:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	08db      	lsrs	r3, r3, #3
 800166e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001672:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_RCC_GetClockConfig+0x38>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	600b      	str	r3, [r1, #0]
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800168c:	6802      	ldr	r2, [r0, #0]
{
 800168e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001690:	f012 0601 	ands.w	r6, r2, #1
 8001694:	d00b      	beq.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001696:	4bba      	ldr	r3, [pc, #744]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001698:	6899      	ldr	r1, [r3, #8]
 800169a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800169e:	6099      	str	r1, [r3, #8]
 80016a0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80016a2:	6899      	ldr	r1, [r3, #8]
 80016a4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80016a6:	fab6 f686 	clz	r6, r6
 80016aa:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016ac:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016ae:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80016b2:	d012      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016b4:	49b2      	ldr	r1, [pc, #712]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016b6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80016b8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016bc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80016c4:	bf08      	it	eq
 80016c6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016c8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016cc:	bf16      	itet	ne
 80016ce:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80016d2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016d4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016da:	02d7      	lsls	r7, r2, #11
 80016dc:	d510      	bpl.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016de:	48a8      	ldr	r0, [pc, #672]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80016e2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016e6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016ee:	ea43 0301 	orr.w	r3, r3, r1
 80016f2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016f6:	f000 81a9 	beq.w	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80016fa:	2900      	cmp	r1, #0
 80016fc:	bf08      	it	eq
 80016fe:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001700:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001704:	bf18      	it	ne
 8001706:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001708:	0690      	lsls	r0, r2, #26
 800170a:	d531      	bpl.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b9c      	ldr	r3, [pc, #624]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800170e:	4f9d      	ldr	r7, [pc, #628]	; (8001984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001712:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800172a:	f7fe ff91 	bl	8000650 <HAL_GetTick>
 800172e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	05d9      	lsls	r1, r3, #23
 8001734:	f140 818c 	bpl.w	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001738:	4f91      	ldr	r7, [pc, #580]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800173a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800173c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001740:	f040 8191 	bne.w	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001746:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800174a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800174e:	4a8c      	ldr	r2, [pc, #560]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001750:	f040 81af 	bne.w	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001754:	6891      	ldr	r1, [r2, #8]
 8001756:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800175a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800175e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001762:	4301      	orrs	r1, r0
 8001764:	6091      	str	r1, [r2, #8]
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800176c:	430b      	orrs	r3, r1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	06df      	lsls	r7, r3, #27
 8001774:	d50c      	bpl.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001776:	4a82      	ldr	r2, [pc, #520]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001778:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800177c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001780:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001784:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001788:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800178a:	4301      	orrs	r1, r0
 800178c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001790:	0458      	lsls	r0, r3, #17
 8001792:	d508      	bpl.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001794:	497a      	ldr	r1, [pc, #488]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001796:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001798:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800179c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80017a0:	4302      	orrs	r2, r0
 80017a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017a6:	0419      	lsls	r1, r3, #16
 80017a8:	d508      	bpl.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017aa:	4975      	ldr	r1, [pc, #468]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017ac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80017ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017b2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80017b6:	4302      	orrs	r2, r0
 80017b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017bc:	03da      	lsls	r2, r3, #15
 80017be:	d508      	bpl.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017c0:	496f      	ldr	r1, [pc, #444]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017cc:	4302      	orrs	r2, r0
 80017ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017d2:	039f      	lsls	r7, r3, #14
 80017d4:	d508      	bpl.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017d6:	496a      	ldr	r1, [pc, #424]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80017da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017de:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80017e2:	4302      	orrs	r2, r0
 80017e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017e8:	0658      	lsls	r0, r3, #25
 80017ea:	d508      	bpl.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017ec:	4964      	ldr	r1, [pc, #400]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80017f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017f4:	f022 0203 	bic.w	r2, r2, #3
 80017f8:	4302      	orrs	r2, r0
 80017fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017fe:	0619      	lsls	r1, r3, #24
 8001800:	d508      	bpl.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001802:	495f      	ldr	r1, [pc, #380]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001804:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001806:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800180a:	f022 020c 	bic.w	r2, r2, #12
 800180e:	4302      	orrs	r2, r0
 8001810:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001814:	05da      	lsls	r2, r3, #23
 8001816:	d508      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001818:	4959      	ldr	r1, [pc, #356]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800181a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800181c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001820:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001824:	4302      	orrs	r2, r0
 8001826:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800182a:	059f      	lsls	r7, r3, #22
 800182c:	d508      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800182e:	4954      	ldr	r1, [pc, #336]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001830:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001832:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001836:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800183a:	4302      	orrs	r2, r0
 800183c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001840:	0558      	lsls	r0, r3, #21
 8001842:	d508      	bpl.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001844:	494e      	ldr	r1, [pc, #312]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001848:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800184c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001850:	4302      	orrs	r2, r0
 8001852:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001856:	0519      	lsls	r1, r3, #20
 8001858:	d508      	bpl.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800185a:	4949      	ldr	r1, [pc, #292]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800185c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800185e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001862:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001866:	4302      	orrs	r2, r0
 8001868:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800186c:	04da      	lsls	r2, r3, #19
 800186e:	d508      	bpl.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001870:	4943      	ldr	r1, [pc, #268]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001872:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001874:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001878:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800187c:	4302      	orrs	r2, r0
 800187e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001882:	049f      	lsls	r7, r3, #18
 8001884:	d508      	bpl.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001886:	493e      	ldr	r1, [pc, #248]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001888:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800188a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800188e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001892:	4302      	orrs	r2, r0
 8001894:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001898:	0258      	lsls	r0, r3, #9
 800189a:	d508      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800189c:	4938      	ldr	r1, [pc, #224]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800189e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80018a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018a8:	4302      	orrs	r2, r0
 80018aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018ae:	0299      	lsls	r1, r3, #10
 80018b0:	d50c      	bpl.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018b2:	4833      	ldr	r0, [pc, #204]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018b4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80018b6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80018ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018be:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80018c2:	bf08      	it	eq
 80018c4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018c6:	430a      	orrs	r2, r1
 80018c8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80018cc:	f013 0f08 	tst.w	r3, #8
 80018d0:	bf18      	it	ne
 80018d2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80018d4:	035a      	lsls	r2, r3, #13
 80018d6:	d508      	bpl.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80018d8:	4929      	ldr	r1, [pc, #164]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018da:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80018dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018e4:	4302      	orrs	r2, r0
 80018e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80018ea:	021f      	lsls	r7, r3, #8
 80018ec:	d509      	bpl.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018ee:	4924      	ldr	r1, [pc, #144]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80018f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018f8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80018fc:	4302      	orrs	r2, r0
 80018fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001902:	0158      	lsls	r0, r3, #5
 8001904:	d509      	bpl.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001906:	491e      	ldr	r1, [pc, #120]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001908:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800190c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001910:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001914:	4302      	orrs	r2, r0
 8001916:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800191a:	0119      	lsls	r1, r3, #4
 800191c:	d509      	bpl.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800191e:	4918      	ldr	r1, [pc, #96]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001920:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001924:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001928:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800192c:	4302      	orrs	r2, r0
 800192e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001932:	00da      	lsls	r2, r3, #3
 8001934:	d509      	bpl.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001936:	4912      	ldr	r1, [pc, #72]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001938:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800193c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001940:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001944:	4302      	orrs	r2, r0
 8001946:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800194a:	2e01      	cmp	r6, #1
 800194c:	f000 80b5 	beq.w	8001aba <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001954:	f000 80b1 	beq.w	8001aba <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001958:	2d01      	cmp	r5, #1
 800195a:	d175      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800195c:	4d08      	ldr	r5, [pc, #32]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001966:	f7fe fe73 	bl	8000650 <HAL_GetTick>
 800196a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	009f      	lsls	r7, r3, #2
 8001970:	f100 8127 	bmi.w	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001974:	6821      	ldr	r1, [r4, #0]
 8001976:	030e      	lsls	r6, r1, #12
 8001978:	d506      	bpl.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800197a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800197c:	b143      	cbz	r3, 8001990 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800197e:	e003      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000
 8001988:	02cd      	lsls	r5, r1, #11
 800198a:	d51d      	bpl.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800198c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800198e:	b9db      	cbnz	r3, 80019c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001990:	4a93      	ldr	r2, [pc, #588]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001992:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001996:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800199a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800199e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019a2:	4303      	orrs	r3, r0
 80019a4:	6960      	ldr	r0, [r4, #20]
 80019a6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019aa:	69a0      	ldr	r0, [r4, #24]
 80019ac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80019b4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80019b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80019ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80019be:	3801      	subs	r0, #1
 80019c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80019c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80019c8:	0288      	lsls	r0, r1, #10
 80019ca:	d515      	bpl.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80019cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80019ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019d2:	d111      	bne.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019d4:	4a82      	ldr	r2, [pc, #520]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80019da:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80019de:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019e2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019e6:	4303      	orrs	r3, r0
 80019e8:	6960      	ldr	r0, [r4, #20]
 80019ea:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019ee:	6a20      	ldr	r0, [r4, #32]
 80019f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80019f8:	070a      	lsls	r2, r1, #28
 80019fa:	d519      	bpl.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019fc:	4978      	ldr	r1, [pc, #480]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001a06:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6962      	ldr	r2, [r4, #20]
 8001a12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a16:	69e2      	ldr	r2, [r4, #28]
 8001a18:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001a20:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001a30:	4c6b      	ldr	r4, [pc, #428]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3a:	f7fe fe09 	bl	8000650 <HAL_GetTick>
 8001a3e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f140 80c4 	bpl.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e009      	b.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001a4c:	2601      	movs	r6, #1
 8001a4e:	e657      	b.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7fe fdfe 	bl	8000650 <HAL_GetTick>
 8001a54:	eba0 0008 	sub.w	r0, r0, r8
 8001a58:	2864      	cmp	r0, #100	; 0x64
 8001a5a:	f67f ae69 	bls.w	8001730 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001a5e:	2003      	movs	r0, #3
}
 8001a60:	b003      	add	sp, #12
 8001a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a68:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	f43f ae69 	beq.w	8001744 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a7e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a86:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001a88:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a8c:	07da      	lsls	r2, r3, #31
 8001a8e:	f57f ae59 	bpl.w	8001744 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001a92:	f7fe fddd 	bl	8000650 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a9a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a9e:	079b      	lsls	r3, r3, #30
 8001aa0:	f53f ae50 	bmi.w	8001744 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7fe fdd4 	bl	8000650 <HAL_GetTick>
 8001aa8:	eba0 0008 	sub.w	r0, r0, r8
 8001aac:	4548      	cmp	r0, r9
 8001aae:	d9f5      	bls.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001ab0:	e7d5      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ab2:	6891      	ldr	r1, [r2, #8]
 8001ab4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001ab8:	e654      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001aba:	4e49      	ldr	r6, [pc, #292]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001abc:	6833      	ldr	r3, [r6, #0]
 8001abe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ac2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ac4:	f7fe fdc4 	bl	8000650 <HAL_GetTick>
 8001ac8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aca:	6833      	ldr	r3, [r6, #0]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	d472      	bmi.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	07d7      	lsls	r7, r2, #31
 8001ad4:	d512      	bpl.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ad8:	b983      	cbnz	r3, 8001afc <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ada:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ade:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6861      	ldr	r1, [r4, #4]
 8001aee:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001af2:	68a1      	ldr	r1, [r4, #8]
 8001af4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001af8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001afc:	0316      	lsls	r6, r2, #12
 8001afe:	d503      	bpl.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b06:	d005      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001b08:	02d0      	lsls	r0, r2, #11
 8001b0a:	d51e      	bpl.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b12:	d11a      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001b14:	4932      	ldr	r1, [pc, #200]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b16:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b1a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b22:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b26:	4303      	orrs	r3, r0
 8001b28:	6860      	ldr	r0, [r4, #4]
 8001b2a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b2e:	68e0      	ldr	r0, [r4, #12]
 8001b30:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b38:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b3e:	f020 001f 	bic.w	r0, r0, #31
 8001b42:	3b01      	subs	r3, #1
 8001b44:	4303      	orrs	r3, r0
 8001b46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b4a:	01d1      	lsls	r1, r2, #7
 8001b4c:	d511      	bpl.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b4e:	4924      	ldr	r1, [pc, #144]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b50:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b54:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b58:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b5c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b60:	4303      	orrs	r3, r0
 8001b62:	6860      	ldr	r0, [r4, #4]
 8001b64:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b68:	6920      	ldr	r0, [r4, #16]
 8001b6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b72:	0192      	lsls	r2, r2, #6
 8001b74:	d50d      	bpl.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b76:	6923      	ldr	r3, [r4, #16]
 8001b78:	6862      	ldr	r2, [r4, #4]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b80:	68e2      	ldr	r2, [r4, #12]
 8001b82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b86:	68a2      	ldr	r2, [r4, #8]
 8001b88:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b92:	4e13      	ldr	r6, [pc, #76]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b94:	6833      	ldr	r3, [r6, #0]
 8001b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b9a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b9c:	f7fe fd58 	bl	8000650 <HAL_GetTick>
 8001ba0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ba2:	6833      	ldr	r3, [r6, #0]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	f53f aed7 	bmi.w	8001958 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001baa:	f7fe fd51 	bl	8000650 <HAL_GetTick>
 8001bae:	1bc0      	subs	r0, r0, r7
 8001bb0:	2864      	cmp	r0, #100	; 0x64
 8001bb2:	d9f6      	bls.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001bb4:	e753      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001bb6:	f7fe fd4b 	bl	8000650 <HAL_GetTick>
 8001bba:	1bc0      	subs	r0, r0, r7
 8001bbc:	2864      	cmp	r0, #100	; 0x64
 8001bbe:	d984      	bls.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001bc0:	e74d      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bc2:	f7fe fd45 	bl	8000650 <HAL_GetTick>
 8001bc6:	1b80      	subs	r0, r0, r6
 8001bc8:	2864      	cmp	r0, #100	; 0x64
 8001bca:	f67f aecf 	bls.w	800196c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001bce:	e746      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bd0:	f7fe fd3e 	bl	8000650 <HAL_GetTick>
 8001bd4:	1b40      	subs	r0, r0, r5
 8001bd6:	2864      	cmp	r0, #100	; 0x64
 8001bd8:	f67f af32 	bls.w	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001bdc:	e73f      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_TIM_Base_MspInit>:
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be8:	6803      	ldr	r3, [r0, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_TIM_Base_Start_IT+0x28>)
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf8:	2a06      	cmp	r2, #6
 8001bfa:	d006      	beq.n	8001c0a <HAL_TIM_Base_Start_IT+0x22>
 8001bfc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	00010007 	.word	0x00010007

08001c14 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c14:	4770      	bx	lr

08001c16 <HAL_TIM_IC_CaptureCallback>:
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_TriggerCallback>:
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c1c:	6803      	ldr	r3, [r0, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	0791      	lsls	r1, r2, #30
{
 8001c22:	b510      	push	{r4, lr}
 8001c24:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c26:	d50f      	bpl.n	8001c48 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	0792      	lsls	r2, r2, #30
 8001c2c:	d50c      	bpl.n	8001c48 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2e:	f06f 0202 	mvn.w	r2, #2
 8001c32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c34:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c36:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c38:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3a:	0799      	lsls	r1, r3, #30
 8001c3c:	f000 8085 	beq.w	8001d4a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c40:	f7ff ffe9 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c44:	2300      	movs	r3, #0
 8001c46:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	0752      	lsls	r2, r2, #29
 8001c4e:	d510      	bpl.n	8001c72 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	0750      	lsls	r0, r2, #29
 8001c54:	d50d      	bpl.n	8001c72 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c56:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c64:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c68:	d075      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	f7ff ffd4 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	0711      	lsls	r1, r2, #28
 8001c78:	d50f      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	0712      	lsls	r2, r2, #28
 8001c7e:	d50c      	bpl.n	8001c9a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c80:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c88:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c8a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c8e:	079b      	lsls	r3, r3, #30
 8001c90:	d067      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	f7ff ffc0 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	2300      	movs	r3, #0
 8001c98:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	06d0      	lsls	r0, r2, #27
 8001ca0:	d510      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	06d1      	lsls	r1, r2, #27
 8001ca6:	d50d      	bpl.n	8001cc4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca8:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001cba:	d058      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbc:	f7ff ffab 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	07d2      	lsls	r2, r2, #31
 8001cca:	d508      	bpl.n	8001cde <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	07d0      	lsls	r0, r2, #31
 8001cd0:	d505      	bpl.n	8001cde <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cda:	f009 fb1b 	bl	800b314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	0611      	lsls	r1, r2, #24
 8001ce4:	d508      	bpl.n	8001cf8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	0612      	lsls	r2, r2, #24
 8001cea:	d505      	bpl.n	8001cf8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001cf4:	f000 f8c3 	bl	8001e7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	05d0      	lsls	r0, r2, #23
 8001cfe:	d508      	bpl.n	8001d12 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	0611      	lsls	r1, r2, #24
 8001d04:	d505      	bpl.n	8001d12 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001d0e:	f000 f8b7 	bl	8001e80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	0652      	lsls	r2, r2, #25
 8001d18:	d508      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	0650      	lsls	r0, r2, #25
 8001d1e:	d505      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d26:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d28:	f7ff ff77 	bl	8001c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	0691      	lsls	r1, r2, #26
 8001d32:	d522      	bpl.n	8001d7a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	0692      	lsls	r2, r2, #26
 8001d38:	d51f      	bpl.n	8001d7a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d3a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d40:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001d46:	f000 b899 	b.w	8001e7c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	f7ff ff63 	bl	8001c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff ff62 	bl	8001c18 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d54:	e776      	b.n	8001c44 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	f7ff ff5d 	bl	8001c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff ff5c 	bl	8001c18 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d60:	e785      	b.n	8001c6e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	f7ff ff57 	bl	8001c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ff56 	bl	8001c18 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d6c:	e793      	b.n	8001c96 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	f7ff ff51 	bl	8001c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff ff50 	bl	8001c18 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d78:	e7a2      	b.n	8001cc0 <HAL_TIM_IRQHandler+0xa4>
 8001d7a:	bd10      	pop	{r4, pc}

08001d7c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001d7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d012      	beq.n	8001daa <TIM_Base_SetConfig+0x2e>
 8001d84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d88:	d00f      	beq.n	8001daa <TIM_Base_SetConfig+0x2e>
 8001d8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d00b      	beq.n	8001daa <TIM_Base_SetConfig+0x2e>
 8001d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d96:	4290      	cmp	r0, r2
 8001d98:	d007      	beq.n	8001daa <TIM_Base_SetConfig+0x2e>
 8001d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d003      	beq.n	8001daa <TIM_Base_SetConfig+0x2e>
 8001da2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001da6:	4290      	cmp	r0, r2
 8001da8:	d119      	bne.n	8001dde <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001daa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001db0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001db2:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <TIM_Base_SetConfig+0xc4>)
 8001db4:	4290      	cmp	r0, r2
 8001db6:	d029      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001db8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001dbc:	d026      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dbe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001dc2:	4290      	cmp	r0, r2
 8001dc4:	d022      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dca:	4290      	cmp	r0, r2
 8001dcc:	d01e      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd2:	4290      	cmp	r0, r2
 8001dd4:	d01a      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dd6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001dda:	4290      	cmp	r0, r2
 8001ddc:	d016      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <TIM_Base_SetConfig+0xc8>)
 8001de0:	4290      	cmp	r0, r2
 8001de2:	d013      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001de8:	4290      	cmp	r0, r2
 8001dea:	d00f      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df0:	4290      	cmp	r0, r2
 8001df2:	d00b      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001df4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d007      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e00:	4290      	cmp	r0, r2
 8001e02:	d003      	beq.n	8001e0c <TIM_Base_SetConfig+0x90>
 8001e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e08:	4290      	cmp	r0, r2
 8001e0a:	d103      	bne.n	8001e14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e10:	68ca      	ldr	r2, [r1, #12]
 8001e12:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e14:	694a      	ldr	r2, [r1, #20]
 8001e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e1a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001e1c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e1e:	688b      	ldr	r3, [r1, #8]
 8001e20:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e22:	680b      	ldr	r3, [r1, #0]
 8001e24:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <TIM_Base_SetConfig+0xc4>)
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	d003      	beq.n	8001e34 <TIM_Base_SetConfig+0xb8>
 8001e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e30:	4298      	cmp	r0, r3
 8001e32:	d101      	bne.n	8001e38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e34:	690b      	ldr	r3, [r1, #16]
 8001e36:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	6143      	str	r3, [r0, #20]
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40014000 	.word	0x40014000

08001e48 <HAL_TIM_Base_Init>:
{
 8001e48:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b1a0      	cbz	r0, 8001e78 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e56:	b91b      	cbnz	r3, 8001e60 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e5c:	f7ff fec2 	bl	8001be4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e62:	6820      	ldr	r0, [r4, #0]
 8001e64:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001e66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6a:	f7ff ff87 	bl	8001d7c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e6e:	2301      	movs	r3, #1
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
}
 8001e7a:	bd10      	pop	{r4, pc}

08001e7c <HAL_TIMEx_CommutCallback>:
 8001e7c:	4770      	bx	lr

08001e7e <HAL_TIMEx_BreakCallback>:
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e80:	4770      	bx	lr
	...

08001e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e84:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e86:	69c2      	ldr	r2, [r0, #28]
{
 8001e88:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e8a:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e8c:	6881      	ldr	r1, [r0, #8]
 8001e8e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e90:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e92:	4301      	orrs	r1, r0
 8001e94:	6960      	ldr	r0, [r4, #20]
 8001e96:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e98:	4890      	ldr	r0, [pc, #576]	; (80020dc <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e9a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e9c:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001e9e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ea0:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ea4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001eac:	4301      	orrs	r1, r0
 8001eae:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001eb0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001eb2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001eb4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001eb6:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001eba:	4301      	orrs	r1, r0
 8001ebc:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ebe:	4988      	ldr	r1, [pc, #544]	; (80020e0 <UART_SetConfig+0x25c>)
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	d117      	bne.n	8001ef4 <UART_SetConfig+0x70>
 8001ec4:	4b87      	ldr	r3, [pc, #540]	; (80020e4 <UART_SetConfig+0x260>)
 8001ec6:	4988      	ldr	r1, [pc, #544]	; (80020e8 <UART_SetConfig+0x264>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ed0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	d129      	bne.n	8001f2c <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	f200 809d 	bhi.w	8002018 <UART_SetConfig+0x194>
 8001ede:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001ee2:	008c      	.short	0x008c
 8001ee4:	00ee00e8 	.word	0x00ee00e8
 8001ee8:	00fa009b 	.word	0x00fa009b
 8001eec:	009b009b 	.word	0x009b009b
 8001ef0:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ef4:	497d      	ldr	r1, [pc, #500]	; (80020ec <UART_SetConfig+0x268>)
 8001ef6:	428b      	cmp	r3, r1
 8001ef8:	d106      	bne.n	8001f08 <UART_SetConfig+0x84>
 8001efa:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <UART_SetConfig+0x260>)
 8001efc:	497c      	ldr	r1, [pc, #496]	; (80020f0 <UART_SetConfig+0x26c>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	e7e3      	b.n	8001ed0 <UART_SetConfig+0x4c>
 8001f08:	497a      	ldr	r1, [pc, #488]	; (80020f4 <UART_SetConfig+0x270>)
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d11d      	bne.n	8001f4a <UART_SetConfig+0xc6>
 8001f0e:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <UART_SetConfig+0x260>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	f000 80d9 	beq.w	80020d0 <UART_SetConfig+0x24c>
 8001f1e:	d80e      	bhi.n	8001f3e <UART_SetConfig+0xba>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d067      	beq.n	8001ff4 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f24:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f28:	d076      	beq.n	8002018 <UART_SetConfig+0x194>
 8001f2a:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d873      	bhi.n	8002018 <UART_SetConfig+0x194>
 8001f30:	e8df f003 	tbb	[pc, r3]
 8001f34:	72a29f99 	.word	0x72a29f99
 8001f38:	727272b4 	.word	0x727272b4
 8001f3c:	b7          	.byte	0xb7
 8001f3d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	f000 80ba 	beq.w	80020b8 <UART_SetConfig+0x234>
 8001f44:	2b30      	cmp	r3, #48	; 0x30
 8001f46:	d03f      	beq.n	8001fc8 <UART_SetConfig+0x144>
 8001f48:	e7ec      	b.n	8001f24 <UART_SetConfig+0xa0>
 8001f4a:	496b      	ldr	r1, [pc, #428]	; (80020f8 <UART_SetConfig+0x274>)
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d10d      	bne.n	8001f6c <UART_SetConfig+0xe8>
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <UART_SetConfig+0x260>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	f000 80b8 	beq.w	80020d0 <UART_SetConfig+0x24c>
 8001f60:	d9de      	bls.n	8001f20 <UART_SetConfig+0x9c>
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	f000 80a8 	beq.w	80020b8 <UART_SetConfig+0x234>
 8001f68:	2bc0      	cmp	r3, #192	; 0xc0
 8001f6a:	e7ec      	b.n	8001f46 <UART_SetConfig+0xc2>
 8001f6c:	4963      	ldr	r1, [pc, #396]	; (80020fc <UART_SetConfig+0x278>)
 8001f6e:	428b      	cmp	r3, r1
 8001f70:	d110      	bne.n	8001f94 <UART_SetConfig+0x110>
 8001f72:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <UART_SetConfig+0x260>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f80:	f000 80a6 	beq.w	80020d0 <UART_SetConfig+0x24c>
 8001f84:	d9cc      	bls.n	8001f20 <UART_SetConfig+0x9c>
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8a:	f000 8095 	beq.w	80020b8 <UART_SetConfig+0x234>
 8001f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f92:	e7d8      	b.n	8001f46 <UART_SetConfig+0xc2>
 8001f94:	495a      	ldr	r1, [pc, #360]	; (8002100 <UART_SetConfig+0x27c>)
 8001f96:	428b      	cmp	r3, r1
 8001f98:	d11e      	bne.n	8001fd8 <UART_SetConfig+0x154>
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <UART_SetConfig+0x260>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	f000 8092 	beq.w	80020d0 <UART_SetConfig+0x24c>
 8001fac:	d806      	bhi.n	8001fbc <UART_SetConfig+0x138>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d07c      	beq.n	80020ac <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fb6:	d12f      	bne.n	8002018 <UART_SetConfig+0x194>
 8001fb8:	2310      	movs	r3, #16
 8001fba:	e78d      	b.n	8001ed8 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fc0:	d07a      	beq.n	80020b8 <UART_SetConfig+0x234>
 8001fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001fc6:	d1f4      	bne.n	8001fb2 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fcc:	d169      	bne.n	80020a2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fce:	6863      	ldr	r3, [r4, #4]
 8001fd0:	0858      	lsrs	r0, r3, #1
 8001fd2:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001fd6:	e078      	b.n	80020ca <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fd8:	494a      	ldr	r1, [pc, #296]	; (8002104 <UART_SetConfig+0x280>)
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	d124      	bne.n	8002028 <UART_SetConfig+0x1a4>
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <UART_SetConfig+0x260>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fec:	d070      	beq.n	80020d0 <UART_SetConfig+0x24c>
 8001fee:	d815      	bhi.n	800201c <UART_SetConfig+0x198>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1de      	bne.n	8001fb2 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ff8:	d135      	bne.n	8002066 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ffa:	f7ff fb07 	bl	800160c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ffe:	6862      	ldr	r2, [r4, #4]
 8002000:	0853      	lsrs	r3, r2, #1
 8002002:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002006:	fbb0 f0f2 	udiv	r0, r0, r2
 800200a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800200c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002010:	f1a0 0210 	sub.w	r2, r0, #16
 8002014:	429a      	cmp	r2, r3
 8002016:	d91a      	bls.n	800204e <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8002018:	2001      	movs	r0, #1
 800201a:	e020      	b.n	800205e <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800201c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002020:	d04a      	beq.n	80020b8 <UART_SetConfig+0x234>
 8002022:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002026:	e7ce      	b.n	8001fc6 <UART_SetConfig+0x142>
 8002028:	4937      	ldr	r1, [pc, #220]	; (8002108 <UART_SetConfig+0x284>)
 800202a:	428b      	cmp	r3, r1
 800202c:	d1f4      	bne.n	8002018 <UART_SetConfig+0x194>
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <UART_SetConfig+0x260>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800203c:	d048      	beq.n	80020d0 <UART_SetConfig+0x24c>
 800203e:	f67f af6f 	bls.w	8001f20 <UART_SetConfig+0x9c>
 8002042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002046:	d037      	beq.n	80020b8 <UART_SetConfig+0x234>
 8002048:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800204c:	e77b      	b.n	8001f46 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800204e:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002052:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8002056:	6822      	ldr	r2, [r4, #0]
 8002058:	4318      	orrs	r0, r3
 800205a:	60d0      	str	r0, [r2, #12]
 800205c:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002062:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002064:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002066:	f7ff fad1 	bl	800160c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800206a:	6863      	ldr	r3, [r4, #4]
 800206c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002070:	e008      	b.n	8002084 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002072:	f7ff fadb 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 8002076:	e7f8      	b.n	800206a <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002078:	6863      	ldr	r3, [r4, #4]
 800207a:	0858      	lsrs	r0, r3, #1
 800207c:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8002080:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002084:	fbb0 f0f3 	udiv	r0, r0, r3
 8002088:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800208a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800208e:	f1a0 0210 	sub.w	r2, r0, #16
 8002092:	429a      	cmp	r2, r3
 8002094:	d8c0      	bhi.n	8002018 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	60d8      	str	r0, [r3, #12]
 800209a:	e7df      	b.n	800205c <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 800209c:	f7ff f9e2 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 80020a0:	e7e3      	b.n	800206a <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80020a2:	6863      	ldr	r3, [r4, #4]
 80020a4:	0858      	lsrs	r0, r3, #1
 80020a6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80020aa:	e7eb      	b.n	8002084 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020b0:	d1df      	bne.n	8002072 <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 80020b2:	f7ff fabb 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80020b6:	e7a2      	b.n	8001ffe <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020bc:	d1dc      	bne.n	8002078 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	0858      	lsrs	r0, r3, #1
 80020c2:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 80020c6:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80020ce:	e79c      	b.n	800200a <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020d0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020d4:	d1e2      	bne.n	800209c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80020d6:	f7ff f9c5 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 80020da:	e790      	b.n	8001ffe <UART_SetConfig+0x17a>
 80020dc:	efff69f3 	.word	0xefff69f3
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	0800c4ec 	.word	0x0800c4ec
 80020ec:	40004400 	.word	0x40004400
 80020f0:	0800c4f0 	.word	0x0800c4f0
 80020f4:	40004800 	.word	0x40004800
 80020f8:	40004c00 	.word	0x40004c00
 80020fc:	40005000 	.word	0x40005000
 8002100:	40011400 	.word	0x40011400
 8002104:	40007800 	.word	0x40007800
 8002108:	40007c00 	.word	0x40007c00

0800210c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800210c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800210e:	07da      	lsls	r2, r3, #31
{
 8002110:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002112:	d506      	bpl.n	8002122 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002114:	6801      	ldr	r1, [r0, #0]
 8002116:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002118:	684a      	ldr	r2, [r1, #4]
 800211a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800211e:	4322      	orrs	r2, r4
 8002120:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002122:	079c      	lsls	r4, r3, #30
 8002124:	d506      	bpl.n	8002134 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002126:	6801      	ldr	r1, [r0, #0]
 8002128:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800212a:	684a      	ldr	r2, [r1, #4]
 800212c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002130:	4322      	orrs	r2, r4
 8002132:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002134:	0759      	lsls	r1, r3, #29
 8002136:	d506      	bpl.n	8002146 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002138:	6801      	ldr	r1, [r0, #0]
 800213a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800213c:	684a      	ldr	r2, [r1, #4]
 800213e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002142:	4322      	orrs	r2, r4
 8002144:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002146:	071a      	lsls	r2, r3, #28
 8002148:	d506      	bpl.n	8002158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800214a:	6801      	ldr	r1, [r0, #0]
 800214c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800214e:	684a      	ldr	r2, [r1, #4]
 8002150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002154:	4322      	orrs	r2, r4
 8002156:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002158:	06dc      	lsls	r4, r3, #27
 800215a:	d506      	bpl.n	800216a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800215c:	6801      	ldr	r1, [r0, #0]
 800215e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002160:	688a      	ldr	r2, [r1, #8]
 8002162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002166:	4322      	orrs	r2, r4
 8002168:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800216a:	0699      	lsls	r1, r3, #26
 800216c:	d506      	bpl.n	800217c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800216e:	6801      	ldr	r1, [r0, #0]
 8002170:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002178:	4322      	orrs	r2, r4
 800217a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800217c:	065a      	lsls	r2, r3, #25
 800217e:	d510      	bpl.n	80021a2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002180:	6801      	ldr	r1, [r0, #0]
 8002182:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002184:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002186:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800218a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800218e:	ea42 0204 	orr.w	r2, r2, r4
 8002192:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002194:	d105      	bne.n	80021a2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002196:	684a      	ldr	r2, [r1, #4]
 8002198:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800219a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800219e:	4322      	orrs	r2, r4
 80021a0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	d506      	bpl.n	80021b4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021a6:	6802      	ldr	r2, [r0, #0]
 80021a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80021aa:	6853      	ldr	r3, [r2, #4]
 80021ac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6053      	str	r3, [r2, #4]
 80021b4:	bd10      	pop	{r4, pc}

080021b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ba:	9d06      	ldr	r5, [sp, #24]
 80021bc:	4604      	mov	r4, r0
 80021be:	460f      	mov	r7, r1
 80021c0:	4616      	mov	r6, r2
 80021c2:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021c4:	6821      	ldr	r1, [r4, #0]
 80021c6:	69ca      	ldr	r2, [r1, #28]
 80021c8:	ea37 0302 	bics.w	r3, r7, r2
 80021cc:	bf0c      	ite	eq
 80021ce:	2201      	moveq	r2, #1
 80021d0:	2200      	movne	r2, #0
 80021d2:	42b2      	cmp	r2, r6
 80021d4:	d002      	beq.n	80021dc <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2000      	movs	r0, #0
}
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80021dc:	1c68      	adds	r0, r5, #1
 80021de:	d0f2      	beq.n	80021c6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7fe fa36 	bl	8000650 <HAL_GetTick>
 80021e4:	eba0 0008 	sub.w	r0, r0, r8
 80021e8:	4285      	cmp	r5, r0
 80021ea:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ec:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	d300      	bcc.n	80021f2 <UART_WaitOnFlagUntilTimeout+0x3c>
 80021f0:	b97d      	cbnz	r5, 8002212 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021f6:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021f8:	6883      	ldr	r3, [r0, #8]
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002200:	2320      	movs	r3, #32
 8002202:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002204:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002206:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002208:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800220a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002212:	075a      	lsls	r2, r3, #29
 8002214:	d5d6      	bpl.n	80021c4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002216:	69c3      	ldr	r3, [r0, #28]
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	d5d3      	bpl.n	80021c4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800221c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002220:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002228:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222a:	6883      	ldr	r3, [r0, #8]
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002232:	2320      	movs	r3, #32
 8002234:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002236:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002238:	67e3      	str	r3, [r4, #124]	; 0x7c
 800223a:	e7e4      	b.n	8002206 <UART_WaitOnFlagUntilTimeout+0x50>

0800223c <UART_CheckIdleState>:
{
 800223c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223e:	2600      	movs	r6, #0
{
 8002240:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002244:	f7fe fa04 	bl	8000650 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002248:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800224a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	071a      	lsls	r2, r3, #28
 8002250:	d415      	bmi.n	800227e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	075b      	lsls	r3, r3, #29
 8002258:	d50a      	bpl.n	8002270 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800225a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002264:	4620      	mov	r0, r4
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	462b      	mov	r3, r5
 800226a:	f7ff ffa4 	bl	80021b6 <UART_WaitOnFlagUntilTimeout>
 800226e:	b990      	cbnz	r0, 8002296 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002270:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002272:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002274:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002276:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800227a:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800227c:	e00c      	b.n	8002298 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800227e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002282:	4632      	mov	r2, r6
 8002284:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4603      	mov	r3, r0
 800228c:	4620      	mov	r0, r4
 800228e:	f7ff ff92 	bl	80021b6 <UART_WaitOnFlagUntilTimeout>
 8002292:	2800      	cmp	r0, #0
 8002294:	d0dd      	beq.n	8002252 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
}
 8002298:	b002      	add	sp, #8
 800229a:	bd70      	pop	{r4, r5, r6, pc}

0800229c <HAL_UART_Init>:
{
 800229c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800229e:	4604      	mov	r4, r0
 80022a0:	b340      	cbz	r0, 80022f4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80022a4:	b91b      	cbnz	r3, 80022ae <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80022a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80022aa:	f009 f85b 	bl	800b364 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80022ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022b2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80022b4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80022b6:	6813      	ldr	r3, [r2, #0]
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022be:	f7ff fde1 	bl	8001e84 <UART_SetConfig>
 80022c2:	2801      	cmp	r0, #1
 80022c4:	d016      	beq.n	80022f4 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022c8:	b113      	cbz	r3, 80022d0 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff ff1e 	bl	800210c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d0:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80022d2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
}
 80022ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80022ee:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80022f0:	f7ff bfa4 	b.w	800223c <UART_CheckIdleState>
}
 80022f4:	2001      	movs	r0, #1
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022f8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80022fa:	f001 fab5 	bl	8003868 <vTaskStartScheduler>
  
  return osOK;
}
 80022fe:	2000      	movs	r0, #0
 8002300:	bd08      	pop	{r3, pc}

08002302 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002302:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8002306:	b10b      	cbz	r3, 800230c <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8002308:	f001 baf4 	b.w	80038f4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800230c:	f001 baec 	b.w	80038e8 <xTaskGetTickCount>

08002310 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002310:	b570      	push	{r4, r5, r6, lr}
 8002312:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002314:	6946      	ldr	r6, [r0, #20]
{
 8002316:	460b      	mov	r3, r1
 8002318:	b086      	sub	sp, #24
 800231a:	6840      	ldr	r0, [r0, #4]
 800231c:	6829      	ldr	r1, [r5, #0]
 800231e:	692a      	ldr	r2, [r5, #16]
 8002320:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002324:	b176      	cbz	r6, 8002344 <osThreadCreate+0x34>
 8002326:	69ad      	ldr	r5, [r5, #24]
 8002328:	b165      	cbz	r5, 8002344 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800232a:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800232c:	9502      	str	r5, [sp, #8]
    fpriority += (priority - osPriorityIdle);
 800232e:	bf14      	ite	ne
 8002330:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002332:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002334:	e88d 0050 	stmia.w	sp, {r4, r6}
 8002338:	f001 fa33 	bl	80037a2 <xTaskCreateStatic>
 800233c:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800233e:	9805      	ldr	r0, [sp, #20]
}
 8002340:	b006      	add	sp, #24
 8002342:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002344:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002346:	ad05      	add	r5, sp, #20
 8002348:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 800234a:	bf14      	ite	ne
 800234c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800234e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002350:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002354:	f001 fa5a 	bl	800380c <xTaskCreate>
 8002358:	2801      	cmp	r0, #1
 800235a:	d0f0      	beq.n	800233e <osThreadCreate+0x2e>
      return NULL;
 800235c:	2000      	movs	r0, #0
 800235e:	e7ef      	b.n	8002340 <osThreadCreate+0x30>

08002360 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002360:	2800      	cmp	r0, #0
 8002362:	bf08      	it	eq
 8002364:	2001      	moveq	r0, #1
{
 8002366:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002368:	f001 fbda 	bl	8003b20 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800236c:	2000      	movs	r0, #0
 800236e:	bd08      	pop	{r3, pc}

08002370 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002370:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002372:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8002374:	b109      	cbz	r1, 800237a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002376:	f000 be04 	b.w	8002f82 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800237a:	f000 bdf7 	b.w	8002f6c <xQueueCreateMutex>
	...

08002380 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002380:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002382:	2400      	movs	r4, #0
 8002384:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002386:	b1e0      	cbz	r0, 80023c2 <osMutexWait+0x42>
 8002388:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800238c:	b1a3      	cbz	r3, 80023b8 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800238e:	aa01      	add	r2, sp, #4
 8002390:	4621      	mov	r1, r4
 8002392:	f001 f83d 	bl	8003410 <xQueueReceiveFromISR>
 8002396:	2801      	cmp	r0, #1
 8002398:	d002      	beq.n	80023a0 <osMutexWait+0x20>
      return osErrorOS;
 800239a:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800239c:	b002      	add	sp, #8
 800239e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80023a0:	9b01      	ldr	r3, [sp, #4]
 80023a2:	b13b      	cbz	r3, 80023b4 <osMutexWait+0x34>
 80023a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <osMutexWait+0x48>)
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	f3bf 8f6f 	isb	sy
  return osOK;
 80023b4:	2000      	movs	r0, #0
 80023b6:	e7f1      	b.n	800239c <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80023b8:	f000 ff62 	bl	8003280 <xQueueSemaphoreTake>
 80023bc:	2801      	cmp	r0, #1
 80023be:	d1ec      	bne.n	800239a <osMutexWait+0x1a>
 80023c0:	e7f8      	b.n	80023b4 <osMutexWait+0x34>
    return osErrorParameter;
 80023c2:	2080      	movs	r0, #128	; 0x80
 80023c4:	e7ea      	b.n	800239c <osMutexWait+0x1c>
 80023c6:	bf00      	nop
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80023cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80023ce:	6844      	ldr	r4, [r0, #4]
{ 
 80023d0:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 80023d2:	b16c      	cbz	r4, 80023f0 <osSemaphoreCreate+0x24>
    if (count == 1) {
 80023d4:	2901      	cmp	r1, #1
 80023d6:	d11b      	bne.n	8002410 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80023d8:	2303      	movs	r3, #3
 80023da:	2200      	movs	r2, #0
 80023dc:	4628      	mov	r0, r5
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4611      	mov	r1, r2
 80023e2:	4623      	mov	r3, r4
 80023e4:	f000 fc80 	bl	8002ce8 <xQueueGenericCreateStatic>
 80023e8:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 80023ea:	4628      	mov	r0, r5
 80023ec:	b003      	add	sp, #12
 80023ee:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 80023f0:	2901      	cmp	r1, #1
 80023f2:	d10f      	bne.n	8002414 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 80023f4:	4628      	mov	r0, r5
 80023f6:	2203      	movs	r2, #3
 80023f8:	4621      	mov	r1, r4
 80023fa:	f000 fcc9 	bl	8002d90 <xQueueGenericCreate>
 80023fe:	4605      	mov	r5, r0
 8002400:	2800      	cmp	r0, #0
 8002402:	d0f2      	beq.n	80023ea <osSemaphoreCreate+0x1e>
 8002404:	4623      	mov	r3, r4
 8002406:	4622      	mov	r2, r4
 8002408:	4621      	mov	r1, r4
 800240a:	f000 fce7 	bl	8002ddc <xQueueGenericSend>
 800240e:	e7ec      	b.n	80023ea <osSemaphoreCreate+0x1e>
      return NULL;
 8002410:	2500      	movs	r5, #0
 8002412:	e7ea      	b.n	80023ea <osSemaphoreCreate+0x1e>
 8002414:	4625      	mov	r5, r4
 8002416:	e7e8      	b.n	80023ea <osSemaphoreCreate+0x1e>

08002418 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002418:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800241a:	2400      	movs	r4, #0
 800241c:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800241e:	b1e0      	cbz	r0, 800245a <osSemaphoreWait+0x42>
 8002420:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002424:	b1a3      	cbz	r3, 8002450 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002426:	aa01      	add	r2, sp, #4
 8002428:	4621      	mov	r1, r4
 800242a:	f000 fff1 	bl	8003410 <xQueueReceiveFromISR>
 800242e:	2801      	cmp	r0, #1
 8002430:	d002      	beq.n	8002438 <osSemaphoreWait+0x20>
      return osErrorOS;
 8002432:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002434:	b002      	add	sp, #8
 8002436:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002438:	9b01      	ldr	r3, [sp, #4]
 800243a:	b13b      	cbz	r3, 800244c <osSemaphoreWait+0x34>
 800243c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <osSemaphoreWait+0x48>)
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	f3bf 8f6f 	isb	sy
  return osOK;
 800244c:	2000      	movs	r0, #0
 800244e:	e7f1      	b.n	8002434 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002450:	f000 ff16 	bl	8003280 <xQueueSemaphoreTake>
 8002454:	2801      	cmp	r0, #1
 8002456:	d1ec      	bne.n	8002432 <osSemaphoreWait+0x1a>
 8002458:	e7f8      	b.n	800244c <osSemaphoreWait+0x34>
    return osErrorParameter;
 800245a:	2080      	movs	r0, #128	; 0x80
 800245c:	e7ea      	b.n	8002434 <osSemaphoreWait+0x1c>
 800245e:	bf00      	nop
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002464:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002466:	2400      	movs	r4, #0
 8002468:	9401      	str	r4, [sp, #4]
 800246a:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800246e:	b193      	cbz	r3, 8002496 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002470:	a901      	add	r1, sp, #4
 8002472:	f000 fdfe 	bl	8003072 <xQueueGiveFromISR>
 8002476:	2801      	cmp	r0, #1
 8002478:	d113      	bne.n	80024a2 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800247a:	9b01      	ldr	r3, [sp, #4]
 800247c:	b913      	cbnz	r3, 8002484 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800247e:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002480:	b002      	add	sp, #8
 8002482:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <osSemaphoreRelease+0x44>)
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	e7f3      	b.n	800247e <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002496:	461a      	mov	r2, r3
 8002498:	4619      	mov	r1, r3
 800249a:	f000 fc9f 	bl	8002ddc <xQueueGenericSend>
 800249e:	2801      	cmp	r0, #1
 80024a0:	d0ed      	beq.n	800247e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 80024a2:	20ff      	movs	r0, #255	; 0xff
 80024a4:	e7ec      	b.n	8002480 <osSemaphoreRelease+0x1c>
 80024a6:	bf00      	nop
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <osMutexRelease>:
 80024ac:	f7ff bfda 	b.w	8002464 <osSemaphoreRelease>

080024b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80024b0:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80024b2:	6882      	ldr	r2, [r0, #8]
 80024b4:	b14a      	cbz	r2, 80024ca <osMessageCreate+0x1a>
 80024b6:	68c3      	ldr	r3, [r0, #12]
 80024b8:	b13b      	cbz	r3, 80024ca <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80024ba:	2100      	movs	r1, #0
 80024bc:	9100      	str	r1, [sp, #0]
 80024be:	c803      	ldmia	r0, {r0, r1}
 80024c0:	f000 fc12 	bl	8002ce8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80024c4:	b003      	add	sp, #12
 80024c6:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80024ca:	2200      	movs	r2, #0
 80024cc:	c803      	ldmia	r0, {r0, r1}
}
 80024ce:	b003      	add	sp, #12
 80024d0:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80024d4:	f000 bc5c 	b.w	8002d90 <xQueueGenericCreate>

080024d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80024d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80024da:	2400      	movs	r4, #0
{
 80024dc:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80024de:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80024e0:	42a2      	cmp	r2, r4
 80024e2:	bf08      	it	eq
 80024e4:	2201      	moveq	r2, #1
 80024e6:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80024ea:	b1ab      	cbz	r3, 8002518 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80024ec:	4623      	mov	r3, r4
 80024ee:	aa03      	add	r2, sp, #12
 80024f0:	a901      	add	r1, sp, #4
 80024f2:	f000 fd54 	bl	8002f9e <xQueueGenericSendFromISR>
 80024f6:	2801      	cmp	r0, #1
 80024f8:	d002      	beq.n	8002500 <osMessagePut+0x28>
      return osErrorOS;
 80024fa:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80024fc:	b004      	add	sp, #16
 80024fe:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002500:	9b03      	ldr	r3, [sp, #12]
 8002502:	b13b      	cbz	r3, 8002514 <osMessagePut+0x3c>
 8002504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <osMessagePut+0x4c>)
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	f3bf 8f6f 	isb	sy
  return osOK;
 8002514:	2000      	movs	r0, #0
 8002516:	e7f1      	b.n	80024fc <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002518:	a901      	add	r1, sp, #4
 800251a:	f000 fc5f 	bl	8002ddc <xQueueGenericSend>
 800251e:	2801      	cmp	r0, #1
 8002520:	d1eb      	bne.n	80024fa <osMessagePut+0x22>
 8002522:	e7f7      	b.n	8002514 <osMessagePut+0x3c>
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800252a:	2600      	movs	r6, #0
{
 800252c:	b085      	sub	sp, #20
 800252e:	4604      	mov	r4, r0
 8002530:	4617      	mov	r7, r2
 8002532:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8002534:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800253a:	b911      	cbnz	r1, 8002542 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 800253c:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	e016      	b.n	8002570 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 8002542:	9600      	str	r6, [sp, #0]
 8002544:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8002548:	b1cb      	cbz	r3, 800257e <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800254a:	466a      	mov	r2, sp
 800254c:	a902      	add	r1, sp, #8
 800254e:	f000 ff5f 	bl	8003410 <xQueueReceiveFromISR>
 8002552:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8002554:	bf0a      	itet	eq
 8002556:	2310      	moveq	r3, #16
      event.status = osOK;
 8002558:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 800255a:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800255c:	9b00      	ldr	r3, [sp, #0]
 800255e:	b13b      	cbz	r3, 8002570 <osMessageGet+0x48>
 8002560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <osMessageGet+0x70>)
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8002570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002578:	4620      	mov	r0, r4
 800257a:	b005      	add	sp, #20
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800257e:	a902      	add	r1, sp, #8
 8002580:	f000 fdd4 	bl	800312c <xQueueReceive>
 8002584:	2801      	cmp	r0, #1
 8002586:	d101      	bne.n	800258c <osMessageGet+0x64>
      event.status = osEventMessage;
 8002588:	2310      	movs	r3, #16
 800258a:	e7d8      	b.n	800253e <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800258c:	2f00      	cmp	r7, #0
 800258e:	bf0c      	ite	eq
 8002590:	2300      	moveq	r3, #0
 8002592:	2340      	movne	r3, #64	; 0x40
 8002594:	e7d3      	b.n	800253e <osMessageGet+0x16>
 8002596:	bf00      	nop
 8002598:	e000ed04 	.word	0xe000ed04

0800259c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025aa:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025ac:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ae:	6003      	str	r3, [r0, #0]
 80025b0:	4770      	bx	lr

080025b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	6103      	str	r3, [r0, #16]
 80025b6:	4770      	bx	lr

080025b8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80025b8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025ba:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80025bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025c4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80025c6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80025c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80025ca:	3301      	adds	r3, #1
 80025cc:	6003      	str	r3, [r0, #0]
 80025ce:	4770      	bx	lr

080025d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025d0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025d2:	1c53      	adds	r3, r2, #1
{
 80025d4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80025d6:	d10a      	bne.n	80025ee <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025d8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025de:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025e0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80025e2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80025e4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80025e6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80025e8:	3301      	adds	r3, #1
 80025ea:	6003      	str	r3, [r0, #0]
 80025ec:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025ee:	f100 0308 	add.w	r3, r0, #8
 80025f2:	685c      	ldr	r4, [r3, #4]
 80025f4:	6825      	ldr	r5, [r4, #0]
 80025f6:	42aa      	cmp	r2, r5
 80025f8:	d3ef      	bcc.n	80025da <vListInsert+0xa>
 80025fa:	4623      	mov	r3, r4
 80025fc:	e7f9      	b.n	80025f2 <vListInsert+0x22>

080025fe <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025fe:	6841      	ldr	r1, [r0, #4]
 8002600:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8002602:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002604:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002606:	6882      	ldr	r2, [r0, #8]
 8002608:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800260e:	bf08      	it	eq
 8002610:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002612:	2200      	movs	r2, #0
 8002614:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	3a01      	subs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800261c:	6818      	ldr	r0, [r3, #0]
}
 800261e:	4770      	bx	lr

08002620 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8002620:	2300      	movs	r3, #0
{
 8002622:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002624:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <prvTaskExitError+0x44>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	d00a      	beq.n	8002644 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	b672      	cpsid	i
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	b662      	cpsie	i
 8002642:	e7fe      	b.n	8002642 <prvTaskExitError+0x22>
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	b672      	cpsid	i
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0fc      	beq.n	8002658 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800265e:	b002      	add	sp, #8
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20020008 	.word	0x20020008

08002668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002668:	4808      	ldr	r0, [pc, #32]	; (800268c <prvPortStartFirstTask+0x24>)
 800266a:	6800      	ldr	r0, [r0, #0]
 800266c:	6800      	ldr	r0, [r0, #0]
 800266e:	f380 8808 	msr	MSP, r0
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f380 8814 	msr	CONTROL, r0
 800267a:	b662      	cpsie	i
 800267c:	b661      	cpsie	f
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	df00      	svc	0
 8002688:	bf00      	nop
 800268a:	0000      	.short	0x0000
 800268c:	e000ed08 	.word	0xe000ed08

08002690 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002690:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026a0 <vPortEnableVFP+0x10>
 8002694:	6801      	ldr	r1, [r0, #0]
 8002696:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800269a:	6001      	str	r1, [r0, #0]
 800269c:	4770      	bx	lr
 800269e:	0000      	.short	0x0000
 80026a0:	e000ed88 	.word	0xe000ed88

080026a4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026a8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80026ac:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80026b0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026b2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026b6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026b8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80026ba:	f06f 0302 	mvn.w	r3, #2
 80026be:	6203      	str	r3, [r0, #32]
}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	08002621 	.word	0x08002621
	...

080026d0 <SVC_Handler>:
	__asm volatile (
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <pxCurrentTCBConst2>)
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	6808      	ldr	r0, [r1, #0]
 80026d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026da:	f380 8809 	msr	PSP, r0
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f380 8811 	msr	BASEPRI, r0
 80026ea:	4770      	bx	lr
 80026ec:	f3af 8000 	nop.w

080026f0 <pxCurrentTCBConst2>:
 80026f0:	20023cb8 	.word	0x20023cb8

080026f4 <vPortEnterCritical>:
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	b672      	cpsid	i
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	b662      	cpsie	i
	uxCriticalNesting++;
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <vPortEnterCritical+0x44>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800270e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002712:	d10f      	bne.n	8002734 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <vPortEnterCritical+0x48>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f013 0fff 	tst.w	r3, #255	; 0xff
 800271c:	d00a      	beq.n	8002734 <vPortEnterCritical+0x40>
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	b672      	cpsid	i
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	b662      	cpsie	i
 8002732:	e7fe      	b.n	8002732 <vPortEnterCritical+0x3e>
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20020008 	.word	0x20020008
 800273c:	e000ed04 	.word	0xe000ed04

08002740 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <vPortExitCritical+0x28>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	b953      	cbnz	r3, 800275c <vPortExitCritical+0x1c>
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	b672      	cpsid	i
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	b662      	cpsie	i
 800275a:	e7fe      	b.n	800275a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800275c:	3b01      	subs	r3, #1
 800275e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002760:	b90b      	cbnz	r3, 8002766 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	4770      	bx	lr
 8002768:	20020008 	.word	0x20020008
 800276c:	00000000 	.word	0x00000000

08002770 <PendSV_Handler>:
	__asm volatile
 8002770:	f3ef 8009 	mrs	r0, PSP
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <pxCurrentTCBConst>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f01e 0f10 	tst.w	lr, #16
 8002780:	bf08      	it	eq
 8002782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278a:	6010      	str	r0, [r2, #0]
 800278c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002794:	b672      	cpsid	i
 8002796:	f380 8811 	msr	BASEPRI, r0
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	b662      	cpsie	i
 80027a4:	f001 f9e2 	bl	8003b6c <vTaskSwitchContext>
 80027a8:	f04f 0000 	mov.w	r0, #0
 80027ac:	f380 8811 	msr	BASEPRI, r0
 80027b0:	bc09      	pop	{r0, r3}
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	6808      	ldr	r0, [r1, #0]
 80027b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ba:	f01e 0f10 	tst.w	lr, #16
 80027be:	bf08      	it	eq
 80027c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027c4:	f380 8809 	msr	PSP, r0
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <pxCurrentTCBConst>:
 80027d0:	20023cb8 	.word	0x20023cb8

080027d4 <SysTick_Handler>:
{
 80027d4:	b508      	push	{r3, lr}
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	b672      	cpsid	i
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80027ea:	f001 f88b 	bl	8003904 <xTaskIncrementTick>
 80027ee:	b118      	cbz	r0, 80027f8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f4:	4b02      	ldr	r3, [pc, #8]	; (8002800 <SysTick_Handler+0x2c>)
 80027f6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80027f8:	2300      	movs	r3, #0
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	bd08      	pop	{r3, pc}
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002804:	2300      	movs	r3, #0
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002808:	4908      	ldr	r1, [pc, #32]	; (800282c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800280a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800280c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800280e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <vPortSetupTimerInterrupt+0x2c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fbb3 f3f1 	udiv	r3, r3, r1
 800281a:	4906      	ldr	r1, [pc, #24]	; (8002834 <vPortSetupTimerInterrupt+0x30>)
 800281c:	3b01      	subs	r3, #1
 800281e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002820:	2307      	movs	r3, #7
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010
 800282c:	e000e018 	.word	0xe000e018
 8002830:	20020014 	.word	0x20020014
 8002834:	e000e014 	.word	0xe000e014

08002838 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <xPortStartScheduler+0xb4>)
{
 800283a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800283c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800283e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002848:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800284a:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002852:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800285a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800285c:	2207      	movs	r2, #7
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <xPortStartScheduler+0xbc>)
 8002860:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002862:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002866:	1e54      	subs	r4, r2, #1
 8002868:	0600      	lsls	r0, r0, #24
 800286a:	d40f      	bmi.n	800288c <xPortStartScheduler+0x54>
 800286c:	b101      	cbz	r1, 8002870 <xPortStartScheduler+0x38>
 800286e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2a03      	cmp	r2, #3
 8002874:	d013      	beq.n	800289e <xPortStartScheduler+0x66>
	__asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	b672      	cpsid	i
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	b662      	cpsie	i
 800288a:	e7fe      	b.n	800288a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800288c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002890:	2101      	movs	r1, #1
 8002892:	0052      	lsls	r2, r2, #1
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f88d 2003 	strb.w	r2, [sp, #3]
 800289a:	4622      	mov	r2, r4
 800289c:	e7e1      	b.n	8002862 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800289e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 80028a0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028a6:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028a8:	9b01      	ldr	r3, [sp, #4]
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <xPortStartScheduler+0xb4>)
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <xPortStartScheduler+0xc0>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80028b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80028c0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80028c2:	f7ff ff9f 	bl	8002804 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <xPortStartScheduler+0xc4>)
 80028c8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80028ca:	f7ff fee1 	bl	8002690 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <xPortStartScheduler+0xc8>)
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80028d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80028d8:	f7ff fec6 	bl	8002668 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80028dc:	f001 f946 	bl	8003b6c <vTaskSwitchContext>
	prvTaskExitError();
 80028e0:	f7ff fe9e 	bl	8002620 <prvTaskExitError>
}
 80028e4:	4620      	mov	r0, r4
 80028e6:	b002      	add	sp, #8
 80028e8:	bd10      	pop	{r4, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e400 	.word	0xe000e400
 80028f0:	20020098 	.word	0x20020098
 80028f4:	2002009c 	.word	0x2002009c
 80028f8:	e000ed20 	.word	0xe000ed20
 80028fc:	20020008 	.word	0x20020008
 8002900:	e000ef34 	.word	0xe000ef34

08002904 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002904:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d910      	bls.n	800292e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800290c:	4a12      	ldr	r2, [pc, #72]	; (8002958 <vPortValidateInterruptPriority+0x54>)
 800290e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <vPortValidateInterruptPriority+0x58>)
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d90a      	bls.n	800292e <vPortValidateInterruptPriority+0x2a>
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	b672      	cpsid	i
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	b662      	cpsie	i
 800292c:	e7fe      	b.n	800292c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <vPortValidateInterruptPriority+0x5c>)
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <vPortValidateInterruptPriority+0x60>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800293a:	4293      	cmp	r3, r2
 800293c:	d90a      	bls.n	8002954 <vPortValidateInterruptPriority+0x50>
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	b672      	cpsid	i
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	b662      	cpsie	i
 8002952:	e7fe      	b.n	8002952 <vPortValidateInterruptPriority+0x4e>
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e3f0 	.word	0xe000e3f0
 800295c:	20020098 	.word	0x20020098
 8002960:	e000ed0c 	.word	0xe000ed0c
 8002964:	2002009c 	.word	0x2002009c

08002968 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <prvInsertBlockIntoFreeList+0x40>)
{
 800296a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4282      	cmp	r2, r0
 8002970:	d318      	bcc.n	80029a4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002972:	685c      	ldr	r4, [r3, #4]
 8002974:	1919      	adds	r1, r3, r4
 8002976:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002978:	bf01      	itttt	eq
 800297a:	6841      	ldreq	r1, [r0, #4]
 800297c:	4618      	moveq	r0, r3
 800297e:	1909      	addeq	r1, r1, r4
 8002980:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002982:	6844      	ldr	r4, [r0, #4]
 8002984:	1901      	adds	r1, r0, r4
 8002986:	428a      	cmp	r2, r1
 8002988:	d107      	bne.n	800299a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <prvInsertBlockIntoFreeList+0x44>)
 800298c:	6809      	ldr	r1, [r1, #0]
 800298e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002990:	bf1f      	itttt	ne
 8002992:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002994:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002996:	1909      	addne	r1, r1, r4
 8002998:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800299a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800299c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800299e:	bf18      	it	ne
 80029a0:	6018      	strne	r0, [r3, #0]
 80029a2:	bd10      	pop	{r4, pc}
 80029a4:	4613      	mov	r3, r2
 80029a6:	e7e1      	b.n	800296c <prvInsertBlockIntoFreeList+0x4>
 80029a8:	20023cb0 	.word	0x20023cb0
 80029ac:	200200a0 	.word	0x200200a0

080029b0 <pvPortMalloc>:
{
 80029b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80029b6:	f000 ff8f 	bl	80038d8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80029ba:	4940      	ldr	r1, [pc, #256]	; (8002abc <pvPortMalloc+0x10c>)
 80029bc:	4d40      	ldr	r5, [pc, #256]	; (8002ac0 <pvPortMalloc+0x110>)
 80029be:	680b      	ldr	r3, [r1, #0]
 80029c0:	bb0b      	cbnz	r3, 8002a06 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80029c2:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029c4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029c6:	4e40      	ldr	r6, [pc, #256]	; (8002ac8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029c8:	bf1b      	ittet	ne
 80029ca:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029cc:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029d0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029d4:	f020 0007 	bicne.w	r0, r0, #7
 80029d8:	bf1c      	itt	ne
 80029da:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029dc:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80029de:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029e0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029e2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80029e4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80029e6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029e8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80029ec:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 80029ee:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029f0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80029f2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029f4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029f8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029fa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <pvPortMalloc+0x120>)
 80029fe:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a04:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a06:	682f      	ldr	r7, [r5, #0]
 8002a08:	4227      	tst	r7, r4
 8002a0a:	d116      	bne.n	8002a3a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	d042      	beq.n	8002a96 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8002a10:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a14:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a16:	bf1c      	itt	ne
 8002a18:	f023 0307 	bicne.w	r3, r3, #7
 8002a1c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a1e:	b163      	cbz	r3, 8002a3a <pvPortMalloc+0x8a>
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <pvPortMalloc+0x120>)
 8002a22:	6816      	ldr	r6, [r2, #0]
 8002a24:	4690      	mov	r8, r2
 8002a26:	42b3      	cmp	r3, r6
 8002a28:	d807      	bhi.n	8002a3a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002a2a:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <pvPortMalloc+0x118>)
 8002a2c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a2e:	6868      	ldr	r0, [r5, #4]
 8002a30:	4283      	cmp	r3, r0
 8002a32:	d804      	bhi.n	8002a3e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002a34:	6809      	ldr	r1, [r1, #0]
 8002a36:	428d      	cmp	r5, r1
 8002a38:	d107      	bne.n	8002a4a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002a3a:	2400      	movs	r4, #0
 8002a3c:	e02b      	b.n	8002a96 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a3e:	682c      	ldr	r4, [r5, #0]
 8002a40:	2c00      	cmp	r4, #0
 8002a42:	d0f7      	beq.n	8002a34 <pvPortMalloc+0x84>
 8002a44:	462a      	mov	r2, r5
 8002a46:	4625      	mov	r5, r4
 8002a48:	e7f1      	b.n	8002a2e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a4a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a4c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a4e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a50:	1ac2      	subs	r2, r0, r3
 8002a52:	2a10      	cmp	r2, #16
 8002a54:	d911      	bls.n	8002a7a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a56:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a58:	0741      	lsls	r1, r0, #29
 8002a5a:	d00a      	beq.n	8002a72 <pvPortMalloc+0xc2>
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	b672      	cpsid	i
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	b662      	cpsie	i
 8002a70:	e7fe      	b.n	8002a70 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a72:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a74:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a76:	f7ff ff77 	bl	8002968 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a7a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a7c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a7e:	4913      	ldr	r1, [pc, #76]	; (8002acc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a80:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a82:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a84:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8002a86:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a88:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a8c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a8e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a90:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a92:	bf38      	it	cc
 8002a94:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8002a96:	f000 ffc9 	bl	8003a2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a9a:	0763      	lsls	r3, r4, #29
 8002a9c:	d00a      	beq.n	8002ab4 <pvPortMalloc+0x104>
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	b672      	cpsid	i
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	b662      	cpsie	i
 8002ab2:	e7fe      	b.n	8002ab2 <pvPortMalloc+0x102>
}
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aba:	bf00      	nop
 8002abc:	200200a0 	.word	0x200200a0
 8002ac0:	20023ca4 	.word	0x20023ca4
 8002ac4:	200200a4 	.word	0x200200a4
 8002ac8:	20023cb0 	.word	0x20023cb0
 8002acc:	20023cac 	.word	0x20023cac
 8002ad0:	20023ca8 	.word	0x20023ca8

08002ad4 <vPortFree>:
{
 8002ad4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d032      	beq.n	8002b42 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002adc:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <vPortFree+0x70>)
 8002ade:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4213      	tst	r3, r2
 8002ae6:	d10a      	bne.n	8002afe <vPortFree+0x2a>
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	b672      	cpsid	i
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	b662      	cpsie	i
 8002afc:	e7fe      	b.n	8002afc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002afe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002b02:	b151      	cbz	r1, 8002b1a <vPortFree+0x46>
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	b672      	cpsid	i
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	b662      	cpsie	i
 8002b18:	e7fe      	b.n	8002b18 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b1a:	ea23 0302 	bic.w	r3, r3, r2
 8002b1e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002b22:	f000 fed9 	bl	80038d8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <vPortFree+0x74>)
 8002b28:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b2c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	440b      	add	r3, r1
 8002b34:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b36:	f7ff ff17 	bl	8002968 <prvInsertBlockIntoFreeList>
}
 8002b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002b3e:	f000 bf75 	b.w	8003a2c <xTaskResumeAll>
 8002b42:	bd10      	pop	{r4, pc}
 8002b44:	20023ca4 	.word	0x20023ca4
 8002b48:	20023ca8 	.word	0x20023ca8

08002b4c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b50:	f7ff fdd0 	bl	80026f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002b56:	f7ff fdf3 	bl	8002740 <vPortExitCritical>

	return xReturn;
}
 8002b5a:	fab4 f084 	clz	r0, r4
 8002b5e:	0940      	lsrs	r0, r0, #5
 8002b60:	bd10      	pop	{r4, pc}

08002b62 <prvCopyDataToQueue>:
{
 8002b62:	b570      	push	{r4, r5, r6, lr}
 8002b64:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b66:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002b68:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b6a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b6c:	b942      	cbnz	r2, 8002b80 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b6e:	6805      	ldr	r5, [r0, #0]
 8002b70:	b99d      	cbnz	r5, 8002b9a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b72:	6880      	ldr	r0, [r0, #8]
 8002b74:	f001 f94c 	bl	8003e10 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b78:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b7a:	3601      	adds	r6, #1
 8002b7c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002b80:	b96d      	cbnz	r5, 8002b9e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b82:	6840      	ldr	r0, [r0, #4]
 8002b84:	f008 fd1d 	bl	800b5c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b88:	6863      	ldr	r3, [r4, #4]
 8002b8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b8c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b8e:	68a2      	ldr	r2, [r4, #8]
 8002b90:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b92:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b94:	d301      	bcc.n	8002b9a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	e7ed      	b.n	8002b7a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b9e:	68c0      	ldr	r0, [r0, #12]
 8002ba0:	f008 fd0f 	bl	800b5c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ba6:	68e2      	ldr	r2, [r4, #12]
 8002ba8:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002baa:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002bac:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bae:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002bb0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002bb2:	bf3e      	ittt	cc
 8002bb4:	68a2      	ldrcc	r2, [r4, #8]
 8002bb6:	189b      	addcc	r3, r3, r2
 8002bb8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002bba:	2d02      	cmp	r5, #2
 8002bbc:	d1ed      	bne.n	8002b9a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bbe:	b10e      	cbz	r6, 8002bc4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002bc0:	3e01      	subs	r6, #1
 8002bc2:	e7ea      	b.n	8002b9a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	e7d8      	b.n	8002b7a <prvCopyDataToQueue+0x18>

08002bc8 <prvCopyDataFromQueue>:
{
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002bce:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bd0:	b162      	cbz	r2, 8002bec <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bd2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bd4:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bd6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bd8:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bda:	60d9      	str	r1, [r3, #12]
}
 8002bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002be0:	bf24      	itt	cs
 8002be2:	6819      	ldrcs	r1, [r3, #0]
 8002be4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be6:	68d9      	ldr	r1, [r3, #12]
 8002be8:	f008 bceb 	b.w	800b5c2 <memcpy>
}
 8002bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <prvUnlockQueue>:
{
 8002bf2:	b570      	push	{r4, r5, r6, lr}
 8002bf4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002bf6:	f7ff fd7d 	bl	80026f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002bfa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bfe:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002c02:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c04:	2d00      	cmp	r5, #0
 8002c06:	dc14      	bgt.n	8002c32 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002c08:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8002c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002c12:	f7ff fd95 	bl	8002740 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002c16:	f7ff fd6d 	bl	80026f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002c1a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002c1e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	dc12      	bgt.n	8002c4a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002c24:	23ff      	movs	r3, #255	; 0xff
 8002c26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8002c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002c2e:	f7ff bd87 	b.w	8002740 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0e7      	beq.n	8002c08 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f000 ffef 	bl	8003c1c <xTaskRemoveFromEventList>
 8002c3e:	b108      	cbz	r0, 8002c44 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002c40:	f001 f87c 	bl	8003d3c <vTaskMissedYield>
 8002c44:	3d01      	subs	r5, #1
 8002c46:	b26d      	sxtb	r5, r5
 8002c48:	e7dc      	b.n	8002c04 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0e9      	beq.n	8002c24 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 ffe3 	bl	8003c1c <xTaskRemoveFromEventList>
 8002c56:	b108      	cbz	r0, 8002c5c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002c58:	f001 f870 	bl	8003d3c <vTaskMissedYield>
 8002c5c:	3d01      	subs	r5, #1
 8002c5e:	b26d      	sxtb	r5, r5
 8002c60:	e7de      	b.n	8002c20 <prvUnlockQueue+0x2e>
	...

08002c64 <xQueueGenericReset>:
{
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002c68:	4604      	mov	r4, r0
 8002c6a:	b950      	cbnz	r0, 8002c82 <xQueueGenericReset+0x1e>
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	b672      	cpsid	i
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	b662      	cpsie	i
 8002c80:	e7fe      	b.n	8002c80 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8002c82:	f7ff fd37 	bl	80026f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c8e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c90:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c92:	1a1b      	subs	r3, r3, r0
 8002c94:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c96:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c98:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c9a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c9c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c9e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002ca0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ca4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002ca8:	b995      	cbnz	r5, 8002cd0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002caa:	6923      	ldr	r3, [r4, #16]
 8002cac:	b163      	cbz	r3, 8002cc8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cae:	f104 0010 	add.w	r0, r4, #16
 8002cb2:	f000 ffb3 	bl	8003c1c <xTaskRemoveFromEventList>
 8002cb6:	b138      	cbz	r0, 8002cc8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <xQueueGenericReset+0x80>)
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002cc8:	f7ff fd3a 	bl	8002740 <vPortExitCritical>
}
 8002ccc:	2001      	movs	r0, #1
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cd0:	f104 0010 	add.w	r0, r4, #16
 8002cd4:	f7ff fc62 	bl	800259c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cdc:	f7ff fc5e 	bl	800259c <vListInitialise>
 8002ce0:	e7f2      	b.n	8002cc8 <xQueueGenericReset+0x64>
 8002ce2:	bf00      	nop
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <xQueueGenericCreateStatic>:
	{
 8002ce8:	b513      	push	{r0, r1, r4, lr}
 8002cea:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cec:	b950      	cbnz	r0, 8002d04 <xQueueGenericCreateStatic+0x1c>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	b672      	cpsid	i
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	b662      	cpsie	i
 8002d02:	e7fe      	b.n	8002d02 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8002d04:	b953      	cbnz	r3, 8002d1c <xQueueGenericCreateStatic+0x34>
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	b672      	cpsid	i
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	b662      	cpsie	i
 8002d1a:	e7fe      	b.n	8002d1a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d1c:	b15a      	cbz	r2, 8002d36 <xQueueGenericCreateStatic+0x4e>
 8002d1e:	bb09      	cbnz	r1, 8002d64 <xQueueGenericCreateStatic+0x7c>
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	b672      	cpsid	i
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	b662      	cpsie	i
 8002d34:	e7fe      	b.n	8002d34 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d36:	b1a9      	cbz	r1, 8002d64 <xQueueGenericCreateStatic+0x7c>
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	b672      	cpsid	i
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	b662      	cpsie	i
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericCreateStatic+0x64>
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	b672      	cpsid	i
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	b662      	cpsie	i
 8002d62:	e7fe      	b.n	8002d62 <xQueueGenericCreateStatic+0x7a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d64:	2348      	movs	r3, #72	; 0x48
 8002d66:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d68:	9b01      	ldr	r3, [sp, #4]
 8002d6a:	2b48      	cmp	r3, #72	; 0x48
 8002d6c:	d1ef      	bne.n	8002d4e <xQueueGenericCreateStatic+0x66>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	bf08      	it	eq
 8002d72:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d74:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d76:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
 8002d78:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d7a:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d7c:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d82:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d84:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d86:	f7ff ff6d 	bl	8002c64 <xQueueGenericReset>
	}
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd10      	pop	{r4, pc}

08002d90 <xQueueGenericCreate>:
	{
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d94:	4606      	mov	r6, r0
 8002d96:	b950      	cbnz	r0, 8002dae <xQueueGenericCreate+0x1e>
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	b672      	cpsid	i
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	b662      	cpsie	i
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002db0:	3048      	adds	r0, #72	; 0x48
 8002db2:	f7ff fdfd 	bl	80029b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002db6:	4604      	mov	r4, r0
 8002db8:	b150      	cbz	r0, 8002dd0 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dc0:	b945      	cbnz	r5, 8002dd4 <xQueueGenericCreate+0x44>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dc2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002dc4:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dc6:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8002dc8:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff ff4a 	bl	8002c64 <xQueueGenericReset>
	}
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dd4:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dd8:	6003      	str	r3, [r0, #0]
 8002dda:	e7f3      	b.n	8002dc4 <xQueueGenericCreate+0x34>

08002ddc <xQueueGenericSend>:
{
 8002ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002de0:	4689      	mov	r9, r1
 8002de2:	9201      	str	r2, [sp, #4]
 8002de4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002de6:	4604      	mov	r4, r0
 8002de8:	b950      	cbnz	r0, 8002e00 <xQueueGenericSend+0x24>
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	b672      	cpsid	i
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	b662      	cpsie	i
 8002dfe:	e7fe      	b.n	8002dfe <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e00:	2900      	cmp	r1, #0
 8002e02:	f040 808c 	bne.w	8002f1e <xQueueGenericSend+0x142>
 8002e06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8088 	beq.w	8002f1e <xQueueGenericSend+0x142>
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	b672      	cpsid	i
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	b662      	cpsie	i
 8002e22:	e7fe      	b.n	8002e22 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e24:	9e01      	ldr	r6, [sp, #4]
 8002e26:	2e00      	cmp	r6, #0
 8002e28:	f000 8084 	beq.w	8002f34 <xQueueGenericSend+0x158>
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	b672      	cpsid	i
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	b662      	cpsie	i
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e42:	9d01      	ldr	r5, [sp, #4]
 8002e44:	b91d      	cbnz	r5, 8002e4e <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8002e46:	f7ff fc7b 	bl	8002740 <vPortExitCritical>
			return errQUEUE_FULL;
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e058      	b.n	8002f00 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8002e4e:	b916      	cbnz	r6, 8002e56 <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e50:	a802      	add	r0, sp, #8
 8002e52:	f000 ff27 	bl	8003ca4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002e56:	f7ff fc73 	bl	8002740 <vPortExitCritical>
		vTaskSuspendAll();
 8002e5a:	f000 fd3d 	bl	80038d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e5e:	f7ff fc49 	bl	80026f4 <vPortEnterCritical>
 8002e62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d101      	bne.n	8002e6e <xQueueGenericSend+0x92>
 8002e6a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8002e6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002e72:	2bff      	cmp	r3, #255	; 0xff
 8002e74:	d101      	bne.n	8002e7a <xQueueGenericSend+0x9e>
 8002e76:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8002e7a:	f7ff fc61 	bl	8002740 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	a802      	add	r0, sp, #8
 8002e82:	f000 ff1b 	bl	8003cbc <xTaskCheckForTimeOut>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d143      	bne.n	8002f12 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e8a:	f7ff fc33 	bl	80026f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002e90:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002e92:	f7ff fc55 	bl	8002740 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e96:	42ae      	cmp	r6, r5
 8002e98:	d135      	bne.n	8002f06 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e9a:	9901      	ldr	r1, [sp, #4]
 8002e9c:	f104 0010 	add.w	r0, r4, #16
 8002ea0:	f000 fea0 	bl	8003be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f7ff fea4 	bl	8002bf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eaa:	f000 fdbf 	bl	8003a2c <xTaskResumeAll>
 8002eae:	b938      	cbnz	r0, 8002ec0 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8002eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002eb4:	f8ca 3000 	str.w	r3, [sl]
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002ec2:	f7ff fc17 	bl	80026f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ec6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d301      	bcc.n	8002ed2 <xQueueGenericSend+0xf6>
 8002ece:	2f02      	cmp	r7, #2
 8002ed0:	d1b7      	bne.n	8002e42 <xQueueGenericSend+0x66>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed2:	463a      	mov	r2, r7
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff fe43 	bl	8002b62 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ede:	b11b      	cbz	r3, 8002ee8 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ee4:	f000 fe9a 	bl	8003c1c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002ee8:	b138      	cbz	r0, 8002efa <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <xQueueGenericSend+0x178>)
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002efa:	f7ff fc21 	bl	8002740 <vPortExitCritical>
				return pdPASS;
 8002efe:	2001      	movs	r0, #1
}
 8002f00:	b004      	add	sp, #16
 8002f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff fe73 	bl	8002bf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f0c:	f000 fd8e 	bl	8003a2c <xTaskResumeAll>
 8002f10:	e7d6      	b.n	8002ec0 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff fe6d 	bl	8002bf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f18:	f000 fd88 	bl	8003a2c <xTaskResumeAll>
 8002f1c:	e795      	b.n	8002e4a <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f1e:	2f02      	cmp	r7, #2
 8002f20:	d102      	bne.n	8002f28 <xQueueGenericSend+0x14c>
 8002f22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10a      	bne.n	8002f3e <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f28:	f000 ff0e 	bl	8003d48 <xTaskGetSchedulerState>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	f43f af79 	beq.w	8002e24 <xQueueGenericSend+0x48>
 8002f32:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002f34:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002f38:	f8df a018 	ldr.w	sl, [pc, #24]	; 8002f54 <xQueueGenericSend+0x178>
 8002f3c:	e7c1      	b.n	8002ec2 <xQueueGenericSend+0xe6>
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	b672      	cpsid	i
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	b662      	cpsie	i
 8002f52:	e7fe      	b.n	8002f52 <xQueueGenericSend+0x176>
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002f58:	b138      	cbz	r0, 8002f6a <prvInitialiseMutex+0x12>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f5e:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f60:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f62:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002f64:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f66:	f7ff bf39 	b.w	8002ddc <xQueueGenericSend>
 8002f6a:	4770      	bx	lr

08002f6c <xQueueCreateMutex>:
	{
 8002f6c:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002f6e:	4602      	mov	r2, r0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff ff0c 	bl	8002d90 <xQueueGenericCreate>
 8002f78:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f7a:	f7ff ffed 	bl	8002f58 <prvInitialiseMutex>
	}
 8002f7e:	4620      	mov	r0, r4
 8002f80:	bd10      	pop	{r4, pc}

08002f82 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002f82:	2200      	movs	r2, #0
 8002f84:	460b      	mov	r3, r1
	{
 8002f86:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002f88:	4611      	mov	r1, r2
 8002f8a:	9000      	str	r0, [sp, #0]
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7ff feab 	bl	8002ce8 <xQueueGenericCreateStatic>
 8002f92:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002f94:	f7ff ffe0 	bl	8002f58 <prvInitialiseMutex>
	}
 8002f98:	4620      	mov	r0, r4
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd10      	pop	{r4, pc}

08002f9e <xQueueGenericSendFromISR>:
{
 8002f9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa2:	4688      	mov	r8, r1
 8002fa4:	4691      	mov	r9, r2
 8002fa6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002fa8:	4604      	mov	r4, r0
 8002faa:	b950      	cbnz	r0, 8002fc2 <xQueueGenericSendFromISR+0x24>
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	b672      	cpsid	i
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	b662      	cpsie	i
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fc2:	bb19      	cbnz	r1, 800300c <xQueueGenericSendFromISR+0x6e>
 8002fc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fc6:	b30b      	cbz	r3, 800300c <xQueueGenericSendFromISR+0x6e>
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	b672      	cpsid	i
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	b662      	cpsie	i
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002fe2:	f000 fe1b 	bl	8003c1c <xTaskRemoveFromEventList>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d036      	beq.n	8003058 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8002fea:	f1b9 0f00 	cmp.w	r9, #0
 8002fee:	d033      	beq.n	8003058 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002ff6:	f386 8811 	msr	BASEPRI, r6
}
 8002ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ffe:	3501      	adds	r5, #1
 8003000:	b26d      	sxtb	r5, r5
 8003002:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003006:	e027      	b.n	8003058 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8003008:	2000      	movs	r0, #0
 800300a:	e7f4      	b.n	8002ff6 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800300c:	2f02      	cmp	r7, #2
 800300e:	d102      	bne.n	8003016 <xQueueGenericSendFromISR+0x78>
 8003010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d122      	bne.n	800305c <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003016:	f7ff fc75 	bl	8002904 <vPortValidateInterruptPriority>
	__asm volatile
 800301a:	f3ef 8611 	mrs	r6, BASEPRI
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	b672      	cpsid	i
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003032:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003036:	429a      	cmp	r2, r3
 8003038:	d301      	bcc.n	800303e <xQueueGenericSendFromISR+0xa0>
 800303a:	2f02      	cmp	r7, #2
 800303c:	d1e4      	bne.n	8003008 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 800303e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003042:	463a      	mov	r2, r7
 8003044:	4641      	mov	r1, r8
 8003046:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003048:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800304a:	f7ff fd8a 	bl	8002b62 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800304e:	1c6b      	adds	r3, r5, #1
 8003050:	d1d5      	bne.n	8002ffe <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1c2      	bne.n	8002fde <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8003058:	2001      	movs	r0, #1
 800305a:	e7cc      	b.n	8002ff6 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	b672      	cpsid	i
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	b662      	cpsie	i
 8003070:	e7fe      	b.n	8003070 <xQueueGenericSendFromISR+0xd2>

08003072 <xQueueGiveFromISR>:
{
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003076:	4604      	mov	r4, r0
 8003078:	b950      	cbnz	r0, 8003090 <xQueueGiveFromISR+0x1e>
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	b672      	cpsid	i
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	b662      	cpsie	i
 800308e:	e7fe      	b.n	800308e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003090:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003092:	b153      	cbz	r3, 80030aa <xQueueGiveFromISR+0x38>
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	b672      	cpsid	i
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	b662      	cpsie	i
 80030a8:	e7fe      	b.n	80030a8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030aa:	6803      	ldr	r3, [r0, #0]
 80030ac:	b913      	cbnz	r3, 80030b4 <xQueueGiveFromISR+0x42>
 80030ae:	6883      	ldr	r3, [r0, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d130      	bne.n	8003116 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030b4:	f7ff fc26 	bl	8002904 <vPortValidateInterruptPriority>
	__asm volatile
 80030b8:	f3ef 8611 	mrs	r6, BASEPRI
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	b672      	cpsid	i
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80030d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d301      	bcc.n	80030dc <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 80030d8:	2000      	movs	r0, #0
 80030da:	e014      	b.n	8003106 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 80030dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030e0:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80030e2:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030e4:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	d110      	bne.n	800310c <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ec:	b90b      	cbnz	r3, 80030f2 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80030ee:	2001      	movs	r0, #1
 80030f0:	e009      	b.n	8003106 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030f6:	f000 fd91 	bl	8003c1c <xTaskRemoveFromEventList>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d0f7      	beq.n	80030ee <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80030fe:	2d00      	cmp	r5, #0
 8003100:	d0f5      	beq.n	80030ee <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003102:	2001      	movs	r0, #1
 8003104:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003106:	f386 8811 	msr	BASEPRI, r6
}
 800310a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800310c:	3301      	adds	r3, #1
 800310e:	b25b      	sxtb	r3, r3
 8003110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003114:	e7eb      	b.n	80030ee <xQueueGiveFromISR+0x7c>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	b672      	cpsid	i
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	b662      	cpsie	i
 800312a:	e7fe      	b.n	800312a <xQueueGiveFromISR+0xb8>

0800312c <xQueueReceive>:
{
 800312c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003130:	b085      	sub	sp, #20
 8003132:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 8003134:	4604      	mov	r4, r0
{
 8003136:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003138:	b950      	cbnz	r0, 8003150 <xQueueReceive+0x24>
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	b672      	cpsid	i
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	b662      	cpsie	i
 800314e:	e7fe      	b.n	800314e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003150:	2900      	cmp	r1, #0
 8003152:	f040 808a 	bne.w	800326a <xQueueReceive+0x13e>
 8003156:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8086 	beq.w	800326a <xQueueReceive+0x13e>
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	b672      	cpsid	i
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	b662      	cpsie	i
 8003172:	e7fe      	b.n	8003172 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003174:	9e01      	ldr	r6, [sp, #4]
 8003176:	2e00      	cmp	r6, #0
 8003178:	d07c      	beq.n	8003274 <xQueueReceive+0x148>
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	b672      	cpsid	i
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	b662      	cpsie	i
 800318e:	e7fe      	b.n	800318e <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003190:	9d01      	ldr	r5, [sp, #4]
 8003192:	b91d      	cbnz	r5, 800319c <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 8003194:	f7ff fad4 	bl	8002740 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003198:	2000      	movs	r0, #0
 800319a:	e052      	b.n	8003242 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800319c:	b916      	cbnz	r6, 80031a4 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800319e:	a802      	add	r0, sp, #8
 80031a0:	f000 fd80 	bl	8003ca4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80031a4:	f7ff facc 	bl	8002740 <vPortExitCritical>
		vTaskSuspendAll();
 80031a8:	f000 fb96 	bl	80038d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ac:	f7ff faa2 	bl	80026f4 <vPortEnterCritical>
 80031b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80031b4:	2bff      	cmp	r3, #255	; 0xff
 80031b6:	d101      	bne.n	80031bc <xQueueReceive+0x90>
 80031b8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80031bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80031c0:	2bff      	cmp	r3, #255	; 0xff
 80031c2:	d101      	bne.n	80031c8 <xQueueReceive+0x9c>
 80031c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031c8:	f7ff faba 	bl	8002740 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031cc:	a901      	add	r1, sp, #4
 80031ce:	a802      	add	r0, sp, #8
 80031d0:	f000 fd74 	bl	8003cbc <xTaskCheckForTimeOut>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d13d      	bne.n	8003254 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff fcb7 	bl	8002b4c <prvIsQueueEmpty>
 80031de:	b398      	cbz	r0, 8003248 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031e0:	9901      	ldr	r1, [sp, #4]
 80031e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80031e6:	f000 fcfd 	bl	8003be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff fd01 	bl	8002bf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031f0:	f000 fc1c 	bl	8003a2c <xTaskResumeAll>
 80031f4:	b938      	cbnz	r0, 8003206 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80031f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031fa:	f8c9 3000 	str.w	r3, [r9]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003208:	f7ff fa74 	bl	80026f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320e:	2d00      	cmp	r5, #0
 8003210:	d0be      	beq.n	8003190 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003212:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003214:	4641      	mov	r1, r8
 8003216:	4620      	mov	r0, r4
 8003218:	f7ff fcd6 	bl	8002bc8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800321c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	b163      	cbz	r3, 800323c <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003222:	f104 0010 	add.w	r0, r4, #16
 8003226:	f000 fcf9 	bl	8003c1c <xTaskRemoveFromEventList>
 800322a:	b138      	cbz	r0, 800323c <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800322c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <xQueueReceive+0x150>)
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800323c:	f7ff fa80 	bl	8002740 <vPortExitCritical>
				return pdPASS;
 8003240:	2001      	movs	r0, #1
}
 8003242:	b005      	add	sp, #20
 8003244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff fcd2 	bl	8002bf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800324e:	f000 fbed 	bl	8003a2c <xTaskResumeAll>
 8003252:	e7d8      	b.n	8003206 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff fccc 	bl	8002bf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800325a:	f000 fbe7 	bl	8003a2c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff fc74 	bl	8002b4c <prvIsQueueEmpty>
 8003264:	2800      	cmp	r0, #0
 8003266:	d0ce      	beq.n	8003206 <xQueueReceive+0xda>
 8003268:	e796      	b.n	8003198 <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800326a:	f000 fd6d 	bl	8003d48 <xTaskGetSchedulerState>
 800326e:	2800      	cmp	r0, #0
 8003270:	d080      	beq.n	8003174 <xQueueReceive+0x48>
 8003272:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003274:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003276:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800327c <xQueueReceive+0x150>
 800327a:	e7c5      	b.n	8003208 <xQueueReceive+0xdc>
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueSemaphoreTake>:
{
 8003280:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8003284:	4604      	mov	r4, r0
{
 8003286:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003288:	b950      	cbnz	r0, 80032a0 <xQueueSemaphoreTake+0x20>
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	b672      	cpsid	i
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	b662      	cpsie	i
 800329e:	e7fe      	b.n	800329e <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80032a0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80032a2:	b155      	cbz	r5, 80032ba <xQueueSemaphoreTake+0x3a>
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	b672      	cpsid	i
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	b662      	cpsie	i
 80032b8:	e7fe      	b.n	80032b8 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ba:	f000 fd45 	bl	8003d48 <xTaskGetSchedulerState>
 80032be:	b918      	cbnz	r0, 80032c8 <xQueueSemaphoreTake+0x48>
 80032c0:	9d01      	ldr	r5, [sp, #4]
 80032c2:	2d00      	cmp	r5, #0
 80032c4:	f040 8097 	bne.w	80033f6 <xQueueSemaphoreTake+0x176>
 80032c8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80032ca:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80032cc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800340c <xQueueSemaphoreTake+0x18c>
		taskENTER_CRITICAL();
 80032d0:	f7ff fa10 	bl	80026f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032d6:	b1e3      	cbz	r3, 8003312 <xQueueSemaphoreTake+0x92>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032d8:	3b01      	subs	r3, #1
 80032da:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	b913      	cbnz	r3, 80032e6 <xQueueSemaphoreTake+0x66>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032e0:	f000 fe46 	bl	8003f70 <pvTaskIncrementMutexHeldCount>
 80032e4:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	b163      	cbz	r3, 8003304 <xQueueSemaphoreTake+0x84>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ea:	f104 0010 	add.w	r0, r4, #16
 80032ee:	f000 fc95 	bl	8003c1c <xTaskRemoveFromEventList>
 80032f2:	b138      	cbz	r0, 8003304 <xQueueSemaphoreTake+0x84>
						queueYIELD_IF_USING_PREEMPTION();
 80032f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f8:	4b44      	ldr	r3, [pc, #272]	; (800340c <xQueueSemaphoreTake+0x18c>)
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8003304:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8003306:	f7ff fa1b 	bl	8002740 <vPortExitCritical>
}
 800330a:	4628      	mov	r0, r5
 800330c:	b004      	add	sp, #16
 800330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8003312:	9b01      	ldr	r3, [sp, #4]
 8003314:	b973      	cbnz	r3, 8003334 <xQueueSemaphoreTake+0xb4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003316:	b155      	cbz	r5, 800332e <xQueueSemaphoreTake+0xae>
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	b672      	cpsid	i
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	b662      	cpsie	i
 800332c:	e7fe      	b.n	800332c <xQueueSemaphoreTake+0xac>
					taskEXIT_CRITICAL();
 800332e:	f7ff fa07 	bl	8002740 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003332:	e7ea      	b.n	800330a <xQueueSemaphoreTake+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 8003334:	b916      	cbnz	r6, 800333c <xQueueSemaphoreTake+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003336:	a802      	add	r0, sp, #8
 8003338:	f000 fcb4 	bl	8003ca4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800333c:	f7ff fa00 	bl	8002740 <vPortExitCritical>
		vTaskSuspendAll();
 8003340:	f000 faca 	bl	80038d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003344:	f7ff f9d6 	bl	80026f4 <vPortEnterCritical>
 8003348:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800334c:	2bff      	cmp	r3, #255	; 0xff
 800334e:	d101      	bne.n	8003354 <xQueueSemaphoreTake+0xd4>
 8003350:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003354:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003358:	2bff      	cmp	r3, #255	; 0xff
 800335a:	d101      	bne.n	8003360 <xQueueSemaphoreTake+0xe0>
 800335c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003360:	f7ff f9ee 	bl	8002740 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003364:	a901      	add	r1, sp, #4
 8003366:	a802      	add	r0, sp, #8
 8003368:	f000 fca8 	bl	8003cbc <xTaskCheckForTimeOut>
 800336c:	bb40      	cbnz	r0, 80033c0 <xQueueSemaphoreTake+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff fbec 	bl	8002b4c <prvIsQueueEmpty>
 8003374:	b1f0      	cbz	r0, 80033b4 <xQueueSemaphoreTake+0x134>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	b93b      	cbnz	r3, 800338a <xQueueSemaphoreTake+0x10a>
						taskENTER_CRITICAL();
 800337a:	f7ff f9bb 	bl	80026f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800337e:	68a0      	ldr	r0, [r4, #8]
 8003380:	f000 fcf2 	bl	8003d68 <xTaskPriorityInherit>
 8003384:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003386:	f7ff f9db 	bl	8002740 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800338a:	9901      	ldr	r1, [sp, #4]
 800338c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003390:	f000 fc28 	bl	8003be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff fc2c 	bl	8002bf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800339a:	f000 fb47 	bl	8003a2c <xTaskResumeAll>
 800339e:	b938      	cbnz	r0, 80033b0 <xQueueSemaphoreTake+0x130>
					portYIELD_WITHIN_API();
 80033a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033a4:	f8c8 3000 	str.w	r3, [r8]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	2601      	movs	r6, #1
 80033b2:	e78d      	b.n	80032d0 <xQueueSemaphoreTake+0x50>
				prvUnlockQueue( pxQueue );
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7ff fc1c 	bl	8002bf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033ba:	f000 fb37 	bl	8003a2c <xTaskResumeAll>
 80033be:	e7f7      	b.n	80033b0 <xQueueSemaphoreTake+0x130>
			prvUnlockQueue( pxQueue );
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7ff fc16 	bl	8002bf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033c6:	f000 fb31 	bl	8003a2c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff fbbe 	bl	8002b4c <prvIsQueueEmpty>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d0ed      	beq.n	80033b0 <xQueueSemaphoreTake+0x130>
					if( xInheritanceOccurred != pdFALSE )
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	d098      	beq.n	800330a <xQueueSemaphoreTake+0x8a>
						taskENTER_CRITICAL();
 80033d8:	f7ff f98c 	bl	80026f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033de:	b119      	cbz	r1, 80033e8 <xQueueSemaphoreTake+0x168>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033e8:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80033ea:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033ec:	f000 fd64 	bl	8003eb8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80033f0:	f7ff f9a6 	bl	8002740 <vPortExitCritical>
 80033f4:	e789      	b.n	800330a <xQueueSemaphoreTake+0x8a>
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	b672      	cpsid	i
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	b662      	cpsie	i
 800340a:	e7fe      	b.n	800340a <xQueueSemaphoreTake+0x18a>
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <xQueueReceiveFromISR>:
{
 8003410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003414:	4689      	mov	r9, r1
 8003416:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8003418:	4605      	mov	r5, r0
 800341a:	b950      	cbnz	r0, 8003432 <xQueueReceiveFromISR+0x22>
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	b672      	cpsid	i
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	b662      	cpsie	i
 8003430:	e7fe      	b.n	8003430 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003432:	bb81      	cbnz	r1, 8003496 <xQueueReceiveFromISR+0x86>
 8003434:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003436:	b373      	cbz	r3, 8003496 <xQueueReceiveFromISR+0x86>
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	b672      	cpsid	i
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	b662      	cpsie	i
 800344c:	e7fe      	b.n	800344c <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800344e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003452:	4649      	mov	r1, r9
 8003454:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003456:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8003458:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800345a:	f7ff fbb5 	bl	8002bc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800345e:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003460:	1c73      	adds	r3, r6, #1
 8003462:	d113      	bne.n	800348c <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003464:	692b      	ldr	r3, [r5, #16]
 8003466:	b90b      	cbnz	r3, 800346c <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8003468:	2001      	movs	r0, #1
 800346a:	e00b      	b.n	8003484 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346c:	f105 0010 	add.w	r0, r5, #16
 8003470:	f000 fbd4 	bl	8003c1c <xTaskRemoveFromEventList>
 8003474:	2800      	cmp	r0, #0
 8003476:	d0f7      	beq.n	8003468 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8003478:	f1b8 0f00 	cmp.w	r8, #0
 800347c:	d0f4      	beq.n	8003468 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800347e:	2001      	movs	r0, #1
 8003480:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003484:	f387 8811 	msr	BASEPRI, r7
}
 8003488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800348c:	3601      	adds	r6, #1
 800348e:	b276      	sxtb	r6, r6
 8003490:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003494:	e7e8      	b.n	8003468 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003496:	f7ff fa35 	bl	8002904 <vPortValidateInterruptPriority>
	__asm volatile
 800349a:	f3ef 8711 	mrs	r7, BASEPRI
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	b672      	cpsid	i
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034b2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034b4:	2c00      	cmp	r4, #0
 80034b6:	d1ca      	bne.n	800344e <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 80034b8:	4620      	mov	r0, r4
 80034ba:	e7e3      	b.n	8003484 <xQueueReceiveFromISR+0x74>

080034bc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c0:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034c2:	f7ff f917 	bl	80026f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80034c8:	4c2d      	ldr	r4, [pc, #180]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4f2d      	ldr	r7, [pc, #180]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034ce:	3201      	adds	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80034d2:	6825      	ldr	r5, [r4, #0]
 80034d4:	2d00      	cmp	r5, #0
 80034d6:	d145      	bne.n	8003564 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034d8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d11c      	bne.n	800351a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034e0:	1978      	adds	r0, r7, r5
 80034e2:	3514      	adds	r5, #20
 80034e4:	f7ff f85a 	bl	800259c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034e8:	2d8c      	cmp	r5, #140	; 0x8c
 80034ea:	d1f9      	bne.n	80034e0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034ec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80035b0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80034f0:	4d25      	ldr	r5, [pc, #148]	; (8003588 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80034f2:	4640      	mov	r0, r8
 80034f4:	f7ff f852 	bl	800259c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034f8:	4628      	mov	r0, r5
 80034fa:	f7ff f84f 	bl	800259c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034fe:	4823      	ldr	r0, [pc, #140]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 8003500:	f7ff f84c 	bl	800259c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003504:	4822      	ldr	r0, [pc, #136]	; (8003590 <prvAddNewTaskToReadyList+0xd4>)
 8003506:	f7ff f849 	bl	800259c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800350a:	4822      	ldr	r0, [pc, #136]	; (8003594 <prvAddNewTaskToReadyList+0xd8>)
 800350c:	f7ff f846 	bl	800259c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <prvAddNewTaskToReadyList+0xdc>)
 8003512:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003516:	4b21      	ldr	r3, [pc, #132]	; (800359c <prvAddNewTaskToReadyList+0xe0>)
 8003518:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800351c:	4921      	ldr	r1, [pc, #132]	; (80035a4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800351e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003520:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003522:	3301      	adds	r3, #1
 8003524:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003526:	2301      	movs	r3, #1
 8003528:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800352a:	4093      	lsls	r3, r2
 800352c:	4303      	orrs	r3, r0
 800352e:	2014      	movs	r0, #20
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	1d31      	adds	r1, r6, #4
 8003534:	fb00 7002 	mla	r0, r0, r2, r7
 8003538:	f7ff f83e 	bl	80025b8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800353c:	f7ff f900 	bl	8002740 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <prvAddNewTaskToReadyList+0xec>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b163      	cbz	r3, 8003560 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d207      	bcs.n	8003560 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <prvAddNewTaskToReadyList+0xf0>)
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <prvAddNewTaskToReadyList+0xec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1d6      	bne.n	800351a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003572:	429a      	cmp	r2, r3
 8003574:	d8d1      	bhi.n	800351a <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8003576:	6026      	str	r6, [r4, #0]
 8003578:	e7cf      	b.n	800351a <prvAddNewTaskToReadyList+0x5e>
 800357a:	bf00      	nop
 800357c:	20023d50 	.word	0x20023d50
 8003580:	20023cb8 	.word	0x20023cb8
 8003584:	20023cc4 	.word	0x20023cc4
 8003588:	20023d7c 	.word	0x20023d7c
 800358c:	20023d98 	.word	0x20023d98
 8003590:	20023dc4 	.word	0x20023dc4
 8003594:	20023db0 	.word	0x20023db0
 8003598:	20023cbc 	.word	0x20023cbc
 800359c:	20023cc0 	.word	0x20023cc0
 80035a0:	20023d60 	.word	0x20023d60
 80035a4:	20023d64 	.word	0x20023d64
 80035a8:	20023dac 	.word	0x20023dac
 80035ac:	e000ed04 	.word	0xe000ed04
 80035b0:	20023d68 	.word	0x20023d68

080035b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <prvResetNextTaskUnblockTime+0x1c>)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <prvResetNextTaskUnblockTime+0x20>)
 80035bc:	b919      	cbnz	r1, 80035c6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035be:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035ca:	68d2      	ldr	r2, [r2, #12]
 80035cc:	6852      	ldr	r2, [r2, #4]
 80035ce:	e7f8      	b.n	80035c2 <prvResetNextTaskUnblockTime+0xe>
 80035d0:	20023cbc 	.word	0x20023cbc
 80035d4:	20023d90 	.word	0x20023d90

080035d8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80035d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80035e2:	4680      	mov	r8, r0
 80035e4:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035e6:	3a01      	subs	r2, #1
 80035e8:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80035ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035ec:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035f0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80035f4:	b391      	cbz	r1, 800365c <prvInitialiseNewTask.isra.2+0x84>
 80035f6:	1e4b      	subs	r3, r1, #1
 80035f8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80035fc:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035fe:	7858      	ldrb	r0, [r3, #1]
 8003600:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8003604:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003608:	b108      	cbz	r0, 800360e <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800360a:	428b      	cmp	r3, r1
 800360c:	d1f7      	bne.n	80035fe <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800360e:	2300      	movs	r3, #0
 8003610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003614:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8003616:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800361a:	1d20      	adds	r0, r4, #4
 800361c:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800361e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8003622:	bf28      	it	cs
 8003624:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003626:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003628:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800362a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800362e:	f7fe ffc0 	bl	80025b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003632:	f104 0018 	add.w	r0, r4, #24
 8003636:	f7fe ffbc 	bl	80025b2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800363a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800363e:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003640:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003642:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003644:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003646:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003648:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800364a:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800364e:	f7ff f829 	bl	80026a4 <pxPortInitialiseStack>
 8003652:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003654:	b107      	cbz	r7, 8003658 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003656:	603c      	str	r4, [r7, #0]
 8003658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800365c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8003660:	e7d8      	b.n	8003614 <prvInitialiseNewTask.isra.2+0x3c>

08003662 <prvDeleteTCB>:
	{
 8003662:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003664:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003668:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800366a:	b93b      	cbnz	r3, 800367c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800366c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800366e:	f7ff fa31 	bl	8002ad4 <vPortFree>
				vPortFree( pxTCB );
 8003672:	4620      	mov	r0, r4
	}
 8003674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003678:	f7ff ba2c 	b.w	8002ad4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800367c:	2b01      	cmp	r3, #1
 800367e:	d0f9      	beq.n	8003674 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003680:	2b02      	cmp	r3, #2
 8003682:	d00a      	beq.n	800369a <prvDeleteTCB+0x38>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	b672      	cpsid	i
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	b662      	cpsie	i
 8003698:	e7fe      	b.n	8003698 <prvDeleteTCB+0x36>
 800369a:	bd10      	pop	{r4, pc}

0800369c <prvIdleTask>:
{
 800369c:	b580      	push	{r7, lr}
				taskYIELD();
 800369e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80036fc <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a2:	4f12      	ldr	r7, [pc, #72]	; (80036ec <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a4:	4c12      	ldr	r4, [pc, #72]	; (80036f0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80036a6:	4d13      	ldr	r5, [pc, #76]	; (80036f4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	b963      	cbnz	r3, 80036c6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <prvIdleTask+0x5c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d9f8      	bls.n	80036a6 <prvIdleTask+0xa>
				taskYIELD();
 80036b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036b8:	f8c8 3000 	str.w	r3, [r8]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	e7ee      	b.n	80036a4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80036c6:	f7ff f815 	bl	80026f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ce:	1d30      	adds	r0, r6, #4
 80036d0:	f7fe ff95 	bl	80025fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80036e0:	f7ff f82e 	bl	8002740 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80036e4:	4630      	mov	r0, r6
 80036e6:	f7ff ffbc 	bl	8003662 <prvDeleteTCB>
 80036ea:	e7dd      	b.n	80036a8 <prvIdleTask+0xc>
 80036ec:	20023dc4 	.word	0x20023dc4
 80036f0:	20023d54 	.word	0x20023d54
 80036f4:	20023d50 	.word	0x20023d50
 80036f8:	20023cc4 	.word	0x20023cc4
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8003704:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003706:	4e1b      	ldr	r6, [pc, #108]	; (8003774 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8003708:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800370a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800370c:	6830      	ldr	r0, [r6, #0]
 800370e:	3004      	adds	r0, #4
 8003710:	f7fe ff75 	bl	80025fe <uxListRemove>
 8003714:	4633      	mov	r3, r6
 8003716:	b940      	cbnz	r0, 800372a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003718:	6831      	ldr	r1, [r6, #0]
 800371a:	2001      	movs	r0, #1
 800371c:	4e16      	ldr	r6, [pc, #88]	; (8003778 <prvAddCurrentTaskToDelayedList+0x78>)
 800371e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003720:	6832      	ldr	r2, [r6, #0]
 8003722:	4088      	lsls	r0, r1
 8003724:	ea22 0200 	bic.w	r2, r2, r0
 8003728:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800372a:	1c62      	adds	r2, r4, #1
 800372c:	d107      	bne.n	800373e <prvAddCurrentTaskToDelayedList+0x3e>
 800372e:	b137      	cbz	r7, 800373e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	4812      	ldr	r0, [pc, #72]	; (800377c <prvAddCurrentTaskToDelayedList+0x7c>)
 8003734:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800373a:	f7fe bf3d 	b.w	80025b8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800373e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003740:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003742:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003744:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003746:	d907      	bls.n	8003758 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <prvAddCurrentTaskToDelayedList+0x80>)
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	6819      	ldr	r1, [r3, #0]
}
 800374e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003752:	3104      	adds	r1, #4
 8003754:	f7fe bf3c 	b.w	80025d0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <prvAddCurrentTaskToDelayedList+0x84>)
 800375a:	6810      	ldr	r0, [r2, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	3104      	adds	r1, #4
 8003760:	f7fe ff36 	bl	80025d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <prvAddCurrentTaskToDelayedList+0x88>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4294      	cmp	r4, r2
 800376a:	d200      	bcs.n	800376e <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800376c:	601c      	str	r4, [r3, #0]
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	20023dd8 	.word	0x20023dd8
 8003774:	20023cb8 	.word	0x20023cb8
 8003778:	20023d64 	.word	0x20023d64
 800377c:	20023db0 	.word	0x20023db0
 8003780:	20023cc0 	.word	0x20023cc0
 8003784:	20023cbc 	.word	0x20023cbc
 8003788:	20023d90 	.word	0x20023d90

0800378c <prvTaskIsTaskSuspended.part.0>:
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	b672      	cpsid	i
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	b662      	cpsie	i
 80037a0:	e7fe      	b.n	80037a0 <prvTaskIsTaskSuspended.part.0+0x14>

080037a2 <xTaskCreateStatic>:
	{
 80037a2:	b570      	push	{r4, r5, r6, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80037a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80037aa:	b90d      	cbnz	r5, 80037b0 <xTaskCreateStatic+0xe>
 80037ac:	f7ff ffee 	bl	800378c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 80037b0:	b954      	cbnz	r4, 80037c8 <xTaskCreateStatic+0x26>
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	b672      	cpsid	i
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	b662      	cpsie	i
 80037c6:	e7fe      	b.n	80037c6 <xTaskCreateStatic+0x24>
			volatile size_t xSize = sizeof( StaticTask_t );
 80037c8:	2654      	movs	r6, #84	; 0x54
 80037ca:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037cc:	9e05      	ldr	r6, [sp, #20]
 80037ce:	2e54      	cmp	r6, #84	; 0x54
 80037d0:	d00a      	beq.n	80037e8 <xTaskCreateStatic+0x46>
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	b672      	cpsid	i
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	b662      	cpsie	i
 80037e6:	e7fe      	b.n	80037e6 <xTaskCreateStatic+0x44>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037e8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037ea:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037ec:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037ee:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037f2:	ad04      	add	r5, sp, #16
 80037f4:	9402      	str	r4, [sp, #8]
 80037f6:	9501      	str	r5, [sp, #4]
 80037f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80037fa:	9500      	str	r5, [sp, #0]
 80037fc:	f7ff feec 	bl	80035d8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff fe5b 	bl	80034bc <prvAddNewTaskToReadyList>
	}
 8003806:	9804      	ldr	r0, [sp, #16]
 8003808:	b006      	add	sp, #24
 800380a:	bd70      	pop	{r4, r5, r6, pc}

0800380c <xTaskCreate>:
	{
 800380c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003810:	4607      	mov	r7, r0
 8003812:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003814:	0090      	lsls	r0, r2, #2
	{
 8003816:	4688      	mov	r8, r1
 8003818:	4616      	mov	r6, r2
 800381a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800381c:	f7ff f8c8 	bl	80029b0 <pvPortMalloc>
			if( pxStack != NULL )
 8003820:	4605      	mov	r5, r0
 8003822:	b1e8      	cbz	r0, 8003860 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003824:	2054      	movs	r0, #84	; 0x54
 8003826:	f7ff f8c3 	bl	80029b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800382a:	4604      	mov	r4, r0
 800382c:	b1a8      	cbz	r0, 800385a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800382e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8003830:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003832:	4632      	mov	r2, r6
 8003834:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003836:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800383a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800383c:	9002      	str	r0, [sp, #8]
 800383e:	4638      	mov	r0, r7
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	464b      	mov	r3, r9
 8003848:	f7ff fec6 	bl	80035d8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384c:	4620      	mov	r0, r4
 800384e:	f7ff fe35 	bl	80034bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003852:	2001      	movs	r0, #1
	}
 8003854:	b005      	add	sp, #20
 8003856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800385a:	4628      	mov	r0, r5
 800385c:	f7ff f93a 	bl	8002ad4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003864:	e7f6      	b.n	8003854 <xTaskCreate+0x48>
	...

08003868 <vTaskStartScheduler>:
{
 8003868:	b510      	push	{r4, lr}
 800386a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800386c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800386e:	aa07      	add	r2, sp, #28
 8003870:	a906      	add	r1, sp, #24
 8003872:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003874:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003876:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003878:	f007 fba0 	bl	800afbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800387c:	9b05      	ldr	r3, [sp, #20]
 800387e:	9400      	str	r4, [sp, #0]
 8003880:	9302      	str	r3, [sp, #8]
 8003882:	9b06      	ldr	r3, [sp, #24]
 8003884:	9a07      	ldr	r2, [sp, #28]
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	4623      	mov	r3, r4
 800388a:	490e      	ldr	r1, [pc, #56]	; (80038c4 <vTaskStartScheduler+0x5c>)
 800388c:	480e      	ldr	r0, [pc, #56]	; (80038c8 <vTaskStartScheduler+0x60>)
 800388e:	f7ff ff88 	bl	80037a2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003892:	b1a0      	cbz	r0, 80038be <vTaskStartScheduler+0x56>
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	b672      	cpsid	i
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <vTaskStartScheduler+0x64>)
 80038ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038b0:	2201      	movs	r2, #1
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <vTaskStartScheduler+0x68>)
 80038b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <vTaskStartScheduler+0x6c>)
 80038b8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80038ba:	f7fe ffbd 	bl	8002838 <xPortStartScheduler>
}
 80038be:	b008      	add	sp, #32
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	bf00      	nop
 80038c4:	0800c4fd 	.word	0x0800c4fd
 80038c8:	0800369d 	.word	0x0800369d
 80038cc:	20023d90 	.word	0x20023d90
 80038d0:	20023dac 	.word	0x20023dac
 80038d4:	20023dd8 	.word	0x20023dd8

080038d8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80038d8:	4a02      	ldr	r2, [pc, #8]	; (80038e4 <vTaskSuspendAll+0xc>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20023d5c 	.word	0x20023d5c

080038e8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80038e8:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <xTaskGetTickCount+0x8>)
 80038ea:	6818      	ldr	r0, [r3, #0]
}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20023dd8 	.word	0x20023dd8

080038f4 <xTaskGetTickCountFromISR>:
{
 80038f4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038f6:	f7ff f805 	bl	8002904 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80038fa:	4b01      	ldr	r3, [pc, #4]	; (8003900 <xTaskGetTickCountFromISR+0xc>)
 80038fc:	6818      	ldr	r0, [r3, #0]
}
 80038fe:	bd08      	pop	{r3, pc}
 8003900:	20023dd8 	.word	0x20023dd8

08003904 <xTaskIncrementTick>:
{
 8003904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003908:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <xTaskIncrementTick+0xfc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d16f      	bne.n	80039f0 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003910:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <xTaskIncrementTick+0x100>)
 8003912:	681c      	ldr	r4, [r3, #0]
 8003914:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003916:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003918:	b9cc      	cbnz	r4, 800394e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800391a:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <xTaskIncrementTick+0x104>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	b152      	cbz	r2, 8003938 <xTaskIncrementTick+0x34>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	b672      	cpsid	i
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	b662      	cpsie	i
 8003936:	e7fe      	b.n	8003936 <xTaskIncrementTick+0x32>
 8003938:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <xTaskIncrementTick+0x108>)
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	6810      	ldr	r0, [r2, #0]
 800393e:	6018      	str	r0, [r3, #0]
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	4a33      	ldr	r2, [pc, #204]	; (8003a10 <xTaskIncrementTick+0x10c>)
 8003944:	6813      	ldr	r3, [r2, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	f7ff fe33 	bl	80035b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800394e:	4d31      	ldr	r5, [pc, #196]	; (8003a14 <xTaskIncrementTick+0x110>)
 8003950:	f04f 0b00 	mov.w	fp, #0
 8003954:	4f30      	ldr	r7, [pc, #192]	; (8003a18 <xTaskIncrementTick+0x114>)
 8003956:	682b      	ldr	r3, [r5, #0]
 8003958:	429c      	cmp	r4, r3
 800395a:	d30a      	bcc.n	8003972 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800395c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8003a08 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8003960:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003a28 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003964:	f8da 2000 	ldr.w	r2, [sl]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	b9a2      	cbnz	r2, 8003996 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396c:	f04f 32ff 	mov.w	r2, #4294967295
 8003970:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <xTaskIncrementTick+0x118>)
 8003976:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003978:	2214      	movs	r2, #20
 800397a:	434a      	muls	r2, r1
 800397c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800397e:	2a02      	cmp	r2, #2
 8003980:	bf28      	it	cs
 8003982:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003986:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <xTaskIncrementTick+0x11c>)
 8003988:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800398a:	2a00      	cmp	r2, #0
}
 800398c:	bf0c      	ite	eq
 800398e:	4658      	moveq	r0, fp
 8003990:	2001      	movne	r0, #1
 8003992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003996:	f8da 2000 	ldr.w	r2, [sl]
 800399a:	68d2      	ldr	r2, [r2, #12]
 800399c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800399e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80039a0:	428c      	cmp	r4, r1
 80039a2:	d201      	bcs.n	80039a8 <xTaskIncrementTick+0xa4>
						xNextTaskUnblockTime = xItemValue;
 80039a4:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039a6:	e7e4      	b.n	8003972 <xTaskIncrementTick+0x6e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a8:	f106 0804 	add.w	r8, r6, #4
 80039ac:	4640      	mov	r0, r8
 80039ae:	f7fe fe26 	bl	80025fe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039b2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80039b4:	b119      	cbz	r1, 80039be <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039b6:	f106 0018 	add.w	r0, r6, #24
 80039ba:	f7fe fe20 	bl	80025fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039be:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80039c0:	2201      	movs	r2, #1
 80039c2:	f8d9 3000 	ldr.w	r3, [r9]
 80039c6:	f04f 0e14 	mov.w	lr, #20
 80039ca:	fa02 f100 	lsl.w	r1, r2, r0
 80039ce:	4319      	orrs	r1, r3
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <xTaskIncrementTick+0x118>)
 80039d2:	f8c9 1000 	str.w	r1, [r9]
 80039d6:	4641      	mov	r1, r8
 80039d8:	fb0e 3000 	mla	r0, lr, r0, r3
 80039dc:	f7fe fdec 	bl	80025b8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80039e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80039e6:	4291      	cmp	r1, r2
 80039e8:	bf28      	it	cs
 80039ea:	f04f 0b01 	movcs.w	fp, #1
 80039ee:	e7b9      	b.n	8003964 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80039f0:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80039f2:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e7c3      	b.n	8003986 <xTaskIncrementTick+0x82>
 80039fe:	bf00      	nop
 8003a00:	20023d5c 	.word	0x20023d5c
 8003a04:	20023dd8 	.word	0x20023dd8
 8003a08:	20023cbc 	.word	0x20023cbc
 8003a0c:	20023cc0 	.word	0x20023cc0
 8003a10:	20023d94 	.word	0x20023d94
 8003a14:	20023d90 	.word	0x20023d90
 8003a18:	20023cb8 	.word	0x20023cb8
 8003a1c:	20023cc4 	.word	0x20023cc4
 8003a20:	20023ddc 	.word	0x20023ddc
 8003a24:	20023d58 	.word	0x20023d58
 8003a28:	20023d64 	.word	0x20023d64

08003a2c <xTaskResumeAll>:
{
 8003a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003a30:	4c32      	ldr	r4, [pc, #200]	; (8003afc <xTaskResumeAll+0xd0>)
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	b953      	cbnz	r3, 8003a4c <xTaskResumeAll+0x20>
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	b672      	cpsid	i
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	b662      	cpsie	i
 8003a4a:	e7fe      	b.n	8003a4a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8003a4c:	f7fe fe52 	bl	80026f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a56:	6824      	ldr	r4, [r4, #0]
 8003a58:	b12c      	cbz	r4, 8003a66 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8003a5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a5c:	f7fe fe70 	bl	8002740 <vPortExitCritical>
}
 8003a60:	4620      	mov	r0, r4
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a66:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <xTaskResumeAll+0xd4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f5      	beq.n	8003a5a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a6e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003b18 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8003a72:	4f24      	ldr	r7, [pc, #144]	; (8003b04 <xTaskResumeAll+0xd8>)
 8003a74:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003b1c <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a78:	f8d9 3000 	ldr.w	r3, [r9]
 8003a7c:	b9e3      	cbnz	r3, 8003ab8 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8003a7e:	b10c      	cbz	r4, 8003a84 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8003a80:	f7ff fd98 	bl	80035b4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a84:	4d20      	ldr	r5, [pc, #128]	; (8003b08 <xTaskResumeAll+0xdc>)
 8003a86:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a88:	b144      	cbz	r4, 8003a9c <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8003a8a:	4e20      	ldr	r6, [pc, #128]	; (8003b0c <xTaskResumeAll+0xe0>)
 8003a8c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003a8e:	f7ff ff39 	bl	8003904 <xTaskIncrementTick>
 8003a92:	b100      	cbz	r0, 8003a96 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8003a94:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a96:	3c01      	subs	r4, #1
 8003a98:	d1f9      	bne.n	8003a8e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8003a9a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <xTaskResumeAll+0xe0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0da      	beq.n	8003a5a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8003aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <xTaskResumeAll+0xe4>)
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003ab4:	2401      	movs	r4, #1
 8003ab6:	e7d1      	b.n	8003a5c <xTaskResumeAll+0x30>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003abc:	2501      	movs	r5, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac2:	f104 0018 	add.w	r0, r4, #24
 8003ac6:	f7fe fd9a 	bl	80025fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aca:	4630      	mov	r0, r6
 8003acc:	f7fe fd97 	bl	80025fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ad0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	2014      	movs	r0, #20
 8003ad6:	fa05 f302 	lsl.w	r3, r5, r2
 8003ada:	fb00 8002 	mla	r0, r0, r2, r8
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	4631      	mov	r1, r6
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	f7fe fd68 	bl	80025b8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <xTaskResumeAll+0xe8>)
 8003aea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3c1      	bcc.n	8003a78 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <xTaskResumeAll+0xe0>)
 8003af6:	601d      	str	r5, [r3, #0]
 8003af8:	e7be      	b.n	8003a78 <xTaskResumeAll+0x4c>
 8003afa:	bf00      	nop
 8003afc:	20023d5c 	.word	0x20023d5c
 8003b00:	20023d50 	.word	0x20023d50
 8003b04:	20023d64 	.word	0x20023d64
 8003b08:	20023d58 	.word	0x20023d58
 8003b0c:	20023ddc 	.word	0x20023ddc
 8003b10:	e000ed04 	.word	0xe000ed04
 8003b14:	20023cb8 	.word	0x20023cb8
 8003b18:	20023d98 	.word	0x20023d98
 8003b1c:	20023cc4 	.word	0x20023cc4

08003b20 <vTaskDelay>:
	{
 8003b20:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b22:	b940      	cbnz	r0, 8003b36 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <vTaskDelay+0x44>)
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <vTaskDelay+0x48>)
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	b151      	cbz	r1, 8003b52 <vTaskDelay+0x32>
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	b672      	cpsid	i
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	b662      	cpsie	i
 8003b50:	e7fe      	b.n	8003b50 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003b52:	f7ff fec1 	bl	80038d8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b56:	f7ff fdd3 	bl	8003700 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003b5a:	f7ff ff67 	bl	8003a2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d0e0      	beq.n	8003b24 <vTaskDelay+0x4>
 8003b62:	bd08      	pop	{r3, pc}
 8003b64:	e000ed04 	.word	0xe000ed04
 8003b68:	20023d5c 	.word	0x20023d5c

08003b6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <vTaskSwitchContext+0x64>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <vTaskSwitchContext+0x68>)
{
 8003b72:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b74:	b112      	cbz	r2, 8003b7c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003b76:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003b7c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <vTaskSwitchContext+0x6c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2214      	movs	r2, #20
 8003b8a:	4914      	ldr	r1, [pc, #80]	; (8003bdc <vTaskSwitchContext+0x70>)
 8003b8c:	f1c3 031f 	rsb	r3, r3, #31
 8003b90:	435a      	muls	r2, r3
 8003b92:	588c      	ldr	r4, [r1, r2]
 8003b94:	1888      	adds	r0, r1, r2
 8003b96:	b954      	cbnz	r4, 8003bae <vTaskSwitchContext+0x42>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	b672      	cpsid	i
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	b662      	cpsie	i
 8003bac:	e7fe      	b.n	8003bac <vTaskSwitchContext+0x40>
 8003bae:	6844      	ldr	r4, [r0, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	6864      	ldr	r4, [r4, #4]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	4294      	cmp	r4, r2
 8003bb8:	6044      	str	r4, [r0, #4]
 8003bba:	bf04      	itt	eq
 8003bbc:	6862      	ldreq	r2, [r4, #4]
 8003bbe:	6042      	streq	r2, [r0, #4]
 8003bc0:	2214      	movs	r2, #20
 8003bc2:	fb02 1303 	mla	r3, r2, r3, r1
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <vTaskSwitchContext+0x74>)
 8003bcc:	e7d4      	b.n	8003b78 <vTaskSwitchContext+0xc>
 8003bce:	bf00      	nop
 8003bd0:	20023d5c 	.word	0x20023d5c
 8003bd4:	20023ddc 	.word	0x20023ddc
 8003bd8:	20023d64 	.word	0x20023d64
 8003bdc:	20023cc4 	.word	0x20023cc4
 8003be0:	20023cb8 	.word	0x20023cb8

08003be4 <vTaskPlaceOnEventList>:
{
 8003be4:	b510      	push	{r4, lr}
 8003be6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003be8:	b950      	cbnz	r0, 8003c00 <vTaskPlaceOnEventList+0x1c>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	b672      	cpsid	i
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	b662      	cpsie	i
 8003bfe:	e7fe      	b.n	8003bfe <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <vTaskPlaceOnEventList+0x34>)
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	3118      	adds	r1, #24
 8003c06:	f7fe fce3 	bl	80025d0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	2101      	movs	r1, #1
}
 8003c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c12:	f7ff bd75 	b.w	8003700 <prvAddCurrentTaskToDelayedList>
 8003c16:	bf00      	nop
 8003c18:	20023cb8 	.word	0x20023cb8

08003c1c <xTaskRemoveFromEventList>:
{
 8003c1c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1e:	68c3      	ldr	r3, [r0, #12]
 8003c20:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003c22:	b954      	cbnz	r4, 8003c3a <xTaskRemoveFromEventList+0x1e>
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	b672      	cpsid	i
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	b662      	cpsie	i
 8003c38:	e7fe      	b.n	8003c38 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c3a:	f104 0518 	add.w	r5, r4, #24
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7fe fcdd 	bl	80025fe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <xTaskRemoveFromEventList+0x70>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	b9db      	cbnz	r3, 8003c82 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c4a:	1d25      	adds	r5, r4, #4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f7fe fcd6 	bl	80025fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c52:	490f      	ldr	r1, [pc, #60]	; (8003c90 <xTaskRemoveFromEventList+0x74>)
 8003c54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c56:	2301      	movs	r3, #1
 8003c58:	6808      	ldr	r0, [r1, #0]
 8003c5a:	4093      	lsls	r3, r2
 8003c5c:	4303      	orrs	r3, r0
 8003c5e:	2014      	movs	r0, #20
 8003c60:	600b      	str	r3, [r1, #0]
 8003c62:	4629      	mov	r1, r5
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <xTaskRemoveFromEventList+0x78>)
 8003c66:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c6a:	f7fe fca5 	bl	80025b8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <xTaskRemoveFromEventList+0x7c>)
 8003c70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d906      	bls.n	8003c88 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <xTaskRemoveFromEventList+0x80>)
 8003c7e:	6018      	str	r0, [r3, #0]
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c82:	4629      	mov	r1, r5
 8003c84:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <xTaskRemoveFromEventList+0x84>)
 8003c86:	e7f0      	b.n	8003c6a <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8003c88:	2000      	movs	r0, #0
}
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	20023d5c 	.word	0x20023d5c
 8003c90:	20023d64 	.word	0x20023d64
 8003c94:	20023cc4 	.word	0x20023cc4
 8003c98:	20023cb8 	.word	0x20023cb8
 8003c9c:	20023ddc 	.word	0x20023ddc
 8003ca0:	20023d98 	.word	0x20023d98

08003ca4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <vTaskInternalSetTimeOutState+0x10>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003caa:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <vTaskInternalSetTimeOutState+0x14>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6043      	str	r3, [r0, #4]
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20023d94 	.word	0x20023d94
 8003cb8:	20023dd8 	.word	0x20023dd8

08003cbc <xTaskCheckForTimeOut>:
{
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	b950      	cbnz	r0, 8003cda <xTaskCheckForTimeOut+0x1e>
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	b672      	cpsid	i
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	b662      	cpsie	i
 8003cd8:	e7fe      	b.n	8003cd8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8003cda:	b951      	cbnz	r1, 8003cf2 <xTaskCheckForTimeOut+0x36>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	b672      	cpsid	i
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	b662      	cpsie	i
 8003cf0:	e7fe      	b.n	8003cf0 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8003cf2:	f7fe fcff 	bl	80026f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cf8:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003cfa:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	1c58      	adds	r0, r3, #1
 8003d00:	d00e      	beq.n	8003d20 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d02:	480d      	ldr	r0, [pc, #52]	; (8003d38 <xTaskCheckForTimeOut+0x7c>)
 8003d04:	682e      	ldr	r6, [r5, #0]
 8003d06:	6800      	ldr	r0, [r0, #0]
 8003d08:	4286      	cmp	r6, r0
 8003d0a:	d001      	beq.n	8003d10 <xTaskCheckForTimeOut+0x54>
 8003d0c:	428a      	cmp	r2, r1
 8003d0e:	d20e      	bcs.n	8003d2e <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d10:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d209      	bcs.n	8003d2a <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 8003d16:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d18:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8003d1a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d1c:	f7ff ffc2 	bl	8003ca4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8003d20:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003d22:	f7fe fd0d 	bl	8002740 <vPortExitCritical>
}
 8003d26:	4620      	mov	r0, r4
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003d2e:	2401      	movs	r4, #1
 8003d30:	e7f7      	b.n	8003d22 <xTaskCheckForTimeOut+0x66>
 8003d32:	bf00      	nop
 8003d34:	20023dd8 	.word	0x20023dd8
 8003d38:	20023d94 	.word	0x20023d94

08003d3c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4b01      	ldr	r3, [pc, #4]	; (8003d44 <vTaskMissedYield+0x8>)
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4770      	bx	lr
 8003d44:	20023ddc 	.word	0x20023ddc

08003d48 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <xTaskGetSchedulerState+0x18>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	b133      	cbz	r3, 8003d5c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <xTaskGetSchedulerState+0x1c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d54:	bf0c      	ite	eq
 8003d56:	2002      	moveq	r0, #2
 8003d58:	2000      	movne	r0, #0
 8003d5a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5c:	2001      	movs	r0, #1
	}
 8003d5e:	4770      	bx	lr
 8003d60:	20023dac 	.word	0x20023dac
 8003d64:	20023d5c 	.word	0x20023d5c

08003d68 <xTaskPriorityInherit>:
	{
 8003d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d035      	beq.n	8003dde <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <xTaskPriorityInherit+0x9c>)
 8003d74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003d76:	6811      	ldr	r1, [r2, #0]
 8003d78:	4617      	mov	r7, r2
 8003d7a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	d237      	bcs.n	8003df0 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d80:	6982      	ldr	r2, [r0, #24]
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	db04      	blt.n	8003d90 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d8a:	f1c2 0207 	rsb	r2, r2, #7
 8003d8e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003d90:	4d1d      	ldr	r5, [pc, #116]	; (8003e08 <xTaskPriorityInherit+0xa0>)
 8003d92:	2614      	movs	r6, #20
 8003d94:	6962      	ldr	r2, [r4, #20]
 8003d96:	fb06 5303 	mla	r3, r6, r3, r5
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d122      	bne.n	8003de4 <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d9e:	f104 0804 	add.w	r8, r4, #4
 8003da2:	4640      	mov	r0, r8
 8003da4:	f7fe fc2b 	bl	80025fe <uxListRemove>
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <xTaskPriorityInherit+0xa4>)
 8003daa:	b948      	cbnz	r0, 8003dc0 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003dac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003dae:	4346      	muls	r6, r0
 8003db0:	59aa      	ldr	r2, [r5, r6]
 8003db2:	b92a      	cbnz	r2, 8003dc0 <xTaskPriorityInherit+0x58>
 8003db4:	2101      	movs	r1, #1
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4081      	lsls	r1, r0
 8003dba:	ea22 0201 	bic.w	r2, r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003dc0:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003dc2:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003dc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dc6:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003dc8:	2401      	movs	r4, #1
 8003dca:	fa04 f002 	lsl.w	r0, r4, r2
 8003dce:	4308      	orrs	r0, r1
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	6018      	str	r0, [r3, #0]
 8003dd4:	2014      	movs	r0, #20
 8003dd6:	fb00 5002 	mla	r0, r0, r2, r5
 8003dda:	f7fe fbed 	bl	80025b8 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8003dde:	4620      	mov	r0, r4
	}
 8003de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003de4:	683b      	ldr	r3, [r7, #0]
				xReturn = pdTRUE;
 8003de6:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003df0:	6813      	ldr	r3, [r2, #0]
 8003df2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003df4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003df6:	42a0      	cmp	r0, r4
 8003df8:	bf2c      	ite	cs
 8003dfa:	2000      	movcs	r0, #0
 8003dfc:	2001      	movcc	r0, #1
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e02:	bf00      	nop
 8003e04:	20023cb8 	.word	0x20023cb8
 8003e08:	20023cc4 	.word	0x20023cc4
 8003e0c:	20023d64 	.word	0x20023d64

08003e10 <xTaskPriorityDisinherit>:
	{
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003e12:	4604      	mov	r4, r0
 8003e14:	b908      	cbnz	r0, 8003e1a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003e16:	2000      	movs	r0, #0
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <xTaskPriorityDisinherit+0x9c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4298      	cmp	r0, r3
 8003e20:	d00a      	beq.n	8003e38 <xTaskPriorityDisinherit+0x28>
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	b672      	cpsid	i
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	b662      	cpsie	i
 8003e36:	e7fe      	b.n	8003e36 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e38:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003e3a:	b953      	cbnz	r3, 8003e52 <xTaskPriorityDisinherit+0x42>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	b672      	cpsid	i
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	b662      	cpsie	i
 8003e50:	e7fe      	b.n	8003e50 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e52:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8003e54:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e56:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003e58:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e5a:	4291      	cmp	r1, r2
 8003e5c:	d0db      	beq.n	8003e16 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1d9      	bne.n	8003e16 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e62:	1d05      	adds	r5, r0, #4
 8003e64:	4e12      	ldr	r6, [pc, #72]	; (8003eb0 <xTaskPriorityDisinherit+0xa0>)
 8003e66:	4628      	mov	r0, r5
 8003e68:	f7fe fbc9 	bl	80025fe <uxListRemove>
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <xTaskPriorityDisinherit+0xa4>)
 8003e6e:	b950      	cbnz	r0, 8003e86 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e72:	2114      	movs	r1, #20
 8003e74:	4379      	muls	r1, r7
 8003e76:	5873      	ldr	r3, [r6, r1]
 8003e78:	b92b      	cbnz	r3, 8003e86 <xTaskPriorityDisinherit+0x76>
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	6813      	ldr	r3, [r2, #0]
 8003e7e:	40b8      	lsls	r0, r7
 8003e80:	ea23 0300 	bic.w	r3, r3, r0
 8003e84:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e88:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e90:	2401      	movs	r4, #1
 8003e92:	6811      	ldr	r1, [r2, #0]
 8003e94:	fa04 f003 	lsl.w	r0, r4, r3
 8003e98:	4308      	orrs	r0, r1
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	6010      	str	r0, [r2, #0]
 8003e9e:	2014      	movs	r0, #20
 8003ea0:	fb00 6003 	mla	r0, r0, r3, r6
 8003ea4:	f7fe fb88 	bl	80025b8 <vListInsertEnd>
					xReturn = pdTRUE;
 8003ea8:	4620      	mov	r0, r4
	}
 8003eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eac:	20023cb8 	.word	0x20023cb8
 8003eb0:	20023cc4 	.word	0x20023cc4
 8003eb4:	20023d64 	.word	0x20023d64

08003eb8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003eba:	4604      	mov	r4, r0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d04f      	beq.n	8003f60 <vTaskPriorityDisinheritAfterTimeout+0xa8>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ec0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003ec2:	b952      	cbnz	r2, 8003eda <vTaskPriorityDisinheritAfterTimeout+0x22>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	b672      	cpsid	i
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	b662      	cpsie	i
 8003ed8:	e7fe      	b.n	8003ed8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8003eda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003edc:	4299      	cmp	r1, r3
 8003ede:	bf38      	it	cc
 8003ee0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ee2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ee4:	428b      	cmp	r3, r1
 8003ee6:	d03b      	beq.n	8003f60 <vTaskPriorityDisinheritAfterTimeout+0xa8>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003ee8:	2a01      	cmp	r2, #1
 8003eea:	d139      	bne.n	8003f60 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					configASSERT( pxTCB != pxCurrentTCB );
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	4290      	cmp	r0, r2
 8003ef2:	d10a      	bne.n	8003f0a <vTaskPriorityDisinheritAfterTimeout+0x52>
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	b672      	cpsid	i
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	b662      	cpsie	i
 8003f08:	e7fe      	b.n	8003f08 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f0a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f0c:	2614      	movs	r6, #20
 8003f0e:	4d16      	ldr	r5, [pc, #88]	; (8003f68 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f10:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8003f12:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f14:	fb06 5303 	mla	r3, r6, r3, r5
 8003f18:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	bfa4      	itt	ge
 8003f1c:	f1c1 0107 	rsbge	r1, r1, #7
 8003f20:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d11c      	bne.n	8003f60 <vTaskPriorityDisinheritAfterTimeout+0xa8>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f26:	1d07      	adds	r7, r0, #4
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f7fe fb68 	bl	80025fe <uxListRemove>
 8003f2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f30:	4c0e      	ldr	r4, [pc, #56]	; (8003f6c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8003f32:	b940      	cbnz	r0, 8003f46 <vTaskPriorityDisinheritAfterTimeout+0x8e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f34:	4356      	muls	r6, r2
 8003f36:	59ab      	ldr	r3, [r5, r6]
 8003f38:	b92b      	cbnz	r3, 8003f46 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	4091      	lsls	r1, r2
 8003f40:	ea23 0301 	bic.w	r3, r3, r1
 8003f44:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8003f46:	2301      	movs	r3, #1
 8003f48:	6821      	ldr	r1, [r4, #0]
 8003f4a:	2014      	movs	r0, #20
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	fb00 5002 	mla	r0, r0, r2, r5
 8003f52:	430b      	orrs	r3, r1
 8003f54:	4639      	mov	r1, r7
 8003f56:	6023      	str	r3, [r4, #0]
	}
 8003f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8003f5c:	f7fe bb2c 	b.w	80025b8 <vListInsertEnd>
 8003f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20023cb8 	.word	0x20023cb8
 8003f68:	20023cc4 	.word	0x20023cc4
 8003f6c:	20023d64 	.word	0x20023d64

08003f70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <pvTaskIncrementMutexHeldCount+0x14>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	b11a      	cbz	r2, 8003f7e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003f7a:	3201      	adds	r2, #1
 8003f7c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003f7e:	6818      	ldr	r0, [r3, #0]
	}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20023cb8 	.word	0x20023cb8

08003f88 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8003f88:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8003f8a:	482b      	ldr	r0, [pc, #172]	; (8004038 <tcpip_thread+0xb0>)
 8003f8c:	f006 fdd1 	bl	800ab32 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <tcpip_thread+0xb4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b113      	cbz	r3, 8003f9c <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 8003f96:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <tcpip_thread+0xb8>)
 8003f98:	6810      	ldr	r0, [r2, #0]
 8003f9a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8003f9c:	4d26      	ldr	r5, [pc, #152]	; (8004038 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8003f9e:	4f29      	ldr	r7, [pc, #164]	; (8004044 <tcpip_thread+0xbc>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003fa0:	4e29      	ldr	r6, [pc, #164]	; (8004048 <tcpip_thread+0xc0>)
  sleeptime = sys_timeouts_sleeptime();
 8003fa2:	f006 fbd7 	bl	800a754 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8003fa6:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8003fa8:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8003faa:	d113      	bne.n	8003fd4 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8003fac:	4628      	mov	r0, r5
 8003fae:	f006 fdc5 	bl	800ab3c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	a901      	add	r1, sp, #4
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	f006 fd78 	bl	800aaac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f006 fdb8 	bl	800ab32 <sys_mutex_lock>
    if (msg == NULL) {
 8003fc2:	9c01      	ldr	r4, [sp, #4]
 8003fc4:	b9cc      	cbnz	r4, 8003ffa <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003fc6:	4633      	mov	r3, r6
 8003fc8:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003fca:	4920      	ldr	r1, [pc, #128]	; (800404c <tcpip_thread+0xc4>)
 8003fcc:	4820      	ldr	r0, [pc, #128]	; (8004050 <tcpip_thread+0xc8>)
 8003fce:	f007 fb0b 	bl	800b5e8 <iprintf>
 8003fd2:	e7e6      	b.n	8003fa2 <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8003fd4:	b910      	cbnz	r0, 8003fdc <tcpip_thread+0x54>
    sys_check_timeouts();
 8003fd6:	f006 fb9b 	bl	800a710 <sys_check_timeouts>
 8003fda:	e7e2      	b.n	8003fa2 <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f006 fdad 	bl	800ab3c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	a901      	add	r1, sp, #4
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f006 fd60 	bl	800aaac <sys_arch_mbox_fetch>
 8003fec:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f006 fd9f 	bl	800ab32 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8003ff4:	3401      	adds	r4, #1
 8003ff6:	d0ee      	beq.n	8003fd6 <tcpip_thread+0x4e>
 8003ff8:	e7e3      	b.n	8003fc2 <tcpip_thread+0x3a>
  switch (msg->type) {
 8003ffa:	7823      	ldrb	r3, [r4, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d011      	beq.n	8004024 <tcpip_thread+0x9c>
 8004000:	d304      	bcc.n	800400c <tcpip_thread+0x84>
 8004002:	2b02      	cmp	r3, #2
 8004004:	d014      	beq.n	8004030 <tcpip_thread+0xa8>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004006:	4633      	mov	r3, r6
 8004008:	22cf      	movs	r2, #207	; 0xcf
 800400a:	e7de      	b.n	8003fca <tcpip_thread+0x42>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800400c:	1d20      	adds	r0, r4, #4
 800400e:	c80b      	ldmia	r0, {r0, r1, r3}
 8004010:	4798      	blx	r3
 8004012:	b110      	cbz	r0, 800401a <tcpip_thread+0x92>
        pbuf_free(msg->msg.inp.p);
 8004014:	6860      	ldr	r0, [r4, #4]
 8004016:	f002 fb3b 	bl	8006690 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800401a:	4621      	mov	r1, r4
 800401c:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800401e:	f002 f8ef 	bl	8006200 <memp_free>
 8004022:	e7be      	b.n	8003fa2 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004024:	68a0      	ldr	r0, [r4, #8]
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800402a:	4621      	mov	r1, r4
 800402c:	2008      	movs	r0, #8
 800402e:	e7f6      	b.n	800401e <tcpip_thread+0x96>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	68a0      	ldr	r0, [r4, #8]
 8004034:	4798      	blx	r3
 8004036:	e7b4      	b.n	8003fa2 <tcpip_thread+0x1a>
 8004038:	20024620 	.word	0x20024620
 800403c:	20023de0 	.word	0x20023de0
 8004040:	20023de4 	.word	0x20023de4
 8004044:	20023de8 	.word	0x20023de8
 8004048:	0800c560 	.word	0x0800c560
 800404c:	0800c590 	.word	0x0800c590
 8004050:	0800c5ae 	.word	0x0800c5ae

08004054 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8004058:	4810      	ldr	r0, [pc, #64]	; (800409c <tcpip_inpkt+0x48>)
{
 800405a:	460e      	mov	r6, r1
 800405c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800405e:	f006 fd47 	bl	800aaf0 <sys_mbox_valid>
 8004062:	b928      	cbnz	r0, 8004070 <tcpip_inpkt+0x1c>
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <tcpip_inpkt+0x4c>)
 8004066:	22fc      	movs	r2, #252	; 0xfc
 8004068:	490e      	ldr	r1, [pc, #56]	; (80040a4 <tcpip_inpkt+0x50>)
 800406a:	480f      	ldr	r0, [pc, #60]	; (80040a8 <tcpip_inpkt+0x54>)
 800406c:	f007 fabc 	bl	800b5e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8004070:	2009      	movs	r0, #9
 8004072:	f002 f8a9 	bl	80061c8 <memp_malloc>
  if (msg == NULL) {
 8004076:	4604      	mov	r4, r0
 8004078:	b168      	cbz	r0, 8004096 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800407a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800407c:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800407e:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8004080:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8004082:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8004084:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8004086:	4805      	ldr	r0, [pc, #20]	; (800409c <tcpip_inpkt+0x48>)
 8004088:	f006 fd06 	bl	800aa98 <sys_mbox_trypost>
 800408c:	b128      	cbz	r0, 800409a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800408e:	4621      	mov	r1, r4
 8004090:	2009      	movs	r0, #9
 8004092:	f002 f8b5 	bl	8006200 <memp_free>
    return ERR_MEM;
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800409c:	20023de8 	.word	0x20023de8
 80040a0:	0800c560 	.word	0x0800c560
 80040a4:	0800c553 	.word	0x0800c553
 80040a8:	0800c5ae 	.word	0x0800c5ae

080040ac <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80040ac:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80040b0:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80040b4:	bf14      	ite	ne
 80040b6:	4a02      	ldrne	r2, [pc, #8]	; (80040c0 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80040b8:	4a02      	ldreq	r2, [pc, #8]	; (80040c4 <tcpip_input+0x18>)
 80040ba:	f7ff bfcb 	b.w	8004054 <tcpip_inpkt>
 80040be:	bf00      	nop
 80040c0:	0800a965 	.word	0x0800a965
 80040c4:	080051ed 	.word	0x080051ed

080040c8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80040cc:	4810      	ldr	r0, [pc, #64]	; (8004110 <tcpip_try_callback+0x48>)
{
 80040ce:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80040d0:	f006 fd0e 	bl	800aaf0 <sys_mbox_valid>
 80040d4:	b930      	cbnz	r0, 80040e4 <tcpip_try_callback+0x1c>
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <tcpip_try_callback+0x4c>)
 80040d8:	f240 125d 	movw	r2, #349	; 0x15d
 80040dc:	490e      	ldr	r1, [pc, #56]	; (8004118 <tcpip_try_callback+0x50>)
 80040de:	480f      	ldr	r0, [pc, #60]	; (800411c <tcpip_try_callback+0x54>)
 80040e0:	f007 fa82 	bl	800b5e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80040e4:	2008      	movs	r0, #8
 80040e6:	f002 f86f 	bl	80061c8 <memp_malloc>
  if (msg == NULL) {
 80040ea:	4604      	mov	r4, r0
 80040ec:	b160      	cbz	r0, 8004108 <tcpip_try_callback+0x40>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80040ee:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
 80040f0:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80040f2:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80040f4:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 80040f6:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80040f8:	4805      	ldr	r0, [pc, #20]	; (8004110 <tcpip_try_callback+0x48>)
 80040fa:	f006 fccd 	bl	800aa98 <sys_mbox_trypost>
 80040fe:	b128      	cbz	r0, 800410c <tcpip_try_callback+0x44>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8004100:	4621      	mov	r1, r4
 8004102:	2008      	movs	r0, #8
 8004104:	f002 f87c 	bl	8006200 <memp_free>
    return ERR_MEM;
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
}
 800410c:	bd70      	pop	{r4, r5, r6, pc}
 800410e:	bf00      	nop
 8004110:	20023de8 	.word	0x20023de8
 8004114:	0800c560 	.word	0x0800c560
 8004118:	0800c553 	.word	0x0800c553
 800411c:	0800c5ae 	.word	0x0800c5ae

08004120 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8004120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004122:	4605      	mov	r5, r0
 8004124:	460c      	mov	r4, r1
  lwip_init();
 8004126:	f000 fb68 	bl	80047fa <lwip_init>

  tcpip_init_done = initfunc;
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800412c:	2106      	movs	r1, #6
 800412e:	4812      	ldr	r0, [pc, #72]	; (8004178 <tcpip_init+0x58>)
  tcpip_init_done = initfunc;
 8004130:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <tcpip_init+0x5c>)
 8004134:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8004136:	f006 fc9d 	bl	800aa74 <sys_mbox_new>
 800413a:	b130      	cbz	r0, 800414a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <tcpip_init+0x60>)
 800413e:	f240 2261 	movw	r2, #609	; 0x261
 8004142:	4910      	ldr	r1, [pc, #64]	; (8004184 <tcpip_init+0x64>)
 8004144:	4810      	ldr	r0, [pc, #64]	; (8004188 <tcpip_init+0x68>)
 8004146:	f007 fa4f 	bl	800b5e8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800414a:	4810      	ldr	r0, [pc, #64]	; (800418c <tcpip_init+0x6c>)
 800414c:	f006 fce2 	bl	800ab14 <sys_mutex_new>
 8004150:	b130      	cbz	r0, 8004160 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <tcpip_init+0x60>)
 8004154:	f240 2265 	movw	r2, #613	; 0x265
 8004158:	490d      	ldr	r1, [pc, #52]	; (8004190 <tcpip_init+0x70>)
 800415a:	480b      	ldr	r0, [pc, #44]	; (8004188 <tcpip_init+0x68>)
 800415c:	f007 fa44 	bl	800b5e8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004166:	490b      	ldr	r1, [pc, #44]	; (8004194 <tcpip_init+0x74>)
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	480b      	ldr	r0, [pc, #44]	; (8004198 <tcpip_init+0x78>)
 800416c:	f006 fce9 	bl	800ab42 <sys_thread_new>
}
 8004170:	b003      	add	sp, #12
 8004172:	bd30      	pop	{r4, r5, pc}
 8004174:	20023de0 	.word	0x20023de0
 8004178:	20023de8 	.word	0x20023de8
 800417c:	20023de4 	.word	0x20023de4
 8004180:	0800c560 	.word	0x0800c560
 8004184:	0800c502 	.word	0x0800c502
 8004188:	0800c5ae 	.word	0x0800c5ae
 800418c:	20024620 	.word	0x20024620
 8004190:	0800c525 	.word	0x0800c525
 8004194:	08003f89 	.word	0x08003f89
 8004198:	0800c546 	.word	0x0800c546

0800419c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80041a0:	4605      	mov	r5, r0
 80041a2:	b1a8      	cbz	r0, 80041d0 <fs_open+0x34>
 80041a4:	b1a1      	cbz	r1, 80041d0 <fs_open+0x34>
 80041a6:	4c0c      	ldr	r4, [pc, #48]	; (80041d8 <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 80041a8:	6861      	ldr	r1, [r4, #4]
 80041aa:	4630      	mov	r0, r6
 80041ac:	f7fc f848 	bl	8000240 <strcmp>
 80041b0:	b940      	cbnz	r0, 80041c4 <fs_open+0x28>
      file->data = (const char *)f->data;
 80041b2:	68a3      	ldr	r3, [r4, #8]
 80041b4:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 80041b6:	68e3      	ldr	r3, [r4, #12]
      file->index = f->len;
      file->pextension = NULL;
 80041b8:	60e8      	str	r0, [r5, #12]
      file->len = f->len;
 80041ba:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 80041bc:	60ab      	str	r3, [r5, #8]
      file->flags = f->flags;
 80041be:	7c23      	ldrb	r3, [r4, #16]
 80041c0:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80041c4:	6824      	ldr	r4, [r4, #0]
 80041c6:	2c00      	cmp	r4, #0
 80041c8:	d1ee      	bne.n	80041a8 <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 80041ca:	f06f 0005 	mvn.w	r0, #5
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80041d0:	f06f 000f 	mvn.w	r0, #15
}
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	bf00      	nop
 80041d8:	0800d354 	.word	0x0800d354

080041dc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80041dc:	4770      	bx	lr

080041de <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80041de:	6842      	ldr	r2, [r0, #4]
 80041e0:	6880      	ldr	r0, [r0, #8]
}
 80041e2:	1a10      	subs	r0, r2, r0
 80041e4:	4770      	bx	lr

080041e6 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80041e6:	b510      	push	{r4, lr}
 80041e8:	4604      	mov	r4, r0
  if (hs->handle) {
 80041ea:	6940      	ldr	r0, [r0, #20]
 80041ec:	b118      	cbz	r0, 80041f6 <http_state_eof+0x10>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80041ee:	f7ff fff5 	bl	80041dc <fs_close>
    hs->handle = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	6163      	str	r3, [r4, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80041f6:	6a20      	ldr	r0, [r4, #32]
 80041f8:	b118      	cbz	r0, 8004202 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 80041fa:	f002 fa49 	bl	8006690 <pbuf_free>
    hs->req = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	6223      	str	r3, [r4, #32]
 8004202:	bd10      	pop	{r4, pc}

08004204 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8004208:	490a      	ldr	r1, [pc, #40]	; (8004234 <http_get_404_file+0x30>)
  err = fs_open(&hs->file_handle, *uri);
 800420a:	4604      	mov	r4, r0
  *uri = "/404.html";
 800420c:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 800420e:	f7ff ffc5 	bl	800419c <fs_open>
  if (err != ERR_OK) {
 8004212:	b168      	cbz	r0, 8004230 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004214:	4908      	ldr	r1, [pc, #32]	; (8004238 <http_get_404_file+0x34>)
    err = fs_open(&hs->file_handle, *uri);
 8004216:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8004218:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 800421a:	f7ff ffbf 	bl	800419c <fs_open>
    if (err != ERR_OK) {
 800421e:	b138      	cbz	r0, 8004230 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8004220:	4906      	ldr	r1, [pc, #24]	; (800423c <http_get_404_file+0x38>)
      err = fs_open(&hs->file_handle, *uri);
 8004222:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8004224:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004226:	f7ff ffb9 	bl	800419c <fs_open>
      if (err != ERR_OK) {
 800422a:	b108      	cbz	r0, 8004230 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800422c:	2400      	movs	r4, #0
 800422e:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8004230:	4620      	mov	r0, r4
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	0800d368 	.word	0x0800d368
 8004238:	0800d372 	.word	0x0800d372
 800423c:	0800d37b 	.word	0x0800d37b

08004240 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004244:	4615      	mov	r5, r2
 8004246:	bb2a      	cbnz	r2, 8004294 <http_accept+0x54>
 8004248:	b321      	cbz	r1, 8004294 <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800424a:	2101      	movs	r1, #1
 800424c:	4620      	mov	r0, r4
 800424e:	f002 fe7f 	bl	8006f50 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004252:	202c      	movs	r0, #44	; 0x2c
 8004254:	f001 feae 	bl	8005fb4 <mem_malloc>
  if (ret != NULL) {
 8004258:	4606      	mov	r6, r0
 800425a:	b1f0      	cbz	r0, 800429a <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 800425c:	222c      	movs	r2, #44	; 0x2c
 800425e:	4629      	mov	r1, r5
 8004260:	f007 f9ba 	bl	800b5d8 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004264:	4631      	mov	r1, r6
 8004266:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8004268:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 800426a:	f002 fea5 	bl	8006fb8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800426e:	490c      	ldr	r1, [pc, #48]	; (80042a0 <http_accept+0x60>)
 8004270:	4620      	mov	r0, r4
 8004272:	f002 fea5 	bl	8006fc0 <tcp_recv>
  altcp_err(pcb, http_err);
 8004276:	490b      	ldr	r1, [pc, #44]	; (80042a4 <http_accept+0x64>)
 8004278:	4620      	mov	r0, r4
 800427a:	f002 fed1 	bl	8007020 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <http_accept+0x68>)
 8004280:	4620      	mov	r0, r4
 8004282:	2204      	movs	r2, #4
 8004284:	f002 feea 	bl	800705c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8004288:	4908      	ldr	r1, [pc, #32]	; (80042ac <http_accept+0x6c>)
 800428a:	4620      	mov	r0, r4
 800428c:	f002 feb0 	bl	8006ff0 <tcp_sent>

  return ERR_OK;
}
 8004290:	4628      	mov	r0, r5
 8004292:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8004294:	f06f 0505 	mvn.w	r5, #5
 8004298:	e7fa      	b.n	8004290 <http_accept+0x50>
    return ERR_MEM;
 800429a:	f04f 35ff 	mov.w	r5, #4294967295
 800429e:	e7f7      	b.n	8004290 <http_accept+0x50>
 80042a0:	08004415 	.word	0x08004415
 80042a4:	0800471d 	.word	0x0800471d
 80042a8:	080043d9 	.word	0x080043d9
 80042ac:	080043c1 	.word	0x080043c1

080042b0 <http_close_conn>:
{
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4604      	mov	r4, r0
 80042b4:	460d      	mov	r5, r1
  altcp_arg(pcb, NULL);
 80042b6:	2100      	movs	r1, #0
 80042b8:	f002 fe7e 	bl	8006fb8 <tcp_arg>
  altcp_recv(pcb, NULL);
 80042bc:	2100      	movs	r1, #0
 80042be:	4620      	mov	r0, r4
 80042c0:	f002 fe7e 	bl	8006fc0 <tcp_recv>
  altcp_err(pcb, NULL);
 80042c4:	2100      	movs	r1, #0
 80042c6:	4620      	mov	r0, r4
 80042c8:	f002 feaa 	bl	8007020 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80042cc:	2200      	movs	r2, #0
 80042ce:	4620      	mov	r0, r4
 80042d0:	4611      	mov	r1, r2
 80042d2:	f002 fec3 	bl	800705c <tcp_poll>
  altcp_sent(pcb, NULL);
 80042d6:	2100      	movs	r1, #0
 80042d8:	4620      	mov	r0, r4
 80042da:	f002 fe89 	bl	8006ff0 <tcp_sent>
  if (hs != NULL) {
 80042de:	b12d      	cbz	r5, 80042ec <http_close_conn+0x3c>
    http_state_eof(hs);
 80042e0:	4628      	mov	r0, r5
 80042e2:	f7ff ff80 	bl	80041e6 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80042e6:	4628      	mov	r0, r5
 80042e8:	f001 fcdc 	bl	8005ca4 <mem_free>
  err = altcp_close(pcb);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f003 fa0f 	bl	8007710 <tcp_close>
  if (err != ERR_OK) {
 80042f2:	4605      	mov	r5, r0
 80042f4:	b120      	cbz	r0, 8004300 <http_close_conn+0x50>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80042f6:	2204      	movs	r2, #4
 80042f8:	4902      	ldr	r1, [pc, #8]	; (8004304 <http_close_conn+0x54>)
 80042fa:	4620      	mov	r0, r4
 80042fc:	f002 feae 	bl	800705c <tcp_poll>
}
 8004300:	4628      	mov	r0, r5
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	080043d9 	.word	0x080043d9

08004308 <http_send>:
{
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	4606      	mov	r6, r0
  if (hs == NULL) {
 800430c:	460d      	mov	r5, r1
 800430e:	b139      	cbz	r1, 8004320 <http_send+0x18>
  if (hs->left == 0) {
 8004310:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004312:	b99b      	cbnz	r3, 800433c <http_send+0x34>
  if (hs->handle == NULL) {
 8004314:	6948      	ldr	r0, [r1, #20]
 8004316:	b930      	cbnz	r0, 8004326 <http_send+0x1e>
    http_close_conn(pcb, hs);
 8004318:	4629      	mov	r1, r5
 800431a:	4630      	mov	r0, r6
 800431c:	f7ff ffc8 	bl	80042b0 <http_close_conn>
      return 0;
 8004320:	2400      	movs	r4, #0
}
 8004322:	4620      	mov	r0, r4
 8004324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8004326:	f7ff ff5a 	bl	80041de <fs_bytes_left>
  if (bytes_left <= 0) {
 800432a:	2800      	cmp	r0, #0
 800432c:	ddf4      	ble.n	8004318 <http_send+0x10>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800432e:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <http_send+0xac>)
 8004330:	f240 429d 	movw	r2, #1181	; 0x49d
 8004334:	4920      	ldr	r1, [pc, #128]	; (80043b8 <http_send+0xb0>)
 8004336:	4821      	ldr	r0, [pc, #132]	; (80043bc <http_send+0xb4>)
 8004338:	f007 f956 	bl	800b5e8 <iprintf>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800433c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004340:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004342:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004346:	4294      	cmp	r4, r2
 8004348:	bf88      	it	hi
 800434a:	461c      	movhi	r4, r3
 800434c:	b2a3      	uxth	r3, r4
  if (len == 0) {
 800434e:	b34c      	cbz	r4, 80043a4 <http_send+0x9c>
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004350:	8e74      	ldrh	r4, [r6, #50]	; 0x32
 8004352:	f8b6 2064 	ldrh.w	r2, [r6, #100]	; 0x64
 8004356:	0064      	lsls	r4, r4, #1
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004358:	69af      	ldr	r7, [r5, #24]
 800435a:	b2a4      	uxth	r4, r4
 800435c:	4294      	cmp	r4, r2
 800435e:	bf28      	it	cs
 8004360:	4614      	movcs	r4, r2
 8004362:	429c      	cmp	r4, r3
 8004364:	bf28      	it	cs
 8004366:	461c      	movcs	r4, r3
    err = altcp_write(pcb, ptr, len, apiflags);
 8004368:	2300      	movs	r3, #0
 800436a:	4622      	mov	r2, r4
 800436c:	4639      	mov	r1, r7
 800436e:	4630      	mov	r0, r6
 8004370:	f005 f944 	bl	80095fc <tcp_write>
    if (err == ERR_MEM) {
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d113      	bne.n	80043a0 <http_send+0x98>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004378:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 800437c:	b133      	cbz	r3, 800438c <http_send+0x84>
 800437e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8004382:	2b08      	cmp	r3, #8
 8004384:	d802      	bhi.n	800438c <http_send+0x84>
        len /= 2;
 8004386:	0864      	lsrs	r4, r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 8004388:	2c01      	cmp	r4, #1
 800438a:	d8ed      	bhi.n	8004368 <http_send+0x60>
  u8_t data_to_send = 0;
 800438c:	2400      	movs	r4, #0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800438e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1c6      	bne.n	8004322 <http_send+0x1a>
 8004394:	6968      	ldr	r0, [r5, #20]
 8004396:	f7ff ff22 	bl	80041de <fs_bytes_left>
 800439a:	2800      	cmp	r0, #0
 800439c:	dcc1      	bgt.n	8004322 <http_send+0x1a>
 800439e:	e7bb      	b.n	8004318 <http_send+0x10>
  if (err == ERR_OK) {
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d1f3      	bne.n	800438c <http_send+0x84>
    hs->file += len;
 80043a4:	69ab      	ldr	r3, [r5, #24]
 80043a6:	4423      	add	r3, r4
 80043a8:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 80043aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043ac:	1b1c      	subs	r4, r3, r4
 80043ae:	626c      	str	r4, [r5, #36]	; 0x24
    data_to_send = 1;
 80043b0:	2401      	movs	r4, #1
 80043b2:	e7ec      	b.n	800438e <http_send+0x86>
 80043b4:	0800d3ea 	.word	0x0800d3ea
 80043b8:	0800d420 	.word	0x0800d420
 80043bc:	0800c5ae 	.word	0x0800c5ae

080043c0 <http_sent>:
{
 80043c0:	b508      	push	{r3, lr}
 80043c2:	460b      	mov	r3, r1
  if (hs == NULL) {
 80043c4:	4601      	mov	r1, r0
 80043c6:	b128      	cbz	r0, 80043d4 <http_sent+0x14>
  hs->retries = 0;
 80043c8:	2200      	movs	r2, #0
 80043ca:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ff9a 	bl	8004308 <http_send>
}
 80043d4:	2000      	movs	r0, #0
 80043d6:	bd08      	pop	{r3, pc}

080043d8 <http_poll>:
{
 80043d8:	b510      	push	{r4, lr}
 80043da:	460c      	mov	r4, r1
  if (hs == NULL) {
 80043dc:	4601      	mov	r1, r0
 80043de:	b920      	cbnz	r0, 80043ea <http_poll+0x12>
      http_close_conn(pcb, hs);
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff ff65 	bl	80042b0 <http_close_conn>
}
 80043e6:	2000      	movs	r0, #0
 80043e8:	bd10      	pop	{r4, pc}
    hs->retries++;
 80043ea:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80043ee:	3301      	adds	r3, #1
 80043f0:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80043f2:	2b04      	cmp	r3, #4
    hs->retries++;
 80043f4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80043f8:	d0f2      	beq.n	80043e0 <http_poll+0x8>
    if (hs->handle) {
 80043fa:	6943      	ldr	r3, [r0, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f2      	beq.n	80043e6 <http_poll+0xe>
      if (http_send(pcb, hs)) {
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff ff81 	bl	8004308 <http_send>
 8004406:	2800      	cmp	r0, #0
 8004408:	d0ed      	beq.n	80043e6 <http_poll+0xe>
        altcp_output(pcb);
 800440a:	4620      	mov	r0, r4
 800440c:	f005 fe5c 	bl	800a0c8 <tcp_output>
 8004410:	e7e9      	b.n	80043e6 <http_poll+0xe>
	...

08004414 <http_recv>:
{
 8004414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004418:	4604      	mov	r4, r0
 800441a:	b087      	sub	sp, #28
 800441c:	468b      	mov	fp, r1
 800441e:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004420:	469a      	mov	sl, r3
 8004422:	b94b      	cbnz	r3, 8004438 <http_recv+0x24>
 8004424:	b152      	cbz	r2, 800443c <http_recv+0x28>
 8004426:	b988      	cbnz	r0, 800444c <http_recv+0x38>
      altcp_recved(pcb, p->tot_len);
 8004428:	4658      	mov	r0, fp
 800442a:	8929      	ldrh	r1, [r5, #8]
 800442c:	f002 fd3e 	bl	8006eac <tcp_recved>
      pbuf_free(p);
 8004430:	4628      	mov	r0, r5
 8004432:	f002 f92d 	bl	8006690 <pbuf_free>
 8004436:	e001      	b.n	800443c <http_recv+0x28>
    if (p != NULL) {
 8004438:	2a00      	cmp	r2, #0
 800443a:	d1f5      	bne.n	8004428 <http_recv+0x14>
    http_close_conn(pcb, hs);
 800443c:	4621      	mov	r1, r4
 800443e:	4658      	mov	r0, fp
 8004440:	f7ff ff36 	bl	80042b0 <http_close_conn>
}
 8004444:	2000      	movs	r0, #0
 8004446:	b007      	add	sp, #28
 8004448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    altcp_recved(pcb, p->tot_len);
 800444c:	8911      	ldrh	r1, [r2, #8]
 800444e:	4658      	mov	r0, fp
 8004450:	f002 fd2c 	bl	8006eac <tcp_recved>
    if (hs->handle == NULL) {
 8004454:	6963      	ldr	r3, [r4, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 813d 	bne.w	80046d6 <http_recv+0x2c2>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800445c:	69a3      	ldr	r3, [r4, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 8141 	bne.w	80046e6 <http_recv+0x2d2>
  if (hs->req == NULL) {
 8004464:	6a20      	ldr	r0, [r4, #32]
 8004466:	2800      	cmp	r0, #0
 8004468:	f040 8093 	bne.w	8004592 <http_recv+0x17e>
    hs->req = p;
 800446c:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 800446e:	4628      	mov	r0, r5
 8004470:	f002 fa6c 	bl	800694c <pbuf_ref>
  if (hs->req->next != NULL) {
 8004474:	6a20      	ldr	r0, [r4, #32]
 8004476:	6803      	ldr	r3, [r0, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 808e 	beq.w	800459a <http_recv+0x186>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800447e:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8004482:	f240 33ff 	movw	r3, #1023	; 0x3ff
    data = httpd_req_buf;
 8004486:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80046ec <http_recv+0x2d8>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800448a:	4599      	cmp	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800448c:	4997      	ldr	r1, [pc, #604]	; (80046ec <http_recv+0x2d8>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800448e:	bf28      	it	cs
 8004490:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004492:	2300      	movs	r3, #0
 8004494:	464a      	mov	r2, r9
 8004496:	f002 fb35 	bl	8006b04 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 800449a:	f1b9 0f06 	cmp.w	r9, #6
 800449e:	f240 8106 	bls.w	80046ae <http_recv+0x29a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 80044a2:	464a      	mov	r2, r9
 80044a4:	4992      	ldr	r1, [pc, #584]	; (80046f0 <http_recv+0x2dc>)
 80044a6:	4640      	mov	r0, r8
 80044a8:	f000 f989 	bl	80047be <lwip_strnstr>
    if (crlf != NULL) {
 80044ac:	2800      	cmp	r0, #0
 80044ae:	f000 80fe 	beq.w	80046ae <http_recv+0x29a>
      if (!strncmp(data, "GET ", 4)) {
 80044b2:	2204      	movs	r2, #4
 80044b4:	498f      	ldr	r1, [pc, #572]	; (80046f4 <http_recv+0x2e0>)
 80044b6:	4640      	mov	r0, r8
 80044b8:	f007 f8f6 	bl	800b6a8 <strncmp>
 80044bc:	9001      	str	r0, [sp, #4]
 80044be:	2800      	cmp	r0, #0
 80044c0:	d170      	bne.n	80045a4 <http_recv+0x190>
        sp1 = data + 3;
 80044c2:	f108 0303 	add.w	r3, r8, #3
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80044c6:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80044ca:	498b      	ldr	r1, [pc, #556]	; (80046f8 <http_recv+0x2e4>)
        sp1 = data + 3;
 80044cc:	9302      	str	r3, [sp, #8]
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80044ce:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80044d2:	4630      	mov	r0, r6
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	9303      	str	r3, [sp, #12]
 80044da:	f000 f970 	bl	80047be <lwip_strnstr>
      if (sp2 == NULL) {
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	4607      	mov	r7, r0
 80044e2:	b950      	cbnz	r0, 80044fa <http_recv+0xe6>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80044e4:	461a      	mov	r2, r3
 80044e6:	4982      	ldr	r1, [pc, #520]	; (80046f0 <http_recv+0x2dc>)
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f968 	bl	80047be <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 80044ee:	4607      	mov	r7, r0
 80044f0:	2800      	cmp	r0, #0
 80044f2:	f000 80dc 	beq.w	80046ae <http_recv+0x29a>
        is_09 = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	9301      	str	r3, [sp, #4]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80044fa:	9b02      	ldr	r3, [sp, #8]
 80044fc:	42bb      	cmp	r3, r7
 80044fe:	f080 80d6 	bcs.w	80046ae <http_recv+0x29a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8004502:	464a      	mov	r2, r9
 8004504:	497d      	ldr	r1, [pc, #500]	; (80046fc <http_recv+0x2e8>)
 8004506:	4640      	mov	r0, r8
 8004508:	f000 f959 	bl	80047be <lwip_strnstr>
 800450c:	2800      	cmp	r0, #0
 800450e:	f000 80ce 	beq.w	80046ae <http_recv+0x29a>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8004512:	1bbf      	subs	r7, r7, r6
          *sp1 = 0;
 8004514:	2300      	movs	r3, #0
  size_t uri_len = strlen(uri);
 8004516:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8004518:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 800451a:	f888 3003 	strb.w	r3, [r8, #3]
          uri[uri_len] = 0;
 800451e:	55f3      	strb	r3, [r6, r7]
 8004520:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 8004522:	f7fb fe97 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004526:	2800      	cmp	r0, #0
 8004528:	f000 809f 	beq.w	800466a <http_recv+0x256>
 800452c:	1e47      	subs	r7, r0, #1
 800452e:	5df3      	ldrb	r3, [r6, r7]
 8004530:	2b2f      	cmp	r3, #47	; 0x2f
 8004532:	f040 809a 	bne.w	800466a <http_recv+0x256>
 8004536:	4b72      	ldr	r3, [pc, #456]	; (8004700 <http_recv+0x2ec>)
 8004538:	429e      	cmp	r6, r3
 800453a:	4699      	mov	r9, r3
 800453c:	d102      	bne.n	8004544 <http_recv+0x130>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800453e:	2801      	cmp	r0, #1
 8004540:	f040 8093 	bne.w	800466a <http_recv+0x256>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004544:	2f3f      	cmp	r7, #63	; 0x3f
 8004546:	bf28      	it	cs
 8004548:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 800454a:	b13f      	cbz	r7, 800455c <http_recv+0x148>
      MEMCPY(http_uri_buf, uri, copy_len);
 800454c:	463a      	mov	r2, r7
 800454e:	4631      	mov	r1, r6
 8004550:	486b      	ldr	r0, [pc, #428]	; (8004700 <http_recv+0x2ec>)
 8004552:	f007 f836 	bl	800b5c2 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	f809 3007 	strb.w	r3, [r9, r7]
        is_09 = 1;
 800455c:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 8004560:	b337      	cbz	r7, 80045b0 <http_recv+0x19c>
        if (len_left > 0) {
 8004562:	f1d7 063f 	rsbs	r6, r7, #63	; 0x3f
 8004566:	d012      	beq.n	800458e <http_recv+0x17a>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004568:	4b66      	ldr	r3, [pc, #408]	; (8004704 <http_recv+0x2f0>)
 800456a:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
 800456e:	4608      	mov	r0, r1
 8004570:	9102      	str	r1, [sp, #8]
 8004572:	f7fb fe6f 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004576:	4286      	cmp	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004578:	eb09 0307 	add.w	r3, r9, r7
 800457c:	9902      	ldr	r1, [sp, #8]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800457e:	bf28      	it	cs
 8004580:	4606      	movcs	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004582:	4618      	mov	r0, r3
 8004584:	4632      	mov	r2, r6
 8004586:	f007 f81c 	bl	800b5c2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800458a:	2200      	movs	r2, #0
 800458c:	5582      	strb	r2, [r0, r6]
        file_name = http_uri_buf;
 800458e:	4b5c      	ldr	r3, [pc, #368]	; (8004700 <http_recv+0x2ec>)
 8004590:	e011      	b.n	80045b6 <http_recv+0x1a2>
    pbuf_cat(hs->req, p);
 8004592:	4629      	mov	r1, r5
 8004594:	f002 f9f6 	bl	8006984 <pbuf_cat>
 8004598:	e769      	b.n	800446e <http_recv+0x5a>
    data = (char *)p->payload;
 800459a:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 800459e:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 80045a2:	e77a      	b.n	800449a <http_recv+0x86>
        data[4] = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f888 3004 	strb.w	r3, [r8, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80045aa:	f06f 0a0f 	mvn.w	sl, #15
 80045ae:	e045      	b.n	800463c <http_recv+0x228>
        file_name = httpd_default_filenames[loop].name;
 80045b0:	4b54      	ldr	r3, [pc, #336]	; (8004704 <http_recv+0x2f0>)
 80045b2:	f853 3038 	ldr.w	r3, [r3, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 80045b6:	4619      	mov	r1, r3
 80045b8:	4620      	mov	r0, r4
 80045ba:	9302      	str	r3, [sp, #8]
 80045bc:	4626      	mov	r6, r4
 80045be:	f7ff fded 	bl	800419c <fs_open>
      if (err == ERR_OK) {
 80045c2:	9b02      	ldr	r3, [sp, #8]
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d14a      	bne.n	800465e <http_recv+0x24a>
        uri = file_name;
 80045c8:	9305      	str	r3, [sp, #20]
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80045ca:	6833      	ldr	r3, [r6, #0]
 80045cc:	b933      	cbnz	r3, 80045dc <http_recv+0x1c8>
 80045ce:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <http_recv+0x2f4>)
 80045d0:	f640 120b 	movw	r2, #2315	; 0x90b
 80045d4:	494d      	ldr	r1, [pc, #308]	; (800470c <http_recv+0x2f8>)
 80045d6:	484e      	ldr	r0, [pc, #312]	; (8004710 <http_recv+0x2fc>)
 80045d8:	f007 f806 	bl	800b5e8 <iprintf>
    hs->file = file->data;
 80045dc:	6833      	ldr	r3, [r6, #0]
    hs->handle = file;
 80045de:	6166      	str	r6, [r4, #20]
    hs->file = file->data;
 80045e0:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80045e2:	6873      	ldr	r3, [r6, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	da06      	bge.n	80045f6 <http_recv+0x1e2>
 80045e8:	4b47      	ldr	r3, [pc, #284]	; (8004708 <http_recv+0x2f4>)
 80045ea:	f640 1234 	movw	r2, #2356	; 0x934
 80045ee:	4949      	ldr	r1, [pc, #292]	; (8004714 <http_recv+0x300>)
 80045f0:	4847      	ldr	r0, [pc, #284]	; (8004710 <http_recv+0x2fc>)
 80045f2:	f006 fff9 	bl	800b5e8 <iprintf>
      hs->left = (u32_t)file->len;
 80045f6:	6873      	ldr	r3, [r6, #4]
 80045f8:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8004600:	6963      	ldr	r3, [r4, #20]
 8004602:	7c1b      	ldrb	r3, [r3, #16]
 8004604:	07da      	lsls	r2, r3, #31
 8004606:	d46a      	bmi.n	80046de <http_recv+0x2ca>
 8004608:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <http_recv+0x2f4>)
 800460a:	f640 1244 	movw	r2, #2372	; 0x944
 800460e:	4942      	ldr	r1, [pc, #264]	; (8004718 <http_recv+0x304>)
 8004610:	483f      	ldr	r0, [pc, #252]	; (8004710 <http_recv+0x2fc>)
 8004612:	f006 ffe9 	bl	800b5e8 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	b183      	cbz	r3, 800463c <http_recv+0x228>
 800461a:	6963      	ldr	r3, [r4, #20]
 800461c:	7c1b      	ldrb	r3, [r3, #16]
 800461e:	07db      	lsls	r3, r3, #31
 8004620:	d50c      	bpl.n	800463c <http_recv+0x228>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004622:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004624:	4935      	ldr	r1, [pc, #212]	; (80046fc <http_recv+0x2e8>)
 8004626:	69a0      	ldr	r0, [r4, #24]
 8004628:	f000 f8c9 	bl	80047be <lwip_strnstr>
      if (file_start != NULL) {
 800462c:	b130      	cbz	r0, 800463c <http_recv+0x228>
        int diff = file_start + 4 - hs->file;
 800462e:	69a3      	ldr	r3, [r4, #24]
 8004630:	3004      	adds	r0, #4
 8004632:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8004634:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8004636:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 800463c:	6a20      	ldr	r0, [r4, #32]
 800463e:	b118      	cbz	r0, 8004648 <http_recv+0x234>
          pbuf_free(hs->req);
 8004640:	f002 f826 	bl	8006690 <pbuf_free>
          hs->req = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8004648:	4628      	mov	r0, r5
 800464a:	f002 f821 	bl	8006690 <pbuf_free>
      if (parsed == ERR_OK) {
 800464e:	f1ba 0f00 	cmp.w	sl, #0
 8004652:	d13b      	bne.n	80046cc <http_recv+0x2b8>
          http_send(pcb, hs);
 8004654:	4621      	mov	r1, r4
 8004656:	4658      	mov	r0, fp
 8004658:	f7ff fe56 	bl	8004308 <http_send>
 800465c:	e6f2      	b.n	8004444 <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800465e:	f108 0801 	add.w	r8, r8, #1
 8004662:	f1b8 0f05 	cmp.w	r8, #5
 8004666:	f47f af7b 	bne.w	8004560 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 800466a:	213f      	movs	r1, #63	; 0x3f
 800466c:	9805      	ldr	r0, [sp, #20]
 800466e:	f007 f80d 	bl	800b68c <strchr>
    if (params != NULL) {
 8004672:	b108      	cbz	r0, 8004678 <http_recv+0x264>
      *params = '\0';
 8004674:	2300      	movs	r3, #0
 8004676:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8004678:	9905      	ldr	r1, [sp, #20]
 800467a:	4620      	mov	r0, r4
 800467c:	4626      	mov	r6, r4
 800467e:	f7ff fd8d 	bl	800419c <fs_open>
    if (err == ERR_OK) {
 8004682:	2800      	cmp	r0, #0
 8004684:	d0a1      	beq.n	80045ca <http_recv+0x1b6>
      file = http_get_404_file(hs, &uri);
 8004686:	a905      	add	r1, sp, #20
 8004688:	4620      	mov	r0, r4
 800468a:	f7ff fdbb 	bl	8004204 <http_get_404_file>
  if (file == NULL) {
 800468e:	4606      	mov	r6, r0
 8004690:	2800      	cmp	r0, #0
 8004692:	d19a      	bne.n	80045ca <http_recv+0x1b6>
    file = http_get_404_file(hs, &uri);
 8004694:	a905      	add	r1, sp, #20
 8004696:	4620      	mov	r0, r4
 8004698:	f7ff fdb4 	bl	8004204 <http_get_404_file>
  if (file != NULL) {
 800469c:	4606      	mov	r6, r0
 800469e:	2800      	cmp	r0, #0
 80046a0:	d193      	bne.n	80045ca <http_recv+0x1b6>
    hs->handle = NULL;
 80046a2:	6160      	str	r0, [r4, #20]
    hs->file = NULL;
 80046a4:	61a0      	str	r0, [r4, #24]
    hs->left = 0;
 80046a6:	6260      	str	r0, [r4, #36]	; 0x24
    hs->retries = 0;
 80046a8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 80046ac:	e7c6      	b.n	800463c <http_recv+0x228>
  clen = pbuf_clen(hs->req);
 80046ae:	6a20      	ldr	r0, [r4, #32]
 80046b0:	f002 f944 	bl	800693c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80046b4:	6a23      	ldr	r3, [r4, #32]
 80046b6:	891b      	ldrh	r3, [r3, #8]
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	f4bf af75 	bcs.w	80045aa <http_recv+0x196>
 80046c0:	2805      	cmp	r0, #5
 80046c2:	f63f af72 	bhi.w	80045aa <http_recv+0x196>
 80046c6:	f06f 0a04 	mvn.w	sl, #4
 80046ca:	e7bd      	b.n	8004648 <http_recv+0x234>
      } else if (parsed == ERR_ARG) {
 80046cc:	f11a 0f10 	cmn.w	sl, #16
 80046d0:	f47f aeb8 	bne.w	8004444 <http_recv+0x30>
 80046d4:	e6b2      	b.n	800443c <http_recv+0x28>
      pbuf_free(p);
 80046d6:	4628      	mov	r0, r5
 80046d8:	f001 ffda 	bl	8006690 <pbuf_free>
 80046dc:	e6b2      	b.n	8004444 <http_recv+0x30>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80046de:	9b01      	ldr	r3, [sp, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ab      	beq.n	800463c <http_recv+0x228>
 80046e4:	e79d      	b.n	8004622 <http_recv+0x20e>
    return ERR_USE;
 80046e6:	f06f 0a07 	mvn.w	sl, #7
 80046ea:	e7a7      	b.n	800463c <http_recv+0x228>
 80046ec:	20023e2c 	.word	0x20023e2c
 80046f0:	0800d38d 	.word	0x0800d38d
 80046f4:	0800d386 	.word	0x0800d386
 80046f8:	0800f4c4 	.word	0x0800f4c4
 80046fc:	0800d38b 	.word	0x0800d38b
 8004700:	20023dec 	.word	0x20023dec
 8004704:	0800d458 	.word	0x0800d458
 8004708:	0800d3ea 	.word	0x0800d3ea
 800470c:	0800d390 	.word	0x0800d390
 8004710:	0800c5ae 	.word	0x0800c5ae
 8004714:	0800d3a3 	.word	0x0800d3a3
 8004718:	0800d3c1 	.word	0x0800d3c1

0800471c <http_err>:
{
 800471c:	b510      	push	{r4, lr}
  if (hs != NULL) {
 800471e:	4604      	mov	r4, r0
 8004720:	b130      	cbz	r0, 8004730 <http_err+0x14>
    http_state_eof(hs);
 8004722:	f7ff fd60 	bl	80041e6 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8004726:	4620      	mov	r0, r4
}
 8004728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 800472c:	f001 baba 	b.w	8005ca4 <mem_free>
 8004730:	bd10      	pop	{r4, pc}
	...

08004734 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004734:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8004736:	202e      	movs	r0, #46	; 0x2e
 8004738:	f002 ff36 	bl	80075a8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800473c:	4604      	mov	r4, r0
 800473e:	b940      	cbnz	r0, 8004752 <httpd_init+0x1e>
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <httpd_init+0x64>)
 8004742:	f640 2272 	movw	r2, #2674	; 0xa72
 8004746:	4915      	ldr	r1, [pc, #84]	; (800479c <httpd_init+0x68>)
 8004748:	4815      	ldr	r0, [pc, #84]	; (80047a0 <httpd_init+0x6c>)
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 800474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800474e:	f006 bf4b 	b.w	800b5e8 <iprintf>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004752:	2101      	movs	r1, #1
 8004754:	f002 fbfc 	bl	8006f50 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004758:	2250      	movs	r2, #80	; 0x50
 800475a:	4912      	ldr	r1, [pc, #72]	; (80047a4 <httpd_init+0x70>)
 800475c:	4620      	mov	r0, r4
 800475e:	f002 faaf 	bl	8006cc0 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004762:	b130      	cbz	r0, 8004772 <httpd_init+0x3e>
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <httpd_init+0x64>)
 8004766:	f640 2257 	movw	r2, #2647	; 0xa57
 800476a:	490f      	ldr	r1, [pc, #60]	; (80047a8 <httpd_init+0x74>)
 800476c:	480c      	ldr	r0, [pc, #48]	; (80047a0 <httpd_init+0x6c>)
 800476e:	f006 ff3b 	bl	800b5e8 <iprintf>
    pcb = altcp_listen(pcb);
 8004772:	4620      	mov	r0, r4
 8004774:	21ff      	movs	r1, #255	; 0xff
 8004776:	f002 fb5f 	bl	8006e38 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800477a:	4604      	mov	r4, r0
 800477c:	b930      	cbnz	r0, 800478c <httpd_init+0x58>
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <httpd_init+0x64>)
 8004780:	f640 2259 	movw	r2, #2649	; 0xa59
 8004784:	4909      	ldr	r1, [pc, #36]	; (80047ac <httpd_init+0x78>)
 8004786:	4806      	ldr	r0, [pc, #24]	; (80047a0 <httpd_init+0x6c>)
 8004788:	f006 ff2e 	bl	800b5e8 <iprintf>
    altcp_accept(pcb, http_accept);
 800478c:	4620      	mov	r0, r4
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <httpd_init+0x7c>)
}
 8004790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8004794:	f002 bc5c 	b.w	8007050 <tcp_accept>
 8004798:	0800d3ea 	.word	0x0800d3ea
 800479c:	0800d480 	.word	0x0800d480
 80047a0:	0800c5ae 	.word	0x0800c5ae
 80047a4:	0800d800 	.word	0x0800d800
 80047a8:	0800d49b 	.word	0x0800d49b
 80047ac:	0800d4b7 	.word	0x0800d4b7
 80047b0:	08004241 	.word	0x08004241

080047b4 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80047b4:	ba40      	rev16	r0, r0
}
 80047b6:	b280      	uxth	r0, r0
 80047b8:	4770      	bx	lr

080047ba <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80047ba:	ba00      	rev	r0, r0
 80047bc:	4770      	bx	lr

080047be <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80047be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c0:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 80047c2:	4608      	mov	r0, r1
{
 80047c4:	460f      	mov	r7, r1
 80047c6:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 80047c8:	f7fb fd44 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 80047cc:	4606      	mov	r6, r0
 80047ce:	b190      	cbz	r0, 80047f6 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80047d0:	4425      	add	r5, r4
 80047d2:	7820      	ldrb	r0, [r4, #0]
 80047d4:	b180      	cbz	r0, 80047f8 <lwip_strnstr+0x3a>
 80047d6:	19a3      	adds	r3, r4, r6
 80047d8:	429d      	cmp	r5, r3
 80047da:	d201      	bcs.n	80047e0 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 80047dc:	2000      	movs	r0, #0
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80047e0:	783b      	ldrb	r3, [r7, #0]
 80047e2:	4283      	cmp	r3, r0
 80047e4:	d105      	bne.n	80047f2 <lwip_strnstr+0x34>
 80047e6:	4632      	mov	r2, r6
 80047e8:	4639      	mov	r1, r7
 80047ea:	4620      	mov	r0, r4
 80047ec:	f006 ff5c 	bl	800b6a8 <strncmp>
 80047f0:	b108      	cbz	r0, 80047f6 <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80047f2:	3401      	adds	r4, #1
 80047f4:	e7ed      	b.n	80047d2 <lwip_strnstr+0x14>
 80047f6:	4620      	mov	r0, r4
}
 80047f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047fa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80047fa:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80047fc:	f006 f97e 	bl	800aafc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8004800:	f001 fa1a 	bl	8005c38 <mem_init>
  memp_init();
 8004804:	f001 fcd2 	bl	80061ac <memp_init>
  pbuf_init();
  netif_init();
 8004808:	f001 fd72 	bl	80062f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800480c:	f005 ffb4 	bl	800a778 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004810:	f002 fa32 	bl	8006c78 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8004814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8004818:	f005 bf62 	b.w	800a6e0 <sys_timeouts_init>

0800481c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800481c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800481e:	2618      	movs	r6, #24
 8004820:	4c07      	ldr	r4, [pc, #28]	; (8004840 <etharp_free_entry+0x24>)
{
 8004822:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8004824:	4346      	muls	r6, r0
 8004826:	59a0      	ldr	r0, [r4, r6]
 8004828:	b118      	cbz	r0, 8004832 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800482a:	f001 ff31 	bl	8006690 <pbuf_free>
    arp_table[i].q = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004832:	2318      	movs	r3, #24
 8004834:	fb03 4405 	mla	r4, r3, r5, r4
 8004838:	2300      	movs	r3, #0
 800483a:	7523      	strb	r3, [r4, #20]
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	bf00      	nop
 8004840:	2002422c 	.word	0x2002422c

08004844 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8004844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8004848:	f04f 0c0a 	mov.w	ip, #10
{
 800484c:	f04f 0e00 	mov.w	lr, #0
 8004850:	4606      	mov	r6, r0
 8004852:	4617      	mov	r7, r2
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <etharp_find_entry+0x124>)
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004856:	46f3      	mov	fp, lr
  s16_t empty = ARP_TABLE_SIZE;
 8004858:	4664      	mov	r4, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800485a:	4665      	mov	r5, ip
 800485c:	46e0      	mov	r8, ip
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800485e:	f8cd e004 	str.w	lr, [sp, #4]
 8004862:	f8cd e000 	str.w	lr, [sp]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004866:	2c0a      	cmp	r4, #10
 8004868:	fa0f f08e 	sxth.w	r0, lr
    u8_t state = arp_table[i].state;
 800486c:	f893 9014 	ldrb.w	r9, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004870:	d110      	bne.n	8004894 <etharp_find_entry+0x50>
 8004872:	f1b9 0f00 	cmp.w	r9, #0
 8004876:	d059      	beq.n	800492c <etharp_find_entry+0xe8>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004878:	2e00      	cmp	r6, #0
 800487a:	d066      	beq.n	800494a <etharp_find_entry+0x106>
 800487c:	6832      	ldr	r2, [r6, #0]
 800487e:	4692      	mov	sl, r2
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4592      	cmp	sl, r2
 8004884:	d161      	bne.n	800494a <etharp_find_entry+0x106>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8004886:	b117      	cbz	r7, 800488e <etharp_find_entry+0x4a>
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	4297      	cmp	r7, r2
 800488c:	d15d      	bne.n	800494a <etharp_find_entry+0x106>
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800488e:	b003      	add	sp, #12
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8004894:	f1b9 0f00 	cmp.w	r9, #0
 8004898:	d1ee      	bne.n	8004878 <etharp_find_entry+0x34>
 800489a:	f10e 0e01 	add.w	lr, lr, #1
 800489e:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80048a0:	f1be 0f0a 	cmp.w	lr, #10
 80048a4:	d1df      	bne.n	8004866 <etharp_find_entry+0x22>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80048a6:	078a      	lsls	r2, r1, #30
 80048a8:	d44c      	bmi.n	8004944 <etharp_find_entry+0x100>
 80048aa:	2c0a      	cmp	r4, #10
 80048ac:	d113      	bne.n	80048d6 <etharp_find_entry+0x92>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80048ae:	07cb      	lsls	r3, r1, #31
 80048b0:	d548      	bpl.n	8004944 <etharp_find_entry+0x100>
    if (old_stable < ARP_TABLE_SIZE) {
 80048b2:	2d0a      	cmp	r5, #10
 80048b4:	d03c      	beq.n	8004930 <etharp_find_entry+0xec>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80048b6:	2318      	movs	r3, #24
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <etharp_find_entry+0x124>)
 80048ba:	436b      	muls	r3, r5
 80048bc:	58d3      	ldr	r3, [r2, r3]
 80048be:	b133      	cbz	r3, 80048ce <etharp_find_entry+0x8a>
 80048c0:	4b2a      	ldr	r3, [pc, #168]	; (800496c <etharp_find_entry+0x128>)
 80048c2:	f240 126d 	movw	r2, #365	; 0x16d
 80048c6:	492a      	ldr	r1, [pc, #168]	; (8004970 <etharp_find_entry+0x12c>)
 80048c8:	482a      	ldr	r0, [pc, #168]	; (8004974 <etharp_find_entry+0x130>)
 80048ca:	f006 fe8d 	bl	800b5e8 <iprintf>
    etharp_free_entry(i);
 80048ce:	462c      	mov	r4, r5
 80048d0:	4628      	mov	r0, r5
 80048d2:	f7ff ffa3 	bl	800481c <etharp_free_entry>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80048d6:	2318      	movs	r3, #24
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <etharp_find_entry+0x124>)
 80048da:	fb03 2304 	mla	r3, r3, r4, r2
 80048de:	7d1b      	ldrb	r3, [r3, #20]
 80048e0:	b133      	cbz	r3, 80048f0 <etharp_find_entry+0xac>
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <etharp_find_entry+0x128>)
 80048e4:	f240 1285 	movw	r2, #389	; 0x185
 80048e8:	4923      	ldr	r1, [pc, #140]	; (8004978 <etharp_find_entry+0x134>)
 80048ea:	4822      	ldr	r0, [pc, #136]	; (8004974 <etharp_find_entry+0x130>)
 80048ec:	f006 fe7c 	bl	800b5e8 <iprintf>
  if (ipaddr != NULL) {
 80048f0:	b12e      	cbz	r6, 80048fe <etharp_find_entry+0xba>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80048f2:	2318      	movs	r3, #24
 80048f4:	491c      	ldr	r1, [pc, #112]	; (8004968 <etharp_find_entry+0x124>)
 80048f6:	6832      	ldr	r2, [r6, #0]
 80048f8:	fb03 1304 	mla	r3, r3, r4, r1
 80048fc:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80048fe:	2318      	movs	r3, #24
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <etharp_find_entry+0x124>)
  return (s16_t)i;
 8004902:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8004904:	fb03 2a04 	mla	sl, r3, r4, r2
 8004908:	2300      	movs	r3, #0
  arp_table[i].netif = netif;
 800490a:	f8ca 7008 	str.w	r7, [sl, #8]
  arp_table[i].ctime = 0;
 800490e:	f8aa 3012 	strh.w	r3, [sl, #18]
  return (s16_t)i;
 8004912:	e7bc      	b.n	800488e <etharp_find_entry+0x4a>
          if (arp_table[i].ctime >= age_pending) {
 8004914:	9a01      	ldr	r2, [sp, #4]
 8004916:	4591      	cmp	r9, r2
 8004918:	d3bf      	bcc.n	800489a <etharp_find_entry+0x56>
 800491a:	f8cd 9004 	str.w	r9, [sp, #4]
 800491e:	4680      	mov	r8, r0
 8004920:	e7bb      	b.n	800489a <etharp_find_entry+0x56>
          if (arp_table[i].ctime >= age_stable) {
 8004922:	45d9      	cmp	r9, fp
 8004924:	d3b9      	bcc.n	800489a <etharp_find_entry+0x56>
 8004926:	46cb      	mov	fp, r9
 8004928:	4605      	mov	r5, r0
 800492a:	e7b6      	b.n	800489a <etharp_find_entry+0x56>
 800492c:	4604      	mov	r4, r0
 800492e:	e7b4      	b.n	800489a <etharp_find_entry+0x56>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004930:	f1b8 0f0a 	cmp.w	r8, #10
 8004934:	d104      	bne.n	8004940 <etharp_find_entry+0xfc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004936:	f1bc 0f0a 	cmp.w	ip, #10
 800493a:	d003      	beq.n	8004944 <etharp_find_entry+0x100>
 800493c:	4665      	mov	r5, ip
 800493e:	e7c6      	b.n	80048ce <etharp_find_entry+0x8a>
 8004940:	4645      	mov	r5, r8
 8004942:	e7c4      	b.n	80048ce <etharp_find_entry+0x8a>
    return (s16_t)ERR_MEM;
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e7a1      	b.n	800488e <etharp_find_entry+0x4a>
      if (state == ETHARP_STATE_PENDING) {
 800494a:	f1b9 0f01 	cmp.w	r9, #1
 800494e:	f8b3 9012 	ldrh.w	r9, [r3, #18]
 8004952:	d1e6      	bne.n	8004922 <etharp_find_entry+0xde>
        if (arp_table[i].q != NULL) {
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	2a00      	cmp	r2, #0
 8004958:	d0dc      	beq.n	8004914 <etharp_find_entry+0xd0>
          if (arp_table[i].ctime >= age_queue) {
 800495a:	9a00      	ldr	r2, [sp, #0]
 800495c:	4591      	cmp	r9, r2
 800495e:	d39c      	bcc.n	800489a <etharp_find_entry+0x56>
 8004960:	f8cd 9000 	str.w	r9, [sp]
 8004964:	4684      	mov	ip, r0
 8004966:	e798      	b.n	800489a <etharp_find_entry+0x56>
 8004968:	2002422c 	.word	0x2002422c
 800496c:	0800d510 	.word	0x0800d510
 8004970:	0800d547 	.word	0x0800d547
 8004974:	0800c5ae 	.word	0x0800c5ae
 8004978:	0800d55e 	.word	0x0800d55e

0800497c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800497c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004982:	4689      	mov	r9, r1
 8004984:	4692      	mov	sl, r2
 8004986:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004988:	4607      	mov	r7, r0
 800498a:	b930      	cbnz	r0, 800499a <etharp_raw+0x1e>
 800498c:	4b2d      	ldr	r3, [pc, #180]	; (8004a44 <etharp_raw+0xc8>)
 800498e:	f240 4257 	movw	r2, #1111	; 0x457
 8004992:	492d      	ldr	r1, [pc, #180]	; (8004a48 <etharp_raw+0xcc>)
 8004994:	482d      	ldr	r0, [pc, #180]	; (8004a4c <etharp_raw+0xd0>)
 8004996:	f006 fe27 	bl	800b5e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800499a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800499e:	211c      	movs	r1, #28
 80049a0:	200e      	movs	r0, #14
 80049a2:	f001 fedd 	bl	8006760 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80049a6:	4606      	mov	r6, r0
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d047      	beq.n	8004a3c <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80049ac:	8943      	ldrh	r3, [r0, #10]
 80049ae:	2b1b      	cmp	r3, #27
 80049b0:	d806      	bhi.n	80049c0 <etharp_raw+0x44>
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <etharp_raw+0xc8>)
 80049b4:	f240 4263 	movw	r2, #1123	; 0x463
 80049b8:	4925      	ldr	r1, [pc, #148]	; (8004a50 <etharp_raw+0xd4>)
 80049ba:	4824      	ldr	r0, [pc, #144]	; (8004a4c <etharp_raw+0xd0>)
 80049bc:	f006 fe14 	bl	800b5e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80049c0:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80049c2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80049c6:	f7ff fef5 	bl	80047b4 <lwip_htons>
 80049ca:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80049cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049d0:	2b06      	cmp	r3, #6
 80049d2:	d006      	beq.n	80049e2 <etharp_raw+0x66>
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <etharp_raw+0xc8>)
 80049d6:	f240 426a 	movw	r2, #1130	; 0x46a
 80049da:	491e      	ldr	r1, [pc, #120]	; (8004a54 <etharp_raw+0xd8>)
 80049dc:	481b      	ldr	r0, [pc, #108]	; (8004a4c <etharp_raw+0xd0>)
 80049de:	f006 fe03 	bl	800b5e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80049e2:	f8d8 3000 	ldr.w	r3, [r8]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80049e6:	464a      	mov	r2, r9
 80049e8:	4631      	mov	r1, r6
 80049ea:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80049f2:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	f8c4 3012 	str.w	r3, [r4, #18]
 80049fa:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80049fc:	2500      	movs	r5, #0
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80049fe:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8004a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8004a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a0a:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8004a0c:	7025      	strb	r5, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8004a0e:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8004a10:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004a12:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8004a14:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004a16:	2308      	movs	r3, #8
 8004a18:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8004a1a:	2306      	movs	r3, #6
 8004a1c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8004a1e:	2304      	movs	r3, #4
 8004a20:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004a22:	f640 0306 	movw	r3, #2054	; 0x806
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4653      	mov	r3, sl
 8004a2a:	f005 ffeb 	bl	800aa04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f001 fe2e 	bl	8006690 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8004a34:	4628      	mov	r0, r5
}
 8004a36:	b002      	add	sp, #8
 8004a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e7f9      	b.n	8004a36 <etharp_raw+0xba>
 8004a42:	bf00      	nop
 8004a44:	0800d510 	.word	0x0800d510
 8004a48:	0800d64a 	.word	0x0800d64a
 8004a4c:	0800c5ae 	.word	0x0800c5ae
 8004a50:	0800d658 	.word	0x0800d658
 8004a54:	0800d689 	.word	0x0800d689

08004a58 <etharp_cleanup_netif>:
{
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	4d07      	ldr	r5, [pc, #28]	; (8004a7c <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a5e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004a60:	7d2b      	ldrb	r3, [r5, #20]
 8004a62:	b12b      	cbz	r3, 8004a70 <etharp_cleanup_netif+0x18>
 8004a64:	68ab      	ldr	r3, [r5, #8]
 8004a66:	42b3      	cmp	r3, r6
 8004a68:	d102      	bne.n	8004a70 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7ff fed6 	bl	800481c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a70:	3401      	adds	r4, #1
 8004a72:	3518      	adds	r5, #24
 8004a74:	2c0a      	cmp	r4, #10
 8004a76:	d1f3      	bne.n	8004a60 <etharp_cleanup_netif+0x8>
}
 8004a78:	bd70      	pop	{r4, r5, r6, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2002422c 	.word	0x2002422c

08004a80 <etharp_input>:
{
 8004a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	4680      	mov	r8, r0
 8004a86:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004a88:	460c      	mov	r4, r1
 8004a8a:	b949      	cbnz	r1, 8004aa0 <etharp_input+0x20>
 8004a8c:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <etharp_input+0x128>)
 8004a8e:	f240 228a 	movw	r2, #650	; 0x28a
 8004a92:	4946      	ldr	r1, [pc, #280]	; (8004bac <etharp_input+0x12c>)
 8004a94:	4846      	ldr	r0, [pc, #280]	; (8004bb0 <etharp_input+0x130>)
 8004a96:	f006 fda7 	bl	800b5e8 <iprintf>
}
 8004a9a:	b006      	add	sp, #24
 8004a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8004aa0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8004aa2:	882b      	ldrh	r3, [r5, #0]
 8004aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa8:	d108      	bne.n	8004abc <etharp_input+0x3c>
 8004aaa:	792b      	ldrb	r3, [r5, #4]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d105      	bne.n	8004abc <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004ab0:	796b      	ldrb	r3, [r5, #5]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d102      	bne.n	8004abc <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004ab6:	886b      	ldrh	r3, [r5, #2]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d003      	beq.n	8004ac4 <etharp_input+0x44>
  pbuf_free(p);
 8004abc:	4640      	mov	r0, r8
 8004abe:	f001 fde7 	bl	8006690 <pbuf_free>
 8004ac2:	e7ea      	b.n	8004a9a <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8004ac4:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ac8:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8004aca:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8004acc:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ace:	b116      	cbz	r6, 8004ad6 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8004ad0:	1b9b      	subs	r3, r3, r6
 8004ad2:	425e      	negs	r6, r3
 8004ad4:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004ad6:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004ad8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004adc:	f105 0708 	add.w	r7, r5, #8
 8004ae0:	bf14      	ite	ne
 8004ae2:	f04f 0a01 	movne.w	sl, #1
 8004ae6:	f04f 0a02 	moveq.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	d006      	beq.n	8004afc <etharp_input+0x7c>
 8004aee:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <etharp_input+0x128>)
 8004af0:	f240 12a9 	movw	r2, #425	; 0x1a9
 8004af4:	492f      	ldr	r1, [pc, #188]	; (8004bb4 <etharp_input+0x134>)
 8004af6:	482e      	ldr	r0, [pc, #184]	; (8004bb0 <etharp_input+0x130>)
 8004af8:	f006 fd76 	bl	800b5e8 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8004afc:	9805      	ldr	r0, [sp, #20]
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d03d      	beq.n	8004b7e <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004b02:	4621      	mov	r1, r4
 8004b04:	f000 fcb1 	bl	800546a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8004b08:	4681      	mov	r9, r0
 8004b0a:	bbc0      	cbnz	r0, 8004b7e <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8004b0c:	9b05      	ldr	r3, [sp, #20]
 8004b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004b12:	2be0      	cmp	r3, #224	; 0xe0
 8004b14:	d033      	beq.n	8004b7e <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8004b16:	4622      	mov	r2, r4
 8004b18:	4651      	mov	r1, sl
 8004b1a:	a805      	add	r0, sp, #20
 8004b1c:	f7ff fe92 	bl	8004844 <etharp_find_entry>
  if (i < 0) {
 8004b20:	2800      	cmp	r0, #0
 8004b22:	db2c      	blt.n	8004b7e <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004b24:	2218      	movs	r2, #24
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <etharp_input+0x138>)
 8004b28:	f04f 0c02 	mov.w	ip, #2
 8004b2c:	fb02 f100 	mul.w	r1, r2, r0
 8004b30:	eb03 0e01 	add.w	lr, r3, r1
 8004b34:	f88e c014 	strb.w	ip, [lr, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004b38:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8004b3c:	f8ce 4008 	str.w	r4, [lr, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004b40:	fb10 c202 	smlabb	r2, r0, r2, ip
 8004b44:	6838      	ldr	r0, [r7, #0]
 8004b46:	eb03 0c02 	add.w	ip, r3, r2
 8004b4a:	5098      	str	r0, [r3, r2]
 8004b4c:	88ba      	ldrh	r2, [r7, #4]
 8004b4e:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8004b52:	f853 a001 	ldr.w	sl, [r3, r1]
  arp_table[i].ctime = 0;
 8004b56:	f8ae 9012 	strh.w	r9, [lr, #18]
  if (arp_table[i].q != NULL) {
 8004b5a:	f1ba 0f00 	cmp.w	sl, #0
 8004b5e:	d00e      	beq.n	8004b7e <etharp_input+0xfe>
    arp_table[i].q = NULL;
 8004b60:	f843 9001 	str.w	r9, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b68:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4620      	mov	r0, r4
 8004b72:	463b      	mov	r3, r7
 8004b74:	f005 ff46 	bl	800aa04 <ethernet_output>
    pbuf_free(p);
 8004b78:	4650      	mov	r0, sl
 8004b7a:	f001 fd89 	bl	8006690 <pbuf_free>
  switch (hdr->opcode) {
 8004b7e:	88eb      	ldrh	r3, [r5, #6]
 8004b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b84:	d19a      	bne.n	8004abc <etharp_input+0x3c>
      if (for_us) {
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	d098      	beq.n	8004abc <etharp_input+0x3c>
        etharp_raw(netif,
 8004b8a:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8004b8c:	f104 0322 	add.w	r3, r4, #34	; 0x22
        etharp_raw(netif,
 8004b90:	9701      	str	r7, [sp, #4]
 8004b92:	4620      	mov	r0, r4
 8004b94:	9203      	str	r2, [sp, #12]
 8004b96:	aa05      	add	r2, sp, #20
 8004b98:	4619      	mov	r1, r3
 8004b9a:	9202      	str	r2, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8004b9c:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8004b9e:	9200      	str	r2, [sp, #0]
 8004ba0:	463a      	mov	r2, r7
 8004ba2:	f7ff feeb 	bl	800497c <etharp_raw>
 8004ba6:	e789      	b.n	8004abc <etharp_input+0x3c>
 8004ba8:	0800d510 	.word	0x0800d510
 8004bac:	0800d64a 	.word	0x0800d64a
 8004bb0:	0800c5ae 	.word	0x0800c5ae
 8004bb4:	0800d5a6 	.word	0x0800d5a6
 8004bb8:	2002422c 	.word	0x2002422c

08004bbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bbe:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004bc0:	f100 0322 	add.w	r3, r0, #34	; 0x22
 8004bc4:	9102      	str	r1, [sp, #8]
 8004bc6:	2401      	movs	r4, #1
 8004bc8:	4905      	ldr	r1, [pc, #20]	; (8004be0 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004bca:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004bcc:	9403      	str	r4, [sp, #12]
 8004bce:	9101      	str	r1, [sp, #4]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	9200      	str	r2, [sp, #0]
 8004bd4:	4a03      	ldr	r2, [pc, #12]	; (8004be4 <etharp_request+0x28>)
 8004bd6:	f7ff fed1 	bl	800497c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	0800f40b 	.word	0x0800f40b
 8004be4:	0800f39f 	.word	0x0800f39f

08004be8 <etharp_tmr>:
{
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	4c13      	ldr	r4, [pc, #76]	; (8004c38 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004bec:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004bee:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004bf0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8004bf2:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8004bf4:	b16a      	cbz	r2, 8004c12 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8004bf6:	89e3      	ldrh	r3, [r4, #14]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004bfc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8004c00:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004c02:	d203      	bcs.n	8004c0c <etharp_tmr+0x24>
 8004c04:	2a01      	cmp	r2, #1
 8004c06:	d109      	bne.n	8004c1c <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d90b      	bls.n	8004c24 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff fe05 	bl	800481c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004c12:	3501      	adds	r5, #1
 8004c14:	3418      	adds	r4, #24
 8004c16:	2d0a      	cmp	r5, #10
 8004c18:	d1eb      	bne.n	8004bf2 <etharp_tmr+0xa>
 8004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004c1c:	2a03      	cmp	r2, #3
 8004c1e:	d106      	bne.n	8004c2e <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004c20:	7427      	strb	r7, [r4, #16]
 8004c22:	e7f6      	b.n	8004c12 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004c24:	4621      	mov	r1, r4
 8004c26:	6860      	ldr	r0, [r4, #4]
 8004c28:	f7ff ffc8 	bl	8004bbc <etharp_request>
 8004c2c:	e7f1      	b.n	8004c12 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004c2e:	2a04      	cmp	r2, #4
 8004c30:	d1ef      	bne.n	8004c12 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004c32:	7426      	strb	r6, [r4, #16]
 8004c34:	e7ed      	b.n	8004c12 <etharp_tmr+0x2a>
 8004c36:	bf00      	nop
 8004c38:	20024230 	.word	0x20024230

08004c3c <etharp_output_to_arp_index>:
{
 8004c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c40:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004c42:	4d27      	ldr	r5, [pc, #156]	; (8004ce0 <etharp_output_to_arp_index+0xa4>)
 8004c44:	2218      	movs	r2, #24
{
 8004c46:	b085      	sub	sp, #20
 8004c48:	4606      	mov	r6, r0
 8004c4a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004c4c:	fb02 5204 	mla	r2, r2, r4, r5
 8004c50:	7d12      	ldrb	r2, [r2, #20]
 8004c52:	2a01      	cmp	r2, #1
 8004c54:	d806      	bhi.n	8004c64 <etharp_output_to_arp_index+0x28>
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <etharp_output_to_arp_index+0xa8>)
 8004c58:	f240 22ef 	movw	r2, #751	; 0x2ef
 8004c5c:	4922      	ldr	r1, [pc, #136]	; (8004ce8 <etharp_output_to_arp_index+0xac>)
 8004c5e:	4823      	ldr	r0, [pc, #140]	; (8004cec <etharp_output_to_arp_index+0xb0>)
 8004c60:	f006 fcc2 	bl	800b5e8 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004c64:	2118      	movs	r1, #24
 8004c66:	f106 0722 	add.w	r7, r6, #34	; 0x22
 8004c6a:	fb01 5904 	mla	r9, r1, r4, r5
 8004c6e:	f899 3014 	ldrb.w	r3, [r9, #20]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d10d      	bne.n	8004c92 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8004c76:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8004c7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8004c7e:	d917      	bls.n	8004cb0 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004c80:	4649      	mov	r1, r9
 8004c82:	4630      	mov	r0, r6
 8004c84:	3104      	adds	r1, #4
 8004c86:	f7ff ff99 	bl	8004bbc <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004c8a:	b910      	cbnz	r0, 8004c92 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8004c92:	2318      	movs	r3, #24
 8004c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c98:	4641      	mov	r1, r8
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	fb03 5304 	mla	r3, r3, r4, r5
 8004ca0:	9200      	str	r2, [sp, #0]
 8004ca2:	463a      	mov	r2, r7
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	f005 fead 	bl	800aa04 <ethernet_output>
}
 8004caa:	b005      	add	sp, #20
 8004cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8004cb0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004cb4:	d3ed      	bcc.n	8004c92 <etharp_output_to_arp_index+0x56>
 8004cb6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	9103      	str	r1, [sp, #12]
 8004cc2:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004cc4:	f103 020c 	add.w	r2, r3, #12
 8004cc8:	3304      	adds	r3, #4
 8004cca:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004ccc:	442a      	add	r2, r5
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <etharp_output_to_arp_index+0xb4>)
 8004cd2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004cd4:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	463b      	mov	r3, r7
 8004cda:	f7ff fe4f 	bl	800497c <etharp_raw>
 8004cde:	e7d4      	b.n	8004c8a <etharp_output_to_arp_index+0x4e>
 8004ce0:	2002422c 	.word	0x2002422c
 8004ce4:	0800d510 	.word	0x0800d510
 8004ce8:	0800d5ca 	.word	0x0800d5ca
 8004cec:	0800c5ae 	.word	0x0800c5ae
 8004cf0:	0800f40b 	.word	0x0800f40b

08004cf4 <etharp_query>:
{
 8004cf4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	4689      	mov	r9, r1
 8004cfa:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004cfc:	4601      	mov	r1, r0
{
 8004cfe:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004d00:	f8d9 0000 	ldr.w	r0, [r9]
 8004d04:	f000 fbb1 	bl	800546a <ip4_addr_isbroadcast_u32>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d175      	bne.n	8004df8 <etharp_query+0x104>
      ip4_addr_ismulticast(ipaddr) ||
 8004d0c:	f8d9 3000 	ldr.w	r3, [r9]
 8004d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004d14:	2ae0      	cmp	r2, #224	; 0xe0
 8004d16:	d06f      	beq.n	8004df8 <etharp_query+0x104>
      ip4_addr_isany(ipaddr)) {
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d06d      	beq.n	8004df8 <etharp_query+0x104>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8004d1c:	463a      	mov	r2, r7
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4648      	mov	r0, r9
 8004d22:	f7ff fd8f 	bl	8004844 <etharp_find_entry>
  if (i_err < 0) {
 8004d26:	1e04      	subs	r4, r0, #0
 8004d28:	da03      	bge.n	8004d32 <etharp_query+0x3e>
    return (err_t)i_err;
 8004d2a:	b260      	sxtb	r0, r4
}
 8004d2c:	b002      	add	sp, #8
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8004d32:	2c7e      	cmp	r4, #126	; 0x7e
 8004d34:	dd06      	ble.n	8004d44 <etharp_query+0x50>
 8004d36:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <etharp_query+0x140>)
 8004d38:	f240 32c1 	movw	r2, #961	; 0x3c1
 8004d3c:	493e      	ldr	r1, [pc, #248]	; (8004e38 <etharp_query+0x144>)
 8004d3e:	483f      	ldr	r0, [pc, #252]	; (8004e3c <etharp_query+0x148>)
 8004d40:	f006 fc52 	bl	800b5e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8004d44:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004d46:	4e3e      	ldr	r6, [pc, #248]	; (8004e40 <etharp_query+0x14c>)
 8004d48:	2218      	movs	r2, #24
 8004d4a:	fb02 6204 	mla	r2, r2, r4, r6
 8004d4e:	7d13      	ldrb	r3, [r2, #20]
 8004d50:	bb83      	cbnz	r3, 8004db4 <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004d52:	f04f 0801 	mov.w	r8, #1
    arp_table[i].netif = netif;
 8004d56:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004d58:	f882 8014 	strb.w	r8, [r2, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8004d5c:	2318      	movs	r3, #24
 8004d5e:	fb03 6304 	mla	r3, r3, r4, r6
 8004d62:	7d1b      	ldrb	r3, [r3, #20]
 8004d64:	b933      	cbnz	r3, 8004d74 <etharp_query+0x80>
 8004d66:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <etharp_query+0x140>)
 8004d68:	f240 32cf 	movw	r2, #975	; 0x3cf
 8004d6c:	4935      	ldr	r1, [pc, #212]	; (8004e44 <etharp_query+0x150>)
 8004d6e:	4833      	ldr	r0, [pc, #204]	; (8004e3c <etharp_query+0x148>)
 8004d70:	f006 fc3a 	bl	800b5e8 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8004d74:	f1b8 0f00 	cmp.w	r8, #0
 8004d78:	d101      	bne.n	8004d7e <etharp_query+0x8a>
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	d142      	bne.n	8004e04 <etharp_query+0x110>
    result = etharp_request(netif, ipaddr);
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ff1b 	bl	8004bbc <etharp_request>
    if (q == NULL) {
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	d0d0      	beq.n	8004d2c <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004d8a:	2318      	movs	r3, #24
 8004d8c:	fb03 6204 	mla	r2, r3, r4, r6
 8004d90:	7d12      	ldrb	r2, [r2, #20]
 8004d92:	2a01      	cmp	r2, #1
 8004d94:	d911      	bls.n	8004dba <etharp_query+0xc6>
    ETHARP_SET_ADDRHINT(netif, i);
 8004d96:	4a2c      	ldr	r2, [pc, #176]	; (8004e48 <etharp_query+0x154>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004d98:	fb03 6304 	mla	r3, r3, r4, r6
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4638      	mov	r0, r7
    ETHARP_SET_ADDRHINT(netif, i);
 8004da0:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da6:	330c      	adds	r3, #12
 8004da8:	9200      	str	r2, [sp, #0]
 8004daa:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8004dae:	f005 fe29 	bl	800aa04 <ethernet_output>
 8004db2:	e7bb      	b.n	8004d2c <etharp_query+0x38>
  int is_new_entry = 0;
 8004db4:	f04f 0800 	mov.w	r8, #0
 8004db8:	e7d0      	b.n	8004d5c <etharp_query+0x68>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004dba:	d1b7      	bne.n	8004d2c <etharp_query+0x38>
 8004dbc:	462f      	mov	r7, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004dbe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8004e34 <etharp_query+0x140>
 8004dc2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004e4c <etharp_query+0x158>
 8004dc6:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004e3c <etharp_query+0x148>
    while (p) {
 8004dca:	b91f      	cbnz	r7, 8004dd4 <etharp_query+0xe0>
      pbuf_ref(p);
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f001 fdbd 	bl	800694c <pbuf_ref>
 8004dd2:	e021      	b.n	8004e18 <etharp_query+0x124>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004dd4:	897a      	ldrh	r2, [r7, #10]
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d108      	bne.n	8004dee <etharp_query+0xfa>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b133      	cbz	r3, 8004dee <etharp_query+0xfa>
 8004de0:	4643      	mov	r3, r8
 8004de2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004de6:	4649      	mov	r1, r9
 8004de8:	4650      	mov	r0, sl
 8004dea:	f006 fbfd 	bl	800b5e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8004dee:	7b3b      	ldrb	r3, [r7, #12]
 8004df0:	065b      	lsls	r3, r3, #25
 8004df2:	d40a      	bmi.n	8004e0a <etharp_query+0x116>
      p = p->next;
 8004df4:	683f      	ldr	r7, [r7, #0]
 8004df6:	e7e8      	b.n	8004dca <etharp_query+0xd6>
    return ERR_ARG;
 8004df8:	f06f 000f 	mvn.w	r0, #15
 8004dfc:	e796      	b.n	8004d2c <etharp_query+0x38>
      result = ERR_MEM;
 8004dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004e02:	e793      	b.n	8004d2c <etharp_query+0x38>
  err_t result = ERR_MEM;
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	e7bf      	b.n	8004d8a <etharp_query+0x96>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e10:	200e      	movs	r0, #14
 8004e12:	f001 febd 	bl	8006b90 <pbuf_clone>
 8004e16:	4605      	mov	r5, r0
    if (p != NULL) {
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	d0f0      	beq.n	8004dfe <etharp_query+0x10a>
      if (arp_table[i].q != NULL) {
 8004e1c:	2318      	movs	r3, #24
 8004e1e:	fb03 f204 	mul.w	r2, r3, r4
 8004e22:	461f      	mov	r7, r3
 8004e24:	58b0      	ldr	r0, [r6, r2]
 8004e26:	b108      	cbz	r0, 8004e2c <etharp_query+0x138>
        pbuf_free(arp_table[i].q);
 8004e28:	f001 fc32 	bl	8006690 <pbuf_free>
      arp_table[i].q = p;
 8004e2c:	437c      	muls	r4, r7
      result = ERR_OK;
 8004e2e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8004e30:	5135      	str	r5, [r6, r4]
 8004e32:	e77b      	b.n	8004d2c <etharp_query+0x38>
 8004e34:	0800d510 	.word	0x0800d510
 8004e38:	0800d5fa 	.word	0x0800d5fa
 8004e3c:	0800c5ae 	.word	0x0800c5ae
 8004e40:	2002422c 	.word	0x2002422c
 8004e44:	0800d608 	.word	0x0800d608
 8004e48:	2002431c 	.word	0x2002431c
 8004e4c:	0800d630 	.word	0x0800d630

08004e50 <etharp_output>:
{
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	460e      	mov	r6, r1
 8004e54:	b085      	sub	sp, #20
 8004e56:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004e58:	4604      	mov	r4, r0
 8004e5a:	b930      	cbnz	r0, 8004e6a <etharp_output+0x1a>
 8004e5c:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <etharp_output+0x118>)
 8004e5e:	f240 321e 	movw	r2, #798	; 0x31e
 8004e62:	4942      	ldr	r1, [pc, #264]	; (8004f6c <etharp_output+0x11c>)
 8004e64:	4842      	ldr	r0, [pc, #264]	; (8004f70 <etharp_output+0x120>)
 8004e66:	f006 fbbf 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8004e6a:	b936      	cbnz	r6, 8004e7a <etharp_output+0x2a>
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <etharp_output+0x118>)
 8004e6e:	f240 321f 	movw	r2, #799	; 0x31f
 8004e72:	4940      	ldr	r1, [pc, #256]	; (8004f74 <etharp_output+0x124>)
 8004e74:	483e      	ldr	r0, [pc, #248]	; (8004f70 <etharp_output+0x120>)
 8004e76:	f006 fbb7 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8004e7a:	b935      	cbnz	r5, 8004e8a <etharp_output+0x3a>
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <etharp_output+0x118>)
 8004e7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004e82:	493d      	ldr	r1, [pc, #244]	; (8004f78 <etharp_output+0x128>)
 8004e84:	483a      	ldr	r0, [pc, #232]	; (8004f70 <etharp_output+0x120>)
 8004e86:	f006 fbaf 	bl	800b5e8 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	6828      	ldr	r0, [r5, #0]
 8004e8e:	f000 faec 	bl	800546a <ip4_addr_isbroadcast_u32>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d162      	bne.n	8004f5c <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e9c:	2ae0      	cmp	r2, #224	; 0xe0
 8004e9e:	d11d      	bne.n	8004edc <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004ea0:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8004ea2:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004ea6:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004eaa:	235e      	movs	r3, #94	; 0x5e
 8004eac:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004eb0:	786b      	ldrb	r3, [r5, #1]
 8004eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8004eba:	78ab      	ldrb	r3, [r5, #2]
 8004ebc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004ec0:	78eb      	ldrb	r3, [r5, #3]
 8004ec2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8004ec6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8004ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4620      	mov	r0, r4
 8004ed0:	9200      	str	r2, [sp, #0]
 8004ed2:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8004ed6:	f005 fd95 	bl	800aa04 <ethernet_output>
 8004eda:	e023      	b.n	8004f24 <etharp_output+0xd4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004edc:	6862      	ldr	r2, [r4, #4]
 8004ede:	68a1      	ldr	r1, [r4, #8]
 8004ee0:	405a      	eors	r2, r3
 8004ee2:	420a      	tst	r2, r1
 8004ee4:	d009      	beq.n	8004efa <etharp_output+0xaa>
        !ip4_addr_islinklocal(ipaddr)) {
 8004ee6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004ee8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <etharp_output+0xaa>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8004ef0:	68e3      	ldr	r3, [r4, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d034      	beq.n	8004f60 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 8004ef6:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8004efa:	4920      	ldr	r1, [pc, #128]	; (8004f7c <etharp_output+0x12c>)
 8004efc:	2318      	movs	r3, #24
 8004efe:	4820      	ldr	r0, [pc, #128]	; (8004f80 <etharp_output+0x130>)
 8004f00:	780a      	ldrb	r2, [r1, #0]
 8004f02:	468e      	mov	lr, r1
 8004f04:	fb03 0302 	mla	r3, r3, r2, r0
 8004f08:	7d18      	ldrb	r0, [r3, #20]
 8004f0a:	2801      	cmp	r0, #1
 8004f0c:	d90c      	bls.n	8004f28 <etharp_output+0xd8>
 8004f0e:	6899      	ldr	r1, [r3, #8]
 8004f10:	428c      	cmp	r4, r1
 8004f12:	d109      	bne.n	8004f28 <etharp_output+0xd8>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8004f14:	6829      	ldr	r1, [r5, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	d105      	bne.n	8004f28 <etharp_output+0xd8>
        return etharp_output_to_arp_index(netif, q, i);
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7ff fe8c 	bl	8004c3c <etharp_output_to_arp_index>
}
 8004f24:	b005      	add	sp, #20
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <etharp_output+0x130>)
{
 8004f2a:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8004f2c:	7d18      	ldrb	r0, [r3, #20]
 8004f2e:	b2ca      	uxtb	r2, r1
 8004f30:	2801      	cmp	r0, #1
 8004f32:	d909      	bls.n	8004f48 <etharp_output+0xf8>
 8004f34:	6898      	ldr	r0, [r3, #8]
 8004f36:	4284      	cmp	r4, r0
 8004f38:	d106      	bne.n	8004f48 <etharp_output+0xf8>
          (arp_table[i].netif == netif) &&
 8004f3a:	682f      	ldr	r7, [r5, #0]
 8004f3c:	6858      	ldr	r0, [r3, #4]
 8004f3e:	4287      	cmp	r7, r0
 8004f40:	d102      	bne.n	8004f48 <etharp_output+0xf8>
        ETHARP_SET_ADDRHINT(netif, i);
 8004f42:	f88e 2000 	strb.w	r2, [lr]
 8004f46:	e7e9      	b.n	8004f1c <etharp_output+0xcc>
 8004f48:	3101      	adds	r1, #1
 8004f4a:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8004f4c:	290a      	cmp	r1, #10
 8004f4e:	d1ed      	bne.n	8004f2c <etharp_output+0xdc>
    return etharp_query(netif, dst_addr, q);
 8004f50:	4632      	mov	r2, r6
 8004f52:	4629      	mov	r1, r5
 8004f54:	4620      	mov	r0, r4
 8004f56:	f7ff fecd 	bl	8004cf4 <etharp_query>
 8004f5a:	e7e3      	b.n	8004f24 <etharp_output+0xd4>
    dest = (const struct eth_addr *)&ethbroadcast;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <etharp_output+0x134>)
 8004f5e:	e7b3      	b.n	8004ec8 <etharp_output+0x78>
            return ERR_RTE;
 8004f60:	f06f 0003 	mvn.w	r0, #3
 8004f64:	e7de      	b.n	8004f24 <etharp_output+0xd4>
 8004f66:	bf00      	nop
 8004f68:	0800d510 	.word	0x0800d510
 8004f6c:	0800d64a 	.word	0x0800d64a
 8004f70:	0800c5ae 	.word	0x0800c5ae
 8004f74:	0800e0bd 	.word	0x0800e0bd
 8004f78:	0800d587 	.word	0x0800d587
 8004f7c:	2002431c 	.word	0x2002431c
 8004f80:	2002422c 	.word	0x2002422c
 8004f84:	0800f39f 	.word	0x0800f39f

08004f88 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	460f      	mov	r7, r1
 8004f90:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8004f92:	2124      	movs	r1, #36	; 0x24
 8004f94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004f98:	2022      	movs	r0, #34	; 0x22
 8004f9a:	f001 fbe1 	bl	8006760 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	b3a0      	cbz	r0, 800500c <icmp_send_response.isra.0+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8004fa2:	8943      	ldrh	r3, [r0, #10]
 8004fa4:	2b23      	cmp	r3, #35	; 0x23
 8004fa6:	d806      	bhi.n	8004fb6 <icmp_send_response.isra.0+0x2e>
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <icmp_send_response.isra.0+0x88>)
 8004faa:	f240 1269 	movw	r2, #361	; 0x169
 8004fae:	4919      	ldr	r1, [pc, #100]	; (8005014 <icmp_send_response.isra.0+0x8c>)
 8004fb0:	4819      	ldr	r0, [pc, #100]	; (8005018 <icmp_send_response.isra.0+0x90>)
 8004fb2:	f006 fb19 	bl	800b5e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004fb6:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004fb8:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004fba:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004fbc:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8004fc0:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004fc2:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8004fc6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8004fc8:	71a3      	strb	r3, [r4, #6]
 8004fca:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004fcc:	4613      	mov	r3, r2
  icmphdr->type = type;
 8004fce:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004fd0:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004fd2:	f853 6b04 	ldr.w	r6, [r3], #4
 8004fd6:	4283      	cmp	r3, r0
 8004fd8:	f841 6b04 	str.w	r6, [r1], #4
 8004fdc:	d1f9      	bne.n	8004fd2 <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8004fde:	ae06      	add	r6, sp, #24
 8004fe0:	68d3      	ldr	r3, [r2, #12]
 8004fe2:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 f8d2 	bl	8005190 <ip4_route>
#endif
  if (netif != NULL) {
 8004fec:	b158      	cbz	r0, 8005006 <icmp_send_response.isra.0+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8004fee:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8004ff4:	70a1      	strb	r1, [r4, #2]
 8004ff6:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004ff8:	9002      	str	r0, [sp, #8]
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005000:	23ff      	movs	r3, #255	; 0xff
 8005002:	f000 fa21 	bl	8005448 <ip4_output_if>
  }
  pbuf_free(q);
 8005006:	4628      	mov	r0, r5
 8005008:	f001 fb42 	bl	8006690 <pbuf_free>
}
 800500c:	b007      	add	sp, #28
 800500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005010:	0800d731 	.word	0x0800d731
 8005014:	0800d766 	.word	0x0800d766
 8005018:	0800c5ae 	.word	0x0800c5ae

0800501c <icmp_input>:
{
 800501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8005020:	4f43      	ldr	r7, [pc, #268]	; (8005130 <icmp_input+0x114>)
{
 8005022:	b085      	sub	sp, #20
 8005024:	4604      	mov	r4, r0
 8005026:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8005028:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800502c:	f899 5000 	ldrb.w	r5, [r9]
 8005030:	f005 050f 	and.w	r5, r5, #15
 8005034:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8005036:	2d13      	cmp	r5, #19
 8005038:	d92e      	bls.n	8005098 <icmp_input+0x7c>
  if (p->len < sizeof(u16_t) * 2) {
 800503a:	8943      	ldrh	r3, [r0, #10]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d92b      	bls.n	8005098 <icmp_input+0x7c>
  type = *((u8_t *)p->payload);
 8005040:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d127      	bne.n	8005098 <icmp_input+0x7c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800504e:	2be0      	cmp	r3, #224	; 0xe0
 8005050:	d022      	beq.n	8005098 <icmp_input+0x7c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	f000 fa09 	bl	800546a <ip4_addr_isbroadcast_u32>
 8005058:	b9f0      	cbnz	r0, 8005098 <icmp_input+0x7c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800505a:	8923      	ldrh	r3, [r4, #8]
 800505c:	2b07      	cmp	r3, #7
 800505e:	d91b      	bls.n	8005098 <icmp_input+0x7c>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005060:	f105 060e 	add.w	r6, r5, #14
 8005064:	4620      	mov	r0, r4
 8005066:	4631      	mov	r1, r6
 8005068:	f001 fadb 	bl	8006622 <pbuf_add_header>
 800506c:	2800      	cmp	r0, #0
 800506e:	d052      	beq.n	8005116 <icmp_input+0xfa>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8005070:	8923      	ldrh	r3, [r4, #8]
 8005072:	1959      	adds	r1, r3, r5
 8005074:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8005076:	428b      	cmp	r3, r1
 8005078:	d80e      	bhi.n	8005098 <icmp_input+0x7c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800507a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800507e:	200e      	movs	r0, #14
 8005080:	f001 fb6e 	bl	8006760 <pbuf_alloc>
        if (r == NULL) {
 8005084:	4606      	mov	r6, r0
 8005086:	b138      	cbz	r0, 8005098 <icmp_input+0x7c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005088:	8942      	ldrh	r2, [r0, #10]
 800508a:	f105 0308 	add.w	r3, r5, #8
 800508e:	429a      	cmp	r2, r3
 8005090:	d208      	bcs.n	80050a4 <icmp_input+0x88>
          pbuf_free(r);
 8005092:	4630      	mov	r0, r6
 8005094:	f001 fafc 	bl	8006690 <pbuf_free>
  pbuf_free(p);
 8005098:	4620      	mov	r0, r4
}
 800509a:	b005      	add	sp, #20
 800509c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80050a0:	f001 baf6 	b.w	8006690 <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 80050a4:	4649      	mov	r1, r9
 80050a6:	462a      	mov	r2, r5
 80050a8:	6840      	ldr	r0, [r0, #4]
 80050aa:	f006 fa8a 	bl	800b5c2 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80050ae:	4629      	mov	r1, r5
 80050b0:	4630      	mov	r0, r6
 80050b2:	f001 fab9 	bl	8006628 <pbuf_remove_header>
 80050b6:	b130      	cbz	r0, 80050c6 <icmp_input+0xaa>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <icmp_input+0x118>)
 80050ba:	22b6      	movs	r2, #182	; 0xb6
 80050bc:	491e      	ldr	r1, [pc, #120]	; (8005138 <icmp_input+0x11c>)
 80050be:	481f      	ldr	r0, [pc, #124]	; (800513c <icmp_input+0x120>)
 80050c0:	f006 fa92 	bl	800b5e8 <iprintf>
 80050c4:	e7e5      	b.n	8005092 <icmp_input+0x76>
        if (pbuf_copy(r, p) != ERR_OK) {
 80050c6:	4621      	mov	r1, r4
 80050c8:	4630      	mov	r0, r6
 80050ca:	f001 fc95 	bl	80069f8 <pbuf_copy>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d1df      	bne.n	8005092 <icmp_input+0x76>
        pbuf_free(p);
 80050d2:	4620      	mov	r0, r4
 80050d4:	4634      	mov	r4, r6
 80050d6:	f001 fadb 	bl	8006690 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80050da:	4629      	mov	r1, r5
 80050dc:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 80050de:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 80050e0:	f001 fa9f 	bl	8006622 <pbuf_add_header>
 80050e4:	4602      	mov	r2, r0
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d1d6      	bne.n	8005098 <icmp_input+0x7c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80050ea:	6861      	ldr	r1, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	610b      	str	r3, [r1, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80050f4:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80050f6:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 80050f8:	70b0      	strb	r0, [r6, #2]
 80050fa:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80050fc:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80050fe:	7288      	strb	r0, [r1, #10]
 8005100:	72c8      	strb	r0, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005102:	2101      	movs	r1, #1
 8005104:	9000      	str	r0, [sp, #0]
 8005106:	4620      	mov	r0, r4
 8005108:	9101      	str	r1, [sp, #4]
 800510a:	f8cd 8008 	str.w	r8, [sp, #8]
 800510e:	490c      	ldr	r1, [pc, #48]	; (8005140 <icmp_input+0x124>)
 8005110:	f000 f99a 	bl	8005448 <ip4_output_if>
 8005114:	e7c0      	b.n	8005098 <icmp_input+0x7c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005116:	4631      	mov	r1, r6
 8005118:	4620      	mov	r0, r4
 800511a:	f001 fa85 	bl	8006628 <pbuf_remove_header>
 800511e:	2800      	cmp	r0, #0
 8005120:	d0db      	beq.n	80050da <icmp_input+0xbe>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005122:	4b04      	ldr	r3, [pc, #16]	; (8005134 <icmp_input+0x118>)
 8005124:	22c7      	movs	r2, #199	; 0xc7
 8005126:	4907      	ldr	r1, [pc, #28]	; (8005144 <icmp_input+0x128>)
 8005128:	4804      	ldr	r0, [pc, #16]	; (800513c <icmp_input+0x120>)
 800512a:	f006 fa5d 	bl	800b5e8 <iprintf>
          goto icmperr;
 800512e:	e7b3      	b.n	8005098 <icmp_input+0x7c>
 8005130:	20024624 	.word	0x20024624
 8005134:	0800d731 	.word	0x0800d731
 8005138:	0800d6ca 	.word	0x0800d6ca
 800513c:	0800c5ae 	.word	0x0800c5ae
 8005140:	20024638 	.word	0x20024638
 8005144:	0800d6ff 	.word	0x0800d6ff

08005148 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8005148:	460a      	mov	r2, r1
 800514a:	3004      	adds	r0, #4
 800514c:	2103      	movs	r1, #3
 800514e:	f7ff bf1b 	b.w	8004f88 <icmp_send_response.isra.0>

08005152 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8005152:	460a      	mov	r2, r1
 8005154:	3004      	adds	r0, #4
 8005156:	210b      	movs	r1, #11
 8005158:	f7ff bf16 	b.w	8004f88 <icmp_send_response.isra.0>

0800515c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800515c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800515e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 8005162:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005164:	f013 0301 	ands.w	r3, r3, #1
 8005168:	d00b      	beq.n	8005182 <ip4_input_accept+0x26>
 800516a:	6843      	ldr	r3, [r0, #4]
 800516c:	b14b      	cbz	r3, 8005182 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800516e:	4a07      	ldr	r2, [pc, #28]	; (800518c <ip4_input_accept+0x30>)
 8005170:	6950      	ldr	r0, [r2, #20]
 8005172:	4283      	cmp	r3, r0
 8005174:	d007      	beq.n	8005186 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005176:	f000 f978 	bl	800546a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800517a:	3000      	adds	r0, #0
 800517c:	bf18      	it	ne
 800517e:	2001      	movne	r0, #1
 8005180:	bd08      	pop	{r3, pc}
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8005182:	4618      	mov	r0, r3
 8005184:	bd08      	pop	{r3, pc}
      return 1;
 8005186:	2001      	movs	r0, #1
}
 8005188:	bd08      	pop	{r3, pc}
 800518a:	bf00      	nop
 800518c:	20024624 	.word	0x20024624

08005190 <ip4_route>:
  NETIF_FOREACH(netif) {
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <ip4_route+0x54>)
{
 8005192:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b97b      	cbnz	r3, 80051b8 <ip4_route+0x28>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <ip4_route+0x58>)
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	b1fa      	cbz	r2, 80051de <ip4_route+0x4e>
 800519e:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 80051a2:	f001 0105 	and.w	r1, r1, #5
 80051a6:	2905      	cmp	r1, #5
 80051a8:	d119      	bne.n	80051de <ip4_route+0x4e>
 80051aa:	6851      	ldr	r1, [r2, #4]
 80051ac:	b1b9      	cbz	r1, 80051de <ip4_route+0x4e>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80051ae:	7801      	ldrb	r1, [r0, #0]
 80051b0:	297f      	cmp	r1, #127	; 0x7f
 80051b2:	bf18      	it	ne
 80051b4:	4613      	movne	r3, r2
 80051b6:	e012      	b.n	80051de <ip4_route+0x4e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80051b8:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80051bc:	f004 0205 	and.w	r2, r4, #5
 80051c0:	2a05      	cmp	r2, #5
 80051c2:	d1e7      	bne.n	8005194 <ip4_route+0x4>
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d0e4      	beq.n	8005194 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80051ca:	6801      	ldr	r1, [r0, #0]
 80051cc:	689d      	ldr	r5, [r3, #8]
 80051ce:	404a      	eors	r2, r1
 80051d0:	422a      	tst	r2, r5
 80051d2:	d004      	beq.n	80051de <ip4_route+0x4e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80051d4:	07a2      	lsls	r2, r4, #30
 80051d6:	d4dd      	bmi.n	8005194 <ip4_route+0x4>
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	4291      	cmp	r1, r2
 80051dc:	d1da      	bne.n	8005194 <ip4_route+0x4>
}
 80051de:	4618      	mov	r0, r3
 80051e0:	bd30      	pop	{r4, r5, pc}
 80051e2:	bf00      	nop
 80051e4:	20027d1c 	.word	0x20027d1c
 80051e8:	20027d20 	.word	0x20027d20

080051ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80051ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80051f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 80051f4:	4605      	mov	r5, r0
 80051f6:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 80051f8:	f898 9000 	ldrb.w	r9, [r8]
 80051fc:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d005      	beq.n	8005210 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005204:	4628      	mov	r0, r5
 8005206:	f001 fa43 	bl	8006690 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800520a:	2000      	movs	r0, #0
 800520c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005210:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005214:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005218:	f7ff facc 	bl	80047b4 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800521c:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800521e:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005222:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005224:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005226:	fa1f f689 	uxth.w	r6, r9
  if (iphdr_len < p->tot_len) {
 800522a:	d903      	bls.n	8005234 <ip4_input+0x48>
    pbuf_realloc(p, iphdr_len);
 800522c:	4601      	mov	r1, r0
 800522e:	4628      	mov	r0, r5
 8005230:	f001 fb2c 	bl	800688c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005234:	896b      	ldrh	r3, [r5, #10]
 8005236:	42b3      	cmp	r3, r6
 8005238:	d3e4      	bcc.n	8005204 <ip4_input+0x18>
 800523a:	892b      	ldrh	r3, [r5, #8]
 800523c:	42a3      	cmp	r3, r4
 800523e:	d3e1      	bcc.n	8005204 <ip4_input+0x18>
 8005240:	2e13      	cmp	r6, #19
 8005242:	d9df      	bls.n	8005204 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005244:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005248:	4c40      	ldr	r4, [pc, #256]	; (800534c <ip4_input+0x160>)
 800524a:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800524c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005250:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005254:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005256:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005258:	d13a      	bne.n	80052d0 <ip4_input+0xe4>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800525a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d541      	bpl.n	80052e6 <ip4_input+0xfa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d03e      	beq.n	80052e6 <ip4_input+0xfa>
      netif = NULL;
 8005268:	463e      	mov	r6, r7
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800526a:	4639      	mov	r1, r7
 800526c:	6920      	ldr	r0, [r4, #16]
 800526e:	f000 f8fc 	bl	800546a <ip4_addr_isbroadcast_u32>
 8005272:	2800      	cmp	r0, #0
 8005274:	d1c6      	bne.n	8005204 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800527c:	2be0      	cmp	r3, #224	; 0xe0
 800527e:	d0c1      	beq.n	8005204 <ip4_input+0x18>
  if (netif == NULL) {
 8005280:	2e00      	cmp	r6, #0
 8005282:	d0bf      	beq.n	8005204 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005284:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8005288:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800528c:	b13b      	cbz	r3, 800529e <ip4_input+0xb2>
    p = ip4_reass(p);
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fa1a 	bl	80056c8 <ip4_reass>
    if (p == NULL) {
 8005294:	4605      	mov	r5, r0
 8005296:	2800      	cmp	r0, #0
 8005298:	d0b7      	beq.n	800520a <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 800529a:	f8d0 8004 	ldr.w	r8, [r0, #4]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800529e:	4649      	mov	r1, r9
 80052a0:	4628      	mov	r0, r5
  ip_data.current_ip4_header = iphdr;
 80052a2:	e884 01c0 	stmia.w	r4, {r6, r7, r8}
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80052a6:	f898 3000 	ldrb.w	r3, [r8]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	81a3      	strh	r3, [r4, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80052b2:	f001 f9b9 	bl	8006628 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80052b6:	f898 3009 	ldrb.w	r3, [r8, #9]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d02b      	beq.n	8005316 <ip4_input+0x12a>
 80052be:	2b11      	cmp	r3, #17
 80052c0:	d01d      	beq.n	80052fe <ip4_input+0x112>
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d12c      	bne.n	8005320 <ip4_input+0x134>
        icmp_input(p, inp);
 80052c6:	4639      	mov	r1, r7
 80052c8:	4628      	mov	r0, r5
 80052ca:	f7ff fea7 	bl	800501c <icmp_input>
        break;
 80052ce:	e01a      	b.n	8005306 <ip4_input+0x11a>
    if (ip4_input_accept(inp)) {
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ff43 	bl	800515c <ip4_input_accept>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d1c6      	bne.n	8005268 <ip4_input+0x7c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80052da:	7d23      	ldrb	r3, [r4, #20]
 80052dc:	2b7f      	cmp	r3, #127	; 0x7f
 80052de:	d002      	beq.n	80052e6 <ip4_input+0xfa>
        NETIF_FOREACH(netif) {
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <ip4_input+0x164>)
 80052e2:	681e      	ldr	r6, [r3, #0]
 80052e4:	b90e      	cbnz	r6, 80052ea <ip4_input+0xfe>
      netif = NULL;
 80052e6:	2600      	movs	r6, #0
 80052e8:	e7bf      	b.n	800526a <ip4_input+0x7e>
          if (netif == inp) {
 80052ea:	42be      	cmp	r6, r7
 80052ec:	d101      	bne.n	80052f2 <ip4_input+0x106>
        NETIF_FOREACH(netif) {
 80052ee:	6836      	ldr	r6, [r6, #0]
 80052f0:	e7f8      	b.n	80052e4 <ip4_input+0xf8>
          if (ip4_input_accept(netif)) {
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ff32 	bl	800515c <ip4_input_accept>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d0f8      	beq.n	80052ee <ip4_input+0x102>
 80052fc:	e7b5      	b.n	800526a <ip4_input+0x7e>
        udp_input(p, inp);
 80052fe:	4639      	mov	r1, r7
 8005300:	4628      	mov	r0, r5
 8005302:	f005 fa45 	bl	800a790 <udp_input>
  ip_data.current_netif = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800530a:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800530c:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800530e:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005310:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005312:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005314:	e779      	b.n	800520a <ip4_input+0x1e>
        tcp_input(p, inp);
 8005316:	4639      	mov	r1, r7
 8005318:	4628      	mov	r0, r5
 800531a:	f003 fa63 	bl	80087e4 <tcp_input>
        break;
 800531e:	e7f2      	b.n	8005306 <ip4_input+0x11a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005320:	4631      	mov	r1, r6
 8005322:	6960      	ldr	r0, [r4, #20]
 8005324:	f000 f8a1 	bl	800546a <ip4_addr_isbroadcast_u32>
 8005328:	b960      	cbnz	r0, 8005344 <ip4_input+0x158>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800532a:	6963      	ldr	r3, [r4, #20]
 800532c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005330:	2be0      	cmp	r3, #224	; 0xe0
 8005332:	d007      	beq.n	8005344 <ip4_input+0x158>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8005334:	4649      	mov	r1, r9
 8005336:	4628      	mov	r0, r5
 8005338:	f001 f9a2 	bl	8006680 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800533c:	2102      	movs	r1, #2
 800533e:	4628      	mov	r0, r5
 8005340:	f7ff ff02 	bl	8005148 <icmp_dest_unreach>
        pbuf_free(p);
 8005344:	4628      	mov	r0, r5
 8005346:	f001 f9a3 	bl	8006690 <pbuf_free>
        break;
 800534a:	e7dc      	b.n	8005306 <ip4_input+0x11a>
 800534c:	20024624 	.word	0x20024624
 8005350:	20027d1c 	.word	0x20027d1c

08005354 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8005354:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800535a:	7b83      	ldrb	r3, [r0, #14]
{
 800535c:	4605      	mov	r5, r0
 800535e:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005360:	2b01      	cmp	r3, #1
{
 8005362:	4616      	mov	r6, r2
 8005364:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005368:	d006      	beq.n	8005378 <ip4_output_if_src+0x24>
 800536a:	4b31      	ldr	r3, [pc, #196]	; (8005430 <ip4_output_if_src+0xdc>)
 800536c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8005370:	4930      	ldr	r1, [pc, #192]	; (8005434 <ip4_output_if_src+0xe0>)
 8005372:	4831      	ldr	r0, [pc, #196]	; (8005438 <ip4_output_if_src+0xe4>)
 8005374:	f006 f938 	bl	800b5e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8005378:	2e00      	cmp	r6, #0
 800537a:	d049      	beq.n	8005410 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800537c:	2114      	movs	r1, #20
 800537e:	4628      	mov	r0, r5
 8005380:	f001 f94f 	bl	8006622 <pbuf_add_header>
 8005384:	b120      	cbz	r0, 8005390 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8005386:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800538a:	b002      	add	sp, #8
 800538c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005390:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8005392:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005394:	2b13      	cmp	r3, #19
 8005396:	d806      	bhi.n	80053a6 <ip4_output_if_src+0x52>
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <ip4_output_if_src+0xdc>)
 800539a:	f240 3289 	movw	r2, #905	; 0x389
 800539e:	4927      	ldr	r1, [pc, #156]	; (800543c <ip4_output_if_src+0xe8>)
 80053a0:	4825      	ldr	r0, [pc, #148]	; (8005438 <ip4_output_if_src+0xe4>)
 80053a2:	f006 f921 	bl	800b5e8 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80053a6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80053aa:	7227      	strb	r7, [r4, #8]
    IPH_OFFSET_SET(iphdr, 0);
 80053ac:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 80053ae:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80053b0:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80053b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005444 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 80053b6:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80053b8:	2345      	movs	r3, #69	; 0x45
 80053ba:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80053bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80053c0:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80053c2:	8928      	ldrh	r0, [r5, #8]
 80053c4:	f7ff f9f6 	bl	80047b4 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80053c8:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80053ca:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80053cc:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80053ce:	f8b9 0000 	ldrh.w	r0, [r9]
 80053d2:	f7ff f9ef 	bl	80047b4 <lwip_htons>
    ++ip_id;
 80053d6:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80053da:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80053dc:	3301      	adds	r3, #1
 80053de:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 80053e2:	f1ba 0f00 	cmp.w	sl, #0
 80053e6:	d110      	bne.n	800540a <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80053e8:	4b15      	ldr	r3, [pc, #84]	; (8005440 <ip4_output_if_src+0xec>)
 80053ea:	681b      	ldr	r3, [r3, #0]
      ip4_addr_copy(iphdr->src, *src);
 80053ec:	60e3      	str	r3, [r4, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80053ee:	72a7      	strb	r7, [r4, #10]
 80053f0:	72e7      	strb	r7, [r4, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80053f2:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 80053f6:	b1a3      	cbz	r3, 8005422 <ip4_output_if_src+0xce>
 80053f8:	892a      	ldrh	r2, [r5, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d911      	bls.n	8005422 <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
 80053fe:	4632      	mov	r2, r6
 8005400:	4641      	mov	r1, r8
 8005402:	4628      	mov	r0, r5
 8005404:	f000 fb36 	bl	8005a74 <ip4_frag>
 8005408:	e7bf      	b.n	800538a <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 800540a:	f8da 3000 	ldr.w	r3, [sl]
 800540e:	e7ed      	b.n	80053ec <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 8005410:	896b      	ldrh	r3, [r5, #10]
 8005412:	2b13      	cmp	r3, #19
 8005414:	d9b7      	bls.n	8005386 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005416:	686b      	ldr	r3, [r5, #4]
 8005418:	ae02      	add	r6, sp, #8
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f846 3d04 	str.w	r3, [r6, #-4]!
 8005420:	e7e7      	b.n	80053f2 <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 8005422:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005426:	4632      	mov	r2, r6
 8005428:	4629      	mov	r1, r5
 800542a:	4640      	mov	r0, r8
 800542c:	4798      	blx	r3
 800542e:	e7ac      	b.n	800538a <ip4_output_if_src+0x36>
 8005430:	0800d792 	.word	0x0800d792
 8005434:	0800d7c6 	.word	0x0800d7c6
 8005438:	0800c5ae 	.word	0x0800c5ae
 800543c:	0800d7d2 	.word	0x0800d7d2
 8005440:	0800d800 	.word	0x0800d800
 8005444:	2002431e 	.word	0x2002431e

08005448 <ip4_output_if>:
{
 8005448:	b4f0      	push	{r4, r5, r6, r7}
 800544a:	9c06      	ldr	r4, [sp, #24]
 800544c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8005450:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8005454:	b11a      	cbz	r2, 800545e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8005456:	b109      	cbz	r1, 800545c <ip4_output_if+0x14>
 8005458:	680f      	ldr	r7, [r1, #0]
 800545a:	b907      	cbnz	r7, 800545e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800545c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800545e:	9406      	str	r4, [sp, #24]
 8005460:	9605      	str	r6, [sp, #20]
 8005462:	9504      	str	r5, [sp, #16]
}
 8005464:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005466:	f7ff bf75 	b.w	8005354 <ip4_output_if_src>

0800546a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800546a:	1e43      	subs	r3, r0, #1
 800546c:	3303      	adds	r3, #3
 800546e:	d811      	bhi.n	8005494 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8005470:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8005474:	f013 0302 	ands.w	r3, r3, #2
 8005478:	d00e      	beq.n	8005498 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800547a:	684a      	ldr	r2, [r1, #4]
 800547c:	4290      	cmp	r0, r2
 800547e:	d00b      	beq.n	8005498 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8005480:	688b      	ldr	r3, [r1, #8]
 8005482:	4042      	eors	r2, r0
 8005484:	421a      	tst	r2, r3
 8005486:	d107      	bne.n	8005498 <ip4_addr_isbroadcast_u32+0x2e>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8005488:	43db      	mvns	r3, r3
 800548a:	4383      	bics	r3, r0
    return 1;
 800548c:	bf0c      	ite	eq
 800548e:	2001      	moveq	r0, #1
 8005490:	2000      	movne	r0, #0
 8005492:	4770      	bx	lr
 8005494:	2001      	movs	r0, #1
 8005496:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8005498:	2000      	movs	r0, #0
  }
}
 800549a:	4770      	bx	lr

0800549c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800549c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <ip_reass_dequeue_datagram+0x34>)
{
 80054a0:	4604      	mov	r4, r0
 80054a2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4282      	cmp	r2, r0
 80054a8:	d107      	bne.n	80054ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80054aa:	6802      	ldr	r2, [r0, #0]
 80054ac:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80054ae:	4621      	mov	r1, r4
 80054b0:	2004      	movs	r0, #4
}
 80054b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80054b6:	f000 bea3 	b.w	8006200 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80054ba:	b931      	cbnz	r1, 80054ca <ip_reass_dequeue_datagram+0x2e>
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <ip_reass_dequeue_datagram+0x38>)
 80054be:	f240 1245 	movw	r2, #325	; 0x145
 80054c2:	4905      	ldr	r1, [pc, #20]	; (80054d8 <ip_reass_dequeue_datagram+0x3c>)
 80054c4:	4805      	ldr	r0, [pc, #20]	; (80054dc <ip_reass_dequeue_datagram+0x40>)
 80054c6:	f006 f88f 	bl	800b5e8 <iprintf>
    prev->next = ipr->next;
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	e7ee      	b.n	80054ae <ip_reass_dequeue_datagram+0x12>
 80054d0:	20024324 	.word	0x20024324
 80054d4:	0800d90d 	.word	0x0800d90d
 80054d8:	0800d946 	.word	0x0800d946
 80054dc:	0800c5ae 	.word	0x0800c5ae

080054e0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80054e0:	4281      	cmp	r1, r0
{
 80054e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e6:	4605      	mov	r5, r0
 80054e8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80054ea:	d105      	bne.n	80054f8 <ip_reass_free_complete_datagram+0x18>
 80054ec:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <ip_reass_free_complete_datagram+0xcc>)
 80054ee:	22ab      	movs	r2, #171	; 0xab
 80054f0:	492f      	ldr	r1, [pc, #188]	; (80055b0 <ip_reass_free_complete_datagram+0xd0>)
 80054f2:	4830      	ldr	r0, [pc, #192]	; (80055b4 <ip_reass_free_complete_datagram+0xd4>)
 80054f4:	f006 f878 	bl	800b5e8 <iprintf>
  if (prev != NULL) {
 80054f8:	b147      	cbz	r7, 800550c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	429d      	cmp	r5, r3
 80054fe:	d005      	beq.n	800550c <ip_reass_free_complete_datagram+0x2c>
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <ip_reass_free_complete_datagram+0xcc>)
 8005502:	22ad      	movs	r2, #173	; 0xad
 8005504:	492c      	ldr	r1, [pc, #176]	; (80055b8 <ip_reass_free_complete_datagram+0xd8>)
 8005506:	482b      	ldr	r0, [pc, #172]	; (80055b4 <ip_reass_free_complete_datagram+0xd4>)
 8005508:	f006 f86e 	bl	800b5e8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800550c:	686e      	ldr	r6, [r5, #4]
 800550e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8005510:	889a      	ldrh	r2, [r3, #4]
 8005512:	bb92      	cbnz	r2, 800557a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005514:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005516:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 800551a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800551c:	f105 0208 	add.w	r2, r5, #8
 8005520:	f852 0b04 	ldr.w	r0, [r2], #4
 8005524:	428a      	cmp	r2, r1
 8005526:	f843 0b04 	str.w	r0, [r3], #4
 800552a:	d1f9      	bne.n	8005520 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800552c:	2101      	movs	r1, #1
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff fe0f 	bl	8005152 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005534:	4630      	mov	r0, r6
 8005536:	f001 fa01 	bl	800693c <pbuf_clen>
 800553a:	4604      	mov	r4, r0
    pbuf_free(p);
 800553c:	4630      	mov	r0, r6
 800553e:	f001 f8a7 	bl	8006690 <pbuf_free>
  p = ipr->p;
 8005542:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005544:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80055ac <ip_reass_free_complete_datagram+0xcc>
 8005548:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80055c4 <ip_reass_free_complete_datagram+0xe4>
 800554c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80055b4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8005550:	b9ae      	cbnz	r6, 800557e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8005552:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8005554:	4d19      	ldr	r5, [pc, #100]	; (80055bc <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8005556:	4639      	mov	r1, r7
 8005558:	f7ff ffa0 	bl	800549c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800555c:	882b      	ldrh	r3, [r5, #0]
 800555e:	42a3      	cmp	r3, r4
 8005560:	d205      	bcs.n	800556e <ip_reass_free_complete_datagram+0x8e>
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <ip_reass_free_complete_datagram+0xcc>)
 8005564:	22d2      	movs	r2, #210	; 0xd2
 8005566:	4916      	ldr	r1, [pc, #88]	; (80055c0 <ip_reass_free_complete_datagram+0xe0>)
 8005568:	4812      	ldr	r0, [pc, #72]	; (80055b4 <ip_reass_free_complete_datagram+0xd4>)
 800556a:	f006 f83d 	bl	800b5e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800556e:	882b      	ldrh	r3, [r5, #0]
}
 8005570:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8005572:	1b1b      	subs	r3, r3, r4
 8005574:	802b      	strh	r3, [r5, #0]
}
 8005576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800557a:	2400      	movs	r4, #0
 800557c:	e7e1      	b.n	8005542 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800557e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8005580:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8005582:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8005586:	f001 f9d9 	bl	800693c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800558a:	4404      	add	r4, r0
 800558c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005590:	db05      	blt.n	800559e <ip_reass_free_complete_datagram+0xbe>
 8005592:	4643      	mov	r3, r8
 8005594:	22cc      	movs	r2, #204	; 0xcc
 8005596:	4649      	mov	r1, r9
 8005598:	4650      	mov	r0, sl
 800559a:	f006 f825 	bl	800b5e8 <iprintf>
    pbuf_free(pcur);
 800559e:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80055a0:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80055a2:	f001 f875 	bl	8006690 <pbuf_free>
    p = iprh->next_pbuf;
 80055a6:	465e      	mov	r6, fp
 80055a8:	e7d2      	b.n	8005550 <ip_reass_free_complete_datagram+0x70>
 80055aa:	bf00      	nop
 80055ac:	0800d90d 	.word	0x0800d90d
 80055b0:	0800d95f 	.word	0x0800d95f
 80055b4:	0800c5ae 	.word	0x0800c5ae
 80055b8:	0800d96b 	.word	0x0800d96b
 80055bc:	20024320 	.word	0x20024320
 80055c0:	0800d99a 	.word	0x0800d99a
 80055c4:	0800d97d 	.word	0x0800d97d

080055c8 <ip_reass_remove_oldest_datagram>:
{
 80055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80055d0:	2500      	movs	r5, #0
    r = reassdatagrams;
 80055d2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800563c <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 80055d6:	2400      	movs	r4, #0
    r = reassdatagrams;
 80055d8:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80055dc:	4621      	mov	r1, r4
    prev = NULL;
 80055de:	46a6      	mov	lr, r4
    oldest = NULL;
 80055e0:	4620      	mov	r0, r4
    while (r != NULL) {
 80055e2:	b953      	cbnz	r3, 80055fa <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80055e4:	b110      	cbz	r0, 80055ec <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80055e6:	f7ff ff7b 	bl	80054e0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80055ea:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80055ec:	42bd      	cmp	r5, r7
 80055ee:	da01      	bge.n	80055f4 <ip_reass_remove_oldest_datagram+0x2c>
 80055f0:	2c01      	cmp	r4, #1
 80055f2:	dcf0      	bgt.n	80055d6 <ip_reass_remove_oldest_datagram+0xe>
}
 80055f4:	4628      	mov	r0, r5
 80055f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80055fa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	4562      	cmp	r2, ip
 8005602:	d109      	bne.n	8005618 <ip_reass_remove_oldest_datagram+0x50>
 8005604:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	4562      	cmp	r2, ip
 800560c:	d104      	bne.n	8005618 <ip_reass_remove_oldest_datagram+0x50>
 800560e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005612:	88b2      	ldrh	r2, [r6, #4]
 8005614:	4594      	cmp	ip, r2
 8005616:	d008      	beq.n	800562a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8005618:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800561a:	b160      	cbz	r0, 8005636 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800561c:	7fc2      	ldrb	r2, [r0, #31]
 800561e:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005622:	4594      	cmp	ip, r2
 8005624:	bf9c      	itt	ls
 8005626:	4671      	movls	r1, lr
 8005628:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2a00      	cmp	r2, #0
 800562e:	bf18      	it	ne
 8005630:	469e      	movne	lr, r3
 8005632:	4613      	mov	r3, r2
 8005634:	e7d5      	b.n	80055e2 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8005636:	4671      	mov	r1, lr
 8005638:	4618      	mov	r0, r3
 800563a:	e7f6      	b.n	800562a <ip_reass_remove_oldest_datagram+0x62>
 800563c:	20024324 	.word	0x20024324

08005640 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8005640:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005642:	4604      	mov	r4, r0
 8005644:	b930      	cbnz	r0, 8005654 <ip_frag_free_pbuf_custom_ref+0x14>
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <ip_frag_free_pbuf_custom_ref+0x20>)
 8005648:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800564c:	4905      	ldr	r1, [pc, #20]	; (8005664 <ip_frag_free_pbuf_custom_ref+0x24>)
 800564e:	4806      	ldr	r0, [pc, #24]	; (8005668 <ip_frag_free_pbuf_custom_ref+0x28>)
 8005650:	f005 ffca 	bl	800b5e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8005654:	4621      	mov	r1, r4
 8005656:	2005      	movs	r0, #5
}
 8005658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800565c:	f000 bdd0 	b.w	8006200 <memp_free>
 8005660:	0800d90d 	.word	0x0800d90d
 8005664:	0800e0a5 	.word	0x0800e0a5
 8005668:	0800c5ae 	.word	0x0800c5ae

0800566c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800566c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800566e:	4604      	mov	r4, r0
 8005670:	b930      	cbnz	r0, 8005680 <ipfrag_free_pbuf_custom+0x14>
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <ipfrag_free_pbuf_custom+0x28>)
 8005674:	f240 22ce 	movw	r2, #718	; 0x2ce
 8005678:	4907      	ldr	r1, [pc, #28]	; (8005698 <ipfrag_free_pbuf_custom+0x2c>)
 800567a:	4808      	ldr	r0, [pc, #32]	; (800569c <ipfrag_free_pbuf_custom+0x30>)
 800567c:	f005 ffb4 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8005680:	6960      	ldr	r0, [r4, #20]
 8005682:	b108      	cbz	r0, 8005688 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8005684:	f001 f804 	bl	8006690 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8005688:	4620      	mov	r0, r4
}
 800568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800568e:	f7ff bfd7 	b.w	8005640 <ip_frag_free_pbuf_custom_ref>
 8005692:	bf00      	nop
 8005694:	0800d90d 	.word	0x0800d90d
 8005698:	0800d9bc 	.word	0x0800d9bc
 800569c:	0800c5ae 	.word	0x0800c5ae

080056a0 <ip_reass_tmr>:
{
 80056a0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 80056a4:	2400      	movs	r4, #0
  r = reassdatagrams;
 80056a6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80056a8:	b900      	cbnz	r0, 80056ac <ip_reass_tmr+0xc>
}
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80056ac:	7fc3      	ldrb	r3, [r0, #31]
 80056ae:	6805      	ldr	r5, [r0, #0]
 80056b0:	b123      	cbz	r3, 80056bc <ip_reass_tmr+0x1c>
      r->timer--;
 80056b2:	3b01      	subs	r3, #1
 80056b4:	4604      	mov	r4, r0
 80056b6:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 80056b8:	4628      	mov	r0, r5
 80056ba:	e7f5      	b.n	80056a8 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 80056bc:	4621      	mov	r1, r4
 80056be:	f7ff ff0f 	bl	80054e0 <ip_reass_free_complete_datagram>
 80056c2:	e7f9      	b.n	80056b8 <ip_reass_tmr+0x18>
 80056c4:	20024324 	.word	0x20024324

080056c8 <ip4_reass>:
{
 80056c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80056cc:	6845      	ldr	r5, [r0, #4]
{
 80056ce:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80056d0:	782b      	ldrb	r3, [r5, #0]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	f040 8099 	bne.w	800580e <ip4_reass+0x146>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80056dc:	88e8      	ldrh	r0, [r5, #6]
 80056de:	f7ff f869 	bl	80047b4 <lwip_htons>
 80056e2:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80056e4:	8868      	ldrh	r0, [r5, #2]
 80056e6:	f7ff f865 	bl	80047b4 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80056ea:	782b      	ldrb	r3, [r5, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4298      	cmp	r0, r3
 80056f4:	f0c0 808b 	bcc.w	800580e <ip4_reass+0x146>
  len = (u16_t)(len - hlen);
 80056f8:	1ac0      	subs	r0, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80056fa:	4cb4      	ldr	r4, [pc, #720]	; (80059cc <ip4_reass+0x304>)
  len = (u16_t)(len - hlen);
 80056fc:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80056fe:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8005700:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8005702:	f001 f91b 	bl	800693c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005706:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8005708:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800570a:	4403      	add	r3, r0
 800570c:	2b0a      	cmp	r3, #10
 800570e:	dc75      	bgt.n	80057fc <ip4_reass+0x134>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005710:	4eaf      	ldr	r6, [pc, #700]	; (80059d0 <ip4_reass+0x308>)
 8005712:	6834      	ldr	r4, [r6, #0]
 8005714:	2c00      	cmp	r4, #0
 8005716:	d17f      	bne.n	8005818 <ip4_reass+0x150>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005718:	2004      	movs	r0, #4
 800571a:	f000 fd55 	bl	80061c8 <memp_malloc>
  if (ipr == NULL) {
 800571e:	4604      	mov	r4, r0
 8005720:	b958      	cbnz	r0, 800573a <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005722:	4651      	mov	r1, sl
 8005724:	4628      	mov	r0, r5
 8005726:	f7ff ff4f 	bl	80055c8 <ip_reass_remove_oldest_datagram>
 800572a:	4582      	cmp	sl, r0
 800572c:	dc6f      	bgt.n	800580e <ip4_reass+0x146>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800572e:	2004      	movs	r0, #4
 8005730:	f000 fd4a 	bl	80061c8 <memp_malloc>
    if (ipr == NULL)
 8005734:	4604      	mov	r4, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d069      	beq.n	800580e <ip4_reass+0x146>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800573a:	2220      	movs	r2, #32
 800573c:	2100      	movs	r1, #0
 800573e:	4620      	mov	r0, r4
 8005740:	f005 ff4a 	bl	800b5d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005744:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005746:	f104 0208 	add.w	r2, r4, #8
 800574a:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800574e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8005750:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8005752:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8005754:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005756:	462b      	mov	r3, r5
 8005758:	f853 0b04 	ldr.w	r0, [r3], #4
 800575c:	428b      	cmp	r3, r1
 800575e:	f842 0b04 	str.w	r0, [r2], #4
 8005762:	d1f9      	bne.n	8005758 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8005764:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8005768:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 800576c:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8005770:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8005774:	d10a      	bne.n	800578c <ip4_reass+0xc4>
    u16_t datagram_len = (u16_t)(offset + len);
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800577c:	429f      	cmp	r7, r3
 800577e:	f200 8137 	bhi.w	80059f0 <ip4_reass+0x328>
 8005782:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8005786:	4293      	cmp	r3, r2
 8005788:	f200 8132 	bhi.w	80059f0 <ip4_reass+0x328>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800578c:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8005790:	8868      	ldrh	r0, [r5, #2]
 8005792:	f7ff f80f 	bl	80047b4 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8005796:	782b      	ldrb	r3, [r5, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4298      	cmp	r0, r3
 80057a0:	f0c0 8126 	bcc.w	80059f0 <ip4_reass+0x328>
  len = (u16_t)(len - hlen);
 80057a4:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80057a6:	88e8      	ldrh	r0, [r5, #6]
  iprh->next_pbuf = NULL;
 80057a8:	2500      	movs	r5, #0
  len = (u16_t)(len - hlen);
 80057aa:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80057ae:	f7ff f801 	bl	80047b4 <lwip_htons>
 80057b2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80057b6:	f8d8 6004 	ldr.w	r6, [r8, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80057ba:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 80057bc:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 80057be:	eb09 0300 	add.w	r3, r9, r0
  iprh->next_pbuf = NULL;
 80057c2:	7075      	strb	r5, [r6, #1]
 80057c4:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 80057c6:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 80057c8:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 80057ca:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 80057cc:	4298      	cmp	r0, r3
  iprh->end = (u16_t)(offset + len);
 80057ce:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 80057d0:	f200 810e 	bhi.w	80059f0 <ip4_reass+0x328>
  for (q = ipr->p; q != NULL;) {
 80057d4:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 80057d8:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 80057dc:	4672      	mov	r2, lr
 80057de:	bb52      	cbnz	r2, 8005836 <ip4_reass+0x16e>
    if (iprh_prev != NULL) {
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	f040 8093 	bne.w	800590c <ip4_reass+0x244>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80057e6:	f1be 0f00 	cmp.w	lr, #0
 80057ea:	d07d      	beq.n	80058e8 <ip4_reass+0x220>
 80057ec:	4b79      	ldr	r3, [pc, #484]	; (80059d4 <ip4_reass+0x30c>)
 80057ee:	f240 12bf 	movw	r2, #447	; 0x1bf
 80057f2:	4979      	ldr	r1, [pc, #484]	; (80059d8 <ip4_reass+0x310>)
 80057f4:	4879      	ldr	r0, [pc, #484]	; (80059dc <ip4_reass+0x314>)
 80057f6:	f005 fef7 	bl	800b5e8 <iprintf>
 80057fa:	e075      	b.n	80058e8 <ip4_reass+0x220>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80057fc:	4601      	mov	r1, r0
 80057fe:	4628      	mov	r0, r5
 8005800:	f7ff fee2 	bl	80055c8 <ip_reass_remove_oldest_datagram>
 8005804:	b118      	cbz	r0, 800580e <ip4_reass+0x146>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8005806:	8823      	ldrh	r3, [r4, #0]
 8005808:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800580a:	2b0a      	cmp	r3, #10
 800580c:	dd80      	ble.n	8005710 <ip4_reass+0x48>
  pbuf_free(p);
 800580e:	4640      	mov	r0, r8
 8005810:	f000 ff3e 	bl	8006690 <pbuf_free>
  return NULL;
 8005814:	2600      	movs	r6, #0
 8005816:	e0d5      	b.n	80059c4 <ip4_reass+0x2fc>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8005818:	68eb      	ldr	r3, [r5, #12]
 800581a:	6962      	ldr	r2, [r4, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d108      	bne.n	8005832 <ip4_reass+0x16a>
 8005820:	692b      	ldr	r3, [r5, #16]
 8005822:	69a2      	ldr	r2, [r4, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d104      	bne.n	8005832 <ip4_reass+0x16a>
 8005828:	89a2      	ldrh	r2, [r4, #12]
 800582a:	88ab      	ldrh	r3, [r5, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	f000 80f3 	beq.w	8005a18 <ip4_reass+0x350>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005832:	6824      	ldr	r4, [r4, #0]
 8005834:	e76e      	b.n	8005714 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8005836:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800583a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800583e:	4288      	cmp	r0, r1
 8005840:	d255      	bcs.n	80058ee <ip4_reass+0x226>
      iprh->next_pbuf = q;
 8005842:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8005844:	2d00      	cmp	r5, #0
 8005846:	d04c      	beq.n	80058e2 <ip4_reass+0x21a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8005848:	88ea      	ldrh	r2, [r5, #6]
 800584a:	4290      	cmp	r0, r2
 800584c:	f0c0 80d0 	bcc.w	80059f0 <ip4_reass+0x328>
 8005850:	428b      	cmp	r3, r1
 8005852:	f200 80cd 	bhi.w	80059f0 <ip4_reass+0x328>
        if (iprh_prev->end != iprh->start) {
 8005856:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8005858:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800585c:	f040 80fa 	bne.w	8005a54 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005860:	f1bb 0f00 	cmp.w	fp, #0
 8005864:	d004      	beq.n	8005870 <ip4_reass+0x1a8>
 8005866:	7fa3      	ldrb	r3, [r4, #30]
 8005868:	f013 0301 	ands.w	r3, r3, #1
 800586c:	f000 80f0 	beq.w	8005a50 <ip4_reass+0x388>
    if (valid) {
 8005870:	f1b9 0f00 	cmp.w	r9, #0
 8005874:	d15a      	bne.n	800592c <ip4_reass+0x264>
          q = iprh->next_pbuf;
 8005876:	f04f 0900 	mov.w	r9, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800587a:	4d54      	ldr	r5, [pc, #336]	; (80059cc <ip4_reass+0x304>)
 800587c:	882b      	ldrh	r3, [r5, #0]
 800587e:	449a      	add	sl, r3
 8005880:	f8a5 a000 	strh.w	sl, [r5]
  if (is_last) {
 8005884:	f1bb 0f00 	cmp.w	fp, #0
 8005888:	d106      	bne.n	8005898 <ip4_reass+0x1d0>
    u16_t datagram_len = (u16_t)(offset + len);
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800588e:	7fa3      	ldrb	r3, [r4, #30]
 8005890:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8005894:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005896:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8005898:	f1b9 0f01 	cmp.w	r9, #1
 800589c:	d1ba      	bne.n	8005814 <ip4_reass+0x14c>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800589e:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80058a0:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80058a4:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80058a6:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80058a8:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80058ac:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80058ae:	6837      	ldr	r7, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80058b0:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80058b2:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80058b4:	f853 eb04 	ldr.w	lr, [r3], #4
 80058b8:	428b      	cmp	r3, r1
 80058ba:	f842 eb04 	str.w	lr, [r2], #4
 80058be:	d1f9      	bne.n	80058b4 <ip4_reass+0x1ec>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80058c0:	f7fe ff78 	bl	80047b4 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80058c4:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80058c6:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80058c8:	71b3      	strb	r3, [r6, #6]
 80058ca:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80058cc:	72b3      	strb	r3, [r6, #10]
 80058ce:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80058d0:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80058d2:	2f00      	cmp	r7, #0
 80058d4:	d14f      	bne.n	8005976 <ip4_reass+0x2ae>
    if (ipr == reassdatagrams) {
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <ip4_reass+0x308>)
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	428c      	cmp	r4, r1
 80058dc:	d15c      	bne.n	8005998 <ip4_reass+0x2d0>
      ipr_prev = NULL;
 80058de:	4639      	mov	r1, r7
 80058e0:	e05c      	b.n	800599c <ip4_reass+0x2d4>
        if (iprh->end > iprh_tmp->start) {
 80058e2:	428b      	cmp	r3, r1
 80058e4:	f200 8084 	bhi.w	80059f0 <ip4_reass+0x328>
      ipr->p = new_p;
 80058e8:	f8c4 8004 	str.w	r8, [r4, #4]
 80058ec:	e7b8      	b.n	8005860 <ip4_reass+0x198>
    } else if (iprh->start == iprh_tmp->start) {
 80058ee:	d07f      	beq.n	80059f0 <ip4_reass+0x328>
    } else if (iprh->start < iprh_tmp->end) {
 80058f0:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80058f4:	4282      	cmp	r2, r0
 80058f6:	d87b      	bhi.n	80059f0 <ip4_reass+0x328>
      if (iprh_prev != NULL) {
 80058f8:	b125      	cbz	r5, 8005904 <ip4_reass+0x23c>
        if (iprh_prev->end != iprh_tmp->start) {
 80058fa:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 80058fc:	428a      	cmp	r2, r1
 80058fe:	bf18      	it	ne
 8005900:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 8005904:	f8dc 2000 	ldr.w	r2, [ip]
 8005908:	4665      	mov	r5, ip
 800590a:	e768      	b.n	80057de <ip4_reass+0x116>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800590c:	88eb      	ldrh	r3, [r5, #6]
 800590e:	4283      	cmp	r3, r0
 8005910:	d906      	bls.n	8005920 <ip4_reass+0x258>
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <ip4_reass+0x30c>)
 8005914:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8005918:	4931      	ldr	r1, [pc, #196]	; (80059e0 <ip4_reass+0x318>)
 800591a:	4830      	ldr	r0, [pc, #192]	; (80059dc <ip4_reass+0x314>)
 800591c:	f005 fe64 	bl	800b5e8 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8005920:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8005924:	88ea      	ldrh	r2, [r5, #6]
 8005926:	88b3      	ldrh	r3, [r6, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	e797      	b.n	800585c <ip4_reass+0x194>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0a1      	beq.n	8005876 <ip4_reass+0x1ae>
 8005932:	6859      	ldr	r1, [r3, #4]
 8005934:	888b      	ldrh	r3, [r1, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d19d      	bne.n	8005876 <ip4_reass+0x1ae>
        q = iprh->next_pbuf;
 800593a:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800593c:	b99b      	cbnz	r3, 8005966 <ip4_reass+0x29e>
          LWIP_ASSERT("sanity check",
 800593e:	42b1      	cmp	r1, r6
 8005940:	d106      	bne.n	8005950 <ip4_reass+0x288>
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <ip4_reass+0x30c>)
 8005944:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005948:	4926      	ldr	r1, [pc, #152]	; (80059e4 <ip4_reass+0x31c>)
 800594a:	4824      	ldr	r0, [pc, #144]	; (80059dc <ip4_reass+0x314>)
 800594c:	f005 fe4c 	bl	800b5e8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d091      	beq.n	800587a <ip4_reass+0x1b2>
 8005956:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <ip4_reass+0x30c>)
 8005958:	f240 12e3 	movw	r2, #483	; 0x1e3
 800595c:	4922      	ldr	r1, [pc, #136]	; (80059e8 <ip4_reass+0x320>)
 800595e:	481f      	ldr	r0, [pc, #124]	; (80059dc <ip4_reass+0x314>)
 8005960:	f005 fe42 	bl	800b5e8 <iprintf>
 8005964:	e789      	b.n	800587a <ip4_reass+0x1b2>
          iprh = (struct ip_reass_helper *)q->payload;
 8005966:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8005968:	88f0      	ldrh	r0, [r6, #6]
 800596a:	8893      	ldrh	r3, [r2, #4]
 800596c:	4298      	cmp	r0, r3
 800596e:	d182      	bne.n	8005876 <ip4_reass+0x1ae>
          q = iprh->next_pbuf;
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	4616      	mov	r6, r2
 8005974:	e7e2      	b.n	800593c <ip4_reass+0x274>
      iprh = (struct ip_reass_helper *)r->payload;
 8005976:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
 800597a:	2114      	movs	r1, #20
 800597c:	4638      	mov	r0, r7
 800597e:	f000 fe53 	bl	8006628 <pbuf_remove_header>
      pbuf_cat(p, r);
 8005982:	4639      	mov	r1, r7
 8005984:	4630      	mov	r0, r6
 8005986:	f000 fffd 	bl	8006984 <pbuf_cat>
      r = iprh->next_pbuf;
 800598a:	f8d8 7000 	ldr.w	r7, [r8]
 800598e:	e7a0      	b.n	80058d2 <ip4_reass+0x20a>
        if (ipr_prev->next == ipr) {
 8005990:	680b      	ldr	r3, [r1, #0]
 8005992:	429c      	cmp	r4, r3
 8005994:	d002      	beq.n	800599c <ip4_reass+0x2d4>
 8005996:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8005998:	2900      	cmp	r1, #0
 800599a:	d1f9      	bne.n	8005990 <ip4_reass+0x2c8>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff fd7d 	bl	800549c <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 ffca 	bl	800693c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80059a8:	882b      	ldrh	r3, [r5, #0]
    clen = pbuf_clen(p);
 80059aa:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80059ac:	4283      	cmp	r3, r0
 80059ae:	d206      	bcs.n	80059be <ip4_reass+0x2f6>
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <ip4_reass+0x30c>)
 80059b2:	f240 229b 	movw	r2, #667	; 0x29b
 80059b6:	490d      	ldr	r1, [pc, #52]	; (80059ec <ip4_reass+0x324>)
 80059b8:	4808      	ldr	r0, [pc, #32]	; (80059dc <ip4_reass+0x314>)
 80059ba:	f005 fe15 	bl	800b5e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80059be:	8828      	ldrh	r0, [r5, #0]
 80059c0:	1b00      	subs	r0, r0, r4
 80059c2:	8028      	strh	r0, [r5, #0]
}
 80059c4:	4630      	mov	r0, r6
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	20024320 	.word	0x20024320
 80059d0:	20024324 	.word	0x20024324
 80059d4:	0800d90d 	.word	0x0800d90d
 80059d8:	0800d86c 	.word	0x0800d86c
 80059dc:	0800c5ae 	.word	0x0800c5ae
 80059e0:	0800d84e 	.word	0x0800d84e
 80059e4:	0800d8a3 	.word	0x0800d8a3
 80059e8:	0800d8b0 	.word	0x0800d8b0
 80059ec:	0800d8d2 	.word	0x0800d8d2
  if (ipr->p == NULL) {
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f47f af0b 	bne.w	800580e <ip4_reass+0x146>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <ip4_reass+0x39c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	429c      	cmp	r4, r3
 80059fe:	d006      	beq.n	8005a0e <ip4_reass+0x346>
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <ip4_reass+0x3a0>)
 8005a02:	f240 22ab 	movw	r2, #683	; 0x2ab
 8005a06:	4919      	ldr	r1, [pc, #100]	; (8005a6c <ip4_reass+0x3a4>)
 8005a08:	4819      	ldr	r0, [pc, #100]	; (8005a70 <ip4_reass+0x3a8>)
 8005a0a:	f005 fded 	bl	800b5e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4620      	mov	r0, r4
 8005a12:	f7ff fd43 	bl	800549c <ip_reass_dequeue_datagram>
 8005a16:	e6fa      	b.n	800580e <ip4_reass+0x146>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005a18:	88e8      	ldrh	r0, [r5, #6]
 8005a1a:	f7fe fecb 	bl	80047b4 <lwip_htons>
 8005a1e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f47f ae9e 	bne.w	8005764 <ip4_reass+0x9c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005a28:	89e0      	ldrh	r0, [r4, #14]
 8005a2a:	f7fe fec3 	bl	80047b4 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005a2e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f43f ae96 	beq.w	8005764 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005a38:	462b      	mov	r3, r5
 8005a3a:	f104 0208 	add.w	r2, r4, #8
 8005a3e:	f105 0114 	add.w	r1, r5, #20
 8005a42:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a46:	428b      	cmp	r3, r1
 8005a48:	f842 0b04 	str.w	r0, [r2], #4
 8005a4c:	d1f9      	bne.n	8005a42 <ip4_reass+0x37a>
 8005a4e:	e689      	b.n	8005764 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8005a50:	4699      	mov	r9, r3
 8005a52:	e712      	b.n	800587a <ip4_reass+0x1b2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005a54:	f1bb 0f00 	cmp.w	fp, #0
 8005a58:	f43f af0d 	beq.w	8005876 <ip4_reass+0x1ae>
 8005a5c:	f04f 0900 	mov.w	r9, #0
 8005a60:	e701      	b.n	8005866 <ip4_reass+0x19e>
 8005a62:	bf00      	nop
 8005a64:	20024324 	.word	0x20024324
 8005a68:	0800d90d 	.word	0x0800d90d
 8005a6c:	0800d8ed 	.word	0x0800d8ed
 8005a70:	0800c5ae 	.word	0x0800c5ae

08005a74 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8005a78:	8c0b      	ldrh	r3, [r1, #32]
{
 8005a7a:	b08d      	sub	sp, #52	; 0x34
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	468b      	mov	fp, r1
 8005a80:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8005a82:	3b14      	subs	r3, #20
 8005a84:	2208      	movs	r2, #8
 8005a86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	9307      	str	r3, [sp, #28]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8005a8e:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8005a90:	781d      	ldrb	r5, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8005a92:	9303      	str	r3, [sp, #12]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8005a94:	f005 050f 	and.w	r5, r5, #15
 8005a98:	00ad      	lsls	r5, r5, #2
 8005a9a:	2d14      	cmp	r5, #20
 8005a9c:	d109      	bne.n	8005ab2 <ip4_frag+0x3e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8005a9e:	8943      	ldrh	r3, [r0, #10]
 8005aa0:	2b13      	cmp	r3, #19
 8005aa2:	d809      	bhi.n	8005ab8 <ip4_frag+0x44>
 8005aa4:	4b5e      	ldr	r3, [pc, #376]	; (8005c20 <ip4_frag+0x1ac>)
 8005aa6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8005aaa:	495e      	ldr	r1, [pc, #376]	; (8005c24 <ip4_frag+0x1b0>)
 8005aac:	485e      	ldr	r0, [pc, #376]	; (8005c28 <ip4_frag+0x1b4>)
 8005aae:	f005 fd9b 	bl	800b5e8 <iprintf>
    return ERR_VAL;
 8005ab2:	f06f 0005 	mvn.w	r0, #5
 8005ab6:	e013      	b.n	8005ae0 <ip4_frag+0x6c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8005ab8:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 8005aba:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8005abc:	88d8      	ldrh	r0, [r3, #6]
 8005abe:	f7fe fe79 	bl	80047b4 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8005ac2:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8005ac6:	893c      	ldrh	r4, [r7, #8]
  ofo = tmp & IP_OFFMASK;
 8005ac8:	9305      	str	r3, [sp, #20]
 8005aca:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8005ace:	3c14      	subs	r4, #20
 8005ad0:	9308      	str	r3, [sp, #32]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8005ad2:	9b07      	ldr	r3, [sp, #28]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8005ad4:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	9309      	str	r3, [sp, #36]	; 0x24
  while (left) {
 8005adc:	b91c      	cbnz	r4, 8005ae6 <ip4_frag+0x72>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8005ade:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8005ae0:	b00d      	add	sp, #52	; 0x34
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005ae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005aec:	2114      	movs	r1, #20
 8005aee:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	bf28      	it	cs
 8005af4:	4623      	movcs	r3, r4
 8005af6:	9306      	str	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005af8:	f000 fe32 	bl	8006760 <pbuf_alloc>
    if (rambuf == NULL) {
 8005afc:	4680      	mov	r8, r0
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d037      	beq.n	8005b72 <ip4_frag+0xfe>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8005b02:	8943      	ldrh	r3, [r0, #10]
 8005b04:	2b13      	cmp	r3, #19
 8005b06:	d806      	bhi.n	8005b16 <ip4_frag+0xa2>
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <ip4_frag+0x1ac>)
 8005b0a:	f240 3225 	movw	r2, #805	; 0x325
 8005b0e:	4947      	ldr	r1, [pc, #284]	; (8005c2c <ip4_frag+0x1b8>)
 8005b10:	4845      	ldr	r0, [pc, #276]	; (8005c28 <ip4_frag+0x1b4>)
 8005b12:	f005 fd69 	bl	800b5e8 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	3114      	adds	r1, #20
 8005b20:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b24:	428b      	cmp	r3, r1
 8005b26:	f842 0b04 	str.w	r0, [r2], #4
 8005b2a:	d1f9      	bne.n	8005b20 <ip4_frag+0xac>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005b2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8005b30:	f8dd 9018 	ldr.w	r9, [sp, #24]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005b34:	9304      	str	r3, [sp, #16]
    while (left_to_copy) {
 8005b36:	f1b9 0f00 	cmp.w	r9, #0
 8005b3a:	d040      	beq.n	8005bbe <ip4_frag+0x14a>
      u16_t plen = (u16_t)(p->len - poff);
 8005b3c:	897b      	ldrh	r3, [r7, #10]
 8005b3e:	1b5e      	subs	r6, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8005b40:	429d      	cmp	r5, r3
      u16_t plen = (u16_t)(p->len - poff);
 8005b42:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8005b44:	d906      	bls.n	8005b54 <ip4_frag+0xe0>
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <ip4_frag+0x1ac>)
 8005b48:	f240 322d 	movw	r2, #813	; 0x32d
 8005b4c:	4938      	ldr	r1, [pc, #224]	; (8005c30 <ip4_frag+0x1bc>)
 8005b4e:	4836      	ldr	r0, [pc, #216]	; (8005c28 <ip4_frag+0x1b4>)
 8005b50:	f005 fd4a 	bl	800b5e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8005b54:	454e      	cmp	r6, r9
 8005b56:	bf28      	it	cs
 8005b58:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8005b5a:	b916      	cbnz	r6, 8005b62 <ip4_frag+0xee>
        p = p->next;
 8005b5c:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8005b5e:	2500      	movs	r5, #0
 8005b60:	e7e9      	b.n	8005b36 <ip4_frag+0xc2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8005b62:	2005      	movs	r0, #5
 8005b64:	f000 fb30 	bl	80061c8 <memp_malloc>
      if (pcr == NULL) {
 8005b68:	4682      	mov	sl, r0
 8005b6a:	b928      	cbnz	r0, 8005b78 <ip4_frag+0x104>
        pbuf_free(rambuf);
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	f000 fd8f 	bl	8006690 <pbuf_free>
  return ERR_MEM;
 8005b72:	f04f 30ff 	mov.w	r0, #4294967295
 8005b76:	e7b3      	b.n	8005ae0 <ip4_frag+0x6c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8005b78:	9601      	str	r6, [sp, #4]
 8005b7a:	2241      	movs	r2, #65	; 0x41
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4631      	mov	r1, r6
 8005b80:	442b      	add	r3, r5
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4603      	mov	r3, r0
 8005b86:	2000      	movs	r0, #0
 8005b88:	f000 fd30 	bl	80065ec <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8005b8c:	b918      	cbnz	r0, 8005b96 <ip4_frag+0x122>
        ip_frag_free_pbuf_custom_ref(pcr);
 8005b8e:	4650      	mov	r0, sl
 8005b90:	f7ff fd56 	bl	8005640 <ip_frag_free_pbuf_custom_ref>
 8005b94:	e7ea      	b.n	8005b6c <ip4_frag+0xf8>
 8005b96:	900b      	str	r0, [sp, #44]	; 0x2c
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8005b98:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f000 fed5 	bl	800694c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <ip4_frag+0x1c0>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8005ba4:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8005ba8:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005bac:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bb4:	f000 fee6 	bl	8006984 <pbuf_cat>
      if (left_to_copy) {
 8005bb8:	f1b9 0f00 	cmp.w	r9, #0
 8005bbc:	d1ce      	bne.n	8005b5c <ip4_frag+0xe8>
    tmp = (IP_OFFMASK & (ofo));
 8005bbe:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8005bc0:	4435      	add	r5, r6
    tmp = (IP_OFFMASK & (ofo));
 8005bc2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8005bc6:	f8bb 3020 	ldrh.w	r3, [fp, #32]
    poff = (u16_t)(poff + newpbuflen);
 8005bca:	b2ad      	uxth	r5, r5
    last = (left <= netif->mtu - IP_HLEN);
 8005bcc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	dd01      	ble.n	8005bd6 <ip4_frag+0x162>
 8005bd2:	9b08      	ldr	r3, [sp, #32]
 8005bd4:	b10b      	cbz	r3, 8005bda <ip4_frag+0x166>
      tmp = tmp | IP_MF;
 8005bd6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8005bda:	f7fe fdeb 	bl	80047b4 <lwip_htons>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8005be2:	9b06      	ldr	r3, [sp, #24]
 8005be4:	f103 0014 	add.w	r0, r3, #20
 8005be8:	b280      	uxth	r0, r0
 8005bea:	f7fe fde3 	bl	80047b4 <lwip_htons>
 8005bee:	9b04      	ldr	r3, [sp, #16]
    IPH_CHKSUM_SET(iphdr, 0);
 8005bf0:	9a04      	ldr	r2, [sp, #16]
    netif->output(netif, rambuf, dest);
 8005bf2:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8005bf4:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8005bf6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8005bf8:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8005bfa:	7293      	strb	r3, [r2, #10]
 8005bfc:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8005bfe:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c04:	4798      	blx	r3
    pbuf_free(rambuf);
 8005c06:	4640      	mov	r0, r8
 8005c08:	f000 fd42 	bl	8006690 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8005c0c:	9b06      	ldr	r3, [sp, #24]
    ofo = (u16_t)(ofo + nfb);
 8005c0e:	9a07      	ldr	r2, [sp, #28]
    left = (u16_t)(left - fragsize);
 8005c10:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8005c12:	9b05      	ldr	r3, [sp, #20]
 8005c14:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8005c16:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	e75e      	b.n	8005adc <ip4_frag+0x68>
 8005c1e:	bf00      	nop
 8005c20:	0800d90d 	.word	0x0800d90d
 8005c24:	0800d804 	.word	0x0800d804
 8005c28:	0800c5ae 	.word	0x0800c5ae
 8005c2c:	0800d81f 	.word	0x0800d81f
 8005c30:	0800d83f 	.word	0x0800d83f
 8005c34:	0800566d 	.word	0x0800566d

08005c38 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <mem_init+0x4c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8005c3a:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005c3c:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <mem_init+0x50>)
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
{
 8005c42:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005c44:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8005c46:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 8005c4a:	8059      	strh	r1, [r3, #2]
  return (struct mem *)(void *)&ram[ptr];
 8005c4c:	1898      	adds	r0, r3, r2
  mem->used = 0;
 8005c4e:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005c50:	490e      	ldr	r1, [pc, #56]	; (8005c8c <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8005c52:	801a      	strh	r2, [r3, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005c54:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8005c56:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8005c58:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005c5c:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005c60:	4a0b      	ldr	r2, [pc, #44]	; (8005c90 <mem_init+0x58>)
  ram_end->used = 1;
 8005c62:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8005c66:	480b      	ldr	r0, [pc, #44]	; (8005c94 <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 8005c68:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8005c6a:	f004 ff53 	bl	800ab14 <sys_mutex_new>
 8005c6e:	b140      	cbz	r0, 8005c82 <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <mem_init+0x60>)
 8005c72:	f240 221f 	movw	r2, #543	; 0x21f
 8005c76:	4909      	ldr	r1, [pc, #36]	; (8005c9c <mem_init+0x64>)
 8005c78:	4809      	ldr	r0, [pc, #36]	; (8005ca0 <mem_init+0x68>)
  }
}
 8005c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8005c7e:	f005 bcb3 	b.w	800b5e8 <iprintf>
 8005c82:	bd10      	pop	{r4, pc}
 8005c84:	2002463f 	.word	0x2002463f
 8005c88:	20024330 	.word	0x20024330
 8005c8c:	20024334 	.word	0x20024334
 8005c90:	20024328 	.word	0x20024328
 8005c94:	2002432c 	.word	0x2002432c
 8005c98:	0800dad0 	.word	0x0800dad0
 8005c9c:	0800daff 	.word	0x0800daff
 8005ca0:	0800c5ae 	.word	0x0800c5ae

08005ca4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005ca8:	4604      	mov	r4, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f000 80b6 	beq.w	8005e1c <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005cb0:	0783      	lsls	r3, r0, #30
 8005cb2:	d00c      	beq.n	8005cce <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005cb4:	4b5a      	ldr	r3, [pc, #360]	; (8005e20 <mem_free+0x17c>)
 8005cb6:	f240 2273 	movw	r2, #627	; 0x273
 8005cba:	495a      	ldr	r1, [pc, #360]	; (8005e24 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005cbc:	485a      	ldr	r0, [pc, #360]	; (8005e28 <mem_free+0x184>)
 8005cbe:	f005 fc93 	bl	800b5e8 <iprintf>
  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8005cc2:	f004 ff55 	bl	800ab70 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8005cca:	f004 bf5d 	b.w	800ab88 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005cce:	4b57      	ldr	r3, [pc, #348]	; (8005e2c <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005cd0:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4698      	mov	r8, r3
 8005cd8:	4295      	cmp	r5, r2
 8005cda:	d305      	bcc.n	8005ce8 <mem_free+0x44>
 8005cdc:	4f54      	ldr	r7, [pc, #336]	; (8005e30 <mem_free+0x18c>)
 8005cde:	f100 030c 	add.w	r3, r0, #12
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d204      	bcs.n	8005cf2 <mem_free+0x4e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005ce8:	4b4d      	ldr	r3, [pc, #308]	; (8005e20 <mem_free+0x17c>)
 8005cea:	f240 227f 	movw	r2, #639	; 0x27f
 8005cee:	4951      	ldr	r1, [pc, #324]	; (8005e34 <mem_free+0x190>)
 8005cf0:	e7e4      	b.n	8005cbc <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 8005cf2:	4851      	ldr	r0, [pc, #324]	; (8005e38 <mem_free+0x194>)
 8005cf4:	f004 ff1d 	bl	800ab32 <sys_mutex_lock>
  if (!mem->used) {
 8005cf8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005cfc:	b953      	cbnz	r3, 8005d14 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005cfe:	4b48      	ldr	r3, [pc, #288]	; (8005e20 <mem_free+0x17c>)
 8005d00:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005d04:	494d      	ldr	r1, [pc, #308]	; (8005e3c <mem_free+0x198>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005d06:	4848      	ldr	r0, [pc, #288]	; (8005e28 <mem_free+0x184>)
 8005d08:	f005 fc6e 	bl	800b5e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8005d0c:	484a      	ldr	r0, [pc, #296]	; (8005e38 <mem_free+0x194>)
 8005d0e:	f004 ff15 	bl	800ab3c <sys_mutex_unlock>
 8005d12:	e7d6      	b.n	8005cc2 <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 8005d14:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d18:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8005d1c:	d879      	bhi.n	8005e12 <mem_free+0x16e>
  pmem = ptr_to_mem(mem->prev);
 8005d1e:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d22:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8005d26:	d874      	bhi.n	8005e12 <mem_free+0x16e>
  return (mem_size_t)((u8_t *)mem - ram);
 8005d28:	f8d8 1000 	ldr.w	r1, [r8]
 8005d2c:	1a6b      	subs	r3, r5, r1
 8005d2e:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d30:	4283      	cmp	r3, r0
 8005d32:	d002      	beq.n	8005d3a <mem_free+0x96>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d34:	5a08      	ldrh	r0, [r1, r0]
 8005d36:	4298      	cmp	r0, r3
 8005d38:	d16b      	bne.n	8005e12 <mem_free+0x16e>
  return (struct mem *)(void *)&ram[ptr];
 8005d3a:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d3c:	6838      	ldr	r0, [r7, #0]
 8005d3e:	4282      	cmp	r2, r0
 8005d40:	d002      	beq.n	8005d48 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d42:	8852      	ldrh	r2, [r2, #2]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d164      	bne.n	8005e12 <mem_free+0x16e>
  mem->used = 0;
 8005d48:	2300      	movs	r3, #0
  if (mem < lfree) {
 8005d4a:	4e3d      	ldr	r6, [pc, #244]	; (8005e40 <mem_free+0x19c>)
  mem->used = 0;
 8005d4c:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8005d50:	6833      	ldr	r3, [r6, #0]
 8005d52:	429d      	cmp	r5, r3
 8005d54:	d200      	bcs.n	8005d58 <mem_free+0xb4>
    lfree = mem;
 8005d56:	6035      	str	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005d58:	428d      	cmp	r5, r1
 8005d5a:	d206      	bcs.n	8005d6a <mem_free+0xc6>
 8005d5c:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <mem_free+0x17c>)
 8005d5e:	f240 12df 	movw	r2, #479	; 0x1df
 8005d62:	4938      	ldr	r1, [pc, #224]	; (8005e44 <mem_free+0x1a0>)
 8005d64:	4830      	ldr	r0, [pc, #192]	; (8005e28 <mem_free+0x184>)
 8005d66:	f005 fc3f 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	429d      	cmp	r5, r3
 8005d6e:	d306      	bcc.n	8005d7e <mem_free+0xda>
 8005d70:	4b2b      	ldr	r3, [pc, #172]	; (8005e20 <mem_free+0x17c>)
 8005d72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005d76:	4934      	ldr	r1, [pc, #208]	; (8005e48 <mem_free+0x1a4>)
 8005d78:	482b      	ldr	r0, [pc, #172]	; (8005e28 <mem_free+0x184>)
 8005d7a:	f005 fc35 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005d7e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005d82:	b133      	cbz	r3, 8005d92 <mem_free+0xee>
 8005d84:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <mem_free+0x17c>)
 8005d86:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005d8a:	4930      	ldr	r1, [pc, #192]	; (8005e4c <mem_free+0x1a8>)
 8005d8c:	4826      	ldr	r0, [pc, #152]	; (8005e28 <mem_free+0x184>)
 8005d8e:	f005 fc2b 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005d92:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8005d96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d9a:	d906      	bls.n	8005daa <mem_free+0x106>
 8005d9c:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <mem_free+0x17c>)
 8005d9e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005da2:	492b      	ldr	r1, [pc, #172]	; (8005e50 <mem_free+0x1ac>)
 8005da4:	4820      	ldr	r0, [pc, #128]	; (8005e28 <mem_free+0x184>)
 8005da6:	f005 fc1f 	bl	800b5e8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8005daa:	f8d8 3000 	ldr.w	r3, [r8]
 8005dae:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005db2:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005db4:	4295      	cmp	r5, r2
 8005db6:	d012      	beq.n	8005dde <mem_free+0x13a>
 8005db8:	7910      	ldrb	r0, [r2, #4]
 8005dba:	b980      	cbnz	r0, 8005dde <mem_free+0x13a>
 8005dbc:	6838      	ldr	r0, [r7, #0]
 8005dbe:	4282      	cmp	r2, r0
 8005dc0:	d00d      	beq.n	8005dde <mem_free+0x13a>
    if (lfree == nmem) {
 8005dc2:	6830      	ldr	r0, [r6, #0]
 8005dc4:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8005dc6:	5a5a      	ldrh	r2, [r3, r1]
 8005dc8:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005dcc:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8005dce:	bf08      	it	eq
 8005dd0:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005dd2:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005dd6:	bf1e      	ittt	ne
 8005dd8:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8005dda:	1ae9      	subne	r1, r5, r3
 8005ddc:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8005dde:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8005de2:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8005de4:	428d      	cmp	r5, r1
 8005de6:	d00f      	beq.n	8005e08 <mem_free+0x164>
 8005de8:	7908      	ldrb	r0, [r1, #4]
 8005dea:	b968      	cbnz	r0, 8005e08 <mem_free+0x164>
    if (lfree == mem) {
 8005dec:	6830      	ldr	r0, [r6, #0]
 8005dee:	4285      	cmp	r5, r0
      lfree = pmem;
 8005df0:	bf08      	it	eq
 8005df2:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8005df4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005df8:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005dfa:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005dfe:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005e02:	bf1c      	itt	ne
 8005e04:	185b      	addne	r3, r3, r1
 8005e06:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8005e08:	480b      	ldr	r0, [pc, #44]	; (8005e38 <mem_free+0x194>)
}
 8005e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8005e0e:	f004 be95 	b.w	800ab3c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <mem_free+0x17c>)
 8005e14:	f240 2295 	movw	r2, #661	; 0x295
 8005e18:	490e      	ldr	r1, [pc, #56]	; (8005e54 <mem_free+0x1b0>)
 8005e1a:	e774      	b.n	8005d06 <mem_free+0x62>
 8005e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e20:	0800dad0 	.word	0x0800dad0
 8005e24:	0800d9c8 	.word	0x0800d9c8
 8005e28:	0800c5ae 	.word	0x0800c5ae
 8005e2c:	20024330 	.word	0x20024330
 8005e30:	20024334 	.word	0x20024334
 8005e34:	0800d9e9 	.word	0x0800d9e9
 8005e38:	2002432c 	.word	0x2002432c
 8005e3c:	0800da02 	.word	0x0800da02
 8005e40:	20024328 	.word	0x20024328
 8005e44:	0800da28 	.word	0x0800da28
 8005e48:	0800da3f 	.word	0x0800da3f
 8005e4c:	0800da59 	.word	0x0800da59
 8005e50:	0800da74 	.word	0x0800da74
 8005e54:	0800da9e 	.word	0x0800da9e

08005e58 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005e5c:	1ccd      	adds	r5, r1, #3
{
 8005e5e:	4604      	mov	r4, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005e60:	f025 0503 	bic.w	r5, r5, #3
 8005e64:	b2ad      	uxth	r5, r5
  if (newsize < MIN_SIZE_ALIGNED) {
 8005e66:	2d0b      	cmp	r5, #11
 8005e68:	d904      	bls.n	8005e74 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005e6a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005e6e:	d902      	bls.n	8005e76 <mem_trim+0x1e>
    return NULL;
 8005e70:	2400      	movs	r4, #0
 8005e72:	e01e      	b.n	8005eb2 <mem_trim+0x5a>
    newsize = MIN_SIZE_ALIGNED;
 8005e74:	250c      	movs	r5, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005e76:	42a9      	cmp	r1, r5
 8005e78:	d8fa      	bhi.n	8005e70 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005e7a:	4b45      	ldr	r3, [pc, #276]	; (8005f90 <mem_trim+0x138>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4698      	mov	r8, r3
 8005e80:	42a2      	cmp	r2, r4
 8005e82:	d803      	bhi.n	8005e8c <mem_trim+0x34>
 8005e84:	4b43      	ldr	r3, [pc, #268]	; (8005f94 <mem_trim+0x13c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d306      	bcc.n	8005e9a <mem_trim+0x42>
 8005e8c:	4b42      	ldr	r3, [pc, #264]	; (8005f98 <mem_trim+0x140>)
 8005e8e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005e92:	4942      	ldr	r1, [pc, #264]	; (8005f9c <mem_trim+0x144>)
 8005e94:	4842      	ldr	r0, [pc, #264]	; (8005fa0 <mem_trim+0x148>)
 8005e96:	f005 fba7 	bl	800b5e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d303      	bcc.n	8005eaa <mem_trim+0x52>
 8005ea2:	4a3c      	ldr	r2, [pc, #240]	; (8005f94 <mem_trim+0x13c>)
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	4294      	cmp	r4, r2
 8005ea8:	d306      	bcc.n	8005eb8 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8005eaa:	f004 fe61 	bl	800ab70 <sys_arch_protect>
 8005eae:	f004 fe6b 	bl	800ab88 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005eb8:	f1a4 0608 	sub.w	r6, r4, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005ebc:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8005ec0:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005ec2:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8005ec4:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005ec6:	1bbf      	subs	r7, r7, r6
 8005ec8:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005eca:	42af      	cmp	r7, r5
 8005ecc:	d226      	bcs.n	8005f1c <mem_trim+0xc4>
 8005ece:	4b32      	ldr	r3, [pc, #200]	; (8005f98 <mem_trim+0x140>)
 8005ed0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005ed4:	4933      	ldr	r1, [pc, #204]	; (8005fa4 <mem_trim+0x14c>)
 8005ed6:	4832      	ldr	r0, [pc, #200]	; (8005fa0 <mem_trim+0x148>)
 8005ed8:	f005 fb86 	bl	800b5e8 <iprintf>
 8005edc:	e7c8      	b.n	8005e70 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005ede:	f105 0314 	add.w	r3, r5, #20
 8005ee2:	42bb      	cmp	r3, r7
 8005ee4:	d84f      	bhi.n	8005f86 <mem_trim+0x12e>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005ee6:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005eea:	f5b9 6fc8 	cmp.w	r9, #1600	; 0x640
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005eee:	441d      	add	r5, r3
 8005ef0:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ef2:	d106      	bne.n	8005f02 <mem_trim+0xaa>
 8005ef4:	4b28      	ldr	r3, [pc, #160]	; (8005f98 <mem_trim+0x140>)
 8005ef6:	f240 3216 	movw	r2, #790	; 0x316
 8005efa:	492b      	ldr	r1, [pc, #172]	; (8005fa8 <mem_trim+0x150>)
 8005efc:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <mem_trim+0x148>)
 8005efe:	f005 fb73 	bl	800b5e8 <iprintf>
    if (mem2 < lfree) {
 8005f02:	492a      	ldr	r1, [pc, #168]	; (8005fac <mem_trim+0x154>)
  return (struct mem *)(void *)&ram[ptr];
 8005f04:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 8005f08:	6808      	ldr	r0, [r1, #0]
  return (struct mem *)(void *)&ram[ptr];
 8005f0a:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8005f0c:	4290      	cmp	r0, r2
      lfree = mem2;
 8005f0e:	bf88      	it	hi
 8005f10:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8005f12:	2100      	movs	r1, #0
 8005f14:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8005f16:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005f1a:	e02a      	b.n	8005f72 <mem_trim+0x11a>
  if (newsize == size) {
 8005f1c:	d0c9      	beq.n	8005eb2 <mem_trim+0x5a>
  LWIP_MEM_FREE_PROTECT();
 8005f1e:	4824      	ldr	r0, [pc, #144]	; (8005fb0 <mem_trim+0x158>)
 8005f20:	f004 fe07 	bl	800ab32 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8005f24:	f834 9c08 	ldrh.w	r9, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8005f28:	f8d8 b000 	ldr.w	fp, [r8]
 8005f2c:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8005f30:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1d2      	bne.n	8005ede <mem_trim+0x86>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f38:	f5b9 6fc8 	cmp.w	r9, #1600	; 0x640
 8005f3c:	d106      	bne.n	8005f4c <mem_trim+0xf4>
 8005f3e:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <mem_trim+0x140>)
 8005f40:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005f44:	4918      	ldr	r1, [pc, #96]	; (8005fa8 <mem_trim+0x150>)
 8005f46:	4816      	ldr	r0, [pc, #88]	; (8005fa0 <mem_trim+0x148>)
 8005f48:	f005 fb4e 	bl	800b5e8 <iprintf>
    if (lfree == mem2) {
 8005f4c:	4a17      	ldr	r2, [pc, #92]	; (8005fac <mem_trim+0x154>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f4e:	f106 0308 	add.w	r3, r6, #8
    mem2->used = 0;
 8005f52:	2000      	movs	r0, #0
    next = mem2->next;
 8005f54:	f83b 1009 	ldrh.w	r1, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f58:	441d      	add	r5, r3
    if (lfree == mem2) {
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	4553      	cmp	r3, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f5e:	b2ad      	uxth	r5, r5
  return (struct mem *)(void *)&ram[ptr];
 8005f60:	bf02      	ittt	eq
 8005f62:	f8d8 3000 	ldreq.w	r3, [r8]
 8005f66:	195b      	addeq	r3, r3, r5
      lfree = ptr_to_mem(ptr2);
 8005f68:	6013      	streq	r3, [r2, #0]
  return (struct mem *)(void *)&ram[ptr];
 8005f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f6e:	195a      	adds	r2, r3, r5
    mem2->used = 0;
 8005f70:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8005f72:	5359      	strh	r1, [r3, r5]
    mem2->prev = ptr;
 8005f74:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8005f76:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f7a:	5b5a      	ldrh	r2, [r3, r5]
 8005f7c:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005f80:	bf1c      	itt	ne
 8005f82:	189b      	addne	r3, r3, r2
 8005f84:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8005f86:	480a      	ldr	r0, [pc, #40]	; (8005fb0 <mem_trim+0x158>)
 8005f88:	f004 fdd8 	bl	800ab3c <sys_mutex_unlock>
  return rmem;
 8005f8c:	e791      	b.n	8005eb2 <mem_trim+0x5a>
 8005f8e:	bf00      	nop
 8005f90:	20024330 	.word	0x20024330
 8005f94:	20024334 	.word	0x20024334
 8005f98:	0800dad0 	.word	0x0800dad0
 8005f9c:	0800dbb5 	.word	0x0800dbb5
 8005fa0:	0800c5ae 	.word	0x0800c5ae
 8005fa4:	0800dbcc 	.word	0x0800dbcc
 8005fa8:	0800dbec 	.word	0x0800dbec
 8005fac:	20024328 	.word	0x20024328
 8005fb0:	2002432c 	.word	0x2002432c

08005fb4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005fb8:	b148      	cbz	r0, 8005fce <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005fba:	1cc5      	adds	r5, r0, #3
 8005fbc:	f025 0503 	bic.w	r5, r5, #3
 8005fc0:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8005fc2:	2d0b      	cmp	r5, #11
 8005fc4:	d905      	bls.n	8005fd2 <mem_malloc+0x1e>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005fc6:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005fca:	d903      	bls.n	8005fd4 <mem_malloc+0x20>
    return NULL;
 8005fcc:	2000      	movs	r0, #0
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8005fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8005fd2:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005fd4:	42a8      	cmp	r0, r5
 8005fd6:	d8f9      	bhi.n	8005fcc <mem_malloc+0x18>
  sys_mutex_lock(&mem_mutex);
 8005fd8:	4842      	ldr	r0, [pc, #264]	; (80060e4 <mem_malloc+0x130>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005fda:	f06f 0707 	mvn.w	r7, #7
  sys_mutex_lock(&mem_mutex);
 8005fde:	f004 fda8 	bl	800ab32 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8005fe2:	4941      	ldr	r1, [pc, #260]	; (80060e8 <mem_malloc+0x134>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005fe4:	4b41      	ldr	r3, [pc, #260]	; (80060ec <mem_malloc+0x138>)
 8005fe6:	f5c5 60c8 	rsb	r0, r5, #1600	; 0x640
  return (mem_size_t)((u8_t *)mem - ram);
 8005fea:	680a      	ldr	r2, [r1, #0]
 8005fec:	4689      	mov	r9, r1
 8005fee:	681e      	ldr	r6, [r3, #0]
 8005ff0:	4698      	mov	r8, r3
 8005ff2:	1ab6      	subs	r6, r6, r2
 8005ff4:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005ff6:	4286      	cmp	r6, r0
 8005ff8:	d303      	bcc.n	8006002 <mem_malloc+0x4e>
  sys_mutex_unlock(&mem_mutex);
 8005ffa:	483a      	ldr	r0, [pc, #232]	; (80060e4 <mem_malloc+0x130>)
 8005ffc:	f004 fd9e 	bl	800ab3c <sys_mutex_unlock>
 8006000:	e7e4      	b.n	8005fcc <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 8006002:	1994      	adds	r4, r2, r6
 8006004:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8006006:	7923      	ldrb	r3, [r4, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d168      	bne.n	80060de <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800600c:	1bbb      	subs	r3, r7, r6
 800600e:	440b      	add	r3, r1
      if ((!mem->used) &&
 8006010:	429d      	cmp	r5, r3
 8006012:	d864      	bhi.n	80060de <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006014:	f105 0214 	add.w	r2, r5, #20
 8006018:	4293      	cmp	r3, r2
 800601a:	d35a      	bcc.n	80060d2 <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800601c:	f105 0708 	add.w	r7, r5, #8
 8006020:	4437      	add	r7, r6
 8006022:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006024:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 8006028:	d106      	bne.n	8006038 <mem_malloc+0x84>
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <mem_malloc+0x13c>)
 800602c:	f240 3287 	movw	r2, #903	; 0x387
 8006030:	4930      	ldr	r1, [pc, #192]	; (80060f4 <mem_malloc+0x140>)
 8006032:	4831      	ldr	r0, [pc, #196]	; (80060f8 <mem_malloc+0x144>)
 8006034:	f005 fad8 	bl	800b5e8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8006038:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 800603c:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800603e:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 8006040:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8006042:	8821      	ldrh	r1, [r4, #0]
 8006044:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8006046:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8006048:	2201      	movs	r2, #1
          mem->next = ptr2;
 800604a:	8027      	strh	r7, [r4, #0]
          mem->used = 1;
 800604c:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800604e:	5bda      	ldrh	r2, [r3, r7]
 8006050:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8006054:	d001      	beq.n	800605a <mem_malloc+0xa6>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006056:	4413      	add	r3, r2
 8006058:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 800605a:	f8d8 3000 	ldr.w	r3, [r8]
 800605e:	4e27      	ldr	r6, [pc, #156]	; (80060fc <mem_malloc+0x148>)
 8006060:	42a3      	cmp	r3, r4
 8006062:	d113      	bne.n	800608c <mem_malloc+0xd8>
          while (cur->used && cur != ram_end) {
 8006064:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 8006066:	4623      	mov	r3, r4
 8006068:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
 800606c:	791a      	ldrb	r2, [r3, #4]
 800606e:	b10a      	cbz	r2, 8006074 <mem_malloc+0xc0>
 8006070:	428b      	cmp	r3, r1
 8006072:	d131      	bne.n	80060d8 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006074:	428b      	cmp	r3, r1
          lfree = cur;
 8006076:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800607a:	d007      	beq.n	800608c <mem_malloc+0xd8>
 800607c:	b132      	cbz	r2, 800608c <mem_malloc+0xd8>
 800607e:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <mem_malloc+0x13c>)
 8006080:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006084:	491e      	ldr	r1, [pc, #120]	; (8006100 <mem_malloc+0x14c>)
 8006086:	481c      	ldr	r0, [pc, #112]	; (80060f8 <mem_malloc+0x144>)
 8006088:	f005 faae 	bl	800b5e8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800608c:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 800608e:	4815      	ldr	r0, [pc, #84]	; (80060e4 <mem_malloc+0x130>)
 8006090:	f004 fd54 	bl	800ab3c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006094:	6833      	ldr	r3, [r6, #0]
 8006096:	4425      	add	r5, r4
 8006098:	42ab      	cmp	r3, r5
 800609a:	d206      	bcs.n	80060aa <mem_malloc+0xf6>
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <mem_malloc+0x13c>)
 800609e:	f240 32ba 	movw	r2, #954	; 0x3ba
 80060a2:	4918      	ldr	r1, [pc, #96]	; (8006104 <mem_malloc+0x150>)
 80060a4:	4814      	ldr	r0, [pc, #80]	; (80060f8 <mem_malloc+0x144>)
 80060a6:	f005 fa9f 	bl	800b5e8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80060aa:	07a3      	lsls	r3, r4, #30
 80060ac:	d00d      	beq.n	80060ca <mem_malloc+0x116>
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <mem_malloc+0x13c>)
 80060b0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80060b4:	4914      	ldr	r1, [pc, #80]	; (8006108 <mem_malloc+0x154>)
 80060b6:	4810      	ldr	r0, [pc, #64]	; (80060f8 <mem_malloc+0x144>)
 80060b8:	f005 fa96 	bl	800b5e8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <mem_malloc+0x13c>)
 80060be:	f240 32be 	movw	r2, #958	; 0x3be
 80060c2:	4912      	ldr	r1, [pc, #72]	; (800610c <mem_malloc+0x158>)
 80060c4:	480c      	ldr	r0, [pc, #48]	; (80060f8 <mem_malloc+0x144>)
 80060c6:	f005 fa8f 	bl	800b5e8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80060ca:	f104 0008 	add.w	r0, r4, #8
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	7123      	strb	r3, [r4, #4]
 80060d6:	e7c0      	b.n	800605a <mem_malloc+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	4403      	add	r3, r0
 80060dc:	e7c6      	b.n	800606c <mem_malloc+0xb8>
         ptr = ptr_to_mem(ptr)->next) {
 80060de:	460e      	mov	r6, r1
 80060e0:	e789      	b.n	8005ff6 <mem_malloc+0x42>
 80060e2:	bf00      	nop
 80060e4:	2002432c 	.word	0x2002432c
 80060e8:	20024330 	.word	0x20024330
 80060ec:	20024328 	.word	0x20024328
 80060f0:	0800dad0 	.word	0x0800dad0
 80060f4:	0800dbec 	.word	0x0800dbec
 80060f8:	0800c5ae 	.word	0x0800c5ae
 80060fc:	20024334 	.word	0x20024334
 8006100:	0800db1a 	.word	0x0800db1a
 8006104:	0800db33 	.word	0x0800db33
 8006108:	0800db63 	.word	0x0800db63
 800610c:	0800db92 	.word	0x0800db92

08006110 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006114:	f004 fd2c 	bl	800ab70 <sys_arch_protect>
 8006118:	4605      	mov	r5, r0

  memp = *desc->tab;
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800611e:	b15c      	cbz	r4, 8006138 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006124:	07a3      	lsls	r3, r4, #30
 8006126:	d006      	beq.n	8006136 <do_memp_malloc_pool.isra.0+0x26>
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <do_memp_malloc_pool.isra.0+0x30>)
 800612a:	f240 1219 	movw	r2, #281	; 0x119
 800612e:	4905      	ldr	r1, [pc, #20]	; (8006144 <do_memp_malloc_pool.isra.0+0x34>)
 8006130:	4805      	ldr	r0, [pc, #20]	; (8006148 <do_memp_malloc_pool.isra.0+0x38>)
 8006132:	f005 fa59 	bl	800b5e8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006136:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006138:	f004 fd26 	bl	800ab88 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800613c:	4620      	mov	r0, r4
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	0800dc1d 	.word	0x0800dc1d
 8006144:	0800dc4d 	.word	0x0800dc4d
 8006148:	0800c5ae 	.word	0x0800c5ae

0800614c <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800614c:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800614e:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8006150:	4605      	mov	r5, r0
 8006152:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006154:	d006      	beq.n	8006164 <do_memp_free_pool.isra.1+0x18>
 8006156:	4b08      	ldr	r3, [pc, #32]	; (8006178 <do_memp_free_pool.isra.1+0x2c>)
 8006158:	f240 126d 	movw	r2, #365	; 0x16d
 800615c:	4907      	ldr	r1, [pc, #28]	; (800617c <do_memp_free_pool.isra.1+0x30>)
 800615e:	4808      	ldr	r0, [pc, #32]	; (8006180 <do_memp_free_pool.isra.1+0x34>)
 8006160:	f005 fa42 	bl	800b5e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8006164:	f004 fd04 	bl	800ab70 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800616e:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8006174:	f004 bd08 	b.w	800ab88 <sys_arch_unprotect>
 8006178:	0800dc1d 	.word	0x0800dc1d
 800617c:	0800dbfd 	.word	0x0800dbfd
 8006180:	0800c5ae 	.word	0x0800c5ae

08006184 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006184:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8006186:	2200      	movs	r2, #0
 8006188:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800618a:	3303      	adds	r3, #3
{
 800618c:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800618e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006192:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8006194:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006196:	42a2      	cmp	r2, r4
 8006198:	db00      	blt.n	800619c <memp_init_pool+0x18>
}
 800619a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800619c:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800619e:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80061a0:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80061a2:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80061a4:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80061a6:	442b      	add	r3, r5
 80061a8:	e7f5      	b.n	8006196 <memp_init_pool+0x12>
	...

080061ac <memp_init>:
{
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 80061b0:	4d04      	ldr	r5, [pc, #16]	; (80061c4 <memp_init+0x18>)
 80061b2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80061b6:	3401      	adds	r4, #1
 80061b8:	f7ff ffe4 	bl	8006184 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80061bc:	2c0d      	cmp	r4, #13
 80061be:	d1f8      	bne.n	80061b2 <memp_init+0x6>
}
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	0800dd44 	.word	0x0800dd44

080061c8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80061c8:	280c      	cmp	r0, #12
{
 80061ca:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80061cc:	d807      	bhi.n	80061de <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80061ce:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <memp_malloc+0x28>)
 80061d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80061d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80061d8:	3008      	adds	r0, #8
 80061da:	f7ff bf99 	b.w	8006110 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <memp_malloc+0x2c>)
 80061e0:	f240 1257 	movw	r2, #343	; 0x157
 80061e4:	4904      	ldr	r1, [pc, #16]	; (80061f8 <memp_malloc+0x30>)
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <memp_malloc+0x34>)
 80061e8:	f005 f9fe 	bl	800b5e8 <iprintf>
}
 80061ec:	2000      	movs	r0, #0
 80061ee:	bd08      	pop	{r3, pc}
 80061f0:	0800dd44 	.word	0x0800dd44
 80061f4:	0800dc1d 	.word	0x0800dc1d
 80061f8:	0800dd27 	.word	0x0800dd27
 80061fc:	0800c5ae 	.word	0x0800c5ae

08006200 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006200:	280c      	cmp	r0, #12
 8006202:	d906      	bls.n	8006212 <memp_free+0x12>
 8006204:	4b07      	ldr	r3, [pc, #28]	; (8006224 <memp_free+0x24>)
 8006206:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800620a:	4907      	ldr	r1, [pc, #28]	; (8006228 <memp_free+0x28>)
 800620c:	4807      	ldr	r0, [pc, #28]	; (800622c <memp_free+0x2c>)
 800620e:	f005 b9eb 	b.w	800b5e8 <iprintf>

  if (mem == NULL) {
 8006212:	b129      	cbz	r1, 8006220 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <memp_free+0x30>)
 8006216:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800621a:	3008      	adds	r0, #8
 800621c:	f7ff bf96 	b.w	800614c <do_memp_free_pool.isra.1>
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	0800dc1d 	.word	0x0800dc1d
 8006228:	0800dd0c 	.word	0x0800dd0c
 800622c:	0800c5ae 	.word	0x0800c5ae
 8006230:	0800dd44 	.word	0x0800dd44

08006234 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8006234:	f06f 000b 	mvn.w	r0, #11
 8006238:	4770      	bx	lr
	...

0800623c <netif_issue_reports>:
{
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006240:	4604      	mov	r4, r0
 8006242:	b930      	cbnz	r0, 8006252 <netif_issue_reports+0x16>
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <netif_issue_reports+0x3c>)
 8006246:	f240 326d 	movw	r2, #877	; 0x36d
 800624a:	490c      	ldr	r1, [pc, #48]	; (800627c <netif_issue_reports+0x40>)
 800624c:	480c      	ldr	r0, [pc, #48]	; (8006280 <netif_issue_reports+0x44>)
 800624e:	f005 f9cb 	bl	800b5e8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006252:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8006256:	f003 0205 	and.w	r2, r3, #5
 800625a:	2a05      	cmp	r2, #5
 800625c:	d10b      	bne.n	8006276 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800625e:	07ea      	lsls	r2, r5, #31
 8006260:	d509      	bpl.n	8006276 <netif_issue_reports+0x3a>
 8006262:	6862      	ldr	r2, [r4, #4]
 8006264:	b13a      	cbz	r2, 8006276 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006266:	071b      	lsls	r3, r3, #28
 8006268:	d505      	bpl.n	8006276 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800626a:	1d21      	adds	r1, r4, #4
 800626c:	4620      	mov	r0, r4
}
 800626e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8006272:	f7fe bca3 	b.w	8004bbc <etharp_request>
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	0800de05 	.word	0x0800de05
 800627c:	0800de36 	.word	0x0800de36
 8006280:	0800c5ae 	.word	0x0800c5ae

08006284 <netif_do_set_ipaddr>:
{
 8006284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006286:	4606      	mov	r6, r0
 8006288:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800628a:	460f      	mov	r7, r1
 800628c:	b931      	cbnz	r1, 800629c <netif_do_set_ipaddr+0x18>
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <netif_do_set_ipaddr+0x60>)
 8006290:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006294:	4914      	ldr	r1, [pc, #80]	; (80062e8 <netif_do_set_ipaddr+0x64>)
 8006296:	4815      	ldr	r0, [pc, #84]	; (80062ec <netif_do_set_ipaddr+0x68>)
 8006298:	f005 f9a6 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800629c:	b934      	cbnz	r4, 80062ac <netif_do_set_ipaddr+0x28>
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <netif_do_set_ipaddr+0x60>)
 80062a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80062a4:	4910      	ldr	r1, [pc, #64]	; (80062e8 <netif_do_set_ipaddr+0x64>)
 80062a6:	4811      	ldr	r0, [pc, #68]	; (80062ec <netif_do_set_ipaddr+0x68>)
 80062a8:	f005 f99e 	bl	800b5e8 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80062ac:	6873      	ldr	r3, [r6, #4]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d014      	beq.n	80062de <netif_do_set_ipaddr+0x5a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80062b4:	ad02      	add	r5, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80062b6:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80062b8:	4620      	mov	r0, r4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80062ba:	f845 2d04 	str.w	r2, [r5, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80062be:	4629      	mov	r1, r5
 80062c0:	f001 f882 	bl	80073c8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80062c4:	4629      	mov	r1, r5
 80062c6:	4620      	mov	r0, r4
 80062c8:	f004 fb36 	bl	800a938 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80062cc:	683b      	ldr	r3, [r7, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80062ce:	4630      	mov	r0, r6
 80062d0:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80062d2:	6073      	str	r3, [r6, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80062d4:	f7ff ffb2 	bl	800623c <netif_issue_reports>
    return 1; /* address changed */
 80062d8:	2001      	movs	r0, #1
}
 80062da:	b003      	add	sp, #12
 80062dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 80062de:	2000      	movs	r0, #0
 80062e0:	e7fb      	b.n	80062da <netif_do_set_ipaddr+0x56>
 80062e2:	bf00      	nop
 80062e4:	0800de05 	.word	0x0800de05
 80062e8:	0800ddf5 	.word	0x0800ddf5
 80062ec:	0800c5ae 	.word	0x0800c5ae

080062f0 <netif_init>:
{
 80062f0:	4770      	bx	lr
	...

080062f4 <netif_set_addr>:
{
 80062f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80062f6:	4d14      	ldr	r5, [pc, #80]	; (8006348 <netif_set_addr+0x54>)
{
 80062f8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80062fa:	2900      	cmp	r1, #0
 80062fc:	bf14      	ite	ne
 80062fe:	460e      	movne	r6, r1
 8006300:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8006302:	2a00      	cmp	r2, #0
 8006304:	bf14      	ite	ne
 8006306:	4617      	movne	r7, r2
 8006308:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf18      	it	ne
 800630e:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	b193      	cbz	r3, 800633a <netif_set_addr+0x46>
 8006314:	2300      	movs	r3, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	68a1      	ldr	r1, [r4, #8]
 800631a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800631c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800631e:	bf18      	it	ne
 8006320:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006322:	682a      	ldr	r2, [r5, #0]
 8006324:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006326:	bf18      	it	ne
 8006328:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800632a:	b923      	cbnz	r3, 8006336 <netif_set_addr+0x42>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800632c:	aa01      	add	r2, sp, #4
 800632e:	4631      	mov	r1, r6
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff ffa7 	bl	8006284 <netif_do_set_ipaddr>
}
 8006336:	b003      	add	sp, #12
 8006338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800633a:	aa01      	add	r2, sp, #4
 800633c:	4631      	mov	r1, r6
 800633e:	f7ff ffa1 	bl	8006284 <netif_do_set_ipaddr>
  remove = ip4_addr_isany(ipaddr);
 8006342:	2301      	movs	r3, #1
 8006344:	e7e7      	b.n	8006316 <netif_set_addr+0x22>
 8006346:	bf00      	nop
 8006348:	0800d800 	.word	0x0800d800

0800634c <netif_add>:
{
 800634c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	469c      	mov	ip, r3
 8006352:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006354:	4604      	mov	r4, r0
 8006356:	b948      	cbnz	r0, 800636c <netif_add+0x20>
 8006358:	4b3d      	ldr	r3, [pc, #244]	; (8006450 <netif_add+0x104>)
 800635a:	f240 1227 	movw	r2, #295	; 0x127
 800635e:	493d      	ldr	r1, [pc, #244]	; (8006454 <netif_add+0x108>)
 8006360:	483d      	ldr	r0, [pc, #244]	; (8006458 <netif_add+0x10c>)
 8006362:	f005 f941 	bl	800b5e8 <iprintf>
}
 8006366:	4620      	mov	r0, r4
 8006368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800636c:	b947      	cbnz	r7, 8006380 <netif_add+0x34>
 800636e:	4b38      	ldr	r3, [pc, #224]	; (8006450 <netif_add+0x104>)
 8006370:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006374:	4939      	ldr	r1, [pc, #228]	; (800645c <netif_add+0x110>)
 8006376:	463c      	mov	r4, r7
 8006378:	4837      	ldr	r0, [pc, #220]	; (8006458 <netif_add+0x10c>)
 800637a:	f005 f935 	bl	800b5e8 <iprintf>
 800637e:	e7f2      	b.n	8006366 <netif_add+0x1a>
  netif->state = state;
 8006380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006382:	2500      	movs	r5, #0
  netif->output = netif_null_output_ip4;
 8006384:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 800646c <netif_add+0x120>
  netif->num = netif_num;
 8006388:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8006470 <netif_add+0x124>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800638c:	4e34      	ldr	r6, [pc, #208]	; (8006460 <netif_add+0x114>)
  netif->output = netif_null_output_ip4;
 800638e:	f8c0 e014 	str.w	lr, [r0, #20]
  netif->state = state;
 8006392:	61c3      	str	r3, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006394:	42aa      	cmp	r2, r5
 8006396:	bf08      	it	eq
 8006398:	4632      	moveq	r2, r6
  netif->num = netif_num;
 800639a:	f898 e000 	ldrb.w	lr, [r8]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800639e:	42a9      	cmp	r1, r5
 80063a0:	bf08      	it	eq
 80063a2:	4631      	moveq	r1, r6
  netif->input = input;
 80063a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 80063a6:	f880 e02c 	strb.w	lr, [r0, #44]	; 0x2c
  netif->input = input;
 80063aa:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80063ac:	45ac      	cmp	ip, r5
 80063ae:	bf14      	ite	ne
 80063b0:	4663      	movne	r3, ip
 80063b2:	4633      	moveq	r3, r6
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80063b4:	6045      	str	r5, [r0, #4]
 80063b6:	4646      	mov	r6, r8
  ip_addr_set_zero_ip4(&netif->netmask);
 80063b8:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80063ba:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 80063bc:	8405      	strh	r5, [r0, #32]
  netif->flags = 0;
 80063be:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
  netif_set_addr(netif, ipaddr, netmask, gw);
 80063c2:	f7ff ff97 	bl	80062f4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80063c6:	4620      	mov	r0, r4
 80063c8:	47b8      	blx	r7
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d13e      	bne.n	800644c <netif_add+0x100>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80063ce:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006474 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80063d2:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8006450 <netif_add+0x104>
 80063d6:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 80063d8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      num_netifs = 0;
 80063dc:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80063de:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 80063e2:	2bff      	cmp	r3, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80063e4:	f8df b070 	ldr.w	fp, [pc, #112]	; 8006458 <netif_add+0x10c>
        netif->num = 0;
 80063e8:	bf04      	itt	eq
 80063ea:	2300      	moveq	r3, #0
 80063ec:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80063f0:	b955      	cbnz	r5, 8006408 <netif_add+0xbc>
  if (netif->num == 254) {
 80063f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80063f6:	2bfe      	cmp	r3, #254	; 0xfe
 80063f8:	d125      	bne.n	8006446 <netif_add+0xfa>
    netif_num = 0;
 80063fa:	7035      	strb	r5, [r6, #0]
  netif->next = netif_list;
 80063fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006400:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8006402:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 8006406:	e7ae      	b.n	8006366 <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006408:	42a5      	cmp	r5, r4
 800640a:	d106      	bne.n	800641a <netif_add+0xce>
 800640c:	4653      	mov	r3, sl
 800640e:	f240 128b 	movw	r2, #395	; 0x18b
 8006412:	4914      	ldr	r1, [pc, #80]	; (8006464 <netif_add+0x118>)
 8006414:	4658      	mov	r0, fp
 8006416:	f005 f8e7 	bl	800b5e8 <iprintf>
        num_netifs++;
 800641a:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800641c:	2fff      	cmp	r7, #255	; 0xff
 800641e:	dd06      	ble.n	800642e <netif_add+0xe2>
 8006420:	4653      	mov	r3, sl
 8006422:	f240 128d 	movw	r2, #397	; 0x18d
 8006426:	4910      	ldr	r1, [pc, #64]	; (8006468 <netif_add+0x11c>)
 8006428:	4658      	mov	r0, fp
 800642a:	f005 f8dd 	bl	800b5e8 <iprintf>
        if (netif2->num == netif->num) {
 800642e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8006432:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006436:	4293      	cmp	r3, r2
 8006438:	d103      	bne.n	8006442 <netif_add+0xf6>
          netif->num++;
 800643a:	3301      	adds	r3, #1
 800643c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006440:	e7ca      	b.n	80063d8 <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006442:	682d      	ldr	r5, [r5, #0]
 8006444:	e7d4      	b.n	80063f0 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 8006446:	3301      	adds	r3, #1
 8006448:	7033      	strb	r3, [r6, #0]
 800644a:	e7d7      	b.n	80063fc <netif_add+0xb0>
    return NULL;
 800644c:	462c      	mov	r4, r5
 800644e:	e78a      	b.n	8006366 <netif_add+0x1a>
 8006450:	0800de05 	.word	0x0800de05
 8006454:	0800dd78 	.word	0x0800dd78
 8006458:	0800c5ae 	.word	0x0800c5ae
 800645c:	0800dd91 	.word	0x0800dd91
 8006460:	0800d800 	.word	0x0800d800
 8006464:	0800ddb3 	.word	0x0800ddb3
 8006468:	0800ddc7 	.word	0x0800ddc7
 800646c:	08006235 	.word	0x08006235
 8006470:	2002436c 	.word	0x2002436c
 8006474:	20027d1c 	.word	0x20027d1c

08006478 <netif_set_default>:
  netif_default = netif;
 8006478:	4b01      	ldr	r3, [pc, #4]	; (8006480 <netif_set_default+0x8>)
 800647a:	6018      	str	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20027d20 	.word	0x20027d20

08006484 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006484:	b930      	cbnz	r0, 8006494 <netif_set_up+0x10>
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <netif_set_up+0x28>)
 8006488:	f44f 7254 	mov.w	r2, #848	; 0x350
 800648c:	4908      	ldr	r1, [pc, #32]	; (80064b0 <netif_set_up+0x2c>)
 800648e:	4809      	ldr	r0, [pc, #36]	; (80064b4 <netif_set_up+0x30>)
 8006490:	f005 b8aa 	b.w	800b5e8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006494:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006498:	07d9      	lsls	r1, r3, #31
 800649a:	d406      	bmi.n	80064aa <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800649c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80064a0:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 80064a2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80064a6:	f7ff bec9 	b.w	800623c <netif_issue_reports>
 80064aa:	4770      	bx	lr
 80064ac:	0800de05 	.word	0x0800de05
 80064b0:	0800de77 	.word	0x0800de77
 80064b4:	0800c5ae 	.word	0x0800c5ae

080064b8 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80064b8:	b930      	cbnz	r0, 80064c8 <netif_set_down+0x10>
 80064ba:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <netif_set_down+0x2c>)
 80064bc:	f240 329b 	movw	r2, #923	; 0x39b
 80064c0:	4909      	ldr	r1, [pc, #36]	; (80064e8 <netif_set_down+0x30>)
 80064c2:	480a      	ldr	r0, [pc, #40]	; (80064ec <netif_set_down+0x34>)
 80064c4:	f005 b890 	b.w	800b5e8 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 80064c8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80064cc:	07d9      	lsls	r1, r3, #31
 80064ce:	d507      	bpl.n	80064e0 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80064d0:	f023 0101 	bic.w	r1, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80064d4:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80064d6:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80064da:	d501      	bpl.n	80064e0 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 80064dc:	f7fe babc 	b.w	8004a58 <etharp_cleanup_netif>
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	0800de05 	.word	0x0800de05
 80064e8:	0800de59 	.word	0x0800de59
 80064ec:	0800c5ae 	.word	0x0800c5ae

080064f0 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80064f0:	b150      	cbz	r0, 8006508 <netif_get_by_index+0x18>
    NETIF_FOREACH(netif) {
 80064f2:	4b06      	ldr	r3, [pc, #24]	; (800650c <netif_get_by_index+0x1c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	b12b      	cbz	r3, 8006504 <netif_get_by_index+0x14>
      if (idx == netif_get_index(netif)) {
 80064f8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80064fc:	3201      	adds	r2, #1
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	4290      	cmp	r0, r2
 8006502:	d1f7      	bne.n	80064f4 <netif_get_by_index+0x4>
      }
    }
  }

  return NULL;
}
 8006504:	4618      	mov	r0, r3
 8006506:	4770      	bx	lr
  return NULL;
 8006508:	4603      	mov	r3, r0
 800650a:	e7fb      	b.n	8006504 <netif_get_by_index+0x14>
 800650c:	20027d1c 	.word	0x20027d1c

08006510 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8006510:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006512:	f004 fb2d 	bl	800ab70 <sys_arch_protect>
 8006516:	4b08      	ldr	r3, [pc, #32]	; (8006538 <pbuf_free_ooseq_callback+0x28>)
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	f004 fb34 	bl	800ab88 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <pbuf_free_ooseq_callback+0x2c>)
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	b900      	cbnz	r0, 8006528 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8006526:	bd08      	pop	{r3, pc}
    if (pcb->ooseq != NULL) {
 8006528:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800652a:	b11b      	cbz	r3, 8006534 <pbuf_free_ooseq_callback+0x24>
}
 800652c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8006530:	f000 bdf0 	b.w	8007114 <tcp_free_ooseq>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006534:	68c0      	ldr	r0, [r0, #12]
 8006536:	e7f5      	b.n	8006524 <pbuf_free_ooseq_callback+0x14>
 8006538:	20027d24 	.word	0x20027d24
 800653c:	20027d2c 	.word	0x20027d2c

08006540 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006540:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006542:	b968      	cbnz	r0, 8006560 <pbuf_add_header_impl+0x20>
 8006544:	4b14      	ldr	r3, [pc, #80]	; (8006598 <pbuf_add_header_impl+0x58>)
 8006546:	f240 12df 	movw	r2, #479	; 0x1df
 800654a:	4914      	ldr	r1, [pc, #80]	; (800659c <pbuf_add_header_impl+0x5c>)
 800654c:	4814      	ldr	r0, [pc, #80]	; (80065a0 <pbuf_add_header_impl+0x60>)
 800654e:	f005 f84b 	bl	800b5e8 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8006552:	2001      	movs	r0, #1
 8006554:	bd38      	pop	{r3, r4, r5, pc}
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006556:	2a00      	cmp	r2, #0
 8006558:	d0fb      	beq.n	8006552 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800655a:	6842      	ldr	r2, [r0, #4]
 800655c:	1a51      	subs	r1, r2, r1
 800655e:	e013      	b.n	8006588 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006560:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006564:	d2f5      	bcs.n	8006552 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8006566:	b1a1      	cbz	r1, 8006592 <pbuf_add_header_impl+0x52>
  increment_magnitude = (u16_t)header_size_increment;
 8006568:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800656a:	8903      	ldrh	r3, [r0, #8]
 800656c:	4423      	add	r3, r4
 800656e:	b29b      	uxth	r3, r3
 8006570:	429c      	cmp	r4, r3
 8006572:	d8ee      	bhi.n	8006552 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006574:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8006578:	2d00      	cmp	r5, #0
 800657a:	daec      	bge.n	8006556 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800657c:	6842      	ldr	r2, [r0, #4]
 800657e:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006580:	f100 0210 	add.w	r2, r0, #16
 8006584:	4291      	cmp	r1, r2
 8006586:	d3e4      	bcc.n	8006552 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8006588:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800658a:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800658c:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800658e:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006590:	8144      	strh	r4, [r0, #10]


  return 0;
 8006592:	2000      	movs	r0, #0
 8006594:	bd38      	pop	{r3, r4, r5, pc}
 8006596:	bf00      	nop
 8006598:	0800de93 	.word	0x0800de93
 800659c:	0800e0a5 	.word	0x0800e0a5
 80065a0:	0800c5ae 	.word	0x0800c5ae

080065a4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80065a4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80065a8:	2b01      	cmp	r3, #1
{
 80065aa:	b570      	push	{r4, r5, r6, lr}
 80065ac:	4606      	mov	r6, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80065b2:	d006      	beq.n	80065c2 <pbuf_alloc_reference+0x1e>
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <pbuf_alloc_reference+0x3c>)
 80065b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80065ba:	490a      	ldr	r1, [pc, #40]	; (80065e4 <pbuf_alloc_reference+0x40>)
 80065bc:	480a      	ldr	r0, [pc, #40]	; (80065e8 <pbuf_alloc_reference+0x44>)
 80065be:	f005 f813 	bl	800b5e8 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80065c2:	200b      	movs	r0, #11
 80065c4:	f7ff fe00 	bl	80061c8 <memp_malloc>
  if (p == NULL) {
 80065c8:	b148      	cbz	r0, 80065de <pbuf_alloc_reference+0x3a>
  p->next = NULL;
 80065ca:	2300      	movs	r3, #0
  p->ref = 1;
 80065cc:	2201      	movs	r2, #1
  p->tot_len = tot_len;
 80065ce:	8105      	strh	r5, [r0, #8]
  p->len = len;
 80065d0:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 80065d2:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 80065d4:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80065d6:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80065d8:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 80065da:	e880 0048 	stmia.w	r0, {r3, r6}
}
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	0800de93 	.word	0x0800de93
 80065e4:	0800dede 	.word	0x0800dede
 80065e8:	0800c5ae 	.word	0x0800c5ae

080065ec <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80065ec:	3003      	adds	r0, #3
 80065ee:	f020 0003 	bic.w	r0, r0, #3
{
 80065f2:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80065f4:	180e      	adds	r6, r1, r0
 80065f6:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 80065fa:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80065fc:	42ae      	cmp	r6, r5
 80065fe:	d80e      	bhi.n	800661e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8006600:	b104      	cbz	r4, 8006604 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006602:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006604:	4618      	mov	r0, r3
  p->next = NULL;
 8006606:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
 8006608:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800660a:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 800660c:	8101      	strh	r1, [r0, #8]
  p->flags = flags;
 800660e:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8006610:	2201      	movs	r2, #1
  p->len = len;
 8006612:	8141      	strh	r1, [r0, #10]
  p->ref = 1;
 8006614:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006616:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 8006618:	e880 0018 	stmia.w	r0, {r3, r4}
  return &p->pbuf;
 800661c:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800661e:	2000      	movs	r0, #0
}
 8006620:	bd70      	pop	{r4, r5, r6, pc}

08006622 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006622:	2200      	movs	r2, #0
 8006624:	f7ff bf8c 	b.w	8006540 <pbuf_add_header_impl>

08006628 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006628:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800662a:	b990      	cbnz	r0, 8006652 <pbuf_remove_header+0x2a>
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <pbuf_remove_header+0x48>)
 800662e:	f240 224b 	movw	r2, #587	; 0x24b
 8006632:	4910      	ldr	r1, [pc, #64]	; (8006674 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006634:	4810      	ldr	r0, [pc, #64]	; (8006678 <pbuf_remove_header+0x50>)
 8006636:	f004 ffd7 	bl	800b5e8 <iprintf>
    return 1;
 800663a:	2001      	movs	r0, #1
 800663c:	bd10      	pop	{r4, pc}
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800663e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006640:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8006642:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006644:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006646:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006648:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800664e:	2000      	movs	r0, #0
 8006650:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006652:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006656:	d2f0      	bcs.n	800663a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8006658:	2900      	cmp	r1, #0
 800665a:	d0f8      	beq.n	800664e <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800665c:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800665e:	8943      	ldrh	r3, [r0, #10]
 8006660:	429a      	cmp	r2, r3
 8006662:	d9ec      	bls.n	800663e <pbuf_remove_header+0x16>
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <pbuf_remove_header+0x48>)
 8006666:	f240 2255 	movw	r2, #597	; 0x255
 800666a:	4904      	ldr	r1, [pc, #16]	; (800667c <pbuf_remove_header+0x54>)
 800666c:	e7e2      	b.n	8006634 <pbuf_remove_header+0xc>
 800666e:	bf00      	nop
 8006670:	0800de93 	.word	0x0800de93
 8006674:	0800e0a5 	.word	0x0800e0a5
 8006678:	0800c5ae 	.word	0x0800c5ae
 800667c:	0800e0f5 	.word	0x0800e0f5

08006680 <pbuf_header_force>:
}

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8006680:	1e0b      	subs	r3, r1, #0
 8006682:	da02      	bge.n	800668a <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006684:	4259      	negs	r1, r3
 8006686:	f7ff bfcf 	b.w	8006628 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800668a:	2201      	movs	r2, #1
 800668c:	f7ff bf58 	b.w	8006540 <pbuf_add_header_impl>

08006690 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006694:	4604      	mov	r4, r0
 8006696:	b378      	cbz	r0, 80066f8 <pbuf_free+0x68>
 8006698:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800669a:	4f2b      	ldr	r7, [pc, #172]	; (8006748 <pbuf_free+0xb8>)
 800669c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800675c <pbuf_free+0xcc>
 80066a0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006754 <pbuf_free+0xc4>
 80066a4:	fa5f f986 	uxtb.w	r9, r6
  while (p != NULL) {
 80066a8:	b374      	cbz	r4, 8006708 <pbuf_free+0x78>
    SYS_ARCH_PROTECT(old_level);
 80066aa:	f004 fa61 	bl	800ab70 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80066ae:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 80066b0:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80066b2:	b933      	cbnz	r3, 80066c2 <pbuf_free+0x32>
 80066b4:	463b      	mov	r3, r7
 80066b6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80066ba:	4651      	mov	r1, sl
 80066bc:	4640      	mov	r0, r8
 80066be:	f004 ff93 	bl	800b5e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80066c2:	7ba5      	ldrb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80066c4:	4658      	mov	r0, fp
    ref = --(p->ref);
 80066c6:	3d01      	subs	r5, #1
 80066c8:	b2ed      	uxtb	r5, r5
 80066ca:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80066cc:	f004 fa5c 	bl	800ab88 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80066d0:	b9d5      	cbnz	r5, 8006708 <pbuf_free+0x78>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80066d2:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80066d4:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80066d6:	079b      	lsls	r3, r3, #30
 80066d8:	d519      	bpl.n	800670e <pbuf_free+0x7e>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	b933      	cbnz	r3, 80066ec <pbuf_free+0x5c>
 80066de:	463b      	mov	r3, r7
 80066e0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80066e4:	4919      	ldr	r1, [pc, #100]	; (800674c <pbuf_free+0xbc>)
 80066e6:	4640      	mov	r0, r8
 80066e8:	f004 ff7e 	bl	800b5e8 <iprintf>
        pc->custom_free_function(p);
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4798      	blx	r3
 80066f2:	3601      	adds	r6, #1
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 80066f4:	462c      	mov	r4, r5
 80066f6:	e7d5      	b.n	80066a4 <pbuf_free+0x14>
    return 0;
 80066f8:	46a1      	mov	r9, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <pbuf_free+0xb8>)
 80066fc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006700:	4913      	ldr	r1, [pc, #76]	; (8006750 <pbuf_free+0xc0>)
 8006702:	4814      	ldr	r0, [pc, #80]	; (8006754 <pbuf_free+0xc4>)
 8006704:	f004 ff70 	bl	800b5e8 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006708:	4648      	mov	r0, r9
 800670a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      alloc_src = pbuf_get_allocsrc(p);
 800670e:	7b23      	ldrb	r3, [r4, #12]
 8006710:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006714:	2b02      	cmp	r3, #2
 8006716:	d104      	bne.n	8006722 <pbuf_free+0x92>
          memp_free(MEMP_PBUF_POOL, p);
 8006718:	4621      	mov	r1, r4
 800671a:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800671c:	f7ff fd70 	bl	8006200 <memp_free>
 8006720:	e7e7      	b.n	80066f2 <pbuf_free+0x62>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006722:	2b01      	cmp	r3, #1
 8006724:	d102      	bne.n	800672c <pbuf_free+0x9c>
          memp_free(MEMP_PBUF, p);
 8006726:	4621      	mov	r1, r4
 8006728:	200b      	movs	r0, #11
 800672a:	e7f7      	b.n	800671c <pbuf_free+0x8c>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800672c:	b91b      	cbnz	r3, 8006736 <pbuf_free+0xa6>
          mem_free(p);
 800672e:	4620      	mov	r0, r4
 8006730:	f7ff fab8 	bl	8005ca4 <mem_free>
 8006734:	e7dd      	b.n	80066f2 <pbuf_free+0x62>
          LWIP_ASSERT("invalid pbuf type", 0);
 8006736:	463b      	mov	r3, r7
 8006738:	f240 320f 	movw	r2, #783	; 0x30f
 800673c:	4906      	ldr	r1, [pc, #24]	; (8006758 <pbuf_free+0xc8>)
 800673e:	4640      	mov	r0, r8
 8006740:	f004 ff52 	bl	800b5e8 <iprintf>
 8006744:	e7d5      	b.n	80066f2 <pbuf_free+0x62>
 8006746:	bf00      	nop
 8006748:	0800de93 	.word	0x0800de93
 800674c:	0800e064 	.word	0x0800e064
 8006750:	0800e0a5 	.word	0x0800e0a5
 8006754:	0800c5ae 	.word	0x0800c5ae
 8006758:	0800e085 	.word	0x0800e085
 800675c:	0800e04e 	.word	0x0800e04e

08006760 <pbuf_alloc>:
  switch (type) {
 8006760:	2a41      	cmp	r2, #65	; 0x41
{
 8006762:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006766:	4607      	mov	r7, r0
 8006768:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 800676a:	b285      	uxth	r5, r0
  switch (type) {
 800676c:	d034      	beq.n	80067d8 <pbuf_alloc+0x78>
 800676e:	d809      	bhi.n	8006784 <pbuf_alloc+0x24>
 8006770:	2a01      	cmp	r2, #1
 8006772:	d031      	beq.n	80067d8 <pbuf_alloc+0x78>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006774:	4b40      	ldr	r3, [pc, #256]	; (8006878 <pbuf_alloc+0x118>)
 8006776:	f240 1227 	movw	r2, #295	; 0x127
 800677a:	4940      	ldr	r1, [pc, #256]	; (800687c <pbuf_alloc+0x11c>)
 800677c:	4840      	ldr	r0, [pc, #256]	; (8006880 <pbuf_alloc+0x120>)
 800677e:	f004 ff33 	bl	800b5e8 <iprintf>
 8006782:	e04e      	b.n	8006822 <pbuf_alloc+0xc2>
  switch (type) {
 8006784:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8006788:	d02c      	beq.n	80067e4 <pbuf_alloc+0x84>
 800678a:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800678e:	d1f1      	bne.n	8006774 <pbuf_alloc+0x14>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006790:	3503      	adds	r5, #3
 8006792:	1ccb      	adds	r3, r1, #3
 8006794:	f025 0503 	bic.w	r5, r5, #3
 8006798:	f023 0303 	bic.w	r3, r3, #3
 800679c:	441d      	add	r5, r3
 800679e:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80067a0:	f105 0010 	add.w	r0, r5, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80067a4:	429d      	cmp	r5, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80067a6:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80067a8:	d33b      	bcc.n	8006822 <pbuf_alloc+0xc2>
 80067aa:	4283      	cmp	r3, r0
 80067ac:	d839      	bhi.n	8006822 <pbuf_alloc+0xc2>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80067ae:	f7ff fc01 	bl	8005fb4 <mem_malloc>
      if (p == NULL) {
 80067b2:	4604      	mov	r4, r0
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d05a      	beq.n	800686e <pbuf_alloc+0x10e>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80067b8:	4407      	add	r7, r0
  p->type_internal = (u8_t)type;
 80067ba:	2280      	movs	r2, #128	; 0x80
  p->next = NULL;
 80067bc:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 80067be:	8106      	strh	r6, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80067c0:	3713      	adds	r7, #19
  p->type_internal = (u8_t)type;
 80067c2:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 80067c4:	2201      	movs	r2, #1
  p->next = NULL;
 80067c6:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80067c8:	f027 0703 	bic.w	r7, r7, #3
  p->len = len;
 80067cc:	8146      	strh	r6, [r0, #10]
  p->flags = flags;
 80067ce:	7343      	strb	r3, [r0, #13]
  p->payload = payload;
 80067d0:	6047      	str	r7, [r0, #4]
  p->ref = 1;
 80067d2:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80067d4:	73c3      	strb	r3, [r0, #15]
 80067d6:	e04a      	b.n	800686e <pbuf_alloc+0x10e>
      p = pbuf_alloc_reference(NULL, length, type);
 80067d8:	4631      	mov	r1, r6
 80067da:	2000      	movs	r0, #0
}
 80067dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80067e0:	f7ff bee0 	b.w	80065a4 <pbuf_alloc_reference>
  switch (type) {
 80067e4:	f04f 0900 	mov.w	r9, #0
  p->type_internal = (u8_t)type;
 80067e8:	f04f 0882 	mov.w	r8, #130	; 0x82
  switch (type) {
 80067ec:	464c      	mov	r4, r9
  p->next = NULL;
 80067ee:	464f      	mov	r7, r9
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80067f0:	200c      	movs	r0, #12
 80067f2:	f7ff fce9 	bl	80061c8 <memp_malloc>
        if (q == NULL) {
 80067f6:	b9d0      	cbnz	r0, 800682e <pbuf_alloc+0xce>
  queued = pbuf_free_ooseq_pending;
 80067f8:	4e22      	ldr	r6, [pc, #136]	; (8006884 <pbuf_alloc+0x124>)
  SYS_ARCH_PROTECT(old_level);
 80067fa:	f004 f9b9 	bl	800ab70 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 80067fe:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8006800:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8006802:	7033      	strb	r3, [r6, #0]
  queued = pbuf_free_ooseq_pending;
 8006804:	b2ed      	uxtb	r5, r5
  SYS_ARCH_UNPROTECT(old_level);
 8006806:	f004 f9bf 	bl	800ab88 <sys_arch_unprotect>
  if (!queued) {
 800680a:	b94d      	cbnz	r5, 8006820 <pbuf_alloc+0xc0>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800680c:	4629      	mov	r1, r5
 800680e:	481e      	ldr	r0, [pc, #120]	; (8006888 <pbuf_alloc+0x128>)
 8006810:	f7fd fc5a 	bl	80040c8 <tcpip_try_callback>
 8006814:	b120      	cbz	r0, 8006820 <pbuf_alloc+0xc0>
 8006816:	f004 f9ab 	bl	800ab70 <sys_arch_protect>
 800681a:	7035      	strb	r5, [r6, #0]
 800681c:	f004 f9b4 	bl	800ab88 <sys_arch_unprotect>
          if (p) {
 8006820:	b90c      	cbnz	r4, 8006826 <pbuf_alloc+0xc6>
      return NULL;
 8006822:	2400      	movs	r4, #0
 8006824:	e023      	b.n	800686e <pbuf_alloc+0x10e>
            pbuf_free(p);
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff ff32 	bl	8006690 <pbuf_free>
 800682c:	e7f9      	b.n	8006822 <pbuf_alloc+0xc2>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800682e:	1ceb      	adds	r3, r5, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006830:	4405      	add	r5, r0
  p->ref = 1;
 8006832:	2201      	movs	r2, #1
  p->next = NULL;
 8006834:	6007      	str	r7, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006836:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800683a:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 800683c:	8106      	strh	r6, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800683e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006842:	f025 0503 	bic.w	r5, r5, #3
  p->type_internal = (u8_t)type;
 8006846:	f880 800c 	strb.w	r8, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800684a:	b29b      	uxth	r3, r3
  p->payload = payload;
 800684c:	6045      	str	r5, [r0, #4]
  p->flags = flags;
 800684e:	7347      	strb	r7, [r0, #13]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006850:	42b3      	cmp	r3, r6
  p->ref = 1;
 8006852:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006854:	73c7      	strb	r7, [r0, #15]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006856:	bf28      	it	cs
 8006858:	4633      	movcs	r3, r6
  p->len = len;
 800685a:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800685c:	b154      	cbz	r4, 8006874 <pbuf_alloc+0x114>
          last->next = q;
 800685e:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 8006862:	1af3      	subs	r3, r6, r3
        offset = 0;
 8006864:	2500      	movs	r5, #0
 8006866:	4681      	mov	r9, r0
        rem_len = (u16_t)(rem_len - qlen);
 8006868:	b29e      	uxth	r6, r3
      } while (rem_len > 0);
 800686a:	2e00      	cmp	r6, #0
 800686c:	d1c0      	bne.n	80067f0 <pbuf_alloc+0x90>
}
 800686e:	4620      	mov	r0, r4
 8006870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006874:	4604      	mov	r4, r0
 8006876:	e7f4      	b.n	8006862 <pbuf_alloc+0x102>
 8006878:	0800de93 	.word	0x0800de93
 800687c:	0800dec3 	.word	0x0800dec3
 8006880:	0800c5ae 	.word	0x0800c5ae
 8006884:	20027d24 	.word	0x20027d24
 8006888:	08006511 	.word	0x08006511

0800688c <pbuf_realloc>:
{
 800688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006890:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006892:	4604      	mov	r4, r0
 8006894:	b930      	cbnz	r0, 80068a4 <pbuf_realloc+0x18>
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <pbuf_realloc+0x9c>)
 8006898:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800689c:	4923      	ldr	r1, [pc, #140]	; (800692c <pbuf_realloc+0xa0>)
 800689e:	4824      	ldr	r0, [pc, #144]	; (8006930 <pbuf_realloc+0xa4>)
 80068a0:	f004 fea2 	bl	800b5e8 <iprintf>
  if (new_len >= p->tot_len) {
 80068a4:	8923      	ldrh	r3, [r4, #8]
 80068a6:	42ab      	cmp	r3, r5
 80068a8:	d93b      	bls.n	8006922 <pbuf_realloc+0x96>
  shrink = (u16_t)(p->tot_len - new_len);
 80068aa:	1b5b      	subs	r3, r3, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80068ac:	4f1e      	ldr	r7, [pc, #120]	; (8006928 <pbuf_realloc+0x9c>)
 80068ae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006938 <pbuf_realloc+0xac>
  shrink = (u16_t)(p->tot_len - new_len);
 80068b2:	b29e      	uxth	r6, r3
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80068b4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006930 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 80068b8:	8963      	ldrh	r3, [r4, #10]
 80068ba:	429d      	cmp	r5, r3
 80068bc:	d819      	bhi.n	80068f2 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80068be:	7b22      	ldrb	r2, [r4, #12]
 80068c0:	0712      	lsls	r2, r2, #28
 80068c2:	d126      	bne.n	8006912 <pbuf_realloc+0x86>
 80068c4:	429d      	cmp	r5, r3
 80068c6:	d024      	beq.n	8006912 <pbuf_realloc+0x86>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80068c8:	7b63      	ldrb	r3, [r4, #13]
 80068ca:	079b      	lsls	r3, r3, #30
 80068cc:	d421      	bmi.n	8006912 <pbuf_realloc+0x86>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80068ce:	6861      	ldr	r1, [r4, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	1b09      	subs	r1, r1, r4
 80068d4:	4429      	add	r1, r5
 80068d6:	b289      	uxth	r1, r1
 80068d8:	f7ff fabe 	bl	8005e58 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80068dc:	4604      	mov	r4, r0
 80068de:	b9c0      	cbnz	r0, 8006912 <pbuf_realloc+0x86>
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <pbuf_realloc+0x9c>)
 80068e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80068e6:	4913      	ldr	r1, [pc, #76]	; (8006934 <pbuf_realloc+0xa8>)
 80068e8:	4811      	ldr	r0, [pc, #68]	; (8006930 <pbuf_realloc+0xa4>)
 80068ea:	f004 fe7d 	bl	800b5e8 <iprintf>
  q->len = rem_len;
 80068ee:	8164      	strh	r4, [r4, #10]
 80068f0:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 80068f2:	1aed      	subs	r5, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80068f4:	8923      	ldrh	r3, [r4, #8]
 80068f6:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 80068f8:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80068fa:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80068fc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d1da      	bne.n	80068b8 <pbuf_realloc+0x2c>
 8006902:	463b      	mov	r3, r7
 8006904:	f240 12af 	movw	r2, #431	; 0x1af
 8006908:	4641      	mov	r1, r8
 800690a:	4648      	mov	r0, r9
 800690c:	f004 fe6c 	bl	800b5e8 <iprintf>
 8006910:	e7d2      	b.n	80068b8 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8006912:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8006914:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006916:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006918:	b108      	cbz	r0, 800691e <pbuf_realloc+0x92>
    pbuf_free(q->next);
 800691a:	f7ff feb9 	bl	8006690 <pbuf_free>
  q->next = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006926:	bf00      	nop
 8006928:	0800de93 	.word	0x0800de93
 800692c:	0800e097 	.word	0x0800e097
 8006930:	0800c5ae 	.word	0x0800c5ae
 8006934:	0800e0c7 	.word	0x0800e0c7
 8006938:	0800e0af 	.word	0x0800e0af

0800693c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800693c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800693e:	2200      	movs	r2, #0
 8006940:	b290      	uxth	r0, r2
 8006942:	3201      	adds	r2, #1
 8006944:	b903      	cbnz	r3, 8006948 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8006946:	4770      	bx	lr
    p = p->next;
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	e7f9      	b.n	8006940 <pbuf_clen+0x4>

0800694c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800694c:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800694e:	4604      	mov	r4, r0
 8006950:	b188      	cbz	r0, 8006976 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006952:	f004 f90d 	bl	800ab70 <sys_arch_protect>
 8006956:	7ba3      	ldrb	r3, [r4, #14]
 8006958:	3301      	adds	r3, #1
 800695a:	73a3      	strb	r3, [r4, #14]
 800695c:	f004 f914 	bl	800ab88 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006960:	7ba3      	ldrb	r3, [r4, #14]
 8006962:	b943      	cbnz	r3, 8006976 <pbuf_ref+0x2a>
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <pbuf_ref+0x2c>)
 8006966:	f240 3242 	movw	r2, #834	; 0x342
 800696a:	4904      	ldr	r1, [pc, #16]	; (800697c <pbuf_ref+0x30>)
 800696c:	4804      	ldr	r0, [pc, #16]	; (8006980 <pbuf_ref+0x34>)
  }
}
 800696e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006972:	f004 be39 	b.w	800b5e8 <iprintf>
 8006976:	bd10      	pop	{r4, pc}
 8006978:	0800de93 	.word	0x0800de93
 800697c:	0800e0e3 	.word	0x0800e0e3
 8006980:	0800c5ae 	.word	0x0800c5ae

08006984 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006988:	4604      	mov	r4, r0
 800698a:	b100      	cbz	r0, 800698e <pbuf_cat+0xa>
 800698c:	b969      	cbnz	r1, 80069aa <pbuf_cat+0x26>
 800698e:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <pbuf_cat+0x60>)
 8006990:	f240 325a 	movw	r2, #858	; 0x35a
 8006994:	4914      	ldr	r1, [pc, #80]	; (80069e8 <pbuf_cat+0x64>)
 8006996:	4815      	ldr	r0, [pc, #84]	; (80069ec <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800699c:	f004 be24 	b.w	800b5e8 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069a0:	8923      	ldrh	r3, [r4, #8]
 80069a2:	8929      	ldrh	r1, [r5, #8]
 80069a4:	440b      	add	r3, r1
 80069a6:	8123      	strh	r3, [r4, #8]
 80069a8:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d1f7      	bne.n	80069a0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80069b0:	8922      	ldrh	r2, [r4, #8]
 80069b2:	8963      	ldrh	r3, [r4, #10]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d006      	beq.n	80069c6 <pbuf_cat+0x42>
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <pbuf_cat+0x60>)
 80069ba:	f240 3262 	movw	r2, #866	; 0x362
 80069be:	490c      	ldr	r1, [pc, #48]	; (80069f0 <pbuf_cat+0x6c>)
 80069c0:	480a      	ldr	r0, [pc, #40]	; (80069ec <pbuf_cat+0x68>)
 80069c2:	f004 fe11 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	b133      	cbz	r3, 80069d8 <pbuf_cat+0x54>
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <pbuf_cat+0x60>)
 80069cc:	f240 3263 	movw	r2, #867	; 0x363
 80069d0:	4908      	ldr	r1, [pc, #32]	; (80069f4 <pbuf_cat+0x70>)
 80069d2:	4806      	ldr	r0, [pc, #24]	; (80069ec <pbuf_cat+0x68>)
 80069d4:	f004 fe08 	bl	800b5e8 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069d8:	892a      	ldrh	r2, [r5, #8]
 80069da:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80069dc:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069de:	4413      	add	r3, r2
 80069e0:	8123      	strh	r3, [r4, #8]
  p->next = t;
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	0800de93 	.word	0x0800de93
 80069e8:	0800def0 	.word	0x0800def0
 80069ec:	0800c5ae 	.word	0x0800c5ae
 80069f0:	0800df25 	.word	0x0800df25
 80069f4:	0800df52 	.word	0x0800df52

080069f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80069f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80069fe:	4605      	mov	r5, r0
 8006a00:	b120      	cbz	r0, 8006a0c <pbuf_copy+0x14>
 8006a02:	b119      	cbz	r1, 8006a0c <pbuf_copy+0x14>
 8006a04:	8902      	ldrh	r2, [r0, #8]
 8006a06:	890b      	ldrh	r3, [r1, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d20a      	bcs.n	8006a22 <pbuf_copy+0x2a>
 8006a0c:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <pbuf_copy+0xf0>)
 8006a0e:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006a12:	4936      	ldr	r1, [pc, #216]	; (8006aec <pbuf_copy+0xf4>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006a14:	4836      	ldr	r0, [pc, #216]	; (8006af0 <pbuf_copy+0xf8>)
 8006a16:	f004 fde7 	bl	800b5e8 <iprintf>
 8006a1a:	f06f 000f 	mvn.w	r0, #15
 8006a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006a24:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006ae8 <pbuf_copy+0xf0>
 8006a28:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8006b00 <pbuf_copy+0x108>
 8006a2c:	4637      	mov	r7, r6
 8006a2e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006af0 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006a32:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8006a36:	8963      	ldrh	r3, [r4, #10]
 8006a38:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006a3c:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006a3e:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006a40:	6861      	ldr	r1, [r4, #4]
 8006a42:	4438      	add	r0, r7
 8006a44:	4598      	cmp	r8, r3
 8006a46:	4431      	add	r1, r6
 8006a48:	bf28      	it	cs
 8006a4a:	4698      	movcs	r8, r3
 8006a4c:	4642      	mov	r2, r8
    offset_to += len;
 8006a4e:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006a50:	f004 fdb7 	bl	800b5c2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006a54:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8006a56:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006a58:	429f      	cmp	r7, r3
 8006a5a:	d906      	bls.n	8006a6a <pbuf_copy+0x72>
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006a62:	4659      	mov	r1, fp
 8006a64:	4650      	mov	r0, sl
 8006a66:	f004 fdbf 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006a6a:	8963      	ldrh	r3, [r4, #10]
 8006a6c:	429e      	cmp	r6, r3
 8006a6e:	d906      	bls.n	8006a7e <pbuf_copy+0x86>
 8006a70:	464b      	mov	r3, r9
 8006a72:	f240 32da 	movw	r2, #986	; 0x3da
 8006a76:	491f      	ldr	r1, [pc, #124]	; (8006af4 <pbuf_copy+0xfc>)
 8006a78:	4650      	mov	r0, sl
 8006a7a:	f004 fdb5 	bl	800b5e8 <iprintf>
    if (offset_from >= p_from->len) {
 8006a7e:	8963      	ldrh	r3, [r4, #10]
 8006a80:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8006a82:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8006a84:	bf24      	itt	cs
 8006a86:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8006a88:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8006a8a:	429f      	cmp	r7, r3
 8006a8c:	d11e      	bne.n	8006acc <pbuf_copy+0xd4>
      p_to = p_to->next;
 8006a8e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006a90:	b9dd      	cbnz	r5, 8006aca <pbuf_copy+0xd2>
 8006a92:	b1bc      	cbz	r4, 8006ac4 <pbuf_copy+0xcc>
 8006a94:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <pbuf_copy+0xf0>)
 8006a96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006a9a:	4917      	ldr	r1, [pc, #92]	; (8006af8 <pbuf_copy+0x100>)
 8006a9c:	e7ba      	b.n	8006a14 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006a9e:	8962      	ldrh	r2, [r4, #10]
 8006aa0:	8923      	ldrh	r3, [r4, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d114      	bne.n	8006ad0 <pbuf_copy+0xd8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	b193      	cbz	r3, 8006ad0 <pbuf_copy+0xd8>
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <pbuf_copy+0xf0>)
 8006aac:	f240 32ea 	movw	r2, #1002	; 0x3ea
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ab0:	4912      	ldr	r1, [pc, #72]	; (8006afc <pbuf_copy+0x104>)
 8006ab2:	480f      	ldr	r0, [pc, #60]	; (8006af0 <pbuf_copy+0xf8>)
 8006ab4:	f004 fd98 	bl	800b5e8 <iprintf>
 8006ab8:	f06f 0005 	mvn.w	r0, #5
 8006abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	d1b6      	bne.n	8006a32 <pbuf_copy+0x3a>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8006aca:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006acc:	2c00      	cmp	r4, #0
 8006ace:	d1e6      	bne.n	8006a9e <pbuf_copy+0xa6>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006ad0:	896a      	ldrh	r2, [r5, #10]
 8006ad2:	892b      	ldrh	r3, [r5, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d1f3      	bne.n	8006ac0 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <pbuf_copy+0xc8>
 8006ade:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <pbuf_copy+0xf0>)
 8006ae0:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006ae4:	e7e4      	b.n	8006ab0 <pbuf_copy+0xb8>
 8006ae6:	bf00      	nop
 8006ae8:	0800de93 	.word	0x0800de93
 8006aec:	0800df73 	.word	0x0800df73
 8006af0:	0800c5ae 	.word	0x0800c5ae
 8006af4:	0800dfba 	.word	0x0800dfba
 8006af8:	0800dfd5 	.word	0x0800dfd5
 8006afc:	0800dfe2 	.word	0x0800dfe2
 8006b00:	0800dfa3 	.word	0x0800dfa3

08006b04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	460f      	mov	r7, r1
 8006b0a:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	b950      	cbnz	r0, 8006b26 <pbuf_copy_partial+0x22>
 8006b10:	4635      	mov	r5, r6
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <pbuf_copy_partial+0x7c>)
 8006b14:	f240 420a 	movw	r2, #1034	; 0x40a
 8006b18:	491a      	ldr	r1, [pc, #104]	; (8006b84 <pbuf_copy_partial+0x80>)
 8006b1a:	481b      	ldr	r0, [pc, #108]	; (8006b88 <pbuf_copy_partial+0x84>)
 8006b1c:	f004 fd64 	bl	800b5e8 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8006b20:	4628      	mov	r0, r5
 8006b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006b26:	b169      	cbz	r1, 8006b44 <pbuf_copy_partial+0x40>
 8006b28:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b2a:	f1b8 0f00 	cmp.w	r8, #0
 8006b2e:	d0f7      	beq.n	8006b20 <pbuf_copy_partial+0x1c>
 8006b30:	2e00      	cmp	r6, #0
 8006b32:	d0f5      	beq.n	8006b20 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8006b34:	b17b      	cbz	r3, 8006b56 <pbuf_copy_partial+0x52>
 8006b36:	8971      	ldrh	r1, [r6, #10]
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	d30c      	bcc.n	8006b56 <pbuf_copy_partial+0x52>
      offset = (u16_t)(offset - p->len);
 8006b3c:	1a5b      	subs	r3, r3, r1
 8006b3e:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b40:	6836      	ldr	r6, [r6, #0]
 8006b42:	e7f2      	b.n	8006b2a <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006b44:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <pbuf_copy_partial+0x7c>)
 8006b46:	f240 420b 	movw	r2, #1035	; 0x40b
 8006b4a:	4910      	ldr	r1, [pc, #64]	; (8006b8c <pbuf_copy_partial+0x88>)
 8006b4c:	463d      	mov	r5, r7
 8006b4e:	480e      	ldr	r0, [pc, #56]	; (8006b88 <pbuf_copy_partial+0x84>)
 8006b50:	f004 fd4a 	bl	800b5e8 <iprintf>
 8006b54:	e7e4      	b.n	8006b20 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8006b56:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b58:	1978      	adds	r0, r7, r5
 8006b5a:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 8006b5c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b5e:	4419      	add	r1, r3
      buf_copy_len = (u16_t)(p->len - offset);
 8006b60:	b2a4      	uxth	r4, r4
 8006b62:	4544      	cmp	r4, r8
 8006b64:	bf28      	it	cs
 8006b66:	4644      	movcs	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b68:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006b6a:	4425      	add	r5, r4
      len = (u16_t)(len - buf_copy_len);
 8006b6c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b70:	f004 fd27 	bl	800b5c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006b74:	b2ad      	uxth	r5, r5
      offset = 0;
 8006b76:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8006b78:	fa1f f884 	uxth.w	r8, r4
 8006b7c:	e7e0      	b.n	8006b40 <pbuf_copy_partial+0x3c>
 8006b7e:	bf00      	nop
 8006b80:	0800de93 	.word	0x0800de93
 8006b84:	0800e00c 	.word	0x0800e00c
 8006b88:	0800c5ae 	.word	0x0800c5ae
 8006b8c:	0800e02b 	.word	0x0800e02b

08006b90 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006b94:	460a      	mov	r2, r1
 8006b96:	8921      	ldrh	r1, [r4, #8]
 8006b98:	f7ff fde2 	bl	8006760 <pbuf_alloc>
  if (q == NULL) {
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b150      	cbz	r0, 8006bb6 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f7ff ff29 	bl	80069f8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006ba6:	b130      	cbz	r0, 8006bb6 <pbuf_clone+0x26>
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <pbuf_clone+0x2c>)
 8006baa:	f240 5224 	movw	r2, #1316	; 0x524
 8006bae:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <pbuf_clone+0x30>)
 8006bb0:	4804      	ldr	r0, [pc, #16]	; (8006bc4 <pbuf_clone+0x34>)
 8006bb2:	f004 fd19 	bl	800b5e8 <iprintf>
  return q;
}
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	bd38      	pop	{r3, r4, r5, pc}
 8006bba:	bf00      	nop
 8006bbc:	0800de93 	.word	0x0800de93
 8006bc0:	0800df62 	.word	0x0800df62
 8006bc4:	0800c5ae 	.word	0x0800c5ae

08006bc8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006bc8:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <tcp_new_port+0x48>)
 8006bca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd0:	8810      	ldrh	r0, [r2, #0]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006bd2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006bd6:	4e0f      	ldr	r6, [pc, #60]	; (8006c14 <tcp_new_port+0x4c>)
  tcp_port++;
 8006bd8:	3001      	adds	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006bda:	2100      	movs	r1, #0
  tcp_port++;
 8006bdc:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006bde:	42a8      	cmp	r0, r5
 8006be0:	bf08      	it	eq
 8006be2:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006be6:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8006bea:	6824      	ldr	r4, [r4, #0]
 8006bec:	b924      	cbnz	r4, 8006bf8 <tcp_new_port+0x30>
 8006bee:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006bf0:	2904      	cmp	r1, #4
 8006bf2:	d1f8      	bne.n	8006be6 <tcp_new_port+0x1e>
 8006bf4:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8006bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8006bf8:	8ae7      	ldrh	r7, [r4, #22]
 8006bfa:	4287      	cmp	r7, r0
 8006bfc:	d106      	bne.n	8006c0c <tcp_new_port+0x44>
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29b      	uxth	r3, r3
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e8      	bne.n	8006bd8 <tcp_new_port+0x10>
 8006c06:	8010      	strh	r0, [r2, #0]
          return 0;
 8006c08:	4618      	mov	r0, r3
 8006c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006c0c:	68e4      	ldr	r4, [r4, #12]
 8006c0e:	e7ed      	b.n	8006bec <tcp_new_port+0x24>
 8006c10:	20020010 	.word	0x20020010
 8006c14:	0800e388 	.word	0x0800e388

08006c18 <tcp_close_shutdown_fin>:
{
 8006c18:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	b930      	cbnz	r0, 8006c2c <tcp_close_shutdown_fin+0x14>
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <tcp_close_shutdown_fin+0x54>)
 8006c20:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006c24:	4912      	ldr	r1, [pc, #72]	; (8006c70 <tcp_close_shutdown_fin+0x58>)
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <tcp_close_shutdown_fin+0x5c>)
 8006c28:	f004 fcde 	bl	800b5e8 <iprintf>
  switch (pcb->state) {
 8006c2c:	7d23      	ldrb	r3, [r4, #20]
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d003      	beq.n	8006c3a <tcp_close_shutdown_fin+0x22>
 8006c32:	2b07      	cmp	r3, #7
 8006c34:	d00c      	beq.n	8006c50 <tcp_close_shutdown_fin+0x38>
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d108      	bne.n	8006c4c <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f003 f8e2 	bl	8009e04 <tcp_send_fin>
      if (err == ERR_OK) {
 8006c40:	b988      	cbnz	r0, 8006c66 <tcp_close_shutdown_fin+0x4e>
        pcb->state = FIN_WAIT_1;
 8006c42:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8006c44:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8006c46:	4620      	mov	r0, r4
 8006c48:	f003 fa3e 	bl	800a0c8 <tcp_output>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8006c50:	4620      	mov	r0, r4
 8006c52:	f003 f8d7 	bl	8009e04 <tcp_send_fin>
      if (err == ERR_OK) {
 8006c56:	b930      	cbnz	r0, 8006c66 <tcp_close_shutdown_fin+0x4e>
        pcb->state = LAST_ACK;
 8006c58:	2309      	movs	r3, #9
 8006c5a:	e7f3      	b.n	8006c44 <tcp_close_shutdown_fin+0x2c>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c5c:	8b63      	ldrh	r3, [r4, #26]
 8006c5e:	f043 0308 	orr.w	r3, r3, #8
 8006c62:	8363      	strh	r3, [r4, #26]
 8006c64:	e7f2      	b.n	8006c4c <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d0f8      	beq.n	8006c5c <tcp_close_shutdown_fin+0x44>
}
 8006c6a:	bd10      	pop	{r4, pc}
 8006c6c:	0800e22e 	.word	0x0800e22e
 8006c70:	0800e25d 	.word	0x0800e25d
 8006c74:	0800c5ae 	.word	0x0800c5ae

08006c78 <tcp_init>:
{
 8006c78:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006c7a:	f004 fccd 	bl	800b618 <rand>
 8006c7e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8006c82:	4b02      	ldr	r3, [pc, #8]	; (8006c8c <tcp_init+0x14>)
 8006c84:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8006c88:	8018      	strh	r0, [r3, #0]
 8006c8a:	bd08      	pop	{r3, pc}
 8006c8c:	20020010 	.word	0x20020010

08006c90 <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006c90:	7d03      	ldrb	r3, [r0, #20]
 8006c92:	2b01      	cmp	r3, #1
{
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006c98:	d105      	bne.n	8006ca6 <tcp_free+0x16>
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <tcp_free+0x24>)
 8006c9c:	22d4      	movs	r2, #212	; 0xd4
 8006c9e:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <tcp_free+0x28>)
 8006ca0:	4806      	ldr	r0, [pc, #24]	; (8006cbc <tcp_free+0x2c>)
 8006ca2:	f004 fca1 	bl	800b5e8 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	2001      	movs	r0, #1
}
 8006caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8006cae:	f7ff baa7 	b.w	8006200 <memp_free>
 8006cb2:	bf00      	nop
 8006cb4:	0800e22e 	.word	0x0800e22e
 8006cb8:	0800e2b6 	.word	0x0800e2b6
 8006cbc:	0800c5ae 	.word	0x0800c5ae

08006cc0 <tcp_bind>:
{
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8006cc2:	4d23      	ldr	r5, [pc, #140]	; (8006d50 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006cc4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	bf18      	it	ne
 8006cca:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ccc:	b948      	cbnz	r0, 8006ce2 <tcp_bind+0x22>
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <tcp_bind+0x94>)
 8006cd0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006cd4:	4920      	ldr	r1, [pc, #128]	; (8006d58 <tcp_bind+0x98>)
 8006cd6:	4821      	ldr	r0, [pc, #132]	; (8006d5c <tcp_bind+0x9c>)
 8006cd8:	f004 fc86 	bl	800b5e8 <iprintf>
 8006cdc:	f06f 000f 	mvn.w	r0, #15
 8006ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006ce2:	7d03      	ldrb	r3, [r0, #20]
 8006ce4:	b14b      	cbz	r3, 8006cfa <tcp_bind+0x3a>
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <tcp_bind+0x94>)
 8006ce8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006cec:	491c      	ldr	r1, [pc, #112]	; (8006d60 <tcp_bind+0xa0>)
 8006cee:	481b      	ldr	r0, [pc, #108]	; (8006d5c <tcp_bind+0x9c>)
 8006cf0:	f004 fc7a 	bl	800b5e8 <iprintf>
 8006cf4:	f06f 0005 	mvn.w	r0, #5
 8006cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8006cfa:	b932      	cbnz	r2, 8006d0a <tcp_bind+0x4a>
    port = tcp_new_port();
 8006cfc:	f7ff ff64 	bl	8006bc8 <tcp_new_port>
    if (port == 0) {
 8006d00:	4602      	mov	r2, r0
 8006d02:	b950      	cbnz	r0, 8006d1a <tcp_bind+0x5a>
      return ERR_BUF;
 8006d04:	f06f 0001 	mvn.w	r0, #1
 8006d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006d0a:	4f16      	ldr	r7, [pc, #88]	; (8006d64 <tcp_bind+0xa4>)
 8006d0c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8006d10:	6808      	ldr	r0, [r1, #0]
 8006d12:	b970      	cbnz	r0, 8006d32 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8006d14:	3301      	adds	r3, #1
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d1f8      	bne.n	8006d0c <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b103      	cbz	r3, 8006d20 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006d1e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006d20:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <tcp_bind+0xa8>)
  pcb->local_port = port;
 8006d22:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	601c      	str	r4, [r3, #0]
 8006d28:	60e2      	str	r2, [r4, #12]
 8006d2a:	f003 fca3 	bl	800a674 <tcp_timer_needed>
  return ERR_OK;
 8006d2e:	2000      	movs	r0, #0
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8006d32:	8ac1      	ldrh	r1, [r0, #22]
 8006d34:	4291      	cmp	r1, r2
 8006d36:	d105      	bne.n	8006d44 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006d38:	6806      	ldr	r6, [r0, #0]
 8006d3a:	b12e      	cbz	r6, 8006d48 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8006d3c:	6829      	ldr	r1, [r5, #0]
 8006d3e:	b119      	cbz	r1, 8006d48 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006d40:	428e      	cmp	r6, r1
 8006d42:	d001      	beq.n	8006d48 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006d44:	68c0      	ldr	r0, [r0, #12]
 8006d46:	e7e4      	b.n	8006d12 <tcp_bind+0x52>
              return ERR_USE;
 8006d48:	f06f 0007 	mvn.w	r0, #7
}
 8006d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	0800d800 	.word	0x0800d800
 8006d54:	0800e22e 	.word	0x0800e22e
 8006d58:	0800e187 	.word	0x0800e187
 8006d5c:	0800c5ae 	.word	0x0800c5ae
 8006d60:	0800e19d 	.word	0x0800e19d
 8006d64:	0800e388 	.word	0x0800e388
 8006d68:	20027d38 	.word	0x20027d38

08006d6c <tcp_listen_with_backlog_and_err>:
{
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006d70:	4605      	mov	r5, r0
 8006d72:	b968      	cbnz	r0, 8006d90 <tcp_listen_with_backlog_and_err+0x24>
 8006d74:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <tcp_listen_with_backlog_and_err+0xb0>)
 8006d76:	f240 3259 	movw	r2, #857	; 0x359
 8006d7a:	4929      	ldr	r1, [pc, #164]	; (8006e20 <tcp_listen_with_backlog_and_err+0xb4>)
 8006d7c:	4829      	ldr	r0, [pc, #164]	; (8006e24 <tcp_listen_with_backlog_and_err+0xb8>)
 8006d7e:	f004 fc33 	bl	800b5e8 <iprintf>
 8006d82:	f06f 030f 	mvn.w	r3, #15
  struct tcp_pcb_listen *lpcb = NULL;
 8006d86:	2400      	movs	r4, #0
  if (err != NULL) {
 8006d88:	b106      	cbz	r6, 8006d8c <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8006d8a:	7033      	strb	r3, [r6, #0]
}
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006d90:	7d07      	ldrb	r7, [r0, #20]
 8006d92:	b14f      	cbz	r7, 8006da8 <tcp_listen_with_backlog_and_err+0x3c>
 8006d94:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <tcp_listen_with_backlog_and_err+0xb0>)
 8006d96:	f240 325a 	movw	r2, #858	; 0x35a
 8006d9a:	4923      	ldr	r1, [pc, #140]	; (8006e28 <tcp_listen_with_backlog_and_err+0xbc>)
 8006d9c:	4821      	ldr	r0, [pc, #132]	; (8006e24 <tcp_listen_with_backlog_and_err+0xb8>)
 8006d9e:	f004 fc23 	bl	800b5e8 <iprintf>
 8006da2:	f06f 030e 	mvn.w	r3, #14
 8006da6:	e7ee      	b.n	8006d86 <tcp_listen_with_backlog_and_err+0x1a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006da8:	2002      	movs	r0, #2
 8006daa:	f7ff fa0d 	bl	80061c8 <memp_malloc>
  if (lpcb == NULL) {
 8006dae:	4604      	mov	r4, r0
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d02f      	beq.n	8006e14 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 8006db4:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8006db6:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8006db8:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8006dba:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8006dbc:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8006dbe:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8006dc0:	7d6a      	ldrb	r2, [r5, #21]
 8006dc2:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8006dc4:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006dc6:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8006dc8:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8006dca:	7aea      	ldrb	r2, [r5, #11]
 8006dcc:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8006dce:	7aaa      	ldrb	r2, [r5, #10]
 8006dd0:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006dd2:	682a      	ldr	r2, [r5, #0]
 8006dd4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8006dd6:	b13b      	cbz	r3, 8006de8 <tcp_listen_with_backlog_and_err+0x7c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006dd8:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <tcp_listen_with_backlog_and_err+0xc0>)
 8006dda:	6813      	ldr	r3, [r2, #0]
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	d111      	bne.n	8006e04 <tcp_listen_with_backlog_and_err+0x98>
 8006de0:	68eb      	ldr	r3, [r5, #12]
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8006de8:	4628      	mov	r0, r5
 8006dea:	f7ff ff51 	bl	8006c90 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <tcp_listen_with_backlog_and_err+0xc4>)
 8006df0:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <tcp_listen_with_backlog_and_err+0xc8>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	601c      	str	r4, [r3, #0]
 8006df8:	60e2      	str	r2, [r4, #12]
 8006dfa:	f003 fc3b 	bl	800a674 <tcp_timer_needed>
  res = ERR_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e7c2      	b.n	8006d88 <tcp_listen_with_backlog_and_err+0x1c>
 8006e02:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ed      	beq.n	8006de4 <tcp_listen_with_backlog_and_err+0x78>
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	4295      	cmp	r5, r2
 8006e0c:	d1f9      	bne.n	8006e02 <tcp_listen_with_backlog_and_err+0x96>
 8006e0e:	68ea      	ldr	r2, [r5, #12]
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e7e7      	b.n	8006de4 <tcp_listen_with_backlog_and_err+0x78>
    res = ERR_MEM;
 8006e14:	f04f 33ff 	mov.w	r3, #4294967295
 8006e18:	e7b6      	b.n	8006d88 <tcp_listen_with_backlog_and_err+0x1c>
 8006e1a:	bf00      	nop
 8006e1c:	0800e22e 	.word	0x0800e22e
 8006e20:	0800e2d5 	.word	0x0800e2d5
 8006e24:	0800c5ae 	.word	0x0800c5ae
 8006e28:	0800e302 	.word	0x0800e302
 8006e2c:	20027d38 	.word	0x20027d38
 8006e30:	08007361 	.word	0x08007361
 8006e34:	20027d34 	.word	0x20027d34

08006e38 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f7ff bf97 	b.w	8006d6c <tcp_listen_with_backlog_and_err>
	...

08006e40 <tcp_update_rcv_ann_wnd>:
{
 8006e40:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006e42:	4604      	mov	r4, r0
 8006e44:	b930      	cbnz	r0, 8006e54 <tcp_update_rcv_ann_wnd+0x14>
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <tcp_update_rcv_ann_wnd+0x5c>)
 8006e48:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006e4c:	4914      	ldr	r1, [pc, #80]	; (8006ea0 <tcp_update_rcv_ann_wnd+0x60>)
 8006e4e:	4815      	ldr	r0, [pc, #84]	; (8006ea4 <tcp_update_rcv_ann_wnd+0x64>)
 8006e50:	f004 fbca 	bl	800b5e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006e54:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e58:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006e5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e5c:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e5e:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006e62:	4428      	add	r0, r5
 8006e64:	bf94      	ite	ls
 8006e66:	1a82      	subls	r2, r0, r2
 8006e68:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	db01      	blt.n	8006e74 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006e70:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006e74:	1aea      	subs	r2, r5, r3
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	dd02      	ble.n	8006e80 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006e80:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006e82:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006e86:	d306      	bcc.n	8006e96 <tcp_update_rcv_ann_wnd+0x56>
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <tcp_update_rcv_ann_wnd+0x5c>)
 8006e8a:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006e8e:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <tcp_update_rcv_ann_wnd+0x68>)
 8006e90:	4804      	ldr	r0, [pc, #16]	; (8006ea4 <tcp_update_rcv_ann_wnd+0x64>)
 8006e92:	f004 fba9 	bl	800b5e8 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006e96:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8006e98:	2000      	movs	r0, #0
}
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	0800e22e 	.word	0x0800e22e
 8006ea0:	0800e72b 	.word	0x0800e72b
 8006ea4:	0800c5ae 	.word	0x0800c5ae
 8006ea8:	0800e74f 	.word	0x0800e74f

08006eac <tcp_recved>:
{
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	460d      	mov	r5, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	b940      	cbnz	r0, 8006ec6 <tcp_recved+0x1a>
 8006eb4:	4b17      	ldr	r3, [pc, #92]	; (8006f14 <tcp_recved+0x68>)
 8006eb6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006eba:	4917      	ldr	r1, [pc, #92]	; (8006f18 <tcp_recved+0x6c>)
 8006ebc:	4817      	ldr	r0, [pc, #92]	; (8006f1c <tcp_recved+0x70>)
}
 8006ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006ec2:	f004 bb91 	b.w	800b5e8 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006ec6:	7d03      	ldrb	r3, [r0, #20]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d106      	bne.n	8006eda <tcp_recved+0x2e>
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <tcp_recved+0x68>)
 8006ece:	f240 32d3 	movw	r2, #979	; 0x3d3
 8006ed2:	4913      	ldr	r1, [pc, #76]	; (8006f20 <tcp_recved+0x74>)
 8006ed4:	4811      	ldr	r0, [pc, #68]	; (8006f1c <tcp_recved+0x70>)
 8006ed6:	f004 fb87 	bl	800b5e8 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006eda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006edc:	1959      	adds	r1, r3, r5
 8006ede:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006ee0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8006ee4:	d801      	bhi.n	8006eea <tcp_recved+0x3e>
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	d911      	bls.n	8006f0e <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006eea:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8006eee:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff ffa5 	bl	8006e40 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006ef6:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8006efa:	d30a      	bcc.n	8006f12 <tcp_recved+0x66>
    tcp_ack_now(pcb);
 8006efc:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8006efe:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8006f00:	f043 0302 	orr.w	r3, r3, #2
 8006f04:	8363      	strh	r3, [r4, #26]
}
 8006f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8006f0a:	f003 b8dd 	b.w	800a0c8 <tcp_output>
    pcb->rcv_wnd = rcv_wnd;
 8006f0e:	8521      	strh	r1, [r4, #40]	; 0x28
 8006f10:	e7ee      	b.n	8006ef0 <tcp_recved+0x44>
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	0800e22e 	.word	0x0800e22e
 8006f18:	0800e4da 	.word	0x0800e4da
 8006f1c:	0800c5ae 	.word	0x0800c5ae
 8006f20:	0800e4f2 	.word	0x0800e4f2

08006f24 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006f24:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8006f26:	4604      	mov	r4, r0
 8006f28:	b148      	cbz	r0, 8006f3e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8006f2a:	6840      	ldr	r0, [r0, #4]
 8006f2c:	b108      	cbz	r0, 8006f32 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006f2e:	f7ff fbaf 	bl	8006690 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006f32:	4621      	mov	r1, r4
 8006f34:	2003      	movs	r0, #3
  }
}
 8006f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8006f3a:	f7ff b961 	b.w	8006200 <memp_free>
 8006f3e:	bd10      	pop	{r4, pc}

08006f40 <tcp_segs_free>:
{
 8006f40:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8006f42:	b900      	cbnz	r0, 8006f46 <tcp_segs_free+0x6>
}
 8006f44:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8006f46:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8006f48:	f7ff ffec 	bl	8006f24 <tcp_seg_free>
    seg = next;
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	e7f8      	b.n	8006f42 <tcp_segs_free+0x2>

08006f50 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006f50:	b930      	cbnz	r0, 8006f60 <tcp_setprio+0x10>
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <tcp_setprio+0x14>)
 8006f54:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006f58:	4903      	ldr	r1, [pc, #12]	; (8006f68 <tcp_setprio+0x18>)
 8006f5a:	4804      	ldr	r0, [pc, #16]	; (8006f6c <tcp_setprio+0x1c>)
 8006f5c:	f004 bb44 	b.w	800b5e8 <iprintf>

  pcb->prio = prio;
 8006f60:	7541      	strb	r1, [r0, #21]
 8006f62:	4770      	bx	lr
 8006f64:	0800e22e 	.word	0x0800e22e
 8006f68:	0800e559 	.word	0x0800e559
 8006f6c:	0800c5ae 	.word	0x0800c5ae

08006f70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006f70:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006f72:	4604      	mov	r4, r0
 8006f74:	b930      	cbnz	r0, 8006f84 <tcp_seg_copy+0x14>
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <tcp_seg_copy+0x3c>)
 8006f78:	f240 6282 	movw	r2, #1666	; 0x682
 8006f7c:	490c      	ldr	r1, [pc, #48]	; (8006fb0 <tcp_seg_copy+0x40>)
 8006f7e:	480d      	ldr	r0, [pc, #52]	; (8006fb4 <tcp_seg_copy+0x44>)
 8006f80:	f004 fb32 	bl	800b5e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006f84:	2003      	movs	r0, #3
 8006f86:	f7ff f91f 	bl	80061c8 <memp_malloc>
  if (cseg == NULL) {
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	b160      	cbz	r0, 8006fa8 <tcp_seg_copy+0x38>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006f8e:	4620      	mov	r0, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	f104 0210 	add.w	r2, r4, #16
 8006f96:	f850 1b04 	ldr.w	r1, [r0], #4
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	f843 1b04 	str.w	r1, [r3], #4
 8006fa0:	d1f9      	bne.n	8006f96 <tcp_seg_copy+0x26>
  pbuf_ref(cseg->p);
 8006fa2:	6868      	ldr	r0, [r5, #4]
 8006fa4:	f7ff fcd2 	bl	800694c <pbuf_ref>
  return cseg;
}
 8006fa8:	4628      	mov	r0, r5
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	0800e22e 	.word	0x0800e22e
 8006fb0:	0800e518 	.word	0x0800e518
 8006fb4:	0800c5ae 	.word	0x0800c5ae

08006fb8 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006fb8:	b100      	cbz	r0, 8006fbc <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8006fba:	6101      	str	r1, [r0, #16]
 8006fbc:	4770      	bx	lr
	...

08006fc0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	b158      	cbz	r0, 8006fe0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006fc8:	7d03      	ldrb	r3, [r0, #20]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d106      	bne.n	8006fdc <tcp_recv+0x1c>
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <tcp_recv+0x24>)
 8006fd0:	f240 72df 	movw	r2, #2015	; 0x7df
 8006fd4:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <tcp_recv+0x28>)
 8006fd6:	4805      	ldr	r0, [pc, #20]	; (8006fec <tcp_recv+0x2c>)
 8006fd8:	f004 fb06 	bl	800b5e8 <iprintf>
    pcb->recv = recv;
 8006fdc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	0800e22e 	.word	0x0800e22e
 8006fe8:	0800e498 	.word	0x0800e498
 8006fec:	0800c5ae 	.word	0x0800c5ae

08006ff0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	b158      	cbz	r0, 8007010 <tcp_sent+0x20>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006ff8:	7d03      	ldrb	r3, [r0, #20]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d106      	bne.n	800700c <tcp_sent+0x1c>
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <tcp_sent+0x24>)
 8007000:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007004:	4904      	ldr	r1, [pc, #16]	; (8007018 <tcp_sent+0x28>)
 8007006:	4805      	ldr	r0, [pc, #20]	; (800701c <tcp_sent+0x2c>)
 8007008:	f004 faee 	bl	800b5e8 <iprintf>
    pcb->sent = sent;
 800700c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8007010:	bd38      	pop	{r3, r4, r5, pc}
 8007012:	bf00      	nop
 8007014:	0800e22e 	.word	0x0800e22e
 8007018:	0800e532 	.word	0x0800e532
 800701c:	0800c5ae 	.word	0x0800c5ae

08007020 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007024:	4604      	mov	r4, r0
 8007026:	b158      	cbz	r0, 8007040 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007028:	7d03      	ldrb	r3, [r0, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d106      	bne.n	800703c <tcp_err+0x1c>
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <tcp_err+0x24>)
 8007030:	f640 020d 	movw	r2, #2061	; 0x80d
 8007034:	4904      	ldr	r1, [pc, #16]	; (8007048 <tcp_err+0x28>)
 8007036:	4805      	ldr	r0, [pc, #20]	; (800704c <tcp_err+0x2c>)
 8007038:	f004 fad6 	bl	800b5e8 <iprintf>
    pcb->errf = err;
 800703c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	0800e22e 	.word	0x0800e22e
 8007048:	0800e290 	.word	0x0800e290
 800704c:	0800c5ae 	.word	0x0800c5ae

08007050 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007050:	b118      	cbz	r0, 800705a <tcp_accept+0xa>
 8007052:	7d03      	ldrb	r3, [r0, #20]
 8007054:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8007056:	bf08      	it	eq
 8007058:	6181      	streq	r1, [r0, #24]
 800705a:	4770      	bx	lr

0800705c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	460e      	mov	r6, r1
 8007060:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007062:	4604      	mov	r4, r0
 8007064:	b940      	cbnz	r0, 8007078 <tcp_poll+0x1c>
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <tcp_poll+0x38>)
 8007068:	f640 023d 	movw	r2, #2109	; 0x83d
 800706c:	490a      	ldr	r1, [pc, #40]	; (8007098 <tcp_poll+0x3c>)
 800706e:	480b      	ldr	r0, [pc, #44]	; (800709c <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8007070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007074:	f004 bab8 	b.w	800b5e8 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007078:	7d03      	ldrb	r3, [r0, #20]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d106      	bne.n	800708c <tcp_poll+0x30>
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <tcp_poll+0x38>)
 8007080:	f640 023e 	movw	r2, #2110	; 0x83e
 8007084:	4906      	ldr	r1, [pc, #24]	; (80070a0 <tcp_poll+0x44>)
 8007086:	4805      	ldr	r0, [pc, #20]	; (800709c <tcp_poll+0x40>)
 8007088:	f004 faae 	bl	800b5e8 <iprintf>
  pcb->poll = poll;
 800708c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8007090:	7765      	strb	r5, [r4, #29]
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	0800e22e 	.word	0x0800e22e
 8007098:	0800e43e 	.word	0x0800e43e
 800709c:	0800c5ae 	.word	0x0800c5ae
 80070a0:	0800e454 	.word	0x0800e454

080070a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80070a4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80070a6:	b930      	cbnz	r0, 80070b6 <tcp_next_iss+0x12>
 80070a8:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <tcp_next_iss+0x20>)
 80070aa:	f640 02af 	movw	r2, #2223	; 0x8af
 80070ae:	4906      	ldr	r1, [pc, #24]	; (80070c8 <tcp_next_iss+0x24>)
 80070b0:	4806      	ldr	r0, [pc, #24]	; (80070cc <tcp_next_iss+0x28>)
 80070b2:	f004 fa99 	bl	800b5e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <tcp_next_iss+0x2c>)
 80070b8:	4a06      	ldr	r2, [pc, #24]	; (80070d4 <tcp_next_iss+0x30>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	4410      	add	r0, r2
 80070c0:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 80070c2:	bd08      	pop	{r3, pc}
 80070c4:	0800e22e 	.word	0x0800e22e
 80070c8:	0800e36d 	.word	0x0800e36d
 80070cc:	0800c5ae 	.word	0x0800c5ae
 80070d0:	2002000c 	.word	0x2002000c
 80070d4:	20027d30 	.word	0x20027d30

080070d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4604      	mov	r4, r0
 80070dc:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80070de:	b932      	cbnz	r2, 80070ee <tcp_eff_send_mss_netif+0x16>
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <tcp_eff_send_mss_netif+0x30>)
 80070e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80070e6:	4909      	ldr	r1, [pc, #36]	; (800710c <tcp_eff_send_mss_netif+0x34>)
 80070e8:	4809      	ldr	r0, [pc, #36]	; (8007110 <tcp_eff_send_mss_netif+0x38>)
 80070ea:	f004 fa7d 	bl	800b5e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80070ee:	b14d      	cbz	r5, 8007104 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
    }
    mtu = outif->mtu;
 80070f0:	8c2b      	ldrh	r3, [r5, #32]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80070f2:	b13b      	cbz	r3, 8007104 <tcp_eff_send_mss_netif+0x2c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80070f4:	2b28      	cmp	r3, #40	; 0x28
 80070f6:	bf8a      	itet	hi
 80070f8:	3b28      	subhi	r3, #40	; 0x28
 80070fa:	2300      	movls	r3, #0
 80070fc:	b29b      	uxthhi	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80070fe:	429c      	cmp	r4, r3
 8007100:	bf28      	it	cs
 8007102:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 8007104:	4620      	mov	r0, r4
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	0800e22e 	.word	0x0800e22e
 800710c:	0800e269 	.word	0x0800e269
 8007110:	0800c5ae 	.word	0x0800c5ae

08007114 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007114:	b510      	push	{r4, lr}
 8007116:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8007118:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800711a:	b118      	cbz	r0, 8007124 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 800711c:	f7ff ff10 	bl	8006f40 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007120:	2300      	movs	r3, #0
 8007122:	6763      	str	r3, [r4, #116]	; 0x74
 8007124:	bd10      	pop	{r4, pc}
	...

08007128 <tcp_pcb_purge>:
{
 8007128:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800712a:	4604      	mov	r4, r0
 800712c:	b940      	cbnz	r0, 8007140 <tcp_pcb_purge+0x18>
 800712e:	4b14      	ldr	r3, [pc, #80]	; (8007180 <tcp_pcb_purge+0x58>)
 8007130:	f640 0251 	movw	r2, #2129	; 0x851
 8007134:	4913      	ldr	r1, [pc, #76]	; (8007184 <tcp_pcb_purge+0x5c>)
 8007136:	4814      	ldr	r0, [pc, #80]	; (8007188 <tcp_pcb_purge+0x60>)
}
 8007138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800713c:	f004 ba54 	b.w	800b5e8 <iprintf>
  if (pcb->state != CLOSED &&
 8007140:	7d03      	ldrb	r3, [r0, #20]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d91a      	bls.n	800717c <tcp_pcb_purge+0x54>
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d018      	beq.n	800717c <tcp_pcb_purge+0x54>
    if (pcb->refused_data != NULL) {
 800714a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800714c:	b118      	cbz	r0, 8007156 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800714e:	f7ff fa9f 	bl	8006690 <pbuf_free>
      pcb->refused_data = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8007156:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007158:	b113      	cbz	r3, 8007160 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff ffda 	bl	8007114 <tcp_free_ooseq>
    pcb->rtime = -1;
 8007160:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8007164:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8007166:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8007168:	f7ff feea 	bl	8006f40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800716c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800716e:	f7ff fee7 	bl	8006f40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007176:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8007178:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800717c:	bd10      	pop	{r4, pc}
 800717e:	bf00      	nop
 8007180:	0800e22e 	.word	0x0800e22e
 8007184:	0800e398 	.word	0x0800e398
 8007188:	0800c5ae 	.word	0x0800c5ae

0800718c <tcp_pcb_remove>:
{
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007190:	460c      	mov	r4, r1
 8007192:	b931      	cbnz	r1, 80071a2 <tcp_pcb_remove+0x16>
 8007194:	4b28      	ldr	r3, [pc, #160]	; (8007238 <tcp_pcb_remove+0xac>)
 8007196:	f640 0283 	movw	r2, #2179	; 0x883
 800719a:	4928      	ldr	r1, [pc, #160]	; (800723c <tcp_pcb_remove+0xb0>)
 800719c:	4828      	ldr	r0, [pc, #160]	; (8007240 <tcp_pcb_remove+0xb4>)
 800719e:	f004 fa23 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80071a2:	b935      	cbnz	r5, 80071b2 <tcp_pcb_remove+0x26>
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <tcp_pcb_remove+0xac>)
 80071a6:	f640 0284 	movw	r2, #2180	; 0x884
 80071aa:	4926      	ldr	r1, [pc, #152]	; (8007244 <tcp_pcb_remove+0xb8>)
 80071ac:	4824      	ldr	r0, [pc, #144]	; (8007240 <tcp_pcb_remove+0xb4>)
 80071ae:	f004 fa1b 	bl	800b5e8 <iprintf>
  TCP_RMV(pcblist, pcb);
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	429c      	cmp	r4, r3
 80071b6:	d137      	bne.n	8007228 <tcp_pcb_remove+0x9c>
 80071b8:	68e3      	ldr	r3, [r4, #12]
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 80071be:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80071c0:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80071c2:	f7ff ffb1 	bl	8007128 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 80071c6:	7d23      	ldrb	r3, [r4, #20]
 80071c8:	2b0a      	cmp	r3, #10
 80071ca:	d00a      	beq.n	80071e2 <tcp_pcb_remove+0x56>
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d008      	beq.n	80071e2 <tcp_pcb_remove+0x56>
      (pcb->flags & TF_ACK_DELAY)) {
 80071d0:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 80071d2:	07da      	lsls	r2, r3, #31
 80071d4:	d505      	bpl.n	80071e2 <tcp_pcb_remove+0x56>
    tcp_ack_now(pcb);
 80071d6:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 80071da:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 80071dc:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80071de:	f002 ff73 	bl	800a0c8 <tcp_output>
  if (pcb->state != LISTEN) {
 80071e2:	7d23      	ldrb	r3, [r4, #20]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d01a      	beq.n	800721e <tcp_pcb_remove+0x92>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80071e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80071ea:	b133      	cbz	r3, 80071fa <tcp_pcb_remove+0x6e>
 80071ec:	4b12      	ldr	r3, [pc, #72]	; (8007238 <tcp_pcb_remove+0xac>)
 80071ee:	f640 0293 	movw	r2, #2195	; 0x893
 80071f2:	4915      	ldr	r1, [pc, #84]	; (8007248 <tcp_pcb_remove+0xbc>)
 80071f4:	4812      	ldr	r0, [pc, #72]	; (8007240 <tcp_pcb_remove+0xb4>)
 80071f6:	f004 f9f7 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80071fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80071fc:	b133      	cbz	r3, 800720c <tcp_pcb_remove+0x80>
 80071fe:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <tcp_pcb_remove+0xac>)
 8007200:	f640 0294 	movw	r2, #2196	; 0x894
 8007204:	4911      	ldr	r1, [pc, #68]	; (800724c <tcp_pcb_remove+0xc0>)
 8007206:	480e      	ldr	r0, [pc, #56]	; (8007240 <tcp_pcb_remove+0xb4>)
 8007208:	f004 f9ee 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800720c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800720e:	b133      	cbz	r3, 800721e <tcp_pcb_remove+0x92>
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <tcp_pcb_remove+0xac>)
 8007212:	f640 0296 	movw	r2, #2198	; 0x896
 8007216:	490e      	ldr	r1, [pc, #56]	; (8007250 <tcp_pcb_remove+0xc4>)
 8007218:	4809      	ldr	r0, [pc, #36]	; (8007240 <tcp_pcb_remove+0xb4>)
 800721a:	f004 f9e5 	bl	800b5e8 <iprintf>
  pcb->state = CLOSED;
 800721e:	2300      	movs	r3, #0
 8007220:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8007222:	82e3      	strh	r3, [r4, #22]
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0c7      	beq.n	80071bc <tcp_pcb_remove+0x30>
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	4294      	cmp	r4, r2
 8007230:	d1f9      	bne.n	8007226 <tcp_pcb_remove+0x9a>
 8007232:	68e2      	ldr	r2, [r4, #12]
 8007234:	60da      	str	r2, [r3, #12]
 8007236:	e7c1      	b.n	80071bc <tcp_pcb_remove+0x30>
 8007238:	0800e22e 	.word	0x0800e22e
 800723c:	0800e3b3 	.word	0x0800e3b3
 8007240:	0800c5ae 	.word	0x0800c5ae
 8007244:	0800e3cf 	.word	0x0800e3cf
 8007248:	0800e3ef 	.word	0x0800e3ef
 800724c:	0800e407 	.word	0x0800e407
 8007250:	0800e420 	.word	0x0800e420

08007254 <tcp_abandon>:
{
 8007254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800725a:	4604      	mov	r4, r0
 800725c:	b948      	cbnz	r0, 8007272 <tcp_abandon+0x1e>
 800725e:	4b36      	ldr	r3, [pc, #216]	; (8007338 <tcp_abandon+0xe4>)
 8007260:	f240 223d 	movw	r2, #573	; 0x23d
 8007264:	4935      	ldr	r1, [pc, #212]	; (800733c <tcp_abandon+0xe8>)
 8007266:	4836      	ldr	r0, [pc, #216]	; (8007340 <tcp_abandon+0xec>)
}
 8007268:	b004      	add	sp, #16
 800726a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800726e:	f004 b9bb 	b.w	800b5e8 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007272:	7d03      	ldrb	r3, [r0, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <tcp_abandon+0x32>
 8007278:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <tcp_abandon+0xe4>)
 800727a:	f240 2241 	movw	r2, #577	; 0x241
 800727e:	4931      	ldr	r1, [pc, #196]	; (8007344 <tcp_abandon+0xf0>)
 8007280:	482f      	ldr	r0, [pc, #188]	; (8007340 <tcp_abandon+0xec>)
 8007282:	f004 f9b1 	bl	800b5e8 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007286:	7d23      	ldrb	r3, [r4, #20]
 8007288:	2b0a      	cmp	r3, #10
 800728a:	d109      	bne.n	80072a0 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800728c:	4621      	mov	r1, r4
 800728e:	482e      	ldr	r0, [pc, #184]	; (8007348 <tcp_abandon+0xf4>)
 8007290:	f7ff ff7c 	bl	800718c <tcp_pcb_remove>
    tcp_free(pcb);
 8007294:	4620      	mov	r0, r4
}
 8007296:	b004      	add	sp, #16
 8007298:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800729c:	f7ff bcf8 	b.w	8006c90 <tcp_free>
    seqno = pcb->snd_nxt;
 80072a0:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80072a4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80072a8:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 80072ac:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80072b0:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80072b2:	b99b      	cbnz	r3, 80072dc <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 80072b4:	b13d      	cbz	r5, 80072c6 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072b6:	4a25      	ldr	r2, [pc, #148]	; (800734c <tcp_abandon+0xf8>)
 80072b8:	6813      	ldr	r3, [r2, #0]
 80072ba:	429c      	cmp	r4, r3
 80072bc:	d106      	bne.n	80072cc <tcp_abandon+0x78>
 80072be:	68e3      	ldr	r3, [r4, #12]
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	2500      	movs	r5, #0
 80072c4:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80072c6:	462e      	mov	r6, r5
 80072c8:	e00f      	b.n	80072ea <tcp_abandon+0x96>
 80072ca:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f8      	beq.n	80072c2 <tcp_abandon+0x6e>
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	4294      	cmp	r4, r2
 80072d4:	d1f9      	bne.n	80072ca <tcp_abandon+0x76>
 80072d6:	68e2      	ldr	r2, [r4, #12]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e7f2      	b.n	80072c2 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80072dc:	4621      	mov	r1, r4
 80072de:	481c      	ldr	r0, [pc, #112]	; (8007350 <tcp_abandon+0xfc>)
 80072e0:	f7ff ff54 	bl	800718c <tcp_pcb_remove>
 80072e4:	2201      	movs	r2, #1
 80072e6:	4b1b      	ldr	r3, [pc, #108]	; (8007354 <tcp_abandon+0x100>)
 80072e8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80072ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80072ec:	b108      	cbz	r0, 80072f2 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 80072ee:	f7ff fe27 	bl	8006f40 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80072f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80072f4:	b108      	cbz	r0, 80072fa <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 80072f6:	f7ff fe23 	bl	8006f40 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80072fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80072fc:	b108      	cbz	r0, 8007302 <tcp_abandon+0xae>
      tcp_segs_free(pcb->ooseq);
 80072fe:	f7ff fe1f 	bl	8006f40 <tcp_segs_free>
    if (send_rst) {
 8007302:	b156      	cbz	r6, 800731a <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007304:	8b23      	ldrh	r3, [r4, #24]
 8007306:	4652      	mov	r2, sl
 8007308:	9501      	str	r5, [sp, #4]
 800730a:	4649      	mov	r1, r9
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	1d23      	adds	r3, r4, #4
 8007310:	4620      	mov	r0, r4
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	4623      	mov	r3, r4
 8007316:	f002 fe61 	bl	8009fdc <tcp_rst>
    tcp_free(pcb);
 800731a:	4620      	mov	r0, r4
 800731c:	f7ff fcb8 	bl	8006c90 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007320:	b13f      	cbz	r7, 8007332 <tcp_abandon+0xde>
 8007322:	f06f 010c 	mvn.w	r1, #12
 8007326:	4640      	mov	r0, r8
 8007328:	463b      	mov	r3, r7
}
 800732a:	b004      	add	sp, #16
 800732c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007330:	4718      	bx	r3
}
 8007332:	b004      	add	sp, #16
 8007334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007338:	0800e22e 	.word	0x0800e22e
 800733c:	0800e113 	.word	0x0800e113
 8007340:	0800c5ae 	.word	0x0800c5ae
 8007344:	0800e12c 	.word	0x0800e12c
 8007348:	20027d3c 	.word	0x20027d3c
 800734c:	20027d38 	.word	0x20027d38
 8007350:	20027d2c 	.word	0x20027d2c
 8007354:	20027d28 	.word	0x20027d28

08007358 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8007358:	2101      	movs	r1, #1
 800735a:	f7ff bf7b 	b.w	8007254 <tcp_abandon>
	...

08007360 <tcp_accept_null>:
{
 8007360:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007362:	460c      	mov	r4, r1
 8007364:	b931      	cbnz	r1, 8007374 <tcp_accept_null+0x14>
 8007366:	4b06      	ldr	r3, [pc, #24]	; (8007380 <tcp_accept_null+0x20>)
 8007368:	f240 320f 	movw	r2, #783	; 0x30f
 800736c:	4905      	ldr	r1, [pc, #20]	; (8007384 <tcp_accept_null+0x24>)
 800736e:	4806      	ldr	r0, [pc, #24]	; (8007388 <tcp_accept_null+0x28>)
 8007370:	f004 f93a 	bl	800b5e8 <iprintf>
  tcp_abort(pcb);
 8007374:	4620      	mov	r0, r4
 8007376:	f7ff ffef 	bl	8007358 <tcp_abort>
}
 800737a:	f06f 000c 	mvn.w	r0, #12
 800737e:	bd10      	pop	{r4, pc}
 8007380:	0800e22e 	.word	0x0800e22e
 8007384:	0800e15d 	.word	0x0800e15d
 8007388:	0800c5ae 	.word	0x0800c5ae

0800738c <tcp_netif_ip_addr_changed_pcblist>:
{
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007390:	4605      	mov	r5, r0
 8007392:	b930      	cbnz	r0, 80073a2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8007396:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800739a:	4909      	ldr	r1, [pc, #36]	; (80073c0 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800739c:	4809      	ldr	r0, [pc, #36]	; (80073c4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800739e:	f004 f923 	bl	800b5e8 <iprintf>
  while (pcb != NULL) {
 80073a2:	b904      	cbnz	r4, 80073a6 <tcp_netif_ip_addr_changed_pcblist+0x1a>
}
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	68e6      	ldr	r6, [r4, #12]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d102      	bne.n	80073b6 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 80073b0:	4620      	mov	r0, r4
 80073b2:	f7ff ffd1 	bl	8007358 <tcp_abort>
      pcb = pcb->next;
 80073b6:	4634      	mov	r4, r6
 80073b8:	e7f3      	b.n	80073a2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 80073ba:	bf00      	nop
 80073bc:	0800e22e 	.word	0x0800e22e
 80073c0:	0800e339 	.word	0x0800e339
 80073c4:	0800c5ae 	.word	0x0800c5ae

080073c8 <tcp_netif_ip_addr_changed>:
{
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	460d      	mov	r5, r1
  if (!ip_addr_isany(old_addr)) {
 80073cc:	4604      	mov	r4, r0
 80073ce:	b180      	cbz	r0, 80073f2 <tcp_netif_ip_addr_changed+0x2a>
 80073d0:	6803      	ldr	r3, [r0, #0]
 80073d2:	b173      	cbz	r3, 80073f2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <tcp_netif_ip_addr_changed+0x3c>)
 80073d6:	6819      	ldr	r1, [r3, #0]
 80073d8:	f7ff ffd8 	bl	800738c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <tcp_netif_ip_addr_changed+0x40>)
 80073de:	4620      	mov	r0, r4
 80073e0:	6819      	ldr	r1, [r3, #0]
 80073e2:	f7ff ffd3 	bl	800738c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80073e6:	b125      	cbz	r5, 80073f2 <tcp_netif_ip_addr_changed+0x2a>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b113      	cbz	r3, 80073f2 <tcp_netif_ip_addr_changed+0x2a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80073ec:	4b07      	ldr	r3, [pc, #28]	; (800740c <tcp_netif_ip_addr_changed+0x44>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	b903      	cbnz	r3, 80073f4 <tcp_netif_ip_addr_changed+0x2c>
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80073f4:	6819      	ldr	r1, [r3, #0]
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80073fa:	bf04      	itt	eq
 80073fc:	682a      	ldreq	r2, [r5, #0]
 80073fe:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	e7f5      	b.n	80073f0 <tcp_netif_ip_addr_changed+0x28>
 8007404:	20027d2c 	.word	0x20027d2c
 8007408:	20027d38 	.word	0x20027d38
 800740c:	20027d34 	.word	0x20027d34

08007410 <tcp_kill_state>:
{
 8007410:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007412:	f1a0 0308 	sub.w	r3, r0, #8
{
 8007416:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007418:	2b01      	cmp	r3, #1
 800741a:	d906      	bls.n	800742a <tcp_kill_state+0x1a>
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <tcp_kill_state+0x4c>)
 800741e:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007422:	490f      	ldr	r1, [pc, #60]	; (8007460 <tcp_kill_state+0x50>)
 8007424:	480f      	ldr	r0, [pc, #60]	; (8007464 <tcp_kill_state+0x54>)
 8007426:	f004 f8df 	bl	800b5e8 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800742a:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <tcp_kill_state+0x58>)
  inactivity = 0;
 800742c:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800742e:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8007430:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <tcp_kill_state+0x5c>)
 8007434:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007436:	b921      	cbnz	r1, 8007442 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8007438:	b170      	cbz	r0, 8007458 <tcp_kill_state+0x48>
}
 800743a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 800743e:	f7ff bf09 	b.w	8007254 <tcp_abandon>
    if (pcb->state == state) {
 8007442:	7d0b      	ldrb	r3, [r1, #20]
 8007444:	42a3      	cmp	r3, r4
 8007446:	d105      	bne.n	8007454 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007448:	6a0b      	ldr	r3, [r1, #32]
 800744a:	1aeb      	subs	r3, r5, r3
 800744c:	429a      	cmp	r2, r3
 800744e:	bf9c      	itt	ls
 8007450:	461a      	movls	r2, r3
 8007452:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007454:	68c9      	ldr	r1, [r1, #12]
 8007456:	e7ee      	b.n	8007436 <tcp_kill_state+0x26>
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	bf00      	nop
 800745c:	0800e22e 	.word	0x0800e22e
 8007460:	0800e2c7 	.word	0x0800e2c7
 8007464:	0800c5ae 	.word	0x0800c5ae
 8007468:	20027d2c 	.word	0x20027d2c
 800746c:	20027d30 	.word	0x20027d30

08007470 <tcp_alloc>:
{
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007474:	2001      	movs	r0, #1
 8007476:	f7fe fea7 	bl	80061c8 <memp_malloc>
  if (pcb == NULL) {
 800747a:	4604      	mov	r4, r0
 800747c:	2800      	cmp	r0, #0
 800747e:	d136      	bne.n	80074ee <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007480:	4f43      	ldr	r7, [pc, #268]	; (8007590 <tcp_alloc+0x120>)
 8007482:	6838      	ldr	r0, [r7, #0]
  while (pcb != NULL) {
 8007484:	2800      	cmp	r0, #0
 8007486:	d15f      	bne.n	8007548 <tcp_alloc+0xd8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007488:	4b42      	ldr	r3, [pc, #264]	; (8007594 <tcp_alloc+0x124>)
  inactivity = 0;
 800748a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800748c:	4e42      	ldr	r6, [pc, #264]	; (8007598 <tcp_alloc+0x128>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800748e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007490:	6834      	ldr	r4, [r6, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007492:	2b00      	cmp	r3, #0
 8007494:	d163      	bne.n	800755e <tcp_alloc+0xee>
  if (inactive != NULL) {
 8007496:	b108      	cbz	r0, 800749c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8007498:	f7ff ff5e 	bl	8007358 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800749c:	2001      	movs	r0, #1
 800749e:	f7fe fe93 	bl	80061c8 <memp_malloc>
    if (pcb == NULL) {
 80074a2:	4604      	mov	r4, r0
 80074a4:	bb18      	cbnz	r0, 80074ee <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 80074a6:	2009      	movs	r0, #9
 80074a8:	f7ff ffb2 	bl	8007410 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074ac:	2001      	movs	r0, #1
 80074ae:	f7fe fe8b 	bl	80061c8 <memp_malloc>
      if (pcb == NULL) {
 80074b2:	4604      	mov	r4, r0
 80074b4:	b9d8      	cbnz	r0, 80074ee <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 80074b6:	2008      	movs	r0, #8
 80074b8:	f7ff ffaa 	bl	8007410 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074bc:	2001      	movs	r0, #1
 80074be:	f7fe fe83 	bl	80061c8 <memp_malloc>
        if (pcb == NULL) {
 80074c2:	4604      	mov	r4, r0
 80074c4:	b998      	cbnz	r0, 80074ee <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80074c6:	062b      	lsls	r3, r5, #24
 80074c8:	d451      	bmi.n	800756e <tcp_alloc+0xfe>
  if (mprio == 0) {
 80074ca:	b15d      	cbz	r5, 80074e4 <tcp_alloc+0x74>
 80074cc:	462a      	mov	r2, r5
  mprio--;
 80074ce:	3a01      	subs	r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074d0:	683b      	ldr	r3, [r7, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80074d2:	6836      	ldr	r6, [r6, #0]
  inactivity = 0;
 80074d4:	2100      	movs	r1, #0
  mprio--;
 80074d6:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d14a      	bne.n	8007572 <tcp_alloc+0x102>
  if (inactive != NULL) {
 80074dc:	b114      	cbz	r4, 80074e4 <tcp_alloc+0x74>
    tcp_abort(inactive);
 80074de:	4620      	mov	r0, r4
 80074e0:	f7ff ff3a 	bl	8007358 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074e4:	2001      	movs	r0, #1
 80074e6:	f7fe fe6f 	bl	80061c8 <memp_malloc>
  if (pcb != NULL) {
 80074ea:	4604      	mov	r4, r0
 80074ec:	b350      	cbz	r0, 8007544 <tcp_alloc+0xd4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80074ee:	229c      	movs	r2, #156	; 0x9c
 80074f0:	2100      	movs	r1, #0
 80074f2:	4620      	mov	r0, r4
 80074f4:	f004 f870 	bl	800b5d8 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80074f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 80074fc:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8007500:	7565      	strb	r5, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007502:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007504:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007506:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8007508:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->ttl = TCP_TTL;
 800750c:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800750e:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8007512:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8007516:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007518:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 800751a:	4b20      	ldr	r3, [pc, #128]	; (800759c <tcp_alloc+0x12c>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800751c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007520:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007522:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8007526:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->rtime = -1;
 800752a:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800752c:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <tcp_alloc+0x130>)
    pcb->cwnd = 1;
 8007530:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007534:	4a18      	ldr	r2, [pc, #96]	; (8007598 <tcp_alloc+0x128>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007536:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    pcb->tmr = tcp_ticks;
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800753e:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <tcp_alloc+0x134>)
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	77a2      	strb	r2, [r4, #30]
}
 8007544:	4620      	mov	r0, r4
 8007546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8007548:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800754a:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800754c:	071a      	lsls	r2, r3, #28
 800754e:	d504      	bpl.n	800755a <tcp_alloc+0xea>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007550:	f023 0308 	bic.w	r3, r3, #8
 8007554:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8007556:	f7ff fb5f 	bl	8006c18 <tcp_close_shutdown_fin>
{
 800755a:	4620      	mov	r0, r4
 800755c:	e792      	b.n	8007484 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800755e:	6a1a      	ldr	r2, [r3, #32]
 8007560:	1aa2      	subs	r2, r4, r2
 8007562:	428a      	cmp	r2, r1
 8007564:	bf24      	itt	cs
 8007566:	4618      	movcs	r0, r3
 8007568:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	e791      	b.n	8007492 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800756e:	227f      	movs	r2, #127	; 0x7f
 8007570:	e7ad      	b.n	80074ce <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8007572:	7d5f      	ldrb	r7, [r3, #21]
 8007574:	4297      	cmp	r7, r2
 8007576:	d304      	bcc.n	8007582 <tcp_alloc+0x112>
 8007578:	d107      	bne.n	800758a <tcp_alloc+0x11a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800757a:	6a18      	ldr	r0, [r3, #32]
 800757c:	1a30      	subs	r0, r6, r0
 800757e:	4288      	cmp	r0, r1
 8007580:	d303      	bcc.n	800758a <tcp_alloc+0x11a>
      inactivity = tcp_ticks - pcb->tmr;
 8007582:	6a19      	ldr	r1, [r3, #32]
    if ((pcb->prio < mprio) ||
 8007584:	463a      	mov	r2, r7
      inactivity = tcp_ticks - pcb->tmr;
 8007586:	461c      	mov	r4, r3
 8007588:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	e7a4      	b.n	80074d8 <tcp_alloc+0x68>
 800758e:	bf00      	nop
 8007590:	20027d2c 	.word	0x20027d2c
 8007594:	20027d3c 	.word	0x20027d3c
 8007598:	20027d30 	.word	0x20027d30
 800759c:	0800774d 	.word	0x0800774d
 80075a0:	006ddd00 	.word	0x006ddd00
 80075a4:	2002436e 	.word	0x2002436e

080075a8 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80075a8:	2040      	movs	r0, #64	; 0x40
 80075aa:	f7ff bf61 	b.w	8007470 <tcp_alloc>
	...

080075b0 <tcp_close_shutdown>:
{
 80075b0:	b530      	push	{r4, r5, lr}
 80075b2:	460d      	mov	r5, r1
 80075b4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80075b6:	4604      	mov	r4, r0
 80075b8:	b930      	cbnz	r0, 80075c8 <tcp_close_shutdown+0x18>
 80075ba:	4b4a      	ldr	r3, [pc, #296]	; (80076e4 <tcp_close_shutdown+0x134>)
 80075bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80075c0:	4949      	ldr	r1, [pc, #292]	; (80076e8 <tcp_close_shutdown+0x138>)
 80075c2:	484a      	ldr	r0, [pc, #296]	; (80076ec <tcp_close_shutdown+0x13c>)
 80075c4:	f004 f810 	bl	800b5e8 <iprintf>
 80075c8:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	d03f      	beq.n	800764e <tcp_close_shutdown+0x9e>
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d001      	beq.n	80075d6 <tcp_close_shutdown+0x26>
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	d13b      	bne.n	800764e <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80075d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80075d8:	b91a      	cbnz	r2, 80075e2 <tcp_close_shutdown+0x32>
 80075da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80075dc:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 80075e0:	d035      	beq.n	800764e <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80075e2:	8b63      	ldrh	r3, [r4, #26]
 80075e4:	06db      	lsls	r3, r3, #27
 80075e6:	d406      	bmi.n	80075f6 <tcp_close_shutdown+0x46>
 80075e8:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <tcp_close_shutdown+0x134>)
 80075ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80075ee:	4940      	ldr	r1, [pc, #256]	; (80076f0 <tcp_close_shutdown+0x140>)
 80075f0:	483e      	ldr	r0, [pc, #248]	; (80076ec <tcp_close_shutdown+0x13c>)
 80075f2:	f003 fff9 	bl	800b5e8 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80075f6:	8b23      	ldrh	r3, [r4, #24]
 80075f8:	4620      	mov	r0, r4
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	8ae3      	ldrh	r3, [r4, #22]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	1d23      	adds	r3, r4, #4
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4623      	mov	r3, r4
 8007606:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007608:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800760a:	f002 fce7 	bl	8009fdc <tcp_rst>
      tcp_pcb_purge(pcb);
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff fd8a 	bl	8007128 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007614:	4a37      	ldr	r2, [pc, #220]	; (80076f4 <tcp_close_shutdown+0x144>)
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	429c      	cmp	r4, r3
 800761a:	d110      	bne.n	800763e <tcp_close_shutdown+0x8e>
 800761c:	68e3      	ldr	r3, [r4, #12]
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	2300      	movs	r3, #0
 8007622:	2201      	movs	r2, #1
 8007624:	60e3      	str	r3, [r4, #12]
 8007626:	4b34      	ldr	r3, [pc, #208]	; (80076f8 <tcp_close_shutdown+0x148>)
 8007628:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800762a:	4b34      	ldr	r3, [pc, #208]	; (80076fc <tcp_close_shutdown+0x14c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	429c      	cmp	r4, r3
 8007630:	d122      	bne.n	8007678 <tcp_close_shutdown+0xc8>
        tcp_trigger_input_pcb_close();
 8007632:	f001 fe45 	bl	80092c0 <tcp_trigger_input_pcb_close>
}
 8007636:	2000      	movs	r0, #0
 8007638:	b005      	add	sp, #20
 800763a:	bd30      	pop	{r4, r5, pc}
 800763c:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ee      	beq.n	8007620 <tcp_close_shutdown+0x70>
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	4294      	cmp	r4, r2
 8007646:	d1f9      	bne.n	800763c <tcp_close_shutdown+0x8c>
 8007648:	68e2      	ldr	r2, [r4, #12]
 800764a:	60da      	str	r2, [r3, #12]
 800764c:	e7e8      	b.n	8007620 <tcp_close_shutdown+0x70>
  switch (pcb->state) {
 800764e:	2b01      	cmp	r3, #1
 8007650:	d01f      	beq.n	8007692 <tcp_close_shutdown+0xe2>
 8007652:	d307      	bcc.n	8007664 <tcp_close_shutdown+0xb4>
 8007654:	2b02      	cmp	r3, #2
 8007656:	d03d      	beq.n	80076d4 <tcp_close_shutdown+0x124>
      return tcp_close_shutdown_fin(pcb);
 8007658:	4620      	mov	r0, r4
}
 800765a:	b005      	add	sp, #20
 800765c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8007660:	f7ff bada 	b.w	8006c18 <tcp_close_shutdown_fin>
      if (pcb->local_port != 0) {
 8007664:	8ae3      	ldrh	r3, [r4, #22]
 8007666:	b13b      	cbz	r3, 8007678 <tcp_close_shutdown+0xc8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007668:	4a25      	ldr	r2, [pc, #148]	; (8007700 <tcp_close_shutdown+0x150>)
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	429c      	cmp	r4, r3
 800766e:	d108      	bne.n	8007682 <tcp_close_shutdown+0xd2>
 8007670:	68e3      	ldr	r3, [r4, #12]
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff fb09 	bl	8006c90 <tcp_free>
      break;
 800767e:	e7da      	b.n	8007636 <tcp_close_shutdown+0x86>
 8007680:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f6      	beq.n	8007674 <tcp_close_shutdown+0xc4>
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	4294      	cmp	r4, r2
 800768a:	d1f9      	bne.n	8007680 <tcp_close_shutdown+0xd0>
 800768c:	68e2      	ldr	r2, [r4, #12]
 800768e:	60da      	str	r2, [r3, #12]
 8007690:	e7f0      	b.n	8007674 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007692:	491c      	ldr	r1, [pc, #112]	; (8007704 <tcp_close_shutdown+0x154>)
      pcb->listener = NULL;
 8007694:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007696:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800769a:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800769c:	b9a2      	cbnz	r2, 80076c8 <tcp_close_shutdown+0x118>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800769e:	3301      	adds	r3, #1
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d1f8      	bne.n	8007696 <tcp_close_shutdown+0xe6>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80076a4:	4621      	mov	r1, r4
 80076a6:	4818      	ldr	r0, [pc, #96]	; (8007708 <tcp_close_shutdown+0x158>)
 80076a8:	f7ff fd70 	bl	800718c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80076ac:	7d23      	ldrb	r3, [r4, #20]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d105      	bne.n	80076be <tcp_close_shutdown+0x10e>
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <tcp_close_shutdown+0x134>)
 80076b4:	22df      	movs	r2, #223	; 0xdf
 80076b6:	4915      	ldr	r1, [pc, #84]	; (800770c <tcp_close_shutdown+0x15c>)
 80076b8:	480c      	ldr	r0, [pc, #48]	; (80076ec <tcp_close_shutdown+0x13c>)
 80076ba:	f003 ff95 	bl	800b5e8 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80076be:	4621      	mov	r1, r4
 80076c0:	2002      	movs	r0, #2
 80076c2:	f7fe fd9d 	bl	8006200 <memp_free>
 80076c6:	e7b6      	b.n	8007636 <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 80076c8:	6fd5      	ldr	r5, [r2, #124]	; 0x7c
 80076ca:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 80076cc:	bf08      	it	eq
 80076ce:	67d0      	streq	r0, [r2, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80076d0:	68d2      	ldr	r2, [r2, #12]
 80076d2:	e7e3      	b.n	800769c <tcp_close_shutdown+0xec>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80076d4:	4621      	mov	r1, r4
 80076d6:	4807      	ldr	r0, [pc, #28]	; (80076f4 <tcp_close_shutdown+0x144>)
 80076d8:	f7ff fd58 	bl	800718c <tcp_pcb_remove>
 80076dc:	2201      	movs	r2, #1
 80076de:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <tcp_close_shutdown+0x148>)
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	e7c9      	b.n	8007678 <tcp_close_shutdown+0xc8>
 80076e4:	0800e22e 	.word	0x0800e22e
 80076e8:	0800e1dc 	.word	0x0800e1dc
 80076ec:	0800c5ae 	.word	0x0800c5ae
 80076f0:	0800e1fc 	.word	0x0800e1fc
 80076f4:	20027d2c 	.word	0x20027d2c
 80076f8:	20027d28 	.word	0x20027d28
 80076fc:	20027d40 	.word	0x20027d40
 8007700:	20027d38 	.word	0x20027d38
 8007704:	0800e388 	.word	0x0800e388
 8007708:	20027d34 	.word	0x20027d34
 800770c:	0800e215 	.word	0x0800e215

08007710 <tcp_close>:
{
 8007710:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007712:	b158      	cbz	r0, 800772c <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8007714:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8007716:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8007718:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800771a:	bf1e      	ittt	ne
 800771c:	8b43      	ldrhne	r3, [r0, #26]
 800771e:	f043 0310 	orrne.w	r3, r3, #16
 8007722:	8343      	strhne	r3, [r0, #26]
}
 8007724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8007728:	f7ff bf42 	b.w	80075b0 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <tcp_close+0x30>)
 800772e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007732:	4904      	ldr	r1, [pc, #16]	; (8007744 <tcp_close+0x34>)
 8007734:	4804      	ldr	r0, [pc, #16]	; (8007748 <tcp_close+0x38>)
 8007736:	f003 ff57 	bl	800b5e8 <iprintf>
}
 800773a:	f06f 000f 	mvn.w	r0, #15
 800773e:	bd08      	pop	{r3, pc}
 8007740:	0800e22e 	.word	0x0800e22e
 8007744:	0800e1c5 	.word	0x0800e1c5
 8007748:	0800c5ae 	.word	0x0800c5ae

0800774c <tcp_recv_null>:
{
 800774c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800774e:	4608      	mov	r0, r1
{
 8007750:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007752:	b949      	cbnz	r1, 8007768 <tcp_recv_null+0x1c>
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <tcp_recv_null+0x3c>)
 8007756:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800775a:	490c      	ldr	r1, [pc, #48]	; (800778c <tcp_recv_null+0x40>)
 800775c:	480c      	ldr	r0, [pc, #48]	; (8007790 <tcp_recv_null+0x44>)
 800775e:	f003 ff43 	bl	800b5e8 <iprintf>
 8007762:	f06f 000f 	mvn.w	r0, #15
 8007766:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8007768:	b13a      	cbz	r2, 800777a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800776a:	8911      	ldrh	r1, [r2, #8]
 800776c:	f7ff fb9e 	bl	8006eac <tcp_recved>
    pbuf_free(p);
 8007770:	4620      	mov	r0, r4
 8007772:	f7fe ff8d 	bl	8006690 <pbuf_free>
  return ERR_OK;
 8007776:	2000      	movs	r0, #0
 8007778:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1fb      	bne.n	8007776 <tcp_recv_null+0x2a>
}
 800777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007782:	f7ff bfc5 	b.w	8007710 <tcp_close>
 8007786:	bf00      	nop
 8007788:	0800e22e 	.word	0x0800e22e
 800778c:	0800e4bf 	.word	0x0800e4bf
 8007790:	0800c5ae 	.word	0x0800c5ae

08007794 <tcp_process_refused_data>:
{
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007796:	4604      	mov	r4, r0
 8007798:	b950      	cbnz	r0, 80077b0 <tcp_process_refused_data+0x1c>
 800779a:	f06f 050f 	mvn.w	r5, #15
 800779e:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <tcp_process_refused_data+0x80>)
 80077a0:	f240 6209 	movw	r2, #1545	; 0x609
 80077a4:	491c      	ldr	r1, [pc, #112]	; (8007818 <tcp_process_refused_data+0x84>)
 80077a6:	481d      	ldr	r0, [pc, #116]	; (800781c <tcp_process_refused_data+0x88>)
 80077a8:	f003 ff1e 	bl	800b5e8 <iprintf>
}
 80077ac:	4628      	mov	r0, r5
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 80077b0:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 80077b2:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80077b4:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
    u8_t refused_flags = pcb->refused_data->flags;
 80077b8:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80077ba:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80077bc:	b1dd      	cbz	r5, 80077f6 <tcp_process_refused_data+0x62>
 80077be:	4601      	mov	r1, r0
 80077c0:	4632      	mov	r2, r6
 80077c2:	6900      	ldr	r0, [r0, #16]
 80077c4:	47a8      	blx	r5
 80077c6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80077c8:	b9e0      	cbnz	r0, 8007804 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80077ca:	06bb      	lsls	r3, r7, #26
 80077cc:	d5ee      	bpl.n	80077ac <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80077ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80077d0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80077d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80077d8:	bf1c      	itt	ne
 80077da:	3301      	addne	r3, #1
 80077dc:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d0e4      	beq.n	80077ac <tcp_process_refused_data+0x18>
 80077e2:	2300      	movs	r3, #0
 80077e4:	4621      	mov	r1, r4
 80077e6:	6920      	ldr	r0, [r4, #16]
 80077e8:	461a      	mov	r2, r3
 80077ea:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80077ec:	300d      	adds	r0, #13
 80077ee:	d1dd      	bne.n	80077ac <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 80077f0:	f06f 050c 	mvn.w	r5, #12
 80077f4:	e7da      	b.n	80077ac <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80077f6:	4601      	mov	r1, r0
 80077f8:	462b      	mov	r3, r5
 80077fa:	4632      	mov	r2, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	f7ff ffa5 	bl	800774c <tcp_recv_null>
 8007802:	e7e0      	b.n	80077c6 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8007804:	f110 050d 	adds.w	r5, r0, #13
 8007808:	d0f2      	beq.n	80077f0 <tcp_process_refused_data+0x5c>
      pcb->refused_data = refused_data;
 800780a:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 800780c:	f06f 0504 	mvn.w	r5, #4
 8007810:	e7cc      	b.n	80077ac <tcp_process_refused_data+0x18>
 8007812:	bf00      	nop
 8007814:	0800e22e 	.word	0x0800e22e
 8007818:	0800e472 	.word	0x0800e472
 800781c:	0800c5ae 	.word	0x0800c5ae

08007820 <tcp_fasttmr>:
{
 8007820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8007824:	4d1b      	ldr	r5, [pc, #108]	; (8007894 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8007826:	4f1c      	ldr	r7, [pc, #112]	; (8007898 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8007828:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800782a:	4e1c      	ldr	r6, [pc, #112]	; (800789c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800782c:	3301      	adds	r3, #1
 800782e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8007830:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8007832:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007836:	b90c      	cbnz	r4, 800783c <tcp_fasttmr+0x1c>
}
 8007838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800783c:	782b      	ldrb	r3, [r5, #0]
 800783e:	7fa2      	ldrb	r2, [r4, #30]
 8007840:	429a      	cmp	r2, r3
 8007842:	d024      	beq.n	800788e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007844:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8007846:	8b63      	ldrh	r3, [r4, #26]
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d509      	bpl.n	8007860 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800784c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8007850:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8007852:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8007854:	f002 fc38 	bl	800a0c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007858:	8b63      	ldrh	r3, [r4, #26]
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8007860:	8b63      	ldrh	r3, [r4, #26]
 8007862:	071a      	lsls	r2, r3, #28
 8007864:	d505      	bpl.n	8007872 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007866:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800786a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800786c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800786e:	f7ff f9d3 	bl	8006c18 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8007872:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8007874:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007878:	b13b      	cbz	r3, 800788a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800787a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800787c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8007880:	f7ff ff88 	bl	8007794 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007884:	7833      	ldrb	r3, [r6, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1d2      	bne.n	8007830 <tcp_fasttmr+0x10>
{
 800788a:	464c      	mov	r4, r9
 800788c:	e7d3      	b.n	8007836 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800788e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8007892:	e7fa      	b.n	800788a <tcp_fasttmr+0x6a>
 8007894:	2002436e 	.word	0x2002436e
 8007898:	20027d2c 	.word	0x20027d2c
 800789c:	20027d28 	.word	0x20027d28

080078a0 <tcp_slowtmr>:
{
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80078a4:	4e95      	ldr	r6, [pc, #596]	; (8007afc <tcp_slowtmr+0x25c>)
{
 80078a6:	b087      	sub	sp, #28
      tcp_active_pcbs_changed = 0;
 80078a8:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007b30 <tcp_slowtmr+0x290>
  ++tcp_ticks;
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80078b2:	4b93      	ldr	r3, [pc, #588]	; (8007b00 <tcp_slowtmr+0x260>)
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	9304      	str	r3, [sp, #16]
 80078b8:	3201      	adds	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 80078bc:	4b91      	ldr	r3, [pc, #580]	; (8007b04 <tcp_slowtmr+0x264>)
  prev = NULL;
 80078be:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80078c2:	4f91      	ldr	r7, [pc, #580]	; (8007b08 <tcp_slowtmr+0x268>)
  pcb = tcp_active_pcbs;
 80078c4:	681c      	ldr	r4, [r3, #0]
 80078c6:	4698      	mov	r8, r3
  while (pcb != NULL) {
 80078c8:	b96c      	cbnz	r4, 80078e6 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80078ca:	4f90      	ldr	r7, [pc, #576]	; (8007b0c <tcp_slowtmr+0x26c>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078cc:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8007b08 <tcp_slowtmr+0x268>
  pcb = tcp_tw_pcbs;
 80078d0:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078d2:	f8df a260 	ldr.w	sl, [pc, #608]	; 8007b34 <tcp_slowtmr+0x294>
 80078d6:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8007b14 <tcp_slowtmr+0x274>
  while (pcb != NULL) {
 80078da:	2d00      	cmp	r5, #0
 80078dc:	f040 81c6 	bne.w	8007c6c <tcp_slowtmr+0x3cc>
}
 80078e0:	b007      	add	sp, #28
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80078e6:	7d23      	ldrb	r3, [r4, #20]
 80078e8:	b933      	cbnz	r3, 80078f8 <tcp_slowtmr+0x58>
 80078ea:	463b      	mov	r3, r7
 80078ec:	f240 42be 	movw	r2, #1214	; 0x4be
 80078f0:	4987      	ldr	r1, [pc, #540]	; (8007b10 <tcp_slowtmr+0x270>)
 80078f2:	4888      	ldr	r0, [pc, #544]	; (8007b14 <tcp_slowtmr+0x274>)
 80078f4:	f003 fe78 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80078f8:	7d23      	ldrb	r3, [r4, #20]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d106      	bne.n	800790c <tcp_slowtmr+0x6c>
 80078fe:	463b      	mov	r3, r7
 8007900:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007904:	4984      	ldr	r1, [pc, #528]	; (8007b18 <tcp_slowtmr+0x278>)
 8007906:	4883      	ldr	r0, [pc, #524]	; (8007b14 <tcp_slowtmr+0x274>)
 8007908:	f003 fe6e 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800790c:	7d23      	ldrb	r3, [r4, #20]
 800790e:	2b0a      	cmp	r3, #10
 8007910:	d106      	bne.n	8007920 <tcp_slowtmr+0x80>
 8007912:	463b      	mov	r3, r7
 8007914:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007918:	4980      	ldr	r1, [pc, #512]	; (8007b1c <tcp_slowtmr+0x27c>)
 800791a:	487e      	ldr	r0, [pc, #504]	; (8007b14 <tcp_slowtmr+0x274>)
 800791c:	f003 fe64 	bl	800b5e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007920:	9b04      	ldr	r3, [sp, #16]
 8007922:	7fa2      	ldrb	r2, [r4, #30]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d103      	bne.n	8007932 <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800792a:	68e5      	ldr	r5, [r4, #12]
 800792c:	46a1      	mov	r9, r4
 800792e:	462c      	mov	r4, r5
 8007930:	e7ca      	b.n	80078c8 <tcp_slowtmr+0x28>
    pcb->last_timer = tcp_timer_ctr;
 8007932:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007934:	7d23      	ldrb	r3, [r4, #20]
 8007936:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800793a:	2b02      	cmp	r3, #2
 800793c:	d102      	bne.n	8007944 <tcp_slowtmr+0xa4>
 800793e:	2a05      	cmp	r2, #5
 8007940:	f200 81cb 	bhi.w	8007cda <tcp_slowtmr+0x43a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007944:	2a0b      	cmp	r2, #11
 8007946:	d830      	bhi.n	80079aa <tcp_slowtmr+0x10a>
      if (pcb->persist_backoff > 0) {
 8007948:	f894 b099 	ldrb.w	fp, [r4, #153]	; 0x99
 800794c:	f1bb 0f00 	cmp.w	fp, #0
 8007950:	f000 80f2 	beq.w	8007b38 <tcp_slowtmr+0x298>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007954:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007956:	b133      	cbz	r3, 8007966 <tcp_slowtmr+0xc6>
 8007958:	463b      	mov	r3, r7
 800795a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800795e:	4970      	ldr	r1, [pc, #448]	; (8007b20 <tcp_slowtmr+0x280>)
 8007960:	486c      	ldr	r0, [pc, #432]	; (8007b14 <tcp_slowtmr+0x274>)
 8007962:	f003 fe41 	bl	800b5e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007966:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007968:	b933      	cbnz	r3, 8007978 <tcp_slowtmr+0xd8>
 800796a:	463b      	mov	r3, r7
 800796c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007970:	496c      	ldr	r1, [pc, #432]	; (8007b24 <tcp_slowtmr+0x284>)
 8007972:	4868      	ldr	r0, [pc, #416]	; (8007b14 <tcp_slowtmr+0x274>)
 8007974:	f003 fe38 	bl	800b5e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007978:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800797c:	2b0b      	cmp	r3, #11
 800797e:	d814      	bhi.n	80079aa <tcp_slowtmr+0x10a>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007980:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8007984:	4b68      	ldr	r3, [pc, #416]	; (8007b28 <tcp_slowtmr+0x288>)
 8007986:	4413      	add	r3, r2
 8007988:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800798c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8007990:	429a      	cmp	r2, r3
            pcb->persist_cnt++;
 8007992:	bf84      	itt	hi
 8007994:	3301      	addhi	r3, #1
 8007996:	f884 3098 	strbhi.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800799a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800799e:	4293      	cmp	r3, r2
 80079a0:	f080 808a 	bcs.w	8007ab8 <tcp_slowtmr+0x218>
    pcb_remove = 0;
 80079a4:	f04f 0b00 	mov.w	fp, #0
 80079a8:	e001      	b.n	80079ae <tcp_slowtmr+0x10e>
      ++pcb_remove;
 80079aa:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 80079ae:	7d23      	ldrb	r3, [r4, #20]
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d10b      	bne.n	80079cc <tcp_slowtmr+0x12c>
      if (pcb->flags & TF_RXCLOSED) {
 80079b4:	8b62      	ldrh	r2, [r4, #26]
 80079b6:	06d2      	lsls	r2, r2, #27
 80079b8:	d508      	bpl.n	80079cc <tcp_slowtmr+0x12c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079ba:	6832      	ldr	r2, [r6, #0]
 80079bc:	6a21      	ldr	r1, [r4, #32]
 80079be:	1a52      	subs	r2, r2, r1
 80079c0:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80079c2:	bf84      	itt	hi
 80079c4:	f10b 0b01 	addhi.w	fp, fp, #1
 80079c8:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80079cc:	7a65      	ldrb	r5, [r4, #9]
 80079ce:	f015 0508 	ands.w	r5, r5, #8
 80079d2:	d019      	beq.n	8007a08 <tcp_slowtmr+0x168>
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d002      	beq.n	80079de <tcp_slowtmr+0x13e>
        ((pcb->state == ESTABLISHED) ||
 80079d8:	2b07      	cmp	r3, #7
 80079da:	f040 810f 	bne.w	8007bfc <tcp_slowtmr+0x35c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80079de:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 80079e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079e6:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80079e8:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079ec:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80079ee:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079f2:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80079f4:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079f8:	4291      	cmp	r1, r2
 80079fa:	f240 80ed 	bls.w	8007bd8 <tcp_slowtmr+0x338>
        ++pcb_remove;
 80079fe:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8007a02:	2501      	movs	r5, #1
        ++pcb_remove;
 8007a04:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8007a08:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007a0a:	b163      	cbz	r3, 8007a26 <tcp_slowtmr+0x186>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	6a22      	ldr	r2, [r4, #32]
 8007a10:	1a9a      	subs	r2, r3, r2
 8007a12:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8007a1a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8007a1e:	d302      	bcc.n	8007a26 <tcp_slowtmr+0x186>
      tcp_free_ooseq(pcb);
 8007a20:	4620      	mov	r0, r4
 8007a22:	f7ff fb77 	bl	8007114 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8007a26:	7d23      	ldrb	r3, [r4, #20]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	f040 80e9 	bne.w	8007c00 <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a2e:	6833      	ldr	r3, [r6, #0]
 8007a30:	6a22      	ldr	r2, [r4, #32]
 8007a32:	1a9b      	subs	r3, r3, r2
 8007a34:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a36:	d803      	bhi.n	8007a40 <tcp_slowtmr+0x1a0>
    if (pcb_remove) {
 8007a38:	f1bb 0f00 	cmp.w	fp, #0
 8007a3c:	f000 80f5 	beq.w	8007c2a <tcp_slowtmr+0x38a>
      tcp_pcb_purge(pcb);
 8007a40:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8007a42:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8007a46:	f7ff fb6f 	bl	8007128 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007a4a:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 8007a4e:	f1b9 0f00 	cmp.w	r9, #0
 8007a52:	f000 80dd 	beq.w	8007c10 <tcp_slowtmr+0x370>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007a56:	429c      	cmp	r4, r3
 8007a58:	d106      	bne.n	8007a68 <tcp_slowtmr+0x1c8>
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	f240 526d 	movw	r2, #1389	; 0x56d
 8007a60:	4932      	ldr	r1, [pc, #200]	; (8007b2c <tcp_slowtmr+0x28c>)
 8007a62:	482c      	ldr	r0, [pc, #176]	; (8007b14 <tcp_slowtmr+0x274>)
 8007a64:	f003 fdc0 	bl	800b5e8 <iprintf>
        prev->next = pcb->next;
 8007a68:	68e3      	ldr	r3, [r4, #12]
 8007a6a:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8007a6e:	b15d      	cbz	r5, 8007a88 <tcp_slowtmr+0x1e8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007a70:	8b23      	ldrh	r3, [r4, #24]
 8007a72:	4620      	mov	r0, r4
 8007a74:	9302      	str	r3, [sp, #8]
 8007a76:	8ae3      	ldrh	r3, [r4, #22]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	1d23      	adds	r3, r4, #4
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4623      	mov	r3, r4
 8007a80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a82:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007a84:	f002 faaa 	bl	8009fdc <tcp_rst>
      err_arg = pcb->callback_arg;
 8007a88:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8007a8a:	4620      	mov	r0, r4
      pcb = pcb->next;
 8007a8c:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8007a8e:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8007a90:	f7ff f8fe 	bl	8006c90 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007a94:	2200      	movs	r2, #0
 8007a96:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007a9a:	f1bb 0f00 	cmp.w	fp, #0
 8007a9e:	d004      	beq.n	8007aaa <tcp_slowtmr+0x20a>
 8007aa0:	9b05      	ldr	r3, [sp, #20]
 8007aa2:	f06f 010c 	mvn.w	r1, #12
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8007aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f47f af04 	bne.w	80078bc <tcp_slowtmr+0x1c>
 8007ab4:	464c      	mov	r4, r9
 8007ab6:	e739      	b.n	800792c <tcp_slowtmr+0x8c>
            if (pcb->snd_wnd == 0) {
 8007ab8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007abc:	4620      	mov	r0, r4
            if (pcb->snd_wnd == 0) {
 8007abe:	b989      	cbnz	r1, 8007ae4 <tcp_slowtmr+0x244>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007ac0:	f002 fd0a 	bl	800a4d8 <tcp_zero_window_probe>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f47f af6d 	bne.w	80079a4 <tcp_slowtmr+0x104>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007aca:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 8007ace:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007ad2:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8007ad4:	f884 b098 	strb.w	fp, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007ad8:	f63f af64 	bhi.w	80079a4 <tcp_slowtmr+0x104>
                pcb->persist_backoff++;
 8007adc:	3301      	adds	r3, #1
 8007ade:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 8007ae2:	e764      	b.n	80079ae <tcp_slowtmr+0x10e>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007ae4:	f002 f82a 	bl	8009b3c <tcp_split_unsent_seg>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d1ee      	bne.n	8007aca <tcp_slowtmr+0x22a>
                if (tcp_output(pcb) == ERR_OK) {
 8007aec:	4620      	mov	r0, r4
 8007aee:	f002 faeb 	bl	800a0c8 <tcp_output>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f af56 	beq.w	80079a4 <tcp_slowtmr+0x104>
 8007af8:	e7e7      	b.n	8007aca <tcp_slowtmr+0x22a>
 8007afa:	bf00      	nop
 8007afc:	20027d30 	.word	0x20027d30
 8007b00:	2002436e 	.word	0x2002436e
 8007b04:	20027d2c 	.word	0x20027d2c
 8007b08:	0800e22e 	.word	0x0800e22e
 8007b0c:	20027d3c 	.word	0x20027d3c
 8007b10:	0800e572 	.word	0x0800e572
 8007b14:	0800c5ae 	.word	0x0800c5ae
 8007b18:	0800e59c 	.word	0x0800e59c
 8007b1c:	0800e5c6 	.word	0x0800e5c6
 8007b20:	0800e5f3 	.word	0x0800e5f3
 8007b24:	0800e625 	.word	0x0800e625
 8007b28:	0800e437 	.word	0x0800e437
 8007b2c:	0800e65a 	.word	0x0800e65a
 8007b30:	20027d28 	.word	0x20027d28
 8007b34:	0800e6af 	.word	0x0800e6af
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007b38:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	db05      	blt.n	8007b4c <tcp_slowtmr+0x2ac>
 8007b40:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007b44:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8007b46:	bf1c      	itt	ne
 8007b48:	3301      	addne	r3, #1
 8007b4a:	8623      	strhne	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8007b4c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8007b50:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007b54:	429a      	cmp	r2, r3
 8007b56:	f6ff af25 	blt.w	80079a4 <tcp_slowtmr+0x104>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f002 f982 	bl	8009e64 <tcp_rexmit_rto_prepare>
 8007b60:	b138      	cbz	r0, 8007b72 <tcp_slowtmr+0x2d2>
 8007b62:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f47f af1d 	bne.w	80079a4 <tcp_slowtmr+0x104>
 8007b6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f43f af19 	beq.w	80079a4 <tcp_slowtmr+0x104>
            if (pcb->state != SYN_SENT) {
 8007b72:	7d23      	ldrb	r3, [r4, #20]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d014      	beq.n	8007ba2 <tcp_slowtmr+0x302>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007b78:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8007b7c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007b80:	4957      	ldr	r1, [pc, #348]	; (8007ce0 <tcp_slowtmr+0x440>)
 8007b82:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007b86:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007b8a:	2a0c      	cmp	r2, #12
 8007b8c:	bf28      	it	cs
 8007b8e:	220c      	movcs	r2, #12
 8007b90:	5c8a      	ldrb	r2, [r1, r2]
 8007b92:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007b94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	bfa8      	it	ge
 8007b9c:	4613      	movge	r3, r2
 8007b9e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007ba2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
            pcb->rtime = 0;
 8007ba6:	2100      	movs	r1, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007ba8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007bac:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8007bae:	4293      	cmp	r3, r2
            pcb->rtime = 0;
 8007bb0:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->cwnd = pcb->mss;
 8007bb2:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8007bb6:	bf28      	it	cs
 8007bb8:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007bba:	0042      	lsls	r2, r0, #1
            pcb->bytes_acked = 0;
 8007bbc:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007bc0:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 8007bc2:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007bc4:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 8007bc6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007bca:	4293      	cmp	r3, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007bcc:	bf38      	it	cc
 8007bce:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8007bd2:	f002 fc23 	bl	800a41c <tcp_rexmit_rto_commit>
 8007bd6:	e6ea      	b.n	80079ae <tcp_slowtmr+0x10e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007bd8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8007bdc:	4a41      	ldr	r2, [pc, #260]	; (8007ce4 <tcp_slowtmr+0x444>)
 8007bde:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 8007be2:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007be6:	4299      	cmp	r1, r3
 8007be8:	d908      	bls.n	8007bfc <tcp_slowtmr+0x35c>
        err = tcp_keepalive(pcb);
 8007bea:	4620      	mov	r0, r4
 8007bec:	f002 fc4c 	bl	800a488 <tcp_keepalive>
        if (err == ERR_OK) {
 8007bf0:	b920      	cbnz	r0, 8007bfc <tcp_slowtmr+0x35c>
          pcb->keep_cnt_sent++;
 8007bf2:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8007bfc:	2500      	movs	r5, #0
 8007bfe:	e703      	b.n	8007a08 <tcp_slowtmr+0x168>
    if (pcb->state == LAST_ACK) {
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	f47f af19 	bne.w	8007a38 <tcp_slowtmr+0x198>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c06:	6833      	ldr	r3, [r6, #0]
 8007c08:	6a22      	ldr	r2, [r4, #32]
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	2bf0      	cmp	r3, #240	; 0xf0
 8007c0e:	e712      	b.n	8007a36 <tcp_slowtmr+0x196>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007c10:	429c      	cmp	r4, r3
 8007c12:	d006      	beq.n	8007c22 <tcp_slowtmr+0x382>
 8007c14:	463b      	mov	r3, r7
 8007c16:	f240 5271 	movw	r2, #1393	; 0x571
 8007c1a:	4933      	ldr	r1, [pc, #204]	; (8007ce8 <tcp_slowtmr+0x448>)
 8007c1c:	4833      	ldr	r0, [pc, #204]	; (8007cec <tcp_slowtmr+0x44c>)
 8007c1e:	f003 fce3 	bl	800b5e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007c22:	68e3      	ldr	r3, [r4, #12]
 8007c24:	f8c8 3000 	str.w	r3, [r8]
 8007c28:	e721      	b.n	8007a6e <tcp_slowtmr+0x1ce>
      ++prev->polltmr;
 8007c2a:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007c2c:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8007c2e:	3301      	adds	r3, #1
      pcb = pcb->next;
 8007c30:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8007c32:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8007c34:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8007c36:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007c38:	f63f ae78 	bhi.w	800792c <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8007c3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 8007c40:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8007c44:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8007c48:	b173      	cbz	r3, 8007c68 <tcp_slowtmr+0x3c8>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	6920      	ldr	r0, [r4, #16]
 8007c4e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8007c50:	f89a 3000 	ldrb.w	r3, [sl]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f47f ae31 	bne.w	80078bc <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f47f ae66 	bne.w	800792c <tcp_slowtmr+0x8c>
          tcp_output(prev);
 8007c60:	4620      	mov	r0, r4
 8007c62:	f002 fa31 	bl	800a0c8 <tcp_output>
 8007c66:	e661      	b.n	800792c <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8007c68:	4658      	mov	r0, fp
 8007c6a:	e7f1      	b.n	8007c50 <tcp_slowtmr+0x3b0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c6c:	7d2b      	ldrb	r3, [r5, #20]
 8007c6e:	2b0a      	cmp	r3, #10
 8007c70:	d006      	beq.n	8007c80 <tcp_slowtmr+0x3e0>
 8007c72:	4643      	mov	r3, r8
 8007c74:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007c78:	4651      	mov	r1, sl
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	f003 fcb4 	bl	800b5e8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c80:	6833      	ldr	r3, [r6, #0]
 8007c82:	6a2a      	ldr	r2, [r5, #32]
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	2bf0      	cmp	r3, #240	; 0xf0
 8007c88:	d815      	bhi.n	8007cb6 <tcp_slowtmr+0x416>
      pcb = pcb->next;
 8007c8a:	462c      	mov	r4, r5
 8007c8c:	68ed      	ldr	r5, [r5, #12]
 8007c8e:	e624      	b.n	80078da <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	429d      	cmp	r5, r3
 8007c94:	d106      	bne.n	8007ca4 <tcp_slowtmr+0x404>
 8007c96:	4643      	mov	r3, r8
 8007c98:	f240 52af 	movw	r2, #1455	; 0x5af
 8007c9c:	4914      	ldr	r1, [pc, #80]	; (8007cf0 <tcp_slowtmr+0x450>)
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f003 fca2 	bl	800b5e8 <iprintf>
        prev->next = pcb->next;
 8007ca4:	68eb      	ldr	r3, [r5, #12]
 8007ca6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8007ca8:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7fe ffef 	bl	8006c90 <tcp_free>
      pcb = pcb->next;
 8007cb2:	465d      	mov	r5, fp
 8007cb4:	e611      	b.n	80078da <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f7ff fa36 	bl	8007128 <tcp_pcb_purge>
      if (prev != NULL) {
 8007cbc:	2c00      	cmp	r4, #0
 8007cbe:	d1e7      	bne.n	8007c90 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	d006      	beq.n	8007cd4 <tcp_slowtmr+0x434>
 8007cc6:	4643      	mov	r3, r8
 8007cc8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <tcp_slowtmr+0x454>)
 8007cce:	4648      	mov	r0, r9
 8007cd0:	f003 fc8a 	bl	800b5e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007cd4:	68eb      	ldr	r3, [r5, #12]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	e7e6      	b.n	8007ca8 <tcp_slowtmr+0x408>
      ++pcb_remove;
 8007cda:	f04f 0b01 	mov.w	fp, #1
 8007cde:	e675      	b.n	80079cc <tcp_slowtmr+0x12c>
 8007ce0:	0800e17a 	.word	0x0800e17a
 8007ce4:	000124f8 	.word	0x000124f8
 8007ce8:	0800e685 	.word	0x0800e685
 8007cec:	0800c5ae 	.word	0x0800c5ae
 8007cf0:	0800e6de 	.word	0x0800e6de
 8007cf4:	0800e705 	.word	0x0800e705

08007cf8 <tcp_tmr>:
{
 8007cf8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8007cfa:	f7ff fd91 	bl	8007820 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8007cfe:	4a06      	ldr	r2, [pc, #24]	; (8007d18 <tcp_tmr+0x20>)
 8007d00:	7813      	ldrb	r3, [r2, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	7013      	strb	r3, [r2, #0]
 8007d08:	07db      	lsls	r3, r3, #31
 8007d0a:	d503      	bpl.n	8007d14 <tcp_tmr+0x1c>
}
 8007d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8007d10:	f7ff bdc6 	b.w	80078a0 <tcp_slowtmr>
 8007d14:	bd08      	pop	{r3, pc}
 8007d16:	bf00      	nop
 8007d18:	2002436d 	.word	0x2002436d

08007d1c <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8007d1c:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <tcp_get_next_optbyte+0x28>)
 8007d1e:	8813      	ldrh	r3, [r2, #0]
 8007d20:	1c59      	adds	r1, r3, #1
 8007d22:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8007d24:	4a08      	ldr	r2, [pc, #32]	; (8007d48 <tcp_get_next_optbyte+0x2c>)
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	b11a      	cbz	r2, 8007d32 <tcp_get_next_optbyte+0x16>
 8007d2a:	4908      	ldr	r1, [pc, #32]	; (8007d4c <tcp_get_next_optbyte+0x30>)
 8007d2c:	8809      	ldrh	r1, [r1, #0]
 8007d2e:	428b      	cmp	r3, r1
 8007d30:	d204      	bcs.n	8007d3c <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8007d32:	4a07      	ldr	r2, [pc, #28]	; (8007d50 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	4413      	add	r3, r2
 8007d38:	7d18      	ldrb	r0, [r3, #20]
 8007d3a:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8007d3c:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8007d42:	4770      	bx	lr
 8007d44:	20024398 	.word	0x20024398
 8007d48:	200243a4 	.word	0x200243a4
 8007d4c:	200243a0 	.word	0x200243a0
 8007d50:	2002439c 	.word	0x2002439c

08007d54 <tcp_oos_insert_segment>:
{
 8007d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d58:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	b930      	cbnz	r0, 8007d6c <tcp_oos_insert_segment+0x18>
 8007d5e:	4b1f      	ldr	r3, [pc, #124]	; (8007ddc <tcp_oos_insert_segment+0x88>)
 8007d60:	f240 421f 	movw	r2, #1055	; 0x41f
 8007d64:	491e      	ldr	r1, [pc, #120]	; (8007de0 <tcp_oos_insert_segment+0x8c>)
 8007d66:	481f      	ldr	r0, [pc, #124]	; (8007de4 <tcp_oos_insert_segment+0x90>)
 8007d68:	f003 fc3e 	bl	800b5e8 <iprintf>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007d6c:	68eb      	ldr	r3, [r5, #12]
 8007d6e:	8998      	ldrh	r0, [r3, #12]
 8007d70:	f7fc fd20 	bl	80047b4 <lwip_htons>
 8007d74:	07c2      	lsls	r2, r0, #31
 8007d76:	d415      	bmi.n	8007da4 <tcp_oos_insert_segment+0x50>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007d78:	4e1b      	ldr	r6, [pc, #108]	; (8007de8 <tcp_oos_insert_segment+0x94>)
    while (next &&
 8007d7a:	b1bc      	cbz	r4, 8007dac <tcp_oos_insert_segment+0x58>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007d7c:	68e7      	ldr	r7, [r4, #12]
 8007d7e:	6830      	ldr	r0, [r6, #0]
 8007d80:	892b      	ldrh	r3, [r5, #8]
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	8922      	ldrh	r2, [r4, #8]
 8007d86:	4403      	add	r3, r0
 8007d88:	440a      	add	r2, r1
 8007d8a:	1a9a      	subs	r2, r3, r2
    while (next &&
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	da10      	bge.n	8007db2 <tcp_oos_insert_segment+0x5e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007d90:	1a5b      	subs	r3, r3, r1
    if (next &&
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dd0a      	ble.n	8007dac <tcp_oos_insert_segment+0x58>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007d96:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8007d98:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007d9a:	b289      	uxth	r1, r1
 8007d9c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007d9e:	f7fe fd75 	bl	800688c <pbuf_realloc>
 8007da2:	e003      	b.n	8007dac <tcp_oos_insert_segment+0x58>
    tcp_segs_free(next);
 8007da4:	4620      	mov	r0, r4
    next = NULL;
 8007da6:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8007da8:	f7ff f8ca 	bl	8006f40 <tcp_segs_free>
  cseg->next = next;
 8007dac:	602c      	str	r4, [r5, #0]
}
 8007dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007db2:	89b8      	ldrh	r0, [r7, #12]
 8007db4:	f7fc fcfe 	bl	80047b4 <lwip_htons>
 8007db8:	07c3      	lsls	r3, r0, #31
 8007dba:	d509      	bpl.n	8007dd0 <tcp_oos_insert_segment+0x7c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007dbc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8007dc6:	f7fc fcf5 	bl	80047b4 <lwip_htons>
 8007dca:	4338      	orrs	r0, r7
 8007dcc:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8007dd0:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f7ff f8a6 	bl	8006f24 <tcp_seg_free>
      next = next->next;
 8007dd8:	463c      	mov	r4, r7
 8007dda:	e7ce      	b.n	8007d7a <tcp_oos_insert_segment+0x26>
 8007ddc:	0800e9a4 	.word	0x0800e9a4
 8007de0:	0800e9d6 	.word	0x0800e9d6
 8007de4:	0800c5ae 	.word	0x0800c5ae
 8007de8:	20024394 	.word	0x20024394

08007dec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8007dee:	4607      	mov	r7, r0
 8007df0:	b930      	cbnz	r0, 8007e00 <tcp_parseopt+0x14>
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <tcp_parseopt+0x7c>)
 8007df4:	f240 727d 	movw	r2, #1917	; 0x77d
 8007df8:	491c      	ldr	r1, [pc, #112]	; (8007e6c <tcp_parseopt+0x80>)
 8007dfa:	481d      	ldr	r0, [pc, #116]	; (8007e70 <tcp_parseopt+0x84>)
 8007dfc:	f003 fbf4 	bl	800b5e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007e00:	4e1c      	ldr	r6, [pc, #112]	; (8007e74 <tcp_parseopt+0x88>)
 8007e02:	8833      	ldrh	r3, [r6, #0]
 8007e04:	b133      	cbz	r3, 8007e14 <tcp_parseopt+0x28>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007e06:	4d1c      	ldr	r5, [pc, #112]	; (8007e78 <tcp_parseopt+0x8c>)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	802b      	strh	r3, [r5, #0]
 8007e0c:	8834      	ldrh	r4, [r6, #0]
 8007e0e:	882b      	ldrh	r3, [r5, #0]
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	d300      	bcc.n	8007e16 <tcp_parseopt+0x2a>
 8007e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_get_next_optbyte();
 8007e16:	f7ff ff81 	bl	8007d1c <tcp_get_next_optbyte>
      switch (opt) {
 8007e1a:	2801      	cmp	r0, #1
 8007e1c:	d0f6      	beq.n	8007e0c <tcp_parseopt+0x20>
 8007e1e:	d3f9      	bcc.n	8007e14 <tcp_parseopt+0x28>
 8007e20:	2802      	cmp	r0, #2
 8007e22:	d117      	bne.n	8007e54 <tcp_parseopt+0x68>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007e24:	f7ff ff7a 	bl	8007d1c <tcp_get_next_optbyte>
 8007e28:	2804      	cmp	r0, #4
 8007e2a:	d1f3      	bne.n	8007e14 <tcp_parseopt+0x28>
 8007e2c:	882b      	ldrh	r3, [r5, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	daef      	bge.n	8007e14 <tcp_parseopt+0x28>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8007e34:	f7ff ff72 	bl	8007d1c <tcp_get_next_optbyte>
 8007e38:	0200      	lsls	r0, r0, #8
 8007e3a:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8007e3c:	f7ff ff6e 	bl	8007d1c <tcp_get_next_optbyte>
 8007e40:	4320      	orrs	r0, r4
 8007e42:	b280      	uxth	r0, r0
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007e44:	1e43      	subs	r3, r0, #1
 8007e46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007e4a:	bf28      	it	cs
 8007e4c:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8007e50:	8678      	strh	r0, [r7, #50]	; 0x32
 8007e52:	e7db      	b.n	8007e0c <tcp_parseopt+0x20>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8007e54:	f7ff ff62 	bl	8007d1c <tcp_get_next_optbyte>
          if (data < 2) {
 8007e58:	2801      	cmp	r0, #1
 8007e5a:	d9db      	bls.n	8007e14 <tcp_parseopt+0x28>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8007e5c:	882b      	ldrh	r3, [r5, #0]
 8007e5e:	3b02      	subs	r3, #2
 8007e60:	4418      	add	r0, r3
 8007e62:	8028      	strh	r0, [r5, #0]
 8007e64:	e7d2      	b.n	8007e0c <tcp_parseopt+0x20>
 8007e66:	bf00      	nop
 8007e68:	0800e9a4 	.word	0x0800e9a4
 8007e6c:	0800e9fb 	.word	0x0800e9fb
 8007e70:	0800c5ae 	.word	0x0800c5ae
 8007e74:	200243a8 	.word	0x200243a8
 8007e78:	20024398 	.word	0x20024398

08007e7c <tcp_input_delayed_close>:
{
 8007e7c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007e7e:	4604      	mov	r4, r0
 8007e80:	b930      	cbnz	r0, 8007e90 <tcp_input_delayed_close+0x14>
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <tcp_input_delayed_close+0x44>)
 8007e84:	f240 225a 	movw	r2, #602	; 0x25a
 8007e88:	490e      	ldr	r1, [pc, #56]	; (8007ec4 <tcp_input_delayed_close+0x48>)
 8007e8a:	480f      	ldr	r0, [pc, #60]	; (8007ec8 <tcp_input_delayed_close+0x4c>)
 8007e8c:	f003 fbac 	bl	800b5e8 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8007e90:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <tcp_input_delayed_close+0x50>)
 8007e92:	7818      	ldrb	r0, [r3, #0]
 8007e94:	f010 0010 	ands.w	r0, r0, #16
 8007e98:	d011      	beq.n	8007ebe <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007e9a:	8b63      	ldrh	r3, [r4, #26]
 8007e9c:	06db      	lsls	r3, r3, #27
 8007e9e:	d406      	bmi.n	8007eae <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007ea0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007ea4:	b11b      	cbz	r3, 8007eae <tcp_input_delayed_close+0x32>
 8007ea6:	f06f 010e 	mvn.w	r1, #14
 8007eaa:	6920      	ldr	r0, [r4, #16]
 8007eac:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4807      	ldr	r0, [pc, #28]	; (8007ed0 <tcp_input_delayed_close+0x54>)
 8007eb2:	f7ff f96b 	bl	800718c <tcp_pcb_remove>
    tcp_free(pcb);
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7fe feea 	bl	8006c90 <tcp_free>
 8007ebc:	2001      	movs	r0, #1
}
 8007ebe:	bd10      	pop	{r4, pc}
 8007ec0:	0800e9a4 	.word	0x0800e9a4
 8007ec4:	0800e97f 	.word	0x0800e97f
 8007ec8:	0800c5ae 	.word	0x0800c5ae
 8007ecc:	20024390 	.word	0x20024390
 8007ed0:	20027d2c 	.word	0x20027d2c

08007ed4 <tcp_free_acked_segments.isra.2>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8007ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	4606      	mov	r6, r0
 8007eda:	4617      	mov	r7, r2
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007edc:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007ede:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8007f7c <tcp_free_acked_segments.isra.2+0xa8>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007ee2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007f80 <tcp_free_acked_segments.isra.2+0xac>
 8007ee6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007f84 <tcp_free_acked_segments.isra.2+0xb0>
  while (seg_list != NULL &&
 8007eea:	b1ac      	cbz	r4, 8007f18 <tcp_free_acked_segments.isra.2+0x44>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007eec:	68e3      	ldr	r3, [r4, #12]
 8007eee:	6858      	ldr	r0, [r3, #4]
 8007ef0:	f7fc fc63 	bl	80047ba <lwip_htonl>
 8007ef4:	68e3      	ldr	r3, [r4, #12]
 8007ef6:	4683      	mov	fp, r0
 8007ef8:	8925      	ldrh	r5, [r4, #8]
 8007efa:	8998      	ldrh	r0, [r3, #12]
 8007efc:	f7fc fc5a 	bl	80047b4 <lwip_htons>
 8007f00:	f8d9 3000 	ldr.w	r3, [r9]
 8007f04:	f010 0003 	ands.w	r0, r0, #3
 8007f08:	eba5 0503 	sub.w	r5, r5, r3
 8007f0c:	bf18      	it	ne
 8007f0e:	2001      	movne	r0, #1
 8007f10:	445d      	add	r5, fp
 8007f12:	4405      	add	r5, r0
  while (seg_list != NULL &&
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	dd02      	ble.n	8007f1e <tcp_free_acked_segments.isra.2+0x4a>
}
 8007f18:	4620      	mov	r0, r4
 8007f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    clen = pbuf_clen(next->p);
 8007f1e:	6860      	ldr	r0, [r4, #4]
    seg_list = seg_list->next;
 8007f20:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 8007f22:	f7fe fd0b 	bl	800693c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007f26:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 8007f28:	4683      	mov	fp, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007f2a:	4283      	cmp	r3, r0
 8007f2c:	d206      	bcs.n	8007f3c <tcp_free_acked_segments.isra.2+0x68>
 8007f2e:	4643      	mov	r3, r8
 8007f30:	f240 4257 	movw	r2, #1111	; 0x457
 8007f34:	4651      	mov	r1, sl
 8007f36:	480e      	ldr	r0, [pc, #56]	; (8007f70 <tcp_free_acked_segments.isra.2+0x9c>)
 8007f38:	f003 fb56 	bl	800b5e8 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f3c:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007f3e:	4a0d      	ldr	r2, [pc, #52]	; (8007f74 <tcp_free_acked_segments.isra.2+0xa0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f40:	eba0 000b 	sub.w	r0, r0, fp
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007f44:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f46:	8030      	strh	r0, [r6, #0]
    tcp_seg_free(next);
 8007f48:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007f4a:	8923      	ldrh	r3, [r4, #8]
 8007f4c:	440b      	add	r3, r1
 8007f4e:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8007f50:	f7fe ffe8 	bl	8006f24 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8007f54:	8833      	ldrh	r3, [r6, #0]
 8007f56:	b14b      	cbz	r3, 8007f6c <tcp_free_acked_segments.isra.2+0x98>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007f58:	b945      	cbnz	r5, 8007f6c <tcp_free_acked_segments.isra.2+0x98>
 8007f5a:	b93f      	cbnz	r7, 8007f6c <tcp_free_acked_segments.isra.2+0x98>
 8007f5c:	463d      	mov	r5, r7
 8007f5e:	4643      	mov	r3, r8
 8007f60:	f240 4262 	movw	r2, #1122	; 0x462
 8007f64:	4904      	ldr	r1, [pc, #16]	; (8007f78 <tcp_free_acked_segments.isra.2+0xa4>)
 8007f66:	4802      	ldr	r0, [pc, #8]	; (8007f70 <tcp_free_acked_segments.isra.2+0x9c>)
 8007f68:	f003 fb3e 	bl	800b5e8 <iprintf>
 8007f6c:	462c      	mov	r4, r5
 8007f6e:	e7bc      	b.n	8007eea <tcp_free_acked_segments.isra.2+0x16>
 8007f70:	0800c5ae 	.word	0x0800c5ae
 8007f74:	20024388 	.word	0x20024388
 8007f78:	0800e791 	.word	0x0800e791
 8007f7c:	20024370 	.word	0x20024370
 8007f80:	0800e9a4 	.word	0x0800e9a4
 8007f84:	0800e769 	.word	0x0800e769

08007f88 <tcp_receive>:
{
 8007f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	b930      	cbnz	r0, 8007f9e <tcp_receive+0x16>
 8007f90:	4b3a      	ldr	r3, [pc, #232]	; (800807c <tcp_receive+0xf4>)
 8007f92:	f240 427b 	movw	r2, #1147	; 0x47b
 8007f96:	493a      	ldr	r1, [pc, #232]	; (8008080 <tcp_receive+0xf8>)
 8007f98:	483a      	ldr	r0, [pc, #232]	; (8008084 <tcp_receive+0xfc>)
 8007f9a:	f003 fb25 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f9e:	7d23      	ldrb	r3, [r4, #20]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d806      	bhi.n	8007fb2 <tcp_receive+0x2a>
 8007fa4:	4b35      	ldr	r3, [pc, #212]	; (800807c <tcp_receive+0xf4>)
 8007fa6:	f240 427c 	movw	r2, #1148	; 0x47c
 8007faa:	4937      	ldr	r1, [pc, #220]	; (8008088 <tcp_receive+0x100>)
 8007fac:	4835      	ldr	r0, [pc, #212]	; (8008084 <tcp_receive+0xfc>)
 8007fae:	f003 fb1b 	bl	800b5e8 <iprintf>
  if (flags & TCP_ACK) {
 8007fb2:	4b36      	ldr	r3, [pc, #216]	; (800808c <tcp_receive+0x104>)
 8007fb4:	4e36      	ldr	r6, [pc, #216]	; (8008090 <tcp_receive+0x108>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	4f36      	ldr	r7, [pc, #216]	; (8008094 <tcp_receive+0x10c>)
 8007fba:	f013 0f10 	tst.w	r3, #16
 8007fbe:	f000 8095 	beq.w	80080ec <tcp_receive+0x164>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007fc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007fc4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007fc6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007fca:	1ad5      	subs	r5, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	4d31      	ldr	r5, [pc, #196]	; (8008098 <tcp_receive+0x110>)
 8007fd2:	db0d      	blt.n	8007ff0 <tcp_receive+0x68>
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d103      	bne.n	8007fe0 <tcp_receive+0x58>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007fd8:	682a      	ldr	r2, [r5, #0]
 8007fda:	1a82      	subs	r2, r0, r2
 8007fdc:	2a00      	cmp	r2, #0
 8007fde:	db07      	blt.n	8007ff0 <tcp_receive+0x68>
 8007fe0:	682a      	ldr	r2, [r5, #0]
 8007fe2:	4290      	cmp	r0, r2
 8007fe4:	d112      	bne.n	800800c <tcp_receive+0x84>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007fe6:	4a2d      	ldr	r2, [pc, #180]	; (800809c <tcp_receive+0x114>)
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	89d2      	ldrh	r2, [r2, #14]
 8007fec:	428a      	cmp	r2, r1
 8007fee:	d90d      	bls.n	800800c <tcp_receive+0x84>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007ff0:	4a2a      	ldr	r2, [pc, #168]	; (800809c <tcp_receive+0x114>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007ff2:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno;
 8007ffa:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007ffc:	4596      	cmp	lr, r2
      pcb->snd_wl2 = ackno;
 8007ffe:	682b      	ldr	r3, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008000:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008004:	bf38      	it	cc
 8008006:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl2 = ackno;
 800800a:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800800c:	682a      	ldr	r2, [r5, #0]
 800800e:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8008012:	eba2 030e 	sub.w	r3, r2, lr
 8008016:	2b00      	cmp	r3, #0
 8008018:	f300 8180 	bgt.w	800831c <tcp_receive+0x394>
      if (tcplen == 0) {
 800801c:	883b      	ldrh	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 83d1 	bne.w	80087c6 <tcp_receive+0x83e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008024:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008026:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800802a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802c:	4403      	add	r3, r0
 800802e:	4299      	cmp	r1, r3
 8008030:	f040 83c9 	bne.w	80087c6 <tcp_receive+0x83e>
          if (pcb->rtime >= 0) {
 8008034:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8008038:	2b00      	cmp	r3, #0
 800803a:	f2c0 83c4 	blt.w	80087c6 <tcp_receive+0x83e>
            if (pcb->lastack == ackno) {
 800803e:	4572      	cmp	r2, lr
 8008040:	f040 83c1 	bne.w	80087c6 <tcp_receive+0x83e>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008048:	1c53      	adds	r3, r2, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800804e:	bf38      	it	cc
 8008050:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8008054:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008058:	2b03      	cmp	r3, #3
 800805a:	d921      	bls.n	80080a0 <tcp_receive+0x118>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800805c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008060:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008062:	4413      	add	r3, r2
 8008064:	b29b      	uxth	r3, r3
 8008066:	429a      	cmp	r2, r3
 8008068:	bf88      	it	hi
 800806a:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800806e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8008072:	4620      	mov	r0, r4
 8008074:	f001 ff7a 	bl	8009f6c <tcp_rexmit_fast>
 8008078:	e013      	b.n	80080a2 <tcp_receive+0x11a>
 800807a:	bf00      	nop
 800807c:	0800e9a4 	.word	0x0800e9a4
 8008080:	0800ea15 	.word	0x0800ea15
 8008084:	0800c5ae 	.word	0x0800c5ae
 8008088:	0800ea2e 	.word	0x0800ea2e
 800808c:	20024374 	.word	0x20024374
 8008090:	20024394 	.word	0x20024394
 8008094:	200243aa 	.word	0x200243aa
 8008098:	20024370 	.word	0x20024370
 800809c:	2002439c 	.word	0x2002439c
              if (pcb->dupacks >= 3) {
 80080a0:	d0e7      	beq.n	8008072 <tcp_receive+0xea>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80080a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80080a4:	b312      	cbz	r2, 80080ec <tcp_receive+0x164>
 80080a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080a8:	6829      	ldr	r1, [r5, #0]
 80080aa:	1a5b      	subs	r3, r3, r1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da1d      	bge.n	80080ec <tcp_receive+0x164>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80080b0:	4b91      	ldr	r3, [pc, #580]	; (80082f8 <tcp_receive+0x370>)
      m = (s16_t)(m - (pcb->sa >> 3));
 80080b2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	1a89      	subs	r1, r1, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 80080ba:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = (s16_t)(m - (pcb->sa >> 3));
 80080be:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 80080c2:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = (s16_t)(m - (pcb->sa >> 3));
 80080c6:	b289      	uxth	r1, r1
 80080c8:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 80080ca:	4408      	add	r0, r1
      if (m < 0) {
 80080cc:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 80080ce:	b200      	sxth	r0, r0
        m = (s16_t) - m;
 80080d0:	bfb8      	it	lt
 80080d2:	4249      	neglt	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 80080d4:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 80080d6:	bfb8      	it	lt
 80080d8:	b20b      	sxthlt	r3, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 80080da:	4413      	add	r3, r2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80080e0:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80080e4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80080ec:	8838      	ldrh	r0, [r7, #0]
 80080ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f000 835c 	beq.w	80087ae <tcp_receive+0x826>
 80080f6:	7d23      	ldrb	r3, [r4, #20]
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	f200 8358 	bhi.w	80087ae <tcp_receive+0x826>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80080fe:	6833      	ldr	r3, [r6, #0]
 8008100:	1ad5      	subs	r5, r2, r3
 8008102:	2d01      	cmp	r5, #1
 8008104:	f100 81a5 	bmi.w	8008452 <tcp_receive+0x4ca>
 8008108:	f1c3 0101 	rsb	r1, r3, #1
 800810c:	1a09      	subs	r1, r1, r0
 800810e:	4411      	add	r1, r2
 8008110:	2900      	cmp	r1, #0
 8008112:	f300 819e 	bgt.w	8008452 <tcp_receive+0x4ca>
      struct pbuf *p = inseg.p;
 8008116:	4b79      	ldr	r3, [pc, #484]	; (80082fc <tcp_receive+0x374>)
 8008118:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800811c:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800811e:	f1b9 0f00 	cmp.w	r9, #0
 8008122:	d106      	bne.n	8008132 <tcp_receive+0x1aa>
 8008124:	4b76      	ldr	r3, [pc, #472]	; (8008300 <tcp_receive+0x378>)
 8008126:	f240 5294 	movw	r2, #1428	; 0x594
 800812a:	4976      	ldr	r1, [pc, #472]	; (8008304 <tcp_receive+0x37c>)
 800812c:	4876      	ldr	r0, [pc, #472]	; (8008308 <tcp_receive+0x380>)
 800812e:	f003 fa5b 	bl	800b5e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008132:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008136:	429d      	cmp	r5, r3
 8008138:	d906      	bls.n	8008148 <tcp_receive+0x1c0>
 800813a:	4b71      	ldr	r3, [pc, #452]	; (8008300 <tcp_receive+0x378>)
 800813c:	f240 5295 	movw	r2, #1429	; 0x595
 8008140:	4972      	ldr	r1, [pc, #456]	; (800830c <tcp_receive+0x384>)
 8008142:	4871      	ldr	r0, [pc, #452]	; (8008308 <tcp_receive+0x380>)
 8008144:	f003 fa50 	bl	800b5e8 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008148:	f8d8 3004 	ldr.w	r3, [r8, #4]
      off = (u16_t)off32;
 800814c:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800814e:	891b      	ldrh	r3, [r3, #8]
 8008150:	42ab      	cmp	r3, r5
 8008152:	d206      	bcs.n	8008162 <tcp_receive+0x1da>
 8008154:	4b6a      	ldr	r3, [pc, #424]	; (8008300 <tcp_receive+0x378>)
 8008156:	f240 5297 	movw	r2, #1431	; 0x597
 800815a:	496d      	ldr	r1, [pc, #436]	; (8008310 <tcp_receive+0x388>)
 800815c:	486a      	ldr	r0, [pc, #424]	; (8008308 <tcp_receive+0x380>)
 800815e:	f003 fa43 	bl	800b5e8 <iprintf>
      inseg.len -= off;
 8008162:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        p->len = 0;
 8008166:	2100      	movs	r1, #0
      inseg.len -= off;
 8008168:	1b5b      	subs	r3, r3, r5
 800816a:	f8a8 3008 	strh.w	r3, [r8, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800816e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008172:	891b      	ldrh	r3, [r3, #8]
 8008174:	1b5b      	subs	r3, r3, r5
 8008176:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8008178:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800817c:	4295      	cmp	r5, r2
 800817e:	f200 815f 	bhi.w	8008440 <tcp_receive+0x4b8>
      pbuf_remove_header(p, off);
 8008182:	4629      	mov	r1, r5
 8008184:	4648      	mov	r0, r9
 8008186:	f7fe fa4f 	bl	8006628 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800818a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800818c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008194:	6833      	ldr	r3, [r6, #0]
 8008196:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008198:	1a99      	subs	r1, r3, r2
 800819a:	2900      	cmp	r1, #0
 800819c:	f2c0 8232 	blt.w	8008604 <tcp_receive+0x67c>
 80081a0:	1c58      	adds	r0, r3, #1
 80081a2:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 80081a4:	1a81      	subs	r1, r0, r2
 80081a6:	1b49      	subs	r1, r1, r5
 80081a8:	2900      	cmp	r1, #0
 80081aa:	f300 822b 	bgt.w	8008604 <tcp_receive+0x67c>
      if (pcb->rcv_nxt == seqno) {
 80081ae:	4293      	cmp	r3, r2
 80081b0:	f040 8222 	bne.w	80085f8 <tcp_receive+0x670>
        tcplen = TCP_TCPLEN(&inseg);
 80081b4:	4d51      	ldr	r5, [pc, #324]	; (80082fc <tcp_receive+0x374>)
 80081b6:	68eb      	ldr	r3, [r5, #12]
 80081b8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80081bc:	8998      	ldrh	r0, [r3, #12]
 80081be:	f7fc faf9 	bl	80047b4 <lwip_htons>
 80081c2:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 80081c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 80081c8:	bf18      	it	ne
 80081ca:	2001      	movne	r0, #1
 80081cc:	4440      	add	r0, r8
 80081ce:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 80081d0:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 80081d2:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 80081d4:	d241      	bcs.n	800825a <tcp_receive+0x2d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80081d6:	68eb      	ldr	r3, [r5, #12]
 80081d8:	8998      	ldrh	r0, [r3, #12]
 80081da:	f7fc faeb 	bl	80047b4 <lwip_htons>
 80081de:	07c2      	lsls	r2, r0, #31
 80081e0:	d510      	bpl.n	8008204 <tcp_receive+0x27c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80081e2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80081e6:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80081ea:	4640      	mov	r0, r8
 80081ec:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80081f0:	f7fc fae0 	bl	80047b4 <lwip_htons>
 80081f4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80081f8:	f7fc fadc 	bl	80047b4 <lwip_htons>
 80081fc:	ea48 0800 	orr.w	r8, r8, r0
 8008200:	f8a9 800c 	strh.w	r8, [r9, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008204:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008206:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008208:	68eb      	ldr	r3, [r5, #12]
 800820a:	8998      	ldrh	r0, [r3, #12]
 800820c:	f7fc fad2 	bl	80047b4 <lwip_htons>
 8008210:	0783      	lsls	r3, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 8008212:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8008214:	bf42      	ittt	mi
 8008216:	892b      	ldrhmi	r3, [r5, #8]
 8008218:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800821c:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800821e:	8929      	ldrh	r1, [r5, #8]
 8008220:	f7fe fb34 	bl	800688c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008224:	68eb      	ldr	r3, [r5, #12]
 8008226:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800822a:	8998      	ldrh	r0, [r3, #12]
 800822c:	f7fc fac2 	bl	80047b4 <lwip_htons>
 8008230:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008234:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8008236:	bf18      	it	ne
 8008238:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800823a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800823c:	4440      	add	r0, r8
 800823e:	b280      	uxth	r0, r0
 8008240:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008242:	4418      	add	r0, r3
 8008244:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008246:	4413      	add	r3, r2
 8008248:	4298      	cmp	r0, r3
 800824a:	d006      	beq.n	800825a <tcp_receive+0x2d2>
 800824c:	4b2c      	ldr	r3, [pc, #176]	; (8008300 <tcp_receive+0x378>)
 800824e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8008252:	4930      	ldr	r1, [pc, #192]	; (8008314 <tcp_receive+0x38c>)
 8008254:	482c      	ldr	r0, [pc, #176]	; (8008308 <tcp_receive+0x380>)
 8008256:	f003 f9c7 	bl	800b5e8 <iprintf>
        if (pcb->ooseq != NULL) {
 800825a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8107 	beq.w	8008470 <tcp_receive+0x4e8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008262:	68eb      	ldr	r3, [r5, #12]
 8008264:	8998      	ldrh	r0, [r3, #12]
 8008266:	f7fc faa5 	bl	80047b4 <lwip_htons>
 800826a:	07c0      	lsls	r0, r0, #31
 800826c:	f100 80fd 	bmi.w	800846a <tcp_receive+0x4e2>
            struct tcp_seg *next = pcb->ooseq;
 8008270:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            while (next &&
 8008274:	f1b8 0f00 	cmp.w	r8, #0
 8008278:	d03b      	beq.n	80082f2 <tcp_receive+0x36a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800827a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800827e:	6830      	ldr	r0, [r6, #0]
 8008280:	883b      	ldrh	r3, [r7, #0]
 8008282:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008286:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800828a:	4403      	add	r3, r0
 800828c:	4411      	add	r1, r2
 800828e:	1a59      	subs	r1, r3, r1
            while (next &&
 8008290:	2900      	cmp	r1, #0
 8008292:	f280 812a 	bge.w	80084ea <tcp_receive+0x562>
                TCP_SEQ_GT(seqno + tcplen,
 8008296:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008298:	2b00      	cmp	r3, #0
 800829a:	dd2a      	ble.n	80082f2 <tcp_receive+0x36a>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800829c:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800829e:	1a12      	subs	r2, r2, r0
 80082a0:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80082a2:	8998      	ldrh	r0, [r3, #12]
 80082a4:	f7fc fa86 	bl	80047b4 <lwip_htons>
 80082a8:	0783      	lsls	r3, r0, #30
              pbuf_realloc(inseg.p, inseg.len);
 80082aa:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 80082ac:	bf42      	ittt	mi
 80082ae:	892b      	ldrhmi	r3, [r5, #8]
 80082b0:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80082b4:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80082b6:	8929      	ldrh	r1, [r5, #8]
 80082b8:	f7fe fae8 	bl	800688c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80082bc:	68eb      	ldr	r3, [r5, #12]
 80082be:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80082c2:	8998      	ldrh	r0, [r3, #12]
 80082c4:	f7fc fa76 	bl	80047b4 <lwip_htons>
 80082c8:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80082cc:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80082ce:	bf18      	it	ne
 80082d0:	2001      	movne	r0, #1
 80082d2:	4448      	add	r0, r9
 80082d4:	b280      	uxth	r0, r0
 80082d6:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80082d8:	4418      	add	r0, r3
 80082da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4298      	cmp	r0, r3
 80082e2:	d006      	beq.n	80082f2 <tcp_receive+0x36a>
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <tcp_receive+0x378>)
 80082e6:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80082ea:	490b      	ldr	r1, [pc, #44]	; (8008318 <tcp_receive+0x390>)
 80082ec:	4806      	ldr	r0, [pc, #24]	; (8008308 <tcp_receive+0x380>)
 80082ee:	f003 f97b 	bl	800b5e8 <iprintf>
            pcb->ooseq = next;
 80082f2:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
 80082f6:	e0bb      	b.n	8008470 <tcp_receive+0x4e8>
 80082f8:	20027d30 	.word	0x20027d30
 80082fc:	20024378 	.word	0x20024378
 8008300:	0800e9a4 	.word	0x0800e9a4
 8008304:	0800ea47 	.word	0x0800ea47
 8008308:	0800c5ae 	.word	0x0800c5ae
 800830c:	0800ea57 	.word	0x0800ea57
 8008310:	0800ea66 	.word	0x0800ea66
 8008314:	0800ea76 	.word	0x0800ea76
 8008318:	0800eaad 	.word	0x0800eaad
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800831c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800831e:	1a51      	subs	r1, r2, r1
 8008320:	2900      	cmp	r1, #0
 8008322:	f300 8089 	bgt.w	8008438 <tcp_receive+0x4b0>
      if (pcb->flags & TF_INFR) {
 8008326:	8b61      	ldrh	r1, [r4, #26]
 8008328:	0748      	lsls	r0, r1, #29
 800832a:	d509      	bpl.n	8008340 <tcp_receive+0x3b8>
        tcp_clear_flags(pcb, TF_INFR);
 800832c:	f021 0104 	bic.w	r1, r1, #4
 8008330:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008332:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8008336:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800833a:	2100      	movs	r1, #0
 800833c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008340:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 8008344:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008346:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8008348:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800834a:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800834c:	eb01 01ee 	add.w	r1, r1, lr, asr #3
      pcb->nrtx = 0;
 8008350:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8008354:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008356:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800835a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800835e:	d91b      	bls.n	8008398 <tcp_receive+0x410>
        if (pcb->cwnd < pcb->ssthresh) {
 8008360:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008364:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8008366:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800836a:	428a      	cmp	r2, r1
 800836c:	d93e      	bls.n	80083ec <tcp_receive+0x464>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800836e:	8b62      	ldrh	r2, [r4, #26]
 8008370:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008374:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008376:	bf0c      	ite	eq
 8008378:	2002      	moveq	r0, #2
 800837a:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800837c:	fb12 f200 	smulbb	r2, r2, r0
 8008380:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8008382:	429a      	cmp	r2, r3
 8008384:	bf94      	ite	ls
 8008386:	188b      	addls	r3, r1, r2
 8008388:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800838a:	b29b      	uxth	r3, r3
 800838c:	4299      	cmp	r1, r3
 800838e:	d901      	bls.n	8008394 <tcp_receive+0x40c>
          TCP_WND_INC(pcb->cwnd, increase);
 8008390:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008394:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8008398:	f104 0866 	add.w	r8, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800839c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800839e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80083a0:	4640      	mov	r0, r8
 80083a2:	f7ff fd97 	bl	8007ed4 <tcp_free_acked_segments.isra.2>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80083a8:	4602      	mov	r2, r0
 80083aa:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083ac:	4640      	mov	r0, r8
 80083ae:	f7ff fd91 	bl	8007ed4 <tcp_free_acked_segments.isra.2>
      if (pcb->unacked == NULL) {
 80083b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083b4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80083b6:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 80083b8:	bb63      	cbnz	r3, 8008414 <tcp_receive+0x48c>
        pcb->rtime = -1;
 80083ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80083be:	8621      	strh	r1, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80083c0:	7722      	strb	r2, [r4, #28]
      if (pcb->unsent == NULL) {
 80083c2:	b908      	cbnz	r0, 80083c8 <tcp_receive+0x440>
        pcb->unsent_oversize = 0;
 80083c4:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80083c8:	49a7      	ldr	r1, [pc, #668]	; (8008668 <tcp_receive+0x6e0>)
 80083ca:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80083ce:	8809      	ldrh	r1, [r1, #0]
 80083d0:	440a      	add	r2, r1
 80083d2:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 80083d6:	8b62      	ldrh	r2, [r4, #26]
 80083d8:	0511      	lsls	r1, r2, #20
 80083da:	f57f ae62 	bpl.w	80080a2 <tcp_receive+0x11a>
        if (pcb->unacked == NULL) {
 80083de:	bb3b      	cbnz	r3, 8008430 <tcp_receive+0x4a8>
          if ((pcb->unsent == NULL) ||
 80083e0:	b9d0      	cbnz	r0, 8008418 <tcp_receive+0x490>
          tcp_clear_flags(pcb, TF_RTO);
 80083e2:	8b63      	ldrh	r3, [r4, #26]
 80083e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083e8:	8363      	strh	r3, [r4, #26]
 80083ea:	e65a      	b.n	80080a2 <tcp_receive+0x11a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80083ec:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80083f0:	4413      	add	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	429a      	cmp	r2, r3
 80083f6:	bf88      	it	hi
 80083f8:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 80083fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008400:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008404:	4299      	cmp	r1, r3
 8008406:	d8c7      	bhi.n	8008398 <tcp_receive+0x410>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008408:	1a5b      	subs	r3, r3, r1
 800840a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800840e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008410:	440b      	add	r3, r1
 8008412:	e7ba      	b.n	800838a <tcp_receive+0x402>
        pcb->rtime = 0;
 8008414:	8622      	strh	r2, [r4, #48]	; 0x30
 8008416:	e7d3      	b.n	80083c0 <tcp_receive+0x438>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008418:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 800841c:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800841e:	6858      	ldr	r0, [r3, #4]
 8008420:	f7fc f9cb 	bl	80047ba <lwip_htonl>
 8008424:	eba8 0000 	sub.w	r0, r8, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	f73f ae3a 	bgt.w	80080a2 <tcp_receive+0x11a>
 800842e:	e7d8      	b.n	80083e2 <tcp_receive+0x45a>
 8008430:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	e7f2      	b.n	800841e <tcp_receive+0x496>
      tcp_send_empty_ack(pcb);
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fe13 	bl	800a064 <tcp_send_empty_ack>
 800843e:	e630      	b.n	80080a2 <tcp_receive+0x11a>
        off -= p->len;
 8008440:	1aad      	subs	r5, r5, r2
        p->tot_len = new_tot_len;
 8008442:	f8a9 3008 	strh.w	r3, [r9, #8]
        p->len = 0;
 8008446:	f8a9 100a 	strh.w	r1, [r9, #10]
        off -= p->len;
 800844a:	b2ad      	uxth	r5, r5
        p = p->next;
 800844c:	f8d9 9000 	ldr.w	r9, [r9]
 8008450:	e692      	b.n	8008178 <tcp_receive+0x1f0>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8008456:	bfbe      	ittt	lt
 8008458:	8b63      	ldrhlt	r3, [r4, #26]
 800845a:	f043 0302 	orrlt.w	r3, r3, #2
 800845e:	8363      	strhlt	r3, [r4, #26]
 8008460:	e698      	b.n	8008194 <tcp_receive+0x20c>
              pcb->ooseq = pcb->ooseq->next;
 8008462:	6803      	ldr	r3, [r0, #0]
 8008464:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008466:	f7fe fd5d 	bl	8006f24 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800846a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800846c:	2800      	cmp	r0, #0
 800846e:	d1f8      	bne.n	8008462 <tcp_receive+0x4da>
        pcb->rcv_nxt = seqno + tcplen;
 8008470:	883a      	ldrh	r2, [r7, #0]
 8008472:	6833      	ldr	r3, [r6, #0]
 8008474:	4413      	add	r3, r2
 8008476:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008478:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800847a:	4293      	cmp	r3, r2
 800847c:	d206      	bcs.n	800848c <tcp_receive+0x504>
 800847e:	4b7b      	ldr	r3, [pc, #492]	; (800866c <tcp_receive+0x6e4>)
 8008480:	f240 6207 	movw	r2, #1543	; 0x607
 8008484:	497a      	ldr	r1, [pc, #488]	; (8008670 <tcp_receive+0x6e8>)
 8008486:	487b      	ldr	r0, [pc, #492]	; (8008674 <tcp_receive+0x6ec>)
 8008488:	f003 f8ae 	bl	800b5e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800848c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800848e:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8008490:	883a      	ldrh	r2, [r7, #0]
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008496:	f7fe fcd3 	bl	8006e40 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800849a:	686b      	ldr	r3, [r5, #4]
 800849c:	891a      	ldrh	r2, [r3, #8]
 800849e:	b11a      	cbz	r2, 80084a8 <tcp_receive+0x520>
          recv_data = inseg.p;
 80084a0:	4a75      	ldr	r2, [pc, #468]	; (8008678 <tcp_receive+0x6f0>)
 80084a2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80084a8:	68eb      	ldr	r3, [r5, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80084aa:	4f70      	ldr	r7, [pc, #448]	; (800866c <tcp_receive+0x6e4>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80084ac:	8998      	ldrh	r0, [r3, #12]
 80084ae:	f7fc f981 	bl	80047b4 <lwip_htons>
 80084b2:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80084b4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8008684 <tcp_receive+0x6fc>
          recv_flags |= TF_GOT_FIN;
 80084b8:	bf48      	it	mi
 80084ba:	4a70      	ldrmi	r2, [pc, #448]	; (800867c <tcp_receive+0x6f4>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80084bc:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8008674 <tcp_receive+0x6ec>
          recv_flags |= TF_GOT_FIN;
 80084c0:	bf42      	ittt	mi
 80084c2:	7813      	ldrbmi	r3, [r2, #0]
 80084c4:	f043 0320 	orrmi.w	r3, r3, #32
 80084c8:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80084ca:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80084cc:	b125      	cbz	r5, 80084d8 <tcp_receive+0x550>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80084ce:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80084d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80084d2:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80084d4:	428b      	cmp	r3, r1
 80084d6:	d033      	beq.n	8008540 <tcp_receive+0x5b8>
        tcp_ack(pcb);
 80084d8:	8b63      	ldrh	r3, [r4, #26]
 80084da:	07d9      	lsls	r1, r3, #31
 80084dc:	f140 8087 	bpl.w	80085ee <tcp_receive+0x666>
 80084e0:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 80084e4:	f043 0302 	orr.w	r3, r3, #2
 80084e8:	e083      	b.n	80085f2 <tcp_receive+0x66a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80084ea:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80084ee:	f7fc f961 	bl	80047b4 <lwip_htons>
 80084f2:	07c1      	lsls	r1, r0, #31
 80084f4:	d51d      	bpl.n	8008532 <tcp_receive+0x5aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80084f6:	68eb      	ldr	r3, [r5, #12]
 80084f8:	8998      	ldrh	r0, [r3, #12]
 80084fa:	f7fc f95b 	bl	80047b4 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80084fe:	0782      	lsls	r2, r0, #30
 8008500:	d417      	bmi.n	8008532 <tcp_receive+0x5aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008502:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008506:	2001      	movs	r0, #1
 8008508:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800850c:	f7fc f952 	bl	80047b4 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8008510:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008512:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8008516:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800851a:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800851e:	8998      	ldrh	r0, [r3, #12]
 8008520:	f7fc f948 	bl	80047b4 <lwip_htons>
 8008524:	f010 0003 	ands.w	r0, r0, #3
 8008528:	bf18      	it	ne
 800852a:	2001      	movne	r0, #1
 800852c:	4481      	add	r9, r0
 800852e:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8008532:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(tmp);
 8008536:	4640      	mov	r0, r8
 8008538:	f7fe fcf4 	bl	8006f24 <tcp_seg_free>
              next = next->next;
 800853c:	46c8      	mov	r8, r9
 800853e:	e699      	b.n	8008274 <tcp_receive+0x2ec>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008540:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008542:	8990      	ldrh	r0, [r2, #12]
 8008544:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008548:	f7fc f934 	bl	80047b4 <lwip_htons>
 800854c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800854e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008552:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008556:	bf18      	it	ne
 8008558:	2001      	movne	r0, #1
 800855a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800855c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800855e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008560:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008564:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008566:	8998      	ldrh	r0, [r3, #12]
 8008568:	f7fc f924 	bl	80047b4 <lwip_htons>
 800856c:	f010 0003 	ands.w	r0, r0, #3
 8008570:	bf18      	it	ne
 8008572:	2001      	movne	r0, #1
 8008574:	4458      	add	r0, fp
 8008576:	4582      	cmp	sl, r0
 8008578:	d206      	bcs.n	8008588 <tcp_receive+0x600>
 800857a:	463b      	mov	r3, r7
 800857c:	f240 622c 	movw	r2, #1580	; 0x62c
 8008580:	4641      	mov	r1, r8
 8008582:	4648      	mov	r0, r9
 8008584:	f003 f830 	bl	800b5e8 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008588:	68eb      	ldr	r3, [r5, #12]
 800858a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800858e:	8998      	ldrh	r0, [r3, #12]
 8008590:	f7fc f910 	bl	80047b4 <lwip_htons>
 8008594:	f010 0003 	ands.w	r0, r0, #3
 8008598:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800859a:	bf18      	it	ne
 800859c:	2001      	movne	r0, #1
 800859e:	4450      	add	r0, sl
 80085a0:	1a18      	subs	r0, r3, r0
 80085a2:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7fe fc4b 	bl	8006e40 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80085aa:	6869      	ldr	r1, [r5, #4]
 80085ac:	890b      	ldrh	r3, [r1, #8]
 80085ae:	b133      	cbz	r3, 80085be <tcp_receive+0x636>
            if (recv_data) {
 80085b0:	4b31      	ldr	r3, [pc, #196]	; (8008678 <tcp_receive+0x6f0>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	b1c8      	cbz	r0, 80085ea <tcp_receive+0x662>
              pbuf_cat(recv_data, cseg->p);
 80085b6:	f7fe f9e5 	bl	8006984 <pbuf_cat>
            cseg->p = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80085be:	68eb      	ldr	r3, [r5, #12]
 80085c0:	8998      	ldrh	r0, [r3, #12]
 80085c2:	f7fc f8f7 	bl	80047b4 <lwip_htons>
 80085c6:	07c0      	lsls	r0, r0, #31
 80085c8:	d509      	bpl.n	80085de <tcp_receive+0x656>
            recv_flags |= TF_GOT_FIN;
 80085ca:	4a2c      	ldr	r2, [pc, #176]	; (800867c <tcp_receive+0x6f4>)
 80085cc:	7813      	ldrb	r3, [r2, #0]
 80085ce:	f043 0320 	orr.w	r3, r3, #32
 80085d2:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80085d4:	7d23      	ldrb	r3, [r4, #20]
 80085d6:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80085d8:	bf04      	itt	eq
 80085da:	2307      	moveq	r3, #7
 80085dc:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80085de:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 80085e0:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 80085e2:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 80085e4:	f7fe fc9e 	bl	8006f24 <tcp_seg_free>
 80085e8:	e76f      	b.n	80084ca <tcp_receive+0x542>
              recv_data = cseg->p;
 80085ea:	6019      	str	r1, [r3, #0]
 80085ec:	e7e5      	b.n	80085ba <tcp_receive+0x632>
        tcp_ack(pcb);
 80085ee:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 80085f2:	8363      	strh	r3, [r4, #26]
}
 80085f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pcb->ooseq == NULL) {
 80085f8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80085fa:	b945      	cbnz	r5, 800860e <tcp_receive+0x686>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80085fc:	4820      	ldr	r0, [pc, #128]	; (8008680 <tcp_receive+0x6f8>)
 80085fe:	f7fe fcb7 	bl	8006f70 <tcp_seg_copy>
 8008602:	6760      	str	r0, [r4, #116]	; 0x74
        tcp_send_empty_ack(pcb);
 8008604:	4620      	mov	r0, r4
}
 8008606:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800860a:	f001 bd2b 	b.w	800a064 <tcp_send_empty_ack>
 800860e:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008612:	f103 3cff 	add.w	ip, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 8008616:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800861a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800861e:	4293      	cmp	r3, r2
 8008620:	d115      	bne.n	800864e <tcp_receive+0x6c6>
              if (inseg.len > next->len) {
 8008622:	4817      	ldr	r0, [pc, #92]	; (8008680 <tcp_receive+0x6f8>)
 8008624:	892b      	ldrh	r3, [r5, #8]
 8008626:	8902      	ldrh	r2, [r0, #8]
 8008628:	429a      	cmp	r2, r3
 800862a:	d9eb      	bls.n	8008604 <tcp_receive+0x67c>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800862c:	f7fe fca0 	bl	8006f70 <tcp_seg_copy>
                if (cseg != NULL) {
 8008630:	2800      	cmp	r0, #0
 8008632:	d0e7      	beq.n	8008604 <tcp_receive+0x67c>
                  if (prev != NULL) {
 8008634:	f1b8 0f00 	cmp.w	r8, #0
 8008638:	d007      	beq.n	800864a <tcp_receive+0x6c2>
                    prev->next = cseg;
 800863a:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800863e:	4629      	mov	r1, r5
 8008640:	f7ff fb88 	bl	8007d54 <tcp_oos_insert_segment>
 8008644:	e7de      	b.n	8008604 <tcp_receive+0x67c>
 8008646:	460d      	mov	r5, r1
 8008648:	e7e5      	b.n	8008616 <tcp_receive+0x68e>
                    pcb->ooseq = cseg;
 800864a:	6760      	str	r0, [r4, #116]	; 0x74
 800864c:	e7f7      	b.n	800863e <tcp_receive+0x6b6>
              if (prev == NULL) {
 800864e:	f1b8 0f00 	cmp.w	r8, #0
 8008652:	d119      	bne.n	8008688 <tcp_receive+0x700>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008654:	1a99      	subs	r1, r3, r2
 8008656:	2900      	cmp	r1, #0
 8008658:	da3d      	bge.n	80086d6 <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800865a:	4809      	ldr	r0, [pc, #36]	; (8008680 <tcp_receive+0x6f8>)
 800865c:	f7fe fc88 	bl	8006f70 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008660:	2800      	cmp	r0, #0
 8008662:	d0cf      	beq.n	8008604 <tcp_receive+0x67c>
                    pcb->ooseq = cseg;
 8008664:	6760      	str	r0, [r4, #116]	; 0x74
 8008666:	e7ea      	b.n	800863e <tcp_receive+0x6b6>
 8008668:	20024388 	.word	0x20024388
 800866c:	0800e9a4 	.word	0x0800e9a4
 8008670:	0800eae8 	.word	0x0800eae8
 8008674:	0800c5ae 	.word	0x0800c5ae
 8008678:	2002438c 	.word	0x2002438c
 800867c:	20024390 	.word	0x20024390
 8008680:	20024378 	.word	0x20024378
 8008684:	0800eb07 	.word	0x0800eb07
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008688:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800868c:	6849      	ldr	r1, [r1, #4]
 800868e:	ebac 0101 	sub.w	r1, ip, r1
 8008692:	2900      	cmp	r1, #0
 8008694:	db1f      	blt.n	80086d6 <tcp_receive+0x74e>
 8008696:	1a81      	subs	r1, r0, r2
 8008698:	2900      	cmp	r1, #0
 800869a:	dc1c      	bgt.n	80086d6 <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800869c:	484d      	ldr	r0, [pc, #308]	; (80087d4 <tcp_receive+0x84c>)
 800869e:	f7fe fc67 	bl	8006f70 <tcp_seg_copy>
                  if (cseg != NULL) {
 80086a2:	4607      	mov	r7, r0
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d0ad      	beq.n	8008604 <tcp_receive+0x67c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80086a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086ac:	6831      	ldr	r1, [r6, #0]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80086b4:	4413      	add	r3, r2
 80086b6:	1a5b      	subs	r3, r3, r1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	dd07      	ble.n	80086cc <tcp_receive+0x744>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80086bc:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 80086be:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80086c2:	b289      	uxth	r1, r1
 80086c4:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80086c8:	f7fe f8e0 	bl	800688c <pbuf_realloc>
                    prev->next = cseg;
 80086cc:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80086d0:	4629      	mov	r1, r5
 80086d2:	4638      	mov	r0, r7
 80086d4:	e7b4      	b.n	8008640 <tcp_receive+0x6b8>
              if (next->next == NULL &&
 80086d6:	6829      	ldr	r1, [r5, #0]
 80086d8:	46a8      	mov	r8, r5
 80086da:	2900      	cmp	r1, #0
 80086dc:	d1b3      	bne.n	8008646 <tcp_receive+0x6be>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80086de:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dd8f      	ble.n	8008604 <tcp_receive+0x67c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80086e4:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80086e8:	f7fc f864 	bl	80047b4 <lwip_htons>
 80086ec:	07c2      	lsls	r2, r0, #31
 80086ee:	d489      	bmi.n	8008604 <tcp_receive+0x67c>
                next->next = tcp_seg_copy(&inseg);
 80086f0:	4838      	ldr	r0, [pc, #224]	; (80087d4 <tcp_receive+0x84c>)
 80086f2:	f7fe fc3d 	bl	8006f70 <tcp_seg_copy>
 80086f6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d083      	beq.n	8008604 <tcp_receive+0x67c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80086fc:	68eb      	ldr	r3, [r5, #12]
 80086fe:	6831      	ldr	r1, [r6, #0]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	892b      	ldrh	r3, [r5, #8]
 8008704:	4413      	add	r3, r2
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	2b00      	cmp	r3, #0
 800870a:	dd05      	ble.n	8008718 <tcp_receive+0x790>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800870c:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800870e:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008710:	b289      	uxth	r1, r1
 8008712:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008714:	f7fe f8ba 	bl	800688c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008718:	6832      	ldr	r2, [r6, #0]
 800871a:	883b      	ldrh	r3, [r7, #0]
 800871c:	4413      	add	r3, r2
 800871e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008724:	1a9b      	subs	r3, r3, r2
 8008726:	2b00      	cmp	r3, #0
 8008728:	f77f af6c 	ble.w	8008604 <tcp_receive+0x67c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	8998      	ldrh	r0, [r3, #12]
 8008732:	f7fc f83f 	bl	80047b4 <lwip_htons>
 8008736:	07c3      	lsls	r3, r0, #31
 8008738:	d511      	bpl.n	800875e <tcp_receive+0x7d6>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8008740:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008744:	4640      	mov	r0, r8
 8008746:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800874a:	f7fc f833 	bl	80047b4 <lwip_htons>
 800874e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008752:	f7fc f82f 	bl	80047b4 <lwip_htons>
 8008756:	ea48 0800 	orr.w	r8, r8, r0
 800875a:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800875e:	6832      	ldr	r2, [r6, #0]
 8008760:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	1a89      	subs	r1, r1, r2
 8008766:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8008768:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800876a:	4411      	add	r1, r2
 800876c:	b289      	uxth	r1, r1
 800876e:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008770:	f7fe f88c 	bl	800688c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	891d      	ldrh	r5, [r3, #8]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	8998      	ldrh	r0, [r3, #12]
 800877c:	f7fc f81a 	bl	80047b4 <lwip_htons>
 8008780:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008784:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8008786:	bf18      	it	ne
 8008788:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800878a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800878c:	4428      	add	r0, r5
 800878e:	b280      	uxth	r0, r0
 8008790:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008792:	4418      	add	r0, r3
 8008794:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008796:	4413      	add	r3, r2
 8008798:	4298      	cmp	r0, r3
 800879a:	f43f af33 	beq.w	8008604 <tcp_receive+0x67c>
 800879e:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <tcp_receive+0x850>)
 80087a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80087a4:	490d      	ldr	r1, [pc, #52]	; (80087dc <tcp_receive+0x854>)
 80087a6:	480e      	ldr	r0, [pc, #56]	; (80087e0 <tcp_receive+0x858>)
 80087a8:	f002 ff1e 	bl	800b5e8 <iprintf>
 80087ac:	e72a      	b.n	8008604 <tcp_receive+0x67c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80087ae:	6833      	ldr	r3, [r6, #0]
 80087b0:	1a99      	subs	r1, r3, r2
 80087b2:	2900      	cmp	r1, #0
 80087b4:	db05      	blt.n	80087c2 <tcp_receive+0x83a>
 80087b6:	3301      	adds	r3, #1
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd05      	ble.n	80087ce <tcp_receive+0x846>
      tcp_ack_now(pcb);
 80087c2:	8b63      	ldrh	r3, [r4, #26]
 80087c4:	e68e      	b.n	80084e4 <tcp_receive+0x55c>
        pcb->dupacks = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087cc:	e469      	b.n	80080a2 <tcp_receive+0x11a>
 80087ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	bf00      	nop
 80087d4:	20024378 	.word	0x20024378
 80087d8:	0800e9a4 	.word	0x0800e9a4
 80087dc:	0800ea76 	.word	0x0800ea76
 80087e0:	0800c5ae 	.word	0x0800c5ae

080087e4 <tcp_input>:
{
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80087e8:	4605      	mov	r5, r0
{
 80087ea:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80087ec:	b928      	cbnz	r0, 80087fa <tcp_input+0x16>
 80087ee:	4bac      	ldr	r3, [pc, #688]	; (8008aa0 <tcp_input+0x2bc>)
 80087f0:	2283      	movs	r2, #131	; 0x83
 80087f2:	49ac      	ldr	r1, [pc, #688]	; (8008aa4 <tcp_input+0x2c0>)
 80087f4:	48ac      	ldr	r0, [pc, #688]	; (8008aa8 <tcp_input+0x2c4>)
 80087f6:	f002 fef7 	bl	800b5e8 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 80087fa:	686b      	ldr	r3, [r5, #4]
 80087fc:	4eab      	ldr	r6, [pc, #684]	; (8008aac <tcp_input+0x2c8>)
 80087fe:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008800:	896b      	ldrh	r3, [r5, #10]
 8008802:	2b13      	cmp	r3, #19
 8008804:	f240 80a9 	bls.w	800895a <tcp_input+0x176>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008808:	4ca9      	ldr	r4, [pc, #676]	; (8008ab0 <tcp_input+0x2cc>)
 800880a:	6821      	ldr	r1, [r4, #0]
 800880c:	46a0      	mov	r8, r4
 800880e:	6960      	ldr	r0, [r4, #20]
 8008810:	f7fc fe2b 	bl	800546a <ip4_addr_isbroadcast_u32>
 8008814:	4607      	mov	r7, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	f040 809f 	bne.w	800895a <tcp_input+0x176>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800881c:	6963      	ldr	r3, [r4, #20]
 800881e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008822:	2be0      	cmp	r3, #224	; 0xe0
 8008824:	f000 8099 	beq.w	800895a <tcp_input+0x176>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008828:	6833      	ldr	r3, [r6, #0]
 800882a:	8998      	ldrh	r0, [r3, #12]
 800882c:	f7fb ffc2 	bl	80047b4 <lwip_htons>
 8008830:	0a81      	lsrs	r1, r0, #10
 8008832:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008836:	2913      	cmp	r1, #19
 8008838:	f240 808f 	bls.w	800895a <tcp_input+0x176>
 800883c:	b28a      	uxth	r2, r1
 800883e:	892b      	ldrh	r3, [r5, #8]
 8008840:	4293      	cmp	r3, r2
 8008842:	f0c0 808a 	bcc.w	800895a <tcp_input+0x176>
  tcphdr_opt2 = NULL;
 8008846:	489b      	ldr	r0, [pc, #620]	; (8008ab4 <tcp_input+0x2d0>)
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008848:	f1a2 0314 	sub.w	r3, r2, #20
 800884c:	4c9a      	ldr	r4, [pc, #616]	; (8008ab8 <tcp_input+0x2d4>)
  tcphdr_opt2 = NULL;
 800884e:	6007      	str	r7, [r0, #0]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008850:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8008852:	896f      	ldrh	r7, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008854:	8023      	strh	r3, [r4, #0]
  if (p->len >= hdrlen_bytes) {
 8008856:	4297      	cmp	r7, r2
 8008858:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8008b04 <tcp_input+0x320>
 800885c:	4607      	mov	r7, r0
 800885e:	d341      	bcc.n	80088e4 <tcp_input+0x100>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008860:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8008862:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008866:	f7fd fedf 	bl	8006628 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800886a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800886c:	4f93      	ldr	r7, [pc, #588]	; (8008abc <tcp_input+0x2d8>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800886e:	8820      	ldrh	r0, [r4, #0]
 8008870:	f7fb ffa0 	bl	80047b4 <lwip_htons>
 8008874:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008876:	6834      	ldr	r4, [r6, #0]
 8008878:	46bb      	mov	fp, r7
 800887a:	8860      	ldrh	r0, [r4, #2]
 800887c:	f7fb ff9a 	bl	80047b4 <lwip_htons>
 8008880:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008882:	6834      	ldr	r4, [r6, #0]
 8008884:	6860      	ldr	r0, [r4, #4]
 8008886:	f7fb ff98 	bl	80047ba <lwip_htonl>
 800888a:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800888c:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800888e:	6038      	str	r0, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008890:	68a0      	ldr	r0, [r4, #8]
 8008892:	f7fb ff92 	bl	80047ba <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008896:	f8d6 9000 	ldr.w	r9, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800889a:	60a0      	str	r0, [r4, #8]
 800889c:	4c88      	ldr	r4, [pc, #544]	; (8008ac0 <tcp_input+0x2dc>)
 800889e:	6020      	str	r0, [r4, #0]
 80088a0:	46a2      	mov	sl, r4
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80088a2:	f8b9 000e 	ldrh.w	r0, [r9, #14]
 80088a6:	f7fb ff85 	bl	80047b4 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80088aa:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80088ac:	f8a9 000e 	strh.w	r0, [r9, #14]
  flags = TCPH_FLAGS(tcphdr);
 80088b0:	8998      	ldrh	r0, [r3, #12]
 80088b2:	f7fb ff7f 	bl	80047b4 <lwip_htons>
 80088b6:	4b83      	ldr	r3, [pc, #524]	; (8008ac4 <tcp_input+0x2e0>)
 80088b8:	b2c0      	uxtb	r0, r0
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 80088c0:	f010 0f03 	tst.w	r0, #3
  flags = TCPH_FLAGS(tcphdr);
 80088c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80088c6:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80088c8:	d141      	bne.n	800894e <tcp_input+0x16a>
  tcplen = p->tot_len;
 80088ca:	4b7f      	ldr	r3, [pc, #508]	; (8008ac8 <tcp_input+0x2e4>)
 80088cc:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088ce:	4f7f      	ldr	r7, [pc, #508]	; (8008acc <tcp_input+0x2e8>)
  prev = NULL;
 80088d0:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088d4:	683c      	ldr	r4, [r7, #0]
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	d145      	bne.n	8008966 <tcp_input+0x182>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088da:	4b7d      	ldr	r3, [pc, #500]	; (8008ad0 <tcp_input+0x2ec>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80088dc:	4c70      	ldr	r4, [pc, #448]	; (8008aa0 <tcp_input+0x2bc>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088de:	f8d3 9000 	ldr.w	r9, [r3]
 80088e2:	e17a      	b.n	8008bda <tcp_input+0x3f6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b92b      	cbnz	r3, 80088f4 <tcp_input+0x110>
 80088e8:	4b6d      	ldr	r3, [pc, #436]	; (8008aa0 <tcp_input+0x2bc>)
 80088ea:	22c2      	movs	r2, #194	; 0xc2
 80088ec:	4979      	ldr	r1, [pc, #484]	; (8008ad4 <tcp_input+0x2f0>)
 80088ee:	486e      	ldr	r0, [pc, #440]	; (8008aa8 <tcp_input+0x2c4>)
 80088f0:	f002 fe7a 	bl	800b5e8 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 80088f4:	2114      	movs	r1, #20
 80088f6:	4628      	mov	r0, r5
 80088f8:	f7fd fe96 	bl	8006628 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 80088fc:	8969      	ldrh	r1, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80088fe:	8824      	ldrh	r4, [r4, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 8008900:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8008902:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008906:	1a64      	subs	r4, r4, r1
    pbuf_remove_header(p, tcphdr_opt1len);
 8008908:	f7fd fe8e 	bl	8006628 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800890c:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800890e:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8008910:	8943      	ldrh	r3, [r0, #10]
 8008912:	42a3      	cmp	r3, r4
 8008914:	d321      	bcc.n	800895a <tcp_input+0x176>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008916:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 8008918:	4621      	mov	r1, r4
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800891a:	603b      	str	r3, [r7, #0]
    pbuf_remove_header(p->next, opt2len);
 800891c:	f7fd fe84 	bl	8006628 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008920:	892b      	ldrh	r3, [r5, #8]
 8008922:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008924:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008926:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008928:	b12b      	cbz	r3, 8008936 <tcp_input+0x152>
 800892a:	4b5d      	ldr	r3, [pc, #372]	; (8008aa0 <tcp_input+0x2bc>)
 800892c:	22df      	movs	r2, #223	; 0xdf
 800892e:	496a      	ldr	r1, [pc, #424]	; (8008ad8 <tcp_input+0x2f4>)
 8008930:	485d      	ldr	r0, [pc, #372]	; (8008aa8 <tcp_input+0x2c4>)
 8008932:	f002 fe59 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	892a      	ldrh	r2, [r5, #8]
 800893a:	891b      	ldrh	r3, [r3, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	d094      	beq.n	800886a <tcp_input+0x86>
 8008940:	4b57      	ldr	r3, [pc, #348]	; (8008aa0 <tcp_input+0x2bc>)
 8008942:	22e0      	movs	r2, #224	; 0xe0
 8008944:	4965      	ldr	r1, [pc, #404]	; (8008adc <tcp_input+0x2f8>)
 8008946:	4858      	ldr	r0, [pc, #352]	; (8008aa8 <tcp_input+0x2c4>)
 8008948:	f002 fe4e 	bl	800b5e8 <iprintf>
 800894c:	e78d      	b.n	800886a <tcp_input+0x86>
    tcplen++;
 800894e:	1c53      	adds	r3, r2, #1
 8008950:	495d      	ldr	r1, [pc, #372]	; (8008ac8 <tcp_input+0x2e4>)
 8008952:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 8008954:	429a      	cmp	r2, r3
    tcplen++;
 8008956:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8008958:	d9b9      	bls.n	80088ce <tcp_input+0xea>
  pbuf_free(p);
 800895a:	4628      	mov	r0, r5
}
 800895c:	b009      	add	sp, #36	; 0x24
 800895e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8008962:	f7fd be95 	b.w	8006690 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008966:	7d23      	ldrb	r3, [r4, #20]
 8008968:	b92b      	cbnz	r3, 8008976 <tcp_input+0x192>
 800896a:	4b4d      	ldr	r3, [pc, #308]	; (8008aa0 <tcp_input+0x2bc>)
 800896c:	22fb      	movs	r2, #251	; 0xfb
 800896e:	495c      	ldr	r1, [pc, #368]	; (8008ae0 <tcp_input+0x2fc>)
 8008970:	484d      	ldr	r0, [pc, #308]	; (8008aa8 <tcp_input+0x2c4>)
 8008972:	f002 fe39 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008976:	7d23      	ldrb	r3, [r4, #20]
 8008978:	2b0a      	cmp	r3, #10
 800897a:	d105      	bne.n	8008988 <tcp_input+0x1a4>
 800897c:	4b48      	ldr	r3, [pc, #288]	; (8008aa0 <tcp_input+0x2bc>)
 800897e:	22fc      	movs	r2, #252	; 0xfc
 8008980:	4958      	ldr	r1, [pc, #352]	; (8008ae4 <tcp_input+0x300>)
 8008982:	4849      	ldr	r0, [pc, #292]	; (8008aa8 <tcp_input+0x2c4>)
 8008984:	f002 fe30 	bl	800b5e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008988:	7d23      	ldrb	r3, [r4, #20]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d105      	bne.n	800899a <tcp_input+0x1b6>
 800898e:	4b44      	ldr	r3, [pc, #272]	; (8008aa0 <tcp_input+0x2bc>)
 8008990:	22fd      	movs	r2, #253	; 0xfd
 8008992:	4955      	ldr	r1, [pc, #340]	; (8008ae8 <tcp_input+0x304>)
 8008994:	4844      	ldr	r0, [pc, #272]	; (8008aa8 <tcp_input+0x2c4>)
 8008996:	f002 fe27 	bl	800b5e8 <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800899a:	7a21      	ldrb	r1, [r4, #8]
 800899c:	68e2      	ldr	r2, [r4, #12]
 800899e:	b141      	cbz	r1, 80089b2 <tcp_input+0x1ce>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80089a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089a8:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	4299      	cmp	r1, r3
 80089ae:	f040 80ad 	bne.w	8008b0c <tcp_input+0x328>
    if (pcb->remote_port == tcphdr->src &&
 80089b2:	6833      	ldr	r3, [r6, #0]
 80089b4:	8b20      	ldrh	r0, [r4, #24]
 80089b6:	8819      	ldrh	r1, [r3, #0]
 80089b8:	4288      	cmp	r0, r1
 80089ba:	f040 80a7 	bne.w	8008b0c <tcp_input+0x328>
 80089be:	8ae1      	ldrh	r1, [r4, #22]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	f040 80a2 	bne.w	8008b0c <tcp_input+0x328>
        pcb->local_port == tcphdr->dest &&
 80089c8:	6861      	ldr	r1, [r4, #4]
 80089ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80089ce:	4299      	cmp	r1, r3
 80089d0:	f040 809c 	bne.w	8008b0c <tcp_input+0x328>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80089d4:	6821      	ldr	r1, [r4, #0]
 80089d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80089da:	4299      	cmp	r1, r3
 80089dc:	f040 8096 	bne.w	8008b0c <tcp_input+0x328>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80089e0:	4294      	cmp	r4, r2
 80089e2:	f040 8458 	bne.w	8009296 <tcp_input+0xab2>
 80089e6:	4b2e      	ldr	r3, [pc, #184]	; (8008aa0 <tcp_input+0x2bc>)
 80089e8:	f240 120d 	movw	r2, #269	; 0x10d
 80089ec:	493f      	ldr	r1, [pc, #252]	; (8008aec <tcp_input+0x308>)
 80089ee:	482e      	ldr	r0, [pc, #184]	; (8008aa8 <tcp_input+0x2c4>)
 80089f0:	f002 fdfa 	bl	800b5e8 <iprintf>
      if (prev != NULL) {
 80089f4:	f1b9 0f00 	cmp.w	r9, #0
 80089f8:	d005      	beq.n	8008a06 <tcp_input+0x222>
        prev->next = pcb->next;
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 8008a00:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 8008a02:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 8008a04:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	d106      	bne.n	8008a1a <tcp_input+0x236>
 8008a0c:	4b24      	ldr	r3, [pc, #144]	; (8008aa0 <tcp_input+0x2bc>)
 8008a0e:	f240 1215 	movw	r2, #277	; 0x115
 8008a12:	4937      	ldr	r1, [pc, #220]	; (8008af0 <tcp_input+0x30c>)
 8008a14:	4824      	ldr	r0, [pc, #144]	; (8008aa8 <tcp_input+0x2c4>)
 8008a16:	f002 fde7 	bl	800b5e8 <iprintf>
    inseg.next = NULL;
 8008a1a:	4b36      	ldr	r3, [pc, #216]	; (8008af4 <tcp_input+0x310>)
 8008a1c:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 8008a1e:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 8008a20:	4835      	ldr	r0, [pc, #212]	; (8008af8 <tcp_input+0x314>)
    inseg.len = p->tot_len;
 8008a22:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8008a24:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8008a26:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008b08 <tcp_input+0x324>
    inseg.tcphdr = tcphdr;
 8008a2a:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 8008a2c:	4933      	ldr	r1, [pc, #204]	; (8008afc <tcp_input+0x318>)
    inseg.next = NULL;
 8008a2e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008a30:	600a      	str	r2, [r1, #0]
 8008a32:	4689      	mov	r9, r1
    recv_flags = 0;
 8008a34:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 8008a38:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 8008a3a:	9a05      	ldr	r2, [sp, #20]
    inseg.p = p;
 8008a3c:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	9006      	str	r0, [sp, #24]
 8008a42:	f012 0f08 	tst.w	r2, #8
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	d003      	beq.n	8008a52 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 8008a4a:	7b6b      	ldrb	r3, [r5, #13]
 8008a4c:	f043 0301 	orr.w	r3, r3, #1
 8008a50:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8008a52:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a54:	4d2a      	ldr	r5, [pc, #168]	; (8008b00 <tcp_input+0x31c>)
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 8165 	beq.w	8008d26 <tcp_input+0x542>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7fe fe99 	bl	8007794 <tcp_process_refused_data>
 8008a62:	300d      	adds	r0, #13
 8008a64:	d008      	beq.n	8008a78 <tcp_input+0x294>
 8008a66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 815c 	beq.w	8008d26 <tcp_input+0x542>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008a6e:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <tcp_input+0x2e4>)
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 8157 	beq.w	8008d26 <tcp_input+0x542>
        if (pcb->rcv_ann_wnd == 0) {
 8008a78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a7a:	b913      	cbnz	r3, 8008a82 <tcp_input+0x29e>
          tcp_send_empty_ack(pcb);
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f001 faf1 	bl	800a064 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 8008a82:	9b07      	ldr	r3, [sp, #28]
    tcp_input_pcb = NULL;
 8008a84:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 8008a86:	6858      	ldr	r0, [r3, #4]
    tcp_input_pcb = NULL;
 8008a88:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 8008a8a:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 8008a8e:	b118      	cbz	r0, 8008a98 <tcp_input+0x2b4>
      pbuf_free(inseg.p);
 8008a90:	f7fd fdfe 	bl	8006690 <pbuf_free>
      inseg.p = NULL;
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	605c      	str	r4, [r3, #4]
}
 8008a98:	b009      	add	sp, #36	; 0x24
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0800e9a4 	.word	0x0800e9a4
 8008aa4:	0800e7b1 	.word	0x0800e7b1
 8008aa8:	0800c5ae 	.word	0x0800c5ae
 8008aac:	2002439c 	.word	0x2002439c
 8008ab0:	20024624 	.word	0x20024624
 8008ab4:	200243a4 	.word	0x200243a4
 8008ab8:	200243a8 	.word	0x200243a8
 8008abc:	20024394 	.word	0x20024394
 8008ac0:	20024370 	.word	0x20024370
 8008ac4:	20024374 	.word	0x20024374
 8008ac8:	200243aa 	.word	0x200243aa
 8008acc:	20027d2c 	.word	0x20027d2c
 8008ad0:	20027d3c 	.word	0x20027d3c
 8008ad4:	0800e7c9 	.word	0x0800e7c9
 8008ad8:	0800e7d9 	.word	0x0800e7d9
 8008adc:	0800e7e5 	.word	0x0800e7e5
 8008ae0:	0800e804 	.word	0x0800e804
 8008ae4:	0800e82b 	.word	0x0800e82b
 8008ae8:	0800e855 	.word	0x0800e855
 8008aec:	0800e87c 	.word	0x0800e87c
 8008af0:	0800e8a7 	.word	0x0800e8a7
 8008af4:	20024378 	.word	0x20024378
 8008af8:	20024388 	.word	0x20024388
 8008afc:	2002438c 	.word	0x2002438c
 8008b00:	20027d40 	.word	0x20027d40
 8008b04:	200243a0 	.word	0x200243a0
 8008b08:	20024390 	.word	0x20024390
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b0c:	46a1      	mov	r9, r4
 8008b0e:	4614      	mov	r4, r2
 8008b10:	e6e1      	b.n	80088d6 <tcp_input+0xf2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b12:	f899 3014 	ldrb.w	r3, [r9, #20]
 8008b16:	2b0a      	cmp	r3, #10
 8008b18:	d006      	beq.n	8008b28 <tcp_input+0x344>
 8008b1a:	4623      	mov	r3, r4
 8008b1c:	f240 121f 	movw	r2, #287	; 0x11f
 8008b20:	49b0      	ldr	r1, [pc, #704]	; (8008de4 <tcp_input+0x600>)
 8008b22:	48b1      	ldr	r0, [pc, #708]	; (8008de8 <tcp_input+0x604>)
 8008b24:	f002 fd60 	bl	800b5e8 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b28:	f899 2008 	ldrb.w	r2, [r9, #8]
 8008b2c:	b13a      	cbz	r2, 8008b3e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b36:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d14b      	bne.n	8008bd6 <tcp_input+0x3f2>
      if (pcb->remote_port == tcphdr->src &&
 8008b3e:	6833      	ldr	r3, [r6, #0]
 8008b40:	f8b9 2018 	ldrh.w	r2, [r9, #24]
 8008b44:	8818      	ldrh	r0, [r3, #0]
 8008b46:	4290      	cmp	r0, r2
 8008b48:	d145      	bne.n	8008bd6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008b4a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
      if (pcb->remote_port == tcphdr->src &&
 8008b4e:	8859      	ldrh	r1, [r3, #2]
 8008b50:	4291      	cmp	r1, r2
 8008b52:	d140      	bne.n	8008bd6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008b54:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008b58:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d13a      	bne.n	8008bd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b60:	f8d9 2000 	ldr.w	r2, [r9]
 8008b64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d134      	bne.n	8008bd6 <tcp_input+0x3f2>
  if (flags & TCP_RST) {
 8008b6c:	9b05      	ldr	r3, [sp, #20]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	075e      	lsls	r6, r3, #29
 8008b72:	f53f aef2 	bmi.w	800895a <tcp_input+0x176>
  if (flags & TCP_SYN) {
 8008b76:	079c      	lsls	r4, r3, #30
 8008b78:	d518      	bpl.n	8008bac <tcp_input+0x3c8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008b7a:	f8db 2000 	ldr.w	r2, [fp]
 8008b7e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	d418      	bmi.n	8008bb8 <tcp_input+0x3d4>
 8008b86:	f8b9 4028 	ldrh.w	r4, [r9, #40]	; 0x28
 8008b8a:	1b1b      	subs	r3, r3, r4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc13      	bgt.n	8008bb8 <tcp_input+0x3d4>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b90:	4b96      	ldr	r3, [pc, #600]	; (8008dec <tcp_input+0x608>)
 8008b92:	881c      	ldrh	r4, [r3, #0]
 8008b94:	4b96      	ldr	r3, [pc, #600]	; (8008df0 <tcp_input+0x60c>)
 8008b96:	9002      	str	r0, [sp, #8]
 8008b98:	4422      	add	r2, r4
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4648      	mov	r0, r9
 8008b9e:	9101      	str	r1, [sp, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ba6:	f001 fa19 	bl	8009fdc <tcp_rst>
 8008baa:	e6d6      	b.n	800895a <tcp_input+0x176>
  } else if (flags & TCP_FIN) {
 8008bac:	07d9      	lsls	r1, r3, #31
    pcb->tmr = tcp_ticks;
 8008bae:	bf42      	ittt	mi
 8008bb0:	4b90      	ldrmi	r3, [pc, #576]	; (8008df4 <tcp_input+0x610>)
 8008bb2:	681b      	ldrmi	r3, [r3, #0]
 8008bb4:	f8c9 3020 	strmi.w	r3, [r9, #32]
  if ((tcplen > 0)) {
 8008bb8:	4b8c      	ldr	r3, [pc, #560]	; (8008dec <tcp_input+0x608>)
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f43f aecc 	beq.w	800895a <tcp_input+0x176>
    tcp_ack_now(pcb);
 8008bc2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    tcp_output(pcb);
 8008bc6:	4648      	mov	r0, r9
    tcp_ack_now(pcb);
 8008bc8:	f043 0302 	orr.w	r3, r3, #2
 8008bcc:	f8a9 301a 	strh.w	r3, [r9, #26]
    tcp_output(pcb);
 8008bd0:	f001 fa7a 	bl	800a0c8 <tcp_output>
 8008bd4:	e6c1      	b.n	800895a <tcp_input+0x176>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd6:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8008bda:	f1b9 0f00 	cmp.w	r9, #0
 8008bde:	d198      	bne.n	8008b12 <tcp_input+0x32e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008be0:	4b85      	ldr	r3, [pc, #532]	; (8008df8 <tcp_input+0x614>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008be2:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008be6:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 8008be8:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008bea:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bee:	4614      	mov	r4, r2
 8008bf0:	b99c      	cbnz	r4, 8008c1a <tcp_input+0x436>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008bf2:	8988      	ldrh	r0, [r1, #12]
 8008bf4:	f7fb fdde 	bl	80047b4 <lwip_htons>
 8008bf8:	0743      	lsls	r3, r0, #29
 8008bfa:	f53f aeae 	bmi.w	800895a <tcp_input+0x176>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bfe:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c00:	4a7a      	ldr	r2, [pc, #488]	; (8008dec <tcp_input+0x608>)
 8008c02:	8818      	ldrh	r0, [r3, #0]
 8008c04:	8811      	ldrh	r1, [r2, #0]
 8008c06:	f8db 2000 	ldr.w	r2, [fp]
 8008c0a:	9002      	str	r0, [sp, #8]
 8008c0c:	885b      	ldrh	r3, [r3, #2]
 8008c0e:	440a      	add	r2, r1
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	4b77      	ldr	r3, [pc, #476]	; (8008df0 <tcp_input+0x60c>)
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	3304      	adds	r3, #4
 8008c18:	e32e      	b.n	8009278 <tcp_input+0xa94>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c1a:	7a20      	ldrb	r0, [r4, #8]
 8008c1c:	b128      	cbz	r0, 8008c2a <tcp_input+0x446>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c1e:	f89e 302c 	ldrb.w	r3, [lr, #44]	; 0x2c
 8008c22:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	4298      	cmp	r0, r3
 8008c28:	d10a      	bne.n	8008c40 <tcp_input+0x45c>
      if (lpcb->local_port == tcphdr->dest) {
 8008c2a:	8ae0      	ldrh	r0, [r4, #22]
 8008c2c:	884b      	ldrh	r3, [r1, #2]
 8008c2e:	4283      	cmp	r3, r0
 8008c30:	d106      	bne.n	8008c40 <tcp_input+0x45c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	4563      	cmp	r3, ip
 8008c36:	f000 8302 	beq.w	800923e <tcp_input+0xa5a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 82ff 	beq.w	800923e <tcp_input+0xa5a>
 8008c40:	46a1      	mov	r9, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c42:	68e4      	ldr	r4, [r4, #12]
 8008c44:	e7d4      	b.n	8008bf0 <tcp_input+0x40c>
  } else if (flags & TCP_SYN) {
 8008c46:	0798      	lsls	r0, r3, #30
 8008c48:	f57f ae87 	bpl.w	800895a <tcp_input+0x176>
    npcb = tcp_alloc(pcb->prio);
 8008c4c:	7d60      	ldrb	r0, [r4, #21]
 8008c4e:	f7fe fc0f 	bl	8007470 <tcp_alloc>
    if (npcb == NULL) {
 8008c52:	4682      	mov	sl, r0
 8008c54:	b948      	cbnz	r0, 8008c6a <tcp_input+0x486>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c56:	69a3      	ldr	r3, [r4, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f43f ae7e 	beq.w	800895a <tcp_input+0x176>
 8008c5e:	4601      	mov	r1, r0
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295
 8008c64:	6920      	ldr	r0, [r4, #16]
 8008c66:	4798      	blx	r3
 8008c68:	e677      	b.n	800895a <tcp_input+0x176>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008c6a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8008c6e:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008c70:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008c72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008c76:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008c78:	8ae3      	ldrh	r3, [r4, #22]
 8008c7a:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008c7c:	7813      	ldrb	r3, [r2, #0]
 8008c7e:	7852      	ldrb	r2, [r2, #1]
 8008c80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c84:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008c86:	2303      	movs	r3, #3
 8008c88:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c8a:	f8db 3000 	ldr.w	r3, [fp]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c92:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008c94:	f7fe fa06 	bl	80070a4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c98:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8008c9c:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008ca0:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8008ca2:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 8008ca6:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008caa:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008cae:	6923      	ldr	r3, [r4, #16]
    npcb->snd_lbb = iss;
 8008cb0:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->listener = pcb;
 8008cb4:	f8ca 407c 	str.w	r4, [sl, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 8008cb8:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008cbc:	7a63      	ldrb	r3, [r4, #9]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
 8008cc2:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008cc6:	7a23      	ldrb	r3, [r4, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008cc8:	f10a 0404 	add.w	r4, sl, #4
    npcb->netif_idx = pcb->netif_idx;
 8008ccc:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	f8c7 a000 	str.w	sl, [r7]
 8008cd6:	f8ca 300c 	str.w	r3, [sl, #12]
 8008cda:	f001 fccb 	bl	800a674 <tcp_timer_needed>
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4b46      	ldr	r3, [pc, #280]	; (8008dfc <tcp_input+0x618>)
    tcp_parseopt(npcb);
 8008ce2:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 8008ce4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008ce6:	f7ff f881 	bl	8007dec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008cea:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008cec:	4620      	mov	r0, r4
 8008cee:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8008cf2:	89db      	ldrh	r3, [r3, #14]
 8008cf4:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008cf8:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008cfc:	f7fc fa48 	bl	8005190 <ip4_route>
 8008d00:	4622      	mov	r2, r4
 8008d02:	4601      	mov	r1, r0
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7fe f9e7 	bl	80070d8 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d0a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008d0c:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d10:	4650      	mov	r0, sl
 8008d12:	f000 ffdd 	bl	8009cd0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008d16:	b120      	cbz	r0, 8008d22 <tcp_input+0x53e>
      tcp_abandon(npcb, 0);
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	f7fe fa9a 	bl	8007254 <tcp_abandon>
 8008d20:	e61b      	b.n	800895a <tcp_input+0x176>
    tcp_output(npcb);
 8008d22:	4650      	mov	r0, sl
 8008d24:	e754      	b.n	8008bd0 <tcp_input+0x3ec>
  if (flags & TCP_RST) {
 8008d26:	9b05      	ldr	r3, [sp, #20]
    tcp_input_pcb = pcb;
 8008d28:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	0759      	lsls	r1, r3, #29
 8008d2e:	d533      	bpl.n	8008d98 <tcp_input+0x5b4>
    if (pcb->state == SYN_SENT) {
 8008d30:	7d21      	ldrb	r1, [r4, #20]
 8008d32:	2902      	cmp	r1, #2
 8008d34:	d122      	bne.n	8008d7c <tcp_input+0x598>
      if (ackno == pcb->snd_nxt) {
 8008d36:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008d38:	f8da 3000 	ldr.w	r3, [sl]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d109      	bne.n	8008d54 <tcp_input+0x570>
      recv_flags |= TF_RESET;
 8008d40:	f898 3000 	ldrb.w	r3, [r8]
 8008d44:	f043 0308 	orr.w	r3, r3, #8
 8008d48:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008d4c:	8b63      	ldrh	r3, [r4, #26]
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8008d54:	f898 3000 	ldrb.w	r3, [r8]
 8008d58:	0719      	lsls	r1, r3, #28
 8008d5a:	f140 8206 	bpl.w	800916a <tcp_input+0x986>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008d5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008d62:	b11b      	cbz	r3, 8008d6c <tcp_input+0x588>
 8008d64:	f06f 010d 	mvn.w	r1, #13
 8008d68:	6920      	ldr	r0, [r4, #16]
 8008d6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4824      	ldr	r0, [pc, #144]	; (8008e00 <tcp_input+0x61c>)
 8008d70:	f7fe fa0c 	bl	800718c <tcp_pcb_remove>
        tcp_free(pcb);
 8008d74:	4620      	mov	r0, r4
 8008d76:	f7fd ff8b 	bl	8006c90 <tcp_free>
 8008d7a:	e682      	b.n	8008a82 <tcp_input+0x29e>
      if (seqno == pcb->rcv_nxt) {
 8008d7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d7e:	f8db 3000 	ldr.w	r3, [fp]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	f000 827c 	beq.w	8009280 <tcp_input+0xa9c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d88:	1a9b      	subs	r3, r3, r2
 8008d8a:	d4e3      	bmi.n	8008d54 <tcp_input+0x570>
 8008d8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dcdf      	bgt.n	8008d54 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8008d94:	8b63      	ldrh	r3, [r4, #26]
 8008d96:	e007      	b.n	8008da8 <tcp_input+0x5c4>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008d98:	f013 0f02 	tst.w	r3, #2
 8008d9c:	8b63      	ldrh	r3, [r4, #26]
 8008d9e:	d006      	beq.n	8008dae <tcp_input+0x5ca>
 8008da0:	7d22      	ldrb	r2, [r4, #20]
 8008da2:	3a02      	subs	r2, #2
 8008da4:	2a01      	cmp	r2, #1
 8008da6:	d902      	bls.n	8008dae <tcp_input+0x5ca>
        tcp_ack_now(pcb);
 8008da8:	f043 0302 	orr.w	r3, r3, #2
 8008dac:	e7d1      	b.n	8008d52 <tcp_input+0x56e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008dae:	06da      	lsls	r2, r3, #27
  tcp_parseopt(pcb);
 8008db0:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 8008db2:	bf5e      	ittt	pl
 8008db4:	4b0f      	ldrpl	r3, [pc, #60]	; (8008df4 <tcp_input+0x610>)
 8008db6:	681b      	ldrpl	r3, [r3, #0]
 8008db8:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008dc0:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 8008dc4:	f7ff f812 	bl	8007dec <tcp_parseopt>
  switch (pcb->state) {
 8008dc8:	7d23      	ldrb	r3, [r4, #20]
 8008dca:	3b02      	subs	r3, #2
 8008dcc:	2b07      	cmp	r3, #7
 8008dce:	d8c1      	bhi.n	8008d54 <tcp_input+0x570>
 8008dd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008dd4:	00a90018 	.word	0x00a90018
 8008dd8:	011d0119 	.word	0x011d0119
 8008ddc:	01190167 	.word	0x01190167
 8008de0:	01b20180 	.word	0x01b20180
 8008de4:	0800e8d1 	.word	0x0800e8d1
 8008de8:	0800c5ae 	.word	0x0800c5ae
 8008dec:	200243aa 	.word	0x200243aa
 8008df0:	20024634 	.word	0x20024634
 8008df4:	20027d30 	.word	0x20027d30
 8008df8:	20027d34 	.word	0x20027d34
 8008dfc:	20027d28 	.word	0x20027d28
 8008e00:	20027d2c 	.word	0x20027d2c
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 0212 	and.w	r2, r3, #18
 8008e0c:	2a12      	cmp	r2, #18
 8008e0e:	d16a      	bne.n	8008ee6 <tcp_input+0x702>
          && (ackno == pcb->lastack + 1)) {
 8008e10:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008e12:	f8da 1000 	ldr.w	r1, [sl]
 8008e16:	3201      	adds	r2, #1
 8008e18:	428a      	cmp	r2, r1
 8008e1a:	d164      	bne.n	8008ee6 <tcp_input+0x702>
        pcb->rcv_nxt = seqno + 1;
 8008e1c:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 8008e20:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 8008e22:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 8008e24:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008e26:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e28:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 8008e2a:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e2c:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8008e2e:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008e30:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008e32:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 8008e34:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e38:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 8008e3a:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e3c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7fc f9a5 	bl	8005190 <ip4_route>
 8008e46:	4632      	mov	r2, r6
 8008e48:	4601      	mov	r1, r0
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7fe f944 	bl	80070d8 <tcp_eff_send_mss_netif>
 8008e50:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e52:	0042      	lsls	r2, r0, #1
 8008e54:	0083      	lsls	r3, r0, #2
 8008e56:	f241 101c 	movw	r0, #4380	; 0x111c
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4282      	cmp	r2, r0
 8008e5e:	bf38      	it	cc
 8008e60:	4601      	movcc	r1, r0
 8008e62:	428b      	cmp	r3, r1
 8008e64:	d233      	bcs.n	8008ece <tcp_input+0x6ea>
 8008e66:	b298      	uxth	r0, r3
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008e68:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e6c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008e70:	b933      	cbnz	r3, 8008e80 <tcp_input+0x69c>
 8008e72:	4ba8      	ldr	r3, [pc, #672]	; (8009114 <tcp_input+0x930>)
 8008e74:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008e78:	49a7      	ldr	r1, [pc, #668]	; (8009118 <tcp_input+0x934>)
 8008e7a:	48a8      	ldr	r0, [pc, #672]	; (800911c <tcp_input+0x938>)
 8008e7c:	f002 fbb4 	bl	800b5e8 <iprintf>
        --pcb->snd_queuelen;
 8008e80:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8008e84:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 8008e86:	3b01      	subs	r3, #1
 8008e88:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 8008e8c:	bb1e      	cbnz	r6, 8008ed6 <tcp_input+0x6f2>
          rseg = pcb->unsent;
 8008e8e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008e90:	b936      	cbnz	r6, 8008ea0 <tcp_input+0x6bc>
 8008e92:	4ba0      	ldr	r3, [pc, #640]	; (8009114 <tcp_input+0x930>)
 8008e94:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008e98:	49a1      	ldr	r1, [pc, #644]	; (8009120 <tcp_input+0x93c>)
 8008e9a:	48a0      	ldr	r0, [pc, #640]	; (800911c <tcp_input+0x938>)
 8008e9c:	f002 fba4 	bl	800b5e8 <iprintf>
          pcb->unsent = rseg->next;
 8008ea0:	6833      	ldr	r3, [r6, #0]
 8008ea2:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7fe f83d 	bl	8006f24 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8008eaa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008eac:	b9b3      	cbnz	r3, 8008edc <tcp_input+0x6f8>
          pcb->rtime = -1;
 8008eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008eb2:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008eb4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f43f af6b 	beq.w	8008d94 <tcp_input+0x5b0>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	6920      	ldr	r0, [r4, #16]
 8008ec4:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8008ec6:	300d      	adds	r0, #13
 8008ec8:	f47f af64 	bne.w	8008d94 <tcp_input+0x5b0>
 8008ecc:	e5d9      	b.n	8008a82 <tcp_input+0x29e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ece:	4282      	cmp	r2, r0
 8008ed0:	bf88      	it	hi
 8008ed2:	b290      	uxthhi	r0, r2
 8008ed4:	e7c8      	b.n	8008e68 <tcp_input+0x684>
          pcb->unacked = rseg->next;
 8008ed6:	6833      	ldr	r3, [r6, #0]
 8008ed8:	6723      	str	r3, [r4, #112]	; 0x70
 8008eda:	e7e3      	b.n	8008ea4 <tcp_input+0x6c0>
          pcb->rtime = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8008ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ee4:	e7e6      	b.n	8008eb4 <tcp_input+0x6d0>
      else if (flags & TCP_ACK) {
 8008ee6:	06db      	lsls	r3, r3, #27
 8008ee8:	f57f af34 	bpl.w	8008d54 <tcp_input+0x570>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008eec:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008eee:	4a8d      	ldr	r2, [pc, #564]	; (8009124 <tcp_input+0x940>)
 8008ef0:	8818      	ldrh	r0, [r3, #0]
 8008ef2:	8811      	ldrh	r1, [r2, #0]
 8008ef4:	f8db 2000 	ldr.w	r2, [fp]
 8008ef8:	9002      	str	r0, [sp, #8]
 8008efa:	4620      	mov	r0, r4
 8008efc:	885b      	ldrh	r3, [r3, #2]
 8008efe:	440a      	add	r2, r1
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	4b89      	ldr	r3, [pc, #548]	; (8009128 <tcp_input+0x944>)
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	3304      	adds	r3, #4
 8008f08:	f8da 1000 	ldr.w	r1, [sl]
 8008f0c:	f001 f866 	bl	8009fdc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008f10:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	f63f af1d 	bhi.w	8008d54 <tcp_input+0x570>
          pcb->rtime = 0;
 8008f1a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 8008f1c:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8008f1e:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008f20:	f001 fa98 	bl	800a454 <tcp_rexmit_rto>
 8008f24:	e716      	b.n	8008d54 <tcp_input+0x570>
      if (flags & TCP_ACK) {
 8008f26:	9b05      	ldr	r3, [sp, #20]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	06df      	lsls	r7, r3, #27
 8008f2c:	d55d      	bpl.n	8008fea <tcp_input+0x806>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008f2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f30:	f8da 1000 	ldr.w	r1, [sl]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	42cb      	cmn	r3, r1
 8008f38:	d446      	bmi.n	8008fc8 <tcp_input+0x7e4>
 8008f3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f3c:	1acb      	subs	r3, r1, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dc42      	bgt.n	8008fc8 <tcp_input+0x7e4>
          pcb->state = ESTABLISHED;
 8008f42:	2304      	movs	r3, #4
 8008f44:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8008f46:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008f48:	b19b      	cbz	r3, 8008f72 <tcp_input+0x78e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	b933      	cbnz	r3, 8008f5c <tcp_input+0x778>
 8008f4e:	4b71      	ldr	r3, [pc, #452]	; (8009114 <tcp_input+0x930>)
 8008f50:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008f54:	4975      	ldr	r1, [pc, #468]	; (800912c <tcp_input+0x948>)
 8008f56:	4871      	ldr	r0, [pc, #452]	; (800911c <tcp_input+0x938>)
 8008f58:	f002 fb46 	bl	800b5e8 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008f5c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	b13b      	cbz	r3, 8008f72 <tcp_input+0x78e>
 8008f62:	2200      	movs	r2, #0
 8008f64:	4621      	mov	r1, r4
 8008f66:	6920      	ldr	r0, [r4, #16]
 8008f68:	4798      	blx	r3
          if (err != ERR_OK) {
 8008f6a:	b130      	cbz	r0, 8008f7a <tcp_input+0x796>
            if (err != ERR_ABRT) {
 8008f6c:	300d      	adds	r0, #13
 8008f6e:	f43f ad88 	beq.w	8008a82 <tcp_input+0x29e>
              tcp_abort(pcb);
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7fe f9f0 	bl	8007358 <tcp_abort>
 8008f78:	e583      	b.n	8008a82 <tcp_input+0x29e>
          tcp_receive(pcb);
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f7ff f804 	bl	8007f88 <tcp_receive>
          if (recv_acked != 0) {
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b113      	cbz	r3, 8008f8c <tcp_input+0x7a8>
            recv_acked--;
 8008f86:	3b01      	subs	r3, #1
 8008f88:	9a06      	ldr	r2, [sp, #24]
 8008f8a:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f8c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008f8e:	0059      	lsls	r1, r3, #1
 8008f90:	009a      	lsls	r2, r3, #2
 8008f92:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f96:	4608      	mov	r0, r1
 8008f98:	4299      	cmp	r1, r3
 8008f9a:	bf38      	it	cc
 8008f9c:	4618      	movcc	r0, r3
 8008f9e:	4282      	cmp	r2, r0
 8008fa0:	d20e      	bcs.n	8008fc0 <tcp_input+0x7dc>
 8008fa2:	b293      	uxth	r3, r2
 8008fa4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008fa8:	f898 3000 	ldrb.w	r3, [r8]
 8008fac:	0699      	lsls	r1, r3, #26
 8008fae:	f57f aed1 	bpl.w	8008d54 <tcp_input+0x570>
        tcp_ack_now(pcb);
 8008fb2:	8b63      	ldrh	r3, [r4, #26]
 8008fb4:	f043 0302 	orr.w	r3, r3, #2
 8008fb8:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8008fba:	2307      	movs	r3, #7
          pcb->state = CLOSING;
 8008fbc:	7523      	strb	r3, [r4, #20]
 8008fbe:	e6c9      	b.n	8008d54 <tcp_input+0x570>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	bf88      	it	hi
 8008fc4:	b28b      	uxthhi	r3, r1
 8008fc6:	e7ed      	b.n	8008fa4 <tcp_input+0x7c0>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fc8:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fca:	4a56      	ldr	r2, [pc, #344]	; (8009124 <tcp_input+0x940>)
 8008fcc:	881e      	ldrh	r6, [r3, #0]
 8008fce:	8810      	ldrh	r0, [r2, #0]
 8008fd0:	f8db 2000 	ldr.w	r2, [fp]
 8008fd4:	9602      	str	r6, [sp, #8]
 8008fd6:	885b      	ldrh	r3, [r3, #2]
 8008fd8:	4402      	add	r2, r0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	4b52      	ldr	r3, [pc, #328]	; (8009128 <tcp_input+0x944>)
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	f000 fffa 	bl	8009fdc <tcp_rst>
 8008fe8:	e6b4      	b.n	8008d54 <tcp_input+0x570>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008fea:	0798      	lsls	r0, r3, #30
 8008fec:	f57f aeb2 	bpl.w	8008d54 <tcp_input+0x570>
 8008ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff2:	f8db 2000 	ldr.w	r2, [fp]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	f47f aeab 	bne.w	8008d54 <tcp_input+0x570>
        tcp_rexmit(pcb);
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 ff74 	bl	8009eec <tcp_rexmit>
 8009004:	e6a6      	b.n	8008d54 <tcp_input+0x570>
      tcp_receive(pcb);
 8009006:	4620      	mov	r0, r4
 8009008:	f7fe ffbe 	bl	8007f88 <tcp_receive>
 800900c:	e7cc      	b.n	8008fa8 <tcp_input+0x7c4>
      tcp_receive(pcb);
 800900e:	4620      	mov	r0, r4
 8009010:	f7fe ffba 	bl	8007f88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009014:	f898 3000 	ldrb.w	r3, [r8]
 8009018:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800901c:	9b05      	ldr	r3, [sp, #20]
 800901e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 8009020:	d030      	beq.n	8009084 <tcp_input+0x8a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009022:	f013 0f10 	tst.w	r3, #16
 8009026:	8b63      	ldrh	r3, [r4, #26]
 8009028:	d027      	beq.n	800907a <tcp_input+0x896>
 800902a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800902c:	f8da 2000 	ldr.w	r2, [sl]
 8009030:	4291      	cmp	r1, r2
 8009032:	d122      	bne.n	800907a <tcp_input+0x896>
 8009034:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009036:	bb02      	cbnz	r2, 800907a <tcp_input+0x896>
          tcp_ack_now(pcb);
 8009038:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800903c:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800903e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8009040:	f7fe f872 	bl	8007128 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	429c      	cmp	r4, r3
 8009048:	d109      	bne.n	800905e <tcp_input+0x87a>
        TCP_RMV_ACTIVE(pcb);
 800904a:	68e3      	ldr	r3, [r4, #12]
 800904c:	603b      	str	r3, [r7, #0]
 800904e:	e008      	b.n	8009062 <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	4294      	cmp	r4, r2
 8009054:	d102      	bne.n	800905c <tcp_input+0x878>
        TCP_RMV_ACTIVE(pcb);
 8009056:	68e2      	ldr	r2, [r4, #12]
 8009058:	60da      	str	r2, [r3, #12]
 800905a:	e002      	b.n	8009062 <tcp_input+0x87e>
          TCP_RMV_ACTIVE(pcb);
 800905c:	4613      	mov	r3, r2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1f6      	bne.n	8009050 <tcp_input+0x86c>
        TCP_RMV_ACTIVE(pcb);
 8009062:	2201      	movs	r2, #1
 8009064:	4b32      	ldr	r3, [pc, #200]	; (8009130 <tcp_input+0x94c>)
 8009066:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009068:	230a      	movs	r3, #10
 800906a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800906c:	4b31      	ldr	r3, [pc, #196]	; (8009134 <tcp_input+0x950>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	601c      	str	r4, [r3, #0]
 8009072:	60e2      	str	r2, [r4, #12]
 8009074:	f001 fafe 	bl	800a674 <tcp_timer_needed>
 8009078:	e66c      	b.n	8008d54 <tcp_input+0x570>
          tcp_ack_now(pcb);
 800907a:	f043 0302 	orr.w	r3, r3, #2
 800907e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8009080:	2308      	movs	r3, #8
 8009082:	e79b      	b.n	8008fbc <tcp_input+0x7d8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009084:	06da      	lsls	r2, r3, #27
 8009086:	f57f ae65 	bpl.w	8008d54 <tcp_input+0x570>
 800908a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800908c:	f8da 3000 	ldr.w	r3, [sl]
 8009090:	429a      	cmp	r2, r3
 8009092:	f47f ae5f 	bne.w	8008d54 <tcp_input+0x570>
 8009096:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009098:	2b00      	cmp	r3, #0
 800909a:	f47f ae5b 	bne.w	8008d54 <tcp_input+0x570>
        pcb->state = FIN_WAIT_2;
 800909e:	2306      	movs	r3, #6
 80090a0:	e78c      	b.n	8008fbc <tcp_input+0x7d8>
      tcp_receive(pcb);
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7fe ff70 	bl	8007f88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80090a8:	f898 3000 	ldrb.w	r3, [r8]
 80090ac:	069b      	lsls	r3, r3, #26
 80090ae:	f57f ae51 	bpl.w	8008d54 <tcp_input+0x570>
        tcp_ack_now(pcb);
 80090b2:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80090b4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80090b6:	f043 0302 	orr.w	r3, r3, #2
 80090ba:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80090bc:	f7fe f834 	bl	8007128 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d0c1      	beq.n	800904a <tcp_input+0x866>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0cb      	beq.n	8009062 <tcp_input+0x87e>
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	4294      	cmp	r4, r2
 80090ce:	d0c2      	beq.n	8009056 <tcp_input+0x872>
 80090d0:	4613      	mov	r3, r2
 80090d2:	e7f8      	b.n	80090c6 <tcp_input+0x8e2>
      tcp_receive(pcb);
 80090d4:	4620      	mov	r0, r4
 80090d6:	f7fe ff57 	bl	8007f88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80090da:	9b05      	ldr	r3, [sp, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	06de      	lsls	r6, r3, #27
 80090e0:	f57f ae38 	bpl.w	8008d54 <tcp_input+0x570>
 80090e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80090e6:	f8da 3000 	ldr.w	r3, [sl]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	f47f ae32 	bne.w	8008d54 <tcp_input+0x570>
 80090f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f47f ae2e 	bne.w	8008d54 <tcp_input+0x570>
        tcp_pcb_purge(pcb);
 80090f8:	4620      	mov	r0, r4
 80090fa:	f7fe f815 	bl	8007128 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	429c      	cmp	r4, r3
 8009102:	d0a2      	beq.n	800904a <tcp_input+0x866>
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0ac      	beq.n	8009062 <tcp_input+0x87e>
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	4294      	cmp	r4, r2
 800910c:	d0a3      	beq.n	8009056 <tcp_input+0x872>
 800910e:	4613      	mov	r3, r2
 8009110:	e7f8      	b.n	8009104 <tcp_input+0x920>
 8009112:	bf00      	nop
 8009114:	0800e9a4 	.word	0x0800e9a4
 8009118:	0800e91e 	.word	0x0800e91e
 800911c:	0800c5ae 	.word	0x0800c5ae
 8009120:	0800e934 	.word	0x0800e934
 8009124:	200243aa 	.word	0x200243aa
 8009128:	20024634 	.word	0x20024634
 800912c:	0800e947 	.word	0x0800e947
 8009130:	20027d28 	.word	0x20027d28
 8009134:	20027d3c 	.word	0x20027d3c
      tcp_receive(pcb);
 8009138:	4620      	mov	r0, r4
 800913a:	f7fe ff25 	bl	8007f88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	06d8      	lsls	r0, r3, #27
 8009144:	f57f ae06 	bpl.w	8008d54 <tcp_input+0x570>
 8009148:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800914a:	f8da 3000 	ldr.w	r3, [sl]
 800914e:	429a      	cmp	r2, r3
 8009150:	f47f ae00 	bne.w	8008d54 <tcp_input+0x570>
 8009154:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009156:	2b00      	cmp	r3, #0
 8009158:	f47f adfc 	bne.w	8008d54 <tcp_input+0x570>
        recv_flags |= TF_CLOSED;
 800915c:	f898 3000 	ldrb.w	r3, [r8]
 8009160:	f043 0310 	orr.w	r3, r3, #16
 8009164:	f888 3000 	strb.w	r3, [r8]
 8009168:	e5f4      	b.n	8008d54 <tcp_input+0x570>
        if (recv_acked > 0) {
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	881a      	ldrh	r2, [r3, #0]
 800916e:	b12a      	cbz	r2, 800917c <tcp_input+0x998>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009170:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009174:	b9eb      	cbnz	r3, 80091b2 <tcp_input+0x9ce>
          recv_acked = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	9a06      	ldr	r2, [sp, #24]
 800917a:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800917c:	4620      	mov	r0, r4
 800917e:	f7fe fe7d 	bl	8007e7c <tcp_input_delayed_close>
 8009182:	2800      	cmp	r0, #0
 8009184:	f47f ac7d 	bne.w	8008a82 <tcp_input+0x29e>
        if (recv_data != NULL) {
 8009188:	f8d9 3000 	ldr.w	r3, [r9]
 800918c:	b33b      	cbz	r3, 80091de <tcp_input+0x9fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800918e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009190:	b133      	cbz	r3, 80091a0 <tcp_input+0x9bc>
 8009192:	4b44      	ldr	r3, [pc, #272]	; (80092a4 <tcp_input+0xac0>)
 8009194:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009198:	4943      	ldr	r1, [pc, #268]	; (80092a8 <tcp_input+0xac4>)
 800919a:	4844      	ldr	r0, [pc, #272]	; (80092ac <tcp_input+0xac8>)
 800919c:	f002 fa24 	bl	800b5e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80091a0:	8b63      	ldrh	r3, [r4, #26]
 80091a2:	f013 0310 	ands.w	r3, r3, #16
 80091a6:	d00a      	beq.n	80091be <tcp_input+0x9da>
            pbuf_free(recv_data);
 80091a8:	f8d9 0000 	ldr.w	r0, [r9]
 80091ac:	f7fd fa70 	bl	8006690 <pbuf_free>
 80091b0:	e6df      	b.n	8008f72 <tcp_input+0x78e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80091b2:	4621      	mov	r1, r4
 80091b4:	6920      	ldr	r0, [r4, #16]
 80091b6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80091b8:	300d      	adds	r0, #13
 80091ba:	d1dc      	bne.n	8009176 <tcp_input+0x992>
 80091bc:	e461      	b.n	8008a82 <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80091be:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 80091c2:	b316      	cbz	r6, 800920a <tcp_input+0xa26>
 80091c4:	f8d9 2000 	ldr.w	r2, [r9]
 80091c8:	4621      	mov	r1, r4
 80091ca:	6920      	ldr	r0, [r4, #16]
 80091cc:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80091ce:	f110 0f0d 	cmn.w	r0, #13
 80091d2:	f43f ac56 	beq.w	8008a82 <tcp_input+0x29e>
          if (err != ERR_OK) {
 80091d6:	b110      	cbz	r0, 80091de <tcp_input+0x9fa>
            pcb->refused_data = recv_data;
 80091d8:	f8d9 3000 	ldr.w	r3, [r9]
 80091dc:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 80091de:	f898 3000 	ldrb.w	r3, [r8]
 80091e2:	069a      	lsls	r2, r3, #26
 80091e4:	d505      	bpl.n	80091f2 <tcp_input+0xa0e>
          if (pcb->refused_data != NULL) {
 80091e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80091e8:	b1bb      	cbz	r3, 800921a <tcp_input+0xa36>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80091ea:	7b5a      	ldrb	r2, [r3, #13]
 80091ec:	f042 0220 	orr.w	r2, r2, #32
 80091f0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80091f2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80091f4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 80091f6:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 80091f8:	f7fe fe40 	bl	8007e7c <tcp_input_delayed_close>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f47f ac40 	bne.w	8008a82 <tcp_input+0x29e>
        tcp_output(pcb);
 8009202:	4620      	mov	r0, r4
 8009204:	f000 ff60 	bl	800a0c8 <tcp_output>
 8009208:	e43b      	b.n	8008a82 <tcp_input+0x29e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800920a:	4633      	mov	r3, r6
 800920c:	f8d9 2000 	ldr.w	r2, [r9]
 8009210:	4621      	mov	r1, r4
 8009212:	4630      	mov	r0, r6
 8009214:	f7fe fa9a 	bl	800774c <tcp_recv_null>
 8009218:	e7d9      	b.n	80091ce <tcp_input+0x9ea>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800921a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800921c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009220:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8009224:	bf1c      	itt	ne
 8009226:	3301      	addne	r3, #1
 8009228:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800922a:	2e00      	cmp	r6, #0
 800922c:	d0e1      	beq.n	80091f2 <tcp_input+0xa0e>
 800922e:	2300      	movs	r3, #0
 8009230:	4621      	mov	r1, r4
 8009232:	6920      	ldr	r0, [r4, #16]
 8009234:	461a      	mov	r2, r3
 8009236:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009238:	300d      	adds	r0, #13
 800923a:	d1da      	bne.n	80091f2 <tcp_input+0xa0e>
 800923c:	e421      	b.n	8008a82 <tcp_input+0x29e>
      if (prev != NULL) {
 800923e:	f1b9 0f00 	cmp.w	r9, #0
 8009242:	d005      	beq.n	8009250 <tcp_input+0xa6c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009244:	68e3      	ldr	r3, [r4, #12]
 8009246:	f8c9 300c 	str.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800924a:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <tcp_input+0xacc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800924c:	60e2      	str	r2, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800924e:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8009250:	9b05      	ldr	r3, [sp, #20]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	075a      	lsls	r2, r3, #29
 8009256:	f53f ab80 	bmi.w	800895a <tcp_input+0x176>
  if (flags & TCP_ACK) {
 800925a:	f013 0910 	ands.w	r9, r3, #16
 800925e:	f43f acf2 	beq.w	8008c46 <tcp_input+0x462>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009262:	4b14      	ldr	r3, [pc, #80]	; (80092b4 <tcp_input+0xad0>)
 8009264:	f8db 2000 	ldr.w	r2, [fp]
 8009268:	881e      	ldrh	r6, [r3, #0]
 800926a:	880b      	ldrh	r3, [r1, #0]
 800926c:	4432      	add	r2, r6
 800926e:	9001      	str	r0, [sp, #4]
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <tcp_input+0xad4>)
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	3304      	adds	r3, #4
 8009278:	f8da 1000 	ldr.w	r1, [sl]
 800927c:	4620      	mov	r0, r4
 800927e:	e492      	b.n	8008ba6 <tcp_input+0x3c2>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009280:	2900      	cmp	r1, #0
 8009282:	f47f ad5d 	bne.w	8008d40 <tcp_input+0x55c>
 8009286:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <tcp_input+0xac0>)
 8009288:	f44f 724e 	mov.w	r2, #824	; 0x338
 800928c:	490b      	ldr	r1, [pc, #44]	; (80092bc <tcp_input+0xad8>)
 800928e:	4807      	ldr	r0, [pc, #28]	; (80092ac <tcp_input+0xac8>)
 8009290:	f002 f9aa 	bl	800b5e8 <iprintf>
 8009294:	e554      	b.n	8008d40 <tcp_input+0x55c>
      if (prev != NULL) {
 8009296:	f1b9 0f00 	cmp.w	r9, #0
 800929a:	f47f abae 	bne.w	80089fa <tcp_input+0x216>
 800929e:	f7ff bbbc 	b.w	8008a1a <tcp_input+0x236>
 80092a2:	bf00      	nop
 80092a4:	0800e9a4 	.word	0x0800e9a4
 80092a8:	0800e965 	.word	0x0800e965
 80092ac:	0800c5ae 	.word	0x0800c5ae
 80092b0:	20027d34 	.word	0x20027d34
 80092b4:	200243aa 	.word	0x200243aa
 80092b8:	20024634 	.word	0x20024634
 80092bc:	0800e8fe 	.word	0x0800e8fe

080092c0 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80092c0:	4a02      	ldr	r2, [pc, #8]	; (80092cc <tcp_trigger_input_pcb_close+0xc>)
 80092c2:	7813      	ldrb	r3, [r2, #0]
 80092c4:	f043 0310 	orr.w	r3, r3, #16
 80092c8:	7013      	strb	r3, [r2, #0]
 80092ca:	4770      	bx	lr
 80092cc:	20024390 	.word	0x20024390

080092d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80092d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80092d2:	4604      	mov	r4, r0
 80092d4:	b930      	cbnz	r0, 80092e4 <tcp_output_segment_busy+0x14>
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <tcp_output_segment_busy+0x24>)
 80092d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80092dc:	4906      	ldr	r1, [pc, #24]	; (80092f8 <tcp_output_segment_busy+0x28>)
 80092de:	4807      	ldr	r0, [pc, #28]	; (80092fc <tcp_output_segment_busy+0x2c>)
 80092e0:	f002 f982 	bl	800b5e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 80092e8:	f110 30ff 	adds.w	r0, r0, #4294967295
 80092ec:	bf18      	it	ne
 80092ee:	2001      	movne	r0, #1
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop
 80092f4:	0800edbe 	.word	0x0800edbe
 80092f8:	0800edf1 	.word	0x0800edf1
 80092fc:	0800c5ae 	.word	0x0800c5ae

08009300 <tcp_pbuf_prealloc>:
{
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	9d08      	ldr	r5, [sp, #32]
 8009306:	4607      	mov	r7, r0
 8009308:	460c      	mov	r4, r1
 800930a:	4690      	mov	r8, r2
 800930c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009310:	461e      	mov	r6, r3
 8009312:	b92b      	cbnz	r3, 8009320 <tcp_pbuf_prealloc+0x20>
 8009314:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <tcp_pbuf_prealloc+0x94>)
 8009316:	22e8      	movs	r2, #232	; 0xe8
 8009318:	491f      	ldr	r1, [pc, #124]	; (8009398 <tcp_pbuf_prealloc+0x98>)
 800931a:	4820      	ldr	r0, [pc, #128]	; (800939c <tcp_pbuf_prealloc+0x9c>)
 800931c:	f002 f964 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009320:	b92d      	cbnz	r5, 800932e <tcp_pbuf_prealloc+0x2e>
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <tcp_pbuf_prealloc+0x94>)
 8009324:	22e9      	movs	r2, #233	; 0xe9
 8009326:	491e      	ldr	r1, [pc, #120]	; (80093a0 <tcp_pbuf_prealloc+0xa0>)
 8009328:	481c      	ldr	r0, [pc, #112]	; (800939c <tcp_pbuf_prealloc+0x9c>)
 800932a:	f002 f95d 	bl	800b5e8 <iprintf>
  if (length < max_length) {
 800932e:	4544      	cmp	r4, r8
 8009330:	d22d      	bcs.n	800938e <tcp_pbuf_prealloc+0x8e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009332:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009336:	079a      	lsls	r2, r3, #30
 8009338:	d409      	bmi.n	800934e <tcp_pbuf_prealloc+0x4e>
 800933a:	8b6b      	ldrh	r3, [r5, #26]
 800933c:	065b      	lsls	r3, r3, #25
 800933e:	d426      	bmi.n	800938e <tcp_pbuf_prealloc+0x8e>
        (!(pcb->flags & TF_NODELAY) &&
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	d003      	beq.n	800934e <tcp_pbuf_prealloc+0x4e>
         (!first_seg ||
 8009346:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009348:	b90b      	cbnz	r3, 800934e <tcp_pbuf_prealloc+0x4e>
          pcb->unsent != NULL ||
 800934a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800934c:	b1fb      	cbz	r3, 800938e <tcp_pbuf_prealloc+0x8e>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800934e:	f204 211b 	addw	r1, r4, #539	; 0x21b
 8009352:	f021 0103 	bic.w	r1, r1, #3
 8009356:	4541      	cmp	r1, r8
 8009358:	bf28      	it	cs
 800935a:	4641      	movcs	r1, r8
 800935c:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800935e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009362:	4638      	mov	r0, r7
 8009364:	f7fd f9fc 	bl	8006760 <pbuf_alloc>
  if (p == NULL) {
 8009368:	4605      	mov	r5, r0
 800936a:	b168      	cbz	r0, 8009388 <tcp_pbuf_prealloc+0x88>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800936c:	6803      	ldr	r3, [r0, #0]
 800936e:	b133      	cbz	r3, 800937e <tcp_pbuf_prealloc+0x7e>
 8009370:	4b08      	ldr	r3, [pc, #32]	; (8009394 <tcp_pbuf_prealloc+0x94>)
 8009372:	f240 120b 	movw	r2, #267	; 0x10b
 8009376:	490b      	ldr	r1, [pc, #44]	; (80093a4 <tcp_pbuf_prealloc+0xa4>)
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <tcp_pbuf_prealloc+0x9c>)
 800937a:	f002 f935 	bl	800b5e8 <iprintf>
  *oversize = p->len - length;
 800937e:	896b      	ldrh	r3, [r5, #10]
 8009380:	1b1b      	subs	r3, r3, r4
 8009382:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 8009384:	812c      	strh	r4, [r5, #8]
 8009386:	816c      	strh	r4, [r5, #10]
}
 8009388:	4628      	mov	r0, r5
 800938a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938e:	4621      	mov	r1, r4
 8009390:	e7e5      	b.n	800935e <tcp_pbuf_prealloc+0x5e>
 8009392:	bf00      	nop
 8009394:	0800edbe 	.word	0x0800edbe
 8009398:	0800ee16 	.word	0x0800ee16
 800939c:	0800c5ae 	.word	0x0800c5ae
 80093a0:	0800ee3a 	.word	0x0800ee3a
 80093a4:	0800ee59 	.word	0x0800ee59

080093a8 <tcp_create_segment>:
{
 80093a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	460e      	mov	r6, r1
 80093ae:	4617      	mov	r7, r2
 80093b0:	4699      	mov	r9, r3
 80093b2:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80093b6:	4680      	mov	r8, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <tcp_create_segment+0x1e>
 80093ba:	4b33      	ldr	r3, [pc, #204]	; (8009488 <tcp_create_segment+0xe0>)
 80093bc:	22a3      	movs	r2, #163	; 0xa3
 80093be:	4933      	ldr	r1, [pc, #204]	; (800948c <tcp_create_segment+0xe4>)
 80093c0:	4833      	ldr	r0, [pc, #204]	; (8009490 <tcp_create_segment+0xe8>)
 80093c2:	f002 f911 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80093c6:	b92e      	cbnz	r6, 80093d4 <tcp_create_segment+0x2c>
 80093c8:	4b2f      	ldr	r3, [pc, #188]	; (8009488 <tcp_create_segment+0xe0>)
 80093ca:	22a4      	movs	r2, #164	; 0xa4
 80093cc:	4931      	ldr	r1, [pc, #196]	; (8009494 <tcp_create_segment+0xec>)
 80093ce:	4830      	ldr	r0, [pc, #192]	; (8009490 <tcp_create_segment+0xe8>)
 80093d0:	f002 f90a 	bl	800b5e8 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80093d4:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80093d8:	f04f 0003 	mov.w	r0, #3
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80093dc:	bf14      	ite	ne
 80093de:	2504      	movne	r5, #4
 80093e0:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80093e2:	f7fc fef1 	bl	80061c8 <memp_malloc>
 80093e6:	4604      	mov	r4, r0
 80093e8:	b928      	cbnz	r0, 80093f6 <tcp_create_segment+0x4e>
    pbuf_free(p);
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7fd f950 	bl	8006690 <pbuf_free>
}
 80093f0:	4620      	mov	r0, r4
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 80093f6:	2300      	movs	r3, #0
  seg->flags = optflags;
 80093f8:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80093fc:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8009400:	e880 0048 	stmia.w	r0, {r3, r6}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009404:	8933      	ldrh	r3, [r6, #8]
 8009406:	4553      	cmp	r3, sl
 8009408:	d205      	bcs.n	8009416 <tcp_create_segment+0x6e>
 800940a:	4b1f      	ldr	r3, [pc, #124]	; (8009488 <tcp_create_segment+0xe0>)
 800940c:	22b0      	movs	r2, #176	; 0xb0
 800940e:	4922      	ldr	r1, [pc, #136]	; (8009498 <tcp_create_segment+0xf0>)
 8009410:	481f      	ldr	r0, [pc, #124]	; (8009490 <tcp_create_segment+0xe8>)
 8009412:	f002 f8e9 	bl	800b5e8 <iprintf>
  seg->len = p->tot_len - optlen;
 8009416:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009418:	4630      	mov	r0, r6
 800941a:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800941c:	eba3 030a 	sub.w	r3, r3, sl
 8009420:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009422:	f7fd f8fe 	bl	8006622 <pbuf_add_header>
 8009426:	4606      	mov	r6, r0
 8009428:	b120      	cbz	r0, 8009434 <tcp_create_segment+0x8c>
    tcp_seg_free(seg);
 800942a:	4620      	mov	r0, r4
    return NULL;
 800942c:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800942e:	f7fd fd79 	bl	8006f24 <tcp_seg_free>
    return NULL;
 8009432:	e7dd      	b.n	80093f0 <tcp_create_segment+0x48>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009434:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009436:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009438:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800943c:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009440:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009442:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009446:	ea47 3505 	orr.w	r5, r7, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800944a:	f7fb f9b3 	bl	80047b4 <lwip_htons>
 800944e:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009452:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009456:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800945a:	f7fb f9ab 	bl	80047b4 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800945e:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009462:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009466:	4648      	mov	r0, r9
 8009468:	f7fb f9a7 	bl	80047ba <lwip_htonl>
 800946c:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009470:	b2a8      	uxth	r0, r5
 8009472:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009476:	f7fb f99d 	bl	80047b4 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800947a:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800947c:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8009480:	749e      	strb	r6, [r3, #18]
 8009482:	74de      	strb	r6, [r3, #19]
  return seg;
 8009484:	e7b4      	b.n	80093f0 <tcp_create_segment+0x48>
 8009486:	bf00      	nop
 8009488:	0800edbe 	.word	0x0800edbe
 800948c:	0800eb2c 	.word	0x0800eb2c
 8009490:	0800c5ae 	.word	0x0800c5ae
 8009494:	0800eb4c 	.word	0x0800eb4c
 8009498:	0800eb6d 	.word	0x0800eb6d

0800949c <tcp_output_alloc_header_common.constprop.3>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800949c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800949e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80094a2:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80094a4:	4606      	mov	r6, r0
 80094a6:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80094a8:	2022      	movs	r0, #34	; 0x22
 80094aa:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80094ae:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80094b0:	f7fd f956 	bl	8006760 <pbuf_alloc>
  if (p != NULL) {
 80094b4:	4605      	mov	r5, r0
 80094b6:	b348      	cbz	r0, 800950c <tcp_output_alloc_header_common.constprop.3+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80094b8:	8943      	ldrh	r3, [r0, #10]
 80094ba:	2b13      	cmp	r3, #19
 80094bc:	dc06      	bgt.n	80094cc <tcp_output_alloc_header_common.constprop.3+0x30>
 80094be:	4b15      	ldr	r3, [pc, #84]	; (8009514 <tcp_output_alloc_header_common.constprop.3+0x78>)
 80094c0:	f240 7224 	movw	r2, #1828	; 0x724
 80094c4:	4914      	ldr	r1, [pc, #80]	; (8009518 <tcp_output_alloc_header_common.constprop.3+0x7c>)
 80094c6:	4815      	ldr	r0, [pc, #84]	; (800951c <tcp_output_alloc_header_common.constprop.3+0x80>)
 80094c8:	f002 f88e 	bl	800b5e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80094cc:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 80094ce:	4640      	mov	r0, r8
 80094d0:	f7fb f970 	bl	80047b4 <lwip_htons>
 80094d4:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80094d6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80094da:	f7fb f96b 	bl	80047b4 <lwip_htons>
    tcphdr->seqno = seqno_be;
 80094de:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 80094e0:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7fb f969 	bl	80047ba <lwip_htonl>
 80094e8:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80094ea:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80094ee:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 80094f2:	f7fb f95f 	bl	80047b4 <lwip_htons>
 80094f6:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80094f8:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 80094fc:	f7fb f95a 	bl	80047b4 <lwip_htons>
    tcphdr->chksum = 0;
 8009500:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8009502:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8009504:	7423      	strb	r3, [r4, #16]
 8009506:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8009508:	74a3      	strb	r3, [r4, #18]
 800950a:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009512:	bf00      	nop
 8009514:	0800edbe 	.word	0x0800edbe
 8009518:	0800ed41 	.word	0x0800ed41
 800951c:	0800c5ae 	.word	0x0800c5ae

08009520 <tcp_output_alloc_header.constprop.2>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009522:	460d      	mov	r5, r1
 8009524:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009526:	4604      	mov	r4, r0
 8009528:	b930      	cbnz	r0, 8009538 <tcp_output_alloc_header.constprop.2+0x18>
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <tcp_output_alloc_header.constprop.2+0x40>)
 800952c:	f240 7242 	movw	r2, #1858	; 0x742
 8009530:	490c      	ldr	r1, [pc, #48]	; (8009564 <tcp_output_alloc_header.constprop.2+0x44>)
 8009532:	480d      	ldr	r0, [pc, #52]	; (8009568 <tcp_output_alloc_header.constprop.2+0x48>)
 8009534:	f002 f858 	bl	800b5e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009538:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800953a:	4629      	mov	r1, r5
 800953c:	8ae3      	ldrh	r3, [r4, #22]
 800953e:	9202      	str	r2, [sp, #8]
 8009540:	2210      	movs	r2, #16
 8009542:	9201      	str	r2, [sp, #4]
 8009544:	8b22      	ldrh	r2, [r4, #24]
 8009546:	9200      	str	r2, [sp, #0]
 8009548:	4632      	mov	r2, r6
 800954a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800954c:	f7ff ffa6 	bl	800949c <tcp_output_alloc_header_common.constprop.3>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009550:	b118      	cbz	r0, 800955a <tcp_output_alloc_header.constprop.2+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009552:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009556:	4413      	add	r3, r2
 8009558:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800955a:	b004      	add	sp, #16
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	bf00      	nop
 8009560:	0800edbe 	.word	0x0800edbe
 8009564:	0800ed1c 	.word	0x0800ed1c
 8009568:	0800c5ae 	.word	0x0800c5ae

0800956c <tcp_output_fill_options.isra.0.constprop.4>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800956c:	b930      	cbnz	r0, 800957c <tcp_output_fill_options.isra.0.constprop.4+0x10>
 800956e:	4b04      	ldr	r3, [pc, #16]	; (8009580 <tcp_output_fill_options.isra.0.constprop.4+0x14>)
 8009570:	f240 7256 	movw	r2, #1878	; 0x756
 8009574:	4903      	ldr	r1, [pc, #12]	; (8009584 <tcp_output_fill_options.isra.0.constprop.4+0x18>)
 8009576:	4804      	ldr	r0, [pc, #16]	; (8009588 <tcp_output_fill_options.isra.0.constprop.4+0x1c>)
 8009578:	f002 b836 	b.w	800b5e8 <iprintf>
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	0800edbe 	.word	0x0800edbe
 8009584:	0800ed98 	.word	0x0800ed98
 8009588:	0800c5ae 	.word	0x0800c5ae

0800958c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958e:	4604      	mov	r4, r0
 8009590:	b085      	sub	sp, #20
 8009592:	4617      	mov	r7, r2
 8009594:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009596:	460d      	mov	r5, r1
 8009598:	b931      	cbnz	r1, 80095a8 <tcp_output_control_segment+0x1c>
 800959a:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <tcp_output_control_segment+0x64>)
 800959c:	f240 7287 	movw	r2, #1927	; 0x787
 80095a0:	4914      	ldr	r1, [pc, #80]	; (80095f4 <tcp_output_control_segment+0x68>)
 80095a2:	4815      	ldr	r0, [pc, #84]	; (80095f8 <tcp_output_control_segment+0x6c>)
 80095a4:	f002 f820 	bl	800b5e8 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80095a8:	b164      	cbz	r4, 80095c4 <tcp_output_control_segment+0x38>
 80095aa:	7a20      	ldrb	r0, [r4, #8]
 80095ac:	b150      	cbz	r0, 80095c4 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 80095ae:	f7fc ff9f 	bl	80064f0 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 80095b2:	b968      	cbnz	r0, 80095d0 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 80095b4:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80095b8:	4628      	mov	r0, r5
 80095ba:	f7fd f869 	bl	8006690 <pbuf_free>
  return err;
}
 80095be:	4620      	mov	r0, r4
 80095c0:	b005      	add	sp, #20
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7fb fde3 	bl	8005190 <ip4_route>
  if (netif == NULL) {
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d0f2      	beq.n	80095b4 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 80095ce:	b164      	cbz	r4, 80095ea <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 80095d0:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 80095d2:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80095d4:	2206      	movs	r2, #6
 80095d6:	9002      	str	r0, [sp, #8]
 80095d8:	9400      	str	r4, [sp, #0]
 80095da:	4639      	mov	r1, r7
 80095dc:	9201      	str	r2, [sp, #4]
 80095de:	4628      	mov	r0, r5
 80095e0:	4632      	mov	r2, r6
 80095e2:	f7fb ff31 	bl	8005448 <ip4_output_if>
 80095e6:	4604      	mov	r4, r0
 80095e8:	e7e6      	b.n	80095b8 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 80095ea:	23ff      	movs	r3, #255	; 0xff
 80095ec:	e7f2      	b.n	80095d4 <tcp_output_control_segment+0x48>
 80095ee:	bf00      	nop
 80095f0:	0800edbe 	.word	0x0800edbe
 80095f4:	0800ed6f 	.word	0x0800ed6f
 80095f8:	0800c5ae 	.word	0x0800c5ae

080095fc <tcp_write>:
{
 80095fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	b091      	sub	sp, #68	; 0x44
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009602:	4605      	mov	r5, r0
{
 8009604:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 8009606:	2300      	movs	r3, #0
{
 8009608:	9108      	str	r1, [sp, #32]
 800960a:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 800960c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009610:	b958      	cbnz	r0, 800962a <tcp_write+0x2e>
 8009612:	4bab      	ldr	r3, [pc, #684]	; (80098c0 <tcp_write+0x2c4>)
 8009614:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8009618:	49aa      	ldr	r1, [pc, #680]	; (80098c4 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800961a:	48ab      	ldr	r0, [pc, #684]	; (80098c8 <tcp_write+0x2cc>)
 800961c:	f001 ffe4 	bl	800b5e8 <iprintf>
 8009620:	f06f 000f 	mvn.w	r0, #15
}
 8009624:	b011      	add	sp, #68	; 0x44
 8009626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800962a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800962e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	4293      	cmp	r3, r2
 8009634:	bf28      	it	cs
 8009636:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf08      	it	eq
 800963c:	4613      	moveq	r3, r2
 800963e:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009640:	9b08      	ldr	r3, [sp, #32]
 8009642:	b923      	cbnz	r3, 800964e <tcp_write+0x52>
 8009644:	4b9e      	ldr	r3, [pc, #632]	; (80098c0 <tcp_write+0x2c4>)
 8009646:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800964a:	49a0      	ldr	r1, [pc, #640]	; (80098cc <tcp_write+0x2d0>)
 800964c:	e7e5      	b.n	800961a <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800964e:	7d03      	ldrb	r3, [r0, #20]
 8009650:	2b07      	cmp	r3, #7
 8009652:	d003      	beq.n	800965c <tcp_write+0x60>
      (pcb->state != CLOSE_WAIT) &&
 8009654:	3b02      	subs	r3, #2
 8009656:	2b02      	cmp	r3, #2
 8009658:	f200 8258 	bhi.w	8009b0c <tcp_write+0x510>
  } else if (len == 0) {
 800965c:	9b05      	ldr	r3, [sp, #20]
 800965e:	b1db      	cbz	r3, 8009698 <tcp_write+0x9c>
  if (len > pcb->snd_buf) {
 8009660:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8009664:	9a05      	ldr	r2, [sp, #20]
 8009666:	4293      	cmp	r3, r2
 8009668:	d206      	bcs.n	8009678 <tcp_write+0x7c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800966a:	8b6b      	ldrh	r3, [r5, #26]
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	836b      	strh	r3, [r5, #26]
  return ERR_MEM;
 8009672:	f04f 30ff 	mov.w	r0, #4294967295
 8009676:	e7d5      	b.n	8009624 <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8009678:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800967c:	2a08      	cmp	r2, #8
 800967e:	d8f4      	bhi.n	800966a <tcp_write+0x6e>
 8009680:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 8009682:	b30a      	cbz	r2, 80096c8 <tcp_write+0xcc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009684:	b943      	cbnz	r3, 8009698 <tcp_write+0x9c>
 8009686:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009688:	b933      	cbnz	r3, 8009698 <tcp_write+0x9c>
 800968a:	4b8d      	ldr	r3, [pc, #564]	; (80098c0 <tcp_write+0x2c4>)
 800968c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009690:	498f      	ldr	r1, [pc, #572]	; (80098d0 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009692:	488d      	ldr	r0, [pc, #564]	; (80098c8 <tcp_write+0x2cc>)
 8009694:	f001 ffa8 	bl	800b5e8 <iprintf>
  queuelen = pcb->snd_queuelen;
 8009698:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800969c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800969e:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 80096a0:	b9dc      	cbnz	r4, 80096da <tcp_write+0xde>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80096a2:	f8b5 8068 	ldrh.w	r8, [r5, #104]	; 0x68
 80096a6:	f1b8 0f00 	cmp.w	r8, #0
 80096aa:	f000 8104 	beq.w	80098b6 <tcp_write+0x2ba>
 80096ae:	4b84      	ldr	r3, [pc, #528]	; (80098c0 <tcp_write+0x2c4>)
 80096b0:	f240 224b 	movw	r2, #587	; 0x24b
 80096b4:	4987      	ldr	r1, [pc, #540]	; (80098d4 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80096b6:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80096b8:	4883      	ldr	r0, [pc, #524]	; (80098c8 <tcp_write+0x2cc>)
  u16_t extendlen = 0;
 80096ba:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80096bc:	f001 ff94 	bl	800b5e8 <iprintf>
  u16_t oversize_used = 0;
 80096c0:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 80096c2:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 80096c4:	46a1      	mov	r9, r4
 80096c6:	e094      	b.n	80097f2 <tcp_write+0x1f6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80096c8:	b913      	cbnz	r3, 80096d0 <tcp_write+0xd4>
 80096ca:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d0e3      	beq.n	8009698 <tcp_write+0x9c>
 80096d0:	4b7b      	ldr	r3, [pc, #492]	; (80098c0 <tcp_write+0x2c4>)
 80096d2:	f240 1259 	movw	r2, #345	; 0x159
 80096d6:	4980      	ldr	r1, [pc, #512]	; (80098d8 <tcp_write+0x2dc>)
 80096d8:	e7db      	b.n	8009692 <tcp_write+0x96>
  if (pcb->unsent != NULL) {
 80096da:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80096dc:	f8d7 b000 	ldr.w	fp, [r7]
 80096e0:	f1bb 0f00 	cmp.w	fp, #0
 80096e4:	f040 80b6 	bne.w	8009854 <tcp_write+0x258>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80096e8:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80096ea:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80096ec:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80096f0:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80096f2:	bf14      	ite	ne
 80096f4:	2404      	movne	r4, #4
 80096f6:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80096f8:	4423      	add	r3, r4
 80096fa:	429a      	cmp	r2, r3
 80096fc:	da06      	bge.n	800970c <tcp_write+0x110>
 80096fe:	4b70      	ldr	r3, [pc, #448]	; (80098c0 <tcp_write+0x2c4>)
 8009700:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009704:	4975      	ldr	r1, [pc, #468]	; (80098dc <tcp_write+0x2e0>)
 8009706:	4870      	ldr	r0, [pc, #448]	; (80098c8 <tcp_write+0x2cc>)
 8009708:	f001 ff6e 	bl	800b5e8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800970c:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8009710:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8009712:	f8b5 6068 	ldrh.w	r6, [r5, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009716:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 800971a:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800971e:	eba9 0904 	sub.w	r9, r9, r4
 8009722:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 8009726:	2e00      	cmp	r6, #0
 8009728:	f000 8096 	beq.w	8009858 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800972c:	45b1      	cmp	r9, r6
 800972e:	d206      	bcs.n	800973e <tcp_write+0x142>
 8009730:	4b63      	ldr	r3, [pc, #396]	; (80098c0 <tcp_write+0x2c4>)
 8009732:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009736:	496a      	ldr	r1, [pc, #424]	; (80098e0 <tcp_write+0x2e4>)
 8009738:	4863      	ldr	r0, [pc, #396]	; (80098c8 <tcp_write+0x2cc>)
 800973a:	f001 ff55 	bl	800b5e8 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800973e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8009742:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009744:	9a05      	ldr	r2, [sp, #20]
 8009746:	429a      	cmp	r2, r3
 8009748:	bf28      	it	cs
 800974a:	461a      	movcs	r2, r3
 800974c:	454a      	cmp	r2, r9
 800974e:	4616      	mov	r6, r2
 8009750:	bfa8      	it	ge
 8009752:	464e      	movge	r6, r9
      space -= oversize_used;
 8009754:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8009758:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800975a:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 800975e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009762:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009766:	b153      	cbz	r3, 800977e <tcp_write+0x182>
 8009768:	9b05      	ldr	r3, [sp, #20]
 800976a:	429e      	cmp	r6, r3
 800976c:	f000 81d1 	beq.w	8009b12 <tcp_write+0x516>
 8009770:	4b53      	ldr	r3, [pc, #332]	; (80098c0 <tcp_write+0x2c4>)
 8009772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009776:	495b      	ldr	r1, [pc, #364]	; (80098e4 <tcp_write+0x2e8>)
 8009778:	4853      	ldr	r0, [pc, #332]	; (80098c8 <tcp_write+0x2cc>)
 800977a:	f001 ff35 	bl	800b5e8 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800977e:	9b05      	ldr	r3, [sp, #20]
 8009780:	429e      	cmp	r6, r3
 8009782:	f080 81c6 	bcs.w	8009b12 <tcp_write+0x516>
 8009786:	f1b9 0f00 	cmp.w	r9, #0
 800978a:	f000 8090 	beq.w	80098ae <tcp_write+0x2b2>
 800978e:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8009792:	f1ba 0f00 	cmp.w	sl, #0
 8009796:	f000 808b 	beq.w	80098b0 <tcp_write+0x2b4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800979a:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800979c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800979e:	454c      	cmp	r4, r9
 80097a0:	bfa8      	it	ge
 80097a2:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80097a4:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 80097a6:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80097aa:	d557      	bpl.n	800985c <tcp_write+0x260>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80097ac:	2301      	movs	r3, #1
 80097ae:	464a      	mov	r2, r9
 80097b0:	9500      	str	r5, [sp, #0]
 80097b2:	4641      	mov	r1, r8
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	2000      	movs	r0, #0
 80097b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80097c0:	f7ff fd9e 	bl	8009300 <tcp_pbuf_prealloc>
 80097c4:	4681      	mov	r9, r0
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f000 819d 	beq.w	8009b06 <tcp_write+0x50a>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80097cc:	9b08      	ldr	r3, [sp, #32]
 80097ce:	4642      	mov	r2, r8
 80097d0:	6840      	ldr	r0, [r0, #4]
 80097d2:	1999      	adds	r1, r3, r6
 80097d4:	f001 fef5 	bl	800b5c2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80097d8:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 80097da:	f7fd f8af 	bl	800693c <pbuf_clen>
 80097de:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 80097e0:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 80097e4:	4403      	add	r3, r0
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	9306      	str	r3, [sp, #24]
      pos += seglen;
 80097ea:	44b0      	add	r8, r6
 80097ec:	463c      	mov	r4, r7
 80097ee:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80097f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f4:	f04f 0b00 	mov.w	fp, #0
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009800:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8009802:	9b05      	ldr	r3, [sp, #20]
 8009804:	4598      	cmp	r8, r3
 8009806:	d373      	bcc.n	80098f0 <tcp_write+0x2f4>
  if (oversize_used > 0) {
 8009808:	b146      	cbz	r6, 800981c <tcp_write+0x220>
    for (p = last_unsent->p; p; p = p->next) {
 800980a:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800980e:	f1b8 0f00 	cmp.w	r8, #0
 8009812:	f040 8114 	bne.w	8009a3e <tcp_write+0x442>
    last_unsent->len += oversize_used;
 8009816:	893b      	ldrh	r3, [r7, #8]
 8009818:	441e      	add	r6, r3
 800981a:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800981c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009820:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  if (concat_p != NULL) {
 8009824:	f1b9 0f00 	cmp.w	r9, #0
 8009828:	f000 8122 	beq.w	8009a70 <tcp_write+0x474>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800982c:	b937      	cbnz	r7, 800983c <tcp_write+0x240>
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <tcp_write+0x2c4>)
 8009830:	f240 22e1 	movw	r2, #737	; 0x2e1
 8009834:	492c      	ldr	r1, [pc, #176]	; (80098e8 <tcp_write+0x2ec>)
 8009836:	4824      	ldr	r0, [pc, #144]	; (80098c8 <tcp_write+0x2cc>)
 8009838:	f001 fed6 	bl	800b5e8 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800983c:	4649      	mov	r1, r9
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7fd f8a0 	bl	8006984 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009844:	893b      	ldrh	r3, [r7, #8]
 8009846:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800984a:	4413      	add	r3, r2
 800984c:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800984e:	f8c7 b000 	str.w	fp, [r7]
 8009852:	e12f      	b.n	8009ab4 <tcp_write+0x4b8>
 8009854:	465f      	mov	r7, fp
 8009856:	e741      	b.n	80096dc <tcp_write+0xe0>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009858:	4634      	mov	r4, r6
 800985a:	e782      	b.n	8009762 <tcp_write+0x166>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 9000 	ldr.w	r9, [r3]
 8009862:	f1b9 0f00 	cmp.w	r9, #0
 8009866:	d113      	bne.n	8009890 <tcp_write+0x294>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009868:	7b1a      	ldrb	r2, [r3, #12]
 800986a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800986e:	d111      	bne.n	8009894 <tcp_write+0x298>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009870:	895a      	ldrh	r2, [r3, #10]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009876:	9a08      	ldr	r2, [sp, #32]
 8009878:	429a      	cmp	r2, r3
 800987a:	d10b      	bne.n	8009894 <tcp_write+0x298>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800987c:	b136      	cbz	r6, 800988c <tcp_write+0x290>
 800987e:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <tcp_write+0x2c4>)
 8009880:	f240 2231 	movw	r2, #561	; 0x231
 8009884:	4919      	ldr	r1, [pc, #100]	; (80098ec <tcp_write+0x2f0>)
 8009886:	4810      	ldr	r0, [pc, #64]	; (80098c8 <tcp_write+0x2cc>)
 8009888:	f001 feae 	bl	800b5e8 <iprintf>
          extendlen = seglen;
 800988c:	46c2      	mov	sl, r8
 800988e:	e7ac      	b.n	80097ea <tcp_write+0x1ee>
 8009890:	464b      	mov	r3, r9
 8009892:	e7e4      	b.n	800985e <tcp_write+0x262>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009894:	2201      	movs	r2, #1
 8009896:	4641      	mov	r1, r8
 8009898:	2000      	movs	r0, #0
 800989a:	f7fc ff61 	bl	8006760 <pbuf_alloc>
 800989e:	4681      	mov	r9, r0
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f000 8130 	beq.w	8009b06 <tcp_write+0x50a>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80098a6:	9b08      	ldr	r3, [sp, #32]
 80098a8:	4433      	add	r3, r6
 80098aa:	6043      	str	r3, [r0, #4]
 80098ac:	e795      	b.n	80097da <tcp_write+0x1de>
  u16_t extendlen = 0;
 80098ae:	46ca      	mov	sl, r9
 80098b0:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 80098b2:	46d1      	mov	r9, sl
 80098b4:	e79d      	b.n	80097f2 <tcp_write+0x1f6>
  u16_t extendlen = 0;
 80098b6:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 80098b8:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80098ba:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 80098bc:	46c1      	mov	r9, r8
 80098be:	e798      	b.n	80097f2 <tcp_write+0x1f6>
 80098c0:	0800edbe 	.word	0x0800edbe
 80098c4:	0800efd3 	.word	0x0800efd3
 80098c8:	0800c5ae 	.word	0x0800c5ae
 80098cc:	0800efea 	.word	0x0800efea
 80098d0:	0800f01b 	.word	0x0800f01b
 80098d4:	0800f105 	.word	0x0800f105
 80098d8:	0800f055 	.word	0x0800f055
 80098dc:	0800f087 	.word	0x0800f087
 80098e0:	0800f09e 	.word	0x0800f09e
 80098e4:	0800f0be 	.word	0x0800f0be
 80098e8:	0800f191 	.word	0x0800f191
 80098ec:	0800f0dc 	.word	0x0800f0dc
    u16_t left = len - pos;
 80098f0:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 80098f2:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 80098f4:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	4293      	cmp	r3, r2
 80098fc:	bf28      	it	cs
 80098fe:	4613      	movcs	r3, r2
 8009900:	b29b      	uxth	r3, r3
 8009902:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009906:	b363      	cbz	r3, 8009962 <tcp_write+0x366>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009908:	fabb f38b 	clz	r3, fp
 800990c:	9500      	str	r5, [sp, #0]
 800990e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009910:	2036      	movs	r0, #54	; 0x36
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	9302      	str	r3, [sp, #8]
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800991e:	f7ff fcef 	bl	8009300 <tcp_pbuf_prealloc>
 8009922:	4604      	mov	r4, r0
 8009924:	2800      	cmp	r0, #0
 8009926:	d03c      	beq.n	80099a2 <tcp_write+0x3a6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009928:	8943      	ldrh	r3, [r0, #10]
 800992a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800992c:	4293      	cmp	r3, r2
 800992e:	d206      	bcs.n	800993e <tcp_write+0x342>
 8009930:	4b7b      	ldr	r3, [pc, #492]	; (8009b20 <tcp_write+0x524>)
 8009932:	f240 2267 	movw	r2, #615	; 0x267
 8009936:	497b      	ldr	r1, [pc, #492]	; (8009b24 <tcp_write+0x528>)
 8009938:	487b      	ldr	r0, [pc, #492]	; (8009b28 <tcp_write+0x52c>)
 800993a:	f001 fe55 	bl	800b5e8 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800993e:	9b08      	ldr	r3, [sp, #32]
 8009940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009942:	eb03 0108 	add.w	r1, r3, r8
 8009946:	6860      	ldr	r0, [r4, #4]
 8009948:	f001 fe3b 	bl	800b5c2 <memcpy>
    queuelen += pbuf_clen(p);
 800994c:	4620      	mov	r0, r4
 800994e:	f7fc fff5 	bl	800693c <pbuf_clen>
 8009952:	9b06      	ldr	r3, [sp, #24]
 8009954:	4403      	add	r3, r0
 8009956:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8009958:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800995a:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800995c:	d94a      	bls.n	80099f4 <tcp_write+0x3f8>
      pbuf_free(p);
 800995e:	4620      	mov	r0, r4
 8009960:	e01d      	b.n	800999e <tcp_write+0x3a2>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009962:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009966:	b133      	cbz	r3, 8009976 <tcp_write+0x37a>
 8009968:	4b6d      	ldr	r3, [pc, #436]	; (8009b20 <tcp_write+0x524>)
 800996a:	f240 2271 	movw	r2, #625	; 0x271
 800996e:	496f      	ldr	r1, [pc, #444]	; (8009b2c <tcp_write+0x530>)
 8009970:	486d      	ldr	r0, [pc, #436]	; (8009b28 <tcp_write+0x52c>)
 8009972:	f001 fe39 	bl	800b5e8 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009976:	2201      	movs	r2, #1
 8009978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800997a:	2036      	movs	r0, #54	; 0x36
 800997c:	f7fc fef0 	bl	8006760 <pbuf_alloc>
 8009980:	b178      	cbz	r0, 80099a2 <tcp_write+0x3a6>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8009982:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009984:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8009986:	900d      	str	r0, [sp, #52]	; 0x34
 8009988:	4442      	add	r2, r8
 800998a:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800998c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009990:	2036      	movs	r0, #54	; 0x36
 8009992:	f7fc fee5 	bl	8006760 <pbuf_alloc>
 8009996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009998:	4604      	mov	r4, r0
 800999a:	bb38      	cbnz	r0, 80099ec <tcp_write+0x3f0>
        pbuf_free(p2);
 800999c:	4618      	mov	r0, r3
      pbuf_free(p);
 800999e:	f7fc fe77 	bl	8006690 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80099a2:	8b6b      	ldrh	r3, [r5, #26]
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	836b      	strh	r3, [r5, #26]
  if (concat_p != NULL) {
 80099aa:	f1b9 0f00 	cmp.w	r9, #0
 80099ae:	d002      	beq.n	80099b6 <tcp_write+0x3ba>
    pbuf_free(concat_p);
 80099b0:	4648      	mov	r0, r9
 80099b2:	f7fc fe6d 	bl	8006690 <pbuf_free>
  if (queue != NULL) {
 80099b6:	f1bb 0f00 	cmp.w	fp, #0
 80099ba:	d002      	beq.n	80099c2 <tcp_write+0x3c6>
    tcp_segs_free(queue);
 80099bc:	4658      	mov	r0, fp
 80099be:	f7fd fabf 	bl	8006f40 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80099c2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f43f ae53 	beq.w	8009672 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80099cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f47f ae4f 	bne.w	8009672 <tcp_write+0x76>
 80099d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f47f ae4b 	bne.w	8009672 <tcp_write+0x76>
 80099dc:	4b50      	ldr	r3, [pc, #320]	; (8009b20 <tcp_write+0x524>)
 80099de:	f44f 724a 	mov.w	r2, #808	; 0x328
 80099e2:	4953      	ldr	r1, [pc, #332]	; (8009b30 <tcp_write+0x534>)
 80099e4:	4850      	ldr	r0, [pc, #320]	; (8009b28 <tcp_write+0x52c>)
 80099e6:	f001 fdff 	bl	800b5e8 <iprintf>
 80099ea:	e642      	b.n	8009672 <tcp_write+0x76>
      pbuf_cat(p/*header*/, p2/*data*/);
 80099ec:	4619      	mov	r1, r3
 80099ee:	f7fc ffc9 	bl	8006984 <pbuf_cat>
 80099f2:	e7ab      	b.n	800994c <tcp_write+0x350>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80099f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80099f6:	2200      	movs	r2, #0
 80099f8:	4621      	mov	r1, r4
 80099fa:	4628      	mov	r0, r5
 80099fc:	9200      	str	r2, [sp, #0]
 80099fe:	4443      	add	r3, r8
 8009a00:	f7ff fcd2 	bl	80093a8 <tcp_create_segment>
 8009a04:	4604      	mov	r4, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d0cb      	beq.n	80099a2 <tcp_write+0x3a6>
    if (queue == NULL) {
 8009a0a:	f1bb 0f00 	cmp.w	fp, #0
 8009a0e:	d010      	beq.n	8009a32 <tcp_write+0x436>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a12:	b933      	cbnz	r3, 8009a22 <tcp_write+0x426>
 8009a14:	4b42      	ldr	r3, [pc, #264]	; (8009b20 <tcp_write+0x524>)
 8009a16:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009a1a:	4946      	ldr	r1, [pc, #280]	; (8009b34 <tcp_write+0x538>)
 8009a1c:	4842      	ldr	r0, [pc, #264]	; (8009b28 <tcp_write+0x52c>)
 8009a1e:	f001 fde3 	bl	800b5e8 <iprintf>
      prev_seg->next = seg;
 8009a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a24:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8009a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a28:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a2a:	4498      	add	r8, r3
 8009a2c:	fa1f f888 	uxth.w	r8, r8
 8009a30:	e6e7      	b.n	8009802 <tcp_write+0x206>
 8009a32:	4683      	mov	fp, r0
 8009a34:	e7f7      	b.n	8009a26 <tcp_write+0x42a>
  if (oversize_used > 0) {
 8009a36:	f04f 0a00 	mov.w	sl, #0
 8009a3a:	46d1      	mov	r9, sl
 8009a3c:	e6e5      	b.n	800980a <tcp_write+0x20e>
      p->tot_len += oversize_used;
 8009a3e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009a42:	4433      	add	r3, r6
 8009a44:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8009a48:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4c:	b96b      	cbnz	r3, 8009a6a <tcp_write+0x46e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009a4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a52:	4632      	mov	r2, r6
 8009a54:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8009a58:	9908      	ldr	r1, [sp, #32]
 8009a5a:	4418      	add	r0, r3
 8009a5c:	f001 fdb1 	bl	800b5c2 <memcpy>
        p->len += oversize_used;
 8009a60:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009a64:	4433      	add	r3, r6
 8009a66:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009a6a:	f8d8 8000 	ldr.w	r8, [r8]
 8009a6e:	e6ce      	b.n	800980e <tcp_write+0x212>
  } else if (extendlen > 0) {
 8009a70:	f1ba 0f00 	cmp.w	sl, #0
 8009a74:	d019      	beq.n	8009aaa <tcp_write+0x4ae>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009a76:	b10f      	cbz	r7, 8009a7c <tcp_write+0x480>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	b933      	cbnz	r3, 8009a8a <tcp_write+0x48e>
 8009a7c:	4b28      	ldr	r3, [pc, #160]	; (8009b20 <tcp_write+0x524>)
 8009a7e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009a82:	492d      	ldr	r1, [pc, #180]	; (8009b38 <tcp_write+0x53c>)
 8009a84:	4828      	ldr	r0, [pc, #160]	; (8009b28 <tcp_write+0x52c>)
 8009a86:	f001 fdaf 	bl	800b5e8 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	891a      	ldrh	r2, [r3, #8]
 8009a8e:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8009a90:	4452      	add	r2, sl
 8009a92:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009a94:	b939      	cbnz	r1, 8009aa6 <tcp_write+0x4aa>
    p->len += extendlen;
 8009a96:	895a      	ldrh	r2, [r3, #10]
 8009a98:	4452      	add	r2, sl
 8009a9a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009a9c:	893b      	ldrh	r3, [r7, #8]
 8009a9e:	449a      	add	sl, r3
 8009aa0:	f8a7 a008 	strh.w	sl, [r7, #8]
 8009aa4:	e6d3      	b.n	800984e <tcp_write+0x252>
      p->tot_len += extendlen;
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e7f0      	b.n	8009a8c <tcp_write+0x490>
  if (last_unsent == NULL) {
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	f47f aecf 	bne.w	800984e <tcp_write+0x252>
    pcb->unsent = queue;
 8009ab0:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
  pcb->snd_lbb += len;
 8009ab4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009ab6:	9a05      	ldr	r2, [sp, #20]
 8009ab8:	4413      	add	r3, r2
 8009aba:	65eb      	str	r3, [r5, #92]	; 0x5c
  pcb->snd_buf -= len;
 8009abc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8009ac6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009aca:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8009ace:	9b06      	ldr	r3, [sp, #24]
 8009ad0:	b153      	cbz	r3, 8009ae8 <tcp_write+0x4ec>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009ad2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009ad4:	b943      	cbnz	r3, 8009ae8 <tcp_write+0x4ec>
 8009ad6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009ad8:	b933      	cbnz	r3, 8009ae8 <tcp_write+0x4ec>
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <tcp_write+0x524>)
 8009adc:	f240 3213 	movw	r2, #787	; 0x313
 8009ae0:	4913      	ldr	r1, [pc, #76]	; (8009b30 <tcp_write+0x534>)
 8009ae2:	4811      	ldr	r0, [pc, #68]	; (8009b28 <tcp_write+0x52c>)
 8009ae4:	f001 fd80 	bl	800b5e8 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8009ae8:	b15c      	cbz	r4, 8009b02 <tcp_write+0x506>
 8009aea:	68e4      	ldr	r4, [r4, #12]
 8009aec:	b14c      	cbz	r4, 8009b02 <tcp_write+0x506>
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	f013 0602 	ands.w	r6, r3, #2
 8009af4:	d105      	bne.n	8009b02 <tcp_write+0x506>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009af6:	89a5      	ldrh	r5, [r4, #12]
 8009af8:	2008      	movs	r0, #8
 8009afa:	f7fa fe5b 	bl	80047b4 <lwip_htons>
 8009afe:	4328      	orrs	r0, r5
 8009b00:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8009b02:	2000      	movs	r0, #0
 8009b04:	e58e      	b.n	8009624 <tcp_write+0x28>
      p->tot_len += extendlen;
 8009b06:	f04f 0900 	mov.w	r9, #0
 8009b0a:	e74a      	b.n	80099a2 <tcp_write+0x3a6>
    return ERR_CONN;
 8009b0c:	f06f 000a 	mvn.w	r0, #10
 8009b10:	e588      	b.n	8009624 <tcp_write+0x28>
  if (oversize_used > 0) {
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	d18f      	bne.n	8009a36 <tcp_write+0x43a>
  pcb->unsent_oversize = oversize;
 8009b16:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009b1a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8009b1e:	e696      	b.n	800984e <tcp_write+0x252>
 8009b20:	0800edbe 	.word	0x0800edbe
 8009b24:	0800f134 	.word	0x0800f134
 8009b28:	0800c5ae 	.word	0x0800c5ae
 8009b2c:	0800f172 	.word	0x0800f172
 8009b30:	0800f1fe 	.word	0x0800f1fe
 8009b34:	0800f180 	.word	0x0800f180
 8009b38:	0800f1c9 	.word	0x0800f1c9

08009b3c <tcp_split_unsent_seg>:
{
 8009b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	4689      	mov	r9, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009b42:	4605      	mov	r5, r0
 8009b44:	b930      	cbnz	r0, 8009b54 <tcp_split_unsent_seg+0x18>
 8009b46:	4b5c      	ldr	r3, [pc, #368]	; (8009cb8 <tcp_split_unsent_seg+0x17c>)
 8009b48:	f240 324b 	movw	r2, #843	; 0x34b
 8009b4c:	495b      	ldr	r1, [pc, #364]	; (8009cbc <tcp_split_unsent_seg+0x180>)
 8009b4e:	485c      	ldr	r0, [pc, #368]	; (8009cc0 <tcp_split_unsent_seg+0x184>)
 8009b50:	f001 fd4a 	bl	800b5e8 <iprintf>
  useg = pcb->unsent;
 8009b54:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (useg == NULL) {
 8009b56:	b914      	cbnz	r4, 8009b5e <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 8009b58:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5c:	e00b      	b.n	8009b76 <tcp_split_unsent_seg+0x3a>
  if (split == 0) {
 8009b5e:	f1b9 0f00 	cmp.w	r9, #0
 8009b62:	d10b      	bne.n	8009b7c <tcp_split_unsent_seg+0x40>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009b64:	4b54      	ldr	r3, [pc, #336]	; (8009cb8 <tcp_split_unsent_seg+0x17c>)
 8009b66:	f240 3253 	movw	r2, #851	; 0x353
 8009b6a:	4956      	ldr	r1, [pc, #344]	; (8009cc4 <tcp_split_unsent_seg+0x188>)
 8009b6c:	4854      	ldr	r0, [pc, #336]	; (8009cc0 <tcp_split_unsent_seg+0x184>)
 8009b6e:	f001 fd3b 	bl	800b5e8 <iprintf>
    return ERR_VAL;
 8009b72:	f06f 0005 	mvn.w	r0, #5
}
 8009b76:	b003      	add	sp, #12
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 8009b7c:	8923      	ldrh	r3, [r4, #8]
 8009b7e:	454b      	cmp	r3, r9
 8009b80:	d801      	bhi.n	8009b86 <tcp_split_unsent_seg+0x4a>
    return ERR_OK;
 8009b82:	2000      	movs	r0, #0
 8009b84:	e7f7      	b.n	8009b76 <tcp_split_unsent_seg+0x3a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009b86:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8009b88:	454b      	cmp	r3, r9
 8009b8a:	d206      	bcs.n	8009b9a <tcp_split_unsent_seg+0x5e>
 8009b8c:	4b4a      	ldr	r3, [pc, #296]	; (8009cb8 <tcp_split_unsent_seg+0x17c>)
 8009b8e:	f240 325b 	movw	r2, #859	; 0x35b
 8009b92:	494d      	ldr	r1, [pc, #308]	; (8009cc8 <tcp_split_unsent_seg+0x18c>)
 8009b94:	484a      	ldr	r0, [pc, #296]	; (8009cc0 <tcp_split_unsent_seg+0x184>)
 8009b96:	f001 fd27 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009b9a:	8923      	ldrh	r3, [r4, #8]
 8009b9c:	b933      	cbnz	r3, 8009bac <tcp_split_unsent_seg+0x70>
 8009b9e:	4b46      	ldr	r3, [pc, #280]	; (8009cb8 <tcp_split_unsent_seg+0x17c>)
 8009ba0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009ba4:	4949      	ldr	r1, [pc, #292]	; (8009ccc <tcp_split_unsent_seg+0x190>)
 8009ba6:	4846      	ldr	r0, [pc, #280]	; (8009cc0 <tcp_split_unsent_seg+0x184>)
 8009ba8:	f001 fd1e 	bl	800b5e8 <iprintf>
  optflags = useg->flags;
 8009bac:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009bb0:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 8009bb4:	8927      	ldrh	r7, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009bb6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009bb8:	f01b 0f01 	tst.w	fp, #1
  remainder = useg->len - split;
 8009bbc:	eba7 0709 	sub.w	r7, r7, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009bc0:	bf14      	ite	ne
 8009bc2:	2604      	movne	r6, #4
 8009bc4:	2600      	moveq	r6, #0
  remainder = useg->len - split;
 8009bc6:	b2bf      	uxth	r7, r7
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009bc8:	19b9      	adds	r1, r7, r6
 8009bca:	b289      	uxth	r1, r1
 8009bcc:	f7fc fdc8 	bl	8006760 <pbuf_alloc>
  if (p == NULL) {
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d0c0      	beq.n	8009b58 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 8009bd6:	6860      	ldr	r0, [r4, #4]
 8009bd8:	8922      	ldrh	r2, [r4, #8]
 8009bda:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009bdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 8009be0:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009be2:	463a      	mov	r2, r7
 8009be4:	4431      	add	r1, r6
  offset = useg->p->tot_len - useg->len + split;
 8009be6:	444b      	add	r3, r9
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f7fc ff8b 	bl	8006b04 <pbuf_copy_partial>
 8009bee:	4287      	cmp	r7, r0
 8009bf0:	d15d      	bne.n	8009cae <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	8998      	ldrh	r0, [r3, #12]
 8009bf6:	f7fa fddd 	bl	80047b4 <lwip_htons>
 8009bfa:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 8009bfc:	f016 0808 	ands.w	r8, r6, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009c00:	bf0e      	itee	eq
 8009c02:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 8009c06:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8009c0a:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 8009c0e:	07f3      	lsls	r3, r6, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009c10:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 8009c12:	bf48      	it	mi
 8009c14:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009c18:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 8009c1a:	bf48      	it	mi
 8009c1c:	f006 06fe 	andmi.w	r6, r6, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009c20:	f7fa fdcb 	bl	80047ba <lwip_htonl>
 8009c24:	4642      	mov	r2, r8
 8009c26:	eb09 0300 	add.w	r3, r9, r0
 8009c2a:	f8cd b000 	str.w	fp, [sp]
 8009c2e:	4651      	mov	r1, sl
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7ff fbb9 	bl	80093a8 <tcp_create_segment>
  if (seg == NULL) {
 8009c36:	4680      	mov	r8, r0
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d038      	beq.n	8009cae <tcp_split_unsent_seg+0x172>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009c3c:	6860      	ldr	r0, [r4, #4]
 8009c3e:	f7fc fe7d 	bl	800693c <pbuf_clen>
 8009c42:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009c46:	1a18      	subs	r0, r3, r0
 8009c48:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009c4c:	6860      	ldr	r0, [r4, #4]
 8009c4e:	8901      	ldrh	r1, [r0, #8]
 8009c50:	1bc9      	subs	r1, r1, r7
 8009c52:	b289      	uxth	r1, r1
 8009c54:	f7fc fe1a 	bl	800688c <pbuf_realloc>
  useg->len -= remainder;
 8009c58:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009c5a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009c5e:	4630      	mov	r0, r6
  useg->len -= remainder;
 8009c60:	1bdf      	subs	r7, r3, r7
 8009c62:	8127      	strh	r7, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009c64:	f8b9 700c 	ldrh.w	r7, [r9, #12]
 8009c68:	f7fa fda4 	bl	80047b4 <lwip_htons>
 8009c6c:	4338      	orrs	r0, r7
 8009c6e:	f8a9 000c 	strh.w	r0, [r9, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009c72:	6860      	ldr	r0, [r4, #4]
 8009c74:	f7fc fe62 	bl	800693c <pbuf_clen>
 8009c78:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009c7c:	4418      	add	r0, r3
 8009c7e:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009c82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c86:	f7fc fe59 	bl	800693c <pbuf_clen>
 8009c8a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8009c8e:	4418      	add	r0, r3
  seg->next = useg->next;
 8009c90:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009c92:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8009c96:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 8009c9a:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 8009c9e:	f8d8 0000 	ldr.w	r0, [r8]
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f47f af6d 	bne.w	8009b82 <tcp_split_unsent_seg+0x46>
    pcb->unsent_oversize = 0;
 8009ca8:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 8009cac:	e763      	b.n	8009b76 <tcp_split_unsent_seg+0x3a>
    pbuf_free(p);
 8009cae:	4650      	mov	r0, sl
 8009cb0:	f7fc fcee 	bl	8006690 <pbuf_free>
 8009cb4:	e750      	b.n	8009b58 <tcp_split_unsent_seg+0x1c>
 8009cb6:	bf00      	nop
 8009cb8:	0800edbe 	.word	0x0800edbe
 8009cbc:	0800ef74 	.word	0x0800ef74
 8009cc0:	0800c5ae 	.word	0x0800c5ae
 8009cc4:	0800ef96 	.word	0x0800ef96
 8009cc8:	0800efb8 	.word	0x0800efb8
 8009ccc:	0800efc5 	.word	0x0800efc5

08009cd0 <tcp_enqueue_flags>:
{
 8009cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009cd4:	f011 0803 	ands.w	r8, r1, #3
{
 8009cd8:	4604      	mov	r4, r0
 8009cda:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009cdc:	d106      	bne.n	8009cec <tcp_enqueue_flags+0x1c>
 8009cde:	4b41      	ldr	r3, [pc, #260]	; (8009de4 <tcp_enqueue_flags+0x114>)
 8009ce0:	f240 4212 	movw	r2, #1042	; 0x412
 8009ce4:	4940      	ldr	r1, [pc, #256]	; (8009de8 <tcp_enqueue_flags+0x118>)
 8009ce6:	4841      	ldr	r0, [pc, #260]	; (8009dec <tcp_enqueue_flags+0x11c>)
 8009ce8:	f001 fc7e 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009cec:	b934      	cbnz	r4, 8009cfc <tcp_enqueue_flags+0x2c>
 8009cee:	4b3d      	ldr	r3, [pc, #244]	; (8009de4 <tcp_enqueue_flags+0x114>)
 8009cf0:	f240 4213 	movw	r2, #1043	; 0x413
 8009cf4:	493e      	ldr	r1, [pc, #248]	; (8009df0 <tcp_enqueue_flags+0x120>)
 8009cf6:	483d      	ldr	r0, [pc, #244]	; (8009dec <tcp_enqueue_flags+0x11c>)
 8009cf8:	f001 fc76 	bl	800b5e8 <iprintf>
 8009cfc:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009d00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d04:	2036      	movs	r0, #54	; 0x36
  if (flags & TCP_SYN) {
 8009d06:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009d08:	bf15      	itete	ne
 8009d0a:	2704      	movne	r7, #4
 8009d0c:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 8009d0e:	f04f 0901 	movne.w	r9, #1
 8009d12:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7fc fd22 	bl	8006760 <pbuf_alloc>
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b940      	cbnz	r0, 8009d32 <tcp_enqueue_flags+0x62>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009d20:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 8009d22:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2a:	8363      	strh	r3, [r4, #26]
}
 8009d2c:	b003      	add	sp, #12
 8009d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009d32:	8943      	ldrh	r3, [r0, #10]
 8009d34:	42bb      	cmp	r3, r7
 8009d36:	d206      	bcs.n	8009d46 <tcp_enqueue_flags+0x76>
 8009d38:	4b2a      	ldr	r3, [pc, #168]	; (8009de4 <tcp_enqueue_flags+0x114>)
 8009d3a:	f240 423a 	movw	r2, #1082	; 0x43a
 8009d3e:	492d      	ldr	r1, [pc, #180]	; (8009df4 <tcp_enqueue_flags+0x124>)
 8009d40:	482a      	ldr	r0, [pc, #168]	; (8009dec <tcp_enqueue_flags+0x11c>)
 8009d42:	f001 fc51 	bl	800b5e8 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009d46:	f8cd 9000 	str.w	r9, [sp]
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009d4e:	4632      	mov	r2, r6
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff fb29 	bl	80093a8 <tcp_create_segment>
 8009d56:	4605      	mov	r5, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0e1      	beq.n	8009d20 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009d5c:	68c3      	ldr	r3, [r0, #12]
 8009d5e:	079a      	lsls	r2, r3, #30
 8009d60:	d006      	beq.n	8009d70 <tcp_enqueue_flags+0xa0>
 8009d62:	4b20      	ldr	r3, [pc, #128]	; (8009de4 <tcp_enqueue_flags+0x114>)
 8009d64:	f240 4242 	movw	r2, #1090	; 0x442
 8009d68:	4923      	ldr	r1, [pc, #140]	; (8009df8 <tcp_enqueue_flags+0x128>)
 8009d6a:	4820      	ldr	r0, [pc, #128]	; (8009dec <tcp_enqueue_flags+0x11c>)
 8009d6c:	f001 fc3c 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009d70:	892b      	ldrh	r3, [r5, #8]
 8009d72:	b133      	cbz	r3, 8009d82 <tcp_enqueue_flags+0xb2>
 8009d74:	4b1b      	ldr	r3, [pc, #108]	; (8009de4 <tcp_enqueue_flags+0x114>)
 8009d76:	f240 4243 	movw	r2, #1091	; 0x443
 8009d7a:	4920      	ldr	r1, [pc, #128]	; (8009dfc <tcp_enqueue_flags+0x12c>)
 8009d7c:	481b      	ldr	r0, [pc, #108]	; (8009dec <tcp_enqueue_flags+0x11c>)
 8009d7e:	f001 fc33 	bl	800b5e8 <iprintf>
  if (pcb->unsent == NULL) {
 8009d82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d84:	bb4b      	cbnz	r3, 8009dda <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8009d86:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009d8e:	f1b8 0f00 	cmp.w	r8, #0
 8009d92:	d002      	beq.n	8009d9a <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8009d94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009d96:	3301      	adds	r3, #1
 8009d98:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8009d9a:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009d9c:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 8009d9e:	bf42      	ittt	mi
 8009da0:	8b63      	ldrhmi	r3, [r4, #26]
 8009da2:	f043 0320 	orrmi.w	r3, r3, #32
 8009da6:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009da8:	f7fc fdc8 	bl	800693c <pbuf_clen>
 8009dac:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8009db0:	4418      	add	r0, r3
 8009db2:	b280      	uxth	r0, r0
 8009db4:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d0b7      	beq.n	8009d2c <tcp_enqueue_flags+0x5c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009dbc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009dbe:	b948      	cbnz	r0, 8009dd4 <tcp_enqueue_flags+0x104>
 8009dc0:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 8009dc2:	2c00      	cmp	r4, #0
 8009dc4:	d1b2      	bne.n	8009d2c <tcp_enqueue_flags+0x5c>
 8009dc6:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <tcp_enqueue_flags+0x114>)
 8009dc8:	f240 4266 	movw	r2, #1126	; 0x466
 8009dcc:	490c      	ldr	r1, [pc, #48]	; (8009e00 <tcp_enqueue_flags+0x130>)
 8009dce:	4807      	ldr	r0, [pc, #28]	; (8009dec <tcp_enqueue_flags+0x11c>)
 8009dd0:	f001 fc0a 	bl	800b5e8 <iprintf>
  return ERR_OK;
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e7a9      	b.n	8009d2c <tcp_enqueue_flags+0x5c>
 8009dd8:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	d1fb      	bne.n	8009dd8 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8009de0:	601d      	str	r5, [r3, #0]
 8009de2:	e7d1      	b.n	8009d88 <tcp_enqueue_flags+0xb8>
 8009de4:	0800edbe 	.word	0x0800edbe
 8009de8:	0800eb82 	.word	0x0800eb82
 8009dec:	0800c5ae 	.word	0x0800c5ae
 8009df0:	0800ebd7 	.word	0x0800ebd7
 8009df4:	0800ebf6 	.word	0x0800ebf6
 8009df8:	0800ec2f 	.word	0x0800ec2f
 8009dfc:	0800ec47 	.word	0x0800ec47
 8009e00:	0800ec71 	.word	0x0800ec71

08009e04 <tcp_send_fin>:
{
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009e06:	4604      	mov	r4, r0
 8009e08:	b930      	cbnz	r0, 8009e18 <tcp_send_fin+0x14>
 8009e0a:	4b13      	ldr	r3, [pc, #76]	; (8009e58 <tcp_send_fin+0x54>)
 8009e0c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009e10:	4912      	ldr	r1, [pc, #72]	; (8009e5c <tcp_send_fin+0x58>)
 8009e12:	4813      	ldr	r0, [pc, #76]	; (8009e60 <tcp_send_fin+0x5c>)
 8009e14:	f001 fbe8 	bl	800b5e8 <iprintf>
  if (pcb->unsent != NULL) {
 8009e18:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009e1a:	b935      	cbnz	r5, 8009e2a <tcp_send_fin+0x26>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	2101      	movs	r1, #1
}
 8009e20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009e24:	f7ff bf54 	b.w	8009cd0 <tcp_enqueue_flags>
 8009e28:	461d      	mov	r5, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1fb      	bne.n	8009e28 <tcp_send_fin+0x24>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009e30:	68eb      	ldr	r3, [r5, #12]
 8009e32:	8998      	ldrh	r0, [r3, #12]
 8009e34:	f7fa fcbe 	bl	80047b4 <lwip_htons>
 8009e38:	f010 0707 	ands.w	r7, r0, #7
 8009e3c:	d1ee      	bne.n	8009e1c <tcp_send_fin+0x18>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009e3e:	68ee      	ldr	r6, [r5, #12]
 8009e40:	2001      	movs	r0, #1
 8009e42:	89b5      	ldrh	r5, [r6, #12]
 8009e44:	f7fa fcb6 	bl	80047b4 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8009e48:	8b63      	ldrh	r3, [r4, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009e4a:	4328      	orrs	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 8009e4c:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009e50:	81b0      	strh	r0, [r6, #12]
}
 8009e52:	4638      	mov	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 8009e54:	8363      	strh	r3, [r4, #26]
}
 8009e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e58:	0800edbe 	.word	0x0800edbe
 8009e5c:	0800ef5a 	.word	0x0800ef5a
 8009e60:	0800c5ae 	.word	0x0800c5ae

08009e64 <tcp_rexmit_rto_prepare>:
{
 8009e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009e68:	4604      	mov	r4, r0
 8009e6a:	b930      	cbnz	r0, 8009e7a <tcp_rexmit_rto_prepare+0x16>
 8009e6c:	4b1c      	ldr	r3, [pc, #112]	; (8009ee0 <tcp_rexmit_rto_prepare+0x7c>)
 8009e6e:	f240 6263 	movw	r2, #1635	; 0x663
 8009e72:	491c      	ldr	r1, [pc, #112]	; (8009ee4 <tcp_rexmit_rto_prepare+0x80>)
 8009e74:	481c      	ldr	r0, [pc, #112]	; (8009ee8 <tcp_rexmit_rto_prepare+0x84>)
 8009e76:	f001 fbb7 	bl	800b5e8 <iprintf>
  if (pcb->unacked == NULL) {
 8009e7a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009e7c:	b945      	cbnz	r5, 8009e90 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 8009e7e:	f06f 0005 	mvn.w	r0, #5
 8009e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 8009e86:	f7ff fa23 	bl	80092d0 <tcp_output_segment_busy>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d1f7      	bne.n	8009e7e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009e8e:	682d      	ldr	r5, [r5, #0]
 8009e90:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 8009e92:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1f6      	bne.n	8009e86 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 8009e98:	f7ff fa1a 	bl	80092d0 <tcp_output_segment_busy>
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1ed      	bne.n	8009e7e <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 8009ea2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009ea4:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 8009ea6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 8009ea8:	6720      	str	r0, [r4, #112]	; 0x70
  pcb->unsent = pcb->unacked;
 8009eaa:	66e3      	str	r3, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 8009eac:	8b63      	ldrh	r3, [r4, #26]
 8009eae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009eb2:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009eb4:	68eb      	ldr	r3, [r5, #12]
 8009eb6:	6858      	ldr	r0, [r3, #4]
 8009eb8:	f7fa fc7f 	bl	80047ba <lwip_htonl>
 8009ebc:	68eb      	ldr	r3, [r5, #12]
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8009ec4:	8998      	ldrh	r0, [r3, #12]
 8009ec6:	f7fa fc75 	bl	80047b4 <lwip_htons>
 8009eca:	f010 0003 	ands.w	r0, r0, #3
 8009ece:	4447      	add	r7, r8
  pcb->rttest = 0;
 8009ed0:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009ed2:	bf18      	it	ne
 8009ed4:	2001      	movne	r0, #1
 8009ed6:	4438      	add	r0, r7
 8009ed8:	64e0      	str	r0, [r4, #76]	; 0x4c
  return ERR_OK;
 8009eda:	4630      	mov	r0, r6
}
 8009edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee0:	0800edbe 	.word	0x0800edbe
 8009ee4:	0800eee1 	.word	0x0800eee1
 8009ee8:	0800c5ae 	.word	0x0800c5ae

08009eec <tcp_rexmit>:
{
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009eee:	4604      	mov	r4, r0
 8009ef0:	b930      	cbnz	r0, 8009f00 <tcp_rexmit+0x14>
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <tcp_rexmit+0x74>)
 8009ef4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009ef8:	491a      	ldr	r1, [pc, #104]	; (8009f64 <tcp_rexmit+0x78>)
 8009efa:	481b      	ldr	r0, [pc, #108]	; (8009f68 <tcp_rexmit+0x7c>)
 8009efc:	f001 fb74 	bl	800b5e8 <iprintf>
  if (pcb->unacked == NULL) {
 8009f00:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009f02:	b915      	cbnz	r5, 8009f0a <tcp_rexmit+0x1e>
    return ERR_VAL;
 8009f04:	f06f 0005 	mvn.w	r0, #5
 8009f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f7ff f9e0 	bl	80092d0 <tcp_output_segment_busy>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d1f7      	bne.n	8009f04 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 8009f14:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 8009f16:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 8009f1a:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	b983      	cbnz	r3, 8009f42 <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 8009f20:	6833      	ldr	r3, [r6, #0]
 8009f22:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8009f24:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b90b      	cbnz	r3, 8009f2e <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 8009f2a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009f2e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 8009f32:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 8009f34:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 8009f36:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 8009f38:	bf1c      	itt	ne
 8009f3a:	3301      	addne	r3, #1
 8009f3c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 8009f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	6858      	ldr	r0, [r3, #4]
 8009f46:	f7fa fc38 	bl	80047ba <lwip_htonl>
 8009f4a:	68eb      	ldr	r3, [r5, #12]
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	6858      	ldr	r0, [r3, #4]
 8009f50:	f7fa fc33 	bl	80047ba <lwip_htonl>
 8009f54:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8009f56:	2800      	cmp	r0, #0
 8009f58:	dae2      	bge.n	8009f20 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 8009f5a:	6836      	ldr	r6, [r6, #0]
 8009f5c:	e7de      	b.n	8009f1c <tcp_rexmit+0x30>
 8009f5e:	bf00      	nop
 8009f60:	0800edbe 	.word	0x0800edbe
 8009f64:	0800ee6d 	.word	0x0800ee6d
 8009f68:	0800c5ae 	.word	0x0800c5ae

08009f6c <tcp_rexmit_fast>:
{
 8009f6c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009f6e:	4604      	mov	r4, r0
 8009f70:	b930      	cbnz	r0, 8009f80 <tcp_rexmit_fast+0x14>
 8009f72:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <tcp_rexmit_fast+0x64>)
 8009f74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009f78:	4916      	ldr	r1, [pc, #88]	; (8009fd4 <tcp_rexmit_fast+0x68>)
 8009f7a:	4817      	ldr	r0, [pc, #92]	; (8009fd8 <tcp_rexmit_fast+0x6c>)
 8009f7c:	f001 fb34 	bl	800b5e8 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009f80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009f82:	b31b      	cbz	r3, 8009fcc <tcp_rexmit_fast+0x60>
 8009f84:	8b63      	ldrh	r3, [r4, #26]
 8009f86:	075b      	lsls	r3, r3, #29
 8009f88:	d420      	bmi.n	8009fcc <tcp_rexmit_fast+0x60>
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f7ff ffae 	bl	8009eec <tcp_rexmit>
 8009f90:	b9e0      	cbnz	r0, 8009fcc <tcp_rexmit_fast+0x60>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009f92:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009f96:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bf38      	it	cc
 8009f9e:	085a      	lsrcc	r2, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009fa0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009fa2:	bf28      	it	cs
 8009fa4:	0852      	lsrcs	r2, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009fa6:	0059      	lsls	r1, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009fa8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009fac:	428a      	cmp	r2, r1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009fae:	440b      	add	r3, r1
        pcb->ssthresh = 2 * pcb->mss;
 8009fb0:	bf38      	it	cc
 8009fb2:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009fb6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009fba:	4413      	add	r3, r2
 8009fbc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009fc0:	8b63      	ldrh	r3, [r4, #26]
 8009fc2:	f043 0304 	orr.w	r3, r3, #4
 8009fc6:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	8623      	strh	r3, [r4, #48]	; 0x30
 8009fcc:	bd10      	pop	{r4, pc}
 8009fce:	bf00      	nop
 8009fd0:	0800edbe 	.word	0x0800edbe
 8009fd4:	0800ee85 	.word	0x0800ee85
 8009fd8:	0800c5ae 	.word	0x0800c5ae

08009fdc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8009fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	468a      	mov	sl, r1
 8009fe6:	4617      	mov	r7, r2
 8009fe8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009fec:	461c      	mov	r4, r3
{
 8009fee:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009ff2:	b933      	cbnz	r3, 800a002 <tcp_rst+0x26>
 8009ff4:	4b17      	ldr	r3, [pc, #92]	; (800a054 <tcp_rst+0x78>)
 8009ff6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009ffa:	4917      	ldr	r1, [pc, #92]	; (800a058 <tcp_rst+0x7c>)
 8009ffc:	4817      	ldr	r0, [pc, #92]	; (800a05c <tcp_rst+0x80>)
 8009ffe:	f001 faf3 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a002:	b935      	cbnz	r5, 800a012 <tcp_rst+0x36>
 800a004:	4b13      	ldr	r3, [pc, #76]	; (800a054 <tcp_rst+0x78>)
 800a006:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a00a:	4915      	ldr	r1, [pc, #84]	; (800a060 <tcp_rst+0x84>)
 800a00c:	4813      	ldr	r0, [pc, #76]	; (800a05c <tcp_rst+0x80>)
 800a00e:	f001 faeb 	bl	800b5e8 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a012:	4650      	mov	r0, sl
 800a014:	f7fa fbd1 	bl	80047ba <lwip_htonl>
 800a018:	f246 0308 	movw	r3, #24584	; 0x6008
 800a01c:	4602      	mov	r2, r0
 800a01e:	f8cd 9000 	str.w	r9, [sp]
 800a022:	9302      	str	r3, [sp, #8]
 800a024:	2314      	movs	r3, #20
 800a026:	4638      	mov	r0, r7
 800a028:	2100      	movs	r1, #0
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	4643      	mov	r3, r8
 800a02e:	f7ff fa35 	bl	800949c <tcp_output_alloc_header_common.constprop.3>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a032:	4607      	mov	r7, r0
 800a034:	b150      	cbz	r0, 800a04c <tcp_rst+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a036:	f7ff fa99 	bl	800956c <tcp_output_fill_options.isra.0.constprop.4>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a03a:	462b      	mov	r3, r5
 800a03c:	4622      	mov	r2, r4
 800a03e:	4639      	mov	r1, r7
 800a040:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a042:	b004      	add	sp, #16
 800a044:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a048:	f7ff baa0 	b.w	800958c <tcp_output_control_segment>
}
 800a04c:	b004      	add	sp, #16
 800a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a052:	bf00      	nop
 800a054:	0800edbe 	.word	0x0800edbe
 800a058:	0800ef05 	.word	0x0800ef05
 800a05c:	0800c5ae 	.word	0x0800c5ae
 800a060:	0800ef1f 	.word	0x0800ef1f

0800a064 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a064:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a066:	4604      	mov	r4, r0
 800a068:	b930      	cbnz	r0, 800a078 <tcp_send_empty_ack+0x14>
 800a06a:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <tcp_send_empty_ack+0x58>)
 800a06c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a070:	4913      	ldr	r1, [pc, #76]	; (800a0c0 <tcp_send_empty_ack+0x5c>)
 800a072:	4814      	ldr	r0, [pc, #80]	; (800a0c4 <tcp_send_empty_ack+0x60>)
 800a074:	f001 fab8 	bl	800b5e8 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a078:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a07a:	f7fa fb9e 	bl	80047ba <lwip_htonl>
 800a07e:	2100      	movs	r1, #0
 800a080:	4602      	mov	r2, r0
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff fa4c 	bl	8009520 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800a088:	4605      	mov	r5, r0
 800a08a:	b930      	cbnz	r0, 800a09a <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a08c:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a08e:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a092:	f043 0303 	orr.w	r3, r3, #3
 800a096:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800a098:	bd38      	pop	{r3, r4, r5, pc}
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a09a:	f7ff fa67 	bl	800956c <tcp_output_fill_options.isra.0.constprop.4>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a09e:	1d23      	adds	r3, r4, #4
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7ff fa71 	bl	800958c <tcp_output_control_segment>
 800a0aa:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800a0ac:	b118      	cbz	r0, 800a0b6 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a0ae:	f043 0303 	orr.w	r3, r3, #3
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a0b2:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800a0b4:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a0b6:	f023 0303 	bic.w	r3, r3, #3
 800a0ba:	e7fa      	b.n	800a0b2 <tcp_send_empty_ack+0x4e>
 800a0bc:	0800edbe 	.word	0x0800edbe
 800a0c0:	0800ef3a 	.word	0x0800ef3a
 800a0c4:	0800c5ae 	.word	0x0800c5ae

0800a0c8 <tcp_output>:
{
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a0cc:	4604      	mov	r4, r0
{
 800a0ce:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a0d0:	b930      	cbnz	r0, 800a0e0 <tcp_output+0x18>
 800a0d2:	4ba9      	ldr	r3, [pc, #676]	; (800a378 <tcp_output+0x2b0>)
 800a0d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a0d8:	49a8      	ldr	r1, [pc, #672]	; (800a37c <tcp_output+0x2b4>)
 800a0da:	48a9      	ldr	r0, [pc, #676]	; (800a380 <tcp_output+0x2b8>)
 800a0dc:	f001 fa84 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a0e0:	7d23      	ldrb	r3, [r4, #20]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d106      	bne.n	800a0f4 <tcp_output+0x2c>
 800a0e6:	4ba4      	ldr	r3, [pc, #656]	; (800a378 <tcp_output+0x2b0>)
 800a0e8:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800a0ec:	49a5      	ldr	r1, [pc, #660]	; (800a384 <tcp_output+0x2bc>)
 800a0ee:	48a4      	ldr	r0, [pc, #656]	; (800a380 <tcp_output+0x2b8>)
 800a0f0:	f001 fa7a 	bl	800b5e8 <iprintf>
  if (tcp_input_pcb == pcb) {
 800a0f4:	4ba4      	ldr	r3, [pc, #656]	; (800a388 <tcp_output+0x2c0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	f000 816d 	beq.w	800a3d8 <tcp_output+0x310>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a0fe:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800a102:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 800a106:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a108:	429f      	cmp	r7, r3
 800a10a:	bf28      	it	cs
 800a10c:	461f      	movcs	r7, r3
  if (seg == NULL) {
 800a10e:	b94d      	cbnz	r5, 800a124 <tcp_output+0x5c>
    if (pcb->flags & TF_ACK_NOW) {
 800a110:	8b63      	ldrh	r3, [r4, #26]
 800a112:	0798      	lsls	r0, r3, #30
 800a114:	f140 815c 	bpl.w	800a3d0 <tcp_output+0x308>
      return tcp_send_empty_ack(pcb);
 800a118:	4620      	mov	r0, r4
}
 800a11a:	b007      	add	sp, #28
 800a11c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800a120:	f7ff bfa0 	b.w	800a064 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a124:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a126:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a12a:	b340      	cbz	r0, 800a17e <tcp_output+0xb6>
    return netif_get_by_index(pcb->netif_idx);
 800a12c:	f7fc f9e0 	bl	80064f0 <netif_get_by_index>
    return ip_route(src, dst);
 800a130:	4680      	mov	r8, r0
  if (netif == NULL) {
 800a132:	2800      	cmp	r0, #0
 800a134:	f000 8169 	beq.w	800a40a <tcp_output+0x342>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a138:	b10c      	cbz	r4, 800a13e <tcp_output+0x76>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	b913      	cbnz	r3, 800a144 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a13e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a142:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a144:	68eb      	ldr	r3, [r5, #12]
 800a146:	6858      	ldr	r0, [r3, #4]
 800a148:	f7fa fb37 	bl	80047ba <lwip_htonl>
 800a14c:	892b      	ldrh	r3, [r5, #8]
 800a14e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	4418      	add	r0, r3
 800a154:	4287      	cmp	r7, r0
 800a156:	d216      	bcs.n	800a186 <tcp_output+0xbe>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a158:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a15c:	429f      	cmp	r7, r3
 800a15e:	d1d7      	bne.n	800a110 <tcp_output+0x48>
 800a160:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1d4      	bne.n	800a110 <tcp_output+0x48>
 800a166:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1d0      	bne.n	800a110 <tcp_output+0x48>
      pcb->persist_backoff = 1;
 800a16e:	2201      	movs	r2, #1
      pcb->persist_cnt = 0;
 800a170:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      pcb->persist_probe = 0;
 800a174:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_backoff = 1;
 800a178:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 800a17c:	e7c8      	b.n	800a110 <tcp_output+0x48>
    return ip_route(src, dst);
 800a17e:	4648      	mov	r0, r9
 800a180:	f7fb f806 	bl	8005190 <ip4_route>
 800a184:	e7d4      	b.n	800a130 <tcp_output+0x68>
  pcb->persist_backoff = 0;
 800a186:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800a188:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800a18a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
 800a18e:	2e00      	cmp	r6, #0
 800a190:	f040 80a8 	bne.w	800a2e4 <tcp_output+0x21c>
    LWIP_ASSERT("RST not expected here!",
 800a194:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 800a378 <tcp_output+0x2b0>
 800a198:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800a380 <tcp_output+0x2b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a19c:	68eb      	ldr	r3, [r5, #12]
 800a19e:	6858      	ldr	r0, [r3, #4]
 800a1a0:	f7fa fb0b 	bl	80047ba <lwip_htonl>
 800a1a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a1a6:	1ac0      	subs	r0, r0, r3
 800a1a8:	892b      	ldrh	r3, [r5, #8]
 800a1aa:	4418      	add	r0, r3
  while (seg != NULL &&
 800a1ac:	4287      	cmp	r7, r0
 800a1ae:	f0c0 810b 	bcc.w	800a3c8 <tcp_output+0x300>
    LWIP_ASSERT("RST not expected here!",
 800a1b2:	68eb      	ldr	r3, [r5, #12]
 800a1b4:	8998      	ldrh	r0, [r3, #12]
 800a1b6:	f7fa fafd 	bl	80047b4 <lwip_htons>
 800a1ba:	0741      	lsls	r1, r0, #29
 800a1bc:	d506      	bpl.n	800a1cc <tcp_output+0x104>
 800a1be:	4653      	mov	r3, sl
 800a1c0:	f240 5237 	movw	r2, #1335	; 0x537
 800a1c4:	4971      	ldr	r1, [pc, #452]	; (800a38c <tcp_output+0x2c4>)
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f001 fa0e 	bl	800b5e8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a1cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a1ce:	b19b      	cbz	r3, 800a1f8 <tcp_output+0x130>
 800a1d0:	8b62      	ldrh	r2, [r4, #26]
 800a1d2:	f012 0f44 	tst.w	r2, #68	; 0x44
 800a1d6:	d10f      	bne.n	800a1f8 <tcp_output+0x130>
 800a1d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a1da:	b12b      	cbz	r3, 800a1e8 <tcp_output+0x120>
 800a1dc:	6819      	ldr	r1, [r3, #0]
 800a1de:	b959      	cbnz	r1, 800a1f8 <tcp_output+0x130>
 800a1e0:	8919      	ldrh	r1, [r3, #8]
 800a1e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	d207      	bcs.n	800a1f8 <tcp_output+0x130>
 800a1e8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a1ec:	b123      	cbz	r3, 800a1f8 <tcp_output+0x130>
 800a1ee:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a1f2:	2b08      	cmp	r3, #8
 800a1f4:	f240 810c 	bls.w	800a410 <tcp_output+0x348>
    if (pcb->state != SYN_SENT) {
 800a1f8:	7d23      	ldrb	r3, [r4, #20]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d00a      	beq.n	800a214 <tcp_output+0x14c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a1fe:	68ea      	ldr	r2, [r5, #12]
 800a200:	2010      	movs	r0, #16
 800a202:	8993      	ldrh	r3, [r2, #12]
 800a204:	9205      	str	r2, [sp, #20]
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	f7fa fad4 	bl	80047b4 <lwip_htons>
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	9a05      	ldr	r2, [sp, #20]
 800a210:	4318      	orrs	r0, r3
 800a212:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800a214:	4628      	mov	r0, r5
 800a216:	f7ff f85b 	bl	80092d0 <tcp_output_segment_busy>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d176      	bne.n	800a30c <tcp_output+0x244>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a21e:	68eb      	ldr	r3, [r5, #12]
 800a220:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	f7fa fac9 	bl	80047ba <lwip_htonl>
 800a228:	9b04      	ldr	r3, [sp, #16]
 800a22a:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a22c:	68eb      	ldr	r3, [r5, #12]
 800a22e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	f7fa fabf 	bl	80047b4 <lwip_htons>
 800a236:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a238:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a23a:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a23c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a23e:	4413      	add	r3, r2
 800a240:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a242:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a244:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a246:	07d2      	lsls	r2, r2, #31
 800a248:	d450      	bmi.n	800a2ec <tcp_output+0x224>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a24a:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800a24e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a252:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800a254:	bfbc      	itt	lt
 800a256:	2300      	movlt	r3, #0
 800a258:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800a25a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a25c:	b94b      	cbnz	r3, 800a272 <tcp_output+0x1aa>
    pcb->rttest = tcp_ticks;
 800a25e:	4b4c      	ldr	r3, [pc, #304]	; (800a390 <tcp_output+0x2c8>)
 800a260:	9204      	str	r2, [sp, #16]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a266:	68eb      	ldr	r3, [r5, #12]
 800a268:	6858      	ldr	r0, [r3, #4]
 800a26a:	f7fa faa6 	bl	80047ba <lwip_htonl>
 800a26e:	9a04      	ldr	r2, [sp, #16]
 800a270:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a272:	6869      	ldr	r1, [r5, #4]
 800a274:	68eb      	ldr	r3, [r5, #12]
 800a276:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800a278:	f8b1 e00a 	ldrh.w	lr, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a27c:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800a27e:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a280:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800a282:	ebae 0e00 	sub.w	lr, lr, r0
 800a286:	f8a1 e00a 	strh.w	lr, [r1, #10]
  seg->p->tot_len -= len;
 800a28a:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 800a28e:	ebae 0000 	sub.w	r0, lr, r0
 800a292:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800a294:	2100      	movs	r1, #0
 800a296:	7419      	strb	r1, [r3, #16]
 800a298:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a29a:	7aa9      	ldrb	r1, [r5, #10]
 800a29c:	f011 0f01 	tst.w	r1, #1
 800a2a0:	bf14      	ite	ne
 800a2a2:	2118      	movne	r1, #24
 800a2a4:	2114      	moveq	r1, #20
 800a2a6:	440b      	add	r3, r1
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d006      	beq.n	800a2ba <tcp_output+0x1f2>
 800a2ac:	4653      	mov	r3, sl
 800a2ae:	f240 621c 	movw	r2, #1564	; 0x61c
 800a2b2:	4938      	ldr	r1, [pc, #224]	; (800a394 <tcp_output+0x2cc>)
 800a2b4:	4658      	mov	r0, fp
 800a2b6:	f001 f997 	bl	800b5e8 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a2ba:	2206      	movs	r2, #6
 800a2bc:	7ae3      	ldrb	r3, [r4, #11]
 800a2be:	f8cd 8008 	str.w	r8, [sp, #8]
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	9201      	str	r2, [sp, #4]
 800a2c6:	7aa2      	ldrb	r2, [r4, #10]
 800a2c8:	9200      	str	r2, [sp, #0]
 800a2ca:	464a      	mov	r2, r9
 800a2cc:	6868      	ldr	r0, [r5, #4]
 800a2ce:	f7fb f8bb 	bl	8005448 <ip4_output_if>
    if (err != ERR_OK) {
 800a2d2:	b1d8      	cbz	r0, 800a30c <tcp_output+0x244>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a2d4:	8b63      	ldrh	r3, [r4, #26]
 800a2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2da:	8363      	strh	r3, [r4, #26]
}
 800a2dc:	b007      	add	sp, #28
 800a2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e2:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800a2e4:	6833      	ldr	r3, [r6, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1fb      	bne.n	800a2e2 <tcp_output+0x21a>
 800a2ea:	e753      	b.n	800a194 <tcp_output+0xcc>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a2ec:	464a      	mov	r2, r9
 800a2ee:	4641      	mov	r1, r8
 800a2f0:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a2f4:	9304      	str	r3, [sp, #16]
 800a2f6:	f7fc feef 	bl	80070d8 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a2fa:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a2fe:	f7fa fa5c 	bl	80047ba <lwip_htonl>
 800a302:	9b04      	ldr	r3, [sp, #16]
 800a304:	6158      	str	r0, [r3, #20]
    opts += 1;
 800a306:	f103 0218 	add.w	r2, r3, #24
 800a30a:	e7a0      	b.n	800a24e <tcp_output+0x186>
    pcb->unsent = seg->next;
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a310:	7d23      	ldrb	r3, [r4, #20]
 800a312:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a314:	bf1e      	ittt	ne
 800a316:	8b63      	ldrhne	r3, [r4, #26]
 800a318:	f023 0303 	bicne.w	r3, r3, #3
 800a31c:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a31e:	68eb      	ldr	r3, [r5, #12]
 800a320:	6858      	ldr	r0, [r3, #4]
 800a322:	f7fa fa4a 	bl	80047ba <lwip_htonl>
 800a326:	892a      	ldrh	r2, [r5, #8]
 800a328:	68e9      	ldr	r1, [r5, #12]
 800a32a:	9204      	str	r2, [sp, #16]
 800a32c:	9005      	str	r0, [sp, #20]
 800a32e:	8988      	ldrh	r0, [r1, #12]
 800a330:	f7fa fa40 	bl	80047b4 <lwip_htons>
 800a334:	9a04      	ldr	r2, [sp, #16]
 800a336:	f010 0003 	ands.w	r0, r0, #3
 800a33a:	9b05      	ldr	r3, [sp, #20]
 800a33c:	bf18      	it	ne
 800a33e:	2001      	movne	r0, #1
 800a340:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 800a342:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a344:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a346:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a348:	1a1b      	subs	r3, r3, r0
 800a34a:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800a34c:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800a34e:	bfb8      	it	lt
 800a350:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	8990      	ldrh	r0, [r2, #12]
 800a356:	f7fa fa2d 	bl	80047b4 <lwip_htons>
 800a35a:	f010 0003 	ands.w	r0, r0, #3
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	bf18      	it	ne
 800a362:	2001      	movne	r0, #1
 800a364:	42d8      	cmn	r0, r3
 800a366:	d04c      	beq.n	800a402 <tcp_output+0x33a>
      seg->next = NULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800a36c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a36e:	b99b      	cbnz	r3, 800a398 <tcp_output+0x2d0>
        pcb->unacked = seg;
 800a370:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800a372:	462e      	mov	r6, r5
 800a374:	e024      	b.n	800a3c0 <tcp_output+0x2f8>
 800a376:	bf00      	nop
 800a378:	0800edbe 	.word	0x0800edbe
 800a37c:	0800ecb4 	.word	0x0800ecb4
 800a380:	0800c5ae 	.word	0x0800c5ae
 800a384:	0800eccc 	.word	0x0800eccc
 800a388:	20027d40 	.word	0x20027d40
 800a38c:	0800ecf2 	.word	0x0800ecf2
 800a390:	20027d30 	.word	0x20027d30
 800a394:	0800ed09 	.word	0x0800ed09
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a398:	68eb      	ldr	r3, [r5, #12]
 800a39a:	6858      	ldr	r0, [r3, #4]
 800a39c:	f7fa fa0d 	bl	80047ba <lwip_htonl>
 800a3a0:	68f2      	ldr	r2, [r6, #12]
 800a3a2:	9004      	str	r0, [sp, #16]
 800a3a4:	6850      	ldr	r0, [r2, #4]
 800a3a6:	f7fa fa08 	bl	80047ba <lwip_htonl>
 800a3aa:	9b04      	ldr	r3, [sp, #16]
 800a3ac:	1a18      	subs	r0, r3, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	da25      	bge.n	800a3fe <tcp_output+0x336>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a3b2:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	b982      	cbnz	r2, 800a3dc <tcp_output+0x314>
          seg->next = (*cur_seg);
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800a3be:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800a3c0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800a3c2:	2d00      	cmp	r5, #0
 800a3c4:	f47f aeea 	bne.w	800a19c <tcp_output+0xd4>
  if (pcb->unsent == NULL) {
 800a3c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a3ca:	b90b      	cbnz	r3, 800a3d0 <tcp_output+0x308>
    pcb->unsent_oversize = 0;
 800a3cc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a3d0:	8b63      	ldrh	r3, [r4, #26]
 800a3d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e77f      	b.n	800a2dc <tcp_output+0x214>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a3dc:	68d2      	ldr	r2, [r2, #12]
 800a3de:	9305      	str	r3, [sp, #20]
 800a3e0:	6850      	ldr	r0, [r2, #4]
 800a3e2:	f7fa f9ea 	bl	80047ba <lwip_htonl>
 800a3e6:	68e9      	ldr	r1, [r5, #12]
 800a3e8:	9004      	str	r0, [sp, #16]
 800a3ea:	6848      	ldr	r0, [r1, #4]
 800a3ec:	f7fa f9e5 	bl	80047ba <lwip_htonl>
 800a3f0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800a3f2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a3f4:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	dadf      	bge.n	800a3ba <tcp_output+0x2f2>
            cur_seg = &((*cur_seg)->next );
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	e7db      	b.n	800a3b6 <tcp_output+0x2ee>
          useg->next = seg;
 800a3fe:	6035      	str	r5, [r6, #0]
 800a400:	e7b7      	b.n	800a372 <tcp_output+0x2aa>
      tcp_seg_free(seg);
 800a402:	4628      	mov	r0, r5
 800a404:	f7fc fd8e 	bl	8006f24 <tcp_seg_free>
 800a408:	e7da      	b.n	800a3c0 <tcp_output+0x2f8>
    return ERR_RTE;
 800a40a:	f06f 0003 	mvn.w	r0, #3
 800a40e:	e765      	b.n	800a2dc <tcp_output+0x214>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a410:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800a414:	f47f aef0 	bne.w	800a1f8 <tcp_output+0x130>
 800a418:	e7d6      	b.n	800a3c8 <tcp_output+0x300>
 800a41a:	bf00      	nop

0800a41c <tcp_rexmit_rto_commit>:
{
 800a41c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a41e:	4604      	mov	r4, r0
 800a420:	b930      	cbnz	r0, 800a430 <tcp_rexmit_rto_commit+0x14>
 800a422:	4b09      	ldr	r3, [pc, #36]	; (800a448 <tcp_rexmit_rto_commit+0x2c>)
 800a424:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a428:	4908      	ldr	r1, [pc, #32]	; (800a44c <tcp_rexmit_rto_commit+0x30>)
 800a42a:	4809      	ldr	r0, [pc, #36]	; (800a450 <tcp_rexmit_rto_commit+0x34>)
 800a42c:	f001 f8dc 	bl	800b5e8 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800a430:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800a434:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800a436:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800a438:	bf1c      	itt	ne
 800a43a:	3301      	addne	r3, #1
 800a43c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800a440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800a444:	f7ff be40 	b.w	800a0c8 <tcp_output>
 800a448:	0800edbe 	.word	0x0800edbe
 800a44c:	0800eebe 	.word	0x0800eebe
 800a450:	0800c5ae 	.word	0x0800c5ae

0800a454 <tcp_rexmit_rto>:
{
 800a454:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a456:	4604      	mov	r4, r0
 800a458:	b930      	cbnz	r0, 800a468 <tcp_rexmit_rto+0x14>
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <tcp_rexmit_rto+0x28>)
 800a45c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a460:	4907      	ldr	r1, [pc, #28]	; (800a480 <tcp_rexmit_rto+0x2c>)
 800a462:	4808      	ldr	r0, [pc, #32]	; (800a484 <tcp_rexmit_rto+0x30>)
 800a464:	f001 f8c0 	bl	800b5e8 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a468:	4620      	mov	r0, r4
 800a46a:	f7ff fcfb 	bl	8009e64 <tcp_rexmit_rto_prepare>
 800a46e:	b920      	cbnz	r0, 800a47a <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800a470:	4620      	mov	r0, r4
}
 800a472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800a476:	f7ff bfd1 	b.w	800a41c <tcp_rexmit_rto_commit>
 800a47a:	bd10      	pop	{r4, pc}
 800a47c:	0800edbe 	.word	0x0800edbe
 800a480:	0800eea2 	.word	0x0800eea2
 800a484:	0800c5ae 	.word	0x0800c5ae

0800a488 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a488:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a48a:	4604      	mov	r4, r0
 800a48c:	b930      	cbnz	r0, 800a49c <tcp_keepalive+0x14>
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <tcp_keepalive+0x44>)
 800a490:	f640 0224 	movw	r2, #2084	; 0x824
 800a494:	490e      	ldr	r1, [pc, #56]	; (800a4d0 <tcp_keepalive+0x48>)
 800a496:	480f      	ldr	r0, [pc, #60]	; (800a4d4 <tcp_keepalive+0x4c>)
 800a498:	f001 f8a6 	bl	800b5e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a49c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a49e:	3801      	subs	r0, #1
 800a4a0:	f7fa f98b 	bl	80047ba <lwip_htonl>
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7ff f839 	bl	8009520 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	b148      	cbz	r0, 800a4c6 <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a4b2:	f7ff f85b 	bl	800956c <tcp_output_fill_options.isra.0.constprop.4>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a4b6:	1d23      	adds	r3, r4, #4
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a4c2:	f7ff b863 	b.w	800958c <tcp_output_control_segment>
}
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	0800edbe 	.word	0x0800edbe
 800a4d0:	0800ec99 	.word	0x0800ec99
 800a4d4:	0800c5ae 	.word	0x0800c5ae

0800a4d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a4dc:	4605      	mov	r5, r0
 800a4de:	b930      	cbnz	r0, 800a4ee <tcp_zero_window_probe+0x16>
 800a4e0:	4b2c      	ldr	r3, [pc, #176]	; (800a594 <tcp_zero_window_probe+0xbc>)
 800a4e2:	f640 024f 	movw	r2, #2127	; 0x84f
 800a4e6:	492c      	ldr	r1, [pc, #176]	; (800a598 <tcp_zero_window_probe+0xc0>)
 800a4e8:	482c      	ldr	r0, [pc, #176]	; (800a59c <tcp_zero_window_probe+0xc4>)
 800a4ea:	f001 f87d 	bl	800b5e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a4ee:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	d048      	beq.n	800a586 <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a4f4:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
 800a4f8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800a4fa:	bf1c      	itt	ne
 800a4fc:	3301      	addne	r3, #1
 800a4fe:	f885 309a 	strbne.w	r3, [r5, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	8998      	ldrh	r0, [r3, #12]
 800a506:	f7fa f955 	bl	80047b4 <lwip_htons>
 800a50a:	f010 0601 	ands.w	r6, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a50e:	68e3      	ldr	r3, [r4, #12]
 800a510:	4628      	mov	r0, r5
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a512:	bf18      	it	ne
 800a514:	8926      	ldrhne	r6, [r4, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a516:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a518:	bf1c      	itt	ne
 800a51a:	fab6 f686 	clzne	r6, r6
 800a51e:	0976      	lsrne	r6, r6, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a520:	f086 0101 	eor.w	r1, r6, #1
 800a524:	f7fe fffc 	bl	8009520 <tcp_output_alloc_header.constprop.2>
  if (p == NULL) {
 800a528:	4607      	mov	r7, r0
 800a52a:	b378      	cbz	r0, 800a58c <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a52c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a530:	b1f6      	cbz	r6, 800a570 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a532:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 800a536:	2011      	movs	r0, #17
 800a538:	f7fa f93c 	bl	80047b4 <lwip_htons>
 800a53c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a540:	4330      	orrs	r0, r6
 800a542:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	6858      	ldr	r0, [r3, #4]
 800a54a:	f7fa f936 	bl	80047ba <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a54e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a550:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a552:	1a1b      	subs	r3, r3, r0
 800a554:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800a556:	bfb8      	it	lt
 800a558:	6528      	strlt	r0, [r5, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a55a:	4638      	mov	r0, r7
 800a55c:	f7ff f806 	bl	800956c <tcp_output_fill_options.isra.0.constprop.4>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a560:	1d2b      	adds	r3, r5, #4
 800a562:	462a      	mov	r2, r5
 800a564:	4639      	mov	r1, r7
 800a566:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a56c:	f7ff b80e 	b.w	800958c <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a570:	6860      	ldr	r0, [r4, #4]
 800a572:	f108 0114 	add.w	r1, r8, #20
 800a576:	8922      	ldrh	r2, [r4, #8]
 800a578:	8903      	ldrh	r3, [r0, #8]
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	2201      	movs	r2, #1
 800a57e:	b29b      	uxth	r3, r3
 800a580:	f7fc fac0 	bl	8006b04 <pbuf_copy_partial>
 800a584:	e7df      	b.n	800a546 <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800a586:	4620      	mov	r0, r4
 800a588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a594:	0800edbe 	.word	0x0800edbe
 800a598:	0800f21c 	.word	0x0800f21c
 800a59c:	0800c5ae 	.word	0x0800c5ae

0800a5a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a5a4:	200a      	movs	r0, #10
{
 800a5a6:	460e      	mov	r6, r1
 800a5a8:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a5aa:	f7fb fe0d 	bl	80061c8 <memp_malloc>
  if (timeout == NULL) {
 800a5ae:	b938      	cbnz	r0, 800a5c0 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a5b0:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <sys_timeout_abs+0x54>)
 800a5b2:	22be      	movs	r2, #190	; 0xbe
 800a5b4:	4910      	ldr	r1, [pc, #64]	; (800a5f8 <sys_timeout_abs+0x58>)
 800a5b6:	4811      	ldr	r0, [pc, #68]	; (800a5fc <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800a5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a5bc:	f001 b814 	b.w	800b5e8 <iprintf>
  timeout->next = NULL;
 800a5c0:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800a5c2:	4a0f      	ldr	r2, [pc, #60]	; (800a600 <sys_timeout_abs+0x60>)
  timeout->h = handler;
 800a5c4:	6086      	str	r6, [r0, #8]
  timeout->next = NULL;
 800a5c6:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800a5c8:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800a5ca:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800a5cc:	6044      	str	r4, [r0, #4]
  if (next_timeout == NULL) {
 800a5ce:	b90b      	cbnz	r3, 800a5d4 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800a5d0:	6010      	str	r0, [r2, #0]
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a5d4:	6859      	ldr	r1, [r3, #4]
 800a5d6:	1a61      	subs	r1, r4, r1
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	da02      	bge.n	800a5e2 <sys_timeout_abs+0x42>
    timeout->next = next_timeout;
 800a5dc:	6003      	str	r3, [r0, #0]
 800a5de:	e7f7      	b.n	800a5d0 <sys_timeout_abs+0x30>
 800a5e0:	4613      	mov	r3, r2
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	b11a      	cbz	r2, 800a5ee <sys_timeout_abs+0x4e>
 800a5e6:	6851      	ldr	r1, [r2, #4]
 800a5e8:	1a61      	subs	r1, r4, r1
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	daf8      	bge.n	800a5e0 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800a5ee:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800a5f0:	6018      	str	r0, [r3, #0]
        break;
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	0800f28e 	.word	0x0800f28e
 800a5f8:	0800f2c2 	.word	0x0800f2c2
 800a5fc:	0800c5ae 	.word	0x0800c5ae
 800a600:	200243b0 	.word	0x200243b0

0800a604 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a604:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a606:	6843      	ldr	r3, [r0, #4]
{
 800a608:	4604      	mov	r4, r0
  cyclic->handler();
 800a60a:	4798      	blx	r3

  now = sys_now();
 800a60c:	f000 fcd4 	bl	800afb8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <lwip_cyclic_timer+0x2c>)
 800a612:	6825      	ldr	r5, [r4, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a616:	4907      	ldr	r1, [pc, #28]	; (800a634 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a618:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a61a:	1a1a      	subs	r2, r3, r0
 800a61c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a61e:	4622      	mov	r2, r4
 800a620:	bfb4      	ite	lt
 800a622:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a624:	4618      	movge	r0, r3
#endif
  }
}
 800a626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a62a:	f7ff bfb9 	b.w	800a5a0 <sys_timeout_abs>
 800a62e:	bf00      	nop
 800a630:	200243ac 	.word	0x200243ac
 800a634:	0800a605 	.word	0x0800a605

0800a638 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a638:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	460d      	mov	r5, r1
 800a642:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a644:	d306      	bcc.n	800a654 <sys_timeout+0x1c>
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <sys_timeout+0x30>)
 800a648:	f240 1229 	movw	r2, #297	; 0x129
 800a64c:	4907      	ldr	r1, [pc, #28]	; (800a66c <sys_timeout+0x34>)
 800a64e:	4808      	ldr	r0, [pc, #32]	; (800a670 <sys_timeout+0x38>)
 800a650:	f000 ffca 	bl	800b5e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a654:	f000 fcb0 	bl	800afb8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a658:	4632      	mov	r2, r6
 800a65a:	4629      	mov	r1, r5
 800a65c:	4420      	add	r0, r4
#endif
}
 800a65e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a662:	f7ff bf9d 	b.w	800a5a0 <sys_timeout_abs>
 800a666:	bf00      	nop
 800a668:	0800f28e 	.word	0x0800f28e
 800a66c:	0800f258 	.word	0x0800f258
 800a670:	0800c5ae 	.word	0x0800c5ae

0800a674 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a674:	4b08      	ldr	r3, [pc, #32]	; (800a698 <tcp_timer_needed+0x24>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	b962      	cbnz	r2, 800a694 <tcp_timer_needed+0x20>
 800a67a:	4a08      	ldr	r2, [pc, #32]	; (800a69c <tcp_timer_needed+0x28>)
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	b912      	cbnz	r2, 800a686 <tcp_timer_needed+0x12>
 800a680:	4a07      	ldr	r2, [pc, #28]	; (800a6a0 <tcp_timer_needed+0x2c>)
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	b132      	cbz	r2, 800a694 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a686:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a688:	4906      	ldr	r1, [pc, #24]	; (800a6a4 <tcp_timer_needed+0x30>)
 800a68a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800a68c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a68e:	2200      	movs	r2, #0
 800a690:	f7ff bfd2 	b.w	800a638 <sys_timeout>
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	200243b4 	.word	0x200243b4
 800a69c:	20027d2c 	.word	0x20027d2c
 800a6a0:	20027d3c 	.word	0x20027d3c
 800a6a4:	0800a6a9 	.word	0x0800a6a9

0800a6a8 <tcpip_tcp_timer>:
{
 800a6a8:	b508      	push	{r3, lr}
  tcp_tmr();
 800a6aa:	f7fd fb25 	bl	8007cf8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a6ae:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <tcpip_tcp_timer+0x28>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	b913      	cbnz	r3, 800a6ba <tcpip_tcp_timer+0x12>
 800a6b4:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <tcpip_tcp_timer+0x2c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	b133      	cbz	r3, 800a6c8 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4906      	ldr	r1, [pc, #24]	; (800a6d8 <tcpip_tcp_timer+0x30>)
 800a6be:	20fa      	movs	r0, #250	; 0xfa
}
 800a6c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a6c4:	f7ff bfb8 	b.w	800a638 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800a6c8:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <tcpip_tcp_timer+0x34>)
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	bd08      	pop	{r3, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20027d2c 	.word	0x20027d2c
 800a6d4:	20027d3c 	.word	0x20027d3c
 800a6d8:	0800a6a9 	.word	0x0800a6a9
 800a6dc:	200243b4 	.word	0x200243b4

0800a6e0 <sys_timeouts_init>:
{
 800a6e0:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a6e2:	4d09      	ldr	r5, [pc, #36]	; (800a708 <sys_timeouts_init+0x28>)
 800a6e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a6e8:	4c08      	ldr	r4, [pc, #32]	; (800a70c <sys_timeouts_init+0x2c>)
 800a6ea:	f105 0208 	add.w	r2, r5, #8
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	f7ff ffa2 	bl	800a638 <sys_timeout>
 800a6f4:	f105 0210 	add.w	r2, r5, #16
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800a6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a702:	f7ff bf99 	b.w	800a638 <sys_timeout>
 800a706:	bf00      	nop
 800a708:	0800f240 	.word	0x0800f240
 800a70c:	0800a605 	.word	0x0800a605

0800a710 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a714:	f000 fc50 	bl	800afb8 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800a718:	4d0c      	ldr	r5, [pc, #48]	; (800a74c <sys_check_timeouts+0x3c>)
  now = sys_now();
 800a71a:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800a71c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800a750 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800a720:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800a722:	b189      	cbz	r1, 800a748 <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a724:	684b      	ldr	r3, [r1, #4]
 800a726:	1afa      	subs	r2, r7, r3
 800a728:	2a00      	cmp	r2, #0
 800a72a:	db0d      	blt.n	800a748 <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 800a72c:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a72e:	200a      	movs	r0, #10
    handler = tmptimeout->h;
 800a730:	688c      	ldr	r4, [r1, #8]
    next_timeout = tmptimeout->next;
 800a732:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800a734:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800a736:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a73a:	f7fb fd61 	bl	8006200 <memp_free>
    if (handler != NULL) {
 800a73e:	2c00      	cmp	r4, #0
 800a740:	d0ee      	beq.n	800a720 <sys_check_timeouts+0x10>
      handler(arg);
 800a742:	4630      	mov	r0, r6
 800a744:	47a0      	blx	r4
 800a746:	e7eb      	b.n	800a720 <sys_check_timeouts+0x10>
 800a748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a74c:	200243b0 	.word	0x200243b0
 800a750:	200243ac 	.word	0x200243ac

0800a754 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800a754:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800a756:	4c07      	ldr	r4, [pc, #28]	; (800a774 <sys_timeouts_sleeptime+0x20>)
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	b13b      	cbz	r3, 800a76c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800a75c:	f000 fc2c 	bl	800afb8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	1a18      	subs	r0, r3, r0
    return 0;
 800a766:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a76a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800a770:	bd10      	pop	{r4, pc}
 800a772:	bf00      	nop
 800a774:	200243b0 	.word	0x200243b0

0800a778 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a778:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a77a:	f000 ff4d 	bl	800b618 <rand>
 800a77e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800a782:	4b02      	ldr	r3, [pc, #8]	; (800a78c <udp_init+0x14>)
 800a784:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800a788:	8018      	strh	r0, [r3, #0]
 800a78a:	bd08      	pop	{r3, pc}
 800a78c:	20020012 	.word	0x20020012

0800a790 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4688      	mov	r8, r1
 800a796:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a798:	4607      	mov	r7, r0
 800a79a:	b928      	cbnz	r0, 800a7a8 <udp_input+0x18>
 800a79c:	4b5d      	ldr	r3, [pc, #372]	; (800a914 <udp_input+0x184>)
 800a79e:	22cf      	movs	r2, #207	; 0xcf
 800a7a0:	495d      	ldr	r1, [pc, #372]	; (800a918 <udp_input+0x188>)
 800a7a2:	485e      	ldr	r0, [pc, #376]	; (800a91c <udp_input+0x18c>)
 800a7a4:	f000 ff20 	bl	800b5e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a7a8:	f1b8 0f00 	cmp.w	r8, #0
 800a7ac:	d105      	bne.n	800a7ba <udp_input+0x2a>
 800a7ae:	4b59      	ldr	r3, [pc, #356]	; (800a914 <udp_input+0x184>)
 800a7b0:	22d0      	movs	r2, #208	; 0xd0
 800a7b2:	495b      	ldr	r1, [pc, #364]	; (800a920 <udp_input+0x190>)
 800a7b4:	4859      	ldr	r0, [pc, #356]	; (800a91c <udp_input+0x18c>)
 800a7b6:	f000 ff17 	bl	800b5e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a7ba:	897b      	ldrh	r3, [r7, #10]
 800a7bc:	2b07      	cmp	r3, #7
 800a7be:	d805      	bhi.n	800a7cc <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a7c0:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a7c2:	b005      	add	sp, #20
 800a7c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800a7c8:	f7fb bf62 	b.w	8006690 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a7cc:	4e55      	ldr	r6, [pc, #340]	; (800a924 <udp_input+0x194>)
  uncon_pcb = NULL;
 800a7ce:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800a7d0:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a7d2:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800a7d4:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a7d6:	6970      	ldr	r0, [r6, #20]
 800a7d8:	f7fa fe47 	bl	800546a <ip4_addr_isbroadcast_u32>
 800a7dc:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 800a7de:	8820      	ldrh	r0, [r4, #0]
 800a7e0:	f7f9 ffe8 	bl	80047b4 <lwip_htons>
 800a7e4:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800a7e6:	8860      	ldrh	r0, [r4, #2]
 800a7e8:	f7f9 ffe4 	bl	80047b4 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7ec:	4b4e      	ldr	r3, [pc, #312]	; (800a928 <udp_input+0x198>)
  dest = lwip_ntohs(udphdr->dest);
 800a7ee:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7f0:	681c      	ldr	r4, [r3, #0]
 800a7f2:	4699      	mov	r9, r3
 800a7f4:	b93c      	cbnz	r4, 800a806 <udp_input+0x76>
  if (pcb != NULL) {
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	d144      	bne.n	800a884 <udp_input+0xf4>
  if (for_us) {
 800a7fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a7fe:	6973      	ldr	r3, [r6, #20]
 800a800:	429a      	cmp	r2, r3
 800a802:	d1dd      	bne.n	800a7c0 <udp_input+0x30>
 800a804:	e03e      	b.n	800a884 <udp_input+0xf4>
    if ((pcb->local_port == dest) &&
 800a806:	8a63      	ldrh	r3, [r4, #18]
 800a808:	9a03      	ldr	r2, [sp, #12]
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d14c      	bne.n	800a8a8 <udp_input+0x118>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a80e:	f1b8 0f00 	cmp.w	r8, #0
 800a812:	d105      	bne.n	800a820 <udp_input+0x90>
 800a814:	4b3f      	ldr	r3, [pc, #252]	; (800a914 <udp_input+0x184>)
 800a816:	2288      	movs	r2, #136	; 0x88
 800a818:	4944      	ldr	r1, [pc, #272]	; (800a92c <udp_input+0x19c>)
 800a81a:	4840      	ldr	r0, [pc, #256]	; (800a91c <udp_input+0x18c>)
 800a81c:	f000 fee4 	bl	800b5e8 <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a820:	7a22      	ldrb	r2, [r4, #8]
 800a822:	b132      	cbz	r2, 800a832 <udp_input+0xa2>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a824:	6873      	ldr	r3, [r6, #4]
 800a826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a82a:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	429a      	cmp	r2, r3
 800a830:	d13a      	bne.n	800a8a8 <udp_input+0x118>
 800a832:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800a834:	f1ba 0f00 	cmp.w	sl, #0
 800a838:	d031      	beq.n	800a89e <udp_input+0x10e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a83a:	b13b      	cbz	r3, 800a84c <udp_input+0xbc>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a83c:	6972      	ldr	r2, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a83e:	1c51      	adds	r1, r2, #1
 800a840:	d004      	beq.n	800a84c <udp_input+0xbc>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a842:	405a      	eors	r2, r3
 800a844:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a848:	420a      	tst	r2, r1
 800a84a:	d12d      	bne.n	800a8a8 <udp_input+0x118>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a84c:	7c22      	ldrb	r2, [r4, #16]
 800a84e:	0752      	lsls	r2, r2, #29
 800a850:	d40e      	bmi.n	800a870 <udp_input+0xe0>
        if (uncon_pcb == NULL) {
 800a852:	b365      	cbz	r5, 800a8ae <udp_input+0x11e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a854:	f1ba 0f00 	cmp.w	sl, #0
 800a858:	d00a      	beq.n	800a870 <udp_input+0xe0>
 800a85a:	6972      	ldr	r2, [r6, #20]
 800a85c:	3201      	adds	r2, #1
 800a85e:	d107      	bne.n	800a870 <udp_input+0xe0>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a860:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a864:	6829      	ldr	r1, [r5, #0]
 800a866:	4291      	cmp	r1, r2
 800a868:	d002      	beq.n	800a870 <udp_input+0xe0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a86a:	429a      	cmp	r2, r3
 800a86c:	bf08      	it	eq
 800a86e:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800a870:	8aa3      	ldrh	r3, [r4, #20]
 800a872:	9a02      	ldr	r2, [sp, #8]
 800a874:	4293      	cmp	r3, r2
 800a876:	d117      	bne.n	800a8a8 <udp_input+0x118>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a878:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800a87a:	b9d3      	cbnz	r3, 800a8b2 <udp_input+0x122>
        if (prev != NULL) {
 800a87c:	f1bb 0f00 	cmp.w	fp, #0
 800a880:	d11b      	bne.n	800a8ba <udp_input+0x12a>
 800a882:	4625      	mov	r5, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800a884:	2108      	movs	r1, #8
 800a886:	4638      	mov	r0, r7
 800a888:	f7fb fece 	bl	8006628 <pbuf_remove_header>
 800a88c:	b1f0      	cbz	r0, 800a8cc <udp_input+0x13c>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800a88e:	4b21      	ldr	r3, [pc, #132]	; (800a914 <udp_input+0x184>)
 800a890:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800a894:	4926      	ldr	r1, [pc, #152]	; (800a930 <udp_input+0x1a0>)
 800a896:	4821      	ldr	r0, [pc, #132]	; (800a91c <udp_input+0x18c>)
 800a898:	f000 fea6 	bl	800b5e8 <iprintf>
 800a89c:	e790      	b.n	800a7c0 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0d4      	beq.n	800a84c <udp_input+0xbc>
 800a8a2:	6972      	ldr	r2, [r6, #20]
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d0d1      	beq.n	800a84c <udp_input+0xbc>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8a8:	46a3      	mov	fp, r4
 800a8aa:	68e4      	ldr	r4, [r4, #12]
 800a8ac:	e7a2      	b.n	800a7f4 <udp_input+0x64>
 800a8ae:	4625      	mov	r5, r4
 800a8b0:	e7de      	b.n	800a870 <udp_input+0xe0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a8b2:	6932      	ldr	r2, [r6, #16]
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d1f7      	bne.n	800a8a8 <udp_input+0x118>
 800a8b8:	e7e0      	b.n	800a87c <udp_input+0xec>
          prev->next = pcb->next;
 800a8ba:	68e3      	ldr	r3, [r4, #12]
 800a8bc:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800a8c0:	f8d9 3000 	ldr.w	r3, [r9]
          udp_pcbs = pcb;
 800a8c4:	f8c9 4000 	str.w	r4, [r9]
          pcb->next = udp_pcbs;
 800a8c8:	60e3      	str	r3, [r4, #12]
 800a8ca:	e7da      	b.n	800a882 <udp_input+0xf2>
    if (pcb != NULL) {
 800a8cc:	b16d      	cbz	r5, 800a8ea <udp_input+0x15a>
      if (pcb->recv != NULL) {
 800a8ce:	69ac      	ldr	r4, [r5, #24]
 800a8d0:	2c00      	cmp	r4, #0
 800a8d2:	f43f af75 	beq.w	800a7c0 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a8d6:	9b02      	ldr	r3, [sp, #8]
 800a8d8:	463a      	mov	r2, r7
 800a8da:	4629      	mov	r1, r5
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	4b15      	ldr	r3, [pc, #84]	; (800a934 <udp_input+0x1a4>)
 800a8e0:	69e8      	ldr	r0, [r5, #28]
 800a8e2:	47a0      	blx	r4
}
 800a8e4:	b005      	add	sp, #20
 800a8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a8ea:	f1ba 0f00 	cmp.w	sl, #0
 800a8ee:	f47f af67 	bne.w	800a7c0 <udp_input+0x30>
 800a8f2:	6973      	ldr	r3, [r6, #20]
 800a8f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8f8:	2be0      	cmp	r3, #224	; 0xe0
 800a8fa:	f43f af61 	beq.w	800a7c0 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a8fe:	89b1      	ldrh	r1, [r6, #12]
 800a900:	4638      	mov	r0, r7
 800a902:	3108      	adds	r1, #8
 800a904:	b209      	sxth	r1, r1
 800a906:	f7fb febb 	bl	8006680 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a90a:	2103      	movs	r1, #3
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7fa fc1b 	bl	8005148 <icmp_dest_unreach>
 800a912:	e755      	b.n	800a7c0 <udp_input+0x30>
 800a914:	0800f2ff 	.word	0x0800f2ff
 800a918:	0800f32e 	.word	0x0800f32e
 800a91c:	0800c5ae 	.word	0x0800c5ae
 800a920:	0800f346 	.word	0x0800f346
 800a924:	20024624 	.word	0x20024624
 800a928:	20027d44 	.word	0x20027d44
 800a92c:	0800f35f 	.word	0x0800f35f
 800a930:	0800f384 	.word	0x0800f384
 800a934:	20024634 	.word	0x20024634

0800a938 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a938:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a93a:	b138      	cbz	r0, 800a94c <udp_netif_ip_addr_changed+0x14>
 800a93c:	6803      	ldr	r3, [r0, #0]
 800a93e:	b12b      	cbz	r3, 800a94c <udp_netif_ip_addr_changed+0x14>
 800a940:	b121      	cbz	r1, 800a94c <udp_netif_ip_addr_changed+0x14>
 800a942:	680b      	ldr	r3, [r1, #0]
 800a944:	b113      	cbz	r3, 800a94c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a946:	4b06      	ldr	r3, [pc, #24]	; (800a960 <udp_netif_ip_addr_changed+0x28>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	b903      	cbnz	r3, 800a94e <udp_netif_ip_addr_changed+0x16>
 800a94c:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a94e:	681c      	ldr	r4, [r3, #0]
 800a950:	6802      	ldr	r2, [r0, #0]
 800a952:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a954:	bf04      	itt	eq
 800a956:	680a      	ldreq	r2, [r1, #0]
 800a958:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	e7f5      	b.n	800a94a <udp_netif_ip_addr_changed+0x12>
 800a95e:	bf00      	nop
 800a960:	20027d44 	.word	0x20027d44

0800a964 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a964:	8943      	ldrh	r3, [r0, #10]
 800a966:	2b0e      	cmp	r3, #14
{
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800a96e:	d91a      	bls.n	800a9a6 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a970:	7bc3      	ldrb	r3, [r0, #15]
 800a972:	b91b      	cbnz	r3, 800a97c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800a974:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800a978:	3301      	adds	r3, #1
 800a97a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a97c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a97e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800a980:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800a982:	07d9      	lsls	r1, r3, #31
 800a984:	d50a      	bpl.n	800a99c <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a986:	2b01      	cmp	r3, #1
 800a988:	d111      	bne.n	800a9ae <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a98a:	7843      	ldrb	r3, [r0, #1]
 800a98c:	b933      	cbnz	r3, 800a99c <ethernet_input+0x38>
 800a98e:	7883      	ldrb	r3, [r0, #2]
 800a990:	2b5e      	cmp	r3, #94	; 0x5e
 800a992:	d103      	bne.n	800a99c <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a994:	7b63      	ldrb	r3, [r4, #13]
 800a996:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a99a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800a99c:	2e08      	cmp	r6, #8
 800a99e:	d010      	beq.n	800a9c2 <ethernet_input+0x5e>
 800a9a0:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800a9a4:	d01d      	beq.n	800a9e2 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7fb fe72 	bl	8006690 <pbuf_free>
  return ERR_OK;
 800a9ac:	e017      	b.n	800a9de <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a9ae:	2206      	movs	r2, #6
 800a9b0:	4913      	ldr	r1, [pc, #76]	; (800aa00 <ethernet_input+0x9c>)
 800a9b2:	f000 fdf7 	bl	800b5a4 <memcmp>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d1f0      	bne.n	800a99c <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800a9ba:	7b63      	ldrb	r3, [r4, #13]
 800a9bc:	f043 0308 	orr.w	r3, r3, #8
 800a9c0:	e7eb      	b.n	800a99a <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a9c2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a9c6:	071a      	lsls	r2, r3, #28
 800a9c8:	d5ed      	bpl.n	800a9a6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a9ca:	210e      	movs	r1, #14
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f7fb fe2b 	bl	8006628 <pbuf_remove_header>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d1e7      	bne.n	800a9a6 <ethernet_input+0x42>
        ip4_input(p, netif);
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f7fa fc07 	bl	80051ec <ip4_input>
}
 800a9de:	2000      	movs	r0, #0
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a9e2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a9e6:	071b      	lsls	r3, r3, #28
 800a9e8:	d5dd      	bpl.n	800a9a6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a9ea:	210e      	movs	r1, #14
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7fb fe1b 	bl	8006628 <pbuf_remove_header>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d1d7      	bne.n	800a9a6 <ethernet_input+0x42>
        etharp_input(p, netif);
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7fa f841 	bl	8004a80 <etharp_input>
      break;
 800a9fe:	e7ee      	b.n	800a9de <ethernet_input+0x7a>
 800aa00:	0800f39f 	.word	0x0800f39f

0800aa04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	460d      	mov	r5, r1
 800aa0a:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800aa0c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800aa10:	4616      	mov	r6, r2
 800aa12:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800aa14:	f7f9 fece 	bl	80047b4 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800aa18:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800aa1a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7fb fe00 	bl	8006622 <pbuf_add_header>
 800aa22:	b9e0      	cbnz	r0, 800aa5e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800aa24:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800aa26:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	600b      	str	r3, [r1, #0]
 800aa2e:	88bb      	ldrh	r3, [r7, #4]
 800aa30:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800aa32:	6833      	ldr	r3, [r6, #0]
 800aa34:	f8c1 3006 	str.w	r3, [r1, #6]
 800aa38:	88b3      	ldrh	r3, [r6, #4]
 800aa3a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800aa3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa40:	2b06      	cmp	r3, #6
 800aa42:	d006      	beq.n	800aa52 <ethernet_output+0x4e>
 800aa44:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <ethernet_output+0x64>)
 800aa46:	f240 1233 	movw	r2, #307	; 0x133
 800aa4a:	4908      	ldr	r1, [pc, #32]	; (800aa6c <ethernet_output+0x68>)
 800aa4c:	4808      	ldr	r0, [pc, #32]	; (800aa70 <ethernet_output+0x6c>)
 800aa4e:	f000 fdcb 	bl	800b5e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800aa52:	69a3      	ldr	r3, [r4, #24]
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800aa58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800aa5c:	4718      	bx	r3
}
 800aa5e:	f06f 0001 	mvn.w	r0, #1
 800aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa66:	bf00      	nop
 800aa68:	0800f3a5 	.word	0x0800f3a5
 800aa6c:	0800f3da 	.word	0x0800f3da
 800aa70:	0800c5ae 	.word	0x0800c5ae

0800aa74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800aa74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa76:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800aa78:	9100      	str	r1, [sp, #0]
 800aa7a:	2304      	movs	r3, #4
 800aa7c:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800aa7e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	9102      	str	r1, [sp, #8]
 800aa84:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800aa86:	f7f7 fd13 	bl	80024b0 <osMessageCreate>
 800aa8a:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800aa8c:	fab0 f080 	clz	r0, r0
 800aa90:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800aa92:	4240      	negs	r0, r0
 800aa94:	b004      	add	sp, #16
 800aa96:	bd10      	pop	{r4, pc}

0800aa98 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800aa98:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	6800      	ldr	r0, [r0, #0]
 800aa9e:	f7f7 fd1b 	bl	80024d8 <osMessagePut>
 800aaa2:	3000      	adds	r0, #0
 800aaa4:	bf18      	it	ne
 800aaa6:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800aaa8:	4240      	negs	r0, r0
 800aaaa:	bd08      	pop	{r3, pc}

0800aaac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800aaac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaae:	4617      	mov	r7, r2
 800aab0:	b085      	sub	sp, #20
 800aab2:	4606      	mov	r6, r0
 800aab4:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800aab6:	f7f7 fc24 	bl	8002302 <osKernelSysTick>
 800aaba:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800aabc:	b177      	cbz	r7, 800aadc <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800aabe:	463a      	mov	r2, r7
 800aac0:	6831      	ldr	r1, [r6, #0]
 800aac2:	a801      	add	r0, sp, #4
 800aac4:	f7f7 fd30 	bl	8002528 <osMessageGet>

    if(event.status == osEventMessage)
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	2b10      	cmp	r3, #16
 800aacc:	d10d      	bne.n	800aaea <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800aace:	9b02      	ldr	r3, [sp, #8]
 800aad0:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800aad2:	f7f7 fc16 	bl	8002302 <osKernelSysTick>
 800aad6:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800aad8:	b005      	add	sp, #20
 800aada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	6831      	ldr	r1, [r6, #0]
 800aae2:	a801      	add	r0, sp, #4
 800aae4:	f7f7 fd20 	bl	8002528 <osMessageGet>
 800aae8:	e7f1      	b.n	800aace <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800aaea:	f04f 30ff 	mov.w	r0, #4294967295
 800aaee:	e7f3      	b.n	800aad8 <sys_arch_mbox_fetch+0x2c>

0800aaf0 <sys_mbox_valid>:
 800aaf0:	6800      	ldr	r0, [r0, #0]
 800aaf2:	3000      	adds	r0, #0
 800aaf4:	bf18      	it	ne
 800aaf6:	2001      	movne	r0, #1
 800aaf8:	4770      	bx	lr
	...

0800aafc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800aafc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800aafe:	4803      	ldr	r0, [pc, #12]	; (800ab0c <sys_init+0x10>)
 800ab00:	f7f7 fc36 	bl	8002370 <osMutexCreate>
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <sys_init+0x14>)
 800ab06:	6018      	str	r0, [r3, #0]
 800ab08:	bd08      	pop	{r3, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0800f414 	.word	0x0800f414
 800ab10:	20027d4c 	.word	0x20027d4c

0800ab14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ab14:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800ab16:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ab18:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800ab1a:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800ab20:	f7f7 fc26 	bl	8002370 <osMutexCreate>
 800ab24:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800ab26:	fab0 f080 	clz	r0, r0
 800ab2a:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ab2c:	4240      	negs	r0, r0
 800ab2e:	b002      	add	sp, #8
 800ab30:	bd10      	pop	{r4, pc}

0800ab32 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800ab32:	f04f 31ff 	mov.w	r1, #4294967295
 800ab36:	6800      	ldr	r0, [r0, #0]
 800ab38:	f7f7 bc22 	b.w	8002380 <osMutexWait>

0800ab3c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800ab3c:	6800      	ldr	r0, [r0, #0]
 800ab3e:	f7f7 bcb5 	b.w	80024ac <osMutexRelease>

0800ab42 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ab42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab44:	b089      	sub	sp, #36	; 0x24
 800ab46:	4614      	mov	r4, r2
 800ab48:	4607      	mov	r7, r0
 800ab4a:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ab4c:	221c      	movs	r2, #28
 800ab4e:	2100      	movs	r1, #0
 800ab50:	a801      	add	r0, sp, #4
{
 800ab52:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ab54:	f000 fd40 	bl	800b5d8 <memset>
 800ab58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  return osThreadCreate(&os_thread_def, arg);
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ab5e:	9701      	str	r7, [sp, #4]
 800ab60:	9602      	str	r6, [sp, #8]
 800ab62:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab66:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800ab68:	f7f7 fbd2 	bl	8002310 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800ab6c:	b009      	add	sp, #36	; 0x24
 800ab6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab70 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ab70:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ab72:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <sys_arch_protect+0x14>)
 800ab74:	f04f 31ff 	mov.w	r1, #4294967295
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	f7f7 fc01 	bl	8002380 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800ab7e:	2001      	movs	r0, #1
 800ab80:	bd08      	pop	{r3, pc}
 800ab82:	bf00      	nop
 800ab84:	20027d4c 	.word	0x20027d4c

0800ab88 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800ab88:	4b01      	ldr	r3, [pc, #4]	; (800ab90 <sys_arch_unprotect+0x8>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	f7f7 bc8e 	b.w	80024ac <osMutexRelease>
 800ab90:	20027d4c 	.word	0x20027d4c

0800ab94 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ab94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ab98:	4a25      	ldr	r2, [pc, #148]	; (800ac30 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800ab9a:	f04f 0800 	mov.w	r8, #0
{
 800ab9e:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aba0:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800aba4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800aba6:	4647      	mov	r7, r8
 800aba8:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800abaa:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800abac:	b92c      	cbnz	r4, 800abba <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800abae:	4639      	mov	r1, r7
 800abb0:	481f      	ldr	r0, [pc, #124]	; (800ac30 <low_level_output+0x9c>)
 800abb2:	f7f5 fec9 	bl	8000948 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800abb6:	4620      	mov	r0, r4
 800abb8:	e004      	b.n	800abc4 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800abba:	682a      	ldr	r2, [r5, #0]
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	da11      	bge.n	800abe4 <low_level_output+0x50>
        errval = ERR_USE;
 800abc0:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	f241 0214 	movw	r2, #4116	; 0x1014
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	5899      	ldr	r1, [r3, r2]
 800abce:	0689      	lsls	r1, r1, #26
 800abd0:	d505      	bpl.n	800abde <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800abd2:	2120      	movs	r1, #32
 800abd4:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800abd6:	2100      	movs	r1, #0
 800abd8:	f241 0204 	movw	r2, #4100	; 0x1004
 800abdc:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800abde:	b003      	add	sp, #12
 800abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800abe4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800abe8:	4646      	mov	r6, r8
      payloadoffset = 0;
 800abea:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800abee:	eb06 0809 	add.w	r8, r6, r9
 800abf2:	1998      	adds	r0, r3, r6
 800abf4:	6861      	ldr	r1, [r4, #4]
 800abf6:	45d8      	cmp	r8, fp
 800abf8:	d808      	bhi.n	800ac0c <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800abfa:	464a      	mov	r2, r9
 800abfc:	4451      	add	r1, sl
 800abfe:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800ac00:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ac02:	f000 fcde 	bl	800b5c2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800ac06:	6824      	ldr	r4, [r4, #0]
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	e7cf      	b.n	800abac <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800ac0c:	ebab 0606 	sub.w	r6, fp, r6
 800ac10:	4451      	add	r1, sl
 800ac12:	4632      	mov	r2, r6
 800ac14:	f000 fcd5 	bl	800b5c2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800ac18:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dbcf      	blt.n	800abc0 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800ac20:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800ac22:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800ac24:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800ac26:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	e7df      	b.n	800abee <low_level_output+0x5a>
 800ac2e:	bf00      	nop
 800ac30:	20029620 	.word	0x20029620

0800ac34 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800ac34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ac3a:	4c3b      	ldr	r4, [pc, #236]	; (800ad28 <ethernetif_input+0xf4>)
 800ac3c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac40:	6820      	ldr	r0, [r4, #0]
 800ac42:	f7f7 fbe9 	bl	8002418 <osSemaphoreWait>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1f8      	bne.n	800ac3c <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800ac4a:	4d38      	ldr	r5, [pc, #224]	; (800ad2c <ethernetif_input+0xf8>)
    {
      do
      {   
        LOCK_TCPIP_CORE();
 800ac4c:	4838      	ldr	r0, [pc, #224]	; (800ad30 <ethernetif_input+0xfc>)
 800ac4e:	f7ff ff70 	bl	800ab32 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800ac52:	4628      	mov	r0, r5
 800ac54:	f7f5 feea 	bl	8000a2c <HAL_ETH_GetReceivedFrame_IT>
 800ac58:	4607      	mov	r7, r0
 800ac5a:	b130      	cbz	r0, 800ac6a <ethernetif_input+0x36>
    return NULL;
 800ac5c:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800ac5e:	4834      	ldr	r0, [pc, #208]	; (800ad30 <ethernetif_input+0xfc>)
 800ac60:	f7ff ff6c 	bl	800ab3c <sys_mutex_unlock>
      } while(p!=NULL);
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	d1f0      	bne.n	800ac4a <ethernetif_input+0x16>
 800ac68:	e7e7      	b.n	800ac3a <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ac6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800ac6c:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ac6e:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800ac70:	bb01      	cbnz	r1, 800acb4 <ethernetif_input+0x80>
  struct pbuf *p = NULL;
 800ac72:	2400      	movs	r4, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ac74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ac76:	2200      	movs	r2, #0
 800ac78:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800ac7a:	4282      	cmp	r2, r0
 800ac7c:	d14d      	bne.n	800ad1a <ethernetif_input+0xe6>
    heth.RxFrameInfos.SegCount =0;  
 800ac7e:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800ac80:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800ac84:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800ac86:	682b      	ldr	r3, [r5, #0]
 800ac88:	5899      	ldr	r1, [r3, r2]
 800ac8a:	0609      	lsls	r1, r1, #24
 800ac8c:	d505      	bpl.n	800ac9a <ethernetif_input+0x66>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ac8e:	2180      	movs	r1, #128	; 0x80
 800ac90:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800ac92:	f241 0208 	movw	r2, #4104	; 0x1008
 800ac96:	2100      	movs	r1, #0
 800ac98:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	d0de      	beq.n	800ac5c <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 800ac9e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800aca2:	4651      	mov	r1, sl
 800aca4:	4620      	mov	r0, r4
 800aca6:	4798      	blx	r3
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d0d8      	beq.n	800ac5e <ethernetif_input+0x2a>
            pbuf_free(p);
 800acac:	4620      	mov	r0, r4
 800acae:	f7fb fcef 	bl	8006690 <pbuf_free>
 800acb2:	e7d4      	b.n	800ac5e <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800acb4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800acb8:	f7fb fd52 	bl	8006760 <pbuf_alloc>
  if (p != NULL)
 800acbc:	4604      	mov	r4, r0
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0d7      	beq.n	800ac72 <ethernetif_input+0x3e>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800acc2:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800acc6:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800acc8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800accc:	463e      	mov	r6, r7
      payloadoffset = 0;
 800acce:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800acd2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800acd6:	18b7      	adds	r7, r6, r2
 800acd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800acdc:	429f      	cmp	r7, r3
 800acde:	9b01      	ldr	r3, [sp, #4]
 800ace0:	eb03 0106 	add.w	r1, r3, r6
 800ace4:	d808      	bhi.n	800acf8 <ethernetif_input+0xc4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800ace6:	4448      	add	r0, r9
 800ace8:	f000 fc6b 	bl	800b5c2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800acec:	f8d8 8000 	ldr.w	r8, [r8]
 800acf0:	f1b8 0f00 	cmp.w	r8, #0
 800acf4:	d1e8      	bne.n	800acc8 <ethernetif_input+0x94>
 800acf6:	e7bd      	b.n	800ac74 <ethernetif_input+0x40>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800acf8:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800acfc:	4448      	add	r0, r9
 800acfe:	3604      	adds	r6, #4
 800ad00:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800ad02:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ad04:	f000 fc5d 	bl	800b5c2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ad08:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800ad0c:	f2a7 52f4 	subw	r2, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800ad10:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800ad12:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	e7db      	b.n	800acd2 <ethernetif_input+0x9e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ad1a:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ad1c:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ad1e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800ad22:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	e7a8      	b.n	800ac7a <ethernetif_input+0x46>
 800ad28:	200243b8 	.word	0x200243b8
 800ad2c:	20029620 	.word	0x20029620
 800ad30:	20024620 	.word	0x20024620

0800ad34 <HAL_ETH_MspInit>:
{
 800ad34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad36:	b08d      	sub	sp, #52	; 0x34
 800ad38:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad3a:	2214      	movs	r2, #20
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	a807      	add	r0, sp, #28
 800ad40:	f000 fc4a 	bl	800b5d8 <memset>
  if(ethHandle->Instance==ETH)
 800ad44:	6822      	ldr	r2, [r4, #0]
 800ad46:	4b3d      	ldr	r3, [pc, #244]	; (800ae3c <HAL_ETH_MspInit+0x108>)
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d175      	bne.n	800ae38 <HAL_ETH_MspInit+0x104>
    __HAL_RCC_ETH_CLK_ENABLE();
 800ad4c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad50:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad52:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad54:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800ad56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad58:	a907      	add	r1, sp, #28
 800ad5a:	4839      	ldr	r0, [pc, #228]	; (800ae40 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad5c:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800ad5e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800ad62:	631a      	str	r2, [r3, #48]	; 0x30
 800ad64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad66:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800ad6a:	9200      	str	r2, [sp, #0]
 800ad6c:	9a00      	ldr	r2, [sp, #0]
 800ad6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad70:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ad74:	631a      	str	r2, [r3, #48]	; 0x30
 800ad76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad78:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800ad7c:	9201      	str	r2, [sp, #4]
 800ad7e:	9a01      	ldr	r2, [sp, #4]
 800ad80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad82:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ad86:	631a      	str	r2, [r3, #48]	; 0x30
 800ad88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800ad8e:	9202      	str	r2, [sp, #8]
 800ad90:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad94:	f042 0204 	orr.w	r2, r2, #4
 800ad98:	631a      	str	r2, [r3, #48]	; 0x30
 800ad9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad9c:	f002 0204 	and.w	r2, r2, #4
 800ada0:	9203      	str	r2, [sp, #12]
 800ada2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ada4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ada6:	f042 0201 	orr.w	r2, r2, #1
 800adaa:	631a      	str	r2, [r3, #48]	; 0x30
 800adac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adae:	f002 0201 	and.w	r2, r2, #1
 800adb2:	9204      	str	r2, [sp, #16]
 800adb4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800adb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adb8:	f042 0202 	orr.w	r2, r2, #2
 800adbc:	631a      	str	r2, [r3, #48]	; 0x30
 800adbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adc0:	f002 0202 	and.w	r2, r2, #2
 800adc4:	9205      	str	r2, [sp, #20]
 800adc6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800adc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adce:	631a      	str	r2, [r3, #48]	; 0x30
 800add0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add2:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800add4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800add8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adda:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800addc:	9306      	str	r3, [sp, #24]
 800adde:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ade0:	2332      	movs	r3, #50	; 0x32
 800ade2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ade4:	f7f6 f84a 	bl	8000e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 800ade8:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adea:	a907      	add	r1, sp, #28
 800adec:	4815      	ldr	r0, [pc, #84]	; (800ae44 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 800adee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adf0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adf4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adf6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adf8:	f7f6 f840 	bl	8000e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800adfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ae00:	a907      	add	r1, sp, #28
 800ae02:	4811      	ldr	r0, [pc, #68]	; (800ae48 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ae04:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae06:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae08:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae0a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae0c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ae0e:	f7f6 f835 	bl	8000e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ae12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ae16:	a907      	add	r1, sp, #28
 800ae18:	480c      	ldr	r0, [pc, #48]	; (800ae4c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ae1a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae1c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae1e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae20:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae22:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ae24:	f7f6 f82a 	bl	8000e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ae28:	203d      	movs	r0, #61	; 0x3d
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	2105      	movs	r1, #5
 800ae2e:	f7f5 fc39 	bl	80006a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ae32:	203d      	movs	r0, #61	; 0x3d
 800ae34:	f7f5 fc6e 	bl	8000714 <HAL_NVIC_EnableIRQ>
}
 800ae38:	b00d      	add	sp, #52	; 0x34
 800ae3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae3c:	40028000 	.word	0x40028000
 800ae40:	40020800 	.word	0x40020800
 800ae44:	40020000 	.word	0x40020000
 800ae48:	40020400 	.word	0x40020400
 800ae4c:	40021800 	.word	0x40021800

0800ae50 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800ae50:	4b01      	ldr	r3, [pc, #4]	; (800ae58 <HAL_ETH_RxCpltCallback+0x8>)
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	f7f7 bb06 	b.w	8002464 <osSemaphoreRelease>
 800ae58:	200243b8 	.word	0x200243b8

0800ae5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ae5e:	4604      	mov	r4, r0
{
 800ae60:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ae62:	b930      	cbnz	r0, 800ae72 <ethernetif_init+0x16>
 800ae64:	4b47      	ldr	r3, [pc, #284]	; (800af84 <ethernetif_init+0x128>)
 800ae66:	f240 2235 	movw	r2, #565	; 0x235
 800ae6a:	4947      	ldr	r1, [pc, #284]	; (800af88 <ethernetif_init+0x12c>)
 800ae6c:	4847      	ldr	r0, [pc, #284]	; (800af8c <ethernetif_init+0x130>)
 800ae6e:	f000 fbbb 	bl	800b5e8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ae72:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x80;
 800ae74:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 800ae76:	4d46      	ldr	r5, [pc, #280]	; (800af90 <ethernetif_init+0x134>)
  netif->name[0] = IFNAME0;
 800ae78:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800ae7c:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 800ae7e:	4a45      	ldr	r2, [pc, #276]	; (800af94 <ethernetif_init+0x138>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ae80:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 800ae82:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ae86:	4b44      	ldr	r3, [pc, #272]	; (800af98 <ethernetif_init+0x13c>)
  MACAddr[1] = 0x80;
 800ae88:	f88d 1005 	strb.w	r1, [sp, #5]
  MACAddr[2] = 0xE1;
 800ae8c:	21e1      	movs	r1, #225	; 0xe1
  netif->output = etharp_output;
 800ae8e:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ae90:	4b42      	ldr	r3, [pc, #264]	; (800af9c <ethernetif_init+0x140>)
  heth.Instance = ETH;
 800ae92:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ae94:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800ae96:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800ae98:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800ae9a:	f88d 1006 	strb.w	r1, [sp, #6]
  heth.Init.MACAddr = &MACAddr[0];
 800ae9e:	a901      	add	r1, sp, #4
  uint32_t regvalue = 0;
 800aea0:	9300      	str	r3, [sp, #0]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800aea2:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800aea4:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[3] = 0x00;
 800aea8:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 800aeac:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 800aeb0:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800aeb4:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800aeb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800aeba:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 800aebc:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800aebe:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800aec0:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800aec2:	f7f5 fea3 	bl	8000c0c <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800aec6:	b928      	cbnz	r0, 800aed4 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800aec8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800aecc:	f043 0304 	orr.w	r3, r3, #4
 800aed0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800aed4:	2304      	movs	r3, #4
 800aed6:	4a32      	ldr	r2, [pc, #200]	; (800afa0 <ethernetif_init+0x144>)
 800aed8:	4932      	ldr	r1, [pc, #200]	; (800afa4 <ethernetif_init+0x148>)
  osSemaphoreDef(SEM);
 800aeda:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800aedc:	482c      	ldr	r0, [pc, #176]	; (800af90 <ethernetif_init+0x134>)
 800aede:	f7f5 fcb9 	bl	8000854 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800aee2:	2304      	movs	r3, #4
 800aee4:	4a30      	ldr	r2, [pc, #192]	; (800afa8 <ethernetif_init+0x14c>)
 800aee6:	4931      	ldr	r1, [pc, #196]	; (800afac <ethernetif_init+0x150>)
 800aee8:	4829      	ldr	r0, [pc, #164]	; (800af90 <ethernetif_init+0x134>)
 800aeea:	f7f5 fcf0 	bl	80008ce <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aeee:	2306      	movs	r3, #6
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800aef0:	2101      	movs	r1, #1
 800aef2:	a803      	add	r0, sp, #12
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aef4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aef8:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800aefa:	ad05      	add	r5, sp, #20
 800aefc:	4e2c      	ldr	r6, [pc, #176]	; (800afb0 <ethernetif_init+0x154>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800af04:	785a      	ldrb	r2, [r3, #1]
 800af06:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800af0a:	789a      	ldrb	r2, [r3, #2]
 800af0c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800af10:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 800af12:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800af14:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800af18:	791a      	ldrb	r2, [r3, #4]
 800af1a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800af1e:	795b      	ldrb	r3, [r3, #5]
  osSemaphoreDef(SEM);
 800af20:	9704      	str	r7, [sp, #16]
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800af22:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  netif->mtu = 1500;
 800af26:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800af2a:	8423      	strh	r3, [r4, #32]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800af2c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800af30:	f043 030a 	orr.w	r3, r3, #10
 800af34:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800af38:	f7f7 fa48 	bl	80023cc <osSemaphoreCreate>
 800af3c:	4b1d      	ldr	r3, [pc, #116]	; (800afb4 <ethernetif_init+0x158>)
 800af3e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800af40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800af42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af44:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800af48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800af4c:	4621      	mov	r1, r4
 800af4e:	a805      	add	r0, sp, #20
 800af50:	f7f7 f9de 	bl	8002310 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800af54:	480e      	ldr	r0, [pc, #56]	; (800af90 <ethernetif_init+0x134>)
 800af56:	f7f5 ff53 	bl	8000e00 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800af5a:	466a      	mov	r2, sp
 800af5c:	211d      	movs	r1, #29
 800af5e:	480c      	ldr	r0, [pc, #48]	; (800af90 <ethernetif_init+0x134>)
 800af60:	f7f5 fde3 	bl	8000b2a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800af64:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800af66:	211d      	movs	r1, #29
 800af68:	4809      	ldr	r0, [pc, #36]	; (800af90 <ethernetif_init+0x134>)
  regvalue |= (PHY_ISFR_INT4);
 800af6a:	f042 020b 	orr.w	r2, r2, #11
 800af6e:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800af70:	f7f5 fe15 	bl	8000b9e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800af74:	466a      	mov	r2, sp
 800af76:	211d      	movs	r1, #29
 800af78:	4805      	ldr	r0, [pc, #20]	; (800af90 <ethernetif_init+0x134>)
 800af7a:	f7f5 fdd6 	bl	8000b2a <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800af7e:	4638      	mov	r0, r7
 800af80:	b00d      	add	sp, #52	; 0x34
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	0800f41c 	.word	0x0800f41c
 800af88:	0800d64a 	.word	0x0800d64a
 800af8c:	0800c5ae 	.word	0x0800c5ae
 800af90:	20029620 	.word	0x20029620
 800af94:	40028000 	.word	0x40028000
 800af98:	08004e51 	.word	0x08004e51
 800af9c:	0800ab95 	.word	0x0800ab95
 800afa0:	20029668 	.word	0x20029668
 800afa4:	20027d50 	.word	0x20027d50
 800afa8:	20027dd0 	.word	0x20027dd0
 800afac:	200295a0 	.word	0x200295a0
 800afb0:	0800c4b4 	.word	0x0800c4b4
 800afb4:	200243b8 	.word	0x200243b8

0800afb8 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800afb8:	f7f5 bb4a 	b.w	8000650 <HAL_GetTick>

0800afbc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800afbc:	4b03      	ldr	r3, [pc, #12]	; (800afcc <vApplicationGetIdleTaskMemory+0x10>)
 800afbe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800afc0:	4b03      	ldr	r3, [pc, #12]	; (800afd0 <vApplicationGetIdleTaskMemory+0x14>)
 800afc2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800afc4:	2380      	movs	r3, #128	; 0x80
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	200245bc 	.word	0x200245bc
 800afd0:	200243bc 	.word	0x200243bc

0800afd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */

	  IP_ADDRESS[0] = 169;
	  IP_ADDRESS[1] = 254;
	  IP_ADDRESS[2] = 215;
	  IP_ADDRESS[3] = 123;
 800afd6:	207b      	movs	r0, #123	; 0x7b
	  IP_ADDRESS[0] = 169;
 800afd8:	4f2d      	ldr	r7, [pc, #180]	; (800b090 <MX_LWIP_Init+0xbc>)
	  NETMASK_ADDRESS[0] = 255;
	  NETMASK_ADDRESS[1] = 255;
	  NETMASK_ADDRESS[2] = 0;
	  NETMASK_ADDRESS[3] = 0;
	  GATEWAY_ADDRESS[0] = 169;
 800afda:	4d2e      	ldr	r5, [pc, #184]	; (800b094 <MX_LWIP_Init+0xc0>)
	  IP_ADDRESS[2] = 215;
 800afdc:	23d7      	movs	r3, #215	; 0xd7
	  NETMASK_ADDRESS[0] = 255;
 800afde:	4e2e      	ldr	r6, [pc, #184]	; (800b098 <MX_LWIP_Init+0xc4>)
	  NETMASK_ADDRESS[2] = 0;
 800afe0:	2400      	movs	r4, #0
	  IP_ADDRESS[0] = 169;
 800afe2:	21a9      	movs	r1, #169	; 0xa9
	  IP_ADDRESS[3] = 123;
 800afe4:	70f8      	strb	r0, [r7, #3]
	  NETMASK_ADDRESS[0] = 255;
 800afe6:	20ff      	movs	r0, #255	; 0xff
	  IP_ADDRESS[1] = 254;
 800afe8:	22fe      	movs	r2, #254	; 0xfe
	  GATEWAY_ADDRESS[1] = 254;
	  GATEWAY_ADDRESS[2] = 215;
 800afea:	70ab      	strb	r3, [r5, #2]
{
 800afec:	b085      	sub	sp, #20
	  IP_ADDRESS[2] = 215;
 800afee:	70bb      	strb	r3, [r7, #2]
	  GATEWAY_ADDRESS[3] = 34;
 800aff0:	2322      	movs	r3, #34	; 0x22
	  GATEWAY_ADDRESS[0] = 169;
 800aff2:	7029      	strb	r1, [r5, #0]
	  IP_ADDRESS[0] = 169;
 800aff4:	7039      	strb	r1, [r7, #0]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800aff6:	4621      	mov	r1, r4
	  NETMASK_ADDRESS[0] = 255;
 800aff8:	7030      	strb	r0, [r6, #0]
	  NETMASK_ADDRESS[1] = 255;
 800affa:	7070      	strb	r0, [r6, #1]
  tcpip_init( NULL, NULL );
 800affc:	4620      	mov	r0, r4
	  GATEWAY_ADDRESS[1] = 254;
 800affe:	706a      	strb	r2, [r5, #1]
	  GATEWAY_ADDRESS[3] = 34;
 800b000:	70eb      	strb	r3, [r5, #3]
	  IP_ADDRESS[1] = 254;
 800b002:	707a      	strb	r2, [r7, #1]
	  NETMASK_ADDRESS[2] = 0;
 800b004:	70b4      	strb	r4, [r6, #2]
	  NETMASK_ADDRESS[3] = 0;
 800b006:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 800b008:	f7f9 f88a 	bl	8004120 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b00c:	787b      	ldrb	r3, [r7, #1]
 800b00e:	783a      	ldrb	r2, [r7, #0]
 800b010:	041b      	lsls	r3, r3, #16
 800b012:	4922      	ldr	r1, [pc, #136]	; (800b09c <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b014:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b016:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b01a:	78fa      	ldrb	r2, [r7, #3]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b01c:	0400      	lsls	r0, r0, #16
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b01e:	4313      	orrs	r3, r2
 800b020:	78ba      	ldrb	r2, [r7, #2]
 800b022:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b026:	7832      	ldrb	r2, [r6, #0]
 800b028:	ba1b      	rev	r3, r3
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b02a:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b02c:	7873      	ldrb	r3, [r6, #1]
 800b02e:	041b      	lsls	r3, r3, #16
 800b030:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b034:	78f2      	ldrb	r2, [r6, #3]
 800b036:	4313      	orrs	r3, r2
 800b038:	78b2      	ldrb	r2, [r6, #2]
 800b03a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b03e:	4a18      	ldr	r2, [pc, #96]	; (800b0a0 <MX_LWIP_Init+0xcc>)
 800b040:	ba1b      	rev	r3, r3
 800b042:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b044:	782b      	ldrb	r3, [r5, #0]
 800b046:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b04a:	78eb      	ldrb	r3, [r5, #3]
 800b04c:	4318      	orrs	r0, r3
 800b04e:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b050:	4d14      	ldr	r5, [pc, #80]	; (800b0a4 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b052:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800b056:	4b14      	ldr	r3, [pc, #80]	; (800b0a8 <MX_LWIP_Init+0xd4>)
 800b058:	ba00      	rev	r0, r0
 800b05a:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b05c:	4813      	ldr	r0, [pc, #76]	; (800b0ac <MX_LWIP_Init+0xd8>)
 800b05e:	9400      	str	r4, [sp, #0]
 800b060:	9002      	str	r0, [sp, #8]
 800b062:	4813      	ldr	r0, [pc, #76]	; (800b0b0 <MX_LWIP_Init+0xdc>)
 800b064:	9001      	str	r0, [sp, #4]
 800b066:	4628      	mov	r0, r5
 800b068:	f7fb f970 	bl	800634c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7fb fa03 	bl	8006478 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b072:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b076:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800b078:	075b      	lsls	r3, r3, #29
 800b07a:	d504      	bpl.n	800b086 <MX_LWIP_Init+0xb2>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b07c:	b005      	add	sp, #20
 800b07e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800b082:	f7fb b9ff 	b.w	8006484 <netif_set_up>
}
 800b086:	b005      	add	sp, #20
 800b088:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800b08c:	f7fb ba14 	b.w	80064b8 <netif_set_down>
 800b090:	2002ae74 	.word	0x2002ae74
 800b094:	2002ae38 	.word	0x2002ae38
 800b098:	2002ae70 	.word	0x2002ae70
 800b09c:	2002ae6c 	.word	0x2002ae6c
 800b0a0:	2002ae78 	.word	0x2002ae78
 800b0a4:	2002ae3c 	.word	0x2002ae3c
 800b0a8:	2002ae7c 	.word	0x2002ae7c
 800b0ac:	080040ad 	.word	0x080040ad
 800b0b0:	0800ae5d 	.word	0x0800ae5d

0800b0b4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800b0b4:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 800b0b6:	f7ff ff8d 	bl	800afd4 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
  httpd_init();
 800b0ba:	f7f9 fb3b 	bl	8004734 <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f7f7 f94e 	bl	8002360 <osDelay>
 800b0c4:	e7fb      	b.n	800b0be <StartDefaultTask+0xa>
	...

0800b0c8 <SystemClock_Config>:
{
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b0cc:	2234      	movs	r2, #52	; 0x34
 800b0ce:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b0d0:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b0d2:	a807      	add	r0, sp, #28
 800b0d4:	f000 fa80 	bl	800b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b0d8:	2214      	movs	r2, #20
 800b0da:	2100      	movs	r1, #0
 800b0dc:	a802      	add	r0, sp, #8
 800b0de:	f000 fa7b 	bl	800b5d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	2290      	movs	r2, #144	; 0x90
 800b0e6:	a814      	add	r0, sp, #80	; 0x50
 800b0e8:	f000 fa76 	bl	800b5d8 <memset>
  HAL_PWR_EnableBkUpAccess();
 800b0ec:	f7f5 ffb6 	bl	800105c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0f0:	4b1f      	ldr	r3, [pc, #124]	; (800b170 <SystemClock_Config+0xa8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b0f2:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b0fa:	641a      	str	r2, [r3, #64]	; 0x40
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b106:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <SystemClock_Config+0xac>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800b10e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 200;
 800b110:	22c8      	movs	r2, #200	; 0xc8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b112:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 200;
 800b114:	9210      	str	r2, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b116:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b11a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b11c:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b122:	2301      	movs	r3, #1
 800b124:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800b126:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800b12a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b12c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b130:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b132:	2304      	movs	r3, #4
 800b134:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b136:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b138:	f7f5 ffd0 	bl	80010dc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800b13c:	f7f5 ff96 	bl	800106c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b140:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b142:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b144:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b146:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b148:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800b14c:	2106      	movs	r1, #6
 800b14e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b150:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b156:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b158:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800b15a:	f7f6 f9b1 	bl	80014c0 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b15e:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b162:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b164:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b166:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b168:	f7f6 fa8e 	bl	8001688 <HAL_RCCEx_PeriphCLKConfig>
}
 800b16c:	b038      	add	sp, #224	; 0xe0
 800b16e:	bd10      	pop	{r4, pc}
 800b170:	40023800 	.word	0x40023800
 800b174:	40007000 	.word	0x40007000

0800b178 <main>:
{
 800b178:	b500      	push	{lr}
 800b17a:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17c:	2400      	movs	r4, #0
  HAL_Init();
 800b17e:	f7f5 fa4f 	bl	8000620 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b182:	2601      	movs	r6, #1
  SystemClock_Config();
 800b184:	f7ff ffa0 	bl	800b0c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b188:	2214      	movs	r2, #20
 800b18a:	2100      	movs	r1, #0
 800b18c:	a807      	add	r0, sp, #28
 800b18e:	f000 fa23 	bl	800b5d8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b192:	4b55      	ldr	r3, [pc, #340]	; (800b2e8 <main+0x170>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b194:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800b198:	4854      	ldr	r0, [pc, #336]	; (800b2ec <main+0x174>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b19a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b19c:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b19e:	f042 0204 	orr.w	r2, r2, #4
 800b1a2:	631a      	str	r2, [r3, #48]	; 0x30
 800b1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1a6:	f002 0204 	and.w	r2, r2, #4
 800b1aa:	9201      	str	r2, [sp, #4]
 800b1ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b1ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b1b4:	631a      	str	r2, [r3, #48]	; 0x30
 800b1b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1b8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b1bc:	9202      	str	r2, [sp, #8]
 800b1be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1c2:	f042 0201 	orr.w	r2, r2, #1
 800b1c6:	631a      	str	r2, [r3, #48]	; 0x30
 800b1c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1ca:	f002 0201 	and.w	r2, r2, #1
 800b1ce:	9203      	str	r2, [sp, #12]
 800b1d0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b1d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1d4:	f042 0202 	orr.w	r2, r2, #2
 800b1d8:	631a      	str	r2, [r3, #48]	; 0x30
 800b1da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1dc:	f002 0202 	and.w	r2, r2, #2
 800b1e0:	9204      	str	r2, [sp, #16]
 800b1e2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b1e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1e6:	f042 0208 	orr.w	r2, r2, #8
 800b1ea:	631a      	str	r2, [r3, #48]	; 0x30
 800b1ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1ee:	f002 0208 	and.w	r2, r2, #8
 800b1f2:	9205      	str	r2, [sp, #20]
 800b1f4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1fc:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b1fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	9306      	str	r3, [sp, #24]
 800b208:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b20a:	f7f5 ff21 	bl	8001050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800b20e:	2200      	movs	r2, #0
 800b210:	2140      	movs	r1, #64	; 0x40
 800b212:	4837      	ldr	r0, [pc, #220]	; (800b2f0 <main+0x178>)
 800b214:	f7f5 ff1c 	bl	8001050 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800b218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b21c:	a907      	add	r1, sp, #28
 800b21e:	4835      	ldr	r0, [pc, #212]	; (800b2f4 <main+0x17c>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800b220:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b222:	4b35      	ldr	r3, [pc, #212]	; (800b2f8 <main+0x180>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b224:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b226:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b228:	f7f5 fe28 	bl	8000e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800b22c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b230:	a907      	add	r1, sp, #28
 800b232:	482e      	ldr	r0, [pc, #184]	; (800b2ec <main+0x174>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800b234:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b236:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b238:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b23a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b23c:	f7f5 fe1e 	bl	8000e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b244:	a907      	add	r1, sp, #28
 800b246:	482d      	ldr	r0, [pc, #180]	; (800b2fc <main+0x184>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b248:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b24a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b24c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b24e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b250:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b252:	f7f5 fe13 	bl	8000e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b256:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b258:	a907      	add	r1, sp, #28
 800b25a:	4825      	ldr	r0, [pc, #148]	; (800b2f0 <main+0x178>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b25c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b25e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b260:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b262:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b264:	f7f5 fe0a 	bl	8000e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b268:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b26a:	a907      	add	r1, sp, #28
 800b26c:	4820      	ldr	r0, [pc, #128]	; (800b2f0 <main+0x178>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b26e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b270:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b272:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b274:	f7f5 fe02 	bl	8000e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b278:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b27c:	a907      	add	r1, sp, #28
 800b27e:	4820      	ldr	r0, [pc, #128]	; (800b300 <main+0x188>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b280:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b282:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b284:	9508      	str	r5, [sp, #32]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b286:	ad07      	add	r5, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b288:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b28a:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b28e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b290:	f7f5 fdf4 	bl	8000e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b294:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b298:	a907      	add	r1, sp, #28
 800b29a:	4819      	ldr	r0, [pc, #100]	; (800b300 <main+0x188>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b29c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b29e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2a0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b2a2:	f7f5 fdeb 	bl	8000e7c <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800b2a6:	4817      	ldr	r0, [pc, #92]	; (800b304 <main+0x18c>)
  huart3.Init.BaudRate = 115200;
 800b2a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b2ac:	4a16      	ldr	r2, [pc, #88]	; (800b308 <main+0x190>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b2ae:	4e17      	ldr	r6, [pc, #92]	; (800b30c <main+0x194>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b2b0:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b2b2:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b2b4:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b2b6:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b2b8:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b2ba:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b2bc:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800b2be:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b2c2:	230c      	movs	r3, #12
 800b2c4:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b2c6:	f7f6 ffe9 	bl	800229c <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b2ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b2cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b2ce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b2d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	a807      	add	r0, sp, #28
 800b2da:	f7f7 f819 	bl	8002310 <osThreadCreate>
 800b2de:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <main+0x198>)
 800b2e0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800b2e2:	f7f7 f809 	bl	80022f8 <osKernelStart>
 800b2e6:	e7fe      	b.n	800b2e6 <main+0x16e>
 800b2e8:	40023800 	.word	0x40023800
 800b2ec:	40020400 	.word	0x40020400
 800b2f0:	40021800 	.word	0x40021800
 800b2f4:	40020800 	.word	0x40020800
 800b2f8:	10110000 	.word	0x10110000
 800b2fc:	40020c00 	.word	0x40020c00
 800b300:	40020000 	.word	0x40020000
 800b304:	2002ae84 	.word	0x2002ae84
 800b308:	40004800 	.word	0x40004800
 800b30c:	0800c4d0 	.word	0x0800c4d0
 800b310:	2002ae80 	.word	0x2002ae80

0800b314 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800b314:	6803      	ldr	r3, [r0, #0]
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31a:	d101      	bne.n	800b320 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800b31c:	f7f5 b98c 	b.w	8000638 <HAL_IncTick>
 800b320:	4770      	bx	lr
	...

0800b324 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <HAL_MspInit+0x3c>)
{
 800b326:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b32a:	210f      	movs	r1, #15
 800b32c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800b330:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b334:	641a      	str	r2, [r3, #64]	; 0x40
 800b336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b338:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800b33c:	9200      	str	r2, [sp, #0]
 800b33e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b346:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b348:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b354:	f7f5 f9a6 	bl	80006a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b358:	b003      	add	sp, #12
 800b35a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b35e:	bf00      	nop
 800b360:	40023800 	.word	0x40023800

0800b364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b364:	b510      	push	{r4, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b36a:	2214      	movs	r2, #20
 800b36c:	2100      	movs	r1, #0
 800b36e:	a803      	add	r0, sp, #12
 800b370:	f000 f932 	bl	800b5d8 <memset>
  if(huart->Instance==USART3)
 800b374:	6822      	ldr	r2, [r4, #0]
 800b376:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <HAL_UART_MspInit+0x60>)
 800b378:	429a      	cmp	r2, r3
 800b37a:	d120      	bne.n	800b3be <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b37c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b380:	a903      	add	r1, sp, #12
 800b382:	4811      	ldr	r0, [pc, #68]	; (800b3c8 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800b384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b386:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b38a:	641a      	str	r2, [r3, #64]	; 0x40
 800b38c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b38e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800b392:	9201      	str	r2, [sp, #4]
 800b394:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b398:	f042 0208 	orr.w	r2, r2, #8
 800b39c:	631a      	str	r2, [r3, #48]	; 0x30
 800b39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	9302      	str	r3, [sp, #8]
 800b3a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b3a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b3ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b3b6:	2307      	movs	r3, #7
 800b3b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b3ba:	f7f5 fd5f 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b3be:	b008      	add	sp, #32
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	bf00      	nop
 800b3c4:	40004800 	.word	0x40004800
 800b3c8:	40020c00 	.word	0x40020c00

0800b3cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b3cc:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800b3ce:	4601      	mov	r1, r0
{
 800b3d0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	201c      	movs	r0, #28
 800b3d6:	f7f5 f965 	bl	80006a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800b3da:	201c      	movs	r0, #28
 800b3dc:	f7f5 f99a 	bl	8000714 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800b3e0:	4b15      	ldr	r3, [pc, #84]	; (800b438 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b3e2:	a901      	add	r1, sp, #4
 800b3e4:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 800b3e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800b3e8:	4c14      	ldr	r4, [pc, #80]	; (800b43c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800b3ea:	f042 0201 	orr.w	r2, r2, #1
 800b3ee:	641a      	str	r2, [r3, #64]	; 0x40
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	9302      	str	r3, [sp, #8]
 800b3f8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b3fa:	f7f6 f927 	bl	800164c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b3fe:	f7f6 f905 	bl	800160c <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800b402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b406:	0040      	lsls	r0, r0, #1
  htim2.Instance = TIM2;
 800b408:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800b40a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b40e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b410:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <HAL_InitTick+0x74>)
 800b412:	fbb0 f0f3 	udiv	r0, r0, r3
 800b416:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 800b418:	2300      	movs	r3, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 800b41a:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800b41c:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 800b41e:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b420:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800b422:	f7f6 fd11 	bl	8001e48 <HAL_TIM_Base_Init>
 800b426:	b920      	cbnz	r0, 800b432 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800b428:	4620      	mov	r0, r4
 800b42a:	f7f6 fbdd 	bl	8001be8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800b42e:	b008      	add	sp, #32
 800b430:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800b432:	2001      	movs	r0, #1
 800b434:	e7fb      	b.n	800b42e <HAL_InitTick+0x62>
 800b436:	bf00      	nop
 800b438:	40023800 	.word	0x40023800
 800b43c:	2002af04 	.word	0x2002af04
 800b440:	000f4240 	.word	0x000f4240

0800b444 <NMI_Handler>:
 800b444:	4770      	bx	lr

0800b446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b446:	e7fe      	b.n	800b446 <HardFault_Handler>

0800b448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b448:	e7fe      	b.n	800b448 <MemManage_Handler>

0800b44a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b44a:	e7fe      	b.n	800b44a <BusFault_Handler>

0800b44c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b44c:	e7fe      	b.n	800b44c <UsageFault_Handler>

0800b44e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b44e:	4770      	bx	lr

0800b450 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b450:	4801      	ldr	r0, [pc, #4]	; (800b458 <TIM2_IRQHandler+0x8>)
 800b452:	f7f6 bbe3 	b.w	8001c1c <HAL_TIM_IRQHandler>
 800b456:	bf00      	nop
 800b458:	2002af04 	.word	0x2002af04

0800b45c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b45c:	4801      	ldr	r0, [pc, #4]	; (800b464 <ETH_IRQHandler+0x8>)
 800b45e:	f7f5 bb2c 	b.w	8000aba <HAL_ETH_IRQHandler>
 800b462:	bf00      	nop
 800b464:	20029620 	.word	0x20029620

0800b468 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	460e      	mov	r6, r1
 800b46c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b46e:	460c      	mov	r4, r1
 800b470:	1ba3      	subs	r3, r4, r6
 800b472:	429d      	cmp	r5, r3
 800b474:	dc01      	bgt.n	800b47a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800b476:	4628      	mov	r0, r5
 800b478:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800b47a:	f3af 8000 	nop.w
 800b47e:	f804 0b01 	strb.w	r0, [r4], #1
 800b482:	e7f5      	b.n	800b470 <_read+0x8>

0800b484 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	460e      	mov	r6, r1
 800b488:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b48a:	460c      	mov	r4, r1
 800b48c:	1ba3      	subs	r3, r4, r6
 800b48e:	429d      	cmp	r5, r3
 800b490:	dc01      	bgt.n	800b496 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800b492:	4628      	mov	r0, r5
 800b494:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800b496:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b49a:	f3af 8000 	nop.w
 800b49e:	e7f5      	b.n	800b48c <_write+0x8>

0800b4a0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b4a0:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <_sbrk+0x28>)
{
 800b4a2:	4602      	mov	r2, r0
	if (heap_end == 0)
 800b4a4:	6819      	ldr	r1, [r3, #0]
 800b4a6:	b909      	cbnz	r1, 800b4ac <_sbrk+0xc>
		heap_end = &end;
 800b4a8:	4908      	ldr	r1, [pc, #32]	; (800b4cc <_sbrk+0x2c>)
 800b4aa:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800b4ac:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800b4ae:	4669      	mov	r1, sp
 800b4b0:	4402      	add	r2, r0
 800b4b2:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b4b4:	bf83      	ittte	hi
 800b4b6:	220c      	movhi	r2, #12
 800b4b8:	4b05      	ldrhi	r3, [pc, #20]	; (800b4d0 <_sbrk+0x30>)
		return (caddr_t) -1;
 800b4ba:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800b4be:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800b4c0:	bf88      	it	hi
 800b4c2:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20024610 	.word	0x20024610
 800b4cc:	2002af44 	.word	0x2002af44
 800b4d0:	20027d48 	.word	0x20027d48

0800b4d4 <_close>:

int _close(int file)
{
	return -1;
}
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	4770      	bx	lr

0800b4da <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800b4da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800b4de:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800b4e0:	604b      	str	r3, [r1, #4]
}
 800b4e2:	4770      	bx	lr

0800b4e4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800b4e4:	2001      	movs	r0, #1
 800b4e6:	4770      	bx	lr

0800b4e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	4770      	bx	lr

0800b4ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b4ec:	4b05      	ldr	r3, [pc, #20]	; (800b504 <SystemInit+0x18>)
 800b4ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b4f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b4fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b4fe:	609a      	str	r2, [r3, #8]
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	e000ed00 	.word	0xe000ed00

0800b508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b508:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b50c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b50e:	e003      	b.n	800b518 <LoopCopyDataInit>

0800b510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b510:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b516:	3104      	adds	r1, #4

0800b518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b518:	480b      	ldr	r0, [pc, #44]	; (800b548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b51a:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b51c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b51e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b520:	d3f6      	bcc.n	800b510 <CopyDataInit>
  ldr  r2, =_sbss
 800b522:	4a0b      	ldr	r2, [pc, #44]	; (800b550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b524:	e002      	b.n	800b52c <LoopFillZerobss>

0800b526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b528:	f842 3b04 	str.w	r3, [r2], #4

0800b52c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b52c:	4b09      	ldr	r3, [pc, #36]	; (800b554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b52e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b530:	d3f9      	bcc.n	800b526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b532:	f7ff ffdb 	bl	800b4ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b536:	f000 f811 	bl	800b55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b53a:	f7ff fe1d 	bl	800b178 <main>
  bx  lr    
 800b53e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b540:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b544:	0800f504 	.word	0x0800f504
  ldr  r0, =_sdata
 800b548:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 800b54c:	2002007c 	.word	0x2002007c
  ldr  r2, =_sbss
 800b550:	2002007c 	.word	0x2002007c
  ldr  r3, = _ebss
 800b554:	2002af44 	.word	0x2002af44

0800b558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b558:	e7fe      	b.n	800b558 <ADC_IRQHandler>
	...

0800b55c <__libc_init_array>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4e0d      	ldr	r6, [pc, #52]	; (800b594 <__libc_init_array+0x38>)
 800b560:	4c0d      	ldr	r4, [pc, #52]	; (800b598 <__libc_init_array+0x3c>)
 800b562:	1ba4      	subs	r4, r4, r6
 800b564:	10a4      	asrs	r4, r4, #2
 800b566:	2500      	movs	r5, #0
 800b568:	42a5      	cmp	r5, r4
 800b56a:	d109      	bne.n	800b580 <__libc_init_array+0x24>
 800b56c:	4e0b      	ldr	r6, [pc, #44]	; (800b59c <__libc_init_array+0x40>)
 800b56e:	4c0c      	ldr	r4, [pc, #48]	; (800b5a0 <__libc_init_array+0x44>)
 800b570:	f000 ff94 	bl	800c49c <_init>
 800b574:	1ba4      	subs	r4, r4, r6
 800b576:	10a4      	asrs	r4, r4, #2
 800b578:	2500      	movs	r5, #0
 800b57a:	42a5      	cmp	r5, r4
 800b57c:	d105      	bne.n	800b58a <__libc_init_array+0x2e>
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b584:	4798      	blx	r3
 800b586:	3501      	adds	r5, #1
 800b588:	e7ee      	b.n	800b568 <__libc_init_array+0xc>
 800b58a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b58e:	4798      	blx	r3
 800b590:	3501      	adds	r5, #1
 800b592:	e7f2      	b.n	800b57a <__libc_init_array+0x1e>
 800b594:	0800f4fc 	.word	0x0800f4fc
 800b598:	0800f4fc 	.word	0x0800f4fc
 800b59c:	0800f4fc 	.word	0x0800f4fc
 800b5a0:	0800f500 	.word	0x0800f500

0800b5a4 <memcmp>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	3901      	subs	r1, #1
 800b5a8:	4402      	add	r2, r0
 800b5aa:	4290      	cmp	r0, r2
 800b5ac:	d101      	bne.n	800b5b2 <memcmp+0xe>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b5b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	d0f5      	beq.n	800b5aa <memcmp+0x6>
 800b5be:	1b18      	subs	r0, r3, r4
 800b5c0:	bd10      	pop	{r4, pc}

0800b5c2 <memcpy>:
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	1e43      	subs	r3, r0, #1
 800b5c6:	440a      	add	r2, r1
 800b5c8:	4291      	cmp	r1, r2
 800b5ca:	d100      	bne.n	800b5ce <memcpy+0xc>
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d6:	e7f7      	b.n	800b5c8 <memcpy+0x6>

0800b5d8 <memset>:
 800b5d8:	4402      	add	r2, r0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d100      	bne.n	800b5e2 <memset+0xa>
 800b5e0:	4770      	bx	lr
 800b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e6:	e7f9      	b.n	800b5dc <memset+0x4>

0800b5e8 <iprintf>:
 800b5e8:	b40f      	push	{r0, r1, r2, r3}
 800b5ea:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <iprintf+0x2c>)
 800b5ec:	b513      	push	{r0, r1, r4, lr}
 800b5ee:	681c      	ldr	r4, [r3, #0]
 800b5f0:	b124      	cbz	r4, 800b5fc <iprintf+0x14>
 800b5f2:	69a3      	ldr	r3, [r4, #24]
 800b5f4:	b913      	cbnz	r3, 800b5fc <iprintf+0x14>
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 f8a8 	bl	800b74c <__sinit>
 800b5fc:	ab05      	add	r3, sp, #20
 800b5fe:	9a04      	ldr	r2, [sp, #16]
 800b600:	68a1      	ldr	r1, [r4, #8]
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	4620      	mov	r0, r4
 800b606:	f000 fa09 	bl	800ba1c <_vfiprintf_r>
 800b60a:	b002      	add	sp, #8
 800b60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b610:	b004      	add	sp, #16
 800b612:	4770      	bx	lr
 800b614:	20020018 	.word	0x20020018

0800b618 <rand>:
 800b618:	4b19      	ldr	r3, [pc, #100]	; (800b680 <rand+0x68>)
 800b61a:	b510      	push	{r4, lr}
 800b61c:	681c      	ldr	r4, [r3, #0]
 800b61e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b620:	b9d3      	cbnz	r3, 800b658 <rand+0x40>
 800b622:	2018      	movs	r0, #24
 800b624:	f000 f91c 	bl	800b860 <malloc>
 800b628:	f243 330e 	movw	r3, #13070	; 0x330e
 800b62c:	63a0      	str	r0, [r4, #56]	; 0x38
 800b62e:	8003      	strh	r3, [r0, #0]
 800b630:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800b634:	8043      	strh	r3, [r0, #2]
 800b636:	f241 2334 	movw	r3, #4660	; 0x1234
 800b63a:	8083      	strh	r3, [r0, #4]
 800b63c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800b640:	80c3      	strh	r3, [r0, #6]
 800b642:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800b646:	8103      	strh	r3, [r0, #8]
 800b648:	2305      	movs	r3, #5
 800b64a:	8143      	strh	r3, [r0, #10]
 800b64c:	230b      	movs	r3, #11
 800b64e:	8183      	strh	r3, [r0, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	2300      	movs	r3, #0
 800b654:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b658:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b65a:	480a      	ldr	r0, [pc, #40]	; (800b684 <rand+0x6c>)
 800b65c:	690a      	ldr	r2, [r1, #16]
 800b65e:	694b      	ldr	r3, [r1, #20]
 800b660:	4c09      	ldr	r4, [pc, #36]	; (800b688 <rand+0x70>)
 800b662:	4350      	muls	r0, r2
 800b664:	fb04 0003 	mla	r0, r4, r3, r0
 800b668:	fba2 2304 	umull	r2, r3, r2, r4
 800b66c:	3201      	adds	r2, #1
 800b66e:	4403      	add	r3, r0
 800b670:	f143 0300 	adc.w	r3, r3, #0
 800b674:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b678:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	bf00      	nop
 800b680:	20020018 	.word	0x20020018
 800b684:	5851f42d 	.word	0x5851f42d
 800b688:	4c957f2d 	.word	0x4c957f2d

0800b68c <strchr>:
 800b68c:	b2c9      	uxtb	r1, r1
 800b68e:	4603      	mov	r3, r0
 800b690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b694:	b11a      	cbz	r2, 800b69e <strchr+0x12>
 800b696:	4291      	cmp	r1, r2
 800b698:	d1f9      	bne.n	800b68e <strchr+0x2>
 800b69a:	4618      	mov	r0, r3
 800b69c:	4770      	bx	lr
 800b69e:	2900      	cmp	r1, #0
 800b6a0:	bf0c      	ite	eq
 800b6a2:	4618      	moveq	r0, r3
 800b6a4:	2000      	movne	r0, #0
 800b6a6:	4770      	bx	lr

0800b6a8 <strncmp>:
 800b6a8:	b510      	push	{r4, lr}
 800b6aa:	b16a      	cbz	r2, 800b6c8 <strncmp+0x20>
 800b6ac:	3901      	subs	r1, #1
 800b6ae:	1884      	adds	r4, r0, r2
 800b6b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d103      	bne.n	800b6c4 <strncmp+0x1c>
 800b6bc:	42a0      	cmp	r0, r4
 800b6be:	d001      	beq.n	800b6c4 <strncmp+0x1c>
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1f5      	bne.n	800b6b0 <strncmp+0x8>
 800b6c4:	1a98      	subs	r0, r3, r2
 800b6c6:	bd10      	pop	{r4, pc}
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	bd10      	pop	{r4, pc}

0800b6cc <_cleanup_r>:
 800b6cc:	4901      	ldr	r1, [pc, #4]	; (800b6d4 <_cleanup_r+0x8>)
 800b6ce:	f000 b8a9 	b.w	800b824 <_fwalk_reent>
 800b6d2:	bf00      	nop
 800b6d4:	0800c2f1 	.word	0x0800c2f1

0800b6d8 <std.isra.0>:
 800b6d8:	2300      	movs	r3, #0
 800b6da:	b510      	push	{r4, lr}
 800b6dc:	4604      	mov	r4, r0
 800b6de:	6003      	str	r3, [r0, #0]
 800b6e0:	6043      	str	r3, [r0, #4]
 800b6e2:	6083      	str	r3, [r0, #8]
 800b6e4:	8181      	strh	r1, [r0, #12]
 800b6e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b6e8:	81c2      	strh	r2, [r0, #14]
 800b6ea:	6103      	str	r3, [r0, #16]
 800b6ec:	6143      	str	r3, [r0, #20]
 800b6ee:	6183      	str	r3, [r0, #24]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	305c      	adds	r0, #92	; 0x5c
 800b6f6:	f7ff ff6f 	bl	800b5d8 <memset>
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <std.isra.0+0x38>)
 800b6fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <std.isra.0+0x3c>)
 800b700:	62a3      	str	r3, [r4, #40]	; 0x28
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <std.isra.0+0x40>)
 800b704:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <std.isra.0+0x44>)
 800b708:	6224      	str	r4, [r4, #32]
 800b70a:	6323      	str	r3, [r4, #48]	; 0x30
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	0800bf95 	.word	0x0800bf95
 800b714:	0800bfb7 	.word	0x0800bfb7
 800b718:	0800bfef 	.word	0x0800bfef
 800b71c:	0800c013 	.word	0x0800c013

0800b720 <__sfmoreglue>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	1e4a      	subs	r2, r1, #1
 800b724:	2568      	movs	r5, #104	; 0x68
 800b726:	4355      	muls	r5, r2
 800b728:	460e      	mov	r6, r1
 800b72a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b72e:	f000 f8ed 	bl	800b90c <_malloc_r>
 800b732:	4604      	mov	r4, r0
 800b734:	b140      	cbz	r0, 800b748 <__sfmoreglue+0x28>
 800b736:	2100      	movs	r1, #0
 800b738:	e880 0042 	stmia.w	r0, {r1, r6}
 800b73c:	300c      	adds	r0, #12
 800b73e:	60a0      	str	r0, [r4, #8]
 800b740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b744:	f7ff ff48 	bl	800b5d8 <memset>
 800b748:	4620      	mov	r0, r4
 800b74a:	bd70      	pop	{r4, r5, r6, pc}

0800b74c <__sinit>:
 800b74c:	6983      	ldr	r3, [r0, #24]
 800b74e:	b510      	push	{r4, lr}
 800b750:	4604      	mov	r4, r0
 800b752:	bb33      	cbnz	r3, 800b7a2 <__sinit+0x56>
 800b754:	6483      	str	r3, [r0, #72]	; 0x48
 800b756:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b758:	6503      	str	r3, [r0, #80]	; 0x50
 800b75a:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <__sinit+0x58>)
 800b75c:	4a12      	ldr	r2, [pc, #72]	; (800b7a8 <__sinit+0x5c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6282      	str	r2, [r0, #40]	; 0x28
 800b762:	4298      	cmp	r0, r3
 800b764:	bf04      	itt	eq
 800b766:	2301      	moveq	r3, #1
 800b768:	6183      	streq	r3, [r0, #24]
 800b76a:	f000 f81f 	bl	800b7ac <__sfp>
 800b76e:	6060      	str	r0, [r4, #4]
 800b770:	4620      	mov	r0, r4
 800b772:	f000 f81b 	bl	800b7ac <__sfp>
 800b776:	60a0      	str	r0, [r4, #8]
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 f817 	bl	800b7ac <__sfp>
 800b77e:	2200      	movs	r2, #0
 800b780:	60e0      	str	r0, [r4, #12]
 800b782:	2104      	movs	r1, #4
 800b784:	6860      	ldr	r0, [r4, #4]
 800b786:	f7ff ffa7 	bl	800b6d8 <std.isra.0>
 800b78a:	2201      	movs	r2, #1
 800b78c:	2109      	movs	r1, #9
 800b78e:	68a0      	ldr	r0, [r4, #8]
 800b790:	f7ff ffa2 	bl	800b6d8 <std.isra.0>
 800b794:	2202      	movs	r2, #2
 800b796:	2112      	movs	r1, #18
 800b798:	68e0      	ldr	r0, [r4, #12]
 800b79a:	f7ff ff9d 	bl	800b6d8 <std.isra.0>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	61a3      	str	r3, [r4, #24]
 800b7a2:	bd10      	pop	{r4, pc}
 800b7a4:	0800f4bc 	.word	0x0800f4bc
 800b7a8:	0800b6cd 	.word	0x0800b6cd

0800b7ac <__sfp>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	4b1c      	ldr	r3, [pc, #112]	; (800b820 <__sfp+0x74>)
 800b7b0:	681e      	ldr	r6, [r3, #0]
 800b7b2:	69b3      	ldr	r3, [r6, #24]
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	b913      	cbnz	r3, 800b7be <__sfp+0x12>
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff ffc7 	bl	800b74c <__sinit>
 800b7be:	3648      	adds	r6, #72	; 0x48
 800b7c0:	68b4      	ldr	r4, [r6, #8]
 800b7c2:	6873      	ldr	r3, [r6, #4]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	d503      	bpl.n	800b7d0 <__sfp+0x24>
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	b133      	cbz	r3, 800b7da <__sfp+0x2e>
 800b7cc:	6836      	ldr	r6, [r6, #0]
 800b7ce:	e7f7      	b.n	800b7c0 <__sfp+0x14>
 800b7d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7d4:	b16d      	cbz	r5, 800b7f2 <__sfp+0x46>
 800b7d6:	3468      	adds	r4, #104	; 0x68
 800b7d8:	e7f4      	b.n	800b7c4 <__sfp+0x18>
 800b7da:	2104      	movs	r1, #4
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f7ff ff9f 	bl	800b720 <__sfmoreglue>
 800b7e2:	6030      	str	r0, [r6, #0]
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d1f1      	bne.n	800b7cc <__sfp+0x20>
 800b7e8:	230c      	movs	r3, #12
 800b7ea:	603b      	str	r3, [r7, #0]
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7f6:	81e3      	strh	r3, [r4, #14]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	6665      	str	r5, [r4, #100]	; 0x64
 800b7fe:	6025      	str	r5, [r4, #0]
 800b800:	60a5      	str	r5, [r4, #8]
 800b802:	6065      	str	r5, [r4, #4]
 800b804:	6125      	str	r5, [r4, #16]
 800b806:	6165      	str	r5, [r4, #20]
 800b808:	61a5      	str	r5, [r4, #24]
 800b80a:	2208      	movs	r2, #8
 800b80c:	4629      	mov	r1, r5
 800b80e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b812:	f7ff fee1 	bl	800b5d8 <memset>
 800b816:	6365      	str	r5, [r4, #52]	; 0x34
 800b818:	63a5      	str	r5, [r4, #56]	; 0x38
 800b81a:	64a5      	str	r5, [r4, #72]	; 0x48
 800b81c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b81e:	e7e6      	b.n	800b7ee <__sfp+0x42>
 800b820:	0800f4bc 	.word	0x0800f4bc

0800b824 <_fwalk_reent>:
 800b824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b828:	4680      	mov	r8, r0
 800b82a:	4689      	mov	r9, r1
 800b82c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b830:	2600      	movs	r6, #0
 800b832:	b914      	cbnz	r4, 800b83a <_fwalk_reent+0x16>
 800b834:	4630      	mov	r0, r6
 800b836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83a:	68a5      	ldr	r5, [r4, #8]
 800b83c:	6867      	ldr	r7, [r4, #4]
 800b83e:	3f01      	subs	r7, #1
 800b840:	d501      	bpl.n	800b846 <_fwalk_reent+0x22>
 800b842:	6824      	ldr	r4, [r4, #0]
 800b844:	e7f5      	b.n	800b832 <_fwalk_reent+0xe>
 800b846:	89ab      	ldrh	r3, [r5, #12]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d907      	bls.n	800b85c <_fwalk_reent+0x38>
 800b84c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b850:	3301      	adds	r3, #1
 800b852:	d003      	beq.n	800b85c <_fwalk_reent+0x38>
 800b854:	4629      	mov	r1, r5
 800b856:	4640      	mov	r0, r8
 800b858:	47c8      	blx	r9
 800b85a:	4306      	orrs	r6, r0
 800b85c:	3568      	adds	r5, #104	; 0x68
 800b85e:	e7ee      	b.n	800b83e <_fwalk_reent+0x1a>

0800b860 <malloc>:
 800b860:	4b02      	ldr	r3, [pc, #8]	; (800b86c <malloc+0xc>)
 800b862:	4601      	mov	r1, r0
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	f000 b851 	b.w	800b90c <_malloc_r>
 800b86a:	bf00      	nop
 800b86c:	20020018 	.word	0x20020018

0800b870 <_free_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4605      	mov	r5, r0
 800b874:	2900      	cmp	r1, #0
 800b876:	d045      	beq.n	800b904 <_free_r+0x94>
 800b878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87c:	1f0c      	subs	r4, r1, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	bfb8      	it	lt
 800b882:	18e4      	addlt	r4, r4, r3
 800b884:	f000 fdd4 	bl	800c430 <__malloc_lock>
 800b888:	4a1f      	ldr	r2, [pc, #124]	; (800b908 <_free_r+0x98>)
 800b88a:	6813      	ldr	r3, [r2, #0]
 800b88c:	4610      	mov	r0, r2
 800b88e:	b933      	cbnz	r3, 800b89e <_free_r+0x2e>
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	6014      	str	r4, [r2, #0]
 800b894:	4628      	mov	r0, r5
 800b896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b89a:	f000 bdca 	b.w	800c432 <__malloc_unlock>
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	d90c      	bls.n	800b8bc <_free_r+0x4c>
 800b8a2:	6821      	ldr	r1, [r4, #0]
 800b8a4:	1862      	adds	r2, r4, r1
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bf04      	itt	eq
 800b8aa:	681a      	ldreq	r2, [r3, #0]
 800b8ac:	685b      	ldreq	r3, [r3, #4]
 800b8ae:	6063      	str	r3, [r4, #4]
 800b8b0:	bf04      	itt	eq
 800b8b2:	1852      	addeq	r2, r2, r1
 800b8b4:	6022      	streq	r2, [r4, #0]
 800b8b6:	6004      	str	r4, [r0, #0]
 800b8b8:	e7ec      	b.n	800b894 <_free_r+0x24>
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	b10a      	cbz	r2, 800b8c4 <_free_r+0x54>
 800b8c0:	42a2      	cmp	r2, r4
 800b8c2:	d9fa      	bls.n	800b8ba <_free_r+0x4a>
 800b8c4:	6819      	ldr	r1, [r3, #0]
 800b8c6:	1858      	adds	r0, r3, r1
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d10b      	bne.n	800b8e4 <_free_r+0x74>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	4401      	add	r1, r0
 800b8d0:	1858      	adds	r0, r3, r1
 800b8d2:	4282      	cmp	r2, r0
 800b8d4:	6019      	str	r1, [r3, #0]
 800b8d6:	d1dd      	bne.n	800b894 <_free_r+0x24>
 800b8d8:	6810      	ldr	r0, [r2, #0]
 800b8da:	6852      	ldr	r2, [r2, #4]
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	4401      	add	r1, r0
 800b8e0:	6019      	str	r1, [r3, #0]
 800b8e2:	e7d7      	b.n	800b894 <_free_r+0x24>
 800b8e4:	d902      	bls.n	800b8ec <_free_r+0x7c>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	e7d3      	b.n	800b894 <_free_r+0x24>
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	1821      	adds	r1, r4, r0
 800b8f0:	428a      	cmp	r2, r1
 800b8f2:	bf04      	itt	eq
 800b8f4:	6811      	ldreq	r1, [r2, #0]
 800b8f6:	6852      	ldreq	r2, [r2, #4]
 800b8f8:	6062      	str	r2, [r4, #4]
 800b8fa:	bf04      	itt	eq
 800b8fc:	1809      	addeq	r1, r1, r0
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	605c      	str	r4, [r3, #4]
 800b902:	e7c7      	b.n	800b894 <_free_r+0x24>
 800b904:	bd38      	pop	{r3, r4, r5, pc}
 800b906:	bf00      	nop
 800b908:	20024614 	.word	0x20024614

0800b90c <_malloc_r>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	1ccd      	adds	r5, r1, #3
 800b910:	f025 0503 	bic.w	r5, r5, #3
 800b914:	3508      	adds	r5, #8
 800b916:	2d0c      	cmp	r5, #12
 800b918:	bf38      	it	cc
 800b91a:	250c      	movcc	r5, #12
 800b91c:	2d00      	cmp	r5, #0
 800b91e:	4606      	mov	r6, r0
 800b920:	db01      	blt.n	800b926 <_malloc_r+0x1a>
 800b922:	42a9      	cmp	r1, r5
 800b924:	d903      	bls.n	800b92e <_malloc_r+0x22>
 800b926:	230c      	movs	r3, #12
 800b928:	6033      	str	r3, [r6, #0]
 800b92a:	2000      	movs	r0, #0
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
 800b92e:	f000 fd7f 	bl	800c430 <__malloc_lock>
 800b932:	4a23      	ldr	r2, [pc, #140]	; (800b9c0 <_malloc_r+0xb4>)
 800b934:	6814      	ldr	r4, [r2, #0]
 800b936:	4621      	mov	r1, r4
 800b938:	b991      	cbnz	r1, 800b960 <_malloc_r+0x54>
 800b93a:	4c22      	ldr	r4, [pc, #136]	; (800b9c4 <_malloc_r+0xb8>)
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	b91b      	cbnz	r3, 800b948 <_malloc_r+0x3c>
 800b940:	4630      	mov	r0, r6
 800b942:	f000 fb17 	bl	800bf74 <_sbrk_r>
 800b946:	6020      	str	r0, [r4, #0]
 800b948:	4629      	mov	r1, r5
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 fb12 	bl	800bf74 <_sbrk_r>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d126      	bne.n	800b9a2 <_malloc_r+0x96>
 800b954:	230c      	movs	r3, #12
 800b956:	6033      	str	r3, [r6, #0]
 800b958:	4630      	mov	r0, r6
 800b95a:	f000 fd6a 	bl	800c432 <__malloc_unlock>
 800b95e:	e7e4      	b.n	800b92a <_malloc_r+0x1e>
 800b960:	680b      	ldr	r3, [r1, #0]
 800b962:	1b5b      	subs	r3, r3, r5
 800b964:	d41a      	bmi.n	800b99c <_malloc_r+0x90>
 800b966:	2b0b      	cmp	r3, #11
 800b968:	d90f      	bls.n	800b98a <_malloc_r+0x7e>
 800b96a:	600b      	str	r3, [r1, #0]
 800b96c:	50cd      	str	r5, [r1, r3]
 800b96e:	18cc      	adds	r4, r1, r3
 800b970:	4630      	mov	r0, r6
 800b972:	f000 fd5e 	bl	800c432 <__malloc_unlock>
 800b976:	f104 000b 	add.w	r0, r4, #11
 800b97a:	1d23      	adds	r3, r4, #4
 800b97c:	f020 0007 	bic.w	r0, r0, #7
 800b980:	1ac3      	subs	r3, r0, r3
 800b982:	d01b      	beq.n	800b9bc <_malloc_r+0xb0>
 800b984:	425a      	negs	r2, r3
 800b986:	50e2      	str	r2, [r4, r3]
 800b988:	bd70      	pop	{r4, r5, r6, pc}
 800b98a:	428c      	cmp	r4, r1
 800b98c:	bf0d      	iteet	eq
 800b98e:	6863      	ldreq	r3, [r4, #4]
 800b990:	684b      	ldrne	r3, [r1, #4]
 800b992:	6063      	strne	r3, [r4, #4]
 800b994:	6013      	streq	r3, [r2, #0]
 800b996:	bf18      	it	ne
 800b998:	460c      	movne	r4, r1
 800b99a:	e7e9      	b.n	800b970 <_malloc_r+0x64>
 800b99c:	460c      	mov	r4, r1
 800b99e:	6849      	ldr	r1, [r1, #4]
 800b9a0:	e7ca      	b.n	800b938 <_malloc_r+0x2c>
 800b9a2:	1cc4      	adds	r4, r0, #3
 800b9a4:	f024 0403 	bic.w	r4, r4, #3
 800b9a8:	42a0      	cmp	r0, r4
 800b9aa:	d005      	beq.n	800b9b8 <_malloc_r+0xac>
 800b9ac:	1a21      	subs	r1, r4, r0
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f000 fae0 	bl	800bf74 <_sbrk_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d0cd      	beq.n	800b954 <_malloc_r+0x48>
 800b9b8:	6025      	str	r5, [r4, #0]
 800b9ba:	e7d9      	b.n	800b970 <_malloc_r+0x64>
 800b9bc:	bd70      	pop	{r4, r5, r6, pc}
 800b9be:	bf00      	nop
 800b9c0:	20024614 	.word	0x20024614
 800b9c4:	20024618 	.word	0x20024618

0800b9c8 <__sfputc_r>:
 800b9c8:	6893      	ldr	r3, [r2, #8]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	b410      	push	{r4}
 800b9d0:	6093      	str	r3, [r2, #8]
 800b9d2:	da09      	bge.n	800b9e8 <__sfputc_r+0x20>
 800b9d4:	6994      	ldr	r4, [r2, #24]
 800b9d6:	42a3      	cmp	r3, r4
 800b9d8:	db02      	blt.n	800b9e0 <__sfputc_r+0x18>
 800b9da:	b2cb      	uxtb	r3, r1
 800b9dc:	2b0a      	cmp	r3, #10
 800b9de:	d103      	bne.n	800b9e8 <__sfputc_r+0x20>
 800b9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e4:	f000 bb1a 	b.w	800c01c <__swbuf_r>
 800b9e8:	6813      	ldr	r3, [r2, #0]
 800b9ea:	1c58      	adds	r0, r3, #1
 800b9ec:	6010      	str	r0, [r2, #0]
 800b9ee:	7019      	strb	r1, [r3, #0]
 800b9f0:	b2c8      	uxtb	r0, r1
 800b9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <__sfputs_r>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	4614      	mov	r4, r2
 800ba00:	18d5      	adds	r5, r2, r3
 800ba02:	42ac      	cmp	r4, r5
 800ba04:	d101      	bne.n	800ba0a <__sfputs_r+0x12>
 800ba06:	2000      	movs	r0, #0
 800ba08:	e007      	b.n	800ba1a <__sfputs_r+0x22>
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff ffd9 	bl	800b9c8 <__sfputc_r>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d1f3      	bne.n	800ba02 <__sfputs_r+0xa>
 800ba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba1c <_vfiprintf_r>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	b09d      	sub	sp, #116	; 0x74
 800ba22:	460c      	mov	r4, r1
 800ba24:	4617      	mov	r7, r2
 800ba26:	9303      	str	r3, [sp, #12]
 800ba28:	4606      	mov	r6, r0
 800ba2a:	b118      	cbz	r0, 800ba34 <_vfiprintf_r+0x18>
 800ba2c:	6983      	ldr	r3, [r0, #24]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <_vfiprintf_r+0x18>
 800ba30:	f7ff fe8c 	bl	800b74c <__sinit>
 800ba34:	4b7c      	ldr	r3, [pc, #496]	; (800bc28 <_vfiprintf_r+0x20c>)
 800ba36:	429c      	cmp	r4, r3
 800ba38:	d157      	bne.n	800baea <_vfiprintf_r+0xce>
 800ba3a:	6874      	ldr	r4, [r6, #4]
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	0718      	lsls	r0, r3, #28
 800ba40:	d55d      	bpl.n	800bafe <_vfiprintf_r+0xe2>
 800ba42:	6923      	ldr	r3, [r4, #16]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d05a      	beq.n	800bafe <_vfiprintf_r+0xe2>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4c:	2320      	movs	r3, #32
 800ba4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba52:	2330      	movs	r3, #48	; 0x30
 800ba54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba58:	f04f 0b01 	mov.w	fp, #1
 800ba5c:	46b8      	mov	r8, r7
 800ba5e:	4645      	mov	r5, r8
 800ba60:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d155      	bne.n	800bb14 <_vfiprintf_r+0xf8>
 800ba68:	ebb8 0a07 	subs.w	sl, r8, r7
 800ba6c:	d00b      	beq.n	800ba86 <_vfiprintf_r+0x6a>
 800ba6e:	4653      	mov	r3, sl
 800ba70:	463a      	mov	r2, r7
 800ba72:	4621      	mov	r1, r4
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff ffbf 	bl	800b9f8 <__sfputs_r>
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	f000 80c4 	beq.w	800bc08 <_vfiprintf_r+0x1ec>
 800ba80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba82:	4453      	add	r3, sl
 800ba84:	9309      	str	r3, [sp, #36]	; 0x24
 800ba86:	f898 3000 	ldrb.w	r3, [r8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80bc 	beq.w	800bc08 <_vfiprintf_r+0x1ec>
 800ba90:	2300      	movs	r3, #0
 800ba92:	f04f 32ff 	mov.w	r2, #4294967295
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	9307      	str	r3, [sp, #28]
 800ba9a:	9205      	str	r2, [sp, #20]
 800ba9c:	9306      	str	r3, [sp, #24]
 800ba9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa2:	931a      	str	r3, [sp, #104]	; 0x68
 800baa4:	2205      	movs	r2, #5
 800baa6:	7829      	ldrb	r1, [r5, #0]
 800baa8:	4860      	ldr	r0, [pc, #384]	; (800bc2c <_vfiprintf_r+0x210>)
 800baaa:	f7f4 fbe1 	bl	8000270 <memchr>
 800baae:	f105 0801 	add.w	r8, r5, #1
 800bab2:	9b04      	ldr	r3, [sp, #16]
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d131      	bne.n	800bb1c <_vfiprintf_r+0x100>
 800bab8:	06d9      	lsls	r1, r3, #27
 800baba:	bf44      	itt	mi
 800babc:	2220      	movmi	r2, #32
 800babe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bac2:	071a      	lsls	r2, r3, #28
 800bac4:	bf44      	itt	mi
 800bac6:	222b      	movmi	r2, #43	; 0x2b
 800bac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bacc:	782a      	ldrb	r2, [r5, #0]
 800bace:	2a2a      	cmp	r2, #42	; 0x2a
 800bad0:	d02c      	beq.n	800bb2c <_vfiprintf_r+0x110>
 800bad2:	9a07      	ldr	r2, [sp, #28]
 800bad4:	2100      	movs	r1, #0
 800bad6:	200a      	movs	r0, #10
 800bad8:	46a8      	mov	r8, r5
 800bada:	3501      	adds	r5, #1
 800badc:	f898 3000 	ldrb.w	r3, [r8]
 800bae0:	3b30      	subs	r3, #48	; 0x30
 800bae2:	2b09      	cmp	r3, #9
 800bae4:	d96d      	bls.n	800bbc2 <_vfiprintf_r+0x1a6>
 800bae6:	b371      	cbz	r1, 800bb46 <_vfiprintf_r+0x12a>
 800bae8:	e026      	b.n	800bb38 <_vfiprintf_r+0x11c>
 800baea:	4b51      	ldr	r3, [pc, #324]	; (800bc30 <_vfiprintf_r+0x214>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d101      	bne.n	800baf4 <_vfiprintf_r+0xd8>
 800baf0:	68b4      	ldr	r4, [r6, #8]
 800baf2:	e7a3      	b.n	800ba3c <_vfiprintf_r+0x20>
 800baf4:	4b4f      	ldr	r3, [pc, #316]	; (800bc34 <_vfiprintf_r+0x218>)
 800baf6:	429c      	cmp	r4, r3
 800baf8:	bf08      	it	eq
 800bafa:	68f4      	ldreq	r4, [r6, #12]
 800bafc:	e79e      	b.n	800ba3c <_vfiprintf_r+0x20>
 800bafe:	4621      	mov	r1, r4
 800bb00:	4630      	mov	r0, r6
 800bb02:	f000 faef 	bl	800c0e4 <__swsetup_r>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d09e      	beq.n	800ba48 <_vfiprintf_r+0x2c>
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	b01d      	add	sp, #116	; 0x74
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	2b25      	cmp	r3, #37	; 0x25
 800bb16:	d0a7      	beq.n	800ba68 <_vfiprintf_r+0x4c>
 800bb18:	46a8      	mov	r8, r5
 800bb1a:	e7a0      	b.n	800ba5e <_vfiprintf_r+0x42>
 800bb1c:	4a43      	ldr	r2, [pc, #268]	; (800bc2c <_vfiprintf_r+0x210>)
 800bb1e:	1a80      	subs	r0, r0, r2
 800bb20:	fa0b f000 	lsl.w	r0, fp, r0
 800bb24:	4318      	orrs	r0, r3
 800bb26:	9004      	str	r0, [sp, #16]
 800bb28:	4645      	mov	r5, r8
 800bb2a:	e7bb      	b.n	800baa4 <_vfiprintf_r+0x88>
 800bb2c:	9a03      	ldr	r2, [sp, #12]
 800bb2e:	1d11      	adds	r1, r2, #4
 800bb30:	6812      	ldr	r2, [r2, #0]
 800bb32:	9103      	str	r1, [sp, #12]
 800bb34:	2a00      	cmp	r2, #0
 800bb36:	db01      	blt.n	800bb3c <_vfiprintf_r+0x120>
 800bb38:	9207      	str	r2, [sp, #28]
 800bb3a:	e004      	b.n	800bb46 <_vfiprintf_r+0x12a>
 800bb3c:	4252      	negs	r2, r2
 800bb3e:	f043 0302 	orr.w	r3, r3, #2
 800bb42:	9207      	str	r2, [sp, #28]
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	f898 3000 	ldrb.w	r3, [r8]
 800bb4a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb4c:	d110      	bne.n	800bb70 <_vfiprintf_r+0x154>
 800bb4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb52:	2b2a      	cmp	r3, #42	; 0x2a
 800bb54:	f108 0101 	add.w	r1, r8, #1
 800bb58:	d137      	bne.n	800bbca <_vfiprintf_r+0x1ae>
 800bb5a:	9b03      	ldr	r3, [sp, #12]
 800bb5c:	1d1a      	adds	r2, r3, #4
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	9203      	str	r2, [sp, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	bfb8      	it	lt
 800bb66:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb6a:	f108 0802 	add.w	r8, r8, #2
 800bb6e:	9305      	str	r3, [sp, #20]
 800bb70:	4d31      	ldr	r5, [pc, #196]	; (800bc38 <_vfiprintf_r+0x21c>)
 800bb72:	f898 1000 	ldrb.w	r1, [r8]
 800bb76:	2203      	movs	r2, #3
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7f4 fb79 	bl	8000270 <memchr>
 800bb7e:	b140      	cbz	r0, 800bb92 <_vfiprintf_r+0x176>
 800bb80:	2340      	movs	r3, #64	; 0x40
 800bb82:	1b40      	subs	r0, r0, r5
 800bb84:	fa03 f000 	lsl.w	r0, r3, r0
 800bb88:	9b04      	ldr	r3, [sp, #16]
 800bb8a:	4303      	orrs	r3, r0
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	f108 0801 	add.w	r8, r8, #1
 800bb92:	f898 1000 	ldrb.w	r1, [r8]
 800bb96:	4829      	ldr	r0, [pc, #164]	; (800bc3c <_vfiprintf_r+0x220>)
 800bb98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb9c:	2206      	movs	r2, #6
 800bb9e:	f108 0701 	add.w	r7, r8, #1
 800bba2:	f7f4 fb65 	bl	8000270 <memchr>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d034      	beq.n	800bc14 <_vfiprintf_r+0x1f8>
 800bbaa:	4b25      	ldr	r3, [pc, #148]	; (800bc40 <_vfiprintf_r+0x224>)
 800bbac:	bb03      	cbnz	r3, 800bbf0 <_vfiprintf_r+0x1d4>
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	3307      	adds	r3, #7
 800bbb2:	f023 0307 	bic.w	r3, r3, #7
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	9303      	str	r3, [sp, #12]
 800bbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbbc:	444b      	add	r3, r9
 800bbbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc0:	e74c      	b.n	800ba5c <_vfiprintf_r+0x40>
 800bbc2:	fb00 3202 	mla	r2, r0, r2, r3
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	e786      	b.n	800bad8 <_vfiprintf_r+0xbc>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	250a      	movs	r5, #10
 800bbd2:	4688      	mov	r8, r1
 800bbd4:	3101      	adds	r1, #1
 800bbd6:	f898 2000 	ldrb.w	r2, [r8]
 800bbda:	3a30      	subs	r2, #48	; 0x30
 800bbdc:	2a09      	cmp	r2, #9
 800bbde:	d903      	bls.n	800bbe8 <_vfiprintf_r+0x1cc>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c5      	beq.n	800bb70 <_vfiprintf_r+0x154>
 800bbe4:	9005      	str	r0, [sp, #20]
 800bbe6:	e7c3      	b.n	800bb70 <_vfiprintf_r+0x154>
 800bbe8:	fb05 2000 	mla	r0, r5, r0, r2
 800bbec:	2301      	movs	r3, #1
 800bbee:	e7f0      	b.n	800bbd2 <_vfiprintf_r+0x1b6>
 800bbf0:	ab03      	add	r3, sp, #12
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <_vfiprintf_r+0x228>)
 800bbf8:	a904      	add	r1, sp, #16
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f3af 8000 	nop.w
 800bc00:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc04:	4681      	mov	r9, r0
 800bc06:	d1d8      	bne.n	800bbba <_vfiprintf_r+0x19e>
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	065b      	lsls	r3, r3, #25
 800bc0c:	f53f af7d 	bmi.w	800bb0a <_vfiprintf_r+0xee>
 800bc10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc12:	e77c      	b.n	800bb0e <_vfiprintf_r+0xf2>
 800bc14:	ab03      	add	r3, sp, #12
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <_vfiprintf_r+0x228>)
 800bc1c:	a904      	add	r1, sp, #16
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f000 f888 	bl	800bd34 <_printf_i>
 800bc24:	e7ec      	b.n	800bc00 <_vfiprintf_r+0x1e4>
 800bc26:	bf00      	nop
 800bc28:	0800f47c 	.word	0x0800f47c
 800bc2c:	0800f4c0 	.word	0x0800f4c0
 800bc30:	0800f49c 	.word	0x0800f49c
 800bc34:	0800f45c 	.word	0x0800f45c
 800bc38:	0800f4c6 	.word	0x0800f4c6
 800bc3c:	0800f4ca 	.word	0x0800f4ca
 800bc40:	00000000 	.word	0x00000000
 800bc44:	0800b9f9 	.word	0x0800b9f9

0800bc48 <_printf_common>:
 800bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	4691      	mov	r9, r2
 800bc4e:	461f      	mov	r7, r3
 800bc50:	688a      	ldr	r2, [r1, #8]
 800bc52:	690b      	ldr	r3, [r1, #16]
 800bc54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	bfb8      	it	lt
 800bc5c:	4613      	movlt	r3, r2
 800bc5e:	f8c9 3000 	str.w	r3, [r9]
 800bc62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc66:	4606      	mov	r6, r0
 800bc68:	460c      	mov	r4, r1
 800bc6a:	b112      	cbz	r2, 800bc72 <_printf_common+0x2a>
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	f8c9 3000 	str.w	r3, [r9]
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	0699      	lsls	r1, r3, #26
 800bc76:	bf42      	ittt	mi
 800bc78:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bc7c:	3302      	addmi	r3, #2
 800bc7e:	f8c9 3000 	strmi.w	r3, [r9]
 800bc82:	6825      	ldr	r5, [r4, #0]
 800bc84:	f015 0506 	ands.w	r5, r5, #6
 800bc88:	d107      	bne.n	800bc9a <_printf_common+0x52>
 800bc8a:	f104 0a19 	add.w	sl, r4, #25
 800bc8e:	68e3      	ldr	r3, [r4, #12]
 800bc90:	f8d9 2000 	ldr.w	r2, [r9]
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	429d      	cmp	r5, r3
 800bc98:	db29      	blt.n	800bcee <_printf_common+0xa6>
 800bc9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bc9e:	6822      	ldr	r2, [r4, #0]
 800bca0:	3300      	adds	r3, #0
 800bca2:	bf18      	it	ne
 800bca4:	2301      	movne	r3, #1
 800bca6:	0692      	lsls	r2, r2, #26
 800bca8:	d42e      	bmi.n	800bd08 <_printf_common+0xc0>
 800bcaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcae:	4639      	mov	r1, r7
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	47c0      	blx	r8
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d021      	beq.n	800bcfc <_printf_common+0xb4>
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	68e5      	ldr	r5, [r4, #12]
 800bcbc:	f8d9 2000 	ldr.w	r2, [r9]
 800bcc0:	f003 0306 	and.w	r3, r3, #6
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	bf08      	it	eq
 800bcc8:	1aad      	subeq	r5, r5, r2
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	6922      	ldr	r2, [r4, #16]
 800bcce:	bf0c      	ite	eq
 800bcd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcd4:	2500      	movne	r5, #0
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	bfc4      	itt	gt
 800bcda:	1a9b      	subgt	r3, r3, r2
 800bcdc:	18ed      	addgt	r5, r5, r3
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	341a      	adds	r4, #26
 800bce4:	454d      	cmp	r5, r9
 800bce6:	d11b      	bne.n	800bd20 <_printf_common+0xd8>
 800bce8:	2000      	movs	r0, #0
 800bcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4652      	mov	r2, sl
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	47c0      	blx	r8
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d103      	bne.n	800bd04 <_printf_common+0xbc>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd04:	3501      	adds	r5, #1
 800bd06:	e7c2      	b.n	800bc8e <_printf_common+0x46>
 800bd08:	18e1      	adds	r1, r4, r3
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	2030      	movs	r0, #48	; 0x30
 800bd0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd12:	4422      	add	r2, r4
 800bd14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	e7c4      	b.n	800bcaa <_printf_common+0x62>
 800bd20:	2301      	movs	r3, #1
 800bd22:	4622      	mov	r2, r4
 800bd24:	4639      	mov	r1, r7
 800bd26:	4630      	mov	r0, r6
 800bd28:	47c0      	blx	r8
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d0e6      	beq.n	800bcfc <_printf_common+0xb4>
 800bd2e:	f109 0901 	add.w	r9, r9, #1
 800bd32:	e7d7      	b.n	800bce4 <_printf_common+0x9c>

0800bd34 <_printf_i>:
 800bd34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd38:	4617      	mov	r7, r2
 800bd3a:	7e0a      	ldrb	r2, [r1, #24]
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	2a6e      	cmp	r2, #110	; 0x6e
 800bd40:	4698      	mov	r8, r3
 800bd42:	4606      	mov	r6, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd48:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800bd4c:	f000 80bc 	beq.w	800bec8 <_printf_i+0x194>
 800bd50:	d81a      	bhi.n	800bd88 <_printf_i+0x54>
 800bd52:	2a63      	cmp	r2, #99	; 0x63
 800bd54:	d02e      	beq.n	800bdb4 <_printf_i+0x80>
 800bd56:	d80a      	bhi.n	800bd6e <_printf_i+0x3a>
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	f000 80c8 	beq.w	800beee <_printf_i+0x1ba>
 800bd5e:	2a58      	cmp	r2, #88	; 0x58
 800bd60:	f000 808a 	beq.w	800be78 <_printf_i+0x144>
 800bd64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bd6c:	e02a      	b.n	800bdc4 <_printf_i+0x90>
 800bd6e:	2a64      	cmp	r2, #100	; 0x64
 800bd70:	d001      	beq.n	800bd76 <_printf_i+0x42>
 800bd72:	2a69      	cmp	r2, #105	; 0x69
 800bd74:	d1f6      	bne.n	800bd64 <_printf_i+0x30>
 800bd76:	6821      	ldr	r1, [r4, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bd7e:	d023      	beq.n	800bdc8 <_printf_i+0x94>
 800bd80:	1d11      	adds	r1, r2, #4
 800bd82:	6019      	str	r1, [r3, #0]
 800bd84:	6813      	ldr	r3, [r2, #0]
 800bd86:	e027      	b.n	800bdd8 <_printf_i+0xa4>
 800bd88:	2a73      	cmp	r2, #115	; 0x73
 800bd8a:	f000 80b4 	beq.w	800bef6 <_printf_i+0x1c2>
 800bd8e:	d808      	bhi.n	800bda2 <_printf_i+0x6e>
 800bd90:	2a6f      	cmp	r2, #111	; 0x6f
 800bd92:	d02a      	beq.n	800bdea <_printf_i+0xb6>
 800bd94:	2a70      	cmp	r2, #112	; 0x70
 800bd96:	d1e5      	bne.n	800bd64 <_printf_i+0x30>
 800bd98:	680a      	ldr	r2, [r1, #0]
 800bd9a:	f042 0220 	orr.w	r2, r2, #32
 800bd9e:	600a      	str	r2, [r1, #0]
 800bda0:	e003      	b.n	800bdaa <_printf_i+0x76>
 800bda2:	2a75      	cmp	r2, #117	; 0x75
 800bda4:	d021      	beq.n	800bdea <_printf_i+0xb6>
 800bda6:	2a78      	cmp	r2, #120	; 0x78
 800bda8:	d1dc      	bne.n	800bd64 <_printf_i+0x30>
 800bdaa:	2278      	movs	r2, #120	; 0x78
 800bdac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800bdb0:	496e      	ldr	r1, [pc, #440]	; (800bf6c <_printf_i+0x238>)
 800bdb2:	e064      	b.n	800be7e <_printf_i+0x14a>
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800bdba:	1d11      	adds	r1, r2, #4
 800bdbc:	6019      	str	r1, [r3, #0]
 800bdbe:	6813      	ldr	r3, [r2, #0]
 800bdc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e0a3      	b.n	800bf10 <_printf_i+0x1dc>
 800bdc8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800bdcc:	f102 0104 	add.w	r1, r2, #4
 800bdd0:	6019      	str	r1, [r3, #0]
 800bdd2:	d0d7      	beq.n	800bd84 <_printf_i+0x50>
 800bdd4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	da03      	bge.n	800bde4 <_printf_i+0xb0>
 800bddc:	222d      	movs	r2, #45	; 0x2d
 800bdde:	425b      	negs	r3, r3
 800bde0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bde4:	4962      	ldr	r1, [pc, #392]	; (800bf70 <_printf_i+0x23c>)
 800bde6:	220a      	movs	r2, #10
 800bde8:	e017      	b.n	800be1a <_printf_i+0xe6>
 800bdea:	6820      	ldr	r0, [r4, #0]
 800bdec:	6819      	ldr	r1, [r3, #0]
 800bdee:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bdf2:	d003      	beq.n	800bdfc <_printf_i+0xc8>
 800bdf4:	1d08      	adds	r0, r1, #4
 800bdf6:	6018      	str	r0, [r3, #0]
 800bdf8:	680b      	ldr	r3, [r1, #0]
 800bdfa:	e006      	b.n	800be0a <_printf_i+0xd6>
 800bdfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be00:	f101 0004 	add.w	r0, r1, #4
 800be04:	6018      	str	r0, [r3, #0]
 800be06:	d0f7      	beq.n	800bdf8 <_printf_i+0xc4>
 800be08:	880b      	ldrh	r3, [r1, #0]
 800be0a:	4959      	ldr	r1, [pc, #356]	; (800bf70 <_printf_i+0x23c>)
 800be0c:	2a6f      	cmp	r2, #111	; 0x6f
 800be0e:	bf14      	ite	ne
 800be10:	220a      	movne	r2, #10
 800be12:	2208      	moveq	r2, #8
 800be14:	2000      	movs	r0, #0
 800be16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800be1a:	6865      	ldr	r5, [r4, #4]
 800be1c:	60a5      	str	r5, [r4, #8]
 800be1e:	2d00      	cmp	r5, #0
 800be20:	f2c0 809c 	blt.w	800bf5c <_printf_i+0x228>
 800be24:	6820      	ldr	r0, [r4, #0]
 800be26:	f020 0004 	bic.w	r0, r0, #4
 800be2a:	6020      	str	r0, [r4, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d13f      	bne.n	800beb0 <_printf_i+0x17c>
 800be30:	2d00      	cmp	r5, #0
 800be32:	f040 8095 	bne.w	800bf60 <_printf_i+0x22c>
 800be36:	4675      	mov	r5, lr
 800be38:	2a08      	cmp	r2, #8
 800be3a:	d10b      	bne.n	800be54 <_printf_i+0x120>
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	07da      	lsls	r2, r3, #31
 800be40:	d508      	bpl.n	800be54 <_printf_i+0x120>
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	6862      	ldr	r2, [r4, #4]
 800be46:	429a      	cmp	r2, r3
 800be48:	bfde      	ittt	le
 800be4a:	2330      	movle	r3, #48	; 0x30
 800be4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be54:	ebae 0305 	sub.w	r3, lr, r5
 800be58:	6123      	str	r3, [r4, #16]
 800be5a:	f8cd 8000 	str.w	r8, [sp]
 800be5e:	463b      	mov	r3, r7
 800be60:	aa03      	add	r2, sp, #12
 800be62:	4621      	mov	r1, r4
 800be64:	4630      	mov	r0, r6
 800be66:	f7ff feef 	bl	800bc48 <_printf_common>
 800be6a:	3001      	adds	r0, #1
 800be6c:	d155      	bne.n	800bf1a <_printf_i+0x1e6>
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	b005      	add	sp, #20
 800be74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be78:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800be7c:	493c      	ldr	r1, [pc, #240]	; (800bf70 <_printf_i+0x23c>)
 800be7e:	6822      	ldr	r2, [r4, #0]
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	f012 0f80 	tst.w	r2, #128	; 0x80
 800be86:	f100 0504 	add.w	r5, r0, #4
 800be8a:	601d      	str	r5, [r3, #0]
 800be8c:	d001      	beq.n	800be92 <_printf_i+0x15e>
 800be8e:	6803      	ldr	r3, [r0, #0]
 800be90:	e002      	b.n	800be98 <_printf_i+0x164>
 800be92:	0655      	lsls	r5, r2, #25
 800be94:	d5fb      	bpl.n	800be8e <_printf_i+0x15a>
 800be96:	8803      	ldrh	r3, [r0, #0]
 800be98:	07d0      	lsls	r0, r2, #31
 800be9a:	bf44      	itt	mi
 800be9c:	f042 0220 	orrmi.w	r2, r2, #32
 800bea0:	6022      	strmi	r2, [r4, #0]
 800bea2:	b91b      	cbnz	r3, 800beac <_printf_i+0x178>
 800bea4:	6822      	ldr	r2, [r4, #0]
 800bea6:	f022 0220 	bic.w	r2, r2, #32
 800beaa:	6022      	str	r2, [r4, #0]
 800beac:	2210      	movs	r2, #16
 800beae:	e7b1      	b.n	800be14 <_printf_i+0xe0>
 800beb0:	4675      	mov	r5, lr
 800beb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800beb6:	fb02 3310 	mls	r3, r2, r0, r3
 800beba:	5ccb      	ldrb	r3, [r1, r3]
 800bebc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bec0:	4603      	mov	r3, r0
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d1f5      	bne.n	800beb2 <_printf_i+0x17e>
 800bec6:	e7b7      	b.n	800be38 <_printf_i+0x104>
 800bec8:	6808      	ldr	r0, [r1, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	6949      	ldr	r1, [r1, #20]
 800bece:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bed2:	d004      	beq.n	800bede <_printf_i+0x1aa>
 800bed4:	1d10      	adds	r0, r2, #4
 800bed6:	6018      	str	r0, [r3, #0]
 800bed8:	6813      	ldr	r3, [r2, #0]
 800beda:	6019      	str	r1, [r3, #0]
 800bedc:	e007      	b.n	800beee <_printf_i+0x1ba>
 800bede:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bee2:	f102 0004 	add.w	r0, r2, #4
 800bee6:	6018      	str	r0, [r3, #0]
 800bee8:	6813      	ldr	r3, [r2, #0]
 800beea:	d0f6      	beq.n	800beda <_printf_i+0x1a6>
 800beec:	8019      	strh	r1, [r3, #0]
 800beee:	2300      	movs	r3, #0
 800bef0:	6123      	str	r3, [r4, #16]
 800bef2:	4675      	mov	r5, lr
 800bef4:	e7b1      	b.n	800be5a <_printf_i+0x126>
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	1d11      	adds	r1, r2, #4
 800befa:	6019      	str	r1, [r3, #0]
 800befc:	6815      	ldr	r5, [r2, #0]
 800befe:	6862      	ldr	r2, [r4, #4]
 800bf00:	2100      	movs	r1, #0
 800bf02:	4628      	mov	r0, r5
 800bf04:	f7f4 f9b4 	bl	8000270 <memchr>
 800bf08:	b108      	cbz	r0, 800bf0e <_printf_i+0x1da>
 800bf0a:	1b40      	subs	r0, r0, r5
 800bf0c:	6060      	str	r0, [r4, #4]
 800bf0e:	6863      	ldr	r3, [r4, #4]
 800bf10:	6123      	str	r3, [r4, #16]
 800bf12:	2300      	movs	r3, #0
 800bf14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf18:	e79f      	b.n	800be5a <_printf_i+0x126>
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	462a      	mov	r2, r5
 800bf1e:	4639      	mov	r1, r7
 800bf20:	4630      	mov	r0, r6
 800bf22:	47c0      	blx	r8
 800bf24:	3001      	adds	r0, #1
 800bf26:	d0a2      	beq.n	800be6e <_printf_i+0x13a>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	079b      	lsls	r3, r3, #30
 800bf2c:	d507      	bpl.n	800bf3e <_printf_i+0x20a>
 800bf2e:	2500      	movs	r5, #0
 800bf30:	f104 0919 	add.w	r9, r4, #25
 800bf34:	68e3      	ldr	r3, [r4, #12]
 800bf36:	9a03      	ldr	r2, [sp, #12]
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	429d      	cmp	r5, r3
 800bf3c:	db05      	blt.n	800bf4a <_printf_i+0x216>
 800bf3e:	68e0      	ldr	r0, [r4, #12]
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	4298      	cmp	r0, r3
 800bf44:	bfb8      	it	lt
 800bf46:	4618      	movlt	r0, r3
 800bf48:	e793      	b.n	800be72 <_printf_i+0x13e>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	464a      	mov	r2, r9
 800bf4e:	4639      	mov	r1, r7
 800bf50:	4630      	mov	r0, r6
 800bf52:	47c0      	blx	r8
 800bf54:	3001      	adds	r0, #1
 800bf56:	d08a      	beq.n	800be6e <_printf_i+0x13a>
 800bf58:	3501      	adds	r5, #1
 800bf5a:	e7eb      	b.n	800bf34 <_printf_i+0x200>
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1a7      	bne.n	800beb0 <_printf_i+0x17c>
 800bf60:	780b      	ldrb	r3, [r1, #0]
 800bf62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf6a:	e765      	b.n	800be38 <_printf_i+0x104>
 800bf6c:	0800f4e2 	.word	0x0800f4e2
 800bf70:	0800f4d1 	.word	0x0800f4d1

0800bf74 <_sbrk_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4c06      	ldr	r4, [pc, #24]	; (800bf90 <_sbrk_r+0x1c>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	f7ff fa8e 	bl	800b4a0 <_sbrk>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_sbrk_r+0x1a>
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_sbrk_r+0x1a>
 800bf8c:	602b      	str	r3, [r5, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	20027d48 	.word	0x20027d48

0800bf94 <__sread>:
 800bf94:	b510      	push	{r4, lr}
 800bf96:	460c      	mov	r4, r1
 800bf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf9c:	f000 fa4a 	bl	800c434 <_read_r>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	bfab      	itete	ge
 800bfa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfa6:	89a3      	ldrhlt	r3, [r4, #12]
 800bfa8:	181b      	addge	r3, r3, r0
 800bfaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfae:	bfac      	ite	ge
 800bfb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfb2:	81a3      	strhlt	r3, [r4, #12]
 800bfb4:	bd10      	pop	{r4, pc}

0800bfb6 <__swrite>:
 800bfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfba:	461f      	mov	r7, r3
 800bfbc:	898b      	ldrh	r3, [r1, #12]
 800bfbe:	05db      	lsls	r3, r3, #23
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	d505      	bpl.n	800bfd4 <__swrite+0x1e>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd0:	f000 f9b8 	bl	800c344 <_lseek_r>
 800bfd4:	89a3      	ldrh	r3, [r4, #12]
 800bfd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfea:	f000 b869 	b.w	800c0c0 <_write_r>

0800bfee <__sseek>:
 800bfee:	b510      	push	{r4, lr}
 800bff0:	460c      	mov	r4, r1
 800bff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff6:	f000 f9a5 	bl	800c344 <_lseek_r>
 800bffa:	1c43      	adds	r3, r0, #1
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	bf15      	itete	ne
 800c000:	6560      	strne	r0, [r4, #84]	; 0x54
 800c002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c00a:	81a3      	strheq	r3, [r4, #12]
 800c00c:	bf18      	it	ne
 800c00e:	81a3      	strhne	r3, [r4, #12]
 800c010:	bd10      	pop	{r4, pc}

0800c012 <__sclose>:
 800c012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c016:	f000 b8d3 	b.w	800c1c0 <_close_r>
	...

0800c01c <__swbuf_r>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	460e      	mov	r6, r1
 800c020:	4614      	mov	r4, r2
 800c022:	4605      	mov	r5, r0
 800c024:	b118      	cbz	r0, 800c02e <__swbuf_r+0x12>
 800c026:	6983      	ldr	r3, [r0, #24]
 800c028:	b90b      	cbnz	r3, 800c02e <__swbuf_r+0x12>
 800c02a:	f7ff fb8f 	bl	800b74c <__sinit>
 800c02e:	4b21      	ldr	r3, [pc, #132]	; (800c0b4 <__swbuf_r+0x98>)
 800c030:	429c      	cmp	r4, r3
 800c032:	d12a      	bne.n	800c08a <__swbuf_r+0x6e>
 800c034:	686c      	ldr	r4, [r5, #4]
 800c036:	69a3      	ldr	r3, [r4, #24]
 800c038:	60a3      	str	r3, [r4, #8]
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	071a      	lsls	r2, r3, #28
 800c03e:	d52e      	bpl.n	800c09e <__swbuf_r+0x82>
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	b363      	cbz	r3, 800c09e <__swbuf_r+0x82>
 800c044:	6923      	ldr	r3, [r4, #16]
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	1ac0      	subs	r0, r0, r3
 800c04a:	6963      	ldr	r3, [r4, #20]
 800c04c:	b2f6      	uxtb	r6, r6
 800c04e:	4298      	cmp	r0, r3
 800c050:	4637      	mov	r7, r6
 800c052:	db04      	blt.n	800c05e <__swbuf_r+0x42>
 800c054:	4621      	mov	r1, r4
 800c056:	4628      	mov	r0, r5
 800c058:	f000 f94a 	bl	800c2f0 <_fflush_r>
 800c05c:	bb28      	cbnz	r0, 800c0aa <__swbuf_r+0x8e>
 800c05e:	68a3      	ldr	r3, [r4, #8]
 800c060:	3b01      	subs	r3, #1
 800c062:	60a3      	str	r3, [r4, #8]
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	1c5a      	adds	r2, r3, #1
 800c068:	6022      	str	r2, [r4, #0]
 800c06a:	701e      	strb	r6, [r3, #0]
 800c06c:	6963      	ldr	r3, [r4, #20]
 800c06e:	3001      	adds	r0, #1
 800c070:	4298      	cmp	r0, r3
 800c072:	d004      	beq.n	800c07e <__swbuf_r+0x62>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	07db      	lsls	r3, r3, #31
 800c078:	d519      	bpl.n	800c0ae <__swbuf_r+0x92>
 800c07a:	2e0a      	cmp	r6, #10
 800c07c:	d117      	bne.n	800c0ae <__swbuf_r+0x92>
 800c07e:	4621      	mov	r1, r4
 800c080:	4628      	mov	r0, r5
 800c082:	f000 f935 	bl	800c2f0 <_fflush_r>
 800c086:	b190      	cbz	r0, 800c0ae <__swbuf_r+0x92>
 800c088:	e00f      	b.n	800c0aa <__swbuf_r+0x8e>
 800c08a:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <__swbuf_r+0x9c>)
 800c08c:	429c      	cmp	r4, r3
 800c08e:	d101      	bne.n	800c094 <__swbuf_r+0x78>
 800c090:	68ac      	ldr	r4, [r5, #8]
 800c092:	e7d0      	b.n	800c036 <__swbuf_r+0x1a>
 800c094:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <__swbuf_r+0xa0>)
 800c096:	429c      	cmp	r4, r3
 800c098:	bf08      	it	eq
 800c09a:	68ec      	ldreq	r4, [r5, #12]
 800c09c:	e7cb      	b.n	800c036 <__swbuf_r+0x1a>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 f81f 	bl	800c0e4 <__swsetup_r>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d0cc      	beq.n	800c044 <__swbuf_r+0x28>
 800c0aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	0800f47c 	.word	0x0800f47c
 800c0b8:	0800f49c 	.word	0x0800f49c
 800c0bc:	0800f45c 	.word	0x0800f45c

0800c0c0 <_write_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4c07      	ldr	r4, [pc, #28]	; (800c0e0 <_write_r+0x20>)
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	4608      	mov	r0, r1
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	6022      	str	r2, [r4, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f7ff f9d8 	bl	800b484 <_write>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_write_r+0x1e>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_write_r+0x1e>
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20027d48 	.word	0x20027d48

0800c0e4 <__swsetup_r>:
 800c0e4:	4b32      	ldr	r3, [pc, #200]	; (800c1b0 <__swsetup_r+0xcc>)
 800c0e6:	b570      	push	{r4, r5, r6, lr}
 800c0e8:	681d      	ldr	r5, [r3, #0]
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	b125      	cbz	r5, 800c0fa <__swsetup_r+0x16>
 800c0f0:	69ab      	ldr	r3, [r5, #24]
 800c0f2:	b913      	cbnz	r3, 800c0fa <__swsetup_r+0x16>
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f7ff fb29 	bl	800b74c <__sinit>
 800c0fa:	4b2e      	ldr	r3, [pc, #184]	; (800c1b4 <__swsetup_r+0xd0>)
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	d10f      	bne.n	800c120 <__swsetup_r+0x3c>
 800c100:	686c      	ldr	r4, [r5, #4]
 800c102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c106:	b29a      	uxth	r2, r3
 800c108:	0715      	lsls	r5, r2, #28
 800c10a:	d42c      	bmi.n	800c166 <__swsetup_r+0x82>
 800c10c:	06d0      	lsls	r0, r2, #27
 800c10e:	d411      	bmi.n	800c134 <__swsetup_r+0x50>
 800c110:	2209      	movs	r2, #9
 800c112:	6032      	str	r2, [r6, #0]
 800c114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	4b25      	ldr	r3, [pc, #148]	; (800c1b8 <__swsetup_r+0xd4>)
 800c122:	429c      	cmp	r4, r3
 800c124:	d101      	bne.n	800c12a <__swsetup_r+0x46>
 800c126:	68ac      	ldr	r4, [r5, #8]
 800c128:	e7eb      	b.n	800c102 <__swsetup_r+0x1e>
 800c12a:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <__swsetup_r+0xd8>)
 800c12c:	429c      	cmp	r4, r3
 800c12e:	bf08      	it	eq
 800c130:	68ec      	ldreq	r4, [r5, #12]
 800c132:	e7e6      	b.n	800c102 <__swsetup_r+0x1e>
 800c134:	0751      	lsls	r1, r2, #29
 800c136:	d512      	bpl.n	800c15e <__swsetup_r+0x7a>
 800c138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c13a:	b141      	cbz	r1, 800c14e <__swsetup_r+0x6a>
 800c13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c140:	4299      	cmp	r1, r3
 800c142:	d002      	beq.n	800c14a <__swsetup_r+0x66>
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff fb93 	bl	800b870 <_free_r>
 800c14a:	2300      	movs	r3, #0
 800c14c:	6363      	str	r3, [r4, #52]	; 0x34
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	2300      	movs	r3, #0
 800c158:	6063      	str	r3, [r4, #4]
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f043 0308 	orr.w	r3, r3, #8
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	b94b      	cbnz	r3, 800c17e <__swsetup_r+0x9a>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c174:	d003      	beq.n	800c17e <__swsetup_r+0x9a>
 800c176:	4621      	mov	r1, r4
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f919 	bl	800c3b0 <__smakebuf_r>
 800c17e:	89a2      	ldrh	r2, [r4, #12]
 800c180:	f012 0301 	ands.w	r3, r2, #1
 800c184:	d00c      	beq.n	800c1a0 <__swsetup_r+0xbc>
 800c186:	2300      	movs	r3, #0
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	6963      	ldr	r3, [r4, #20]
 800c18c:	425b      	negs	r3, r3
 800c18e:	61a3      	str	r3, [r4, #24]
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	b953      	cbnz	r3, 800c1aa <__swsetup_r+0xc6>
 800c194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c198:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c19c:	d1ba      	bne.n	800c114 <__swsetup_r+0x30>
 800c19e:	bd70      	pop	{r4, r5, r6, pc}
 800c1a0:	0792      	lsls	r2, r2, #30
 800c1a2:	bf58      	it	pl
 800c1a4:	6963      	ldrpl	r3, [r4, #20]
 800c1a6:	60a3      	str	r3, [r4, #8]
 800c1a8:	e7f2      	b.n	800c190 <__swsetup_r+0xac>
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e7f7      	b.n	800c19e <__swsetup_r+0xba>
 800c1ae:	bf00      	nop
 800c1b0:	20020018 	.word	0x20020018
 800c1b4:	0800f47c 	.word	0x0800f47c
 800c1b8:	0800f49c 	.word	0x0800f49c
 800c1bc:	0800f45c 	.word	0x0800f45c

0800c1c0 <_close_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4c06      	ldr	r4, [pc, #24]	; (800c1dc <_close_r+0x1c>)
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	6023      	str	r3, [r4, #0]
 800c1cc:	f7ff f982 	bl	800b4d4 <_close>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d102      	bne.n	800c1da <_close_r+0x1a>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	b103      	cbz	r3, 800c1da <_close_r+0x1a>
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	20027d48 	.word	0x20027d48

0800c1e0 <__sflush_r>:
 800c1e0:	898a      	ldrh	r2, [r1, #12]
 800c1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	0710      	lsls	r0, r2, #28
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	d45a      	bmi.n	800c2a4 <__sflush_r+0xc4>
 800c1ee:	684b      	ldr	r3, [r1, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dc05      	bgt.n	800c200 <__sflush_r+0x20>
 800c1f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dc02      	bgt.n	800c200 <__sflush_r+0x20>
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c202:	2e00      	cmp	r6, #0
 800c204:	d0f9      	beq.n	800c1fa <__sflush_r+0x1a>
 800c206:	2300      	movs	r3, #0
 800c208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c20c:	682f      	ldr	r7, [r5, #0]
 800c20e:	602b      	str	r3, [r5, #0]
 800c210:	d033      	beq.n	800c27a <__sflush_r+0x9a>
 800c212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	075a      	lsls	r2, r3, #29
 800c218:	d505      	bpl.n	800c226 <__sflush_r+0x46>
 800c21a:	6863      	ldr	r3, [r4, #4]
 800c21c:	1ac0      	subs	r0, r0, r3
 800c21e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c220:	b10b      	cbz	r3, 800c226 <__sflush_r+0x46>
 800c222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c224:	1ac0      	subs	r0, r0, r3
 800c226:	2300      	movs	r3, #0
 800c228:	4602      	mov	r2, r0
 800c22a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c22c:	6a21      	ldr	r1, [r4, #32]
 800c22e:	4628      	mov	r0, r5
 800c230:	47b0      	blx	r6
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	d106      	bne.n	800c246 <__sflush_r+0x66>
 800c238:	6829      	ldr	r1, [r5, #0]
 800c23a:	291d      	cmp	r1, #29
 800c23c:	d84b      	bhi.n	800c2d6 <__sflush_r+0xf6>
 800c23e:	4a2b      	ldr	r2, [pc, #172]	; (800c2ec <__sflush_r+0x10c>)
 800c240:	40ca      	lsrs	r2, r1
 800c242:	07d6      	lsls	r6, r2, #31
 800c244:	d547      	bpl.n	800c2d6 <__sflush_r+0xf6>
 800c246:	2200      	movs	r2, #0
 800c248:	6062      	str	r2, [r4, #4]
 800c24a:	04d9      	lsls	r1, r3, #19
 800c24c:	6922      	ldr	r2, [r4, #16]
 800c24e:	6022      	str	r2, [r4, #0]
 800c250:	d504      	bpl.n	800c25c <__sflush_r+0x7c>
 800c252:	1c42      	adds	r2, r0, #1
 800c254:	d101      	bne.n	800c25a <__sflush_r+0x7a>
 800c256:	682b      	ldr	r3, [r5, #0]
 800c258:	b903      	cbnz	r3, 800c25c <__sflush_r+0x7c>
 800c25a:	6560      	str	r0, [r4, #84]	; 0x54
 800c25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c25e:	602f      	str	r7, [r5, #0]
 800c260:	2900      	cmp	r1, #0
 800c262:	d0ca      	beq.n	800c1fa <__sflush_r+0x1a>
 800c264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c268:	4299      	cmp	r1, r3
 800c26a:	d002      	beq.n	800c272 <__sflush_r+0x92>
 800c26c:	4628      	mov	r0, r5
 800c26e:	f7ff faff 	bl	800b870 <_free_r>
 800c272:	2000      	movs	r0, #0
 800c274:	6360      	str	r0, [r4, #52]	; 0x34
 800c276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27a:	6a21      	ldr	r1, [r4, #32]
 800c27c:	2301      	movs	r3, #1
 800c27e:	4628      	mov	r0, r5
 800c280:	47b0      	blx	r6
 800c282:	1c41      	adds	r1, r0, #1
 800c284:	d1c6      	bne.n	800c214 <__sflush_r+0x34>
 800c286:	682b      	ldr	r3, [r5, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d0c3      	beq.n	800c214 <__sflush_r+0x34>
 800c28c:	2b1d      	cmp	r3, #29
 800c28e:	d001      	beq.n	800c294 <__sflush_r+0xb4>
 800c290:	2b16      	cmp	r3, #22
 800c292:	d101      	bne.n	800c298 <__sflush_r+0xb8>
 800c294:	602f      	str	r7, [r5, #0]
 800c296:	e7b0      	b.n	800c1fa <__sflush_r+0x1a>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29e:	81a3      	strh	r3, [r4, #12]
 800c2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a4:	690f      	ldr	r7, [r1, #16]
 800c2a6:	2f00      	cmp	r7, #0
 800c2a8:	d0a7      	beq.n	800c1fa <__sflush_r+0x1a>
 800c2aa:	0793      	lsls	r3, r2, #30
 800c2ac:	680e      	ldr	r6, [r1, #0]
 800c2ae:	bf08      	it	eq
 800c2b0:	694b      	ldreq	r3, [r1, #20]
 800c2b2:	600f      	str	r7, [r1, #0]
 800c2b4:	bf18      	it	ne
 800c2b6:	2300      	movne	r3, #0
 800c2b8:	eba6 0807 	sub.w	r8, r6, r7
 800c2bc:	608b      	str	r3, [r1, #8]
 800c2be:	f1b8 0f00 	cmp.w	r8, #0
 800c2c2:	dd9a      	ble.n	800c1fa <__sflush_r+0x1a>
 800c2c4:	4643      	mov	r3, r8
 800c2c6:	463a      	mov	r2, r7
 800c2c8:	6a21      	ldr	r1, [r4, #32]
 800c2ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b0      	blx	r6
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	dc07      	bgt.n	800c2e4 <__sflush_r+0x104>
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2da:	81a3      	strh	r3, [r4, #12]
 800c2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e4:	4407      	add	r7, r0
 800c2e6:	eba8 0800 	sub.w	r8, r8, r0
 800c2ea:	e7e8      	b.n	800c2be <__sflush_r+0xde>
 800c2ec:	20400001 	.word	0x20400001

0800c2f0 <_fflush_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	690b      	ldr	r3, [r1, #16]
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	b1db      	cbz	r3, 800c332 <_fflush_r+0x42>
 800c2fa:	b118      	cbz	r0, 800c304 <_fflush_r+0x14>
 800c2fc:	6983      	ldr	r3, [r0, #24]
 800c2fe:	b90b      	cbnz	r3, 800c304 <_fflush_r+0x14>
 800c300:	f7ff fa24 	bl	800b74c <__sinit>
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <_fflush_r+0x48>)
 800c306:	429c      	cmp	r4, r3
 800c308:	d109      	bne.n	800c31e <_fflush_r+0x2e>
 800c30a:	686c      	ldr	r4, [r5, #4]
 800c30c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c310:	b17b      	cbz	r3, 800c332 <_fflush_r+0x42>
 800c312:	4621      	mov	r1, r4
 800c314:	4628      	mov	r0, r5
 800c316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c31a:	f7ff bf61 	b.w	800c1e0 <__sflush_r>
 800c31e:	4b07      	ldr	r3, [pc, #28]	; (800c33c <_fflush_r+0x4c>)
 800c320:	429c      	cmp	r4, r3
 800c322:	d101      	bne.n	800c328 <_fflush_r+0x38>
 800c324:	68ac      	ldr	r4, [r5, #8]
 800c326:	e7f1      	b.n	800c30c <_fflush_r+0x1c>
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <_fflush_r+0x50>)
 800c32a:	429c      	cmp	r4, r3
 800c32c:	bf08      	it	eq
 800c32e:	68ec      	ldreq	r4, [r5, #12]
 800c330:	e7ec      	b.n	800c30c <_fflush_r+0x1c>
 800c332:	2000      	movs	r0, #0
 800c334:	bd38      	pop	{r3, r4, r5, pc}
 800c336:	bf00      	nop
 800c338:	0800f47c 	.word	0x0800f47c
 800c33c:	0800f49c 	.word	0x0800f49c
 800c340:	0800f45c 	.word	0x0800f45c

0800c344 <_lseek_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4c07      	ldr	r4, [pc, #28]	; (800c364 <_lseek_r+0x20>)
 800c348:	4605      	mov	r5, r0
 800c34a:	4608      	mov	r0, r1
 800c34c:	4611      	mov	r1, r2
 800c34e:	2200      	movs	r2, #0
 800c350:	6022      	str	r2, [r4, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	f7ff f8c8 	bl	800b4e8 <_lseek>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d102      	bne.n	800c362 <_lseek_r+0x1e>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	b103      	cbz	r3, 800c362 <_lseek_r+0x1e>
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	20027d48 	.word	0x20027d48

0800c368 <__swhatbuf_r>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	460e      	mov	r6, r1
 800c36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c370:	2900      	cmp	r1, #0
 800c372:	b090      	sub	sp, #64	; 0x40
 800c374:	4614      	mov	r4, r2
 800c376:	461d      	mov	r5, r3
 800c378:	da07      	bge.n	800c38a <__swhatbuf_r+0x22>
 800c37a:	2300      	movs	r3, #0
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	89b3      	ldrh	r3, [r6, #12]
 800c380:	061a      	lsls	r2, r3, #24
 800c382:	d410      	bmi.n	800c3a6 <__swhatbuf_r+0x3e>
 800c384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c388:	e00e      	b.n	800c3a8 <__swhatbuf_r+0x40>
 800c38a:	aa01      	add	r2, sp, #4
 800c38c:	f000 f864 	bl	800c458 <_fstat_r>
 800c390:	2800      	cmp	r0, #0
 800c392:	dbf2      	blt.n	800c37a <__swhatbuf_r+0x12>
 800c394:	9a02      	ldr	r2, [sp, #8]
 800c396:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c39a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c39e:	425a      	negs	r2, r3
 800c3a0:	415a      	adcs	r2, r3
 800c3a2:	602a      	str	r2, [r5, #0]
 800c3a4:	e7ee      	b.n	800c384 <__swhatbuf_r+0x1c>
 800c3a6:	2340      	movs	r3, #64	; 0x40
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	6023      	str	r3, [r4, #0]
 800c3ac:	b010      	add	sp, #64	; 0x40
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}

0800c3b0 <__smakebuf_r>:
 800c3b0:	898b      	ldrh	r3, [r1, #12]
 800c3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3b4:	079d      	lsls	r5, r3, #30
 800c3b6:	4606      	mov	r6, r0
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	d507      	bpl.n	800c3cc <__smakebuf_r+0x1c>
 800c3bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	6123      	str	r3, [r4, #16]
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	6163      	str	r3, [r4, #20]
 800c3c8:	b002      	add	sp, #8
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	ab01      	add	r3, sp, #4
 800c3ce:	466a      	mov	r2, sp
 800c3d0:	f7ff ffca 	bl	800c368 <__swhatbuf_r>
 800c3d4:	9900      	ldr	r1, [sp, #0]
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7ff fa97 	bl	800b90c <_malloc_r>
 800c3de:	b948      	cbnz	r0, 800c3f4 <__smakebuf_r+0x44>
 800c3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e4:	059a      	lsls	r2, r3, #22
 800c3e6:	d4ef      	bmi.n	800c3c8 <__smakebuf_r+0x18>
 800c3e8:	f023 0303 	bic.w	r3, r3, #3
 800c3ec:	f043 0302 	orr.w	r3, r3, #2
 800c3f0:	81a3      	strh	r3, [r4, #12]
 800c3f2:	e7e3      	b.n	800c3bc <__smakebuf_r+0xc>
 800c3f4:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <__smakebuf_r+0x7c>)
 800c3f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	6020      	str	r0, [r4, #0]
 800c3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c400:	81a3      	strh	r3, [r4, #12]
 800c402:	9b00      	ldr	r3, [sp, #0]
 800c404:	6163      	str	r3, [r4, #20]
 800c406:	9b01      	ldr	r3, [sp, #4]
 800c408:	6120      	str	r0, [r4, #16]
 800c40a:	b15b      	cbz	r3, 800c424 <__smakebuf_r+0x74>
 800c40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c410:	4630      	mov	r0, r6
 800c412:	f000 f833 	bl	800c47c <_isatty_r>
 800c416:	b128      	cbz	r0, 800c424 <__smakebuf_r+0x74>
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	f023 0303 	bic.w	r3, r3, #3
 800c41e:	f043 0301 	orr.w	r3, r3, #1
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	431d      	orrs	r5, r3
 800c428:	81a5      	strh	r5, [r4, #12]
 800c42a:	e7cd      	b.n	800c3c8 <__smakebuf_r+0x18>
 800c42c:	0800b6cd 	.word	0x0800b6cd

0800c430 <__malloc_lock>:
 800c430:	4770      	bx	lr

0800c432 <__malloc_unlock>:
 800c432:	4770      	bx	lr

0800c434 <_read_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4c07      	ldr	r4, [pc, #28]	; (800c454 <_read_r+0x20>)
 800c438:	4605      	mov	r5, r0
 800c43a:	4608      	mov	r0, r1
 800c43c:	4611      	mov	r1, r2
 800c43e:	2200      	movs	r2, #0
 800c440:	6022      	str	r2, [r4, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	f7ff f810 	bl	800b468 <_read>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_read_r+0x1e>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_read_r+0x1e>
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20027d48 	.word	0x20027d48

0800c458 <_fstat_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4c07      	ldr	r4, [pc, #28]	; (800c478 <_fstat_r+0x20>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4605      	mov	r5, r0
 800c460:	4608      	mov	r0, r1
 800c462:	4611      	mov	r1, r2
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	f7ff f838 	bl	800b4da <_fstat>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d102      	bne.n	800c474 <_fstat_r+0x1c>
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	b103      	cbz	r3, 800c474 <_fstat_r+0x1c>
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	bd38      	pop	{r3, r4, r5, pc}
 800c476:	bf00      	nop
 800c478:	20027d48 	.word	0x20027d48

0800c47c <_isatty_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4c06      	ldr	r4, [pc, #24]	; (800c498 <_isatty_r+0x1c>)
 800c480:	2300      	movs	r3, #0
 800c482:	4605      	mov	r5, r0
 800c484:	4608      	mov	r0, r1
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	f7ff f82c 	bl	800b4e4 <_isatty>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_isatty_r+0x1a>
 800c490:	6823      	ldr	r3, [r4, #0]
 800c492:	b103      	cbz	r3, 800c496 <_isatty_r+0x1a>
 800c494:	602b      	str	r3, [r5, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	20027d48 	.word	0x20027d48

0800c49c <_init>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr

0800c4a8 <_fini>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr
