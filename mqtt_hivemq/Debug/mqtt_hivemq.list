
mqtt_hivemq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001707c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c30  0801727c  0801727c  0002727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801aeac  0801aeac  0002aeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aeb4  0801aeb4  0002aeb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801aeb8  0801aeb8  0002aeb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0801aebc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b4e4  200001e4  0801b0a0  000301e4  2**2
                  ALLOC
  8 ._user_heap_stack 00001800  2000b6c8  0801b0a0  0003b6c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c5a9  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006a40  00000000  00000000  0006c7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002068  00000000  00000000  00073200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001fc0  00000000  00000000  00075268  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014718  00000000  00000000  00077228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000adc7  00000000  00000000  0008b940  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00096707  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000091f0  00000000  00000000  00096784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08017264 	.word	0x08017264

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08017264 	.word	0x08017264

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <mqtt_incoming_publish_cb>:
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  sprintf(buffer,"Incoming publish at topic %s with total length %u\n\r", topic, (unsigned int)tot_len);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	491f      	ldr	r1, [pc, #124]	; (80006b0 <mqtt_incoming_publish_cb+0x90>)
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <mqtt_incoming_publish_cb+0x94>)
 8000634:	f015 fcb6 	bl	8015fa4 <siprintf>
HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000638:	481e      	ldr	r0, [pc, #120]	; (80006b4 <mqtt_incoming_publish_cb+0x94>)
 800063a:	f7ff fe0b 	bl	8000254 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	491b      	ldr	r1, [pc, #108]	; (80006b4 <mqtt_incoming_publish_cb+0x94>)
 8000648:	481b      	ldr	r0, [pc, #108]	; (80006b8 <mqtt_incoming_publish_cb+0x98>)
 800064a:	f005 f9e9 	bl	8005a20 <HAL_UART_Transmit>
  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 800064e:	491b      	ldr	r1, [pc, #108]	; (80006bc <mqtt_incoming_publish_cb+0x9c>)
 8000650:	68b8      	ldr	r0, [r7, #8]
 8000652:	f7ff fdf5 	bl	8000240 <strcmp>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <mqtt_incoming_publish_cb+0x44>
    inpub_id = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <mqtt_incoming_publish_cb+0xa0>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
  else {
    /* For all other topics */
    inpub_id = 9;
  }

}
 8000662:	e020      	b.n	80006a6 <mqtt_incoming_publish_cb+0x86>
  } else if(topic[0] == 'A') {
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b41      	cmp	r3, #65	; 0x41
 800066a:	d103      	bne.n	8000674 <mqtt_incoming_publish_cb+0x54>
    inpub_id = 1;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <mqtt_incoming_publish_cb+0xa0>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	e018      	b.n	80006a6 <mqtt_incoming_publish_cb+0x86>
  } else if(strcmp(topic, "hello_world") == 0) {
 8000674:	4913      	ldr	r1, [pc, #76]	; (80006c4 <mqtt_incoming_publish_cb+0xa4>)
 8000676:	68b8      	ldr	r0, [r7, #8]
 8000678:	f7ff fde2 	bl	8000240 <strcmp>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d103      	bne.n	800068a <mqtt_incoming_publish_cb+0x6a>
	  inpub_id = 2;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <mqtt_incoming_publish_cb+0xa0>)
 8000684:	2202      	movs	r2, #2
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	e00d      	b.n	80006a6 <mqtt_incoming_publish_cb+0x86>
  } else if(strcmp(topic, "hello_worldq") == 0) {
 800068a:	490f      	ldr	r1, [pc, #60]	; (80006c8 <mqtt_incoming_publish_cb+0xa8>)
 800068c:	68b8      	ldr	r0, [r7, #8]
 800068e:	f7ff fdd7 	bl	8000240 <strcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d103      	bne.n	80006a0 <mqtt_incoming_publish_cb+0x80>
	 inpub_id = 3;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <mqtt_incoming_publish_cb+0xa0>)
 800069a:	2203      	movs	r2, #3
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	e002      	b.n	80006a6 <mqtt_incoming_publish_cb+0x86>
    inpub_id = 9;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <mqtt_incoming_publish_cb+0xa0>)
 80006a2:	2209      	movs	r2, #9
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	0801727c 	.word	0x0801727c
 80006b4:	200008a8 	.word	0x200008a8
 80006b8:	20000c98 	.word	0x20000c98
 80006bc:	080172b0 	.word	0x080172b0
 80006c0:	20000200 	.word	0x20000200
 80006c4:	080172c0 	.word	0x080172c0
 80006c8:	080172cc 	.word	0x080172cc

080006cc <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4611      	mov	r1, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	460b      	mov	r3, r1
 80006dc:	80fb      	strh	r3, [r7, #6]
 80006de:	4613      	mov	r3, r2
 80006e0:	717b      	strb	r3, [r7, #5]
	  sprintf(buffer,"Incoming publish payload with length %d, flags %u\n\r", len, (unsigned int)flags);
 80006e2:	88fa      	ldrh	r2, [r7, #6]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	494a      	ldr	r1, [pc, #296]	; (8000810 <mqtt_incoming_data_cb+0x144>)
 80006e8:	484a      	ldr	r0, [pc, #296]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 80006ea:	f015 fc5b 	bl	8015fa4 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80006ee:	4849      	ldr	r0, [pc, #292]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 80006f0:	f7ff fdb0 	bl	8000254 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	4945      	ldr	r1, [pc, #276]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 80006fe:	4846      	ldr	r0, [pc, #280]	; (8000818 <mqtt_incoming_data_cb+0x14c>)
 8000700:	f005 f98e 	bl	8005a20 <HAL_UART_Transmit>
	  sprintf(buffer,"mqtt_incoming_data_cb: %s\n\r", (const char *)data);
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	4945      	ldr	r1, [pc, #276]	; (800081c <mqtt_incoming_data_cb+0x150>)
 8000708:	4842      	ldr	r0, [pc, #264]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 800070a:	f015 fc4b 	bl	8015fa4 <siprintf>
	   HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800070e:	4841      	ldr	r0, [pc, #260]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 8000710:	f7ff fda0 	bl	8000254 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	493d      	ldr	r1, [pc, #244]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 800071e:	483e      	ldr	r0, [pc, #248]	; (8000818 <mqtt_incoming_data_cb+0x14c>)
 8000720:	f005 f97e 	bl	8005a20 <HAL_UART_Transmit>
  if(flags & MQTT_DATA_FLAG_LAST) {
 8000724:	797b      	ldrb	r3, [r7, #5]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	d06b      	beq.n	8000806 <mqtt_incoming_data_cb+0x13a>


    if(inpub_id == 0) {
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <mqtt_incoming_data_cb+0x154>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d117      	bne.n	8000766 <mqtt_incoming_data_cb+0x9a>
      /* Don't trust the publisher, check zero termination */
      if(data[len-1] == 0) {
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	3b01      	subs	r3, #1
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d160      	bne.n	8000806 <mqtt_incoming_data_cb+0x13a>
    	  sprintf(buffer,"mqtt_incoming_data_cb: %s\n\r", (const char *)data);
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	4935      	ldr	r1, [pc, #212]	; (800081c <mqtt_incoming_data_cb+0x150>)
 8000748:	4832      	ldr	r0, [pc, #200]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 800074a:	f015 fc2b 	bl	8015fa4 <siprintf>
    	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800074e:	4831      	ldr	r0, [pc, #196]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 8000750:	f7ff fd80 	bl	8000254 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	492d      	ldr	r1, [pc, #180]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 800075e:	482e      	ldr	r0, [pc, #184]	; (8000818 <mqtt_incoming_data_cb+0x14c>)
 8000760:	f005 f95e 	bl	8005a20 <HAL_UART_Transmit>
    }
  } else {
    /* Handle fragmented payload, store in buffer, write to file or whatever */
  }

}
 8000764:	e04f      	b.n	8000806 <mqtt_incoming_data_cb+0x13a>
    } else if(inpub_id == 1) {
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <mqtt_incoming_data_cb+0x154>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d04b      	beq.n	8000806 <mqtt_incoming_data_cb+0x13a>
    } else if(inpub_id == 2) {
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <mqtt_incoming_data_cb+0x154>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d10b      	bne.n	800078e <mqtt_incoming_data_cb+0xc2>
    	if(strcmp(data, "0") == 0){ //Then, turn off LED3
 8000776:	492b      	ldr	r1, [pc, #172]	; (8000824 <mqtt_incoming_data_cb+0x158>)
 8000778:	68b8      	ldr	r0, [r7, #8]
 800077a:	f7ff fd61 	bl	8000240 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d040      	beq.n	8000806 <mqtt_incoming_data_cb+0x13a>
    	}else if (strcmp(data, "1" == 0)){ //Then turn on LED3
 8000784:	2100      	movs	r1, #0
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f7ff fd5a 	bl	8000240 <strcmp>
}
 800078c:	e03b      	b.n	8000806 <mqtt_incoming_data_cb+0x13a>
    } else if(inpub_id == 3) {
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <mqtt_incoming_data_cb+0x154>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d112      	bne.n	80007bc <mqtt_incoming_data_cb+0xf0>
    	if(strcmp(data, "0") == 0){ //Then, turn off LED2
 8000796:	4923      	ldr	r1, [pc, #140]	; (8000824 <mqtt_incoming_data_cb+0x158>)
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff fd51 	bl	8000240 <strcmp>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d030      	beq.n	8000806 <mqtt_incoming_data_cb+0x13a>
    	    } else if(strcmp(data, "1") == 0){ //Then turn on LED2
 80007a4:	4920      	ldr	r1, [pc, #128]	; (8000828 <mqtt_incoming_data_cb+0x15c>)
 80007a6:	68b8      	ldr	r0, [r7, #8]
 80007a8:	f7ff fd4a 	bl	8000240 <strcmp>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d029      	beq.n	8000806 <mqtt_incoming_data_cb+0x13a>
    	    } else if(strcmp(data, "2") == 0){ //Then turn on LED2
 80007b2:	491e      	ldr	r1, [pc, #120]	; (800082c <mqtt_incoming_data_cb+0x160>)
 80007b4:	68b8      	ldr	r0, [r7, #8]
 80007b6:	f7ff fd43 	bl	8000240 <strcmp>
}
 80007ba:	e024      	b.n	8000806 <mqtt_incoming_data_cb+0x13a>
      sprintf(buffer,"mqtt_incoming_data_cb: Ignoring payload...\n\r");
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <mqtt_incoming_data_cb+0x164>)
 80007c0:	4614      	mov	r4, r2
 80007c2:	469e      	mov	lr, r3
 80007c4:	f104 0c20 	add.w	ip, r4, #32
 80007c8:	4675      	mov	r5, lr
 80007ca:	4626      	mov	r6, r4
 80007cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ce:	6028      	str	r0, [r5, #0]
 80007d0:	6069      	str	r1, [r5, #4]
 80007d2:	60aa      	str	r2, [r5, #8]
 80007d4:	60eb      	str	r3, [r5, #12]
 80007d6:	3410      	adds	r4, #16
 80007d8:	f10e 0e10 	add.w	lr, lr, #16
 80007dc:	4564      	cmp	r4, ip
 80007de:	d1f3      	bne.n	80007c8 <mqtt_incoming_data_cb+0xfc>
 80007e0:	4675      	mov	r5, lr
 80007e2:	4623      	mov	r3, r4
 80007e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007e6:	6028      	str	r0, [r5, #0]
 80007e8:	6069      	str	r1, [r5, #4]
 80007ea:	60aa      	str	r2, [r5, #8]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	732b      	strb	r3, [r5, #12]
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 80007f2:	f7ff fd2f 	bl	8000254 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	4905      	ldr	r1, [pc, #20]	; (8000814 <mqtt_incoming_data_cb+0x148>)
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <mqtt_incoming_data_cb+0x14c>)
 8000802:	f005 f90d 	bl	8005a20 <HAL_UART_Transmit>
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080e:	bf00      	nop
 8000810:	080172dc 	.word	0x080172dc
 8000814:	200008a8 	.word	0x200008a8
 8000818:	20000c98 	.word	0x20000c98
 800081c:	08017310 	.word	0x08017310
 8000820:	20000200 	.word	0x20000200
 8000824:	0801732c 	.word	0x0801732c
 8000828:	08017330 	.word	0x08017330
 800082c:	08017334 	.word	0x08017334
 8000830:	08017338 	.word	0x08017338

08000834 <mqtt_sub_request_cb>:
static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  sprintf(buffer,"Subscribe result: %d\n\r", result);
 8000840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000844:	461a      	mov	r2, r3
 8000846:	4909      	ldr	r1, [pc, #36]	; (800086c <mqtt_sub_request_cb+0x38>)
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <mqtt_sub_request_cb+0x3c>)
 800084a:	f015 fbab 	bl	8015fa4 <siprintf>
  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <mqtt_sub_request_cb+0x3c>)
 8000850:	f7ff fd00 	bl	8000254 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	4904      	ldr	r1, [pc, #16]	; (8000870 <mqtt_sub_request_cb+0x3c>)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <mqtt_sub_request_cb+0x40>)
 8000860:	f005 f8de 	bl	8005a20 <HAL_UART_Transmit>

}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08017368 	.word	0x08017368
 8000870:	200008a8 	.word	0x200008a8
 8000874:	20000c98 	.word	0x20000c98

08000878 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af02      	add	r7, sp, #8
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	4613      	mov	r3, r2
 8000884:	80fb      	strh	r3, [r7, #6]
  const char * topico = arg;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	617b      	str	r3, [r7, #20]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d14b      	bne.n	8000928 <mqtt_connection_cb+0xb0>
    sprintf(buffer,"mqtt_connection_cb: Successfully connected\n");
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <mqtt_connection_cb+0xe0>)
 8000892:	4a32      	ldr	r2, [pc, #200]	; (800095c <mqtt_connection_cb+0xe4>)
 8000894:	4614      	mov	r4, r2
 8000896:	469e      	mov	lr, r3
 8000898:	f104 0c20 	add.w	ip, r4, #32
 800089c:	4675      	mov	r5, lr
 800089e:	4626      	mov	r6, r4
 80008a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008a2:	6028      	str	r0, [r5, #0]
 80008a4:	6069      	str	r1, [r5, #4]
 80008a6:	60aa      	str	r2, [r5, #8]
 80008a8:	60eb      	str	r3, [r5, #12]
 80008aa:	3410      	adds	r4, #16
 80008ac:	f10e 0e10 	add.w	lr, lr, #16
 80008b0:	4564      	cmp	r4, ip
 80008b2:	d1f3      	bne.n	800089c <mqtt_connection_cb+0x24>
 80008b4:	4675      	mov	r5, lr
 80008b6:	4623      	mov	r3, r4
 80008b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008ba:	6028      	str	r0, [r5, #0]
 80008bc:	6069      	str	r1, [r5, #4]
 80008be:	60aa      	str	r2, [r5, #8]
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80008c0:	4825      	ldr	r0, [pc, #148]	; (8000958 <mqtt_connection_cb+0xe0>)
 80008c2:	f7ff fcc7 	bl	8000254 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	4922      	ldr	r1, [pc, #136]	; (8000958 <mqtt_connection_cb+0xe0>)
 80008d0:	4823      	ldr	r0, [pc, #140]	; (8000960 <mqtt_connection_cb+0xe8>)
 80008d2:	f005 f8a5 	bl	8005a20 <HAL_UART_Transmit>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <mqtt_connection_cb+0xec>)
 80008da:	4923      	ldr	r1, [pc, #140]	; (8000968 <mqtt_connection_cb+0xf0>)
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f008 fcb7 	bl	8009250 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "placa" with QoS level 0, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, topico, 0, mqtt_sub_request_cb, arg);
 80008e2:	2301      	movs	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <mqtt_connection_cb+0xf4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	6979      	ldr	r1, [r7, #20]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f008 fbd7 	bl	80090a4 <mqtt_sub_unsub>
 80008f6:	4603      	mov	r3, r0
 80008f8:	74fb      	strb	r3, [r7, #19]

    if(err != ERR_OK) {
 80008fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d026      	beq.n	8000950 <mqtt_connection_cb+0xd8>
      sprintf(buffer,"mqtt_subscribe return: %d\n", err);
 8000902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000906:	461a      	mov	r2, r3
 8000908:	4919      	ldr	r1, [pc, #100]	; (8000970 <mqtt_connection_cb+0xf8>)
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <mqtt_connection_cb+0xe0>)
 800090c:	f015 fb4a 	bl	8015fa4 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <mqtt_connection_cb+0xe0>)
 8000912:	f7ff fc9f 	bl	8000254 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	b29a      	uxth	r2, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <mqtt_connection_cb+0xe0>)
 8000920:	480f      	ldr	r0, [pc, #60]	; (8000960 <mqtt_connection_cb+0xe8>)
 8000922:	f005 f87d 	bl	8005a20 <HAL_UART_Transmit>

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }

}
 8000926:	e013      	b.n	8000950 <mqtt_connection_cb+0xd8>
    sprintf(buffer,"mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	461a      	mov	r2, r3
 800092c:	4911      	ldr	r1, [pc, #68]	; (8000974 <mqtt_connection_cb+0xfc>)
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <mqtt_connection_cb+0xe0>)
 8000930:	f015 fb38 	bl	8015fa4 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <mqtt_connection_cb+0xe0>)
 8000936:	f7ff fc8d 	bl	8000254 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	4905      	ldr	r1, [pc, #20]	; (8000958 <mqtt_connection_cb+0xe0>)
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <mqtt_connection_cb+0xe8>)
 8000946:	f005 f86b 	bl	8005a20 <HAL_UART_Transmit>
    example_do_connect(client);
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f000 f84a 	bl	80009e4 <example_do_connect>
}
 8000950:	bf00      	nop
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	200008a8 	.word	0x200008a8
 800095c:	08017380 	.word	0x08017380
 8000960:	20000c98 	.word	0x20000c98
 8000964:	080006cd 	.word	0x080006cd
 8000968:	08000621 	.word	0x08000621
 800096c:	08000835 	.word	0x08000835
 8000970:	080173ac 	.word	0x080173ac
 8000974:	080173c8 	.word	0x080173c8

08000978 <serverFound>:

void serverFound(const char *name,ip_addr_t ipaddr, void *arg)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]

	     mqttServerIP =ipaddr ;
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <serverFound+0x5c>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	6013      	str	r3, [r2, #0]
	   sprintf(buffer,"mqttServerIP %d.%d.%d.%d\n\r",(mqttServerIP.addr & 0xff), ((mqttServerIP.addr >> 8) & 0xff), ((mqttServerIP.addr >> 16) & 0xff), (mqttServerIP.addr >> 24));
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <serverFound+0x5c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	b2d9      	uxtb	r1, r3
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <serverFound+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b2d8      	uxtb	r0, r3
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <serverFound+0x5c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <serverFound+0x5c>)
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	0e12      	lsrs	r2, r2, #24
 80009a6:	9201      	str	r2, [sp, #4]
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	490a      	ldr	r1, [pc, #40]	; (80009d8 <serverFound+0x60>)
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <serverFound+0x64>)
 80009b2:	f015 faf7 	bl	8015fa4 <siprintf>
		  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <serverFound+0x64>)
 80009b8:	f7ff fc4c 	bl	8000254 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	4905      	ldr	r1, [pc, #20]	; (80009dc <serverFound+0x64>)
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <serverFound+0x68>)
 80009c8:	f005 f82a 	bl	8005a20 <HAL_UART_Transmit>

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200008a4 	.word	0x200008a4
 80009d8:	080173f8 	.word	0x080173f8
 80009dc:	200008a8 	.word	0x200008a8
 80009e0:	20000c98 	.word	0x20000c98

080009e4 <example_do_connect>:
void example_do_connect(mqtt_client_t *client, const char *topic)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	221c      	movs	r2, #28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f015 fa46 	bl	8015e88 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "xonga";
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <example_do_connect+0xa0>)
 80009fe:	60bb      	str	r3, [r7, #8]

  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */
  dns_gethostbyname("broker.hivemq.com", &mqttServerIP,serverFound);
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <example_do_connect+0xa4>)
 8000a02:	4922      	ldr	r1, [pc, #136]	; (8000a8c <example_do_connect+0xa8>)
 8000a04:	4822      	ldr	r0, [pc, #136]	; (8000a90 <example_do_connect+0xac>)
 8000a06:	f009 fe87 	bl	800a718 <dns_gethostbyname>
  sprintf(buffer,"mqtt_server :broker.hivemq.com \n\r server address %s\n\r",ip4addr_ntoa((const ip4_addr_t *)&mqttServerIP) );
 8000a0a:	4820      	ldr	r0, [pc, #128]	; (8000a8c <example_do_connect+0xa8>)
 8000a0c:	f00b fbd0 	bl	800c1b0 <ip4addr_ntoa>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	491f      	ldr	r1, [pc, #124]	; (8000a94 <example_do_connect+0xb0>)
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <example_do_connect+0xb4>)
 8000a18:	f015 fac4 	bl	8015fa4 <siprintf>
  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000a1c:	481e      	ldr	r0, [pc, #120]	; (8000a98 <example_do_connect+0xb4>)
 8000a1e:	f7ff fc19 	bl	8000254 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	491b      	ldr	r1, [pc, #108]	; (8000a98 <example_do_connect+0xb4>)
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <example_do_connect+0xb8>)
 8000a2e:	f004 fff7 	bl	8005a20 <HAL_UART_Transmit>
//  IP4_ADDR(&mqttServerIP, 169, 254, 173, 71);
//  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, topic, &ci);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <example_do_connect+0xbc>)
 8000a3e:	f240 725b 	movw	r2, #1883	; 0x75b
 8000a42:	4912      	ldr	r1, [pc, #72]	; (8000a8c <example_do_connect+0xa8>)
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f008 fc31 	bl	80092ac <mqtt_client_connect>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 8000a50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d011      	beq.n	8000a7c <example_do_connect+0x98>
    sprintf(buffer,"mqtt_connect return %d\n\r", err);
 8000a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4911      	ldr	r1, [pc, #68]	; (8000aa4 <example_do_connect+0xc0>)
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <example_do_connect+0xb4>)
 8000a62:	f015 fa9f 	bl	8015fa4 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <example_do_connect+0xb4>)
 8000a68:	f7ff fbf4 	bl	8000254 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	4908      	ldr	r1, [pc, #32]	; (8000a98 <example_do_connect+0xb4>)
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <example_do_connect+0xb8>)
 8000a78:	f004 ffd2 	bl	8005a20 <HAL_UART_Transmit>

  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08017414 	.word	0x08017414
 8000a88:	08000979 	.word	0x08000979
 8000a8c:	200008a4 	.word	0x200008a4
 8000a90:	0801741c 	.word	0x0801741c
 8000a94:	08017430 	.word	0x08017430
 8000a98:	200008a8 	.word	0x200008a8
 8000a9c:	20000c98 	.word	0x20000c98
 8000aa0:	08000879 	.word	0x08000879
 8000aa4:	08017468 	.word	0x08017468

08000aa8 <mqtt_pub_request_cb>:

/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 8000ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d011      	beq.n	8000ae0 <mqtt_pub_request_cb+0x38>
    sprintf(buffer,"Publish result: %d\n", result);
 8000abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4909      	ldr	r1, [pc, #36]	; (8000ae8 <mqtt_pub_request_cb+0x40>)
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <mqtt_pub_request_cb+0x44>)
 8000ac6:	f015 fa6d 	bl	8015fa4 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <mqtt_pub_request_cb+0x44>)
 8000acc:	f7ff fbc2 	bl	8000254 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad8:	4904      	ldr	r1, [pc, #16]	; (8000aec <mqtt_pub_request_cb+0x44>)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <mqtt_pub_request_cb+0x48>)
 8000adc:	f004 ffa0 	bl	8005a20 <HAL_UART_Transmit>

  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08017484 	.word	0x08017484
 8000aec:	200008a8 	.word	0x200008a8
 8000af0:	20000c98 	.word	0x20000c98

08000af4 <example_publish>:
void example_publish(mqtt_client_t *client, void *arg)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af04      	add	r7, sp, #16
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  //const char *pub_payload= "Hola mundo de mierda!";
  const char *pub_payload= arg;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  err_t err;
  u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 8000b02:	2300      	movs	r3, #0
 8000b04:	72fb      	strb	r3, [r7, #11]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000b06:	2300      	movs	r3, #0
 8000b08:	72bb      	strb	r3, [r7, #10]
  err = mqtt_publish(client, "MYDEVICE3", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fba2 	bl	8000254 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	9303      	str	r3, [sp, #12]
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <example_publish+0x74>)
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	7abb      	ldrb	r3, [r7, #10]
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	4613      	mov	r3, r2
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4910      	ldr	r1, [pc, #64]	; (8000b6c <example_publish+0x78>)
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f008 f9e6 	bl	8008efc <mqtt_publish>
 8000b30:	4603      	mov	r3, r0
 8000b32:	727b      	strb	r3, [r7, #9]
  if(err != ERR_OK) {
 8000b34:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d011      	beq.n	8000b60 <example_publish+0x6c>
    sprintf(buffer,"Publish err: %d\n\r", err);
 8000b3c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000b40:	461a      	mov	r2, r3
 8000b42:	490b      	ldr	r1, [pc, #44]	; (8000b70 <example_publish+0x7c>)
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <example_publish+0x80>)
 8000b46:	f015 fa2d 	bl	8015fa4 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <example_publish+0x80>)
 8000b4c:	f7ff fb82 	bl	8000254 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b58:	4906      	ldr	r1, [pc, #24]	; (8000b74 <example_publish+0x80>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <example_publish+0x84>)
 8000b5c:	f004 ff60 	bl	8005a20 <HAL_UART_Transmit>

  }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08000aa9 	.word	0x08000aa9
 8000b6c:	08017498 	.word	0x08017498
 8000b70:	080174a4 	.word	0x080174a4
 8000b74:	200008a8 	.word	0x200008a8
 8000b78:	20000c98 	.word	0x20000c98

08000b7c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 30000))
 8000b84:	bf00      	nop
 8000b86:	1d39      	adds	r1, r7, #4
 8000b88:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <__io_putchar+0x28>)
 8000b90:	f004 ff46 	bl	8005a20 <HAL_UART_Transmit>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f5      	bne.n	8000b86 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000c98 	.word	0x20000c98

08000ba8 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 30000))
 8000bb2:	bf00      	nop
 8000bb4:	1df9      	adds	r1, r7, #7
 8000bb6:	f247 5330 	movw	r3, #30000	; 0x7530
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <__io_getchar+0x2c>)
 8000bbe:	f004 ffc0 	bl	8005b42 <HAL_UART_Receive>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f5      	bne.n	8000bb4 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000c98 	.word	0x20000c98

08000bd8 <RTC_CalendarShow>:
uint16_t years_int, Month_int, hours_int, mintues_int, days_int, second_int;

ip4_addr_t resolved;
static void RTC_CalendarShow(uint8_t *showtime, uint8_t *showdate)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <RTC_CalendarShow+0x8c>)
 8000bec:	f004 f82c 	bl	8004c48 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481a      	ldr	r0, [pc, #104]	; (8000c64 <RTC_CalendarShow+0x8c>)
 8000bfa:	f004 f92b 	bl	8004e54 <HAL_RTC_GetDate>
  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "time %d:%d:%d\n\r", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000bfe:	7b3b      	ldrb	r3, [r7, #12]
 8000c00:	461a      	mov	r2, r3
 8000c02:	7b7b      	ldrb	r3, [r7, #13]
 8000c04:	4619      	mov	r1, r3
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4916      	ldr	r1, [pc, #88]	; (8000c68 <RTC_CalendarShow+0x90>)
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f015 f9c8 	bl	8015fa4 <siprintf>
  HAL_UART_Transmit(&huart3,showtime,strlen(showtime),1000);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff fb1d 	bl	8000254 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <RTC_CalendarShow+0x94>)
 8000c26:	f004 fefb 	bl	8005a20 <HAL_UART_Transmit>
  /* Display date Format : mm-dd-yy */
  sprintf((char *)showdate, "date %d-%d-%d\n\r", sdatestructureget.Date, sdatestructureget.Month,sdatestructureget.Year);
 8000c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c34:	4619      	mov	r1, r3
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	490c      	ldr	r1, [pc, #48]	; (8000c70 <RTC_CalendarShow+0x98>)
 8000c40:	6838      	ldr	r0, [r7, #0]
 8000c42:	f015 f9af 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,showdate,strlen(showdate),1000);
 8000c46:	6838      	ldr	r0, [r7, #0]
 8000c48:	f7ff fb04 	bl	8000254 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <RTC_CalendarShow+0x94>)
 8000c58:	f004 fee2 	bl	8005a20 <HAL_UART_Transmit>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20001244 	.word	0x20001244
 8000c68:	080174b8 	.word	0x080174b8
 8000c6c:	20000c98 	.word	0x20000c98
 8000c70:	080174c8 	.word	0x080174c8

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c78:	f000 ff8e 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7c:	f000 f82a 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c80:	f000 f9cc 	bl	800101c <MX_GPIO_Init>
  MX_RTC_Init();
 8000c84:	f000 f8c2 	bl	8000e0c <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000c88:	f000 f96a 	bl	8000f60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c8c:	f000 f998 	bl	8000fc0 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000c90:	f005 ff00 	bl	8006a94 <MX_LWIP_Init>
  MX_TIM2_Init();
 8000c94:	f000 f916 	bl	8000ec4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  client = mqtt_client_new();
 8000c98:	f008 fafe 	bl	8009298 <mqtt_client_new>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <main+0x58>)
 8000ca0:	601a      	str	r2, [r3, #0]

  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <main+0x5c>)
 8000ca4:	f004 f9b6 	bl	8005014 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <main+0x3e>
 		  {
 		    /* Initialization Error */
 		    Error_Handler();
 8000cae:	f000 fd83 	bl	80017b8 <Error_Handler>
 		  }

 		  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
 		  /* Start Channel1 */
 		  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <main+0x5c>)
 8000cb4:	f004 fa06 	bl	80050c4 <HAL_TIM_Base_Start_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <main+0x4e>
 		  {
 		    /* Starting Error */
 		    Error_Handler();
 8000cbe:	f000 fd7b 	bl	80017b8 <Error_Handler>
 		  }
//httpd_init();
 fetc();
 8000cc2:	f000 fcbd 	bl	8001640 <fetc>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000cc6:	f005 ff63 	bl	8006b90 <MX_LWIP_Process>
 8000cca:	e7fc      	b.n	8000cc6 <main+0x52>
 8000ccc:	2000123c 	.word	0x2000123c
 8000cd0:	200029d4 	.word	0x200029d4

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b8      	sub	sp, #224	; 0xe0
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cde:	2234      	movs	r2, #52	; 0x34
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f015 f8d0 	bl	8015e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	2290      	movs	r2, #144	; 0x90
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f015 f8c1 	bl	8015e88 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d06:	f002 fd23 	bl	8003750 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4a3d      	ldr	r2, [pc, #244]	; (8000e00 <SystemClock_Config+0x12c>)
 8000d0c:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <SystemClock_Config+0x12c>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <SystemClock_Config+0x12c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d22:	4a38      	ldr	r2, [pc, #224]	; (8000e04 <SystemClock_Config+0x130>)
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <SystemClock_Config+0x130>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <SystemClock_Config+0x130>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d3a:	2309      	movs	r3, #9
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d62:	23d8      	movs	r3, #216	; 0xd8
 8000d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d6e:	2309      	movs	r3, #9
 8000d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fd49 	bl	8003810 <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d84:	f000 fd18 	bl	80017b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d88:	f002 fcf2 	bl	8003770 <HAL_PWREx_EnableOverDrive>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d92:	f000 fd11 	bl	80017b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000db8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dbc:	2107      	movs	r1, #7
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 ffd4 	bl	8003d6c <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000dca:	f000 fcf5 	bl	80017b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <SystemClock_Config+0x134>)
 8000dd0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 f9b8 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000df2:	f000 fce1 	bl	80017b8 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	37e0      	adds	r7, #224	; 0xe0
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000
 8000e08:	00200120 	.word	0x00200120

08000e0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e2a:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <MX_RTC_Init+0xb4>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e36:	227f      	movs	r2, #127	; 0x7f
 8000e38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e3c:	22ff      	movs	r2, #255	; 0xff
 8000e3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e52:	481a      	ldr	r0, [pc, #104]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e54:	f003 fda8 	bl	80049a8 <HAL_RTC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000e5e:	f000 fcab 	bl	80017b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000e80:	f003 fe24 	bl	8004acc <HAL_RTC_SetTime>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e8a:	f000 fc95 	bl	80017b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_RTC_Init+0xb0>)
 8000ea6:	f003 ff2d 	bl	8004d04 <HAL_RTC_SetDate>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000eb0:	f000 fc82 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20001244 	.word	0x20001244
 8000ec0:	40002800 	.word	0x40002800

08000ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000eec:	22d8      	movs	r2, #216	; 0xd8
 8000eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000000;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ef8:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f0a:	f004 f883 	bl	8005014 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f14:	f000 fc50 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f26:	f004 fa65 	bl	80053f4 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f30:	f000 fc42 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f42:	f004 fc73 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 fc34 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200029d4 	.word	0x200029d4
 8000f5c:	001e8480 	.word	0x001e8480

08000f60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <MX_USART3_UART_Init+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART3_UART_Init+0x58>)
 8000fa4:	f004 fcee 	bl	8005984 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 fc03 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000c98 	.word	0x20000c98
 8000fbc:	40004800 	.word	0x40004800

08000fc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2206      	movs	r2, #6
 8000fd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	f002 fa5b 	bl	80034be <HAL_PCD_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 fbd3 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000d1c 	.word	0x20000d1c

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4a4a      	ldr	r2, [pc, #296]	; (800115c <MX_GPIO_Init+0x140>)
 8001034:	4b49      	ldr	r3, [pc, #292]	; (800115c <MX_GPIO_Init+0x140>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <MX_GPIO_Init+0x140>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	4a44      	ldr	r2, [pc, #272]	; (800115c <MX_GPIO_Init+0x140>)
 800104c:	4b43      	ldr	r3, [pc, #268]	; (800115c <MX_GPIO_Init+0x140>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <MX_GPIO_Init+0x140>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4a3e      	ldr	r2, [pc, #248]	; (800115c <MX_GPIO_Init+0x140>)
 8001064:	4b3d      	ldr	r3, [pc, #244]	; (800115c <MX_GPIO_Init+0x140>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <MX_GPIO_Init+0x140>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4a38      	ldr	r2, [pc, #224]	; (800115c <MX_GPIO_Init+0x140>)
 800107c:	4b37      	ldr	r3, [pc, #220]	; (800115c <MX_GPIO_Init+0x140>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <MX_GPIO_Init+0x140>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <MX_GPIO_Init+0x140>)
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <MX_GPIO_Init+0x140>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <MX_GPIO_Init+0x140>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0x140>)
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <MX_GPIO_Init+0x140>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_GPIO_Init+0x140>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <MX_GPIO_Init+0x144>)
 80010ca:	f002 f9a1 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4824      	ldr	r0, [pc, #144]	; (8001164 <MX_GPIO_Init+0x148>)
 80010d4:	f002 f99c 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_GPIO_Init+0x14c>)
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481f      	ldr	r0, [pc, #124]	; (800116c <MX_GPIO_Init+0x150>)
 80010ee:	f001 ffe5 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010f2:	f244 0381 	movw	r3, #16513	; 0x4081
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4815      	ldr	r0, [pc, #84]	; (8001160 <MX_GPIO_Init+0x144>)
 800110c:	f001 ffd6 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_GPIO_Init+0x148>)
 8001128:	f001 ffc8 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <MX_GPIO_Init+0x148>)
 8001140:	f001 ffbc 	bl	80030bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f000 fe7e 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f000 fe97 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8001154:	bf00      	nop
 8001156:	3730      	adds	r7, #48	; 0x30
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400
 8001164:	40021800 	.word	0x40021800
 8001168:	10110000 	.word	0x10110000
 800116c:	40020800 	.word	0x40020800

08001170 <RecvpayloadCallback>:

/* USER CODE BEGIN 4 */
err_t RecvpayloadCallback(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err){
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800117e:	2101      	movs	r1, #1
 8001180:	482a      	ldr	r0, [pc, #168]	; (800122c <RecvpayloadCallback+0xbc>)
 8001182:	f002 f95e 	bl	8003442 <HAL_GPIO_TogglePin>
	sprintf(buf,"RecvpayloadCallback\n");
 8001186:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <RecvpayloadCallback+0xc0>)
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <RecvpayloadCallback+0xc4>)
 800118a:	4615      	mov	r5, r2
 800118c:	461c      	mov	r4, r3
 800118e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001190:	6028      	str	r0, [r5, #0]
 8001192:	6069      	str	r1, [r5, #4]
 8001194:	60aa      	str	r2, [r5, #8]
 8001196:	60eb      	str	r3, [r5, #12]
 8001198:	6820      	ldr	r0, [r4, #0]
 800119a:	6128      	str	r0, [r5, #16]
 800119c:	7923      	ldrb	r3, [r4, #4]
 800119e:	752b      	strb	r3, [r5, #20]
	 HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80011a0:	4823      	ldr	r0, [pc, #140]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011a2:	f7ff f857 	bl	8000254 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	4920      	ldr	r1, [pc, #128]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <RecvpayloadCallback+0xc8>)
 80011b2:	f004 fc35 	bl	8005a20 <HAL_UART_Transmit>
	 if (p == NULL) {sprintf(buf,"pbuf==Null\n");
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d112      	bne.n	80011e2 <RecvpayloadCallback+0x72>
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <RecvpayloadCallback+0xcc>)
 80011c0:	4614      	mov	r4, r2
 80011c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011c4:	6020      	str	r0, [r4, #0]
 80011c6:	6061      	str	r1, [r4, #4]
 80011c8:	60a2      	str	r2, [r4, #8]
	 HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80011ca:	4819      	ldr	r0, [pc, #100]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011cc:	f7ff f842 	bl	8000254 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	4915      	ldr	r1, [pc, #84]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <RecvpayloadCallback+0xc8>)
 80011dc:	f004 fc20 	bl	8005a20 <HAL_UART_Transmit>
 80011e0:	e01c      	b.n	800121c <RecvpayloadCallback+0xac>
	 }
	 else{
		 strncpy(timerbuffer, p->payload, 270);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80011ea:	4619      	mov	r1, r3
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <RecvpayloadCallback+0xd0>)
 80011ee:	f014 fefd 	bl	8015fec <strncpy>
		 sprintf(buf,"timerbuffer :%s\n\r",timerbuffer);
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <RecvpayloadCallback+0xd0>)
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <RecvpayloadCallback+0xd4>)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011f8:	f014 fed4 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <RecvpayloadCallback+0xc0>)
 80011fe:	f7ff f829 	bl	8000254 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	4909      	ldr	r1, [pc, #36]	; (8001230 <RecvpayloadCallback+0xc0>)
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <RecvpayloadCallback+0xc8>)
 800120e:	f004 fc07 	bl	8005a20 <HAL_UART_Transmit>
	 timerequestflag=1;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <RecvpayloadCallback+0xd8>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
	 rec();
 8001218:	f000 f896 	bl	8001348 <rec>
	 }

	 pbuf_free(p);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f00d f951 	bl	800e4c4 <pbuf_free>
	 return ERR_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	40020400 	.word	0x40020400
 8001230:	2000164c 	.word	0x2000164c
 8001234:	080174d8 	.word	0x080174d8
 8001238:	20000c98 	.word	0x20000c98
 800123c:	080174f0 	.word	0x080174f0
 8001240:	20001124 	.word	0x20001124
 8001244:	080174fc 	.word	0x080174fc
 8001248:	20000204 	.word	0x20000204

0800124c <RecvHttpHeaderCallback>:
err_t RecvHttpHeaderCallback (httpc_state_t *connection, void *arg, struct
pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4810      	ldr	r0, [pc, #64]	; (80012a0 <RecvHttpHeaderCallback+0x54>)
 800125e:	f002 f8f0 	bl	8003442 <HAL_GPIO_TogglePin>
   sprintf(buf,"RecvHttpHeaderCallback error");
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <RecvHttpHeaderCallback+0x58>)
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <RecvHttpHeaderCallback+0x5c>)
 8001266:	4615      	mov	r5, r2
 8001268:	461c      	mov	r4, r3
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	6028      	str	r0, [r5, #0]
 800126e:	6069      	str	r1, [r5, #4]
 8001270:	60aa      	str	r2, [r5, #8]
 8001272:	60eb      	str	r3, [r5, #12]
 8001274:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001276:	6128      	str	r0, [r5, #16]
 8001278:	6169      	str	r1, [r5, #20]
 800127a:	61aa      	str	r2, [r5, #24]
 800127c:	7823      	ldrb	r3, [r4, #0]
 800127e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <RecvHttpHeaderCallback+0x58>)
 8001282:	f7fe ffe7 	bl	8000254 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	4905      	ldr	r1, [pc, #20]	; (80012a4 <RecvHttpHeaderCallback+0x58>)
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <RecvHttpHeaderCallback+0x60>)
 8001292:	f004 fbc5 	bl	8005a20 <HAL_UART_Transmit>
   return ERR_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	40020400 	.word	0x40020400
 80012a4:	2000164c 	.word	0x2000164c
 80012a8:	08017510 	.word	0x08017510
 80012ac:	20000c98 	.word	0x20000c98

080012b0 <HttpClientResultCallback>:
void HttpClientResultCallback (void *arg, httpc_result_t httpc_result, u32_t
rx_content_len, u32_t srv_res, err_t err) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	460b      	mov	r3, r1
 80012be:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80012c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <HttpClientResultCallback+0x80>)
 80012c6:	f002 f8bc 	bl	8003442 <HAL_GPIO_TogglePin>
	sprintf(buf,"HttpClientResultCallback \n\r");
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HttpClientResultCallback+0x84>)
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HttpClientResultCallback+0x88>)
 80012ce:	4615      	mov	r5, r2
 80012d0:	461c      	mov	r4, r3
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	6028      	str	r0, [r5, #0]
 80012d6:	6069      	str	r1, [r5, #4]
 80012d8:	60aa      	str	r2, [r5, #8]
 80012da:	60eb      	str	r3, [r5, #12]
 80012dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012de:	6128      	str	r0, [r5, #16]
 80012e0:	6169      	str	r1, [r5, #20]
 80012e2:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <HttpClientResultCallback+0x84>)
 80012e6:	f7fe ffb5 	bl	8000254 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	4910      	ldr	r1, [pc, #64]	; (8001334 <HttpClientResultCallback+0x84>)
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <HttpClientResultCallback+0x8c>)
 80012f6:	f004 fb93 	bl	8005a20 <HAL_UART_Transmit>
	sprintf(buf,"httpc_result: %u\n", httpc_result);
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <HttpClientResultCallback+0x90>)
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <HttpClientResultCallback+0x84>)
 8001302:	f014 fe4f 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <HttpClientResultCallback+0x84>)
 8001308:	f7fe ffa4 	bl	8000254 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <HttpClientResultCallback+0x84>)
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <HttpClientResultCallback+0x8c>)
 8001318:	f004 fb82 	bl	8005a20 <HAL_UART_Transmit>
	sprintf(buf,"received number of bytes: %lu\n", rx_content_len);
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4909      	ldr	r1, [pc, #36]	; (8001344 <HttpClientResultCallback+0x94>)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <HttpClientResultCallback+0x84>)
 8001322:	f014 fe3f 	bl	8015fa4 <siprintf>

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bdb0      	pop	{r4, r5, r7, pc}
 800132e:	bf00      	nop
 8001330:	40020400 	.word	0x40020400
 8001334:	2000164c 	.word	0x2000164c
 8001338:	08017530 	.word	0x08017530
 800133c:	20000c98 	.word	0x20000c98
 8001340:	0801754c 	.word	0x0801754c
 8001344:	08017560 	.word	0x08017560

08001348 <rec>:
void rec(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
	volatile uint8_t years[2], Month[2], hours[2], mintues[2], days[2], second[2];
	char * pch;
	pch = strstr (timerbuffer,"formatted");
 800134e:	49a7      	ldr	r1, [pc, #668]	; (80015ec <rec+0x2a4>)
 8001350:	48a7      	ldr	r0, [pc, #668]	; (80015f0 <rec+0x2a8>)
 8001352:	f014 fe60 	bl	8016016 <strstr>
 8001356:	61f8      	str	r0, [r7, #28]
	for(int j=0;j<33;j++){
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	e05f      	b.n	800141e <rec+0xd6>
	switch (j){
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	3b0e      	subs	r3, #14
 8001362:	2b10      	cmp	r3, #16
 8001364:	d854      	bhi.n	8001410 <rec+0xc8>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <rec+0x24>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	080013b1 	.word	0x080013b1
 8001370:	080013b9 	.word	0x080013b9
 8001374:	08001411 	.word	0x08001411
 8001378:	080013c1 	.word	0x080013c1
 800137c:	080013c9 	.word	0x080013c9
 8001380:	08001411 	.word	0x08001411
 8001384:	080013d1 	.word	0x080013d1
 8001388:	080013d9 	.word	0x080013d9
 800138c:	08001411 	.word	0x08001411
 8001390:	080013e1 	.word	0x080013e1
 8001394:	080013e9 	.word	0x080013e9
 8001398:	08001411 	.word	0x08001411
 800139c:	080013f1 	.word	0x080013f1
 80013a0:	080013f9 	.word	0x080013f9
 80013a4:	08001411 	.word	0x08001411
 80013a8:	08001401 	.word	0x08001401
 80013ac:	08001409 	.word	0x08001409
	case 14:
	years[0] = *(pch);break;
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	753b      	strb	r3, [r7, #20]
 80013b6:	e02c      	b.n	8001412 <rec+0xca>
	case 15:
	years[1] = *(pch);break;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	757b      	strb	r3, [r7, #21]
 80013be:	e028      	b.n	8001412 <rec+0xca>
	case 17:
	Month[0] = *(pch);break;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	743b      	strb	r3, [r7, #16]
 80013c6:	e024      	b.n	8001412 <rec+0xca>
	case 18:
	Month[1] = *(pch);break;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	747b      	strb	r3, [r7, #17]
 80013ce:	e020      	b.n	8001412 <rec+0xca>
	case 20:
	days[0] = *(pch);break;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	713b      	strb	r3, [r7, #4]
 80013d6:	e01c      	b.n	8001412 <rec+0xca>
	case 21:
	days[1] = *(pch);break;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	717b      	strb	r3, [r7, #5]
 80013de:	e018      	b.n	8001412 <rec+0xca>
	case 23:
	hours[0] = *(pch);break;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	733b      	strb	r3, [r7, #12]
 80013e6:	e014      	b.n	8001412 <rec+0xca>
	case 24:
	hours[1] = *(pch);break;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	737b      	strb	r3, [r7, #13]
 80013ee:	e010      	b.n	8001412 <rec+0xca>
	case 26:
	mintues[0] = *(pch);break;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	723b      	strb	r3, [r7, #8]
 80013f6:	e00c      	b.n	8001412 <rec+0xca>
	case 27:
	mintues[1] = *(pch);break;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	727b      	strb	r3, [r7, #9]
 80013fe:	e008      	b.n	8001412 <rec+0xca>
	case 29:
	second[0] = *(pch);break;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	703b      	strb	r3, [r7, #0]
 8001406:	e004      	b.n	8001412 <rec+0xca>
	case 30:
	second[1] = *(pch);break;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	707b      	strb	r3, [r7, #1]
 800140e:	e000      	b.n	8001412 <rec+0xca>
	default:
	    break;}
 8001410:	bf00      	nop
		*pch++;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
	for(int j=0;j<33;j++){
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	3301      	adds	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b20      	cmp	r3, #32
 8001422:	dd9c      	ble.n	800135e <rec+0x16>
	}
	years_int = atoi(years);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f014 fcac 	bl	8015d86 <atoi>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <rec+0x2ac>)
 8001434:	801a      	strh	r2, [r3, #0]
	sprintf(buf,"Value years is %d \n\r",years_int);
 8001436:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <rec+0x2ac>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	496e      	ldr	r1, [pc, #440]	; (80015f8 <rec+0x2b0>)
 800143e:	486f      	ldr	r0, [pc, #444]	; (80015fc <rec+0x2b4>)
 8001440:	f014 fdb0 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 8001444:	486d      	ldr	r0, [pc, #436]	; (80015fc <rec+0x2b4>)
 8001446:	f7fe ff05 	bl	8000254 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	496a      	ldr	r1, [pc, #424]	; (80015fc <rec+0x2b4>)
 8001454:	486a      	ldr	r0, [pc, #424]	; (8001600 <rec+0x2b8>)
 8001456:	f004 fae3 	bl	8005a20 <HAL_UART_Transmit>
	Month_int = atoi(Month);
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4618      	mov	r0, r3
 8001460:	f014 fc91 	bl	8015d86 <atoi>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b66      	ldr	r3, [pc, #408]	; (8001604 <rec+0x2bc>)
 800146a:	801a      	strh	r2, [r3, #0]
	sprintf(buf,"Value  Mon:%d \n\r",Month_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800146c:	4b65      	ldr	r3, [pc, #404]	; (8001604 <rec+0x2bc>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4965      	ldr	r1, [pc, #404]	; (8001608 <rec+0x2c0>)
 8001474:	4861      	ldr	r0, [pc, #388]	; (80015fc <rec+0x2b4>)
 8001476:	f014 fd95 	bl	8015fa4 <siprintf>
 800147a:	4860      	ldr	r0, [pc, #384]	; (80015fc <rec+0x2b4>)
 800147c:	f7fe feea 	bl	8000254 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	495c      	ldr	r1, [pc, #368]	; (80015fc <rec+0x2b4>)
 800148a:	485d      	ldr	r0, [pc, #372]	; (8001600 <rec+0x2b8>)
 800148c:	f004 fac8 	bl	8005a20 <HAL_UART_Transmit>
	days_int = atoi(days);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f014 fc77 	bl	8015d86 <atoi>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b5b      	ldr	r3, [pc, #364]	; (800160c <rec+0x2c4>)
 800149e:	801a      	strh	r2, [r3, #0]
	sprintf(buf,"Value  days:%d \n\r",days_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80014a0:	4b5a      	ldr	r3, [pc, #360]	; (800160c <rec+0x2c4>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	495a      	ldr	r1, [pc, #360]	; (8001610 <rec+0x2c8>)
 80014a8:	4854      	ldr	r0, [pc, #336]	; (80015fc <rec+0x2b4>)
 80014aa:	f014 fd7b 	bl	8015fa4 <siprintf>
 80014ae:	4853      	ldr	r0, [pc, #332]	; (80015fc <rec+0x2b4>)
 80014b0:	f7fe fed0 	bl	8000254 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014bc:	494f      	ldr	r1, [pc, #316]	; (80015fc <rec+0x2b4>)
 80014be:	4850      	ldr	r0, [pc, #320]	; (8001600 <rec+0x2b8>)
 80014c0:	f004 faae 	bl	8005a20 <HAL_UART_Transmit>
	hours_int = atoi(hours);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4618      	mov	r0, r3
 80014ca:	f014 fc5c 	bl	8015d86 <atoi>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b50      	ldr	r3, [pc, #320]	; (8001614 <rec+0x2cc>)
 80014d4:	801a      	strh	r2, [r3, #0]
	sprintf(buf,"Value  ho:%d \n\r",hours_int);HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80014d6:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <rec+0x2cc>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	494e      	ldr	r1, [pc, #312]	; (8001618 <rec+0x2d0>)
 80014de:	4847      	ldr	r0, [pc, #284]	; (80015fc <rec+0x2b4>)
 80014e0:	f014 fd60 	bl	8015fa4 <siprintf>
 80014e4:	4845      	ldr	r0, [pc, #276]	; (80015fc <rec+0x2b4>)
 80014e6:	f7fe feb5 	bl	8000254 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	4942      	ldr	r1, [pc, #264]	; (80015fc <rec+0x2b4>)
 80014f4:	4842      	ldr	r0, [pc, #264]	; (8001600 <rec+0x2b8>)
 80014f6:	f004 fa93 	bl	8005a20 <HAL_UART_Transmit>
	mintues_int = atoi(mintues);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f014 fc41 	bl	8015d86 <atoi>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b44      	ldr	r3, [pc, #272]	; (800161c <rec+0x2d4>)
 800150a:	801a      	strh	r2, [r3, #0]
	sprintf(buf,"Value mintues is %d \n\r",mintues_int);
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <rec+0x2d4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4943      	ldr	r1, [pc, #268]	; (8001620 <rec+0x2d8>)
 8001514:	4839      	ldr	r0, [pc, #228]	; (80015fc <rec+0x2b4>)
 8001516:	f014 fd45 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800151a:	4838      	ldr	r0, [pc, #224]	; (80015fc <rec+0x2b4>)
 800151c:	f7fe fe9a 	bl	8000254 <strlen>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001528:	4934      	ldr	r1, [pc, #208]	; (80015fc <rec+0x2b4>)
 800152a:	4835      	ldr	r0, [pc, #212]	; (8001600 <rec+0x2b8>)
 800152c:	f004 fa78 	bl	8005a20 <HAL_UART_Transmit>
	second_int = atoi(second);
 8001530:	463b      	mov	r3, r7
 8001532:	4618      	mov	r0, r3
 8001534:	f014 fc27 	bl	8015d86 <atoi>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <rec+0x2dc>)
 800153e:	801a      	strh	r2, [r3, #0]
	sprintf(buf,"Value second is %d \n\r",second_int);
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <rec+0x2dc>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4938      	ldr	r1, [pc, #224]	; (8001628 <rec+0x2e0>)
 8001548:	482c      	ldr	r0, [pc, #176]	; (80015fc <rec+0x2b4>)
 800154a:	f014 fd2b 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 800154e:	482b      	ldr	r0, [pc, #172]	; (80015fc <rec+0x2b4>)
 8001550:	f7fe fe80 	bl	8000254 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155c:	4927      	ldr	r1, [pc, #156]	; (80015fc <rec+0x2b4>)
 800155e:	4828      	ldr	r0, [pc, #160]	; (8001600 <rec+0x2b8>)
 8001560:	f004 fa5e 	bl	8005a20 <HAL_UART_Transmit>

	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001564:	4831      	ldr	r0, [pc, #196]	; (800162c <rec+0x2e4>)
 8001566:	f003 fa1f 	bl	80049a8 <HAL_RTC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <rec+0x22c>
	 {
	   Error_Handler();
 8001570:	f000 f922 	bl	80017b8 <Error_Handler>
	 }

	sDate.Year=years_int;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <rec+0x2ac>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <rec+0x2e8>)
 800157c:	70da      	strb	r2, [r3, #3]
	sDate.Month=Month_int;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <rec+0x2bc>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <rec+0x2e8>)
 8001586:	705a      	strb	r2, [r3, #1]
	sDate.Date=days_int;
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <rec+0x2c4>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <rec+0x2e8>)
 8001590:	709a      	strb	r2, [r3, #2]

	if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN) != HAL_OK)
 8001592:	2200      	movs	r2, #0
 8001594:	4926      	ldr	r1, [pc, #152]	; (8001630 <rec+0x2e8>)
 8001596:	4825      	ldr	r0, [pc, #148]	; (800162c <rec+0x2e4>)
 8001598:	f003 fbb4 	bl	8004d04 <HAL_RTC_SetDate>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <rec+0x25e>
	 {
	   Error_Handler();
 80015a2:	f000 f909 	bl	80017b8 <Error_Handler>
	 }
	sTime.Hours=hours_int;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <rec+0x2cc>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <rec+0x2ec>)
 80015ae:	701a      	strb	r2, [r3, #0]
	sTime.Minutes=mintues_int;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <rec+0x2d4>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <rec+0x2ec>)
 80015b8:	705a      	strb	r2, [r3, #1]
	sTime.Seconds=second_int;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <rec+0x2dc>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <rec+0x2ec>)
 80015c2:	709a      	strb	r2, [r3, #2]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015c4:	2200      	movs	r2, #0
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <rec+0x2ec>)
 80015c8:	4818      	ldr	r0, [pc, #96]	; (800162c <rec+0x2e4>)
 80015ca:	f003 fa7f 	bl	8004acc <HAL_RTC_SetTime>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <rec+0x290>
	{
	  Error_Handler();
 80015d4:	f000 f8f0 	bl	80017b8 <Error_Handler>
	}

    example_do_connect(client, "MYDEVICE3");
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <rec+0x2f0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4917      	ldr	r1, [pc, #92]	; (800163c <rec+0x2f4>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa00 	bl	80009e4 <example_do_connect>

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	08017580 	.word	0x08017580
 80015f0:	20001124 	.word	0x20001124
 80015f4:	20001122 	.word	0x20001122
 80015f8:	0801758c 	.word	0x0801758c
 80015fc:	2000164c 	.word	0x2000164c
 8001600:	20000c98 	.word	0x20000c98
 8001604:	20001238 	.word	0x20001238
 8001608:	080175a4 	.word	0x080175a4
 800160c:	20000c90 	.word	0x20000c90
 8001610:	080175b8 	.word	0x080175b8
 8001614:	20001120 	.word	0x20001120
 8001618:	080175cc 	.word	0x080175cc
 800161c:	20001240 	.word	0x20001240
 8001620:	080175dc 	.word	0x080175dc
 8001624:	20002a20 	.word	0x20002a20
 8001628:	080175f4 	.word	0x080175f4
 800162c:	20001244 	.word	0x20001244
 8001630:	20000254 	.word	0x20000254
 8001634:	2000023c 	.word	0x2000023c
 8001638:	2000123c 	.word	0x2000123c
 800163c:	0801760c 	.word	0x0801760c

08001640 <fetc>:
void fetc(void){
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001646:	af04      	add	r7, sp, #16
	int i;
	 int r;
	//httpd_init();
	char url[500];
	char domain_name[30];
	volatile uint16_t h=0;
 8001648:	f107 030a 	add.w	r3, r7, #10
 800164c:	2200      	movs	r2, #0
 800164e:	801a      	strh	r2, [r3, #0]
	httpc_connection_t *conn_settings;
	httpc_state_t *connection;
	conn_settings->use_proxy = 0;   //no proxy usage
 8001650:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001654:	2200      	movs	r2, #0
 8001656:	719a      	strb	r2, [r3, #6]
	conn_settings->headers_done_fn = RecvHttpHeaderCallback;
 8001658:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800165c:	4a30      	ldr	r2, [pc, #192]	; (8001720 <fetc+0xe0>)
 800165e:	60da      	str	r2, [r3, #12]
	conn_settings->result_fn = HttpClientResultCallback;
 8001660:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001664:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <fetc+0xe4>)
 8001666:	609a      	str	r2, [r3, #8]
	strcpy(domain_name, "api.timezonedb.com");
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4a2e      	ldr	r2, [pc, #184]	; (8001728 <fetc+0xe8>)
 800166e:	461c      	mov	r4, r3
 8001670:	4615      	mov	r5, r2
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	8022      	strh	r2, [r4, #0]
 800167c:	3402      	adds	r4, #2
 800167e:	0c1b      	lsrs	r3, r3, #16
 8001680:	7023      	strb	r3, [r4, #0]
	strcpy(url, "/v2.1/get-time-zone?key=H77HZBELV1YH&format=json&by=zone&zone=Africa/Cairo");
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	4a29      	ldr	r2, [pc, #164]	; (800172c <fetc+0xec>)
 8001688:	4618      	mov	r0, r3
 800168a:	4611      	mov	r1, r2
 800168c:	234b      	movs	r3, #75	; 0x4b
 800168e:	461a      	mov	r2, r3
 8001690:	f014 fbd5 	bl	8015e3e <memcpy>
	sprintf(buf,"url:\n%s\n", url);
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	461a      	mov	r2, r3
 800169a:	4925      	ldr	r1, [pc, #148]	; (8001730 <fetc+0xf0>)
 800169c:	4825      	ldr	r0, [pc, #148]	; (8001734 <fetc+0xf4>)
 800169e:	f014 fc81 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80016a2:	4824      	ldr	r0, [pc, #144]	; (8001734 <fetc+0xf4>)
 80016a4:	f7fe fdd6 	bl	8000254 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b0:	4920      	ldr	r1, [pc, #128]	; (8001734 <fetc+0xf4>)
 80016b2:	4821      	ldr	r0, [pc, #132]	; (8001738 <fetc+0xf8>)
 80016b4:	f004 f9b4 	bl	8005a20 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,"\n\r",2,1000);
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	2202      	movs	r2, #2
 80016be:	491f      	ldr	r1, [pc, #124]	; (800173c <fetc+0xfc>)
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <fetc+0xf8>)
 80016c2:	f004 f9ad 	bl	8005a20 <HAL_UART_Transmit>
	err_t error;
	//dns_gethostbyname();
	error = httpc_get_file_dns(domain_name, 80, url, conn_settings,RecvpayloadCallback, NULL, &connection);   //Send HTTP message
 80016c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016ca:	f107 000c 	add.w	r0, r7, #12
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2300      	movs	r3, #0
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <fetc+0x100>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80016de:	2150      	movs	r1, #80	; 0x50
 80016e0:	f006 fae6 	bl	8007cb0 <httpc_get_file_dns>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
	sprintf(buf,"\n\rerror: %d\n", error);
 80016ea:	f997 3223 	ldrsb.w	r3, [r7, #547]	; 0x223
 80016ee:	461a      	mov	r2, r3
 80016f0:	4914      	ldr	r1, [pc, #80]	; (8001744 <fetc+0x104>)
 80016f2:	4810      	ldr	r0, [pc, #64]	; (8001734 <fetc+0xf4>)
 80016f4:	f014 fc56 	bl	8015fa4 <siprintf>
	HAL_UART_Transmit(&huart3,buf,strlen(buf),1000);
 80016f8:	480e      	ldr	r0, [pc, #56]	; (8001734 <fetc+0xf4>)
 80016fa:	f7fe fdab 	bl	8000254 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	490b      	ldr	r1, [pc, #44]	; (8001734 <fetc+0xf4>)
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <fetc+0xf8>)
 800170a:	f004 f989 	bl	8005a20 <HAL_UART_Transmit>
	HAL_Delay(5000);
 800170e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001712:	f000 fa9f 	bl	8001c54 <HAL_Delay>
			 timerequestflag=true;
		}
	}*/


}
 8001716:	bf00      	nop
 8001718:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800171c:	46bd      	mov	sp, r7
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	0800124d 	.word	0x0800124d
 8001724:	080012b1 	.word	0x080012b1
 8001728:	08017618 	.word	0x08017618
 800172c:	0801762c 	.word	0x0801762c
 8001730:	08017678 	.word	0x08017678
 8001734:	2000164c 	.word	0x2000164c
 8001738:	20000c98 	.word	0x20000c98
 800173c:	08017684 	.word	0x08017684
 8001740:	08001171 	.word	0x08001171
 8001744:	08017688 	.word	0x08017688

08001748 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

	RTC_CalendarShow(aShowTime, aShowDate);
 8001750:	4912      	ldr	r1, [pc, #72]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001754:	f7ff fa40 	bl	8000bd8 <RTC_CalendarShow>
	if(timerequestflag==1){
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d119      	bne.n	8001794 <HAL_TIM_PeriodElapsedCallback+0x4c>
	    example_do_connect(client, "MYDEVICE3");
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4911      	ldr	r1, [pc, #68]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f93c 	bl	80009e4 <example_do_connect>

		sprintf(pacote,"hello_mohamed from Stm32");
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001770:	4615      	mov	r5, r2
 8001772:	461c      	mov	r4, r3
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	6028      	str	r0, [r5, #0]
 8001778:	6069      	str	r1, [r5, #4]
 800177a:	60aa      	str	r2, [r5, #8]
 800177c:	60eb      	str	r3, [r5, #12]
 800177e:	cc03      	ldmia	r4!, {r0, r1}
 8001780:	6128      	str	r0, [r5, #16]
 8001782:	6169      	str	r1, [r5, #20]
 8001784:	7823      	ldrb	r3, [r4, #0]
 8001786:	762b      	strb	r3, [r5, #24]


		example_publish(client, pacote);
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4908      	ldr	r1, [pc, #32]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f9b0 	bl	8000af4 <example_publish>
	}

}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bdb0      	pop	{r4, r5, r7, pc}
 800179c:	20000258 	.word	0x20000258
 80017a0:	20000208 	.word	0x20000208
 80017a4:	20000204 	.word	0x20000204
 80017a8:	2000123c 	.word	0x2000123c
 80017ac:	0801760c 	.word	0x0801760c
 80017b0:	20001264 	.word	0x20001264
 80017b4:	08017698 	.word	0x08017698

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017be:	e7fe      	b.n	80017be <Error_Handler+0x6>

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_MspInit+0x44>)
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_MspInit+0x44>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_MspInit+0x44>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_MspInit+0x44>)
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_MspInit+0x44>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x44>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_RTC_MspInit+0x2c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d105      	bne.n	8001826 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_RTC_MspInit+0x30>)
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RTC_MspInit+0x30>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40002800 	.word	0x40002800
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d113      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f000 faed 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f000 fb06 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_UART_MspInit+0x7c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d128      	bne.n	80018f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_UART_MspInit+0x80>)
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_UART_MspInit+0x80>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_UART_MspInit+0x80>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_UART_MspInit+0x80>)
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_UART_MspInit+0x80>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_UART_MspInit+0x80>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_UART_MspInit+0x84>)
 80018f4:	f001 fbe2 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40004800 	.word	0x40004800
 8001904:	40023800 	.word	0x40023800
 8001908:	40020c00 	.word	0x40020c00

0800190c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192c:	d141      	bne.n	80019b2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4a23      	ldr	r2, [pc, #140]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001946:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001958:	230a      	movs	r3, #10
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4817      	ldr	r0, [pc, #92]	; (80019c0 <HAL_PCD_MspInit+0xb4>)
 8001964:	f001 fbaa 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4810      	ldr	r0, [pc, #64]	; (80019c0 <HAL_PCD_MspInit+0xb4>)
 800197e:	f001 fb9d 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198c:	6353      	str	r3, [r2, #52]	; 0x34
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_PCD_MspInit+0xb0>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <NMI_Handler+0x4>

080019ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a10:	f000 f900 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM2_IRQHandler+0x10>)
 8001a1e:	f003 fbc9 	bl	80051b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200029d4 	.word	0x200029d4

08001a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a34:	f001 fd20 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e00a      	b.n	8001a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a4e:	68bc      	ldr	r4, [r7, #8]
 8001a50:	1c63      	adds	r3, r4, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	f7ff f8a8 	bl	8000ba8 <__io_getchar>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf0      	blt.n	8001a4e <_read+0x12>
	}

return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}

08001a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e009      	b.n	8001a9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f873 	bl	8000b7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf1      	blt.n	8001a88 <_write+0x12>
	}
	return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x50>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x16>
		heap_end = &end;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <_sbrk+0x50>)
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <_sbrk+0x54>)
 8001ac4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <_sbrk+0x50>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <_sbrk+0x50>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	466a      	mov	r2, sp
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d905      	bls.n	8001ae6 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <_sbrk+0x58>)
 8001adc:	220c      	movs	r2, #12
 8001ade:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e006      	b.n	8001af4 <_sbrk+0x44>
	}

	heap_end += incr;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <_sbrk+0x50>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <_sbrk+0x50>)
 8001af0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	2000028c 	.word	0x2000028c
 8001b04:	2000b6c8 	.word	0x2000b6c8
 8001b08:	2000b6c4 	.word	0x2000b6c4

08001b0c <_close>:

int _close(int file)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b34:	605a      	str	r2, [r3, #4]
	return 0;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_isatty>:

int _isatty(int file)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
	return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f949 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f806 	bl	8001bb4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fe0a 	bl	80017c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f963 	bl	8001e9e <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 f92b 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20002a24 	.word	0x20002a24

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20002a24 	.word	0x20002a24

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_Delay+0x40>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad2      	subs	r2, r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3f7      	bcc.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000008 	.word	0x20000008

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00
 8001cdc:	05fa0000 	.word	0x05fa0000

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	4909      	ldr	r1, [pc, #36]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	f002 021f 	and.w	r2, r2, #31
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	490d      	ldr	r1, [pc, #52]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	4909      	ldr	r1, [pc, #36]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	401a      	ands	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	1e59      	subs	r1, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff90 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff2b 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff40 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff33 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001ec8:	4ba9      	ldr	r3, [pc, #676]	; (8002170 <HAL_ETH_Init+0x2b8>)
 8001eca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e183      	b.n	80021e6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f004 fe58 	bl	8006ba8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef8:	4a9e      	ldr	r2, [pc, #632]	; (8002174 <HAL_ETH_Init+0x2bc>)
 8001efa:	4b9e      	ldr	r3, [pc, #632]	; (8002174 <HAL_ETH_Init+0x2bc>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	6453      	str	r3, [r2, #68]	; 0x44
 8001f04:	4b9b      	ldr	r3, [pc, #620]	; (8002174 <HAL_ETH_Init+0x2bc>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f10:	4a99      	ldr	r2, [pc, #612]	; (8002178 <HAL_ETH_Init+0x2c0>)
 8001f12:	4b99      	ldr	r3, [pc, #612]	; (8002178 <HAL_ETH_Init+0x2c0>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f1a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f1c:	4996      	ldr	r1, [pc, #600]	; (8002178 <HAL_ETH_Init+0x2c0>)
 8001f1e:	4b96      	ldr	r3, [pc, #600]	; (8002178 <HAL_ETH_Init+0x2c0>)
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f42:	f7ff fe7b 	bl	8001c3c <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f48:	e011      	b.n	8001f6e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f4a:	f7ff fe77 	bl	8001c3c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f58:	d909      	bls.n	8001f6e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e13b      	b.n	80021e6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e4      	bne.n	8001f4a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f023 031c 	bic.w	r3, r3, #28
 8001f8e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f90:	f002 f8b0 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8001f94:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4a78      	ldr	r2, [pc, #480]	; (800217c <HAL_ETH_Init+0x2c4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d908      	bls.n	8001fb0 <HAL_ETH_Init+0xf8>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_ETH_Init+0x2c8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d804      	bhi.n	8001fb0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e027      	b.n	8002000 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	4a73      	ldr	r2, [pc, #460]	; (8002180 <HAL_ETH_Init+0x2c8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d908      	bls.n	8001fca <HAL_ETH_Init+0x112>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4a72      	ldr	r2, [pc, #456]	; (8002184 <HAL_ETH_Init+0x2cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d804      	bhi.n	8001fca <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f043 030c 	orr.w	r3, r3, #12
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e01a      	b.n	8002000 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4a6d      	ldr	r2, [pc, #436]	; (8002184 <HAL_ETH_Init+0x2cc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d903      	bls.n	8001fda <HAL_ETH_Init+0x122>
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4a6c      	ldr	r2, [pc, #432]	; (8002188 <HAL_ETH_Init+0x2d0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d911      	bls.n	8001ffe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	; (8002188 <HAL_ETH_Init+0x2d0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_ETH_Init+0x13c>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4a69      	ldr	r2, [pc, #420]	; (800218c <HAL_ETH_Init+0x2d4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d804      	bhi.n	8001ff4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e005      	b.n	8002000 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	e000      	b.n	8002000 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ffe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002008:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fb9a 	bl	8002748 <HAL_ETH_WritePHYRegister>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800201e:	6939      	ldr	r1, [r7, #16]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fd4d 	bl	8002ac0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0d9      	b.n	80021e6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002032:	20ff      	movs	r0, #255	; 0xff
 8002034:	f7ff fe0e 	bl	8001c54 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a7 	beq.w	8002190 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002042:	f7ff fdfb 	bl	8001c3c <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	461a      	mov	r2, r3
 800204e:	2101      	movs	r1, #1
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fb11 	bl	8002678 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002056:	f7ff fdf1 	bl	8001c3c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d90f      	bls.n	8002088 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800206c:	6939      	ldr	r1, [r7, #16]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fd26 	bl	8002ac0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0ae      	b.n	80021e6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0da      	beq.n	8002048 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002096:	2100      	movs	r1, #0
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fb55 	bl	8002748 <HAL_ETH_WritePHYRegister>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fd08 	bl	8002ac0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020b8:	2301      	movs	r3, #1
 80020ba:	e094      	b.n	80021e6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80020bc:	f7ff fdbe 	bl	8001c3c <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	461a      	mov	r2, r3
 80020c8:	2101      	movs	r1, #1
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fad4 	bl	8002678 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80020d0:	f7ff fdb4 	bl	8001c3c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d90f      	bls.n	8002102 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fce9 	bl	8002ac0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e071      	b.n	80021e6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0da      	beq.n	80020c2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	461a      	mov	r2, r3
 8002112:	211f      	movs	r1, #31
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 faaf 	bl	8002678 <HAL_ETH_ReadPHYRegister>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fcca 	bl	8002ac0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002134:	2301      	movs	r3, #1
 8002136:	e056      	b.n	80021e6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	e002      	b.n	8002152 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	e037      	b.n	80021d4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e032      	b.n	80021d4 <HAL_ETH_Init+0x31c>
 800216e:	bf00      	nop
 8002170:	03938700 	.word	0x03938700
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	01312cff 	.word	0x01312cff
 8002180:	02160ebf 	.word	0x02160ebf
 8002184:	039386ff 	.word	0x039386ff
 8002188:	05f5e0ff 	.word	0x05f5e0ff
 800218c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 facd 	bl	8002748 <HAL_ETH_WritePHYRegister>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021b8:	6939      	ldr	r1, [r7, #16]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fc80 	bl	8002ac0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e00c      	b.n	80021e6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80021cc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80021d0:	f7ff fd40 	bl	8001c54 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc72 	bl	8002ac0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ETH_DMATxDescListInit+0x20>
 800220c:	2302      	movs	r3, #2
 800220e:	e052      	b.n	80022b6 <HAL_ETH_DMATxDescListInit+0xc6>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e030      	b.n	800228e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	015b      	lsls	r3, r3, #5
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	4413      	add	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800223c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	461a      	mov	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	d908      	bls.n	8002282 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	015b      	lsls	r3, r3, #5
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	461a      	mov	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	e002      	b.n	8002288 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d3ca      	bcc.n	800222c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f241 0310 	movw	r3, #4112	; 0x1010
 80022a0:	440b      	add	r3, r1
 80022a2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b087      	sub	sp, #28
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ETH_DMARxDescListInit+0x20>
 80022de:	2302      	movs	r3, #2
 80022e0:	e056      	b.n	8002390 <HAL_ETH_DMARxDescListInit+0xce>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e034      	b.n	8002368 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800230e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002316:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	461a      	mov	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d908      	bls.n	800235c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	015b      	lsls	r3, r3, #5
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4413      	add	r3, r2
 8002354:	461a      	mov	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e002      	b.n	8002362 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3c6      	bcc.n	80022fe <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	f241 030c 	movw	r3, #4108	; 0x100c
 800237a:	440b      	add	r3, r1
 800237c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_ETH_TransmitFrame+0x24>
 80023bc:	2302      	movs	r3, #2
 80023be:	e0cd      	b.n	800255c <HAL_ETH_TransmitFrame+0x1c0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0b8      	b.n	800255c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	da09      	bge.n	8002408 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2212      	movs	r2, #18
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0a9      	b.n	800255c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800240e:	4293      	cmp	r3, r2
 8002410:	d915      	bls.n	800243e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_ETH_TransmitFrame+0x1cc>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4b51      	ldr	r3, [pc, #324]	; (8002568 <HAL_ETH_TransmitFrame+0x1cc>)
 8002422:	fba3 1302 	umull	r1, r3, r3, r2
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e001      	b.n	8002442 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d11c      	bne.n	8002482 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002456:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002462:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002472:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002480:	e04b      	b.n	800251a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e044      	b.n	8002512 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002496:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ac:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024b6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d116      	bne.n	80024f0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024d0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <HAL_ETH_TransmitFrame+0x1d0>)
 80024d6:	fb02 f203 	mul.w	r2, r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80024e2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024ee:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024fe:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3301      	adds	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	429a      	cmp	r2, r3
 8002518:	d3b6      	bcc.n	8002488 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f241 0314 	movw	r3, #4116	; 0x1014
 8002536:	4413      	add	r3, r2
 8002538:	2204      	movs	r2, #4
 800253a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f241 0304 	movw	r3, #4100	; 0x1004
 8002544:	4413      	add	r3, r2
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	ac02b00b 	.word	0xac02b00b
 800256c:	fffffa0c 	.word	0xfffffa0c

08002570 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ETH_GetReceivedFrame+0x1a>
 8002586:	2302      	movs	r3, #2
 8002588:	e070      	b.n	800266c <HAL_ETH_GetReceivedFrame+0xfc>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db5a      	blt.n	800265a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d030      	beq.n	8002614 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d103      	bne.n	80025cc <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025e0:	3b04      	subs	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e02b      	b.n	800266c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
 8002642:	e00a      	b.n	800265a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	461a      	mov	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	460b      	mov	r3, r1
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b82      	cmp	r3, #130	; 0x82
 8002698:	d101      	bne.n	800269e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	e050      	b.n	8002740 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2282      	movs	r2, #130	; 0x82
 80026a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 031c 	and.w	r3, r3, #28
 80026b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8a1b      	ldrh	r3, [r3, #16]
 80026ba:	02db      	lsls	r3, r3, #11
 80026bc:	b29b      	uxth	r3, r3
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	019b      	lsls	r3, r3, #6
 80026c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 0302 	bic.w	r3, r3, #2
 80026d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026ea:	f7ff faa7 	bl	8001c3c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026f0:	e015      	b.n	800271e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026f2:	f7ff faa3 	bl	8001c3c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d309      	bcc.n	8002716 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e014      	b.n	8002740 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e4      	bne.n	80026f2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	460b      	mov	r3, r1
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b42      	cmp	r3, #66	; 0x42
 8002768:	d101      	bne.n	800276e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	e04e      	b.n	800280c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2242      	movs	r2, #66	; 0x42
 8002772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 031c 	and.w	r3, r3, #28
 8002784:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8a1b      	ldrh	r3, [r3, #16]
 800278a:	02db      	lsls	r3, r3, #11
 800278c:	b29b      	uxth	r3, r3
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002794:	897b      	ldrh	r3, [r7, #10]
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	b292      	uxth	r2, r2
 80027ba:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027c4:	f7ff fa3a 	bl	8001c3c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027ca:	e015      	b.n	80027f8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80027cc:	f7ff fa36 	bl	8001c3c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027da:	d309      	bcc.n	80027f0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e00d      	b.n	800280c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e4      	bne.n	80027cc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ETH_Start+0x16>
 8002826:	2302      	movs	r3, #2
 8002828:	e01f      	b.n	800286a <HAL_ETH_Start+0x56>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fb40 	bl	8002ec0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fb77 	bl	8002f34 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fc0e 	bl	8003068 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fbab 	bl	8002fa8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fbd8 	bl	8003008 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ETH_Stop+0x16>
 8002884:	2302      	movs	r3, #2
 8002886:	e01f      	b.n	80028c8 <HAL_ETH_Stop+0x56>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fb9d 	bl	8002fd8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fbca 	bl	8003038 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fb62 	bl	8002f6e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fbdc 	bl	8003068 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fb22 	bl	8002efa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_ETH_ConfigMAC+0x1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0e3      	b.n	8002ab4 <HAL_ETH_ConfigMAC+0x1e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80b0 	beq.w	8002a64 <HAL_ETH_ConfigMAC+0x194>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4b6b      	ldr	r3, [pc, #428]	; (8002abc <HAL_ETH_ConfigMAC+0x1ec>)
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800291c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002922:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002928:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800292e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002934:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800293a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002940:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002946:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800294c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002952:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002958:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800295e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff f96c 	bl	8001c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002990:	4311      	orrs	r1, r2
                                          macconf->PassControlFrames |
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6b52      	ldr	r2, [r2, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002996:	4311      	orrs	r1, r2
                                          macconf->BroadcastFramesReception | 
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	6b92      	ldr	r2, [r2, #56]	; 0x38
                                          macconf->PassControlFrames |
 800299c:	4311      	orrs	r1, r2
                                          macconf->DestinationAddrFilter |
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80029a2:	4311      	orrs	r1, r2
                                          macconf->PromiscuousMode |
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80029a8:	4311      	orrs	r1, r2
                                          macconf->MulticastFramesFilter |
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80029ae:	4311      	orrs	r1, r2
                                          macconf->UnicastFramesFilter);
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 80029b4:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029b6:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7ff f947 	bl	8001c54 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029d6:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029e0:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80029fe:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002a04:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002a0a:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002a10:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002a16:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff f910 	bl	8001c54 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6f12      	ldr	r2, [r2, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7ff f8fd 	bl	8001c54 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	61da      	str	r2, [r3, #28]
 8002a62:	e01e      	b.n	8002aa2 <HAL_ETH_ConfigMAC+0x1d2>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a72:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a94:	2001      	movs	r0, #1
 8002a96:	f7ff f8dd 	bl	8001c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	ff20810f 	.word	0xff20810f

08002ac0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0b0      	sub	sp, #192	; 0xc0
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002adc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ae4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002aee:	2300      	movs	r3, #0
 8002af0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b0c:	e001      	b.n	8002b12 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b16:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b2c:	2340      	movs	r3, #64	; 0x40
 8002b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b98:	4baa      	ldr	r3, [pc, #680]	; (8002e44 <ETH_MACDMAConfig+0x384>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ba4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002ba8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002bac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002bb2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002bb6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002bba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002bc0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002bc4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002bc8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bcc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bd0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002bd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f7ff f82d 	bl	8001c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c02:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002c0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c0c:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8002c0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002c10:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8002c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002c16:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8002c18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c1c:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8002c1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c22:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8002c24:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c28:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8002c2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8002c2e:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c30:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff f809 	bl	8001c54 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c4a:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c54:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c5e:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c6e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c72:	4013      	ands	r3, r2
 8002c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c7c:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c82:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c88:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c8e:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c94:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c9a:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cae:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7fe ffca 	bl	8001c54 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc8:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7fe ffb5 	bl	8001c54 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cf2:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfc:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002d02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d06:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d48:	4413      	add	r3, r2
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d54:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <ETH_MACDMAConfig+0x388>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d5c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d5e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d60:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d62:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d64:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d66:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d68:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d6a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d6c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d6e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d70:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d72:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d74:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d78:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d7c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d90:	4413      	add	r3, r2
 8002d92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d96:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002da0:	4413      	add	r3, r2
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002da8:	2001      	movs	r0, #1
 8002daa:	f7fe ff53 	bl	8001c54 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	f241 0318 	movw	r3, #4120	; 0x1018
 8002db6:	4413      	add	r3, r2
 8002db8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dbc:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dc6:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002dca:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8002dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002dce:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8002dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002dd2:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 8002dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dd6:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002dd8:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8002dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002ddc:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dde:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de6:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7fe ff2c 	bl	8001c54 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e08:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10d      	bne.n	8002e2e <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e1e:	4413      	add	r3, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <ETH_MACDMAConfig+0x38c>)
 8002e24:	431a      	orrs	r2, r3
 8002e26:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e2a:	440b      	add	r3, r1
 8002e2c:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	461a      	mov	r2, r3
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f80a 	bl	8002e50 <ETH_MACAddressConfig>
}
 8002e3c:	bf00      	nop
 8002e3e:	37c0      	adds	r7, #192	; 0xc0
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	ff20810f 	.word	0xff20810f
 8002e48:	f8de3f23 	.word	0xf8de3f23
 8002e4c:	00010040 	.word	0x00010040

08002e50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3305      	adds	r3, #5
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	3204      	adds	r2, #4
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <ETH_MACAddressConfig+0x68>)
 8002e72:	4413      	add	r3, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3303      	adds	r3, #3
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	061a      	lsls	r2, r3, #24
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3302      	adds	r3, #2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4313      	orrs	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <ETH_MACAddressConfig+0x6c>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6013      	str	r3, [r2, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40028040 	.word	0x40028040
 8002ebc:	40028044 	.word	0x40028044

08002ec0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7fe feb5 	bl	8001c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7fe fe98 	bl	8001c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	f042 0204 	orr.w	r2, r2, #4
 8002f4e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f7fe fe7b 	bl	8001c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	f022 0204 	bic.w	r2, r2, #4
 8002f88:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fe fe5e 	bl	8001c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fbc:	4413      	add	r3, r2
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fc4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fc8:	440b      	add	r3, r1
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fec:	4413      	add	r3, r2
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ff4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ff8:	440b      	add	r3, r1
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f241 0318 	movw	r3, #4120	; 0x1018
 800301c:	4413      	add	r3, r2
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	f241 0318 	movw	r3, #4120	; 0x1018
 8003028:	440b      	add	r3, r1
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f241 0318 	movw	r3, #4120	; 0x1018
 800304c:	4413      	add	r3, r2
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 0202 	bic.w	r2, r3, #2
 8003054:	f241 0318 	movw	r3, #4120	; 0x1018
 8003058:	440b      	add	r3, r1
 800305a:	601a      	str	r2, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003080:	4413      	add	r3, r2
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003088:	f241 0318 	movw	r3, #4120	; 0x1018
 800308c:	440b      	add	r3, r1
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	f241 0318 	movw	r3, #4120	; 0x1018
 8003098:	4413      	add	r3, r2
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800309e:	2001      	movs	r0, #1
 80030a0:	f7fe fdd8 	bl	8001c54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80030ae:	440b      	add	r3, r1
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e175      	b.n	80033c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f040 8164 	bne.w	80033c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d00b      	beq.n	800311a <HAL_GPIO_Init+0x5e>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800310e:	2b11      	cmp	r3, #17
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b12      	cmp	r3, #18
 8003118:	d130      	bne.n	800317c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0201 	and.w	r2, r3, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x100>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b12      	cmp	r3, #18
 80031ba:	d123      	bne.n	8003204 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	08da      	lsrs	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80be 	beq.w	80033c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	4a65      	ldr	r2, [pc, #404]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003248:	4b64      	ldr	r3, [pc, #400]	; (80033dc <HAL_GPIO_Init+0x320>)
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800325e:	4a60      	ldr	r2, [pc, #384]	; (80033e0 <HAL_GPIO_Init+0x324>)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	3302      	adds	r3, #2
 8003266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <HAL_GPIO_Init+0x328>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d037      	beq.n	80032fa <HAL_GPIO_Init+0x23e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a56      	ldr	r2, [pc, #344]	; (80033e8 <HAL_GPIO_Init+0x32c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_GPIO_Init+0x23a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a55      	ldr	r2, [pc, #340]	; (80033ec <HAL_GPIO_Init+0x330>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <HAL_GPIO_Init+0x236>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a54      	ldr	r2, [pc, #336]	; (80033f0 <HAL_GPIO_Init+0x334>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d025      	beq.n	80032ee <HAL_GPIO_Init+0x232>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a53      	ldr	r2, [pc, #332]	; (80033f4 <HAL_GPIO_Init+0x338>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_Init+0x22e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_GPIO_Init+0x33c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x22a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a51      	ldr	r2, [pc, #324]	; (80033fc <HAL_GPIO_Init+0x340>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x226>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a50      	ldr	r2, [pc, #320]	; (8003400 <HAL_GPIO_Init+0x344>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x222>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	; (8003404 <HAL_GPIO_Init+0x348>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x21e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4e      	ldr	r2, [pc, #312]	; (8003408 <HAL_GPIO_Init+0x34c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x21a>
 80032d2:	2309      	movs	r3, #9
 80032d4:	e012      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032d6:	230a      	movs	r3, #10
 80032d8:	e010      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032da:	2308      	movs	r3, #8
 80032dc:	e00e      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032de:	2307      	movs	r3, #7
 80032e0:	e00c      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032e2:	2306      	movs	r3, #6
 80032e4:	e00a      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_Init+0x240>
 80032fa:	2300      	movs	r3, #0
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800330c:	4934      	ldr	r1, [pc, #208]	; (80033e0 <HAL_GPIO_Init+0x324>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <HAL_GPIO_Init+0x350>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800333e:	4a33      	ldr	r2, [pc, #204]	; (800340c <HAL_GPIO_Init+0x350>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_GPIO_Init+0x350>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003368:	4a28      	ldr	r2, [pc, #160]	; (800340c <HAL_GPIO_Init+0x350>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_GPIO_Init+0x350>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003392:	4a1e      	ldr	r2, [pc, #120]	; (800340c <HAL_GPIO_Init+0x350>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_GPIO_Init+0x350>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <HAL_GPIO_Init+0x350>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	f67f ae86 	bls.w	80030dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	3724      	adds	r7, #36	; 0x24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020800 	.word	0x40020800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40021400 	.word	0x40021400
 80033fc:	40021800 	.word	0x40021800
 8003400:	40021c00 	.word	0x40021c00
 8003404:	40022000 	.word	0x40022000
 8003408:	40022400 	.word	0x40022400
 800340c:	40013c00 	.word	0x40013c00

08003410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
 800341c:	4613      	mov	r3, r2
 800341e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003420:	787b      	ldrb	r3, [r7, #1]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800342c:	e003      	b.n	8003436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	041a      	lsls	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	619a      	str	r2, [r3, #24]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003454:	887a      	ldrh	r2, [r7, #2]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4013      	ands	r3, r2
 800345a:	041a      	lsls	r2, r3, #16
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43d9      	mvns	r1, r3
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	400b      	ands	r3, r1
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348e:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f806 	bl	80034a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c0:	b08f      	sub	sp, #60	; 0x3c
 80034c2:	af0a      	add	r7, sp, #40	; 0x28
 80034c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e116      	b.n	80036fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fa0e 	bl	800190c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f003 f808 	bl	8006524 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	687e      	ldr	r6, [r7, #4]
 800351c:	466d      	mov	r5, sp
 800351e:	f106 0410 	add.w	r4, r6, #16
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003532:	1d33      	adds	r3, r6, #4
 8003534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f002 ff9c 	bl	8006474 <USB_CoreInit>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0d7      	b.n	80036fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f002 fff6 	bl	8006546 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	e04a      	b.n	80035f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	333d      	adds	r3, #61	; 0x3d
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	333c      	adds	r3, #60	; 0x3c
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	b298      	uxth	r0, r3
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3342      	adds	r3, #66	; 0x42
 800359c:	4602      	mov	r2, r0
 800359e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	333f      	adds	r3, #63	; 0x3f
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3344      	adds	r3, #68	; 0x44
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3348      	adds	r3, #72	; 0x48
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3350      	adds	r3, #80	; 0x50
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	3301      	adds	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3af      	bcc.n	8003560 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e044      	b.n	8003690 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3301      	adds	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d3b5      	bcc.n	8003606 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	687e      	ldr	r6, [r7, #4]
 80036a2:	466d      	mov	r5, sp
 80036a4:	f106 0410 	add.w	r4, r6, #16
 80036a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b8:	1d33      	adds	r3, r6, #4
 80036ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036bc:	6838      	ldr	r0, [r7, #0]
 80036be:	f002 ff6d 	bl	800659c <USB_DevInit>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e014      	b.n	80036fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f80b 	bl	8003708 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 f922 	bl	8006940 <USB_DevDisconnect>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003708 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_PCDEx_ActivateLPM+0x44>)
 8003738:	4313      	orrs	r3, r2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	10000003 	.word	0x10000003

08003750 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003754:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40007000 	.word	0x40007000

08003770 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_PWREx_EnableOverDrive+0x98>)
 800377c:	4b22      	ldr	r3, [pc, #136]	; (8003808 <HAL_PWREx_EnableOverDrive+0x98>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_PWREx_EnableOverDrive+0x98>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800379e:	f7fe fa4d 	bl	8001c3c <HAL_GetTick>
 80037a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037a4:	e009      	b.n	80037ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037a6:	f7fe fa49 	bl	8001c3c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b4:	d901      	bls.n	80037ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e022      	b.n	8003800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d1ee      	bne.n	80037a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d4:	f7fe fa32 	bl	8001c3c <HAL_GetTick>
 80037d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037da:	e009      	b.n	80037f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037dc:	f7fe fa2e 	bl	8001c3c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ea:	d901      	bls.n	80037f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e007      	b.n	8003800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fc:	d1ee      	bne.n	80037dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000

08003810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e29b      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8087 	beq.w	8003942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003834:	4b96      	ldr	r3, [pc, #600]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b04      	cmp	r3, #4
 800383e:	d00c      	beq.n	800385a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003840:	4b93      	ldr	r3, [pc, #588]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d112      	bne.n	8003872 <HAL_RCC_OscConfig+0x62>
 800384c:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003858:	d10b      	bne.n	8003872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385a:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d06c      	beq.n	8003940 <HAL_RCC_OscConfig+0x130>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d168      	bne.n	8003940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e275      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x7a>
 800387c:	4a84      	ldr	r2, [pc, #528]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800387e:	4b84      	ldr	r3, [pc, #528]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e02e      	b.n	80038e8 <HAL_RCC_OscConfig+0xd8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x9c>
 8003892:	4a7f      	ldr	r2, [pc, #508]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4a7c      	ldr	r2, [pc, #496]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038a0:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xd8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0xc0>
 80038b6:	4a76      	ldr	r2, [pc, #472]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038b8:	4b75      	ldr	r3, [pc, #468]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038c4:	4b72      	ldr	r3, [pc, #456]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xd8>
 80038d0:	4a6f      	ldr	r2, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038d2:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4a6c      	ldr	r2, [pc, #432]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038de:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe f9a4 	bl	8001c3c <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe f9a0 	bl	8001c3c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e229      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xe8>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f990 	bl	8001c3c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe f98c 	bl	8001c3c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e215      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b57      	ldr	r3, [pc, #348]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x110>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d069      	beq.n	8003a22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394e:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395a:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x190>
 8003966:	4b4a      	ldr	r3, [pc, #296]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x17a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1e9      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4941      	ldr	r1, [pc, #260]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	e040      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d023      	beq.n	80039f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4a39      	ldr	r2, [pc, #228]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe f942 	bl	8001c3c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fe f93e 	bl	8001c3c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1c7      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	492d      	ldr	r1, [pc, #180]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039dc:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
 80039ee:	e018      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039f2:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe f91e 	bl	8001c3c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe f91a 	bl	8001c3c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1a3      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d038      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d019      	beq.n	8003a6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fe f8fb 	bl	8001c3c <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4a:	f7fe f8f7 	bl	8001c3c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e180      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x23a>
 8003a68:	e01a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6a:	4a09      	ldr	r2, [pc, #36]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fe f8e1 	bl	8001c3c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7e:	f7fe f8dd 	bl	8001c3c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d903      	bls.n	8003a94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e166      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
 8003a90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a4 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4a89      	ldr	r2, [pc, #548]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003abc:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b86      	ldr	r3, [pc, #536]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad6:	4b83      	ldr	r3, [pc, #524]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ae2:	4a80      	ldr	r2, [pc, #512]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003ae4:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe f8a5 	bl	8001c3c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe f8a1 	bl	8001c3c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	; 0x64
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e12a      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x31a>
 8003b1c:	4a70      	ldr	r2, [pc, #448]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b1e:	4b70      	ldr	r3, [pc, #448]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	e02d      	b.n	8003b86 <HAL_RCC_OscConfig+0x376>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x33c>
 8003b32:	4a6b      	ldr	r2, [pc, #428]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	4a68      	ldr	r2, [pc, #416]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b40:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4a:	e01c      	b.n	8003b86 <HAL_RCC_OscConfig+0x376>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x35e>
 8003b54:	4a62      	ldr	r2, [pc, #392]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b56:	4b62      	ldr	r3, [pc, #392]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	4a5f      	ldr	r2, [pc, #380]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b62:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCC_OscConfig+0x376>
 8003b6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	4a59      	ldr	r2, [pc, #356]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b7c:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d015      	beq.n	8003bba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f855 	bl	8001c3c <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fe f851 	bl	8001c3c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0d8      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RCC_OscConfig+0x386>
 8003bb8:	e014      	b.n	8003be4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fe f83f 	bl	8001c3c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fe f83b 	bl	8001c3c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0c2      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ee      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4a3d      	ldr	r2, [pc, #244]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80ae 	beq.w	8003d5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c00:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d06d      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d14b      	bne.n	8003cac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c14:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c16:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe f80c 	bl	8001c3c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe f808 	bl	8001c3c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e091      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c46:	4926      	ldr	r1, [pc, #152]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	019b      	lsls	r3, r3, #6
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	3b01      	subs	r3, #1
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	071b      	lsls	r3, r3, #28
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd ffda 	bl	8001c3c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd ffd6 	bl	8001c3c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e05f      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x47c>
 8003caa:	e057      	b.n	8003d5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4a0c      	ldr	r2, [pc, #48]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd ffc0 	bl	8001c3c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd ffbc 	bl	8001c3c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e045      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_OscConfig+0x4d0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4b0>
 8003cde:	e03d      	b.n	8003d5c <HAL_RCC_OscConfig+0x54c>
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <HAL_RCC_OscConfig+0x558>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d030      	beq.n	8003d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d129      	bne.n	8003d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d122      	bne.n	8003d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d119      	bne.n	8003d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	3b01      	subs	r3, #1
 8003d32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d10f      	bne.n	8003d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0d0      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d210      	bcs.n	8003db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4967      	ldr	r1, [pc, #412]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 020f 	bic.w	r2, r3, #15
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0b8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	4a59      	ldr	r2, [pc, #356]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003dce:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de4:	4a53      	ldr	r2, [pc, #332]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4950      	ldr	r1, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d040      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d115      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2e:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e073      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e06b      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4939      	ldr	r1, [pc, #228]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 0203 	bic.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fd feec 	bl	8001c3c <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fd fee8 	bl	8001c3c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e053      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e90:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d910      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4924      	ldr	r1, [pc, #144]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 020f 	bic.w	r2, r3, #15
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 020f 	and.w	r2, r3, #15
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e032      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4919      	ldr	r1, [pc, #100]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eea:	4912      	ldr	r1, [pc, #72]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003efe:	f000 f821 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003f02:	4601      	mov	r1, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1cc>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	fa21 f303 	lsr.w	r3, r1, r3
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1d0>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1d4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fe48 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	0801ac04 	.word	0x0801ac04
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	20000004 	.word	0x20000004

08003f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	b08f      	sub	sp, #60	; 0x3c
 8003f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f50:	2300      	movs	r3, #0
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f5c:	4b62      	ldr	r3, [pc, #392]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d007      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x34>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 80b2 	bne.w	80040d6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f72:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f76:	e0b1      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f78:	4b5d      	ldr	r3, [pc, #372]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f7c:	e0ae      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7e:	4b5a      	ldr	r3, [pc, #360]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f88:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d04e      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4b54      	ldr	r3, [pc, #336]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	f04f 0400 	mov.w	r4, #0
 8003f9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	ea01 0103 	and.w	r1, r1, r3
 8003faa:	ea02 0204 	and.w	r2, r2, r4
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	0160      	lsls	r0, r4, #5
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24
 8003fbe:	015b      	lsls	r3, r3, #5
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003fc6:	1a5b      	subs	r3, r3, r1
 8003fc8:	eb64 0402 	sbc.w	r4, r4, r2
 8003fcc:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003fd0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003fd4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003fd8:	ebb8 0803 	subs.w	r8, r8, r3
 8003fdc:	eb69 0904 	sbc.w	r9, r9, r4
 8003fe0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003ff8:	eb18 0801 	adds.w	r8, r8, r1
 8003ffc:	eb49 0902 	adc.w	r9, r9, r2
 8004000:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004018:	4640      	mov	r0, r8
 800401a:	4649      	mov	r1, r9
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	f04f 0400 	mov.w	r4, #0
 8004022:	461a      	mov	r2, r3
 8004024:	4623      	mov	r3, r4
 8004026:	f7fc f973 	bl	8000310 <__aeabi_uldivmod>
 800402a:	4603      	mov	r3, r0
 800402c:	460c      	mov	r4, r1
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
 8004030:	e043      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	f04f 0400 	mov.w	r4, #0
 800403c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	ea01 0103 	and.w	r1, r1, r3
 8004048:	ea02 0204 	and.w	r2, r2, r4
 800404c:	460b      	mov	r3, r1
 800404e:	4614      	mov	r4, r2
 8004050:	0160      	lsls	r0, r4, #5
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	015b      	lsls	r3, r3, #5
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004064:	1a5b      	subs	r3, r3, r1
 8004066:	eb64 0402 	sbc.w	r4, r4, r2
 800406a:	01a6      	lsls	r6, r4, #6
 800406c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8004070:	019d      	lsls	r5, r3, #6
 8004072:	1aed      	subs	r5, r5, r3
 8004074:	eb66 0604 	sbc.w	r6, r6, r4
 8004078:	00f3      	lsls	r3, r6, #3
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	00eb      	lsls	r3, r5, #3
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	e897 0060 	ldmia.w	r7, {r5, r6}
 800408c:	186d      	adds	r5, r5, r1
 800408e:	eb46 0602 	adc.w	r6, r6, r2
 8004092:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004096:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800409a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800409e:	4655      	mov	r5, sl
 80040a0:	465e      	mov	r6, fp
 80040a2:	4628      	mov	r0, r5
 80040a4:	4631      	mov	r1, r6
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	461a      	mov	r2, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	f7fc f92e 	bl	8000310 <__aeabi_uldivmod>
 80040b4:	4603      	mov	r3, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	3301      	adds	r3, #1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco / pllp;
 80040ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040d4:	e002      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040de:	4618      	mov	r0, r3
 80040e0:	373c      	adds	r7, #60	; 0x3c
 80040e2:	46bd      	mov	sp, r7
 80040e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	007a1200 	.word	0x007a1200

080040f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCC_GetHCLKFreq+0x14>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000000 	.word	0x20000000

0800410c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004110:	f7ff fff0 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004114:	4601      	mov	r1, r0
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0a9b      	lsrs	r3, r3, #10
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4a03      	ldr	r2, [pc, #12]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40023800 	.word	0x40023800
 8004130:	0801ac14 	.word	0x0801ac14

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004138:	f7ff ffdc 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 800413c:	4601      	mov	r1, r0
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0b5b      	lsrs	r3, r3, #13
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4a03      	ldr	r2, [pc, #12]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	0801ac14 	.word	0x0801ac14

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004184:	4a69      	ldr	r2, [pc, #420]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	4b69      	ldr	r3, [pc, #420]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	4966      	ldr	r1, [pc, #408]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004192:	4b66      	ldr	r3, [pc, #408]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b6:	495d      	ldr	r1, [pc, #372]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d017      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041f2:	494e      	ldr	r1, [pc, #312]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f4:	4b4d      	ldr	r3, [pc, #308]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004210:	d101      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800421e:	2301      	movs	r3, #1
 8004220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 808b 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4a3a      	ldr	r2, [pc, #232]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	4b3a      	ldr	r3, [pc, #232]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	6413      	str	r3, [r2, #64]	; 0x40
 800424c:	4b37      	ldr	r3, [pc, #220]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004258:	4a35      	ldr	r2, [pc, #212]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004264:	f7fd fcea 	bl	8001c3c <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426c:	f7fd fce6 	bl	8001c3c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e38d      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800427e:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d035      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d02e      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042ca:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d114      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fcae 	bl	8001c3c <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fd fcaa 	bl	8001c3c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e34f      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0ee      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004312:	d111      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004314:	4805      	ldr	r0, [pc, #20]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004324:	400b      	ands	r3, r1
 8004326:	4313      	orrs	r3, r2
 8004328:	6083      	str	r3, [r0, #8]
 800432a:	e00b      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800432c:	40023800 	.word	0x40023800
 8004330:	40007000 	.word	0x40007000
 8004334:	0ffffcff 	.word	0x0ffffcff
 8004338:	4ab2      	ldr	r2, [pc, #712]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800433a:	4bb2      	ldr	r3, [pc, #712]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004342:	6093      	str	r3, [r2, #8]
 8004344:	49af      	ldr	r1, [pc, #700]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004346:	4baf      	ldr	r3, [pc, #700]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004352:	4313      	orrs	r3, r2
 8004354:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004362:	4aa8      	ldr	r2, [pc, #672]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004364:	4ba7      	ldr	r3, [pc, #668]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004372:	49a4      	ldr	r1, [pc, #656]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004374:	4ba3      	ldr	r3, [pc, #652]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004376:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004390:	499c      	ldr	r1, [pc, #624]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004392:	4b9c      	ldr	r3, [pc, #624]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043b2:	4994      	ldr	r1, [pc, #592]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80043b4:	4b93      	ldr	r3, [pc, #588]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043d4:	498b      	ldr	r1, [pc, #556]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80043d6:	4b8b      	ldr	r3, [pc, #556]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043f6:	4983      	ldr	r1, [pc, #524]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80043f8:	4b82      	ldr	r3, [pc, #520]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004418:	497a      	ldr	r1, [pc, #488]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800441a:	4b7a      	ldr	r3, [pc, #488]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	f023 0203 	bic.w	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800443a:	4972      	ldr	r1, [pc, #456]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800443c:	4b71      	ldr	r3, [pc, #452]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	f023 020c 	bic.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800445c:	4969      	ldr	r1, [pc, #420]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800445e:	4b69      	ldr	r3, [pc, #420]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800447e:	4961      	ldr	r1, [pc, #388]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004480:	4b60      	ldr	r3, [pc, #384]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044a0:	4958      	ldr	r1, [pc, #352]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80044a2:	4b58      	ldr	r3, [pc, #352]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044c2:	4950      	ldr	r1, [pc, #320]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80044c4:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044e4:	4947      	ldr	r1, [pc, #284]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004506:	493f      	ldr	r1, [pc, #252]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004528:	4936      	ldr	r1, [pc, #216]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800454a:	492e      	ldr	r1, [pc, #184]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458a:	491e      	ldr	r1, [pc, #120]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045ac:	4915      	ldr	r1, [pc, #84]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045d0:	490c      	ldr	r1, [pc, #48]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f4:	4903      	ldr	r1, [pc, #12]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80045f6:	4b03      	ldr	r3, [pc, #12]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	e001      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004604:	40023800 	.word	0x40023800
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800461e:	4981      	ldr	r1, [pc, #516]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004620:	4b80      	ldr	r3, [pc, #512]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004626:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d006      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80d6 	beq.w	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800464a:	4a76      	ldr	r2, [pc, #472]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800464c:	4b75      	ldr	r3, [pc, #468]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004656:	f7fd faf1 	bl	8001c3c <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800465e:	f7fd faed 	bl	8001c3c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	d901      	bls.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e194      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004670:	4b6c      	ldr	r3, [pc, #432]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d021      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11d      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004690:	4b64      	ldr	r3, [pc, #400]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800469e:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	0e1b      	lsrs	r3, r3, #24
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ac:	495d      	ldr	r1, [pc, #372]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	019a      	lsls	r2, r3, #6
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	071b      	lsls	r3, r3, #28
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02e      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f6:	d129      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f8:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004706:	4b47      	ldr	r3, [pc, #284]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	0f1b      	lsrs	r3, r3, #28
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004714:	4943      	ldr	r1, [pc, #268]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	019a      	lsls	r2, r3, #6
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	041b      	lsls	r3, r3, #16
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	061b      	lsls	r3, r3, #24
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	071b      	lsls	r3, r3, #28
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004734:	493b      	ldr	r1, [pc, #236]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473c:	f023 021f 	bic.w	r2, r3, #31
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	3b01      	subs	r3, #1
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01d      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004758:	4b32      	ldr	r3, [pc, #200]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	0e1b      	lsrs	r3, r3, #24
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476c:	0f1b      	lsrs	r3, r3, #28
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004774:	492b      	ldr	r1, [pc, #172]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	019a      	lsls	r2, r3, #6
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	431a      	orrs	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	071b      	lsls	r3, r3, #28
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d011      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047a0:	4920      	ldr	r1, [pc, #128]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	019a      	lsls	r2, r3, #6
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	071b      	lsls	r3, r3, #28
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047c6:	4b17      	ldr	r3, [pc, #92]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd fa34 	bl	8001c3c <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047d8:	f7fd fa30 	bl	8001c3c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0d7      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	f040 80cd 	bne.w	8004998 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480a:	f7fd fa17 	bl	8001c3c <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004812:	f7fd fa13 	bl	8001c3c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	; 0x64
 800481e:	d903      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e0ba      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004824:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004828:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004834:	d0ed      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004852:	2b00      	cmp	r3, #0
 8004854:	d02e      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d12a      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800485e:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800486c:	4b4d      	ldr	r3, [pc, #308]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	0f1b      	lsrs	r3, r3, #28
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800487a:	494a      	ldr	r1, [pc, #296]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	019a      	lsls	r2, r3, #6
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	431a      	orrs	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	071b      	lsls	r3, r3, #28
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800489a:	4942      	ldr	r1, [pc, #264]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800489c:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d022      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c8:	d11d      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d8:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	0f1b      	lsrs	r3, r3, #28
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048e6:	492f      	ldr	r1, [pc, #188]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	019a      	lsls	r2, r3, #6
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	431a      	orrs	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	431a      	orrs	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	071b      	lsls	r3, r3, #28
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d028      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	0e1b      	lsrs	r3, r3, #24
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004920:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800492e:	491d      	ldr	r1, [pc, #116]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	019a      	lsls	r2, r3, #6
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	431a      	orrs	r2, r3
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	071b      	lsls	r3, r3, #28
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800494e:	4915      	ldr	r1, [pc, #84]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004956:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004964:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fd f964 	bl	8001c3c <HAL_GetTick>
 8004974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004978:	f7fd f960 	bl	8001c3c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e007      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004996:	d1ef      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e081      	b.n	8004abe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7f5b      	ldrb	r3, [r3, #29]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc ff1c 	bl	8001808 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ca      	movs	r2, #202	; 0xca
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2253      	movs	r2, #83	; 0x53
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 faac 	bl	8004f44 <RTC_EnterInitMode>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	22ff      	movs	r2, #255	; 0xff
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e05c      	b.n	8004abe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_RTC_Init+0x120>)
 8004a10:	400b      	ands	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	6891      	ldr	r1, [r2, #8]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6850      	ldr	r0, [r2, #4]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6912      	ldr	r2, [r2, #16]
 8004a26:	4310      	orrs	r0, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6952      	ldr	r2, [r2, #20]
 8004a2c:	4302      	orrs	r2, r0
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68d2      	ldr	r2, [r2, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	6911      	ldr	r1, [r2, #16]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	0412      	lsls	r2, r2, #16
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	68d2      	ldr	r2, [r2, #12]
 8004a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a5e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa40 	bl	8004ef4 <HAL_RTC_WaitForSynchro>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	22ff      	movs	r2, #255	; 0xff
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2204      	movs	r2, #4
 8004a86:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e018      	b.n	8004abe <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a96:	f022 0208 	bic.w	r2, r2, #8
 8004a9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6992      	ldr	r2, [r2, #24]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	22ff      	movs	r2, #255	; 0xff
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	ff8fffbf 	.word	0xff8fffbf

08004acc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	7f1b      	ldrb	r3, [r3, #28]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RTC_SetTime+0x1c>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0a8      	b.n	8004c3a <HAL_RTC_SetTime+0x16e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2202      	movs	r2, #2
 8004af2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d126      	bne.n	8004b48 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fa42 	bl	8004f9c <RTC_ByteToBcd2>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fa3b 	bl	8004f9c <RTC_ByteToBcd2>
 8004b26:	4603      	mov	r3, r0
 8004b28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004b2a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	789b      	ldrb	r3, [r3, #2]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa33 	bl	8004f9c <RTC_ByteToBcd2>
 8004b36:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004b38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	7b1b      	ldrb	r3, [r3, #12]
 8004b40:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e018      	b.n	8004b7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b68:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004b6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	7b1b      	ldrb	r3, [r3, #12]
 8004b74:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	22ca      	movs	r2, #202	; 0xca
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2253      	movs	r2, #83	; 0x53
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f9da 	bl	8004f44 <RTC_EnterInitMode>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e045      	b.n	8004c3a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	6979      	ldr	r1, [r7, #20]
 8004bb4:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RTC_SetTime+0x178>)
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	6892      	ldr	r2, [r2, #8]
 8004bc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	6891      	ldr	r1, [r2, #8]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	6910      	ldr	r0, [r2, #16]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	6952      	ldr	r2, [r2, #20]
 8004bdc:	4302      	orrs	r2, r0
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	68d2      	ldr	r2, [r2, #12]
 8004bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bf0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d111      	bne.n	8004c24 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f977 	bl	8004ef4 <HAL_RTC_WaitForSynchro>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2204      	movs	r2, #4
 8004c18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e00a      	b.n	8004c3a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	22ff      	movs	r2, #255	; 0xff
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004c38:	2300      	movs	r3, #0
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd90      	pop	{r4, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	007f7f7f 	.word	0x007f7f7f

08004c48 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <HAL_RTC_GetTime+0xb8>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11a      	bne.n	8004cf6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f987 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f97e 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	789b      	ldrb	r3, [r3, #2]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f975 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	007f7f7f 	.word	0x007f7f7f

08004d04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	7f1b      	ldrb	r3, [r3, #28]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_RTC_SetDate+0x1c>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e092      	b.n	8004e46 <HAL_RTC_SetDate+0x142>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10e      	bne.n	8004d50 <HAL_RTC_SetDate+0x4c>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	330a      	adds	r3, #10
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11c      	bne.n	8004d90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	78db      	ldrb	r3, [r3, #3]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f91e 	bl	8004f9c <RTC_ByteToBcd2>
 8004d60:	4603      	mov	r3, r0
 8004d62:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 f917 	bl	8004f9c <RTC_ByteToBcd2>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004d72:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	789b      	ldrb	r3, [r3, #2]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f90f 	bl	8004f9c <RTC_ByteToBcd2>
 8004d7e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004d80:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e00e      	b.n	8004dae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004d9c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8004da2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	22ca      	movs	r2, #202	; 0xca
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2253      	movs	r2, #83	; 0x53
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f8c0 	bl	8004f44 <RTC_EnterInitMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e031      	b.n	8004e46 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <HAL_RTC_SetDate+0x14c>)
 8004dea:	400b      	ands	r3, r1
 8004dec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	68d2      	ldr	r2, [r2, #12]
 8004df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dfc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d111      	bne.n	8004e30 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f871 	bl	8004ef4 <HAL_RTC_WaitForSynchro>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	22ff      	movs	r2, #255	; 0xff
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2204      	movs	r2, #4
 8004e24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e00a      	b.n	8004e46 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	00ffff3f 	.word	0x00ffff3f

08004e54 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RTC_GetDate+0x9c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	0b5b      	lsrs	r3, r3, #13
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11a      	bne.n	8004ee4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	78db      	ldrb	r3, [r3, #3]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f890 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f887 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	789b      	ldrb	r3, [r3, #2]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f87e 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004edc:	4603      	mov	r3, r0
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	00ffff3f 	.word	0x00ffff3f

08004ef4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	68d2      	ldr	r2, [r2, #12]
 8004f0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f10:	f7fc fe94 	bl	8001c3c <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f16:	e009      	b.n	8004f2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f18:	f7fc fe90 	bl	8001c3c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f26:	d901      	bls.n	8004f2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e007      	b.n	8004f3c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ee      	beq.n	8004f18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d119      	bne.n	8004f92 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f04f 32ff 	mov.w	r2, #4294967295
 8004f66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f68:	f7fc fe68 	bl	8001c3c <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f6e:	e009      	b.n	8004f84 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f70:	f7fc fe64 	bl	8001c3c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7e:	d901      	bls.n	8004f84 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e007      	b.n	8004f94 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ee      	beq.n	8004f70 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8004faa:	e005      	b.n	8004fb8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	3b0a      	subs	r3, #10
 8004fb6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	d8f6      	bhi.n	8004fac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	b2db      	uxtb	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	4413      	add	r3, r2
 8005006:	b2db      	uxtb	r3, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e049      	b.n	80050ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc fbfe 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f000 fab0 	bl	80055b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d001      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e054      	b.n	8005186 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	68d2      	ldr	r2, [r2, #12]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a26      	ldr	r2, [pc, #152]	; (8005194 <HAL_TIM_Base_Start_IT+0xd0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d022      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d01d      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a22      	ldr	r2, [pc, #136]	; (8005198 <HAL_TIM_Base_Start_IT+0xd4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a21      	ldr	r2, [pc, #132]	; (800519c <HAL_TIM_Base_Start_IT+0xd8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_TIM_Base_Start_IT+0xe8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d115      	bne.n	8005170 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_TIM_Base_Start_IT+0xec>)
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d015      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0xbe>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d011      	beq.n	8005182 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e008      	b.n	8005182 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e000      	b.n	8005184 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40010000 	.word	0x40010000
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40001800 	.word	0x40001800
 80051b0:	00010007 	.word	0x00010007

080051b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0202 	mvn.w	r2, #2
 80051e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f9c0 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f9b2 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9c3 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b04      	cmp	r3, #4
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b04      	cmp	r3, #4
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0204 	mvn.w	r2, #4
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f996 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f988 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f999 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b08      	cmp	r3, #8
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0208 	mvn.w	r2, #8
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2204      	movs	r2, #4
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f96c 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f95e 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f96f 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0210 	mvn.w	r2, #16
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2208      	movs	r2, #8
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f942 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f934 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f945 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10e      	bne.n	8005338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0201 	mvn.w	r2, #1
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fc fa08 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d10e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d107      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fafc 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d10e      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d107      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 faef 	bl	8005970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d10e      	bne.n	80053be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d107      	bne.n	80053be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8f3 	bl	80055a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d10e      	bne.n	80053ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d107      	bne.n	80053ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0220 	mvn.w	r2, #32
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 faaf 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIM_ConfigClockSource+0x18>
 8005408:	2302      	movs	r3, #2
 800540a:	e0a6      	b.n	800555a <HAL_TIM_ConfigClockSource+0x166>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <HAL_TIM_ConfigClockSource+0x170>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005432:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d067      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0x120>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d80b      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x6c>
 8005448:	2b10      	cmp	r3, #16
 800544a:	d073      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0x140>
 800544c:	2b10      	cmp	r3, #16
 800544e:	d802      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x62>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d06f      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005454:	e078      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005456:	2b20      	cmp	r3, #32
 8005458:	d06c      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0x140>
 800545a:	2b30      	cmp	r3, #48	; 0x30
 800545c:	d06a      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800545e:	e073      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d00d      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0x8c>
 8005464:	2b70      	cmp	r3, #112	; 0x70
 8005466:	d804      	bhi.n	8005472 <HAL_TIM_ConfigClockSource+0x7e>
 8005468:	2b50      	cmp	r3, #80	; 0x50
 800546a:	d033      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0xe0>
 800546c:	2b60      	cmp	r3, #96	; 0x60
 800546e:	d041      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005470:	e06a      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005476:	d066      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x152>
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547c:	d017      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800547e:	e063      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6899      	ldr	r1, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f000 f9ac 	bl	80057ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
      break;
 80054ac:	e04c      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f000 f995 	bl	80057ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	6892      	ldr	r2, [r2, #8]
 80054cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d0:	609a      	str	r2, [r3, #8]
      break;
 80054d2:	e039      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f000 f909 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2150      	movs	r1, #80	; 0x50
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f962 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 80054f2:	e029      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	461a      	mov	r2, r3
 8005502:	f000 f928 	bl	8005756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2160      	movs	r1, #96	; 0x60
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f952 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005512:	e019      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	461a      	mov	r2, r3
 8005522:	f000 f8e9 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2140      	movs	r1, #64	; 0x40
 800552c:	4618      	mov	r0, r3
 800552e:	f000 f942 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005532:	e009      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 f939 	bl	80057b6 <TIM_ITRx_SetConfig>
        break;
 8005544:	e000      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	fffeff88 	.word	0xfffeff88

08005568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a40      	ldr	r2, [pc, #256]	; (80056cc <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <TIM_Base_SetConfig+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <TIM_Base_SetConfig+0x114>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d02b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d027      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d023      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <TIM_Base_SetConfig+0x124>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <TIM_Base_SetConfig+0x128>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <TIM_Base_SetConfig+0x12c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <TIM_Base_SetConfig+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a25      	ldr	r2, [pc, #148]	; (80056ec <TIM_Base_SetConfig+0x134>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a24      	ldr	r2, [pc, #144]	; (80056f0 <TIM_Base_SetConfig+0x138>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <TIM_Base_SetConfig+0x13c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <TIM_Base_SetConfig+0x114>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <TIM_Base_SetConfig+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	615a      	str	r2, [r3, #20]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40010400 	.word	0x40010400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800
 80056ec:	40001800 	.word	0x40001800
 80056f0:	40001c00 	.word	0x40001c00
 80056f4:	40002000 	.word	0x40002000

080056f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0210 	bic.w	r2, r3, #16
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f043 0307 	orr.w	r3, r3, #7
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	431a      	orrs	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4313      	orrs	r3, r2
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005840:	2302      	movs	r3, #2
 8005842:	e06d      	b.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a30      	ldr	r2, [pc, #192]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800587e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005890:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a20      	ldr	r2, [pc, #128]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b6:	d01d      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1a      	ldr	r2, [pc, #104]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a15      	ldr	r2, [pc, #84]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10c      	bne.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e040      	b.n	8005a18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb ff6c 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f98e 	bl	8005ce4 <UART_SetConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e022      	b.n	8005a18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fbe2 	bl	80061a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	6852      	ldr	r2, [r2, #4]
 80059ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	6892      	ldr	r2, [r2, #8]
 80059fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fc69 	bl	80062e8 <UART_CheckIdleState>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d17f      	bne.n	8005b38 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_UART_Transmit+0x24>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e078      	b.n	8005b3a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Transmit+0x36>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e071      	b.n	8005b3a <HAL_UART_Transmit+0x11a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a6c:	f7fc f8e6 	bl	8001c3c <HAL_GetTick>
 8005a70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	d108      	bne.n	8005a9e <HAL_UART_Transmit+0x7e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e003      	b.n	8005aa6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005aae:	e02b      	b.n	8005b08 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2180      	movs	r1, #128	; 0x80
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fc5d 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e037      	b.n	8005b3a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	8812      	ldrh	r2, [r2, #0]
 8005ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e007      	b.n	8005af6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1cd      	bne.n	8005ab0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fc2b 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e005      	b.n	8005b3a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	; 0x28
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	f040 80be 	bne.w	8005cd8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Receive+0x26>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0b6      	b.n	8005cda <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Receive+0x38>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e0af      	b.n	8005cda <HAL_UART_Receive+0x198>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2222      	movs	r2, #34	; 0x22
 8005b8e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b96:	f7fc f851 	bl	8001c3c <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb4:	d10e      	bne.n	8005bd4 <HAL_UART_Receive+0x92>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <HAL_UART_Receive+0x88>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005bc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bc8:	e02d      	b.n	8005c26 <HAL_UART_Receive+0xe4>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	22ff      	movs	r2, #255	; 0xff
 8005bce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bd2:	e028      	b.n	8005c26 <HAL_UART_Receive+0xe4>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <HAL_UART_Receive+0xb6>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_UART_Receive+0xac>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	22ff      	movs	r2, #255	; 0xff
 8005be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bec:	e01b      	b.n	8005c26 <HAL_UART_Receive+0xe4>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	227f      	movs	r2, #127	; 0x7f
 8005bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bf6:	e016      	b.n	8005c26 <HAL_UART_Receive+0xe4>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c00:	d10d      	bne.n	8005c1e <HAL_UART_Receive+0xdc>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_UART_Receive+0xd2>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	227f      	movs	r2, #127	; 0x7f
 8005c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c12:	e008      	b.n	8005c26 <HAL_UART_Receive+0xe4>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	223f      	movs	r2, #63	; 0x3f
 8005c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c1c:	e003      	b.n	8005c26 <HAL_UART_Receive+0xe4>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d108      	bne.n	8005c4a <HAL_UART_Receive+0x108>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e003      	b.n	8005c52 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c5a:	e032      	b.n	8005cc2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2120      	movs	r1, #32
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fb87 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e031      	b.n	8005cda <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10c      	bne.n	8005c96 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	8a7b      	ldrh	r3, [r7, #18]
 8005c86:	4013      	ands	r3, r2
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	3302      	adds	r3, #2
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e00c      	b.n	8005cb0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	8a7b      	ldrh	r3, [r7, #18]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1c6      	bne.n	8005c5c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	4bb3      	ldr	r3, [pc, #716]	; (8005fe0 <UART_SetConfig+0x2fc>)
 8005d14:	400b      	ands	r3, r1
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	6852      	ldr	r2, [r2, #4]
 8005d26:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68d2      	ldr	r2, [r2, #12]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	6892      	ldr	r2, [r2, #8]
 8005d4c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4aa2      	ldr	r2, [pc, #648]	; (8005fe4 <UART_SetConfig+0x300>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d121      	bne.n	8005da4 <UART_SetConfig+0xc0>
 8005d60:	4ba1      	ldr	r3, [pc, #644]	; (8005fe8 <UART_SetConfig+0x304>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d816      	bhi.n	8005d9c <UART_SetConfig+0xb8>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x90>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005d8b 	.word	0x08005d8b
 8005d80:	08005d97 	.word	0x08005d97
 8005d84:	2301      	movs	r3, #1
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e150      	b.n	800602c <UART_SetConfig+0x348>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e14d      	b.n	800602c <UART_SetConfig+0x348>
 8005d90:	2304      	movs	r3, #4
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e14a      	b.n	800602c <UART_SetConfig+0x348>
 8005d96:	2308      	movs	r3, #8
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e147      	b.n	800602c <UART_SetConfig+0x348>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	bf00      	nop
 8005da2:	e143      	b.n	800602c <UART_SetConfig+0x348>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a90      	ldr	r2, [pc, #576]	; (8005fec <UART_SetConfig+0x308>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d134      	bne.n	8005e18 <UART_SetConfig+0x134>
 8005dae:	4b8e      	ldr	r3, [pc, #568]	; (8005fe8 <UART_SetConfig+0x304>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d829      	bhi.n	8005e10 <UART_SetConfig+0x12c>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <UART_SetConfig+0xe0>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005df9 	.word	0x08005df9
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e11 	.word	0x08005e11
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e05 	.word	0x08005e05
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005dff 	.word	0x08005dff
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e11 	.word	0x08005e11
 8005df4:	08005e0b 	.word	0x08005e0b
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e116      	b.n	800602c <UART_SetConfig+0x348>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e113      	b.n	800602c <UART_SetConfig+0x348>
 8005e04:	2304      	movs	r3, #4
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e110      	b.n	800602c <UART_SetConfig+0x348>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e10d      	b.n	800602c <UART_SetConfig+0x348>
 8005e10:	2310      	movs	r3, #16
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	bf00      	nop
 8005e16:	e109      	b.n	800602c <UART_SetConfig+0x348>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a74      	ldr	r2, [pc, #464]	; (8005ff0 <UART_SetConfig+0x30c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d120      	bne.n	8005e64 <UART_SetConfig+0x180>
 8005e22:	4b71      	ldr	r3, [pc, #452]	; (8005fe8 <UART_SetConfig+0x304>)
 8005e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d00f      	beq.n	8005e50 <UART_SetConfig+0x16c>
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d802      	bhi.n	8005e3a <UART_SetConfig+0x156>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <UART_SetConfig+0x160>
 8005e38:	e010      	b.n	8005e5c <UART_SetConfig+0x178>
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d005      	beq.n	8005e4a <UART_SetConfig+0x166>
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d009      	beq.n	8005e56 <UART_SetConfig+0x172>
 8005e42:	e00b      	b.n	8005e5c <UART_SetConfig+0x178>
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e0f0      	b.n	800602c <UART_SetConfig+0x348>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e0ed      	b.n	800602c <UART_SetConfig+0x348>
 8005e50:	2304      	movs	r3, #4
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e0ea      	b.n	800602c <UART_SetConfig+0x348>
 8005e56:	2308      	movs	r3, #8
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e0e7      	b.n	800602c <UART_SetConfig+0x348>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	bf00      	nop
 8005e62:	e0e3      	b.n	800602c <UART_SetConfig+0x348>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a62      	ldr	r2, [pc, #392]	; (8005ff4 <UART_SetConfig+0x310>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d120      	bne.n	8005eb0 <UART_SetConfig+0x1cc>
 8005e6e:	4b5e      	ldr	r3, [pc, #376]	; (8005fe8 <UART_SetConfig+0x304>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d00f      	beq.n	8005e9c <UART_SetConfig+0x1b8>
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d802      	bhi.n	8005e86 <UART_SetConfig+0x1a2>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <UART_SetConfig+0x1ac>
 8005e84:	e010      	b.n	8005ea8 <UART_SetConfig+0x1c4>
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d005      	beq.n	8005e96 <UART_SetConfig+0x1b2>
 8005e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e8c:	d009      	beq.n	8005ea2 <UART_SetConfig+0x1be>
 8005e8e:	e00b      	b.n	8005ea8 <UART_SetConfig+0x1c4>
 8005e90:	2300      	movs	r3, #0
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e0ca      	b.n	800602c <UART_SetConfig+0x348>
 8005e96:	2302      	movs	r3, #2
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e0c7      	b.n	800602c <UART_SetConfig+0x348>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e0c4      	b.n	800602c <UART_SetConfig+0x348>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e0c1      	b.n	800602c <UART_SetConfig+0x348>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	bf00      	nop
 8005eae:	e0bd      	b.n	800602c <UART_SetConfig+0x348>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a50      	ldr	r2, [pc, #320]	; (8005ff8 <UART_SetConfig+0x314>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d124      	bne.n	8005f04 <UART_SetConfig+0x220>
 8005eba:	4b4b      	ldr	r3, [pc, #300]	; (8005fe8 <UART_SetConfig+0x304>)
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec8:	d012      	beq.n	8005ef0 <UART_SetConfig+0x20c>
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d802      	bhi.n	8005ed6 <UART_SetConfig+0x1f2>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <UART_SetConfig+0x200>
 8005ed4:	e012      	b.n	8005efc <UART_SetConfig+0x218>
 8005ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eda:	d006      	beq.n	8005eea <UART_SetConfig+0x206>
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d009      	beq.n	8005ef6 <UART_SetConfig+0x212>
 8005ee2:	e00b      	b.n	8005efc <UART_SetConfig+0x218>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	e0a0      	b.n	800602c <UART_SetConfig+0x348>
 8005eea:	2302      	movs	r3, #2
 8005eec:	77fb      	strb	r3, [r7, #31]
 8005eee:	e09d      	b.n	800602c <UART_SetConfig+0x348>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e09a      	b.n	800602c <UART_SetConfig+0x348>
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e097      	b.n	800602c <UART_SetConfig+0x348>
 8005efc:	2310      	movs	r3, #16
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	bf00      	nop
 8005f02:	e093      	b.n	800602c <UART_SetConfig+0x348>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a3c      	ldr	r2, [pc, #240]	; (8005ffc <UART_SetConfig+0x318>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d124      	bne.n	8005f58 <UART_SetConfig+0x274>
 8005f0e:	4b36      	ldr	r3, [pc, #216]	; (8005fe8 <UART_SetConfig+0x304>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1c:	d012      	beq.n	8005f44 <UART_SetConfig+0x260>
 8005f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f22:	d802      	bhi.n	8005f2a <UART_SetConfig+0x246>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <UART_SetConfig+0x254>
 8005f28:	e012      	b.n	8005f50 <UART_SetConfig+0x26c>
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d006      	beq.n	8005f3e <UART_SetConfig+0x25a>
 8005f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f34:	d009      	beq.n	8005f4a <UART_SetConfig+0x266>
 8005f36:	e00b      	b.n	8005f50 <UART_SetConfig+0x26c>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e076      	b.n	800602c <UART_SetConfig+0x348>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e073      	b.n	800602c <UART_SetConfig+0x348>
 8005f44:	2304      	movs	r3, #4
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e070      	b.n	800602c <UART_SetConfig+0x348>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e06d      	b.n	800602c <UART_SetConfig+0x348>
 8005f50:	2310      	movs	r3, #16
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	bf00      	nop
 8005f56:	e069      	b.n	800602c <UART_SetConfig+0x348>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a28      	ldr	r2, [pc, #160]	; (8006000 <UART_SetConfig+0x31c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d124      	bne.n	8005fac <UART_SetConfig+0x2c8>
 8005f62:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <UART_SetConfig+0x304>)
 8005f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d012      	beq.n	8005f98 <UART_SetConfig+0x2b4>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d802      	bhi.n	8005f7e <UART_SetConfig+0x29a>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <UART_SetConfig+0x2a8>
 8005f7c:	e012      	b.n	8005fa4 <UART_SetConfig+0x2c0>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	d006      	beq.n	8005f92 <UART_SetConfig+0x2ae>
 8005f84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f88:	d009      	beq.n	8005f9e <UART_SetConfig+0x2ba>
 8005f8a:	e00b      	b.n	8005fa4 <UART_SetConfig+0x2c0>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e04c      	b.n	800602c <UART_SetConfig+0x348>
 8005f92:	2302      	movs	r3, #2
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e049      	b.n	800602c <UART_SetConfig+0x348>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e046      	b.n	800602c <UART_SetConfig+0x348>
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e043      	b.n	800602c <UART_SetConfig+0x348>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	bf00      	nop
 8005faa:	e03f      	b.n	800602c <UART_SetConfig+0x348>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <UART_SetConfig+0x320>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d138      	bne.n	8006028 <UART_SetConfig+0x344>
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <UART_SetConfig+0x304>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc4:	d026      	beq.n	8006014 <UART_SetConfig+0x330>
 8005fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fca:	d802      	bhi.n	8005fd2 <UART_SetConfig+0x2ee>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <UART_SetConfig+0x324>
 8005fd0:	e026      	b.n	8006020 <UART_SetConfig+0x33c>
 8005fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd6:	d01a      	beq.n	800600e <UART_SetConfig+0x32a>
 8005fd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fdc:	d01d      	beq.n	800601a <UART_SetConfig+0x336>
 8005fde:	e01f      	b.n	8006020 <UART_SetConfig+0x33c>
 8005fe0:	efff69f3 	.word	0xefff69f3
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40004400 	.word	0x40004400
 8005ff0:	40004800 	.word	0x40004800
 8005ff4:	40004c00 	.word	0x40004c00
 8005ff8:	40005000 	.word	0x40005000
 8005ffc:	40011400 	.word	0x40011400
 8006000:	40007800 	.word	0x40007800
 8006004:	40007c00 	.word	0x40007c00
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e00e      	b.n	800602c <UART_SetConfig+0x348>
 800600e:	2302      	movs	r3, #2
 8006010:	77fb      	strb	r3, [r7, #31]
 8006012:	e00b      	b.n	800602c <UART_SetConfig+0x348>
 8006014:	2304      	movs	r3, #4
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e008      	b.n	800602c <UART_SetConfig+0x348>
 800601a:	2308      	movs	r3, #8
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e005      	b.n	800602c <UART_SetConfig+0x348>
 8006020:	2310      	movs	r3, #16
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	bf00      	nop
 8006026:	e001      	b.n	800602c <UART_SetConfig+0x348>
 8006028:	2310      	movs	r3, #16
 800602a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006034:	d15c      	bne.n	80060f0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d828      	bhi.n	800608e <UART_SetConfig+0x3aa>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <UART_SetConfig+0x360>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006069 	.word	0x08006069
 8006048:	08006071 	.word	0x08006071
 800604c:	08006079 	.word	0x08006079
 8006050:	0800608f 	.word	0x0800608f
 8006054:	0800607f 	.word	0x0800607f
 8006058:	0800608f 	.word	0x0800608f
 800605c:	0800608f 	.word	0x0800608f
 8006060:	0800608f 	.word	0x0800608f
 8006064:	08006087 	.word	0x08006087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fe f850 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 800606c:	61b8      	str	r0, [r7, #24]
        break;
 800606e:	e013      	b.n	8006098 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fe f860 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8006074:	61b8      	str	r0, [r7, #24]
        break;
 8006076:	e00f      	b.n	8006098 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006078:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <UART_SetConfig+0x4bc>)
 800607a:	61bb      	str	r3, [r7, #24]
        break;
 800607c:	e00c      	b.n	8006098 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fd ff61 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8006082:	61b8      	str	r0, [r7, #24]
        break;
 8006084:	e008      	b.n	8006098 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608a:	61bb      	str	r3, [r7, #24]
        break;
 800608c:	e004      	b.n	8006098 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	77bb      	strb	r3, [r7, #30]
        break;
 8006096:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d074      	beq.n	8006188 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	005a      	lsls	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	441a      	add	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b0f      	cmp	r3, #15
 80060ba:	d916      	bls.n	80060ea <UART_SetConfig+0x406>
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c2:	d212      	bcs.n	80060ea <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f023 030f 	bic.w	r3, r3, #15
 80060cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	b29a      	uxth	r2, r3
 80060da:	89fb      	ldrh	r3, [r7, #14]
 80060dc:	4313      	orrs	r3, r2
 80060de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	89fa      	ldrh	r2, [r7, #14]
 80060e6:	60da      	str	r2, [r3, #12]
 80060e8:	e04e      	b.n	8006188 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	77bb      	strb	r3, [r7, #30]
 80060ee:	e04b      	b.n	8006188 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f0:	7ffb      	ldrb	r3, [r7, #31]
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d827      	bhi.n	8006146 <UART_SetConfig+0x462>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <UART_SetConfig+0x418>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006121 	.word	0x08006121
 8006100:	08006129 	.word	0x08006129
 8006104:	08006131 	.word	0x08006131
 8006108:	08006147 	.word	0x08006147
 800610c:	08006137 	.word	0x08006137
 8006110:	08006147 	.word	0x08006147
 8006114:	08006147 	.word	0x08006147
 8006118:	08006147 	.word	0x08006147
 800611c:	0800613f 	.word	0x0800613f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006120:	f7fd fff4 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 8006124:	61b8      	str	r0, [r7, #24]
        break;
 8006126:	e013      	b.n	8006150 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006128:	f7fe f804 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 800612c:	61b8      	str	r0, [r7, #24]
        break;
 800612e:	e00f      	b.n	8006150 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <UART_SetConfig+0x4bc>)
 8006132:	61bb      	str	r3, [r7, #24]
        break;
 8006134:	e00c      	b.n	8006150 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006136:	f7fd ff05 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 800613a:	61b8      	str	r0, [r7, #24]
        break;
 800613c:	e008      	b.n	8006150 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006142:	61bb      	str	r3, [r7, #24]
        break;
 8006144:	e004      	b.n	8006150 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	77bb      	strb	r3, [r7, #30]
        break;
 800614e:	bf00      	nop
    }

    if (pclk != 0U)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d018      	beq.n	8006188 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085a      	lsrs	r2, r3, #1
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	441a      	add	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	b29b      	uxth	r3, r3
 800616a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0f      	cmp	r3, #15
 8006170:	d908      	bls.n	8006184 <UART_SetConfig+0x4a0>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006178:	d204      	bcs.n	8006184 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	e001      	b.n	8006188 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006194:	7fbb      	ldrb	r3, [r7, #30]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	00f42400 	.word	0x00f42400

080061a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	6852      	ldr	r2, [r2, #4]
 80061c2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	6852      	ldr	r2, [r2, #4]
 80061e4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061ec:	430a      	orrs	r2, r1
 80061ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	6852      	ldr	r2, [r2, #4]
 8006206:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	6852      	ldr	r2, [r2, #4]
 8006228:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	6892      	ldr	r2, [r2, #8]
 800624a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006274:	430a      	orrs	r2, r1
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01a      	beq.n	80062ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	6852      	ldr	r2, [r2, #4]
 800628e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a2:	d10a      	bne.n	80062ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	6852      	ldr	r2, [r2, #4]
 80062ae:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	6852      	ldr	r2, [r2, #4]
 80062d0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  }
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f8:	f7fb fca0 	bl	8001c3c <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b08      	cmp	r3, #8
 800630a:	d10e      	bne.n	800632a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f82d 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e023      	b.n	8006372 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b04      	cmp	r3, #4
 8006336:	d10e      	bne.n	8006356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f817 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e00d      	b.n	8006372 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638a:	e05e      	b.n	800644a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d05a      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006394:	f7fb fc52 	bl	8001c3c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d802      	bhi.n	80063aa <UART_WaitOnFlagUntilTimeout+0x30>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11b      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	6892      	ldr	r2, [r2, #8]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e043      	b.n	800646a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02c      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	d124      	bne.n	800644a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006408:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006418:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	6892      	ldr	r2, [r2, #8]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e00f      	b.n	800646a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	401a      	ands	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	429a      	cmp	r2, r3
 8006466:	d091      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006474:	b084      	sub	sp, #16
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	f107 001c 	add.w	r0, r7, #28
 8006482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2b01      	cmp	r3, #1
 800648a:	d120      	bne.n	80064ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b20      	ldr	r3, [pc, #128]	; (8006520 <USB_CoreInit+0xac>)
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d105      	bne.n	80064c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa60 	bl	8006988 <USB_CoreReset>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]
 80064cc:	e010      	b.n	80064f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa54 	bl	8006988 <USB_CoreReset>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10b      	bne.n	800650e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f043 0206 	orr.w	r2, r3, #6
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800651a:	b004      	add	sp, #16
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	ffbdffbf 	.word	0xffbdffbf

08006524 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 0201 	bic.w	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d106      	bne.n	8006572 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60da      	str	r2, [r3, #12]
 8006570:	e00b      	b.n	800658a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
 8006584:	e001      	b.n	800658a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e003      	b.n	8006592 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800658a:	2032      	movs	r0, #50	; 0x32
 800658c:	f7fb fb62 	bl	8001c54 <HAL_Delay>

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e009      	b.n	80065d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3340      	adds	r3, #64	; 0x40
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3301      	adds	r3, #1
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b0e      	cmp	r3, #14
 80065d4:	d9f2      	bls.n	80065bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d11d      	bne.n	8006618 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e2:	461a      	mov	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f043 0302 	orr.w	r3, r3, #2
 80065f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e005      	b.n	8006624 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800662a:	461a      	mov	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	461a      	mov	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	2b01      	cmp	r3, #1
 8006646:	d10c      	bne.n	8006662 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800664e:	2100      	movs	r1, #0
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f95b 	bl	800690c <USB_SetDevSpeed>
 8006656:	e018      	b.n	800668a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006658:	2101      	movs	r1, #1
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f956 	bl	800690c <USB_SetDevSpeed>
 8006660:	e013      	b.n	800668a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b03      	cmp	r3, #3
 8006666:	d10c      	bne.n	8006682 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800666e:	2100      	movs	r1, #0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f94b 	bl	800690c <USB_SetDevSpeed>
 8006676:	e008      	b.n	800668a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006678:	2101      	movs	r1, #1
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f946 	bl	800690c <USB_SetDevSpeed>
 8006680:	e003      	b.n	800668a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006682:	2103      	movs	r1, #3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f941 	bl	800690c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800668a:	2110      	movs	r1, #16
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8f5 	bl	800687c <USB_FlushTxFifo>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f913 	bl	80068c8 <USB_FlushRxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	461a      	mov	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	461a      	mov	r2, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e043      	b.n	800675e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ec:	d118      	bne.n	8006720 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e013      	b.n	8006732 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	461a      	mov	r2, r3
 8006718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e008      	b.n	8006732 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	461a      	mov	r2, r3
 8006752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3301      	adds	r3, #1
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	429a      	cmp	r2, r3
 8006764:	d8b7      	bhi.n	80066d6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e043      	b.n	80067f4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006782:	d118      	bne.n	80067b6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e013      	b.n	80067c8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	461a      	mov	r2, r3
 80067ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e008      	b.n	80067c8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	461a      	mov	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	461a      	mov	r2, r3
 80067e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3301      	adds	r3, #1
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d8b7      	bhi.n	800676c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	461a      	mov	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006810:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800681e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f043 0210 	orr.w	r2, r3, #16
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <USB_DevInit+0x2d8>)
 8006838:	4313      	orrs	r3, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800683e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f043 0208 	orr.w	r2, r3, #8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d105      	bne.n	8006862 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <USB_DevInit+0x2dc>)
 800685c:	4313      	orrs	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686e:	b004      	add	sp, #16
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	803c3800 	.word	0x803c3800
 8006878:	40000004 	.word	0x40000004

0800687c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	019b      	lsls	r3, r3, #6
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <USB_FlushTxFifo+0x48>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e006      	b.n	80068b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d0f0      	beq.n	8006896 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	00030d40 	.word	0x00030d40

080068c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2210      	movs	r2, #16
 80068d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3301      	adds	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a09      	ldr	r2, [pc, #36]	; (8006908 <USB_FlushRxFifo+0x40>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e006      	b.n	80068fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d0f0      	beq.n	80068da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	00030d40 	.word	0x00030d40

0800690c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	4619      	mov	r1, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	4313      	orrs	r3, r2
 8006930:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006952:	461a      	mov	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006968:	461a      	mov	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f043 0302 	orr.w	r3, r3, #2
 8006976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <USB_CoreReset+0x64>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e01b      	b.n	80069de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	daf2      	bge.n	8006994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f043 0201 	orr.w	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <USB_CoreReset+0x64>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e006      	b.n	80069de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d0f0      	beq.n	80069be <USB_CoreReset+0x36>

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	00030d40 	.word	0x00030d40

080069f0 <User_notification>:

/* USER CODE BEGIN 2 */
ip4_addr_t dnsserver;

void User_notification(struct netif *netif)
{
 80069f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d016      	beq.n	8006a34 <User_notification+0x44>
 {

    /* Update DHCP state machine */
 //   DHCP_state = DHCP_START;
    sprintf((char *)iptxt, "User_notification Static IP address: %s\n", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f005 fbd0 	bl	800c1b0 <ip4addr_ntoa>
 8006a10:	4603      	mov	r3, r0
 8006a12:	461a      	mov	r2, r3
 8006a14:	491b      	ldr	r1, [pc, #108]	; (8006a84 <User_notification+0x94>)
 8006a16:	481c      	ldr	r0, [pc, #112]	; (8006a88 <User_notification+0x98>)
 8006a18:	f00f fac4 	bl	8015fa4 <siprintf>
   HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
 8006a1c:	481a      	ldr	r0, [pc, #104]	; (8006a88 <User_notification+0x98>)
 8006a1e:	f7f9 fc19 	bl	8000254 <strlen>
 8006a22:	4603      	mov	r3, r0
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a2a:	4917      	ldr	r1, [pc, #92]	; (8006a88 <User_notification+0x98>)
 8006a2c:	4817      	ldr	r0, [pc, #92]	; (8006a8c <User_notification+0x9c>)
 8006a2e:	f7fe fff7 	bl	8005a20 <HAL_UART_Transmit>
   // DHCP_state = DHCP_LINK_DOWN;
    sprintf((char *)iptxt,"The network cable is not connected \n");
     HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
    /* Turn On LED 2 to indicate ETH and LwIP init error */
  }
}
 8006a32:	e022      	b.n	8006a7a <User_notification+0x8a>
    sprintf((char *)iptxt,"The network cable is not connected \n");
 8006a34:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <User_notification+0x98>)
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <User_notification+0xa0>)
 8006a38:	4614      	mov	r4, r2
 8006a3a:	469e      	mov	lr, r3
 8006a3c:	f104 0c20 	add.w	ip, r4, #32
 8006a40:	4675      	mov	r5, lr
 8006a42:	4626      	mov	r6, r4
 8006a44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006a46:	6028      	str	r0, [r5, #0]
 8006a48:	6069      	str	r1, [r5, #4]
 8006a4a:	60aa      	str	r2, [r5, #8]
 8006a4c:	60eb      	str	r3, [r5, #12]
 8006a4e:	3410      	adds	r4, #16
 8006a50:	f10e 0e10 	add.w	lr, lr, #16
 8006a54:	4564      	cmp	r4, ip
 8006a56:	d1f3      	bne.n	8006a40 <User_notification+0x50>
 8006a58:	4673      	mov	r3, lr
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	6810      	ldr	r0, [r2, #0]
 8006a5e:	6018      	str	r0, [r3, #0]
 8006a60:	7912      	ldrb	r2, [r2, #4]
 8006a62:	711a      	strb	r2, [r3, #4]
     HAL_UART_Transmit(&huart3,iptxt,strlen(iptxt),1000);
 8006a64:	4808      	ldr	r0, [pc, #32]	; (8006a88 <User_notification+0x98>)
 8006a66:	f7f9 fbf5 	bl	8000254 <strlen>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a72:	4905      	ldr	r1, [pc, #20]	; (8006a88 <User_notification+0x98>)
 8006a74:	4805      	ldr	r0, [pc, #20]	; (8006a8c <User_notification+0x9c>)
 8006a76:	f7fe ffd3 	bl	8005a20 <HAL_UART_Transmit>
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a82:	bf00      	nop
 8006a84:	080176b4 	.word	0x080176b4
 8006a88:	20002a68 	.word	0x20002a68
 8006a8c:	20000c98 	.word	0x20000c98
 8006a90:	080176e0 	.word	0x080176e0

08006a94 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 8006a9a:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <MX_LWIP_Init+0xc4>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8006aa0:	4b2d      	ldr	r3, [pc, #180]	; (8006b58 <MX_LWIP_Init+0xc4>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006aa6:	4b2c      	ldr	r3, [pc, #176]	; (8006b58 <MX_LWIP_Init+0xc4>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 8006aac:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <MX_LWIP_Init+0xc4>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8006ab2:	4b2a      	ldr	r3, [pc, #168]	; (8006b5c <MX_LWIP_Init+0xc8>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8006ab8:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <MX_LWIP_Init+0xc8>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8006abe:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <MX_LWIP_Init+0xc8>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <MX_LWIP_Init+0xc8>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8006aca:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <MX_LWIP_Init+0xcc>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006ad0:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <MX_LWIP_Init+0xcc>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006ad6:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <MX_LWIP_Init+0xcc>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8006adc:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <MX_LWIP_Init+0xcc>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006ae2:	f003 fe71 	bl	800a7c8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */

  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8006ae6:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <MX_LWIP_Init+0xd0>)
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <MX_LWIP_Init+0xd4>)
 8006aea:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8006aec:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <MX_LWIP_Init+0xd8>)
 8006aee:	4a20      	ldr	r2, [pc, #128]	; (8006b70 <MX_LWIP_Init+0xdc>)
 8006af0:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask, MASK_ADDR0, MASK_ADDR1, MASK_ADDR2, MASK_ADDR3);
 8006af2:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <MX_LWIP_Init+0xe0>)
 8006af4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006af8:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <MX_LWIP_Init+0xe4>)
 8006afc:	4a1f      	ldr	r2, [pc, #124]	; (8006b7c <MX_LWIP_Init+0xe8>)
 8006afe:	601a      	str	r2, [r3, #0]
  dns_setserver (0, &dnsserver);
 8006b00:	491d      	ldr	r1, [pc, #116]	; (8006b78 <MX_LWIP_Init+0xe4>)
 8006b02:	2000      	movs	r0, #0
 8006b04:	f002 febe 	bl	8009884 <dns_setserver>
  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006b08:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <MX_LWIP_Init+0xec>)
 8006b0a:	9302      	str	r3, [sp, #8]
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <MX_LWIP_Init+0xf0>)
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	2300      	movs	r3, #0
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <MX_LWIP_Init+0xd8>)
 8006b16:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <MX_LWIP_Init+0xe0>)
 8006b18:	4912      	ldr	r1, [pc, #72]	; (8006b64 <MX_LWIP_Init+0xd0>)
 8006b1a:	481b      	ldr	r0, [pc, #108]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b1c:	f006 fec2 	bl	800d8a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006b20:	4819      	ldr	r0, [pc, #100]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b22:	f007 f871 	bl	800dc08 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006b26:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <MX_LWIP_Init+0xa8>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006b34:	4814      	ldr	r0, [pc, #80]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b36:	f007 f877 	bl	800dc28 <netif_set_up>
 8006b3a:	e002      	b.n	8006b42 <MX_LWIP_Init+0xae>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006b3c:	4812      	ldr	r0, [pc, #72]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b3e:	f007 f8df 	bl	800dd00 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006b42:	4912      	ldr	r1, [pc, #72]	; (8006b8c <MX_LWIP_Init+0xf8>)
 8006b44:	4810      	ldr	r0, [pc, #64]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b46:	f007 f90d 	bl	800dd64 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */
  User_notification(&gnetif);
 8006b4a:	480f      	ldr	r0, [pc, #60]	; (8006b88 <MX_LWIP_Init+0xf4>)
 8006b4c:	f7ff ff50 	bl	80069f0 <User_notification>

/* USER CODE END 3 */
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20002acc 	.word	0x20002acc
 8006b5c:	20002a64 	.word	0x20002a64
 8006b60:	20002a28 	.word	0x20002a28
 8006b64:	20002a60 	.word	0x20002a60
 8006b68:	5389a8c0 	.word	0x5389a8c0
 8006b6c:	20002ad8 	.word	0x20002ad8
 8006b70:	0189a8c0 	.word	0x0189a8c0
 8006b74:	20002ad4 	.word	0x20002ad4
 8006b78:	20002ad0 	.word	0x20002ad0
 8006b7c:	c66ef03e 	.word	0xc66ef03e
 8006b80:	08015b89 	.word	0x08015b89
 8006b84:	08007159 	.word	0x08007159
 8006b88:	20002a2c 	.word	0x20002a2c
 8006b8c:	080071c5 	.word	0x080071c5

08006b90 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006b94:	4803      	ldr	r0, [pc, #12]	; (8006ba4 <MX_LWIP_Process+0x14>)
 8006b96:	f000 fabf 	bl	8007118 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006b9a:	f00e faff 	bl	801519c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006b9e:	bf00      	nop
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20002a2c 	.word	0x20002a2c

08006ba8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	; 0x38
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a4e      	ldr	r2, [pc, #312]	; (8006d00 <HAL_ETH_MspInit+0x158>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	f040 8096 	bne.w	8006cf8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006bcc:	4a4d      	ldr	r2, [pc, #308]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006bce:	4b4d      	ldr	r3, [pc, #308]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8006bd8:	4b4a      	ldr	r3, [pc, #296]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be0:	623b      	str	r3, [r7, #32]
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	4a47      	ldr	r2, [pc, #284]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006be6:	4b47      	ldr	r3, [pc, #284]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bee:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf0:	4b44      	ldr	r3, [pc, #272]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4a41      	ldr	r2, [pc, #260]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006bfe:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c06:	6313      	str	r3, [r2, #48]	; 0x30
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c14:	4a3b      	ldr	r2, [pc, #236]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c16:	4b3b      	ldr	r3, [pc, #236]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f043 0304 	orr.w	r3, r3, #4
 8006c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c20:	4b38      	ldr	r3, [pc, #224]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c2c:	4a35      	ldr	r2, [pc, #212]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c2e:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6313      	str	r3, [r2, #48]	; 0x30
 8006c38:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c44:	4a2f      	ldr	r2, [pc, #188]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c46:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f043 0302 	orr.w	r3, r3, #2
 8006c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c50:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006c5c:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c5e:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c66:	6313      	str	r3, [r2, #48]	; 0x30
 8006c68:	4b26      	ldr	r3, [pc, #152]	; (8006d04 <HAL_ETH_MspInit+0x15c>)
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006c74:	2332      	movs	r3, #50	; 0x32
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c80:	2303      	movs	r3, #3
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c84:	230b      	movs	r3, #11
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	481e      	ldr	r0, [pc, #120]	; (8006d08 <HAL_ETH_MspInit+0x160>)
 8006c90:	f7fc fa14 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006c94:	2386      	movs	r3, #134	; 0x86
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ca4:	230b      	movs	r3, #11
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cac:	4619      	mov	r1, r3
 8006cae:	4817      	ldr	r0, [pc, #92]	; (8006d0c <HAL_ETH_MspInit+0x164>)
 8006cb0:	f7fc fa04 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006cc6:	230b      	movs	r3, #11
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cce:	4619      	mov	r1, r3
 8006cd0:	480f      	ldr	r0, [pc, #60]	; (8006d10 <HAL_ETH_MspInit+0x168>)
 8006cd2:	f7fc f9f3 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006cd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ce8:	230b      	movs	r3, #11
 8006cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4808      	ldr	r0, [pc, #32]	; (8006d14 <HAL_ETH_MspInit+0x16c>)
 8006cf4:	f7fc f9e2 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3738      	adds	r7, #56	; 0x38
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40028000 	.word	0x40028000
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40020800 	.word	0x40020800
 8006d0c:	40020000 	.word	0x40020000
 8006d10:	40020400 	.word	0x40020400
 8006d14:	40021800 	.word	0x40021800

08006d18 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006d24:	4b4d      	ldr	r3, [pc, #308]	; (8006e5c <low_level_init+0x144>)
 8006d26:	4a4e      	ldr	r2, [pc, #312]	; (8006e60 <low_level_init+0x148>)
 8006d28:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006d2a:	4b4c      	ldr	r3, [pc, #304]	; (8006e5c <low_level_init+0x144>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006d30:	4b4a      	ldr	r3, [pc, #296]	; (8006e5c <low_level_init+0x144>)
 8006d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d36:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006d38:	4b48      	ldr	r3, [pc, #288]	; (8006e5c <low_level_init+0x144>)
 8006d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d3e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006d40:	4b46      	ldr	r3, [pc, #280]	; (8006e5c <low_level_init+0x144>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006d46:	2300      	movs	r3, #0
 8006d48:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006d4e:	23e1      	movs	r3, #225	; 0xe1
 8006d50:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006d52:	2300      	movs	r3, #0
 8006d54:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006d56:	2300      	movs	r3, #0
 8006d58:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006d5e:	4a3f      	ldr	r2, [pc, #252]	; (8006e5c <low_level_init+0x144>)
 8006d60:	f107 0308 	add.w	r3, r7, #8
 8006d64:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006d66:	4b3d      	ldr	r3, [pc, #244]	; (8006e5c <low_level_init+0x144>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006d6c:	4b3b      	ldr	r3, [pc, #236]	; (8006e5c <low_level_init+0x144>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006d72:	4b3a      	ldr	r3, [pc, #232]	; (8006e5c <low_level_init+0x144>)
 8006d74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006d78:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006d7a:	4838      	ldr	r0, [pc, #224]	; (8006e5c <low_level_init+0x144>)
 8006d7c:	f7fb f89c 	bl	8001eb8 <HAL_ETH_Init>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d108      	bne.n	8006d9c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006d90:	f043 0304 	orr.w	r3, r3, #4
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	4a31      	ldr	r2, [pc, #196]	; (8006e64 <low_level_init+0x14c>)
 8006da0:	4931      	ldr	r1, [pc, #196]	; (8006e68 <low_level_init+0x150>)
 8006da2:	482e      	ldr	r0, [pc, #184]	; (8006e5c <low_level_init+0x144>)
 8006da4:	f7fb fa24 	bl	80021f0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006da8:	2304      	movs	r3, #4
 8006daa:	4a30      	ldr	r2, [pc, #192]	; (8006e6c <low_level_init+0x154>)
 8006dac:	4930      	ldr	r1, [pc, #192]	; (8006e70 <low_level_init+0x158>)
 8006dae:	482b      	ldr	r0, [pc, #172]	; (8006e5c <low_level_init+0x144>)
 8006db0:	f7fb fa87 	bl	80022c2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2206      	movs	r2, #6
 8006db8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <low_level_init+0x144>)
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006dc8:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <low_level_init+0x144>)
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	785a      	ldrb	r2, [r3, #1]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006dd4:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <low_level_init+0x144>)
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	789a      	ldrb	r2, [r3, #2]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006de0:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <low_level_init+0x144>)
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	78da      	ldrb	r2, [r3, #3]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <low_level_init+0x144>)
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	791a      	ldrb	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006df8:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <low_level_init+0x144>)
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	795a      	ldrb	r2, [r3, #5]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e0a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e12:	f043 030a 	orr.w	r3, r3, #10
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006e1e:	480f      	ldr	r0, [pc, #60]	; (8006e5c <low_level_init+0x144>)
 8006e20:	f7fb fcf8 	bl	8002814 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006e24:	f107 0310 	add.w	r3, r7, #16
 8006e28:	461a      	mov	r2, r3
 8006e2a:	211d      	movs	r1, #29
 8006e2c:	480b      	ldr	r0, [pc, #44]	; (8006e5c <low_level_init+0x144>)
 8006e2e:	f7fb fc23 	bl	8002678 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f043 030b 	orr.w	r3, r3, #11
 8006e38:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	211d      	movs	r1, #29
 8006e40:	4806      	ldr	r0, [pc, #24]	; (8006e5c <low_level_init+0x144>)
 8006e42:	f7fb fc81 	bl	8002748 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006e46:	f107 0310 	add.w	r3, r7, #16
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	211d      	movs	r1, #29
 8006e4e:	4803      	ldr	r0, [pc, #12]	; (8006e5c <low_level_init+0x144>)
 8006e50:	f7fb fc12 	bl	8002678 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006e54:	bf00      	nop
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	200043ac 	.word	0x200043ac
 8006e60:	40028000 	.word	0x40028000
 8006e64:	200043f4 	.word	0x200043f4
 8006e68:	20002adc 	.word	0x20002adc
 8006e6c:	20002b5c 	.word	0x20002b5c
 8006e70:	2000432c 	.word	0x2000432c

08006e74 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006e7e:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <low_level_output+0x138>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006e96:	4b45      	ldr	r3, [pc, #276]	; (8006fac <low_level_output+0x138>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	623b      	str	r3, [r7, #32]
 8006ea4:	e05a      	b.n	8006f5c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da03      	bge.n	8006eb6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006eae:	23f8      	movs	r3, #248	; 0xf8
 8006eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006eb4:	e05c      	b.n	8006f70 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	895b      	ldrh	r3, [r3, #10]
 8006eba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006ec0:	e02f      	b.n	8006f22 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	18d0      	adds	r0, r2, r3
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	18d1      	adds	r1, r2, r3
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f00e ffb0 	bl	8015e3e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	da03      	bge.n	8006ef4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006eec:	23f8      	movs	r3, #248	; 0xf8
 8006eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006ef2:	e03d      	b.n	8006f70 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006f04:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006f10:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006f1c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d8c8      	bhi.n	8006ec2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	18d0      	adds	r0, r2, r3
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4619      	mov	r1, r3
 8006f42:	f00e ff7c 	bl	8015e3e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	623b      	str	r3, [r7, #32]
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1a1      	bne.n	8006ea6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	4811      	ldr	r0, [pc, #68]	; (8006fac <low_level_output+0x138>)
 8006f66:	f7fb fa19 	bl	800239c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <low_level_output+0x138>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	f241 0314 	movw	r3, #4116	; 0x1014
 8006f78:	4413      	add	r3, r2
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00d      	beq.n	8006fa0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <low_level_output+0x138>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	f241 0314 	movw	r3, #4116	; 0x1014
 8006f8c:	4413      	add	r3, r2
 8006f8e:	2220      	movs	r2, #32
 8006f90:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <low_level_output+0x138>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	f241 0304 	movw	r3, #4100	; 0x1004
 8006f9a:	4413      	add	r3, r2
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006fa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3728      	adds	r7, #40	; 0x28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200043ac 	.word	0x200043ac

08006fb0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	; 0x30
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8006fd4:	484f      	ldr	r0, [pc, #316]	; (8007114 <low_level_input+0x164>)
 8006fd6:	f7fb facb 	bl	8002570 <HAL_ETH_GetReceivedFrame>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <low_level_input+0x34>

    return NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e092      	b.n	800710a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006fe4:	4b4b      	ldr	r3, [pc, #300]	; (8007114 <low_level_input+0x164>)
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006fea:	4b4a      	ldr	r3, [pc, #296]	; (8007114 <low_level_input+0x164>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006ff6:	89fb      	ldrh	r3, [r7, #14]
 8006ff8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2000      	movs	r0, #0
 8007000:	f006 ff4c 	bl	800de9c <pbuf_alloc>
 8007004:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d04b      	beq.n	80070a4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800700c:	4b41      	ldr	r3, [pc, #260]	; (8007114 <low_level_input+0x164>)
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
 800701a:	e040      	b.n	800709e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	895b      	ldrh	r3, [r3, #10]
 8007020:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007026:	e021      	b.n	800706c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	18d0      	adds	r0, r2, r3
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	18d1      	adds	r1, r2, r3
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	461a      	mov	r2, r3
 8007040:	f00e fefd 	bl	8015e3e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4413      	add	r3, r2
 8007056:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800705a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007066:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007076:	4293      	cmp	r3, r2
 8007078:	d8d6      	bhi.n	8007028 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	18d0      	adds	r0, r2, r3
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4619      	mov	r1, r3
 800708c:	f00e fed7 	bl	8015e3e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1bb      	bne.n	800701c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80070a4:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <low_level_input+0x164>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e00b      	b.n	80070c8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3301      	adds	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <low_level_input+0x164>)
 80070ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d8ee      	bhi.n	80070b0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <low_level_input+0x164>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <low_level_input+0x164>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80070e0:	4413      	add	r3, r2
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <low_level_input+0x164>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	f241 0314 	movw	r3, #4116	; 0x1014
 80070f4:	4413      	add	r3, r2
 80070f6:	2280      	movs	r2, #128	; 0x80
 80070f8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <low_level_input+0x164>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	f241 0308 	movw	r3, #4104	; 0x1008
 8007102:	4413      	add	r3, r2
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800710a:	4618      	mov	r0, r3
 800710c:	3730      	adds	r7, #48	; 0x30
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200043ac 	.word	0x200043ac

08007118 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff ff45 	bl	8006fb0 <low_level_input>
 8007126:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d010      	beq.n	8007150 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	4798      	blx	r3
 8007138:	4603      	mov	r3, r0
 800713a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800713c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d006      	beq.n	8007152 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f007 f9bd 	bl	800e4c4 <pbuf_free>
    p = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	e000      	b.n	8007152 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007150:	bf00      	nop
  }
}
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <ethernetif_init+0x1c>
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <ethernetif_init+0x48>)
 8007168:	f240 2211 	movw	r2, #529	; 0x211
 800716c:	490d      	ldr	r1, [pc, #52]	; (80071a4 <ethernetif_init+0x4c>)
 800716e:	480e      	ldr	r0, [pc, #56]	; (80071a8 <ethernetif_init+0x50>)
 8007170:	f00e fe92 	bl	8015e98 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2273      	movs	r2, #115	; 0x73
 8007178:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2274      	movs	r2, #116	; 0x74
 8007180:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a09      	ldr	r2, [pc, #36]	; (80071ac <ethernetif_init+0x54>)
 8007188:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <ethernetif_init+0x58>)
 800718e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fdc1 	bl	8006d18 <low_level_init>

  return ERR_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	08017708 	.word	0x08017708
 80071a4:	08017724 	.word	0x08017724
 80071a8:	08017734 	.word	0x08017734
 80071ac:	0800b091 	.word	0x0800b091
 80071b0:	08006e75 	.word	0x08006e75

080071b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80071b8:	f7fa fd40 	bl	8001c3c <HAL_GetTick>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d05b      	beq.n	800729a <ethernetif_update_config+0xd6>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80071e2:	4b33      	ldr	r3, [pc, #204]	; (80072b0 <ethernetif_update_config+0xec>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d040      	beq.n	800726c <ethernetif_update_config+0xa8>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80071ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071ee:	2100      	movs	r1, #0
 80071f0:	482f      	ldr	r0, [pc, #188]	; (80072b0 <ethernetif_update_config+0xec>)
 80071f2:	f7fb faa9 	bl	8002748 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80071f6:	f7fa fd21 	bl	8001c3c <HAL_GetTick>
 80071fa:	4603      	mov	r3, r0
 80071fc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80071fe:	f107 0308 	add.w	r3, r7, #8
 8007202:	461a      	mov	r2, r3
 8007204:	2101      	movs	r1, #1
 8007206:	482a      	ldr	r0, [pc, #168]	; (80072b0 <ethernetif_update_config+0xec>)
 8007208:	f7fb fa36 	bl	8002678 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800720c:	f7fa fd16 	bl	8001c3c <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721a:	d826      	bhi.n	800726a <ethernetif_update_config+0xa6>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0eb      	beq.n	80071fe <ethernetif_update_config+0x3a>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	461a      	mov	r2, r3
 800722c:	211f      	movs	r1, #31
 800722e:	4820      	ldr	r0, [pc, #128]	; (80072b0 <ethernetif_update_config+0xec>)
 8007230:	f7fb fa22 	bl	8002678 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <ethernetif_update_config+0x84>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800723e:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <ethernetif_update_config+0xec>)
 8007240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	e002      	b.n	800724e <ethernetif_update_config+0x8a>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007248:	4b19      	ldr	r3, [pc, #100]	; (80072b0 <ethernetif_update_config+0xec>)
 800724a:	2200      	movs	r2, #0
 800724c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <ethernetif_update_config+0x9c>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007258:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <ethernetif_update_config+0xec>)
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
 800725e:	e014      	b.n	800728a <ethernetif_update_config+0xc6>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007260:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <ethernetif_update_config+0xec>)
 8007262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007266:	609a      	str	r2, [r3, #8]
 8007268:	e00f      	b.n	800728a <ethernetif_update_config+0xc6>
          goto error;
 800726a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800726c:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <ethernetif_update_config+0xec>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	08db      	lsrs	r3, r3, #3
 8007272:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <ethernetif_update_config+0xec>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800727c:	4313      	orrs	r3, r2
 800727e:	b29b      	uxth	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	2100      	movs	r1, #0
 8007284:	480a      	ldr	r0, [pc, #40]	; (80072b0 <ethernetif_update_config+0xec>)
 8007286:	f7fb fa5f 	bl	8002748 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800728a:	2100      	movs	r1, #0
 800728c:	4808      	ldr	r0, [pc, #32]	; (80072b0 <ethernetif_update_config+0xec>)
 800728e:	f7fb fb1f 	bl	80028d0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007292:	4807      	ldr	r0, [pc, #28]	; (80072b0 <ethernetif_update_config+0xec>)
 8007294:	f7fb fabe 	bl	8002814 <HAL_ETH_Start>
 8007298:	e002      	b.n	80072a0 <ethernetif_update_config+0xdc>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800729a:	4805      	ldr	r0, [pc, #20]	; (80072b0 <ethernetif_update_config+0xec>)
 800729c:	f7fb fae9 	bl	8002872 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f807 	bl	80072b4 <ethernetif_notify_conn_changed>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	200043ac 	.word	0x200043ac

080072b4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <httpc_free_state>:
} httpc_state_t;

/** Free http client state and deallocate all resources within */
static err_t
httpc_free_state(httpc_state_t* req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  struct altcp_pcb* tpcb;

  if (req->request != NULL) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <httpc_free_state+0x20>
    pbuf_free(req->request);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	4618      	mov	r0, r3
 80072de:	f007 f8f1 	bl	800e4c4 <pbuf_free>
    req->request = NULL;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	611a      	str	r2, [r3, #16]
  }
  if (req->rx_hdrs != NULL) {
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d007      	beq.n	8007300 <httpc_free_state+0x38>
    pbuf_free(req->rx_hdrs);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f007 f8e5 	bl	800e4c4 <pbuf_free>
    req->rx_hdrs = NULL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	615a      	str	r2, [r3, #20]
  }

  tpcb = req->pcb;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
  mem_free(req);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f005 ff52 	bl	800d1b0 <mem_free>
  req = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	607b      	str	r3, [r7, #4]

  if (tpcb != NULL) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d023      	beq.n	800735e <httpc_free_state+0x96>
    err_t r;
    altcp_arg(tpcb, NULL);
 8007316:	2100      	movs	r1, #0
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f009 f965 	bl	80105e8 <tcp_arg>
    altcp_recv(tpcb, NULL);
 800731e:	2100      	movs	r1, #0
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f009 f973 	bl	801060c <tcp_recv>
    altcp_err(tpcb, NULL);
 8007326:	2100      	movs	r1, #0
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f009 f9b3 	bl	8010694 <tcp_err>
    altcp_poll(tpcb, NULL, 0);
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f009 f9d0 	bl	80106d8 <tcp_poll>
    altcp_sent(tpcb, NULL);
 8007338:	2100      	movs	r1, #0
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f009 f988 	bl	8010650 <tcp_sent>
    r = altcp_close(tpcb);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f007 ff85 	bl	800f250 <tcp_close>
 8007346:	4603      	mov	r3, r0
 8007348:	72fb      	strb	r3, [r7, #11]
    if (r != ERR_OK) {
 800734a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <httpc_free_state+0x96>
      altcp_abort(tpcb);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f008 f866 	bl	800f424 <tcp_abort>
      return ERR_ABRT;
 8007358:	f06f 030c 	mvn.w	r3, #12
 800735c:	e000      	b.n	8007360 <httpc_free_state+0x98>
    }
  }
  return ERR_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <httpc_close>:

/** Close the connection: call finished callback and free the state */
static err_t
httpc_close(httpc_state_t* req, httpc_result_t result, u32_t server_response, err_t err)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b087      	sub	sp, #28
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	461a      	mov	r2, r3
 8007374:	460b      	mov	r3, r1
 8007376:	72fb      	strb	r3, [r7, #11]
 8007378:	4613      	mov	r3, r2
 800737a:	72bb      	strb	r3, [r7, #10]
  if (req != NULL) {
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01a      	beq.n	80073b8 <httpc_close+0x50>
    if (req->conn_settings != NULL) {
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d011      	beq.n	80073ae <httpc_close+0x46>
      if (req->conn_settings->result_fn != NULL) {
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <httpc_close+0x46>
        req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	689c      	ldr	r4, [r3, #8]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073a2:	7af9      	ldrb	r1, [r7, #11]
 80073a4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	47a0      	blx	r4
      }
    }
    return httpc_free_state(req);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff ff8a 	bl	80072c8 <httpc_free_state>
 80073b4:	4603      	mov	r3, r0
 80073b6:	e000      	b.n	80073ba <httpc_close+0x52>
  }
  return ERR_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd90      	pop	{r4, r7, pc}
	...

080073c4 <http_parse_response_status>:

/** Parse http header response line 1 */
static err_t
http_parse_response_status(struct pbuf *p, u16_t *http_version, u16_t *http_status, u16_t *http_status_str_offset)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	; 0x30
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 80073d2:	2300      	movs	r3, #0
 80073d4:	2202      	movs	r2, #2
 80073d6:	4948      	ldr	r1, [pc, #288]	; (80074f8 <http_parse_response_status+0x134>)
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f007 fcfc 	bl	800edd6 <pbuf_memfind>
 80073de:	4603      	mov	r3, r0
 80073e0:	857b      	strh	r3, [r7, #42]	; 0x2a
  if (end1 != 0xFFFF) {
 80073e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80073e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d07e      	beq.n	80074ea <http_parse_response_status+0x126>
    /* get parts of first line */
    u16_t space1, space2;
    space1 = pbuf_memfind(p, " ", 1, 0);
 80073ec:	2300      	movs	r3, #0
 80073ee:	2201      	movs	r2, #1
 80073f0:	4942      	ldr	r1, [pc, #264]	; (80074fc <http_parse_response_status+0x138>)
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f007 fcef 	bl	800edd6 <pbuf_memfind>
 80073f8:	4603      	mov	r3, r0
 80073fa:	853b      	strh	r3, [r7, #40]	; 0x28
    if (space1 != 0xFFFF) {
 80073fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80073fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007402:	4293      	cmp	r3, r2
 8007404:	d071      	beq.n	80074ea <http_parse_response_status+0x126>
      if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0)  && (pbuf_get_at(p, 6) == '.')) {
 8007406:	2305      	movs	r3, #5
 8007408:	4a3d      	ldr	r2, [pc, #244]	; (8007500 <http_parse_response_status+0x13c>)
 800740a:	2100      	movs	r1, #0
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f007 fc8a 	bl	800ed26 <pbuf_memcmp>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d168      	bne.n	80074ea <http_parse_response_status+0x126>
 8007418:	2106      	movs	r1, #6
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f007 fc28 	bl	800ec70 <pbuf_get_at>
 8007420:	4603      	mov	r3, r0
 8007422:	2b2e      	cmp	r3, #46	; 0x2e
 8007424:	d161      	bne.n	80074ea <http_parse_response_status+0x126>
        char status_num[10];
        size_t status_num_len;
        /* parse http version */
        u16_t version = pbuf_get_at(p, 5) - '0';
 8007426:	2105      	movs	r1, #5
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f007 fc21 	bl	800ec70 <pbuf_get_at>
 800742e:	4603      	mov	r3, r0
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	84fb      	strh	r3, [r7, #38]	; 0x26
        version <<= 8;
 8007436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	84fb      	strh	r3, [r7, #38]	; 0x26
        version |= pbuf_get_at(p, 7) - '0';
 800743c:	2107      	movs	r1, #7
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f007 fc16 	bl	800ec70 <pbuf_get_at>
 8007444:	4603      	mov	r3, r0
 8007446:	3b30      	subs	r3, #48	; 0x30
 8007448:	b21a      	sxth	r2, r3
 800744a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800744e:	4313      	orrs	r3, r2
 8007450:	b21b      	sxth	r3, r3
 8007452:	84fb      	strh	r3, [r7, #38]	; 0x26
        *http_version = version;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007458:	801a      	strh	r2, [r3, #0]

        /* parse http status number */
        space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 800745a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800745c:	3301      	adds	r3, #1
 800745e:	b29b      	uxth	r3, r3
 8007460:	2201      	movs	r2, #1
 8007462:	4926      	ldr	r1, [pc, #152]	; (80074fc <http_parse_response_status+0x138>)
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f007 fcb6 	bl	800edd6 <pbuf_memfind>
 800746a:	4603      	mov	r3, r0
 800746c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (space2 != 0xFFFF) {
 800746e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007474:	4293      	cmp	r3, r2
 8007476:	d00a      	beq.n	800748e <http_parse_response_status+0xca>
          *http_status_str_offset = space2 + 1;
 8007478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800747a:	3301      	adds	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	801a      	strh	r2, [r3, #0]
          status_num_len = space2 - space1 - 1;
 8007482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748c:	e004      	b.n	8007498 <http_parse_response_status+0xd4>
        } else {
          status_num_len = end1 - space1 - 1;
 800748e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007490:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        memset(status_num, 0, sizeof(status_num));
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	220a      	movs	r2, #10
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f00e fcf1 	bl	8015e88 <memset>
        if (pbuf_copy_partial(p, status_num, (u16_t)status_num_len, space1 + 1) == status_num_len) {
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074ac:	3301      	adds	r3, #1
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f107 0114 	add.w	r1, r7, #20
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f007 f9ff 	bl	800e8b8 <pbuf_copy_partial>
 80074ba:	4603      	mov	r3, r0
 80074bc:	461a      	mov	r2, r3
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d112      	bne.n	80074ea <http_parse_response_status+0x126>
          int status = atoi(status_num);
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4618      	mov	r0, r3
 80074ca:	f00e fc5c 	bl	8015d86 <atoi>
 80074ce:	6238      	str	r0, [r7, #32]
          if ((status > 0) && (status <= 0xFFFF)) {
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dd09      	ble.n	80074ea <http_parse_response_status+0x126>
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	da05      	bge.n	80074ea <http_parse_response_status+0x126>
            *http_status = (u16_t)status;
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	801a      	strh	r2, [r3, #0]
            return ERR_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e001      	b.n	80074ee <http_parse_response_status+0x12a>
          }
        }
      }
    }
  }
  return ERR_VAL;
 80074ea:	f06f 0305 	mvn.w	r3, #5
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3730      	adds	r7, #48	; 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	0801775c 	.word	0x0801775c
 80074fc:	08017760 	.word	0x08017760
 8007500:	08017764 	.word	0x08017764

08007504 <http_wait_headers>:

/** Wait for all headers to be received, return its length and content-length (if available) */
static err_t
http_wait_headers(struct pbuf *p, u32_t *content_length, u16_t *total_header_len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08c      	sub	sp, #48	; 0x30
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8007510:	2300      	movs	r3, #0
 8007512:	2204      	movs	r2, #4
 8007514:	4930      	ldr	r1, [pc, #192]	; (80075d8 <http_wait_headers+0xd4>)
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f007 fc5d 	bl	800edd6 <pbuf_memfind>
 800751c:	4603      	mov	r3, r0
 800751e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if (end1 < (0xFFFF - 2)) {
 8007520:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007522:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007526:	4293      	cmp	r3, r2
 8007528:	d84f      	bhi.n	80075ca <http_wait_headers+0xc6>
    /* all headers received */
    /* check if we have a content length (@todo: case insensitive?) */
    u16_t content_len_hdr;
    *content_length = HTTPC_CONTENT_LEN_INVALID;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f04f 32ff 	mov.w	r2, #4294967295
 8007530:	601a      	str	r2, [r3, #0]
    *total_header_len = end1 + 4;
 8007532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007534:	3304      	adds	r3, #4
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	801a      	strh	r2, [r3, #0]

    content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 800753c:	2300      	movs	r3, #0
 800753e:	2210      	movs	r2, #16
 8007540:	4926      	ldr	r1, [pc, #152]	; (80075dc <http_wait_headers+0xd8>)
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f007 fc47 	bl	800edd6 <pbuf_memfind>
 8007548:	4603      	mov	r3, r0
 800754a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (content_len_hdr != 0xFFFF) {
 800754c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800754e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007552:	4293      	cmp	r3, r2
 8007554:	d037      	beq.n	80075c6 <http_wait_headers+0xc2>
      u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8007556:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007558:	2202      	movs	r2, #2
 800755a:	4921      	ldr	r1, [pc, #132]	; (80075e0 <http_wait_headers+0xdc>)
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f007 fc3a 	bl	800edd6 <pbuf_memfind>
 8007562:	4603      	mov	r3, r0
 8007564:	857b      	strh	r3, [r7, #42]	; 0x2a
      if (content_len_line_end != 0xFFFF) {
 8007566:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800756c:	4293      	cmp	r3, r2
 800756e:	d02a      	beq.n	80075c6 <http_wait_headers+0xc2>
        char content_len_num[16];
        u16_t content_len_num_len = (u16_t)(content_len_line_end - content_len_hdr - 16);
 8007570:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007572:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b10      	subs	r3, #16
 800757a:	853b      	strh	r3, [r7, #40]	; 0x28
        memset(content_len_num, 0, sizeof(content_len_num));
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	2210      	movs	r2, #16
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f00e fc7f 	bl	8015e88 <memset>
        if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16) == content_len_num_len) {
 800758a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800758c:	3310      	adds	r3, #16
 800758e:	b29b      	uxth	r3, r3
 8007590:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007592:	f107 0114 	add.w	r1, r7, #20
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f007 f98e 	bl	800e8b8 <pbuf_copy_partial>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d10f      	bne.n	80075c6 <http_wait_headers+0xc2>
          int len = atoi(content_len_num);
 80075a6:	f107 0314 	add.w	r3, r7, #20
 80075aa:	4618      	mov	r0, r3
 80075ac:	f00e fbeb 	bl	8015d86 <atoi>
 80075b0:	6278      	str	r0, [r7, #36]	; 0x24
          if ((len >= 0) && ((u32_t)len < HTTPC_CONTENT_LEN_INVALID)) {
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db06      	blt.n	80075c6 <http_wait_headers+0xc2>
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	d002      	beq.n	80075c6 <http_wait_headers+0xc2>
            *content_length = (u32_t)len;
 80075c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
    return ERR_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e001      	b.n	80075ce <http_wait_headers+0xca>
  }
  return ERR_VAL;
 80075ca:	f06f 0305 	mvn.w	r3, #5
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3730      	adds	r7, #48	; 0x30
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	0801776c 	.word	0x0801776c
 80075dc:	08017774 	.word	0x08017774
 80075e0:	0801775c 	.word	0x0801775c

080075e4 <httpc_tcp_recv>:

/** http client tcp recv callback */
static err_t
httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b08d      	sub	sp, #52	; 0x34
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	70fb      	strb	r3, [r7, #3]
  httpc_state_t* req = (httpc_state_t*)arg;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	623b      	str	r3, [r7, #32]
  LWIP_UNUSED_ARG(r);

  if (p == NULL) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d125      	bne.n	8007648 <httpc_tcp_recv+0x64>
    httpc_result_t result;
    if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007602:	2b02      	cmp	r3, #2
 8007604:	d003      	beq.n	800760e <httpc_tcp_recv+0x2a>
      /* did not get RX data yet */
      result = HTTPC_RESULT_ERR_CLOSED;
 8007606:	2304      	movs	r3, #4
 8007608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800760c:	e011      	b.n	8007632 <httpc_tcp_recv+0x4e>
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d009      	beq.n	800762c <httpc_tcp_recv+0x48>
      (req->hdr_content_len != req->rx_content_len)) {
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 8007620:	429a      	cmp	r2, r3
 8007622:	d003      	beq.n	800762c <httpc_tcp_recv+0x48>
      /* header has been received with content length but not all data received */
      result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8007624:	2309      	movs	r3, #9
 8007626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800762a:	e002      	b.n	8007632 <httpc_tcp_recv+0x4e>
    } else {
      /* receiving data and either all data received or no content length header */
      result = HTTPC_RESULT_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return httpc_close(req, result, req->rx_status, ERR_OK);
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	8b5b      	ldrh	r3, [r3, #26]
 8007636:	461a      	mov	r2, r3
 8007638:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800763c:	2300      	movs	r3, #0
 800763e:	6a38      	ldr	r0, [r7, #32]
 8007640:	f7ff fe92 	bl	8007368 <httpc_close>
 8007644:	4603      	mov	r3, r0
 8007646:	e0a7      	b.n	8007798 <httpc_tcp_recv+0x1b4>
  }
  if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800764e:	2b02      	cmp	r3, #2
 8007650:	d07a      	beq.n	8007748 <httpc_tcp_recv+0x164>
    if (req->rx_hdrs == NULL) {
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <httpc_tcp_recv+0x7e>
      req->rx_hdrs = p;
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	615a      	str	r2, [r3, #20]
 8007660:	e005      	b.n	800766e <httpc_tcp_recv+0x8a>
    } else {
      pbuf_cat(req->rx_hdrs, p);
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	f006 ffed 	bl	800e648 <pbuf_cat>
    }
    if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007674:	2b00      	cmp	r3, #0
 8007676:	d115      	bne.n	80076a4 <httpc_tcp_recv+0xc0>
      u16_t status_str_off;
      err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status, &status_str_off);
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	6958      	ldr	r0, [r3, #20]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f103 0118 	add.w	r1, r3, #24
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f103 021a 	add.w	r2, r3, #26
 8007688:	f107 0316 	add.w	r3, r7, #22
 800768c:	f7ff fe9a 	bl	80073c4 <http_parse_response_status>
 8007690:	4603      	mov	r3, r0
 8007692:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8007694:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <httpc_tcp_recv+0xc0>
        /* don't care status string */
        req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
    }
    if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d14c      	bne.n	8007748 <httpc_tcp_recv+0x164>
      u16_t total_header_len;
      err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	6958      	ldr	r0, [r3, #20]
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	332c      	adds	r3, #44	; 0x2c
 80076b6:	f107 0214 	add.w	r2, r7, #20
 80076ba:	4619      	mov	r1, r3
 80076bc:	f7ff ff22 	bl	8007504 <http_wait_headers>
 80076c0:	4603      	mov	r3, r0
 80076c2:	77bb      	strb	r3, [r7, #30]
      if (err == ERR_OK) {
 80076c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d13d      	bne.n	8007748 <httpc_tcp_recv+0x164>
        struct pbuf *q;
        /* full header received, send window update for header bytes and call into client callback */
        altcp_recved(pcb, total_header_len);
 80076cc:	8abb      	ldrh	r3, [r7, #20]
 80076ce:	4619      	mov	r1, r3
 80076d0:	68b8      	ldr	r0, [r7, #8]
 80076d2:	f007 ffa7 	bl	800f624 <tcp_recved>
        if (req->conn_settings) {
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d023      	beq.n	8007726 <httpc_tcp_recv+0x142>
          if (req->conn_settings->headers_done_fn) {
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01e      	beq.n	8007726 <httpc_tcp_recv+0x142>
            err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs, total_header_len, req->hdr_content_len);
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	68dc      	ldr	r4, [r3, #12]
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	8ab8      	ldrh	r0, [r7, #20]
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	4603      	mov	r3, r0
 8007700:	6a38      	ldr	r0, [r7, #32]
 8007702:	47a0      	blx	r4
 8007704:	4603      	mov	r3, r0
 8007706:	77bb      	strb	r3, [r7, #30]
            if (err != ERR_OK) {
 8007708:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <httpc_tcp_recv+0x142>
              return httpc_close(req, HTTPC_RESULT_LOCAL_ABORT, req->rx_status, err);
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	8b5b      	ldrh	r3, [r3, #26]
 8007714:	461a      	mov	r2, r3
 8007716:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800771a:	2108      	movs	r1, #8
 800771c:	6a38      	ldr	r0, [r7, #32]
 800771e:	f7ff fe23 	bl	8007368 <httpc_close>
 8007722:	4603      	mov	r3, r0
 8007724:	e038      	b.n	8007798 <httpc_tcp_recv+0x1b4>
            }
          }
        }
        /* hide header bytes in pbuf */
        q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	8aba      	ldrh	r2, [r7, #20]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f006 fe95 	bl	800e45e <pbuf_free_header>
 8007734:	61b8      	str	r0, [r7, #24]
        p = q;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	607b      	str	r3, [r7, #4]
        req->rx_hdrs = NULL;
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	2200      	movs	r2, #0
 800773e:	615a      	str	r2, [r3, #20]
        /* go on with data */
        req->parse_state = HTTPC_PARSE_RX_DATA;
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
    }
  }
  if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d023      	beq.n	8007796 <httpc_tcp_recv+0x1b2>
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007754:	2b02      	cmp	r3, #2
 8007756:	d11e      	bne.n	8007796 <httpc_tcp_recv+0x1b2>
    req->rx_content_len += p->tot_len;
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	8912      	ldrh	r2, [r2, #8]
 8007760:	441a      	add	r2, r3
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
    if (req->recv_fn != NULL) {
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <httpc_tcp_recv+0x1a0>
      /* directly return here: the connection migth already be aborted from the callback! */
      return req->recv_fn(req->callback_arg, pcb, p, r);
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	69dc      	ldr	r4, [r3, #28]
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	47a0      	blx	r4
 8007780:	4603      	mov	r3, r0
 8007782:	e009      	b.n	8007798 <httpc_tcp_recv+0x1b4>
    } else {
      altcp_recved(pcb, p->tot_len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	891b      	ldrh	r3, [r3, #8]
 8007788:	4619      	mov	r1, r3
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f007 ff4a 	bl	800f624 <tcp_recved>
      pbuf_free(p);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f006 fe97 	bl	800e4c4 <pbuf_free>
    }
  }
  return ERR_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	372c      	adds	r7, #44	; 0x2c
 800779c:	46bd      	mov	sp, r7
 800779e:	bd90      	pop	{r4, r7, pc}

080077a0 <httpc_tcp_err>:

/** http client tcp err callback */
static void
httpc_tcp_err(void *arg, err_t err)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  httpc_state_t* req = (httpc_state_t*)arg;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60fb      	str	r3, [r7, #12]
  if (req != NULL) {
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <httpc_tcp_err+0x2a>
    /* pcb has already been deallocated */
    req->pcb = NULL;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
    httpc_close(req, HTTPC_RESULT_ERR_CLOSED, 0, err);
 80077bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c0:	2200      	movs	r2, #0
 80077c2:	2104      	movs	r1, #4
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7ff fdcf 	bl	8007368 <httpc_close>
  }
}
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <httpc_tcp_poll>:

/** http client tcp poll callback */
static err_t
httpc_tcp_poll(void *arg, struct altcp_pcb *pcb)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  /* implement timeout */
  httpc_state_t* req = (httpc_state_t*)arg;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(pcb);
  if (req != NULL) {
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d014      	beq.n	8007810 <httpc_tcp_poll+0x3e>
    if (req->timeout_ticks) {
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <httpc_tcp_poll+0x26>
      req->timeout_ticks--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	1e5a      	subs	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	60da      	str	r2, [r3, #12]
    }
    if (!req->timeout_ticks) {
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d107      	bne.n	8007810 <httpc_tcp_poll+0x3e>
      return httpc_close(req, HTTPC_RESULT_ERR_TIMEOUT, 0, ERR_OK);
 8007800:	2300      	movs	r3, #0
 8007802:	2200      	movs	r2, #0
 8007804:	2105      	movs	r1, #5
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff fdae 	bl	8007368 <httpc_close>
 800780c:	4603      	mov	r3, r0
 800780e:	e000      	b.n	8007812 <httpc_tcp_poll+0x40>
    }
  }
  return ERR_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <httpc_tcp_sent>:

/** http client tcp sent callback */
static err_t
httpc_tcp_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	4613      	mov	r3, r2
 8007826:	80fb      	strh	r3, [r7, #6]
  /* nothing to do here for now */
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(len);
  return ERR_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <httpc_tcp_connected>:

/** http client tcp connected callback */
static err_t
httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b086      	sub	sp, #24
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	4613      	mov	r3, r2
 8007842:	71fb      	strb	r3, [r7, #7]
  err_t r;
  httpc_state_t* req = (httpc_state_t*)arg;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  /* send request; last char is zero termination */
  r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	6859      	ldr	r1, [r3, #4]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	895b      	ldrh	r3, [r3, #10]
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	2301      	movs	r3, #1
 800785e:	f00b fde9 	bl	8013434 <tcp_write>
 8007862:	4603      	mov	r3, r0
 8007864:	74fb      	strb	r3, [r7, #19]
  if (r != ERR_OK) {
 8007866:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <httpc_tcp_connected+0x4a>
     /* could not write the single small request -> fail, don't retry */
     return httpc_close(req, HTTPC_RESULT_ERR_MEM, 0, r);
 800786e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007872:	2200      	movs	r2, #0
 8007874:	2107      	movs	r1, #7
 8007876:	6978      	ldr	r0, [r7, #20]
 8007878:	f7ff fd76 	bl	8007368 <httpc_close>
 800787c:	4603      	mov	r3, r0
 800787e:	e00d      	b.n	800789c <httpc_tcp_connected+0x66>
  }
  /* everything written, we can free the request */
  pbuf_free(req->request);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	4618      	mov	r0, r3
 8007886:	f006 fe1d 	bl	800e4c4 <pbuf_free>
  req->request = NULL;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	611a      	str	r2, [r3, #16]

  altcp_output(req->pcb);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f00c fbbd 	bl	8014014 <tcp_output>
  return ERR_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <httpc_get_internal_addr>:

/** Start the http request when the server IP addr is known */
static err_t
httpc_get_internal_addr(httpc_state_t* req, const ip_addr_t *ipaddr)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  err_t err;
  LWIP_ASSERT("req != NULL", req != NULL);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <httpc_get_internal_addr+0x1e>
 80078b4:	4b13      	ldr	r3, [pc, #76]	; (8007904 <httpc_get_internal_addr+0x60>)
 80078b6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80078ba:	4913      	ldr	r1, [pc, #76]	; (8007908 <httpc_get_internal_addr+0x64>)
 80078bc:	4813      	ldr	r0, [pc, #76]	; (800790c <httpc_get_internal_addr+0x68>)
 80078be:	f00e faeb 	bl	8015e98 <iprintf>

  if (&req->remote_addr != ipaddr) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d003      	beq.n	80078d4 <httpc_get_internal_addr+0x30>
    /* fill in remote addr if called externally */
    req->remote_addr = *ipaddr;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	605a      	str	r2, [r3, #4]
  }

  err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1d19      	adds	r1, r3, #4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	891a      	ldrh	r2, [r3, #8]
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <httpc_get_internal_addr+0x6c>)
 80078e2:	f007 ff35 	bl	800f750 <tcp_connect>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <httpc_get_internal_addr+0x52>
    return ERR_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e001      	b.n	80078fa <httpc_get_internal_addr+0x56>
  }
  LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("tcp_connect failed: %d\n", (int)err));
  return err;
 80078f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	08017788 	.word	0x08017788
 8007908:	080177c4 	.word	0x080177c4
 800790c:	080177d0 	.word	0x080177d0
 8007910:	08007837 	.word	0x08007837

08007914 <httpc_dns_found>:
/** DNS callback
 * If ipaddr is non-NULL, resolving succeeded and the request can be sent, otherwise it failed.
 */
static void
httpc_dns_found(const char* hostname, const ip_addr_t *ipaddr, void *arg)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  httpc_state_t* req = (httpc_state_t*)arg;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	613b      	str	r3, [r7, #16]
  err_t err;
  httpc_result_t result;

  LWIP_UNUSED_ARG(hostname);

  if (ipaddr != NULL) {
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00c      	beq.n	8007944 <httpc_dns_found+0x30>
    err = httpc_get_internal_addr(req, ipaddr);
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	6938      	ldr	r0, [r7, #16]
 800792e:	f7ff ffb9 	bl	80078a4 <httpc_get_internal_addr>
 8007932:	4603      	mov	r3, r0
 8007934:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8007936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <httpc_dns_found+0x48>
      return;
    }
    result = HTTPC_RESULT_ERR_CONNECT;
 800793e:	2302      	movs	r3, #2
 8007940:	75bb      	strb	r3, [r7, #22]
 8007942:	e003      	b.n	800794c <httpc_dns_found+0x38>
  } else {
    LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("httpc_dns_found: failed to resolve hostname: %s\n",
      hostname));
    result = HTTPC_RESULT_ERR_HOSTNAME;
 8007944:	2303      	movs	r3, #3
 8007946:	75bb      	strb	r3, [r7, #22]
    err = ERR_ARG;
 8007948:	23f0      	movs	r3, #240	; 0xf0
 800794a:	75fb      	strb	r3, [r7, #23]
  }
  httpc_close(req, result, 0, err);
 800794c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007950:	7db9      	ldrb	r1, [r7, #22]
 8007952:	2200      	movs	r2, #0
 8007954:	6938      	ldr	r0, [r7, #16]
 8007956:	f7ff fd07 	bl	8007368 <httpc_close>
 800795a:	e000      	b.n	800795e <httpc_dns_found+0x4a>
      return;
 800795c:	bf00      	nop
}
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <httpc_get_internal_dns>:
#endif /* LWIP_DNS */

/** Start the http request after converting 'server_name' to ip address (DNS or address string) */
static err_t
httpc_get_internal_dns(httpc_state_t* req, const char* server_name)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  err_t err;
  LWIP_ASSERT("req != NULL", req != NULL);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <httpc_get_internal_dns+0x1e>
 8007974:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <httpc_get_internal_dns+0x64>)
 8007976:	f240 12d5 	movw	r2, #469	; 0x1d5
 800797a:	4914      	ldr	r1, [pc, #80]	; (80079cc <httpc_get_internal_dns+0x68>)
 800797c:	4814      	ldr	r0, [pc, #80]	; (80079d0 <httpc_get_internal_dns+0x6c>)
 800797e:	f00e fa8b 	bl	8015e98 <iprintf>

#if LWIP_DNS
  err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	1d19      	adds	r1, r3, #4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a12      	ldr	r2, [pc, #72]	; (80079d4 <httpc_get_internal_dns+0x70>)
 800798a:	6838      	ldr	r0, [r7, #0]
 800798c:	f002 fec4 	bl	800a718 <dns_gethostbyname>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
#else
  err = ipaddr_aton(server_name, &req->remote_addr) ? ERR_OK : ERR_ARG;
#endif

  if (err == ERR_OK) {
 8007994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d108      	bne.n	80079ae <httpc_get_internal_dns+0x4a>
    /* cached or IP-string */
    err = httpc_get_internal_addr(req, &req->remote_addr);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff ff7e 	bl	80078a4 <httpc_get_internal_addr>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	e006      	b.n	80079bc <httpc_get_internal_dns+0x58>
  } else if (err == ERR_INPROGRESS) {
 80079ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b2:	f113 0f05 	cmn.w	r3, #5
 80079b6:	d101      	bne.n	80079bc <httpc_get_internal_dns+0x58>
    return ERR_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	e001      	b.n	80079c0 <httpc_get_internal_dns+0x5c>
  }
  return err;
 80079bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	08017788 	.word	0x08017788
 80079cc:	080177c4 	.word	0x080177c4
 80079d0:	080177d0 	.word	0x080177d0
 80079d4:	08007915 	.word	0x08007915

080079d8 <httpc_create_request_string>:

static int
httpc_create_request_string(const httpc_connection_t *settings, const char* server_name, int server_port, const char* uri,
                            int use_host, char *buffer, size_t buffer_size)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af04      	add	r7, sp, #16
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
  if (settings->use_proxy) {
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	799b      	ldrb	r3, [r3, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02a      	beq.n	8007a44 <httpc_create_request_string+0x6c>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <httpc_create_request_string+0x2a>
 80079f4:	4b26      	ldr	r3, [pc, #152]	; (8007a90 <httpc_create_request_string+0xb8>)
 80079f6:	f240 12eb 	movw	r2, #491	; 0x1eb
 80079fa:	4926      	ldr	r1, [pc, #152]	; (8007a94 <httpc_create_request_string+0xbc>)
 80079fc:	4826      	ldr	r0, [pc, #152]	; (8007a98 <httpc_create_request_string+0xc0>)
 80079fe:	f00e fa4b 	bl	8015e98 <iprintf>
    if (server_port != HTTP_DEFAULT_PORT) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b50      	cmp	r3, #80	; 0x50
 8007a06:	d00f      	beq.n	8007a28 <httpc_create_request_string+0x50>
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_PORT_FORMAT(server_name, server_port, uri, server_name));
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	4b23      	ldr	r3, [pc, #140]	; (8007a9c <httpc_create_request_string+0xc4>)
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <httpc_create_request_string+0xc8>)
 8007a1c:	6a39      	ldr	r1, [r7, #32]
 8007a1e:	69f8      	ldr	r0, [r7, #28]
 8007a20:	f00e fa8c 	bl	8015f3c <sniprintf>
 8007a24:	4603      	mov	r3, r0
 8007a26:	e02f      	b.n	8007a88 <httpc_create_request_string+0xb0>
    } else {
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <httpc_create_request_string+0xc4>)
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4a1b      	ldr	r2, [pc, #108]	; (8007aa4 <httpc_create_request_string+0xcc>)
 8007a38:	6a39      	ldr	r1, [r7, #32]
 8007a3a:	69f8      	ldr	r0, [r7, #28]
 8007a3c:	f00e fa7e 	bl	8015f3c <sniprintf>
 8007a40:	4603      	mov	r3, r0
 8007a42:	e021      	b.n	8007a88 <httpc_create_request_string+0xb0>
    }
  } else if (use_host) {
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d015      	beq.n	8007a76 <httpc_create_request_string+0x9e>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <httpc_create_request_string+0x86>
 8007a50:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <httpc_create_request_string+0xb8>)
 8007a52:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8007a56:	490f      	ldr	r1, [pc, #60]	; (8007a94 <httpc_create_request_string+0xbc>)
 8007a58:	480f      	ldr	r0, [pc, #60]	; (8007a98 <httpc_create_request_string+0xc0>)
 8007a5a:	f00e fa1d 	bl	8015e98 <iprintf>
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <httpc_create_request_string+0xc4>)
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	4a0f      	ldr	r2, [pc, #60]	; (8007aa8 <httpc_create_request_string+0xd0>)
 8007a6a:	6a39      	ldr	r1, [r7, #32]
 8007a6c:	69f8      	ldr	r0, [r7, #28]
 8007a6e:	f00e fa65 	bl	8015f3c <sniprintf>
 8007a72:	4603      	mov	r3, r0
 8007a74:	e008      	b.n	8007a88 <httpc_create_request_string+0xb0>
  } else {
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_FORMAT(uri));
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <httpc_create_request_string+0xc4>)
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <httpc_create_request_string+0xd4>)
 8007a7e:	6a39      	ldr	r1, [r7, #32]
 8007a80:	69f8      	ldr	r0, [r7, #28]
 8007a82:	f00e fa5b 	bl	8015f3c <sniprintf>
 8007a86:	4603      	mov	r3, r0
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	08017788 	.word	0x08017788
 8007a94:	080177f8 	.word	0x080177f8
 8007a98:	080177d0 	.word	0x080177d0
 8007a9c:	08017868 	.word	0x08017868
 8007aa0:	0801780c 	.word	0x0801780c
 8007aa4:	080178a0 	.word	0x080178a0
 8007aa8:	080178f8 	.word	0x080178f8
 8007aac:	08017948 	.word	0x08017948

08007ab0 <httpc_init_connection_common>:

/** Initialize the connection struct */
static err_t
httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg, int use_host)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08e      	sub	sp, #56	; 0x38
 8007ab4:	af04      	add	r7, sp, #16
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	807b      	strh	r3, [r7, #2]
  httpc_state_t *req;
#if HTTPC_DEBUG_REQUEST
  size_t server_name_len, uri_len;
#endif

  LWIP_ASSERT("uri != NULL", uri != NULL);
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <httpc_init_connection_common+0x22>
 8007ac4:	4b65      	ldr	r3, [pc, #404]	; (8007c5c <httpc_init_connection_common+0x1ac>)
 8007ac6:	f240 2206 	movw	r2, #518	; 0x206
 8007aca:	4965      	ldr	r1, [pc, #404]	; (8007c60 <httpc_init_connection_common+0x1b0>)
 8007acc:	4865      	ldr	r0, [pc, #404]	; (8007c64 <httpc_init_connection_common+0x1b4>)
 8007ace:	f00e f9e3 	bl	8015e98 <iprintf>

  /* get request len */
  req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	68b8      	ldr	r0, [r7, #8]
 8007ae6:	f7ff ff77 	bl	80079d8 <httpc_create_request_string>
 8007aea:	6278      	str	r0, [r7, #36]	; 0x24
  if ((req_len < 0) || (req_len > 0xFFFF)) {
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	db03      	blt.n	8007afa <httpc_init_connection_common+0x4a>
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af8:	db02      	blt.n	8007b00 <httpc_init_connection_common+0x50>
    return ERR_VAL;
 8007afa:	f06f 0305 	mvn.w	r3, #5
 8007afe:	e0a9      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }
  /* alloc state and request in one block */
  alloc_len = sizeof(httpc_state_t);
 8007b00:	2334      	movs	r3, #52	; 0x34
 8007b02:	623b      	str	r3, [r7, #32]
#if HTTPC_DEBUG_REQUEST
  server_name_len = server_name ? strlen(server_name) : 0;
  uri_len = strlen(uri);
  alloc_len += server_name_len + 1 + uri_len + 1;
#endif
  mem_alloc_len = (mem_size_t)alloc_len;
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	83fb      	strh	r3, [r7, #30]
  if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8007b08:	8bfa      	ldrh	r2, [r7, #30]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d304      	bcc.n	8007b1a <httpc_init_connection_common+0x6a>
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	3301      	adds	r3, #1
 8007b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b18:	db02      	blt.n	8007b20 <httpc_init_connection_common+0x70>
    return ERR_VAL;
 8007b1a:	f06f 0305 	mvn.w	r3, #5
 8007b1e:	e099      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }

  req = (httpc_state_t*)mem_malloc((mem_size_t)alloc_len);
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4618      	mov	r0, r3
 8007b26:	f005 fca9 	bl	800d47c <mem_malloc>
 8007b2a:	61b8      	str	r0, [r7, #24]
  if(req == NULL) {
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <httpc_init_connection_common+0x88>
    return ERR_MEM;
 8007b32:	f04f 33ff 	mov.w	r3, #4294967295
 8007b36:	e08d      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }
  memset(req, 0, sizeof(httpc_state_t));
 8007b38:	2234      	movs	r2, #52	; 0x34
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	69b8      	ldr	r0, [r7, #24]
 8007b3e:	f00e f9a3 	bl	8015e88 <memset>
  req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	221e      	movs	r2, #30
 8007b46:	60da      	str	r2, [r3, #12]
  req->request = pbuf_alloc(PBUF_RAW, (u16_t)(req_len + 1), PBUF_RAM);
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007b54:	4619      	mov	r1, r3
 8007b56:	2000      	movs	r0, #0
 8007b58:	f006 f9a0 	bl	800de9c <pbuf_alloc>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	611a      	str	r2, [r3, #16]
  if (req->request == NULL) {
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <httpc_init_connection_common+0xc6>
    httpc_free_state(req);
 8007b6a:	69b8      	ldr	r0, [r7, #24]
 8007b6c:	f7ff fbac 	bl	80072c8 <httpc_free_state>
    return ERR_MEM;
 8007b70:	f04f 33ff 	mov.w	r3, #4294967295
 8007b74:	e06e      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }
  if (req->request->next != NULL) {
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <httpc_init_connection_common+0xdc>
    /* need a pbuf in one piece */
    httpc_free_state(req);
 8007b80:	69b8      	ldr	r0, [r7, #24]
 8007b82:	f7ff fba1 	bl	80072c8 <httpc_free_state>
    return ERR_MEM;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8a:	e063      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }
  req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
    memcpy(req->server_name, server_name, server_name_len + 1);
  }
  req->uri = req->server_name + server_name_len + 1;
  memcpy(req->uri, uri, uri_len + 1);
#endif
  req->pcb = altcp_new(settings->altcp_allocator);
 8007b94:	f008 fd12 	bl	80105bc <tcp_new>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	601a      	str	r2, [r3, #0]
  if(req->pcb == NULL) {
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <httpc_init_connection_common+0x102>
    httpc_free_state(req);
 8007ba6:	69b8      	ldr	r0, [r7, #24]
 8007ba8:	f7ff fb8e 	bl	80072c8 <httpc_free_state>
    return ERR_MEM;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	e050      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }
  req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	799b      	ldrb	r3, [r3, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <httpc_init_connection_common+0x110>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	889b      	ldrh	r3, [r3, #4]
 8007bbe:	e000      	b.n	8007bc2 <httpc_init_connection_common+0x112>
 8007bc0:	887b      	ldrh	r3, [r7, #2]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	8113      	strh	r3, [r2, #8]
  altcp_arg(req->pcb, req);
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69b9      	ldr	r1, [r7, #24]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f008 fd0b 	bl	80105e8 <tcp_arg>
  altcp_recv(req->pcb, httpc_tcp_recv);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4924      	ldr	r1, [pc, #144]	; (8007c68 <httpc_init_connection_common+0x1b8>)
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f008 fd17 	bl	801060c <tcp_recv>
  altcp_err(req->pcb, httpc_tcp_err);
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4922      	ldr	r1, [pc, #136]	; (8007c6c <httpc_init_connection_common+0x1bc>)
 8007be4:	4618      	mov	r0, r3
 8007be6:	f008 fd55 	bl	8010694 <tcp_err>
  altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	491f      	ldr	r1, [pc, #124]	; (8007c70 <httpc_init_connection_common+0x1c0>)
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f008 fd70 	bl	80106d8 <tcp_poll>
  altcp_sent(req->pcb, httpc_tcp_sent);
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	491d      	ldr	r1, [pc, #116]	; (8007c74 <httpc_init_connection_common+0x1c4>)
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f008 fd26 	bl	8010650 <tcp_sent>

  /* set up request buffer */
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8007c04:	8879      	ldrh	r1, [r7, #2]
    (char *)req->request->payload, req_len + 1);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0e:	3201      	adds	r2, #1
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8007c10:	9202      	str	r2, [sp, #8]
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	460a      	mov	r2, r1
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	68b8      	ldr	r0, [r7, #8]
 8007c20:	f7ff feda 	bl	80079d8 <httpc_create_request_string>
 8007c24:	6178      	str	r0, [r7, #20]
  if (req_len2 != req_len) {
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d005      	beq.n	8007c3a <httpc_init_connection_common+0x18a>
    httpc_free_state(req);
 8007c2e:	69b8      	ldr	r0, [r7, #24]
 8007c30:	f7ff fb4a 	bl	80072c8 <httpc_free_state>
    return ERR_VAL;
 8007c34:	f06f 0305 	mvn.w	r3, #5
 8007c38:	e00c      	b.n	8007c54 <httpc_init_connection_common+0x1a4>
  }

  req->recv_fn = recv_fn;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c3e:	61da      	str	r2, [r3, #28]
  req->conn_settings = settings;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	621a      	str	r2, [r3, #32]
  req->callback_arg = callback_arg;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24

  *connection = req;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3728      	adds	r7, #40	; 0x28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	08017788 	.word	0x08017788
 8007c60:	0801798c 	.word	0x0801798c
 8007c64:	080177d0 	.word	0x080177d0
 8007c68:	080075e5 	.word	0x080075e5
 8007c6c:	080077a1 	.word	0x080077a1
 8007c70:	080077d3 	.word	0x080077d3
 8007c74:	0800781b 	.word	0x0800781b

08007c78 <httpc_init_connection>:
 * Initialize the connection struct
 */
static err_t
httpc_init_connection(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af04      	add	r7, sp, #16
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	807b      	strh	r3, [r7, #2]
  return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff ff06 	bl	8007ab0 <httpc_init_connection_common>
 8007ca4:	4603      	mov	r3, r0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <httpc_get_file_dns>:
 *         or an error code
 */
err_t
httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const httpc_connection_t *settings,
                   altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	; 0x28
 8007cb4:	af04      	add	r7, sp, #16
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	817b      	strh	r3, [r7, #10]
  err_t err;
  httpc_state_t* req;

  LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <httpc_get_file_dns+0x22>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <httpc_get_file_dns+0x22>
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <httpc_get_file_dns+0x36>
 8007cd2:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <httpc_get_file_dns+0xb8>)
 8007cd4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007cd8:	4924      	ldr	r1, [pc, #144]	; (8007d6c <httpc_get_file_dns+0xbc>)
 8007cda:	4825      	ldr	r0, [pc, #148]	; (8007d70 <httpc_get_file_dns+0xc0>)
 8007cdc:	f00e f8dc 	bl	8015e98 <iprintf>
 8007ce0:	f06f 030f 	mvn.w	r3, #15
 8007ce4:	e03c      	b.n	8007d60 <httpc_get_file_dns+0xb0>

  err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8007ce6:	897a      	ldrh	r2, [r7, #10]
 8007ce8:	f107 0010 	add.w	r0, r7, #16
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	9302      	str	r3, [sp, #8]
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	f7ff ffbb 	bl	8007c78 <httpc_init_connection>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8007d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <httpc_get_file_dns+0x64>
    return err;
 8007d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d12:	e025      	b.n	8007d60 <httpc_get_file_dns+0xb0>
  }

  if (settings->use_proxy) {
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	799b      	ldrb	r3, [r3, #6]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <httpc_get_file_dns+0x7e>
    err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff fdbe 	bl	80078a4 <httpc_get_internal_addr>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]
 8007d2c:	e006      	b.n	8007d3c <httpc_get_file_dns+0x8c>
  } else {
    err = httpc_get_internal_dns(req, server_name);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	68f9      	ldr	r1, [r7, #12]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fe16 	bl	8007964 <httpc_get_internal_dns>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	75fb      	strb	r3, [r7, #23]
  }
  if(err != ERR_OK) {
 8007d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d006      	beq.n	8007d52 <httpc_get_file_dns+0xa2>
    httpc_free_state(req);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fabe 	bl	80072c8 <httpc_free_state>
    return err;
 8007d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d50:	e006      	b.n	8007d60 <httpc_get_file_dns+0xb0>
  }

  if (connection != NULL) {
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <httpc_get_file_dns+0xae>
    *connection = req;
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	601a      	str	r2, [r3, #0]
  }
  return ERR_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	08017788 	.word	0x08017788
 8007d6c:	08017998 	.word	0x08017998
 8007d70:	080177d0 	.word	0x080177d0

08007d74 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	3301      	adds	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	88db      	ldrh	r3, [r3, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	3301      	adds	r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	88db      	ldrh	r3, [r3, #6]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	2bff      	cmp	r3, #255	; 0xff
 8007dd8:	d902      	bls.n	8007de0 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	801a      	strh	r2, [r3, #0]
  }
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	885b      	ldrh	r3, [r3, #2]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3304      	adds	r3, #4
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8007e18:	887b      	ldrh	r3, [r7, #2]
 8007e1a:	2bff      	cmp	r3, #255	; 0xff
 8007e1c:	d905      	bls.n	8007e2a <mqtt_ringbuf_advance_get_idx+0x1e>
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8007e20:	22cb      	movs	r2, #203	; 0xcb
 8007e22:	490e      	ldr	r1, [pc, #56]	; (8007e5c <mqtt_ringbuf_advance_get_idx+0x50>)
 8007e24:	480e      	ldr	r0, [pc, #56]	; (8007e60 <mqtt_ringbuf_advance_get_idx+0x54>)
 8007e26:	f00e f837 	bl	8015e98 <iprintf>

  rb->get += len;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	885a      	ldrh	r2, [r3, #2]
 8007e2e:	887b      	ldrh	r3, [r7, #2]
 8007e30:	4413      	add	r3, r2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	885b      	ldrh	r3, [r3, #2]
 8007e3c:	2bff      	cmp	r3, #255	; 0xff
 8007e3e:	d906      	bls.n	8007e4e <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	885b      	ldrh	r3, [r3, #2]
 8007e44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	805a      	strh	r2, [r3, #2]
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	080179ac 	.word	0x080179ac
 8007e5c:	080179e4 	.word	0x080179e4
 8007e60:	08017a24 	.word	0x08017a24

08007e64 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e80:	d303      	bcc.n	8007e8a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007e88:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	b29b      	uxth	r3, r3
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff ffda 	bl	8007e64 <mqtt_ringbuf_len>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	885b      	ldrh	r3, [r3, #2]
 8007eb8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	da04      	bge.n	8007eca <mqtt_output_send+0x2e>
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff ffcf 	bl	8007e64 <mqtt_ringbuf_len>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	e004      	b.n	8007ed4 <mqtt_output_send+0x38>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	885b      	ldrh	r3, [r3, #2]
 8007ece:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007edc:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d105      	bne.n	8007ef0 <mqtt_output_send+0x54>
 8007ee4:	4b44      	ldr	r3, [pc, #272]	; (8007ff8 <mqtt_output_send+0x15c>)
 8007ee6:	22f0      	movs	r2, #240	; 0xf0
 8007ee8:	4944      	ldr	r1, [pc, #272]	; (8007ffc <mqtt_output_send+0x160>)
 8007eea:	4845      	ldr	r0, [pc, #276]	; (8008000 <mqtt_output_send+0x164>)
 8007eec:	f00d ffd4 	bl	8015e98 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8007ef0:	89bb      	ldrh	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d07c      	beq.n	8007ff0 <mqtt_output_send+0x154>
 8007ef6:	897b      	ldrh	r3, [r7, #10]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d079      	beq.n	8007ff0 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8007efc:	89ba      	ldrh	r2, [r7, #12]
 8007efe:	897b      	ldrh	r3, [r7, #10]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d90d      	bls.n	8007f20 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8007f04:	897b      	ldrh	r3, [r7, #10]
 8007f06:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff ffab 	bl	8007e64 <mqtt_ringbuf_len>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	461a      	mov	r2, r3
 8007f12:	897b      	ldrh	r3, [r7, #10]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bf34      	ite	cc
 8007f18:	2301      	movcc	r3, #1
 8007f1a:	2300      	movcs	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ff63 	bl	8007dec <mqtt_ringbuf_get_ptr>
 8007f26:	4601      	mov	r1, r0
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <mqtt_output_send+0x96>
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e000      	b.n	8007f34 <mqtt_output_send+0x98>
 8007f32:	2301      	movs	r3, #1
 8007f34:	89ba      	ldrh	r2, [r7, #12]
 8007f36:	6838      	ldr	r0, [r7, #0]
 8007f38:	f00b fa7c 	bl	8013434 <tcp_write>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8007f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d146      	bne.n	8007fd6 <mqtt_output_send+0x13a>
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d043      	beq.n	8007fd6 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007f4e:	89bb      	ldrh	r3, [r7, #12]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff ff5a 	bl	8007e0c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f5e:	461c      	mov	r4, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ff7f 	bl	8007e64 <mqtt_ringbuf_len>
 8007f66:	4603      	mov	r3, r0
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007f72:	429a      	cmp	r2, r3
 8007f74:	da04      	bge.n	8007f80 <mqtt_output_send+0xe4>
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff ff74 	bl	8007e64 <mqtt_ringbuf_len>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	e003      	b.n	8007f88 <mqtt_output_send+0xec>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	885b      	ldrh	r3, [r3, #2]
 8007f84:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	da03      	bge.n	8007f94 <mqtt_output_send+0xf8>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f92:	e014      	b.n	8007fbe <mqtt_output_send+0x122>
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff ff65 	bl	8007e64 <mqtt_ringbuf_len>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	885b      	ldrh	r3, [r3, #2]
 8007fa2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	da04      	bge.n	8007fb4 <mqtt_output_send+0x118>
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff ff5a 	bl	8007e64 <mqtt_ringbuf_len>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	e004      	b.n	8007fbe <mqtt_output_send+0x122>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	885b      	ldrh	r3, [r3, #2]
 8007fb8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff13 	bl	8007dec <mqtt_ringbuf_get_ptr>
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	89ba      	ldrh	r2, [r7, #12]
 8007fca:	2301      	movs	r3, #1
 8007fcc:	6838      	ldr	r0, [r7, #0]
 8007fce:	f00b fa31 	bl	8013434 <tcp_write>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8007fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007fde:	89bb      	ldrh	r3, [r7, #12]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff ff12 	bl	8007e0c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8007fe8:	6838      	ldr	r0, [r7, #0]
 8007fea:	f00c f813 	bl	8014014 <tcp_output>
 8007fee:	e000      	b.n	8007ff2 <mqtt_output_send+0x156>
    return;
 8007ff0:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd90      	pop	{r4, r7, pc}
 8007ff8:	080179ac 	.word	0x080179ac
 8007ffc:	08017a4c 	.word	0x08017a4c
 8008000:	08017a24 	.word	0x08017a24

08008004 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <mqtt_create_request+0x28>
 800801e:	4b19      	ldr	r3, [pc, #100]	; (8008084 <mqtt_create_request+0x80>)
 8008020:	f240 1223 	movw	r2, #291	; 0x123
 8008024:	4918      	ldr	r1, [pc, #96]	; (8008088 <mqtt_create_request+0x84>)
 8008026:	4819      	ldr	r0, [pc, #100]	; (800808c <mqtt_create_request+0x88>)
 8008028:	f00d ff36 	bl	8015e98 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800802c:	2300      	movs	r3, #0
 800802e:	74fb      	strb	r3, [r7, #19]
 8008030:	e01f      	b.n	8008072 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8008032:	7cfb      	ldrb	r3, [r7, #19]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4413      	add	r3, r2
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	7cfb      	ldrb	r3, [r7, #19]
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	68f9      	ldr	r1, [r7, #12]
 8008042:	440b      	add	r3, r1
 8008044:	429a      	cmp	r2, r3
 8008046:	d111      	bne.n	800806c <mqtt_create_request+0x68>
      r = &r_objs[n];
 8008048:	7cfb      	ldrb	r3, [r7, #19]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6a3a      	ldr	r2, [r7, #32]
 8008062:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	88fa      	ldrh	r2, [r7, #6]
 8008068:	819a      	strh	r2, [r3, #12]
      break;
 800806a:	e006      	b.n	800807a <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 800806c:	7cfb      	ldrb	r3, [r7, #19]
 800806e:	3301      	adds	r3, #1
 8008070:	74fb      	strb	r3, [r7, #19]
 8008072:	7cfa      	ldrb	r2, [r7, #19]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3db      	bcc.n	8008032 <mqtt_create_request+0x2e>
    }
  }
  return r;
 800807a:	697b      	ldr	r3, [r7, #20]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	080179ac 	.word	0x080179ac
 8008088:	08017a6c 	.word	0x08017a6c
 800808c:	08017a24 	.word	0x08017a24

08008090 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <mqtt_append_request+0x26>
 80080a8:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <mqtt_append_request+0x88>)
 80080aa:	f240 123f 	movw	r2, #319	; 0x13f
 80080ae:	491b      	ldr	r1, [pc, #108]	; (800811c <mqtt_append_request+0x8c>)
 80080b0:	481b      	ldr	r0, [pc, #108]	; (8008120 <mqtt_append_request+0x90>)
 80080b2:	f00d fef1 	bl	8015e98 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	e00a      	b.n	80080d4 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	89da      	ldrh	r2, [r3, #14]
 80080c2:	8a7b      	ldrh	r3, [r7, #18]
 80080c4:	4413      	add	r3, r2
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	827b      	strh	r3, [r7, #18]
    head = iter;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f1      	bne.n	80080be <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80080da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080de:	2b1e      	cmp	r3, #30
 80080e0:	dd06      	ble.n	80080f0 <mqtt_append_request+0x60>
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <mqtt_append_request+0x88>)
 80080e4:	f240 1247 	movw	r2, #327	; 0x147
 80080e8:	490e      	ldr	r1, [pc, #56]	; (8008124 <mqtt_append_request+0x94>)
 80080ea:	480d      	ldr	r0, [pc, #52]	; (8008120 <mqtt_append_request+0x90>)
 80080ec:	f00d fed4 	bl	8015e98 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 80080f0:	8a7b      	ldrh	r3, [r7, #18]
 80080f2:	f1c3 031e 	rsb	r3, r3, #30
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <mqtt_append_request+0x7a>
    *tail = r;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8008108:	e002      	b.n	8008110 <mqtt_append_request+0x80>
    head->next = r;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	601a      	str	r2, [r3, #0]
}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	080179ac 	.word	0x080179ac
 800811c:	08017a90 	.word	0x08017a90
 8008120:	08017a24 	.word	0x08017a24
 8008124:	08017ab4 	.word	0x08017ab4

08008128 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <mqtt_delete_request+0x14>
    r->next = r;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]
  }
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	2300      	movs	r3, #0
 800815a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <mqtt_take_request+0x28>
 8008162:	4b1f      	ldr	r3, [pc, #124]	; (80081e0 <mqtt_take_request+0x98>)
 8008164:	f240 1267 	movw	r2, #359	; 0x167
 8008168:	491e      	ldr	r1, [pc, #120]	; (80081e4 <mqtt_take_request+0x9c>)
 800816a:	481f      	ldr	r0, [pc, #124]	; (80081e8 <mqtt_take_request+0xa0>)
 800816c:	f00d fe94 	bl	8015e98 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e009      	b.n	800818c <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	899b      	ldrh	r3, [r3, #12]
 800817c:	887a      	ldrh	r2, [r7, #2]
 800817e:	429a      	cmp	r2, r3
 8008180:	d008      	beq.n	8008194 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f2      	bne.n	8008178 <mqtt_take_request+0x30>
 8008192:	e000      	b.n	8008196 <mqtt_take_request+0x4e>
      break;
 8008194:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01c      	beq.n	80081d6 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <mqtt_take_request+0x64>
      *tail = iter->next;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e003      	b.n	80081b4 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	89d1      	ldrh	r1, [r2, #14]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	89d2      	ldrh	r2, [r2, #14]
 80081ca:	440a      	add	r2, r1
 80081cc:	b292      	uxth	r2, r2
 80081ce:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
  }
  return iter;
 80081d6:	68fb      	ldr	r3, [r7, #12]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	080179ac 	.word	0x080179ac
 80081e4:	08017aec 	.word	0x08017aec
 80081e8:	08017a24 	.word	0x08017a24

080081ec <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <mqtt_request_time_elapsed+0x20>
 80081fe:	4b21      	ldr	r3, [pc, #132]	; (8008284 <mqtt_request_time_elapsed+0x98>)
 8008200:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8008204:	4920      	ldr	r1, [pc, #128]	; (8008288 <mqtt_request_time_elapsed+0x9c>)
 8008206:	4821      	ldr	r0, [pc, #132]	; (800828c <mqtt_request_time_elapsed+0xa0>)
 8008208:	f00d fe46 	bl	8015e98 <iprintf>
  r = *tail;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8008212:	e02c      	b.n	800826e <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	89db      	ldrh	r3, [r3, #14]
 800821c:	429a      	cmp	r2, r3
 800821e:	d31c      	bcc.n	800825a <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	89db      	ldrh	r3, [r3, #14]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	6892      	ldr	r2, [r2, #8]
 8008244:	f06f 0102 	mvn.w	r1, #2
 8008248:	4610      	mov	r0, r2
 800824a:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7ff ff6b 	bl	8008128 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e009      	b.n	800826e <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	89da      	ldrh	r2, [r3, #14]
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	b29b      	uxth	r3, r3
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	81da      	strh	r2, [r3, #14]
      t = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <mqtt_request_time_elapsed+0x8e>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1cc      	bne.n	8008214 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	080179ac 	.word	0x080179ac
 8008288:	08017b0c 	.word	0x08017b0c
 800828c:	08017a24 	.word	0x08017a24

08008290 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <mqtt_clear_requests+0x1c>
 800829e:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <mqtt_clear_requests+0x48>)
 80082a0:	f240 12a7 	movw	r2, #423	; 0x1a7
 80082a4:	490d      	ldr	r1, [pc, #52]	; (80082dc <mqtt_clear_requests+0x4c>)
 80082a6:	480e      	ldr	r0, [pc, #56]	; (80082e0 <mqtt_clear_requests+0x50>)
 80082a8:	f00d fdf6 	bl	8015e98 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	e007      	b.n	80082c4 <mqtt_clear_requests+0x34>
    next = iter->next;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff ff34 	bl	8008128 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1f4      	bne.n	80082b4 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	080179ac 	.word	0x080179ac
 80082dc:	08017b34 	.word	0x08017b34
 80082e0:	08017a24 	.word	0x08017a24

080082e4 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d106      	bne.n	8008302 <mqtt_init_requests+0x1e>
 80082f4:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <mqtt_init_requests+0x4c>)
 80082f6:	f240 12b7 	movw	r2, #439	; 0x1b7
 80082fa:	490e      	ldr	r1, [pc, #56]	; (8008334 <mqtt_init_requests+0x50>)
 80082fc:	480e      	ldr	r0, [pc, #56]	; (8008338 <mqtt_init_requests+0x54>)
 80082fe:	f00d fdcb 	bl	8015e98 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
 8008306:	e00b      	b.n	8008320 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	4413      	add	r3, r2
 8008310:	7bfa      	ldrb	r2, [r7, #15]
 8008312:	0112      	lsls	r2, r2, #4
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	440a      	add	r2, r1
 8008318:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	3301      	adds	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	7bfa      	ldrb	r2, [r7, #15]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d3ef      	bcc.n	8008308 <mqtt_init_requests+0x24>
  }
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	080179ac 	.word	0x080179ac
 8008334:	08017b58 	.word	0x08017b58
 8008338:	08017a24 	.word	0x08017a24

0800833c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff fd2d 	bl	8007dac <mqtt_ringbuf_put>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8008366:	887b      	ldrh	r3, [r7, #2]
 8008368:	0a1b      	lsrs	r3, r3, #8
 800836a:	b29b      	uxth	r3, r3
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7ff fd1b 	bl	8007dac <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fd15 	bl	8007dac <mqtt_ringbuf_put>
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b086      	sub	sp, #24
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	4613      	mov	r3, r2
 8008396:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8008398:	2300      	movs	r3, #0
 800839a:	82fb      	strh	r3, [r7, #22]
 800839c:	e00a      	b.n	80083b4 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800839e:	8afb      	ldrh	r3, [r7, #22]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	4413      	add	r3, r2
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	4619      	mov	r1, r3
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fcff 	bl	8007dac <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80083ae:	8afb      	ldrh	r3, [r7, #22]
 80083b0:	3301      	adds	r3, #1
 80083b2:	82fb      	strh	r3, [r7, #22]
 80083b4:	8afa      	ldrh	r2, [r7, #22]
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d3f0      	bcc.n	800839e <mqtt_output_append_buf+0x14>
  }
}
 80083bc:	bf00      	nop
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	0a1b      	lsrs	r3, r3, #8
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	4619      	mov	r1, r3
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fce5 	bl	8007dac <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	4619      	mov	r1, r3
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff fcdf 	bl	8007dac <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80083ee:	2300      	movs	r3, #0
 80083f0:	82fb      	strh	r3, [r7, #22]
 80083f2:	e00a      	b.n	800840a <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 80083f4:	8afb      	ldrh	r3, [r7, #22]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4413      	add	r3, r2
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	4619      	mov	r1, r3
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fcd4 	bl	8007dac <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8008404:	8afb      	ldrh	r3, [r7, #22]
 8008406:	3301      	adds	r3, #1
 8008408:	82fb      	strh	r3, [r7, #22]
 800840a:	8afa      	ldrh	r2, [r7, #22]
 800840c:	88fb      	ldrh	r3, [r7, #6]
 800840e:	429a      	cmp	r2, r3
 8008410:	d3f0      	bcc.n	80083f4 <mqtt_output_append_string+0x30>
  }
}
 8008412:	bf00      	nop
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	4608      	mov	r0, r1
 8008424:	4611      	mov	r1, r2
 8008426:	461a      	mov	r2, r3
 8008428:	4603      	mov	r3, r0
 800842a:	70fb      	strb	r3, [r7, #3]
 800842c:	460b      	mov	r3, r1
 800842e:	70bb      	strb	r3, [r7, #2]
 8008430:	4613      	mov	r3, r2
 8008432:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	b25a      	sxtb	r2, r3
 800843a:	78bb      	ldrb	r3, [r7, #2]
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	b25b      	sxtb	r3, r3
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	b25b      	sxtb	r3, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	b25a      	sxtb	r2, r3
 800844a:	787b      	ldrb	r3, [r7, #1]
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	b25b      	sxtb	r3, r3
 8008450:	f003 0306 	and.w	r3, r3, #6
 8008454:	b25b      	sxtb	r3, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	b25a      	sxtb	r2, r3
 800845a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	b25b      	sxtb	r3, r3
 8008464:	4313      	orrs	r3, r2
 8008466:	b25b      	sxtb	r3, r3
 8008468:	b2db      	uxtb	r3, r3
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff ff65 	bl	800833c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8008472:	8abb      	ldrh	r3, [r7, #20]
 8008474:	b25b      	sxtb	r3, r3
 8008476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847a:	b25a      	sxtb	r2, r3
 800847c:	8abb      	ldrh	r3, [r7, #20]
 800847e:	2b7f      	cmp	r3, #127	; 0x7f
 8008480:	d902      	bls.n	8008488 <mqtt_output_append_fixed_header+0x6e>
 8008482:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8008486:	e000      	b.n	800848a <mqtt_output_append_fixed_header+0x70>
 8008488:	2300      	movs	r3, #0
 800848a:	4313      	orrs	r3, r2
 800848c:	b25b      	sxtb	r3, r3
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ff52 	bl	800833c <mqtt_output_append_u8>
    r_length >>= 7;
 8008498:	8abb      	ldrh	r3, [r7, #20]
 800849a:	09db      	lsrs	r3, r3, #7
 800849c:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800849e:	8abb      	ldrh	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <mqtt_output_append_fixed_header+0x58>
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 80084b8:	887b      	ldrh	r3, [r7, #2]
 80084ba:	3301      	adds	r3, #1
 80084bc:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <mqtt_output_check_space+0x26>
 80084c4:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <mqtt_output_check_space+0x58>)
 80084c6:	f240 2207 	movw	r2, #519	; 0x207
 80084ca:	490f      	ldr	r1, [pc, #60]	; (8008508 <mqtt_output_check_space+0x5c>)
 80084cc:	480f      	ldr	r0, [pc, #60]	; (800850c <mqtt_output_check_space+0x60>)
 80084ce:	f00d fce3 	bl	8015e98 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 80084d2:	89fb      	ldrh	r3, [r7, #14]
 80084d4:	3301      	adds	r3, #1
 80084d6:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	09db      	lsrs	r3, r3, #7
 80084dc:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 80084de:	887b      	ldrh	r3, [r7, #2]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1f6      	bne.n	80084d2 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 80084e4:	89fc      	ldrh	r4, [r7, #14]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff fcbc 	bl	8007e64 <mqtt_ringbuf_len>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80084f2:	429c      	cmp	r4, r3
 80084f4:	bfd4      	ite	le
 80084f6:	2301      	movle	r3, #1
 80084f8:	2300      	movgt	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}
 8008504:	080179ac 	.word	0x080179ac
 8008508:	08017b7c 	.word	0x08017b7c
 800850c:	08017a24 	.word	0x08017a24

08008510 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <mqtt_close+0x20>
 8008522:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <mqtt_close+0xb0>)
 8008524:	f240 221b 	movw	r2, #539	; 0x21b
 8008528:	4926      	ldr	r1, [pc, #152]	; (80085c4 <mqtt_close+0xb4>)
 800852a:	4827      	ldr	r0, [pc, #156]	; (80085c8 <mqtt_close+0xb8>)
 800852c:	f00d fcb4 	bl	8015e98 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d024      	beq.n	8008582 <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f008 f864 	bl	801060c <tcp_recv>
    altcp_err(client->conn,  NULL);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f008 f8a2 	bl	8010694 <tcp_err>
    altcp_sent(client->conn, NULL);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f008 f87a 	bl	8010650 <tcp_sent>
    res = altcp_close(client->conn);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	4618      	mov	r0, r3
 8008562:	f006 fe75 	bl	800f250 <tcp_close>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800856a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	4618      	mov	r0, r3
 8008578:	f006 ff54 	bl	800f424 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3318      	adds	r3, #24
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff fe82 	bl	8008290 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	480f      	ldr	r0, [pc, #60]	; (80085cc <mqtt_close+0xbc>)
 8008590:	f00c fdca 	bl	8015128 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7a9b      	ldrb	r3, [r3, #10]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00d      	beq.n	80085b8 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6911      	ldr	r1, [r2, #16]
 80085b2:	887a      	ldrh	r2, [r7, #2]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
    }
  }
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	080179ac 	.word	0x080179ac
 80085c4:	08017ba0 	.word	0x08017ba0
 80085c8:	08017a24 	.word	0x08017a24
 80085cc:	080085d1 	.word	0x080085d1

080085d0 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d106      	bne.n	80085f4 <mqtt_cyclic_timer+0x24>
 80085e6:	4b42      	ldr	r3, [pc, #264]	; (80086f0 <mqtt_cyclic_timer+0x120>)
 80085e8:	f44f 7211 	mov.w	r2, #580	; 0x244
 80085ec:	4941      	ldr	r1, [pc, #260]	; (80086f4 <mqtt_cyclic_timer+0x124>)
 80085ee:	4842      	ldr	r0, [pc, #264]	; (80086f8 <mqtt_cyclic_timer+0x128>)
 80085f0:	f00d fc52 	bl	8015e98 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	7a9b      	ldrb	r3, [r3, #10]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d115      	bne.n	8008628 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	2b63      	cmp	r3, #99	; 0x63
 8008616:	dd5e      	ble.n	80086d6 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008618:	f240 1101 	movw	r1, #257	; 0x101
 800861c:	68b8      	ldr	r0, [r7, #8]
 800861e:	f7ff ff77 	bl	8008510 <mqtt_close>
      restart_timer = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
 8008626:	e056      	b.n	80086d6 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	7a9b      	ldrb	r3, [r3, #10]
 800862c:	2b03      	cmp	r3, #3
 800862e:	d150      	bne.n	80086d2 <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3318      	adds	r3, #24
 8008634:	2105      	movs	r1, #5
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff fdd8 	bl	80081ec <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d048      	beq.n	80086d6 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	889b      	ldrh	r3, [r3, #4]
 8008648:	3301      	adds	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	889b      	ldrh	r3, [r3, #4]
 8008654:	461a      	mov	r2, r3
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	885b      	ldrh	r3, [r3, #2]
 8008660:	4619      	mov	r1, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	440b      	add	r3, r1
 800866c:	429a      	cmp	r2, r3
 800866e:	dd06      	ble.n	800867e <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008670:	f240 1101 	movw	r1, #257	; 0x101
 8008674:	68b8      	ldr	r0, [r7, #8]
 8008676:	f7ff ff4b 	bl	8008510 <mqtt_close>
        restart_timer = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	8852      	ldrh	r2, [r2, #2]
 800868e:	4293      	cmp	r3, r2
 8008690:	db18      	blt.n	80086c4 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	33ec      	adds	r3, #236	; 0xec
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff ff07 	bl	80084ac <mqtt_output_check_space>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d018      	beq.n	80086d6 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80086aa:	2300      	movs	r3, #0
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	2300      	movs	r3, #0
 80086b4:	2200      	movs	r2, #0
 80086b6:	210c      	movs	r1, #12
 80086b8:	f7ff feaf 	bl	800841a <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	801a      	strh	r2, [r3, #0]
 80086c2:	e008      	b.n	80086d6 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	e001      	b.n	80086d6 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4907      	ldr	r1, [pc, #28]	; (80086fc <mqtt_cyclic_timer+0x12c>)
 80086e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80086e4:	f00c fcfa 	bl	80150dc <sys_timeout>
  }
}
 80086e8:	bf00      	nop
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	080179ac 	.word	0x080179ac
 80086f4:	08017bbc 	.word	0x08017bbc
 80086f8:	08017a24 	.word	0x08017a24
 80086fc:	080085d1 	.word	0x080085d1

08008700 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af02      	add	r7, sp, #8
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	461a      	mov	r2, r3
 800870e:	4603      	mov	r3, r0
 8008710:	70fb      	strb	r3, [r7, #3]
 8008712:	460b      	mov	r3, r1
 8008714:	803b      	strh	r3, [r7, #0]
 8008716:	4613      	mov	r3, r2
 8008718:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	33ec      	adds	r3, #236	; 0xec
 8008722:	2102      	movs	r1, #2
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fec1 	bl	80084ac <mqtt_output_check_space>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01d      	beq.n	800876c <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008736:	78ba      	ldrb	r2, [r7, #2]
 8008738:	78f9      	ldrb	r1, [r7, #3]
 800873a:	2302      	movs	r3, #2
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	2200      	movs	r2, #0
 8008746:	f7ff fe68 	bl	800841a <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	33ec      	adds	r3, #236	; 0xec
 800874e:	883a      	ldrh	r2, [r7, #0]
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fe01 	bl	800835a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	4619      	mov	r1, r3
 8008764:	4610      	mov	r0, r2
 8008766:	f7ff fb99 	bl	8007e9c <mqtt_output_send>
 800876a:	e001      	b.n	8008770 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8008770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00c      	beq.n	80087aa <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6890      	ldr	r0, [r2, #8]
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	2a02      	cmp	r2, #2
 800879c:	d801      	bhi.n	80087a2 <mqtt_incomming_suback+0x26>
 800879e:	2200      	movs	r2, #0
 80087a0:	e001      	b.n	80087a6 <mqtt_incomming_suback+0x2a>
 80087a2:	f06f 020c 	mvn.w	r2, #12
 80087a6:	4611      	mov	r1, r2
 80087a8:	4798      	blx	r3
  }
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b08f      	sub	sp, #60	; 0x3c
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	607b      	str	r3, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	72fb      	strb	r3, [r7, #11]
 80087c2:	4613      	mov	r3, r2
 80087c4:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 80087c6:	2300      	movs	r3, #0
 80087c8:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	4413      	add	r3, r2
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80087e4:	091b      	lsrs	r3, r3, #4
 80087e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087f2:	2b7f      	cmp	r3, #127	; 0x7f
 80087f4:	d906      	bls.n	8008804 <mqtt_message_received+0x50>
 80087f6:	4ba0      	ldr	r3, [pc, #640]	; (8008a78 <mqtt_message_received+0x2c4>)
 80087f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80087fc:	499f      	ldr	r1, [pc, #636]	; (8008a7c <mqtt_message_received+0x2c8>)
 80087fe:	48a0      	ldr	r0, [pc, #640]	; (8008a80 <mqtt_message_received+0x2cc>)
 8008800:	f00d fb4a 	bl	8015e98 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8008804:	7afa      	ldrb	r2, [r7, #11]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800880a:	429a      	cmp	r2, r3
 800880c:	d906      	bls.n	800881c <mqtt_message_received+0x68>
 800880e:	4b9a      	ldr	r3, [pc, #616]	; (8008a78 <mqtt_message_received+0x2c4>)
 8008810:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8008814:	499b      	ldr	r1, [pc, #620]	; (8008a84 <mqtt_message_received+0x2d0>)
 8008816:	489a      	ldr	r0, [pc, #616]	; (8008a80 <mqtt_message_received+0x2cc>)
 8008818:	f00d fb3e 	bl	8015e98 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800881c:	7afa      	ldrb	r2, [r7, #11]
 800881e:	893b      	ldrh	r3, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	2b80      	cmp	r3, #128	; 0x80
 8008824:	dd09      	ble.n	800883a <mqtt_message_received+0x86>
 8008826:	4b94      	ldr	r3, [pc, #592]	; (8008a78 <mqtt_message_received+0x2c4>)
 8008828:	f240 22ae 	movw	r2, #686	; 0x2ae
 800882c:	4996      	ldr	r1, [pc, #600]	; (8008a88 <mqtt_message_received+0x2d4>)
 800882e:	4894      	ldr	r0, [pc, #592]	; (8008a80 <mqtt_message_received+0x2cc>)
 8008830:	f00d fb32 	bl	8015e98 <iprintf>
 8008834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008838:	e171      	b.n	8008b1e <mqtt_message_received+0x36a>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800883a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800883e:	2b02      	cmp	r3, #2
 8008840:	d123      	bne.n	800888a <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	7a9b      	ldrb	r3, [r3, #10]
 8008846:	2b02      	cmp	r3, #2
 8008848:	f040 8158 	bne.w	8008afc <mqtt_message_received+0x348>
      if (length < 2) {
 800884c:	893b      	ldrh	r3, [r7, #8]
 800884e:	2b01      	cmp	r3, #1
 8008850:	f240 8156 	bls.w	8008b00 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	3301      	adds	r3, #1
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800885c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800885e:	2b00      	cmp	r3, #0
 8008860:	f040 814c 	bne.w	8008afc <mqtt_message_received+0x348>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2203      	movs	r2, #3
 800886e:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8141 	beq.w	8008afc <mqtt_message_received+0x348>
          client->connect_cb(client, client->connect_arg, res);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	6911      	ldr	r1, [r2, #16]
 8008882:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	4798      	blx	r3
 8008888:	e138      	b.n	8008afc <mqtt_message_received+0x348>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800888a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800888e:	2b0d      	cmp	r3, #13
 8008890:	f000 8134 	beq.w	8008afc <mqtt_message_received+0x348>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8008894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008898:	2b03      	cmp	r3, #3
 800889a:	f040 80c7 	bne.w	8008a2c <mqtt_message_received+0x278>
    u16_t payload_offset = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 80088a2:	893b      	ldrh	r3, [r7, #8]
 80088a4:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80088ac:	105b      	asrs	r3, r3, #1
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	f200 8081 	bhi.w	80089c4 <mqtt_message_received+0x210>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 80088c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <mqtt_message_received+0x11a>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e000      	b.n	80088d0 <mqtt_message_received+0x11c>
 80088ce:	2300      	movs	r3, #0
 80088d0:	843b      	strh	r3, [r7, #32]
      if (length < 2 + qos_len) {
 80088d2:	893a      	ldrh	r2, [r7, #8]
 80088d4:	8c3b      	ldrh	r3, [r7, #32]
 80088d6:	3302      	adds	r3, #2
 80088d8:	429a      	cmp	r2, r3
 80088da:	f2c0 8113 	blt.w	8008b04 <mqtt_message_received+0x350>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	83fb      	strh	r3, [r7, #30]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80088e4:	8bfb      	ldrh	r3, [r7, #30]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	3301      	adds	r3, #1
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	83fb      	strh	r3, [r7, #30]
      if ((topic_len > length - (2 + qos_len)) ||
 80088f6:	8bfa      	ldrh	r2, [r7, #30]
 80088f8:	8939      	ldrh	r1, [r7, #8]
 80088fa:	8c3b      	ldrh	r3, [r7, #32]
 80088fc:	3302      	adds	r3, #2
 80088fe:	1acb      	subs	r3, r1, r3
 8008900:	429a      	cmp	r2, r3
 8008902:	f300 810a 	bgt.w	8008b1a <mqtt_message_received+0x366>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8008906:	8bfa      	ldrh	r2, [r7, #30]
 8008908:	8c3b      	ldrh	r3, [r7, #32]
 800890a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890c:	1acb      	subs	r3, r1, r3
 800890e:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8008910:	429a      	cmp	r2, r3
 8008912:	f200 8102 	bhi.w	8008b1a <mqtt_message_received+0x366>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	3302      	adds	r3, #2
 800891a:	61bb      	str	r3, [r7, #24]
      after_topic = 2 + topic_len;
 800891c:	8bfb      	ldrh	r3, [r7, #30]
 800891e:	3302      	adds	r3, #2
 8008920:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8008922:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <mqtt_message_received+0x17c>
 800892c:	2302      	movs	r3, #2
 800892e:	e000      	b.n	8008932 <mqtt_message_received+0x17e>
 8008930:	2301      	movs	r3, #1
 8008932:	441a      	add	r2, r3
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	429a      	cmp	r2, r3
 8008938:	f200 80e6 	bhi.w	8008b08 <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800893c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01a      	beq.n	800897a <mqtt_message_received+0x1c6>
        if (length < after_topic + 2U) {
 8008944:	893a      	ldrh	r2, [r7, #8]
 8008946:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008948:	3302      	adds	r3, #2
 800894a:	429a      	cmp	r2, r3
 800894c:	f0c0 80de 	bcc.w	8008b0c <mqtt_message_received+0x358>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8008950:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008954:	4413      	add	r3, r2
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	021b      	lsls	r3, r3, #8
 800895c:	b29a      	uxth	r2, r3
 800895e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008960:	3301      	adds	r3, #1
 8008962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008964:	440b      	add	r3, r1
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	4413      	add	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8008972:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008974:	3302      	adds	r3, #2
 8008976:	863b      	strh	r3, [r7, #48]	; 0x30
 8008978:	e002      	b.n	8008980 <mqtt_message_received+0x1cc>
      } else {
        client->inpub_pkt_id = 0;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8008980:	8bfb      	ldrh	r3, [r7, #30]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	4413      	add	r3, r2
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	75fb      	strb	r3, [r7, #23]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800898a:	8bfb      	ldrh	r3, [r7, #30]
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	4413      	add	r3, r2
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8008994:	893a      	ldrh	r2, [r7, #8]
 8008996:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800899c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800899e:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d008      	beq.n	80089ba <mqtt_message_received+0x206>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80089b0:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	440a      	add	r2, r1
 80089b6:	69b9      	ldr	r1, [r7, #24]
 80089b8:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 80089ba:	8bfb      	ldrh	r3, [r7, #30]
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4413      	add	r3, r2
 80089c0:	7dfa      	ldrb	r2, [r7, #23]
 80089c2:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 80089c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <mqtt_message_received+0x21e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 8095 	bne.w	8008afc <mqtt_message_received+0x348>
      if (length < (size_t)(payload_offset + payload_length)) {
 80089d2:	893b      	ldrh	r3, [r7, #8]
 80089d4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80089d6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80089d8:	440a      	add	r2, r1
 80089da:	4293      	cmp	r3, r2
 80089dc:	f0c0 8098 	bcc.w	8008b10 <mqtt_message_received+0x35c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80089e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80089ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ec:	18d1      	adds	r1, r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bf0c      	ite	eq
 80089f4:	2301      	moveq	r3, #1
 80089f6:	2300      	movne	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80089fc:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d17b      	bne.n	8008afc <mqtt_message_received+0x348>
 8008a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d077      	beq.n	8008afc <mqtt_message_received+0x348>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8008a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <mqtt_message_received+0x264>
 8008a14:	2304      	movs	r3, #4
 8008a16:	e000      	b.n	8008a1a <mqtt_message_received+0x266>
 8008a18:	2305      	movs	r3, #5
 8008a1a:	75bb      	strb	r3, [r7, #22]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	891a      	ldrh	r2, [r3, #8]
 8008a20:	7db9      	ldrb	r1, [r7, #22]
 8008a22:	2300      	movs	r3, #0
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff fe6b 	bl	8008700 <pub_ack_rec_rel_response>
 8008a2a:	e067      	b.n	8008afc <mqtt_message_received+0x348>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	3301      	adds	r3, #1
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a40:	4313      	orrs	r3, r2
 8008a42:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 8008a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d064      	beq.n	8008b14 <mqtt_message_received+0x360>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8008a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d106      	bne.n	8008a60 <mqtt_message_received+0x2ac>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8008a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a54:	2301      	movs	r3, #1
 8008a56:	2106      	movs	r1, #6
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fe51 	bl	8008700 <pub_ack_rec_rel_response>
 8008a5e:	e04d      	b.n	8008afc <mqtt_message_received+0x348>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8008a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d111      	bne.n	8008a8c <mqtt_message_received+0x2d8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8008a68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2107      	movs	r1, #7
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7ff fe46 	bl	8008700 <pub_ack_rec_rel_response>
 8008a74:	e042      	b.n	8008afc <mqtt_message_received+0x348>
 8008a76:	bf00      	nop
 8008a78:	080179ac 	.word	0x080179ac
 8008a7c:	08017be0 	.word	0x08017be0
 8008a80:	08017a24 	.word	0x08017a24
 8008a84:	08017c10 	.word	0x08017c10
 8008a88:	08017c34 	.word	0x08017c34

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a90:	2b09      	cmp	r3, #9
 8008a92:	d00b      	beq.n	8008aac <mqtt_message_received+0x2f8>
 8008a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a98:	2b0b      	cmp	r3, #11
 8008a9a:	d007      	beq.n	8008aac <mqtt_message_received+0x2f8>
 8008a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa0:	2b07      	cmp	r3, #7
 8008aa2:	d003      	beq.n	8008aac <mqtt_message_received+0x2f8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8008aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d136      	bne.n	8008b1a <mqtt_message_received+0x366>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3318      	adds	r3, #24
 8008ab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff fb47 	bl	8008148 <mqtt_take_request>
 8008aba:	6138      	str	r0, [r7, #16]
      if (r != NULL) {
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01c      	beq.n	8008afc <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8008ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d10a      	bne.n	8008ae0 <mqtt_message_received+0x32c>
          if (length < 3) {
 8008aca:	893b      	ldrh	r3, [r7, #8]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d923      	bls.n	8008b18 <mqtt_message_received+0x364>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6938      	ldr	r0, [r7, #16]
 8008ada:	f7ff fe4f 	bl	800877c <mqtt_incomming_suback>
 8008ade:	e00a      	b.n	8008af6 <mqtt_message_received+0x342>
          }
        } else if (r->cb != NULL) {
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d006      	beq.n	8008af6 <mqtt_message_received+0x342>
          r->cb(r->arg, ERR_OK);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	6892      	ldr	r2, [r2, #8]
 8008af0:	2100      	movs	r1, #0
 8008af2:	4610      	mov	r0, r2
 8008af4:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8008af6:	6938      	ldr	r0, [r7, #16]
 8008af8:	f7ff fb16 	bl	8008128 <mqtt_delete_request>
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8008afc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008afe:	e00e      	b.n	8008b1e <mqtt_message_received+0x36a>
        goto out_disconnect;
 8008b00:	bf00      	nop
 8008b02:	e00a      	b.n	8008b1a <mqtt_message_received+0x366>
        goto out_disconnect;
 8008b04:	bf00      	nop
 8008b06:	e008      	b.n	8008b1a <mqtt_message_received+0x366>
        goto out_disconnect;
 8008b08:	bf00      	nop
 8008b0a:	e006      	b.n	8008b1a <mqtt_message_received+0x366>
          goto out_disconnect;
 8008b0c:	bf00      	nop
 8008b0e:	e004      	b.n	8008b1a <mqtt_message_received+0x366>
        goto out_disconnect;
 8008b10:	bf00      	nop
 8008b12:	e002      	b.n	8008b1a <mqtt_message_received+0x366>
      goto out_disconnect;
 8008b14:	bf00      	nop
 8008b16:	e000      	b.n	8008b1a <mqtt_message_received+0x366>
            goto out_disconnect;
 8008b18:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8008b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	373c      	adds	r7, #60	; 0x3c
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd90      	pop	{r4, r7, pc}
 8008b26:	bf00      	nop

08008b28 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8008b42:	e0bc      	b.n	8008cbe <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d903      	bls.n	8008b52 <mqtt_parse_incoming+0x2a>
 8008b4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da4d      	bge.n	8008bee <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8008b52:	7dfa      	ldrb	r2, [r7, #23]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d206      	bcs.n	8008b6a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008b66:	75bb      	strb	r3, [r7, #22]
 8008b68:	e012      	b.n	8008b90 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8008b6a:	8bfb      	ldrh	r3, [r7, #30]
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	83fa      	strh	r2, [r7, #30]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6838      	ldr	r0, [r7, #0]
 8008b74:	f006 f87c 	bl	800ec70 <pbuf_get_at>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b80:	1c59      	adds	r1, r3, #1
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6691      	str	r1, [r2, #104]	; 0x68
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	7dba      	ldrb	r2, [r7, #22]
 8008b8c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	3301      	adds	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	f240 8090 	bls.w	8008cbe <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8008b9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ba0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	1e9a      	subs	r2, r3, #2
 8008ba8:	4613      	mov	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8008bb8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	db7e      	blt.n	8008cbe <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8008bc6:	7df9      	ldrb	r1, [r7, #23]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2200      	movs	r2, #0
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fdf1 	bl	80087b4 <mqtt_message_received>
            client->msg_idx = 0;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75fb      	strb	r3, [r7, #23]
 8008bdc:	e06f      	b.n	8008cbe <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8008bde:	7dfa      	ldrb	r2, [r7, #23]
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	441a      	add	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8008bec:	e067      	b.n	8008cbe <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	7dfa      	ldrb	r2, [r7, #23]
 8008bf8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8008bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c00:	fb02 f201 	mul.w	r2, r2, r1
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	4413      	add	r3, r2
 8008c0e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	891a      	ldrh	r2, [r3, #8]
 8008c14:	8bfb      	ldrh	r3, [r7, #30]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d205      	bcs.n	8008c2e <mqtt_parse_incoming+0x106>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	891a      	ldrh	r2, [r3, #8]
 8008c26:	8bfb      	ldrh	r3, [r7, #30]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	e001      	b.n	8008c32 <mqtt_parse_incoming+0x10a>
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8008c34:	8a7b      	ldrh	r3, [r7, #18]
 8008c36:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008c3a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8008c3c:	8aba      	ldrh	r2, [r7, #20]
 8008c3e:	8a3b      	ldrh	r3, [r7, #16]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d901      	bls.n	8008c48 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8008c44:	8a3b      	ldrh	r3, [r7, #16]
 8008c46:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008c4e:	8a7b      	ldrh	r3, [r7, #18]
 8008c50:	18d1      	adds	r1, r2, r3
 8008c52:	8bfb      	ldrh	r3, [r7, #30]
 8008c54:	8aba      	ldrh	r2, [r7, #20]
 8008c56:	6838      	ldr	r0, [r7, #0]
 8008c58:	f005 fe2e 	bl	800e8b8 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008c60:	8abb      	ldrh	r3, [r7, #20]
 8008c62:	441a      	add	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8008c68:	8bfa      	ldrh	r2, [r7, #30]
 8008c6a:	8abb      	ldrh	r3, [r7, #20]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8008c70:	8abb      	ldrh	r3, [r7, #20]
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <mqtt_parse_incoming+0x15e>
 8008c7e:	8aba      	ldrh	r2, [r7, #20]
 8008c80:	8a3b      	ldrh	r3, [r7, #16]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d11b      	bne.n	8008cbe <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8008c86:	8a7a      	ldrh	r2, [r7, #18]
 8008c88:	8abb      	ldrh	r3, [r7, #20]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	7df9      	ldrb	r1, [r7, #23]
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fd8a 	bl	80087b4 <mqtt_message_received>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <mqtt_parse_incoming+0x186>
          return res;
 8008caa:	89fb      	ldrh	r3, [r7, #14]
 8008cac:	e00e      	b.n	8008ccc <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d104      	bne.n	8008cbe <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	891b      	ldrh	r3, [r3, #8]
 8008cc2:	8bfa      	ldrh	r2, [r7, #30]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	f4ff af3d 	bcc.w	8008b44 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <mqtt_tcp_recv_cb+0x26>
 8008cec:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <mqtt_tcp_recv_cb+0xac>)
 8008cee:	f240 32a7 	movw	r2, #935	; 0x3a7
 8008cf2:	4924      	ldr	r1, [pc, #144]	; (8008d84 <mqtt_tcp_recv_cb+0xb0>)
 8008cf4:	4824      	ldr	r0, [pc, #144]	; (8008d88 <mqtt_tcp_recv_cb+0xb4>)
 8008cf6:	f00d f8cf 	bl	8015e98 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d006      	beq.n	8008d12 <mqtt_tcp_recv_cb+0x3e>
 8008d04:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <mqtt_tcp_recv_cb+0xac>)
 8008d06:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008d0a:	4920      	ldr	r1, [pc, #128]	; (8008d8c <mqtt_tcp_recv_cb+0xb8>)
 8008d0c:	481e      	ldr	r0, [pc, #120]	; (8008d88 <mqtt_tcp_recv_cb+0xb4>)
 8008d0e:	f00d f8c3 	bl	8015e98 <iprintf>

  if (p == NULL) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d105      	bne.n	8008d24 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8008d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d1c:	6978      	ldr	r0, [r7, #20]
 8008d1e:	f7ff fbf7 	bl	8008510 <mqtt_close>
 8008d22:	e027      	b.n	8008d74 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8008d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f005 fbc9 	bl	800e4c4 <pbuf_free>
      return err;
 8008d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d36:	e01e      	b.n	8008d76 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	891b      	ldrh	r3, [r3, #8]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	68b8      	ldr	r0, [r7, #8]
 8008d40:	f006 fc70 	bl	800f624 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8008d44:	6879      	ldr	r1, [r7, #4]
 8008d46:	6978      	ldr	r0, [r7, #20]
 8008d48:	f7ff feee 	bl	8008b28 <mqtt_parse_incoming>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f005 fbb7 	bl	800e4c4 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8008d56:	8a7b      	ldrh	r3, [r7, #18]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8008d5c:	8a7b      	ldrh	r3, [r7, #18]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6978      	ldr	r0, [r7, #20]
 8008d62:	f7ff fbd5 	bl	8008510 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2200      	movs	r2, #0
 8008d72:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	080179ac 	.word	0x080179ac
 8008d84:	08017c4c 	.word	0x08017c4c
 8008d88:	08017a24 	.word	0x08017a24
 8008d8c:	08017c70 	.word	0x08017c70

08008d90 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	7a9b      	ldrb	r3, [r3, #10]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d127      	bne.n	8008dfa <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2200      	movs	r2, #0
 8008db4:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8008db6:	e00d      	b.n	8008dd4 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	6892      	ldr	r2, [r2, #8]
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4610      	mov	r0, r2
 8008dcc:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8008dce:	6938      	ldr	r0, [r7, #16]
 8008dd0:	f7ff f9aa 	bl	8008128 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3318      	adds	r3, #24
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff f9b4 	bl	8008148 <mqtt_take_request>
 8008de0:	6138      	str	r0, [r7, #16]
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e7      	bne.n	8008db8 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7ff f851 	bl	8007e9c <mqtt_output_send>
  }
  return ERR_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <mqtt_tcp_err_cb+0x24>
 8008e1a:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <mqtt_tcp_err_cb+0x3c>)
 8008e1c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8008e20:	4908      	ldr	r1, [pc, #32]	; (8008e44 <mqtt_tcp_err_cb+0x40>)
 8008e22:	4809      	ldr	r0, [pc, #36]	; (8008e48 <mqtt_tcp_err_cb+0x44>)
 8008e24:	f00d f838 	bl	8015e98 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8008e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fb6c 	bl	8008510 <mqtt_close>
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	080179ac 	.word	0x080179ac
 8008e44:	08017c98 	.word	0x08017c98
 8008e48:	08017a24 	.word	0x08017a24

08008e4c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	7a9b      	ldrb	r3, [r3, #10]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d105      	bne.n	8008e6e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	33ec      	adds	r3, #236	; 0xec
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff f817 	bl	8007e9c <mqtt_output_send>
  }
  return ERR_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8008e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8008e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e96:	e025      	b.n	8008ee4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8008e9e:	4913      	ldr	r1, [pc, #76]	; (8008eec <mqtt_tcp_connect_cb+0x74>)
 8008ea0:	68b8      	ldr	r0, [r7, #8]
 8008ea2:	f007 fbb3 	bl	801060c <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8008ea6:	4912      	ldr	r1, [pc, #72]	; (8008ef0 <mqtt_tcp_connect_cb+0x78>)
 8008ea8:	68b8      	ldr	r0, [r7, #8]
 8008eaa:	f007 fbd1 	bl	8010650 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8008eae:	2202      	movs	r2, #2
 8008eb0:	4910      	ldr	r1, [pc, #64]	; (8008ef4 <mqtt_tcp_connect_cb+0x7c>)
 8008eb2:	68b8      	ldr	r0, [r7, #8]
 8008eb4:	f007 fc10 	bl	80106d8 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	490d      	ldr	r1, [pc, #52]	; (8008ef8 <mqtt_tcp_connect_cb+0x80>)
 8008ec2:	f241 3088 	movw	r0, #5000	; 0x1388
 8008ec6:	f00c f909 	bl	80150dc <sys_timeout>
  client->cyclic_tick = 0;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	4619      	mov	r1, r3
 8008edc:	4610      	mov	r0, r2
 8008ede:	f7fe ffdd 	bl	8007e9c <mqtt_output_send>

  return ERR_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	08008cd5 	.word	0x08008cd5
 8008ef0:	08008d91 	.word	0x08008d91
 8008ef4:	08008e4d 	.word	0x08008e4d
 8008ef8:	080085d1 	.word	0x080085d1

08008efc <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	; 0x30
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <mqtt_publish+0x22>
 8008f10:	4b5d      	ldr	r3, [pc, #372]	; (8009088 <mqtt_publish+0x18c>)
 8008f12:	f240 4254 	movw	r2, #1108	; 0x454
 8008f16:	495d      	ldr	r1, [pc, #372]	; (800908c <mqtt_publish+0x190>)
 8008f18:	485d      	ldr	r0, [pc, #372]	; (8009090 <mqtt_publish+0x194>)
 8008f1a:	f00c ffbd 	bl	8015e98 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <mqtt_publish+0x36>
 8008f24:	4b58      	ldr	r3, [pc, #352]	; (8009088 <mqtt_publish+0x18c>)
 8008f26:	f240 4255 	movw	r2, #1109	; 0x455
 8008f2a:	495a      	ldr	r1, [pc, #360]	; (8009094 <mqtt_publish+0x198>)
 8008f2c:	4858      	ldr	r0, [pc, #352]	; (8009090 <mqtt_publish+0x194>)
 8008f2e:	f00c ffb3 	bl	8015e98 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	7a9b      	ldrb	r3, [r3, #10]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <mqtt_publish+0x52>
 8008f3a:	4b53      	ldr	r3, [pc, #332]	; (8009088 <mqtt_publish+0x18c>)
 8008f3c:	f240 4256 	movw	r2, #1110	; 0x456
 8008f40:	4955      	ldr	r1, [pc, #340]	; (8009098 <mqtt_publish+0x19c>)
 8008f42:	4853      	ldr	r0, [pc, #332]	; (8009090 <mqtt_publish+0x194>)
 8008f44:	f00c ffa8 	bl	8015e98 <iprintf>
 8008f48:	f06f 030a 	mvn.w	r3, #10
 8008f4c:	e097      	b.n	800907e <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 8008f4e:	68b8      	ldr	r0, [r7, #8]
 8008f50:	f7f7 f980 	bl	8000254 <strlen>
 8008f54:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d909      	bls.n	8008f74 <mqtt_publish+0x78>
 8008f60:	4b49      	ldr	r3, [pc, #292]	; (8009088 <mqtt_publish+0x18c>)
 8008f62:	f240 4259 	movw	r2, #1113	; 0x459
 8008f66:	494d      	ldr	r1, [pc, #308]	; (800909c <mqtt_publish+0x1a0>)
 8008f68:	4849      	ldr	r0, [pc, #292]	; (8009090 <mqtt_publish+0x194>)
 8008f6a:	f00c ff95 	bl	8015e98 <iprintf>
 8008f6e:	f06f 030f 	mvn.w	r3, #15
 8008f72:	e084      	b.n	800907e <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8008f78:	8b7b      	ldrh	r3, [r7, #26]
 8008f7a:	1c9a      	adds	r2, r3, #2
 8008f7c:	887b      	ldrh	r3, [r7, #2]
 8008f7e:	4413      	add	r3, r2
 8008f80:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8008f82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d008      	beq.n	8008f9c <mqtt_publish+0xa0>
    total_len += 2;
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7fe feef 	bl	8007d74 <msg_generate_packet_id>
 8008f96:	4603      	mov	r3, r0
 8008f98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008f9a:	e001      	b.n	8008fa0 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa6:	d309      	bcc.n	8008fbc <mqtt_publish+0xc0>
 8008fa8:	4b37      	ldr	r3, [pc, #220]	; (8009088 <mqtt_publish+0x18c>)
 8008faa:	f240 4265 	movw	r2, #1125	; 0x465
 8008fae:	493c      	ldr	r1, [pc, #240]	; (80090a0 <mqtt_publish+0x1a4>)
 8008fb0:	4837      	ldr	r0, [pc, #220]	; (8009090 <mqtt_publish+0x194>)
 8008fb2:	f00c ff71 	bl	8015e98 <iprintf>
 8008fb6:	f06f 030f 	mvn.w	r3, #15
 8008fba:	e060      	b.n	800907e <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f103 001c 	add.w	r0, r3, #28
 8008fc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	2104      	movs	r1, #4
 8008fd0:	f7ff f818 	bl	8008004 <mqtt_create_request>
 8008fd4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <mqtt_publish+0xe6>
    return ERR_MEM;
 8008fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe0:	e04d      	b.n	800907e <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	33ec      	adds	r3, #236	; 0xec
 8008fe6:	8b3a      	ldrh	r2, [r7, #24]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff fa5e 	bl	80084ac <mqtt_output_check_space>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	f7ff f896 	bl	8008128 <mqtt_delete_request>
    return ERR_MEM;
 8008ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8009000:	e03d      	b.n	800907e <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009008:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800900c:	8b3b      	ldrh	r3, [r7, #24]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	4613      	mov	r3, r2
 8009018:	2200      	movs	r2, #0
 800901a:	2103      	movs	r1, #3
 800901c:	f7ff f9fd 	bl	800841a <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	33ec      	adds	r3, #236	; 0xec
 8009024:	8b7a      	ldrh	r2, [r7, #26]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff f9cb 	bl	80083c4 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800902e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009032:	2b00      	cmp	r3, #0
 8009034:	d006      	beq.n	8009044 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	33ec      	adds	r3, #236	; 0xec
 800903a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff f98b 	bl	800835a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <mqtt_publish+0x162>
 800904a:	887b      	ldrh	r3, [r7, #2]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	33ec      	adds	r3, #236	; 0xec
 8009054:	887a      	ldrh	r2, [r7, #2]
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff f996 	bl	800838a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3318      	adds	r3, #24
 8009062:	6979      	ldr	r1, [r7, #20]
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff f813 	bl	8008090 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f7fe ff10 	bl	8007e9c <mqtt_output_send>
  return ERR_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3728      	adds	r7, #40	; 0x28
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	080179ac 	.word	0x080179ac
 800908c:	08017cb8 	.word	0x08017cb8
 8009090:	08017a24 	.word	0x08017a24
 8009094:	08017cd8 	.word	0x08017cd8
 8009098:	08017cf4 	.word	0x08017cf4
 800909c:	08017d14 	.word	0x08017d14
 80090a0:	08017d38 	.word	0x08017d38

080090a4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08c      	sub	sp, #48	; 0x30
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <mqtt_sub_unsub+0x24>
 80090ba:	4b5e      	ldr	r3, [pc, #376]	; (8009234 <mqtt_sub_unsub+0x190>)
 80090bc:	f240 429f 	movw	r2, #1183	; 0x49f
 80090c0:	495d      	ldr	r1, [pc, #372]	; (8009238 <mqtt_sub_unsub+0x194>)
 80090c2:	485e      	ldr	r0, [pc, #376]	; (800923c <mqtt_sub_unsub+0x198>)
 80090c4:	f00c fee8 	bl	8015e98 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <mqtt_sub_unsub+0x38>
 80090ce:	4b59      	ldr	r3, [pc, #356]	; (8009234 <mqtt_sub_unsub+0x190>)
 80090d0:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 80090d4:	495a      	ldr	r1, [pc, #360]	; (8009240 <mqtt_sub_unsub+0x19c>)
 80090d6:	4859      	ldr	r0, [pc, #356]	; (800923c <mqtt_sub_unsub+0x198>)
 80090d8:	f00c fede 	bl	8015e98 <iprintf>

  topic_strlen = strlen(topic);
 80090dc:	68b8      	ldr	r0, [r7, #8]
 80090de:	f7f7 f8b9 	bl	8000254 <strlen>
 80090e2:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d909      	bls.n	8009102 <mqtt_sub_unsub+0x5e>
 80090ee:	4b51      	ldr	r3, [pc, #324]	; (8009234 <mqtt_sub_unsub+0x190>)
 80090f0:	f240 42a3 	movw	r2, #1187	; 0x4a3
 80090f4:	4953      	ldr	r1, [pc, #332]	; (8009244 <mqtt_sub_unsub+0x1a0>)
 80090f6:	4851      	ldr	r0, [pc, #324]	; (800923c <mqtt_sub_unsub+0x198>)
 80090f8:	f00c fece 	bl	8015e98 <iprintf>
 80090fc:	f06f 030f 	mvn.w	r3, #15
 8009100:	e093      	b.n	800922a <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8009106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009108:	3304      	adds	r3, #4
 800910a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800910e:	2a00      	cmp	r2, #0
 8009110:	bf14      	ite	ne
 8009112:	2201      	movne	r2, #1
 8009114:	2200      	moveq	r2, #0
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	4413      	add	r3, r2
 800911a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009122:	d309      	bcc.n	8009138 <mqtt_sub_unsub+0x94>
 8009124:	4b43      	ldr	r3, [pc, #268]	; (8009234 <mqtt_sub_unsub+0x190>)
 8009126:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800912a:	4947      	ldr	r1, [pc, #284]	; (8009248 <mqtt_sub_unsub+0x1a4>)
 800912c:	4843      	ldr	r0, [pc, #268]	; (800923c <mqtt_sub_unsub+0x198>)
 800912e:	f00c feb3 	bl	8015e98 <iprintf>
 8009132:	f06f 030f 	mvn.w	r3, #15
 8009136:	e078      	b.n	800922a <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d906      	bls.n	8009150 <mqtt_sub_unsub+0xac>
 8009142:	4b3c      	ldr	r3, [pc, #240]	; (8009234 <mqtt_sub_unsub+0x190>)
 8009144:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8009148:	4940      	ldr	r1, [pc, #256]	; (800924c <mqtt_sub_unsub+0x1a8>)
 800914a:	483c      	ldr	r0, [pc, #240]	; (800923c <mqtt_sub_unsub+0x198>)
 800914c:	f00c fea4 	bl	8015e98 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	7a9b      	ldrb	r3, [r3, #10]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8009158:	f06f 030a 	mvn.w	r3, #10
 800915c:	e065      	b.n	800922a <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f7fe fe08 	bl	8007d74 <msg_generate_packet_id>
 8009164:	4603      	mov	r3, r0
 8009166:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f103 001c 	add.w	r0, r3, #28
 800916e:	8b3a      	ldrh	r2, [r7, #24]
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2104      	movs	r1, #4
 8009178:	f7fe ff44 	bl	8008004 <mqtt_create_request>
 800917c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8009184:	f04f 33ff 	mov.w	r3, #4294967295
 8009188:	e04f      	b.n	800922a <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	33ec      	adds	r3, #236	; 0xec
 800918e:	8b7a      	ldrh	r2, [r7, #26]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff f98a 	bl	80084ac <mqtt_output_check_space>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d105      	bne.n	80091aa <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 800919e:	6978      	ldr	r0, [r7, #20]
 80091a0:	f7fe ffc2 	bl	8008128 <mqtt_delete_request>
    return ERR_MEM;
 80091a4:	f04f 33ff 	mov.w	r3, #4294967295
 80091a8:	e03f      	b.n	800922a <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80091b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <mqtt_sub_unsub+0x118>
 80091b8:	2108      	movs	r1, #8
 80091ba:	e000      	b.n	80091be <mqtt_sub_unsub+0x11a>
 80091bc:	210a      	movs	r1, #10
 80091be:	8b7b      	ldrh	r3, [r7, #26]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	2300      	movs	r3, #0
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	2301      	movs	r3, #1
 80091c8:	2200      	movs	r2, #0
 80091ca:	f7ff f926 	bl	800841a <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	33ec      	adds	r3, #236	; 0xec
 80091d2:	8b3a      	ldrh	r2, [r7, #24]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff f8bf 	bl	800835a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	33ec      	adds	r3, #236	; 0xec
 80091e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff f8ed 	bl	80083c4 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 80091ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	bf28      	it	cs
 80091fe:	2302      	movcs	r3, #2
 8009200:	b2db      	uxtb	r3, r3
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7ff f899 	bl	800833c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3318      	adds	r3, #24
 800920e:	6979      	ldr	r1, [r7, #20]
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe ff3d 	bl	8008090 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fe fe3a 	bl	8007e9c <mqtt_output_send>
  return ERR_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3728      	adds	r7, #40	; 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	080179ac 	.word	0x080179ac
 8009238:	08017d5c 	.word	0x08017d5c
 800923c:	08017a24 	.word	0x08017a24
 8009240:	08017d7c 	.word	0x08017d7c
 8009244:	08017d9c 	.word	0x08017d9c
 8009248:	08017dc4 	.word	0x08017dc4
 800924c:	08017dec 	.word	0x08017dec

08009250 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d106      	bne.n	8009272 <mqtt_set_inpub_callback+0x22>
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <mqtt_set_inpub_callback+0x3c>)
 8009266:	f240 42da 	movw	r2, #1242	; 0x4da
 800926a:	4909      	ldr	r1, [pc, #36]	; (8009290 <mqtt_set_inpub_callback+0x40>)
 800926c:	4809      	ldr	r0, [pc, #36]	; (8009294 <mqtt_set_inpub_callback+0x44>)
 800926e:	f00c fe13 	bl	8015e98 <iprintf>
  client->data_cb = data_cb;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	080179ac 	.word	0x080179ac
 8009290:	08017e04 	.word	0x08017e04
 8009294:	08017a24 	.word	0x08017a24

08009298 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800929c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80092a0:	2001      	movs	r0, #1
 80092a2:	f004 f9e5 	bl	800d670 <mem_calloc>
 80092a6:	4603      	mov	r3, r0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	bd80      	pop	{r7, pc}

080092ac <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08c      	sub	sp, #48	; 0x30
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4613      	mov	r3, r2
 80092ba:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80092bc:	230a      	movs	r3, #10
 80092be:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092c6:	2300      	movs	r3, #0
 80092c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092cc:	2300      	movs	r3, #0
 80092ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	83fb      	strh	r3, [r7, #30]
 80092d6:	2300      	movs	r3, #0
 80092d8:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <mqtt_client_connect+0x42>
 80092e0:	4bac      	ldr	r3, [pc, #688]	; (8009594 <mqtt_client_connect+0x2e8>)
 80092e2:	f240 520f 	movw	r2, #1295	; 0x50f
 80092e6:	49ac      	ldr	r1, [pc, #688]	; (8009598 <mqtt_client_connect+0x2ec>)
 80092e8:	48ac      	ldr	r0, [pc, #688]	; (800959c <mqtt_client_connect+0x2f0>)
 80092ea:	f00c fdd5 	bl	8015e98 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d106      	bne.n	8009302 <mqtt_client_connect+0x56>
 80092f4:	4ba7      	ldr	r3, [pc, #668]	; (8009594 <mqtt_client_connect+0x2e8>)
 80092f6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80092fa:	49a9      	ldr	r1, [pc, #676]	; (80095a0 <mqtt_client_connect+0x2f4>)
 80092fc:	48a7      	ldr	r0, [pc, #668]	; (800959c <mqtt_client_connect+0x2f0>)
 80092fe:	f00c fdcb 	bl	8015e98 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8009302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009304:	2b00      	cmp	r3, #0
 8009306:	d106      	bne.n	8009316 <mqtt_client_connect+0x6a>
 8009308:	4ba2      	ldr	r3, [pc, #648]	; (8009594 <mqtt_client_connect+0x2e8>)
 800930a:	f240 5211 	movw	r2, #1297	; 0x511
 800930e:	49a5      	ldr	r1, [pc, #660]	; (80095a4 <mqtt_client_connect+0x2f8>)
 8009310:	48a2      	ldr	r0, [pc, #648]	; (800959c <mqtt_client_connect+0x2f0>)
 8009312:	f00c fdc1 	bl	8015e98 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <mqtt_client_connect+0x80>
 800931e:	4b9d      	ldr	r3, [pc, #628]	; (8009594 <mqtt_client_connect+0x2e8>)
 8009320:	f240 5212 	movw	r2, #1298	; 0x512
 8009324:	49a0      	ldr	r1, [pc, #640]	; (80095a8 <mqtt_client_connect+0x2fc>)
 8009326:	489d      	ldr	r0, [pc, #628]	; (800959c <mqtt_client_connect+0x2f0>)
 8009328:	f00c fdb6 	bl	8015e98 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	7a9b      	ldrb	r3, [r3, #10]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8009334:	f06f 0309 	mvn.w	r3, #9
 8009338:	e221      	b.n	800977e <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800933a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800933e:	2100      	movs	r1, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f00c fda1 	bl	8015e88 <memset>
  client->connect_arg = arg;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934a:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8009352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009354:	899a      	ldrh	r2, [r3, #12]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	331c      	adds	r3, #28
 800935e:	2104      	movs	r1, #4
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe ffbf 	bl	80082e4 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8009366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d073      	beq.n	8009456 <mqtt_client_connect+0x1aa>
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d06f      	beq.n	8009456 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8009376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800937a:	f043 0304 	orr.w	r3, r3, #4
 800937e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	7e1b      	ldrb	r3, [r3, #24]
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	b25b      	sxtb	r3, r3
 800938a:	f003 0318 	and.w	r3, r3, #24
 800938e:	b25a      	sxtb	r2, r3
 8009390:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009394:	4313      	orrs	r3, r2
 8009396:	b25b      	sxtb	r3, r3
 8009398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	7e5b      	ldrb	r3, [r3, #25]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 80093a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093a8:	f043 0320 	orr.w	r3, r3, #32
 80093ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7f6 ff4d 	bl	8000254 <strlen>
 80093ba:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	2bff      	cmp	r3, #255	; 0xff
 80093c0:	d909      	bls.n	80093d6 <mqtt_client_connect+0x12a>
 80093c2:	4b74      	ldr	r3, [pc, #464]	; (8009594 <mqtt_client_connect+0x2e8>)
 80093c4:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 80093c8:	4978      	ldr	r1, [pc, #480]	; (80095ac <mqtt_client_connect+0x300>)
 80093ca:	4874      	ldr	r0, [pc, #464]	; (800959c <mqtt_client_connect+0x2f0>)
 80093cc:	f00c fd64 	bl	8015e98 <iprintf>
 80093d0:	f06f 0305 	mvn.w	r3, #5
 80093d4:	e1d3      	b.n	800977e <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d109      	bne.n	80093f0 <mqtt_client_connect+0x144>
 80093dc:	4b6d      	ldr	r3, [pc, #436]	; (8009594 <mqtt_client_connect+0x2e8>)
 80093de:	f240 5229 	movw	r2, #1321	; 0x529
 80093e2:	4973      	ldr	r1, [pc, #460]	; (80095b0 <mqtt_client_connect+0x304>)
 80093e4:	486d      	ldr	r0, [pc, #436]	; (800959c <mqtt_client_connect+0x2f0>)
 80093e6:	f00c fd57 	bl	8015e98 <iprintf>
 80093ea:	f06f 0305 	mvn.w	r3, #5
 80093ee:	e1c6      	b.n	800977e <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7f6 ff2a 	bl	8000254 <strlen>
 8009400:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2bff      	cmp	r3, #255	; 0xff
 8009406:	d909      	bls.n	800941c <mqtt_client_connect+0x170>
 8009408:	4b62      	ldr	r3, [pc, #392]	; (8009594 <mqtt_client_connect+0x2e8>)
 800940a:	f240 522c 	movw	r2, #1324	; 0x52c
 800940e:	4969      	ldr	r1, [pc, #420]	; (80095b4 <mqtt_client_connect+0x308>)
 8009410:	4862      	ldr	r0, [pc, #392]	; (800959c <mqtt_client_connect+0x2f0>)
 8009412:	f00c fd41 	bl	8015e98 <iprintf>
 8009416:	f06f 0305 	mvn.w	r3, #5
 800941a:	e1b0      	b.n	800977e <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8009422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009424:	1c9a      	adds	r2, r3, #2
 8009426:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800942a:	4413      	add	r3, r2
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009432:	4413      	add	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800943c:	d309      	bcc.n	8009452 <mqtt_client_connect+0x1a6>
 800943e:	4b55      	ldr	r3, [pc, #340]	; (8009594 <mqtt_client_connect+0x2e8>)
 8009440:	f240 522f 	movw	r2, #1327	; 0x52f
 8009444:	495c      	ldr	r1, [pc, #368]	; (80095b8 <mqtt_client_connect+0x30c>)
 8009446:	4855      	ldr	r0, [pc, #340]	; (800959c <mqtt_client_connect+0x2f0>)
 8009448:	f00c fd26 	bl	8015e98 <iprintf>
 800944c:	f06f 0305 	mvn.w	r3, #5
 8009450:	e195      	b.n	800977e <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d03d      	beq.n	80094da <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800945e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800946a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	f7f6 fef0 	bl	8000254 <strlen>
 8009474:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947c:	d309      	bcc.n	8009492 <mqtt_client_connect+0x1e6>
 800947e:	4b45      	ldr	r3, [pc, #276]	; (8009594 <mqtt_client_connect+0x2e8>)
 8009480:	f240 5235 	movw	r2, #1333	; 0x535
 8009484:	494d      	ldr	r1, [pc, #308]	; (80095bc <mqtt_client_connect+0x310>)
 8009486:	4845      	ldr	r0, [pc, #276]	; (800959c <mqtt_client_connect+0x2f0>)
 8009488:	f00c fd06 	bl	8015e98 <iprintf>
 800948c:	f06f 0305 	mvn.w	r3, #5
 8009490:	e175      	b.n	800977e <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <mqtt_client_connect+0x200>
 8009498:	4b3e      	ldr	r3, [pc, #248]	; (8009594 <mqtt_client_connect+0x2e8>)
 800949a:	f240 5236 	movw	r2, #1334	; 0x536
 800949e:	4948      	ldr	r1, [pc, #288]	; (80095c0 <mqtt_client_connect+0x314>)
 80094a0:	483e      	ldr	r0, [pc, #248]	; (800959c <mqtt_client_connect+0x2f0>)
 80094a2:	f00c fcf9 	bl	8015e98 <iprintf>
 80094a6:	f06f 0305 	mvn.w	r3, #5
 80094aa:	e168      	b.n	800977e <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 80094b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094b2:	1c9a      	adds	r2, r3, #2
 80094b4:	8bfb      	ldrh	r3, [r7, #30]
 80094b6:	4413      	add	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c0:	d309      	bcc.n	80094d6 <mqtt_client_connect+0x22a>
 80094c2:	4b34      	ldr	r3, [pc, #208]	; (8009594 <mqtt_client_connect+0x2e8>)
 80094c4:	f240 5239 	movw	r2, #1337	; 0x539
 80094c8:	493b      	ldr	r1, [pc, #236]	; (80095b8 <mqtt_client_connect+0x30c>)
 80094ca:	4834      	ldr	r0, [pc, #208]	; (800959c <mqtt_client_connect+0x2f0>)
 80094cc:	f00c fce4 	bl	8015e98 <iprintf>
 80094d0:	f06f 0305 	mvn.w	r3, #5
 80094d4:	e153      	b.n	800977e <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d03d      	beq.n	800955e <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80094e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f6 feae 	bl	8000254 <strlen>
 80094f8:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009500:	d309      	bcc.n	8009516 <mqtt_client_connect+0x26a>
 8009502:	4b24      	ldr	r3, [pc, #144]	; (8009594 <mqtt_client_connect+0x2e8>)
 8009504:	f240 523f 	movw	r2, #1343	; 0x53f
 8009508:	492e      	ldr	r1, [pc, #184]	; (80095c4 <mqtt_client_connect+0x318>)
 800950a:	4824      	ldr	r0, [pc, #144]	; (800959c <mqtt_client_connect+0x2f0>)
 800950c:	f00c fcc4 	bl	8015e98 <iprintf>
 8009510:	f06f 0305 	mvn.w	r3, #5
 8009514:	e133      	b.n	800977e <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d109      	bne.n	8009530 <mqtt_client_connect+0x284>
 800951c:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <mqtt_client_connect+0x2e8>)
 800951e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8009522:	4929      	ldr	r1, [pc, #164]	; (80095c8 <mqtt_client_connect+0x31c>)
 8009524:	481d      	ldr	r0, [pc, #116]	; (800959c <mqtt_client_connect+0x2f0>)
 8009526:	f00c fcb7 	bl	8015e98 <iprintf>
 800952a:	f06f 0305 	mvn.w	r3, #5
 800952e:	e126      	b.n	800977e <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8009534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	8bbb      	ldrh	r3, [r7, #28]
 800953a:	4413      	add	r3, r2
 800953c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009544:	d309      	bcc.n	800955a <mqtt_client_connect+0x2ae>
 8009546:	4b13      	ldr	r3, [pc, #76]	; (8009594 <mqtt_client_connect+0x2e8>)
 8009548:	f240 5243 	movw	r2, #1347	; 0x543
 800954c:	491a      	ldr	r1, [pc, #104]	; (80095b8 <mqtt_client_connect+0x30c>)
 800954e:	4813      	ldr	r0, [pc, #76]	; (800959c <mqtt_client_connect+0x2f0>)
 8009550:	f00c fca2 	bl	8015e98 <iprintf>
 8009554:	f06f 0305 	mvn.w	r3, #5
 8009558:	e111      	b.n	800977e <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800955e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009562:	f043 0302 	orr.w	r3, r3, #2
 8009566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800956a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f7f6 fe70 	bl	8000254 <strlen>
 8009574:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957c:	d328      	bcc.n	80095d0 <mqtt_client_connect+0x324>
 800957e:	4b05      	ldr	r3, [pc, #20]	; (8009594 <mqtt_client_connect+0x2e8>)
 8009580:	f240 524b 	movw	r2, #1355	; 0x54b
 8009584:	4911      	ldr	r1, [pc, #68]	; (80095cc <mqtt_client_connect+0x320>)
 8009586:	4805      	ldr	r0, [pc, #20]	; (800959c <mqtt_client_connect+0x2f0>)
 8009588:	f00c fc86 	bl	8015e98 <iprintf>
 800958c:	f06f 0305 	mvn.w	r3, #5
 8009590:	e0f5      	b.n	800977e <mqtt_client_connect+0x4d2>
 8009592:	bf00      	nop
 8009594:	080179ac 	.word	0x080179ac
 8009598:	08017e2c 	.word	0x08017e2c
 800959c:	08017a24 	.word	0x08017a24
 80095a0:	08017e50 	.word	0x08017e50
 80095a4:	08017e78 	.word	0x08017e78
 80095a8:	08017ea4 	.word	0x08017ea4
 80095ac:	08017ed8 	.word	0x08017ed8
 80095b0:	08017f18 	.word	0x08017f18
 80095b4:	08017f58 	.word	0x08017f58
 80095b8:	08017f94 	.word	0x08017f94
 80095bc:	08017fc4 	.word	0x08017fc4
 80095c0:	08018004 	.word	0x08018004
 80095c4:	08018048 	.word	0x08018048
 80095c8:	08018088 	.word	0x08018088
 80095cc:	080180cc 	.word	0x080180cc
  client_id_length = (u16_t)len;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 80095d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095d6:	1c9a      	adds	r2, r3, #2
 80095d8:	8afb      	ldrh	r3, [r7, #22]
 80095da:	4413      	add	r3, r2
 80095dc:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e4:	d309      	bcc.n	80095fa <mqtt_client_connect+0x34e>
 80095e6:	4b68      	ldr	r3, [pc, #416]	; (8009788 <mqtt_client_connect+0x4dc>)
 80095e8:	f240 524e 	movw	r2, #1358	; 0x54e
 80095ec:	4967      	ldr	r1, [pc, #412]	; (800978c <mqtt_client_connect+0x4e0>)
 80095ee:	4868      	ldr	r0, [pc, #416]	; (8009790 <mqtt_client_connect+0x4e4>)
 80095f0:	f00c fc52 	bl	8015e98 <iprintf>
 80095f4:	f06f 0305 	mvn.w	r3, #5
 80095f8:	e0c1      	b.n	800977e <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	33ec      	adds	r3, #236	; 0xec
 8009602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe ff50 	bl	80084ac <mqtt_output_check_space>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
 8009616:	e0b2      	b.n	800977e <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8009618:	2000      	movs	r0, #0
 800961a:	f006 ffd7 	bl	80105cc <tcp_new_ip_type>
 800961e:	4602      	mov	r2, r0
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <mqtt_client_connect+0x386>
    return ERR_MEM;
 800962c:	f04f 33ff 	mov.w	r3, #4294967295
 8009630:	e0a5      	b.n	800977e <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	4618      	mov	r0, r3
 800963a:	f006 ffd5 	bl	80105e8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	4953      	ldr	r1, [pc, #332]	; (8009794 <mqtt_client_connect+0x4e8>)
 8009646:	4618      	mov	r0, r3
 8009648:	f005 fef8 	bl	800f43c <tcp_bind>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8009652:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009656:	2b00      	cmp	r3, #0
 8009658:	f040 8084 	bne.w	8009764 <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68d8      	ldr	r0, [r3, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	4b4d      	ldr	r3, [pc, #308]	; (8009798 <mqtt_client_connect+0x4ec>)
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	f006 f873 	bl	800f750 <tcp_connect>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8009670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009674:	2b00      	cmp	r3, #0
 8009676:	d177      	bne.n	8009768 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	4947      	ldr	r1, [pc, #284]	; (800979c <mqtt_client_connect+0x4f0>)
 800967e:	4618      	mov	r0, r3
 8009680:	f007 f808 	bl	8010694 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2201      	movs	r2, #1
 8009688:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	2300      	movs	r3, #0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2300      	movs	r3, #0
 800969a:	2200      	movs	r2, #0
 800969c:	2101      	movs	r1, #1
 800969e:	f7fe febc 	bl	800841a <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	33ec      	adds	r3, #236	; 0xec
 80096a6:	2204      	movs	r2, #4
 80096a8:	493d      	ldr	r1, [pc, #244]	; (80097a0 <mqtt_client_connect+0x4f4>)
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fe8a 	bl	80083c4 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	33ec      	adds	r3, #236	; 0xec
 80096b4:	2104      	movs	r1, #4
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fe40 	bl	800833c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	33ec      	adds	r3, #236	; 0xec
 80096c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fe38 	bl	800833c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80096d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d4:	899b      	ldrh	r3, [r3, #12]
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f7fe fe3e 	bl	800835a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	8afa      	ldrh	r2, [r7, #22]
 80096ea:	4619      	mov	r1, r3
 80096ec:	f7fe fe6a 	bl	80083c4 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 80096f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d015      	beq.n	8009728 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800970a:	b292      	uxth	r2, r2
 800970c:	4619      	mov	r1, r3
 800970e:	f7fe fe59 	bl	80083c4 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009720:	b292      	uxth	r2, r2
 8009722:	4619      	mov	r1, r3
 8009724:	f7fe fe4e 	bl	80083c4 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8009728:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800972c:	2b00      	cmp	r3, #0
 800972e:	da08      	bge.n	8009742 <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	8bfa      	ldrh	r2, [r7, #30]
 800973c:	4619      	mov	r1, r3
 800973e:	f7fe fe41 	bl	80083c4 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8009742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974a:	2b00      	cmp	r3, #0
 800974c:	d008      	beq.n	8009760 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	8bba      	ldrh	r2, [r7, #28]
 800975a:	4619      	mov	r1, r3
 800975c:	f7fe fe32 	bl	80083c4 <mqtt_output_append_string>
  }
  return ERR_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	e00c      	b.n	800977e <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <mqtt_client_connect+0x4be>
    goto tcp_fail;
 8009768:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	4618      	mov	r0, r3
 8009770:	f005 fe58 	bl	800f424 <tcp_abort>
  client->conn = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	60da      	str	r2, [r3, #12]
  return err;
 800977a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800977e:	4618      	mov	r0, r3
 8009780:	3728      	adds	r7, #40	; 0x28
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	080179ac 	.word	0x080179ac
 800978c:	08017f94 	.word	0x08017f94
 8009790:	08017a24 	.word	0x08017a24
 8009794:	0801ac1c 	.word	0x0801ac1c
 8009798:	08008e79 	.word	0x08008e79
 800979c:	08008e05 	.word	0x08008e05
 80097a0:	08018108 	.word	0x08018108

080097a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80097ae:	88fb      	ldrh	r3, [r7, #6]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	b21a      	sxth	r2, r3
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	b21b      	sxth	r3, r3
 80097bc:	4313      	orrs	r3, r2
 80097be:	b21b      	sxth	r3, r3
 80097c0:	b29b      	uxth	r3, r3
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	061a      	lsls	r2, r3, #24
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097ec:	431a      	orrs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	0e1b      	lsrs	r3, r3, #24
 80097f2:	4313      	orrs	r3, r2
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	60fa      	str	r2, [r7, #12]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	60ba      	str	r2, [r7, #8]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 8009820:	7dfa      	ldrb	r2, [r7, #23]
 8009822:	7dbb      	ldrb	r3, [r7, #22]
 8009824:	429a      	cmp	r2, r3
 8009826:	d016      	beq.n	8009856 <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	f043 0320 	orr.w	r3, r3, #32
 800982e:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8009830:	7d7b      	ldrb	r3, [r7, #21]
 8009832:	2b60      	cmp	r3, #96	; 0x60
 8009834:	d90c      	bls.n	8009850 <lwip_strnicmp+0x50>
 8009836:	7d7b      	ldrb	r3, [r7, #21]
 8009838:	2b7a      	cmp	r3, #122	; 0x7a
 800983a:	d809      	bhi.n	8009850 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800983c:	7dbb      	ldrb	r3, [r7, #22]
 800983e:	f043 0320 	orr.w	r3, r3, #32
 8009842:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 8009844:	7d7a      	ldrb	r2, [r7, #21]
 8009846:	7d3b      	ldrb	r3, [r7, #20]
 8009848:	429a      	cmp	r2, r3
 800984a:	d003      	beq.n	8009854 <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800984c:	2301      	movs	r3, #1
 800984e:	e00c      	b.n	800986a <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8009850:	2301      	movs	r3, #1
 8009852:	e00a      	b.n	800986a <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8009854:	bf00      	nop
      }
    }
    len--;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3b01      	subs	r3, #1
 800985a:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <lwip_strnicmp+0x68>
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1d1      	bne.n	800980c <lwip_strnicmp+0xc>
  return 0;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8009876:	b480      	push	{r7}
 8009878:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800987a:	bf00      	nop
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d80f      	bhi.n	80098b6 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	4909      	ldr	r1, [pc, #36]	; (80098c4 <dns_setserver+0x40>)
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	6812      	ldr	r2, [r2, #0]
 80098a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 80098a8:	e005      	b.n	80098b6 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	4905      	ldr	r1, [pc, #20]	; (80098c4 <dns_setserver+0x40>)
 80098ae:	4a06      	ldr	r2, [pc, #24]	; (80098c8 <dns_setserver+0x44>)
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000714 	.word	0x20000714
 80098c8:	0801ac1c 	.word	0x0801ac1c

080098cc <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80098d0:	f000 fc56 	bl	800a180 <dns_check_entries>
}
 80098d4:	bf00      	nop
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	e02e      	b.n	8009946 <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80098e8:	7bfa      	ldrb	r2, [r7, #15]
 80098ea:	491b      	ldr	r1, [pc, #108]	; (8009958 <dns_lookup+0x80>)
 80098ec:	4613      	mov	r3, r2
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	4413      	add	r3, r2
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	440b      	add	r3, r1
 80098f6:	330a      	adds	r3, #10
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d120      	bne.n	8009940 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80098fe:	7bfa      	ldrb	r2, [r7, #15]
 8009900:	4613      	mov	r3, r2
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	4413      	add	r3, r2
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	3310      	adds	r3, #16
 800990a:	4a13      	ldr	r2, [pc, #76]	; (8009958 <dns_lookup+0x80>)
 800990c:	4413      	add	r3, r2
 800990e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff ff73 	bl	8009800 <lwip_strnicmp>
 800991a:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10f      	bne.n	8009940 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8009926:	7bfa      	ldrb	r2, [r7, #15]
 8009928:	490b      	ldr	r1, [pc, #44]	; (8009958 <dns_lookup+0x80>)
 800992a:	4613      	mov	r3, r2
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	4413      	add	r3, r2
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	440b      	add	r3, r1
 8009934:	3304      	adds	r3, #4
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	e007      	b.n	8009950 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	3301      	adds	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d9cd      	bls.n	80098e8 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800994c:	f06f 030f 	mvn.w	r3, #15
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	200002a4 	.word	0x200002a4

0800995c <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800995c:	b590      	push	{r4, r7, lr}
 800995e:	b089      	sub	sp, #36	; 0x24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800996a:	88fb      	ldrh	r3, [r7, #6]
 800996c:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800996e:	8b7b      	ldrh	r3, [r7, #26]
 8009970:	4619      	mov	r1, r3
 8009972:	68b8      	ldr	r0, [r7, #8]
 8009974:	f005 f993 	bl	800ec9e <pbuf_try_get_at>
 8009978:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	2b00      	cmp	r3, #0
 800997e:	db04      	blt.n	800998a <dns_compare_name+0x2e>
 8009980:	8b7b      	ldrh	r3, [r7, #26]
 8009982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009986:	4293      	cmp	r3, r2
 8009988:	d102      	bne.n	8009990 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800998a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800998e:	e070      	b.n	8009a72 <dns_compare_name+0x116>
    }
    response_offset++;
 8009990:	8b7b      	ldrh	r3, [r7, #26]
 8009992:	3301      	adds	r3, #1
 8009994:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800999c:	2bc0      	cmp	r3, #192	; 0xc0
 800999e:	d148      	bne.n	8009a32 <dns_compare_name+0xd6>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 80099a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099a4:	e065      	b.n	8009a72 <dns_compare_name+0x116>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 80099a6:	8b7b      	ldrh	r3, [r7, #26]
 80099a8:	4619      	mov	r1, r3
 80099aa:	68b8      	ldr	r0, [r7, #8]
 80099ac:	f005 f977 	bl	800ec9e <pbuf_try_get_at>
 80099b0:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da02      	bge.n	80099be <dns_compare_name+0x62>
          return 0xFFFF;
 80099b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099bc:	e059      	b.n	8009a72 <dns_compare_name+0x116>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	74fb      	strb	r3, [r7, #19]
 80099c4:	f00c fa0c 	bl	8015de0 <__locale_ctype_ptr>
 80099c8:	4602      	mov	r2, r0
 80099ca:	7cfb      	ldrb	r3, [r7, #19]
 80099cc:	3301      	adds	r3, #1
 80099ce:	4413      	add	r3, r2
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d103      	bne.n	80099e2 <dns_compare_name+0x86>
 80099da:	7cfb      	ldrb	r3, [r7, #19]
 80099dc:	f103 0420 	add.w	r4, r3, #32
 80099e0:	e000      	b.n	80099e4 <dns_compare_name+0x88>
 80099e2:	7cfc      	ldrb	r4, [r7, #19]
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	74bb      	strb	r3, [r7, #18]
 80099e8:	f00c f9fa 	bl	8015de0 <__locale_ctype_ptr>
 80099ec:	4602      	mov	r2, r0
 80099ee:	7cbb      	ldrb	r3, [r7, #18]
 80099f0:	3301      	adds	r3, #1
 80099f2:	4413      	add	r3, r2
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d102      	bne.n	8009a04 <dns_compare_name+0xa8>
 80099fe:	7cbb      	ldrb	r3, [r7, #18]
 8009a00:	3320      	adds	r3, #32
 8009a02:	e000      	b.n	8009a06 <dns_compare_name+0xaa>
 8009a04:	7cbb      	ldrb	r3, [r7, #18]
 8009a06:	429c      	cmp	r4, r3
 8009a08:	d002      	beq.n	8009a10 <dns_compare_name+0xb4>
          return 0xFFFF;
 8009a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a0e:	e030      	b.n	8009a72 <dns_compare_name+0x116>
        }
        if (response_offset == 0xFFFF) {
 8009a10:	8b7b      	ldrh	r3, [r7, #26]
 8009a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d102      	bne.n	8009a20 <dns_compare_name+0xc4>
          /* would overflow */
          return 0xFFFF;
 8009a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a1e:	e028      	b.n	8009a72 <dns_compare_name+0x116>
        }
        response_offset++;
 8009a20:	8b7b      	ldrh	r3, [r7, #26]
 8009a22:	3301      	adds	r3, #1
 8009a24:	837b      	strh	r3, [r7, #26]
        ++query;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	60fb      	str	r3, [r7, #12]
        --n;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dcb6      	bgt.n	80099a6 <dns_compare_name+0x4a>
      }
      ++query;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 8009a3e:	8b7b      	ldrh	r3, [r7, #26]
 8009a40:	4619      	mov	r1, r3
 8009a42:	68b8      	ldr	r0, [r7, #8]
 8009a44:	f005 f92b 	bl	800ec9e <pbuf_try_get_at>
 8009a48:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da02      	bge.n	8009a56 <dns_compare_name+0xfa>
      return 0xFFFF;
 8009a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a54:	e00d      	b.n	8009a72 <dns_compare_name+0x116>
    }
  } while (n != 0);
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d188      	bne.n	800996e <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 8009a5c:	8b7b      	ldrh	r3, [r7, #26]
 8009a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d102      	bne.n	8009a6c <dns_compare_name+0x110>
    /* would overflow */
    return 0xFFFF;
 8009a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a6a:	e002      	b.n	8009a72 <dns_compare_name+0x116>
  }
  return (u16_t)(response_offset + 1);
 8009a6c:	8b7b      	ldrh	r3, [r7, #26]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	b29b      	uxth	r3, r3
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3724      	adds	r7, #36	; 0x24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd90      	pop	{r4, r7, pc}

08009a7a <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 8009a86:	887b      	ldrh	r3, [r7, #2]
 8009a88:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 8009a8a:	89fb      	ldrh	r3, [r7, #14]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	81fa      	strh	r2, [r7, #14]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f005 f903 	bl	800ec9e <pbuf_try_get_at>
 8009a98:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	db02      	blt.n	8009aa6 <dns_skip_name+0x2c>
 8009aa0:	89fb      	ldrh	r3, [r7, #14]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <dns_skip_name+0x32>
      return 0xFFFF;
 8009aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aaa:	e02f      	b.n	8009b0c <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8009ab4:	d01e      	beq.n	8009af4 <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 8009ab6:	89fa      	ldrh	r2, [r7, #14]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4413      	add	r3, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	8912      	ldrh	r2, [r2, #8]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	db02      	blt.n	8009aca <dns_skip_name+0x50>
        return 0xFFFF;
 8009ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ac8:	e020      	b.n	8009b0c <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	89fb      	ldrh	r3, [r7, #14]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 8009ad4:	89fb      	ldrh	r3, [r7, #14]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f005 f8e0 	bl	800ec9e <pbuf_try_get_at>
 8009ade:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da02      	bge.n	8009aec <dns_skip_name+0x72>
      return 0xFFFF;
 8009ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aea:	e00f      	b.n	8009b0c <dns_skip_name+0x92>
    }
  } while (n != 0);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1cb      	bne.n	8009a8a <dns_skip_name+0x10>
 8009af2:	e000      	b.n	8009af6 <dns_skip_name+0x7c>
      break;
 8009af4:	bf00      	nop

  if (offset == 0xFFFF) {
 8009af6:	89fb      	ldrh	r3, [r7, #14]
 8009af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d102      	bne.n	8009b06 <dns_skip_name+0x8c>
    return 0xFFFF;
 8009b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b04:	e002      	b.n	8009b0c <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 8009b06:	89fb      	ldrh	r3, [r7, #14]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	b29b      	uxth	r3, r3
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b090      	sub	sp, #64	; 0x40
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8009b1e:	79fa      	ldrb	r2, [r7, #7]
 8009b20:	4613      	mov	r3, r2
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	4413      	add	r3, r2
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	4a6c      	ldr	r2, [pc, #432]	; (8009cdc <dns_send+0x1c8>)
 8009b2a:	4413      	add	r3, r2
 8009b2c:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	7adb      	ldrb	r3, [r3, #11]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d906      	bls.n	8009b44 <dns_send+0x30>
 8009b36:	4b6a      	ldr	r3, [pc, #424]	; (8009ce0 <dns_send+0x1cc>)
 8009b38:	f240 22fa 	movw	r2, #762	; 0x2fa
 8009b3c:	4969      	ldr	r1, [pc, #420]	; (8009ce4 <dns_send+0x1d0>)
 8009b3e:	486a      	ldr	r0, [pc, #424]	; (8009ce8 <dns_send+0x1d4>)
 8009b40:	f00c f9aa 	bl	8015e98 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	7adb      	ldrb	r3, [r3, #11]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b68      	ldr	r3, [pc, #416]	; (8009cec <dns_send+0x1d8>)
 8009b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d109      	bne.n	8009b68 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	2100      	movs	r1, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 f959 	bl	8009e10 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	2200      	movs	r2, #0
 8009b62:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e0b4      	b.n	8009cd2 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	3310      	adds	r3, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7f6 fb71 	bl	8000254 <strlen>
 8009b72:	4603      	mov	r3, r0
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3312      	adds	r3, #18
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b7e:	4619      	mov	r1, r3
 8009b80:	2036      	movs	r0, #54	; 0x36
 8009b82:	f004 f98b 	bl	800de9c <pbuf_alloc>
 8009b86:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 8095 	beq.w	8009cba <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8009b90:	f107 0310 	add.w	r3, r7, #16
 8009b94:	220c      	movs	r2, #12
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f00c f975 	bl	8015e88 <memset>
    hdr.id = lwip_htons(entry->txid);
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	891b      	ldrh	r3, [r3, #8]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff fdfe 	bl	80097a4 <lwip_htons>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8009bac:	2301      	movs	r3, #1
 8009bae:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8009bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb4:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8009bb6:	f107 0310 	add.w	r3, r7, #16
 8009bba:	220c      	movs	r2, #12
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bc0:	f004 ff28 	bl	800ea14 <pbuf_take>
    hostname = entry->name;
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	3310      	adds	r3, #16
 8009bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8009bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8009bde:	2300      	movs	r3, #0
 8009be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009be4:	e007      	b.n	8009bf6 <dns_send+0xe2>
        ++n;
 8009be6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bea:	3301      	adds	r3, #1
 8009bec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8009bfc:	d003      	beq.n	8009c06 <dns_send+0xf2>
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1ef      	bne.n	8009be6 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8009c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8009c0e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8009c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c14:	4413      	add	r3, r2
 8009c16:	3301      	adds	r3, #1
 8009c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1c:	da53      	bge.n	8009cc6 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8009c1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009c22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c24:	4619      	mov	r1, r3
 8009c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c28:	f005 f85b 	bl	800ece2 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8009c2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c2e:	3301      	adds	r3, #1
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c38:	f004 ff7e 	bl	800eb38 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8009c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c44:	4413      	add	r3, r2
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	3301      	adds	r3, #1
 8009c4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1bf      	bne.n	8009bd4 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8009c54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c56:	2200      	movs	r2, #0
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c5c:	f005 f841 	bl	800ece2 <pbuf_put_at>
    query_idx++;
 8009c60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c62:	3301      	adds	r3, #1
 8009c64:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8009c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c6a:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8009c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c70:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8009c72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c74:	f107 010c 	add.w	r1, r7, #12
 8009c78:	2204      	movs	r2, #4
 8009c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c7c:	f004 ff5c 	bl	800eb38 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	7bdb      	ldrb	r3, [r3, #15]
 8009c84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8009c88:	2335      	movs	r3, #53	; 0x35
 8009c8a:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	7adb      	ldrb	r3, [r3, #11]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4a16      	ldr	r2, [pc, #88]	; (8009cec <dns_send+0x1d8>)
 8009c94:	4413      	add	r3, r2
 8009c96:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8009c98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009c9c:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <dns_send+0x1dc>)
 8009c9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ca4:	69fa      	ldr	r2, [r7, #28]
 8009ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ca8:	f00b fc78 	bl	801559c <udp_sendto>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8009cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cb4:	f004 fc06 	bl	800e4c4 <pbuf_free>
 8009cb8:	e002      	b.n	8009cc0 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8009cba:	23ff      	movs	r3, #255	; 0xff
 8009cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8009cc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009cc4:	e005      	b.n	8009cd2 <dns_send+0x1be>
        goto overflow_return;
 8009cc6:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8009cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cca:	f004 fbfb 	bl	800e4c4 <pbuf_free>
  return ERR_VAL;
 8009cce:	f06f 0305 	mvn.w	r3, #5
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3740      	adds	r7, #64	; 0x40
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200002a4 	.word	0x200002a4
 8009ce0:	0801815c 	.word	0x0801815c
 8009ce4:	0801818c 	.word	0x0801818c
 8009ce8:	080181a4 	.word	0x080181a4
 8009cec:	20000714 	.word	0x20000714
 8009cf0:	20000290 	.word	0x20000290

08009cf4 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8009cfa:	202e      	movs	r0, #46	; 0x2e
 8009cfc:	f00b ff07 	bl	8015b0e <udp_new_ip_type>
 8009d00:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e026      	b.n	8009d5a <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 8009d0c:	f00c f8dc 	bl	8015ec8 <rand>
 8009d10:	4603      	mov	r3, r0
 8009d12:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d1a:	d308      	bcc.n	8009d2e <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8009d1c:	88fb      	ldrh	r3, [r7, #6]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4910      	ldr	r1, [pc, #64]	; (8009d64 <dns_alloc_random_port+0x70>)
 8009d22:	68b8      	ldr	r0, [r7, #8]
 8009d24:	f00b fdf2 	bl	801590c <udp_bind>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
 8009d2c:	e001      	b.n	8009d32 <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 8009d2e:	23f8      	movs	r3, #248	; 0xf8
 8009d30:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 8009d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d36:	f113 0f08 	cmn.w	r3, #8
 8009d3a:	d0e7      	beq.n	8009d0c <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 8009d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f00b fe89 	bl	8015a5c <udp_remove>
    return NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e005      	b.n	8009d5a <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	4905      	ldr	r1, [pc, #20]	; (8009d68 <dns_alloc_random_port+0x74>)
 8009d52:	68b8      	ldr	r0, [r7, #8]
 8009d54:	f00b fe62 	bl	8015a1c <udp_recv>
  return pcb;
 8009d58:	68bb      	ldr	r3, [r7, #8]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	0801ac1c 	.word	0x0801ac1c
 8009d68:	0800a215 	.word	0x0800a215

08009d6c <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 8009d6c:	b590      	push	{r4, r7, lr}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8009d72:	2300      	movs	r3, #0
 8009d74:	71fb      	strb	r3, [r7, #7]
 8009d76:	e008      	b.n	8009d8a <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	4a23      	ldr	r2, [pc, #140]	; (8009e08 <dns_alloc_pcb+0x9c>)
 8009d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	3301      	adds	r3, #1
 8009d88:	71fb      	strb	r3, [r7, #7]
 8009d8a:	79fb      	ldrb	r3, [r7, #7]
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d9f3      	bls.n	8009d78 <dns_alloc_pcb+0xc>
 8009d90:	e000      	b.n	8009d94 <dns_alloc_pcb+0x28>
      break;
 8009d92:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d811      	bhi.n	8009dbe <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 8009d9a:	79fc      	ldrb	r4, [r7, #7]
 8009d9c:	f7ff ffaa 	bl	8009cf4 <dns_alloc_random_port>
 8009da0:	4602      	mov	r2, r0
 8009da2:	4b19      	ldr	r3, [pc, #100]	; (8009e08 <dns_alloc_pcb+0x9c>)
 8009da4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	4a17      	ldr	r2, [pc, #92]	; (8009e08 <dns_alloc_pcb+0x9c>)
 8009dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d004      	beq.n	8009dbe <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 8009db4:	4a15      	ldr	r2, [pc, #84]	; (8009e0c <dns_alloc_pcb+0xa0>)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	7013      	strb	r3, [r2, #0]
      return i;
 8009dba:	79fb      	ldrb	r3, [r7, #7]
 8009dbc:	e020      	b.n	8009e00 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	71fb      	strb	r3, [r7, #7]
 8009dc2:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <dns_alloc_pcb+0xa0>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	71bb      	strb	r3, [r7, #6]
 8009dca:	e015      	b.n	8009df8 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8009dcc:	79bb      	ldrb	r3, [r7, #6]
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d901      	bls.n	8009dd6 <dns_alloc_pcb+0x6a>
      idx = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 8009dd6:	79bb      	ldrb	r3, [r7, #6]
 8009dd8:	4a0b      	ldr	r2, [pc, #44]	; (8009e08 <dns_alloc_pcb+0x9c>)
 8009dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 8009de2:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <dns_alloc_pcb+0xa0>)
 8009de4:	79bb      	ldrb	r3, [r7, #6]
 8009de6:	7013      	strb	r3, [r2, #0]
      return idx;
 8009de8:	79bb      	ldrb	r3, [r7, #6]
 8009dea:	e009      	b.n	8009e00 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	3301      	adds	r3, #1
 8009df0:	71fb      	strb	r3, [r7, #7]
 8009df2:	79bb      	ldrb	r3, [r7, #6]
 8009df4:	3301      	adds	r3, #1
 8009df6:	71bb      	strb	r3, [r7, #6]
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d9e6      	bls.n	8009dcc <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 8009dfe:	2304      	movs	r3, #4
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd90      	pop	{r4, r7, pc}
 8009e08:	20000290 	.word	0x20000290
 8009e0c:	200002a0 	.word	0x200002a0

08009e10 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8009e10:	b590      	push	{r4, r7, lr}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e03d      	b.n	8009e9e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8009e22:	7bfa      	ldrb	r2, [r7, #15]
 8009e24:	4957      	ldr	r1, [pc, #348]	; (8009f84 <dns_call_found+0x174>)
 8009e26:	4613      	mov	r3, r2
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	4413      	add	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	440b      	add	r3, r1
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d030      	beq.n	8009e98 <dns_call_found+0x88>
 8009e36:	7bfa      	ldrb	r2, [r7, #15]
 8009e38:	4952      	ldr	r1, [pc, #328]	; (8009f84 <dns_call_found+0x174>)
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	4413      	add	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	440b      	add	r3, r1
 8009e44:	3308      	adds	r3, #8
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	79fa      	ldrb	r2, [r7, #7]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d124      	bne.n	8009e98 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8009e4e:	7bfa      	ldrb	r2, [r7, #15]
 8009e50:	494c      	ldr	r1, [pc, #304]	; (8009f84 <dns_call_found+0x174>)
 8009e52:	4613      	mov	r3, r2
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	681c      	ldr	r4, [r3, #0]
 8009e5e:	79fa      	ldrb	r2, [r7, #7]
 8009e60:	4613      	mov	r3, r2
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	4413      	add	r3, r2
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	3310      	adds	r3, #16
 8009e6a:	4a47      	ldr	r2, [pc, #284]	; (8009f88 <dns_call_found+0x178>)
 8009e6c:	1898      	adds	r0, r3, r2
 8009e6e:	7bfa      	ldrb	r2, [r7, #15]
 8009e70:	4944      	ldr	r1, [pc, #272]	; (8009f84 <dns_call_found+0x174>)
 8009e72:	4613      	mov	r3, r2
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8009e86:	7bfa      	ldrb	r2, [r7, #15]
 8009e88:	493e      	ldr	r1, [pc, #248]	; (8009f84 <dns_call_found+0x174>)
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	73fb      	strb	r3, [r7, #15]
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d9be      	bls.n	8009e22 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
 8009ea8:	e031      	b.n	8009f0e <dns_call_found+0xfe>
    if (i == idx) {
 8009eaa:	7bfa      	ldrb	r2, [r7, #15]
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d029      	beq.n	8009f06 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8009eb2:	7bfa      	ldrb	r2, [r7, #15]
 8009eb4:	4934      	ldr	r1, [pc, #208]	; (8009f88 <dns_call_found+0x178>)
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	4413      	add	r3, r2
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	440b      	add	r3, r1
 8009ec0:	330a      	adds	r3, #10
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d11f      	bne.n	8009f08 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8009ec8:	7bfa      	ldrb	r2, [r7, #15]
 8009eca:	492f      	ldr	r1, [pc, #188]	; (8009f88 <dns_call_found+0x178>)
 8009ecc:	4613      	mov	r3, r2
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	4413      	add	r3, r2
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	440b      	add	r3, r1
 8009ed6:	330f      	adds	r3, #15
 8009ed8:	7819      	ldrb	r1, [r3, #0]
 8009eda:	79fa      	ldrb	r2, [r7, #7]
 8009edc:	482a      	ldr	r0, [pc, #168]	; (8009f88 <dns_call_found+0x178>)
 8009ede:	4613      	mov	r3, r2
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	4413      	add	r3, r2
 8009ee4:	011b      	lsls	r3, r3, #4
 8009ee6:	4403      	add	r3, r0
 8009ee8:	330f      	adds	r3, #15
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4299      	cmp	r1, r3
 8009eee:	d10b      	bne.n	8009f08 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8009ef0:	79fa      	ldrb	r2, [r7, #7]
 8009ef2:	4925      	ldr	r1, [pc, #148]	; (8009f88 <dns_call_found+0x178>)
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	440b      	add	r3, r1
 8009efe:	330f      	adds	r3, #15
 8009f00:	2204      	movs	r2, #4
 8009f02:	701a      	strb	r2, [r3, #0]
        break;
 8009f04:	e006      	b.n	8009f14 <dns_call_found+0x104>
      continue; /* only check other requests */
 8009f06:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	73fb      	strb	r3, [r7, #15]
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d9ca      	bls.n	8009eaa <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8009f14:	79fa      	ldrb	r2, [r7, #7]
 8009f16:	491c      	ldr	r1, [pc, #112]	; (8009f88 <dns_call_found+0x178>)
 8009f18:	4613      	mov	r3, r2
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	4413      	add	r3, r2
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	440b      	add	r3, r1
 8009f22:	330f      	adds	r3, #15
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d827      	bhi.n	8009f7a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8009f2a:	79fa      	ldrb	r2, [r7, #7]
 8009f2c:	4916      	ldr	r1, [pc, #88]	; (8009f88 <dns_call_found+0x178>)
 8009f2e:	4613      	mov	r3, r2
 8009f30:	011b      	lsls	r3, r3, #4
 8009f32:	4413      	add	r3, r2
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	440b      	add	r3, r1
 8009f38:	330f      	adds	r3, #15
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <dns_call_found+0x17c>)
 8009f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f00b fd89 	bl	8015a5c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8009f4a:	79fa      	ldrb	r2, [r7, #7]
 8009f4c:	490e      	ldr	r1, [pc, #56]	; (8009f88 <dns_call_found+0x178>)
 8009f4e:	4613      	mov	r3, r2
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	4413      	add	r3, r2
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	440b      	add	r3, r1
 8009f58:	330f      	adds	r3, #15
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <dns_call_found+0x17c>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8009f66:	79fa      	ldrb	r2, [r7, #7]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <dns_call_found+0x178>)
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	4413      	add	r3, r2
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	440b      	add	r3, r1
 8009f74:	330f      	adds	r3, #15
 8009f76:	2204      	movs	r2, #4
 8009f78:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd90      	pop	{r4, r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200006e4 	.word	0x200006e4
 8009f88:	200002a4 	.word	0x200002a4
 8009f8c:	20000290 	.word	0x20000290

08009f90 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8009f96:	f00b ff97 	bl	8015ec8 <rand>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	71fb      	strb	r3, [r7, #7]
 8009fa2:	e01a      	b.n	8009fda <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009fa4:	79fa      	ldrb	r2, [r7, #7]
 8009fa6:	4911      	ldr	r1, [pc, #68]	; (8009fec <dns_create_txid+0x5c>)
 8009fa8:	4613      	mov	r3, r2
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	4413      	add	r3, r2
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	440b      	add	r3, r1
 8009fb2:	330a      	adds	r3, #10
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d10c      	bne.n	8009fd4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8009fba:	79fa      	ldrb	r2, [r7, #7]
 8009fbc:	490b      	ldr	r1, [pc, #44]	; (8009fec <dns_create_txid+0x5c>)
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	4413      	add	r3, r2
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	440b      	add	r3, r1
 8009fc8:	3308      	adds	r3, #8
 8009fca:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009fcc:	88ba      	ldrh	r2, [r7, #4]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d100      	bne.n	8009fd4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8009fd2:	e7e0      	b.n	8009f96 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009fd4:	79fb      	ldrb	r3, [r7, #7]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	71fb      	strb	r3, [r7, #7]
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d9e1      	bls.n	8009fa4 <dns_create_txid+0x14>
    }
  }

  return txid;
 8009fe0:	88bb      	ldrh	r3, [r7, #4]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200002a4 	.word	0x200002a4

08009ff0 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00e      	beq.n	800a020 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7adb      	ldrb	r3, [r3, #11]
 800a006:	3301      	adds	r3, #1
 800a008:	2b01      	cmp	r3, #1
 800a00a:	dc09      	bgt.n	800a020 <dns_backupserver_available+0x30>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7adb      	ldrb	r3, [r3, #11]
 800a010:	3301      	adds	r3, #1
 800a012:	4a07      	ldr	r2, [pc, #28]	; (800a030 <dns_backupserver_available+0x40>)
 800a014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <dns_backupserver_available+0x30>
      ret = 1;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	20000714 	.word	0x20000714

0800a034 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800a03e:	79fa      	ldrb	r2, [r7, #7]
 800a040:	4613      	mov	r3, r2
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	4413      	add	r3, r2
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	4a48      	ldr	r2, [pc, #288]	; (800a16c <dns_check_entry+0x138>)
 800a04a:	4413      	add	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	2b03      	cmp	r3, #3
 800a052:	d906      	bls.n	800a062 <dns_check_entry+0x2e>
 800a054:	4b46      	ldr	r3, [pc, #280]	; (800a170 <dns_check_entry+0x13c>)
 800a056:	f240 421c 	movw	r2, #1052	; 0x41c
 800a05a:	4946      	ldr	r1, [pc, #280]	; (800a174 <dns_check_entry+0x140>)
 800a05c:	4846      	ldr	r0, [pc, #280]	; (800a178 <dns_check_entry+0x144>)
 800a05e:	f00b ff1b 	bl	8015e98 <iprintf>

  switch (entry->state) {
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	7a9b      	ldrb	r3, [r3, #10]
 800a066:	2b03      	cmp	r3, #3
 800a068:	d86f      	bhi.n	800a14a <dns_check_entry+0x116>
 800a06a:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <dns_check_entry+0x3c>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a15b 	.word	0x0800a15b
 800a074:	0800a081 	.word	0x0800a081
 800a078:	0800a0b3 	.word	0x0800a0b3
 800a07c:	0800a129 	.word	0x0800a129
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800a080:	f7ff ff86 	bl	8009f90 <dns_create_txid>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2202      	movs	r2, #2
 800a090:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fd34 	bl	8009b14 <dns_send>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800a0b0:	e058      	b.n	800a164 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	7b1b      	ldrb	r3, [r3, #12]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	731a      	strb	r2, [r3, #12]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	7b1b      	ldrb	r3, [r3, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d14b      	bne.n	800a15e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	7b5b      	ldrb	r3, [r3, #13]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	735a      	strb	r2, [r3, #13]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	7b5b      	ldrb	r3, [r3, #13]
 800a0d6:	2b0b      	cmp	r3, #11
 800a0d8:	d11b      	bne.n	800a112 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff ff88 	bl	8009ff0 <dns_backupserver_available>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00c      	beq.n	800a100 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	7adb      	ldrb	r3, [r3, #11]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	735a      	strb	r2, [r3, #13]
 800a0fe:	e00c      	b.n	800a11a <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff fe83 	bl	8009e10 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	729a      	strb	r2, [r3, #10]
            break;
 800a110:	e028      	b.n	800a164 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	7b5a      	ldrb	r2, [r3, #13]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff fcf9 	bl	8009b14 <dns_send>
 800a122:	4603      	mov	r3, r0
 800a124:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800a126:	e01a      	b.n	800a15e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <dns_check_entry+0x10e>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	1e5a      	subs	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10f      	bne.n	800a162 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	729a      	strb	r2, [r3, #10]
      }
      break;
 800a148:	e00b      	b.n	800a162 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <dns_check_entry+0x13c>)
 800a14c:	f240 425b 	movw	r2, #1115	; 0x45b
 800a150:	490a      	ldr	r1, [pc, #40]	; (800a17c <dns_check_entry+0x148>)
 800a152:	4809      	ldr	r0, [pc, #36]	; (800a178 <dns_check_entry+0x144>)
 800a154:	f00b fea0 	bl	8015e98 <iprintf>
      break;
 800a158:	e004      	b.n	800a164 <dns_check_entry+0x130>
      break;
 800a15a:	bf00      	nop
 800a15c:	e002      	b.n	800a164 <dns_check_entry+0x130>
      break;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <dns_check_entry+0x130>
      break;
 800a162:	bf00      	nop
  }
}
 800a164:	bf00      	nop
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	200002a4 	.word	0x200002a4
 800a170:	0801815c 	.word	0x0801815c
 800a174:	080181cc 	.word	0x080181cc
 800a178:	080181a4 	.word	0x080181a4
 800a17c:	080181e8 	.word	0x080181e8

0800a180 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a186:	2300      	movs	r3, #0
 800a188:	71fb      	strb	r3, [r7, #7]
 800a18a:	e006      	b.n	800a19a <dns_check_entries+0x1a>
    dns_check_entry(i);
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff ff50 	bl	800a034 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	3301      	adds	r3, #1
 800a198:	71fb      	strb	r3, [r7, #7]
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d9f5      	bls.n	800a18c <dns_check_entries+0xc>
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800a1b4:	79fa      	ldrb	r2, [r7, #7]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	4413      	add	r3, r2
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	4a13      	ldr	r2, [pc, #76]	; (800a20c <dns_correct_response+0x64>)
 800a1c0:	4413      	add	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2203      	movs	r2, #3
 800a1c8:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a0e      	ldr	r2, [pc, #56]	; (800a210 <dns_correct_response+0x68>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d902      	bls.n	800a1e0 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4a0c      	ldr	r2, [pc, #48]	; (800a210 <dns_correct_response+0x68>)
 800a1de:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	1d1a      	adds	r2, r3, #4
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7ff fe11 	bl	8009e10 <dns_call_found>

  if (entry->ttl == 0) {
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	7a9b      	ldrb	r3, [r3, #10]
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d102      	bne.n	800a204 <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	200002a4 	.word	0x200002a4
 800a210:	00093a80 	.word	0x00093a80

0800a214 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b091      	sub	sp, #68	; 0x44
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	891b      	ldrh	r3, [r3, #8]
 800a226:	2b0f      	cmp	r3, #15
 800a228:	f240 811e 	bls.w	800a468 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800a22c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a230:	2300      	movs	r3, #0
 800a232:	220c      	movs	r2, #12
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f004 fb3f 	bl	800e8b8 <pbuf_copy_partial>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b0c      	cmp	r3, #12
 800a23e:	f040 812a 	bne.w	800a496 <dns_recv+0x282>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800a242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff faad 	bl	80097a4 <lwip_htons>
 800a24a:	4603      	mov	r3, r0
 800a24c:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a24e:	2300      	movs	r3, #0
 800a250:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a254:	e102      	b.n	800a45c <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800a256:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a25a:	4613      	mov	r3, r2
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	4413      	add	r3, r2
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	4a90      	ldr	r2, [pc, #576]	; (800a4a4 <dns_recv+0x290>)
 800a264:	4413      	add	r3, r2
 800a266:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800a268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26a:	7a9b      	ldrb	r3, [r3, #10]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	f040 80f0 	bne.w	800a452 <dns_recv+0x23e>
          (entry->txid == txid)) {
 800a272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a274:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800a276:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a278:	429a      	cmp	r2, r3
 800a27a:	f040 80ea 	bne.w	800a452 <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800a27e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff fa8f 	bl	80097a4 <lwip_htons>
 800a286:	4603      	mov	r3, r0
 800a288:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800a28a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fa89 	bl	80097a4 <lwip_htons>
 800a292:	4603      	mov	r3, r0
 800a294:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800a296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f280 80e5 	bge.w	800a46c <dns_recv+0x258>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800a2a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	f040 80e3 	bne.w	800a470 <dns_recv+0x25c>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b0:	7adb      	ldrb	r3, [r3, #11]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4b7c      	ldr	r3, [pc, #496]	; (800a4a8 <dns_recv+0x294>)
 800a2b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	f040 80da 	bne.w	800a474 <dns_recv+0x260>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	3310      	adds	r3, #16
 800a2c4:	220c      	movs	r2, #12
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7ff fb47 	bl	800995c <dns_compare_name>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800a2d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a2d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	f000 80cd 	beq.w	800a478 <dns_recv+0x264>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800a2de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a2e0:	f107 0114 	add.w	r1, r7, #20
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f004 fae6 	bl	800e8b8 <pbuf_copy_partial>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	f040 80c4 	bne.w	800a47c <dns_recv+0x268>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800a2f4:	8afb      	ldrh	r3, [r7, #22]
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fa:	f040 80cc 	bne.w	800a496 <dns_recv+0x282>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800a2fe:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800a300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a304:	f040 80c7 	bne.w	800a496 <dns_recv+0x282>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800a308:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a30a:	3304      	adds	r3, #4
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a310:	f280 80b6 	bge.w	800a480 <dns_recv+0x26c>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800a314:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a316:	3304      	adds	r3, #4
 800a318:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800a31a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	2b00      	cmp	r3, #0
 800a324:	d078      	beq.n	800a418 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800a326:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a328:	f7ff fe62 	bl	8009ff0 <dns_backupserver_available>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d07a      	beq.n	800a428 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800a332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a334:	220a      	movs	r2, #10
 800a336:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800a338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33a:	2201      	movs	r2, #1
 800a33c:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800a33e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fe76 	bl	800a034 <dns_check_entry>

            goto ignore_packet;
 800a348:	e0a5      	b.n	800a496 <dns_recv+0x282>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800a34a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fb93 	bl	8009a7a <dns_skip_name>
 800a354:	4603      	mov	r3, r0
 800a356:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800a358:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a35a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a35e:	4293      	cmp	r3, r2
 800a360:	f000 8090 	beq.w	800a484 <dns_recv+0x270>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800a364:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a366:	f107 0118 	add.w	r1, r7, #24
 800a36a:	220a      	movs	r2, #10
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f004 faa3 	bl	800e8b8 <pbuf_copy_partial>
 800a372:	4603      	mov	r3, r0
 800a374:	2b0a      	cmp	r3, #10
 800a376:	f040 8087 	bne.w	800a488 <dns_recv+0x274>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800a37a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a37c:	330a      	adds	r3, #10
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a382:	f280 8083 	bge.w	800a48c <dns_recv+0x278>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800a386:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a388:	330a      	adds	r3, #10
 800a38a:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800a38c:	8b7b      	ldrh	r3, [r7, #26]
 800a38e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a392:	d12b      	bne.n	800a3ec <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800a394:	8b3b      	ldrh	r3, [r7, #24]
 800a396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39a:	d127      	bne.n	800a3ec <dns_recv+0x1d8>
 800a39c:	8c3b      	ldrh	r3, [r7, #32]
 800a39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a2:	d123      	bne.n	800a3ec <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800a3a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3a6:	f107 0110 	add.w	r1, r7, #16
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f004 fa83 	bl	800e8b8 <pbuf_copy_partial>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d16b      	bne.n	800a490 <dns_recv+0x27c>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800a3b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a3bc:	6939      	ldr	r1, [r7, #16]
 800a3be:	4839      	ldr	r0, [pc, #228]	; (800a4a4 <dns_recv+0x290>)
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	4413      	add	r3, r2
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4403      	add	r3, r0
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f004 f878 	bl	800e4c4 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff f9f9 	bl	80097ce <lwip_htonl>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff fedf 	bl	800a1a8 <dns_correct_response>
 800a3ea:	e058      	b.n	800a49e <dns_recv+0x28a>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800a3ec:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800a3ee:	8c3b      	ldrh	r3, [r7, #32]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff f9d7 	bl	80097a4 <lwip_htons>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	4423      	add	r3, r4
 800a3fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fe:	da49      	bge.n	800a494 <dns_recv+0x280>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800a400:	8c3b      	ldrh	r3, [r7, #32]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff f9ce 	bl	80097a4 <lwip_htons>
 800a408:	4603      	mov	r3, r0
 800a40a:	461a      	mov	r2, r3
 800a40c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a40e:	4413      	add	r3, r2
 800a410:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800a412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a414:	3b01      	subs	r3, #1
 800a416:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800a418:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <dns_recv+0x214>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	891b      	ldrh	r3, [r3, #8]
 800a422:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800a424:	429a      	cmp	r2, r3
 800a426:	d390      	bcc.n	800a34a <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f004 f84b 	bl	800e4c4 <pbuf_free>
        dns_call_found(i, NULL);
 800a42e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff fceb 	bl	8009e10 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800a43a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a43e:	4919      	ldr	r1, [pc, #100]	; (800a4a4 <dns_recv+0x290>)
 800a440:	4613      	mov	r3, r2
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	4413      	add	r3, r2
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	440b      	add	r3, r1
 800a44a:	330a      	adds	r3, #10
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
        return;
 800a450:	e025      	b.n	800a49e <dns_recv+0x28a>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a456:	3301      	adds	r3, #1
 800a458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a45c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a460:	2b03      	cmp	r3, #3
 800a462:	f67f aef8 	bls.w	800a256 <dns_recv+0x42>
 800a466:	e016      	b.n	800a496 <dns_recv+0x282>
    goto ignore_packet;
 800a468:	bf00      	nop
 800a46a:	e014      	b.n	800a496 <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 800a46c:	bf00      	nop
 800a46e:	e012      	b.n	800a496 <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 800a470:	bf00      	nop
 800a472:	e010      	b.n	800a496 <dns_recv+0x282>
            goto ignore_packet; /* ignore this packet */
 800a474:	bf00      	nop
 800a476:	e00e      	b.n	800a496 <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 800a478:	bf00      	nop
 800a47a:	e00c      	b.n	800a496 <dns_recv+0x282>
          goto ignore_packet; /* ignore this packet */
 800a47c:	bf00      	nop
 800a47e:	e00a      	b.n	800a496 <dns_recv+0x282>
          goto ignore_packet;
 800a480:	bf00      	nop
 800a482:	e008      	b.n	800a496 <dns_recv+0x282>
              goto ignore_packet; /* ignore this packet */
 800a484:	bf00      	nop
 800a486:	e006      	b.n	800a496 <dns_recv+0x282>
              goto ignore_packet; /* ignore this packet */
 800a488:	bf00      	nop
 800a48a:	e004      	b.n	800a496 <dns_recv+0x282>
              goto ignore_packet;
 800a48c:	bf00      	nop
 800a48e:	e002      	b.n	800a496 <dns_recv+0x282>
                    goto ignore_packet; /* ignore this packet */
 800a490:	bf00      	nop
 800a492:	e000      	b.n	800a496 <dns_recv+0x282>
              goto ignore_packet; /* ignore this packet */
 800a494:	bf00      	nop
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f004 f814 	bl	800e4c4 <pbuf_free>
  return;
 800a49c:	bf00      	nop
}
 800a49e:	3744      	adds	r7, #68	; 0x44
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd90      	pop	{r4, r7, pc}
 800a4a4:	200002a4 	.word	0x200002a4
 800a4a8:	20000714 	.word	0x20000714

0800a4ac <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08a      	sub	sp, #40	; 0x28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4c4:	e056      	b.n	800a574 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a4c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a4ca:	4990      	ldr	r1, [pc, #576]	; (800a70c <dns_enqueue+0x260>)
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	011b      	lsls	r3, r3, #4
 800a4d0:	4413      	add	r3, r2
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	440b      	add	r3, r1
 800a4d6:	330a      	adds	r3, #10
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d145      	bne.n	800a56a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800a4de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	011b      	lsls	r3, r3, #4
 800a4e6:	4413      	add	r3, r2
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	3310      	adds	r3, #16
 800a4ec:	4a87      	ldr	r2, [pc, #540]	; (800a70c <dns_enqueue+0x260>)
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f7ff f982 	bl	8009800 <lwip_strnicmp>
 800a4fc:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d133      	bne.n	800a56a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800a502:	2300      	movs	r3, #0
 800a504:	76fb      	strb	r3, [r7, #27]
 800a506:	e02d      	b.n	800a564 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800a508:	7efa      	ldrb	r2, [r7, #27]
 800a50a:	4981      	ldr	r1, [pc, #516]	; (800a710 <dns_enqueue+0x264>)
 800a50c:	4613      	mov	r3, r2
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	440b      	add	r3, r1
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d120      	bne.n	800a55e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800a51c:	7efa      	ldrb	r2, [r7, #27]
 800a51e:	497c      	ldr	r1, [pc, #496]	; (800a710 <dns_enqueue+0x264>)
 800a520:	4613      	mov	r3, r2
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	4413      	add	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	440b      	add	r3, r1
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800a52e:	7efa      	ldrb	r2, [r7, #27]
 800a530:	4977      	ldr	r1, [pc, #476]	; (800a710 <dns_enqueue+0x264>)
 800a532:	4613      	mov	r3, r2
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	3304      	adds	r3, #4
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 800a542:	7efa      	ldrb	r2, [r7, #27]
 800a544:	4972      	ldr	r1, [pc, #456]	; (800a710 <dns_enqueue+0x264>)
 800a546:	4613      	mov	r3, r2
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	3308      	adds	r3, #8
 800a552:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a556:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 800a558:	f06f 0304 	mvn.w	r3, #4
 800a55c:	e0d1      	b.n	800a702 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800a55e:	7efb      	ldrb	r3, [r7, #27]
 800a560:	3301      	adds	r3, #1
 800a562:	76fb      	strb	r3, [r7, #27]
 800a564:	7efb      	ldrb	r3, [r7, #27]
 800a566:	2b03      	cmp	r3, #3
 800a568:	d9ce      	bls.n	800a508 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a56e:	3301      	adds	r3, #1
 800a570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d9a4      	bls.n	800a4c6 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 800a582:	2304      	movs	r3, #4
 800a584:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a58e:	e027      	b.n	800a5e0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 800a590:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a594:	4613      	mov	r3, r2
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	4413      	add	r3, r2
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	4a5b      	ldr	r2, [pc, #364]	; (800a70c <dns_enqueue+0x260>)
 800a59e:	4413      	add	r3, r2
 800a5a0:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	7a9b      	ldrb	r3, [r3, #10]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d01f      	beq.n	800a5ea <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	7a9b      	ldrb	r3, [r3, #10]
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d111      	bne.n	800a5d6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800a5b2:	4b58      	ldr	r3, [pc, #352]	; (800a714 <dns_enqueue+0x268>)
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	7b9b      	ldrb	r3, [r3, #14]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 800a5be:	7eba      	ldrb	r2, [r7, #26]
 800a5c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d906      	bls.n	800a5d6 <dns_enqueue+0x12a>
        lseq = age;
 800a5c8:	7ebb      	ldrb	r3, [r7, #26]
 800a5ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 800a5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5da:	3301      	adds	r3, #1
 800a5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d9d3      	bls.n	800a590 <dns_enqueue+0xe4>
 800a5e8:	e000      	b.n	800a5ec <dns_enqueue+0x140>
      break;
 800a5ea:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 800a5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d11f      	bne.n	800a634 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800a5f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d80b      	bhi.n	800a614 <dns_enqueue+0x168>
 800a5fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a600:	4942      	ldr	r1, [pc, #264]	; (800a70c <dns_enqueue+0x260>)
 800a602:	4613      	mov	r3, r2
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	4413      	add	r3, r2
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	440b      	add	r3, r1
 800a60c:	330a      	adds	r3, #10
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	2b03      	cmp	r3, #3
 800a612:	d002      	beq.n	800a61a <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 800a614:	f04f 33ff 	mov.w	r3, #4294967295
 800a618:	e073      	b.n	800a702 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 800a61a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 800a622:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a626:	4613      	mov	r3, r2
 800a628:	011b      	lsls	r3, r3, #4
 800a62a:	4413      	add	r3, r2
 800a62c:	011b      	lsls	r3, r3, #4
 800a62e:	4a37      	ldr	r2, [pc, #220]	; (800a70c <dns_enqueue+0x260>)
 800a630:	4413      	add	r3, r2
 800a632:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800a638:	2300      	movs	r3, #0
 800a63a:	76fb      	strb	r3, [r7, #27]
 800a63c:	e015      	b.n	800a66a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 800a63e:	7efa      	ldrb	r2, [r7, #27]
 800a640:	4933      	ldr	r1, [pc, #204]	; (800a710 <dns_enqueue+0x264>)
 800a642:	4613      	mov	r3, r2
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	4413      	add	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	440b      	add	r3, r1
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d108      	bne.n	800a664 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 800a652:	7efa      	ldrb	r2, [r7, #27]
 800a654:	4613      	mov	r3, r2
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	4413      	add	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4a2c      	ldr	r2, [pc, #176]	; (800a710 <dns_enqueue+0x264>)
 800a65e:	4413      	add	r3, r2
 800a660:	61fb      	str	r3, [r7, #28]
      break;
 800a662:	e005      	b.n	800a670 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800a664:	7efb      	ldrb	r3, [r7, #27]
 800a666:	3301      	adds	r3, #1
 800a668:	76fb      	strb	r3, [r7, #27]
 800a66a:	7efb      	ldrb	r3, [r7, #27]
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d9e6      	bls.n	800a63e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 800a676:	f04f 33ff 	mov.w	r3, #4294967295
 800a67a:	e042      	b.n	800a702 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a682:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	2201      	movs	r2, #1
 800a688:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 800a68a:	4b22      	ldr	r3, [pc, #136]	; (800a714 <dns_enqueue+0x268>)
 800a68c:	781a      	ldrb	r2, [r3, #0]
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2bff      	cmp	r3, #255	; 0xff
 800a6a2:	bf28      	it	cs
 800a6a4:	23ff      	movcs	r3, #255	; 0xff
 800a6a6:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f00b fbc4 	bl	8015e3e <memcpy>
  entry->name[namelen] = 0;
 800a6b6:	6a3a      	ldr	r2, [r7, #32]
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	3310      	adds	r3, #16
 800a6be:	2200      	movs	r2, #0
 800a6c0:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 800a6c2:	f7ff fb53 	bl	8009d6c <dns_alloc_pcb>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	7bdb      	ldrb	r3, [r3, #15]
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d908      	bls.n	800a6e8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e00c      	b.n	800a702 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <dns_enqueue+0x268>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	4b08      	ldr	r3, [pc, #32]	; (800a714 <dns_enqueue+0x268>)
 800a6f2:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 800a6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff fc9b 	bl	800a034 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 800a6fe:	f06f 0304 	mvn.w	r3, #4
}
 800a702:	4618      	mov	r0, r3
 800a704:	3728      	adds	r7, #40	; 0x28
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200002a4 	.word	0x200002a4
 800a710:	200006e4 	.word	0x200006e4
 800a714:	200002a1 	.word	0x200002a1

0800a718 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 800a726:	2300      	movs	r3, #0
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 f805 	bl	800a740 <dns_gethostbyname_addrtype>
 800a736:	4603      	mov	r3, r0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d006      	beq.n	800a762 <dns_gethostbyname_addrtype+0x22>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 800a762:	f06f 030f 	mvn.w	r3, #15
 800a766:	e029      	b.n	800a7bc <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7f5 fd73 	bl	8000254 <strlen>
 800a76e:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2bff      	cmp	r3, #255	; 0xff
 800a774:	d902      	bls.n	800a77c <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 800a776:	f06f 030f 	mvn.w	r3, #15
 800a77a:	e01f      	b.n	800a7bc <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f001 fbe4 	bl	800bf4c <ip4addr_aton>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e016      	b.n	800a7bc <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff f8a1 	bl	80098d8 <dns_lookup>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	e00d      	b.n	800a7bc <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 800a7a0:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <dns_gethostbyname_addrtype+0x84>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 800a7a8:	f06f 0305 	mvn.w	r3, #5
 800a7ac:	e006      	b.n	800a7bc <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6979      	ldr	r1, [r7, #20]
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff fe79 	bl	800a4ac <dns_enqueue>
 800a7ba:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000714 	.word	0x20000714

0800a7c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a7d2:	f002 fc75 	bl	800d0c0 <mem_init>
  memp_init();
 800a7d6:	f002 ffa3 	bl	800d720 <memp_init>
  pbuf_init();
  netif_init();
 800a7da:	f003 f85b 	bl	800d894 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a7de:	f00a fd1b 	bl	8015218 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a7e2:	f004 fb2d 	bl	800ee40 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800a7e6:	f7ff f846 	bl	8009876 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a7ea:	f00a fc57 	bl	801509c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a7ee:	bf00      	nop
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a800:	4915      	ldr	r1, [pc, #84]	; (800a858 <etharp_free_entry+0x60>)
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	4613      	mov	r3, r2
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	4413      	add	r3, r2
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	440b      	add	r3, r1
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d013      	beq.n	800a83c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a814:	4910      	ldr	r1, [pc, #64]	; (800a858 <etharp_free_entry+0x60>)
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	4613      	mov	r3, r2
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	440b      	add	r3, r1
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f003 fe4d 	bl	800e4c4 <pbuf_free>
    arp_table[i].q = NULL;
 800a82a:	490b      	ldr	r1, [pc, #44]	; (800a858 <etharp_free_entry+0x60>)
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	4413      	add	r3, r2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	440b      	add	r3, r1
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a83c:	4906      	ldr	r1, [pc, #24]	; (800a858 <etharp_free_entry+0x60>)
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	4413      	add	r3, r2
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	440b      	add	r3, r1
 800a84a:	3314      	adds	r3, #20
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	2000071c 	.word	0x2000071c

0800a85c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a862:	2300      	movs	r3, #0
 800a864:	607b      	str	r3, [r7, #4]
 800a866:	e096      	b.n	800a996 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a868:	494f      	ldr	r1, [pc, #316]	; (800a9a8 <etharp_tmr+0x14c>)
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	4613      	mov	r3, r2
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	4413      	add	r3, r2
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	440b      	add	r3, r1
 800a876:	3314      	adds	r3, #20
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 8086 	beq.w	800a990 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a884:	4948      	ldr	r1, [pc, #288]	; (800a9a8 <etharp_tmr+0x14c>)
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4613      	mov	r3, r2
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	4413      	add	r3, r2
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	440b      	add	r3, r1
 800a892:	3312      	adds	r3, #18
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	3301      	adds	r3, #1
 800a898:	b298      	uxth	r0, r3
 800a89a:	4943      	ldr	r1, [pc, #268]	; (800a9a8 <etharp_tmr+0x14c>)
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4413      	add	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3312      	adds	r3, #18
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a8ae:	493e      	ldr	r1, [pc, #248]	; (800a9a8 <etharp_tmr+0x14c>)
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	4413      	add	r3, r2
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3312      	adds	r3, #18
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a8c4:	d215      	bcs.n	800a8f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a8c6:	4938      	ldr	r1, [pc, #224]	; (800a9a8 <etharp_tmr+0x14c>)
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	4413      	add	r3, r2
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3314      	adds	r3, #20
 800a8d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d10e      	bne.n	800a8fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a8dc:	4932      	ldr	r1, [pc, #200]	; (800a9a8 <etharp_tmr+0x14c>)
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	4413      	add	r3, r2
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	440b      	add	r3, r1
 800a8ea:	3312      	adds	r3, #18
 800a8ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d903      	bls.n	800a8fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff ff80 	bl	800a7f8 <etharp_free_entry>
 800a8f8:	e04a      	b.n	800a990 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a8fa:	492b      	ldr	r1, [pc, #172]	; (800a9a8 <etharp_tmr+0x14c>)
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	4413      	add	r3, r2
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	440b      	add	r3, r1
 800a908:	3314      	adds	r3, #20
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d10a      	bne.n	800a926 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a910:	4925      	ldr	r1, [pc, #148]	; (800a9a8 <etharp_tmr+0x14c>)
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	4613      	mov	r3, r2
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	4413      	add	r3, r2
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	440b      	add	r3, r1
 800a91e:	3314      	adds	r3, #20
 800a920:	2204      	movs	r2, #4
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e034      	b.n	800a990 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a926:	4920      	ldr	r1, [pc, #128]	; (800a9a8 <etharp_tmr+0x14c>)
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	4613      	mov	r3, r2
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	4413      	add	r3, r2
 800a930:	00db      	lsls	r3, r3, #3
 800a932:	440b      	add	r3, r1
 800a934:	3314      	adds	r3, #20
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d10a      	bne.n	800a952 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a93c:	491a      	ldr	r1, [pc, #104]	; (800a9a8 <etharp_tmr+0x14c>)
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4613      	mov	r3, r2
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	4413      	add	r3, r2
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	440b      	add	r3, r1
 800a94a:	3314      	adds	r3, #20
 800a94c:	2202      	movs	r2, #2
 800a94e:	701a      	strb	r2, [r3, #0]
 800a950:	e01e      	b.n	800a990 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a952:	4915      	ldr	r1, [pc, #84]	; (800a9a8 <etharp_tmr+0x14c>)
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	4613      	mov	r3, r2
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	4413      	add	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	440b      	add	r3, r1
 800a960:	3314      	adds	r3, #20
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d113      	bne.n	800a990 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a968:	490f      	ldr	r1, [pc, #60]	; (800a9a8 <etharp_tmr+0x14c>)
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	440b      	add	r3, r1
 800a976:	3308      	adds	r3, #8
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	4613      	mov	r3, r2
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	4413      	add	r3, r2
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	4a08      	ldr	r2, [pc, #32]	; (800a9a8 <etharp_tmr+0x14c>)
 800a986:	4413      	add	r3, r2
 800a988:	3304      	adds	r3, #4
 800a98a:	4619      	mov	r1, r3
 800a98c:	f000 fe6e 	bl	800b66c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3301      	adds	r3, #1
 800a994:	607b      	str	r3, [r7, #4]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b09      	cmp	r3, #9
 800a99a:	f77f af65 	ble.w	800a868 <etharp_tmr+0xc>
      }
    }
  }
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	2000071c 	.word	0x2000071c

0800a9ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a9ba:	230a      	movs	r3, #10
 800a9bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a9be:	230a      	movs	r3, #10
 800a9c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a9c2:	230a      	movs	r3, #10
 800a9c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a9ca:	230a      	movs	r3, #10
 800a9cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	83bb      	strh	r3, [r7, #28]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	837b      	strh	r3, [r7, #26]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a9da:	2300      	movs	r3, #0
 800a9dc:	843b      	strh	r3, [r7, #32]
 800a9de:	e0ae      	b.n	800ab3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a9e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a9e4:	49a6      	ldr	r1, [pc, #664]	; (800ac80 <etharp_find_entry+0x2d4>)
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	4413      	add	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	440b      	add	r3, r1
 800a9f0:	3314      	adds	r3, #20
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a9f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a9fa:	2b0a      	cmp	r3, #10
 800a9fc:	d105      	bne.n	800aa0a <etharp_find_entry+0x5e>
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800aa04:	8c3b      	ldrh	r3, [r7, #32]
 800aa06:	847b      	strh	r3, [r7, #34]	; 0x22
 800aa08:	e095      	b.n	800ab36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 8092 	beq.w	800ab36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d009      	beq.n	800aa2c <etharp_find_entry+0x80>
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d806      	bhi.n	800aa2c <etharp_find_entry+0x80>
 800aa1e:	4b99      	ldr	r3, [pc, #612]	; (800ac84 <etharp_find_entry+0x2d8>)
 800aa20:	f44f 7292 	mov.w	r2, #292	; 0x124
 800aa24:	4998      	ldr	r1, [pc, #608]	; (800ac88 <etharp_find_entry+0x2dc>)
 800aa26:	4899      	ldr	r0, [pc, #612]	; (800ac8c <etharp_find_entry+0x2e0>)
 800aa28:	f00b fa36 	bl	8015e98 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d020      	beq.n	800aa74 <etharp_find_entry+0xc8>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6819      	ldr	r1, [r3, #0]
 800aa36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa3a:	4891      	ldr	r0, [pc, #580]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	4413      	add	r3, r2
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	4403      	add	r3, r0
 800aa46:	3304      	adds	r3, #4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	d112      	bne.n	800aa74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00c      	beq.n	800aa6e <etharp_find_entry+0xc2>
 800aa54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa58:	4989      	ldr	r1, [pc, #548]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	4413      	add	r3, r2
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	440b      	add	r3, r1
 800aa64:	3308      	adds	r3, #8
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d102      	bne.n	800aa74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800aa6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aa72:	e100      	b.n	800ac76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d140      	bne.n	800aafc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aa7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa7e:	4980      	ldr	r1, [pc, #512]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aa80:	4613      	mov	r3, r2
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	4413      	add	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	440b      	add	r3, r1
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01a      	beq.n	800aac6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800aa90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa94:	497a      	ldr	r1, [pc, #488]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aa96:	4613      	mov	r3, r2
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	4413      	add	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	440b      	add	r3, r1
 800aaa0:	3312      	adds	r3, #18
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	8bba      	ldrh	r2, [r7, #28]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d845      	bhi.n	800ab36 <etharp_find_entry+0x18a>
            old_queue = i;
 800aaaa:	8c3b      	ldrh	r3, [r7, #32]
 800aaac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800aaae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aab2:	4973      	ldr	r1, [pc, #460]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aab4:	4613      	mov	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	4413      	add	r3, r2
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	440b      	add	r3, r1
 800aabe:	3312      	adds	r3, #18
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	83bb      	strh	r3, [r7, #28]
 800aac4:	e037      	b.n	800ab36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800aac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aaca:	496d      	ldr	r1, [pc, #436]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aacc:	4613      	mov	r3, r2
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	4413      	add	r3, r2
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	440b      	add	r3, r1
 800aad6:	3312      	adds	r3, #18
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	8b7a      	ldrh	r2, [r7, #26]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d82a      	bhi.n	800ab36 <etharp_find_entry+0x18a>
            old_pending = i;
 800aae0:	8c3b      	ldrh	r3, [r7, #32]
 800aae2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800aae4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aae8:	4965      	ldr	r1, [pc, #404]	; (800ac80 <etharp_find_entry+0x2d4>)
 800aaea:	4613      	mov	r3, r2
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	4413      	add	r3, r2
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	440b      	add	r3, r1
 800aaf4:	3312      	adds	r3, #18
 800aaf6:	881b      	ldrh	r3, [r3, #0]
 800aaf8:	837b      	strh	r3, [r7, #26]
 800aafa:	e01c      	b.n	800ab36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d919      	bls.n	800ab36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ab02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab06:	495e      	ldr	r1, [pc, #376]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ab08:	4613      	mov	r3, r2
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	4413      	add	r3, r2
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	440b      	add	r3, r1
 800ab12:	3312      	adds	r3, #18
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	8b3a      	ldrh	r2, [r7, #24]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d80c      	bhi.n	800ab36 <etharp_find_entry+0x18a>
            old_stable = i;
 800ab1c:	8c3b      	ldrh	r3, [r7, #32]
 800ab1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ab20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab24:	4956      	ldr	r1, [pc, #344]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ab26:	4613      	mov	r3, r2
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	4413      	add	r3, r2
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	440b      	add	r3, r1
 800ab30:	3312      	adds	r3, #18
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ab36:	8c3b      	ldrh	r3, [r7, #32]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	843b      	strh	r3, [r7, #32]
 800ab3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ab42:	2b09      	cmp	r3, #9
 800ab44:	f77f af4c 	ble.w	800a9e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	f003 0302 	and.w	r3, r3, #2
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d108      	bne.n	800ab64 <etharp_find_entry+0x1b8>
 800ab52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ab56:	2b0a      	cmp	r3, #10
 800ab58:	d107      	bne.n	800ab6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	f003 0301 	and.w	r3, r3, #1
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d102      	bne.n	800ab6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ab64:	f04f 33ff 	mov.w	r3, #4294967295
 800ab68:	e085      	b.n	800ac76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ab6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ab6e:	2b09      	cmp	r3, #9
 800ab70:	dc02      	bgt.n	800ab78 <etharp_find_entry+0x1cc>
    i = empty;
 800ab72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab74:	843b      	strh	r3, [r7, #32]
 800ab76:	e039      	b.n	800abec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ab78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	dc14      	bgt.n	800abaa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ab80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ab84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab88:	493d      	ldr	r1, [pc, #244]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	4413      	add	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	440b      	add	r3, r1
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d018      	beq.n	800abcc <etharp_find_entry+0x220>
 800ab9a:	4b3a      	ldr	r3, [pc, #232]	; (800ac84 <etharp_find_entry+0x2d8>)
 800ab9c:	f240 126d 	movw	r2, #365	; 0x16d
 800aba0:	493b      	ldr	r1, [pc, #236]	; (800ac90 <etharp_find_entry+0x2e4>)
 800aba2:	483a      	ldr	r0, [pc, #232]	; (800ac8c <etharp_find_entry+0x2e0>)
 800aba4:	f00b f978 	bl	8015e98 <iprintf>
 800aba8:	e010      	b.n	800abcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800abaa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800abae:	2b09      	cmp	r3, #9
 800abb0:	dc02      	bgt.n	800abb8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800abb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abb4:	843b      	strh	r3, [r7, #32]
 800abb6:	e009      	b.n	800abcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800abb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800abbc:	2b09      	cmp	r3, #9
 800abbe:	dc02      	bgt.n	800abc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800abc0:	8bfb      	ldrh	r3, [r7, #30]
 800abc2:	843b      	strh	r3, [r7, #32]
 800abc4:	e002      	b.n	800abcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295
 800abca:	e054      	b.n	800ac76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800abcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800abd0:	2b09      	cmp	r3, #9
 800abd2:	dd06      	ble.n	800abe2 <etharp_find_entry+0x236>
 800abd4:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <etharp_find_entry+0x2d8>)
 800abd6:	f240 127f 	movw	r2, #383	; 0x17f
 800abda:	492e      	ldr	r1, [pc, #184]	; (800ac94 <etharp_find_entry+0x2e8>)
 800abdc:	482b      	ldr	r0, [pc, #172]	; (800ac8c <etharp_find_entry+0x2e0>)
 800abde:	f00b f95b 	bl	8015e98 <iprintf>
    etharp_free_entry(i);
 800abe2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff fe06 	bl	800a7f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800abec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800abf0:	2b09      	cmp	r3, #9
 800abf2:	dd06      	ble.n	800ac02 <etharp_find_entry+0x256>
 800abf4:	4b23      	ldr	r3, [pc, #140]	; (800ac84 <etharp_find_entry+0x2d8>)
 800abf6:	f240 1283 	movw	r2, #387	; 0x183
 800abfa:	4926      	ldr	r1, [pc, #152]	; (800ac94 <etharp_find_entry+0x2e8>)
 800abfc:	4823      	ldr	r0, [pc, #140]	; (800ac8c <etharp_find_entry+0x2e0>)
 800abfe:	f00b f94b 	bl	8015e98 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ac02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac06:	491e      	ldr	r1, [pc, #120]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ac08:	4613      	mov	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	440b      	add	r3, r1
 800ac12:	3314      	adds	r3, #20
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d006      	beq.n	800ac28 <etharp_find_entry+0x27c>
 800ac1a:	4b1a      	ldr	r3, [pc, #104]	; (800ac84 <etharp_find_entry+0x2d8>)
 800ac1c:	f240 1285 	movw	r2, #389	; 0x185
 800ac20:	491d      	ldr	r1, [pc, #116]	; (800ac98 <etharp_find_entry+0x2ec>)
 800ac22:	481a      	ldr	r0, [pc, #104]	; (800ac8c <etharp_find_entry+0x2e0>)
 800ac24:	f00b f938 	bl	8015e98 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00b      	beq.n	800ac46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ac2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	4812      	ldr	r0, [pc, #72]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ac38:	4613      	mov	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	4403      	add	r3, r0
 800ac42:	3304      	adds	r3, #4
 800ac44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ac46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac4a:	490d      	ldr	r1, [pc, #52]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	4413      	add	r3, r2
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	440b      	add	r3, r1
 800ac56:	3312      	adds	r3, #18
 800ac58:	2200      	movs	r2, #0
 800ac5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ac5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac60:	4907      	ldr	r1, [pc, #28]	; (800ac80 <etharp_find_entry+0x2d4>)
 800ac62:	4613      	mov	r3, r2
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	4413      	add	r3, r2
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	440b      	add	r3, r1
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ac72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3728      	adds	r7, #40	; 0x28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2000071c 	.word	0x2000071c
 800ac84:	08018208 	.word	0x08018208
 800ac88:	08018240 	.word	0x08018240
 800ac8c:	08018280 	.word	0x08018280
 800ac90:	080182a8 	.word	0x080182a8
 800ac94:	080182c0 	.word	0x080182c0
 800ac98:	080182d4 	.word	0x080182d4

0800ac9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800acb0:	2b06      	cmp	r3, #6
 800acb2:	d006      	beq.n	800acc2 <etharp_update_arp_entry+0x26>
 800acb4:	4b48      	ldr	r3, [pc, #288]	; (800add8 <etharp_update_arp_entry+0x13c>)
 800acb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800acba:	4948      	ldr	r1, [pc, #288]	; (800addc <etharp_update_arp_entry+0x140>)
 800acbc:	4848      	ldr	r0, [pc, #288]	; (800ade0 <etharp_update_arp_entry+0x144>)
 800acbe:	f00b f8eb 	bl	8015e98 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d012      	beq.n	800acee <etharp_update_arp_entry+0x52>
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00e      	beq.n	800acee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68f9      	ldr	r1, [r7, #12]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f001 f8f6 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800acdc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d105      	bne.n	800acee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800acea:	2be0      	cmp	r3, #224	; 0xe0
 800acec:	d102      	bne.n	800acf4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800acee:	f06f 030f 	mvn.w	r3, #15
 800acf2:	e06c      	b.n	800adce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4619      	mov	r1, r3
 800acfa:	68b8      	ldr	r0, [r7, #8]
 800acfc:	f7ff fe56 	bl	800a9ac <etharp_find_entry>
 800ad00:	4603      	mov	r3, r0
 800ad02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ad04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da02      	bge.n	800ad12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ad0c:	8afb      	ldrh	r3, [r7, #22]
 800ad0e:	b25b      	sxtb	r3, r3
 800ad10:	e05d      	b.n	800adce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ad12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad16:	4933      	ldr	r1, [pc, #204]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ad18:	4613      	mov	r3, r2
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	4413      	add	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	440b      	add	r3, r1
 800ad22:	3314      	adds	r3, #20
 800ad24:	2202      	movs	r2, #2
 800ad26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ad28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad2c:	492d      	ldr	r1, [pc, #180]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ad2e:	4613      	mov	r3, r2
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	4413      	add	r3, r2
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	440b      	add	r3, r1
 800ad38:	3308      	adds	r3, #8
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ad3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad42:	4613      	mov	r3, r2
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	4413      	add	r3, r2
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	4a25      	ldr	r2, [pc, #148]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ad4e:	4413      	add	r3, r2
 800ad50:	3304      	adds	r3, #4
 800ad52:	2206      	movs	r2, #6
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f00b f871 	bl	8015e3e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ad5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad60:	4920      	ldr	r1, [pc, #128]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ad62:	4613      	mov	r3, r2
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4413      	add	r3, r2
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	440b      	add	r3, r1
 800ad6c:	3312      	adds	r3, #18
 800ad6e:	2200      	movs	r2, #0
 800ad70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ad72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad76:	491b      	ldr	r1, [pc, #108]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ad78:	4613      	mov	r3, r2
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	4413      	add	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d021      	beq.n	800adcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ad88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad8c:	4915      	ldr	r1, [pc, #84]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ad8e:	4613      	mov	r3, r2
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	4413      	add	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	440b      	add	r3, r1
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ad9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ada0:	4910      	ldr	r1, [pc, #64]	; (800ade4 <etharp_update_arp_entry+0x148>)
 800ada2:	4613      	mov	r3, r2
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	440b      	add	r3, r1
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800adb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6939      	ldr	r1, [r7, #16]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f00a ff6f 	bl	8015ca4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f003 fb7c 	bl	800e4c4 <pbuf_free>
  }
  return ERR_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	08018208 	.word	0x08018208
 800addc:	08018300 	.word	0x08018300
 800ade0:	08018280 	.word	0x08018280
 800ade4:	2000071c 	.word	0x2000071c

0800ade8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adf0:	2300      	movs	r3, #0
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	e01e      	b.n	800ae34 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800adf6:	4913      	ldr	r1, [pc, #76]	; (800ae44 <etharp_cleanup_netif+0x5c>)
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	440b      	add	r3, r1
 800ae04:	3314      	adds	r3, #20
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00e      	beq.n	800ae2e <etharp_cleanup_netif+0x46>
 800ae10:	490c      	ldr	r1, [pc, #48]	; (800ae44 <etharp_cleanup_netif+0x5c>)
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	4613      	mov	r3, r2
 800ae16:	005b      	lsls	r3, r3, #1
 800ae18:	4413      	add	r3, r2
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	440b      	add	r3, r1
 800ae1e:	3308      	adds	r3, #8
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d102      	bne.n	800ae2e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7ff fce5 	bl	800a7f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	dddd      	ble.n	800adf6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000071c 	.word	0x2000071c

0800ae48 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ae48:	b5b0      	push	{r4, r5, r7, lr}
 800ae4a:	b08a      	sub	sp, #40	; 0x28
 800ae4c:	af04      	add	r7, sp, #16
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d107      	bne.n	800ae68 <etharp_input+0x20>
 800ae58:	4b3d      	ldr	r3, [pc, #244]	; (800af50 <etharp_input+0x108>)
 800ae5a:	f240 228a 	movw	r2, #650	; 0x28a
 800ae5e:	493d      	ldr	r1, [pc, #244]	; (800af54 <etharp_input+0x10c>)
 800ae60:	483d      	ldr	r0, [pc, #244]	; (800af58 <etharp_input+0x110>)
 800ae62:	f00b f819 	bl	8015e98 <iprintf>
 800ae66:	e06f      	b.n	800af48 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae78:	d10c      	bne.n	800ae94 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ae7e:	2b06      	cmp	r3, #6
 800ae80:	d108      	bne.n	800ae94 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d104      	bne.n	800ae94 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d003      	beq.n	800ae9c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f003 fb15 	bl	800e4c4 <pbuf_free>
    return;
 800ae9a:	e055      	b.n	800af48 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	330e      	adds	r3, #14
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	3318      	adds	r3, #24
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d102      	bne.n	800aebc <etharp_input+0x74>
    for_us = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]
 800aeba:	e009      	b.n	800aed0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	3304      	adds	r3, #4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	bf0c      	ite	eq
 800aec8:	2301      	moveq	r3, #1
 800aeca:	2300      	movne	r3, #0
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f103 0208 	add.w	r2, r3, #8
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <etharp_input+0x98>
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <etharp_input+0x9a>
 800aee0:	2302      	movs	r3, #2
 800aee2:	f107 010c 	add.w	r1, r7, #12
 800aee6:	6838      	ldr	r0, [r7, #0]
 800aee8:	f7ff fed8 	bl	800ac9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	88db      	ldrh	r3, [r3, #6]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aef6:	d003      	beq.n	800af00 <etharp_input+0xb8>
 800aef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aefc:	d01e      	beq.n	800af3c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800aefe:	e020      	b.n	800af42 <etharp_input+0xfa>
      if (for_us) {
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d01c      	beq.n	800af40 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800af20:	2102      	movs	r1, #2
 800af22:	9103      	str	r1, [sp, #12]
 800af24:	f107 010c 	add.w	r1, r7, #12
 800af28:	9102      	str	r1, [sp, #8]
 800af2a:	9201      	str	r2, [sp, #4]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	462b      	mov	r3, r5
 800af30:	4622      	mov	r2, r4
 800af32:	4601      	mov	r1, r0
 800af34:	6838      	ldr	r0, [r7, #0]
 800af36:	f000 faeb 	bl	800b510 <etharp_raw>
      break;
 800af3a:	e001      	b.n	800af40 <etharp_input+0xf8>
      break;
 800af3c:	bf00      	nop
 800af3e:	e000      	b.n	800af42 <etharp_input+0xfa>
      break;
 800af40:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f003 fabe 	bl	800e4c4 <pbuf_free>
}
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bdb0      	pop	{r4, r5, r7, pc}
 800af4e:	bf00      	nop
 800af50:	08018208 	.word	0x08018208
 800af54:	08018358 	.word	0x08018358
 800af58:	08018280 	.word	0x08018280

0800af5c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af02      	add	r7, sp, #8
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800af6a:	79fa      	ldrb	r2, [r7, #7]
 800af6c:	4944      	ldr	r1, [pc, #272]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800af6e:	4613      	mov	r3, r2
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	4413      	add	r3, r2
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	440b      	add	r3, r1
 800af78:	3314      	adds	r3, #20
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d806      	bhi.n	800af8e <etharp_output_to_arp_index+0x32>
 800af80:	4b40      	ldr	r3, [pc, #256]	; (800b084 <etharp_output_to_arp_index+0x128>)
 800af82:	f240 22ef 	movw	r2, #751	; 0x2ef
 800af86:	4940      	ldr	r1, [pc, #256]	; (800b088 <etharp_output_to_arp_index+0x12c>)
 800af88:	4840      	ldr	r0, [pc, #256]	; (800b08c <etharp_output_to_arp_index+0x130>)
 800af8a:	f00a ff85 	bl	8015e98 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800af8e:	79fa      	ldrb	r2, [r7, #7]
 800af90:	493b      	ldr	r1, [pc, #236]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800af92:	4613      	mov	r3, r2
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	4413      	add	r3, r2
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	440b      	add	r3, r1
 800af9c:	3314      	adds	r3, #20
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d153      	bne.n	800b04c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800afa4:	79fa      	ldrb	r2, [r7, #7]
 800afa6:	4936      	ldr	r1, [pc, #216]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800afa8:	4613      	mov	r3, r2
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	4413      	add	r3, r2
 800afae:	00db      	lsls	r3, r3, #3
 800afb0:	440b      	add	r3, r1
 800afb2:	3312      	adds	r3, #18
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800afba:	d919      	bls.n	800aff0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800afbc:	79fa      	ldrb	r2, [r7, #7]
 800afbe:	4613      	mov	r3, r2
 800afc0:	005b      	lsls	r3, r3, #1
 800afc2:	4413      	add	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	4a2e      	ldr	r2, [pc, #184]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800afc8:	4413      	add	r3, r2
 800afca:	3304      	adds	r3, #4
 800afcc:	4619      	mov	r1, r3
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 fb4c 	bl	800b66c <etharp_request>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d138      	bne.n	800b04c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800afda:	79fa      	ldrb	r2, [r7, #7]
 800afdc:	4928      	ldr	r1, [pc, #160]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800afde:	4613      	mov	r3, r2
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	440b      	add	r3, r1
 800afe8:	3314      	adds	r3, #20
 800afea:	2203      	movs	r2, #3
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	e02d      	b.n	800b04c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aff0:	79fa      	ldrb	r2, [r7, #7]
 800aff2:	4923      	ldr	r1, [pc, #140]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800aff4:	4613      	mov	r3, r2
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	4413      	add	r3, r2
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	440b      	add	r3, r1
 800affe:	3312      	adds	r3, #18
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b006:	d321      	bcc.n	800b04c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b008:	79fa      	ldrb	r2, [r7, #7]
 800b00a:	4613      	mov	r3, r2
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	4413      	add	r3, r2
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	4a1b      	ldr	r2, [pc, #108]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800b014:	4413      	add	r3, r2
 800b016:	1d19      	adds	r1, r3, #4
 800b018:	79fa      	ldrb	r2, [r7, #7]
 800b01a:	4613      	mov	r3, r2
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	4413      	add	r3, r2
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	3308      	adds	r3, #8
 800b024:	4a16      	ldr	r2, [pc, #88]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800b026:	4413      	add	r3, r2
 800b028:	3304      	adds	r3, #4
 800b02a:	461a      	mov	r2, r3
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 fafb 	bl	800b628 <etharp_request_dst>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b038:	79fa      	ldrb	r2, [r7, #7]
 800b03a:	4911      	ldr	r1, [pc, #68]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800b03c:	4613      	mov	r3, r2
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	4413      	add	r3, r2
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	440b      	add	r3, r1
 800b046:	3314      	adds	r3, #20
 800b048:	2203      	movs	r2, #3
 800b04a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b052:	79fa      	ldrb	r2, [r7, #7]
 800b054:	4613      	mov	r3, r2
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	4413      	add	r3, r2
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	3308      	adds	r3, #8
 800b05e:	4a08      	ldr	r2, [pc, #32]	; (800b080 <etharp_output_to_arp_index+0x124>)
 800b060:	4413      	add	r3, r2
 800b062:	1d1a      	adds	r2, r3, #4
 800b064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4613      	mov	r3, r2
 800b06c:	460a      	mov	r2, r1
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f00a fe17 	bl	8015ca4 <ethernet_output>
 800b076:	4603      	mov	r3, r0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	2000071c 	.word	0x2000071c
 800b084:	08018208 	.word	0x08018208
 800b088:	08018378 	.word	0x08018378
 800b08c:	08018280 	.word	0x08018280

0800b090 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	; 0x28
 800b094:	af02      	add	r7, sp, #8
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <etharp_output+0x24>
 800b0a6:	4b73      	ldr	r3, [pc, #460]	; (800b274 <etharp_output+0x1e4>)
 800b0a8:	f240 321e 	movw	r2, #798	; 0x31e
 800b0ac:	4972      	ldr	r1, [pc, #456]	; (800b278 <etharp_output+0x1e8>)
 800b0ae:	4873      	ldr	r0, [pc, #460]	; (800b27c <etharp_output+0x1ec>)
 800b0b0:	f00a fef2 	bl	8015e98 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <etharp_output+0x38>
 800b0ba:	4b6e      	ldr	r3, [pc, #440]	; (800b274 <etharp_output+0x1e4>)
 800b0bc:	f240 321f 	movw	r2, #799	; 0x31f
 800b0c0:	496f      	ldr	r1, [pc, #444]	; (800b280 <etharp_output+0x1f0>)
 800b0c2:	486e      	ldr	r0, [pc, #440]	; (800b27c <etharp_output+0x1ec>)
 800b0c4:	f00a fee8 	bl	8015e98 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <etharp_output+0x4c>
 800b0ce:	4b69      	ldr	r3, [pc, #420]	; (800b274 <etharp_output+0x1e4>)
 800b0d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b0d4:	496b      	ldr	r1, [pc, #428]	; (800b284 <etharp_output+0x1f4>)
 800b0d6:	4869      	ldr	r0, [pc, #420]	; (800b27c <etharp_output+0x1ec>)
 800b0d8:	f00a fede 	bl	8015e98 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68f9      	ldr	r1, [r7, #12]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fef0 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b0ee:	4b66      	ldr	r3, [pc, #408]	; (800b288 <etharp_output+0x1f8>)
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	e0af      	b.n	800b254 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0fc:	2be0      	cmp	r3, #224	; 0xe0
 800b0fe:	d118      	bne.n	800b132 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b100:	2301      	movs	r3, #1
 800b102:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b104:	2300      	movs	r3, #0
 800b106:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b108:	235e      	movs	r3, #94	; 0x5e
 800b10a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3301      	adds	r3, #1
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b116:	b2db      	uxtb	r3, r3
 800b118:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3302      	adds	r3, #2
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3303      	adds	r3, #3
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b12a:	f107 0310 	add.w	r3, r7, #16
 800b12e:	61fb      	str	r3, [r7, #28]
 800b130:	e090      	b.n	800b254 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3304      	adds	r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	405a      	eors	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3308      	adds	r3, #8
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4013      	ands	r3, r2
 800b146:	2b00      	cmp	r3, #0
 800b148:	d012      	beq.n	800b170 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b150:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b154:	4293      	cmp	r3, r2
 800b156:	d00b      	beq.n	800b170 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	330c      	adds	r3, #12
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	330c      	adds	r3, #12
 800b166:	61bb      	str	r3, [r7, #24]
 800b168:	e002      	b.n	800b170 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b16a:	f06f 0303 	mvn.w	r3, #3
 800b16e:	e07d      	b.n	800b26c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b170:	4b46      	ldr	r3, [pc, #280]	; (800b28c <etharp_output+0x1fc>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	4619      	mov	r1, r3
 800b176:	4a46      	ldr	r2, [pc, #280]	; (800b290 <etharp_output+0x200>)
 800b178:	460b      	mov	r3, r1
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	440b      	add	r3, r1
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	4413      	add	r3, r2
 800b182:	3314      	adds	r3, #20
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d925      	bls.n	800b1d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b18a:	4b40      	ldr	r3, [pc, #256]	; (800b28c <etharp_output+0x1fc>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	4619      	mov	r1, r3
 800b190:	4a3f      	ldr	r2, [pc, #252]	; (800b290 <etharp_output+0x200>)
 800b192:	460b      	mov	r3, r1
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	440b      	add	r3, r1
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	4413      	add	r3, r2
 800b19c:	3308      	adds	r3, #8
 800b19e:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d117      	bne.n	800b1d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4b38      	ldr	r3, [pc, #224]	; (800b28c <etharp_output+0x1fc>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	4937      	ldr	r1, [pc, #220]	; (800b290 <etharp_output+0x200>)
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4403      	add	r3, r0
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	440b      	add	r3, r1
 800b1bc:	3304      	adds	r3, #4
 800b1be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d108      	bne.n	800b1d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b1c4:	4b31      	ldr	r3, [pc, #196]	; (800b28c <etharp_output+0x1fc>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7ff fec5 	bl	800af5c <etharp_output_to_arp_index>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	e04a      	b.n	800b26c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75fb      	strb	r3, [r7, #23]
 800b1da:	e031      	b.n	800b240 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b1dc:	7dfa      	ldrb	r2, [r7, #23]
 800b1de:	492c      	ldr	r1, [pc, #176]	; (800b290 <etharp_output+0x200>)
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	4413      	add	r3, r2
 800b1e6:	00db      	lsls	r3, r3, #3
 800b1e8:	440b      	add	r3, r1
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d923      	bls.n	800b23a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b1f2:	7dfa      	ldrb	r2, [r7, #23]
 800b1f4:	4926      	ldr	r1, [pc, #152]	; (800b290 <etharp_output+0x200>)
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	440b      	add	r3, r1
 800b200:	3308      	adds	r3, #8
 800b202:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d117      	bne.n	800b23a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	6819      	ldr	r1, [r3, #0]
 800b20e:	7dfa      	ldrb	r2, [r7, #23]
 800b210:	481f      	ldr	r0, [pc, #124]	; (800b290 <etharp_output+0x200>)
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	4403      	add	r3, r0
 800b21c:	3304      	adds	r3, #4
 800b21e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b220:	4299      	cmp	r1, r3
 800b222:	d10a      	bne.n	800b23a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b224:	4a19      	ldr	r2, [pc, #100]	; (800b28c <etharp_output+0x1fc>)
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	461a      	mov	r2, r3
 800b22e:	68b9      	ldr	r1, [r7, #8]
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff fe93 	bl	800af5c <etharp_output_to_arp_index>
 800b236:	4603      	mov	r3, r0
 800b238:	e018      	b.n	800b26c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
 800b23c:	3301      	adds	r3, #1
 800b23e:	75fb      	strb	r3, [r7, #23]
 800b240:	7dfb      	ldrb	r3, [r7, #23]
 800b242:	2b09      	cmp	r3, #9
 800b244:	d9ca      	bls.n	800b1dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	69b9      	ldr	r1, [r7, #24]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 f822 	bl	800b294 <etharp_query>
 800b250:	4603      	mov	r3, r0
 800b252:	e00b      	b.n	800b26c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b25a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f00a fd1d 	bl	8015ca4 <ethernet_output>
 800b26a:	4603      	mov	r3, r0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3720      	adds	r7, #32
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	08018208 	.word	0x08018208
 800b278:	08018358 	.word	0x08018358
 800b27c:	08018280 	.word	0x08018280
 800b280:	080183a8 	.word	0x080183a8
 800b284:	08018348 	.word	0x08018348
 800b288:	0801acf8 	.word	0x0801acf8
 800b28c:	2000080c 	.word	0x2000080c
 800b290:	2000071c 	.word	0x2000071c

0800b294 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08c      	sub	sp, #48	; 0x30
 800b298:	af02      	add	r7, sp, #8
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3326      	adds	r3, #38	; 0x26
 800b2a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b2a6:	23ff      	movs	r3, #255	; 0xff
 800b2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68f9      	ldr	r1, [r7, #12]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fe06 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10c      	bne.n	800b2dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2ca:	2be0      	cmp	r3, #224	; 0xe0
 800b2cc:	d006      	beq.n	800b2dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b2dc:	f06f 030f 	mvn.w	r3, #15
 800b2e0:	e102      	b.n	800b4e8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	68b8      	ldr	r0, [r7, #8]
 800b2e8:	f7ff fb60 	bl	800a9ac <etharp_find_entry>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b2f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da02      	bge.n	800b2fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b2f8:	8a7b      	ldrh	r3, [r7, #18]
 800b2fa:	b25b      	sxtb	r3, r3
 800b2fc:	e0f4      	b.n	800b4e8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b2fe:	8a7b      	ldrh	r3, [r7, #18]
 800b300:	2b7e      	cmp	r3, #126	; 0x7e
 800b302:	d906      	bls.n	800b312 <etharp_query+0x7e>
 800b304:	4b7a      	ldr	r3, [pc, #488]	; (800b4f0 <etharp_query+0x25c>)
 800b306:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b30a:	497a      	ldr	r1, [pc, #488]	; (800b4f4 <etharp_query+0x260>)
 800b30c:	487a      	ldr	r0, [pc, #488]	; (800b4f8 <etharp_query+0x264>)
 800b30e:	f00a fdc3 	bl	8015e98 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b312:	8a7b      	ldrh	r3, [r7, #18]
 800b314:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b316:	7c7a      	ldrb	r2, [r7, #17]
 800b318:	4978      	ldr	r1, [pc, #480]	; (800b4fc <etharp_query+0x268>)
 800b31a:	4613      	mov	r3, r2
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	4413      	add	r3, r2
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	440b      	add	r3, r1
 800b324:	3314      	adds	r3, #20
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d115      	bne.n	800b358 <etharp_query+0xc4>
    is_new_entry = 1;
 800b32c:	2301      	movs	r3, #1
 800b32e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b330:	7c7a      	ldrb	r2, [r7, #17]
 800b332:	4972      	ldr	r1, [pc, #456]	; (800b4fc <etharp_query+0x268>)
 800b334:	4613      	mov	r3, r2
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	4413      	add	r3, r2
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	440b      	add	r3, r1
 800b33e:	3314      	adds	r3, #20
 800b340:	2201      	movs	r2, #1
 800b342:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b344:	7c7a      	ldrb	r2, [r7, #17]
 800b346:	496d      	ldr	r1, [pc, #436]	; (800b4fc <etharp_query+0x268>)
 800b348:	4613      	mov	r3, r2
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	4413      	add	r3, r2
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	440b      	add	r3, r1
 800b352:	3308      	adds	r3, #8
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b358:	7c7a      	ldrb	r2, [r7, #17]
 800b35a:	4968      	ldr	r1, [pc, #416]	; (800b4fc <etharp_query+0x268>)
 800b35c:	4613      	mov	r3, r2
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	4413      	add	r3, r2
 800b362:	00db      	lsls	r3, r3, #3
 800b364:	440b      	add	r3, r1
 800b366:	3314      	adds	r3, #20
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d011      	beq.n	800b392 <etharp_query+0xfe>
 800b36e:	7c7a      	ldrb	r2, [r7, #17]
 800b370:	4962      	ldr	r1, [pc, #392]	; (800b4fc <etharp_query+0x268>)
 800b372:	4613      	mov	r3, r2
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	4413      	add	r3, r2
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	440b      	add	r3, r1
 800b37c:	3314      	adds	r3, #20
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d806      	bhi.n	800b392 <etharp_query+0xfe>
 800b384:	4b5a      	ldr	r3, [pc, #360]	; (800b4f0 <etharp_query+0x25c>)
 800b386:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b38a:	495d      	ldr	r1, [pc, #372]	; (800b500 <etharp_query+0x26c>)
 800b38c:	485a      	ldr	r0, [pc, #360]	; (800b4f8 <etharp_query+0x264>)
 800b38e:	f00a fd83 	bl	8015e98 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <etharp_query+0x10a>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10c      	bne.n	800b3b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 f963 	bl	800b66c <etharp_request>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <etharp_query+0x124>
      return result;
 800b3b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3b6:	e097      	b.n	800b4e8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d106      	bne.n	800b3cc <etharp_query+0x138>
 800b3be:	4b4c      	ldr	r3, [pc, #304]	; (800b4f0 <etharp_query+0x25c>)
 800b3c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b3c4:	494f      	ldr	r1, [pc, #316]	; (800b504 <etharp_query+0x270>)
 800b3c6:	484c      	ldr	r0, [pc, #304]	; (800b4f8 <etharp_query+0x264>)
 800b3c8:	f00a fd66 	bl	8015e98 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b3cc:	7c7a      	ldrb	r2, [r7, #17]
 800b3ce:	494b      	ldr	r1, [pc, #300]	; (800b4fc <etharp_query+0x268>)
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	4413      	add	r3, r2
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	440b      	add	r3, r1
 800b3da:	3314      	adds	r3, #20
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d918      	bls.n	800b414 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b3e2:	4a49      	ldr	r2, [pc, #292]	; (800b508 <etharp_query+0x274>)
 800b3e4:	7c7b      	ldrb	r3, [r7, #17]
 800b3e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b3e8:	7c7a      	ldrb	r2, [r7, #17]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	4a41      	ldr	r2, [pc, #260]	; (800b4fc <etharp_query+0x268>)
 800b3f6:	4413      	add	r3, r2
 800b3f8:	1d1a      	adds	r2, r3, #4
 800b3fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	4613      	mov	r3, r2
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	6879      	ldr	r1, [r7, #4]
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f00a fc4c 	bl	8015ca4 <ethernet_output>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b412:	e067      	b.n	800b4e4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b414:	7c7a      	ldrb	r2, [r7, #17]
 800b416:	4939      	ldr	r1, [pc, #228]	; (800b4fc <etharp_query+0x268>)
 800b418:	4613      	mov	r3, r2
 800b41a:	005b      	lsls	r3, r3, #1
 800b41c:	4413      	add	r3, r2
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	440b      	add	r3, r1
 800b422:	3314      	adds	r3, #20
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d15c      	bne.n	800b4e4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b432:	e01c      	b.n	800b46e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	895a      	ldrh	r2, [r3, #10]
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	891b      	ldrh	r3, [r3, #8]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d10a      	bne.n	800b456 <etharp_query+0x1c2>
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d006      	beq.n	800b456 <etharp_query+0x1c2>
 800b448:	4b29      	ldr	r3, [pc, #164]	; (800b4f0 <etharp_query+0x25c>)
 800b44a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b44e:	492f      	ldr	r1, [pc, #188]	; (800b50c <etharp_query+0x278>)
 800b450:	4829      	ldr	r0, [pc, #164]	; (800b4f8 <etharp_query+0x264>)
 800b452:	f00a fd21 	bl	8015e98 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	7b1b      	ldrb	r3, [r3, #12]
 800b45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <etharp_query+0x1d4>
        copy_needed = 1;
 800b462:	2301      	movs	r3, #1
 800b464:	61bb      	str	r3, [r7, #24]
        break;
 800b466:	e005      	b.n	800b474 <etharp_query+0x1e0>
      }
      p = p->next;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1df      	bne.n	800b434 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d007      	beq.n	800b48a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b480:	200e      	movs	r0, #14
 800b482:	f003 fbc3 	bl	800ec0c <pbuf_clone>
 800b486:	61f8      	str	r0, [r7, #28]
 800b488:	e004      	b.n	800b494 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b48e:	69f8      	ldr	r0, [r7, #28]
 800b490:	f003 f8b8 	bl	800e604 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d021      	beq.n	800b4de <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b49a:	7c7a      	ldrb	r2, [r7, #17]
 800b49c:	4917      	ldr	r1, [pc, #92]	; (800b4fc <etharp_query+0x268>)
 800b49e:	4613      	mov	r3, r2
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	4413      	add	r3, r2
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	440b      	add	r3, r1
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00a      	beq.n	800b4c4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b4ae:	7c7a      	ldrb	r2, [r7, #17]
 800b4b0:	4912      	ldr	r1, [pc, #72]	; (800b4fc <etharp_query+0x268>)
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	4413      	add	r3, r2
 800b4b8:	00db      	lsls	r3, r3, #3
 800b4ba:	440b      	add	r3, r1
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f003 f800 	bl	800e4c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800b4c4:	7c7a      	ldrb	r2, [r7, #17]
 800b4c6:	490d      	ldr	r1, [pc, #52]	; (800b4fc <etharp_query+0x268>)
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	4413      	add	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	440b      	add	r3, r1
 800b4d2:	69fa      	ldr	r2, [r7, #28]
 800b4d4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4dc:	e002      	b.n	800b4e4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b4de:	23ff      	movs	r3, #255	; 0xff
 800b4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b4e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3728      	adds	r7, #40	; 0x28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	08018208 	.word	0x08018208
 800b4f4:	080183b4 	.word	0x080183b4
 800b4f8:	08018280 	.word	0x08018280
 800b4fc:	2000071c 	.word	0x2000071c
 800b500:	080183c4 	.word	0x080183c4
 800b504:	080183a8 	.word	0x080183a8
 800b508:	2000080c 	.word	0x2000080c
 800b50c:	080183ec 	.word	0x080183ec

0800b510 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	; 0x28
 800b514:	af02      	add	r7, sp, #8
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <etharp_raw+0x26>
 800b528:	4b3a      	ldr	r3, [pc, #232]	; (800b614 <etharp_raw+0x104>)
 800b52a:	f240 4257 	movw	r2, #1111	; 0x457
 800b52e:	493a      	ldr	r1, [pc, #232]	; (800b618 <etharp_raw+0x108>)
 800b530:	483a      	ldr	r0, [pc, #232]	; (800b61c <etharp_raw+0x10c>)
 800b532:	f00a fcb1 	bl	8015e98 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b536:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b53a:	211c      	movs	r1, #28
 800b53c:	200e      	movs	r0, #14
 800b53e:	f002 fcad 	bl	800de9c <pbuf_alloc>
 800b542:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d102      	bne.n	800b550 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
 800b54e:	e05d      	b.n	800b60c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	895b      	ldrh	r3, [r3, #10]
 800b554:	2b1b      	cmp	r3, #27
 800b556:	d806      	bhi.n	800b566 <etharp_raw+0x56>
 800b558:	4b2e      	ldr	r3, [pc, #184]	; (800b614 <etharp_raw+0x104>)
 800b55a:	f240 4263 	movw	r2, #1123	; 0x463
 800b55e:	4930      	ldr	r1, [pc, #192]	; (800b620 <etharp_raw+0x110>)
 800b560:	482e      	ldr	r0, [pc, #184]	; (800b61c <etharp_raw+0x10c>)
 800b562:	f00a fc99 	bl	8015e98 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b56c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe f918 	bl	80097a4 <lwip_htons>
 800b574:	4603      	mov	r3, r0
 800b576:	461a      	mov	r2, r3
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b582:	2b06      	cmp	r3, #6
 800b584:	d006      	beq.n	800b594 <etharp_raw+0x84>
 800b586:	4b23      	ldr	r3, [pc, #140]	; (800b614 <etharp_raw+0x104>)
 800b588:	f240 426a 	movw	r2, #1130	; 0x46a
 800b58c:	4925      	ldr	r1, [pc, #148]	; (800b624 <etharp_raw+0x114>)
 800b58e:	4823      	ldr	r0, [pc, #140]	; (800b61c <etharp_raw+0x10c>)
 800b590:	f00a fc82 	bl	8015e98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	3308      	adds	r3, #8
 800b598:	2206      	movs	r2, #6
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f00a fc4e 	bl	8015e3e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	3312      	adds	r3, #18
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f00a fc47 	bl	8015e3e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	330e      	adds	r3, #14
 800b5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	3318      	adds	r3, #24
 800b5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f042 0201 	orr.w	r2, r2, #1
 800b5d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f042 0208 	orr.w	r2, r2, #8
 800b5da:	709a      	strb	r2, [r3, #2]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2206      	movs	r2, #6
 800b5e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2204      	movs	r2, #4
 800b5ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b5ec:	f640 0306 	movw	r3, #2054	; 0x806
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	69b9      	ldr	r1, [r7, #24]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f00a fb53 	bl	8015ca4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b5fe:	69b8      	ldr	r0, [r7, #24]
 800b600:	f002 ff60 	bl	800e4c4 <pbuf_free>
  p = NULL;
 800b604:	2300      	movs	r3, #0
 800b606:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b608:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	08018208 	.word	0x08018208
 800b618:	08018358 	.word	0x08018358
 800b61c:	08018280 	.word	0x08018280
 800b620:	08018408 	.word	0x08018408
 800b624:	0801843c 	.word	0x0801843c

0800b628 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b644:	2201      	movs	r2, #1
 800b646:	9203      	str	r2, [sp, #12]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	9202      	str	r2, [sp, #8]
 800b64c:	4a06      	ldr	r2, [pc, #24]	; (800b668 <etharp_request_dst+0x40>)
 800b64e:	9201      	str	r2, [sp, #4]
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4603      	mov	r3, r0
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff ff5a 	bl	800b510 <etharp_raw>
 800b65c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	0801ad00 	.word	0x0801ad00

0800b66c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b676:	4a05      	ldr	r2, [pc, #20]	; (800b68c <etharp_request+0x20>)
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff ffd4 	bl	800b628 <etharp_request_dst>
 800b680:	4603      	mov	r3, r0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	0801acf8 	.word	0x0801acf8

0800b690 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b08e      	sub	sp, #56	; 0x38
 800b694:	af04      	add	r7, sp, #16
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b69a:	4b79      	ldr	r3, [pc, #484]	; (800b880 <icmp_input+0x1f0>)
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f003 030f 	and.w	r3, r3, #15
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b6b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6b2:	2b13      	cmp	r3, #19
 800b6b4:	f240 80cd 	bls.w	800b852 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	895b      	ldrh	r3, [r3, #10]
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	f240 80ca 	bls.w	800b856 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b6cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 80b7 	beq.w	800b844 <icmp_input+0x1b4>
 800b6d6:	2b08      	cmp	r3, #8
 800b6d8:	f040 80b7 	bne.w	800b84a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b6dc:	4b69      	ldr	r3, [pc, #420]	; (800b884 <icmp_input+0x1f4>)
 800b6de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b6e0:	4b67      	ldr	r3, [pc, #412]	; (800b880 <icmp_input+0x1f0>)
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6e8:	2be0      	cmp	r3, #224	; 0xe0
 800b6ea:	f000 80bb 	beq.w	800b864 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b6ee:	4b64      	ldr	r3, [pc, #400]	; (800b880 <icmp_input+0x1f0>)
 800b6f0:	695a      	ldr	r2, [r3, #20]
 800b6f2:	4b63      	ldr	r3, [pc, #396]	; (800b880 <icmp_input+0x1f0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	f000 fbe5 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	f040 80b1 	bne.w	800b868 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	891b      	ldrh	r3, [r3, #8]
 800b70a:	2b07      	cmp	r3, #7
 800b70c:	f240 80a5 	bls.w	800b85a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b712:	330e      	adds	r3, #14
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f002 fe0c 	bl	800e334 <pbuf_add_header>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d04b      	beq.n	800b7ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	891a      	ldrh	r2, [r3, #8]
 800b726:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b728:	4413      	add	r3, r2
 800b72a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	891b      	ldrh	r3, [r3, #8]
 800b730:	8b7a      	ldrh	r2, [r7, #26]
 800b732:	429a      	cmp	r2, r3
 800b734:	f0c0 809a 	bcc.w	800b86c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b738:	8b7b      	ldrh	r3, [r7, #26]
 800b73a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b73e:	4619      	mov	r1, r3
 800b740:	200e      	movs	r0, #14
 800b742:	f002 fbab 	bl	800de9c <pbuf_alloc>
 800b746:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 8090 	beq.w	800b870 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	895b      	ldrh	r3, [r3, #10]
 800b754:	461a      	mov	r2, r3
 800b756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b758:	3308      	adds	r3, #8
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d203      	bcs.n	800b766 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b75e:	6978      	ldr	r0, [r7, #20]
 800b760:	f002 feb0 	bl	800e4c4 <pbuf_free>
          goto icmperr;
 800b764:	e085      	b.n	800b872 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b76c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b76e:	4618      	mov	r0, r3
 800b770:	f00a fb65 	bl	8015e3e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b776:	4619      	mov	r1, r3
 800b778:	6978      	ldr	r0, [r7, #20]
 800b77a:	f002 fdeb 	bl	800e354 <pbuf_remove_header>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d009      	beq.n	800b798 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b784:	4b40      	ldr	r3, [pc, #256]	; (800b888 <icmp_input+0x1f8>)
 800b786:	22b6      	movs	r2, #182	; 0xb6
 800b788:	4940      	ldr	r1, [pc, #256]	; (800b88c <icmp_input+0x1fc>)
 800b78a:	4841      	ldr	r0, [pc, #260]	; (800b890 <icmp_input+0x200>)
 800b78c:	f00a fb84 	bl	8015e98 <iprintf>
          pbuf_free(r);
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f002 fe97 	bl	800e4c4 <pbuf_free>
          goto icmperr;
 800b796:	e06c      	b.n	800b872 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b798:	6879      	ldr	r1, [r7, #4]
 800b79a:	6978      	ldr	r0, [r7, #20]
 800b79c:	f002 ffba 	bl	800e714 <pbuf_copy>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f002 fe8c 	bl	800e4c4 <pbuf_free>
          goto icmperr;
 800b7ac:	e061      	b.n	800b872 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f002 fe88 	bl	800e4c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	607b      	str	r3, [r7, #4]
 800b7b8:	e00f      	b.n	800b7da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b7ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7bc:	330e      	adds	r3, #14
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f002 fdc7 	bl	800e354 <pbuf_remove_header>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d006      	beq.n	800b7da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b7cc:	4b2e      	ldr	r3, [pc, #184]	; (800b888 <icmp_input+0x1f8>)
 800b7ce:	22c7      	movs	r2, #199	; 0xc7
 800b7d0:	4930      	ldr	r1, [pc, #192]	; (800b894 <icmp_input+0x204>)
 800b7d2:	482f      	ldr	r0, [pc, #188]	; (800b890 <icmp_input+0x200>)
 800b7d4:	f00a fb60 	bl	8015e98 <iprintf>
          goto icmperr;
 800b7d8:	e04b      	b.n	800b872 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b7e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f002 fda5 	bl	800e334 <pbuf_add_header>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d12b      	bne.n	800b848 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b7fe:	4b20      	ldr	r3, [pc, #128]	; (800b880 <icmp_input+0x1f0>)
 800b800:	691a      	ldr	r2, [r3, #16]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2200      	movs	r2, #0
 800b80a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	2200      	movs	r2, #0
 800b810:	709a      	strb	r2, [r3, #2]
 800b812:	2200      	movs	r2, #0
 800b814:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	22ff      	movs	r2, #255	; 0xff
 800b81a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	729a      	strb	r2, [r3, #10]
 800b822:	2200      	movs	r2, #0
 800b824:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	2301      	movs	r3, #1
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	2300      	movs	r3, #0
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	23ff      	movs	r3, #255	; 0xff
 800b834:	2200      	movs	r2, #0
 800b836:	69f9      	ldr	r1, [r7, #28]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fa6d 	bl	800bd18 <ip4_output_if>
 800b83e:	4603      	mov	r3, r0
 800b840:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b842:	e001      	b.n	800b848 <icmp_input+0x1b8>
      break;
 800b844:	bf00      	nop
 800b846:	e000      	b.n	800b84a <icmp_input+0x1ba>
      break;
 800b848:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f002 fe3a 	bl	800e4c4 <pbuf_free>
  return;
 800b850:	e013      	b.n	800b87a <icmp_input+0x1ea>
    goto lenerr;
 800b852:	bf00      	nop
 800b854:	e002      	b.n	800b85c <icmp_input+0x1cc>
    goto lenerr;
 800b856:	bf00      	nop
 800b858:	e000      	b.n	800b85c <icmp_input+0x1cc>
        goto lenerr;
 800b85a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f002 fe31 	bl	800e4c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b862:	e00a      	b.n	800b87a <icmp_input+0x1ea>
        goto icmperr;
 800b864:	bf00      	nop
 800b866:	e004      	b.n	800b872 <icmp_input+0x1e2>
        goto icmperr;
 800b868:	bf00      	nop
 800b86a:	e002      	b.n	800b872 <icmp_input+0x1e2>
          goto icmperr;
 800b86c:	bf00      	nop
 800b86e:	e000      	b.n	800b872 <icmp_input+0x1e2>
          goto icmperr;
 800b870:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f002 fe26 	bl	800e4c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b878:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b87a:	3728      	adds	r7, #40	; 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	20005bc4 	.word	0x20005bc4
 800b884:	20005bd8 	.word	0x20005bd8
 800b888:	08018480 	.word	0x08018480
 800b88c:	080184b8 	.word	0x080184b8
 800b890:	080184f0 	.word	0x080184f0
 800b894:	08018518 	.word	0x08018518

0800b898 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	2103      	movs	r1, #3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f814 	bl	800b8d8 <icmp_send_response>
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	210b      	movs	r1, #11
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f804 	bl	800b8d8 <icmp_send_response>
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08c      	sub	sp, #48	; 0x30
 800b8dc:	af04      	add	r7, sp, #16
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	70fb      	strb	r3, [r7, #3]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b8e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8ec:	2124      	movs	r1, #36	; 0x24
 800b8ee:	2022      	movs	r0, #34	; 0x22
 800b8f0:	f002 fad4 	bl	800de9c <pbuf_alloc>
 800b8f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d04c      	beq.n	800b996 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	895b      	ldrh	r3, [r3, #10]
 800b900:	2b23      	cmp	r3, #35	; 0x23
 800b902:	d806      	bhi.n	800b912 <icmp_send_response+0x3a>
 800b904:	4b26      	ldr	r3, [pc, #152]	; (800b9a0 <icmp_send_response+0xc8>)
 800b906:	f240 1269 	movw	r2, #361	; 0x169
 800b90a:	4926      	ldr	r1, [pc, #152]	; (800b9a4 <icmp_send_response+0xcc>)
 800b90c:	4826      	ldr	r0, [pc, #152]	; (800b9a8 <icmp_send_response+0xd0>)
 800b90e:	f00a fac3 	bl	8015e98 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	78fa      	ldrb	r2, [r7, #3]
 800b922:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	78ba      	ldrb	r2, [r7, #2]
 800b928:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2200      	movs	r2, #0
 800b92e:	711a      	strb	r2, [r3, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	2200      	movs	r2, #0
 800b938:	719a      	strb	r2, [r3, #6]
 800b93a:	2200      	movs	r2, #0
 800b93c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f103 0008 	add.w	r0, r3, #8
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	221c      	movs	r2, #28
 800b94c:	4619      	mov	r1, r3
 800b94e:	f00a fa76 	bl	8015e3e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b958:	f107 030c 	add.w	r3, r7, #12
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 f825 	bl	800b9ac <ip4_route>
 800b962:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d011      	beq.n	800b98e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2200      	movs	r2, #0
 800b96e:	709a      	strb	r2, [r3, #2]
 800b970:	2200      	movs	r2, #0
 800b972:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b974:	f107 020c 	add.w	r2, r7, #12
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	9302      	str	r3, [sp, #8]
 800b97c:	2301      	movs	r3, #1
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	2300      	movs	r3, #0
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	23ff      	movs	r3, #255	; 0xff
 800b986:	2100      	movs	r1, #0
 800b988:	69f8      	ldr	r0, [r7, #28]
 800b98a:	f000 f9c5 	bl	800bd18 <ip4_output_if>
  }
  pbuf_free(q);
 800b98e:	69f8      	ldr	r0, [r7, #28]
 800b990:	f002 fd98 	bl	800e4c4 <pbuf_free>
 800b994:	e000      	b.n	800b998 <icmp_send_response+0xc0>
    return;
 800b996:	bf00      	nop
}
 800b998:	3720      	adds	r7, #32
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	08018480 	.word	0x08018480
 800b9a4:	0801854c 	.word	0x0801854c
 800b9a8:	080184f0 	.word	0x080184f0

0800b9ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b9b4:	4b31      	ldr	r3, [pc, #196]	; (800ba7c <ip4_route+0xd0>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60fb      	str	r3, [r7, #12]
 800b9ba:	e033      	b.n	800ba24 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9c2:	f003 0301 	and.w	r3, r3, #1
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d029      	beq.n	800ba1e <ip4_route+0x72>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d022      	beq.n	800ba1e <ip4_route+0x72>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3304      	adds	r3, #4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01d      	beq.n	800ba1e <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	405a      	eors	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	e038      	b.n	800ba70 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d108      	bne.n	800ba1e <ip4_route+0x72>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	330c      	adds	r3, #12
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d101      	bne.n	800ba1e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	e028      	b.n	800ba70 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1c8      	bne.n	800b9bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ba2a:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <ip4_route+0xd4>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d01a      	beq.n	800ba68 <ip4_route+0xbc>
 800ba32:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <ip4_route+0xd4>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d012      	beq.n	800ba68 <ip4_route+0xbc>
 800ba42:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <ip4_route+0xd4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ba52:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <ip4_route+0xd4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3304      	adds	r3, #4
 800ba58:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b7f      	cmp	r3, #127	; 0x7f
 800ba66:	d101      	bne.n	800ba6c <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e001      	b.n	800ba70 <ip4_route+0xc4>
  }

  return netif_default;
 800ba6c:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <ip4_route+0xd4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	2000b698 	.word	0x2000b698
 800ba80:	2000b69c 	.word	0x2000b69c

0800ba84 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d016      	beq.n	800bac8 <ip4_input_accept+0x44>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d011      	beq.n	800bac8 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800baa4:	4b0b      	ldr	r3, [pc, #44]	; (800bad4 <ip4_input_accept+0x50>)
 800baa6:	695a      	ldr	r2, [r3, #20]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d008      	beq.n	800bac4 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bab2:	4b08      	ldr	r3, [pc, #32]	; (800bad4 <ip4_input_accept+0x50>)
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fa05 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800babe:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e000      	b.n	800baca <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20005bc4 	.word	0x20005bc4

0800bad8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	091b      	lsrs	r3, r3, #4
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d004      	beq.n	800bafe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 fce5 	bl	800e4c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	e104      	b.n	800bd08 <ip4_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	f003 030f 	and.w	r3, r3, #15
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	885b      	ldrh	r3, [r3, #2]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fd fe45 	bl	80097a4 <lwip_htons>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	891b      	ldrh	r3, [r3, #8]
 800bb22:	89ba      	ldrh	r2, [r7, #12]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d204      	bcs.n	800bb32 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bb28:	89bb      	ldrh	r3, [r7, #12]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f002 fb0f 	bl	800e150 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	895b      	ldrh	r3, [r3, #10]
 800bb36:	89fa      	ldrh	r2, [r7, #14]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d807      	bhi.n	800bb4c <ip4_input+0x74>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	891b      	ldrh	r3, [r3, #8]
 800bb40:	89ba      	ldrh	r2, [r7, #12]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d802      	bhi.n	800bb4c <ip4_input+0x74>
 800bb46:	89fb      	ldrh	r3, [r7, #14]
 800bb48:	2b13      	cmp	r3, #19
 800bb4a:	d804      	bhi.n	800bb56 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f002 fcb9 	bl	800e4c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e0d8      	b.n	800bd08 <ip4_input+0x230>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	4a6d      	ldr	r2, [pc, #436]	; (800bd10 <ip4_input+0x238>)
 800bb5c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	4a6b      	ldr	r2, [pc, #428]	; (800bd10 <ip4_input+0x238>)
 800bb64:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb66:	4b6a      	ldr	r3, [pc, #424]	; (800bd10 <ip4_input+0x238>)
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb6e:	2be0      	cmp	r3, #224	; 0xe0
 800bb70:	d111      	bne.n	800bb96 <ip4_input+0xbe>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d007      	beq.n	800bb90 <ip4_input+0xb8>
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	3304      	adds	r3, #4
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <ip4_input+0xb8>
      netif = inp;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	e02a      	b.n	800bbe6 <ip4_input+0x10e>
    } else {
      netif = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	613b      	str	r3, [r7, #16]
 800bb94:	e027      	b.n	800bbe6 <ip4_input+0x10e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800bb96:	6838      	ldr	r0, [r7, #0]
 800bb98:	f7ff ff74 	bl	800ba84 <ip4_input_accept>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <ip4_input+0xd0>
      netif = inp;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	613b      	str	r3, [r7, #16]
 800bba6:	e01e      	b.n	800bbe6 <ip4_input+0x10e>
    } else {
      netif = NULL;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bbac:	4b58      	ldr	r3, [pc, #352]	; (800bd10 <ip4_input+0x238>)
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b7f      	cmp	r3, #127	; 0x7f
 800bbb4:	d017      	beq.n	800bbe6 <ip4_input+0x10e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800bbb6:	4b57      	ldr	r3, [pc, #348]	; (800bd14 <ip4_input+0x23c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	613b      	str	r3, [r7, #16]
 800bbbc:	e00e      	b.n	800bbdc <ip4_input+0x104>
          if (netif == inp) {
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d006      	beq.n	800bbd4 <ip4_input+0xfc>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800bbc6:	6938      	ldr	r0, [r7, #16]
 800bbc8:	f7ff ff5c 	bl	800ba84 <ip4_input_accept>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d108      	bne.n	800bbe4 <ip4_input+0x10c>
 800bbd2:	e000      	b.n	800bbd6 <ip4_input+0xfe>
            continue;
 800bbd4:	bf00      	nop
        NETIF_FOREACH(netif) {
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1ed      	bne.n	800bbbe <ip4_input+0xe6>
 800bbe2:	e000      	b.n	800bbe6 <ip4_input+0x10e>
            break;
 800bbe4:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bbe6:	4b4a      	ldr	r3, [pc, #296]	; (800bd10 <ip4_input+0x238>)
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 f96b 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d105      	bne.n	800bc04 <ip4_input+0x12c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bbf8:	4b45      	ldr	r3, [pc, #276]	; (800bd10 <ip4_input+0x238>)
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bc00:	2be0      	cmp	r3, #224	; 0xe0
 800bc02:	d104      	bne.n	800bc0e <ip4_input+0x136>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f002 fc5d 	bl	800e4c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e07c      	b.n	800bd08 <ip4_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d104      	bne.n	800bc1e <ip4_input+0x146>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f002 fc55 	bl	800e4c4 <pbuf_free>
    return ERR_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e074      	b.n	800bd08 <ip4_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	88db      	ldrh	r3, [r3, #6]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	461a      	mov	r2, r3
 800bc26:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <ip4_input+0x170>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fe53 	bl	800c8dc <ip4_reass>
 800bc36:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <ip4_input+0x16a>
      return ERR_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e062      	b.n	800bd08 <ip4_input+0x230>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bc48:	4a31      	ldr	r2, [pc, #196]	; (800bd10 <ip4_input+0x238>)
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bc4e:	4a30      	ldr	r2, [pc, #192]	; (800bd10 <ip4_input+0x238>)
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bc54:	4a2e      	ldr	r2, [pc, #184]	; (800bd10 <ip4_input+0x238>)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 030f 	and.w	r3, r3, #15
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	4b29      	ldr	r3, [pc, #164]	; (800bd10 <ip4_input+0x238>)
 800bc6c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800bc6e:	89fb      	ldrh	r3, [r7, #14]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f002 fb6e 	bl	800e354 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	7a5b      	ldrb	r3, [r3, #9]
 800bc7c:	2b06      	cmp	r3, #6
 800bc7e:	d009      	beq.n	800bc94 <ip4_input+0x1bc>
 800bc80:	2b11      	cmp	r3, #17
 800bc82:	d002      	beq.n	800bc8a <ip4_input+0x1b2>
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d00a      	beq.n	800bc9e <ip4_input+0x1c6>
 800bc88:	e00e      	b.n	800bca8 <ip4_input+0x1d0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f009 fb71 	bl	8015374 <udp_input>
        break;
 800bc92:	e026      	b.n	800bce2 <ip4_input+0x20a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f004 ff16 	bl	8010ac8 <tcp_input>
        break;
 800bc9c:	e021      	b.n	800bce2 <ip4_input+0x20a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff fcf5 	bl	800b690 <icmp_input>
        break;
 800bca6:	e01c      	b.n	800bce2 <ip4_input+0x20a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bca8:	4b19      	ldr	r3, [pc, #100]	; (800bd10 <ip4_input+0x238>)
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	6939      	ldr	r1, [r7, #16]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f90a 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10f      	bne.n	800bcda <ip4_input+0x202>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bcba:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <ip4_input+0x238>)
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bcc2:	2be0      	cmp	r3, #224	; 0xe0
 800bcc4:	d009      	beq.n	800bcda <ip4_input+0x202>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800bcc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f002 fbb4 	bl	800e43a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bcd2:	2102      	movs	r1, #2
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff fddf 	bl	800b898 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f002 fbf2 	bl	800e4c4 <pbuf_free>
        break;
 800bce0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bce2:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <ip4_input+0x238>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bce8:	4b09      	ldr	r3, [pc, #36]	; (800bd10 <ip4_input+0x238>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bcee:	4b08      	ldr	r3, [pc, #32]	; (800bd10 <ip4_input+0x238>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bcf4:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <ip4_input+0x238>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bcfa:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <ip4_input+0x238>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bd00:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <ip4_input+0x238>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20005bc4 	.word	0x20005bc4
 800bd14:	2000b698 	.word	0x2000b698

0800bd18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af04      	add	r7, sp, #16
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <ip4_output_if+0x26>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	3304      	adds	r3, #4
 800bd42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bd44:	78fa      	ldrb	r2, [r7, #3]
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	9302      	str	r3, [sp, #8]
 800bd4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4613      	mov	r3, r2
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6979      	ldr	r1, [r7, #20]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f805 	bl	800bd6c <ip4_output_if_src>
 800bd62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	7b9b      	ldrb	r3, [r3, #14]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d006      	beq.n	800bd90 <ip4_output_if_src+0x24>
 800bd82:	4b4b      	ldr	r3, [pc, #300]	; (800beb0 <ip4_output_if_src+0x144>)
 800bd84:	f44f 7255 	mov.w	r2, #852	; 0x354
 800bd88:	494a      	ldr	r1, [pc, #296]	; (800beb4 <ip4_output_if_src+0x148>)
 800bd8a:	484b      	ldr	r0, [pc, #300]	; (800beb8 <ip4_output_if_src+0x14c>)
 800bd8c:	f00a f884 	bl	8015e98 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d060      	beq.n	800be58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bd96:	2314      	movs	r3, #20
 800bd98:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bd9a:	2114      	movs	r1, #20
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f002 fac9 	bl	800e334 <pbuf_add_header>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bda8:	f06f 0301 	mvn.w	r3, #1
 800bdac:	e07c      	b.n	800bea8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	895b      	ldrh	r3, [r3, #10]
 800bdb8:	2b13      	cmp	r3, #19
 800bdba:	d806      	bhi.n	800bdca <ip4_output_if_src+0x5e>
 800bdbc:	4b3c      	ldr	r3, [pc, #240]	; (800beb0 <ip4_output_if_src+0x144>)
 800bdbe:	f240 3289 	movw	r2, #905	; 0x389
 800bdc2:	493e      	ldr	r1, [pc, #248]	; (800bebc <ip4_output_if_src+0x150>)
 800bdc4:	483c      	ldr	r0, [pc, #240]	; (800beb8 <ip4_output_if_src+0x14c>)
 800bdc6:	f00a f867 	bl	8015e98 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bdd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bde0:	8bfb      	ldrh	r3, [r7, #30]
 800bde2:	089b      	lsrs	r3, r3, #2
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bdf8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	891b      	ldrh	r3, [r3, #8]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fd fcd0 	bl	80097a4 <lwip_htons>
 800be04:	4603      	mov	r3, r0
 800be06:	461a      	mov	r2, r3
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	2200      	movs	r2, #0
 800be10:	719a      	strb	r2, [r3, #6]
 800be12:	2200      	movs	r2, #0
 800be14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800be16:	4b2a      	ldr	r3, [pc, #168]	; (800bec0 <ip4_output_if_src+0x154>)
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fd fcc2 	bl	80097a4 <lwip_htons>
 800be20:	4603      	mov	r3, r0
 800be22:	461a      	mov	r2, r3
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800be28:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <ip4_output_if_src+0x154>)
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	3301      	adds	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	4b23      	ldr	r3, [pc, #140]	; (800bec0 <ip4_output_if_src+0x154>)
 800be32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800be3a:	4b22      	ldr	r3, [pc, #136]	; (800bec4 <ip4_output_if_src+0x158>)
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	60da      	str	r2, [r3, #12]
 800be42:	e003      	b.n	800be4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	2200      	movs	r2, #0
 800be50:	729a      	strb	r2, [r3, #10]
 800be52:	2200      	movs	r2, #0
 800be54:	72da      	strb	r2, [r3, #11]
 800be56:	e00f      	b.n	800be78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	895b      	ldrh	r3, [r3, #10]
 800be5c:	2b13      	cmp	r3, #19
 800be5e:	d802      	bhi.n	800be66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800be60:	f06f 0301 	mvn.w	r3, #1
 800be64:	e020      	b.n	800bea8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800be72:	f107 0314 	add.w	r3, r7, #20
 800be76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00c      	beq.n	800be9a <ip4_output_if_src+0x12e>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	891a      	ldrh	r2, [r3, #8]
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be88:	429a      	cmp	r2, r3
 800be8a:	d906      	bls.n	800be9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 ff0b 	bl	800ccac <ip4_frag>
 800be96:	4603      	mov	r3, r0
 800be98:	e006      	b.n	800bea8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	68f9      	ldr	r1, [r7, #12]
 800bea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bea4:	4798      	blx	r3
 800bea6:	4603      	mov	r3, r0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3720      	adds	r7, #32
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	08018578 	.word	0x08018578
 800beb4:	080185ac 	.word	0x080185ac
 800beb8:	080185b8 	.word	0x080185b8
 800bebc:	080185e0 	.word	0x080185e0
 800bec0:	2000080e 	.word	0x2000080e
 800bec4:	0801ac1c 	.word	0x0801ac1c

0800bec8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d002      	beq.n	800bee4 <ip4_addr_isbroadcast_u32+0x1c>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e02a      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e021      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	3304      	adds	r3, #4
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d101      	bne.n	800bf0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e019      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	3304      	adds	r3, #4
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	405a      	eors	r2, r3
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	3308      	adds	r3, #8
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10d      	bne.n	800bf3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	43da      	mvns	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d101      	bne.n	800bf3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e000      	b.n	800bf3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bf3c:	2300      	movs	r3, #0
  }
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
	...

0800bf4c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800bf4c:	b5b0      	push	{r4, r5, r7, lr}
 800bf4e:	b08a      	sub	sp, #40	; 0x28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800bf56:	f107 030c 	add.w	r3, r7, #12
 800bf5a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800bf64:	f009 ff3c 	bl	8015de0 <__locale_ctype_ptr>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf6e:	3301      	adds	r3, #1
 800bf70:	4413      	add	r3, r2
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d101      	bne.n	800bf80 <ip4addr_aton+0x34>
      return 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e10d      	b.n	800c19c <ip4addr_aton+0x250>
    }
    val = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800bf84:	230a      	movs	r3, #10
 800bf86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800bf8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf8e:	2b30      	cmp	r3, #48	; 0x30
 800bf90:	d11c      	bne.n	800bfcc <ip4addr_aton+0x80>
      c = *++cp;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	3301      	adds	r3, #1
 800bf96:	607b      	str	r3, [r7, #4]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800bfa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfa4:	2b78      	cmp	r3, #120	; 0x78
 800bfa6:	d003      	beq.n	800bfb0 <ip4addr_aton+0x64>
 800bfa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfac:	2b58      	cmp	r3, #88	; 0x58
 800bfae:	d10a      	bne.n	800bfc6 <ip4addr_aton+0x7a>
        base = 16;
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	607b      	str	r3, [r7, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bfc4:	e002      	b.n	800bfcc <ip4addr_aton+0x80>
      } else {
        base = 8;
 800bfc6:	2308      	movs	r3, #8
 800bfc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800bfcc:	f009 ff08 	bl	8015de0 <__locale_ctype_ptr>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	4413      	add	r3, r2
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d011      	beq.n	800c008 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 800bfe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfea:	fb02 f203 	mul.w	r2, r2, r3
 800bfee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bff2:	4413      	add	r3, r2
 800bff4:	3b30      	subs	r3, #48	; 0x30
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3301      	adds	r3, #1
 800bffc:	607b      	str	r3, [r7, #4]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c006:	e7e1      	b.n	800bfcc <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800c008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c00c:	2b10      	cmp	r3, #16
 800c00e:	d12b      	bne.n	800c068 <ip4addr_aton+0x11c>
 800c010:	f009 fee6 	bl	8015de0 <__locale_ctype_ptr>
 800c014:	4602      	mov	r2, r0
 800c016:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c01a:	3301      	adds	r3, #1
 800c01c:	4413      	add	r3, r2
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c024:	2b00      	cmp	r3, #0
 800c026:	d01f      	beq.n	800c068 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	011c      	lsls	r4, r3, #4
 800c02c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c030:	f103 050a 	add.w	r5, r3, #10
 800c034:	f009 fed4 	bl	8015de0 <__locale_ctype_ptr>
 800c038:	4602      	mov	r2, r0
 800c03a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c03e:	3301      	adds	r3, #1
 800c040:	4413      	add	r3, r2
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	f003 0303 	and.w	r3, r3, #3
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d101      	bne.n	800c050 <ip4addr_aton+0x104>
 800c04c:	2361      	movs	r3, #97	; 0x61
 800c04e:	e000      	b.n	800c052 <ip4addr_aton+0x106>
 800c050:	2341      	movs	r3, #65	; 0x41
 800c052:	1aeb      	subs	r3, r5, r3
 800c054:	4323      	orrs	r3, r4
 800c056:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3301      	adds	r3, #1
 800c05c:	607b      	str	r3, [r7, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 800c066:	e7b1      	b.n	800bfcc <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 800c068:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c06c:	2b2e      	cmp	r3, #46	; 0x2e
 800c06e:	d114      	bne.n	800c09a <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800c070:	f107 030c 	add.w	r3, r7, #12
 800c074:	330c      	adds	r3, #12
 800c076:	69fa      	ldr	r2, [r7, #28]
 800c078:	4293      	cmp	r3, r2
 800c07a:	d801      	bhi.n	800c080 <ip4addr_aton+0x134>
        return 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	e08d      	b.n	800c19c <ip4addr_aton+0x250>
      }
      *pp++ = val;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	61fa      	str	r2, [r7, #28]
 800c086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c088:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3301      	adds	r3, #1
 800c08e:	607b      	str	r3, [r7, #4]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 800c098:	e764      	b.n	800bf64 <ip4addr_aton+0x18>
    } else {
      break;
 800c09a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800c09c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00d      	beq.n	800c0c0 <ip4addr_aton+0x174>
 800c0a4:	f009 fe9c 	bl	8015de0 <__locale_ctype_ptr>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <ip4addr_aton+0x174>
    return 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	e06d      	b.n	800c19c <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	109b      	asrs	r3, r3, #2
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	2b04      	cmp	r3, #4
 800c0ce:	d853      	bhi.n	800c178 <ip4addr_aton+0x22c>
 800c0d0:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <ip4addr_aton+0x18c>)
 800c0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d6:	bf00      	nop
 800c0d8:	0800c0ed 	.word	0x0800c0ed
 800c0dc:	0800c187 	.word	0x0800c187
 800c0e0:	0800c0f1 	.word	0x0800c0f1
 800c0e4:	0800c113 	.word	0x0800c113
 800c0e8:	0800c141 	.word	0x0800c141

    case 0:
      return 0;       /* initial nondigit */
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e055      	b.n	800c19c <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0f6:	d301      	bcc.n	800c0fc <ip4addr_aton+0x1b0>
        return 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e04f      	b.n	800c19c <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2bff      	cmp	r3, #255	; 0xff
 800c100:	d901      	bls.n	800c106 <ip4addr_aton+0x1ba>
        return 0;
 800c102:	2300      	movs	r3, #0
 800c104:	e04a      	b.n	800c19c <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	061b      	lsls	r3, r3, #24
 800c10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c10c:	4313      	orrs	r3, r2
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c110:	e03a      	b.n	800c188 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c118:	d301      	bcc.n	800c11e <ip4addr_aton+0x1d2>
        return 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	e03e      	b.n	800c19c <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2bff      	cmp	r3, #255	; 0xff
 800c122:	d802      	bhi.n	800c12a <ip4addr_aton+0x1de>
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	2bff      	cmp	r3, #255	; 0xff
 800c128:	d901      	bls.n	800c12e <ip4addr_aton+0x1e2>
        return 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	e036      	b.n	800c19c <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	061a      	lsls	r2, r3, #24
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	041b      	lsls	r3, r3, #16
 800c136:	4313      	orrs	r3, r2
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	4313      	orrs	r3, r2
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c13e:	e023      	b.n	800c188 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	2bff      	cmp	r3, #255	; 0xff
 800c144:	d901      	bls.n	800c14a <ip4addr_aton+0x1fe>
        return 0;
 800c146:	2300      	movs	r3, #0
 800c148:	e028      	b.n	800c19c <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2bff      	cmp	r3, #255	; 0xff
 800c14e:	d805      	bhi.n	800c15c <ip4addr_aton+0x210>
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2bff      	cmp	r3, #255	; 0xff
 800c154:	d802      	bhi.n	800c15c <ip4addr_aton+0x210>
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2bff      	cmp	r3, #255	; 0xff
 800c15a:	d901      	bls.n	800c160 <ip4addr_aton+0x214>
        return 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	e01d      	b.n	800c19c <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	061a      	lsls	r2, r3, #24
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	041b      	lsls	r3, r3, #16
 800c168:	431a      	orrs	r2, r3
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	021b      	lsls	r3, r3, #8
 800c16e:	4313      	orrs	r3, r2
 800c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c172:	4313      	orrs	r3, r2
 800c174:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c176:	e007      	b.n	800c188 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <ip4addr_aton+0x258>)
 800c17a:	22f9      	movs	r2, #249	; 0xf9
 800c17c:	490a      	ldr	r1, [pc, #40]	; (800c1a8 <ip4addr_aton+0x25c>)
 800c17e:	480b      	ldr	r0, [pc, #44]	; (800c1ac <ip4addr_aton+0x260>)
 800c180:	f009 fe8a 	bl	8015e98 <iprintf>
      break;
 800c184:	e000      	b.n	800c188 <ip4addr_aton+0x23c>
      break;
 800c186:	bf00      	nop
  }
  if (addr) {
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d005      	beq.n	800c19a <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800c18e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c190:	f7fd fb1d 	bl	80097ce <lwip_htonl>
 800c194:	4602      	mov	r2, r0
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800c19a:	2301      	movs	r3, #1
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3728      	adds	r7, #40	; 0x28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c1a4:	08018610 	.word	0x08018610
 800c1a8:	0801864c 	.word	0x0801864c
 800c1ac:	08018658 	.word	0x08018658

0800c1b0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800c1b8:	2210      	movs	r2, #16
 800c1ba:	4904      	ldr	r1, [pc, #16]	; (800c1cc <ip4addr_ntoa+0x1c>)
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f807 	bl	800c1d0 <ip4addr_ntoa_r>
 800c1c2:	4603      	mov	r3, r0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	20000810 	.word	0x20000810

0800c1d0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b08d      	sub	sp, #52	; 0x34
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800c1ea:	f107 0318 	add.w	r3, r7, #24
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1f6:	e059      	b.n	800c2ac <ip4addr_ntoa_r+0xdc>
    i = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	781a      	ldrb	r2, [r3, #0]
 800c202:	4b33      	ldr	r3, [pc, #204]	; (800c2d0 <ip4addr_ntoa_r+0x100>)
 800c204:	fba3 1302 	umull	r1, r3, r3, r2
 800c208:	08d9      	lsrs	r1, r3, #3
 800c20a:	460b      	mov	r3, r1
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	440b      	add	r3, r1
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	4a2d      	ldr	r2, [pc, #180]	; (800c2d0 <ip4addr_ntoa_r+0x100>)
 800c21c:	fba2 2303 	umull	r2, r3, r2, r3
 800c220:	08db      	lsrs	r3, r3, #3
 800c222:	b2da      	uxtb	r2, r3
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800c228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800c232:	4619      	mov	r1, r3
 800c234:	7ffb      	ldrb	r3, [r7, #31]
 800c236:	3330      	adds	r3, #48	; 0x30
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c23e:	440b      	add	r3, r1
 800c240:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1d8      	bne.n	800c1fe <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800c24c:	e012      	b.n	800c274 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	623a      	str	r2, [r7, #32]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	4293      	cmp	r3, r2
 800c258:	db01      	blt.n	800c25e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800c25a:	2300      	movs	r3, #0
 800c25c:	e031      	b.n	800c2c2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c264:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c268:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800c26c:	440a      	add	r2, r1
 800c26e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800c272:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800c274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c278:	1e5a      	subs	r2, r3, #1
 800c27a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e5      	bne.n	800c24e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	623a      	str	r2, [r7, #32]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	4293      	cmp	r3, r2
 800c28c:	db01      	blt.n	800c292 <ip4addr_ntoa_r+0xc2>
      return NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	e017      	b.n	800c2c2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c298:	222e      	movs	r2, #46	; 0x2e
 800c29a:	701a      	strb	r2, [r3, #0]
    ap++;
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	3301      	adds	r3, #1
 800c2a0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800c2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	d9a1      	bls.n	800c1f8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]
  return buf;
 800c2c0:	68bb      	ldr	r3, [r7, #8]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3734      	adds	r7, #52	; 0x34
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	cccccccd 	.word	0xcccccccd

0800c2d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c2de:	4b12      	ldr	r3, [pc, #72]	; (800c328 <ip_reass_tmr+0x54>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c2e4:	e018      	b.n	800c318 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	7fdb      	ldrb	r3, [r3, #31]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00b      	beq.n	800c306 <ip_reass_tmr+0x32>
      r->timer--;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	7fdb      	ldrb	r3, [r3, #31]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	e008      	b.n	800c318 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c310:	68b9      	ldr	r1, [r7, #8]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f80a 	bl	800c32c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1e3      	bne.n	800c2e6 <ip_reass_tmr+0x12>
    }
  }
}
 800c31e:	bf00      	nop
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20000820 	.word	0x20000820

0800c32c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b088      	sub	sp, #32
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d105      	bne.n	800c34e <ip_reass_free_complete_datagram+0x22>
 800c342:	4b45      	ldr	r3, [pc, #276]	; (800c458 <ip_reass_free_complete_datagram+0x12c>)
 800c344:	22ab      	movs	r2, #171	; 0xab
 800c346:	4945      	ldr	r1, [pc, #276]	; (800c45c <ip_reass_free_complete_datagram+0x130>)
 800c348:	4845      	ldr	r0, [pc, #276]	; (800c460 <ip_reass_free_complete_datagram+0x134>)
 800c34a:	f009 fda5 	bl	8015e98 <iprintf>
  if (prev != NULL) {
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00a      	beq.n	800c36a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d005      	beq.n	800c36a <ip_reass_free_complete_datagram+0x3e>
 800c35e:	4b3e      	ldr	r3, [pc, #248]	; (800c458 <ip_reass_free_complete_datagram+0x12c>)
 800c360:	22ad      	movs	r2, #173	; 0xad
 800c362:	4940      	ldr	r1, [pc, #256]	; (800c464 <ip_reass_free_complete_datagram+0x138>)
 800c364:	483e      	ldr	r0, [pc, #248]	; (800c460 <ip_reass_free_complete_datagram+0x134>)
 800c366:	f009 fd97 	bl	8015e98 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	889b      	ldrh	r3, [r3, #4]
 800c376:	b29b      	uxth	r3, r3
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d12a      	bne.n	800c3d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	6858      	ldr	r0, [r3, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3308      	adds	r3, #8
 800c392:	2214      	movs	r2, #20
 800c394:	4619      	mov	r1, r3
 800c396:	f009 fd52 	bl	8015e3e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c39a:	2101      	movs	r1, #1
 800c39c:	69b8      	ldr	r0, [r7, #24]
 800c39e:	f7ff fa8b 	bl	800b8b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c3a2:	69b8      	ldr	r0, [r7, #24]
 800c3a4:	f002 f916 	bl	800e5d4 <pbuf_clen>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c3ac:	8bfa      	ldrh	r2, [r7, #30]
 800c3ae:	8a7b      	ldrh	r3, [r7, #18]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b6:	db05      	blt.n	800c3c4 <ip_reass_free_complete_datagram+0x98>
 800c3b8:	4b27      	ldr	r3, [pc, #156]	; (800c458 <ip_reass_free_complete_datagram+0x12c>)
 800c3ba:	22bc      	movs	r2, #188	; 0xbc
 800c3bc:	492a      	ldr	r1, [pc, #168]	; (800c468 <ip_reass_free_complete_datagram+0x13c>)
 800c3be:	4828      	ldr	r0, [pc, #160]	; (800c460 <ip_reass_free_complete_datagram+0x134>)
 800c3c0:	f009 fd6a 	bl	8015e98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c3c4:	8bfa      	ldrh	r2, [r7, #30]
 800c3c6:	8a7b      	ldrh	r3, [r7, #18]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c3cc:	69b8      	ldr	r0, [r7, #24]
 800c3ce:	f002 f879 	bl	800e4c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c3d8:	e01f      	b.n	800c41a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f002 f8f2 	bl	800e5d4 <pbuf_clen>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c3f4:	8bfa      	ldrh	r2, [r7, #30]
 800c3f6:	8a7b      	ldrh	r3, [r7, #18]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fe:	db05      	blt.n	800c40c <ip_reass_free_complete_datagram+0xe0>
 800c400:	4b15      	ldr	r3, [pc, #84]	; (800c458 <ip_reass_free_complete_datagram+0x12c>)
 800c402:	22cc      	movs	r2, #204	; 0xcc
 800c404:	4918      	ldr	r1, [pc, #96]	; (800c468 <ip_reass_free_complete_datagram+0x13c>)
 800c406:	4816      	ldr	r0, [pc, #88]	; (800c460 <ip_reass_free_complete_datagram+0x134>)
 800c408:	f009 fd46 	bl	8015e98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c40c:	8bfa      	ldrh	r2, [r7, #30]
 800c40e:	8a7b      	ldrh	r3, [r7, #18]
 800c410:	4413      	add	r3, r2
 800c412:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f002 f855 	bl	800e4c4 <pbuf_free>
  while (p != NULL) {
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1dc      	bne.n	800c3da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f8c2 	bl	800c5ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c428:	4b10      	ldr	r3, [pc, #64]	; (800c46c <ip_reass_free_complete_datagram+0x140>)
 800c42a:	881b      	ldrh	r3, [r3, #0]
 800c42c:	8bfa      	ldrh	r2, [r7, #30]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d905      	bls.n	800c43e <ip_reass_free_complete_datagram+0x112>
 800c432:	4b09      	ldr	r3, [pc, #36]	; (800c458 <ip_reass_free_complete_datagram+0x12c>)
 800c434:	22d2      	movs	r2, #210	; 0xd2
 800c436:	490e      	ldr	r1, [pc, #56]	; (800c470 <ip_reass_free_complete_datagram+0x144>)
 800c438:	4809      	ldr	r0, [pc, #36]	; (800c460 <ip_reass_free_complete_datagram+0x134>)
 800c43a:	f009 fd2d 	bl	8015e98 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c43e:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <ip_reass_free_complete_datagram+0x140>)
 800c440:	881a      	ldrh	r2, [r3, #0]
 800c442:	8bfb      	ldrh	r3, [r7, #30]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	b29a      	uxth	r2, r3
 800c448:	4b08      	ldr	r3, [pc, #32]	; (800c46c <ip_reass_free_complete_datagram+0x140>)
 800c44a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c44c:	8bfb      	ldrh	r3, [r7, #30]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3720      	adds	r7, #32
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	08018680 	.word	0x08018680
 800c45c:	080186bc 	.word	0x080186bc
 800c460:	080186c8 	.word	0x080186c8
 800c464:	080186f0 	.word	0x080186f0
 800c468:	08018704 	.word	0x08018704
 800c46c:	20000824 	.word	0x20000824
 800c470:	08018724 	.word	0x08018724

0800c474 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08a      	sub	sp, #40	; 0x28
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c47e:	2300      	movs	r3, #0
 800c480:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c482:	2300      	movs	r3, #0
 800c484:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c492:	4b28      	ldr	r3, [pc, #160]	; (800c534 <ip_reass_remove_oldest_datagram+0xc0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c498:	e030      	b.n	800c4fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	695a      	ldr	r2, [r3, #20]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d10c      	bne.n	800c4c0 <ip_reass_remove_oldest_datagram+0x4c>
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d106      	bne.n	800c4c0 <ip_reass_remove_oldest_datagram+0x4c>
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	899a      	ldrh	r2, [r3, #12]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	889b      	ldrh	r3, [r3, #4]
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d014      	beq.n	800c4ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d104      	bne.n	800c4d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	61bb      	str	r3, [r7, #24]
 800c4d4:	e009      	b.n	800c4ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	7fda      	ldrb	r2, [r3, #31]
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	7fdb      	ldrb	r3, [r3, #31]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d803      	bhi.n	800c4ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d001      	beq.n	800c4f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1cb      	bne.n	800c49a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d008      	beq.n	800c51a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c508:	69b9      	ldr	r1, [r7, #24]
 800c50a:	6a38      	ldr	r0, [r7, #32]
 800c50c:	f7ff ff0e 	bl	800c32c <ip_reass_free_complete_datagram>
 800c510:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4413      	add	r3, r2
 800c518:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	429a      	cmp	r2, r3
 800c520:	da02      	bge.n	800c528 <ip_reass_remove_oldest_datagram+0xb4>
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	2b01      	cmp	r3, #1
 800c526:	dcac      	bgt.n	800c482 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c528:	697b      	ldr	r3, [r7, #20]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3728      	adds	r7, #40	; 0x28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000820 	.word	0x20000820

0800c538 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c542:	2004      	movs	r0, #4
 800c544:	f001 f930 	bl	800d7a8 <memp_malloc>
 800c548:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d110      	bne.n	800c572 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff ff8e 	bl	800c474 <ip_reass_remove_oldest_datagram>
 800c558:	4602      	mov	r2, r0
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	db03      	blt.n	800c568 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c560:	2004      	movs	r0, #4
 800c562:	f001 f921 	bl	800d7a8 <memp_malloc>
 800c566:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	e016      	b.n	800c5a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c572:	2220      	movs	r2, #32
 800c574:	2100      	movs	r1, #0
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f009 fc86 	bl	8015e88 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	220f      	movs	r2, #15
 800c580:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c582:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <ip_reass_enqueue_new_datagram+0x70>)
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c58a:	4a07      	ldr	r2, [pc, #28]	; (800c5a8 <ip_reass_enqueue_new_datagram+0x70>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3308      	adds	r3, #8
 800c594:	2214      	movs	r2, #20
 800c596:	6879      	ldr	r1, [r7, #4]
 800c598:	4618      	mov	r0, r3
 800c59a:	f009 fc50 	bl	8015e3e <memcpy>
  return ipr;
 800c59e:	68fb      	ldr	r3, [r7, #12]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20000820 	.word	0x20000820

0800c5ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c5b6:	4b10      	ldr	r3, [pc, #64]	; (800c5f8 <ip_reass_dequeue_datagram+0x4c>)
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d104      	bne.n	800c5ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a0c      	ldr	r2, [pc, #48]	; (800c5f8 <ip_reass_dequeue_datagram+0x4c>)
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	e00d      	b.n	800c5e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d106      	bne.n	800c5de <ip_reass_dequeue_datagram+0x32>
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <ip_reass_dequeue_datagram+0x50>)
 800c5d2:	f240 1245 	movw	r2, #325	; 0x145
 800c5d6:	490a      	ldr	r1, [pc, #40]	; (800c600 <ip_reass_dequeue_datagram+0x54>)
 800c5d8:	480a      	ldr	r0, [pc, #40]	; (800c604 <ip_reass_dequeue_datagram+0x58>)
 800c5da:	f009 fc5d 	bl	8015e98 <iprintf>
    prev->next = ipr->next;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	2004      	movs	r0, #4
 800c5ea:	f001 f929 	bl	800d840 <memp_free>
}
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000820 	.word	0x20000820
 800c5fc:	08018680 	.word	0x08018680
 800c600:	08018748 	.word	0x08018748
 800c604:	080186c8 	.word	0x080186c8

0800c608 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08c      	sub	sp, #48	; 0x30
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c614:	2300      	movs	r3, #0
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c618:	2301      	movs	r3, #1
 800c61a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	885b      	ldrh	r3, [r3, #2]
 800c626:	b29b      	uxth	r3, r3
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fd f8bb 	bl	80097a4 <lwip_htons>
 800c62e:	4603      	mov	r3, r0
 800c630:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 030f 	and.w	r3, r3, #15
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c640:	7e7b      	ldrb	r3, [r7, #25]
 800c642:	b29b      	uxth	r3, r3
 800c644:	8b7a      	ldrh	r2, [r7, #26]
 800c646:	429a      	cmp	r2, r3
 800c648:	d202      	bcs.n	800c650 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
 800c64e:	e135      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c650:	7e7b      	ldrb	r3, [r7, #25]
 800c652:	b29b      	uxth	r3, r3
 800c654:	8b7a      	ldrh	r2, [r7, #26]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	b29b      	uxth	r3, r3
 800c660:	4618      	mov	r0, r3
 800c662:	f7fd f89f 	bl	80097a4 <lwip_htons>
 800c666:	4603      	mov	r3, r0
 800c668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	2200      	movs	r2, #0
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	2200      	movs	r2, #0
 800c680:	705a      	strb	r2, [r3, #1]
 800c682:	2200      	movs	r2, #0
 800c684:	709a      	strb	r2, [r3, #2]
 800c686:	2200      	movs	r2, #0
 800c688:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68c:	8afa      	ldrh	r2, [r7, #22]
 800c68e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c690:	8afa      	ldrh	r2, [r7, #22]
 800c692:	8b7b      	ldrh	r3, [r7, #26]
 800c694:	4413      	add	r3, r2
 800c696:	b29a      	uxth	r2, r3
 800c698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	88db      	ldrh	r3, [r3, #6]
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	8afa      	ldrh	r2, [r7, #22]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d902      	bls.n	800c6ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ac:	e106      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b4:	e068      	b.n	800c788 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	889b      	ldrh	r3, [r3, #4]
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	889b      	ldrh	r3, [r3, #4]
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d235      	bcs.n	800c738 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d020      	beq.n	800c71a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6da:	889b      	ldrh	r3, [r3, #4]
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	88db      	ldrh	r3, [r3, #6]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d307      	bcc.n	800c6f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	88db      	ldrh	r3, [r3, #6]
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	889b      	ldrh	r3, [r3, #4]
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d902      	bls.n	800c6fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fc:	e0de      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	88db      	ldrh	r3, [r3, #6]
 800c708:	b29a      	uxth	r2, r3
 800c70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70c:	889b      	ldrh	r3, [r3, #4]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	429a      	cmp	r2, r3
 800c712:	d03d      	beq.n	800c790 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c718:	e03a      	b.n	800c790 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	88db      	ldrh	r3, [r3, #6]
 800c71e:	b29a      	uxth	r2, r3
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	889b      	ldrh	r3, [r3, #4]
 800c724:	b29b      	uxth	r3, r3
 800c726:	429a      	cmp	r2, r3
 800c728:	d902      	bls.n	800c730 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c72a:	f04f 33ff 	mov.w	r3, #4294967295
 800c72e:	e0c5      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	605a      	str	r2, [r3, #4]
      break;
 800c736:	e02b      	b.n	800c790 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	889b      	ldrh	r3, [r3, #4]
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	889b      	ldrh	r3, [r3, #4]
 800c742:	b29b      	uxth	r3, r3
 800c744:	429a      	cmp	r2, r3
 800c746:	d102      	bne.n	800c74e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c748:	f04f 33ff 	mov.w	r3, #4294967295
 800c74c:	e0b6      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	889b      	ldrh	r3, [r3, #4]
 800c752:	b29a      	uxth	r2, r3
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	88db      	ldrh	r3, [r3, #6]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d202      	bcs.n	800c764 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c75e:	f04f 33ff 	mov.w	r3, #4294967295
 800c762:	e0ab      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	2b00      	cmp	r3, #0
 800c768:	d009      	beq.n	800c77e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76c:	88db      	ldrh	r3, [r3, #6]
 800c76e:	b29a      	uxth	r2, r3
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	889b      	ldrh	r3, [r3, #4]
 800c774:	b29b      	uxth	r3, r3
 800c776:	429a      	cmp	r2, r3
 800c778:	d001      	beq.n	800c77e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d193      	bne.n	800c6b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c78e:	e000      	b.n	800c792 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c790:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c794:	2b00      	cmp	r3, #0
 800c796:	d12d      	bne.n	800c7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d01c      	beq.n	800c7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	88db      	ldrh	r3, [r3, #6]
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a6:	889b      	ldrh	r3, [r3, #4]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d906      	bls.n	800c7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c7ae:	4b45      	ldr	r3, [pc, #276]	; (800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c7b0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c7b4:	4944      	ldr	r1, [pc, #272]	; (800c8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c7b6:	4845      	ldr	r0, [pc, #276]	; (800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c7b8:	f009 fb6e 	bl	8015e98 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	88db      	ldrh	r3, [r3, #6]
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	889b      	ldrh	r3, [r3, #4]
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d010      	beq.n	800c7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	623b      	str	r3, [r7, #32]
 800c7d6:	e00d      	b.n	800c7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d006      	beq.n	800c7ee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c7e0:	4b38      	ldr	r3, [pc, #224]	; (800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c7e2:	f240 12bf 	movw	r2, #447	; 0x1bf
 800c7e6:	493a      	ldr	r1, [pc, #232]	; (800c8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c7e8:	4838      	ldr	r0, [pc, #224]	; (800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c7ea:	f009 fb55 	bl	8015e98 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d105      	bne.n	800c806 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	7f9b      	ldrb	r3, [r3, #30]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d059      	beq.n	800c8ba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d04f      	beq.n	800c8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d006      	beq.n	800c822 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	889b      	ldrh	r3, [r3, #4]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d002      	beq.n	800c828 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	623b      	str	r3, [r7, #32]
 800c826:	e041      	b.n	800c8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c832:	e012      	b.n	800c85a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	88db      	ldrh	r3, [r3, #6]
 800c83e:	b29a      	uxth	r2, r3
 800c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c842:	889b      	ldrh	r3, [r3, #4]
 800c844:	b29b      	uxth	r3, r3
 800c846:	429a      	cmp	r2, r3
 800c848:	d002      	beq.n	800c850 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	623b      	str	r3, [r7, #32]
            break;
 800c84e:	e007      	b.n	800c860 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e9      	bne.n	800c834 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d022      	beq.n	800c8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c86e:	4b15      	ldr	r3, [pc, #84]	; (800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c870:	f240 12df 	movw	r2, #479	; 0x1df
 800c874:	4917      	ldr	r1, [pc, #92]	; (800c8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c876:	4815      	ldr	r0, [pc, #84]	; (800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c878:	f009 fb0e 	bl	8015e98 <iprintf>
          LWIP_ASSERT("sanity check",
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	429a      	cmp	r2, r3
 800c886:	d106      	bne.n	800c896 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c888:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c88a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c88e:	4911      	ldr	r1, [pc, #68]	; (800c8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c890:	480e      	ldr	r0, [pc, #56]	; (800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c892:	f009 fb01 	bl	8015e98 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d006      	beq.n	800c8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c89e:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c8a0:	f240 12e3 	movw	r2, #483	; 0x1e3
 800c8a4:	490c      	ldr	r1, [pc, #48]	; (800c8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c8a6:	4809      	ldr	r0, [pc, #36]	; (800c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c8a8:	f009 faf6 	bl	8015e98 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bf14      	ite	ne
 800c8b2:	2301      	movne	r3, #1
 800c8b4:	2300      	moveq	r3, #0
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	e000      	b.n	800c8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3730      	adds	r7, #48	; 0x30
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	08018680 	.word	0x08018680
 800c8c8:	08018764 	.word	0x08018764
 800c8cc:	080186c8 	.word	0x080186c8
 800c8d0:	08018784 	.word	0x08018784
 800c8d4:	080187bc 	.word	0x080187bc
 800c8d8:	080187cc 	.word	0x080187cc

0800c8dc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08e      	sub	sp, #56	; 0x38
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	f003 030f 	and.w	r3, r3, #15
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b14      	cmp	r3, #20
 800c8fa:	f040 8165 	bne.w	800cbc8 <ip4_reass+0x2ec>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	88db      	ldrh	r3, [r3, #6]
 800c902:	b29b      	uxth	r3, r3
 800c904:	4618      	mov	r0, r3
 800c906:	f7fc ff4d 	bl	80097a4 <lwip_htons>
 800c90a:	4603      	mov	r3, r0
 800c90c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c910:	b29b      	uxth	r3, r3
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	885b      	ldrh	r3, [r3, #2]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fc ff41 	bl	80097a4 <lwip_htons>
 800c922:	4603      	mov	r3, r0
 800c924:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	f003 030f 	and.w	r3, r3, #15
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800c936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c93e:	429a      	cmp	r2, r3
 800c940:	f0c0 8144 	bcc.w	800cbcc <ip4_reass+0x2f0>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c948:	b29b      	uxth	r3, r3
 800c94a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f001 fe3f 	bl	800e5d4 <pbuf_clen>
 800c956:	4603      	mov	r3, r0
 800c958:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c95a:	4ba1      	ldr	r3, [pc, #644]	; (800cbe0 <ip4_reass+0x304>)
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	8c3b      	ldrh	r3, [r7, #32]
 800c962:	4413      	add	r3, r2
 800c964:	2b0a      	cmp	r3, #10
 800c966:	dd10      	ble.n	800c98a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c968:	8c3b      	ldrh	r3, [r7, #32]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c96e:	f7ff fd81 	bl	800c474 <ip_reass_remove_oldest_datagram>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	f000 812a 	beq.w	800cbce <ip4_reass+0x2f2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c97a:	4b99      	ldr	r3, [pc, #612]	; (800cbe0 <ip4_reass+0x304>)
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	8c3b      	ldrh	r3, [r7, #32]
 800c982:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c984:	2b0a      	cmp	r3, #10
 800c986:	f300 8122 	bgt.w	800cbce <ip4_reass+0x2f2>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c98a:	4b96      	ldr	r3, [pc, #600]	; (800cbe4 <ip4_reass+0x308>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	633b      	str	r3, [r7, #48]	; 0x30
 800c990:	e015      	b.n	800c9be <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	695a      	ldr	r2, [r3, #20]
 800c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d10c      	bne.n	800c9b8 <ip4_reass+0xdc>
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	699a      	ldr	r2, [r3, #24]
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d106      	bne.n	800c9b8 <ip4_reass+0xdc>
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	899a      	ldrh	r2, [r3, #12]
 800c9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b0:	889b      	ldrh	r3, [r3, #4]
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d006      	beq.n	800c9c6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1e6      	bne.n	800c992 <ip4_reass+0xb6>
 800c9c4:	e000      	b.n	800c9c8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c9c6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d109      	bne.n	800c9e2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c9ce:	8c3b      	ldrh	r3, [r7, #32]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d4:	f7ff fdb0 	bl	800c538 <ip_reass_enqueue_new_datagram>
 800c9d8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d11c      	bne.n	800ca1a <ip4_reass+0x13e>
      goto nullreturn;
 800c9e0:	e0f5      	b.n	800cbce <ip4_reass+0x2f2>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	88db      	ldrh	r3, [r3, #6]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fc fedb 	bl	80097a4 <lwip_htons>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d110      	bne.n	800ca1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fa:	89db      	ldrh	r3, [r3, #14]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fc fed1 	bl	80097a4 <lwip_htons>
 800ca02:	4603      	mov	r3, r0
 800ca04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d006      	beq.n	800ca1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	3308      	adds	r3, #8
 800ca10:	2214      	movs	r2, #20
 800ca12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca14:	4618      	mov	r0, r3
 800ca16:	f009 fa12 	bl	8015e3e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	88db      	ldrh	r3, [r3, #6]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bf0c      	ite	eq
 800ca28:	2301      	moveq	r3, #1
 800ca2a:	2300      	movne	r3, #0
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00e      	beq.n	800ca54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ca36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca3a:	4413      	add	r3, r2
 800ca3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ca3e:	8b7a      	ldrh	r2, [r7, #26]
 800ca40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca42:	429a      	cmp	r2, r3
 800ca44:	f0c0 80a1 	bcc.w	800cb8a <ip4_reass+0x2ae>
 800ca48:	8b7b      	ldrh	r3, [r7, #26]
 800ca4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	f200 809b 	bhi.w	800cb8a <ip4_reass+0x2ae>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ca54:	69fa      	ldr	r2, [r7, #28]
 800ca56:	6879      	ldr	r1, [r7, #4]
 800ca58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca5a:	f7ff fdd5 	bl	800c608 <ip_reass_chain_frag_into_datagram_and_validate>
 800ca5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca66:	f000 808f 	beq.w	800cb88 <ip4_reass+0x2ac>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ca6a:	4b5d      	ldr	r3, [pc, #372]	; (800cbe0 <ip4_reass+0x304>)
 800ca6c:	881a      	ldrh	r2, [r3, #0]
 800ca6e:	8c3b      	ldrh	r3, [r7, #32]
 800ca70:	4413      	add	r3, r2
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	4b5a      	ldr	r3, [pc, #360]	; (800cbe0 <ip4_reass+0x304>)
 800ca76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00d      	beq.n	800ca9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ca7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca82:	4413      	add	r3, r2
 800ca84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	8a7a      	ldrh	r2, [r7, #18]
 800ca8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8e:	7f9b      	ldrb	r3, [r3, #30]
 800ca90:	f043 0301 	orr.w	r3, r3, #1
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d171      	bne.n	800cb84 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	8b9b      	ldrh	r3, [r3, #28]
 800caa4:	3314      	adds	r3, #20
 800caa6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	3308      	adds	r3, #8
 800cabe:	2214      	movs	r2, #20
 800cac0:	4619      	mov	r1, r3
 800cac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac4:	f009 f9bb 	bl	8015e3e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cac8:	8a3b      	ldrh	r3, [r7, #16]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fc fe6a 	bl	80097a4 <lwip_htons>
 800cad0:	4603      	mov	r3, r0
 800cad2:	461a      	mov	r2, r3
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	2200      	movs	r2, #0
 800cadc:	719a      	strb	r2, [r3, #6]
 800cade:	2200      	movs	r2, #0
 800cae0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae4:	2200      	movs	r2, #0
 800cae6:	729a      	strb	r2, [r3, #10]
 800cae8:	2200      	movs	r2, #0
 800caea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800caf2:	e00d      	b.n	800cb10 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800cafa:	2114      	movs	r1, #20
 800cafc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cafe:	f001 fc29 	bl	800e354 <pbuf_remove_header>
      pbuf_cat(p, r);
 800cb02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 fd9f 	bl	800e648 <pbuf_cat>
      r = iprh->next_pbuf;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1ee      	bne.n	800caf4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cb16:	4b33      	ldr	r3, [pc, #204]	; (800cbe4 <ip4_reass+0x308>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d102      	bne.n	800cb26 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb24:	e010      	b.n	800cb48 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cb26:	4b2f      	ldr	r3, [pc, #188]	; (800cbe4 <ip4_reass+0x308>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb2c:	e007      	b.n	800cb3e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d006      	beq.n	800cb46 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1f4      	bne.n	800cb2e <ip4_reass+0x252>
 800cb44:	e000      	b.n	800cb48 <ip4_reass+0x26c>
          break;
 800cb46:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cb48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb4c:	f7ff fd2e 	bl	800c5ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f001 fd3f 	bl	800e5d4 <pbuf_clen>
 800cb56:	4603      	mov	r3, r0
 800cb58:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cb5a:	4b21      	ldr	r3, [pc, #132]	; (800cbe0 <ip4_reass+0x304>)
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	8c3a      	ldrh	r2, [r7, #32]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d906      	bls.n	800cb72 <ip4_reass+0x296>
 800cb64:	4b20      	ldr	r3, [pc, #128]	; (800cbe8 <ip4_reass+0x30c>)
 800cb66:	f240 229b 	movw	r2, #667	; 0x29b
 800cb6a:	4920      	ldr	r1, [pc, #128]	; (800cbec <ip4_reass+0x310>)
 800cb6c:	4820      	ldr	r0, [pc, #128]	; (800cbf0 <ip4_reass+0x314>)
 800cb6e:	f009 f993 	bl	8015e98 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cb72:	4b1b      	ldr	r3, [pc, #108]	; (800cbe0 <ip4_reass+0x304>)
 800cb74:	881a      	ldrh	r2, [r3, #0]
 800cb76:	8c3b      	ldrh	r3, [r7, #32]
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	4b18      	ldr	r3, [pc, #96]	; (800cbe0 <ip4_reass+0x304>)
 800cb7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	e028      	b.n	800cbd6 <ip4_reass+0x2fa>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e026      	b.n	800cbd6 <ip4_reass+0x2fa>
    goto nullreturn_ipr;
 800cb88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d106      	bne.n	800cb9e <ip4_reass+0x2c2>
 800cb90:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <ip4_reass+0x30c>)
 800cb92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cb96:	4917      	ldr	r1, [pc, #92]	; (800cbf4 <ip4_reass+0x318>)
 800cb98:	4815      	ldr	r0, [pc, #84]	; (800cbf0 <ip4_reass+0x314>)
 800cb9a:	f009 f97d 	bl	8015e98 <iprintf>
  if (ipr->p == NULL) {
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d113      	bne.n	800cbce <ip4_reass+0x2f2>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cba6:	4b0f      	ldr	r3, [pc, #60]	; (800cbe4 <ip4_reass+0x308>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d006      	beq.n	800cbbe <ip4_reass+0x2e2>
 800cbb0:	4b0d      	ldr	r3, [pc, #52]	; (800cbe8 <ip4_reass+0x30c>)
 800cbb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cbb6:	4910      	ldr	r1, [pc, #64]	; (800cbf8 <ip4_reass+0x31c>)
 800cbb8:	480d      	ldr	r0, [pc, #52]	; (800cbf0 <ip4_reass+0x314>)
 800cbba:	f009 f96d 	bl	8015e98 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbc2:	f7ff fcf3 	bl	800c5ac <ip_reass_dequeue_datagram>
 800cbc6:	e002      	b.n	800cbce <ip4_reass+0x2f2>
    goto nullreturn;
 800cbc8:	bf00      	nop
 800cbca:	e000      	b.n	800cbce <ip4_reass+0x2f2>
    goto nullreturn;
 800cbcc:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 fc78 	bl	800e4c4 <pbuf_free>
  return NULL;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3738      	adds	r7, #56	; 0x38
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000824 	.word	0x20000824
 800cbe4:	20000820 	.word	0x20000820
 800cbe8:	08018680 	.word	0x08018680
 800cbec:	080187f0 	.word	0x080187f0
 800cbf0:	080186c8 	.word	0x080186c8
 800cbf4:	0801880c 	.word	0x0801880c
 800cbf8:	08018818 	.word	0x08018818

0800cbfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cc00:	2005      	movs	r0, #5
 800cc02:	f000 fdd1 	bl	800d7a8 <memp_malloc>
 800cc06:	4603      	mov	r3, r0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cc1a:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cc1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cc20:	4906      	ldr	r1, [pc, #24]	; (800cc3c <ip_frag_free_pbuf_custom_ref+0x30>)
 800cc22:	4807      	ldr	r0, [pc, #28]	; (800cc40 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cc24:	f009 f938 	bl	8015e98 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	2005      	movs	r0, #5
 800cc2c:	f000 fe08 	bl	800d840 <memp_free>
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	08018680 	.word	0x08018680
 800cc3c:	08018838 	.word	0x08018838
 800cc40:	080186c8 	.word	0x080186c8

0800cc44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d106      	bne.n	800cc64 <ipfrag_free_pbuf_custom+0x20>
 800cc56:	4b11      	ldr	r3, [pc, #68]	; (800cc9c <ipfrag_free_pbuf_custom+0x58>)
 800cc58:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cc5c:	4910      	ldr	r1, [pc, #64]	; (800cca0 <ipfrag_free_pbuf_custom+0x5c>)
 800cc5e:	4811      	ldr	r0, [pc, #68]	; (800cca4 <ipfrag_free_pbuf_custom+0x60>)
 800cc60:	f009 f91a 	bl	8015e98 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d006      	beq.n	800cc7a <ipfrag_free_pbuf_custom+0x36>
 800cc6c:	4b0b      	ldr	r3, [pc, #44]	; (800cc9c <ipfrag_free_pbuf_custom+0x58>)
 800cc6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cc72:	490d      	ldr	r1, [pc, #52]	; (800cca8 <ipfrag_free_pbuf_custom+0x64>)
 800cc74:	480b      	ldr	r0, [pc, #44]	; (800cca4 <ipfrag_free_pbuf_custom+0x60>)
 800cc76:	f009 f90f 	bl	8015e98 <iprintf>
  if (pcr->original != NULL) {
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f001 fc1c 	bl	800e4c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff ffbd 	bl	800cc0c <ip_frag_free_pbuf_custom_ref>
}
 800cc92:	bf00      	nop
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	08018680 	.word	0x08018680
 800cca0:	08018844 	.word	0x08018844
 800cca4:	080186c8 	.word	0x080186c8
 800cca8:	08018850 	.word	0x08018850

0800ccac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b094      	sub	sp, #80	; 0x50
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ccc2:	3b14      	subs	r3, #20
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da00      	bge.n	800ccca <ip4_frag+0x1e>
 800ccc8:	3307      	adds	r3, #7
 800ccca:	10db      	asrs	r3, r3, #3
 800cccc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ccce:	2314      	movs	r3, #20
 800ccd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f003 030f 	and.w	r3, r3, #15
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b14      	cmp	r3, #20
 800ccec:	d002      	beq.n	800ccf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ccee:	f06f 0305 	mvn.w	r3, #5
 800ccf2:	e10f      	b.n	800cf14 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	895b      	ldrh	r3, [r3, #10]
 800ccf8:	2b13      	cmp	r3, #19
 800ccfa:	d809      	bhi.n	800cd10 <ip4_frag+0x64>
 800ccfc:	4b87      	ldr	r3, [pc, #540]	; (800cf1c <ip4_frag+0x270>)
 800ccfe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800cd02:	4987      	ldr	r1, [pc, #540]	; (800cf20 <ip4_frag+0x274>)
 800cd04:	4887      	ldr	r0, [pc, #540]	; (800cf24 <ip4_frag+0x278>)
 800cd06:	f009 f8c7 	bl	8015e98 <iprintf>
 800cd0a:	f06f 0305 	mvn.w	r3, #5
 800cd0e:	e101      	b.n	800cf14 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	88db      	ldrh	r3, [r3, #6]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fc fd44 	bl	80097a4 <lwip_htons>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800cd20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800cd2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd30:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	891b      	ldrh	r3, [r3, #8]
 800cd36:	3b14      	subs	r3, #20
 800cd38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800cd3c:	e0e0      	b.n	800cf00 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cd3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	bf28      	it	cs
 800cd4c:	4613      	movcs	r3, r2
 800cd4e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cd50:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd54:	2114      	movs	r1, #20
 800cd56:	200e      	movs	r0, #14
 800cd58:	f001 f8a0 	bl	800de9c <pbuf_alloc>
 800cd5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80d4 	beq.w	800cf0e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	895b      	ldrh	r3, [r3, #10]
 800cd6a:	2b13      	cmp	r3, #19
 800cd6c:	d806      	bhi.n	800cd7c <ip4_frag+0xd0>
 800cd6e:	4b6b      	ldr	r3, [pc, #428]	; (800cf1c <ip4_frag+0x270>)
 800cd70:	f240 3225 	movw	r2, #805	; 0x325
 800cd74:	496c      	ldr	r1, [pc, #432]	; (800cf28 <ip4_frag+0x27c>)
 800cd76:	486b      	ldr	r0, [pc, #428]	; (800cf24 <ip4_frag+0x278>)
 800cd78:	f009 f88e 	bl	8015e98 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	2214      	movs	r2, #20
 800cd82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd84:	4618      	mov	r0, r3
 800cd86:	f009 f85a 	bl	8015e3e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800cd90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800cd96:	e064      	b.n	800ce62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	895a      	ldrh	r2, [r3, #10]
 800cd9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	895b      	ldrh	r3, [r3, #10]
 800cda6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d906      	bls.n	800cdba <ip4_frag+0x10e>
 800cdac:	4b5b      	ldr	r3, [pc, #364]	; (800cf1c <ip4_frag+0x270>)
 800cdae:	f240 322d 	movw	r2, #813	; 0x32d
 800cdb2:	495e      	ldr	r1, [pc, #376]	; (800cf2c <ip4_frag+0x280>)
 800cdb4:	485b      	ldr	r0, [pc, #364]	; (800cf24 <ip4_frag+0x278>)
 800cdb6:	f009 f86f 	bl	8015e98 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cdba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cdbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	bf28      	it	cs
 800cdc4:	4613      	movcs	r3, r2
 800cdc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cdca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d105      	bne.n	800cdde <ip4_frag+0x132>
        poff = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
        continue;
 800cddc:	e041      	b.n	800ce62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cdde:	f7ff ff0d 	bl	800cbfc <ip_frag_alloc_pbuf_custom_ref>
 800cde2:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d103      	bne.n	800cdf2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800cdea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdec:	f001 fb6a 	bl	800e4c4 <pbuf_free>
        goto memerr;
 800cdf0:	e08e      	b.n	800cf10 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cdf2:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cdf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ce00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ce04:	9201      	str	r2, [sp, #4]
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2241      	movs	r2, #65	; 0x41
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	f001 f96b 	bl	800e0e8 <pbuf_alloced_custom>
 800ce12:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ce1a:	69f8      	ldr	r0, [r7, #28]
 800ce1c:	f7ff fef6 	bl	800cc0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ce20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce22:	f001 fb4f 	bl	800e4c4 <pbuf_free>
        goto memerr;
 800ce26:	e073      	b.n	800cf10 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f001 fbeb 	bl	800e604 <pbuf_ref>
      pcr->original = p;
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	4a3e      	ldr	r2, [pc, #248]	; (800cf30 <ip4_frag+0x284>)
 800ce38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ce3a:	69b9      	ldr	r1, [r7, #24]
 800ce3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce3e:	f001 fc03 	bl	800e648 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ce42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ce46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ce50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d004      	beq.n	800ce62 <ip4_frag+0x1b6>
        poff = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ce62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d196      	bne.n	800cd98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ce6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ce6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce70:	4413      	add	r3, r2
 800ce72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ce74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce7c:	3b14      	subs	r3, #20
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	bfd4      	ite	le
 800ce82:	2301      	movle	r3, #1
 800ce84:	2300      	movgt	r3, #0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ce8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce92:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d002      	beq.n	800cea0 <ip4_frag+0x1f4>
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d003      	beq.n	800cea8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800cea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cea6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fc fc7a 	bl	80097a4 <lwip_htons>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ceb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ceba:	3314      	adds	r3, #20
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fc fc70 	bl	80097a4 <lwip_htons>
 800cec4:	4603      	mov	r3, r0
 800cec6:	461a      	mov	r2, r3
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cece:	2200      	movs	r2, #0
 800ced0:	729a      	strb	r2, [r3, #10]
 800ced2:	2200      	movs	r2, #0
 800ced4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cede:	68b8      	ldr	r0, [r7, #8]
 800cee0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cee4:	f001 faee 	bl	800e4c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800cee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ceec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800cef4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cef8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cefa:	4413      	add	r3, r2
 800cefc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800cf00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f af1a 	bne.w	800cd3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e002      	b.n	800cf14 <ip4_frag+0x268>
      goto memerr;
 800cf0e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3748      	adds	r7, #72	; 0x48
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	08018680 	.word	0x08018680
 800cf20:	0801885c 	.word	0x0801885c
 800cf24:	080186c8 	.word	0x080186c8
 800cf28:	08018878 	.word	0x08018878
 800cf2c:	08018898 	.word	0x08018898
 800cf30:	0800cc45 	.word	0x0800cc45

0800cf34 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <ptr_to_mem+0x20>)
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	88fb      	ldrh	r3, [r7, #6]
 800cf44:	4413      	add	r3, r2
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	20000828 	.word	0x20000828

0800cf58 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a05      	ldr	r2, [pc, #20]	; (800cf78 <mem_to_ptr+0x20>)
 800cf64:	6812      	ldr	r2, [r2, #0]
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	b29b      	uxth	r3, r3
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20000828 	.word	0x20000828

0800cf7c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cf7c:	b590      	push	{r4, r7, lr}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cf84:	4b45      	ldr	r3, [pc, #276]	; (800d09c <plug_holes+0x120>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d206      	bcs.n	800cf9c <plug_holes+0x20>
 800cf8e:	4b44      	ldr	r3, [pc, #272]	; (800d0a0 <plug_holes+0x124>)
 800cf90:	f240 12df 	movw	r2, #479	; 0x1df
 800cf94:	4943      	ldr	r1, [pc, #268]	; (800d0a4 <plug_holes+0x128>)
 800cf96:	4844      	ldr	r0, [pc, #272]	; (800d0a8 <plug_holes+0x12c>)
 800cf98:	f008 ff7e 	bl	8015e98 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cf9c:	4b43      	ldr	r3, [pc, #268]	; (800d0ac <plug_holes+0x130>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d306      	bcc.n	800cfb4 <plug_holes+0x38>
 800cfa6:	4b3e      	ldr	r3, [pc, #248]	; (800d0a0 <plug_holes+0x124>)
 800cfa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cfac:	4940      	ldr	r1, [pc, #256]	; (800d0b0 <plug_holes+0x134>)
 800cfae:	483e      	ldr	r0, [pc, #248]	; (800d0a8 <plug_holes+0x12c>)
 800cfb0:	f008 ff72 	bl	8015e98 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	791b      	ldrb	r3, [r3, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d006      	beq.n	800cfca <plug_holes+0x4e>
 800cfbc:	4b38      	ldr	r3, [pc, #224]	; (800d0a0 <plug_holes+0x124>)
 800cfbe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cfc2:	493c      	ldr	r1, [pc, #240]	; (800d0b4 <plug_holes+0x138>)
 800cfc4:	4838      	ldr	r0, [pc, #224]	; (800d0a8 <plug_holes+0x12c>)
 800cfc6:	f008 ff67 	bl	8015e98 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfd2:	d906      	bls.n	800cfe2 <plug_holes+0x66>
 800cfd4:	4b32      	ldr	r3, [pc, #200]	; (800d0a0 <plug_holes+0x124>)
 800cfd6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cfda:	4937      	ldr	r1, [pc, #220]	; (800d0b8 <plug_holes+0x13c>)
 800cfdc:	4832      	ldr	r0, [pc, #200]	; (800d0a8 <plug_holes+0x12c>)
 800cfde:	f008 ff5b 	bl	8015e98 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff ffa4 	bl	800cf34 <ptr_to_mem>
 800cfec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d024      	beq.n	800d040 <plug_holes+0xc4>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	791b      	ldrb	r3, [r3, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d120      	bne.n	800d040 <plug_holes+0xc4>
 800cffe:	4b2b      	ldr	r3, [pc, #172]	; (800d0ac <plug_holes+0x130>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	429a      	cmp	r2, r3
 800d006:	d01b      	beq.n	800d040 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d008:	4b2c      	ldr	r3, [pc, #176]	; (800d0bc <plug_holes+0x140>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d102      	bne.n	800d018 <plug_holes+0x9c>
      lfree = mem;
 800d012:	4a2a      	ldr	r2, [pc, #168]	; (800d0bc <plug_holes+0x140>)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	881a      	ldrh	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d028:	d00a      	beq.n	800d040 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff ff80 	bl	800cf34 <ptr_to_mem>
 800d034:	4604      	mov	r4, r0
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7ff ff8e 	bl	800cf58 <mem_to_ptr>
 800d03c:	4603      	mov	r3, r0
 800d03e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	885b      	ldrh	r3, [r3, #2]
 800d044:	4618      	mov	r0, r3
 800d046:	f7ff ff75 	bl	800cf34 <ptr_to_mem>
 800d04a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	429a      	cmp	r2, r3
 800d052:	d01f      	beq.n	800d094 <plug_holes+0x118>
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	791b      	ldrb	r3, [r3, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d11b      	bne.n	800d094 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d05c:	4b17      	ldr	r3, [pc, #92]	; (800d0bc <plug_holes+0x140>)
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	429a      	cmp	r2, r3
 800d064:	d102      	bne.n	800d06c <plug_holes+0xf0>
      lfree = pmem;
 800d066:	4a15      	ldr	r2, [pc, #84]	; (800d0bc <plug_holes+0x140>)
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	881a      	ldrh	r2, [r3, #0]
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	881b      	ldrh	r3, [r3, #0]
 800d078:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d07c:	d00a      	beq.n	800d094 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	4618      	mov	r0, r3
 800d084:	f7ff ff56 	bl	800cf34 <ptr_to_mem>
 800d088:	4604      	mov	r4, r0
 800d08a:	68b8      	ldr	r0, [r7, #8]
 800d08c:	f7ff ff64 	bl	800cf58 <mem_to_ptr>
 800d090:	4603      	mov	r3, r0
 800d092:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd90      	pop	{r4, r7, pc}
 800d09c:	20000828 	.word	0x20000828
 800d0a0:	080188a8 	.word	0x080188a8
 800d0a4:	080188d8 	.word	0x080188d8
 800d0a8:	080188f0 	.word	0x080188f0
 800d0ac:	2000082c 	.word	0x2000082c
 800d0b0:	08018918 	.word	0x08018918
 800d0b4:	08018934 	.word	0x08018934
 800d0b8:	08018950 	.word	0x08018950
 800d0bc:	20000830 	.word	0x20000830

0800d0c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d0c6:	4b18      	ldr	r3, [pc, #96]	; (800d128 <mem_init+0x68>)
 800d0c8:	3303      	adds	r3, #3
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	4b16      	ldr	r3, [pc, #88]	; (800d12c <mem_init+0x6c>)
 800d0d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d0d4:	4b15      	ldr	r3, [pc, #84]	; (800d12c <mem_init+0x6c>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d0e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d0ee:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d0f2:	f7ff ff1f 	bl	800cf34 <ptr_to_mem>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	4b0d      	ldr	r3, [pc, #52]	; (800d130 <mem_init+0x70>)
 800d0fa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800d0fc:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <mem_init+0x70>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2201      	movs	r2, #1
 800d102:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <mem_init+0x70>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d10c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d10e:	4b08      	ldr	r3, [pc, #32]	; (800d130 <mem_init+0x70>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d116:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d118:	4b04      	ldr	r3, [pc, #16]	; (800d12c <mem_init+0x6c>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a05      	ldr	r2, [pc, #20]	; (800d134 <mem_init+0x74>)
 800d11e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20005bdc 	.word	0x20005bdc
 800d12c:	20000828 	.word	0x20000828
 800d130:	2000082c 	.word	0x2000082c
 800d134:	20000830 	.word	0x20000830

0800d138 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7ff ff09 	bl	800cf58 <mem_to_ptr>
 800d146:	4603      	mov	r3, r0
 800d148:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff fef0 	bl	800cf34 <ptr_to_mem>
 800d154:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	885b      	ldrh	r3, [r3, #2]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7ff feea 	bl	800cf34 <ptr_to_mem>
 800d160:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d16a:	d818      	bhi.n	800d19e <mem_link_valid+0x66>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	885b      	ldrh	r3, [r3, #2]
 800d170:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d174:	d813      	bhi.n	800d19e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d17a:	8afa      	ldrh	r2, [r7, #22]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d004      	beq.n	800d18a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	8afa      	ldrh	r2, [r7, #22]
 800d186:	429a      	cmp	r2, r3
 800d188:	d109      	bne.n	800d19e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d18a:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <mem_link_valid+0x74>)
 800d18c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d18e:	693a      	ldr	r2, [r7, #16]
 800d190:	429a      	cmp	r2, r3
 800d192:	d006      	beq.n	800d1a2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	885b      	ldrh	r3, [r3, #2]
 800d198:	8afa      	ldrh	r2, [r7, #22]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d001      	beq.n	800d1a2 <mem_link_valid+0x6a>
    return 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e000      	b.n	800d1a4 <mem_link_valid+0x6c>
  }
  return 1;
 800d1a2:	2301      	movs	r3, #1
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	2000082c 	.word	0x2000082c

0800d1b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d04c      	beq.n	800d258 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f003 0303 	and.w	r3, r3, #3
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d1c8:	4b25      	ldr	r3, [pc, #148]	; (800d260 <mem_free+0xb0>)
 800d1ca:	f240 2273 	movw	r2, #627	; 0x273
 800d1ce:	4925      	ldr	r1, [pc, #148]	; (800d264 <mem_free+0xb4>)
 800d1d0:	4825      	ldr	r0, [pc, #148]	; (800d268 <mem_free+0xb8>)
 800d1d2:	f008 fe61 	bl	8015e98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d1d6:	e040      	b.n	800d25a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3b08      	subs	r3, #8
 800d1dc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d1de:	4b23      	ldr	r3, [pc, #140]	; (800d26c <mem_free+0xbc>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d306      	bcc.n	800d1f6 <mem_free+0x46>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f103 020c 	add.w	r2, r3, #12
 800d1ee:	4b20      	ldr	r3, [pc, #128]	; (800d270 <mem_free+0xc0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d907      	bls.n	800d206 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d1f6:	4b1a      	ldr	r3, [pc, #104]	; (800d260 <mem_free+0xb0>)
 800d1f8:	f240 227f 	movw	r2, #639	; 0x27f
 800d1fc:	491d      	ldr	r1, [pc, #116]	; (800d274 <mem_free+0xc4>)
 800d1fe:	481a      	ldr	r0, [pc, #104]	; (800d268 <mem_free+0xb8>)
 800d200:	f008 fe4a 	bl	8015e98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d204:	e029      	b.n	800d25a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	791b      	ldrb	r3, [r3, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d107      	bne.n	800d21e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d20e:	4b14      	ldr	r3, [pc, #80]	; (800d260 <mem_free+0xb0>)
 800d210:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d214:	4918      	ldr	r1, [pc, #96]	; (800d278 <mem_free+0xc8>)
 800d216:	4814      	ldr	r0, [pc, #80]	; (800d268 <mem_free+0xb8>)
 800d218:	f008 fe3e 	bl	8015e98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d21c:	e01d      	b.n	800d25a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7ff ff8a 	bl	800d138 <mem_link_valid>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d107      	bne.n	800d23a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d22a:	4b0d      	ldr	r3, [pc, #52]	; (800d260 <mem_free+0xb0>)
 800d22c:	f240 2295 	movw	r2, #661	; 0x295
 800d230:	4912      	ldr	r1, [pc, #72]	; (800d27c <mem_free+0xcc>)
 800d232:	480d      	ldr	r0, [pc, #52]	; (800d268 <mem_free+0xb8>)
 800d234:	f008 fe30 	bl	8015e98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d238:	e00f      	b.n	800d25a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d240:	4b0f      	ldr	r3, [pc, #60]	; (800d280 <mem_free+0xd0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	429a      	cmp	r2, r3
 800d248:	d202      	bcs.n	800d250 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d24a:	4a0d      	ldr	r2, [pc, #52]	; (800d280 <mem_free+0xd0>)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f7ff fe93 	bl	800cf7c <plug_holes>
 800d256:	e000      	b.n	800d25a <mem_free+0xaa>
    return;
 800d258:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	080188a8 	.word	0x080188a8
 800d264:	0801897c 	.word	0x0801897c
 800d268:	080188f0 	.word	0x080188f0
 800d26c:	20000828 	.word	0x20000828
 800d270:	2000082c 	.word	0x2000082c
 800d274:	080189a0 	.word	0x080189a0
 800d278:	080189bc 	.word	0x080189bc
 800d27c:	080189e4 	.word	0x080189e4
 800d280:	20000830 	.word	0x20000830

0800d284 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d290:	887b      	ldrh	r3, [r7, #2]
 800d292:	3303      	adds	r3, #3
 800d294:	b29b      	uxth	r3, r3
 800d296:	f023 0303 	bic.w	r3, r3, #3
 800d29a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d29c:	8bfb      	ldrh	r3, [r7, #30]
 800d29e:	2b0b      	cmp	r3, #11
 800d2a0:	d801      	bhi.n	800d2a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d2a6:	8bfb      	ldrh	r3, [r7, #30]
 800d2a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2ac:	d803      	bhi.n	800d2b6 <mem_trim+0x32>
 800d2ae:	8bfa      	ldrh	r2, [r7, #30]
 800d2b0:	887b      	ldrh	r3, [r7, #2]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d201      	bcs.n	800d2ba <mem_trim+0x36>
    return NULL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	e0cc      	b.n	800d454 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d2ba:	4b68      	ldr	r3, [pc, #416]	; (800d45c <mem_trim+0x1d8>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d304      	bcc.n	800d2ce <mem_trim+0x4a>
 800d2c4:	4b66      	ldr	r3, [pc, #408]	; (800d460 <mem_trim+0x1dc>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d306      	bcc.n	800d2dc <mem_trim+0x58>
 800d2ce:	4b65      	ldr	r3, [pc, #404]	; (800d464 <mem_trim+0x1e0>)
 800d2d0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d2d4:	4964      	ldr	r1, [pc, #400]	; (800d468 <mem_trim+0x1e4>)
 800d2d6:	4865      	ldr	r0, [pc, #404]	; (800d46c <mem_trim+0x1e8>)
 800d2d8:	f008 fdde 	bl	8015e98 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d2dc:	4b5f      	ldr	r3, [pc, #380]	; (800d45c <mem_trim+0x1d8>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d304      	bcc.n	800d2f0 <mem_trim+0x6c>
 800d2e6:	4b5e      	ldr	r3, [pc, #376]	; (800d460 <mem_trim+0x1dc>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d301      	bcc.n	800d2f4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	e0af      	b.n	800d454 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3b08      	subs	r3, #8
 800d2f8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d2fa:	69b8      	ldr	r0, [r7, #24]
 800d2fc:	f7ff fe2c 	bl	800cf58 <mem_to_ptr>
 800d300:	4603      	mov	r3, r0
 800d302:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	881a      	ldrh	r2, [r3, #0]
 800d308:	8afb      	ldrh	r3, [r7, #22]
 800d30a:	1ad3      	subs	r3, r2, r3
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3b08      	subs	r3, #8
 800d310:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d312:	8bfa      	ldrh	r2, [r7, #30]
 800d314:	8abb      	ldrh	r3, [r7, #20]
 800d316:	429a      	cmp	r2, r3
 800d318:	d906      	bls.n	800d328 <mem_trim+0xa4>
 800d31a:	4b52      	ldr	r3, [pc, #328]	; (800d464 <mem_trim+0x1e0>)
 800d31c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d320:	4953      	ldr	r1, [pc, #332]	; (800d470 <mem_trim+0x1ec>)
 800d322:	4852      	ldr	r0, [pc, #328]	; (800d46c <mem_trim+0x1e8>)
 800d324:	f008 fdb8 	bl	8015e98 <iprintf>
  if (newsize > size) {
 800d328:	8bfa      	ldrh	r2, [r7, #30]
 800d32a:	8abb      	ldrh	r3, [r7, #20]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d901      	bls.n	800d334 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d330:	2300      	movs	r3, #0
 800d332:	e08f      	b.n	800d454 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d334:	8bfa      	ldrh	r2, [r7, #30]
 800d336:	8abb      	ldrh	r3, [r7, #20]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d101      	bne.n	800d340 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	e089      	b.n	800d454 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fdf5 	bl	800cf34 <ptr_to_mem>
 800d34a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	791b      	ldrb	r3, [r3, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d13f      	bne.n	800d3d4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	881b      	ldrh	r3, [r3, #0]
 800d358:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d35c:	d106      	bne.n	800d36c <mem_trim+0xe8>
 800d35e:	4b41      	ldr	r3, [pc, #260]	; (800d464 <mem_trim+0x1e0>)
 800d360:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d364:	4943      	ldr	r1, [pc, #268]	; (800d474 <mem_trim+0x1f0>)
 800d366:	4841      	ldr	r0, [pc, #260]	; (800d46c <mem_trim+0x1e8>)
 800d368:	f008 fd96 	bl	8015e98 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d372:	8afa      	ldrh	r2, [r7, #22]
 800d374:	8bfb      	ldrh	r3, [r7, #30]
 800d376:	4413      	add	r3, r2
 800d378:	b29b      	uxth	r3, r3
 800d37a:	3308      	adds	r3, #8
 800d37c:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 800d37e:	4b3e      	ldr	r3, [pc, #248]	; (800d478 <mem_trim+0x1f4>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	429a      	cmp	r2, r3
 800d386:	d106      	bne.n	800d396 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d388:	89bb      	ldrh	r3, [r7, #12]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fdd2 	bl	800cf34 <ptr_to_mem>
 800d390:	4602      	mov	r2, r0
 800d392:	4b39      	ldr	r3, [pc, #228]	; (800d478 <mem_trim+0x1f4>)
 800d394:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d396:	89bb      	ldrh	r3, [r7, #12]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff fdcb 	bl	800cf34 <ptr_to_mem>
 800d39e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	89fa      	ldrh	r2, [r7, #14]
 800d3aa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	8afa      	ldrh	r2, [r7, #22]
 800d3b0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	89ba      	ldrh	r2, [r7, #12]
 800d3b6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3c0:	d047      	beq.n	800d452 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff fdb4 	bl	800cf34 <ptr_to_mem>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	89bb      	ldrh	r3, [r7, #12]
 800d3d0:	8053      	strh	r3, [r2, #2]
 800d3d2:	e03e      	b.n	800d452 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d3d4:	8bfb      	ldrh	r3, [r7, #30]
 800d3d6:	f103 0214 	add.w	r2, r3, #20
 800d3da:	8abb      	ldrh	r3, [r7, #20]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d838      	bhi.n	800d452 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d3e0:	8afa      	ldrh	r2, [r7, #22]
 800d3e2:	8bfb      	ldrh	r3, [r7, #30]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	3308      	adds	r3, #8
 800d3ea:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3f4:	d106      	bne.n	800d404 <mem_trim+0x180>
 800d3f6:	4b1b      	ldr	r3, [pc, #108]	; (800d464 <mem_trim+0x1e0>)
 800d3f8:	f240 3216 	movw	r2, #790	; 0x316
 800d3fc:	491d      	ldr	r1, [pc, #116]	; (800d474 <mem_trim+0x1f0>)
 800d3fe:	481b      	ldr	r0, [pc, #108]	; (800d46c <mem_trim+0x1e8>)
 800d400:	f008 fd4a 	bl	8015e98 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d404:	89bb      	ldrh	r3, [r7, #12]
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff fd94 	bl	800cf34 <ptr_to_mem>
 800d40c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d40e:	4b1a      	ldr	r3, [pc, #104]	; (800d478 <mem_trim+0x1f4>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	693a      	ldr	r2, [r7, #16]
 800d414:	429a      	cmp	r2, r3
 800d416:	d202      	bcs.n	800d41e <mem_trim+0x19a>
      lfree = mem2;
 800d418:	4a17      	ldr	r2, [pc, #92]	; (800d478 <mem_trim+0x1f4>)
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2200      	movs	r2, #0
 800d422:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	881a      	ldrh	r2, [r3, #0]
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	8afa      	ldrh	r2, [r7, #22]
 800d430:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	89ba      	ldrh	r2, [r7, #12]
 800d436:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d440:	d007      	beq.n	800d452 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff fd74 	bl	800cf34 <ptr_to_mem>
 800d44c:	4602      	mov	r2, r0
 800d44e:	89bb      	ldrh	r3, [r7, #12]
 800d450:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d452:	687b      	ldr	r3, [r7, #4]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3720      	adds	r7, #32
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000828 	.word	0x20000828
 800d460:	2000082c 	.word	0x2000082c
 800d464:	080188a8 	.word	0x080188a8
 800d468:	08018a18 	.word	0x08018a18
 800d46c:	080188f0 	.word	0x080188f0
 800d470:	08018a30 	.word	0x08018a30
 800d474:	08018a50 	.word	0x08018a50
 800d478:	20000830 	.word	0x20000830

0800d47c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	4603      	mov	r3, r0
 800d484:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d486:	88fb      	ldrh	r3, [r7, #6]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <mem_malloc+0x14>
    return NULL;
 800d48c:	2300      	movs	r3, #0
 800d48e:	e0d9      	b.n	800d644 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d490:	88fb      	ldrh	r3, [r7, #6]
 800d492:	3303      	adds	r3, #3
 800d494:	b29b      	uxth	r3, r3
 800d496:	f023 0303 	bic.w	r3, r3, #3
 800d49a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d49c:	8bbb      	ldrh	r3, [r7, #28]
 800d49e:	2b0b      	cmp	r3, #11
 800d4a0:	d801      	bhi.n	800d4a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d4a6:	8bbb      	ldrh	r3, [r7, #28]
 800d4a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4ac:	d803      	bhi.n	800d4b6 <mem_malloc+0x3a>
 800d4ae:	8bba      	ldrh	r2, [r7, #28]
 800d4b0:	88fb      	ldrh	r3, [r7, #6]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d201      	bcs.n	800d4ba <mem_malloc+0x3e>
    return NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e0c4      	b.n	800d644 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4ba:	4b64      	ldr	r3, [pc, #400]	; (800d64c <mem_malloc+0x1d0>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fd4a 	bl	800cf58 <mem_to_ptr>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	83fb      	strh	r3, [r7, #30]
 800d4c8:	e0b4      	b.n	800d634 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d4ca:	8bfb      	ldrh	r3, [r7, #30]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fd31 	bl	800cf34 <ptr_to_mem>
 800d4d2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	791b      	ldrb	r3, [r3, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f040 80a4 	bne.w	800d626 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	8bfb      	ldrh	r3, [r7, #30]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	f1a3 0208 	sub.w	r2, r3, #8
 800d4ec:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	f0c0 8099 	bcc.w	800d626 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	8bfb      	ldrh	r3, [r7, #30]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	f1a3 0208 	sub.w	r2, r3, #8
 800d502:	8bbb      	ldrh	r3, [r7, #28]
 800d504:	3314      	adds	r3, #20
 800d506:	429a      	cmp	r2, r3
 800d508:	d333      	bcc.n	800d572 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d50a:	8bfa      	ldrh	r2, [r7, #30]
 800d50c:	8bbb      	ldrh	r3, [r7, #28]
 800d50e:	4413      	add	r3, r2
 800d510:	b29b      	uxth	r3, r3
 800d512:	3308      	adds	r3, #8
 800d514:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d516:	8a7b      	ldrh	r3, [r7, #18]
 800d518:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d51c:	d106      	bne.n	800d52c <mem_malloc+0xb0>
 800d51e:	4b4c      	ldr	r3, [pc, #304]	; (800d650 <mem_malloc+0x1d4>)
 800d520:	f240 3287 	movw	r2, #903	; 0x387
 800d524:	494b      	ldr	r1, [pc, #300]	; (800d654 <mem_malloc+0x1d8>)
 800d526:	484c      	ldr	r0, [pc, #304]	; (800d658 <mem_malloc+0x1dc>)
 800d528:	f008 fcb6 	bl	8015e98 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d52c:	8a7b      	ldrh	r3, [r7, #18]
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff fd00 	bl	800cf34 <ptr_to_mem>
 800d534:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	881a      	ldrh	r2, [r3, #0]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	8bfa      	ldrh	r2, [r7, #30]
 800d548:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	8a7a      	ldrh	r2, [r7, #18]
 800d54e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	2201      	movs	r2, #1
 800d554:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d55e:	d00b      	beq.n	800d578 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fce5 	bl	800cf34 <ptr_to_mem>
 800d56a:	4602      	mov	r2, r0
 800d56c:	8a7b      	ldrh	r3, [r7, #18]
 800d56e:	8053      	strh	r3, [r2, #2]
 800d570:	e002      	b.n	800d578 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	2201      	movs	r2, #1
 800d576:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d578:	4b34      	ldr	r3, [pc, #208]	; (800d64c <mem_malloc+0x1d0>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d127      	bne.n	800d5d2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d582:	4b32      	ldr	r3, [pc, #200]	; (800d64c <mem_malloc+0x1d0>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d588:	e005      	b.n	800d596 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff fcd0 	bl	800cf34 <ptr_to_mem>
 800d594:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	791b      	ldrb	r3, [r3, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d004      	beq.n	800d5a8 <mem_malloc+0x12c>
 800d59e:	4b2f      	ldr	r3, [pc, #188]	; (800d65c <mem_malloc+0x1e0>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d1f0      	bne.n	800d58a <mem_malloc+0x10e>
          }
          lfree = cur;
 800d5a8:	4a28      	ldr	r2, [pc, #160]	; (800d64c <mem_malloc+0x1d0>)
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d5ae:	4b27      	ldr	r3, [pc, #156]	; (800d64c <mem_malloc+0x1d0>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b2a      	ldr	r3, [pc, #168]	; (800d65c <mem_malloc+0x1e0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d00b      	beq.n	800d5d2 <mem_malloc+0x156>
 800d5ba:	4b24      	ldr	r3, [pc, #144]	; (800d64c <mem_malloc+0x1d0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	791b      	ldrb	r3, [r3, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <mem_malloc+0x156>
 800d5c4:	4b22      	ldr	r3, [pc, #136]	; (800d650 <mem_malloc+0x1d4>)
 800d5c6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d5ca:	4925      	ldr	r1, [pc, #148]	; (800d660 <mem_malloc+0x1e4>)
 800d5cc:	4822      	ldr	r0, [pc, #136]	; (800d658 <mem_malloc+0x1dc>)
 800d5ce:	f008 fc63 	bl	8015e98 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d5d2:	8bba      	ldrh	r2, [r7, #28]
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	3308      	adds	r3, #8
 800d5da:	4a20      	ldr	r2, [pc, #128]	; (800d65c <mem_malloc+0x1e0>)
 800d5dc:	6812      	ldr	r2, [r2, #0]
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d906      	bls.n	800d5f0 <mem_malloc+0x174>
 800d5e2:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <mem_malloc+0x1d4>)
 800d5e4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d5e8:	491e      	ldr	r1, [pc, #120]	; (800d664 <mem_malloc+0x1e8>)
 800d5ea:	481b      	ldr	r0, [pc, #108]	; (800d658 <mem_malloc+0x1dc>)
 800d5ec:	f008 fc54 	bl	8015e98 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	f003 0303 	and.w	r3, r3, #3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d006      	beq.n	800d608 <mem_malloc+0x18c>
 800d5fa:	4b15      	ldr	r3, [pc, #84]	; (800d650 <mem_malloc+0x1d4>)
 800d5fc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d600:	4919      	ldr	r1, [pc, #100]	; (800d668 <mem_malloc+0x1ec>)
 800d602:	4815      	ldr	r0, [pc, #84]	; (800d658 <mem_malloc+0x1dc>)
 800d604:	f008 fc48 	bl	8015e98 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	f003 0303 	and.w	r3, r3, #3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d006      	beq.n	800d620 <mem_malloc+0x1a4>
 800d612:	4b0f      	ldr	r3, [pc, #60]	; (800d650 <mem_malloc+0x1d4>)
 800d614:	f240 32be 	movw	r2, #958	; 0x3be
 800d618:	4914      	ldr	r1, [pc, #80]	; (800d66c <mem_malloc+0x1f0>)
 800d61a:	480f      	ldr	r0, [pc, #60]	; (800d658 <mem_malloc+0x1dc>)
 800d61c:	f008 fc3c 	bl	8015e98 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	3308      	adds	r3, #8
 800d624:	e00e      	b.n	800d644 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d626:	8bfb      	ldrh	r3, [r7, #30]
 800d628:	4618      	mov	r0, r3
 800d62a:	f7ff fc83 	bl	800cf34 <ptr_to_mem>
 800d62e:	4603      	mov	r3, r0
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d634:	8bfa      	ldrh	r2, [r7, #30]
 800d636:	8bbb      	ldrh	r3, [r7, #28]
 800d638:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d63c:	429a      	cmp	r2, r3
 800d63e:	f4ff af44 	bcc.w	800d4ca <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20000830 	.word	0x20000830
 800d650:	080188a8 	.word	0x080188a8
 800d654:	08018a50 	.word	0x08018a50
 800d658:	080188f0 	.word	0x080188f0
 800d65c:	2000082c 	.word	0x2000082c
 800d660:	08018a64 	.word	0x08018a64
 800d664:	08018a80 	.word	0x08018a80
 800d668:	08018ab0 	.word	0x08018ab0
 800d66c:	08018ae0 	.word	0x08018ae0

0800d670 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	460a      	mov	r2, r1
 800d67a:	80fb      	strh	r3, [r7, #6]
 800d67c:	4613      	mov	r3, r2
 800d67e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800d680:	88fb      	ldrh	r3, [r7, #6]
 800d682:	88ba      	ldrh	r2, [r7, #4]
 800d684:	fb02 f303 	mul.w	r3, r2, r3
 800d688:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	461a      	mov	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	429a      	cmp	r2, r3
 800d694:	d001      	beq.n	800d69a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800d696:	2300      	movs	r3, #0
 800d698:	e00e      	b.n	800d6b8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff feec 	bl	800d47c <mem_malloc>
 800d6a4:	60b8      	str	r0, [r7, #8]
  if (p) {
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d004      	beq.n	800d6b6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	68b8      	ldr	r0, [r7, #8]
 800d6b2:	f008 fbe9 	bl	8015e88 <memset>
  }
  return p;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	3303      	adds	r3, #3
 800d6d6:	f023 0303 	bic.w	r3, r3, #3
 800d6da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d6dc:	2300      	movs	r3, #0
 800d6de:	60fb      	str	r3, [r7, #12]
 800d6e0:	e011      	b.n	800d706 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	881b      	ldrh	r3, [r3, #0]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	3301      	adds	r3, #1
 800d704:	60fb      	str	r3, [r7, #12]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	885b      	ldrh	r3, [r3, #2]
 800d70a:	461a      	mov	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	429a      	cmp	r2, r3
 800d710:	dce7      	bgt.n	800d6e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d712:	bf00      	nop
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
	...

0800d720 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d726:	2300      	movs	r3, #0
 800d728:	80fb      	strh	r3, [r7, #6]
 800d72a:	e009      	b.n	800d740 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	4a08      	ldr	r2, [pc, #32]	; (800d750 <memp_init+0x30>)
 800d730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d734:	4618      	mov	r0, r3
 800d736:	f7ff ffc3 	bl	800d6c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d73a:	88fb      	ldrh	r3, [r7, #6]
 800d73c:	3301      	adds	r3, #1
 800d73e:	80fb      	strh	r3, [r7, #6]
 800d740:	88fb      	ldrh	r3, [r7, #6]
 800d742:	2b08      	cmp	r3, #8
 800d744:	d9f2      	bls.n	800d72c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d746:	bf00      	nop
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	0801ac8c 	.word	0x0801ac8c

0800d754 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d012      	beq.n	800d790 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	6812      	ldr	r2, [r2, #0]
 800d772:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d006      	beq.n	800d78c <do_memp_malloc_pool+0x38>
 800d77e:	4b07      	ldr	r3, [pc, #28]	; (800d79c <do_memp_malloc_pool+0x48>)
 800d780:	f240 1219 	movw	r2, #281	; 0x119
 800d784:	4906      	ldr	r1, [pc, #24]	; (800d7a0 <do_memp_malloc_pool+0x4c>)
 800d786:	4807      	ldr	r0, [pc, #28]	; (800d7a4 <do_memp_malloc_pool+0x50>)
 800d788:	f008 fb86 	bl	8015e98 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	e000      	b.n	800d792 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	08018b04 	.word	0x08018b04
 800d7a0:	08018b34 	.word	0x08018b34
 800d7a4:	08018b58 	.word	0x08018b58

0800d7a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d908      	bls.n	800d7ca <memp_malloc+0x22>
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <memp_malloc+0x3c>)
 800d7ba:	f240 1257 	movw	r2, #343	; 0x157
 800d7be:	490a      	ldr	r1, [pc, #40]	; (800d7e8 <memp_malloc+0x40>)
 800d7c0:	480a      	ldr	r0, [pc, #40]	; (800d7ec <memp_malloc+0x44>)
 800d7c2:	f008 fb69 	bl	8015e98 <iprintf>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e008      	b.n	800d7dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	4a08      	ldr	r2, [pc, #32]	; (800d7f0 <memp_malloc+0x48>)
 800d7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff ffbe 	bl	800d754 <do_memp_malloc_pool>
 800d7d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d7da:	68fb      	ldr	r3, [r7, #12]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	08018b04 	.word	0x08018b04
 800d7e8:	08018b94 	.word	0x08018b94
 800d7ec:	08018b58 	.word	0x08018b58
 800d7f0:	0801ac8c 	.word	0x0801ac8c

0800d7f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	f003 0303 	and.w	r3, r3, #3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d006      	beq.n	800d816 <do_memp_free_pool+0x22>
 800d808:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <do_memp_free_pool+0x40>)
 800d80a:	f240 126d 	movw	r2, #365	; 0x16d
 800d80e:	490a      	ldr	r1, [pc, #40]	; (800d838 <do_memp_free_pool+0x44>)
 800d810:	480a      	ldr	r0, [pc, #40]	; (800d83c <do_memp_free_pool+0x48>)
 800d812:	f008 fb41 	bl	8015e98 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d82c:	bf00      	nop
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	08018b04 	.word	0x08018b04
 800d838:	08018bb4 	.word	0x08018bb4
 800d83c:	08018b58 	.word	0x08018b58

0800d840 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	6039      	str	r1, [r7, #0]
 800d84a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d84c:	79fb      	ldrb	r3, [r7, #7]
 800d84e:	2b08      	cmp	r3, #8
 800d850:	d907      	bls.n	800d862 <memp_free+0x22>
 800d852:	4b0c      	ldr	r3, [pc, #48]	; (800d884 <memp_free+0x44>)
 800d854:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d858:	490b      	ldr	r1, [pc, #44]	; (800d888 <memp_free+0x48>)
 800d85a:	480c      	ldr	r0, [pc, #48]	; (800d88c <memp_free+0x4c>)
 800d85c:	f008 fb1c 	bl	8015e98 <iprintf>
 800d860:	e00c      	b.n	800d87c <memp_free+0x3c>

  if (mem == NULL) {
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d008      	beq.n	800d87a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	4a09      	ldr	r2, [pc, #36]	; (800d890 <memp_free+0x50>)
 800d86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	4618      	mov	r0, r3
 800d874:	f7ff ffbe 	bl	800d7f4 <do_memp_free_pool>
 800d878:	e000      	b.n	800d87c <memp_free+0x3c>
    return;
 800d87a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	08018b04 	.word	0x08018b04
 800d888:	08018bd4 	.word	0x08018bd4
 800d88c:	08018b58 	.word	0x08018b58
 800d890:	0801ac8c 	.word	0x0801ac8c

0800d894 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d894:	b480      	push	{r7}
 800d896:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d898:	bf00      	nop
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d108      	bne.n	800d8ca <netif_add+0x26>
 800d8b8:	4b57      	ldr	r3, [pc, #348]	; (800da18 <netif_add+0x174>)
 800d8ba:	f240 1227 	movw	r2, #295	; 0x127
 800d8be:	4957      	ldr	r1, [pc, #348]	; (800da1c <netif_add+0x178>)
 800d8c0:	4857      	ldr	r0, [pc, #348]	; (800da20 <netif_add+0x17c>)
 800d8c2:	f008 fae9 	bl	8015e98 <iprintf>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e0a2      	b.n	800da10 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d108      	bne.n	800d8e2 <netif_add+0x3e>
 800d8d0:	4b51      	ldr	r3, [pc, #324]	; (800da18 <netif_add+0x174>)
 800d8d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d8d6:	4953      	ldr	r1, [pc, #332]	; (800da24 <netif_add+0x180>)
 800d8d8:	4851      	ldr	r0, [pc, #324]	; (800da20 <netif_add+0x17c>)
 800d8da:	f008 fadd 	bl	8015e98 <iprintf>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e096      	b.n	800da10 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d8e8:	4b4f      	ldr	r3, [pc, #316]	; (800da28 <netif_add+0x184>)
 800d8ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d8f2:	4b4d      	ldr	r3, [pc, #308]	; (800da28 <netif_add+0x184>)
 800d8f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d8fc:	4b4a      	ldr	r3, [pc, #296]	; (800da28 <netif_add+0x184>)
 800d8fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2200      	movs	r2, #0
 800d904:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	4a45      	ldr	r2, [pc, #276]	; (800da2c <netif_add+0x188>)
 800d916:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2200      	movs	r2, #0
 800d92a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6a3a      	ldr	r2, [r7, #32]
 800d930:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d932:	4b3f      	ldr	r3, [pc, #252]	; (800da30 <netif_add+0x18c>)
 800d934:	781a      	ldrb	r2, [r3, #0]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d940:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f000 f913 	bl	800db74 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	4798      	blx	r3
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <netif_add+0xba>
    return NULL;
 800d95a:	2300      	movs	r3, #0
 800d95c:	e058      	b.n	800da10 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d964:	2bff      	cmp	r3, #255	; 0xff
 800d966:	d103      	bne.n	800d970 <netif_add+0xcc>
        netif->num = 0;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d974:	4b2f      	ldr	r3, [pc, #188]	; (800da34 <netif_add+0x190>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	617b      	str	r3, [r7, #20]
 800d97a:	e02b      	b.n	800d9d4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	429a      	cmp	r2, r3
 800d982:	d106      	bne.n	800d992 <netif_add+0xee>
 800d984:	4b24      	ldr	r3, [pc, #144]	; (800da18 <netif_add+0x174>)
 800d986:	f240 128b 	movw	r2, #395	; 0x18b
 800d98a:	492b      	ldr	r1, [pc, #172]	; (800da38 <netif_add+0x194>)
 800d98c:	4824      	ldr	r0, [pc, #144]	; (800da20 <netif_add+0x17c>)
 800d98e:	f008 fa83 	bl	8015e98 <iprintf>
        num_netifs++;
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	3301      	adds	r3, #1
 800d996:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	2bff      	cmp	r3, #255	; 0xff
 800d99c:	dd06      	ble.n	800d9ac <netif_add+0x108>
 800d99e:	4b1e      	ldr	r3, [pc, #120]	; (800da18 <netif_add+0x174>)
 800d9a0:	f240 128d 	movw	r2, #397	; 0x18d
 800d9a4:	4925      	ldr	r1, [pc, #148]	; (800da3c <netif_add+0x198>)
 800d9a6:	481e      	ldr	r0, [pc, #120]	; (800da20 <netif_add+0x17c>)
 800d9a8:	f008 fa76 	bl	8015e98 <iprintf>
        if (netif2->num == netif->num) {
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d108      	bne.n	800d9ce <netif_add+0x12a>
          netif->num++;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d9cc:	e005      	b.n	800d9da <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1d0      	bne.n	800d97c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1be      	bne.n	800d95e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9e6:	2bfe      	cmp	r3, #254	; 0xfe
 800d9e8:	d103      	bne.n	800d9f2 <netif_add+0x14e>
    netif_num = 0;
 800d9ea:	4b11      	ldr	r3, [pc, #68]	; (800da30 <netif_add+0x18c>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	701a      	strb	r2, [r3, #0]
 800d9f0:	e006      	b.n	800da00 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <netif_add+0x18c>)
 800d9fe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800da00:	4b0c      	ldr	r3, [pc, #48]	; (800da34 <netif_add+0x190>)
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800da08:	4a0a      	ldr	r2, [pc, #40]	; (800da34 <netif_add+0x190>)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800da0e:	68fb      	ldr	r3, [r7, #12]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08018bf0 	.word	0x08018bf0
 800da1c:	08018c84 	.word	0x08018c84
 800da20:	08018c40 	.word	0x08018c40
 800da24:	08018ca0 	.word	0x08018ca0
 800da28:	0801ac1c 	.word	0x0801ac1c
 800da2c:	0800dd87 	.word	0x0800dd87
 800da30:	20000858 	.word	0x20000858
 800da34:	2000b698 	.word	0x2000b698
 800da38:	08018cc4 	.word	0x08018cc4
 800da3c:	08018cd8 	.word	0x08018cd8

0800da40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f002 ffe9 	bl	8010a24 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f008 f867 	bl	8015b28 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800da5a:	bf00      	nop
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
	...

0800da64 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <netif_do_set_ipaddr+0x20>
 800da76:	4b1d      	ldr	r3, [pc, #116]	; (800daec <netif_do_set_ipaddr+0x88>)
 800da78:	f240 12cb 	movw	r2, #459	; 0x1cb
 800da7c:	491c      	ldr	r1, [pc, #112]	; (800daf0 <netif_do_set_ipaddr+0x8c>)
 800da7e:	481d      	ldr	r0, [pc, #116]	; (800daf4 <netif_do_set_ipaddr+0x90>)
 800da80:	f008 fa0a 	bl	8015e98 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <netif_do_set_ipaddr+0x34>
 800da8a:	4b18      	ldr	r3, [pc, #96]	; (800daec <netif_do_set_ipaddr+0x88>)
 800da8c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800da90:	4917      	ldr	r1, [pc, #92]	; (800daf0 <netif_do_set_ipaddr+0x8c>)
 800da92:	4818      	ldr	r0, [pc, #96]	; (800daf4 <netif_do_set_ipaddr+0x90>)
 800da94:	f008 fa00 	bl	8015e98 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3304      	adds	r3, #4
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d01c      	beq.n	800dae0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3304      	adds	r3, #4
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dab6:	f107 0314 	add.w	r3, r7, #20
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7ff ffbf 	bl	800da40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <netif_do_set_ipaddr+0x6a>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	e000      	b.n	800dad0 <netif_do_set_ipaddr+0x6c>
 800dace:	2300      	movs	r3, #0
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dad4:	2101      	movs	r1, #1
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 f8d2 	bl	800dc80 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3718      	adds	r7, #24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	08018bf0 	.word	0x08018bf0
 800daf0:	08018d08 	.word	0x08018d08
 800daf4:	08018c40 	.word	0x08018c40

0800daf8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3308      	adds	r3, #8
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d00a      	beq.n	800db28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <netif_do_set_netmask+0x26>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	e000      	b.n	800db20 <netif_do_set_netmask+0x28>
 800db1e:	2300      	movs	r3, #0
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800db24:	2301      	movs	r3, #1
 800db26:	e000      	b.n	800db2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800db36:	b480      	push	{r7}
 800db38:	b085      	sub	sp, #20
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	60f8      	str	r0, [r7, #12]
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	330c      	adds	r3, #12
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d00a      	beq.n	800db66 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <netif_do_set_gw+0x26>
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	e000      	b.n	800db5e <netif_do_set_gw+0x28>
 800db5c:	2300      	movs	r3, #0
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800db62:	2301      	movs	r3, #1
 800db64:	e000      	b.n	800db68 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800db90:	4b1c      	ldr	r3, [pc, #112]	; (800dc04 <netif_set_addr+0x90>)
 800db92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d101      	bne.n	800db9e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800db9a:	4b1a      	ldr	r3, [pc, #104]	; (800dc04 <netif_set_addr+0x90>)
 800db9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dba4:	4b17      	ldr	r3, [pc, #92]	; (800dc04 <netif_set_addr+0x90>)
 800dba6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d003      	beq.n	800dbb6 <netif_set_addr+0x42>
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <netif_set_addr+0x46>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e000      	b.n	800dbbc <netif_set_addr+0x48>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d006      	beq.n	800dbd2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbc4:	f107 0310 	add.w	r3, r7, #16
 800dbc8:	461a      	mov	r2, r3
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff ff49 	bl	800da64 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dbd2:	69fa      	ldr	r2, [r7, #28]
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff ff8e 	bl	800daf8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dbdc:	69ba      	ldr	r2, [r7, #24]
 800dbde:	6839      	ldr	r1, [r7, #0]
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7ff ffa8 	bl	800db36 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d106      	bne.n	800dbfa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbec:	f107 0310 	add.w	r3, r7, #16
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f7ff ff35 	bl	800da64 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dbfa:	bf00      	nop
 800dbfc:	3720      	adds	r7, #32
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	0801ac1c 	.word	0x0801ac1c

0800dc08 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dc10:	4a04      	ldr	r2, [pc, #16]	; (800dc24 <netif_set_default+0x1c>)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	2000b69c 	.word	0x2000b69c

0800dc28 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d107      	bne.n	800dc46 <netif_set_up+0x1e>
 800dc36:	4b0f      	ldr	r3, [pc, #60]	; (800dc74 <netif_set_up+0x4c>)
 800dc38:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dc3c:	490e      	ldr	r1, [pc, #56]	; (800dc78 <netif_set_up+0x50>)
 800dc3e:	480f      	ldr	r0, [pc, #60]	; (800dc7c <netif_set_up+0x54>)
 800dc40:	f008 f92a 	bl	8015e98 <iprintf>
 800dc44:	e013      	b.n	800dc6e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10c      	bne.n	800dc6e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc5a:	f043 0301 	orr.w	r3, r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dc66:	2103      	movs	r1, #3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f809 	bl	800dc80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	08018bf0 	.word	0x08018bf0
 800dc78:	08018d78 	.word	0x08018d78
 800dc7c:	08018c40 	.word	0x08018c40

0800dc80 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <netif_issue_reports+0x20>
 800dc92:	4b18      	ldr	r3, [pc, #96]	; (800dcf4 <netif_issue_reports+0x74>)
 800dc94:	f240 326d 	movw	r2, #877	; 0x36d
 800dc98:	4917      	ldr	r1, [pc, #92]	; (800dcf8 <netif_issue_reports+0x78>)
 800dc9a:	4818      	ldr	r0, [pc, #96]	; (800dcfc <netif_issue_reports+0x7c>)
 800dc9c:	f008 f8fc 	bl	8015e98 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dca6:	f003 0304 	and.w	r3, r3, #4
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d01e      	beq.n	800dcec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcb4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d017      	beq.n	800dcec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dcbc:	78fb      	ldrb	r3, [r7, #3]
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d013      	beq.n	800dcee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00e      	beq.n	800dcee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcd6:	f003 0308 	and.w	r3, r3, #8
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d007      	beq.n	800dcee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3304      	adds	r3, #4
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7fd fcc1 	bl	800b66c <etharp_request>
 800dcea:	e000      	b.n	800dcee <netif_issue_reports+0x6e>
    return;
 800dcec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	08018bf0 	.word	0x08018bf0
 800dcf8:	08018d94 	.word	0x08018d94
 800dcfc:	08018c40 	.word	0x08018c40

0800dd00 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d107      	bne.n	800dd1e <netif_set_down+0x1e>
 800dd0e:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <netif_set_down+0x58>)
 800dd10:	f240 329b 	movw	r2, #923	; 0x39b
 800dd14:	4911      	ldr	r1, [pc, #68]	; (800dd5c <netif_set_down+0x5c>)
 800dd16:	4812      	ldr	r0, [pc, #72]	; (800dd60 <netif_set_down+0x60>)
 800dd18:	f008 f8be 	bl	8015e98 <iprintf>
 800dd1c:	e019      	b.n	800dd52 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d012      	beq.n	800dd52 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd32:	f023 0301 	bic.w	r3, r3, #1
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd44:	f003 0308 	and.w	r3, r3, #8
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7fd f84b 	bl	800ade8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	08018bf0 	.word	0x08018bf0
 800dd5c:	08018db8 	.word	0x08018db8
 800dd60:	08018c40 	.word	0x08018c40

0800dd64 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	61da      	str	r2, [r3, #28]
  }
}
 800dd7a:	bf00      	nop
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dd86:	b480      	push	{r7}
 800dd88:	b085      	sub	sp, #20
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	60b9      	str	r1, [r7, #8]
 800dd90:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dd92:	f06f 030b 	mvn.w	r3, #11
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
	...

0800dda4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ddae:	79fb      	ldrb	r3, [r7, #7]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d013      	beq.n	800dddc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ddb4:	4b0d      	ldr	r3, [pc, #52]	; (800ddec <netif_get_by_index+0x48>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	60fb      	str	r3, [r7, #12]
 800ddba:	e00c      	b.n	800ddd6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	79fa      	ldrb	r2, [r7, #7]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d101      	bne.n	800ddd0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	e006      	b.n	800ddde <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	60fb      	str	r3, [r7, #12]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1ef      	bne.n	800ddbc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	2000b698 	.word	0x2000b698

0800ddf0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <pbuf_free_ooseq+0x38>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ddfc:	4b0b      	ldr	r3, [pc, #44]	; (800de2c <pbuf_free_ooseq+0x3c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	607b      	str	r3, [r7, #4]
 800de02:	e00a      	b.n	800de1a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f002 fe47 	bl	8010aa0 <tcp_free_ooseq>
      return;
 800de12:	e005      	b.n	800de20 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	607b      	str	r3, [r7, #4]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1f1      	bne.n	800de04 <pbuf_free_ooseq+0x14>
    }
  }
}
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	2000b6a0 	.word	0x2000b6a0
 800de2c:	2000b6a8 	.word	0x2000b6a8

0800de30 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800de30:	b480      	push	{r7}
 800de32:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800de34:	4b03      	ldr	r3, [pc, #12]	; (800de44 <pbuf_pool_is_empty+0x14>)
 800de36:	2201      	movs	r2, #1
 800de38:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800de3a:	bf00      	nop
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	2000b6a0 	.word	0x2000b6a0

0800de48 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	4611      	mov	r1, r2
 800de54:	461a      	mov	r2, r3
 800de56:	460b      	mov	r3, r1
 800de58:	80fb      	strh	r3, [r7, #6]
 800de5a:	4613      	mov	r3, r2
 800de5c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	88fa      	ldrh	r2, [r7, #6]
 800de6e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	88ba      	ldrh	r2, [r7, #4]
 800de74:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800de76:	8b3b      	ldrh	r3, [r7, #24]
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	7f3a      	ldrb	r2, [r7, #28]
 800de82:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2201      	movs	r2, #1
 800de88:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	73da      	strb	r2, [r3, #15]
}
 800de90:	bf00      	nop
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b08c      	sub	sp, #48	; 0x30
 800dea0:	af02      	add	r7, sp, #8
 800dea2:	4603      	mov	r3, r0
 800dea4:	71fb      	strb	r3, [r7, #7]
 800dea6:	460b      	mov	r3, r1
 800dea8:	80bb      	strh	r3, [r7, #4]
 800deaa:	4613      	mov	r3, r2
 800deac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800deb2:	887b      	ldrh	r3, [r7, #2]
 800deb4:	2b41      	cmp	r3, #65	; 0x41
 800deb6:	d00b      	beq.n	800ded0 <pbuf_alloc+0x34>
 800deb8:	2b41      	cmp	r3, #65	; 0x41
 800deba:	dc02      	bgt.n	800dec2 <pbuf_alloc+0x26>
 800debc:	2b01      	cmp	r3, #1
 800debe:	d007      	beq.n	800ded0 <pbuf_alloc+0x34>
 800dec0:	e0c2      	b.n	800e048 <pbuf_alloc+0x1ac>
 800dec2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dec6:	d00b      	beq.n	800dee0 <pbuf_alloc+0x44>
 800dec8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800decc:	d070      	beq.n	800dfb0 <pbuf_alloc+0x114>
 800dece:	e0bb      	b.n	800e048 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ded0:	887a      	ldrh	r2, [r7, #2]
 800ded2:	88bb      	ldrh	r3, [r7, #4]
 800ded4:	4619      	mov	r1, r3
 800ded6:	2000      	movs	r0, #0
 800ded8:	f000 f8d2 	bl	800e080 <pbuf_alloc_reference>
 800dedc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dede:	e0bd      	b.n	800e05c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dee0:	2300      	movs	r3, #0
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dee4:	2300      	movs	r3, #0
 800dee6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dee8:	88bb      	ldrh	r3, [r7, #4]
 800deea:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800deec:	2008      	movs	r0, #8
 800deee:	f7ff fc5b 	bl	800d7a8 <memp_malloc>
 800def2:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d109      	bne.n	800df0e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800defa:	f7ff ff99 	bl	800de30 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <pbuf_alloc+0x6e>
            pbuf_free(p);
 800df04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df06:	f000 fadd 	bl	800e4c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	e0a7      	b.n	800e05e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800df0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df10:	3303      	adds	r3, #3
 800df12:	b29b      	uxth	r3, r3
 800df14:	f023 0303 	bic.w	r3, r3, #3
 800df18:	b29b      	uxth	r3, r3
 800df1a:	f5c3 6394 	rsb	r3, r3, #1184	; 0x4a0
 800df1e:	b29a      	uxth	r2, r3
 800df20:	8b7b      	ldrh	r3, [r7, #26]
 800df22:	4293      	cmp	r3, r2
 800df24:	bf28      	it	cs
 800df26:	4613      	movcs	r3, r2
 800df28:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800df2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df2c:	3310      	adds	r3, #16
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	4413      	add	r3, r2
 800df32:	3303      	adds	r3, #3
 800df34:	f023 0303 	bic.w	r3, r3, #3
 800df38:	4618      	mov	r0, r3
 800df3a:	8a79      	ldrh	r1, [r7, #18]
 800df3c:	8b7a      	ldrh	r2, [r7, #26]
 800df3e:	2300      	movs	r3, #0
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	887b      	ldrh	r3, [r7, #2]
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	460b      	mov	r3, r1
 800df48:	4601      	mov	r1, r0
 800df4a:	6978      	ldr	r0, [r7, #20]
 800df4c:	f7ff ff7c 	bl	800de48 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	f003 0303 	and.w	r3, r3, #3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d006      	beq.n	800df6a <pbuf_alloc+0xce>
 800df5c:	4b42      	ldr	r3, [pc, #264]	; (800e068 <pbuf_alloc+0x1cc>)
 800df5e:	f240 1201 	movw	r2, #257	; 0x101
 800df62:	4942      	ldr	r1, [pc, #264]	; (800e06c <pbuf_alloc+0x1d0>)
 800df64:	4842      	ldr	r0, [pc, #264]	; (800e070 <pbuf_alloc+0x1d4>)
 800df66:	f007 ff97 	bl	8015e98 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800df6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df6c:	3303      	adds	r3, #3
 800df6e:	f023 0303 	bic.w	r3, r3, #3
 800df72:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 800df76:	d106      	bne.n	800df86 <pbuf_alloc+0xea>
 800df78:	4b3b      	ldr	r3, [pc, #236]	; (800e068 <pbuf_alloc+0x1cc>)
 800df7a:	f240 1203 	movw	r2, #259	; 0x103
 800df7e:	493d      	ldr	r1, [pc, #244]	; (800e074 <pbuf_alloc+0x1d8>)
 800df80:	483b      	ldr	r0, [pc, #236]	; (800e070 <pbuf_alloc+0x1d4>)
 800df82:	f007 ff89 	bl	8015e98 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d102      	bne.n	800df92 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24
 800df90:	e002      	b.n	800df98 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	697a      	ldr	r2, [r7, #20]
 800df96:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800df9c:	8b7a      	ldrh	r2, [r7, #26]
 800df9e:	8a7b      	ldrh	r3, [r7, #18]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dfa8:	8b7b      	ldrh	r3, [r7, #26]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d19e      	bne.n	800deec <pbuf_alloc+0x50>
      break;
 800dfae:	e055      	b.n	800e05c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dfb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfb2:	3303      	adds	r3, #3
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	f023 0303 	bic.w	r3, r3, #3
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	88bb      	ldrh	r3, [r7, #4]
 800dfbe:	3303      	adds	r3, #3
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	f023 0303 	bic.w	r3, r3, #3
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	4413      	add	r3, r2
 800dfca:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dfcc:	8a3b      	ldrh	r3, [r7, #16]
 800dfce:	3310      	adds	r3, #16
 800dfd0:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dfd2:	8a3a      	ldrh	r2, [r7, #16]
 800dfd4:	88bb      	ldrh	r3, [r7, #4]
 800dfd6:	3303      	adds	r3, #3
 800dfd8:	f023 0303 	bic.w	r3, r3, #3
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d306      	bcc.n	800dfee <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dfe0:	89fa      	ldrh	r2, [r7, #14]
 800dfe2:	88bb      	ldrh	r3, [r7, #4]
 800dfe4:	3303      	adds	r3, #3
 800dfe6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d201      	bcs.n	800dff2 <pbuf_alloc+0x156>
        return NULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	e035      	b.n	800e05e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dff2:	89fb      	ldrh	r3, [r7, #14]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7ff fa41 	bl	800d47c <mem_malloc>
 800dffa:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d101      	bne.n	800e006 <pbuf_alloc+0x16a>
        return NULL;
 800e002:	2300      	movs	r3, #0
 800e004:	e02b      	b.n	800e05e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e008:	3310      	adds	r3, #16
 800e00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00c:	4413      	add	r3, r2
 800e00e:	3303      	adds	r3, #3
 800e010:	f023 0303 	bic.w	r3, r3, #3
 800e014:	4618      	mov	r0, r3
 800e016:	88b9      	ldrh	r1, [r7, #4]
 800e018:	88ba      	ldrh	r2, [r7, #4]
 800e01a:	2300      	movs	r3, #0
 800e01c:	9301      	str	r3, [sp, #4]
 800e01e:	887b      	ldrh	r3, [r7, #2]
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	460b      	mov	r3, r1
 800e024:	4601      	mov	r1, r0
 800e026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e028:	f7ff ff0e 	bl	800de48 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f003 0303 	and.w	r3, r3, #3
 800e034:	2b00      	cmp	r3, #0
 800e036:	d010      	beq.n	800e05a <pbuf_alloc+0x1be>
 800e038:	4b0b      	ldr	r3, [pc, #44]	; (800e068 <pbuf_alloc+0x1cc>)
 800e03a:	f240 1223 	movw	r2, #291	; 0x123
 800e03e:	490e      	ldr	r1, [pc, #56]	; (800e078 <pbuf_alloc+0x1dc>)
 800e040:	480b      	ldr	r0, [pc, #44]	; (800e070 <pbuf_alloc+0x1d4>)
 800e042:	f007 ff29 	bl	8015e98 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e046:	e008      	b.n	800e05a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e048:	4b07      	ldr	r3, [pc, #28]	; (800e068 <pbuf_alloc+0x1cc>)
 800e04a:	f240 1227 	movw	r2, #295	; 0x127
 800e04e:	490b      	ldr	r1, [pc, #44]	; (800e07c <pbuf_alloc+0x1e0>)
 800e050:	4807      	ldr	r0, [pc, #28]	; (800e070 <pbuf_alloc+0x1d4>)
 800e052:	f007 ff21 	bl	8015e98 <iprintf>
      return NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	e001      	b.n	800e05e <pbuf_alloc+0x1c2>
      break;
 800e05a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3728      	adds	r7, #40	; 0x28
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	08018e20 	.word	0x08018e20
 800e06c:	08018e50 	.word	0x08018e50
 800e070:	08018e80 	.word	0x08018e80
 800e074:	08018ea8 	.word	0x08018ea8
 800e078:	08018edc 	.word	0x08018edc
 800e07c:	08018f08 	.word	0x08018f08

0800e080 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af02      	add	r7, sp, #8
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	460b      	mov	r3, r1
 800e08a:	807b      	strh	r3, [r7, #2]
 800e08c:	4613      	mov	r3, r2
 800e08e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e090:	883b      	ldrh	r3, [r7, #0]
 800e092:	2b41      	cmp	r3, #65	; 0x41
 800e094:	d009      	beq.n	800e0aa <pbuf_alloc_reference+0x2a>
 800e096:	883b      	ldrh	r3, [r7, #0]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d006      	beq.n	800e0aa <pbuf_alloc_reference+0x2a>
 800e09c:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <pbuf_alloc_reference+0x5c>)
 800e09e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e0a2:	490f      	ldr	r1, [pc, #60]	; (800e0e0 <pbuf_alloc_reference+0x60>)
 800e0a4:	480f      	ldr	r0, [pc, #60]	; (800e0e4 <pbuf_alloc_reference+0x64>)
 800e0a6:	f007 fef7 	bl	8015e98 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e0aa:	2007      	movs	r0, #7
 800e0ac:	f7ff fb7c 	bl	800d7a8 <memp_malloc>
 800e0b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	e00b      	b.n	800e0d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e0bc:	8879      	ldrh	r1, [r7, #2]
 800e0be:	887a      	ldrh	r2, [r7, #2]
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9301      	str	r3, [sp, #4]
 800e0c4:	883b      	ldrh	r3, [r7, #0]
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7ff febb 	bl	800de48 <pbuf_init_alloced_pbuf>
  return p;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	08018e20 	.word	0x08018e20
 800e0e0:	08018f24 	.word	0x08018f24
 800e0e4:	08018e80 	.word	0x08018e80

0800e0e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	607b      	str	r3, [r7, #4]
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	73fb      	strb	r3, [r7, #15]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	81bb      	strh	r3, [r7, #12]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
 800e0fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e100:	8a7b      	ldrh	r3, [r7, #18]
 800e102:	3303      	adds	r3, #3
 800e104:	f023 0203 	bic.w	r2, r3, #3
 800e108:	89bb      	ldrh	r3, [r7, #12]
 800e10a:	441a      	add	r2, r3
 800e10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e10e:	429a      	cmp	r2, r3
 800e110:	d901      	bls.n	800e116 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e112:	2300      	movs	r3, #0
 800e114:	e018      	b.n	800e148 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d007      	beq.n	800e12c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e11c:	8a7b      	ldrh	r3, [r7, #18]
 800e11e:	3303      	adds	r3, #3
 800e120:	f023 0303 	bic.w	r3, r3, #3
 800e124:	6a3a      	ldr	r2, [r7, #32]
 800e126:	4413      	add	r3, r2
 800e128:	617b      	str	r3, [r7, #20]
 800e12a:	e001      	b.n	800e130 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e12c:	2300      	movs	r3, #0
 800e12e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	89b9      	ldrh	r1, [r7, #12]
 800e134:	89ba      	ldrh	r2, [r7, #12]
 800e136:	2302      	movs	r3, #2
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	897b      	ldrh	r3, [r7, #10]
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	460b      	mov	r3, r1
 800e140:	6979      	ldr	r1, [r7, #20]
 800e142:	f7ff fe81 	bl	800de48 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e146:	687b      	ldr	r3, [r7, #4]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3718      	adds	r7, #24
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <pbuf_realloc+0x20>
 800e162:	4b3a      	ldr	r3, [pc, #232]	; (800e24c <pbuf_realloc+0xfc>)
 800e164:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e168:	4939      	ldr	r1, [pc, #228]	; (800e250 <pbuf_realloc+0x100>)
 800e16a:	483a      	ldr	r0, [pc, #232]	; (800e254 <pbuf_realloc+0x104>)
 800e16c:	f007 fe94 	bl	8015e98 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	891b      	ldrh	r3, [r3, #8]
 800e174:	887a      	ldrh	r2, [r7, #2]
 800e176:	429a      	cmp	r2, r3
 800e178:	d264      	bcs.n	800e244 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	891a      	ldrh	r2, [r3, #8]
 800e17e:	887b      	ldrh	r3, [r7, #2]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e184:	887b      	ldrh	r3, [r7, #2]
 800e186:	817b      	strh	r3, [r7, #10]
  q = p;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e18c:	e018      	b.n	800e1c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	895b      	ldrh	r3, [r3, #10]
 800e192:	897a      	ldrh	r2, [r7, #10]
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	891a      	ldrh	r2, [r3, #8]
 800e19c:	893b      	ldrh	r3, [r7, #8]
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <pbuf_realloc+0x70>
 800e1b2:	4b26      	ldr	r3, [pc, #152]	; (800e24c <pbuf_realloc+0xfc>)
 800e1b4:	f240 12af 	movw	r2, #431	; 0x1af
 800e1b8:	4927      	ldr	r1, [pc, #156]	; (800e258 <pbuf_realloc+0x108>)
 800e1ba:	4826      	ldr	r0, [pc, #152]	; (800e254 <pbuf_realloc+0x104>)
 800e1bc:	f007 fe6c 	bl	8015e98 <iprintf>
  while (rem_len > q->len) {
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	895b      	ldrh	r3, [r3, #10]
 800e1c4:	897a      	ldrh	r2, [r7, #10]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d8e1      	bhi.n	800e18e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	7b1b      	ldrb	r3, [r3, #12]
 800e1ce:	f003 030f 	and.w	r3, r3, #15
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d122      	bne.n	800e21c <pbuf_realloc+0xcc>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	895b      	ldrh	r3, [r3, #10]
 800e1da:	897a      	ldrh	r2, [r7, #10]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d01d      	beq.n	800e21c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	7b5b      	ldrb	r3, [r3, #13]
 800e1e4:	f003 0302 	and.w	r3, r3, #2
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d117      	bne.n	800e21c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	897b      	ldrh	r3, [r7, #10]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	4619      	mov	r1, r3
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff f83f 	bl	800d284 <mem_trim>
 800e206:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d106      	bne.n	800e21c <pbuf_realloc+0xcc>
 800e20e:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <pbuf_realloc+0xfc>)
 800e210:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e214:	4911      	ldr	r1, [pc, #68]	; (800e25c <pbuf_realloc+0x10c>)
 800e216:	480f      	ldr	r0, [pc, #60]	; (800e254 <pbuf_realloc+0x104>)
 800e218:	f007 fe3e 	bl	8015e98 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	897a      	ldrh	r2, [r7, #10]
 800e220:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	895a      	ldrh	r2, [r3, #10]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d004      	beq.n	800e23c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f000 f944 	bl	800e4c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2200      	movs	r2, #0
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	e000      	b.n	800e246 <pbuf_realloc+0xf6>
    return;
 800e244:	bf00      	nop

}
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	08018e20 	.word	0x08018e20
 800e250:	08018f38 	.word	0x08018f38
 800e254:	08018e80 	.word	0x08018e80
 800e258:	08018f50 	.word	0x08018f50
 800e25c:	08018f68 	.word	0x08018f68

0800e260 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	4613      	mov	r3, r2
 800e26c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d106      	bne.n	800e282 <pbuf_add_header_impl+0x22>
 800e274:	4b2c      	ldr	r3, [pc, #176]	; (800e328 <pbuf_add_header_impl+0xc8>)
 800e276:	f240 12df 	movw	r2, #479	; 0x1df
 800e27a:	492c      	ldr	r1, [pc, #176]	; (800e32c <pbuf_add_header_impl+0xcc>)
 800e27c:	482c      	ldr	r0, [pc, #176]	; (800e330 <pbuf_add_header_impl+0xd0>)
 800e27e:	f007 fe0b 	bl	8015e98 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d003      	beq.n	800e290 <pbuf_add_header_impl+0x30>
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e28e:	d301      	bcc.n	800e294 <pbuf_add_header_impl+0x34>
    return 1;
 800e290:	2301      	movs	r3, #1
 800e292:	e044      	b.n	800e31e <pbuf_add_header_impl+0xbe>
  }
  if (header_size_increment == 0) {
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <pbuf_add_header_impl+0x3e>
    return 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	e03f      	b.n	800e31e <pbuf_add_header_impl+0xbe>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	891a      	ldrh	r2, [r3, #8]
 800e2a6:	8a7b      	ldrh	r3, [r7, #18]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	8a7a      	ldrh	r2, [r7, #18]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d901      	bls.n	800e2b6 <pbuf_add_header_impl+0x56>
    return 1;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e033      	b.n	800e31e <pbuf_add_header_impl+0xbe>
  }

  type_internal = p->type_internal;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	7b1b      	ldrb	r3, [r3, #12]
 800e2ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e2bc:	8a3b      	ldrh	r3, [r7, #16]
 800e2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00d      	beq.n	800e2e2 <pbuf_add_header_impl+0x82>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	425b      	negs	r3, r3
 800e2ce:	4413      	add	r3, r2
 800e2d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f103 0210 	add.w	r2, r3, #16
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d90d      	bls.n	800e2fa <pbuf_add_header_impl+0x9a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e01d      	b.n	800e31e <pbuf_add_header_impl+0xbe>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e2e2:	79fb      	ldrb	r3, [r7, #7]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d006      	beq.n	800e2f6 <pbuf_add_header_impl+0x96>
      payload = (u8_t *)p->payload - header_size_increment;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	685a      	ldr	r2, [r3, #4]
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	425b      	negs	r3, r3
 800e2f0:	4413      	add	r3, r2
 800e2f2:	617b      	str	r3, [r7, #20]
 800e2f4:	e001      	b.n	800e2fa <pbuf_add_header_impl+0x9a>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e011      	b.n	800e31e <pbuf_add_header_impl+0xbe>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	895a      	ldrh	r2, [r3, #10]
 800e304:	8a7b      	ldrh	r3, [r7, #18]
 800e306:	4413      	add	r3, r2
 800e308:	b29a      	uxth	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	891a      	ldrh	r2, [r3, #8]
 800e312:	8a7b      	ldrh	r3, [r7, #18]
 800e314:	4413      	add	r3, r2
 800e316:	b29a      	uxth	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	811a      	strh	r2, [r3, #8]


  return 0;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	08018e20 	.word	0x08018e20
 800e32c:	08018f84 	.word	0x08018f84
 800e330:	08018e80 	.word	0x08018e80

0800e334 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e33e:	2200      	movs	r2, #0
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff ff8c 	bl	800e260 <pbuf_add_header_impl>
 800e348:	4603      	mov	r3, r0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
	...

0800e354 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d106      	bne.n	800e372 <pbuf_remove_header+0x1e>
 800e364:	4b20      	ldr	r3, [pc, #128]	; (800e3e8 <pbuf_remove_header+0x94>)
 800e366:	f240 224b 	movw	r2, #587	; 0x24b
 800e36a:	4920      	ldr	r1, [pc, #128]	; (800e3ec <pbuf_remove_header+0x98>)
 800e36c:	4820      	ldr	r0, [pc, #128]	; (800e3f0 <pbuf_remove_header+0x9c>)
 800e36e:	f007 fd93 	bl	8015e98 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <pbuf_remove_header+0x2c>
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e37e:	d301      	bcc.n	800e384 <pbuf_remove_header+0x30>
    return 1;
 800e380:	2301      	movs	r3, #1
 800e382:	e02c      	b.n	800e3de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <pbuf_remove_header+0x3a>
    return 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	e027      	b.n	800e3de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	895b      	ldrh	r3, [r3, #10]
 800e396:	89fa      	ldrh	r2, [r7, #14]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d908      	bls.n	800e3ae <pbuf_remove_header+0x5a>
 800e39c:	4b12      	ldr	r3, [pc, #72]	; (800e3e8 <pbuf_remove_header+0x94>)
 800e39e:	f240 2255 	movw	r2, #597	; 0x255
 800e3a2:	4914      	ldr	r1, [pc, #80]	; (800e3f4 <pbuf_remove_header+0xa0>)
 800e3a4:	4812      	ldr	r0, [pc, #72]	; (800e3f0 <pbuf_remove_header+0x9c>)
 800e3a6:	f007 fd77 	bl	8015e98 <iprintf>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e017      	b.n	800e3de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685a      	ldr	r2, [r3, #4]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	441a      	add	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	895a      	ldrh	r2, [r3, #10]
 800e3c4:	89fb      	ldrh	r3, [r7, #14]
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	891a      	ldrh	r2, [r3, #8]
 800e3d2:	89fb      	ldrh	r3, [r7, #14]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	08018e20 	.word	0x08018e20
 800e3ec:	08018f84 	.word	0x08018f84
 800e3f0:	08018e80 	.word	0x08018e80
 800e3f4:	08018f90 	.word	0x08018f90

0800e3f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	807b      	strh	r3, [r7, #2]
 800e404:	4613      	mov	r3, r2
 800e406:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	da08      	bge.n	800e422 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e410:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e414:	425b      	negs	r3, r3
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff ff9b 	bl	800e354 <pbuf_remove_header>
 800e41e:	4603      	mov	r3, r0
 800e420:	e007      	b.n	800e432 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e426:	787a      	ldrb	r2, [r7, #1]
 800e428:	4619      	mov	r1, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7ff ff18 	bl	800e260 <pbuf_add_header_impl>
 800e430:	4603      	mov	r3, r0
  }
}
 800e432:	4618      	mov	r0, r3
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b082      	sub	sp, #8
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	460b      	mov	r3, r1
 800e444:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e44a:	2201      	movs	r2, #1
 800e44c:	4619      	mov	r1, r3
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7ff ffd2 	bl	800e3f8 <pbuf_header_impl>
 800e454:	4603      	mov	r3, r0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b086      	sub	sp, #24
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	460b      	mov	r3, r1
 800e468:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e46e:	887b      	ldrh	r3, [r7, #2]
 800e470:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e472:	e01c      	b.n	800e4ae <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	895b      	ldrh	r3, [r3, #10]
 800e478:	8a7a      	ldrh	r2, [r7, #18]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d310      	bcc.n	800e4a0 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	895b      	ldrh	r3, [r3, #10]
 800e486:	8a7a      	ldrh	r2, [r7, #18]
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 f813 	bl	800e4c4 <pbuf_free>
 800e49e:	e006      	b.n	800e4ae <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e4a0:	8a7b      	ldrh	r3, [r7, #18]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6978      	ldr	r0, [r7, #20]
 800e4a6:	f7ff ff55 	bl	800e354 <pbuf_remove_header>
      free_left = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e4ae:	8a7b      	ldrh	r3, [r7, #18]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <pbuf_free_header+0x5c>
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1dc      	bne.n	800e474 <pbuf_free_header+0x16>
    }
  }
  return p;
 800e4ba:	697b      	ldr	r3, [r7, #20]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3718      	adds	r7, #24
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10b      	bne.n	800e4ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d106      	bne.n	800e4e6 <pbuf_free+0x22>
 800e4d8:	4b38      	ldr	r3, [pc, #224]	; (800e5bc <pbuf_free+0xf8>)
 800e4da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e4de:	4938      	ldr	r1, [pc, #224]	; (800e5c0 <pbuf_free+0xfc>)
 800e4e0:	4838      	ldr	r0, [pc, #224]	; (800e5c4 <pbuf_free+0x100>)
 800e4e2:	f007 fcd9 	bl	8015e98 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	e063      	b.n	800e5b2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e4ee:	e05c      	b.n	800e5aa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	7b9b      	ldrb	r3, [r3, #14]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d106      	bne.n	800e506 <pbuf_free+0x42>
 800e4f8:	4b30      	ldr	r3, [pc, #192]	; (800e5bc <pbuf_free+0xf8>)
 800e4fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e4fe:	4932      	ldr	r1, [pc, #200]	; (800e5c8 <pbuf_free+0x104>)
 800e500:	4830      	ldr	r0, [pc, #192]	; (800e5c4 <pbuf_free+0x100>)
 800e502:	f007 fcc9 	bl	8015e98 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	7b9b      	ldrb	r3, [r3, #14]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	739a      	strb	r2, [r3, #14]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	7b9b      	ldrb	r3, [r3, #14]
 800e516:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e518:	7dbb      	ldrb	r3, [r7, #22]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d143      	bne.n	800e5a6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	7b1b      	ldrb	r3, [r3, #12]
 800e528:	f003 030f 	and.w	r3, r3, #15
 800e52c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	7b5b      	ldrb	r3, [r3, #13]
 800e532:	f003 0302 	and.w	r3, r3, #2
 800e536:	2b00      	cmp	r3, #0
 800e538:	d011      	beq.n	800e55e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d106      	bne.n	800e554 <pbuf_free+0x90>
 800e546:	4b1d      	ldr	r3, [pc, #116]	; (800e5bc <pbuf_free+0xf8>)
 800e548:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e54c:	491f      	ldr	r1, [pc, #124]	; (800e5cc <pbuf_free+0x108>)
 800e54e:	481d      	ldr	r0, [pc, #116]	; (800e5c4 <pbuf_free+0x100>)
 800e550:	f007 fca2 	bl	8015e98 <iprintf>
        pc->custom_free_function(p);
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	691b      	ldr	r3, [r3, #16]
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	4798      	blx	r3
 800e55c:	e01d      	b.n	800e59a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e55e:	7bfb      	ldrb	r3, [r7, #15]
 800e560:	2b02      	cmp	r3, #2
 800e562:	d104      	bne.n	800e56e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	2008      	movs	r0, #8
 800e568:	f7ff f96a 	bl	800d840 <memp_free>
 800e56c:	e015      	b.n	800e59a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e56e:	7bfb      	ldrb	r3, [r7, #15]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d104      	bne.n	800e57e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e574:	6879      	ldr	r1, [r7, #4]
 800e576:	2007      	movs	r0, #7
 800e578:	f7ff f962 	bl	800d840 <memp_free>
 800e57c:	e00d      	b.n	800e59a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d103      	bne.n	800e58c <pbuf_free+0xc8>
          mem_free(p);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7fe fe13 	bl	800d1b0 <mem_free>
 800e58a:	e006      	b.n	800e59a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e58c:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <pbuf_free+0xf8>)
 800e58e:	f240 320f 	movw	r2, #783	; 0x30f
 800e592:	490f      	ldr	r1, [pc, #60]	; (800e5d0 <pbuf_free+0x10c>)
 800e594:	480b      	ldr	r0, [pc, #44]	; (800e5c4 <pbuf_free+0x100>)
 800e596:	f007 fc7f 	bl	8015e98 <iprintf>
        }
      }
      count++;
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	3301      	adds	r3, #1
 800e59e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	607b      	str	r3, [r7, #4]
 800e5a4:	e001      	b.n	800e5aa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d19f      	bne.n	800e4f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	08018e20 	.word	0x08018e20
 800e5c0:	08018f84 	.word	0x08018f84
 800e5c4:	08018e80 	.word	0x08018e80
 800e5c8:	08018fb0 	.word	0x08018fb0
 800e5cc:	08018fc8 	.word	0x08018fc8
 800e5d0:	08018fec 	.word	0x08018fec

0800e5d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e5e0:	e005      	b.n	800e5ee <pbuf_clen+0x1a>
    ++len;
 800e5e2:	89fb      	ldrh	r3, [r7, #14]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1f6      	bne.n	800e5e2 <pbuf_clen+0xe>
  }
  return len;
 800e5f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
	...

0800e604 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d010      	beq.n	800e634 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7b9b      	ldrb	r3, [r3, #14]
 800e616:	3301      	adds	r3, #1
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7b9b      	ldrb	r3, [r3, #14]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <pbuf_ref+0x30>
 800e626:	4b05      	ldr	r3, [pc, #20]	; (800e63c <pbuf_ref+0x38>)
 800e628:	f240 3242 	movw	r2, #834	; 0x342
 800e62c:	4904      	ldr	r1, [pc, #16]	; (800e640 <pbuf_ref+0x3c>)
 800e62e:	4805      	ldr	r0, [pc, #20]	; (800e644 <pbuf_ref+0x40>)
 800e630:	f007 fc32 	bl	8015e98 <iprintf>
  }
}
 800e634:	bf00      	nop
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	08018e20 	.word	0x08018e20
 800e640:	08019000 	.word	0x08019000
 800e644:	08018e80 	.word	0x08018e80

0800e648 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <pbuf_cat+0x16>
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d107      	bne.n	800e66e <pbuf_cat+0x26>
 800e65e:	4b20      	ldr	r3, [pc, #128]	; (800e6e0 <pbuf_cat+0x98>)
 800e660:	f240 325a 	movw	r2, #858	; 0x35a
 800e664:	491f      	ldr	r1, [pc, #124]	; (800e6e4 <pbuf_cat+0x9c>)
 800e666:	4820      	ldr	r0, [pc, #128]	; (800e6e8 <pbuf_cat+0xa0>)
 800e668:	f007 fc16 	bl	8015e98 <iprintf>
 800e66c:	e034      	b.n	800e6d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	e00a      	b.n	800e68a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	891a      	ldrh	r2, [r3, #8]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	891b      	ldrh	r3, [r3, #8]
 800e67c:	4413      	add	r3, r2
 800e67e:	b29a      	uxth	r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	60fb      	str	r3, [r7, #12]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1f0      	bne.n	800e674 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	891a      	ldrh	r2, [r3, #8]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	895b      	ldrh	r3, [r3, #10]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d006      	beq.n	800e6ac <pbuf_cat+0x64>
 800e69e:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <pbuf_cat+0x98>)
 800e6a0:	f240 3262 	movw	r2, #866	; 0x362
 800e6a4:	4911      	ldr	r1, [pc, #68]	; (800e6ec <pbuf_cat+0xa4>)
 800e6a6:	4810      	ldr	r0, [pc, #64]	; (800e6e8 <pbuf_cat+0xa0>)
 800e6a8:	f007 fbf6 	bl	8015e98 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d006      	beq.n	800e6c2 <pbuf_cat+0x7a>
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <pbuf_cat+0x98>)
 800e6b6:	f240 3263 	movw	r2, #867	; 0x363
 800e6ba:	490d      	ldr	r1, [pc, #52]	; (800e6f0 <pbuf_cat+0xa8>)
 800e6bc:	480a      	ldr	r0, [pc, #40]	; (800e6e8 <pbuf_cat+0xa0>)
 800e6be:	f007 fbeb 	bl	8015e98 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	891a      	ldrh	r2, [r3, #8]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	891b      	ldrh	r3, [r3, #8]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	08018e20 	.word	0x08018e20
 800e6e4:	08019014 	.word	0x08019014
 800e6e8:	08018e80 	.word	0x08018e80
 800e6ec:	0801904c 	.word	0x0801904c
 800e6f0:	0801907c 	.word	0x0801907c

0800e6f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e6fe:	6839      	ldr	r1, [r7, #0]
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f7ff ffa1 	bl	800e648 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e706:	6838      	ldr	r0, [r7, #0]
 800e708:	f7ff ff7c 	bl	800e604 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e70c:	bf00      	nop
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e71e:	2300      	movs	r3, #0
 800e720:	617b      	str	r3, [r7, #20]
 800e722:	2300      	movs	r3, #0
 800e724:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d008      	beq.n	800e73e <pbuf_copy+0x2a>
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d005      	beq.n	800e73e <pbuf_copy+0x2a>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	891a      	ldrh	r2, [r3, #8]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	891b      	ldrh	r3, [r3, #8]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d209      	bcs.n	800e752 <pbuf_copy+0x3e>
 800e73e:	4b57      	ldr	r3, [pc, #348]	; (800e89c <pbuf_copy+0x188>)
 800e740:	f240 32ca 	movw	r2, #970	; 0x3ca
 800e744:	4956      	ldr	r1, [pc, #344]	; (800e8a0 <pbuf_copy+0x18c>)
 800e746:	4857      	ldr	r0, [pc, #348]	; (800e8a4 <pbuf_copy+0x190>)
 800e748:	f007 fba6 	bl	8015e98 <iprintf>
 800e74c:	f06f 030f 	mvn.w	r3, #15
 800e750:	e09f      	b.n	800e892 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	895b      	ldrh	r3, [r3, #10]
 800e756:	461a      	mov	r2, r3
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	1ad2      	subs	r2, r2, r3
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	895b      	ldrh	r3, [r3, #10]
 800e760:	4619      	mov	r1, r3
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	1acb      	subs	r3, r1, r3
 800e766:	429a      	cmp	r2, r3
 800e768:	d306      	bcc.n	800e778 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	895b      	ldrh	r3, [r3, #10]
 800e76e:	461a      	mov	r2, r3
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	e005      	b.n	800e784 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	895b      	ldrh	r3, [r3, #10]
 800e77c:	461a      	mov	r2, r3
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	18d0      	adds	r0, r2, r3
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	4413      	add	r3, r2
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	4619      	mov	r1, r3
 800e798:	f007 fb51 	bl	8015e3e <memcpy>
    offset_to += len;
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	895b      	ldrh	r3, [r3, #10]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d206      	bcs.n	800e7c6 <pbuf_copy+0xb2>
 800e7b8:	4b38      	ldr	r3, [pc, #224]	; (800e89c <pbuf_copy+0x188>)
 800e7ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e7be:	493a      	ldr	r1, [pc, #232]	; (800e8a8 <pbuf_copy+0x194>)
 800e7c0:	4838      	ldr	r0, [pc, #224]	; (800e8a4 <pbuf_copy+0x190>)
 800e7c2:	f007 fb69 	bl	8015e98 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	895b      	ldrh	r3, [r3, #10]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d206      	bcs.n	800e7e0 <pbuf_copy+0xcc>
 800e7d2:	4b32      	ldr	r3, [pc, #200]	; (800e89c <pbuf_copy+0x188>)
 800e7d4:	f240 32da 	movw	r2, #986	; 0x3da
 800e7d8:	4934      	ldr	r1, [pc, #208]	; (800e8ac <pbuf_copy+0x198>)
 800e7da:	4832      	ldr	r0, [pc, #200]	; (800e8a4 <pbuf_copy+0x190>)
 800e7dc:	f007 fb5c 	bl	8015e98 <iprintf>
    if (offset_from >= p_from->len) {
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	895b      	ldrh	r3, [r3, #10]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d804      	bhi.n	800e7f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	895b      	ldrh	r3, [r3, #10]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d114      	bne.n	800e82c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e802:	2300      	movs	r3, #0
 800e804:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10c      	bne.n	800e82c <pbuf_copy+0x118>
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d009      	beq.n	800e82c <pbuf_copy+0x118>
 800e818:	4b20      	ldr	r3, [pc, #128]	; (800e89c <pbuf_copy+0x188>)
 800e81a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e81e:	4924      	ldr	r1, [pc, #144]	; (800e8b0 <pbuf_copy+0x19c>)
 800e820:	4820      	ldr	r0, [pc, #128]	; (800e8a4 <pbuf_copy+0x190>)
 800e822:	f007 fb39 	bl	8015e98 <iprintf>
 800e826:	f06f 030f 	mvn.w	r3, #15
 800e82a:	e032      	b.n	800e892 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d013      	beq.n	800e85a <pbuf_copy+0x146>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	895a      	ldrh	r2, [r3, #10]
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	891b      	ldrh	r3, [r3, #8]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d10d      	bne.n	800e85a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d009      	beq.n	800e85a <pbuf_copy+0x146>
 800e846:	4b15      	ldr	r3, [pc, #84]	; (800e89c <pbuf_copy+0x188>)
 800e848:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800e84c:	4919      	ldr	r1, [pc, #100]	; (800e8b4 <pbuf_copy+0x1a0>)
 800e84e:	4815      	ldr	r0, [pc, #84]	; (800e8a4 <pbuf_copy+0x190>)
 800e850:	f007 fb22 	bl	8015e98 <iprintf>
 800e854:	f06f 0305 	mvn.w	r3, #5
 800e858:	e01b      	b.n	800e892 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d013      	beq.n	800e888 <pbuf_copy+0x174>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	895a      	ldrh	r2, [r3, #10]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	891b      	ldrh	r3, [r3, #8]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d10d      	bne.n	800e888 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d009      	beq.n	800e888 <pbuf_copy+0x174>
 800e874:	4b09      	ldr	r3, [pc, #36]	; (800e89c <pbuf_copy+0x188>)
 800e876:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e87a:	490e      	ldr	r1, [pc, #56]	; (800e8b4 <pbuf_copy+0x1a0>)
 800e87c:	4809      	ldr	r0, [pc, #36]	; (800e8a4 <pbuf_copy+0x190>)
 800e87e:	f007 fb0b 	bl	8015e98 <iprintf>
 800e882:	f06f 0305 	mvn.w	r3, #5
 800e886:	e004      	b.n	800e892 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f47f af61 	bne.w	800e752 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e890:	2300      	movs	r3, #0
}
 800e892:	4618      	mov	r0, r3
 800e894:	3718      	adds	r7, #24
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	08018e20 	.word	0x08018e20
 800e8a0:	080190c8 	.word	0x080190c8
 800e8a4:	08018e80 	.word	0x08018e80
 800e8a8:	080190f8 	.word	0x080190f8
 800e8ac:	08019110 	.word	0x08019110
 800e8b0:	0801912c 	.word	0x0801912c
 800e8b4:	0801913c 	.word	0x0801913c

0800e8b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b088      	sub	sp, #32
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	80fb      	strh	r3, [r7, #6]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d108      	bne.n	800e8ee <pbuf_copy_partial+0x36>
 800e8dc:	4b2b      	ldr	r3, [pc, #172]	; (800e98c <pbuf_copy_partial+0xd4>)
 800e8de:	f240 420a 	movw	r2, #1034	; 0x40a
 800e8e2:	492b      	ldr	r1, [pc, #172]	; (800e990 <pbuf_copy_partial+0xd8>)
 800e8e4:	482b      	ldr	r0, [pc, #172]	; (800e994 <pbuf_copy_partial+0xdc>)
 800e8e6:	f007 fad7 	bl	8015e98 <iprintf>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	e04a      	b.n	800e984 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d108      	bne.n	800e906 <pbuf_copy_partial+0x4e>
 800e8f4:	4b25      	ldr	r3, [pc, #148]	; (800e98c <pbuf_copy_partial+0xd4>)
 800e8f6:	f240 420b 	movw	r2, #1035	; 0x40b
 800e8fa:	4927      	ldr	r1, [pc, #156]	; (800e998 <pbuf_copy_partial+0xe0>)
 800e8fc:	4825      	ldr	r0, [pc, #148]	; (800e994 <pbuf_copy_partial+0xdc>)
 800e8fe:	f007 facb 	bl	8015e98 <iprintf>
 800e902:	2300      	movs	r3, #0
 800e904:	e03e      	b.n	800e984 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	61fb      	str	r3, [r7, #28]
 800e90a:	e034      	b.n	800e976 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e90c:	88bb      	ldrh	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00a      	beq.n	800e928 <pbuf_copy_partial+0x70>
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	895b      	ldrh	r3, [r3, #10]
 800e916:	88ba      	ldrh	r2, [r7, #4]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d305      	bcc.n	800e928 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	895b      	ldrh	r3, [r3, #10]
 800e920:	88ba      	ldrh	r2, [r7, #4]
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	80bb      	strh	r3, [r7, #4]
 800e926:	e023      	b.n	800e970 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	895a      	ldrh	r2, [r3, #10]
 800e92c:	88bb      	ldrh	r3, [r7, #4]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e932:	8b3a      	ldrh	r2, [r7, #24]
 800e934:	88fb      	ldrh	r3, [r7, #6]
 800e936:	429a      	cmp	r2, r3
 800e938:	d901      	bls.n	800e93e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e93a:	88fb      	ldrh	r3, [r7, #6]
 800e93c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e93e:	8b7b      	ldrh	r3, [r7, #26]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	18d0      	adds	r0, r2, r3
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	88bb      	ldrh	r3, [r7, #4]
 800e94a:	4413      	add	r3, r2
 800e94c:	8b3a      	ldrh	r2, [r7, #24]
 800e94e:	4619      	mov	r1, r3
 800e950:	f007 fa75 	bl	8015e3e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e954:	8afa      	ldrh	r2, [r7, #22]
 800e956:	8b3b      	ldrh	r3, [r7, #24]
 800e958:	4413      	add	r3, r2
 800e95a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e95c:	8b7a      	ldrh	r2, [r7, #26]
 800e95e:	8b3b      	ldrh	r3, [r7, #24]
 800e960:	4413      	add	r3, r2
 800e962:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e964:	88fa      	ldrh	r2, [r7, #6]
 800e966:	8b3b      	ldrh	r3, [r7, #24]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	61fb      	str	r3, [r7, #28]
 800e976:	88fb      	ldrh	r3, [r7, #6]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <pbuf_copy_partial+0xca>
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1c4      	bne.n	800e90c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e982:	8afb      	ldrh	r3, [r7, #22]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3720      	adds	r7, #32
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	08018e20 	.word	0x08018e20
 800e990:	08019168 	.word	0x08019168
 800e994:	08018e80 	.word	0x08018e80
 800e998:	08019188 	.word	0x08019188

0800e99c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b087      	sub	sp, #28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	607a      	str	r2, [r7, #4]
 800e9a8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800e9aa:	897b      	ldrh	r3, [r7, #10]
 800e9ac:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800e9b2:	e007      	b.n	800e9c4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	895b      	ldrh	r3, [r3, #10]
 800e9b8:	8afa      	ldrh	r2, [r7, #22]
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d004      	beq.n	800e9d4 <pbuf_skip_const+0x38>
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	895b      	ldrh	r3, [r3, #10]
 800e9ce:	8afa      	ldrh	r2, [r7, #22]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d2ef      	bcs.n	800e9b4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	8afa      	ldrh	r2, [r7, #22]
 800e9de:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800e9e0:	693b      	ldr	r3, [r7, #16]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	60f8      	str	r0, [r7, #12]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	607a      	str	r2, [r7, #4]
 800e9fa:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800e9fc:	897b      	ldrh	r3, [r7, #10]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	4619      	mov	r1, r3
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f7ff ffca 	bl	800e99c <pbuf_skip_const>
 800ea08:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800ea0a:	697b      	ldr	r3, [r7, #20]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3718      	adds	r7, #24
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ea22:	88fb      	ldrh	r3, [r7, #6]
 800ea24:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d109      	bne.n	800ea44 <pbuf_take+0x30>
 800ea30:	4b3a      	ldr	r3, [pc, #232]	; (800eb1c <pbuf_take+0x108>)
 800ea32:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ea36:	493a      	ldr	r1, [pc, #232]	; (800eb20 <pbuf_take+0x10c>)
 800ea38:	483a      	ldr	r0, [pc, #232]	; (800eb24 <pbuf_take+0x110>)
 800ea3a:	f007 fa2d 	bl	8015e98 <iprintf>
 800ea3e:	f06f 030f 	mvn.w	r3, #15
 800ea42:	e067      	b.n	800eb14 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <pbuf_take+0x4a>
 800ea4a:	4b34      	ldr	r3, [pc, #208]	; (800eb1c <pbuf_take+0x108>)
 800ea4c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ea50:	4935      	ldr	r1, [pc, #212]	; (800eb28 <pbuf_take+0x114>)
 800ea52:	4834      	ldr	r0, [pc, #208]	; (800eb24 <pbuf_take+0x110>)
 800ea54:	f007 fa20 	bl	8015e98 <iprintf>
 800ea58:	f06f 030f 	mvn.w	r3, #15
 800ea5c:	e05a      	b.n	800eb14 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	891b      	ldrh	r3, [r3, #8]
 800ea62:	88fa      	ldrh	r2, [r7, #6]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d909      	bls.n	800ea7c <pbuf_take+0x68>
 800ea68:	4b2c      	ldr	r3, [pc, #176]	; (800eb1c <pbuf_take+0x108>)
 800ea6a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ea6e:	492f      	ldr	r1, [pc, #188]	; (800eb2c <pbuf_take+0x118>)
 800ea70:	482c      	ldr	r0, [pc, #176]	; (800eb24 <pbuf_take+0x110>)
 800ea72:	f007 fa11 	bl	8015e98 <iprintf>
 800ea76:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7a:	e04b      	b.n	800eb14 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <pbuf_take+0x7e>
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <pbuf_take+0x7e>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	891b      	ldrh	r3, [r3, #8]
 800ea8c:	88fa      	ldrh	r2, [r7, #6]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d902      	bls.n	800ea98 <pbuf_take+0x84>
    return ERR_ARG;
 800ea92:	f06f 030f 	mvn.w	r3, #15
 800ea96:	e03d      	b.n	800eb14 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	61fb      	str	r3, [r7, #28]
 800ea9c:	e028      	b.n	800eaf0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d106      	bne.n	800eab2 <pbuf_take+0x9e>
 800eaa4:	4b1d      	ldr	r3, [pc, #116]	; (800eb1c <pbuf_take+0x108>)
 800eaa6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800eaaa:	4921      	ldr	r1, [pc, #132]	; (800eb30 <pbuf_take+0x11c>)
 800eaac:	481d      	ldr	r0, [pc, #116]	; (800eb24 <pbuf_take+0x110>)
 800eaae:	f007 f9f3 	bl	8015e98 <iprintf>
    buf_copy_len = total_copy_len;
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	895b      	ldrh	r3, [r3, #10]
 800eaba:	461a      	mov	r2, r3
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d202      	bcs.n	800eac8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	895b      	ldrh	r3, [r3, #10]
 800eac6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	6858      	ldr	r0, [r3, #4]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	4413      	add	r3, r2
 800ead2:	69ba      	ldr	r2, [r7, #24]
 800ead4:	4619      	mov	r1, r3
 800ead6:	f007 f9b2 	bl	8015e3e <memcpy>
    total_copy_len -= buf_copy_len;
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	4413      	add	r3, r2
 800eae8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	61fb      	str	r3, [r7, #28]
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1d3      	bne.n	800ea9e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d103      	bne.n	800eb04 <pbuf_take+0xf0>
 800eafc:	88fa      	ldrh	r2, [r7, #6]
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d006      	beq.n	800eb12 <pbuf_take+0xfe>
 800eb04:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <pbuf_take+0x108>)
 800eb06:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800eb0a:	490a      	ldr	r1, [pc, #40]	; (800eb34 <pbuf_take+0x120>)
 800eb0c:	4805      	ldr	r0, [pc, #20]	; (800eb24 <pbuf_take+0x110>)
 800eb0e:	f007 f9c3 	bl	8015e98 <iprintf>
  return ERR_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3720      	adds	r7, #32
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	08018e20 	.word	0x08018e20
 800eb20:	080191f8 	.word	0x080191f8
 800eb24:	08018e80 	.word	0x08018e80
 800eb28:	08019210 	.word	0x08019210
 800eb2c:	0801922c 	.word	0x0801922c
 800eb30:	0801924c 	.word	0x0801924c
 800eb34:	08019264 	.word	0x08019264

0800eb38 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	4611      	mov	r1, r2
 800eb44:	461a      	mov	r2, r3
 800eb46:	460b      	mov	r3, r1
 800eb48:	80fb      	strh	r3, [r7, #6]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800eb4e:	f107 0210 	add.w	r2, r7, #16
 800eb52:	88bb      	ldrh	r3, [r7, #4]
 800eb54:	4619      	mov	r1, r3
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f7ff ff49 	bl	800e9ee <pbuf_skip>
 800eb5c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d047      	beq.n	800ebf4 <pbuf_take_at+0xbc>
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	891b      	ldrh	r3, [r3, #8]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	8a3b      	ldrh	r3, [r7, #16]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	88fb      	ldrh	r3, [r7, #6]
 800eb70:	440b      	add	r3, r1
 800eb72:	429a      	cmp	r2, r3
 800eb74:	db3e      	blt.n	800ebf4 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800eb76:	88fb      	ldrh	r3, [r7, #6]
 800eb78:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	895a      	ldrh	r2, [r3, #10]
 800eb82:	8a3b      	ldrh	r3, [r7, #16]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d806      	bhi.n	800eb96 <pbuf_take_at+0x5e>
 800eb88:	4b1d      	ldr	r3, [pc, #116]	; (800ec00 <pbuf_take_at+0xc8>)
 800eb8a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800eb8e:	491d      	ldr	r1, [pc, #116]	; (800ec04 <pbuf_take_at+0xcc>)
 800eb90:	481d      	ldr	r0, [pc, #116]	; (800ec08 <pbuf_take_at+0xd0>)
 800eb92:	f007 f981 	bl	8015e98 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	895b      	ldrh	r3, [r3, #10]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	8a3b      	ldrh	r3, [r7, #16]
 800eb9e:	1ad2      	subs	r2, r2, r3
 800eba0:	88fb      	ldrh	r3, [r7, #6]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	da05      	bge.n	800ebb2 <pbuf_take_at+0x7a>
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	895a      	ldrh	r2, [r3, #10]
 800ebaa:	8a3b      	ldrh	r3, [r7, #16]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	e000      	b.n	800ebb4 <pbuf_take_at+0x7c>
 800ebb2:	88fb      	ldrh	r3, [r7, #6]
 800ebb4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	8a3a      	ldrh	r2, [r7, #16]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	8a7a      	ldrh	r2, [r7, #18]
 800ebc0:	68b9      	ldr	r1, [r7, #8]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f007 f93b 	bl	8015e3e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800ebc8:	8b7a      	ldrh	r2, [r7, #26]
 800ebca:	8a7b      	ldrh	r3, [r7, #18]
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800ebd0:	8a7b      	ldrh	r3, [r7, #18]
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800ebd8:	8b7b      	ldrh	r3, [r7, #26]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d008      	beq.n	800ebf0 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	8b7a      	ldrh	r2, [r7, #26]
 800ebe4:	6979      	ldr	r1, [r7, #20]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff ff14 	bl	800ea14 <pbuf_take>
 800ebec:	4603      	mov	r3, r0
 800ebee:	e003      	b.n	800ebf8 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e001      	b.n	800ebf8 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800ebf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3720      	adds	r7, #32
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	08018e20 	.word	0x08018e20
 800ec04:	0801927c 	.word	0x0801927c
 800ec08:	08018e80 	.word	0x08018e80

0800ec0c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	4603      	mov	r3, r0
 800ec14:	603a      	str	r2, [r7, #0]
 800ec16:	71fb      	strb	r3, [r7, #7]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	8919      	ldrh	r1, [r3, #8]
 800ec20:	88ba      	ldrh	r2, [r7, #4]
 800ec22:	79fb      	ldrb	r3, [r7, #7]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff f939 	bl	800de9c <pbuf_alloc>
 800ec2a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <pbuf_clone+0x2a>
    return NULL;
 800ec32:	2300      	movs	r3, #0
 800ec34:	e011      	b.n	800ec5a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f7ff fd6b 	bl	800e714 <pbuf_copy>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ec42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d006      	beq.n	800ec58 <pbuf_clone+0x4c>
 800ec4a:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <pbuf_clone+0x58>)
 800ec4c:	f240 5224 	movw	r2, #1316	; 0x524
 800ec50:	4905      	ldr	r1, [pc, #20]	; (800ec68 <pbuf_clone+0x5c>)
 800ec52:	4806      	ldr	r0, [pc, #24]	; (800ec6c <pbuf_clone+0x60>)
 800ec54:	f007 f920 	bl	8015e98 <iprintf>
  return q;
 800ec58:	68fb      	ldr	r3, [r7, #12]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	08018e20 	.word	0x08018e20
 800ec68:	08019294 	.word	0x08019294
 800ec6c:	08018e80 	.word	0x08018e80

0800ec70 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800ec7c:	887b      	ldrh	r3, [r7, #2]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f80c 	bl	800ec9e <pbuf_try_get_at>
 800ec86:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	db02      	blt.n	800ec94 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	e000      	b.n	800ec96 <pbuf_get_at+0x26>
  }
  return 0;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b084      	sub	sp, #16
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
 800eca6:	460b      	mov	r3, r1
 800eca8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800ecaa:	f107 020a 	add.w	r2, r7, #10
 800ecae:	887b      	ldrh	r3, [r7, #2]
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7ff fe72 	bl	800e99c <pbuf_skip_const>
 800ecb8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00a      	beq.n	800ecd6 <pbuf_try_get_at+0x38>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	895a      	ldrh	r2, [r3, #10]
 800ecc4:	897b      	ldrh	r3, [r7, #10]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d905      	bls.n	800ecd6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	897a      	ldrh	r2, [r7, #10]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	e001      	b.n	800ecda <pbuf_try_get_at+0x3c>
  }
  return -1;
 800ecd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	460b      	mov	r3, r1
 800ecec:	807b      	strh	r3, [r7, #2]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800ecf2:	f107 020a 	add.w	r2, r7, #10
 800ecf6:	887b      	ldrh	r3, [r7, #2]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7ff fe77 	bl	800e9ee <pbuf_skip>
 800ed00:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <pbuf_put_at+0x3c>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	895a      	ldrh	r2, [r3, #10]
 800ed0c:	897b      	ldrh	r3, [r7, #10]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d905      	bls.n	800ed1e <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	897a      	ldrh	r2, [r7, #10]
 800ed18:	4413      	add	r3, r2
 800ed1a:	787a      	ldrb	r2, [r7, #1]
 800ed1c:	701a      	strb	r2, [r3, #0]
  }
}
 800ed1e:	bf00      	nop
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b088      	sub	sp, #32
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	60f8      	str	r0, [r7, #12]
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	461a      	mov	r2, r3
 800ed32:	460b      	mov	r3, r1
 800ed34:	817b      	strh	r3, [r7, #10]
 800ed36:	4613      	mov	r3, r2
 800ed38:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800ed3a:	897b      	ldrh	r3, [r7, #10]
 800ed3c:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	891b      	ldrh	r3, [r3, #8]
 800ed46:	4619      	mov	r1, r3
 800ed48:	897a      	ldrh	r2, [r7, #10]
 800ed4a:	893b      	ldrh	r3, [r7, #8]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	4299      	cmp	r1, r3
 800ed50:	da0a      	bge.n	800ed68 <pbuf_memcmp+0x42>
    return 0xffff;
 800ed52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed56:	e03a      	b.n	800edce <pbuf_memcmp+0xa8>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	8bfa      	ldrh	r2, [r7, #30]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d004      	beq.n	800ed78 <pbuf_memcmp+0x52>
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	895b      	ldrh	r3, [r3, #10]
 800ed72:	8bfa      	ldrh	r2, [r7, #30]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d2ef      	bcs.n	800ed58 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800ed78:	2300      	movs	r3, #0
 800ed7a:	82fb      	strh	r3, [r7, #22]
 800ed7c:	e022      	b.n	800edc4 <pbuf_memcmp+0x9e>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800ed7e:	8bfa      	ldrh	r2, [r7, #30]
 800ed80:	8afb      	ldrh	r3, [r7, #22]
 800ed82:	4413      	add	r3, r2
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4619      	mov	r1, r3
 800ed88:	69b8      	ldr	r0, [r7, #24]
 800ed8a:	f7ff ff71 	bl	800ec70 <pbuf_get_at>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800ed92:	8afb      	ldrh	r3, [r7, #22]
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	4413      	add	r3, r2
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800ed9c:	7d7a      	ldrb	r2, [r7, #21]
 800ed9e:	7d3b      	ldrb	r3, [r7, #20]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d00c      	beq.n	800edbe <pbuf_memcmp+0x98>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800eda4:	8afb      	ldrh	r3, [r7, #22]
 800eda6:	3301      	adds	r3, #1
 800eda8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800edac:	4293      	cmp	r3, r2
 800edae:	dc03      	bgt.n	800edb8 <pbuf_memcmp+0x92>
 800edb0:	8afb      	ldrh	r3, [r7, #22]
 800edb2:	3301      	adds	r3, #1
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	e00a      	b.n	800edce <pbuf_memcmp+0xa8>
 800edb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edbc:	e007      	b.n	800edce <pbuf_memcmp+0xa8>
  for (i = 0; i < n; i++) {
 800edbe:	8afb      	ldrh	r3, [r7, #22]
 800edc0:	3301      	adds	r3, #1
 800edc2:	82fb      	strh	r3, [r7, #22]
 800edc4:	8afa      	ldrh	r2, [r7, #22]
 800edc6:	893b      	ldrh	r3, [r7, #8]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d3d8      	bcc.n	800ed7e <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3720      	adds	r7, #32
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b086      	sub	sp, #24
 800edda:	af00      	add	r7, sp, #0
 800eddc:	60f8      	str	r0, [r7, #12]
 800edde:	60b9      	str	r1, [r7, #8]
 800ede0:	4611      	mov	r1, r2
 800ede2:	461a      	mov	r2, r3
 800ede4:	460b      	mov	r3, r1
 800ede6:	80fb      	strh	r3, [r7, #6]
 800ede8:	4613      	mov	r3, r2
 800edea:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	891a      	ldrh	r2, [r3, #8]
 800edf0:	88fb      	ldrh	r3, [r7, #6]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	891b      	ldrh	r3, [r3, #8]
 800edfa:	4619      	mov	r1, r3
 800edfc:	88fa      	ldrh	r2, [r7, #6]
 800edfe:	88bb      	ldrh	r3, [r7, #4]
 800ee00:	4413      	add	r3, r2
 800ee02:	4299      	cmp	r1, r3
 800ee04:	db16      	blt.n	800ee34 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800ee06:	88bb      	ldrh	r3, [r7, #4]
 800ee08:	82fb      	strh	r3, [r7, #22]
 800ee0a:	e00f      	b.n	800ee2c <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	8af9      	ldrh	r1, [r7, #22]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff ff87 	bl	800ed26 <pbuf_memcmp>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800ee1c:	8a7b      	ldrh	r3, [r7, #18]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d101      	bne.n	800ee26 <pbuf_memfind+0x50>
        return i;
 800ee22:	8afb      	ldrh	r3, [r7, #22]
 800ee24:	e008      	b.n	800ee38 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800ee26:	8afb      	ldrh	r3, [r7, #22]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	82fb      	strh	r3, [r7, #22]
 800ee2c:	8afa      	ldrh	r2, [r7, #22]
 800ee2e:	8abb      	ldrh	r3, [r7, #20]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d9eb      	bls.n	800ee0c <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 800ee34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee44:	f007 f840 	bl	8015ec8 <rand>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	4b01      	ldr	r3, [pc, #4]	; (800ee60 <tcp_init+0x20>)
 800ee5a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ee5c:	bf00      	nop
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	2000000a 	.word	0x2000000a

0800ee64 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	7d1b      	ldrb	r3, [r3, #20]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d105      	bne.n	800ee80 <tcp_free+0x1c>
 800ee74:	4b06      	ldr	r3, [pc, #24]	; (800ee90 <tcp_free+0x2c>)
 800ee76:	22d4      	movs	r2, #212	; 0xd4
 800ee78:	4906      	ldr	r1, [pc, #24]	; (800ee94 <tcp_free+0x30>)
 800ee7a:	4807      	ldr	r0, [pc, #28]	; (800ee98 <tcp_free+0x34>)
 800ee7c:	f007 f80c 	bl	8015e98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	2001      	movs	r0, #1
 800ee84:	f7fe fcdc 	bl	800d840 <memp_free>
}
 800ee88:	bf00      	nop
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	08019320 	.word	0x08019320
 800ee94:	08019350 	.word	0x08019350
 800ee98:	08019364 	.word	0x08019364

0800ee9c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d105      	bne.n	800eeb8 <tcp_free_listen+0x1c>
 800eeac:	4b06      	ldr	r3, [pc, #24]	; (800eec8 <tcp_free_listen+0x2c>)
 800eeae:	22df      	movs	r2, #223	; 0xdf
 800eeb0:	4906      	ldr	r1, [pc, #24]	; (800eecc <tcp_free_listen+0x30>)
 800eeb2:	4807      	ldr	r0, [pc, #28]	; (800eed0 <tcp_free_listen+0x34>)
 800eeb4:	f006 fff0 	bl	8015e98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	2002      	movs	r0, #2
 800eebc:	f7fe fcc0 	bl	800d840 <memp_free>
}
 800eec0:	bf00      	nop
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	08019320 	.word	0x08019320
 800eecc:	0801938c 	.word	0x0801938c
 800eed0:	08019364 	.word	0x08019364

0800eed4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eed8:	f001 f890 	bl	800fffc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800eedc:	4b07      	ldr	r3, [pc, #28]	; (800eefc <tcp_tmr+0x28>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	3301      	adds	r3, #1
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	4b05      	ldr	r3, [pc, #20]	; (800eefc <tcp_tmr+0x28>)
 800eee6:	701a      	strb	r2, [r3, #0]
 800eee8:	4b04      	ldr	r3, [pc, #16]	; (800eefc <tcp_tmr+0x28>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	f003 0301 	and.w	r3, r3, #1
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d001      	beq.n	800eef8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800eef4:	f000 fd44 	bl	800f980 <tcp_slowtmr>
  }
}
 800eef8:	bf00      	nop
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	20000859 	.word	0x20000859

0800ef00 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d105      	bne.n	800ef1c <tcp_remove_listener+0x1c>
 800ef10:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <tcp_remove_listener+0x48>)
 800ef12:	22ff      	movs	r2, #255	; 0xff
 800ef14:	490d      	ldr	r1, [pc, #52]	; (800ef4c <tcp_remove_listener+0x4c>)
 800ef16:	480e      	ldr	r0, [pc, #56]	; (800ef50 <tcp_remove_listener+0x50>)
 800ef18:	f006 ffbe 	bl	8015e98 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	60fb      	str	r3, [r7, #12]
 800ef20:	e00a      	b.n	800ef38 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d102      	bne.n	800ef32 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	60fb      	str	r3, [r7, #12]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d1f1      	bne.n	800ef22 <tcp_remove_listener+0x22>
    }
  }
}
 800ef3e:	bf00      	nop
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	08019320 	.word	0x08019320
 800ef4c:	080193a8 	.word	0x080193a8
 800ef50:	08019364 	.word	0x08019364

0800ef54 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d106      	bne.n	800ef70 <tcp_listen_closed+0x1c>
 800ef62:	4b14      	ldr	r3, [pc, #80]	; (800efb4 <tcp_listen_closed+0x60>)
 800ef64:	f240 1211 	movw	r2, #273	; 0x111
 800ef68:	4913      	ldr	r1, [pc, #76]	; (800efb8 <tcp_listen_closed+0x64>)
 800ef6a:	4814      	ldr	r0, [pc, #80]	; (800efbc <tcp_listen_closed+0x68>)
 800ef6c:	f006 ff94 	bl	8015e98 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	7d1b      	ldrb	r3, [r3, #20]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d006      	beq.n	800ef86 <tcp_listen_closed+0x32>
 800ef78:	4b0e      	ldr	r3, [pc, #56]	; (800efb4 <tcp_listen_closed+0x60>)
 800ef7a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ef7e:	4910      	ldr	r1, [pc, #64]	; (800efc0 <tcp_listen_closed+0x6c>)
 800ef80:	480e      	ldr	r0, [pc, #56]	; (800efbc <tcp_listen_closed+0x68>)
 800ef82:	f006 ff89 	bl	8015e98 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef86:	2301      	movs	r3, #1
 800ef88:	60fb      	str	r3, [r7, #12]
 800ef8a:	e00b      	b.n	800efa4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ef8c:	4a0d      	ldr	r2, [pc, #52]	; (800efc4 <tcp_listen_closed+0x70>)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff ffb1 	bl	800ef00 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3301      	adds	r3, #1
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d9f0      	bls.n	800ef8c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800efaa:	bf00      	nop
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	08019320 	.word	0x08019320
 800efb8:	080193d0 	.word	0x080193d0
 800efbc:	08019364 	.word	0x08019364
 800efc0:	080193dc 	.word	0x080193dc
 800efc4:	0801acc8 	.word	0x0801acc8

0800efc8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800efc8:	b5b0      	push	{r4, r5, r7, lr}
 800efca:	b088      	sub	sp, #32
 800efcc:	af04      	add	r7, sp, #16
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <tcp_close_shutdown+0x20>
 800efda:	4b61      	ldr	r3, [pc, #388]	; (800f160 <tcp_close_shutdown+0x198>)
 800efdc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800efe0:	4960      	ldr	r1, [pc, #384]	; (800f164 <tcp_close_shutdown+0x19c>)
 800efe2:	4861      	ldr	r0, [pc, #388]	; (800f168 <tcp_close_shutdown+0x1a0>)
 800efe4:	f006 ff58 	bl	8015e98 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800efe8:	78fb      	ldrb	r3, [r7, #3]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d066      	beq.n	800f0bc <tcp_close_shutdown+0xf4>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	7d1b      	ldrb	r3, [r3, #20]
 800eff2:	2b04      	cmp	r3, #4
 800eff4:	d003      	beq.n	800effe <tcp_close_shutdown+0x36>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	7d1b      	ldrb	r3, [r3, #20]
 800effa:	2b07      	cmp	r3, #7
 800effc:	d15e      	bne.n	800f0bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f002:	2b00      	cmp	r3, #0
 800f004:	d104      	bne.n	800f010 <tcp_close_shutdown+0x48>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f00a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f00e:	d055      	beq.n	800f0bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	8b5b      	ldrh	r3, [r3, #26]
 800f014:	f003 0310 	and.w	r3, r3, #16
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d106      	bne.n	800f02a <tcp_close_shutdown+0x62>
 800f01c:	4b50      	ldr	r3, [pc, #320]	; (800f160 <tcp_close_shutdown+0x198>)
 800f01e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f022:	4952      	ldr	r1, [pc, #328]	; (800f16c <tcp_close_shutdown+0x1a4>)
 800f024:	4850      	ldr	r0, [pc, #320]	; (800f168 <tcp_close_shutdown+0x1a0>)
 800f026:	f006 ff37 	bl	8015e98 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f032:	687d      	ldr	r5, [r7, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3304      	adds	r3, #4
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	8ad2      	ldrh	r2, [r2, #22]
 800f03c:	6879      	ldr	r1, [r7, #4]
 800f03e:	8b09      	ldrh	r1, [r1, #24]
 800f040:	9102      	str	r1, [sp, #8]
 800f042:	9201      	str	r2, [sp, #4]
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	462b      	mov	r3, r5
 800f048:	4622      	mov	r2, r4
 800f04a:	4601      	mov	r1, r0
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f005 fdad 	bl	8014bac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f001 fb70 	bl	8010738 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f058:	4b45      	ldr	r3, [pc, #276]	; (800f170 <tcp_close_shutdown+0x1a8>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d105      	bne.n	800f06e <tcp_close_shutdown+0xa6>
 800f062:	4b43      	ldr	r3, [pc, #268]	; (800f170 <tcp_close_shutdown+0x1a8>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	4a41      	ldr	r2, [pc, #260]	; (800f170 <tcp_close_shutdown+0x1a8>)
 800f06a:	6013      	str	r3, [r2, #0]
 800f06c:	e013      	b.n	800f096 <tcp_close_shutdown+0xce>
 800f06e:	4b40      	ldr	r3, [pc, #256]	; (800f170 <tcp_close_shutdown+0x1a8>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	60fb      	str	r3, [r7, #12]
 800f074:	e00c      	b.n	800f090 <tcp_close_shutdown+0xc8>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	68da      	ldr	r2, [r3, #12]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d104      	bne.n	800f08a <tcp_close_shutdown+0xc2>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	68da      	ldr	r2, [r3, #12]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	60da      	str	r2, [r3, #12]
 800f088:	e005      	b.n	800f096 <tcp_close_shutdown+0xce>
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	60fb      	str	r3, [r7, #12]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1ef      	bne.n	800f076 <tcp_close_shutdown+0xae>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	60da      	str	r2, [r3, #12]
 800f09c:	4b35      	ldr	r3, [pc, #212]	; (800f174 <tcp_close_shutdown+0x1ac>)
 800f09e:	2201      	movs	r2, #1
 800f0a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f0a2:	4b35      	ldr	r3, [pc, #212]	; (800f178 <tcp_close_shutdown+0x1b0>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d102      	bne.n	800f0b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f0ac:	f004 f802 	bl	80130b4 <tcp_trigger_input_pcb_close>
 800f0b0:	e002      	b.n	800f0b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff fed6 	bl	800ee64 <tcp_free>
      }
      return ERR_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	e04d      	b.n	800f158 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	7d1b      	ldrb	r3, [r3, #20]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d02d      	beq.n	800f120 <tcp_close_shutdown+0x158>
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d036      	beq.n	800f136 <tcp_close_shutdown+0x16e>
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d13f      	bne.n	800f14c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	8adb      	ldrh	r3, [r3, #22]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d021      	beq.n	800f118 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f0d4:	4b29      	ldr	r3, [pc, #164]	; (800f17c <tcp_close_shutdown+0x1b4>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d105      	bne.n	800f0ea <tcp_close_shutdown+0x122>
 800f0de:	4b27      	ldr	r3, [pc, #156]	; (800f17c <tcp_close_shutdown+0x1b4>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	4a25      	ldr	r2, [pc, #148]	; (800f17c <tcp_close_shutdown+0x1b4>)
 800f0e6:	6013      	str	r3, [r2, #0]
 800f0e8:	e013      	b.n	800f112 <tcp_close_shutdown+0x14a>
 800f0ea:	4b24      	ldr	r3, [pc, #144]	; (800f17c <tcp_close_shutdown+0x1b4>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	60bb      	str	r3, [r7, #8]
 800f0f0:	e00c      	b.n	800f10c <tcp_close_shutdown+0x144>
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	68da      	ldr	r2, [r3, #12]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d104      	bne.n	800f106 <tcp_close_shutdown+0x13e>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	68da      	ldr	r2, [r3, #12]
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	60da      	str	r2, [r3, #12]
 800f104:	e005      	b.n	800f112 <tcp_close_shutdown+0x14a>
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	60bb      	str	r3, [r7, #8]
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1ef      	bne.n	800f0f2 <tcp_close_shutdown+0x12a>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7ff fea3 	bl	800ee64 <tcp_free>
      break;
 800f11e:	e01a      	b.n	800f156 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff ff17 	bl	800ef54 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	4815      	ldr	r0, [pc, #84]	; (800f180 <tcp_close_shutdown+0x1b8>)
 800f12a:	f001 fb55 	bl	80107d8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff feb4 	bl	800ee9c <tcp_free_listen>
      break;
 800f134:	e00f      	b.n	800f156 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f136:	6879      	ldr	r1, [r7, #4]
 800f138:	480d      	ldr	r0, [pc, #52]	; (800f170 <tcp_close_shutdown+0x1a8>)
 800f13a:	f001 fb4d 	bl	80107d8 <tcp_pcb_remove>
 800f13e:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <tcp_close_shutdown+0x1ac>)
 800f140:	2201      	movs	r2, #1
 800f142:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff fe8d 	bl	800ee64 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f14a:	e004      	b.n	800f156 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 f819 	bl	800f184 <tcp_close_shutdown_fin>
 800f152:	4603      	mov	r3, r0
 800f154:	e000      	b.n	800f158 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bdb0      	pop	{r4, r5, r7, pc}
 800f160:	08019320 	.word	0x08019320
 800f164:	080193f4 	.word	0x080193f4
 800f168:	08019364 	.word	0x08019364
 800f16c:	08019414 	.word	0x08019414
 800f170:	2000b6a8 	.word	0x2000b6a8
 800f174:	2000b6a4 	.word	0x2000b6a4
 800f178:	2000b6bc 	.word	0x2000b6bc
 800f17c:	2000b6b4 	.word	0x2000b6b4
 800f180:	2000b6b0 	.word	0x2000b6b0

0800f184 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d106      	bne.n	800f1a0 <tcp_close_shutdown_fin+0x1c>
 800f192:	4b2c      	ldr	r3, [pc, #176]	; (800f244 <tcp_close_shutdown_fin+0xc0>)
 800f194:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f198:	492b      	ldr	r1, [pc, #172]	; (800f248 <tcp_close_shutdown_fin+0xc4>)
 800f19a:	482c      	ldr	r0, [pc, #176]	; (800f24c <tcp_close_shutdown_fin+0xc8>)
 800f19c:	f006 fe7c 	bl	8015e98 <iprintf>

  switch (pcb->state) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	7d1b      	ldrb	r3, [r3, #20]
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d010      	beq.n	800f1ca <tcp_close_shutdown_fin+0x46>
 800f1a8:	2b07      	cmp	r3, #7
 800f1aa:	d01b      	beq.n	800f1e4 <tcp_close_shutdown_fin+0x60>
 800f1ac:	2b03      	cmp	r3, #3
 800f1ae:	d126      	bne.n	800f1fe <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f004 fdef 	bl	8013d94 <tcp_send_fin>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d11f      	bne.n	800f202 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2205      	movs	r2, #5
 800f1c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f1c8:	e01b      	b.n	800f202 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f004 fde2 	bl	8013d94 <tcp_send_fin>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d114      	bne.n	800f206 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2205      	movs	r2, #5
 800f1e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f1e2:	e010      	b.n	800f206 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f004 fdd5 	bl	8013d94 <tcp_send_fin>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d109      	bne.n	800f20a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2209      	movs	r2, #9
 800f1fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f1fc:	e005      	b.n	800f20a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	e01c      	b.n	800f23c <tcp_close_shutdown_fin+0xb8>
      break;
 800f202:	bf00      	nop
 800f204:	e002      	b.n	800f20c <tcp_close_shutdown_fin+0x88>
      break;
 800f206:	bf00      	nop
 800f208:	e000      	b.n	800f20c <tcp_close_shutdown_fin+0x88>
      break;
 800f20a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d103      	bne.n	800f21c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f004 fefd 	bl	8014014 <tcp_output>
 800f21a:	e00d      	b.n	800f238 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800f21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f224:	d108      	bne.n	800f238 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	8b5b      	ldrh	r3, [r3, #26]
 800f22a:	f043 0308 	orr.w	r3, r3, #8
 800f22e:	b29a      	uxth	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f234:	2300      	movs	r3, #0
 800f236:	e001      	b.n	800f23c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800f238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	08019320 	.word	0x08019320
 800f248:	080193d0 	.word	0x080193d0
 800f24c:	08019364 	.word	0x08019364

0800f250 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d109      	bne.n	800f272 <tcp_close+0x22>
 800f25e:	4b0f      	ldr	r3, [pc, #60]	; (800f29c <tcp_close+0x4c>)
 800f260:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f264:	490e      	ldr	r1, [pc, #56]	; (800f2a0 <tcp_close+0x50>)
 800f266:	480f      	ldr	r0, [pc, #60]	; (800f2a4 <tcp_close+0x54>)
 800f268:	f006 fe16 	bl	8015e98 <iprintf>
 800f26c:	f06f 030f 	mvn.w	r3, #15
 800f270:	e00f      	b.n	800f292 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	7d1b      	ldrb	r3, [r3, #20]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d006      	beq.n	800f288 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	8b5b      	ldrh	r3, [r3, #26]
 800f27e:	f043 0310 	orr.w	r3, r3, #16
 800f282:	b29a      	uxth	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f288:	2101      	movs	r1, #1
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff fe9c 	bl	800efc8 <tcp_close_shutdown>
 800f290:	4603      	mov	r3, r0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	08019320 	.word	0x08019320
 800f2a0:	08019430 	.word	0x08019430
 800f2a4:	08019364 	.word	0x08019364

0800f2a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08e      	sub	sp, #56	; 0x38
 800f2ac:	af04      	add	r7, sp, #16
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d107      	bne.n	800f2c8 <tcp_abandon+0x20>
 800f2b8:	4b52      	ldr	r3, [pc, #328]	; (800f404 <tcp_abandon+0x15c>)
 800f2ba:	f240 223d 	movw	r2, #573	; 0x23d
 800f2be:	4952      	ldr	r1, [pc, #328]	; (800f408 <tcp_abandon+0x160>)
 800f2c0:	4852      	ldr	r0, [pc, #328]	; (800f40c <tcp_abandon+0x164>)
 800f2c2:	f006 fde9 	bl	8015e98 <iprintf>
 800f2c6:	e099      	b.n	800f3fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	7d1b      	ldrb	r3, [r3, #20]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d106      	bne.n	800f2de <tcp_abandon+0x36>
 800f2d0:	4b4c      	ldr	r3, [pc, #304]	; (800f404 <tcp_abandon+0x15c>)
 800f2d2:	f240 2241 	movw	r2, #577	; 0x241
 800f2d6:	494e      	ldr	r1, [pc, #312]	; (800f410 <tcp_abandon+0x168>)
 800f2d8:	484c      	ldr	r0, [pc, #304]	; (800f40c <tcp_abandon+0x164>)
 800f2da:	f006 fddd 	bl	8015e98 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	7d1b      	ldrb	r3, [r3, #20]
 800f2e2:	2b0a      	cmp	r3, #10
 800f2e4:	d107      	bne.n	800f2f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f2e6:	6879      	ldr	r1, [r7, #4]
 800f2e8:	484a      	ldr	r0, [pc, #296]	; (800f414 <tcp_abandon+0x16c>)
 800f2ea:	f001 fa75 	bl	80107d8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fdb8 	bl	800ee64 <tcp_free>
 800f2f4:	e082      	b.n	800f3fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f302:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f308:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f310:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	691b      	ldr	r3, [r3, #16]
 800f316:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	7d1b      	ldrb	r3, [r3, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d126      	bne.n	800f36e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	8adb      	ldrh	r3, [r3, #22]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d02e      	beq.n	800f386 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f328:	4b3b      	ldr	r3, [pc, #236]	; (800f418 <tcp_abandon+0x170>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d105      	bne.n	800f33e <tcp_abandon+0x96>
 800f332:	4b39      	ldr	r3, [pc, #228]	; (800f418 <tcp_abandon+0x170>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	4a37      	ldr	r2, [pc, #220]	; (800f418 <tcp_abandon+0x170>)
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	e013      	b.n	800f366 <tcp_abandon+0xbe>
 800f33e:	4b36      	ldr	r3, [pc, #216]	; (800f418 <tcp_abandon+0x170>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	61fb      	str	r3, [r7, #28]
 800f344:	e00c      	b.n	800f360 <tcp_abandon+0xb8>
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d104      	bne.n	800f35a <tcp_abandon+0xb2>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	68da      	ldr	r2, [r3, #12]
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	60da      	str	r2, [r3, #12]
 800f358:	e005      	b.n	800f366 <tcp_abandon+0xbe>
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1ef      	bne.n	800f346 <tcp_abandon+0x9e>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	60da      	str	r2, [r3, #12]
 800f36c:	e00b      	b.n	800f386 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	8adb      	ldrh	r3, [r3, #22]
 800f376:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f378:	6879      	ldr	r1, [r7, #4]
 800f37a:	4828      	ldr	r0, [pc, #160]	; (800f41c <tcp_abandon+0x174>)
 800f37c:	f001 fa2c 	bl	80107d8 <tcp_pcb_remove>
 800f380:	4b27      	ldr	r3, [pc, #156]	; (800f420 <tcp_abandon+0x178>)
 800f382:	2201      	movs	r2, #1
 800f384:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d004      	beq.n	800f398 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f392:	4618      	mov	r0, r3
 800f394:	f000 ff12 	bl	80101bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d004      	beq.n	800f3aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 ff09 	bl	80101bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d004      	beq.n	800f3bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 ff00 	bl	80101bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00e      	beq.n	800f3e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f3c2:	6879      	ldr	r1, [r7, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	8b12      	ldrh	r2, [r2, #24]
 800f3cc:	9202      	str	r2, [sp, #8]
 800f3ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f3d0:	9201      	str	r2, [sp, #4]
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	69b9      	ldr	r1, [r7, #24]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f005 fbe6 	bl	8014bac <tcp_rst>
    }
    last_state = pcb->state;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	7d1b      	ldrb	r3, [r3, #20]
 800f3e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff fd3c 	bl	800ee64 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d004      	beq.n	800f3fc <tcp_abandon+0x154>
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	f06f 010c 	mvn.w	r1, #12
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	4798      	blx	r3
  }
}
 800f3fc:	3728      	adds	r7, #40	; 0x28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	08019320 	.word	0x08019320
 800f408:	08019464 	.word	0x08019464
 800f40c:	08019364 	.word	0x08019364
 800f410:	08019480 	.word	0x08019480
 800f414:	2000b6b8 	.word	0x2000b6b8
 800f418:	2000b6b4 	.word	0x2000b6b4
 800f41c:	2000b6a8 	.word	0x2000b6a8
 800f420:	2000b6a4 	.word	0x2000b6a4

0800f424 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f42c:	2101      	movs	r1, #1
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff ff3a 	bl	800f2a8 <tcp_abandon>
}
 800f434:	bf00      	nop
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	4613      	mov	r3, r2
 800f448:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f44a:	2304      	movs	r3, #4
 800f44c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f454:	4b3e      	ldr	r3, [pc, #248]	; (800f550 <tcp_bind+0x114>)
 800f456:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d109      	bne.n	800f472 <tcp_bind+0x36>
 800f45e:	4b3d      	ldr	r3, [pc, #244]	; (800f554 <tcp_bind+0x118>)
 800f460:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f464:	493c      	ldr	r1, [pc, #240]	; (800f558 <tcp_bind+0x11c>)
 800f466:	483d      	ldr	r0, [pc, #244]	; (800f55c <tcp_bind+0x120>)
 800f468:	f006 fd16 	bl	8015e98 <iprintf>
 800f46c:	f06f 030f 	mvn.w	r3, #15
 800f470:	e06a      	b.n	800f548 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	7d1b      	ldrb	r3, [r3, #20]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d009      	beq.n	800f48e <tcp_bind+0x52>
 800f47a:	4b36      	ldr	r3, [pc, #216]	; (800f554 <tcp_bind+0x118>)
 800f47c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f480:	4937      	ldr	r1, [pc, #220]	; (800f560 <tcp_bind+0x124>)
 800f482:	4836      	ldr	r0, [pc, #216]	; (800f55c <tcp_bind+0x120>)
 800f484:	f006 fd08 	bl	8015e98 <iprintf>
 800f488:	f06f 0305 	mvn.w	r3, #5
 800f48c:	e05c      	b.n	800f548 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d109      	bne.n	800f4a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f494:	f000 f916 	bl	800f6c4 <tcp_new_port>
 800f498:	4603      	mov	r3, r0
 800f49a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f49c:	88fb      	ldrh	r3, [r7, #6]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d135      	bne.n	800f50e <tcp_bind+0xd2>
      return ERR_BUF;
 800f4a2:	f06f 0301 	mvn.w	r3, #1
 800f4a6:	e04f      	b.n	800f548 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	61fb      	str	r3, [r7, #28]
 800f4ac:	e02b      	b.n	800f506 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4ae:	4a2d      	ldr	r2, [pc, #180]	; (800f564 <tcp_bind+0x128>)
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	61bb      	str	r3, [r7, #24]
 800f4ba:	e01e      	b.n	800f4fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	8adb      	ldrh	r3, [r3, #22]
 800f4c0:	88fa      	ldrh	r2, [r7, #6]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d116      	bne.n	800f4f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d010      	beq.n	800f4ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00c      	beq.n	800f4ee <tcp_bind+0xb2>
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d009      	beq.n	800f4ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d005      	beq.n	800f4ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d102      	bne.n	800f4f4 <tcp_bind+0xb8>
              return ERR_USE;
 800f4ee:	f06f 0307 	mvn.w	r3, #7
 800f4f2:	e029      	b.n	800f548 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	61bb      	str	r3, [r7, #24]
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1dd      	bne.n	800f4bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	3301      	adds	r3, #1
 800f504:	61fb      	str	r3, [r7, #28]
 800f506:	69fa      	ldr	r2, [r7, #28]
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	dbcf      	blt.n	800f4ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00c      	beq.n	800f52e <tcp_bind+0xf2>
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d008      	beq.n	800f52e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <tcp_bind+0xec>
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	e000      	b.n	800f52a <tcp_bind+0xee>
 800f528:	2300      	movs	r3, #0
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	88fa      	ldrh	r2, [r7, #6]
 800f532:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f534:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <tcp_bind+0x12c>)
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	60da      	str	r2, [r3, #12]
 800f53c:	4a0a      	ldr	r2, [pc, #40]	; (800f568 <tcp_bind+0x12c>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6013      	str	r3, [r2, #0]
 800f542:	f005 fcf7 	bl	8014f34 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f546:	2300      	movs	r3, #0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3720      	adds	r7, #32
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	0801ac1c 	.word	0x0801ac1c
 800f554:	08019320 	.word	0x08019320
 800f558:	080194b4 	.word	0x080194b4
 800f55c:	08019364 	.word	0x08019364
 800f560:	080194cc 	.word	0x080194cc
 800f564:	0801acc8 	.word	0x0801acc8
 800f568:	2000b6b4 	.word	0x2000b6b4

0800f56c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <tcp_update_rcv_ann_wnd+0x1c>
 800f57a:	4b26      	ldr	r3, [pc, #152]	; (800f614 <tcp_update_rcv_ann_wnd+0xa8>)
 800f57c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f580:	4925      	ldr	r1, [pc, #148]	; (800f618 <tcp_update_rcv_ann_wnd+0xac>)
 800f582:	4826      	ldr	r0, [pc, #152]	; (800f61c <tcp_update_rcv_ann_wnd+0xb0>)
 800f584:	f006 fc88 	bl	8015e98 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f590:	4413      	add	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f59c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f5a0:	d802      	bhi.n	800f5a8 <tcp_update_rcv_ann_wnd+0x3c>
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f5a6:	e001      	b.n	800f5ac <tcp_update_rcv_ann_wnd+0x40>
 800f5a8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f5ac:	4413      	add	r3, r2
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	db08      	blt.n	800f5c8 <tcp_update_rcv_ann_wnd+0x5c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	e020      	b.n	800f60a <tcp_update_rcv_ann_wnd+0x9e>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	dd03      	ble.n	800f5de <tcp_update_rcv_ann_wnd+0x72>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5dc:	e014      	b.n	800f608 <tcp_update_rcv_ann_wnd+0x9c>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f0:	d306      	bcc.n	800f600 <tcp_update_rcv_ann_wnd+0x94>
 800f5f2:	4b08      	ldr	r3, [pc, #32]	; (800f614 <tcp_update_rcv_ann_wnd+0xa8>)
 800f5f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f5f8:	4909      	ldr	r1, [pc, #36]	; (800f620 <tcp_update_rcv_ann_wnd+0xb4>)
 800f5fa:	4808      	ldr	r0, [pc, #32]	; (800f61c <tcp_update_rcv_ann_wnd+0xb0>)
 800f5fc:	f006 fc4c 	bl	8015e98 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f608:	2300      	movs	r3, #0
  }
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	08019320 	.word	0x08019320
 800f618:	0801957c 	.word	0x0801957c
 800f61c:	08019364 	.word	0x08019364
 800f620:	080195a0 	.word	0x080195a0

0800f624 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	460b      	mov	r3, r1
 800f62e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d107      	bne.n	800f646 <tcp_recved+0x22>
 800f636:	4b1f      	ldr	r3, [pc, #124]	; (800f6b4 <tcp_recved+0x90>)
 800f638:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f63c:	491e      	ldr	r1, [pc, #120]	; (800f6b8 <tcp_recved+0x94>)
 800f63e:	481f      	ldr	r0, [pc, #124]	; (800f6bc <tcp_recved+0x98>)
 800f640:	f006 fc2a 	bl	8015e98 <iprintf>
 800f644:	e032      	b.n	800f6ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	7d1b      	ldrb	r3, [r3, #20]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d106      	bne.n	800f65c <tcp_recved+0x38>
 800f64e:	4b19      	ldr	r3, [pc, #100]	; (800f6b4 <tcp_recved+0x90>)
 800f650:	f240 32d3 	movw	r2, #979	; 0x3d3
 800f654:	491a      	ldr	r1, [pc, #104]	; (800f6c0 <tcp_recved+0x9c>)
 800f656:	4819      	ldr	r0, [pc, #100]	; (800f6bc <tcp_recved+0x98>)
 800f658:	f006 fc1e 	bl	8015e98 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f660:	887b      	ldrh	r3, [r7, #2]
 800f662:	4413      	add	r3, r2
 800f664:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f666:	89fb      	ldrh	r3, [r7, #14]
 800f668:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f66c:	d804      	bhi.n	800f678 <tcp_recved+0x54>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f672:	89fa      	ldrh	r2, [r7, #14]
 800f674:	429a      	cmp	r2, r3
 800f676:	d204      	bcs.n	800f682 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f67e:	851a      	strh	r2, [r3, #40]	; 0x28
 800f680:	e002      	b.n	800f688 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	89fa      	ldrh	r2, [r7, #14]
 800f686:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7ff ff6f 	bl	800f56c <tcp_update_rcv_ann_wnd>
 800f68e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f696:	d309      	bcc.n	800f6ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	8b5b      	ldrh	r3, [r3, #26]
 800f69c:	f043 0302 	orr.w	r3, r3, #2
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f004 fcb4 	bl	8014014 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	08019320 	.word	0x08019320
 800f6b8:	080195bc 	.word	0x080195bc
 800f6bc:	08019364 	.word	0x08019364
 800f6c0:	080195d4 	.word	0x080195d4

0800f6c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f6ce:	4b1e      	ldr	r3, [pc, #120]	; (800f748 <tcp_new_port+0x84>)
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	4b1c      	ldr	r3, [pc, #112]	; (800f748 <tcp_new_port+0x84>)
 800f6d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f6da:	4b1b      	ldr	r3, [pc, #108]	; (800f748 <tcp_new_port+0x84>)
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d103      	bne.n	800f6ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f6e6:	4b18      	ldr	r3, [pc, #96]	; (800f748 <tcp_new_port+0x84>)
 800f6e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f6ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	71fb      	strb	r3, [r7, #7]
 800f6f2:	e01e      	b.n	800f732 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	4a15      	ldr	r2, [pc, #84]	; (800f74c <tcp_new_port+0x88>)
 800f6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	603b      	str	r3, [r7, #0]
 800f700:	e011      	b.n	800f726 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	8ada      	ldrh	r2, [r3, #22]
 800f706:	4b10      	ldr	r3, [pc, #64]	; (800f748 <tcp_new_port+0x84>)
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d108      	bne.n	800f720 <tcp_new_port+0x5c>
        n++;
 800f70e:	88bb      	ldrh	r3, [r7, #4]
 800f710:	3301      	adds	r3, #1
 800f712:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f714:	88bb      	ldrh	r3, [r7, #4]
 800f716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f71a:	d3d8      	bcc.n	800f6ce <tcp_new_port+0xa>
          return 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	e00d      	b.n	800f73c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	603b      	str	r3, [r7, #0]
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1ea      	bne.n	800f702 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f72c:	79fb      	ldrb	r3, [r7, #7]
 800f72e:	3301      	adds	r3, #1
 800f730:	71fb      	strb	r3, [r7, #7]
 800f732:	79fb      	ldrb	r3, [r7, #7]
 800f734:	2b03      	cmp	r3, #3
 800f736:	d9dd      	bls.n	800f6f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f738:	4b03      	ldr	r3, [pc, #12]	; (800f748 <tcp_new_port+0x84>)
 800f73a:	881b      	ldrh	r3, [r3, #0]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	2000000a 	.word	0x2000000a
 800f74c:	0801acc8 	.word	0x0801acc8

0800f750 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	603b      	str	r3, [r7, #0]
 800f75c:	4613      	mov	r3, r2
 800f75e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <tcp_connect+0x2e>
 800f76a:	4b7d      	ldr	r3, [pc, #500]	; (800f960 <tcp_connect+0x210>)
 800f76c:	f240 4235 	movw	r2, #1077	; 0x435
 800f770:	497c      	ldr	r1, [pc, #496]	; (800f964 <tcp_connect+0x214>)
 800f772:	487d      	ldr	r0, [pc, #500]	; (800f968 <tcp_connect+0x218>)
 800f774:	f006 fb90 	bl	8015e98 <iprintf>
 800f778:	f06f 030f 	mvn.w	r3, #15
 800f77c:	e0ec      	b.n	800f958 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d109      	bne.n	800f798 <tcp_connect+0x48>
 800f784:	4b76      	ldr	r3, [pc, #472]	; (800f960 <tcp_connect+0x210>)
 800f786:	f240 4236 	movw	r2, #1078	; 0x436
 800f78a:	4978      	ldr	r1, [pc, #480]	; (800f96c <tcp_connect+0x21c>)
 800f78c:	4876      	ldr	r0, [pc, #472]	; (800f968 <tcp_connect+0x218>)
 800f78e:	f006 fb83 	bl	8015e98 <iprintf>
 800f792:	f06f 030f 	mvn.w	r3, #15
 800f796:	e0df      	b.n	800f958 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	7d1b      	ldrb	r3, [r3, #20]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d009      	beq.n	800f7b4 <tcp_connect+0x64>
 800f7a0:	4b6f      	ldr	r3, [pc, #444]	; (800f960 <tcp_connect+0x210>)
 800f7a2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f7a6:	4972      	ldr	r1, [pc, #456]	; (800f970 <tcp_connect+0x220>)
 800f7a8:	486f      	ldr	r0, [pc, #444]	; (800f968 <tcp_connect+0x218>)
 800f7aa:	f006 fb75 	bl	8015e98 <iprintf>
 800f7ae:	f06f 0309 	mvn.w	r3, #9
 800f7b2:	e0d1      	b.n	800f958 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d002      	beq.n	800f7c0 <tcp_connect+0x70>
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	e000      	b.n	800f7c2 <tcp_connect+0x72>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	88fa      	ldrh	r2, [r7, #6]
 800f7ca:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	7a1b      	ldrb	r3, [r3, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d006      	beq.n	800f7e2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	7a1b      	ldrb	r3, [r3, #8]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fe fae3 	bl	800dda4 <netif_get_by_index>
 800f7de:	6278      	str	r0, [r7, #36]	; 0x24
 800f7e0:	e005      	b.n	800f7ee <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fc f8e0 	bl	800b9ac <ip4_route>
 800f7ec:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f7f4:	f06f 0303 	mvn.w	r3, #3
 800f7f8:	e0ae      	b.n	800f958 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d003      	beq.n	800f808 <tcp_connect+0xb8>
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d111      	bne.n	800f82c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d002      	beq.n	800f814 <tcp_connect+0xc4>
 800f80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f810:	3304      	adds	r3, #4
 800f812:	e000      	b.n	800f816 <tcp_connect+0xc6>
 800f814:	2300      	movs	r3, #0
 800f816:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d102      	bne.n	800f824 <tcp_connect+0xd4>
      return ERR_RTE;
 800f81e:	f06f 0303 	mvn.w	r3, #3
 800f822:	e099      	b.n	800f958 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	8adb      	ldrh	r3, [r3, #22]
 800f830:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	8adb      	ldrh	r3, [r3, #22]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10c      	bne.n	800f854 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f83a:	f7ff ff43 	bl	800f6c4 <tcp_new_port>
 800f83e:	4603      	mov	r3, r0
 800f840:	461a      	mov	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	8adb      	ldrh	r3, [r3, #22]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d102      	bne.n	800f854 <tcp_connect+0x104>
      return ERR_BUF;
 800f84e:	f06f 0301 	mvn.w	r3, #1
 800f852:	e081      	b.n	800f958 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f001 f853 	bl	8010900 <tcp_next_iss>
 800f85a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2200      	movs	r2, #0
 800f860:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	1e5a      	subs	r2, r3, #1
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	1e5a      	subs	r2, r3, #1
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	1e5a      	subs	r2, r3, #1
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f886:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f89e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f8a8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	3304      	adds	r3, #4
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8b6:	f001 f849 	bl	801094c <tcp_eff_send_mss_netif>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	461a      	mov	r2, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	683a      	ldr	r2, [r7, #0]
 800f8ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f8d2:	2102      	movs	r1, #2
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f004 faad 	bl	8013e34 <tcp_enqueue_flags>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f8de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d136      	bne.n	800f954 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f8ec:	8b7b      	ldrh	r3, [r7, #26]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d021      	beq.n	800f936 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f8f2:	4b20      	ldr	r3, [pc, #128]	; (800f974 <tcp_connect+0x224>)
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d105      	bne.n	800f908 <tcp_connect+0x1b8>
 800f8fc:	4b1d      	ldr	r3, [pc, #116]	; (800f974 <tcp_connect+0x224>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	4a1c      	ldr	r2, [pc, #112]	; (800f974 <tcp_connect+0x224>)
 800f904:	6013      	str	r3, [r2, #0]
 800f906:	e013      	b.n	800f930 <tcp_connect+0x1e0>
 800f908:	4b1a      	ldr	r3, [pc, #104]	; (800f974 <tcp_connect+0x224>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	623b      	str	r3, [r7, #32]
 800f90e:	e00c      	b.n	800f92a <tcp_connect+0x1da>
 800f910:	6a3b      	ldr	r3, [r7, #32]
 800f912:	68da      	ldr	r2, [r3, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	429a      	cmp	r2, r3
 800f918:	d104      	bne.n	800f924 <tcp_connect+0x1d4>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	68da      	ldr	r2, [r3, #12]
 800f91e:	6a3b      	ldr	r3, [r7, #32]
 800f920:	60da      	str	r2, [r3, #12]
 800f922:	e005      	b.n	800f930 <tcp_connect+0x1e0>
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	623b      	str	r3, [r7, #32]
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1ef      	bne.n	800f910 <tcp_connect+0x1c0>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2200      	movs	r2, #0
 800f934:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f936:	4b10      	ldr	r3, [pc, #64]	; (800f978 <tcp_connect+0x228>)
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	60da      	str	r2, [r3, #12]
 800f93e:	4a0e      	ldr	r2, [pc, #56]	; (800f978 <tcp_connect+0x228>)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	f005 faf6 	bl	8014f34 <tcp_timer_needed>
 800f948:	4b0c      	ldr	r3, [pc, #48]	; (800f97c <tcp_connect+0x22c>)
 800f94a:	2201      	movs	r2, #1
 800f94c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f004 fb60 	bl	8014014 <tcp_output>
  }
  return ret;
 800f954:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3728      	adds	r7, #40	; 0x28
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	08019320 	.word	0x08019320
 800f964:	080195fc 	.word	0x080195fc
 800f968:	08019364 	.word	0x08019364
 800f96c:	08019618 	.word	0x08019618
 800f970:	08019634 	.word	0x08019634
 800f974:	2000b6b4 	.word	0x2000b6b4
 800f978:	2000b6a8 	.word	0x2000b6a8
 800f97c:	2000b6a4 	.word	0x2000b6a4

0800f980 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f980:	b5b0      	push	{r4, r5, r7, lr}
 800f982:	b090      	sub	sp, #64	; 0x40
 800f984:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f98c:	4b94      	ldr	r3, [pc, #592]	; (800fbe0 <tcp_slowtmr+0x260>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	3301      	adds	r3, #1
 800f992:	4a93      	ldr	r2, [pc, #588]	; (800fbe0 <tcp_slowtmr+0x260>)
 800f994:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f996:	4b93      	ldr	r3, [pc, #588]	; (800fbe4 <tcp_slowtmr+0x264>)
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	3301      	adds	r3, #1
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	4b91      	ldr	r3, [pc, #580]	; (800fbe4 <tcp_slowtmr+0x264>)
 800f9a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f9a6:	4b90      	ldr	r3, [pc, #576]	; (800fbe8 <tcp_slowtmr+0x268>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f9ac:	e29d      	b.n	800feea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	7d1b      	ldrb	r3, [r3, #20]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <tcp_slowtmr+0x44>
 800f9b6:	4b8d      	ldr	r3, [pc, #564]	; (800fbec <tcp_slowtmr+0x26c>)
 800f9b8:	f240 42be 	movw	r2, #1214	; 0x4be
 800f9bc:	498c      	ldr	r1, [pc, #560]	; (800fbf0 <tcp_slowtmr+0x270>)
 800f9be:	488d      	ldr	r0, [pc, #564]	; (800fbf4 <tcp_slowtmr+0x274>)
 800f9c0:	f006 fa6a 	bl	8015e98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c6:	7d1b      	ldrb	r3, [r3, #20]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d106      	bne.n	800f9da <tcp_slowtmr+0x5a>
 800f9cc:	4b87      	ldr	r3, [pc, #540]	; (800fbec <tcp_slowtmr+0x26c>)
 800f9ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f9d2:	4989      	ldr	r1, [pc, #548]	; (800fbf8 <tcp_slowtmr+0x278>)
 800f9d4:	4887      	ldr	r0, [pc, #540]	; (800fbf4 <tcp_slowtmr+0x274>)
 800f9d6:	f006 fa5f 	bl	8015e98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9dc:	7d1b      	ldrb	r3, [r3, #20]
 800f9de:	2b0a      	cmp	r3, #10
 800f9e0:	d106      	bne.n	800f9f0 <tcp_slowtmr+0x70>
 800f9e2:	4b82      	ldr	r3, [pc, #520]	; (800fbec <tcp_slowtmr+0x26c>)
 800f9e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f9e8:	4984      	ldr	r1, [pc, #528]	; (800fbfc <tcp_slowtmr+0x27c>)
 800f9ea:	4882      	ldr	r0, [pc, #520]	; (800fbf4 <tcp_slowtmr+0x274>)
 800f9ec:	f006 fa54 	bl	8015e98 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	7f9a      	ldrb	r2, [r3, #30]
 800f9f4:	4b7b      	ldr	r3, [pc, #492]	; (800fbe4 <tcp_slowtmr+0x264>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d105      	bne.n	800fa08 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fa06:	e270      	b.n	800feea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fa08:	4b76      	ldr	r3, [pc, #472]	; (800fbe4 <tcp_slowtmr+0x264>)
 800fa0a:	781a      	ldrb	r2, [r3, #0]
 800fa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fa10:	2300      	movs	r3, #0
 800fa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fa16:	2300      	movs	r3, #0
 800fa18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	7d1b      	ldrb	r3, [r3, #20]
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	d10a      	bne.n	800fa3a <tcp_slowtmr+0xba>
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa2a:	2b05      	cmp	r3, #5
 800fa2c:	d905      	bls.n	800fa3a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fa2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa32:	3301      	adds	r3, #1
 800fa34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa38:	e11e      	b.n	800fc78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa40:	2b0b      	cmp	r3, #11
 800fa42:	d905      	bls.n	800fa50 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa48:	3301      	adds	r3, #1
 800fa4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa4e:	e113      	b.n	800fc78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d075      	beq.n	800fb46 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d006      	beq.n	800fa70 <tcp_slowtmr+0xf0>
 800fa62:	4b62      	ldr	r3, [pc, #392]	; (800fbec <tcp_slowtmr+0x26c>)
 800fa64:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fa68:	4965      	ldr	r1, [pc, #404]	; (800fc00 <tcp_slowtmr+0x280>)
 800fa6a:	4862      	ldr	r0, [pc, #392]	; (800fbf4 <tcp_slowtmr+0x274>)
 800fa6c:	f006 fa14 	bl	8015e98 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d106      	bne.n	800fa86 <tcp_slowtmr+0x106>
 800fa78:	4b5c      	ldr	r3, [pc, #368]	; (800fbec <tcp_slowtmr+0x26c>)
 800fa7a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fa7e:	4961      	ldr	r1, [pc, #388]	; (800fc04 <tcp_slowtmr+0x284>)
 800fa80:	485c      	ldr	r0, [pc, #368]	; (800fbf4 <tcp_slowtmr+0x274>)
 800fa82:	f006 fa09 	bl	8015e98 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa8c:	2b0b      	cmp	r3, #11
 800fa8e:	d905      	bls.n	800fa9c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fa90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa94:	3301      	adds	r3, #1
 800fa96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa9a:	e0ed      	b.n	800fc78 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800faa2:	3b01      	subs	r3, #1
 800faa4:	4a58      	ldr	r2, [pc, #352]	; (800fc08 <tcp_slowtmr+0x288>)
 800faa6:	5cd3      	ldrb	r3, [r2, r3]
 800faa8:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fab0:	7ffa      	ldrb	r2, [r7, #31]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d907      	bls.n	800fac6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fabc:	3301      	adds	r3, #1
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800facc:	7ffa      	ldrb	r2, [r7, #31]
 800face:	429a      	cmp	r2, r3
 800fad0:	f200 80d2 	bhi.w	800fc78 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fad4:	2301      	movs	r3, #1
 800fad6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d108      	bne.n	800faf4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fae4:	f005 f958 	bl	8014d98 <tcp_zero_window_probe>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d014      	beq.n	800fb18 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800faee:	2300      	movs	r3, #0
 800faf0:	623b      	str	r3, [r7, #32]
 800faf2:	e011      	b.n	800fb18 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fafa:	4619      	mov	r1, r3
 800fafc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fafe:	f003 ffff 	bl	8013b00 <tcp_split_unsent_seg>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d107      	bne.n	800fb18 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fb08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb0a:	f004 fa83 	bl	8014014 <tcp_output>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d101      	bne.n	800fb18 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fb14:	2300      	movs	r3, #0
 800fb16:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fb18:	6a3b      	ldr	r3, [r7, #32]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f000 80ac 	beq.w	800fc78 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	2200      	movs	r2, #0
 800fb24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb2e:	2b06      	cmp	r3, #6
 800fb30:	f200 80a2 	bhi.w	800fc78 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	b2da      	uxtb	r2, r3
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fb44:	e098      	b.n	800fc78 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	db0f      	blt.n	800fb70 <tcp_slowtmr+0x1f0>
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb56:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d008      	beq.n	800fb70 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	3301      	adds	r3, #1
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	b21a      	sxth	r2, r3
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb78:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	db7b      	blt.n	800fc78 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb82:	f004 fd41 	bl	8014608 <tcp_rexmit_rto_prepare>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d007      	beq.n	800fb9c <tcp_slowtmr+0x21c>
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d171      	bne.n	800fc78 <tcp_slowtmr+0x2f8>
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d06d      	beq.n	800fc78 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	7d1b      	ldrb	r3, [r3, #20]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d03a      	beq.n	800fc1a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbaa:	2b0c      	cmp	r3, #12
 800fbac:	bf28      	it	cs
 800fbae:	230c      	movcs	r3, #12
 800fbb0:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fbb8:	10db      	asrs	r3, r3, #3
 800fbba:	b21b      	sxth	r3, r3
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fbc4:	4413      	add	r3, r2
 800fbc6:	7fba      	ldrb	r2, [r7, #30]
 800fbc8:	4910      	ldr	r1, [pc, #64]	; (800fc0c <tcp_slowtmr+0x28c>)
 800fbca:	5c8a      	ldrb	r2, [r1, r2]
 800fbcc:	4093      	lsls	r3, r2
 800fbce:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	dc1a      	bgt.n	800fc10 <tcp_slowtmr+0x290>
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	b21a      	sxth	r2, r3
 800fbde:	e019      	b.n	800fc14 <tcp_slowtmr+0x294>
 800fbe0:	2000b6ac 	.word	0x2000b6ac
 800fbe4:	2000085a 	.word	0x2000085a
 800fbe8:	2000b6a8 	.word	0x2000b6a8
 800fbec:	08019320 	.word	0x08019320
 800fbf0:	08019664 	.word	0x08019664
 800fbf4:	08019364 	.word	0x08019364
 800fbf8:	08019690 	.word	0x08019690
 800fbfc:	080196bc 	.word	0x080196bc
 800fc00:	080196ec 	.word	0x080196ec
 800fc04:	08019720 	.word	0x08019720
 800fc08:	0801acc0 	.word	0x0801acc0
 800fc0c:	0801acb0 	.word	0x0801acb0
 800fc10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	bf28      	it	cs
 800fc30:	4613      	movcs	r3, r2
 800fc32:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800fc34:	8afb      	ldrh	r3, [r7, #22]
 800fc36:	085b      	lsrs	r3, r3, #1
 800fc38:	b29a      	uxth	r2, r3
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc4a:	005b      	lsls	r3, r3, #1
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d206      	bcs.n	800fc60 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	b29a      	uxth	r2, r3
 800fc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc62:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fc72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc74:	f004 fd38 	bl	80146e8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	7d1b      	ldrb	r3, [r3, #20]
 800fc7c:	2b06      	cmp	r3, #6
 800fc7e:	d111      	bne.n	800fca4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	8b5b      	ldrh	r3, [r3, #26]
 800fc84:	f003 0310 	and.w	r3, r3, #16
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc8c:	4b9c      	ldr	r3, [pc, #624]	; (800ff00 <tcp_slowtmr+0x580>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	6a1b      	ldr	r3, [r3, #32]
 800fc94:	1ad3      	subs	r3, r2, r3
 800fc96:	2b28      	cmp	r3, #40	; 0x28
 800fc98:	d904      	bls.n	800fca4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fc9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc9e:	3301      	adds	r3, #1
 800fca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	7a5b      	ldrb	r3, [r3, #9]
 800fca8:	f003 0308 	and.w	r3, r3, #8
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d04a      	beq.n	800fd46 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d003      	beq.n	800fcc0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fcbc:	2b07      	cmp	r3, #7
 800fcbe:	d142      	bne.n	800fd46 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcc0:	4b8f      	ldr	r3, [pc, #572]	; (800ff00 <tcp_slowtmr+0x580>)
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	6a1b      	ldr	r3, [r3, #32]
 800fcc8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fccc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fcd0:	4b8c      	ldr	r3, [pc, #560]	; (800ff04 <tcp_slowtmr+0x584>)
 800fcd2:	440b      	add	r3, r1
 800fcd4:	498c      	ldr	r1, [pc, #560]	; (800ff08 <tcp_slowtmr+0x588>)
 800fcd6:	fba1 1303 	umull	r1, r3, r1, r3
 800fcda:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d90a      	bls.n	800fcf6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fce4:	3301      	adds	r3, #1
 800fce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fcea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcee:	3301      	adds	r3, #1
 800fcf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcf4:	e027      	b.n	800fd46 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcf6:	4b82      	ldr	r3, [pc, #520]	; (800ff00 <tcp_slowtmr+0x580>)
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	4b7f      	ldr	r3, [pc, #508]	; (800ff0c <tcp_slowtmr+0x58c>)
 800fd10:	fb03 f300 	mul.w	r3, r3, r0
 800fd14:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fd16:	497c      	ldr	r1, [pc, #496]	; (800ff08 <tcp_slowtmr+0x588>)
 800fd18:	fba1 1303 	umull	r1, r3, r1, r3
 800fd1c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d911      	bls.n	800fd46 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd24:	f004 fff8 	bl	8014d18 <tcp_keepalive>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fd2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d107      	bne.n	800fd46 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd38:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d011      	beq.n	800fd72 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fd4e:	4b6c      	ldr	r3, [pc, #432]	; (800ff00 <tcp_slowtmr+0x580>)
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	6a1b      	ldr	r3, [r3, #32]
 800fd56:	1ad2      	subs	r2, r2, r3
 800fd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd5e:	4619      	mov	r1, r3
 800fd60:	460b      	mov	r3, r1
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	440b      	add	r3, r1
 800fd66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d302      	bcc.n	800fd72 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fd6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd6e:	f000 fe97 	bl	8010aa0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd74:	7d1b      	ldrb	r3, [r3, #20]
 800fd76:	2b03      	cmp	r3, #3
 800fd78:	d10b      	bne.n	800fd92 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd7a:	4b61      	ldr	r3, [pc, #388]	; (800ff00 <tcp_slowtmr+0x580>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	2b28      	cmp	r3, #40	; 0x28
 800fd86:	d904      	bls.n	800fd92 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd94:	7d1b      	ldrb	r3, [r3, #20]
 800fd96:	2b09      	cmp	r3, #9
 800fd98:	d10b      	bne.n	800fdb2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd9a:	4b59      	ldr	r3, [pc, #356]	; (800ff00 <tcp_slowtmr+0x580>)
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda0:	6a1b      	ldr	r3, [r3, #32]
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	2bf0      	cmp	r3, #240	; 0xf0
 800fda6:	d904      	bls.n	800fdb2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdac:	3301      	adds	r3, #1
 800fdae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fdb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d060      	beq.n	800fe7c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdc0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fdc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdc4:	f000 fcb8 	bl	8010738 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d010      	beq.n	800fdf0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fdce:	4b50      	ldr	r3, [pc, #320]	; (800ff10 <tcp_slowtmr+0x590>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d106      	bne.n	800fde6 <tcp_slowtmr+0x466>
 800fdd8:	4b4e      	ldr	r3, [pc, #312]	; (800ff14 <tcp_slowtmr+0x594>)
 800fdda:	f240 526d 	movw	r2, #1389	; 0x56d
 800fdde:	494e      	ldr	r1, [pc, #312]	; (800ff18 <tcp_slowtmr+0x598>)
 800fde0:	484e      	ldr	r0, [pc, #312]	; (800ff1c <tcp_slowtmr+0x59c>)
 800fde2:	f006 f859 	bl	8015e98 <iprintf>
        prev->next = pcb->next;
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	68da      	ldr	r2, [r3, #12]
 800fdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdec:	60da      	str	r2, [r3, #12]
 800fdee:	e00f      	b.n	800fe10 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fdf0:	4b47      	ldr	r3, [pc, #284]	; (800ff10 <tcp_slowtmr+0x590>)
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d006      	beq.n	800fe08 <tcp_slowtmr+0x488>
 800fdfa:	4b46      	ldr	r3, [pc, #280]	; (800ff14 <tcp_slowtmr+0x594>)
 800fdfc:	f240 5271 	movw	r2, #1393	; 0x571
 800fe00:	4947      	ldr	r1, [pc, #284]	; (800ff20 <tcp_slowtmr+0x5a0>)
 800fe02:	4846      	ldr	r0, [pc, #280]	; (800ff1c <tcp_slowtmr+0x59c>)
 800fe04:	f006 f848 	bl	8015e98 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	4a40      	ldr	r2, [pc, #256]	; (800ff10 <tcp_slowtmr+0x590>)
 800fe0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fe10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d013      	beq.n	800fe40 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fe20:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fe22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe24:	3304      	adds	r3, #4
 800fe26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe28:	8ad2      	ldrh	r2, [r2, #22]
 800fe2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe2c:	8b09      	ldrh	r1, [r1, #24]
 800fe2e:	9102      	str	r1, [sp, #8]
 800fe30:	9201      	str	r2, [sp, #4]
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	462b      	mov	r3, r5
 800fe36:	4622      	mov	r2, r4
 800fe38:	4601      	mov	r1, r0
 800fe3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe3c:	f004 feb6 	bl	8014bac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fe40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800fe46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe48:	7d1b      	ldrb	r3, [r3, #20]
 800fe4a:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800fe50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff f804 	bl	800ee64 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fe5c:	4b31      	ldr	r3, [pc, #196]	; (800ff24 <tcp_slowtmr+0x5a4>)
 800fe5e:	2200      	movs	r2, #0
 800fe60:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d004      	beq.n	800fe72 <tcp_slowtmr+0x4f2>
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	f06f 010c 	mvn.w	r1, #12
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fe72:	4b2c      	ldr	r3, [pc, #176]	; (800ff24 <tcp_slowtmr+0x5a4>)
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d037      	beq.n	800feea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fe7a:	e592      	b.n	800f9a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	7f1b      	ldrb	r3, [r3, #28]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	b2da      	uxtb	r2, r3
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	7f1a      	ldrb	r2, [r3, #28]
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	7f5b      	ldrb	r3, [r3, #29]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d325      	bcc.n	800feea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fe9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea0:	2200      	movs	r2, #0
 800fea2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fea4:	4b1f      	ldr	r3, [pc, #124]	; (800ff24 <tcp_slowtmr+0x5a4>)
 800fea6:	2200      	movs	r2, #0
 800fea8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d00b      	beq.n	800fecc <tcp_slowtmr+0x54c>
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800feba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800febc:	6912      	ldr	r2, [r2, #16]
 800febe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fec0:	4610      	mov	r0, r2
 800fec2:	4798      	blx	r3
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800feca:	e002      	b.n	800fed2 <tcp_slowtmr+0x552>
 800fecc:	2300      	movs	r3, #0
 800fece:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fed2:	4b14      	ldr	r3, [pc, #80]	; (800ff24 <tcp_slowtmr+0x5a4>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d000      	beq.n	800fedc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800feda:	e562      	b.n	800f9a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fedc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d102      	bne.n	800feea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee6:	f004 f895 	bl	8014014 <tcp_output>
  while (pcb != NULL) {
 800feea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feec:	2b00      	cmp	r3, #0
 800feee:	f47f ad5e 	bne.w	800f9ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fef6:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <tcp_slowtmr+0x5a8>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fefc:	e069      	b.n	800ffd2 <tcp_slowtmr+0x652>
 800fefe:	bf00      	nop
 800ff00:	2000b6ac 	.word	0x2000b6ac
 800ff04:	000a4cb8 	.word	0x000a4cb8
 800ff08:	10624dd3 	.word	0x10624dd3
 800ff0c:	000124f8 	.word	0x000124f8
 800ff10:	2000b6a8 	.word	0x2000b6a8
 800ff14:	08019320 	.word	0x08019320
 800ff18:	08019758 	.word	0x08019758
 800ff1c:	08019364 	.word	0x08019364
 800ff20:	08019784 	.word	0x08019784
 800ff24:	2000b6a4 	.word	0x2000b6a4
 800ff28:	2000b6b8 	.word	0x2000b6b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2e:	7d1b      	ldrb	r3, [r3, #20]
 800ff30:	2b0a      	cmp	r3, #10
 800ff32:	d006      	beq.n	800ff42 <tcp_slowtmr+0x5c2>
 800ff34:	4b2a      	ldr	r3, [pc, #168]	; (800ffe0 <tcp_slowtmr+0x660>)
 800ff36:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ff3a:	492a      	ldr	r1, [pc, #168]	; (800ffe4 <tcp_slowtmr+0x664>)
 800ff3c:	482a      	ldr	r0, [pc, #168]	; (800ffe8 <tcp_slowtmr+0x668>)
 800ff3e:	f005 ffab 	bl	8015e98 <iprintf>
    pcb_remove = 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff48:	4b28      	ldr	r3, [pc, #160]	; (800ffec <tcp_slowtmr+0x66c>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2bf0      	cmp	r3, #240	; 0xf0
 800ff54:	d904      	bls.n	800ff60 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ff56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d02f      	beq.n	800ffc8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ff68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff6a:	f000 fbe5 	bl	8010738 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ff6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d010      	beq.n	800ff96 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ff74:	4b1e      	ldr	r3, [pc, #120]	; (800fff0 <tcp_slowtmr+0x670>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d106      	bne.n	800ff8c <tcp_slowtmr+0x60c>
 800ff7e:	4b18      	ldr	r3, [pc, #96]	; (800ffe0 <tcp_slowtmr+0x660>)
 800ff80:	f240 52af 	movw	r2, #1455	; 0x5af
 800ff84:	491b      	ldr	r1, [pc, #108]	; (800fff4 <tcp_slowtmr+0x674>)
 800ff86:	4818      	ldr	r0, [pc, #96]	; (800ffe8 <tcp_slowtmr+0x668>)
 800ff88:	f005 ff86 	bl	8015e98 <iprintf>
        prev->next = pcb->next;
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8e:	68da      	ldr	r2, [r3, #12]
 800ff90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff92:	60da      	str	r2, [r3, #12]
 800ff94:	e00f      	b.n	800ffb6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ff96:	4b16      	ldr	r3, [pc, #88]	; (800fff0 <tcp_slowtmr+0x670>)
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d006      	beq.n	800ffae <tcp_slowtmr+0x62e>
 800ffa0:	4b0f      	ldr	r3, [pc, #60]	; (800ffe0 <tcp_slowtmr+0x660>)
 800ffa2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ffa6:	4914      	ldr	r1, [pc, #80]	; (800fff8 <tcp_slowtmr+0x678>)
 800ffa8:	480f      	ldr	r0, [pc, #60]	; (800ffe8 <tcp_slowtmr+0x668>)
 800ffaa:	f005 ff75 	bl	8015e98 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ffae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	4a0f      	ldr	r2, [pc, #60]	; (800fff0 <tcp_slowtmr+0x670>)
 800ffb4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ffb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb8:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ffba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ffc0:	6838      	ldr	r0, [r7, #0]
 800ffc2:	f7fe ff4f 	bl	800ee64 <tcp_free>
 800ffc6:	e004      	b.n	800ffd2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ffc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ffcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ffd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1a9      	bne.n	800ff2c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ffd8:	bf00      	nop
 800ffda:	3730      	adds	r7, #48	; 0x30
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bdb0      	pop	{r4, r5, r7, pc}
 800ffe0:	08019320 	.word	0x08019320
 800ffe4:	080197b0 	.word	0x080197b0
 800ffe8:	08019364 	.word	0x08019364
 800ffec:	2000b6ac 	.word	0x2000b6ac
 800fff0:	2000b6b8 	.word	0x2000b6b8
 800fff4:	080197e0 	.word	0x080197e0
 800fff8:	08019808 	.word	0x08019808

0800fffc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010002:	4b2d      	ldr	r3, [pc, #180]	; (80100b8 <tcp_fasttmr+0xbc>)
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	3301      	adds	r3, #1
 8010008:	b2da      	uxtb	r2, r3
 801000a:	4b2b      	ldr	r3, [pc, #172]	; (80100b8 <tcp_fasttmr+0xbc>)
 801000c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801000e:	4b2b      	ldr	r3, [pc, #172]	; (80100bc <tcp_fasttmr+0xc0>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010014:	e048      	b.n	80100a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7f9a      	ldrb	r2, [r3, #30]
 801001a:	4b27      	ldr	r3, [pc, #156]	; (80100b8 <tcp_fasttmr+0xbc>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	429a      	cmp	r2, r3
 8010020:	d03f      	beq.n	80100a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010022:	4b25      	ldr	r3, [pc, #148]	; (80100b8 <tcp_fasttmr+0xbc>)
 8010024:	781a      	ldrb	r2, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8b5b      	ldrh	r3, [r3, #26]
 801002e:	f003 0301 	and.w	r3, r3, #1
 8010032:	2b00      	cmp	r3, #0
 8010034:	d010      	beq.n	8010058 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8b5b      	ldrh	r3, [r3, #26]
 801003a:	f043 0302 	orr.w	r3, r3, #2
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f003 ffe5 	bl	8014014 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8b5b      	ldrh	r3, [r3, #26]
 801004e:	f023 0303 	bic.w	r3, r3, #3
 8010052:	b29a      	uxth	r2, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	8b5b      	ldrh	r3, [r3, #26]
 801005c:	f003 0308 	and.w	r3, r3, #8
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	8b5b      	ldrh	r3, [r3, #26]
 8010068:	f023 0308 	bic.w	r3, r3, #8
 801006c:	b29a      	uxth	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff f886 	bl	800f184 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00a      	beq.n	801009c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010086:	4b0e      	ldr	r3, [pc, #56]	; (80100c0 <tcp_fasttmr+0xc4>)
 8010088:	2200      	movs	r2, #0
 801008a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 f819 	bl	80100c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010092:	4b0b      	ldr	r3, [pc, #44]	; (80100c0 <tcp_fasttmr+0xc4>)
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d000      	beq.n	801009c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801009a:	e7b8      	b.n	801000e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	607b      	str	r3, [r7, #4]
 80100a0:	e002      	b.n	80100a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1b3      	bne.n	8010016 <tcp_fasttmr+0x1a>
    }
  }
}
 80100ae:	bf00      	nop
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	2000085a 	.word	0x2000085a
 80100bc:	2000b6a8 	.word	0x2000b6a8
 80100c0:	2000b6a4 	.word	0x2000b6a4

080100c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80100c4:	b590      	push	{r4, r7, lr}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d109      	bne.n	80100e6 <tcp_process_refused_data+0x22>
 80100d2:	4b37      	ldr	r3, [pc, #220]	; (80101b0 <tcp_process_refused_data+0xec>)
 80100d4:	f240 6209 	movw	r2, #1545	; 0x609
 80100d8:	4936      	ldr	r1, [pc, #216]	; (80101b4 <tcp_process_refused_data+0xf0>)
 80100da:	4837      	ldr	r0, [pc, #220]	; (80101b8 <tcp_process_refused_data+0xf4>)
 80100dc:	f005 fedc 	bl	8015e98 <iprintf>
 80100e0:	f06f 030f 	mvn.w	r3, #15
 80100e4:	e060      	b.n	80101a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100ea:	7b5b      	ldrb	r3, [r3, #13]
 80100ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010100:	2b00      	cmp	r3, #0
 8010102:	d00b      	beq.n	801011c <tcp_process_refused_data+0x58>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6918      	ldr	r0, [r3, #16]
 801010e:	2300      	movs	r3, #0
 8010110:	68ba      	ldr	r2, [r7, #8]
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	47a0      	blx	r4
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]
 801011a:	e007      	b.n	801012c <tcp_process_refused_data+0x68>
 801011c:	2300      	movs	r3, #0
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	6879      	ldr	r1, [r7, #4]
 8010122:	2000      	movs	r0, #0
 8010124:	f000 f8a2 	bl	801026c <tcp_recv_null>
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801012c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d12a      	bne.n	801018a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010134:	7bbb      	ldrb	r3, [r7, #14]
 8010136:	f003 0320 	and.w	r3, r3, #32
 801013a:	2b00      	cmp	r3, #0
 801013c:	d033      	beq.n	80101a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010142:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010146:	d005      	beq.n	8010154 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801014c:	3301      	adds	r3, #1
 801014e:	b29a      	uxth	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00b      	beq.n	8010176 <tcp_process_refused_data+0xb2>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6918      	ldr	r0, [r3, #16]
 8010168:	2300      	movs	r3, #0
 801016a:	2200      	movs	r2, #0
 801016c:	6879      	ldr	r1, [r7, #4]
 801016e:	47a0      	blx	r4
 8010170:	4603      	mov	r3, r0
 8010172:	73fb      	strb	r3, [r7, #15]
 8010174:	e001      	b.n	801017a <tcp_process_refused_data+0xb6>
 8010176:	2300      	movs	r3, #0
 8010178:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801017a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801017e:	f113 0f0d 	cmn.w	r3, #13
 8010182:	d110      	bne.n	80101a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010184:	f06f 030c 	mvn.w	r3, #12
 8010188:	e00e      	b.n	80101a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801018a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801018e:	f113 0f0d 	cmn.w	r3, #13
 8010192:	d102      	bne.n	801019a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010194:	f06f 030c 	mvn.w	r3, #12
 8010198:	e006      	b.n	80101a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	68ba      	ldr	r2, [r7, #8]
 801019e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80101a0:	f06f 0304 	mvn.w	r3, #4
 80101a4:	e000      	b.n	80101a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd90      	pop	{r4, r7, pc}
 80101b0:	08019320 	.word	0x08019320
 80101b4:	08019830 	.word	0x08019830
 80101b8:	08019364 	.word	0x08019364

080101bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80101c4:	e007      	b.n	80101d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 f809 	bl	80101e4 <tcp_seg_free>
    seg = next;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1f4      	bne.n	80101c6 <tcp_segs_free+0xa>
  }
}
 80101dc:	bf00      	nop
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00c      	beq.n	801020c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d004      	beq.n	8010204 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe f960 	bl	800e4c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010204:	6879      	ldr	r1, [r7, #4]
 8010206:	2003      	movs	r0, #3
 8010208:	f7fd fb1a 	bl	800d840 <memp_free>
  }
}
 801020c:	bf00      	nop
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d106      	bne.n	8010230 <tcp_seg_copy+0x1c>
 8010222:	4b0f      	ldr	r3, [pc, #60]	; (8010260 <tcp_seg_copy+0x4c>)
 8010224:	f240 6282 	movw	r2, #1666	; 0x682
 8010228:	490e      	ldr	r1, [pc, #56]	; (8010264 <tcp_seg_copy+0x50>)
 801022a:	480f      	ldr	r0, [pc, #60]	; (8010268 <tcp_seg_copy+0x54>)
 801022c:	f005 fe34 	bl	8015e98 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010230:	2003      	movs	r0, #3
 8010232:	f7fd fab9 	bl	800d7a8 <memp_malloc>
 8010236:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <tcp_seg_copy+0x2e>
    return NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	e00a      	b.n	8010258 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010242:	2210      	movs	r2, #16
 8010244:	6879      	ldr	r1, [r7, #4]
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f005 fdf9 	bl	8015e3e <memcpy>
  pbuf_ref(cseg->p);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	4618      	mov	r0, r3
 8010252:	f7fe f9d7 	bl	800e604 <pbuf_ref>
  return cseg;
 8010256:	68fb      	ldr	r3, [r7, #12]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	08019320 	.word	0x08019320
 8010264:	08019874 	.word	0x08019874
 8010268:	08019364 	.word	0x08019364

0801026c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d109      	bne.n	8010294 <tcp_recv_null+0x28>
 8010280:	4b12      	ldr	r3, [pc, #72]	; (80102cc <tcp_recv_null+0x60>)
 8010282:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010286:	4912      	ldr	r1, [pc, #72]	; (80102d0 <tcp_recv_null+0x64>)
 8010288:	4812      	ldr	r0, [pc, #72]	; (80102d4 <tcp_recv_null+0x68>)
 801028a:	f005 fe05 	bl	8015e98 <iprintf>
 801028e:	f06f 030f 	mvn.w	r3, #15
 8010292:	e016      	b.n	80102c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d009      	beq.n	80102ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	891b      	ldrh	r3, [r3, #8]
 801029e:	4619      	mov	r1, r3
 80102a0:	68b8      	ldr	r0, [r7, #8]
 80102a2:	f7ff f9bf 	bl	800f624 <tcp_recved>
    pbuf_free(p);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7fe f90c 	bl	800e4c4 <pbuf_free>
 80102ac:	e008      	b.n	80102c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80102ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d104      	bne.n	80102c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80102b6:	68b8      	ldr	r0, [r7, #8]
 80102b8:	f7fe ffca 	bl	800f250 <tcp_close>
 80102bc:	4603      	mov	r3, r0
 80102be:	e000      	b.n	80102c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	08019320 	.word	0x08019320
 80102d0:	08019890 	.word	0x08019890
 80102d4:	08019364 	.word	0x08019364

080102d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b086      	sub	sp, #24
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80102e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	db01      	blt.n	80102ee <tcp_kill_prio+0x16>
 80102ea:	79fb      	ldrb	r3, [r7, #7]
 80102ec:	e000      	b.n	80102f0 <tcp_kill_prio+0x18>
 80102ee:	237f      	movs	r3, #127	; 0x7f
 80102f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80102f2:	7afb      	ldrb	r3, [r7, #11]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d034      	beq.n	8010362 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80102f8:	7afb      	ldrb	r3, [r7, #11]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010302:	2300      	movs	r3, #0
 8010304:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010306:	4b19      	ldr	r3, [pc, #100]	; (801036c <tcp_kill_prio+0x94>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	617b      	str	r3, [r7, #20]
 801030c:	e01f      	b.n	801034e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	7d5b      	ldrb	r3, [r3, #21]
 8010312:	7afa      	ldrb	r2, [r7, #11]
 8010314:	429a      	cmp	r2, r3
 8010316:	d80c      	bhi.n	8010332 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801031c:	7afa      	ldrb	r2, [r7, #11]
 801031e:	429a      	cmp	r2, r3
 8010320:	d112      	bne.n	8010348 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010322:	4b13      	ldr	r3, [pc, #76]	; (8010370 <tcp_kill_prio+0x98>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	1ad2      	subs	r2, r2, r3
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	429a      	cmp	r2, r3
 8010330:	d30a      	bcc.n	8010348 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010332:	4b0f      	ldr	r3, [pc, #60]	; (8010370 <tcp_kill_prio+0x98>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	7d5b      	ldrb	r3, [r3, #21]
 8010346:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	617b      	str	r3, [r7, #20]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1dc      	bne.n	801030e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d004      	beq.n	8010364 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801035a:	6938      	ldr	r0, [r7, #16]
 801035c:	f7ff f862 	bl	800f424 <tcp_abort>
 8010360:	e000      	b.n	8010364 <tcp_kill_prio+0x8c>
    return;
 8010362:	bf00      	nop
  }
}
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	2000b6a8 	.word	0x2000b6a8
 8010370:	2000b6ac 	.word	0x2000b6ac

08010374 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af00      	add	r7, sp, #0
 801037a:	4603      	mov	r3, r0
 801037c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801037e:	79fb      	ldrb	r3, [r7, #7]
 8010380:	2b08      	cmp	r3, #8
 8010382:	d009      	beq.n	8010398 <tcp_kill_state+0x24>
 8010384:	79fb      	ldrb	r3, [r7, #7]
 8010386:	2b09      	cmp	r3, #9
 8010388:	d006      	beq.n	8010398 <tcp_kill_state+0x24>
 801038a:	4b1a      	ldr	r3, [pc, #104]	; (80103f4 <tcp_kill_state+0x80>)
 801038c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010390:	4919      	ldr	r1, [pc, #100]	; (80103f8 <tcp_kill_state+0x84>)
 8010392:	481a      	ldr	r0, [pc, #104]	; (80103fc <tcp_kill_state+0x88>)
 8010394:	f005 fd80 	bl	8015e98 <iprintf>

  inactivity = 0;
 8010398:	2300      	movs	r3, #0
 801039a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801039c:	2300      	movs	r3, #0
 801039e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103a0:	4b17      	ldr	r3, [pc, #92]	; (8010400 <tcp_kill_state+0x8c>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	617b      	str	r3, [r7, #20]
 80103a6:	e017      	b.n	80103d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	7d1b      	ldrb	r3, [r3, #20]
 80103ac:	79fa      	ldrb	r2, [r7, #7]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d10f      	bne.n	80103d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80103b2:	4b14      	ldr	r3, [pc, #80]	; (8010404 <tcp_kill_state+0x90>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	1ad2      	subs	r2, r2, r3
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d307      	bcc.n	80103d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80103c2:	4b10      	ldr	r3, [pc, #64]	; (8010404 <tcp_kill_state+0x90>)
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	617b      	str	r3, [r7, #20]
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1e4      	bne.n	80103a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80103e4:	2100      	movs	r1, #0
 80103e6:	6938      	ldr	r0, [r7, #16]
 80103e8:	f7fe ff5e 	bl	800f2a8 <tcp_abandon>
  }
}
 80103ec:	bf00      	nop
 80103ee:	3718      	adds	r7, #24
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	08019320 	.word	0x08019320
 80103f8:	080198ac 	.word	0x080198ac
 80103fc:	08019364 	.word	0x08019364
 8010400:	2000b6a8 	.word	0x2000b6a8
 8010404:	2000b6ac 	.word	0x2000b6ac

08010408 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801040e:	2300      	movs	r3, #0
 8010410:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010412:	2300      	movs	r3, #0
 8010414:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010416:	4b12      	ldr	r3, [pc, #72]	; (8010460 <tcp_kill_timewait+0x58>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	60fb      	str	r3, [r7, #12]
 801041c:	e012      	b.n	8010444 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801041e:	4b11      	ldr	r3, [pc, #68]	; (8010464 <tcp_kill_timewait+0x5c>)
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	1ad2      	subs	r2, r2, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	429a      	cmp	r2, r3
 801042c:	d307      	bcc.n	801043e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801042e:	4b0d      	ldr	r3, [pc, #52]	; (8010464 <tcp_kill_timewait+0x5c>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	60fb      	str	r3, [r7, #12]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1e9      	bne.n	801041e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010450:	68b8      	ldr	r0, [r7, #8]
 8010452:	f7fe ffe7 	bl	800f424 <tcp_abort>
  }
}
 8010456:	bf00      	nop
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	2000b6b8 	.word	0x2000b6b8
 8010464:	2000b6ac 	.word	0x2000b6ac

08010468 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801046e:	4b10      	ldr	r3, [pc, #64]	; (80104b0 <tcp_handle_closepend+0x48>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010474:	e014      	b.n	80104a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	68db      	ldr	r3, [r3, #12]
 801047a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8b5b      	ldrh	r3, [r3, #26]
 8010480:	f003 0308 	and.w	r3, r3, #8
 8010484:	2b00      	cmp	r3, #0
 8010486:	d009      	beq.n	801049c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	8b5b      	ldrh	r3, [r3, #26]
 801048c:	f023 0308 	bic.w	r3, r3, #8
 8010490:	b29a      	uxth	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7fe fe74 	bl	800f184 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1e7      	bne.n	8010476 <tcp_handle_closepend+0xe>
  }
}
 80104a6:	bf00      	nop
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	2000b6a8 	.word	0x2000b6a8

080104b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	4603      	mov	r3, r0
 80104bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104be:	2001      	movs	r0, #1
 80104c0:	f7fd f972 	bl	800d7a8 <memp_malloc>
 80104c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d126      	bne.n	801051a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80104cc:	f7ff ffcc 	bl	8010468 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80104d0:	f7ff ff9a 	bl	8010408 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104d4:	2001      	movs	r0, #1
 80104d6:	f7fd f967 	bl	800d7a8 <memp_malloc>
 80104da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d11b      	bne.n	801051a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80104e2:	2009      	movs	r0, #9
 80104e4:	f7ff ff46 	bl	8010374 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104e8:	2001      	movs	r0, #1
 80104ea:	f7fd f95d 	bl	800d7a8 <memp_malloc>
 80104ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d111      	bne.n	801051a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80104f6:	2008      	movs	r0, #8
 80104f8:	f7ff ff3c 	bl	8010374 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104fc:	2001      	movs	r0, #1
 80104fe:	f7fd f953 	bl	800d7a8 <memp_malloc>
 8010502:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d107      	bne.n	801051a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801050a:	79fb      	ldrb	r3, [r7, #7]
 801050c:	4618      	mov	r0, r3
 801050e:	f7ff fee3 	bl	80102d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010512:	2001      	movs	r0, #1
 8010514:	f7fd f948 	bl	800d7a8 <memp_malloc>
 8010518:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d03f      	beq.n	80105a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010520:	229c      	movs	r2, #156	; 0x9c
 8010522:	2100      	movs	r1, #0
 8010524:	68f8      	ldr	r0, [r7, #12]
 8010526:	f005 fcaf 	bl	8015e88 <memset>
    pcb->prio = prio;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	79fa      	ldrb	r2, [r7, #7]
 801052e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010536:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010540:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	22ff      	movs	r2, #255	; 0xff
 801054e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010556:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2206      	movs	r2, #6
 801055c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2206      	movs	r2, #6
 8010564:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801056c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2201      	movs	r2, #1
 8010572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010576:	4b0d      	ldr	r3, [pc, #52]	; (80105ac <tcp_alloc+0xf8>)
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801057e:	4b0c      	ldr	r3, [pc, #48]	; (80105b0 <tcp_alloc+0xfc>)
 8010580:	781a      	ldrb	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801058c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	4a08      	ldr	r2, [pc, #32]	; (80105b4 <tcp_alloc+0x100>)
 8010594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	4a07      	ldr	r2, [pc, #28]	; (80105b8 <tcp_alloc+0x104>)
 801059c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80105a0:	68fb      	ldr	r3, [r7, #12]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	2000b6ac 	.word	0x2000b6ac
 80105b0:	2000085a 	.word	0x2000085a
 80105b4:	0801026d 	.word	0x0801026d
 80105b8:	006ddd00 	.word	0x006ddd00

080105bc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80105c0:	2040      	movs	r0, #64	; 0x40
 80105c2:	f7ff ff77 	bl	80104b4 <tcp_alloc>
 80105c6:	4603      	mov	r3, r0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	bd80      	pop	{r7, pc}

080105cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80105d6:	2040      	movs	r0, #64	; 0x40
 80105d8:	f7ff ff6c 	bl	80104b4 <tcp_alloc>
 80105dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80105de:	68fb      	ldr	r3, [r7, #12]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d002      	beq.n	80105fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	611a      	str	r2, [r3, #16]
  }
}
 80105fe:	bf00      	nop
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
	...

0801060c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00e      	beq.n	801063a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	7d1b      	ldrb	r3, [r3, #20]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d106      	bne.n	8010632 <tcp_recv+0x26>
 8010624:	4b07      	ldr	r3, [pc, #28]	; (8010644 <tcp_recv+0x38>)
 8010626:	f240 72df 	movw	r2, #2015	; 0x7df
 801062a:	4907      	ldr	r1, [pc, #28]	; (8010648 <tcp_recv+0x3c>)
 801062c:	4807      	ldr	r0, [pc, #28]	; (801064c <tcp_recv+0x40>)
 801062e:	f005 fc33 	bl	8015e98 <iprintf>
    pcb->recv = recv;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	683a      	ldr	r2, [r7, #0]
 8010636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801063a:	bf00      	nop
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	08019320 	.word	0x08019320
 8010648:	080198bc 	.word	0x080198bc
 801064c:	08019364 	.word	0x08019364

08010650 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00e      	beq.n	801067e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	7d1b      	ldrb	r3, [r3, #20]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d106      	bne.n	8010676 <tcp_sent+0x26>
 8010668:	4b07      	ldr	r3, [pc, #28]	; (8010688 <tcp_sent+0x38>)
 801066a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801066e:	4907      	ldr	r1, [pc, #28]	; (801068c <tcp_sent+0x3c>)
 8010670:	4807      	ldr	r0, [pc, #28]	; (8010690 <tcp_sent+0x40>)
 8010672:	f005 fc11 	bl	8015e98 <iprintf>
    pcb->sent = sent;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	683a      	ldr	r2, [r7, #0]
 801067a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801067e:	bf00      	nop
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	08019320 	.word	0x08019320
 801068c:	080198e4 	.word	0x080198e4
 8010690:	08019364 	.word	0x08019364

08010694 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00e      	beq.n	80106c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	7d1b      	ldrb	r3, [r3, #20]
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d106      	bne.n	80106ba <tcp_err+0x26>
 80106ac:	4b07      	ldr	r3, [pc, #28]	; (80106cc <tcp_err+0x38>)
 80106ae:	f640 020d 	movw	r2, #2061	; 0x80d
 80106b2:	4907      	ldr	r1, [pc, #28]	; (80106d0 <tcp_err+0x3c>)
 80106b4:	4807      	ldr	r0, [pc, #28]	; (80106d4 <tcp_err+0x40>)
 80106b6:	f005 fbef 	bl	8015e98 <iprintf>
    pcb->errf = err;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	683a      	ldr	r2, [r7, #0]
 80106be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80106c2:	bf00      	nop
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	08019320 	.word	0x08019320
 80106d0:	0801990c 	.word	0x0801990c
 80106d4:	08019364 	.word	0x08019364

080106d8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	4613      	mov	r3, r2
 80106e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d107      	bne.n	80106fc <tcp_poll+0x24>
 80106ec:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <tcp_poll+0x50>)
 80106ee:	f640 023d 	movw	r2, #2109	; 0x83d
 80106f2:	490e      	ldr	r1, [pc, #56]	; (801072c <tcp_poll+0x54>)
 80106f4:	480e      	ldr	r0, [pc, #56]	; (8010730 <tcp_poll+0x58>)
 80106f6:	f005 fbcf 	bl	8015e98 <iprintf>
 80106fa:	e011      	b.n	8010720 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	7d1b      	ldrb	r3, [r3, #20]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d106      	bne.n	8010712 <tcp_poll+0x3a>
 8010704:	4b08      	ldr	r3, [pc, #32]	; (8010728 <tcp_poll+0x50>)
 8010706:	f640 023e 	movw	r2, #2110	; 0x83e
 801070a:	490a      	ldr	r1, [pc, #40]	; (8010734 <tcp_poll+0x5c>)
 801070c:	4808      	ldr	r0, [pc, #32]	; (8010730 <tcp_poll+0x58>)
 801070e:	f005 fbc3 	bl	8015e98 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	79fa      	ldrb	r2, [r7, #7]
 801071e:	775a      	strb	r2, [r3, #29]
}
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	08019320 	.word	0x08019320
 801072c:	08019934 	.word	0x08019934
 8010730:	08019364 	.word	0x08019364
 8010734:	0801994c 	.word	0x0801994c

08010738 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d107      	bne.n	8010756 <tcp_pcb_purge+0x1e>
 8010746:	4b21      	ldr	r3, [pc, #132]	; (80107cc <tcp_pcb_purge+0x94>)
 8010748:	f640 0251 	movw	r2, #2129	; 0x851
 801074c:	4920      	ldr	r1, [pc, #128]	; (80107d0 <tcp_pcb_purge+0x98>)
 801074e:	4821      	ldr	r0, [pc, #132]	; (80107d4 <tcp_pcb_purge+0x9c>)
 8010750:	f005 fba2 	bl	8015e98 <iprintf>
 8010754:	e037      	b.n	80107c6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	7d1b      	ldrb	r3, [r3, #20]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d033      	beq.n	80107c6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010762:	2b0a      	cmp	r3, #10
 8010764:	d02f      	beq.n	80107c6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801076a:	2b01      	cmp	r3, #1
 801076c:	d02b      	beq.n	80107c6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010772:	2b00      	cmp	r3, #0
 8010774:	d007      	beq.n	8010786 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801077a:	4618      	mov	r0, r3
 801077c:	f7fd fea2 	bl	800e4c4 <pbuf_free>
      pcb->refused_data = NULL;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801078a:	2b00      	cmp	r3, #0
 801078c:	d002      	beq.n	8010794 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 f986 	bl	8010aa0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801079a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff fd0b 	bl	80101bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7ff fd06 	bl	80101bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	08019320 	.word	0x08019320
 80107d0:	0801996c 	.word	0x0801996c
 80107d4:	08019364 	.word	0x08019364

080107d8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d106      	bne.n	80107f6 <tcp_pcb_remove+0x1e>
 80107e8:	4b3e      	ldr	r3, [pc, #248]	; (80108e4 <tcp_pcb_remove+0x10c>)
 80107ea:	f640 0283 	movw	r2, #2179	; 0x883
 80107ee:	493e      	ldr	r1, [pc, #248]	; (80108e8 <tcp_pcb_remove+0x110>)
 80107f0:	483e      	ldr	r0, [pc, #248]	; (80108ec <tcp_pcb_remove+0x114>)
 80107f2:	f005 fb51 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <tcp_pcb_remove+0x32>
 80107fc:	4b39      	ldr	r3, [pc, #228]	; (80108e4 <tcp_pcb_remove+0x10c>)
 80107fe:	f640 0284 	movw	r2, #2180	; 0x884
 8010802:	493b      	ldr	r1, [pc, #236]	; (80108f0 <tcp_pcb_remove+0x118>)
 8010804:	4839      	ldr	r0, [pc, #228]	; (80108ec <tcp_pcb_remove+0x114>)
 8010806:	f005 fb47 	bl	8015e98 <iprintf>

  TCP_RMV(pcblist, pcb);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	429a      	cmp	r2, r3
 8010812:	d105      	bne.n	8010820 <tcp_pcb_remove+0x48>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68da      	ldr	r2, [r3, #12]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	e013      	b.n	8010848 <tcp_pcb_remove+0x70>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	60fb      	str	r3, [r7, #12]
 8010826:	e00c      	b.n	8010842 <tcp_pcb_remove+0x6a>
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	68da      	ldr	r2, [r3, #12]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	429a      	cmp	r2, r3
 8010830:	d104      	bne.n	801083c <tcp_pcb_remove+0x64>
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	68da      	ldr	r2, [r3, #12]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	60da      	str	r2, [r3, #12]
 801083a:	e005      	b.n	8010848 <tcp_pcb_remove+0x70>
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	60fb      	str	r3, [r7, #12]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1ef      	bne.n	8010828 <tcp_pcb_remove+0x50>
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	2200      	movs	r2, #0
 801084c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801084e:	6838      	ldr	r0, [r7, #0]
 8010850:	f7ff ff72 	bl	8010738 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	7d1b      	ldrb	r3, [r3, #20]
 8010858:	2b0a      	cmp	r3, #10
 801085a:	d013      	beq.n	8010884 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010860:	2b01      	cmp	r3, #1
 8010862:	d00f      	beq.n	8010884 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	8b5b      	ldrh	r3, [r3, #26]
 8010868:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801086c:	2b00      	cmp	r3, #0
 801086e:	d009      	beq.n	8010884 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	8b5b      	ldrh	r3, [r3, #26]
 8010874:	f043 0302 	orr.w	r3, r3, #2
 8010878:	b29a      	uxth	r2, r3
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801087e:	6838      	ldr	r0, [r7, #0]
 8010880:	f003 fbc8 	bl	8014014 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	7d1b      	ldrb	r3, [r3, #20]
 8010888:	2b01      	cmp	r3, #1
 801088a:	d020      	beq.n	80108ce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010890:	2b00      	cmp	r3, #0
 8010892:	d006      	beq.n	80108a2 <tcp_pcb_remove+0xca>
 8010894:	4b13      	ldr	r3, [pc, #76]	; (80108e4 <tcp_pcb_remove+0x10c>)
 8010896:	f640 0293 	movw	r2, #2195	; 0x893
 801089a:	4916      	ldr	r1, [pc, #88]	; (80108f4 <tcp_pcb_remove+0x11c>)
 801089c:	4813      	ldr	r0, [pc, #76]	; (80108ec <tcp_pcb_remove+0x114>)
 801089e:	f005 fafb 	bl	8015e98 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d006      	beq.n	80108b8 <tcp_pcb_remove+0xe0>
 80108aa:	4b0e      	ldr	r3, [pc, #56]	; (80108e4 <tcp_pcb_remove+0x10c>)
 80108ac:	f640 0294 	movw	r2, #2196	; 0x894
 80108b0:	4911      	ldr	r1, [pc, #68]	; (80108f8 <tcp_pcb_remove+0x120>)
 80108b2:	480e      	ldr	r0, [pc, #56]	; (80108ec <tcp_pcb_remove+0x114>)
 80108b4:	f005 faf0 	bl	8015e98 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d006      	beq.n	80108ce <tcp_pcb_remove+0xf6>
 80108c0:	4b08      	ldr	r3, [pc, #32]	; (80108e4 <tcp_pcb_remove+0x10c>)
 80108c2:	f640 0296 	movw	r2, #2198	; 0x896
 80108c6:	490d      	ldr	r1, [pc, #52]	; (80108fc <tcp_pcb_remove+0x124>)
 80108c8:	4808      	ldr	r0, [pc, #32]	; (80108ec <tcp_pcb_remove+0x114>)
 80108ca:	f005 fae5 	bl	8015e98 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2200      	movs	r2, #0
 80108d2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2200      	movs	r2, #0
 80108d8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80108da:	bf00      	nop
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	bf00      	nop
 80108e4:	08019320 	.word	0x08019320
 80108e8:	08019988 	.word	0x08019988
 80108ec:	08019364 	.word	0x08019364
 80108f0:	080199a4 	.word	0x080199a4
 80108f4:	080199c4 	.word	0x080199c4
 80108f8:	080199dc 	.word	0x080199dc
 80108fc:	080199f8 	.word	0x080199f8

08010900 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d106      	bne.n	801091c <tcp_next_iss+0x1c>
 801090e:	4b0a      	ldr	r3, [pc, #40]	; (8010938 <tcp_next_iss+0x38>)
 8010910:	f640 02af 	movw	r2, #2223	; 0x8af
 8010914:	4909      	ldr	r1, [pc, #36]	; (801093c <tcp_next_iss+0x3c>)
 8010916:	480a      	ldr	r0, [pc, #40]	; (8010940 <tcp_next_iss+0x40>)
 8010918:	f005 fabe 	bl	8015e98 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801091c:	4b09      	ldr	r3, [pc, #36]	; (8010944 <tcp_next_iss+0x44>)
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	4b09      	ldr	r3, [pc, #36]	; (8010948 <tcp_next_iss+0x48>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4413      	add	r3, r2
 8010926:	4a07      	ldr	r2, [pc, #28]	; (8010944 <tcp_next_iss+0x44>)
 8010928:	6013      	str	r3, [r2, #0]
  return iss;
 801092a:	4b06      	ldr	r3, [pc, #24]	; (8010944 <tcp_next_iss+0x44>)
 801092c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801092e:	4618      	mov	r0, r3
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	08019320 	.word	0x08019320
 801093c:	08019a10 	.word	0x08019a10
 8010940:	08019364 	.word	0x08019364
 8010944:	2000000c 	.word	0x2000000c
 8010948:	2000b6ac 	.word	0x2000b6ac

0801094c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	4603      	mov	r3, r0
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d106      	bne.n	801096e <tcp_eff_send_mss_netif+0x22>
 8010960:	4b14      	ldr	r3, [pc, #80]	; (80109b4 <tcp_eff_send_mss_netif+0x68>)
 8010962:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010966:	4914      	ldr	r1, [pc, #80]	; (80109b8 <tcp_eff_send_mss_netif+0x6c>)
 8010968:	4814      	ldr	r0, [pc, #80]	; (80109bc <tcp_eff_send_mss_netif+0x70>)
 801096a:	f005 fa95 	bl	8015e98 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d101      	bne.n	8010978 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010974:	89fb      	ldrh	r3, [r7, #14]
 8010976:	e019      	b.n	80109ac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801097c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801097e:	8afb      	ldrh	r3, [r7, #22]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d012      	beq.n	80109aa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010984:	2328      	movs	r3, #40	; 0x28
 8010986:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010988:	8afa      	ldrh	r2, [r7, #22]
 801098a:	8abb      	ldrh	r3, [r7, #20]
 801098c:	429a      	cmp	r2, r3
 801098e:	d904      	bls.n	801099a <tcp_eff_send_mss_netif+0x4e>
 8010990:	8afa      	ldrh	r2, [r7, #22]
 8010992:	8abb      	ldrh	r3, [r7, #20]
 8010994:	1ad3      	subs	r3, r2, r3
 8010996:	b29b      	uxth	r3, r3
 8010998:	e000      	b.n	801099c <tcp_eff_send_mss_netif+0x50>
 801099a:	2300      	movs	r3, #0
 801099c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801099e:	8a7a      	ldrh	r2, [r7, #18]
 80109a0:	89fb      	ldrh	r3, [r7, #14]
 80109a2:	4293      	cmp	r3, r2
 80109a4:	bf28      	it	cs
 80109a6:	4613      	movcs	r3, r2
 80109a8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80109aa:	89fb      	ldrh	r3, [r7, #14]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3718      	adds	r7, #24
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	08019320 	.word	0x08019320
 80109b8:	08019a2c 	.word	0x08019a2c
 80109bc:	08019364 	.word	0x08019364

080109c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d119      	bne.n	8010a08 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80109d4:	4b10      	ldr	r3, [pc, #64]	; (8010a18 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80109d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80109da:	4910      	ldr	r1, [pc, #64]	; (8010a1c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80109dc:	4810      	ldr	r0, [pc, #64]	; (8010a20 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80109de:	f005 fa5b 	bl	8015e98 <iprintf>

  while (pcb != NULL) {
 80109e2:	e011      	b.n	8010a08 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d108      	bne.n	8010a02 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f7fe fd14 	bl	800f424 <tcp_abort>
      pcb = next;
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	60fb      	str	r3, [r7, #12]
 8010a00:	e002      	b.n	8010a08 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d1ea      	bne.n	80109e4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010a0e:	bf00      	nop
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	08019320 	.word	0x08019320
 8010a1c:	08019a54 	.word	0x08019a54
 8010a20:	08019364 	.word	0x08019364

08010a24 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d02a      	beq.n	8010a8a <tcp_netif_ip_addr_changed+0x66>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d026      	beq.n	8010a8a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010a3c:	4b15      	ldr	r3, [pc, #84]	; (8010a94 <tcp_netif_ip_addr_changed+0x70>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4619      	mov	r1, r3
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f7ff ffbc 	bl	80109c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010a48:	4b13      	ldr	r3, [pc, #76]	; (8010a98 <tcp_netif_ip_addr_changed+0x74>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7ff ffb6 	bl	80109c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d017      	beq.n	8010a8a <tcp_netif_ip_addr_changed+0x66>
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d013      	beq.n	8010a8a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a62:	4b0e      	ldr	r3, [pc, #56]	; (8010a9c <tcp_netif_ip_addr_changed+0x78>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	60fb      	str	r3, [r7, #12]
 8010a68:	e00c      	b.n	8010a84 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d103      	bne.n	8010a7e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	60fb      	str	r3, [r7, #12]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d1ef      	bne.n	8010a6a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010a8a:	bf00      	nop
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	2000b6a8 	.word	0x2000b6a8
 8010a98:	2000b6b4 	.word	0x2000b6b4
 8010a9c:	2000b6b0 	.word	0x2000b6b0

08010aa0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d007      	beq.n	8010ac0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff fb81 	bl	80101bc <tcp_segs_free>
    pcb->ooseq = NULL;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2200      	movs	r2, #0
 8010abe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b08d      	sub	sp, #52	; 0x34
 8010acc:	af04      	add	r7, sp, #16
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d105      	bne.n	8010ae4 <tcp_input+0x1c>
 8010ad8:	4b9b      	ldr	r3, [pc, #620]	; (8010d48 <tcp_input+0x280>)
 8010ada:	2283      	movs	r2, #131	; 0x83
 8010adc:	499b      	ldr	r1, [pc, #620]	; (8010d4c <tcp_input+0x284>)
 8010ade:	489c      	ldr	r0, [pc, #624]	; (8010d50 <tcp_input+0x288>)
 8010ae0:	f005 f9da 	bl	8015e98 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	4a9a      	ldr	r2, [pc, #616]	; (8010d54 <tcp_input+0x28c>)
 8010aea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	895b      	ldrh	r3, [r3, #10]
 8010af0:	2b13      	cmp	r3, #19
 8010af2:	f240 83c2 	bls.w	801127a <tcp_input+0x7b2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010af6:	4b98      	ldr	r3, [pc, #608]	; (8010d58 <tcp_input+0x290>)
 8010af8:	695a      	ldr	r2, [r3, #20]
 8010afa:	4b97      	ldr	r3, [pc, #604]	; (8010d58 <tcp_input+0x290>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4619      	mov	r1, r3
 8010b00:	4610      	mov	r0, r2
 8010b02:	f7fb f9e1 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f040 83bb 	bne.w	8011284 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010b0e:	4b92      	ldr	r3, [pc, #584]	; (8010d58 <tcp_input+0x290>)
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b16:	2be0      	cmp	r3, #224	; 0xe0
 8010b18:	f000 83b4 	beq.w	8011284 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010b1c:	4b8d      	ldr	r3, [pc, #564]	; (8010d54 <tcp_input+0x28c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	899b      	ldrh	r3, [r3, #12]
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7f8 fe3d 	bl	80097a4 <lwip_htons>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	0b1b      	lsrs	r3, r3, #12
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010b36:	7cbb      	ldrb	r3, [r7, #18]
 8010b38:	2b13      	cmp	r3, #19
 8010b3a:	f240 83a3 	bls.w	8011284 <tcp_input+0x7bc>
 8010b3e:	7cbb      	ldrb	r3, [r7, #18]
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	891b      	ldrh	r3, [r3, #8]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	f200 839c 	bhi.w	8011284 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010b4c:	7cbb      	ldrb	r3, [r7, #18]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	3b14      	subs	r3, #20
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	4b81      	ldr	r3, [pc, #516]	; (8010d5c <tcp_input+0x294>)
 8010b56:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010b58:	4b81      	ldr	r3, [pc, #516]	; (8010d60 <tcp_input+0x298>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	895a      	ldrh	r2, [r3, #10]
 8010b62:	7cbb      	ldrb	r3, [r7, #18]
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d309      	bcc.n	8010b7e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010b6a:	4b7c      	ldr	r3, [pc, #496]	; (8010d5c <tcp_input+0x294>)
 8010b6c:	881a      	ldrh	r2, [r3, #0]
 8010b6e:	4b7d      	ldr	r3, [pc, #500]	; (8010d64 <tcp_input+0x29c>)
 8010b70:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010b72:	7cbb      	ldrb	r3, [r7, #18]
 8010b74:	4619      	mov	r1, r3
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7fd fbec 	bl	800e354 <pbuf_remove_header>
 8010b7c:	e04e      	b.n	8010c1c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d105      	bne.n	8010b92 <tcp_input+0xca>
 8010b86:	4b70      	ldr	r3, [pc, #448]	; (8010d48 <tcp_input+0x280>)
 8010b88:	22c2      	movs	r2, #194	; 0xc2
 8010b8a:	4977      	ldr	r1, [pc, #476]	; (8010d68 <tcp_input+0x2a0>)
 8010b8c:	4870      	ldr	r0, [pc, #448]	; (8010d50 <tcp_input+0x288>)
 8010b8e:	f005 f983 	bl	8015e98 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010b92:	2114      	movs	r1, #20
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7fd fbdd 	bl	800e354 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	895a      	ldrh	r2, [r3, #10]
 8010b9e:	4b71      	ldr	r3, [pc, #452]	; (8010d64 <tcp_input+0x29c>)
 8010ba0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010ba2:	4b6e      	ldr	r3, [pc, #440]	; (8010d5c <tcp_input+0x294>)
 8010ba4:	881a      	ldrh	r2, [r3, #0]
 8010ba6:	4b6f      	ldr	r3, [pc, #444]	; (8010d64 <tcp_input+0x29c>)
 8010ba8:	881b      	ldrh	r3, [r3, #0]
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010bae:	4b6d      	ldr	r3, [pc, #436]	; (8010d64 <tcp_input+0x29c>)
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7fd fbcd 	bl	800e354 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	895b      	ldrh	r3, [r3, #10]
 8010bc0:	8a3a      	ldrh	r2, [r7, #16]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	f200 835b 	bhi.w	801127e <tcp_input+0x7b6>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	4a64      	ldr	r2, [pc, #400]	; (8010d60 <tcp_input+0x298>)
 8010bd0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	8a3a      	ldrh	r2, [r7, #16]
 8010bd8:	4611      	mov	r1, r2
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fd fbba 	bl	800e354 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	891a      	ldrh	r2, [r3, #8]
 8010be4:	8a3b      	ldrh	r3, [r7, #16]
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	895b      	ldrh	r3, [r3, #10]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d005      	beq.n	8010c02 <tcp_input+0x13a>
 8010bf6:	4b54      	ldr	r3, [pc, #336]	; (8010d48 <tcp_input+0x280>)
 8010bf8:	22df      	movs	r2, #223	; 0xdf
 8010bfa:	495c      	ldr	r1, [pc, #368]	; (8010d6c <tcp_input+0x2a4>)
 8010bfc:	4854      	ldr	r0, [pc, #336]	; (8010d50 <tcp_input+0x288>)
 8010bfe:	f005 f94b 	bl	8015e98 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	891a      	ldrh	r2, [r3, #8]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	891b      	ldrh	r3, [r3, #8]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d005      	beq.n	8010c1c <tcp_input+0x154>
 8010c10:	4b4d      	ldr	r3, [pc, #308]	; (8010d48 <tcp_input+0x280>)
 8010c12:	22e0      	movs	r2, #224	; 0xe0
 8010c14:	4956      	ldr	r1, [pc, #344]	; (8010d70 <tcp_input+0x2a8>)
 8010c16:	484e      	ldr	r0, [pc, #312]	; (8010d50 <tcp_input+0x288>)
 8010c18:	f005 f93e 	bl	8015e98 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010c1c:	4b4d      	ldr	r3, [pc, #308]	; (8010d54 <tcp_input+0x28c>)
 8010c1e:	681c      	ldr	r4, [r3, #0]
 8010c20:	4b4c      	ldr	r3, [pc, #304]	; (8010d54 <tcp_input+0x28c>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	881b      	ldrh	r3, [r3, #0]
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7f8 fdbb 	bl	80097a4 <lwip_htons>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010c32:	4b48      	ldr	r3, [pc, #288]	; (8010d54 <tcp_input+0x28c>)
 8010c34:	681c      	ldr	r4, [r3, #0]
 8010c36:	4b47      	ldr	r3, [pc, #284]	; (8010d54 <tcp_input+0x28c>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	885b      	ldrh	r3, [r3, #2]
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7f8 fdb0 	bl	80097a4 <lwip_htons>
 8010c44:	4603      	mov	r3, r0
 8010c46:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010c48:	4b42      	ldr	r3, [pc, #264]	; (8010d54 <tcp_input+0x28c>)
 8010c4a:	681c      	ldr	r4, [r3, #0]
 8010c4c:	4b41      	ldr	r3, [pc, #260]	; (8010d54 <tcp_input+0x28c>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7f8 fdbb 	bl	80097ce <lwip_htonl>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	6063      	str	r3, [r4, #4]
 8010c5c:	6863      	ldr	r3, [r4, #4]
 8010c5e:	4a45      	ldr	r2, [pc, #276]	; (8010d74 <tcp_input+0x2ac>)
 8010c60:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010c62:	4b3c      	ldr	r3, [pc, #240]	; (8010d54 <tcp_input+0x28c>)
 8010c64:	681c      	ldr	r4, [r3, #0]
 8010c66:	4b3b      	ldr	r3, [pc, #236]	; (8010d54 <tcp_input+0x28c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	689b      	ldr	r3, [r3, #8]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f8 fdae 	bl	80097ce <lwip_htonl>
 8010c72:	4603      	mov	r3, r0
 8010c74:	60a3      	str	r3, [r4, #8]
 8010c76:	68a3      	ldr	r3, [r4, #8]
 8010c78:	4a3f      	ldr	r2, [pc, #252]	; (8010d78 <tcp_input+0x2b0>)
 8010c7a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010c7c:	4b35      	ldr	r3, [pc, #212]	; (8010d54 <tcp_input+0x28c>)
 8010c7e:	681c      	ldr	r4, [r3, #0]
 8010c80:	4b34      	ldr	r3, [pc, #208]	; (8010d54 <tcp_input+0x28c>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	89db      	ldrh	r3, [r3, #14]
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7f8 fd8b 	bl	80097a4 <lwip_htons>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010c92:	4b30      	ldr	r3, [pc, #192]	; (8010d54 <tcp_input+0x28c>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	899b      	ldrh	r3, [r3, #12]
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7f8 fd82 	bl	80097a4 <lwip_htons>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	4b34      	ldr	r3, [pc, #208]	; (8010d7c <tcp_input+0x2b4>)
 8010cac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	891a      	ldrh	r2, [r3, #8]
 8010cb2:	4b33      	ldr	r3, [pc, #204]	; (8010d80 <tcp_input+0x2b8>)
 8010cb4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010cb6:	4b31      	ldr	r3, [pc, #196]	; (8010d7c <tcp_input+0x2b4>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f003 0303 	and.w	r3, r3, #3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00c      	beq.n	8010cdc <tcp_input+0x214>
    tcplen++;
 8010cc2:	4b2f      	ldr	r3, [pc, #188]	; (8010d80 <tcp_input+0x2b8>)
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	4b2d      	ldr	r3, [pc, #180]	; (8010d80 <tcp_input+0x2b8>)
 8010ccc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	891a      	ldrh	r2, [r3, #8]
 8010cd2:	4b2b      	ldr	r3, [pc, #172]	; (8010d80 <tcp_input+0x2b8>)
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	f200 82d3 	bhi.w	8011282 <tcp_input+0x7ba>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ce0:	4b28      	ldr	r3, [pc, #160]	; (8010d84 <tcp_input+0x2bc>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	61fb      	str	r3, [r7, #28]
 8010ce6:	e09d      	b.n	8010e24 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	7d1b      	ldrb	r3, [r3, #20]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d105      	bne.n	8010cfc <tcp_input+0x234>
 8010cf0:	4b15      	ldr	r3, [pc, #84]	; (8010d48 <tcp_input+0x280>)
 8010cf2:	22fb      	movs	r2, #251	; 0xfb
 8010cf4:	4924      	ldr	r1, [pc, #144]	; (8010d88 <tcp_input+0x2c0>)
 8010cf6:	4816      	ldr	r0, [pc, #88]	; (8010d50 <tcp_input+0x288>)
 8010cf8:	f005 f8ce 	bl	8015e98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	7d1b      	ldrb	r3, [r3, #20]
 8010d00:	2b0a      	cmp	r3, #10
 8010d02:	d105      	bne.n	8010d10 <tcp_input+0x248>
 8010d04:	4b10      	ldr	r3, [pc, #64]	; (8010d48 <tcp_input+0x280>)
 8010d06:	22fc      	movs	r2, #252	; 0xfc
 8010d08:	4920      	ldr	r1, [pc, #128]	; (8010d8c <tcp_input+0x2c4>)
 8010d0a:	4811      	ldr	r0, [pc, #68]	; (8010d50 <tcp_input+0x288>)
 8010d0c:	f005 f8c4 	bl	8015e98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	7d1b      	ldrb	r3, [r3, #20]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d105      	bne.n	8010d24 <tcp_input+0x25c>
 8010d18:	4b0b      	ldr	r3, [pc, #44]	; (8010d48 <tcp_input+0x280>)
 8010d1a:	22fd      	movs	r2, #253	; 0xfd
 8010d1c:	491c      	ldr	r1, [pc, #112]	; (8010d90 <tcp_input+0x2c8>)
 8010d1e:	480c      	ldr	r0, [pc, #48]	; (8010d50 <tcp_input+0x288>)
 8010d20:	f005 f8ba 	bl	8015e98 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	7a1b      	ldrb	r3, [r3, #8]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d033      	beq.n	8010d94 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	7a1a      	ldrb	r2, [r3, #8]
 8010d30:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <tcp_input+0x290>)
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d38:	3301      	adds	r3, #1
 8010d3a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d029      	beq.n	8010d94 <tcp_input+0x2cc>
      prev = pcb;
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	61bb      	str	r3, [r7, #24]
      continue;
 8010d44:	e06b      	b.n	8010e1e <tcp_input+0x356>
 8010d46:	bf00      	nop
 8010d48:	08019a88 	.word	0x08019a88
 8010d4c:	08019abc 	.word	0x08019abc
 8010d50:	08019ad4 	.word	0x08019ad4
 8010d54:	2000086c 	.word	0x2000086c
 8010d58:	20005bc4 	.word	0x20005bc4
 8010d5c:	20000870 	.word	0x20000870
 8010d60:	20000874 	.word	0x20000874
 8010d64:	20000872 	.word	0x20000872
 8010d68:	08019afc 	.word	0x08019afc
 8010d6c:	08019b0c 	.word	0x08019b0c
 8010d70:	08019b18 	.word	0x08019b18
 8010d74:	2000087c 	.word	0x2000087c
 8010d78:	20000880 	.word	0x20000880
 8010d7c:	20000888 	.word	0x20000888
 8010d80:	20000886 	.word	0x20000886
 8010d84:	2000b6a8 	.word	0x2000b6a8
 8010d88:	08019b38 	.word	0x08019b38
 8010d8c:	08019b60 	.word	0x08019b60
 8010d90:	08019b8c 	.word	0x08019b8c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	8b1a      	ldrh	r2, [r3, #24]
 8010d98:	4b94      	ldr	r3, [pc, #592]	; (8010fec <tcp_input+0x524>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	881b      	ldrh	r3, [r3, #0]
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d13a      	bne.n	8010e1a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	8ada      	ldrh	r2, [r3, #22]
 8010da8:	4b90      	ldr	r3, [pc, #576]	; (8010fec <tcp_input+0x524>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	885b      	ldrh	r3, [r3, #2]
 8010dae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d132      	bne.n	8010e1a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	685a      	ldr	r2, [r3, #4]
 8010db8:	4b8d      	ldr	r3, [pc, #564]	; (8010ff0 <tcp_input+0x528>)
 8010dba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d12c      	bne.n	8010e1a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	4b8a      	ldr	r3, [pc, #552]	; (8010ff0 <tcp_input+0x528>)
 8010dc6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d126      	bne.n	8010e1a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	68da      	ldr	r2, [r3, #12]
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d106      	bne.n	8010de4 <tcp_input+0x31c>
 8010dd6:	4b87      	ldr	r3, [pc, #540]	; (8010ff4 <tcp_input+0x52c>)
 8010dd8:	f240 120d 	movw	r2, #269	; 0x10d
 8010ddc:	4986      	ldr	r1, [pc, #536]	; (8010ff8 <tcp_input+0x530>)
 8010dde:	4887      	ldr	r0, [pc, #540]	; (8010ffc <tcp_input+0x534>)
 8010de0:	f005 f85a 	bl	8015e98 <iprintf>
      if (prev != NULL) {
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00a      	beq.n	8010e00 <tcp_input+0x338>
        prev->next = pcb->next;
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	68da      	ldr	r2, [r3, #12]
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010df2:	4b83      	ldr	r3, [pc, #524]	; (8011000 <tcp_input+0x538>)
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010dfa:	4a81      	ldr	r2, [pc, #516]	; (8011000 <tcp_input+0x538>)
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	68da      	ldr	r2, [r3, #12]
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d111      	bne.n	8010e2e <tcp_input+0x366>
 8010e0a:	4b7a      	ldr	r3, [pc, #488]	; (8010ff4 <tcp_input+0x52c>)
 8010e0c:	f240 1215 	movw	r2, #277	; 0x115
 8010e10:	497c      	ldr	r1, [pc, #496]	; (8011004 <tcp_input+0x53c>)
 8010e12:	487a      	ldr	r0, [pc, #488]	; (8010ffc <tcp_input+0x534>)
 8010e14:	f005 f840 	bl	8015e98 <iprintf>
      break;
 8010e18:	e009      	b.n	8010e2e <tcp_input+0x366>
    }
    prev = pcb;
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	61fb      	str	r3, [r7, #28]
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	f47f af5e 	bne.w	8010ce8 <tcp_input+0x220>
 8010e2c:	e000      	b.n	8010e30 <tcp_input+0x368>
      break;
 8010e2e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f040 8095 	bne.w	8010f62 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e38:	4b73      	ldr	r3, [pc, #460]	; (8011008 <tcp_input+0x540>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	61fb      	str	r3, [r7, #28]
 8010e3e:	e03f      	b.n	8010ec0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	7d1b      	ldrb	r3, [r3, #20]
 8010e44:	2b0a      	cmp	r3, #10
 8010e46:	d006      	beq.n	8010e56 <tcp_input+0x38e>
 8010e48:	4b6a      	ldr	r3, [pc, #424]	; (8010ff4 <tcp_input+0x52c>)
 8010e4a:	f240 121f 	movw	r2, #287	; 0x11f
 8010e4e:	496f      	ldr	r1, [pc, #444]	; (801100c <tcp_input+0x544>)
 8010e50:	486a      	ldr	r0, [pc, #424]	; (8010ffc <tcp_input+0x534>)
 8010e52:	f005 f821 	bl	8015e98 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	7a1b      	ldrb	r3, [r3, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d009      	beq.n	8010e72 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	7a1a      	ldrb	r2, [r3, #8]
 8010e62:	4b63      	ldr	r3, [pc, #396]	; (8010ff0 <tcp_input+0x528>)
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d122      	bne.n	8010eb8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	8b1a      	ldrh	r2, [r3, #24]
 8010e76:	4b5d      	ldr	r3, [pc, #372]	; (8010fec <tcp_input+0x524>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d11b      	bne.n	8010eba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	8ada      	ldrh	r2, [r3, #22]
 8010e86:	4b59      	ldr	r3, [pc, #356]	; (8010fec <tcp_input+0x524>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	885b      	ldrh	r3, [r3, #2]
 8010e8c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d113      	bne.n	8010eba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	4b56      	ldr	r3, [pc, #344]	; (8010ff0 <tcp_input+0x528>)
 8010e98:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d10d      	bne.n	8010eba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	681a      	ldr	r2, [r3, #0]
 8010ea2:	4b53      	ldr	r3, [pc, #332]	; (8010ff0 <tcp_input+0x528>)
 8010ea4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d107      	bne.n	8010eba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010eaa:	69f8      	ldr	r0, [r7, #28]
 8010eac:	f000 fb4e 	bl	801154c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7fd fb07 	bl	800e4c4 <pbuf_free>
        return;
 8010eb6:	e1ea      	b.n	801128e <tcp_input+0x7c6>
        continue;
 8010eb8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	61fb      	str	r3, [r7, #28]
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d1bc      	bne.n	8010e40 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010eca:	4b51      	ldr	r3, [pc, #324]	; (8011010 <tcp_input+0x548>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	617b      	str	r3, [r7, #20]
 8010ed0:	e02a      	b.n	8010f28 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	7a1b      	ldrb	r3, [r3, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d00c      	beq.n	8010ef4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	7a1a      	ldrb	r2, [r3, #8]
 8010ede:	4b44      	ldr	r3, [pc, #272]	; (8010ff0 <tcp_input+0x528>)
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d002      	beq.n	8010ef4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	61bb      	str	r3, [r7, #24]
        continue;
 8010ef2:	e016      	b.n	8010f22 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	8ada      	ldrh	r2, [r3, #22]
 8010ef8:	4b3c      	ldr	r3, [pc, #240]	; (8010fec <tcp_input+0x524>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	885b      	ldrh	r3, [r3, #2]
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d10c      	bne.n	8010f1e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	4b39      	ldr	r3, [pc, #228]	; (8010ff0 <tcp_input+0x528>)
 8010f0a:	695b      	ldr	r3, [r3, #20]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d00f      	beq.n	8010f30 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00d      	beq.n	8010f32 <tcp_input+0x46a>
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d009      	beq.n	8010f32 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	617b      	str	r3, [r7, #20]
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1d1      	bne.n	8010ed2 <tcp_input+0x40a>
 8010f2e:	e000      	b.n	8010f32 <tcp_input+0x46a>
            break;
 8010f30:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d014      	beq.n	8010f62 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00a      	beq.n	8010f54 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	68da      	ldr	r2, [r3, #12]
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010f46:	4b32      	ldr	r3, [pc, #200]	; (8011010 <tcp_input+0x548>)
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010f4e:	4a30      	ldr	r2, [pc, #192]	; (8011010 <tcp_input+0x548>)
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010f54:	6978      	ldr	r0, [r7, #20]
 8010f56:	f000 f9fb 	bl	8011350 <tcp_listen_input>
      }
      pbuf_free(p);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f7fd fab2 	bl	800e4c4 <pbuf_free>
      return;
 8010f60:	e195      	b.n	801128e <tcp_input+0x7c6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f000 815e 	beq.w	8011226 <tcp_input+0x75e>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010f6a:	4b2a      	ldr	r3, [pc, #168]	; (8011014 <tcp_input+0x54c>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	891a      	ldrh	r2, [r3, #8]
 8010f74:	4b27      	ldr	r3, [pc, #156]	; (8011014 <tcp_input+0x54c>)
 8010f76:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010f78:	4a26      	ldr	r2, [pc, #152]	; (8011014 <tcp_input+0x54c>)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010f7e:	4b1b      	ldr	r3, [pc, #108]	; (8010fec <tcp_input+0x524>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a24      	ldr	r2, [pc, #144]	; (8011014 <tcp_input+0x54c>)
 8010f84:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010f86:	4b24      	ldr	r3, [pc, #144]	; (8011018 <tcp_input+0x550>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010f8c:	4b23      	ldr	r3, [pc, #140]	; (801101c <tcp_input+0x554>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010f92:	4b23      	ldr	r3, [pc, #140]	; (8011020 <tcp_input+0x558>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010f98:	4b22      	ldr	r3, [pc, #136]	; (8011024 <tcp_input+0x55c>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f003 0308 	and.w	r3, r3, #8
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d006      	beq.n	8010fb2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	7b5b      	ldrb	r3, [r3, #13]
 8010fa8:	f043 0301 	orr.w	r3, r3, #1
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d038      	beq.n	801102c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010fba:	69f8      	ldr	r0, [r7, #28]
 8010fbc:	f7ff f882 	bl	80100c4 <tcp_process_refused_data>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	f113 0f0d 	cmn.w	r3, #13
 8010fc6:	d007      	beq.n	8010fd8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d02d      	beq.n	801102c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010fd0:	4b15      	ldr	r3, [pc, #84]	; (8011028 <tcp_input+0x560>)
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d029      	beq.n	801102c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f040 8104 	bne.w	80111ea <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010fe2:	69f8      	ldr	r0, [r7, #28]
 8010fe4:	f003 fe34 	bl	8014c50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010fe8:	e0ff      	b.n	80111ea <tcp_input+0x722>
 8010fea:	bf00      	nop
 8010fec:	2000086c 	.word	0x2000086c
 8010ff0:	20005bc4 	.word	0x20005bc4
 8010ff4:	08019a88 	.word	0x08019a88
 8010ff8:	08019bb4 	.word	0x08019bb4
 8010ffc:	08019ad4 	.word	0x08019ad4
 8011000:	2000b6a8 	.word	0x2000b6a8
 8011004:	08019be0 	.word	0x08019be0
 8011008:	2000b6b8 	.word	0x2000b6b8
 801100c:	08019c0c 	.word	0x08019c0c
 8011010:	2000b6b0 	.word	0x2000b6b0
 8011014:	2000085c 	.word	0x2000085c
 8011018:	2000088c 	.word	0x2000088c
 801101c:	20000889 	.word	0x20000889
 8011020:	20000884 	.word	0x20000884
 8011024:	20000888 	.word	0x20000888
 8011028:	20000886 	.word	0x20000886
      }
    }
    tcp_input_pcb = pcb;
 801102c:	4a99      	ldr	r2, [pc, #612]	; (8011294 <tcp_input+0x7cc>)
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011032:	69f8      	ldr	r0, [r7, #28]
 8011034:	f000 fb06 	bl	8011644 <tcp_process>
 8011038:	4603      	mov	r3, r0
 801103a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801103c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011040:	f113 0f0d 	cmn.w	r3, #13
 8011044:	f000 80dc 	beq.w	8011200 <tcp_input+0x738>
      if (recv_flags & TF_RESET) {
 8011048:	4b93      	ldr	r3, [pc, #588]	; (8011298 <tcp_input+0x7d0>)
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	f003 0308 	and.w	r3, r3, #8
 8011050:	2b00      	cmp	r3, #0
 8011052:	d015      	beq.n	8011080 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801105a:	2b00      	cmp	r3, #0
 801105c:	d008      	beq.n	8011070 <tcp_input+0x5a8>
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011064:	69fa      	ldr	r2, [r7, #28]
 8011066:	6912      	ldr	r2, [r2, #16]
 8011068:	f06f 010d 	mvn.w	r1, #13
 801106c:	4610      	mov	r0, r2
 801106e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011070:	69f9      	ldr	r1, [r7, #28]
 8011072:	488a      	ldr	r0, [pc, #552]	; (801129c <tcp_input+0x7d4>)
 8011074:	f7ff fbb0 	bl	80107d8 <tcp_pcb_remove>
        tcp_free(pcb);
 8011078:	69f8      	ldr	r0, [r7, #28]
 801107a:	f7fd fef3 	bl	800ee64 <tcp_free>
 801107e:	e0bf      	b.n	8011200 <tcp_input+0x738>
      } else {
        err = ERR_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011084:	4b86      	ldr	r3, [pc, #536]	; (80112a0 <tcp_input+0x7d8>)
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d01d      	beq.n	80110c8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801108c:	4b84      	ldr	r3, [pc, #528]	; (80112a0 <tcp_input+0x7d8>)
 801108e:	881b      	ldrh	r3, [r3, #0]
 8011090:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00a      	beq.n	80110b2 <tcp_input+0x5ea>
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110a2:	69fa      	ldr	r2, [r7, #28]
 80110a4:	6910      	ldr	r0, [r2, #16]
 80110a6:	89fa      	ldrh	r2, [r7, #14]
 80110a8:	69f9      	ldr	r1, [r7, #28]
 80110aa:	4798      	blx	r3
 80110ac:	4603      	mov	r3, r0
 80110ae:	74fb      	strb	r3, [r7, #19]
 80110b0:	e001      	b.n	80110b6 <tcp_input+0x5ee>
 80110b2:	2300      	movs	r3, #0
 80110b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80110b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110ba:	f113 0f0d 	cmn.w	r3, #13
 80110be:	f000 8096 	beq.w	80111ee <tcp_input+0x726>
              goto aborted;
            }
          }
          recv_acked = 0;
 80110c2:	4b77      	ldr	r3, [pc, #476]	; (80112a0 <tcp_input+0x7d8>)
 80110c4:	2200      	movs	r2, #0
 80110c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80110c8:	69f8      	ldr	r0, [r7, #28]
 80110ca:	f000 f901 	bl	80112d0 <tcp_input_delayed_close>
 80110ce:	4603      	mov	r3, r0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f040 808e 	bne.w	80111f2 <tcp_input+0x72a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80110d6:	4b73      	ldr	r3, [pc, #460]	; (80112a4 <tcp_input+0x7dc>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d041      	beq.n	8011162 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <tcp_input+0x62c>
 80110e6:	4b70      	ldr	r3, [pc, #448]	; (80112a8 <tcp_input+0x7e0>)
 80110e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80110ec:	496f      	ldr	r1, [pc, #444]	; (80112ac <tcp_input+0x7e4>)
 80110ee:	4870      	ldr	r0, [pc, #448]	; (80112b0 <tcp_input+0x7e8>)
 80110f0:	f004 fed2 	bl	8015e98 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	8b5b      	ldrh	r3, [r3, #26]
 80110f8:	f003 0310 	and.w	r3, r3, #16
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d008      	beq.n	8011112 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011100:	4b68      	ldr	r3, [pc, #416]	; (80112a4 <tcp_input+0x7dc>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4618      	mov	r0, r3
 8011106:	f7fd f9dd 	bl	800e4c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801110a:	69f8      	ldr	r0, [r7, #28]
 801110c:	f7fe f98a 	bl	800f424 <tcp_abort>
            goto aborted;
 8011110:	e076      	b.n	8011200 <tcp_input+0x738>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011118:	2b00      	cmp	r3, #0
 801111a:	d00c      	beq.n	8011136 <tcp_input+0x66e>
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	6918      	ldr	r0, [r3, #16]
 8011126:	4b5f      	ldr	r3, [pc, #380]	; (80112a4 <tcp_input+0x7dc>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	2300      	movs	r3, #0
 801112c:	69f9      	ldr	r1, [r7, #28]
 801112e:	47a0      	blx	r4
 8011130:	4603      	mov	r3, r0
 8011132:	74fb      	strb	r3, [r7, #19]
 8011134:	e008      	b.n	8011148 <tcp_input+0x680>
 8011136:	4b5b      	ldr	r3, [pc, #364]	; (80112a4 <tcp_input+0x7dc>)
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	2300      	movs	r3, #0
 801113c:	69f9      	ldr	r1, [r7, #28]
 801113e:	2000      	movs	r0, #0
 8011140:	f7ff f894 	bl	801026c <tcp_recv_null>
 8011144:	4603      	mov	r3, r0
 8011146:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011148:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801114c:	f113 0f0d 	cmn.w	r3, #13
 8011150:	d051      	beq.n	80111f6 <tcp_input+0x72e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011152:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d003      	beq.n	8011162 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801115a:	4b52      	ldr	r3, [pc, #328]	; (80112a4 <tcp_input+0x7dc>)
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011162:	4b4d      	ldr	r3, [pc, #308]	; (8011298 <tcp_input+0x7d0>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f003 0320 	and.w	r3, r3, #32
 801116a:	2b00      	cmp	r3, #0
 801116c:	d030      	beq.n	80111d0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011172:	2b00      	cmp	r3, #0
 8011174:	d009      	beq.n	801118a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801117a:	69fa      	ldr	r2, [r7, #28]
 801117c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801117e:	7b52      	ldrb	r2, [r2, #13]
 8011180:	f042 0220 	orr.w	r2, r2, #32
 8011184:	b2d2      	uxtb	r2, r2
 8011186:	735a      	strb	r2, [r3, #13]
 8011188:	e022      	b.n	80111d0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801118e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011192:	d005      	beq.n	80111a0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011198:	3301      	adds	r3, #1
 801119a:	b29a      	uxth	r2, r3
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00b      	beq.n	80111c2 <tcp_input+0x6fa>
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	6918      	ldr	r0, [r3, #16]
 80111b4:	2300      	movs	r3, #0
 80111b6:	2200      	movs	r2, #0
 80111b8:	69f9      	ldr	r1, [r7, #28]
 80111ba:	47a0      	blx	r4
 80111bc:	4603      	mov	r3, r0
 80111be:	74fb      	strb	r3, [r7, #19]
 80111c0:	e001      	b.n	80111c6 <tcp_input+0x6fe>
 80111c2:	2300      	movs	r3, #0
 80111c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80111c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111ca:	f113 0f0d 	cmn.w	r3, #13
 80111ce:	d014      	beq.n	80111fa <tcp_input+0x732>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80111d0:	4b30      	ldr	r3, [pc, #192]	; (8011294 <tcp_input+0x7cc>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80111d6:	69f8      	ldr	r0, [r7, #28]
 80111d8:	f000 f87a 	bl	80112d0 <tcp_input_delayed_close>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10d      	bne.n	80111fe <tcp_input+0x736>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80111e2:	69f8      	ldr	r0, [r7, #28]
 80111e4:	f002 ff16 	bl	8014014 <tcp_output>
 80111e8:	e00a      	b.n	8011200 <tcp_input+0x738>
        goto aborted;
 80111ea:	bf00      	nop
 80111ec:	e008      	b.n	8011200 <tcp_input+0x738>
              goto aborted;
 80111ee:	bf00      	nop
 80111f0:	e006      	b.n	8011200 <tcp_input+0x738>
          goto aborted;
 80111f2:	bf00      	nop
 80111f4:	e004      	b.n	8011200 <tcp_input+0x738>
            goto aborted;
 80111f6:	bf00      	nop
 80111f8:	e002      	b.n	8011200 <tcp_input+0x738>
              goto aborted;
 80111fa:	bf00      	nop
 80111fc:	e000      	b.n	8011200 <tcp_input+0x738>
          goto aborted;
 80111fe:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8011200:	4b24      	ldr	r3, [pc, #144]	; (8011294 <tcp_input+0x7cc>)
 8011202:	2200      	movs	r2, #0
 8011204:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011206:	4b27      	ldr	r3, [pc, #156]	; (80112a4 <tcp_input+0x7dc>)
 8011208:	2200      	movs	r2, #0
 801120a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801120c:	4b29      	ldr	r3, [pc, #164]	; (80112b4 <tcp_input+0x7ec>)
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d03b      	beq.n	801128c <tcp_input+0x7c4>
      pbuf_free(inseg.p);
 8011214:	4b27      	ldr	r3, [pc, #156]	; (80112b4 <tcp_input+0x7ec>)
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	4618      	mov	r0, r3
 801121a:	f7fd f953 	bl	800e4c4 <pbuf_free>
      inseg.p = NULL;
 801121e:	4b25      	ldr	r3, [pc, #148]	; (80112b4 <tcp_input+0x7ec>)
 8011220:	2200      	movs	r2, #0
 8011222:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011224:	e032      	b.n	801128c <tcp_input+0x7c4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011226:	4b24      	ldr	r3, [pc, #144]	; (80112b8 <tcp_input+0x7f0>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	899b      	ldrh	r3, [r3, #12]
 801122c:	b29b      	uxth	r3, r3
 801122e:	4618      	mov	r0, r3
 8011230:	f7f8 fab8 	bl	80097a4 <lwip_htons>
 8011234:	4603      	mov	r3, r0
 8011236:	b2db      	uxtb	r3, r3
 8011238:	f003 0304 	and.w	r3, r3, #4
 801123c:	2b00      	cmp	r3, #0
 801123e:	d118      	bne.n	8011272 <tcp_input+0x7aa>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011240:	4b1e      	ldr	r3, [pc, #120]	; (80112bc <tcp_input+0x7f4>)
 8011242:	6819      	ldr	r1, [r3, #0]
 8011244:	4b1e      	ldr	r3, [pc, #120]	; (80112c0 <tcp_input+0x7f8>)
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	461a      	mov	r2, r3
 801124a:	4b1e      	ldr	r3, [pc, #120]	; (80112c4 <tcp_input+0x7fc>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011250:	4b19      	ldr	r3, [pc, #100]	; (80112b8 <tcp_input+0x7f0>)
 8011252:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011254:	885b      	ldrh	r3, [r3, #2]
 8011256:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011258:	4a17      	ldr	r2, [pc, #92]	; (80112b8 <tcp_input+0x7f0>)
 801125a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801125c:	8812      	ldrh	r2, [r2, #0]
 801125e:	b292      	uxth	r2, r2
 8011260:	9202      	str	r2, [sp, #8]
 8011262:	9301      	str	r3, [sp, #4]
 8011264:	4b18      	ldr	r3, [pc, #96]	; (80112c8 <tcp_input+0x800>)
 8011266:	9300      	str	r3, [sp, #0]
 8011268:	4b18      	ldr	r3, [pc, #96]	; (80112cc <tcp_input+0x804>)
 801126a:	4602      	mov	r2, r0
 801126c:	2000      	movs	r0, #0
 801126e:	f003 fc9d 	bl	8014bac <tcp_rst>
    pbuf_free(p);
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f7fd f926 	bl	800e4c4 <pbuf_free>
  return;
 8011278:	e008      	b.n	801128c <tcp_input+0x7c4>
    goto dropped;
 801127a:	bf00      	nop
 801127c:	e002      	b.n	8011284 <tcp_input+0x7bc>
      goto dropped;
 801127e:	bf00      	nop
 8011280:	e000      	b.n	8011284 <tcp_input+0x7bc>
      goto dropped;
 8011282:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7fd f91d 	bl	800e4c4 <pbuf_free>
 801128a:	e000      	b.n	801128e <tcp_input+0x7c6>
  return;
 801128c:	bf00      	nop
}
 801128e:	3724      	adds	r7, #36	; 0x24
 8011290:	46bd      	mov	sp, r7
 8011292:	bd90      	pop	{r4, r7, pc}
 8011294:	2000b6bc 	.word	0x2000b6bc
 8011298:	20000889 	.word	0x20000889
 801129c:	2000b6a8 	.word	0x2000b6a8
 80112a0:	20000884 	.word	0x20000884
 80112a4:	2000088c 	.word	0x2000088c
 80112a8:	08019a88 	.word	0x08019a88
 80112ac:	08019c3c 	.word	0x08019c3c
 80112b0:	08019ad4 	.word	0x08019ad4
 80112b4:	2000085c 	.word	0x2000085c
 80112b8:	2000086c 	.word	0x2000086c
 80112bc:	20000880 	.word	0x20000880
 80112c0:	20000886 	.word	0x20000886
 80112c4:	2000087c 	.word	0x2000087c
 80112c8:	20005bd4 	.word	0x20005bd4
 80112cc:	20005bd8 	.word	0x20005bd8

080112d0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <tcp_input_delayed_close+0x1c>
 80112de:	4b17      	ldr	r3, [pc, #92]	; (801133c <tcp_input_delayed_close+0x6c>)
 80112e0:	f240 225a 	movw	r2, #602	; 0x25a
 80112e4:	4916      	ldr	r1, [pc, #88]	; (8011340 <tcp_input_delayed_close+0x70>)
 80112e6:	4817      	ldr	r0, [pc, #92]	; (8011344 <tcp_input_delayed_close+0x74>)
 80112e8:	f004 fdd6 	bl	8015e98 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80112ec:	4b16      	ldr	r3, [pc, #88]	; (8011348 <tcp_input_delayed_close+0x78>)
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	f003 0310 	and.w	r3, r3, #16
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d01c      	beq.n	8011332 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	8b5b      	ldrh	r3, [r3, #26]
 80112fc:	f003 0310 	and.w	r3, r3, #16
 8011300:	2b00      	cmp	r3, #0
 8011302:	d10d      	bne.n	8011320 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801130a:	2b00      	cmp	r3, #0
 801130c:	d008      	beq.n	8011320 <tcp_input_delayed_close+0x50>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	6912      	ldr	r2, [r2, #16]
 8011318:	f06f 010e 	mvn.w	r1, #14
 801131c:	4610      	mov	r0, r2
 801131e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011320:	6879      	ldr	r1, [r7, #4]
 8011322:	480a      	ldr	r0, [pc, #40]	; (801134c <tcp_input_delayed_close+0x7c>)
 8011324:	f7ff fa58 	bl	80107d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7fd fd9b 	bl	800ee64 <tcp_free>
    return 1;
 801132e:	2301      	movs	r3, #1
 8011330:	e000      	b.n	8011334 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}
 801133c:	08019a88 	.word	0x08019a88
 8011340:	08019c58 	.word	0x08019c58
 8011344:	08019ad4 	.word	0x08019ad4
 8011348:	20000889 	.word	0x20000889
 801134c:	2000b6a8 	.word	0x2000b6a8

08011350 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011350:	b590      	push	{r4, r7, lr}
 8011352:	b08b      	sub	sp, #44	; 0x2c
 8011354:	af04      	add	r7, sp, #16
 8011356:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011358:	4b6f      	ldr	r3, [pc, #444]	; (8011518 <tcp_listen_input+0x1c8>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	f003 0304 	and.w	r3, r3, #4
 8011360:	2b00      	cmp	r3, #0
 8011362:	f040 80d3 	bne.w	801150c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d106      	bne.n	801137a <tcp_listen_input+0x2a>
 801136c:	4b6b      	ldr	r3, [pc, #428]	; (801151c <tcp_listen_input+0x1cc>)
 801136e:	f240 2281 	movw	r2, #641	; 0x281
 8011372:	496b      	ldr	r1, [pc, #428]	; (8011520 <tcp_listen_input+0x1d0>)
 8011374:	486b      	ldr	r0, [pc, #428]	; (8011524 <tcp_listen_input+0x1d4>)
 8011376:	f004 fd8f 	bl	8015e98 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801137a:	4b67      	ldr	r3, [pc, #412]	; (8011518 <tcp_listen_input+0x1c8>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	f003 0310 	and.w	r3, r3, #16
 8011382:	2b00      	cmp	r3, #0
 8011384:	d019      	beq.n	80113ba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011386:	4b68      	ldr	r3, [pc, #416]	; (8011528 <tcp_listen_input+0x1d8>)
 8011388:	6819      	ldr	r1, [r3, #0]
 801138a:	4b68      	ldr	r3, [pc, #416]	; (801152c <tcp_listen_input+0x1dc>)
 801138c:	881b      	ldrh	r3, [r3, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	4b67      	ldr	r3, [pc, #412]	; (8011530 <tcp_listen_input+0x1e0>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011396:	4b67      	ldr	r3, [pc, #412]	; (8011534 <tcp_listen_input+0x1e4>)
 8011398:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801139a:	885b      	ldrh	r3, [r3, #2]
 801139c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801139e:	4a65      	ldr	r2, [pc, #404]	; (8011534 <tcp_listen_input+0x1e4>)
 80113a0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113a2:	8812      	ldrh	r2, [r2, #0]
 80113a4:	b292      	uxth	r2, r2
 80113a6:	9202      	str	r2, [sp, #8]
 80113a8:	9301      	str	r3, [sp, #4]
 80113aa:	4b63      	ldr	r3, [pc, #396]	; (8011538 <tcp_listen_input+0x1e8>)
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	4b63      	ldr	r3, [pc, #396]	; (801153c <tcp_listen_input+0x1ec>)
 80113b0:	4602      	mov	r2, r0
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f003 fbfa 	bl	8014bac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80113b8:	e0aa      	b.n	8011510 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80113ba:	4b57      	ldr	r3, [pc, #348]	; (8011518 <tcp_listen_input+0x1c8>)
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	f003 0302 	and.w	r3, r3, #2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f000 80a4 	beq.w	8011510 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	7d5b      	ldrb	r3, [r3, #21]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff f871 	bl	80104b4 <tcp_alloc>
 80113d2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d111      	bne.n	80113fe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	699b      	ldr	r3, [r3, #24]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00a      	beq.n	80113f8 <tcp_listen_input+0xa8>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	699b      	ldr	r3, [r3, #24]
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	6910      	ldr	r0, [r2, #16]
 80113ea:	f04f 32ff 	mov.w	r2, #4294967295
 80113ee:	2100      	movs	r1, #0
 80113f0:	4798      	blx	r3
 80113f2:	4603      	mov	r3, r0
 80113f4:	74fb      	strb	r3, [r7, #19]
      return;
 80113f6:	e08c      	b.n	8011512 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113f8:	23f0      	movs	r3, #240	; 0xf0
 80113fa:	74fb      	strb	r3, [r7, #19]
      return;
 80113fc:	e089      	b.n	8011512 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80113fe:	4b50      	ldr	r3, [pc, #320]	; (8011540 <tcp_listen_input+0x1f0>)
 8011400:	695a      	ldr	r2, [r3, #20]
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011406:	4b4e      	ldr	r3, [pc, #312]	; (8011540 <tcp_listen_input+0x1f0>)
 8011408:	691a      	ldr	r2, [r3, #16]
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	8ada      	ldrh	r2, [r3, #22]
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011416:	4b47      	ldr	r3, [pc, #284]	; (8011534 <tcp_listen_input+0x1e4>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	881b      	ldrh	r3, [r3, #0]
 801141c:	b29a      	uxth	r2, r3
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2203      	movs	r2, #3
 8011426:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011428:	4b41      	ldr	r3, [pc, #260]	; (8011530 <tcp_listen_input+0x1e0>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	1c5a      	adds	r2, r3, #1
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801143a:	6978      	ldr	r0, [r7, #20]
 801143c:	f7ff fa60 	bl	8010900 <tcp_next_iss>
 8011440:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	68fa      	ldr	r2, [r7, #12]
 8011452:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801145a:	4b35      	ldr	r3, [pc, #212]	; (8011530 <tcp_listen_input+0x1e0>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	1e5a      	subs	r2, r3, #1
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	691a      	ldr	r2, [r3, #16]
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	687a      	ldr	r2, [r7, #4]
 8011470:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	7a5b      	ldrb	r3, [r3, #9]
 8011476:	f003 030c 	and.w	r3, r3, #12
 801147a:	b2da      	uxtb	r2, r3
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7a1a      	ldrb	r2, [r3, #8]
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011488:	4b2e      	ldr	r3, [pc, #184]	; (8011544 <tcp_listen_input+0x1f4>)
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	60da      	str	r2, [r3, #12]
 8011490:	4a2c      	ldr	r2, [pc, #176]	; (8011544 <tcp_listen_input+0x1f4>)
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	6013      	str	r3, [r2, #0]
 8011496:	f003 fd4d 	bl	8014f34 <tcp_timer_needed>
 801149a:	4b2b      	ldr	r3, [pc, #172]	; (8011548 <tcp_listen_input+0x1f8>)
 801149c:	2201      	movs	r2, #1
 801149e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80114a0:	6978      	ldr	r0, [r7, #20]
 80114a2:	f001 fd93 	bl	8012fcc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80114a6:	4b23      	ldr	r3, [pc, #140]	; (8011534 <tcp_listen_input+0x1e4>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	89db      	ldrh	r3, [r3, #14]
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	3304      	adds	r3, #4
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fa fa6f 	bl	800b9ac <ip4_route>
 80114ce:	4601      	mov	r1, r0
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	3304      	adds	r3, #4
 80114d4:	461a      	mov	r2, r3
 80114d6:	4620      	mov	r0, r4
 80114d8:	f7ff fa38 	bl	801094c <tcp_eff_send_mss_netif>
 80114dc:	4603      	mov	r3, r0
 80114de:	461a      	mov	r2, r3
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80114e4:	2112      	movs	r1, #18
 80114e6:	6978      	ldr	r0, [r7, #20]
 80114e8:	f002 fca4 	bl	8013e34 <tcp_enqueue_flags>
 80114ec:	4603      	mov	r3, r0
 80114ee:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80114f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d004      	beq.n	8011502 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80114f8:	2100      	movs	r1, #0
 80114fa:	6978      	ldr	r0, [r7, #20]
 80114fc:	f7fd fed4 	bl	800f2a8 <tcp_abandon>
      return;
 8011500:	e007      	b.n	8011512 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8011502:	6978      	ldr	r0, [r7, #20]
 8011504:	f002 fd86 	bl	8014014 <tcp_output>
  return;
 8011508:	bf00      	nop
 801150a:	e001      	b.n	8011510 <tcp_listen_input+0x1c0>
    return;
 801150c:	bf00      	nop
 801150e:	e000      	b.n	8011512 <tcp_listen_input+0x1c2>
  return;
 8011510:	bf00      	nop
}
 8011512:	371c      	adds	r7, #28
 8011514:	46bd      	mov	sp, r7
 8011516:	bd90      	pop	{r4, r7, pc}
 8011518:	20000888 	.word	0x20000888
 801151c:	08019a88 	.word	0x08019a88
 8011520:	08019c80 	.word	0x08019c80
 8011524:	08019ad4 	.word	0x08019ad4
 8011528:	20000880 	.word	0x20000880
 801152c:	20000886 	.word	0x20000886
 8011530:	2000087c 	.word	0x2000087c
 8011534:	2000086c 	.word	0x2000086c
 8011538:	20005bd4 	.word	0x20005bd4
 801153c:	20005bd8 	.word	0x20005bd8
 8011540:	20005bc4 	.word	0x20005bc4
 8011544:	2000b6a8 	.word	0x2000b6a8
 8011548:	2000b6a4 	.word	0x2000b6a4

0801154c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b086      	sub	sp, #24
 8011550:	af04      	add	r7, sp, #16
 8011552:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011554:	4b30      	ldr	r3, [pc, #192]	; (8011618 <tcp_timewait_input+0xcc>)
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	f003 0304 	and.w	r3, r3, #4
 801155c:	2b00      	cmp	r3, #0
 801155e:	d154      	bne.n	801160a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <tcp_timewait_input+0x28>
 8011566:	4b2d      	ldr	r3, [pc, #180]	; (801161c <tcp_timewait_input+0xd0>)
 8011568:	f240 22ee 	movw	r2, #750	; 0x2ee
 801156c:	492c      	ldr	r1, [pc, #176]	; (8011620 <tcp_timewait_input+0xd4>)
 801156e:	482d      	ldr	r0, [pc, #180]	; (8011624 <tcp_timewait_input+0xd8>)
 8011570:	f004 fc92 	bl	8015e98 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011574:	4b28      	ldr	r3, [pc, #160]	; (8011618 <tcp_timewait_input+0xcc>)
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	f003 0302 	and.w	r3, r3, #2
 801157c:	2b00      	cmp	r3, #0
 801157e:	d02a      	beq.n	80115d6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011580:	4b29      	ldr	r3, [pc, #164]	; (8011628 <tcp_timewait_input+0xdc>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	db2d      	blt.n	80115ea <tcp_timewait_input+0x9e>
 801158e:	4b26      	ldr	r3, [pc, #152]	; (8011628 <tcp_timewait_input+0xdc>)
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011596:	6879      	ldr	r1, [r7, #4]
 8011598:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801159a:	440b      	add	r3, r1
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	2b00      	cmp	r3, #0
 80115a0:	dc23      	bgt.n	80115ea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115a2:	4b22      	ldr	r3, [pc, #136]	; (801162c <tcp_timewait_input+0xe0>)
 80115a4:	6819      	ldr	r1, [r3, #0]
 80115a6:	4b22      	ldr	r3, [pc, #136]	; (8011630 <tcp_timewait_input+0xe4>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	4b1e      	ldr	r3, [pc, #120]	; (8011628 <tcp_timewait_input+0xdc>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115b2:	4b20      	ldr	r3, [pc, #128]	; (8011634 <tcp_timewait_input+0xe8>)
 80115b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115b6:	885b      	ldrh	r3, [r3, #2]
 80115b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115ba:	4a1e      	ldr	r2, [pc, #120]	; (8011634 <tcp_timewait_input+0xe8>)
 80115bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115be:	8812      	ldrh	r2, [r2, #0]
 80115c0:	b292      	uxth	r2, r2
 80115c2:	9202      	str	r2, [sp, #8]
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	4b1c      	ldr	r3, [pc, #112]	; (8011638 <tcp_timewait_input+0xec>)
 80115c8:	9300      	str	r3, [sp, #0]
 80115ca:	4b1c      	ldr	r3, [pc, #112]	; (801163c <tcp_timewait_input+0xf0>)
 80115cc:	4602      	mov	r2, r0
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f003 faec 	bl	8014bac <tcp_rst>
      return;
 80115d4:	e01c      	b.n	8011610 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80115d6:	4b10      	ldr	r3, [pc, #64]	; (8011618 <tcp_timewait_input+0xcc>)
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	f003 0301 	and.w	r3, r3, #1
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80115e2:	4b17      	ldr	r3, [pc, #92]	; (8011640 <tcp_timewait_input+0xf4>)
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80115ea:	4b11      	ldr	r3, [pc, #68]	; (8011630 <tcp_timewait_input+0xe4>)
 80115ec:	881b      	ldrh	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00d      	beq.n	801160e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	8b5b      	ldrh	r3, [r3, #26]
 80115f6:	f043 0302 	orr.w	r3, r3, #2
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f002 fd07 	bl	8014014 <tcp_output>
  }
  return;
 8011606:	bf00      	nop
 8011608:	e001      	b.n	801160e <tcp_timewait_input+0xc2>
    return;
 801160a:	bf00      	nop
 801160c:	e000      	b.n	8011610 <tcp_timewait_input+0xc4>
  return;
 801160e:	bf00      	nop
}
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	20000888 	.word	0x20000888
 801161c:	08019a88 	.word	0x08019a88
 8011620:	08019ca0 	.word	0x08019ca0
 8011624:	08019ad4 	.word	0x08019ad4
 8011628:	2000087c 	.word	0x2000087c
 801162c:	20000880 	.word	0x20000880
 8011630:	20000886 	.word	0x20000886
 8011634:	2000086c 	.word	0x2000086c
 8011638:	20005bd4 	.word	0x20005bd4
 801163c:	20005bd8 	.word	0x20005bd8
 8011640:	2000b6ac 	.word	0x2000b6ac

08011644 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011644:	b590      	push	{r4, r7, lr}
 8011646:	b08d      	sub	sp, #52	; 0x34
 8011648:	af04      	add	r7, sp, #16
 801164a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011650:	2300      	movs	r3, #0
 8011652:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_process+0x24>
 801165a:	4ba5      	ldr	r3, [pc, #660]	; (80118f0 <tcp_process+0x2ac>)
 801165c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011660:	49a4      	ldr	r1, [pc, #656]	; (80118f4 <tcp_process+0x2b0>)
 8011662:	48a5      	ldr	r0, [pc, #660]	; (80118f8 <tcp_process+0x2b4>)
 8011664:	f004 fc18 	bl	8015e98 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011668:	4ba4      	ldr	r3, [pc, #656]	; (80118fc <tcp_process+0x2b8>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	f003 0304 	and.w	r3, r3, #4
 8011670:	2b00      	cmp	r3, #0
 8011672:	d04e      	beq.n	8011712 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	7d1b      	ldrb	r3, [r3, #20]
 8011678:	2b02      	cmp	r3, #2
 801167a:	d108      	bne.n	801168e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011680:	4b9f      	ldr	r3, [pc, #636]	; (8011900 <tcp_process+0x2bc>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	429a      	cmp	r2, r3
 8011686:	d123      	bne.n	80116d0 <tcp_process+0x8c>
        acceptable = 1;
 8011688:	2301      	movs	r3, #1
 801168a:	76fb      	strb	r3, [r7, #27]
 801168c:	e020      	b.n	80116d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011692:	4b9c      	ldr	r3, [pc, #624]	; (8011904 <tcp_process+0x2c0>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	429a      	cmp	r2, r3
 8011698:	d102      	bne.n	80116a0 <tcp_process+0x5c>
        acceptable = 1;
 801169a:	2301      	movs	r3, #1
 801169c:	76fb      	strb	r3, [r7, #27]
 801169e:	e017      	b.n	80116d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116a0:	4b98      	ldr	r3, [pc, #608]	; (8011904 <tcp_process+0x2c0>)
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	db10      	blt.n	80116d0 <tcp_process+0x8c>
 80116ae:	4b95      	ldr	r3, [pc, #596]	; (8011904 <tcp_process+0x2c0>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b6:	6879      	ldr	r1, [r7, #4]
 80116b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116ba:	440b      	add	r3, r1
 80116bc:	1ad3      	subs	r3, r2, r3
 80116be:	2b00      	cmp	r3, #0
 80116c0:	dc06      	bgt.n	80116d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	8b5b      	ldrh	r3, [r3, #26]
 80116c6:	f043 0302 	orr.w	r3, r3, #2
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80116d0:	7efb      	ldrb	r3, [r7, #27]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d01b      	beq.n	801170e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	7d1b      	ldrb	r3, [r3, #20]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d106      	bne.n	80116ec <tcp_process+0xa8>
 80116de:	4b84      	ldr	r3, [pc, #528]	; (80118f0 <tcp_process+0x2ac>)
 80116e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80116e4:	4988      	ldr	r1, [pc, #544]	; (8011908 <tcp_process+0x2c4>)
 80116e6:	4884      	ldr	r0, [pc, #528]	; (80118f8 <tcp_process+0x2b4>)
 80116e8:	f004 fbd6 	bl	8015e98 <iprintf>
      recv_flags |= TF_RESET;
 80116ec:	4b87      	ldr	r3, [pc, #540]	; (801190c <tcp_process+0x2c8>)
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	f043 0308 	orr.w	r3, r3, #8
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	4b85      	ldr	r3, [pc, #532]	; (801190c <tcp_process+0x2c8>)
 80116f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	8b5b      	ldrh	r3, [r3, #26]
 80116fe:	f023 0301 	bic.w	r3, r3, #1
 8011702:	b29a      	uxth	r2, r3
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011708:	f06f 030d 	mvn.w	r3, #13
 801170c:	e37a      	b.n	8011e04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801170e:	2300      	movs	r3, #0
 8011710:	e378      	b.n	8011e04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011712:	4b7a      	ldr	r3, [pc, #488]	; (80118fc <tcp_process+0x2b8>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	f003 0302 	and.w	r3, r3, #2
 801171a:	2b00      	cmp	r3, #0
 801171c:	d010      	beq.n	8011740 <tcp_process+0xfc>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	7d1b      	ldrb	r3, [r3, #20]
 8011722:	2b02      	cmp	r3, #2
 8011724:	d00c      	beq.n	8011740 <tcp_process+0xfc>
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	7d1b      	ldrb	r3, [r3, #20]
 801172a:	2b03      	cmp	r3, #3
 801172c:	d008      	beq.n	8011740 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f043 0302 	orr.w	r3, r3, #2
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801173c:	2300      	movs	r3, #0
 801173e:	e361      	b.n	8011e04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8b5b      	ldrh	r3, [r3, #26]
 8011744:	f003 0310 	and.w	r3, r3, #16
 8011748:	2b00      	cmp	r3, #0
 801174a:	d103      	bne.n	8011754 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801174c:	4b70      	ldr	r3, [pc, #448]	; (8011910 <tcp_process+0x2cc>)
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2200      	movs	r2, #0
 8011758:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f001 fc31 	bl	8012fcc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	7d1b      	ldrb	r3, [r3, #20]
 801176e:	3b02      	subs	r3, #2
 8011770:	2b07      	cmp	r3, #7
 8011772:	f200 8337 	bhi.w	8011de4 <tcp_process+0x7a0>
 8011776:	a201      	add	r2, pc, #4	; (adr r2, 801177c <tcp_process+0x138>)
 8011778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801177c:	0801179d 	.word	0x0801179d
 8011780:	080119cd 	.word	0x080119cd
 8011784:	08011b45 	.word	0x08011b45
 8011788:	08011b6f 	.word	0x08011b6f
 801178c:	08011c93 	.word	0x08011c93
 8011790:	08011b45 	.word	0x08011b45
 8011794:	08011d1f 	.word	0x08011d1f
 8011798:	08011daf 	.word	0x08011daf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801179c:	4b57      	ldr	r3, [pc, #348]	; (80118fc <tcp_process+0x2b8>)
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	f003 0310 	and.w	r3, r3, #16
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f000 80e4 	beq.w	8011972 <tcp_process+0x32e>
 80117aa:	4b54      	ldr	r3, [pc, #336]	; (80118fc <tcp_process+0x2b8>)
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	f003 0302 	and.w	r3, r3, #2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	f000 80dd 	beq.w	8011972 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117bc:	1c5a      	adds	r2, r3, #1
 80117be:	4b50      	ldr	r3, [pc, #320]	; (8011900 <tcp_process+0x2bc>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	f040 80d5 	bne.w	8011972 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80117c8:	4b4e      	ldr	r3, [pc, #312]	; (8011904 <tcp_process+0x2c0>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	1c5a      	adds	r2, r3, #1
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80117da:	4b49      	ldr	r3, [pc, #292]	; (8011900 <tcp_process+0x2bc>)
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80117e2:	4b4c      	ldr	r3, [pc, #304]	; (8011914 <tcp_process+0x2d0>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	89db      	ldrh	r3, [r3, #14]
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80117fc:	4b41      	ldr	r3, [pc, #260]	; (8011904 <tcp_process+0x2c0>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	1e5a      	subs	r2, r3, #1
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2204      	movs	r2, #4
 801180a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3304      	adds	r3, #4
 8011814:	4618      	mov	r0, r3
 8011816:	f7fa f8c9 	bl	800b9ac <ip4_route>
 801181a:	4601      	mov	r1, r0
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	3304      	adds	r3, #4
 8011820:	461a      	mov	r2, r3
 8011822:	4620      	mov	r0, r4
 8011824:	f7ff f892 	bl	801094c <tcp_eff_send_mss_netif>
 8011828:	4603      	mov	r3, r0
 801182a:	461a      	mov	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011834:	009a      	lsls	r2, r3, #2
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011840:	428b      	cmp	r3, r1
 8011842:	bf38      	it	cc
 8011844:	460b      	movcc	r3, r1
 8011846:	429a      	cmp	r2, r3
 8011848:	d204      	bcs.n	8011854 <tcp_process+0x210>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	b29b      	uxth	r3, r3
 8011852:	e00d      	b.n	8011870 <tcp_process+0x22c>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011858:	005b      	lsls	r3, r3, #1
 801185a:	f241 121c 	movw	r2, #4380	; 0x111c
 801185e:	4293      	cmp	r3, r2
 8011860:	d904      	bls.n	801186c <tcp_process+0x228>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011866:	005b      	lsls	r3, r3, #1
 8011868:	b29b      	uxth	r3, r3
 801186a:	e001      	b.n	8011870 <tcp_process+0x22c>
 801186c:	f241 131c 	movw	r3, #4380	; 0x111c
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801187c:	2b00      	cmp	r3, #0
 801187e:	d106      	bne.n	801188e <tcp_process+0x24a>
 8011880:	4b1b      	ldr	r3, [pc, #108]	; (80118f0 <tcp_process+0x2ac>)
 8011882:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011886:	4924      	ldr	r1, [pc, #144]	; (8011918 <tcp_process+0x2d4>)
 8011888:	481b      	ldr	r0, [pc, #108]	; (80118f8 <tcp_process+0x2b4>)
 801188a:	f004 fb05 	bl	8015e98 <iprintf>
        --pcb->snd_queuelen;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011894:	3b01      	subs	r3, #1
 8011896:	b29a      	uxth	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d111      	bne.n	80118ce <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <tcp_process+0x280>
 80118b6:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <tcp_process+0x2ac>)
 80118b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80118bc:	4917      	ldr	r1, [pc, #92]	; (801191c <tcp_process+0x2d8>)
 80118be:	480e      	ldr	r0, [pc, #56]	; (80118f8 <tcp_process+0x2b4>)
 80118c0:	f004 faea 	bl	8015e98 <iprintf>
          pcb->unsent = rseg->next;
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80118cc:	e003      	b.n	80118d6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80118d6:	69f8      	ldr	r0, [r7, #28]
 80118d8:	f7fe fc84 	bl	80101e4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d11d      	bne.n	8011920 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118ea:	861a      	strh	r2, [r3, #48]	; 0x30
 80118ec:	e01f      	b.n	801192e <tcp_process+0x2ea>
 80118ee:	bf00      	nop
 80118f0:	08019a88 	.word	0x08019a88
 80118f4:	08019cc0 	.word	0x08019cc0
 80118f8:	08019ad4 	.word	0x08019ad4
 80118fc:	20000888 	.word	0x20000888
 8011900:	20000880 	.word	0x20000880
 8011904:	2000087c 	.word	0x2000087c
 8011908:	08019cdc 	.word	0x08019cdc
 801190c:	20000889 	.word	0x20000889
 8011910:	2000b6ac 	.word	0x2000b6ac
 8011914:	2000086c 	.word	0x2000086c
 8011918:	08019cfc 	.word	0x08019cfc
 801191c:	08019d14 	.word	0x08019d14
        } else {
          pcb->rtime = 0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011934:	2b00      	cmp	r3, #0
 8011936:	d00a      	beq.n	801194e <tcp_process+0x30a>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	6910      	ldr	r0, [r2, #16]
 8011942:	2200      	movs	r2, #0
 8011944:	6879      	ldr	r1, [r7, #4]
 8011946:	4798      	blx	r3
 8011948:	4603      	mov	r3, r0
 801194a:	76bb      	strb	r3, [r7, #26]
 801194c:	e001      	b.n	8011952 <tcp_process+0x30e>
 801194e:	2300      	movs	r3, #0
 8011950:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011952:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011956:	f113 0f0d 	cmn.w	r3, #13
 801195a:	d102      	bne.n	8011962 <tcp_process+0x31e>
          return ERR_ABRT;
 801195c:	f06f 030c 	mvn.w	r3, #12
 8011960:	e250      	b.n	8011e04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	8b5b      	ldrh	r3, [r3, #26]
 8011966:	f043 0302 	orr.w	r3, r3, #2
 801196a:	b29a      	uxth	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011970:	e23a      	b.n	8011de8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011972:	4b9d      	ldr	r3, [pc, #628]	; (8011be8 <tcp_process+0x5a4>)
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	f003 0310 	and.w	r3, r3, #16
 801197a:	2b00      	cmp	r3, #0
 801197c:	f000 8234 	beq.w	8011de8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011980:	4b9a      	ldr	r3, [pc, #616]	; (8011bec <tcp_process+0x5a8>)
 8011982:	6819      	ldr	r1, [r3, #0]
 8011984:	4b9a      	ldr	r3, [pc, #616]	; (8011bf0 <tcp_process+0x5ac>)
 8011986:	881b      	ldrh	r3, [r3, #0]
 8011988:	461a      	mov	r2, r3
 801198a:	4b9a      	ldr	r3, [pc, #616]	; (8011bf4 <tcp_process+0x5b0>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011990:	4b99      	ldr	r3, [pc, #612]	; (8011bf8 <tcp_process+0x5b4>)
 8011992:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011994:	885b      	ldrh	r3, [r3, #2]
 8011996:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011998:	4a97      	ldr	r2, [pc, #604]	; (8011bf8 <tcp_process+0x5b4>)
 801199a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801199c:	8812      	ldrh	r2, [r2, #0]
 801199e:	b292      	uxth	r2, r2
 80119a0:	9202      	str	r2, [sp, #8]
 80119a2:	9301      	str	r3, [sp, #4]
 80119a4:	4b95      	ldr	r3, [pc, #596]	; (8011bfc <tcp_process+0x5b8>)
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	4b95      	ldr	r3, [pc, #596]	; (8011c00 <tcp_process+0x5bc>)
 80119aa:	4602      	mov	r2, r0
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f003 f8fd 	bl	8014bac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119b8:	2b05      	cmp	r3, #5
 80119ba:	f200 8215 	bhi.w	8011de8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2200      	movs	r2, #0
 80119c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f002 feb7 	bl	8014738 <tcp_rexmit_rto>
      break;
 80119ca:	e20d      	b.n	8011de8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80119cc:	4b86      	ldr	r3, [pc, #536]	; (8011be8 <tcp_process+0x5a4>)
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	f003 0310 	and.w	r3, r3, #16
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	f000 80a1 	beq.w	8011b1c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119da:	4b84      	ldr	r3, [pc, #528]	; (8011bec <tcp_process+0x5a8>)
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119e2:	1ad3      	subs	r3, r2, r3
 80119e4:	3b01      	subs	r3, #1
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	db7e      	blt.n	8011ae8 <tcp_process+0x4a4>
 80119ea:	4b80      	ldr	r3, [pc, #512]	; (8011bec <tcp_process+0x5a8>)
 80119ec:	681a      	ldr	r2, [r3, #0]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119f2:	1ad3      	subs	r3, r2, r3
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	dc77      	bgt.n	8011ae8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2204      	movs	r2, #4
 80119fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d102      	bne.n	8011a0c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011a06:	23fa      	movs	r3, #250	; 0xfa
 8011a08:	76bb      	strb	r3, [r7, #26]
 8011a0a:	e01d      	b.n	8011a48 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a10:	699b      	ldr	r3, [r3, #24]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d106      	bne.n	8011a24 <tcp_process+0x3e0>
 8011a16:	4b7b      	ldr	r3, [pc, #492]	; (8011c04 <tcp_process+0x5c0>)
 8011a18:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011a1c:	497a      	ldr	r1, [pc, #488]	; (8011c08 <tcp_process+0x5c4>)
 8011a1e:	487b      	ldr	r0, [pc, #492]	; (8011c0c <tcp_process+0x5c8>)
 8011a20:	f004 fa3a 	bl	8015e98 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a28:	699b      	ldr	r3, [r3, #24]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00a      	beq.n	8011a44 <tcp_process+0x400>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a32:	699b      	ldr	r3, [r3, #24]
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	6910      	ldr	r0, [r2, #16]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	6879      	ldr	r1, [r7, #4]
 8011a3c:	4798      	blx	r3
 8011a3e:	4603      	mov	r3, r0
 8011a40:	76bb      	strb	r3, [r7, #26]
 8011a42:	e001      	b.n	8011a48 <tcp_process+0x404>
 8011a44:	23f0      	movs	r3, #240	; 0xf0
 8011a46:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011a48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00a      	beq.n	8011a66 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011a50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a54:	f113 0f0d 	cmn.w	r3, #13
 8011a58:	d002      	beq.n	8011a60 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f7fd fce2 	bl	800f424 <tcp_abort>
            }
            return ERR_ABRT;
 8011a60:	f06f 030c 	mvn.w	r3, #12
 8011a64:	e1ce      	b.n	8011e04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 fae0 	bl	801202c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011a6c:	4b68      	ldr	r3, [pc, #416]	; (8011c10 <tcp_process+0x5cc>)
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d005      	beq.n	8011a80 <tcp_process+0x43c>
            recv_acked--;
 8011a74:	4b66      	ldr	r3, [pc, #408]	; (8011c10 <tcp_process+0x5cc>)
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	4b64      	ldr	r3, [pc, #400]	; (8011c10 <tcp_process+0x5cc>)
 8011a7e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a84:	009a      	lsls	r2, r3, #2
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a90:	428b      	cmp	r3, r1
 8011a92:	bf38      	it	cc
 8011a94:	460b      	movcc	r3, r1
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d204      	bcs.n	8011aa4 <tcp_process+0x460>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	e00d      	b.n	8011ac0 <tcp_process+0x47c>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	f241 121c 	movw	r2, #4380	; 0x111c
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d904      	bls.n	8011abc <tcp_process+0x478>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ab6:	005b      	lsls	r3, r3, #1
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	e001      	b.n	8011ac0 <tcp_process+0x47c>
 8011abc:	f241 131c 	movw	r3, #4380	; 0x111c
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011ac6:	4b53      	ldr	r3, [pc, #332]	; (8011c14 <tcp_process+0x5d0>)
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	f003 0320 	and.w	r3, r3, #32
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d037      	beq.n	8011b42 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	8b5b      	ldrh	r3, [r3, #26]
 8011ad6:	f043 0302 	orr.w	r3, r3, #2
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2207      	movs	r2, #7
 8011ae4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011ae6:	e02c      	b.n	8011b42 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ae8:	4b40      	ldr	r3, [pc, #256]	; (8011bec <tcp_process+0x5a8>)
 8011aea:	6819      	ldr	r1, [r3, #0]
 8011aec:	4b40      	ldr	r3, [pc, #256]	; (8011bf0 <tcp_process+0x5ac>)
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	461a      	mov	r2, r3
 8011af2:	4b40      	ldr	r3, [pc, #256]	; (8011bf4 <tcp_process+0x5b0>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011af8:	4b3f      	ldr	r3, [pc, #252]	; (8011bf8 <tcp_process+0x5b4>)
 8011afa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011afc:	885b      	ldrh	r3, [r3, #2]
 8011afe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b00:	4a3d      	ldr	r2, [pc, #244]	; (8011bf8 <tcp_process+0x5b4>)
 8011b02:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b04:	8812      	ldrh	r2, [r2, #0]
 8011b06:	b292      	uxth	r2, r2
 8011b08:	9202      	str	r2, [sp, #8]
 8011b0a:	9301      	str	r3, [sp, #4]
 8011b0c:	4b3b      	ldr	r3, [pc, #236]	; (8011bfc <tcp_process+0x5b8>)
 8011b0e:	9300      	str	r3, [sp, #0]
 8011b10:	4b3b      	ldr	r3, [pc, #236]	; (8011c00 <tcp_process+0x5bc>)
 8011b12:	4602      	mov	r2, r0
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f003 f849 	bl	8014bac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011b1a:	e167      	b.n	8011dec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011b1c:	4b32      	ldr	r3, [pc, #200]	; (8011be8 <tcp_process+0x5a4>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	f003 0302 	and.w	r3, r3, #2
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f000 8161 	beq.w	8011dec <tcp_process+0x7a8>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2e:	1e5a      	subs	r2, r3, #1
 8011b30:	4b30      	ldr	r3, [pc, #192]	; (8011bf4 <tcp_process+0x5b0>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	f040 8159 	bne.w	8011dec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f002 fe1e 	bl	801477c <tcp_rexmit>
      break;
 8011b40:	e154      	b.n	8011dec <tcp_process+0x7a8>
 8011b42:	e153      	b.n	8011dec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 fa71 	bl	801202c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011b4a:	4b32      	ldr	r3, [pc, #200]	; (8011c14 <tcp_process+0x5d0>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	f003 0320 	and.w	r3, r3, #32
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f000 814c 	beq.w	8011df0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	8b5b      	ldrh	r3, [r3, #26]
 8011b5c:	f043 0302 	orr.w	r3, r3, #2
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2207      	movs	r2, #7
 8011b6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b6c:	e140      	b.n	8011df0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 fa5c 	bl	801202c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011b74:	4b27      	ldr	r3, [pc, #156]	; (8011c14 <tcp_process+0x5d0>)
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	f003 0320 	and.w	r3, r3, #32
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d071      	beq.n	8011c64 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b80:	4b19      	ldr	r3, [pc, #100]	; (8011be8 <tcp_process+0x5a4>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	f003 0310 	and.w	r3, r3, #16
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d060      	beq.n	8011c4e <tcp_process+0x60a>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b90:	4b16      	ldr	r3, [pc, #88]	; (8011bec <tcp_process+0x5a8>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d15a      	bne.n	8011c4e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d156      	bne.n	8011c4e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	8b5b      	ldrh	r3, [r3, #26]
 8011ba4:	f043 0302 	orr.w	r3, r3, #2
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f7fe fdc2 	bl	8010738 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011bb4:	4b18      	ldr	r3, [pc, #96]	; (8011c18 <tcp_process+0x5d4>)
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d105      	bne.n	8011bca <tcp_process+0x586>
 8011bbe:	4b16      	ldr	r3, [pc, #88]	; (8011c18 <tcp_process+0x5d4>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	4a14      	ldr	r2, [pc, #80]	; (8011c18 <tcp_process+0x5d4>)
 8011bc6:	6013      	str	r3, [r2, #0]
 8011bc8:	e02e      	b.n	8011c28 <tcp_process+0x5e4>
 8011bca:	4b13      	ldr	r3, [pc, #76]	; (8011c18 <tcp_process+0x5d4>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	617b      	str	r3, [r7, #20]
 8011bd0:	e027      	b.n	8011c22 <tcp_process+0x5de>
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	68da      	ldr	r2, [r3, #12]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d11f      	bne.n	8011c1c <tcp_process+0x5d8>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	68da      	ldr	r2, [r3, #12]
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	60da      	str	r2, [r3, #12]
 8011be4:	e020      	b.n	8011c28 <tcp_process+0x5e4>
 8011be6:	bf00      	nop
 8011be8:	20000888 	.word	0x20000888
 8011bec:	20000880 	.word	0x20000880
 8011bf0:	20000886 	.word	0x20000886
 8011bf4:	2000087c 	.word	0x2000087c
 8011bf8:	2000086c 	.word	0x2000086c
 8011bfc:	20005bd4 	.word	0x20005bd4
 8011c00:	20005bd8 	.word	0x20005bd8
 8011c04:	08019a88 	.word	0x08019a88
 8011c08:	08019d28 	.word	0x08019d28
 8011c0c:	08019ad4 	.word	0x08019ad4
 8011c10:	20000884 	.word	0x20000884
 8011c14:	20000889 	.word	0x20000889
 8011c18:	2000b6a8 	.word	0x2000b6a8
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	617b      	str	r3, [r7, #20]
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d1d4      	bne.n	8011bd2 <tcp_process+0x58e>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	60da      	str	r2, [r3, #12]
 8011c2e:	4b77      	ldr	r3, [pc, #476]	; (8011e0c <tcp_process+0x7c8>)
 8011c30:	2201      	movs	r2, #1
 8011c32:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	220a      	movs	r2, #10
 8011c38:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011c3a:	4b75      	ldr	r3, [pc, #468]	; (8011e10 <tcp_process+0x7cc>)
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	60da      	str	r2, [r3, #12]
 8011c42:	4a73      	ldr	r2, [pc, #460]	; (8011e10 <tcp_process+0x7cc>)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6013      	str	r3, [r2, #0]
 8011c48:	f003 f974 	bl	8014f34 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011c4c:	e0d2      	b.n	8011df4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	8b5b      	ldrh	r3, [r3, #26]
 8011c52:	f043 0302 	orr.w	r3, r3, #2
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2208      	movs	r2, #8
 8011c60:	751a      	strb	r2, [r3, #20]
      break;
 8011c62:	e0c7      	b.n	8011df4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c64:	4b6b      	ldr	r3, [pc, #428]	; (8011e14 <tcp_process+0x7d0>)
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	f003 0310 	and.w	r3, r3, #16
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f000 80c1 	beq.w	8011df4 <tcp_process+0x7b0>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c76:	4b68      	ldr	r3, [pc, #416]	; (8011e18 <tcp_process+0x7d4>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	f040 80ba 	bne.w	8011df4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f040 80b5 	bne.w	8011df4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2206      	movs	r2, #6
 8011c8e:	751a      	strb	r2, [r3, #20]
      break;
 8011c90:	e0b0      	b.n	8011df4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 f9ca 	bl	801202c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c98:	4b60      	ldr	r3, [pc, #384]	; (8011e1c <tcp_process+0x7d8>)
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	f003 0320 	and.w	r3, r3, #32
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f000 80a9 	beq.w	8011df8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	8b5b      	ldrh	r3, [r3, #26]
 8011caa:	f043 0302 	orr.w	r3, r3, #2
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7fe fd3f 	bl	8010738 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011cba:	4b59      	ldr	r3, [pc, #356]	; (8011e20 <tcp_process+0x7dc>)
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d105      	bne.n	8011cd0 <tcp_process+0x68c>
 8011cc4:	4b56      	ldr	r3, [pc, #344]	; (8011e20 <tcp_process+0x7dc>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	4a55      	ldr	r2, [pc, #340]	; (8011e20 <tcp_process+0x7dc>)
 8011ccc:	6013      	str	r3, [r2, #0]
 8011cce:	e013      	b.n	8011cf8 <tcp_process+0x6b4>
 8011cd0:	4b53      	ldr	r3, [pc, #332]	; (8011e20 <tcp_process+0x7dc>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	613b      	str	r3, [r7, #16]
 8011cd6:	e00c      	b.n	8011cf2 <tcp_process+0x6ae>
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	68da      	ldr	r2, [r3, #12]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d104      	bne.n	8011cec <tcp_process+0x6a8>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	68da      	ldr	r2, [r3, #12]
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	60da      	str	r2, [r3, #12]
 8011cea:	e005      	b.n	8011cf8 <tcp_process+0x6b4>
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	613b      	str	r3, [r7, #16]
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1ef      	bne.n	8011cd8 <tcp_process+0x694>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	60da      	str	r2, [r3, #12]
 8011cfe:	4b43      	ldr	r3, [pc, #268]	; (8011e0c <tcp_process+0x7c8>)
 8011d00:	2201      	movs	r2, #1
 8011d02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	220a      	movs	r2, #10
 8011d08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d0a:	4b41      	ldr	r3, [pc, #260]	; (8011e10 <tcp_process+0x7cc>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	60da      	str	r2, [r3, #12]
 8011d12:	4a3f      	ldr	r2, [pc, #252]	; (8011e10 <tcp_process+0x7cc>)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	f003 f90c 	bl	8014f34 <tcp_timer_needed>
      }
      break;
 8011d1c:	e06c      	b.n	8011df8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f984 	bl	801202c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d24:	4b3b      	ldr	r3, [pc, #236]	; (8011e14 <tcp_process+0x7d0>)
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	f003 0310 	and.w	r3, r3, #16
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d065      	beq.n	8011dfc <tcp_process+0x7b8>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d34:	4b38      	ldr	r3, [pc, #224]	; (8011e18 <tcp_process+0x7d4>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d15f      	bne.n	8011dfc <tcp_process+0x7b8>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d15b      	bne.n	8011dfc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7fe fcf7 	bl	8010738 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d4a:	4b35      	ldr	r3, [pc, #212]	; (8011e20 <tcp_process+0x7dc>)
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d105      	bne.n	8011d60 <tcp_process+0x71c>
 8011d54:	4b32      	ldr	r3, [pc, #200]	; (8011e20 <tcp_process+0x7dc>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	4a31      	ldr	r2, [pc, #196]	; (8011e20 <tcp_process+0x7dc>)
 8011d5c:	6013      	str	r3, [r2, #0]
 8011d5e:	e013      	b.n	8011d88 <tcp_process+0x744>
 8011d60:	4b2f      	ldr	r3, [pc, #188]	; (8011e20 <tcp_process+0x7dc>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	60fb      	str	r3, [r7, #12]
 8011d66:	e00c      	b.n	8011d82 <tcp_process+0x73e>
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	68da      	ldr	r2, [r3, #12]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d104      	bne.n	8011d7c <tcp_process+0x738>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	68da      	ldr	r2, [r3, #12]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	60da      	str	r2, [r3, #12]
 8011d7a:	e005      	b.n	8011d88 <tcp_process+0x744>
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	60fb      	str	r3, [r7, #12]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1ef      	bne.n	8011d68 <tcp_process+0x724>
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	60da      	str	r2, [r3, #12]
 8011d8e:	4b1f      	ldr	r3, [pc, #124]	; (8011e0c <tcp_process+0x7c8>)
 8011d90:	2201      	movs	r2, #1
 8011d92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	220a      	movs	r2, #10
 8011d98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d9a:	4b1d      	ldr	r3, [pc, #116]	; (8011e10 <tcp_process+0x7cc>)
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	60da      	str	r2, [r3, #12]
 8011da2:	4a1b      	ldr	r2, [pc, #108]	; (8011e10 <tcp_process+0x7cc>)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6013      	str	r3, [r2, #0]
 8011da8:	f003 f8c4 	bl	8014f34 <tcp_timer_needed>
      }
      break;
 8011dac:	e026      	b.n	8011dfc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f93c 	bl	801202c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011db4:	4b17      	ldr	r3, [pc, #92]	; (8011e14 <tcp_process+0x7d0>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	f003 0310 	and.w	r3, r3, #16
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d01f      	beq.n	8011e00 <tcp_process+0x7bc>
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011dc4:	4b14      	ldr	r3, [pc, #80]	; (8011e18 <tcp_process+0x7d4>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d119      	bne.n	8011e00 <tcp_process+0x7bc>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d115      	bne.n	8011e00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011dd4:	4b11      	ldr	r3, [pc, #68]	; (8011e1c <tcp_process+0x7d8>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	f043 0310 	orr.w	r3, r3, #16
 8011ddc:	b2da      	uxtb	r2, r3
 8011dde:	4b0f      	ldr	r3, [pc, #60]	; (8011e1c <tcp_process+0x7d8>)
 8011de0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011de2:	e00d      	b.n	8011e00 <tcp_process+0x7bc>
    default:
      break;
 8011de4:	bf00      	nop
 8011de6:	e00c      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011de8:	bf00      	nop
 8011dea:	e00a      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011dec:	bf00      	nop
 8011dee:	e008      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011df0:	bf00      	nop
 8011df2:	e006      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011df4:	bf00      	nop
 8011df6:	e004      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011df8:	bf00      	nop
 8011dfa:	e002      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011dfc:	bf00      	nop
 8011dfe:	e000      	b.n	8011e02 <tcp_process+0x7be>
      break;
 8011e00:	bf00      	nop
  }
  return ERR_OK;
 8011e02:	2300      	movs	r3, #0
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3724      	adds	r7, #36	; 0x24
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd90      	pop	{r4, r7, pc}
 8011e0c:	2000b6a4 	.word	0x2000b6a4
 8011e10:	2000b6b8 	.word	0x2000b6b8
 8011e14:	20000888 	.word	0x20000888
 8011e18:	20000880 	.word	0x20000880
 8011e1c:	20000889 	.word	0x20000889
 8011e20:	2000b6a8 	.word	0x2000b6a8

08011e24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011e24:	b5b0      	push	{r4, r5, r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d106      	bne.n	8011e42 <tcp_oos_insert_segment+0x1e>
 8011e34:	4b3b      	ldr	r3, [pc, #236]	; (8011f24 <tcp_oos_insert_segment+0x100>)
 8011e36:	f240 421f 	movw	r2, #1055	; 0x41f
 8011e3a:	493b      	ldr	r1, [pc, #236]	; (8011f28 <tcp_oos_insert_segment+0x104>)
 8011e3c:	483b      	ldr	r0, [pc, #236]	; (8011f2c <tcp_oos_insert_segment+0x108>)
 8011e3e:	f004 f82b 	bl	8015e98 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	899b      	ldrh	r3, [r3, #12]
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f7 fcaa 	bl	80097a4 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	f003 0301 	and.w	r3, r3, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d027      	beq.n	8011eac <tcp_oos_insert_segment+0x88>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011e5c:	6838      	ldr	r0, [r7, #0]
 8011e5e:	f7fe f9ad 	bl	80101bc <tcp_segs_free>
    next = NULL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	603b      	str	r3, [r7, #0]
 8011e66:	e055      	b.n	8011f14 <tcp_oos_insert_segment+0xf0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	899b      	ldrh	r3, [r3, #12]
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7f7 fc97 	bl	80097a4 <lwip_htons>
 8011e76:	4603      	mov	r3, r0
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	f003 0301 	and.w	r3, r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d00c      	beq.n	8011e9c <tcp_oos_insert_segment+0x78>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	68dc      	ldr	r4, [r3, #12]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	899b      	ldrh	r3, [r3, #12]
 8011e8c:	b29d      	uxth	r5, r3
 8011e8e:	2001      	movs	r0, #1
 8011e90:	f7f7 fc88 	bl	80097a4 <lwip_htons>
 8011e94:	4603      	mov	r3, r0
 8011e96:	432b      	orrs	r3, r5
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f7fe f99c 	bl	80101e4 <tcp_seg_free>
    while (next &&
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00e      	beq.n	8011ed0 <tcp_oos_insert_segment+0xac>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	891b      	ldrh	r3, [r3, #8]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	4b1d      	ldr	r3, [pc, #116]	; (8011f30 <tcp_oos_insert_segment+0x10c>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	441a      	add	r2, r3
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	8909      	ldrh	r1, [r1, #8]
 8011ec8:	440b      	add	r3, r1
 8011eca:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dacb      	bge.n	8011e68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d01e      	beq.n	8011f14 <tcp_oos_insert_segment+0xf0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	891b      	ldrh	r3, [r3, #8]
 8011eda:	461a      	mov	r2, r3
 8011edc:	4b14      	ldr	r3, [pc, #80]	; (8011f30 <tcp_oos_insert_segment+0x10c>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	441a      	add	r2, r3
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	68db      	ldr	r3, [r3, #12]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	dd12      	ble.n	8011f14 <tcp_oos_insert_segment+0xf0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	68db      	ldr	r3, [r3, #12]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	b29a      	uxth	r2, r3
 8011ef6:	4b0e      	ldr	r3, [pc, #56]	; (8011f30 <tcp_oos_insert_segment+0x10c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	685a      	ldr	r2, [r3, #4]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	891b      	ldrh	r3, [r3, #8]
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	4610      	mov	r0, r2
 8011f10:	f7fc f91e 	bl	800e150 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	601a      	str	r2, [r3, #0]
}
 8011f1a:	bf00      	nop
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bdb0      	pop	{r4, r5, r7, pc}
 8011f22:	bf00      	nop
 8011f24:	08019a88 	.word	0x08019a88
 8011f28:	08019d48 	.word	0x08019d48
 8011f2c:	08019ad4 	.word	0x08019ad4
 8011f30:	2000087c 	.word	0x2000087c

08011f34 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011f34:	b5b0      	push	{r4, r5, r7, lr}
 8011f36:	b086      	sub	sp, #24
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
 8011f40:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011f42:	e03e      	b.n	8011fc2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fc fb3e 	bl	800e5d4 <pbuf_clen>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f62:	8a7a      	ldrh	r2, [r7, #18]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d906      	bls.n	8011f76 <tcp_free_acked_segments+0x42>
 8011f68:	4b2a      	ldr	r3, [pc, #168]	; (8012014 <tcp_free_acked_segments+0xe0>)
 8011f6a:	f240 4257 	movw	r2, #1111	; 0x457
 8011f6e:	492a      	ldr	r1, [pc, #168]	; (8012018 <tcp_free_acked_segments+0xe4>)
 8011f70:	482a      	ldr	r0, [pc, #168]	; (801201c <tcp_free_acked_segments+0xe8>)
 8011f72:	f003 ff91 	bl	8015e98 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011f7c:	8a7b      	ldrh	r3, [r7, #18]
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	891a      	ldrh	r2, [r3, #8]
 8011f8c:	4b24      	ldr	r3, [pc, #144]	; (8012020 <tcp_free_acked_segments+0xec>)
 8011f8e:	881b      	ldrh	r3, [r3, #0]
 8011f90:	4413      	add	r3, r2
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	4b22      	ldr	r3, [pc, #136]	; (8012020 <tcp_free_acked_segments+0xec>)
 8011f96:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011f98:	6978      	ldr	r0, [r7, #20]
 8011f9a:	f7fe f923 	bl	80101e4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00c      	beq.n	8011fc2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d109      	bne.n	8011fc2 <tcp_free_acked_segments+0x8e>
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d106      	bne.n	8011fc2 <tcp_free_acked_segments+0x8e>
 8011fb4:	4b17      	ldr	r3, [pc, #92]	; (8012014 <tcp_free_acked_segments+0xe0>)
 8011fb6:	f240 4262 	movw	r2, #1122	; 0x462
 8011fba:	491a      	ldr	r1, [pc, #104]	; (8012024 <tcp_free_acked_segments+0xf0>)
 8011fbc:	4817      	ldr	r0, [pc, #92]	; (801201c <tcp_free_acked_segments+0xe8>)
 8011fbe:	f003 ff6b 	bl	8015e98 <iprintf>
  while (seg_list != NULL &&
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d020      	beq.n	801200a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f7 fbfd 	bl	80097ce <lwip_htonl>
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	891b      	ldrh	r3, [r3, #8]
 8011fda:	461d      	mov	r5, r3
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	899b      	ldrh	r3, [r3, #12]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7f7 fbdd 	bl	80097a4 <lwip_htons>
 8011fea:	4603      	mov	r3, r0
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	f003 0303 	and.w	r3, r3, #3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d001      	beq.n	8011ffa <tcp_free_acked_segments+0xc6>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	e000      	b.n	8011ffc <tcp_free_acked_segments+0xc8>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	442b      	add	r3, r5
 8011ffe:	18e2      	adds	r2, r4, r3
 8012000:	4b09      	ldr	r3, [pc, #36]	; (8012028 <tcp_free_acked_segments+0xf4>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012006:	2b00      	cmp	r3, #0
 8012008:	dd9c      	ble.n	8011f44 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801200a:	68bb      	ldr	r3, [r7, #8]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bdb0      	pop	{r4, r5, r7, pc}
 8012014:	08019a88 	.word	0x08019a88
 8012018:	08019d70 	.word	0x08019d70
 801201c:	08019ad4 	.word	0x08019ad4
 8012020:	20000884 	.word	0x20000884
 8012024:	08019d98 	.word	0x08019d98
 8012028:	20000880 	.word	0x20000880

0801202c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801202c:	b5b0      	push	{r4, r5, r7, lr}
 801202e:	b094      	sub	sp, #80	; 0x50
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012034:	2300      	movs	r3, #0
 8012036:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d106      	bne.n	801204c <tcp_receive+0x20>
 801203e:	4ba6      	ldr	r3, [pc, #664]	; (80122d8 <tcp_receive+0x2ac>)
 8012040:	f240 427b 	movw	r2, #1147	; 0x47b
 8012044:	49a5      	ldr	r1, [pc, #660]	; (80122dc <tcp_receive+0x2b0>)
 8012046:	48a6      	ldr	r0, [pc, #664]	; (80122e0 <tcp_receive+0x2b4>)
 8012048:	f003 ff26 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	7d1b      	ldrb	r3, [r3, #20]
 8012050:	2b03      	cmp	r3, #3
 8012052:	d806      	bhi.n	8012062 <tcp_receive+0x36>
 8012054:	4ba0      	ldr	r3, [pc, #640]	; (80122d8 <tcp_receive+0x2ac>)
 8012056:	f240 427c 	movw	r2, #1148	; 0x47c
 801205a:	49a2      	ldr	r1, [pc, #648]	; (80122e4 <tcp_receive+0x2b8>)
 801205c:	48a0      	ldr	r0, [pc, #640]	; (80122e0 <tcp_receive+0x2b4>)
 801205e:	f003 ff1b 	bl	8015e98 <iprintf>

  if (flags & TCP_ACK) {
 8012062:	4ba1      	ldr	r3, [pc, #644]	; (80122e8 <tcp_receive+0x2bc>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	f003 0310 	and.w	r3, r3, #16
 801206a:	2b00      	cmp	r3, #0
 801206c:	f000 8269 	beq.w	8012542 <tcp_receive+0x516>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012076:	461a      	mov	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801207c:	4413      	add	r3, r2
 801207e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012084:	4b99      	ldr	r3, [pc, #612]	; (80122ec <tcp_receive+0x2c0>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	2b00      	cmp	r3, #0
 801208c:	db1b      	blt.n	80120c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012092:	4b96      	ldr	r3, [pc, #600]	; (80122ec <tcp_receive+0x2c0>)
 8012094:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012096:	429a      	cmp	r2, r3
 8012098:	d106      	bne.n	80120a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801209e:	4b94      	ldr	r3, [pc, #592]	; (80122f0 <tcp_receive+0x2c4>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	1ad3      	subs	r3, r2, r3
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	db0e      	blt.n	80120c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120ac:	4b90      	ldr	r3, [pc, #576]	; (80122f0 <tcp_receive+0x2c4>)
 80120ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d125      	bne.n	8012100 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80120b4:	4b8f      	ldr	r3, [pc, #572]	; (80122f4 <tcp_receive+0x2c8>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	89db      	ldrh	r3, [r3, #14]
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d91c      	bls.n	8012100 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80120c6:	4b8b      	ldr	r3, [pc, #556]	; (80122f4 <tcp_receive+0x2c8>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	89db      	ldrh	r3, [r3, #14]
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d205      	bcs.n	80120f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80120f0:	4b7e      	ldr	r3, [pc, #504]	; (80122ec <tcp_receive+0x2c0>)
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80120f8:	4b7d      	ldr	r3, [pc, #500]	; (80122f0 <tcp_receive+0x2c4>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012100:	4b7b      	ldr	r3, [pc, #492]	; (80122f0 <tcp_receive+0x2c4>)
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	dc5d      	bgt.n	80121ca <tcp_receive+0x19e>
      /* Clause 2 */
      if (tcplen == 0) {
 801210e:	4b7a      	ldr	r3, [pc, #488]	; (80122f8 <tcp_receive+0x2cc>)
 8012110:	881b      	ldrh	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d150      	bne.n	80121b8 <tcp_receive+0x18c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012120:	441a      	add	r2, r3
 8012122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012124:	429a      	cmp	r2, r3
 8012126:	d147      	bne.n	80121b8 <tcp_receive+0x18c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801212e:	2b00      	cmp	r3, #0
 8012130:	db42      	blt.n	80121b8 <tcp_receive+0x18c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012136:	4b6e      	ldr	r3, [pc, #440]	; (80122f0 <tcp_receive+0x2c4>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	429a      	cmp	r2, r3
 801213c:	d13c      	bne.n	80121b8 <tcp_receive+0x18c>
              found_dupack = 1;
 801213e:	2301      	movs	r3, #1
 8012140:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012148:	3301      	adds	r3, #1
 801214a:	b2da      	uxtb	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012152:	429a      	cmp	r2, r3
 8012154:	d907      	bls.n	8012166 <tcp_receive+0x13a>
                ++pcb->dupacks;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801215c:	3301      	adds	r3, #1
 801215e:	b2da      	uxtb	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801216c:	2b03      	cmp	r3, #3
 801216e:	d91b      	bls.n	80121a8 <tcp_receive+0x17c>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801217a:	4413      	add	r3, r2
 801217c:	b29a      	uxth	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012184:	429a      	cmp	r2, r3
 8012186:	d30a      	bcc.n	801219e <tcp_receive+0x172>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012192:	4413      	add	r3, r2
 8012194:	b29a      	uxth	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801219c:	e004      	b.n	80121a8 <tcp_receive+0x17c>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d902      	bls.n	80121b8 <tcp_receive+0x18c>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f002 fb4e 	bl	8014854 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80121b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f040 8161 	bne.w	8012482 <tcp_receive+0x456>
        pcb->dupacks = 0;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2200      	movs	r2, #0
 80121c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80121c8:	e15b      	b.n	8012482 <tcp_receive+0x456>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121ca:	4b49      	ldr	r3, [pc, #292]	; (80122f0 <tcp_receive+0x2c4>)
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	3b01      	subs	r3, #1
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f2c0 814e 	blt.w	8012478 <tcp_receive+0x44c>
 80121dc:	4b44      	ldr	r3, [pc, #272]	; (80122f0 <tcp_receive+0x2c4>)
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	f300 8146 	bgt.w	8012478 <tcp_receive+0x44c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	8b5b      	ldrh	r3, [r3, #26]
 80121f0:	f003 0304 	and.w	r3, r3, #4
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d010      	beq.n	801221a <tcp_receive+0x1ee>
        tcp_clear_flags(pcb, TF_INFR);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	8b5b      	ldrh	r3, [r3, #26]
 80121fc:	f023 0304 	bic.w	r3, r3, #4
 8012200:	b29a      	uxth	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012228:	10db      	asrs	r3, r3, #3
 801222a:	b21b      	sxth	r3, r3
 801222c:	b29a      	uxth	r2, r3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012234:	b29b      	uxth	r3, r3
 8012236:	4413      	add	r3, r2
 8012238:	b29b      	uxth	r3, r3
 801223a:	b21a      	sxth	r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012242:	4b2b      	ldr	r3, [pc, #172]	; (80122f0 <tcp_receive+0x2c4>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	b29a      	uxth	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801224c:	b29b      	uxth	r3, r3
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801225a:	4b25      	ldr	r3, [pc, #148]	; (80122f0 <tcp_receive+0x2c4>)
 801225c:	681a      	ldr	r2, [r3, #0]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	7d1b      	ldrb	r3, [r3, #20]
 8012266:	2b03      	cmp	r3, #3
 8012268:	f240 8097 	bls.w	801239a <tcp_receive+0x36e>
        if (pcb->cwnd < pcb->ssthresh) {
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012278:	429a      	cmp	r2, r3
 801227a:	d245      	bcs.n	8012308 <tcp_receive+0x2dc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	8b5b      	ldrh	r3, [r3, #26]
 8012280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <tcp_receive+0x260>
 8012288:	2301      	movs	r3, #1
 801228a:	e000      	b.n	801228e <tcp_receive+0x262>
 801228c:	2302      	movs	r3, #2
 801228e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801229c:	fb12 f303 	smulbb	r3, r2, r3
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122a4:	4293      	cmp	r3, r2
 80122a6:	bf28      	it	cs
 80122a8:	4613      	movcs	r3, r2
 80122aa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122b4:	4413      	add	r3, r2
 80122b6:	b29a      	uxth	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122be:	429a      	cmp	r2, r3
 80122c0:	d31c      	bcc.n	80122fc <tcp_receive+0x2d0>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122ca:	4413      	add	r3, r2
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122d4:	e061      	b.n	801239a <tcp_receive+0x36e>
 80122d6:	bf00      	nop
 80122d8:	08019a88 	.word	0x08019a88
 80122dc:	08019db8 	.word	0x08019db8
 80122e0:	08019ad4 	.word	0x08019ad4
 80122e4:	08019dd4 	.word	0x08019dd4
 80122e8:	20000888 	.word	0x20000888
 80122ec:	2000087c 	.word	0x2000087c
 80122f0:	20000880 	.word	0x20000880
 80122f4:	2000086c 	.word	0x2000086c
 80122f8:	20000886 	.word	0x20000886
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012302:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012306:	e048      	b.n	801239a <tcp_receive+0x36e>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801230e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012310:	4413      	add	r3, r2
 8012312:	b29a      	uxth	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801231a:	429a      	cmp	r2, r3
 801231c:	d309      	bcc.n	8012332 <tcp_receive+0x306>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012326:	4413      	add	r3, r2
 8012328:	b29a      	uxth	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012330:	e004      	b.n	801233c <tcp_receive+0x310>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012348:	429a      	cmp	r2, r3
 801234a:	d326      	bcc.n	801239a <tcp_receive+0x36e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	b29a      	uxth	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801236c:	4413      	add	r3, r2
 801236e:	b29a      	uxth	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012376:	429a      	cmp	r2, r3
 8012378:	d30a      	bcc.n	8012390 <tcp_receive+0x364>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012384:	4413      	add	r3, r2
 8012386:	b29a      	uxth	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801238e:	e004      	b.n	801239a <tcp_receive+0x36e>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a2:	4a98      	ldr	r2, [pc, #608]	; (8012604 <tcp_receive+0x5d8>)
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7ff fdc5 	bl	8011f34 <tcp_free_acked_segments>
 80123aa:	4602      	mov	r2, r0
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b8:	4a93      	ldr	r2, [pc, #588]	; (8012608 <tcp_receive+0x5dc>)
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f7ff fdba 	bl	8011f34 <tcp_free_acked_segments>
 80123c0:	4602      	mov	r2, r0
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d104      	bne.n	80123d8 <tcp_receive+0x3ac>
        pcb->rtime = -1;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80123d6:	e002      	b.n	80123de <tcp_receive+0x3b2>
      } else {
        pcb->rtime = 0;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2200      	movs	r2, #0
 80123e2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d103      	bne.n	80123f4 <tcp_receive+0x3c8>
        pcb->unsent_oversize = 0;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80123fa:	4b84      	ldr	r3, [pc, #528]	; (801260c <tcp_receive+0x5e0>)
 80123fc:	881b      	ldrh	r3, [r3, #0]
 80123fe:	4413      	add	r3, r2
 8012400:	b29a      	uxth	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	8b5b      	ldrh	r3, [r3, #26]
 801240c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012410:	2b00      	cmp	r3, #0
 8012412:	d035      	beq.n	8012480 <tcp_receive+0x454>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012418:	2b00      	cmp	r3, #0
 801241a:	d118      	bne.n	801244e <tcp_receive+0x422>
          if ((pcb->unsent == NULL) ||
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012420:	2b00      	cmp	r3, #0
 8012422:	d00c      	beq.n	801243e <tcp_receive+0x412>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801242c:	68db      	ldr	r3, [r3, #12]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	4618      	mov	r0, r3
 8012432:	f7f7 f9cc 	bl	80097ce <lwip_htonl>
 8012436:	4603      	mov	r3, r0
 8012438:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801243a:	2b00      	cmp	r3, #0
 801243c:	dc20      	bgt.n	8012480 <tcp_receive+0x454>
            tcp_clear_flags(pcb, TF_RTO);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	8b5b      	ldrh	r3, [r3, #26]
 8012442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012446:	b29a      	uxth	r2, r3
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801244c:	e018      	b.n	8012480 <tcp_receive+0x454>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	f7f7 f9b7 	bl	80097ce <lwip_htonl>
 8012460:	4603      	mov	r3, r0
 8012462:	1ae3      	subs	r3, r4, r3
 8012464:	2b00      	cmp	r3, #0
 8012466:	dc0b      	bgt.n	8012480 <tcp_receive+0x454>
          tcp_clear_flags(pcb, TF_RTO);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	8b5b      	ldrh	r3, [r3, #26]
 801246c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012476:	e003      	b.n	8012480 <tcp_receive+0x454>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f002 fbe9 	bl	8014c50 <tcp_send_empty_ack>
 801247e:	e000      	b.n	8012482 <tcp_receive+0x456>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012480:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012486:	2b00      	cmp	r3, #0
 8012488:	d05b      	beq.n	8012542 <tcp_receive+0x516>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801248e:	4b60      	ldr	r3, [pc, #384]	; (8012610 <tcp_receive+0x5e4>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	2b00      	cmp	r3, #0
 8012496:	da54      	bge.n	8012542 <tcp_receive+0x516>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012498:	4b5e      	ldr	r3, [pc, #376]	; (8012614 <tcp_receive+0x5e8>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	b29a      	uxth	r2, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	1ad3      	subs	r3, r2, r3
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80124ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124b6:	10db      	asrs	r3, r3, #3
 80124b8:	b21b      	sxth	r3, r3
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	1ad3      	subs	r3, r2, r3
 80124be:	b29b      	uxth	r3, r3
 80124c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124d0:	4413      	add	r3, r2
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	b21a      	sxth	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80124da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124de:	2b00      	cmp	r3, #0
 80124e0:	da05      	bge.n	80124ee <tcp_receive+0x4c2>
        m = (s16_t) - m;
 80124e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124e6:	425b      	negs	r3, r3
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80124ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124f8:	109b      	asrs	r3, r3, #2
 80124fa:	b21b      	sxth	r3, r3
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	b29b      	uxth	r3, r3
 8012502:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801250c:	b29a      	uxth	r2, r3
 801250e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012512:	4413      	add	r3, r2
 8012514:	b29b      	uxth	r3, r3
 8012516:	b21a      	sxth	r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012522:	10db      	asrs	r3, r3, #3
 8012524:	b21b      	sxth	r3, r3
 8012526:	b29a      	uxth	r2, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801252e:	b29b      	uxth	r3, r3
 8012530:	4413      	add	r3, r2
 8012532:	b29b      	uxth	r3, r3
 8012534:	b21a      	sxth	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2200      	movs	r2, #0
 8012540:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012542:	4b35      	ldr	r3, [pc, #212]	; (8012618 <tcp_receive+0x5ec>)
 8012544:	881b      	ldrh	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 84df 	beq.w	8012f0a <tcp_receive+0xede>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	7d1b      	ldrb	r3, [r3, #20]
 8012550:	2b06      	cmp	r3, #6
 8012552:	f200 84da 	bhi.w	8012f0a <tcp_receive+0xede>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801255a:	4b30      	ldr	r3, [pc, #192]	; (801261c <tcp_receive+0x5f0>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	1ad3      	subs	r3, r2, r3
 8012560:	3b01      	subs	r3, #1
 8012562:	2b00      	cmp	r3, #0
 8012564:	f2c0 808e 	blt.w	8012684 <tcp_receive+0x658>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801256c:	4b2a      	ldr	r3, [pc, #168]	; (8012618 <tcp_receive+0x5ec>)
 801256e:	881b      	ldrh	r3, [r3, #0]
 8012570:	4619      	mov	r1, r3
 8012572:	4b2a      	ldr	r3, [pc, #168]	; (801261c <tcp_receive+0x5f0>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	440b      	add	r3, r1
 8012578:	1ad3      	subs	r3, r2, r3
 801257a:	3301      	adds	r3, #1
 801257c:	2b00      	cmp	r3, #0
 801257e:	f300 8081 	bgt.w	8012684 <tcp_receive+0x658>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012582:	4b27      	ldr	r3, [pc, #156]	; (8012620 <tcp_receive+0x5f4>)
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801258c:	4b23      	ldr	r3, [pc, #140]	; (801261c <tcp_receive+0x5f0>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	1ad3      	subs	r3, r2, r3
 8012592:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012594:	4b22      	ldr	r3, [pc, #136]	; (8012620 <tcp_receive+0x5f4>)
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d106      	bne.n	80125aa <tcp_receive+0x57e>
 801259c:	4b21      	ldr	r3, [pc, #132]	; (8012624 <tcp_receive+0x5f8>)
 801259e:	f240 5294 	movw	r2, #1428	; 0x594
 80125a2:	4921      	ldr	r1, [pc, #132]	; (8012628 <tcp_receive+0x5fc>)
 80125a4:	4821      	ldr	r0, [pc, #132]	; (801262c <tcp_receive+0x600>)
 80125a6:	f003 fc77 	bl	8015e98 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80125aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80125b0:	4293      	cmp	r3, r2
 80125b2:	d906      	bls.n	80125c2 <tcp_receive+0x596>
 80125b4:	4b1b      	ldr	r3, [pc, #108]	; (8012624 <tcp_receive+0x5f8>)
 80125b6:	f240 5295 	movw	r2, #1429	; 0x595
 80125ba:	491d      	ldr	r1, [pc, #116]	; (8012630 <tcp_receive+0x604>)
 80125bc:	481b      	ldr	r0, [pc, #108]	; (801262c <tcp_receive+0x600>)
 80125be:	f003 fc6b 	bl	8015e98 <iprintf>
      off = (u16_t)off32;
 80125c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80125c8:	4b15      	ldr	r3, [pc, #84]	; (8012620 <tcp_receive+0x5f4>)
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	891b      	ldrh	r3, [r3, #8]
 80125ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d906      	bls.n	80125e4 <tcp_receive+0x5b8>
 80125d6:	4b13      	ldr	r3, [pc, #76]	; (8012624 <tcp_receive+0x5f8>)
 80125d8:	f240 5297 	movw	r2, #1431	; 0x597
 80125dc:	4915      	ldr	r1, [pc, #84]	; (8012634 <tcp_receive+0x608>)
 80125de:	4813      	ldr	r0, [pc, #76]	; (801262c <tcp_receive+0x600>)
 80125e0:	f003 fc5a 	bl	8015e98 <iprintf>
      inseg.len -= off;
 80125e4:	4b0e      	ldr	r3, [pc, #56]	; (8012620 <tcp_receive+0x5f4>)
 80125e6:	891a      	ldrh	r2, [r3, #8]
 80125e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	4b0b      	ldr	r3, [pc, #44]	; (8012620 <tcp_receive+0x5f4>)
 80125f2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80125f4:	4b0a      	ldr	r3, [pc, #40]	; (8012620 <tcp_receive+0x5f4>)
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	891a      	ldrh	r2, [r3, #8]
 80125fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012602:	e029      	b.n	8012658 <tcp_receive+0x62c>
 8012604:	08019df0 	.word	0x08019df0
 8012608:	08019df8 	.word	0x08019df8
 801260c:	20000884 	.word	0x20000884
 8012610:	20000880 	.word	0x20000880
 8012614:	2000b6ac 	.word	0x2000b6ac
 8012618:	20000886 	.word	0x20000886
 801261c:	2000087c 	.word	0x2000087c
 8012620:	2000085c 	.word	0x2000085c
 8012624:	08019a88 	.word	0x08019a88
 8012628:	08019e00 	.word	0x08019e00
 801262c:	08019ad4 	.word	0x08019ad4
 8012630:	08019e10 	.word	0x08019e10
 8012634:	08019e20 	.word	0x08019e20
        off -= p->len;
 8012638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801263a:	895b      	ldrh	r3, [r3, #10]
 801263c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012640:	1ad3      	subs	r3, r2, r3
 8012642:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012648:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801264a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801264e:	2200      	movs	r2, #0
 8012650:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801265a:	895b      	ldrh	r3, [r3, #10]
 801265c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012660:	429a      	cmp	r2, r3
 8012662:	d8e9      	bhi.n	8012638 <tcp_receive+0x60c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012664:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012668:	4619      	mov	r1, r3
 801266a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801266c:	f7fb fe72 	bl	800e354 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012670:	4b91      	ldr	r3, [pc, #580]	; (80128b8 <tcp_receive+0x88c>)
 8012672:	68db      	ldr	r3, [r3, #12]
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012678:	4990      	ldr	r1, [pc, #576]	; (80128bc <tcp_receive+0x890>)
 801267a:	600a      	str	r2, [r1, #0]
 801267c:	4a8f      	ldr	r2, [pc, #572]	; (80128bc <tcp_receive+0x890>)
 801267e:	6812      	ldr	r2, [r2, #0]
 8012680:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012682:	e00d      	b.n	80126a0 <tcp_receive+0x674>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012684:	4b8d      	ldr	r3, [pc, #564]	; (80128bc <tcp_receive+0x890>)
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	2b00      	cmp	r3, #0
 8012690:	da06      	bge.n	80126a0 <tcp_receive+0x674>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	8b5b      	ldrh	r3, [r3, #26]
 8012696:	f043 0302 	orr.w	r3, r3, #2
 801269a:	b29a      	uxth	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126a0:	4b86      	ldr	r3, [pc, #536]	; (80128bc <tcp_receive+0x890>)
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a8:	1ad3      	subs	r3, r2, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f2c0 8428 	blt.w	8012f00 <tcp_receive+0xed4>
 80126b0:	4b82      	ldr	r3, [pc, #520]	; (80128bc <tcp_receive+0x890>)
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b8:	6879      	ldr	r1, [r7, #4]
 80126ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126bc:	440b      	add	r3, r1
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	3301      	adds	r3, #1
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f300 841c 	bgt.w	8012f00 <tcp_receive+0xed4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126cc:	4b7b      	ldr	r3, [pc, #492]	; (80128bc <tcp_receive+0x890>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	f040 8298 	bne.w	8012c06 <tcp_receive+0xbda>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80126d6:	4b78      	ldr	r3, [pc, #480]	; (80128b8 <tcp_receive+0x88c>)
 80126d8:	891c      	ldrh	r4, [r3, #8]
 80126da:	4b77      	ldr	r3, [pc, #476]	; (80128b8 <tcp_receive+0x88c>)
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	899b      	ldrh	r3, [r3, #12]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f7 f85e 	bl	80097a4 <lwip_htons>
 80126e8:	4603      	mov	r3, r0
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	f003 0303 	and.w	r3, r3, #3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d001      	beq.n	80126f8 <tcp_receive+0x6cc>
 80126f4:	2301      	movs	r3, #1
 80126f6:	e000      	b.n	80126fa <tcp_receive+0x6ce>
 80126f8:	2300      	movs	r3, #0
 80126fa:	4423      	add	r3, r4
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	4b70      	ldr	r3, [pc, #448]	; (80128c0 <tcp_receive+0x894>)
 8012700:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012706:	4b6e      	ldr	r3, [pc, #440]	; (80128c0 <tcp_receive+0x894>)
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	429a      	cmp	r2, r3
 801270c:	d275      	bcs.n	80127fa <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801270e:	4b6a      	ldr	r3, [pc, #424]	; (80128b8 <tcp_receive+0x88c>)
 8012710:	68db      	ldr	r3, [r3, #12]
 8012712:	899b      	ldrh	r3, [r3, #12]
 8012714:	b29b      	uxth	r3, r3
 8012716:	4618      	mov	r0, r3
 8012718:	f7f7 f844 	bl	80097a4 <lwip_htons>
 801271c:	4603      	mov	r3, r0
 801271e:	b2db      	uxtb	r3, r3
 8012720:	f003 0301 	and.w	r3, r3, #1
 8012724:	2b00      	cmp	r3, #0
 8012726:	d01f      	beq.n	8012768 <tcp_receive+0x73c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012728:	4b63      	ldr	r3, [pc, #396]	; (80128b8 <tcp_receive+0x88c>)
 801272a:	68dc      	ldr	r4, [r3, #12]
 801272c:	4b62      	ldr	r3, [pc, #392]	; (80128b8 <tcp_receive+0x88c>)
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	899b      	ldrh	r3, [r3, #12]
 8012732:	b29b      	uxth	r3, r3
 8012734:	b21b      	sxth	r3, r3
 8012736:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801273a:	b21d      	sxth	r5, r3
 801273c:	4b5e      	ldr	r3, [pc, #376]	; (80128b8 <tcp_receive+0x88c>)
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	899b      	ldrh	r3, [r3, #12]
 8012742:	b29b      	uxth	r3, r3
 8012744:	4618      	mov	r0, r3
 8012746:	f7f7 f82d 	bl	80097a4 <lwip_htons>
 801274a:	4603      	mov	r3, r0
 801274c:	b2db      	uxtb	r3, r3
 801274e:	b29b      	uxth	r3, r3
 8012750:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012754:	b29b      	uxth	r3, r3
 8012756:	4618      	mov	r0, r3
 8012758:	f7f7 f824 	bl	80097a4 <lwip_htons>
 801275c:	4603      	mov	r3, r0
 801275e:	b21b      	sxth	r3, r3
 8012760:	432b      	orrs	r3, r5
 8012762:	b21b      	sxth	r3, r3
 8012764:	b29b      	uxth	r3, r3
 8012766:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801276c:	4b52      	ldr	r3, [pc, #328]	; (80128b8 <tcp_receive+0x88c>)
 801276e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012770:	4b51      	ldr	r3, [pc, #324]	; (80128b8 <tcp_receive+0x88c>)
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	899b      	ldrh	r3, [r3, #12]
 8012776:	b29b      	uxth	r3, r3
 8012778:	4618      	mov	r0, r3
 801277a:	f7f7 f813 	bl	80097a4 <lwip_htons>
 801277e:	4603      	mov	r3, r0
 8012780:	b2db      	uxtb	r3, r3
 8012782:	f003 0302 	and.w	r3, r3, #2
 8012786:	2b00      	cmp	r3, #0
 8012788:	d005      	beq.n	8012796 <tcp_receive+0x76a>
            inseg.len -= 1;
 801278a:	4b4b      	ldr	r3, [pc, #300]	; (80128b8 <tcp_receive+0x88c>)
 801278c:	891b      	ldrh	r3, [r3, #8]
 801278e:	3b01      	subs	r3, #1
 8012790:	b29a      	uxth	r2, r3
 8012792:	4b49      	ldr	r3, [pc, #292]	; (80128b8 <tcp_receive+0x88c>)
 8012794:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012796:	4b48      	ldr	r3, [pc, #288]	; (80128b8 <tcp_receive+0x88c>)
 8012798:	685a      	ldr	r2, [r3, #4]
 801279a:	4b47      	ldr	r3, [pc, #284]	; (80128b8 <tcp_receive+0x88c>)
 801279c:	891b      	ldrh	r3, [r3, #8]
 801279e:	4619      	mov	r1, r3
 80127a0:	4610      	mov	r0, r2
 80127a2:	f7fb fcd5 	bl	800e150 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80127a6:	4b44      	ldr	r3, [pc, #272]	; (80128b8 <tcp_receive+0x88c>)
 80127a8:	891c      	ldrh	r4, [r3, #8]
 80127aa:	4b43      	ldr	r3, [pc, #268]	; (80128b8 <tcp_receive+0x88c>)
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	899b      	ldrh	r3, [r3, #12]
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7f6 fff6 	bl	80097a4 <lwip_htons>
 80127b8:	4603      	mov	r3, r0
 80127ba:	b2db      	uxtb	r3, r3
 80127bc:	f003 0303 	and.w	r3, r3, #3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d001      	beq.n	80127c8 <tcp_receive+0x79c>
 80127c4:	2301      	movs	r3, #1
 80127c6:	e000      	b.n	80127ca <tcp_receive+0x79e>
 80127c8:	2300      	movs	r3, #0
 80127ca:	4423      	add	r3, r4
 80127cc:	b29a      	uxth	r2, r3
 80127ce:	4b3c      	ldr	r3, [pc, #240]	; (80128c0 <tcp_receive+0x894>)
 80127d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80127d2:	4b3b      	ldr	r3, [pc, #236]	; (80128c0 <tcp_receive+0x894>)
 80127d4:	881b      	ldrh	r3, [r3, #0]
 80127d6:	461a      	mov	r2, r3
 80127d8:	4b38      	ldr	r3, [pc, #224]	; (80128bc <tcp_receive+0x890>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	441a      	add	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e2:	6879      	ldr	r1, [r7, #4]
 80127e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127e6:	440b      	add	r3, r1
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d006      	beq.n	80127fa <tcp_receive+0x7ce>
 80127ec:	4b35      	ldr	r3, [pc, #212]	; (80128c4 <tcp_receive+0x898>)
 80127ee:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80127f2:	4935      	ldr	r1, [pc, #212]	; (80128c8 <tcp_receive+0x89c>)
 80127f4:	4835      	ldr	r0, [pc, #212]	; (80128cc <tcp_receive+0x8a0>)
 80127f6:	f003 fb4f 	bl	8015e98 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127fe:	2b00      	cmp	r3, #0
 8012800:	f000 80e5 	beq.w	80129ce <tcp_receive+0x9a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012804:	4b2c      	ldr	r3, [pc, #176]	; (80128b8 <tcp_receive+0x88c>)
 8012806:	68db      	ldr	r3, [r3, #12]
 8012808:	899b      	ldrh	r3, [r3, #12]
 801280a:	b29b      	uxth	r3, r3
 801280c:	4618      	mov	r0, r3
 801280e:	f7f6 ffc9 	bl	80097a4 <lwip_htons>
 8012812:	4603      	mov	r3, r0
 8012814:	b2db      	uxtb	r3, r3
 8012816:	f003 0301 	and.w	r3, r3, #1
 801281a:	2b00      	cmp	r3, #0
 801281c:	d010      	beq.n	8012840 <tcp_receive+0x814>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801281e:	e00a      	b.n	8012836 <tcp_receive+0x80a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012824:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012830:	69f8      	ldr	r0, [r7, #28]
 8012832:	f7fd fcd7 	bl	80101e4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1f0      	bne.n	8012820 <tcp_receive+0x7f4>
 801283e:	e0c6      	b.n	80129ce <tcp_receive+0x9a2>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012844:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012846:	e050      	b.n	80128ea <tcp_receive+0x8be>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801284a:	68db      	ldr	r3, [r3, #12]
 801284c:	899b      	ldrh	r3, [r3, #12]
 801284e:	b29b      	uxth	r3, r3
 8012850:	4618      	mov	r0, r3
 8012852:	f7f6 ffa7 	bl	80097a4 <lwip_htons>
 8012856:	4603      	mov	r3, r0
 8012858:	b2db      	uxtb	r3, r3
 801285a:	f003 0301 	and.w	r3, r3, #1
 801285e:	2b00      	cmp	r3, #0
 8012860:	d03b      	beq.n	80128da <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <tcp_receive+0x88c>)
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	899b      	ldrh	r3, [r3, #12]
 8012868:	b29b      	uxth	r3, r3
 801286a:	4618      	mov	r0, r3
 801286c:	f7f6 ff9a 	bl	80097a4 <lwip_htons>
 8012870:	4603      	mov	r3, r0
 8012872:	b2db      	uxtb	r3, r3
 8012874:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012878:	2b00      	cmp	r3, #0
 801287a:	d12e      	bne.n	80128da <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801287c:	4b0e      	ldr	r3, [pc, #56]	; (80128b8 <tcp_receive+0x88c>)
 801287e:	68dc      	ldr	r4, [r3, #12]
 8012880:	4b0d      	ldr	r3, [pc, #52]	; (80128b8 <tcp_receive+0x88c>)
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	899b      	ldrh	r3, [r3, #12]
 8012886:	b29d      	uxth	r5, r3
 8012888:	2001      	movs	r0, #1
 801288a:	f7f6 ff8b 	bl	80097a4 <lwip_htons>
 801288e:	4603      	mov	r3, r0
 8012890:	432b      	orrs	r3, r5
 8012892:	b29b      	uxth	r3, r3
 8012894:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012896:	4b08      	ldr	r3, [pc, #32]	; (80128b8 <tcp_receive+0x88c>)
 8012898:	891c      	ldrh	r4, [r3, #8]
 801289a:	4b07      	ldr	r3, [pc, #28]	; (80128b8 <tcp_receive+0x88c>)
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	899b      	ldrh	r3, [r3, #12]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f6 ff7e 	bl	80097a4 <lwip_htons>
 80128a8:	4603      	mov	r3, r0
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	f003 0303 	and.w	r3, r3, #3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d00d      	beq.n	80128d0 <tcp_receive+0x8a4>
 80128b4:	2301      	movs	r3, #1
 80128b6:	e00c      	b.n	80128d2 <tcp_receive+0x8a6>
 80128b8:	2000085c 	.word	0x2000085c
 80128bc:	2000087c 	.word	0x2000087c
 80128c0:	20000886 	.word	0x20000886
 80128c4:	08019a88 	.word	0x08019a88
 80128c8:	08019e30 	.word	0x08019e30
 80128cc:	08019ad4 	.word	0x08019ad4
 80128d0:	2300      	movs	r3, #0
 80128d2:	4423      	add	r3, r4
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	4b98      	ldr	r3, [pc, #608]	; (8012b38 <tcp_receive+0xb0c>)
 80128d8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80128da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128dc:	61bb      	str	r3, [r7, #24]
              next = next->next;
 80128de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80128e4:	69b8      	ldr	r0, [r7, #24]
 80128e6:	f7fd fc7d 	bl	80101e4 <tcp_seg_free>
            while (next &&
 80128ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d00e      	beq.n	801290e <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80128f0:	4b91      	ldr	r3, [pc, #580]	; (8012b38 <tcp_receive+0xb0c>)
 80128f2:	881b      	ldrh	r3, [r3, #0]
 80128f4:	461a      	mov	r2, r3
 80128f6:	4b91      	ldr	r3, [pc, #580]	; (8012b3c <tcp_receive+0xb10>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	441a      	add	r2, r3
 80128fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012904:	8909      	ldrh	r1, [r1, #8]
 8012906:	440b      	add	r3, r1
 8012908:	1ad3      	subs	r3, r2, r3
            while (next &&
 801290a:	2b00      	cmp	r3, #0
 801290c:	da9c      	bge.n	8012848 <tcp_receive+0x81c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801290e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012910:	2b00      	cmp	r3, #0
 8012912:	d059      	beq.n	80129c8 <tcp_receive+0x99c>
                TCP_SEQ_GT(seqno + tcplen,
 8012914:	4b88      	ldr	r3, [pc, #544]	; (8012b38 <tcp_receive+0xb0c>)
 8012916:	881b      	ldrh	r3, [r3, #0]
 8012918:	461a      	mov	r2, r3
 801291a:	4b88      	ldr	r3, [pc, #544]	; (8012b3c <tcp_receive+0xb10>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	441a      	add	r2, r3
 8012920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012928:	2b00      	cmp	r3, #0
 801292a:	dd4d      	ble.n	80129c8 <tcp_receive+0x99c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	b29a      	uxth	r2, r3
 8012934:	4b81      	ldr	r3, [pc, #516]	; (8012b3c <tcp_receive+0xb10>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	b29b      	uxth	r3, r3
 801293a:	1ad3      	subs	r3, r2, r3
 801293c:	b29a      	uxth	r2, r3
 801293e:	4b80      	ldr	r3, [pc, #512]	; (8012b40 <tcp_receive+0xb14>)
 8012940:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012942:	4b7f      	ldr	r3, [pc, #508]	; (8012b40 <tcp_receive+0xb14>)
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	899b      	ldrh	r3, [r3, #12]
 8012948:	b29b      	uxth	r3, r3
 801294a:	4618      	mov	r0, r3
 801294c:	f7f6 ff2a 	bl	80097a4 <lwip_htons>
 8012950:	4603      	mov	r3, r0
 8012952:	b2db      	uxtb	r3, r3
 8012954:	f003 0302 	and.w	r3, r3, #2
 8012958:	2b00      	cmp	r3, #0
 801295a:	d005      	beq.n	8012968 <tcp_receive+0x93c>
                inseg.len -= 1;
 801295c:	4b78      	ldr	r3, [pc, #480]	; (8012b40 <tcp_receive+0xb14>)
 801295e:	891b      	ldrh	r3, [r3, #8]
 8012960:	3b01      	subs	r3, #1
 8012962:	b29a      	uxth	r2, r3
 8012964:	4b76      	ldr	r3, [pc, #472]	; (8012b40 <tcp_receive+0xb14>)
 8012966:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012968:	4b75      	ldr	r3, [pc, #468]	; (8012b40 <tcp_receive+0xb14>)
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	4b74      	ldr	r3, [pc, #464]	; (8012b40 <tcp_receive+0xb14>)
 801296e:	891b      	ldrh	r3, [r3, #8]
 8012970:	4619      	mov	r1, r3
 8012972:	4610      	mov	r0, r2
 8012974:	f7fb fbec 	bl	800e150 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012978:	4b71      	ldr	r3, [pc, #452]	; (8012b40 <tcp_receive+0xb14>)
 801297a:	891c      	ldrh	r4, [r3, #8]
 801297c:	4b70      	ldr	r3, [pc, #448]	; (8012b40 <tcp_receive+0xb14>)
 801297e:	68db      	ldr	r3, [r3, #12]
 8012980:	899b      	ldrh	r3, [r3, #12]
 8012982:	b29b      	uxth	r3, r3
 8012984:	4618      	mov	r0, r3
 8012986:	f7f6 ff0d 	bl	80097a4 <lwip_htons>
 801298a:	4603      	mov	r3, r0
 801298c:	b2db      	uxtb	r3, r3
 801298e:	f003 0303 	and.w	r3, r3, #3
 8012992:	2b00      	cmp	r3, #0
 8012994:	d001      	beq.n	801299a <tcp_receive+0x96e>
 8012996:	2301      	movs	r3, #1
 8012998:	e000      	b.n	801299c <tcp_receive+0x970>
 801299a:	2300      	movs	r3, #0
 801299c:	4423      	add	r3, r4
 801299e:	b29a      	uxth	r2, r3
 80129a0:	4b65      	ldr	r3, [pc, #404]	; (8012b38 <tcp_receive+0xb0c>)
 80129a2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80129a4:	4b64      	ldr	r3, [pc, #400]	; (8012b38 <tcp_receive+0xb0c>)
 80129a6:	881b      	ldrh	r3, [r3, #0]
 80129a8:	461a      	mov	r2, r3
 80129aa:	4b64      	ldr	r3, [pc, #400]	; (8012b3c <tcp_receive+0xb10>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	441a      	add	r2, r3
 80129b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d006      	beq.n	80129c8 <tcp_receive+0x99c>
 80129ba:	4b62      	ldr	r3, [pc, #392]	; (8012b44 <tcp_receive+0xb18>)
 80129bc:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80129c0:	4961      	ldr	r1, [pc, #388]	; (8012b48 <tcp_receive+0xb1c>)
 80129c2:	4862      	ldr	r0, [pc, #392]	; (8012b4c <tcp_receive+0xb20>)
 80129c4:	f003 fa68 	bl	8015e98 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129cc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80129ce:	4b5a      	ldr	r3, [pc, #360]	; (8012b38 <tcp_receive+0xb0c>)
 80129d0:	881b      	ldrh	r3, [r3, #0]
 80129d2:	461a      	mov	r2, r3
 80129d4:	4b59      	ldr	r3, [pc, #356]	; (8012b3c <tcp_receive+0xb10>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	441a      	add	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129e2:	4b55      	ldr	r3, [pc, #340]	; (8012b38 <tcp_receive+0xb0c>)
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d206      	bcs.n	80129f8 <tcp_receive+0x9cc>
 80129ea:	4b56      	ldr	r3, [pc, #344]	; (8012b44 <tcp_receive+0xb18>)
 80129ec:	f240 6207 	movw	r2, #1543	; 0x607
 80129f0:	4957      	ldr	r1, [pc, #348]	; (8012b50 <tcp_receive+0xb24>)
 80129f2:	4856      	ldr	r0, [pc, #344]	; (8012b4c <tcp_receive+0xb20>)
 80129f4:	f003 fa50 	bl	8015e98 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129fc:	4b4e      	ldr	r3, [pc, #312]	; (8012b38 <tcp_receive+0xb0c>)
 80129fe:	881b      	ldrh	r3, [r3, #0]
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7fc fdaf 	bl	800f56c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012a0e:	4b4c      	ldr	r3, [pc, #304]	; (8012b40 <tcp_receive+0xb14>)
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d006      	beq.n	8012a26 <tcp_receive+0x9fa>
          recv_data = inseg.p;
 8012a18:	4b49      	ldr	r3, [pc, #292]	; (8012b40 <tcp_receive+0xb14>)
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	4a4d      	ldr	r2, [pc, #308]	; (8012b54 <tcp_receive+0xb28>)
 8012a1e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012a20:	4b47      	ldr	r3, [pc, #284]	; (8012b40 <tcp_receive+0xb14>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a26:	4b46      	ldr	r3, [pc, #280]	; (8012b40 <tcp_receive+0xb14>)
 8012a28:	68db      	ldr	r3, [r3, #12]
 8012a2a:	899b      	ldrh	r3, [r3, #12]
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7f6 feb8 	bl	80097a4 <lwip_htons>
 8012a34:	4603      	mov	r3, r0
 8012a36:	b2db      	uxtb	r3, r3
 8012a38:	f003 0301 	and.w	r3, r3, #1
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 80b8 	beq.w	8012bb2 <tcp_receive+0xb86>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012a42:	4b45      	ldr	r3, [pc, #276]	; (8012b58 <tcp_receive+0xb2c>)
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	f043 0320 	orr.w	r3, r3, #32
 8012a4a:	b2da      	uxtb	r2, r3
 8012a4c:	4b42      	ldr	r3, [pc, #264]	; (8012b58 <tcp_receive+0xb2c>)
 8012a4e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012a50:	e0af      	b.n	8012bb2 <tcp_receive+0xb86>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a56:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	4a36      	ldr	r2, [pc, #216]	; (8012b3c <tcp_receive+0xb10>)
 8012a62:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	891b      	ldrh	r3, [r3, #8]
 8012a68:	461c      	mov	r4, r3
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	899b      	ldrh	r3, [r3, #12]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7f6 fe96 	bl	80097a4 <lwip_htons>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	f003 0303 	and.w	r3, r3, #3
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d001      	beq.n	8012a88 <tcp_receive+0xa5c>
 8012a84:	2301      	movs	r3, #1
 8012a86:	e000      	b.n	8012a8a <tcp_receive+0xa5e>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	4423      	add	r3, r4
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012a90:	441a      	add	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a9a:	461c      	mov	r4, r3
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	891b      	ldrh	r3, [r3, #8]
 8012aa0:	461d      	mov	r5, r3
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	899b      	ldrh	r3, [r3, #12]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7f6 fe7a 	bl	80097a4 <lwip_htons>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	f003 0303 	and.w	r3, r3, #3
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d001      	beq.n	8012ac0 <tcp_receive+0xa94>
 8012abc:	2301      	movs	r3, #1
 8012abe:	e000      	b.n	8012ac2 <tcp_receive+0xa96>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	442b      	add	r3, r5
 8012ac4:	429c      	cmp	r4, r3
 8012ac6:	d206      	bcs.n	8012ad6 <tcp_receive+0xaaa>
 8012ac8:	4b1e      	ldr	r3, [pc, #120]	; (8012b44 <tcp_receive+0xb18>)
 8012aca:	f240 622c 	movw	r2, #1580	; 0x62c
 8012ace:	4923      	ldr	r1, [pc, #140]	; (8012b5c <tcp_receive+0xb30>)
 8012ad0:	481e      	ldr	r0, [pc, #120]	; (8012b4c <tcp_receive+0xb20>)
 8012ad2:	f003 f9e1 	bl	8015e98 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	891b      	ldrh	r3, [r3, #8]
 8012ada:	461c      	mov	r4, r3
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	899b      	ldrh	r3, [r3, #12]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f6 fe5d 	bl	80097a4 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	f003 0303 	and.w	r3, r3, #3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <tcp_receive+0xace>
 8012af6:	2301      	movs	r3, #1
 8012af8:	e000      	b.n	8012afc <tcp_receive+0xad0>
 8012afa:	2300      	movs	r3, #0
 8012afc:	18e1      	adds	r1, r4, r3
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b02:	b28b      	uxth	r3, r1
 8012b04:	1ad3      	subs	r3, r2, r3
 8012b06:	b29a      	uxth	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7fc fd2d 	bl	800f56c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	891b      	ldrh	r3, [r3, #8]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d028      	beq.n	8012b6e <tcp_receive+0xb42>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012b1c:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <tcp_receive+0xb28>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d01d      	beq.n	8012b60 <tcp_receive+0xb34>
              pbuf_cat(recv_data, cseg->p);
 8012b24:	4b0b      	ldr	r3, [pc, #44]	; (8012b54 <tcp_receive+0xb28>)
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	4610      	mov	r0, r2
 8012b30:	f7fb fd8a 	bl	800e648 <pbuf_cat>
 8012b34:	e018      	b.n	8012b68 <tcp_receive+0xb3c>
 8012b36:	bf00      	nop
 8012b38:	20000886 	.word	0x20000886
 8012b3c:	2000087c 	.word	0x2000087c
 8012b40:	2000085c 	.word	0x2000085c
 8012b44:	08019a88 	.word	0x08019a88
 8012b48:	08019e68 	.word	0x08019e68
 8012b4c:	08019ad4 	.word	0x08019ad4
 8012b50:	08019ea4 	.word	0x08019ea4
 8012b54:	2000088c 	.word	0x2000088c
 8012b58:	20000889 	.word	0x20000889
 8012b5c:	08019ec4 	.word	0x08019ec4
            } else {
              recv_data = cseg->p;
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	4a70      	ldr	r2, [pc, #448]	; (8012d28 <tcp_receive+0xcfc>)
 8012b66:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	899b      	ldrh	r3, [r3, #12]
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7f6 fe14 	bl	80097a4 <lwip_htons>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	f003 0301 	and.w	r3, r3, #1
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d00d      	beq.n	8012ba4 <tcp_receive+0xb78>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012b88:	4b68      	ldr	r3, [pc, #416]	; (8012d2c <tcp_receive+0xd00>)
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	f043 0320 	orr.w	r3, r3, #32
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	4b66      	ldr	r3, [pc, #408]	; (8012d2c <tcp_receive+0xd00>)
 8012b94:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	7d1b      	ldrb	r3, [r3, #20]
 8012b9a:	2b04      	cmp	r3, #4
 8012b9c:	d102      	bne.n	8012ba4 <tcp_receive+0xb78>
              pcb->state = CLOSE_WAIT;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2207      	movs	r2, #7
 8012ba2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012bac:	6978      	ldr	r0, [r7, #20]
 8012bae:	f7fd fb19 	bl	80101e4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d008      	beq.n	8012bcc <tcp_receive+0xba0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	685a      	ldr	r2, [r3, #4]
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	f43f af43 	beq.w	8012a52 <tcp_receive+0xa26>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	8b5b      	ldrh	r3, [r3, #26]
 8012bd0:	f003 0301 	and.w	r3, r3, #1
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00e      	beq.n	8012bf6 <tcp_receive+0xbca>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	8b5b      	ldrh	r3, [r3, #26]
 8012bdc:	f023 0301 	bic.w	r3, r3, #1
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	835a      	strh	r2, [r3, #26]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8b5b      	ldrh	r3, [r3, #26]
 8012bea:	f043 0302 	orr.w	r3, r3, #2
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012bf4:	e188      	b.n	8012f08 <tcp_receive+0xedc>
        tcp_ack(pcb);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	8b5b      	ldrh	r3, [r3, #26]
 8012bfa:	f043 0301 	orr.w	r3, r3, #1
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012c04:	e180      	b.n	8012f08 <tcp_receive+0xedc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d106      	bne.n	8012c1c <tcp_receive+0xbf0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012c0e:	4848      	ldr	r0, [pc, #288]	; (8012d30 <tcp_receive+0xd04>)
 8012c10:	f7fd fb00 	bl	8010214 <tcp_seg_copy>
 8012c14:	4602      	mov	r2, r0
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	675a      	str	r2, [r3, #116]	; 0x74
 8012c1a:	e16d      	b.n	8012ef8 <tcp_receive+0xecc>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c26:	e157      	b.n	8012ed8 <tcp_receive+0xeac>
            if (seqno == next->tcphdr->seqno) {
 8012c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	685a      	ldr	r2, [r3, #4]
 8012c2e:	4b41      	ldr	r3, [pc, #260]	; (8012d34 <tcp_receive+0xd08>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d11d      	bne.n	8012c72 <tcp_receive+0xc46>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012c36:	4b3e      	ldr	r3, [pc, #248]	; (8012d30 <tcp_receive+0xd04>)
 8012c38:	891a      	ldrh	r2, [r3, #8]
 8012c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3c:	891b      	ldrh	r3, [r3, #8]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	f240 814f 	bls.w	8012ee2 <tcp_receive+0xeb6>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c44:	483a      	ldr	r0, [pc, #232]	; (8012d30 <tcp_receive+0xd04>)
 8012c46:	f7fd fae5 	bl	8010214 <tcp_seg_copy>
 8012c4a:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	f000 8149 	beq.w	8012ee6 <tcp_receive+0xeba>
                  if (prev != NULL) {
 8012c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d003      	beq.n	8012c62 <tcp_receive+0xc36>
                    prev->next = cseg;
 8012c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	601a      	str	r2, [r3, #0]
 8012c60:	e002      	b.n	8012c68 <tcp_receive+0xc3c>
                  } else {
                    pcb->ooseq = cseg;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012c68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c6a:	68b8      	ldr	r0, [r7, #8]
 8012c6c:	f7ff f8da 	bl	8011e24 <tcp_oos_insert_segment>
                }
                break;
 8012c70:	e139      	b.n	8012ee6 <tcp_receive+0xeba>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d117      	bne.n	8012ca8 <tcp_receive+0xc7c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012c78:	4b2e      	ldr	r3, [pc, #184]	; (8012d34 <tcp_receive+0xd08>)
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	1ad3      	subs	r3, r2, r3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	da57      	bge.n	8012d38 <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c88:	4829      	ldr	r0, [pc, #164]	; (8012d30 <tcp_receive+0xd04>)
 8012c8a:	f7fd fac3 	bl	8010214 <tcp_seg_copy>
 8012c8e:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	f000 8129 	beq.w	8012eea <tcp_receive+0xebe>
                    pcb->ooseq = cseg;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	693a      	ldr	r2, [r7, #16]
 8012c9c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012c9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ca0:	6938      	ldr	r0, [r7, #16]
 8012ca2:	f7ff f8bf 	bl	8011e24 <tcp_oos_insert_segment>
                  }
                  break;
 8012ca6:	e120      	b.n	8012eea <tcp_receive+0xebe>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012ca8:	4b22      	ldr	r3, [pc, #136]	; (8012d34 <tcp_receive+0xd08>)
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cae:	68db      	ldr	r3, [r3, #12]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	db3e      	blt.n	8012d38 <tcp_receive+0xd0c>
 8012cba:	4b1e      	ldr	r3, [pc, #120]	; (8012d34 <tcp_receive+0xd08>)
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	dc35      	bgt.n	8012d38 <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ccc:	4818      	ldr	r0, [pc, #96]	; (8012d30 <tcp_receive+0xd04>)
 8012cce:	f7fd faa1 	bl	8010214 <tcp_seg_copy>
 8012cd2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 8109 	beq.w	8012eee <tcp_receive+0xec2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ce4:	8912      	ldrh	r2, [r2, #8]
 8012ce6:	441a      	add	r2, r3
 8012ce8:	4b12      	ldr	r3, [pc, #72]	; (8012d34 <tcp_receive+0xd08>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	dd12      	ble.n	8012d18 <tcp_receive+0xcec>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012cf2:	4b10      	ldr	r3, [pc, #64]	; (8012d34 <tcp_receive+0xd08>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d06:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d0a:	685a      	ldr	r2, [r3, #4]
 8012d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d0e:	891b      	ldrh	r3, [r3, #8]
 8012d10:	4619      	mov	r1, r3
 8012d12:	4610      	mov	r0, r2
 8012d14:	f7fb fa1c 	bl	800e150 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1a:	68fa      	ldr	r2, [r7, #12]
 8012d1c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d20:	68f8      	ldr	r0, [r7, #12]
 8012d22:	f7ff f87f 	bl	8011e24 <tcp_oos_insert_segment>
                  }
                  break;
 8012d26:	e0e2      	b.n	8012eee <tcp_receive+0xec2>
 8012d28:	2000088c 	.word	0x2000088c
 8012d2c:	20000889 	.word	0x20000889
 8012d30:	2000085c 	.word	0x2000085c
 8012d34:	2000087c 	.word	0x2000087c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f040 80c6 	bne.w	8012ed2 <tcp_receive+0xea6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012d46:	4b80      	ldr	r3, [pc, #512]	; (8012f48 <tcp_receive+0xf1c>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f340 80bd 	ble.w	8012ed2 <tcp_receive+0xea6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	899b      	ldrh	r3, [r3, #12]
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7f6 fd1f 	bl	80097a4 <lwip_htons>
 8012d66:	4603      	mov	r3, r0
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	f003 0301 	and.w	r3, r3, #1
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f040 80bf 	bne.w	8012ef2 <tcp_receive+0xec6>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012d74:	4875      	ldr	r0, [pc, #468]	; (8012f4c <tcp_receive+0xf20>)
 8012d76:	f7fd fa4d 	bl	8010214 <tcp_seg_copy>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 80b6 	beq.w	8012ef6 <tcp_receive+0xeca>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d92:	8912      	ldrh	r2, [r2, #8]
 8012d94:	441a      	add	r2, r3
 8012d96:	4b6c      	ldr	r3, [pc, #432]	; (8012f48 <tcp_receive+0xf1c>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	dd12      	ble.n	8012dc6 <tcp_receive+0xd9a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012da0:	4b69      	ldr	r3, [pc, #420]	; (8012f48 <tcp_receive+0xf1c>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db8:	685a      	ldr	r2, [r3, #4]
 8012dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbc:	891b      	ldrh	r3, [r3, #8]
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	4610      	mov	r0, r2
 8012dc2:	f7fb f9c5 	bl	800e150 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012dc6:	4b62      	ldr	r3, [pc, #392]	; (8012f50 <tcp_receive+0xf24>)
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	461a      	mov	r2, r3
 8012dcc:	4b5e      	ldr	r3, [pc, #376]	; (8012f48 <tcp_receive+0xf1c>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	441a      	add	r2, r3
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd6:	6879      	ldr	r1, [r7, #4]
 8012dd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012dda:	440b      	add	r3, r1
 8012ddc:	1ad3      	subs	r3, r2, r3
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	f340 8089 	ble.w	8012ef6 <tcp_receive+0xeca>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	899b      	ldrh	r3, [r3, #12]
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f6 fcd8 	bl	80097a4 <lwip_htons>
 8012df4:	4603      	mov	r3, r0
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	f003 0301 	and.w	r3, r3, #1
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d022      	beq.n	8012e46 <tcp_receive+0xe1a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68dc      	ldr	r4, [r3, #12]
 8012e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	899b      	ldrh	r3, [r3, #12]
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	b21b      	sxth	r3, r3
 8012e12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e16:	b21d      	sxth	r5, r3
 8012e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	899b      	ldrh	r3, [r3, #12]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7f6 fcbe 	bl	80097a4 <lwip_htons>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	b29b      	uxth	r3, r3
 8012e2e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7f6 fcb5 	bl	80097a4 <lwip_htons>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	b21b      	sxth	r3, r3
 8012e3e:	432b      	orrs	r3, r5
 8012e40:	b21b      	sxth	r3, r3
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012e4e:	b291      	uxth	r1, r2
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012e54:	440a      	add	r2, r1
 8012e56:	b291      	uxth	r1, r2
 8012e58:	4a3b      	ldr	r2, [pc, #236]	; (8012f48 <tcp_receive+0xf1c>)
 8012e5a:	6812      	ldr	r2, [r2, #0]
 8012e5c:	b292      	uxth	r2, r2
 8012e5e:	1a8a      	subs	r2, r1, r2
 8012e60:	b292      	uxth	r2, r2
 8012e62:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	685a      	ldr	r2, [r3, #4]
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	891b      	ldrh	r3, [r3, #8]
 8012e70:	4619      	mov	r1, r3
 8012e72:	4610      	mov	r0, r2
 8012e74:	f7fb f96c 	bl	800e150 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	891c      	ldrh	r4, [r3, #8]
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	68db      	ldr	r3, [r3, #12]
 8012e84:	899b      	ldrh	r3, [r3, #12]
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7f6 fc8b 	bl	80097a4 <lwip_htons>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	b2db      	uxtb	r3, r3
 8012e92:	f003 0303 	and.w	r3, r3, #3
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d001      	beq.n	8012e9e <tcp_receive+0xe72>
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	e000      	b.n	8012ea0 <tcp_receive+0xe74>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	4423      	add	r3, r4
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	4b2a      	ldr	r3, [pc, #168]	; (8012f50 <tcp_receive+0xf24>)
 8012ea6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ea8:	4b29      	ldr	r3, [pc, #164]	; (8012f50 <tcp_receive+0xf24>)
 8012eaa:	881b      	ldrh	r3, [r3, #0]
 8012eac:	461a      	mov	r2, r3
 8012eae:	4b26      	ldr	r3, [pc, #152]	; (8012f48 <tcp_receive+0xf1c>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	441a      	add	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb8:	6879      	ldr	r1, [r7, #4]
 8012eba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ebc:	440b      	add	r3, r1
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d019      	beq.n	8012ef6 <tcp_receive+0xeca>
 8012ec2:	4b24      	ldr	r3, [pc, #144]	; (8012f54 <tcp_receive+0xf28>)
 8012ec4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012ec8:	4923      	ldr	r1, [pc, #140]	; (8012f58 <tcp_receive+0xf2c>)
 8012eca:	4824      	ldr	r0, [pc, #144]	; (8012f5c <tcp_receive+0xf30>)
 8012ecc:	f002 ffe4 	bl	8015e98 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012ed0:	e011      	b.n	8012ef6 <tcp_receive+0xeca>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f47f aea4 	bne.w	8012c28 <tcp_receive+0xbfc>
 8012ee0:	e00a      	b.n	8012ef8 <tcp_receive+0xecc>
                break;
 8012ee2:	bf00      	nop
 8012ee4:	e008      	b.n	8012ef8 <tcp_receive+0xecc>
                break;
 8012ee6:	bf00      	nop
 8012ee8:	e006      	b.n	8012ef8 <tcp_receive+0xecc>
                  break;
 8012eea:	bf00      	nop
 8012eec:	e004      	b.n	8012ef8 <tcp_receive+0xecc>
                  break;
 8012eee:	bf00      	nop
 8012ef0:	e002      	b.n	8012ef8 <tcp_receive+0xecc>
                  break;
 8012ef2:	bf00      	nop
 8012ef4:	e000      	b.n	8012ef8 <tcp_receive+0xecc>
                break;
 8012ef6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f001 fea9 	bl	8014c50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012efe:	e003      	b.n	8012f08 <tcp_receive+0xedc>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f001 fea5 	bl	8014c50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f06:	e01a      	b.n	8012f3e <tcp_receive+0xf12>
 8012f08:	e019      	b.n	8012f3e <tcp_receive+0xf12>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012f0a:	4b0f      	ldr	r3, [pc, #60]	; (8012f48 <tcp_receive+0xf1c>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	db0a      	blt.n	8012f2e <tcp_receive+0xf02>
 8012f18:	4b0b      	ldr	r3, [pc, #44]	; (8012f48 <tcp_receive+0xf1c>)
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f20:	6879      	ldr	r1, [r7, #4]
 8012f22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f24:	440b      	add	r3, r1
 8012f26:	1ad3      	subs	r3, r2, r3
 8012f28:	3301      	adds	r3, #1
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	dd07      	ble.n	8012f3e <tcp_receive+0xf12>
      tcp_ack_now(pcb);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	8b5b      	ldrh	r3, [r3, #26]
 8012f32:	f043 0302 	orr.w	r3, r3, #2
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012f3c:	e7ff      	b.n	8012f3e <tcp_receive+0xf12>
 8012f3e:	bf00      	nop
 8012f40:	3750      	adds	r7, #80	; 0x50
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bdb0      	pop	{r4, r5, r7, pc}
 8012f46:	bf00      	nop
 8012f48:	2000087c 	.word	0x2000087c
 8012f4c:	2000085c 	.word	0x2000085c
 8012f50:	20000886 	.word	0x20000886
 8012f54:	08019a88 	.word	0x08019a88
 8012f58:	08019e30 	.word	0x08019e30
 8012f5c:	08019ad4 	.word	0x08019ad4

08012f60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b083      	sub	sp, #12
 8012f64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012f66:	4b15      	ldr	r3, [pc, #84]	; (8012fbc <tcp_get_next_optbyte+0x5c>)
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	1c5a      	adds	r2, r3, #1
 8012f6c:	b291      	uxth	r1, r2
 8012f6e:	4a13      	ldr	r2, [pc, #76]	; (8012fbc <tcp_get_next_optbyte+0x5c>)
 8012f70:	8011      	strh	r1, [r2, #0]
 8012f72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012f74:	4b12      	ldr	r3, [pc, #72]	; (8012fc0 <tcp_get_next_optbyte+0x60>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d004      	beq.n	8012f86 <tcp_get_next_optbyte+0x26>
 8012f7c:	4b11      	ldr	r3, [pc, #68]	; (8012fc4 <tcp_get_next_optbyte+0x64>)
 8012f7e:	881b      	ldrh	r3, [r3, #0]
 8012f80:	88fa      	ldrh	r2, [r7, #6]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d208      	bcs.n	8012f98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012f86:	4b10      	ldr	r3, [pc, #64]	; (8012fc8 <tcp_get_next_optbyte+0x68>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	3314      	adds	r3, #20
 8012f8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012f8e:	88fb      	ldrh	r3, [r7, #6]
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	4413      	add	r3, r2
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	e00b      	b.n	8012fb0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012f98:	88fb      	ldrh	r3, [r7, #6]
 8012f9a:	b2da      	uxtb	r2, r3
 8012f9c:	4b09      	ldr	r3, [pc, #36]	; (8012fc4 <tcp_get_next_optbyte+0x64>)
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012fa6:	4b06      	ldr	r3, [pc, #24]	; (8012fc0 <tcp_get_next_optbyte+0x60>)
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	797b      	ldrb	r3, [r7, #5]
 8012fac:	4413      	add	r3, r2
 8012fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr
 8012fbc:	20000878 	.word	0x20000878
 8012fc0:	20000874 	.word	0x20000874
 8012fc4:	20000872 	.word	0x20000872
 8012fc8:	2000086c 	.word	0x2000086c

08012fcc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <tcp_parseopt+0x1c>
 8012fda:	4b31      	ldr	r3, [pc, #196]	; (80130a0 <tcp_parseopt+0xd4>)
 8012fdc:	f240 727d 	movw	r2, #1917	; 0x77d
 8012fe0:	4930      	ldr	r1, [pc, #192]	; (80130a4 <tcp_parseopt+0xd8>)
 8012fe2:	4831      	ldr	r0, [pc, #196]	; (80130a8 <tcp_parseopt+0xdc>)
 8012fe4:	f002 ff58 	bl	8015e98 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012fe8:	4b30      	ldr	r3, [pc, #192]	; (80130ac <tcp_parseopt+0xe0>)
 8012fea:	881b      	ldrh	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d053      	beq.n	8013098 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ff0:	4b2f      	ldr	r3, [pc, #188]	; (80130b0 <tcp_parseopt+0xe4>)
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	801a      	strh	r2, [r3, #0]
 8012ff6:	e043      	b.n	8013080 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8012ff8:	f7ff ffb2 	bl	8012f60 <tcp_get_next_optbyte>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013000:	7bfb      	ldrb	r3, [r7, #15]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d03c      	beq.n	8013080 <tcp_parseopt+0xb4>
 8013006:	2b02      	cmp	r3, #2
 8013008:	d002      	beq.n	8013010 <tcp_parseopt+0x44>
 801300a:	2b00      	cmp	r3, #0
 801300c:	d03f      	beq.n	801308e <tcp_parseopt+0xc2>
 801300e:	e026      	b.n	801305e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013010:	f7ff ffa6 	bl	8012f60 <tcp_get_next_optbyte>
 8013014:	4603      	mov	r3, r0
 8013016:	2b04      	cmp	r3, #4
 8013018:	d13b      	bne.n	8013092 <tcp_parseopt+0xc6>
 801301a:	4b25      	ldr	r3, [pc, #148]	; (80130b0 <tcp_parseopt+0xe4>)
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	3302      	adds	r3, #2
 8013020:	4a22      	ldr	r2, [pc, #136]	; (80130ac <tcp_parseopt+0xe0>)
 8013022:	8812      	ldrh	r2, [r2, #0]
 8013024:	4293      	cmp	r3, r2
 8013026:	dc34      	bgt.n	8013092 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013028:	f7ff ff9a 	bl	8012f60 <tcp_get_next_optbyte>
 801302c:	4603      	mov	r3, r0
 801302e:	b29b      	uxth	r3, r3
 8013030:	021b      	lsls	r3, r3, #8
 8013032:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013034:	f7ff ff94 	bl	8012f60 <tcp_get_next_optbyte>
 8013038:	4603      	mov	r3, r0
 801303a:	b29a      	uxth	r2, r3
 801303c:	89bb      	ldrh	r3, [r7, #12]
 801303e:	4313      	orrs	r3, r2
 8013040:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013042:	89bb      	ldrh	r3, [r7, #12]
 8013044:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013048:	d804      	bhi.n	8013054 <tcp_parseopt+0x88>
 801304a:	89bb      	ldrh	r3, [r7, #12]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d001      	beq.n	8013054 <tcp_parseopt+0x88>
 8013050:	89ba      	ldrh	r2, [r7, #12]
 8013052:	e001      	b.n	8013058 <tcp_parseopt+0x8c>
 8013054:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801305c:	e010      	b.n	8013080 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801305e:	f7ff ff7f 	bl	8012f60 <tcp_get_next_optbyte>
 8013062:	4603      	mov	r3, r0
 8013064:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013066:	7afb      	ldrb	r3, [r7, #11]
 8013068:	2b01      	cmp	r3, #1
 801306a:	d914      	bls.n	8013096 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801306c:	7afb      	ldrb	r3, [r7, #11]
 801306e:	b29a      	uxth	r2, r3
 8013070:	4b0f      	ldr	r3, [pc, #60]	; (80130b0 <tcp_parseopt+0xe4>)
 8013072:	881b      	ldrh	r3, [r3, #0]
 8013074:	4413      	add	r3, r2
 8013076:	b29b      	uxth	r3, r3
 8013078:	3b02      	subs	r3, #2
 801307a:	b29a      	uxth	r2, r3
 801307c:	4b0c      	ldr	r3, [pc, #48]	; (80130b0 <tcp_parseopt+0xe4>)
 801307e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013080:	4b0b      	ldr	r3, [pc, #44]	; (80130b0 <tcp_parseopt+0xe4>)
 8013082:	881a      	ldrh	r2, [r3, #0]
 8013084:	4b09      	ldr	r3, [pc, #36]	; (80130ac <tcp_parseopt+0xe0>)
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	429a      	cmp	r2, r3
 801308a:	d3b5      	bcc.n	8012ff8 <tcp_parseopt+0x2c>
 801308c:	e004      	b.n	8013098 <tcp_parseopt+0xcc>
          return;
 801308e:	bf00      	nop
 8013090:	e002      	b.n	8013098 <tcp_parseopt+0xcc>
            return;
 8013092:	bf00      	nop
 8013094:	e000      	b.n	8013098 <tcp_parseopt+0xcc>
            return;
 8013096:	bf00      	nop
      }
    }
  }
}
 8013098:	3710      	adds	r7, #16
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	08019a88 	.word	0x08019a88
 80130a4:	08019eec 	.word	0x08019eec
 80130a8:	08019ad4 	.word	0x08019ad4
 80130ac:	20000870 	.word	0x20000870
 80130b0:	20000878 	.word	0x20000878

080130b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80130b4:	b480      	push	{r7}
 80130b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80130b8:	4b05      	ldr	r3, [pc, #20]	; (80130d0 <tcp_trigger_input_pcb_close+0x1c>)
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	f043 0310 	orr.w	r3, r3, #16
 80130c0:	b2da      	uxtb	r2, r3
 80130c2:	4b03      	ldr	r3, [pc, #12]	; (80130d0 <tcp_trigger_input_pcb_close+0x1c>)
 80130c4:	701a      	strb	r2, [r3, #0]
}
 80130c6:	bf00      	nop
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	20000889 	.word	0x20000889

080130d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00a      	beq.n	80130fc <tcp_route+0x28>
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	7a1b      	ldrb	r3, [r3, #8]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d006      	beq.n	80130fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	7a1b      	ldrb	r3, [r3, #8]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7fa fe56 	bl	800dda4 <netif_get_by_index>
 80130f8:	4603      	mov	r3, r0
 80130fa:	e003      	b.n	8013104 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7f8 fc55 	bl	800b9ac <ip4_route>
 8013102:	4603      	mov	r3, r0
  }
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801310c:	b590      	push	{r4, r7, lr}
 801310e:	b087      	sub	sp, #28
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	603b      	str	r3, [r7, #0]
 8013118:	4613      	mov	r3, r2
 801311a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d105      	bne.n	801312e <tcp_create_segment+0x22>
 8013122:	4b45      	ldr	r3, [pc, #276]	; (8013238 <tcp_create_segment+0x12c>)
 8013124:	22a3      	movs	r2, #163	; 0xa3
 8013126:	4945      	ldr	r1, [pc, #276]	; (801323c <tcp_create_segment+0x130>)
 8013128:	4845      	ldr	r0, [pc, #276]	; (8013240 <tcp_create_segment+0x134>)
 801312a:	f002 feb5 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d105      	bne.n	8013140 <tcp_create_segment+0x34>
 8013134:	4b40      	ldr	r3, [pc, #256]	; (8013238 <tcp_create_segment+0x12c>)
 8013136:	22a4      	movs	r2, #164	; 0xa4
 8013138:	4942      	ldr	r1, [pc, #264]	; (8013244 <tcp_create_segment+0x138>)
 801313a:	4841      	ldr	r0, [pc, #260]	; (8013240 <tcp_create_segment+0x134>)
 801313c:	f002 feac 	bl	8015e98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013144:	f003 0301 	and.w	r3, r3, #1
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <tcp_create_segment+0x44>
 801314c:	2304      	movs	r3, #4
 801314e:	e000      	b.n	8013152 <tcp_create_segment+0x46>
 8013150:	2300      	movs	r3, #0
 8013152:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013154:	2003      	movs	r0, #3
 8013156:	f7fa fb27 	bl	800d7a8 <memp_malloc>
 801315a:	6138      	str	r0, [r7, #16]
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d104      	bne.n	801316c <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013162:	68b8      	ldr	r0, [r7, #8]
 8013164:	f7fb f9ae 	bl	800e4c4 <pbuf_free>
    return NULL;
 8013168:	2300      	movs	r3, #0
 801316a:	e061      	b.n	8013230 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013172:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	2200      	movs	r2, #0
 8013178:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	891a      	ldrh	r2, [r3, #8]
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	b29b      	uxth	r3, r3
 8013188:	429a      	cmp	r2, r3
 801318a:	d205      	bcs.n	8013198 <tcp_create_segment+0x8c>
 801318c:	4b2a      	ldr	r3, [pc, #168]	; (8013238 <tcp_create_segment+0x12c>)
 801318e:	22b0      	movs	r2, #176	; 0xb0
 8013190:	492d      	ldr	r1, [pc, #180]	; (8013248 <tcp_create_segment+0x13c>)
 8013192:	482b      	ldr	r0, [pc, #172]	; (8013240 <tcp_create_segment+0x134>)
 8013194:	f002 fe80 	bl	8015e98 <iprintf>
  seg->len = p->tot_len - optlen;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	891a      	ldrh	r2, [r3, #8]
 801319c:	7dfb      	ldrb	r3, [r7, #23]
 801319e:	b29b      	uxth	r3, r3
 80131a0:	1ad3      	subs	r3, r2, r3
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	693b      	ldr	r3, [r7, #16]
 80131a6:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80131a8:	2114      	movs	r1, #20
 80131aa:	68b8      	ldr	r0, [r7, #8]
 80131ac:	f7fb f8c2 	bl	800e334 <pbuf_add_header>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d004      	beq.n	80131c0 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80131b6:	6938      	ldr	r0, [r7, #16]
 80131b8:	f7fd f814 	bl	80101e4 <tcp_seg_free>
    return NULL;
 80131bc:	2300      	movs	r3, #0
 80131be:	e037      	b.n	8013230 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	685a      	ldr	r2, [r3, #4]
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	68dc      	ldr	r4, [r3, #12]
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	8adb      	ldrh	r3, [r3, #22]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f6 fae6 	bl	80097a4 <lwip_htons>
 80131d8:	4603      	mov	r3, r0
 80131da:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	68dc      	ldr	r4, [r3, #12]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	8b1b      	ldrh	r3, [r3, #24]
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7f6 fadd 	bl	80097a4 <lwip_htons>
 80131ea:	4603      	mov	r3, r0
 80131ec:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	68dc      	ldr	r4, [r3, #12]
 80131f2:	6838      	ldr	r0, [r7, #0]
 80131f4:	f7f6 faeb 	bl	80097ce <lwip_htonl>
 80131f8:	4603      	mov	r3, r0
 80131fa:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	68dc      	ldr	r4, [r3, #12]
 8013200:	7dfb      	ldrb	r3, [r7, #23]
 8013202:	089b      	lsrs	r3, r3, #2
 8013204:	b2db      	uxtb	r3, r3
 8013206:	b29b      	uxth	r3, r3
 8013208:	3305      	adds	r3, #5
 801320a:	b29b      	uxth	r3, r3
 801320c:	031b      	lsls	r3, r3, #12
 801320e:	b29a      	uxth	r2, r3
 8013210:	79fb      	ldrb	r3, [r7, #7]
 8013212:	b29b      	uxth	r3, r3
 8013214:	4313      	orrs	r3, r2
 8013216:	b29b      	uxth	r3, r3
 8013218:	4618      	mov	r0, r3
 801321a:	f7f6 fac3 	bl	80097a4 <lwip_htons>
 801321e:	4603      	mov	r3, r0
 8013220:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	2200      	movs	r2, #0
 8013228:	749a      	strb	r2, [r3, #18]
 801322a:	2200      	movs	r2, #0
 801322c:	74da      	strb	r2, [r3, #19]
  return seg;
 801322e:	693b      	ldr	r3, [r7, #16]
}
 8013230:	4618      	mov	r0, r3
 8013232:	371c      	adds	r7, #28
 8013234:	46bd      	mov	sp, r7
 8013236:	bd90      	pop	{r4, r7, pc}
 8013238:	08019f08 	.word	0x08019f08
 801323c:	08019f3c 	.word	0x08019f3c
 8013240:	08019f5c 	.word	0x08019f5c
 8013244:	08019f84 	.word	0x08019f84
 8013248:	08019fa8 	.word	0x08019fa8

0801324c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	607b      	str	r3, [r7, #4]
 8013254:	4603      	mov	r3, r0
 8013256:	73fb      	strb	r3, [r7, #15]
 8013258:	460b      	mov	r3, r1
 801325a:	81bb      	strh	r3, [r7, #12]
 801325c:	4613      	mov	r3, r2
 801325e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013260:	89bb      	ldrh	r3, [r7, #12]
 8013262:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d105      	bne.n	8013276 <tcp_pbuf_prealloc+0x2a>
 801326a:	4b30      	ldr	r3, [pc, #192]	; (801332c <tcp_pbuf_prealloc+0xe0>)
 801326c:	22e8      	movs	r2, #232	; 0xe8
 801326e:	4930      	ldr	r1, [pc, #192]	; (8013330 <tcp_pbuf_prealloc+0xe4>)
 8013270:	4830      	ldr	r0, [pc, #192]	; (8013334 <tcp_pbuf_prealloc+0xe8>)
 8013272:	f002 fe11 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013276:	6a3b      	ldr	r3, [r7, #32]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d105      	bne.n	8013288 <tcp_pbuf_prealloc+0x3c>
 801327c:	4b2b      	ldr	r3, [pc, #172]	; (801332c <tcp_pbuf_prealloc+0xe0>)
 801327e:	22e9      	movs	r2, #233	; 0xe9
 8013280:	492d      	ldr	r1, [pc, #180]	; (8013338 <tcp_pbuf_prealloc+0xec>)
 8013282:	482c      	ldr	r0, [pc, #176]	; (8013334 <tcp_pbuf_prealloc+0xe8>)
 8013284:	f002 fe08 	bl	8015e98 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013288:	89ba      	ldrh	r2, [r7, #12]
 801328a:	897b      	ldrh	r3, [r7, #10]
 801328c:	429a      	cmp	r2, r3
 801328e:	d221      	bcs.n	80132d4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013290:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013294:	f003 0302 	and.w	r3, r3, #2
 8013298:	2b00      	cmp	r3, #0
 801329a:	d111      	bne.n	80132c0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	8b5b      	ldrh	r3, [r3, #26]
 80132a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d115      	bne.n	80132d4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80132a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d007      	beq.n	80132c0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80132b0:	6a3b      	ldr	r3, [r7, #32]
 80132b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d103      	bne.n	80132c0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80132b8:	6a3b      	ldr	r3, [r7, #32]
 80132ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d009      	beq.n	80132d4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80132c0:	89bb      	ldrh	r3, [r7, #12]
 80132c2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80132c6:	f023 0203 	bic.w	r2, r3, #3
 80132ca:	897b      	ldrh	r3, [r7, #10]
 80132cc:	4293      	cmp	r3, r2
 80132ce:	bf28      	it	cs
 80132d0:	4613      	movcs	r3, r2
 80132d2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80132d4:	8af9      	ldrh	r1, [r7, #22]
 80132d6:	7bfb      	ldrb	r3, [r7, #15]
 80132d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fa fddd 	bl	800de9c <pbuf_alloc>
 80132e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80132ea:	2300      	movs	r3, #0
 80132ec:	e019      	b.n	8013322 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d006      	beq.n	8013304 <tcp_pbuf_prealloc+0xb8>
 80132f6:	4b0d      	ldr	r3, [pc, #52]	; (801332c <tcp_pbuf_prealloc+0xe0>)
 80132f8:	f240 120b 	movw	r2, #267	; 0x10b
 80132fc:	490f      	ldr	r1, [pc, #60]	; (801333c <tcp_pbuf_prealloc+0xf0>)
 80132fe:	480d      	ldr	r0, [pc, #52]	; (8013334 <tcp_pbuf_prealloc+0xe8>)
 8013300:	f002 fdca 	bl	8015e98 <iprintf>
  *oversize = p->len - length;
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	895a      	ldrh	r2, [r3, #10]
 8013308:	89bb      	ldrh	r3, [r7, #12]
 801330a:	1ad3      	subs	r3, r2, r3
 801330c:	b29a      	uxth	r2, r3
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	89ba      	ldrh	r2, [r7, #12]
 8013316:	811a      	strh	r2, [r3, #8]
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	891a      	ldrh	r2, [r3, #8]
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	815a      	strh	r2, [r3, #10]
  return p;
 8013320:	693b      	ldr	r3, [r7, #16]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3718      	adds	r7, #24
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	08019f08 	.word	0x08019f08
 8013330:	08019fc0 	.word	0x08019fc0
 8013334:	08019f5c 	.word	0x08019f5c
 8013338:	08019fe4 	.word	0x08019fe4
 801333c:	0801a004 	.word	0x0801a004

08013340 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	460b      	mov	r3, r1
 801334a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d106      	bne.n	8013360 <tcp_write_checks+0x20>
 8013352:	4b33      	ldr	r3, [pc, #204]	; (8013420 <tcp_write_checks+0xe0>)
 8013354:	f240 1233 	movw	r2, #307	; 0x133
 8013358:	4932      	ldr	r1, [pc, #200]	; (8013424 <tcp_write_checks+0xe4>)
 801335a:	4833      	ldr	r0, [pc, #204]	; (8013428 <tcp_write_checks+0xe8>)
 801335c:	f002 fd9c 	bl	8015e98 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	7d1b      	ldrb	r3, [r3, #20]
 8013364:	2b04      	cmp	r3, #4
 8013366:	d00e      	beq.n	8013386 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801336c:	2b07      	cmp	r3, #7
 801336e:	d00a      	beq.n	8013386 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013374:	2b02      	cmp	r3, #2
 8013376:	d006      	beq.n	8013386 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801337c:	2b03      	cmp	r3, #3
 801337e:	d002      	beq.n	8013386 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013380:	f06f 030a 	mvn.w	r3, #10
 8013384:	e048      	b.n	8013418 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013386:	887b      	ldrh	r3, [r7, #2]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d101      	bne.n	8013390 <tcp_write_checks+0x50>
    return ERR_OK;
 801338c:	2300      	movs	r3, #0
 801338e:	e043      	b.n	8013418 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013396:	887a      	ldrh	r2, [r7, #2]
 8013398:	429a      	cmp	r2, r3
 801339a:	d909      	bls.n	80133b0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	8b5b      	ldrh	r3, [r3, #26]
 80133a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80133aa:	f04f 33ff 	mov.w	r3, #4294967295
 80133ae:	e033      	b.n	8013418 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133b6:	2b08      	cmp	r3, #8
 80133b8:	d909      	bls.n	80133ce <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	8b5b      	ldrh	r3, [r3, #26]
 80133be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80133c8:	f04f 33ff 	mov.w	r3, #4294967295
 80133cc:	e024      	b.n	8013418 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d00f      	beq.n	80133f8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d11a      	bne.n	8013416 <tcp_write_checks+0xd6>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d116      	bne.n	8013416 <tcp_write_checks+0xd6>
 80133e8:	4b0d      	ldr	r3, [pc, #52]	; (8013420 <tcp_write_checks+0xe0>)
 80133ea:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80133ee:	490f      	ldr	r1, [pc, #60]	; (801342c <tcp_write_checks+0xec>)
 80133f0:	480d      	ldr	r0, [pc, #52]	; (8013428 <tcp_write_checks+0xe8>)
 80133f2:	f002 fd51 	bl	8015e98 <iprintf>
 80133f6:	e00e      	b.n	8013416 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d103      	bne.n	8013408 <tcp_write_checks+0xc8>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013404:	2b00      	cmp	r3, #0
 8013406:	d006      	beq.n	8013416 <tcp_write_checks+0xd6>
 8013408:	4b05      	ldr	r3, [pc, #20]	; (8013420 <tcp_write_checks+0xe0>)
 801340a:	f240 1259 	movw	r2, #345	; 0x159
 801340e:	4908      	ldr	r1, [pc, #32]	; (8013430 <tcp_write_checks+0xf0>)
 8013410:	4805      	ldr	r0, [pc, #20]	; (8013428 <tcp_write_checks+0xe8>)
 8013412:	f002 fd41 	bl	8015e98 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	08019f08 	.word	0x08019f08
 8013424:	0801a018 	.word	0x0801a018
 8013428:	08019f5c 	.word	0x08019f5c
 801342c:	0801a038 	.word	0x0801a038
 8013430:	0801a074 	.word	0x0801a074

08013434 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013434:	b5b0      	push	{r4, r5, r7, lr}
 8013436:	b09a      	sub	sp, #104	; 0x68
 8013438:	af04      	add	r7, sp, #16
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	4611      	mov	r1, r2
 8013440:	461a      	mov	r2, r3
 8013442:	460b      	mov	r3, r1
 8013444:	80fb      	strh	r3, [r7, #6]
 8013446:	4613      	mov	r3, r2
 8013448:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801344a:	2300      	movs	r3, #0
 801344c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801344e:	2300      	movs	r3, #0
 8013450:	653b      	str	r3, [r7, #80]	; 0x50
 8013452:	2300      	movs	r3, #0
 8013454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013456:	2300      	movs	r3, #0
 8013458:	64bb      	str	r3, [r7, #72]	; 0x48
 801345a:	2300      	movs	r3, #0
 801345c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801345e:	2300      	movs	r3, #0
 8013460:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013464:	2300      	movs	r3, #0
 8013466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801346a:	2300      	movs	r3, #0
 801346c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801346e:	2300      	movs	r3, #0
 8013470:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013472:	2300      	movs	r3, #0
 8013474:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d109      	bne.n	8013490 <tcp_write+0x5c>
 801347c:	4ba6      	ldr	r3, [pc, #664]	; (8013718 <tcp_write+0x2e4>)
 801347e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013482:	49a6      	ldr	r1, [pc, #664]	; (801371c <tcp_write+0x2e8>)
 8013484:	48a6      	ldr	r0, [pc, #664]	; (8013720 <tcp_write+0x2ec>)
 8013486:	f002 fd07 	bl	8015e98 <iprintf>
 801348a:	f06f 030f 	mvn.w	r3, #15
 801348e:	e32d      	b.n	8013aec <tcp_write+0x6b8>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013496:	085b      	lsrs	r3, r3, #1
 8013498:	b29a      	uxth	r2, r3
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801349e:	4293      	cmp	r3, r2
 80134a0:	bf28      	it	cs
 80134a2:	4613      	movcs	r3, r2
 80134a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80134a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d102      	bne.n	80134b2 <tcp_write+0x7e>
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134b0:	e000      	b.n	80134b4 <tcp_write+0x80>
 80134b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d109      	bne.n	80134d0 <tcp_write+0x9c>
 80134bc:	4b96      	ldr	r3, [pc, #600]	; (8013718 <tcp_write+0x2e4>)
 80134be:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80134c2:	4998      	ldr	r1, [pc, #608]	; (8013724 <tcp_write+0x2f0>)
 80134c4:	4896      	ldr	r0, [pc, #600]	; (8013720 <tcp_write+0x2ec>)
 80134c6:	f002 fce7 	bl	8015e98 <iprintf>
 80134ca:	f06f 030f 	mvn.w	r3, #15
 80134ce:	e30d      	b.n	8013aec <tcp_write+0x6b8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80134d0:	88fb      	ldrh	r3, [r7, #6]
 80134d2:	4619      	mov	r1, r3
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f7ff ff33 	bl	8013340 <tcp_write_checks>
 80134da:	4603      	mov	r3, r0
 80134dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80134e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <tcp_write+0xba>
    return err;
 80134e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134ec:	e2fe      	b.n	8013aec <tcp_write+0x6b8>
  }
  queuelen = pcb->snd_queuelen;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134f8:	2300      	movs	r3, #0
 80134fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013502:	2b00      	cmp	r3, #0
 8013504:	f000 80fa 	beq.w	80136fc <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801350c:	653b      	str	r3, [r7, #80]	; 0x50
 801350e:	e002      	b.n	8013516 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d1f8      	bne.n	8013510 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801351e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013520:	7a9b      	ldrb	r3, [r3, #10]
 8013522:	f003 0301 	and.w	r3, r3, #1
 8013526:	2b00      	cmp	r3, #0
 8013528:	d001      	beq.n	801352e <tcp_write+0xfa>
 801352a:	2304      	movs	r3, #4
 801352c:	e000      	b.n	8013530 <tcp_write+0xfc>
 801352e:	2300      	movs	r3, #0
 8013530:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013536:	891b      	ldrh	r3, [r3, #8]
 8013538:	4619      	mov	r1, r3
 801353a:	8c3b      	ldrh	r3, [r7, #32]
 801353c:	440b      	add	r3, r1
 801353e:	429a      	cmp	r2, r3
 8013540:	da06      	bge.n	8013550 <tcp_write+0x11c>
 8013542:	4b75      	ldr	r3, [pc, #468]	; (8013718 <tcp_write+0x2e4>)
 8013544:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013548:	4977      	ldr	r1, [pc, #476]	; (8013728 <tcp_write+0x2f4>)
 801354a:	4875      	ldr	r0, [pc, #468]	; (8013720 <tcp_write+0x2ec>)
 801354c:	f002 fca4 	bl	8015e98 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013552:	891a      	ldrh	r2, [r3, #8]
 8013554:	8c3b      	ldrh	r3, [r7, #32]
 8013556:	4413      	add	r3, r2
 8013558:	b29b      	uxth	r3, r3
 801355a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801355c:	1ad3      	subs	r3, r2, r3
 801355e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013566:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013568:	8a7b      	ldrh	r3, [r7, #18]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d027      	beq.n	80135be <tcp_write+0x18a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801356e:	8a7b      	ldrh	r3, [r7, #18]
 8013570:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013572:	429a      	cmp	r2, r3
 8013574:	d206      	bcs.n	8013584 <tcp_write+0x150>
 8013576:	4b68      	ldr	r3, [pc, #416]	; (8013718 <tcp_write+0x2e4>)
 8013578:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801357c:	496b      	ldr	r1, [pc, #428]	; (801372c <tcp_write+0x2f8>)
 801357e:	4868      	ldr	r0, [pc, #416]	; (8013720 <tcp_write+0x2ec>)
 8013580:	f002 fc8a 	bl	8015e98 <iprintf>
      seg = last_unsent;
 8013584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013586:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013588:	8a7b      	ldrh	r3, [r7, #18]
 801358a:	88fa      	ldrh	r2, [r7, #6]
 801358c:	429a      	cmp	r2, r3
 801358e:	d901      	bls.n	8013594 <tcp_write+0x160>
 8013590:	8a7b      	ldrh	r3, [r7, #18]
 8013592:	e000      	b.n	8013596 <tcp_write+0x162>
 8013594:	88fb      	ldrh	r3, [r7, #6]
 8013596:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013598:	4293      	cmp	r3, r2
 801359a:	bfa8      	it	ge
 801359c:	4613      	movge	r3, r2
 801359e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80135a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135a6:	4413      	add	r3, r2
 80135a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80135ac:	8a7a      	ldrh	r2, [r7, #18]
 80135ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80135b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80135b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80135be:	8a7b      	ldrh	r3, [r7, #18]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00b      	beq.n	80135dc <tcp_write+0x1a8>
 80135c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135c8:	88fb      	ldrh	r3, [r7, #6]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d006      	beq.n	80135dc <tcp_write+0x1a8>
 80135ce:	4b52      	ldr	r3, [pc, #328]	; (8013718 <tcp_write+0x2e4>)
 80135d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135d4:	4956      	ldr	r1, [pc, #344]	; (8013730 <tcp_write+0x2fc>)
 80135d6:	4852      	ldr	r0, [pc, #328]	; (8013720 <tcp_write+0x2ec>)
 80135d8:	f002 fc5e 	bl	8015e98 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80135dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135e0:	88fb      	ldrh	r3, [r7, #6]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	f080 8167 	bcs.w	80138b6 <tcp_write+0x482>
 80135e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f000 8163 	beq.w	80138b6 <tcp_write+0x482>
 80135f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135f2:	891b      	ldrh	r3, [r3, #8]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f000 815e 	beq.w	80138b6 <tcp_write+0x482>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80135fa:	88fa      	ldrh	r2, [r7, #6]
 80135fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013600:	1ad2      	subs	r2, r2, r3
 8013602:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013604:	4293      	cmp	r3, r2
 8013606:	bfa8      	it	ge
 8013608:	4613      	movge	r3, r2
 801360a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801360e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013610:	797b      	ldrb	r3, [r7, #5]
 8013612:	f003 0301 	and.w	r3, r3, #1
 8013616:	2b00      	cmp	r3, #0
 8013618:	d027      	beq.n	801366a <tcp_write+0x236>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801361a:	f107 0012 	add.w	r0, r7, #18
 801361e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013620:	8bf9      	ldrh	r1, [r7, #30]
 8013622:	2301      	movs	r3, #1
 8013624:	9302      	str	r3, [sp, #8]
 8013626:	797b      	ldrb	r3, [r7, #5]
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	4603      	mov	r3, r0
 8013630:	2000      	movs	r0, #0
 8013632:	f7ff fe0b 	bl	801324c <tcp_pbuf_prealloc>
 8013636:	6578      	str	r0, [r7, #84]	; 0x54
 8013638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801363a:	2b00      	cmp	r3, #0
 801363c:	f000 8224 	beq.w	8013a88 <tcp_write+0x654>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013642:	6858      	ldr	r0, [r3, #4]
 8013644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	4413      	add	r3, r2
 801364c:	8bfa      	ldrh	r2, [r7, #30]
 801364e:	4619      	mov	r1, r3
 8013650:	f002 fbf5 	bl	8015e3e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013654:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013656:	f7fa ffbd 	bl	800e5d4 <pbuf_clen>
 801365a:	4603      	mov	r3, r0
 801365c:	461a      	mov	r2, r3
 801365e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013662:	4413      	add	r3, r2
 8013664:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013668:	e041      	b.n	80136ee <tcp_write+0x2ba>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	637b      	str	r3, [r7, #52]	; 0x34
 8013670:	e002      	b.n	8013678 <tcp_write+0x244>
 8013672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	637b      	str	r3, [r7, #52]	; 0x34
 8013678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d1f8      	bne.n	8013672 <tcp_write+0x23e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013682:	7b1b      	ldrb	r3, [r3, #12]
 8013684:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d115      	bne.n	80136b8 <tcp_write+0x284>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013692:	8952      	ldrh	r2, [r2, #10]
 8013694:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	429a      	cmp	r2, r3
 801369a:	d10d      	bne.n	80136b8 <tcp_write+0x284>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801369c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d006      	beq.n	80136b2 <tcp_write+0x27e>
 80136a4:	4b1c      	ldr	r3, [pc, #112]	; (8013718 <tcp_write+0x2e4>)
 80136a6:	f240 2231 	movw	r2, #561	; 0x231
 80136aa:	4922      	ldr	r1, [pc, #136]	; (8013734 <tcp_write+0x300>)
 80136ac:	481c      	ldr	r0, [pc, #112]	; (8013720 <tcp_write+0x2ec>)
 80136ae:	f002 fbf3 	bl	8015e98 <iprintf>
          extendlen = seglen;
 80136b2:	8bfb      	ldrh	r3, [r7, #30]
 80136b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80136b6:	e01a      	b.n	80136ee <tcp_write+0x2ba>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80136b8:	8bfb      	ldrh	r3, [r7, #30]
 80136ba:	2201      	movs	r2, #1
 80136bc:	4619      	mov	r1, r3
 80136be:	2000      	movs	r0, #0
 80136c0:	f7fa fbec 	bl	800de9c <pbuf_alloc>
 80136c4:	6578      	str	r0, [r7, #84]	; 0x54
 80136c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 81df 	beq.w	8013a8c <tcp_write+0x658>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80136ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136d2:	68ba      	ldr	r2, [r7, #8]
 80136d4:	441a      	add	r2, r3
 80136d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136d8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80136da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80136dc:	f7fa ff7a 	bl	800e5d4 <pbuf_clen>
 80136e0:	4603      	mov	r3, r0
 80136e2:	461a      	mov	r2, r3
 80136e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136e8:	4413      	add	r3, r2
 80136ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80136ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136f2:	8bfb      	ldrh	r3, [r7, #30]
 80136f4:	4413      	add	r3, r2
 80136f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80136fa:	e0dc      	b.n	80138b6 <tcp_write+0x482>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013702:	2b00      	cmp	r3, #0
 8013704:	f000 80d7 	beq.w	80138b6 <tcp_write+0x482>
 8013708:	4b03      	ldr	r3, [pc, #12]	; (8013718 <tcp_write+0x2e4>)
 801370a:	f240 224b 	movw	r2, #587	; 0x24b
 801370e:	490a      	ldr	r1, [pc, #40]	; (8013738 <tcp_write+0x304>)
 8013710:	4803      	ldr	r0, [pc, #12]	; (8013720 <tcp_write+0x2ec>)
 8013712:	f002 fbc1 	bl	8015e98 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013716:	e0ce      	b.n	80138b6 <tcp_write+0x482>
 8013718:	08019f08 	.word	0x08019f08
 801371c:	0801a0a8 	.word	0x0801a0a8
 8013720:	08019f5c 	.word	0x08019f5c
 8013724:	0801a0c0 	.word	0x0801a0c0
 8013728:	0801a0f4 	.word	0x0801a0f4
 801372c:	0801a10c 	.word	0x0801a10c
 8013730:	0801a12c 	.word	0x0801a12c
 8013734:	0801a14c 	.word	0x0801a14c
 8013738:	0801a178 	.word	0x0801a178
    struct pbuf *p;
    u16_t left = len - pos;
 801373c:	88fa      	ldrh	r2, [r7, #6]
 801373e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013746:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801374a:	b29b      	uxth	r3, r3
 801374c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801374e:	1ad3      	subs	r3, r2, r3
 8013750:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013752:	8b7a      	ldrh	r2, [r7, #26]
 8013754:	8bbb      	ldrh	r3, [r7, #28]
 8013756:	4293      	cmp	r3, r2
 8013758:	bf28      	it	cs
 801375a:	4613      	movcs	r3, r2
 801375c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801375e:	797b      	ldrb	r3, [r7, #5]
 8013760:	f003 0301 	and.w	r3, r3, #1
 8013764:	2b00      	cmp	r3, #0
 8013766:	d036      	beq.n	80137d6 <tcp_write+0x3a2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013768:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801376c:	b29a      	uxth	r2, r3
 801376e:	8b3b      	ldrh	r3, [r7, #24]
 8013770:	4413      	add	r3, r2
 8013772:	b299      	uxth	r1, r3
 8013774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013776:	2b00      	cmp	r3, #0
 8013778:	bf0c      	ite	eq
 801377a:	2301      	moveq	r3, #1
 801377c:	2300      	movne	r3, #0
 801377e:	b2db      	uxtb	r3, r3
 8013780:	f107 0012 	add.w	r0, r7, #18
 8013784:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013786:	9302      	str	r3, [sp, #8]
 8013788:	797b      	ldrb	r3, [r7, #5]
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	4603      	mov	r3, r0
 8013792:	2036      	movs	r0, #54	; 0x36
 8013794:	f7ff fd5a 	bl	801324c <tcp_pbuf_prealloc>
 8013798:	6338      	str	r0, [r7, #48]	; 0x30
 801379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379c:	2b00      	cmp	r3, #0
 801379e:	f000 8177 	beq.w	8013a90 <tcp_write+0x65c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80137a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a4:	895b      	ldrh	r3, [r3, #10]
 80137a6:	8b3a      	ldrh	r2, [r7, #24]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d906      	bls.n	80137ba <tcp_write+0x386>
 80137ac:	4b8c      	ldr	r3, [pc, #560]	; (80139e0 <tcp_write+0x5ac>)
 80137ae:	f240 2267 	movw	r2, #615	; 0x267
 80137b2:	498c      	ldr	r1, [pc, #560]	; (80139e4 <tcp_write+0x5b0>)
 80137b4:	488c      	ldr	r0, [pc, #560]	; (80139e8 <tcp_write+0x5b4>)
 80137b6:	f002 fb6f 	bl	8015e98 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80137ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137bc:	685a      	ldr	r2, [r3, #4]
 80137be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137c2:	18d0      	adds	r0, r2, r3
 80137c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137c8:	68ba      	ldr	r2, [r7, #8]
 80137ca:	4413      	add	r3, r2
 80137cc:	8b3a      	ldrh	r2, [r7, #24]
 80137ce:	4619      	mov	r1, r3
 80137d0:	f002 fb35 	bl	8015e3e <memcpy>
 80137d4:	e02f      	b.n	8013836 <tcp_write+0x402>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80137d6:	8a7b      	ldrh	r3, [r7, #18]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d006      	beq.n	80137ea <tcp_write+0x3b6>
 80137dc:	4b80      	ldr	r3, [pc, #512]	; (80139e0 <tcp_write+0x5ac>)
 80137de:	f240 2271 	movw	r2, #625	; 0x271
 80137e2:	4982      	ldr	r1, [pc, #520]	; (80139ec <tcp_write+0x5b8>)
 80137e4:	4880      	ldr	r0, [pc, #512]	; (80139e8 <tcp_write+0x5b4>)
 80137e6:	f002 fb57 	bl	8015e98 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80137ea:	8b3b      	ldrh	r3, [r7, #24]
 80137ec:	2201      	movs	r2, #1
 80137ee:	4619      	mov	r1, r3
 80137f0:	2036      	movs	r0, #54	; 0x36
 80137f2:	f7fa fb53 	bl	800de9c <pbuf_alloc>
 80137f6:	6178      	str	r0, [r7, #20]
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	f000 814a 	beq.w	8013a94 <tcp_write+0x660>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013800:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013804:	68ba      	ldr	r2, [r7, #8]
 8013806:	441a      	add	r2, r3
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801380c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013810:	b29b      	uxth	r3, r3
 8013812:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013816:	4619      	mov	r1, r3
 8013818:	2036      	movs	r0, #54	; 0x36
 801381a:	f7fa fb3f 	bl	800de9c <pbuf_alloc>
 801381e:	6338      	str	r0, [r7, #48]	; 0x30
 8013820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013822:	2b00      	cmp	r3, #0
 8013824:	d103      	bne.n	801382e <tcp_write+0x3fa>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013826:	6978      	ldr	r0, [r7, #20]
 8013828:	f7fa fe4c 	bl	800e4c4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801382c:	e135      	b.n	8013a9a <tcp_write+0x666>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801382e:	6979      	ldr	r1, [r7, #20]
 8013830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013832:	f7fa ff09 	bl	800e648 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013838:	f7fa fecc 	bl	800e5d4 <pbuf_clen>
 801383c:	4603      	mov	r3, r0
 801383e:	461a      	mov	r2, r3
 8013840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013844:	4413      	add	r3, r2
 8013846:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801384a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801384e:	2b09      	cmp	r3, #9
 8013850:	d903      	bls.n	801385a <tcp_write+0x426>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013854:	f7fa fe36 	bl	800e4c4 <pbuf_free>
      goto memerr;
 8013858:	e11f      	b.n	8013a9a <tcp_write+0x666>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801385e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013862:	441a      	add	r2, r3
 8013864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	4613      	mov	r3, r2
 801386c:	2200      	movs	r2, #0
 801386e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013870:	68f8      	ldr	r0, [r7, #12]
 8013872:	f7ff fc4b 	bl	801310c <tcp_create_segment>
 8013876:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801387a:	2b00      	cmp	r3, #0
 801387c:	f000 810c 	beq.w	8013a98 <tcp_write+0x664>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013882:	2b00      	cmp	r3, #0
 8013884:	d102      	bne.n	801388c <tcp_write+0x458>
      queue = seg;
 8013886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013888:	647b      	str	r3, [r7, #68]	; 0x44
 801388a:	e00c      	b.n	80138a6 <tcp_write+0x472>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801388e:	2b00      	cmp	r3, #0
 8013890:	d106      	bne.n	80138a0 <tcp_write+0x46c>
 8013892:	4b53      	ldr	r3, [pc, #332]	; (80139e0 <tcp_write+0x5ac>)
 8013894:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013898:	4955      	ldr	r1, [pc, #340]	; (80139f0 <tcp_write+0x5bc>)
 801389a:	4853      	ldr	r0, [pc, #332]	; (80139e8 <tcp_write+0x5b4>)
 801389c:	f002 fafc 	bl	8015e98 <iprintf>
      prev_seg->next = seg;
 80138a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80138a4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80138a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138a8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80138aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138ae:	8b3b      	ldrh	r3, [r7, #24]
 80138b0:	4413      	add	r3, r2
 80138b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80138b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138ba:	88fb      	ldrh	r3, [r7, #6]
 80138bc:	429a      	cmp	r2, r3
 80138be:	f4ff af3d 	bcc.w	801373c <tcp_write+0x308>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80138c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d02c      	beq.n	8013922 <tcp_write+0x4ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80138c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138ce:	e01e      	b.n	801390e <tcp_write+0x4da>
      p->tot_len += oversize_used;
 80138d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d2:	891a      	ldrh	r2, [r3, #8]
 80138d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138d6:	4413      	add	r3, r2
 80138d8:	b29a      	uxth	r2, r3
 80138da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138dc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80138de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d110      	bne.n	8013908 <tcp_write+0x4d4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80138e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138ec:	8952      	ldrh	r2, [r2, #10]
 80138ee:	4413      	add	r3, r2
 80138f0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80138f2:	68b9      	ldr	r1, [r7, #8]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f002 faa2 	bl	8015e3e <memcpy>
        p->len += oversize_used;
 80138fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fc:	895a      	ldrh	r2, [r3, #10]
 80138fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013900:	4413      	add	r3, r2
 8013902:	b29a      	uxth	r2, r3
 8013904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013906:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013910:	2b00      	cmp	r3, #0
 8013912:	d1dd      	bne.n	80138d0 <tcp_write+0x49c>
      }
    }
    last_unsent->len += oversize_used;
 8013914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013916:	891a      	ldrh	r2, [r3, #8]
 8013918:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801391a:	4413      	add	r3, r2
 801391c:	b29a      	uxth	r2, r3
 801391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013920:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013922:	8a7a      	ldrh	r2, [r7, #18]
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801392a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801392c:	2b00      	cmp	r3, #0
 801392e:	d018      	beq.n	8013962 <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013932:	2b00      	cmp	r3, #0
 8013934:	d106      	bne.n	8013944 <tcp_write+0x510>
 8013936:	4b2a      	ldr	r3, [pc, #168]	; (80139e0 <tcp_write+0x5ac>)
 8013938:	f240 22e1 	movw	r2, #737	; 0x2e1
 801393c:	492d      	ldr	r1, [pc, #180]	; (80139f4 <tcp_write+0x5c0>)
 801393e:	482a      	ldr	r0, [pc, #168]	; (80139e8 <tcp_write+0x5b4>)
 8013940:	f002 faaa 	bl	8015e98 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801394a:	4618      	mov	r0, r3
 801394c:	f7fa fe7c 	bl	800e648 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013952:	891a      	ldrh	r2, [r3, #8]
 8013954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013956:	891b      	ldrh	r3, [r3, #8]
 8013958:	4413      	add	r3, r2
 801395a:	b29a      	uxth	r2, r3
 801395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801395e:	811a      	strh	r2, [r3, #8]
 8013960:	e037      	b.n	80139d2 <tcp_write+0x59e>
  } else if (extendlen > 0) {
 8013962:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013964:	2b00      	cmp	r3, #0
 8013966:	d034      	beq.n	80139d2 <tcp_write+0x59e>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801396a:	2b00      	cmp	r3, #0
 801396c:	d003      	beq.n	8013976 <tcp_write+0x542>
 801396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d106      	bne.n	8013984 <tcp_write+0x550>
 8013976:	4b1a      	ldr	r3, [pc, #104]	; (80139e0 <tcp_write+0x5ac>)
 8013978:	f240 22e7 	movw	r2, #743	; 0x2e7
 801397c:	491e      	ldr	r1, [pc, #120]	; (80139f8 <tcp_write+0x5c4>)
 801397e:	481a      	ldr	r0, [pc, #104]	; (80139e8 <tcp_write+0x5b4>)
 8013980:	f002 fa8a 	bl	8015e98 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	62bb      	str	r3, [r7, #40]	; 0x28
 801398a:	e009      	b.n	80139a0 <tcp_write+0x56c>
      p->tot_len += extendlen;
 801398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398e:	891a      	ldrh	r2, [r3, #8]
 8013990:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013992:	4413      	add	r3, r2
 8013994:	b29a      	uxth	r2, r3
 8013996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013998:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	62bb      	str	r3, [r7, #40]	; 0x28
 80139a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1f1      	bne.n	801398c <tcp_write+0x558>
    }
    p->tot_len += extendlen;
 80139a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139aa:	891a      	ldrh	r2, [r3, #8]
 80139ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139ae:	4413      	add	r3, r2
 80139b0:	b29a      	uxth	r2, r3
 80139b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80139b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b8:	895a      	ldrh	r2, [r3, #10]
 80139ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139bc:	4413      	add	r3, r2
 80139be:	b29a      	uxth	r2, r3
 80139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80139c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139c6:	891a      	ldrh	r2, [r3, #8]
 80139c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139ca:	4413      	add	r3, r2
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80139d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d111      	bne.n	80139fc <tcp_write+0x5c8>
    pcb->unsent = queue;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80139de:	e010      	b.n	8013a02 <tcp_write+0x5ce>
 80139e0:	08019f08 	.word	0x08019f08
 80139e4:	0801a1a8 	.word	0x0801a1a8
 80139e8:	08019f5c 	.word	0x08019f5c
 80139ec:	0801a1e8 	.word	0x0801a1e8
 80139f0:	0801a1f8 	.word	0x0801a1f8
 80139f4:	0801a20c 	.word	0x0801a20c
 80139f8:	0801a244 	.word	0x0801a244
  } else {
    last_unsent->next = queue;
 80139fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a00:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a06:	88fb      	ldrh	r3, [r7, #6]
 8013a08:	441a      	add	r2, r3
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013a14:	88fb      	ldrh	r3, [r7, #6]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013a26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d00e      	beq.n	8013a52 <tcp_write+0x61e>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d10a      	bne.n	8013a52 <tcp_write+0x61e>
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d106      	bne.n	8013a52 <tcp_write+0x61e>
 8013a44:	4b2b      	ldr	r3, [pc, #172]	; (8013af4 <tcp_write+0x6c0>)
 8013a46:	f240 3213 	movw	r2, #787	; 0x313
 8013a4a:	492b      	ldr	r1, [pc, #172]	; (8013af8 <tcp_write+0x6c4>)
 8013a4c:	482b      	ldr	r0, [pc, #172]	; (8013afc <tcp_write+0x6c8>)
 8013a4e:	f002 fa23 	bl	8015e98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d015      	beq.n	8013a84 <tcp_write+0x650>
 8013a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d011      	beq.n	8013a84 <tcp_write+0x650>
 8013a60:	797b      	ldrb	r3, [r7, #5]
 8013a62:	f003 0302 	and.w	r3, r3, #2
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d10c      	bne.n	8013a84 <tcp_write+0x650>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a6c:	68dc      	ldr	r4, [r3, #12]
 8013a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a70:	68db      	ldr	r3, [r3, #12]
 8013a72:	899b      	ldrh	r3, [r3, #12]
 8013a74:	b29d      	uxth	r5, r3
 8013a76:	2008      	movs	r0, #8
 8013a78:	f7f5 fe94 	bl	80097a4 <lwip_htons>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	432b      	orrs	r3, r5
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8013a84:	2300      	movs	r3, #0
 8013a86:	e031      	b.n	8013aec <tcp_write+0x6b8>
          goto memerr;
 8013a88:	bf00      	nop
 8013a8a:	e006      	b.n	8013a9a <tcp_write+0x666>
            goto memerr;
 8013a8c:	bf00      	nop
 8013a8e:	e004      	b.n	8013a9a <tcp_write+0x666>
        goto memerr;
 8013a90:	bf00      	nop
 8013a92:	e002      	b.n	8013a9a <tcp_write+0x666>
        goto memerr;
 8013a94:	bf00      	nop
 8013a96:	e000      	b.n	8013a9a <tcp_write+0x666>
      goto memerr;
 8013a98:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	8b5b      	ldrh	r3, [r3, #26]
 8013a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d002      	beq.n	8013ab4 <tcp_write+0x680>
    pbuf_free(concat_p);
 8013aae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013ab0:	f7fa fd08 	bl	800e4c4 <pbuf_free>
  }
  if (queue != NULL) {
 8013ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d002      	beq.n	8013ac0 <tcp_write+0x68c>
    tcp_segs_free(queue);
 8013aba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013abc:	f7fc fb7e 	bl	80101bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00e      	beq.n	8013ae8 <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d10a      	bne.n	8013ae8 <tcp_write+0x6b4>
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d106      	bne.n	8013ae8 <tcp_write+0x6b4>
 8013ada:	4b06      	ldr	r3, [pc, #24]	; (8013af4 <tcp_write+0x6c0>)
 8013adc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8013ae0:	4905      	ldr	r1, [pc, #20]	; (8013af8 <tcp_write+0x6c4>)
 8013ae2:	4806      	ldr	r0, [pc, #24]	; (8013afc <tcp_write+0x6c8>)
 8013ae4:	f002 f9d8 	bl	8015e98 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3758      	adds	r7, #88	; 0x58
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bdb0      	pop	{r4, r5, r7, pc}
 8013af4:	08019f08 	.word	0x08019f08
 8013af8:	0801a27c 	.word	0x0801a27c
 8013afc:	08019f5c 	.word	0x08019f5c

08013b00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013b00:	b5b0      	push	{r4, r5, r7, lr}
 8013b02:	b08a      	sub	sp, #40	; 0x28
 8013b04:	af02      	add	r7, sp, #8
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	61fb      	str	r3, [r7, #28]
 8013b10:	2300      	movs	r3, #0
 8013b12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013b14:	2300      	movs	r3, #0
 8013b16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d106      	bne.n	8013b2c <tcp_split_unsent_seg+0x2c>
 8013b1e:	4b96      	ldr	r3, [pc, #600]	; (8013d78 <tcp_split_unsent_seg+0x278>)
 8013b20:	f240 324b 	movw	r2, #843	; 0x34b
 8013b24:	4995      	ldr	r1, [pc, #596]	; (8013d7c <tcp_split_unsent_seg+0x27c>)
 8013b26:	4896      	ldr	r0, [pc, #600]	; (8013d80 <tcp_split_unsent_seg+0x280>)
 8013b28:	f002 f9b6 	bl	8015e98 <iprintf>

  useg = pcb->unsent;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d102      	bne.n	8013b3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013b38:	f04f 33ff 	mov.w	r3, #4294967295
 8013b3c:	e118      	b.n	8013d70 <tcp_split_unsent_seg+0x270>
  }

  if (split == 0) {
 8013b3e:	887b      	ldrh	r3, [r7, #2]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d109      	bne.n	8013b58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013b44:	4b8c      	ldr	r3, [pc, #560]	; (8013d78 <tcp_split_unsent_seg+0x278>)
 8013b46:	f240 3253 	movw	r2, #851	; 0x353
 8013b4a:	498e      	ldr	r1, [pc, #568]	; (8013d84 <tcp_split_unsent_seg+0x284>)
 8013b4c:	488c      	ldr	r0, [pc, #560]	; (8013d80 <tcp_split_unsent_seg+0x280>)
 8013b4e:	f002 f9a3 	bl	8015e98 <iprintf>
    return ERR_VAL;
 8013b52:	f06f 0305 	mvn.w	r3, #5
 8013b56:	e10b      	b.n	8013d70 <tcp_split_unsent_seg+0x270>
  }

  if (useg->len <= split) {
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	891b      	ldrh	r3, [r3, #8]
 8013b5c:	887a      	ldrh	r2, [r7, #2]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d301      	bcc.n	8013b66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e104      	b.n	8013d70 <tcp_split_unsent_seg+0x270>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b6a:	887a      	ldrh	r2, [r7, #2]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d906      	bls.n	8013b7e <tcp_split_unsent_seg+0x7e>
 8013b70:	4b81      	ldr	r3, [pc, #516]	; (8013d78 <tcp_split_unsent_seg+0x278>)
 8013b72:	f240 325b 	movw	r2, #859	; 0x35b
 8013b76:	4984      	ldr	r1, [pc, #528]	; (8013d88 <tcp_split_unsent_seg+0x288>)
 8013b78:	4881      	ldr	r0, [pc, #516]	; (8013d80 <tcp_split_unsent_seg+0x280>)
 8013b7a:	f002 f98d 	bl	8015e98 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	891b      	ldrh	r3, [r3, #8]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d106      	bne.n	8013b94 <tcp_split_unsent_seg+0x94>
 8013b86:	4b7c      	ldr	r3, [pc, #496]	; (8013d78 <tcp_split_unsent_seg+0x278>)
 8013b88:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b8c:	497f      	ldr	r1, [pc, #508]	; (8013d8c <tcp_split_unsent_seg+0x28c>)
 8013b8e:	487c      	ldr	r0, [pc, #496]	; (8013d80 <tcp_split_unsent_seg+0x280>)
 8013b90:	f002 f982 	bl	8015e98 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	7a9b      	ldrb	r3, [r3, #10]
 8013b98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	f003 0301 	and.w	r3, r3, #1
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d001      	beq.n	8013ba8 <tcp_split_unsent_seg+0xa8>
 8013ba4:	2304      	movs	r3, #4
 8013ba6:	e000      	b.n	8013baa <tcp_split_unsent_seg+0xaa>
 8013ba8:	2300      	movs	r3, #0
 8013baa:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	891a      	ldrh	r2, [r3, #8]
 8013bb0:	887b      	ldrh	r3, [r7, #2]
 8013bb2:	1ad3      	subs	r3, r2, r3
 8013bb4:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013bb6:	7bbb      	ldrb	r3, [r7, #14]
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	89bb      	ldrh	r3, [r7, #12]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	b29b      	uxth	r3, r3
 8013bc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	2036      	movs	r0, #54	; 0x36
 8013bc8:	f7fa f968 	bl	800de9c <pbuf_alloc>
 8013bcc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f000 80b6 	beq.w	8013d42 <tcp_split_unsent_seg+0x242>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	891a      	ldrh	r2, [r3, #8]
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	891b      	ldrh	r3, [r3, #8]
 8013be0:	1ad3      	subs	r3, r2, r3
 8013be2:	b29a      	uxth	r2, r3
 8013be4:	887b      	ldrh	r3, [r7, #2]
 8013be6:	4413      	add	r3, r2
 8013be8:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	6858      	ldr	r0, [r3, #4]
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	685a      	ldr	r2, [r3, #4]
 8013bf2:	7bbb      	ldrb	r3, [r7, #14]
 8013bf4:	18d1      	adds	r1, r2, r3
 8013bf6:	897b      	ldrh	r3, [r7, #10]
 8013bf8:	89ba      	ldrh	r2, [r7, #12]
 8013bfa:	f7fa fe5d 	bl	800e8b8 <pbuf_copy_partial>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	89bb      	ldrh	r3, [r7, #12]
 8013c04:	4293      	cmp	r3, r2
 8013c06:	f040 809e 	bne.w	8013d46 <tcp_split_unsent_seg+0x246>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	899b      	ldrh	r3, [r3, #12]
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7f5 fdc6 	bl	80097a4 <lwip_htons>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	b2db      	uxtb	r3, r3
 8013c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c20:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013c22:	2300      	movs	r3, #0
 8013c24:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013c26:	7efb      	ldrb	r3, [r7, #27]
 8013c28:	f003 0308 	and.w	r3, r3, #8
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d007      	beq.n	8013c40 <tcp_split_unsent_seg+0x140>
    split_flags &= ~TCP_PSH;
 8013c30:	7efb      	ldrb	r3, [r7, #27]
 8013c32:	f023 0308 	bic.w	r3, r3, #8
 8013c36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013c38:	7ebb      	ldrb	r3, [r7, #26]
 8013c3a:	f043 0308 	orr.w	r3, r3, #8
 8013c3e:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013c40:	7efb      	ldrb	r3, [r7, #27]
 8013c42:	f003 0301 	and.w	r3, r3, #1
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d007      	beq.n	8013c5a <tcp_split_unsent_seg+0x15a>
    split_flags &= ~TCP_FIN;
 8013c4a:	7efb      	ldrb	r3, [r7, #27]
 8013c4c:	f023 0301 	bic.w	r3, r3, #1
 8013c50:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013c52:	7ebb      	ldrb	r3, [r7, #26]
 8013c54:	f043 0301 	orr.w	r3, r3, #1
 8013c58:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	68db      	ldr	r3, [r3, #12]
 8013c5e:	685b      	ldr	r3, [r3, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7f5 fdb4 	bl	80097ce <lwip_htonl>
 8013c66:	4602      	mov	r2, r0
 8013c68:	887b      	ldrh	r3, [r7, #2]
 8013c6a:	18d1      	adds	r1, r2, r3
 8013c6c:	7eba      	ldrb	r2, [r7, #26]
 8013c6e:	7bfb      	ldrb	r3, [r7, #15]
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	460b      	mov	r3, r1
 8013c74:	6939      	ldr	r1, [r7, #16]
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7ff fa48 	bl	801310c <tcp_create_segment>
 8013c7c:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c7e:	69fb      	ldr	r3, [r7, #28]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d062      	beq.n	8013d4a <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7fa fca3 	bl	800e5d4 <pbuf_clen>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	461a      	mov	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c98:	1a9b      	subs	r3, r3, r2
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	6858      	ldr	r0, [r3, #4]
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	891a      	ldrh	r2, [r3, #8]
 8013cac:	89bb      	ldrh	r3, [r7, #12]
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	f7fa fa4c 	bl	800e150 <pbuf_realloc>
  useg->len -= remainder;
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	891a      	ldrh	r2, [r3, #8]
 8013cbc:	89bb      	ldrh	r3, [r7, #12]
 8013cbe:	1ad3      	subs	r3, r2, r3
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	68dc      	ldr	r4, [r3, #12]
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	899b      	ldrh	r3, [r3, #12]
 8013cd0:	b29d      	uxth	r5, r3
 8013cd2:	7efb      	ldrb	r3, [r7, #27]
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f5 fd64 	bl	80097a4 <lwip_htons>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	432b      	orrs	r3, r5
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fa fc73 	bl	800e5d4 <pbuf_clen>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cf8:	4413      	add	r3, r2
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fa fc64 	bl	800e5d4 <pbuf_clen>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	461a      	mov	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d16:	4413      	add	r3, r2
 8013d18:	b29a      	uxth	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	69fa      	ldr	r2, [r7, #28]
 8013d2c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013d2e:	69fb      	ldr	r3, [r7, #28]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d103      	bne.n	8013d3e <tcp_split_unsent_seg+0x23e>
    pcb->unsent_oversize = 0;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e016      	b.n	8013d70 <tcp_split_unsent_seg+0x270>
    goto memerr;
 8013d42:	bf00      	nop
 8013d44:	e002      	b.n	8013d4c <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8013d46:	bf00      	nop
 8013d48:	e000      	b.n	8013d4c <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8013d4a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d006      	beq.n	8013d60 <tcp_split_unsent_seg+0x260>
 8013d52:	4b09      	ldr	r3, [pc, #36]	; (8013d78 <tcp_split_unsent_seg+0x278>)
 8013d54:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013d58:	490d      	ldr	r1, [pc, #52]	; (8013d90 <tcp_split_unsent_seg+0x290>)
 8013d5a:	4809      	ldr	r0, [pc, #36]	; (8013d80 <tcp_split_unsent_seg+0x280>)
 8013d5c:	f002 f89c 	bl	8015e98 <iprintf>
  if (p != NULL) {
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d002      	beq.n	8013d6c <tcp_split_unsent_seg+0x26c>
    pbuf_free(p);
 8013d66:	6938      	ldr	r0, [r7, #16]
 8013d68:	f7fa fbac 	bl	800e4c4 <pbuf_free>
  }

  return ERR_MEM;
 8013d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3720      	adds	r7, #32
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bdb0      	pop	{r4, r5, r7, pc}
 8013d78:	08019f08 	.word	0x08019f08
 8013d7c:	0801a29c 	.word	0x0801a29c
 8013d80:	08019f5c 	.word	0x08019f5c
 8013d84:	0801a2c0 	.word	0x0801a2c0
 8013d88:	0801a2e4 	.word	0x0801a2e4
 8013d8c:	0801a2f4 	.word	0x0801a2f4
 8013d90:	0801a304 	.word	0x0801a304

08013d94 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013d94:	b5b0      	push	{r4, r5, r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d106      	bne.n	8013db0 <tcp_send_fin+0x1c>
 8013da2:	4b21      	ldr	r3, [pc, #132]	; (8013e28 <tcp_send_fin+0x94>)
 8013da4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013da8:	4920      	ldr	r1, [pc, #128]	; (8013e2c <tcp_send_fin+0x98>)
 8013daa:	4821      	ldr	r0, [pc, #132]	; (8013e30 <tcp_send_fin+0x9c>)
 8013dac:	f002 f874 	bl	8015e98 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d02d      	beq.n	8013e14 <tcp_send_fin+0x80>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dbc:	60fb      	str	r3, [r7, #12]
 8013dbe:	e002      	b.n	8013dc6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d1f8      	bne.n	8013dc0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	899b      	ldrh	r3, [r3, #12]
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7f5 fce4 	bl	80097a4 <lwip_htons>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	f003 0307 	and.w	r3, r3, #7
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d115      	bne.n	8013e14 <tcp_send_fin+0x80>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	68dc      	ldr	r4, [r3, #12]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	68db      	ldr	r3, [r3, #12]
 8013df0:	899b      	ldrh	r3, [r3, #12]
 8013df2:	b29d      	uxth	r5, r3
 8013df4:	2001      	movs	r0, #1
 8013df6:	f7f5 fcd5 	bl	80097a4 <lwip_htons>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	432b      	orrs	r3, r5
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	8b5b      	ldrh	r3, [r3, #26]
 8013e06:	f043 0320 	orr.w	r3, r3, #32
 8013e0a:	b29a      	uxth	r2, r3
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013e10:	2300      	movs	r3, #0
 8013e12:	e004      	b.n	8013e1e <tcp_send_fin+0x8a>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013e14:	2101      	movs	r1, #1
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f000 f80c 	bl	8013e34 <tcp_enqueue_flags>
 8013e1c:	4603      	mov	r3, r0
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bdb0      	pop	{r4, r5, r7, pc}
 8013e26:	bf00      	nop
 8013e28:	08019f08 	.word	0x08019f08
 8013e2c:	0801a310 	.word	0x0801a310
 8013e30:	08019f5c 	.word	0x08019f5c

08013e34 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b08a      	sub	sp, #40	; 0x28
 8013e38:	af02      	add	r7, sp, #8
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013e40:	2300      	movs	r3, #0
 8013e42:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013e44:	2300      	movs	r3, #0
 8013e46:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e48:	78fb      	ldrb	r3, [r7, #3]
 8013e4a:	f003 0303 	and.w	r3, r3, #3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d106      	bne.n	8013e60 <tcp_enqueue_flags+0x2c>
 8013e52:	4b68      	ldr	r3, [pc, #416]	; (8013ff4 <tcp_enqueue_flags+0x1c0>)
 8013e54:	f240 4212 	movw	r2, #1042	; 0x412
 8013e58:	4967      	ldr	r1, [pc, #412]	; (8013ff8 <tcp_enqueue_flags+0x1c4>)
 8013e5a:	4868      	ldr	r0, [pc, #416]	; (8013ffc <tcp_enqueue_flags+0x1c8>)
 8013e5c:	f002 f81c 	bl	8015e98 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <tcp_enqueue_flags+0x40>
 8013e66:	4b63      	ldr	r3, [pc, #396]	; (8013ff4 <tcp_enqueue_flags+0x1c0>)
 8013e68:	f240 4213 	movw	r2, #1043	; 0x413
 8013e6c:	4964      	ldr	r1, [pc, #400]	; (8014000 <tcp_enqueue_flags+0x1cc>)
 8013e6e:	4863      	ldr	r0, [pc, #396]	; (8013ffc <tcp_enqueue_flags+0x1c8>)
 8013e70:	f002 f812 	bl	8015e98 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e74:	78fb      	ldrb	r3, [r7, #3]
 8013e76:	f003 0302 	and.w	r3, r3, #2
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d001      	beq.n	8013e82 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e7e:	2301      	movs	r3, #1
 8013e80:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e82:	7ffb      	ldrb	r3, [r7, #31]
 8013e84:	f003 0301 	and.w	r3, r3, #1
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d001      	beq.n	8013e90 <tcp_enqueue_flags+0x5c>
 8013e8c:	2304      	movs	r3, #4
 8013e8e:	e000      	b.n	8013e92 <tcp_enqueue_flags+0x5e>
 8013e90:	2300      	movs	r3, #0
 8013e92:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e94:	7dfb      	ldrb	r3, [r7, #23]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	2036      	movs	r0, #54	; 0x36
 8013ea0:	f7f9 fffc 	bl	800de9c <pbuf_alloc>
 8013ea4:	6138      	str	r0, [r7, #16]
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d109      	bne.n	8013ec0 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	8b5b      	ldrh	r3, [r3, #26]
 8013eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013eba:	f04f 33ff 	mov.w	r3, #4294967295
 8013ebe:	e095      	b.n	8013fec <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	895a      	ldrh	r2, [r3, #10]
 8013ec4:	7dfb      	ldrb	r3, [r7, #23]
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d206      	bcs.n	8013eda <tcp_enqueue_flags+0xa6>
 8013ecc:	4b49      	ldr	r3, [pc, #292]	; (8013ff4 <tcp_enqueue_flags+0x1c0>)
 8013ece:	f240 423a 	movw	r2, #1082	; 0x43a
 8013ed2:	494c      	ldr	r1, [pc, #304]	; (8014004 <tcp_enqueue_flags+0x1d0>)
 8013ed4:	4849      	ldr	r0, [pc, #292]	; (8013ffc <tcp_enqueue_flags+0x1c8>)
 8013ed6:	f001 ffdf 	bl	8015e98 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013ede:	78fa      	ldrb	r2, [r7, #3]
 8013ee0:	7ffb      	ldrb	r3, [r7, #31]
 8013ee2:	9300      	str	r3, [sp, #0]
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	6939      	ldr	r1, [r7, #16]
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f7ff f90f 	bl	801310c <tcp_create_segment>
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d109      	bne.n	8013f0a <tcp_enqueue_flags+0xd6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	8b5b      	ldrh	r3, [r3, #26]
 8013efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f04:	f04f 33ff 	mov.w	r3, #4294967295
 8013f08:	e070      	b.n	8013fec <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	f003 0303 	and.w	r3, r3, #3
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d006      	beq.n	8013f24 <tcp_enqueue_flags+0xf0>
 8013f16:	4b37      	ldr	r3, [pc, #220]	; (8013ff4 <tcp_enqueue_flags+0x1c0>)
 8013f18:	f240 4242 	movw	r2, #1090	; 0x442
 8013f1c:	493a      	ldr	r1, [pc, #232]	; (8014008 <tcp_enqueue_flags+0x1d4>)
 8013f1e:	4837      	ldr	r0, [pc, #220]	; (8013ffc <tcp_enqueue_flags+0x1c8>)
 8013f20:	f001 ffba 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	891b      	ldrh	r3, [r3, #8]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d006      	beq.n	8013f3a <tcp_enqueue_flags+0x106>
 8013f2c:	4b31      	ldr	r3, [pc, #196]	; (8013ff4 <tcp_enqueue_flags+0x1c0>)
 8013f2e:	f240 4243 	movw	r2, #1091	; 0x443
 8013f32:	4936      	ldr	r1, [pc, #216]	; (801400c <tcp_enqueue_flags+0x1d8>)
 8013f34:	4831      	ldr	r0, [pc, #196]	; (8013ffc <tcp_enqueue_flags+0x1c8>)
 8013f36:	f001 ffaf 	bl	8015e98 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d103      	bne.n	8013f4a <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	66da      	str	r2, [r3, #108]	; 0x6c
 8013f48:	e00d      	b.n	8013f66 <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f4e:	61bb      	str	r3, [r7, #24]
 8013f50:	e002      	b.n	8013f58 <tcp_enqueue_flags+0x124>
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	61bb      	str	r3, [r7, #24]
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1f8      	bne.n	8013f52 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 8013f60:	69bb      	ldr	r3, [r7, #24]
 8013f62:	68fa      	ldr	r2, [r7, #12]
 8013f64:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f6e:	78fb      	ldrb	r3, [r7, #3]
 8013f70:	f003 0302 	and.w	r3, r3, #2
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d104      	bne.n	8013f82 <tcp_enqueue_flags+0x14e>
 8013f78:	78fb      	ldrb	r3, [r7, #3]
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d004      	beq.n	8013f8c <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f86:	1c5a      	adds	r2, r3, #1
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f8c:	78fb      	ldrb	r3, [r7, #3]
 8013f8e:	f003 0301 	and.w	r3, r3, #1
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d006      	beq.n	8013fa4 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	8b5b      	ldrh	r3, [r3, #26]
 8013f9a:	f043 0320 	orr.w	r3, r3, #32
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7fa fb13 	bl	800e5d4 <pbuf_clen>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fb8:	4413      	add	r3, r2
 8013fba:	b29a      	uxth	r2, r3
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00e      	beq.n	8013fea <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d10a      	bne.n	8013fea <tcp_enqueue_flags+0x1b6>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d106      	bne.n	8013fea <tcp_enqueue_flags+0x1b6>
 8013fdc:	4b05      	ldr	r3, [pc, #20]	; (8013ff4 <tcp_enqueue_flags+0x1c0>)
 8013fde:	f240 4266 	movw	r2, #1126	; 0x466
 8013fe2:	490b      	ldr	r1, [pc, #44]	; (8014010 <tcp_enqueue_flags+0x1dc>)
 8013fe4:	4805      	ldr	r0, [pc, #20]	; (8013ffc <tcp_enqueue_flags+0x1c8>)
 8013fe6:	f001 ff57 	bl	8015e98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013fea:	2300      	movs	r3, #0
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3720      	adds	r7, #32
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	08019f08 	.word	0x08019f08
 8013ff8:	0801a32c 	.word	0x0801a32c
 8013ffc:	08019f5c 	.word	0x08019f5c
 8014000:	0801a384 	.word	0x0801a384
 8014004:	0801a3a4 	.word	0x0801a3a4
 8014008:	0801a3e0 	.word	0x0801a3e0
 801400c:	0801a3f8 	.word	0x0801a3f8
 8014010:	0801a424 	.word	0x0801a424

08014014 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014014:	b5b0      	push	{r4, r5, r7, lr}
 8014016:	b08a      	sub	sp, #40	; 0x28
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d106      	bne.n	8014030 <tcp_output+0x1c>
 8014022:	4ba0      	ldr	r3, [pc, #640]	; (80142a4 <tcp_output+0x290>)
 8014024:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014028:	499f      	ldr	r1, [pc, #636]	; (80142a8 <tcp_output+0x294>)
 801402a:	48a0      	ldr	r0, [pc, #640]	; (80142ac <tcp_output+0x298>)
 801402c:	f001 ff34 	bl	8015e98 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	7d1b      	ldrb	r3, [r3, #20]
 8014034:	2b01      	cmp	r3, #1
 8014036:	d106      	bne.n	8014046 <tcp_output+0x32>
 8014038:	4b9a      	ldr	r3, [pc, #616]	; (80142a4 <tcp_output+0x290>)
 801403a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801403e:	499c      	ldr	r1, [pc, #624]	; (80142b0 <tcp_output+0x29c>)
 8014040:	489a      	ldr	r0, [pc, #616]	; (80142ac <tcp_output+0x298>)
 8014042:	f001 ff29 	bl	8015e98 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014046:	4b9b      	ldr	r3, [pc, #620]	; (80142b4 <tcp_output+0x2a0>)
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	429a      	cmp	r2, r3
 801404e:	d101      	bne.n	8014054 <tcp_output+0x40>
    return ERR_OK;
 8014050:	2300      	movs	r3, #0
 8014052:	e1d0      	b.n	80143f6 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014060:	429a      	cmp	r2, r3
 8014062:	d203      	bcs.n	801406c <tcp_output+0x58>
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801406a:	e002      	b.n	8014072 <tcp_output+0x5e>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014072:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014078:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407c:	2b00      	cmp	r3, #0
 801407e:	d10b      	bne.n	8014098 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	8b5b      	ldrh	r3, [r3, #26]
 8014084:	f003 0302 	and.w	r3, r3, #2
 8014088:	2b00      	cmp	r3, #0
 801408a:	f000 81a9 	beq.w	80143e0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f000 fdde 	bl	8014c50 <tcp_send_empty_ack>
 8014094:	4603      	mov	r3, r0
 8014096:	e1ae      	b.n	80143f6 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014098:	6879      	ldr	r1, [r7, #4]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	3304      	adds	r3, #4
 801409e:	461a      	mov	r2, r3
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f7ff f817 	bl	80130d4 <tcp_route>
 80140a6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d102      	bne.n	80140b4 <tcp_output+0xa0>
    return ERR_RTE;
 80140ae:	f06f 0303 	mvn.w	r3, #3
 80140b2:	e1a0      	b.n	80143f6 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d003      	beq.n	80140c2 <tcp_output+0xae>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d111      	bne.n	80140e6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <tcp_output+0xba>
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	3304      	adds	r3, #4
 80140cc:	e000      	b.n	80140d0 <tcp_output+0xbc>
 80140ce:	2300      	movs	r3, #0
 80140d0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d102      	bne.n	80140de <tcp_output+0xca>
      return ERR_RTE;
 80140d8:	f06f 0303 	mvn.w	r3, #3
 80140dc:	e18b      	b.n	80143f6 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80140e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e8:	68db      	ldr	r3, [r3, #12]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7f5 fb6e 	bl	80097ce <lwip_htonl>
 80140f2:	4602      	mov	r2, r0
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140fc:	8912      	ldrh	r2, [r2, #8]
 80140fe:	441a      	add	r2, r3
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	429a      	cmp	r2, r3
 8014104:	d927      	bls.n	8014156 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801410c:	461a      	mov	r2, r3
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	429a      	cmp	r2, r3
 8014112:	d114      	bne.n	801413e <tcp_output+0x12a>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014118:	2b00      	cmp	r3, #0
 801411a:	d110      	bne.n	801413e <tcp_output+0x12a>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014122:	2b00      	cmp	r3, #0
 8014124:	d10b      	bne.n	801413e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2200      	movs	r2, #0
 801412a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2201      	movs	r2, #1
 8014132:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	8b5b      	ldrh	r3, [r3, #26]
 8014142:	f003 0302 	and.w	r3, r3, #2
 8014146:	2b00      	cmp	r3, #0
 8014148:	f000 814c 	beq.w	80143e4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fd7f 	bl	8014c50 <tcp_send_empty_ack>
 8014152:	4603      	mov	r3, r0
 8014154:	e14f      	b.n	80143f6 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014162:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014164:	6a3b      	ldr	r3, [r7, #32]
 8014166:	2b00      	cmp	r3, #0
 8014168:	f000 811b 	beq.w	80143a2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801416c:	e002      	b.n	8014174 <tcp_output+0x160>
 801416e:	6a3b      	ldr	r3, [r7, #32]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	623b      	str	r3, [r7, #32]
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d1f8      	bne.n	801416e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801417c:	e111      	b.n	80143a2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	899b      	ldrh	r3, [r3, #12]
 8014184:	b29b      	uxth	r3, r3
 8014186:	4618      	mov	r0, r3
 8014188:	f7f5 fb0c 	bl	80097a4 <lwip_htons>
 801418c:	4603      	mov	r3, r0
 801418e:	b2db      	uxtb	r3, r3
 8014190:	f003 0304 	and.w	r3, r3, #4
 8014194:	2b00      	cmp	r3, #0
 8014196:	d006      	beq.n	80141a6 <tcp_output+0x192>
 8014198:	4b42      	ldr	r3, [pc, #264]	; (80142a4 <tcp_output+0x290>)
 801419a:	f240 5237 	movw	r2, #1335	; 0x537
 801419e:	4946      	ldr	r1, [pc, #280]	; (80142b8 <tcp_output+0x2a4>)
 80141a0:	4842      	ldr	r0, [pc, #264]	; (80142ac <tcp_output+0x298>)
 80141a2:	f001 fe79 	bl	8015e98 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d01f      	beq.n	80141ee <tcp_output+0x1da>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	8b5b      	ldrh	r3, [r3, #26]
 80141b2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d119      	bne.n	80141ee <tcp_output+0x1da>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d00b      	beq.n	80141da <tcp_output+0x1c6>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d110      	bne.n	80141ee <tcp_output+0x1da>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141d0:	891a      	ldrh	r2, [r3, #8]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d209      	bcs.n	80141ee <tcp_output+0x1da>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d004      	beq.n	80141ee <tcp_output+0x1da>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141ea:	2b08      	cmp	r3, #8
 80141ec:	d901      	bls.n	80141f2 <tcp_output+0x1de>
 80141ee:	2301      	movs	r3, #1
 80141f0:	e000      	b.n	80141f4 <tcp_output+0x1e0>
 80141f2:	2300      	movs	r3, #0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d106      	bne.n	8014206 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	8b5b      	ldrh	r3, [r3, #26]
 80141fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014200:	2b00      	cmp	r3, #0
 8014202:	f000 80e3 	beq.w	80143cc <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	7d1b      	ldrb	r3, [r3, #20]
 801420a:	2b02      	cmp	r3, #2
 801420c:	d00c      	beq.n	8014228 <tcp_output+0x214>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014210:	68dc      	ldr	r4, [r3, #12]
 8014212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014214:	68db      	ldr	r3, [r3, #12]
 8014216:	899b      	ldrh	r3, [r3, #12]
 8014218:	b29d      	uxth	r5, r3
 801421a:	2010      	movs	r0, #16
 801421c:	f7f5 fac2 	bl	80097a4 <lwip_htons>
 8014220:	4603      	mov	r3, r0
 8014222:	432b      	orrs	r3, r5
 8014224:	b29b      	uxth	r3, r3
 8014226:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014228:	697a      	ldr	r2, [r7, #20]
 801422a:	6879      	ldr	r1, [r7, #4]
 801422c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801422e:	f000 f907 	bl	8014440 <tcp_output_segment>
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d009      	beq.n	8014252 <tcp_output+0x23e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
      return err;
 801424c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014250:	e0d1      	b.n	80143f6 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	7d1b      	ldrb	r3, [r3, #20]
 801425e:	2b02      	cmp	r3, #2
 8014260:	d006      	beq.n	8014270 <tcp_output+0x25c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	8b5b      	ldrh	r3, [r3, #26]
 8014266:	f023 0303 	bic.w	r3, r3, #3
 801426a:	b29a      	uxth	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	4618      	mov	r0, r3
 8014278:	f7f5 faa9 	bl	80097ce <lwip_htonl>
 801427c:	4604      	mov	r4, r0
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	891b      	ldrh	r3, [r3, #8]
 8014282:	461d      	mov	r5, r3
 8014284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	899b      	ldrh	r3, [r3, #12]
 801428a:	b29b      	uxth	r3, r3
 801428c:	4618      	mov	r0, r3
 801428e:	f7f5 fa89 	bl	80097a4 <lwip_htons>
 8014292:	4603      	mov	r3, r0
 8014294:	b2db      	uxtb	r3, r3
 8014296:	f003 0303 	and.w	r3, r3, #3
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00e      	beq.n	80142bc <tcp_output+0x2a8>
 801429e:	2301      	movs	r3, #1
 80142a0:	e00d      	b.n	80142be <tcp_output+0x2aa>
 80142a2:	bf00      	nop
 80142a4:	08019f08 	.word	0x08019f08
 80142a8:	0801a44c 	.word	0x0801a44c
 80142ac:	08019f5c 	.word	0x08019f5c
 80142b0:	0801a464 	.word	0x0801a464
 80142b4:	2000b6bc 	.word	0x2000b6bc
 80142b8:	0801a48c 	.word	0x0801a48c
 80142bc:	2300      	movs	r3, #0
 80142be:	442b      	add	r3, r5
 80142c0:	4423      	add	r3, r4
 80142c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	da02      	bge.n	80142d6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	68ba      	ldr	r2, [r7, #8]
 80142d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80142d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	461c      	mov	r4, r3
 80142dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	899b      	ldrh	r3, [r3, #12]
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7f5 fa5d 	bl	80097a4 <lwip_htons>
 80142ea:	4603      	mov	r3, r0
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	f003 0303 	and.w	r3, r3, #3
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <tcp_output+0x2e6>
 80142f6:	2301      	movs	r3, #1
 80142f8:	e000      	b.n	80142fc <tcp_output+0x2e8>
 80142fa:	2300      	movs	r3, #0
 80142fc:	4423      	add	r3, r4
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d049      	beq.n	8014396 <tcp_output+0x382>
      seg->next = NULL;
 8014302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801430c:	2b00      	cmp	r3, #0
 801430e:	d105      	bne.n	801431c <tcp_output+0x308>
        pcb->unacked = seg;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014314:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014318:	623b      	str	r3, [r7, #32]
 801431a:	e03f      	b.n	801439c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	685b      	ldr	r3, [r3, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	f7f5 fa53 	bl	80097ce <lwip_htonl>
 8014328:	4604      	mov	r4, r0
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	f7f5 fa4c 	bl	80097ce <lwip_htonl>
 8014336:	4603      	mov	r3, r0
 8014338:	1ae3      	subs	r3, r4, r3
 801433a:	2b00      	cmp	r3, #0
 801433c:	da24      	bge.n	8014388 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3370      	adds	r3, #112	; 0x70
 8014342:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014344:	e002      	b.n	801434c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d011      	beq.n	8014378 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	4618      	mov	r0, r3
 801435e:	f7f5 fa36 	bl	80097ce <lwip_htonl>
 8014362:	4604      	mov	r4, r0
 8014364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	f7f5 fa2f 	bl	80097ce <lwip_htonl>
 8014370:	4603      	mov	r3, r0
 8014372:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014374:	2b00      	cmp	r3, #0
 8014376:	dbe6      	blt.n	8014346 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	e009      	b.n	801439c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801438c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	623b      	str	r3, [r7, #32]
 8014394:	e002      	b.n	801439c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014398:	f7fb ff24 	bl	80101e4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d012      	beq.n	80143ce <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80143a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f5 fa0d 	bl	80097ce <lwip_htonl>
 80143b4:	4602      	mov	r2, r0
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ba:	1ad3      	subs	r3, r2, r3
 80143bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143be:	8912      	ldrh	r2, [r2, #8]
 80143c0:	441a      	add	r2, r3
  while (seg != NULL &&
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	f67f aeda 	bls.w	801417e <tcp_output+0x16a>
 80143ca:	e000      	b.n	80143ce <tcp_output+0x3ba>
      break;
 80143cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d107      	bne.n	80143e6 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2200      	movs	r2, #0
 80143da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80143de:	e002      	b.n	80143e6 <tcp_output+0x3d2>
    goto output_done;
 80143e0:	bf00      	nop
 80143e2:	e000      	b.n	80143e6 <tcp_output+0x3d2>
    goto output_done;
 80143e4:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	8b5b      	ldrh	r3, [r3, #26]
 80143ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3728      	adds	r7, #40	; 0x28
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bdb0      	pop	{r4, r5, r7, pc}
 80143fe:	bf00      	nop

08014400 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d106      	bne.n	801441c <tcp_output_segment_busy+0x1c>
 801440e:	4b09      	ldr	r3, [pc, #36]	; (8014434 <tcp_output_segment_busy+0x34>)
 8014410:	f240 529a 	movw	r2, #1434	; 0x59a
 8014414:	4908      	ldr	r1, [pc, #32]	; (8014438 <tcp_output_segment_busy+0x38>)
 8014416:	4809      	ldr	r0, [pc, #36]	; (801443c <tcp_output_segment_busy+0x3c>)
 8014418:	f001 fd3e 	bl	8015e98 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	7b9b      	ldrb	r3, [r3, #14]
 8014422:	2b01      	cmp	r3, #1
 8014424:	d001      	beq.n	801442a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014426:	2301      	movs	r3, #1
 8014428:	e000      	b.n	801442c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801442a:	2300      	movs	r3, #0
}
 801442c:	4618      	mov	r0, r3
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	08019f08 	.word	0x08019f08
 8014438:	0801a4a4 	.word	0x0801a4a4
 801443c:	08019f5c 	.word	0x08019f5c

08014440 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014440:	b5b0      	push	{r4, r5, r7, lr}
 8014442:	b08c      	sub	sp, #48	; 0x30
 8014444:	af04      	add	r7, sp, #16
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d106      	bne.n	8014460 <tcp_output_segment+0x20>
 8014452:	4b66      	ldr	r3, [pc, #408]	; (80145ec <tcp_output_segment+0x1ac>)
 8014454:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014458:	4965      	ldr	r1, [pc, #404]	; (80145f0 <tcp_output_segment+0x1b0>)
 801445a:	4866      	ldr	r0, [pc, #408]	; (80145f4 <tcp_output_segment+0x1b4>)
 801445c:	f001 fd1c 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d106      	bne.n	8014474 <tcp_output_segment+0x34>
 8014466:	4b61      	ldr	r3, [pc, #388]	; (80145ec <tcp_output_segment+0x1ac>)
 8014468:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801446c:	4962      	ldr	r1, [pc, #392]	; (80145f8 <tcp_output_segment+0x1b8>)
 801446e:	4861      	ldr	r0, [pc, #388]	; (80145f4 <tcp_output_segment+0x1b4>)
 8014470:	f001 fd12 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d106      	bne.n	8014488 <tcp_output_segment+0x48>
 801447a:	4b5c      	ldr	r3, [pc, #368]	; (80145ec <tcp_output_segment+0x1ac>)
 801447c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014480:	495e      	ldr	r1, [pc, #376]	; (80145fc <tcp_output_segment+0x1bc>)
 8014482:	485c      	ldr	r0, [pc, #368]	; (80145f4 <tcp_output_segment+0x1b4>)
 8014484:	f001 fd08 	bl	8015e98 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014488:	68f8      	ldr	r0, [r7, #12]
 801448a:	f7ff ffb9 	bl	8014400 <tcp_output_segment_busy>
 801448e:	4603      	mov	r3, r0
 8014490:	2b00      	cmp	r3, #0
 8014492:	d001      	beq.n	8014498 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014494:	2300      	movs	r3, #0
 8014496:	e0a4      	b.n	80145e2 <tcp_output_segment+0x1a2>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	68dc      	ldr	r4, [r3, #12]
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7f5 f994 	bl	80097ce <lwip_htonl>
 80144a6:	4603      	mov	r3, r0
 80144a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	68dc      	ldr	r4, [r3, #12]
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f5 f976 	bl	80097a4 <lwip_htons>
 80144b8:	4603      	mov	r3, r0
 80144ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c0:	68ba      	ldr	r2, [r7, #8]
 80144c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80144c4:	441a      	add	r2, r3
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	3314      	adds	r3, #20
 80144d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	7a9b      	ldrb	r3, [r3, #10]
 80144d6:	f003 0301 	and.w	r3, r3, #1
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d015      	beq.n	801450a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	3304      	adds	r3, #4
 80144e2:	461a      	mov	r2, r3
 80144e4:	6879      	ldr	r1, [r7, #4]
 80144e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80144ea:	f7fc fa2f 	bl	801094c <tcp_eff_send_mss_netif>
 80144ee:	4603      	mov	r3, r0
 80144f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80144f2:	8b7b      	ldrh	r3, [r7, #26]
 80144f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7f5 f968 	bl	80097ce <lwip_htonl>
 80144fe:	4602      	mov	r2, r0
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	3304      	adds	r3, #4
 8014508:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014510:	2b00      	cmp	r3, #0
 8014512:	da02      	bge.n	801451a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	2200      	movs	r2, #0
 8014518:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801451e:	2b00      	cmp	r3, #0
 8014520:	d10c      	bne.n	801453c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014522:	4b37      	ldr	r3, [pc, #220]	; (8014600 <tcp_output_segment+0x1c0>)
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	4618      	mov	r0, r3
 8014532:	f7f5 f94c 	bl	80097ce <lwip_htonl>
 8014536:	4602      	mov	r2, r0
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	461a      	mov	r2, r3
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	68fa      	ldr	r2, [r7, #12]
 8014552:	6852      	ldr	r2, [r2, #4]
 8014554:	8951      	ldrh	r1, [r2, #10]
 8014556:	8b3a      	ldrh	r2, [r7, #24]
 8014558:	1a8a      	subs	r2, r1, r2
 801455a:	b292      	uxth	r2, r2
 801455c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	68fa      	ldr	r2, [r7, #12]
 8014564:	6852      	ldr	r2, [r2, #4]
 8014566:	8911      	ldrh	r1, [r2, #8]
 8014568:	8b3a      	ldrh	r2, [r7, #24]
 801456a:	1a8a      	subs	r2, r1, r2
 801456c:	b292      	uxth	r2, r2
 801456e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	68d2      	ldr	r2, [r2, #12]
 8014578:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	68db      	ldr	r3, [r3, #12]
 801457e:	2200      	movs	r2, #0
 8014580:	741a      	strb	r2, [r3, #16]
 8014582:	2200      	movs	r2, #0
 8014584:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	f103 0214 	add.w	r2, r3, #20
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	7a9b      	ldrb	r3, [r3, #10]
 8014592:	f003 0301 	and.w	r3, r3, #1
 8014596:	2b00      	cmp	r3, #0
 8014598:	d001      	beq.n	801459e <tcp_output_segment+0x15e>
 801459a:	2304      	movs	r3, #4
 801459c:	e000      	b.n	80145a0 <tcp_output_segment+0x160>
 801459e:	2300      	movs	r3, #0
 80145a0:	441a      	add	r2, r3
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d006      	beq.n	80145b6 <tcp_output_segment+0x176>
 80145a8:	4b10      	ldr	r3, [pc, #64]	; (80145ec <tcp_output_segment+0x1ac>)
 80145aa:	f240 621c 	movw	r2, #1564	; 0x61c
 80145ae:	4915      	ldr	r1, [pc, #84]	; (8014604 <tcp_output_segment+0x1c4>)
 80145b0:	4810      	ldr	r0, [pc, #64]	; (80145f4 <tcp_output_segment+0x1b4>)
 80145b2:	f001 fc71 	bl	8015e98 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	6858      	ldr	r0, [r3, #4]
 80145ba:	68b9      	ldr	r1, [r7, #8]
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	1d1c      	adds	r4, r3, #4
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	7add      	ldrb	r5, [r3, #11]
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	7a9b      	ldrb	r3, [r3, #10]
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	9202      	str	r2, [sp, #8]
 80145cc:	2206      	movs	r2, #6
 80145ce:	9201      	str	r2, [sp, #4]
 80145d0:	9300      	str	r3, [sp, #0]
 80145d2:	462b      	mov	r3, r5
 80145d4:	4622      	mov	r2, r4
 80145d6:	f7f7 fb9f 	bl	800bd18 <ip4_output_if>
 80145da:	4603      	mov	r3, r0
 80145dc:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80145de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3720      	adds	r7, #32
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bdb0      	pop	{r4, r5, r7, pc}
 80145ea:	bf00      	nop
 80145ec:	08019f08 	.word	0x08019f08
 80145f0:	0801a4cc 	.word	0x0801a4cc
 80145f4:	08019f5c 	.word	0x08019f5c
 80145f8:	0801a4ec 	.word	0x0801a4ec
 80145fc:	0801a50c 	.word	0x0801a50c
 8014600:	2000b6ac 	.word	0x2000b6ac
 8014604:	0801a530 	.word	0x0801a530

08014608 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014608:	b5b0      	push	{r4, r5, r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d106      	bne.n	8014624 <tcp_rexmit_rto_prepare+0x1c>
 8014616:	4b31      	ldr	r3, [pc, #196]	; (80146dc <tcp_rexmit_rto_prepare+0xd4>)
 8014618:	f240 6263 	movw	r2, #1635	; 0x663
 801461c:	4930      	ldr	r1, [pc, #192]	; (80146e0 <tcp_rexmit_rto_prepare+0xd8>)
 801461e:	4831      	ldr	r0, [pc, #196]	; (80146e4 <tcp_rexmit_rto_prepare+0xdc>)
 8014620:	f001 fc3a 	bl	8015e98 <iprintf>

  if (pcb->unacked == NULL) {
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014628:	2b00      	cmp	r3, #0
 801462a:	d102      	bne.n	8014632 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801462c:	f06f 0305 	mvn.w	r3, #5
 8014630:	e050      	b.n	80146d4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014636:	60fb      	str	r3, [r7, #12]
 8014638:	e00b      	b.n	8014652 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f7ff fee0 	bl	8014400 <tcp_output_segment_busy>
 8014640:	4603      	mov	r3, r0
 8014642:	2b00      	cmp	r3, #0
 8014644:	d002      	beq.n	801464c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014646:	f06f 0305 	mvn.w	r3, #5
 801464a:	e043      	b.n	80146d4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	60fb      	str	r3, [r7, #12]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d1ef      	bne.n	801463a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801465a:	68f8      	ldr	r0, [r7, #12]
 801465c:	f7ff fed0 	bl	8014400 <tcp_output_segment_busy>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d002      	beq.n	801466c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014666:	f06f 0305 	mvn.w	r3, #5
 801466a:	e033      	b.n	80146d4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	8b5b      	ldrh	r3, [r3, #26]
 8014686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801468a:	b29a      	uxth	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	4618      	mov	r0, r3
 8014698:	f7f5 f899 	bl	80097ce <lwip_htonl>
 801469c:	4604      	mov	r4, r0
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	891b      	ldrh	r3, [r3, #8]
 80146a2:	461d      	mov	r5, r3
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	68db      	ldr	r3, [r3, #12]
 80146a8:	899b      	ldrh	r3, [r3, #12]
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f5 f879 	bl	80097a4 <lwip_htons>
 80146b2:	4603      	mov	r3, r0
 80146b4:	b2db      	uxtb	r3, r3
 80146b6:	f003 0303 	and.w	r3, r3, #3
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <tcp_rexmit_rto_prepare+0xba>
 80146be:	2301      	movs	r3, #1
 80146c0:	e000      	b.n	80146c4 <tcp_rexmit_rto_prepare+0xbc>
 80146c2:	2300      	movs	r3, #0
 80146c4:	442b      	add	r3, r5
 80146c6:	18e2      	adds	r2, r4, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2200      	movs	r2, #0
 80146d0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80146d2:	2300      	movs	r3, #0
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bdb0      	pop	{r4, r5, r7, pc}
 80146dc:	08019f08 	.word	0x08019f08
 80146e0:	0801a544 	.word	0x0801a544
 80146e4:	08019f5c 	.word	0x08019f5c

080146e8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d106      	bne.n	8014704 <tcp_rexmit_rto_commit+0x1c>
 80146f6:	4b0d      	ldr	r3, [pc, #52]	; (801472c <tcp_rexmit_rto_commit+0x44>)
 80146f8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80146fc:	490c      	ldr	r1, [pc, #48]	; (8014730 <tcp_rexmit_rto_commit+0x48>)
 80146fe:	480d      	ldr	r0, [pc, #52]	; (8014734 <tcp_rexmit_rto_commit+0x4c>)
 8014700:	f001 fbca 	bl	8015e98 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801470a:	2bff      	cmp	r3, #255	; 0xff
 801470c:	d007      	beq.n	801471e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014714:	3301      	adds	r3, #1
 8014716:	b2da      	uxtb	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f7ff fc78 	bl	8014014 <tcp_output>
}
 8014724:	bf00      	nop
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	08019f08 	.word	0x08019f08
 8014730:	0801a568 	.word	0x0801a568
 8014734:	08019f5c 	.word	0x08019f5c

08014738 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d106      	bne.n	8014754 <tcp_rexmit_rto+0x1c>
 8014746:	4b0a      	ldr	r3, [pc, #40]	; (8014770 <tcp_rexmit_rto+0x38>)
 8014748:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801474c:	4909      	ldr	r1, [pc, #36]	; (8014774 <tcp_rexmit_rto+0x3c>)
 801474e:	480a      	ldr	r0, [pc, #40]	; (8014778 <tcp_rexmit_rto+0x40>)
 8014750:	f001 fba2 	bl	8015e98 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f7ff ff57 	bl	8014608 <tcp_rexmit_rto_prepare>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d102      	bne.n	8014766 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff ffc1 	bl	80146e8 <tcp_rexmit_rto_commit>
  }
}
 8014766:	bf00      	nop
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	08019f08 	.word	0x08019f08
 8014774:	0801a58c 	.word	0x0801a58c
 8014778:	08019f5c 	.word	0x08019f5c

0801477c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801477c:	b590      	push	{r4, r7, lr}
 801477e:	b085      	sub	sp, #20
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d106      	bne.n	8014798 <tcp_rexmit+0x1c>
 801478a:	4b2f      	ldr	r3, [pc, #188]	; (8014848 <tcp_rexmit+0xcc>)
 801478c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014790:	492e      	ldr	r1, [pc, #184]	; (801484c <tcp_rexmit+0xd0>)
 8014792:	482f      	ldr	r0, [pc, #188]	; (8014850 <tcp_rexmit+0xd4>)
 8014794:	f001 fb80 	bl	8015e98 <iprintf>

  if (pcb->unacked == NULL) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801479c:	2b00      	cmp	r3, #0
 801479e:	d102      	bne.n	80147a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80147a0:	f06f 0305 	mvn.w	r3, #5
 80147a4:	e04c      	b.n	8014840 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80147ac:	68b8      	ldr	r0, [r7, #8]
 80147ae:	f7ff fe27 	bl	8014400 <tcp_output_segment_busy>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d002      	beq.n	80147be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80147b8:	f06f 0305 	mvn.w	r3, #5
 80147bc:	e040      	b.n	8014840 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	336c      	adds	r3, #108	; 0x6c
 80147ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147cc:	e002      	b.n	80147d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d011      	beq.n	8014800 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7f4 fff2 	bl	80097ce <lwip_htonl>
 80147ea:	4604      	mov	r4, r0
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	68db      	ldr	r3, [r3, #12]
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7f4 ffeb 	bl	80097ce <lwip_htonl>
 80147f8:	4603      	mov	r3, r0
 80147fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	dbe6      	blt.n	80147ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	681a      	ldr	r2, [r3, #0]
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	68ba      	ldr	r2, [r7, #8]
 801480c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d103      	bne.n	801481e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2200      	movs	r2, #0
 801481a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014824:	2bff      	cmp	r3, #255	; 0xff
 8014826:	d007      	beq.n	8014838 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801482e:	3301      	adds	r3, #1
 8014830:	b2da      	uxtb	r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2200      	movs	r2, #0
 801483c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801483e:	2300      	movs	r3, #0
}
 8014840:	4618      	mov	r0, r3
 8014842:	3714      	adds	r7, #20
 8014844:	46bd      	mov	sp, r7
 8014846:	bd90      	pop	{r4, r7, pc}
 8014848:	08019f08 	.word	0x08019f08
 801484c:	0801a5a8 	.word	0x0801a5a8
 8014850:	08019f5c 	.word	0x08019f5c

08014854 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d106      	bne.n	8014870 <tcp_rexmit_fast+0x1c>
 8014862:	4b2f      	ldr	r3, [pc, #188]	; (8014920 <tcp_rexmit_fast+0xcc>)
 8014864:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014868:	492e      	ldr	r1, [pc, #184]	; (8014924 <tcp_rexmit_fast+0xd0>)
 801486a:	482f      	ldr	r0, [pc, #188]	; (8014928 <tcp_rexmit_fast+0xd4>)
 801486c:	f001 fb14 	bl	8015e98 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014874:	2b00      	cmp	r3, #0
 8014876:	d04f      	beq.n	8014918 <tcp_rexmit_fast+0xc4>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	8b5b      	ldrh	r3, [r3, #26]
 801487c:	f003 0304 	and.w	r3, r3, #4
 8014880:	2b00      	cmp	r3, #0
 8014882:	d149      	bne.n	8014918 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7ff ff79 	bl	801477c <tcp_rexmit>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d143      	bne.n	8014918 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801489c:	429a      	cmp	r2, r3
 801489e:	d208      	bcs.n	80148b2 <tcp_rexmit_fast+0x5e>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	da00      	bge.n	80148ac <tcp_rexmit_fast+0x58>
 80148aa:	3301      	adds	r3, #1
 80148ac:	105b      	asrs	r3, r3, #1
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	e007      	b.n	80148c2 <tcp_rexmit_fast+0x6e>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	da00      	bge.n	80148be <tcp_rexmit_fast+0x6a>
 80148bc:	3301      	adds	r3, #1
 80148be:	105b      	asrs	r3, r3, #1
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80148ce:	461a      	mov	r2, r3
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148d4:	005b      	lsls	r3, r3, #1
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d206      	bcs.n	80148e8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148de:	005b      	lsls	r3, r3, #1
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148f2:	4619      	mov	r1, r3
 80148f4:	0049      	lsls	r1, r1, #1
 80148f6:	440b      	add	r3, r1
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	4413      	add	r3, r2
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	8b5b      	ldrh	r3, [r3, #26]
 8014908:	f043 0304 	orr.w	r3, r3, #4
 801490c:	b29a      	uxth	r2, r3
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014918:	bf00      	nop
 801491a:	3708      	adds	r7, #8
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	08019f08 	.word	0x08019f08
 8014924:	0801a5c0 	.word	0x0801a5c0
 8014928:	08019f5c 	.word	0x08019f5c

0801492c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	607b      	str	r3, [r7, #4]
 8014936:	460b      	mov	r3, r1
 8014938:	817b      	strh	r3, [r7, #10]
 801493a:	4613      	mov	r3, r2
 801493c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801493e:	897a      	ldrh	r2, [r7, #10]
 8014940:	893b      	ldrh	r3, [r7, #8]
 8014942:	4413      	add	r3, r2
 8014944:	b29b      	uxth	r3, r3
 8014946:	3314      	adds	r3, #20
 8014948:	b29b      	uxth	r3, r3
 801494a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801494e:	4619      	mov	r1, r3
 8014950:	2022      	movs	r0, #34	; 0x22
 8014952:	f7f9 faa3 	bl	800de9c <pbuf_alloc>
 8014956:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d04e      	beq.n	80149fc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	895b      	ldrh	r3, [r3, #10]
 8014962:	461a      	mov	r2, r3
 8014964:	897b      	ldrh	r3, [r7, #10]
 8014966:	3314      	adds	r3, #20
 8014968:	429a      	cmp	r2, r3
 801496a:	da06      	bge.n	801497a <tcp_output_alloc_header_common+0x4e>
 801496c:	4b26      	ldr	r3, [pc, #152]	; (8014a08 <tcp_output_alloc_header_common+0xdc>)
 801496e:	f240 7224 	movw	r2, #1828	; 0x724
 8014972:	4926      	ldr	r1, [pc, #152]	; (8014a0c <tcp_output_alloc_header_common+0xe0>)
 8014974:	4826      	ldr	r0, [pc, #152]	; (8014a10 <tcp_output_alloc_header_common+0xe4>)
 8014976:	f001 fa8f 	bl	8015e98 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014980:	8c3b      	ldrh	r3, [r7, #32]
 8014982:	4618      	mov	r0, r3
 8014984:	f7f4 ff0e 	bl	80097a4 <lwip_htons>
 8014988:	4603      	mov	r3, r0
 801498a:	461a      	mov	r2, r3
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014992:	4618      	mov	r0, r3
 8014994:	f7f4 ff06 	bl	80097a4 <lwip_htons>
 8014998:	4603      	mov	r3, r0
 801499a:	461a      	mov	r2, r3
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f7f4 ff11 	bl	80097ce <lwip_htonl>
 80149ac:	4602      	mov	r2, r0
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80149b2:	897b      	ldrh	r3, [r7, #10]
 80149b4:	089b      	lsrs	r3, r3, #2
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	3305      	adds	r3, #5
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	031b      	lsls	r3, r3, #12
 80149be:	b29a      	uxth	r2, r3
 80149c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	4313      	orrs	r3, r2
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7f4 feea 	bl	80097a4 <lwip_htons>
 80149d0:	4603      	mov	r3, r0
 80149d2:	461a      	mov	r2, r3
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80149d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f4 fee2 	bl	80097a4 <lwip_htons>
 80149e0:	4603      	mov	r3, r0
 80149e2:	461a      	mov	r2, r3
 80149e4:	693b      	ldr	r3, [r7, #16]
 80149e6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	2200      	movs	r2, #0
 80149ec:	741a      	strb	r2, [r3, #16]
 80149ee:	2200      	movs	r2, #0
 80149f0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	2200      	movs	r2, #0
 80149f6:	749a      	strb	r2, [r3, #18]
 80149f8:	2200      	movs	r2, #0
 80149fa:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80149fc:	697b      	ldr	r3, [r7, #20]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3718      	adds	r7, #24
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	08019f08 	.word	0x08019f08
 8014a0c:	0801a5e0 	.word	0x0801a5e0
 8014a10:	08019f5c 	.word	0x08019f5c

08014a14 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014a14:	b5b0      	push	{r4, r5, r7, lr}
 8014a16:	b08a      	sub	sp, #40	; 0x28
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	607b      	str	r3, [r7, #4]
 8014a1e:	460b      	mov	r3, r1
 8014a20:	817b      	strh	r3, [r7, #10]
 8014a22:	4613      	mov	r3, r2
 8014a24:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d106      	bne.n	8014a3a <tcp_output_alloc_header+0x26>
 8014a2c:	4b15      	ldr	r3, [pc, #84]	; (8014a84 <tcp_output_alloc_header+0x70>)
 8014a2e:	f240 7242 	movw	r2, #1858	; 0x742
 8014a32:	4915      	ldr	r1, [pc, #84]	; (8014a88 <tcp_output_alloc_header+0x74>)
 8014a34:	4815      	ldr	r0, [pc, #84]	; (8014a8c <tcp_output_alloc_header+0x78>)
 8014a36:	f001 fa2f 	bl	8015e98 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	8adb      	ldrh	r3, [r3, #22]
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	8b12      	ldrh	r2, [r2, #24]
 8014a46:	68f9      	ldr	r1, [r7, #12]
 8014a48:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014a4a:	893d      	ldrh	r5, [r7, #8]
 8014a4c:	897c      	ldrh	r4, [r7, #10]
 8014a4e:	9103      	str	r1, [sp, #12]
 8014a50:	2110      	movs	r1, #16
 8014a52:	9102      	str	r1, [sp, #8]
 8014a54:	9201      	str	r2, [sp, #4]
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	462a      	mov	r2, r5
 8014a5c:	4621      	mov	r1, r4
 8014a5e:	f7ff ff65 	bl	801492c <tcp_output_alloc_header_common>
 8014a62:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d006      	beq.n	8014a78 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a6e:	68fa      	ldr	r2, [r7, #12]
 8014a70:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a72:	441a      	add	r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014a78:	697b      	ldr	r3, [r7, #20]
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3718      	adds	r7, #24
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bdb0      	pop	{r4, r5, r7, pc}
 8014a82:	bf00      	nop
 8014a84:	08019f08 	.word	0x08019f08
 8014a88:	0801a610 	.word	0x0801a610
 8014a8c:	08019f5c 	.word	0x08019f5c

08014a90 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b088      	sub	sp, #32
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	71fb      	strb	r3, [r7, #7]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d106      	bne.n	8014abe <tcp_output_fill_options+0x2e>
 8014ab0:	4b15      	ldr	r3, [pc, #84]	; (8014b08 <tcp_output_fill_options+0x78>)
 8014ab2:	f240 7256 	movw	r2, #1878	; 0x756
 8014ab6:	4915      	ldr	r1, [pc, #84]	; (8014b0c <tcp_output_fill_options+0x7c>)
 8014ab8:	4815      	ldr	r0, [pc, #84]	; (8014b10 <tcp_output_fill_options+0x80>)
 8014aba:	f001 f9ed 	bl	8015e98 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014ac4:	69bb      	ldr	r3, [r7, #24]
 8014ac6:	3314      	adds	r3, #20
 8014ac8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	f103 0214 	add.w	r2, r3, #20
 8014ad0:	8bfb      	ldrh	r3, [r7, #30]
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	79fb      	ldrb	r3, [r7, #7]
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d001      	beq.n	8014ae4 <tcp_output_fill_options+0x54>
 8014ae0:	2304      	movs	r3, #4
 8014ae2:	e000      	b.n	8014ae6 <tcp_output_fill_options+0x56>
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	440b      	add	r3, r1
 8014ae8:	441a      	add	r2, r3
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d006      	beq.n	8014afe <tcp_output_fill_options+0x6e>
 8014af0:	4b05      	ldr	r3, [pc, #20]	; (8014b08 <tcp_output_fill_options+0x78>)
 8014af2:	f240 7275 	movw	r2, #1909	; 0x775
 8014af6:	4907      	ldr	r1, [pc, #28]	; (8014b14 <tcp_output_fill_options+0x84>)
 8014af8:	4805      	ldr	r0, [pc, #20]	; (8014b10 <tcp_output_fill_options+0x80>)
 8014afa:	f001 f9cd 	bl	8015e98 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014afe:	bf00      	nop
 8014b00:	3720      	adds	r7, #32
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	08019f08 	.word	0x08019f08
 8014b0c:	0801a638 	.word	0x0801a638
 8014b10:	08019f5c 	.word	0x08019f5c
 8014b14:	0801a530 	.word	0x0801a530

08014b18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b08a      	sub	sp, #40	; 0x28
 8014b1c:	af04      	add	r7, sp, #16
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	607a      	str	r2, [r7, #4]
 8014b24:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d106      	bne.n	8014b3a <tcp_output_control_segment+0x22>
 8014b2c:	4b1c      	ldr	r3, [pc, #112]	; (8014ba0 <tcp_output_control_segment+0x88>)
 8014b2e:	f240 7287 	movw	r2, #1927	; 0x787
 8014b32:	491c      	ldr	r1, [pc, #112]	; (8014ba4 <tcp_output_control_segment+0x8c>)
 8014b34:	481c      	ldr	r0, [pc, #112]	; (8014ba8 <tcp_output_control_segment+0x90>)
 8014b36:	f001 f9af 	bl	8015e98 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014b3a:	683a      	ldr	r2, [r7, #0]
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f7fe fac8 	bl	80130d4 <tcp_route>
 8014b44:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d102      	bne.n	8014b52 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014b4c:	23fc      	movs	r3, #252	; 0xfc
 8014b4e:	75fb      	strb	r3, [r7, #23]
 8014b50:	e01c      	b.n	8014b8c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d006      	beq.n	8014b66 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	7adb      	ldrb	r3, [r3, #11]
 8014b5c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	7a9b      	ldrb	r3, [r3, #10]
 8014b62:	757b      	strb	r3, [r7, #21]
 8014b64:	e003      	b.n	8014b6e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014b66:	23ff      	movs	r3, #255	; 0xff
 8014b68:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b6e:	7dba      	ldrb	r2, [r7, #22]
 8014b70:	693b      	ldr	r3, [r7, #16]
 8014b72:	9302      	str	r3, [sp, #8]
 8014b74:	2306      	movs	r3, #6
 8014b76:	9301      	str	r3, [sp, #4]
 8014b78:	7d7b      	ldrb	r3, [r7, #21]
 8014b7a:	9300      	str	r3, [sp, #0]
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	683a      	ldr	r2, [r7, #0]
 8014b80:	6879      	ldr	r1, [r7, #4]
 8014b82:	68b8      	ldr	r0, [r7, #8]
 8014b84:	f7f7 f8c8 	bl	800bd18 <ip4_output_if>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014b8c:	68b8      	ldr	r0, [r7, #8]
 8014b8e:	f7f9 fc99 	bl	800e4c4 <pbuf_free>
  return err;
 8014b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3718      	adds	r7, #24
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	08019f08 	.word	0x08019f08
 8014ba4:	0801a660 	.word	0x0801a660
 8014ba8:	08019f5c 	.word	0x08019f5c

08014bac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014bac:	b590      	push	{r4, r7, lr}
 8014bae:	b08b      	sub	sp, #44	; 0x2c
 8014bb0:	af04      	add	r7, sp, #16
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]
 8014bb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <tcp_rst+0x22>
 8014bc0:	4b1f      	ldr	r3, [pc, #124]	; (8014c40 <tcp_rst+0x94>)
 8014bc2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014bc6:	491f      	ldr	r1, [pc, #124]	; (8014c44 <tcp_rst+0x98>)
 8014bc8:	481f      	ldr	r0, [pc, #124]	; (8014c48 <tcp_rst+0x9c>)
 8014bca:	f001 f965 	bl	8015e98 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d106      	bne.n	8014be2 <tcp_rst+0x36>
 8014bd4:	4b1a      	ldr	r3, [pc, #104]	; (8014c40 <tcp_rst+0x94>)
 8014bd6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014bda:	491c      	ldr	r1, [pc, #112]	; (8014c4c <tcp_rst+0xa0>)
 8014bdc:	481a      	ldr	r0, [pc, #104]	; (8014c48 <tcp_rst+0x9c>)
 8014bde:	f001 f95b 	bl	8015e98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014be2:	2300      	movs	r3, #0
 8014be4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014be6:	f246 0308 	movw	r3, #24584	; 0x6008
 8014bea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014bec:	7dfb      	ldrb	r3, [r7, #23]
 8014bee:	b29c      	uxth	r4, r3
 8014bf0:	68b8      	ldr	r0, [r7, #8]
 8014bf2:	f7f4 fdec 	bl	80097ce <lwip_htonl>
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	8abb      	ldrh	r3, [r7, #20]
 8014bfa:	9303      	str	r3, [sp, #12]
 8014bfc:	2314      	movs	r3, #20
 8014bfe:	9302      	str	r3, [sp, #8]
 8014c00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c02:	9301      	str	r3, [sp, #4]
 8014c04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014c06:	9300      	str	r3, [sp, #0]
 8014c08:	4613      	mov	r3, r2
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f7ff fe8c 	bl	801492c <tcp_output_alloc_header_common>
 8014c14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d00c      	beq.n	8014c36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c1c:	7dfb      	ldrb	r3, [r7, #23]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	6939      	ldr	r1, [r7, #16]
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f7ff ff34 	bl	8014a90 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2a:	683a      	ldr	r2, [r7, #0]
 8014c2c:	6939      	ldr	r1, [r7, #16]
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	f7ff ff72 	bl	8014b18 <tcp_output_control_segment>
 8014c34:	e000      	b.n	8014c38 <tcp_rst+0x8c>
    return;
 8014c36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014c38:	371c      	adds	r7, #28
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd90      	pop	{r4, r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	08019f08 	.word	0x08019f08
 8014c44:	0801a68c 	.word	0x0801a68c
 8014c48:	08019f5c 	.word	0x08019f5c
 8014c4c:	0801a6a8 	.word	0x0801a6a8

08014c50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014c50:	b590      	push	{r4, r7, lr}
 8014c52:	b087      	sub	sp, #28
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d106      	bne.n	8014c74 <tcp_send_empty_ack+0x24>
 8014c66:	4b29      	ldr	r3, [pc, #164]	; (8014d0c <tcp_send_empty_ack+0xbc>)
 8014c68:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014c6c:	4928      	ldr	r1, [pc, #160]	; (8014d10 <tcp_send_empty_ack+0xc0>)
 8014c6e:	4829      	ldr	r0, [pc, #164]	; (8014d14 <tcp_send_empty_ack+0xc4>)
 8014c70:	f001 f912 	bl	8015e98 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c74:	7dfb      	ldrb	r3, [r7, #23]
 8014c76:	f003 0301 	and.w	r3, r3, #1
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d001      	beq.n	8014c82 <tcp_send_empty_ack+0x32>
 8014c7e:	2304      	movs	r3, #4
 8014c80:	e000      	b.n	8014c84 <tcp_send_empty_ack+0x34>
 8014c82:	2300      	movs	r3, #0
 8014c84:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c86:	7d7b      	ldrb	r3, [r7, #21]
 8014c88:	b29c      	uxth	r4, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7f4 fd9d 	bl	80097ce <lwip_htonl>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2200      	movs	r2, #0
 8014c98:	4621      	mov	r1, r4
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7ff feba 	bl	8014a14 <tcp_output_alloc_header>
 8014ca0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d109      	bne.n	8014cbc <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	8b5b      	ldrh	r3, [r3, #26]
 8014cac:	f043 0303 	orr.w	r3, r3, #3
 8014cb0:	b29a      	uxth	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014cb6:	f06f 0301 	mvn.w	r3, #1
 8014cba:	e023      	b.n	8014d04 <tcp_send_empty_ack+0xb4>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014cbc:	7dbb      	ldrb	r3, [r7, #22]
 8014cbe:	7dfa      	ldrb	r2, [r7, #23]
 8014cc0:	6939      	ldr	r1, [r7, #16]
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7ff fee4 	bl	8014a90 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	3304      	adds	r3, #4
 8014cce:	6939      	ldr	r1, [r7, #16]
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7ff ff21 	bl	8014b18 <tcp_output_control_segment>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d007      	beq.n	8014cf2 <tcp_send_empty_ack+0xa2>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	8b5b      	ldrh	r3, [r3, #26]
 8014ce6:	f043 0303 	orr.w	r3, r3, #3
 8014cea:	b29a      	uxth	r2, r3
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	835a      	strh	r2, [r3, #26]
 8014cf0:	e006      	b.n	8014d00 <tcp_send_empty_ack+0xb0>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	8b5b      	ldrh	r3, [r3, #26]
 8014cf6:	f023 0303 	bic.w	r3, r3, #3
 8014cfa:	b29a      	uxth	r2, r3
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	371c      	adds	r7, #28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd90      	pop	{r4, r7, pc}
 8014d0c:	08019f08 	.word	0x08019f08
 8014d10:	0801a6c4 	.word	0x0801a6c4
 8014d14:	08019f5c 	.word	0x08019f5c

08014d18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014d18:	b590      	push	{r4, r7, lr}
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d20:	2300      	movs	r3, #0
 8014d22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d106      	bne.n	8014d38 <tcp_keepalive+0x20>
 8014d2a:	4b18      	ldr	r3, [pc, #96]	; (8014d8c <tcp_keepalive+0x74>)
 8014d2c:	f640 0224 	movw	r2, #2084	; 0x824
 8014d30:	4917      	ldr	r1, [pc, #92]	; (8014d90 <tcp_keepalive+0x78>)
 8014d32:	4818      	ldr	r0, [pc, #96]	; (8014d94 <tcp_keepalive+0x7c>)
 8014d34:	f001 f8b0 	bl	8015e98 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014d38:	7dfb      	ldrb	r3, [r7, #23]
 8014d3a:	b29c      	uxth	r4, r3
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d40:	3b01      	subs	r3, #1
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7f4 fd43 	bl	80097ce <lwip_htonl>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	4621      	mov	r1, r4
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f7ff fe60 	bl	8014a14 <tcp_output_alloc_header>
 8014d54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d102      	bne.n	8014d62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d60:	e010      	b.n	8014d84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d62:	7dfb      	ldrb	r3, [r7, #23]
 8014d64:	2200      	movs	r2, #0
 8014d66:	6939      	ldr	r1, [r7, #16]
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f7ff fe91 	bl	8014a90 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	3304      	adds	r3, #4
 8014d74:	6939      	ldr	r1, [r7, #16]
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f7ff fece 	bl	8014b18 <tcp_output_control_segment>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	371c      	adds	r7, #28
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd90      	pop	{r4, r7, pc}
 8014d8c:	08019f08 	.word	0x08019f08
 8014d90:	0801a6e4 	.word	0x0801a6e4
 8014d94:	08019f5c 	.word	0x08019f5c

08014d98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014d98:	b590      	push	{r4, r7, lr}
 8014d9a:	b08b      	sub	sp, #44	; 0x2c
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014da0:	2300      	movs	r3, #0
 8014da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d106      	bne.n	8014dba <tcp_zero_window_probe+0x22>
 8014dac:	4b4c      	ldr	r3, [pc, #304]	; (8014ee0 <tcp_zero_window_probe+0x148>)
 8014dae:	f640 024f 	movw	r2, #2127	; 0x84f
 8014db2:	494c      	ldr	r1, [pc, #304]	; (8014ee4 <tcp_zero_window_probe+0x14c>)
 8014db4:	484c      	ldr	r0, [pc, #304]	; (8014ee8 <tcp_zero_window_probe+0x150>)
 8014db6:	f001 f86f 	bl	8015e98 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dbe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014dc0:	6a3b      	ldr	r3, [r7, #32]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d101      	bne.n	8014dca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	e086      	b.n	8014ed8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014dd0:	2bff      	cmp	r3, #255	; 0xff
 8014dd2:	d007      	beq.n	8014de4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014dda:	3301      	adds	r3, #1
 8014ddc:	b2da      	uxtb	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014de4:	6a3b      	ldr	r3, [r7, #32]
 8014de6:	68db      	ldr	r3, [r3, #12]
 8014de8:	899b      	ldrh	r3, [r3, #12]
 8014dea:	b29b      	uxth	r3, r3
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7f4 fcd9 	bl	80097a4 <lwip_htons>
 8014df2:	4603      	mov	r3, r0
 8014df4:	b2db      	uxtb	r3, r3
 8014df6:	f003 0301 	and.w	r3, r3, #1
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d005      	beq.n	8014e0a <tcp_zero_window_probe+0x72>
 8014dfe:	6a3b      	ldr	r3, [r7, #32]
 8014e00:	891b      	ldrh	r3, [r3, #8]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d101      	bne.n	8014e0a <tcp_zero_window_probe+0x72>
 8014e06:	2301      	movs	r3, #1
 8014e08:	e000      	b.n	8014e0c <tcp_zero_window_probe+0x74>
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014e0e:	7ffb      	ldrb	r3, [r7, #31]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	bf0c      	ite	eq
 8014e14:	2301      	moveq	r3, #1
 8014e16:	2300      	movne	r3, #0
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e20:	b299      	uxth	r1, r3
 8014e22:	6a3b      	ldr	r3, [r7, #32]
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	685b      	ldr	r3, [r3, #4]
 8014e28:	8bba      	ldrh	r2, [r7, #28]
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7ff fdf2 	bl	8014a14 <tcp_output_alloc_header>
 8014e30:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014e32:	69bb      	ldr	r3, [r7, #24]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d102      	bne.n	8014e3e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014e38:	f04f 33ff 	mov.w	r3, #4294967295
 8014e3c:	e04c      	b.n	8014ed8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014e44:	7ffb      	ldrb	r3, [r7, #31]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d011      	beq.n	8014e6e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	899b      	ldrh	r3, [r3, #12]
 8014e4e:	b29b      	uxth	r3, r3
 8014e50:	b21b      	sxth	r3, r3
 8014e52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e56:	b21c      	sxth	r4, r3
 8014e58:	2011      	movs	r0, #17
 8014e5a:	f7f4 fca3 	bl	80097a4 <lwip_htons>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	b21b      	sxth	r3, r3
 8014e62:	4323      	orrs	r3, r4
 8014e64:	b21b      	sxth	r3, r3
 8014e66:	b29a      	uxth	r2, r3
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	819a      	strh	r2, [r3, #12]
 8014e6c:	e010      	b.n	8014e90 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e6e:	69bb      	ldr	r3, [r7, #24]
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	3314      	adds	r3, #20
 8014e74:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e76:	6a3b      	ldr	r3, [r7, #32]
 8014e78:	6858      	ldr	r0, [r3, #4]
 8014e7a:	6a3b      	ldr	r3, [r7, #32]
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	891a      	ldrh	r2, [r3, #8]
 8014e80:	6a3b      	ldr	r3, [r7, #32]
 8014e82:	891b      	ldrh	r3, [r3, #8]
 8014e84:	1ad3      	subs	r3, r2, r3
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	2201      	movs	r2, #1
 8014e8a:	6939      	ldr	r1, [r7, #16]
 8014e8c:	f7f9 fd14 	bl	800e8b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7f4 fc99 	bl	80097ce <lwip_htonl>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	1ad3      	subs	r3, r2, r3
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	da02      	bge.n	8014eb4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	68fa      	ldr	r2, [r7, #12]
 8014eb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014eb8:	2200      	movs	r2, #0
 8014eba:	69b9      	ldr	r1, [r7, #24]
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7ff fde7 	bl	8014a90 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3304      	adds	r3, #4
 8014ec8:	69b9      	ldr	r1, [r7, #24]
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f7ff fe24 	bl	8014b18 <tcp_output_control_segment>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ed4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	372c      	adds	r7, #44	; 0x2c
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd90      	pop	{r4, r7, pc}
 8014ee0:	08019f08 	.word	0x08019f08
 8014ee4:	0801a700 	.word	0x0801a700
 8014ee8:	08019f5c 	.word	0x08019f5c

08014eec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014ef4:	f7f9 ffee 	bl	800eed4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014ef8:	4b0a      	ldr	r3, [pc, #40]	; (8014f24 <tcpip_tcp_timer+0x38>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d103      	bne.n	8014f08 <tcpip_tcp_timer+0x1c>
 8014f00:	4b09      	ldr	r3, [pc, #36]	; (8014f28 <tcpip_tcp_timer+0x3c>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d005      	beq.n	8014f14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f08:	2200      	movs	r2, #0
 8014f0a:	4908      	ldr	r1, [pc, #32]	; (8014f2c <tcpip_tcp_timer+0x40>)
 8014f0c:	20fa      	movs	r0, #250	; 0xfa
 8014f0e:	f000 f8e5 	bl	80150dc <sys_timeout>
 8014f12:	e002      	b.n	8014f1a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014f14:	4b06      	ldr	r3, [pc, #24]	; (8014f30 <tcpip_tcp_timer+0x44>)
 8014f16:	2200      	movs	r2, #0
 8014f18:	601a      	str	r2, [r3, #0]
  }
}
 8014f1a:	bf00      	nop
 8014f1c:	3708      	adds	r7, #8
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	2000b6a8 	.word	0x2000b6a8
 8014f28:	2000b6b8 	.word	0x2000b6b8
 8014f2c:	08014eed 	.word	0x08014eed
 8014f30:	20000898 	.word	0x20000898

08014f34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014f38:	4b0a      	ldr	r3, [pc, #40]	; (8014f64 <tcp_timer_needed+0x30>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d10f      	bne.n	8014f60 <tcp_timer_needed+0x2c>
 8014f40:	4b09      	ldr	r3, [pc, #36]	; (8014f68 <tcp_timer_needed+0x34>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d103      	bne.n	8014f50 <tcp_timer_needed+0x1c>
 8014f48:	4b08      	ldr	r3, [pc, #32]	; (8014f6c <tcp_timer_needed+0x38>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d007      	beq.n	8014f60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014f50:	4b04      	ldr	r3, [pc, #16]	; (8014f64 <tcp_timer_needed+0x30>)
 8014f52:	2201      	movs	r2, #1
 8014f54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f56:	2200      	movs	r2, #0
 8014f58:	4905      	ldr	r1, [pc, #20]	; (8014f70 <tcp_timer_needed+0x3c>)
 8014f5a:	20fa      	movs	r0, #250	; 0xfa
 8014f5c:	f000 f8be 	bl	80150dc <sys_timeout>
  }
}
 8014f60:	bf00      	nop
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	20000898 	.word	0x20000898
 8014f68:	2000b6a8 	.word	0x2000b6a8
 8014f6c:	2000b6b8 	.word	0x2000b6b8
 8014f70:	08014eed 	.word	0x08014eed

08014f74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b086      	sub	sp, #24
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f80:	2006      	movs	r0, #6
 8014f82:	f7f8 fc11 	bl	800d7a8 <memp_malloc>
 8014f86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d109      	bne.n	8014fa2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d149      	bne.n	8015028 <sys_timeout_abs+0xb4>
 8014f94:	4b26      	ldr	r3, [pc, #152]	; (8015030 <sys_timeout_abs+0xbc>)
 8014f96:	22be      	movs	r2, #190	; 0xbe
 8014f98:	4926      	ldr	r1, [pc, #152]	; (8015034 <sys_timeout_abs+0xc0>)
 8014f9a:	4827      	ldr	r0, [pc, #156]	; (8015038 <sys_timeout_abs+0xc4>)
 8014f9c:	f000 ff7c 	bl	8015e98 <iprintf>
    return;
 8014fa0:	e042      	b.n	8015028 <sys_timeout_abs+0xb4>
  }

  timeout->next = NULL;
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	68ba      	ldr	r2, [r7, #8]
 8014fac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	68fa      	ldr	r2, [r7, #12]
 8014fb8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014fba:	4b20      	ldr	r3, [pc, #128]	; (801503c <sys_timeout_abs+0xc8>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d103      	bne.n	8014fca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014fc2:	4a1e      	ldr	r2, [pc, #120]	; (801503c <sys_timeout_abs+0xc8>)
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	6013      	str	r3, [r2, #0]
    return;
 8014fc8:	e02f      	b.n	801502a <sys_timeout_abs+0xb6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	685a      	ldr	r2, [r3, #4]
 8014fce:	4b1b      	ldr	r3, [pc, #108]	; (801503c <sys_timeout_abs+0xc8>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	da07      	bge.n	8014fea <sys_timeout_abs+0x76>
    timeout->next = next_timeout;
 8014fda:	4b18      	ldr	r3, [pc, #96]	; (801503c <sys_timeout_abs+0xc8>)
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014fe2:	4a16      	ldr	r2, [pc, #88]	; (801503c <sys_timeout_abs+0xc8>)
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	6013      	str	r3, [r2, #0]
 8014fe8:	e01f      	b.n	801502a <sys_timeout_abs+0xb6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fea:	4b14      	ldr	r3, [pc, #80]	; (801503c <sys_timeout_abs+0xc8>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	617b      	str	r3, [r7, #20]
 8014ff0:	e016      	b.n	8015020 <sys_timeout_abs+0xac>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d007      	beq.n	801500a <sys_timeout_abs+0x96>
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	685a      	ldr	r2, [r3, #4]
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	685b      	ldr	r3, [r3, #4]
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	2b00      	cmp	r3, #0
 8015008:	da07      	bge.n	801501a <sys_timeout_abs+0xa6>
        timeout->next = t->next;
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	681a      	ldr	r2, [r3, #0]
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	693a      	ldr	r2, [r7, #16]
 8015016:	601a      	str	r2, [r3, #0]
        break;
 8015018:	e007      	b.n	801502a <sys_timeout_abs+0xb6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	617b      	str	r3, [r7, #20]
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1e5      	bne.n	8014ff2 <sys_timeout_abs+0x7e>
 8015026:	e000      	b.n	801502a <sys_timeout_abs+0xb6>
    return;
 8015028:	bf00      	nop
      }
    }
  }
}
 801502a:	3718      	adds	r7, #24
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	0801a724 	.word	0x0801a724
 8015034:	0801a758 	.word	0x0801a758
 8015038:	0801a798 	.word	0x0801a798
 801503c:	20000890 	.word	0x20000890

08015040 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b086      	sub	sp, #24
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	4798      	blx	r3

  now = sys_now();
 8015052:	f7f2 f8af 	bl	80071b4 <sys_now>
 8015056:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	681a      	ldr	r2, [r3, #0]
 801505c:	4b0d      	ldr	r3, [pc, #52]	; (8015094 <lwip_cyclic_timer+0x54>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	4413      	add	r3, r2
 8015062:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015064:	68fa      	ldr	r2, [r7, #12]
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	1ad3      	subs	r3, r2, r3
 801506a:	2b00      	cmp	r3, #0
 801506c:	da09      	bge.n	8015082 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	4413      	add	r3, r2
 8015076:	687a      	ldr	r2, [r7, #4]
 8015078:	4907      	ldr	r1, [pc, #28]	; (8015098 <lwip_cyclic_timer+0x58>)
 801507a:	4618      	mov	r0, r3
 801507c:	f7ff ff7a 	bl	8014f74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015080:	e004      	b.n	801508c <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	4904      	ldr	r1, [pc, #16]	; (8015098 <lwip_cyclic_timer+0x58>)
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7ff ff74 	bl	8014f74 <sys_timeout_abs>
}
 801508c:	bf00      	nop
 801508e:	3718      	adds	r7, #24
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	20000894 	.word	0x20000894
 8015098:	08015041 	.word	0x08015041

0801509c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150a2:	2301      	movs	r3, #1
 80150a4:	607b      	str	r3, [r7, #4]
 80150a6:	e00e      	b.n	80150c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80150a8:	4a0a      	ldr	r2, [pc, #40]	; (80150d4 <sys_timeouts_init+0x38>)
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	00db      	lsls	r3, r3, #3
 80150b4:	4a07      	ldr	r2, [pc, #28]	; (80150d4 <sys_timeouts_init+0x38>)
 80150b6:	4413      	add	r3, r2
 80150b8:	461a      	mov	r2, r3
 80150ba:	4907      	ldr	r1, [pc, #28]	; (80150d8 <sys_timeouts_init+0x3c>)
 80150bc:	f000 f80e 	bl	80150dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	3301      	adds	r3, #1
 80150c4:	607b      	str	r3, [r7, #4]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2b03      	cmp	r3, #3
 80150ca:	d9ed      	bls.n	80150a8 <sys_timeouts_init+0xc>
  }
}
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	0801acd8 	.word	0x0801acd8
 80150d8:	08015041 	.word	0x08015041

080150dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b086      	sub	sp, #24
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150ee:	d306      	bcc.n	80150fe <sys_timeout+0x22>
 80150f0:	4b0a      	ldr	r3, [pc, #40]	; (801511c <sys_timeout+0x40>)
 80150f2:	f240 1229 	movw	r2, #297	; 0x129
 80150f6:	490a      	ldr	r1, [pc, #40]	; (8015120 <sys_timeout+0x44>)
 80150f8:	480a      	ldr	r0, [pc, #40]	; (8015124 <sys_timeout+0x48>)
 80150fa:	f000 fecd 	bl	8015e98 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80150fe:	f7f2 f859 	bl	80071b4 <sys_now>
 8015102:	4602      	mov	r2, r0
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	4413      	add	r3, r2
 8015108:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	68b9      	ldr	r1, [r7, #8]
 801510e:	6978      	ldr	r0, [r7, #20]
 8015110:	f7ff ff30 	bl	8014f74 <sys_timeout_abs>
#endif
}
 8015114:	bf00      	nop
 8015116:	3718      	adds	r7, #24
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	0801a724 	.word	0x0801a724
 8015120:	0801a7c0 	.word	0x0801a7c0
 8015124:	0801a798 	.word	0x0801a798

08015128 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
 8015130:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015132:	4b19      	ldr	r3, [pc, #100]	; (8015198 <sys_untimeout+0x70>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d02a      	beq.n	8015190 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801513a:	4b17      	ldr	r3, [pc, #92]	; (8015198 <sys_untimeout+0x70>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	60bb      	str	r3, [r7, #8]
 8015140:	2300      	movs	r3, #0
 8015142:	60fb      	str	r3, [r7, #12]
 8015144:	e01f      	b.n	8015186 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	689a      	ldr	r2, [r3, #8]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	429a      	cmp	r2, r3
 801514e:	d115      	bne.n	801517c <sys_untimeout+0x54>
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	68da      	ldr	r2, [r3, #12]
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	429a      	cmp	r2, r3
 8015158:	d110      	bne.n	801517c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d104      	bne.n	801516a <sys_untimeout+0x42>
        next_timeout = t->next;
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	4a0c      	ldr	r2, [pc, #48]	; (8015198 <sys_untimeout+0x70>)
 8015166:	6013      	str	r3, [r2, #0]
 8015168:	e003      	b.n	8015172 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8015172:	68b9      	ldr	r1, [r7, #8]
 8015174:	2006      	movs	r0, #6
 8015176:	f7f8 fb63 	bl	800d840 <memp_free>
      return;
 801517a:	e00a      	b.n	8015192 <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	60bb      	str	r3, [r7, #8]
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1dc      	bne.n	8015146 <sys_untimeout+0x1e>
    }
  }
  return;
 801518c:	bf00      	nop
 801518e:	e000      	b.n	8015192 <sys_untimeout+0x6a>
    return;
 8015190:	bf00      	nop
}
 8015192:	3710      	adds	r7, #16
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	20000890 	.word	0x20000890

0801519c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80151a2:	f7f2 f807 	bl	80071b4 <sys_now>
 80151a6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80151a8:	4b18      	ldr	r3, [pc, #96]	; (801520c <sys_check_timeouts+0x70>)
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	b2db      	uxtb	r3, r3
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d001      	beq.n	80151b6 <sys_check_timeouts+0x1a>
 80151b2:	f7f8 fe1d 	bl	800ddf0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80151b6:	4b16      	ldr	r3, [pc, #88]	; (8015210 <sys_check_timeouts+0x74>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d01e      	beq.n	8015200 <sys_check_timeouts+0x64>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	68fa      	ldr	r2, [r7, #12]
 80151c8:	1ad3      	subs	r3, r2, r3
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	db1a      	blt.n	8015204 <sys_check_timeouts+0x68>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	4a0f      	ldr	r2, [pc, #60]	; (8015210 <sys_check_timeouts+0x74>)
 80151d4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	689b      	ldr	r3, [r3, #8]
 80151da:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	4a0b      	ldr	r2, [pc, #44]	; (8015214 <sys_check_timeouts+0x78>)
 80151e8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80151ea:	68b9      	ldr	r1, [r7, #8]
 80151ec:	2006      	movs	r0, #6
 80151ee:	f7f8 fb27 	bl	800d840 <memp_free>
    if (handler != NULL) {
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d0d7      	beq.n	80151a8 <sys_check_timeouts+0xc>
      handler(arg);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6838      	ldr	r0, [r7, #0]
 80151fc:	4798      	blx	r3
  do {
 80151fe:	e7d3      	b.n	80151a8 <sys_check_timeouts+0xc>
      return;
 8015200:	bf00      	nop
 8015202:	e000      	b.n	8015206 <sys_check_timeouts+0x6a>
      return;
 8015204:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015206:	3710      	adds	r7, #16
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	2000b6a0 	.word	0x2000b6a0
 8015210:	20000890 	.word	0x20000890
 8015214:	20000894 	.word	0x20000894

08015218 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801521c:	f000 fe54 	bl	8015ec8 <rand>
 8015220:	4603      	mov	r3, r0
 8015222:	b29b      	uxth	r3, r3
 8015224:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015228:	b29b      	uxth	r3, r3
 801522a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801522e:	b29a      	uxth	r2, r3
 8015230:	4b01      	ldr	r3, [pc, #4]	; (8015238 <udp_init+0x20>)
 8015232:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015234:	bf00      	nop
 8015236:	bd80      	pop	{r7, pc}
 8015238:	20000010 	.word	0x20000010

0801523c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015242:	2300      	movs	r3, #0
 8015244:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015246:	4b17      	ldr	r3, [pc, #92]	; (80152a4 <udp_new_port+0x68>)
 8015248:	881b      	ldrh	r3, [r3, #0]
 801524a:	1c5a      	adds	r2, r3, #1
 801524c:	b291      	uxth	r1, r2
 801524e:	4a15      	ldr	r2, [pc, #84]	; (80152a4 <udp_new_port+0x68>)
 8015250:	8011      	strh	r1, [r2, #0]
 8015252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015256:	4293      	cmp	r3, r2
 8015258:	d103      	bne.n	8015262 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801525a:	4b12      	ldr	r3, [pc, #72]	; (80152a4 <udp_new_port+0x68>)
 801525c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015260:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015262:	4b11      	ldr	r3, [pc, #68]	; (80152a8 <udp_new_port+0x6c>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	603b      	str	r3, [r7, #0]
 8015268:	e011      	b.n	801528e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	8a5a      	ldrh	r2, [r3, #18]
 801526e:	4b0d      	ldr	r3, [pc, #52]	; (80152a4 <udp_new_port+0x68>)
 8015270:	881b      	ldrh	r3, [r3, #0]
 8015272:	429a      	cmp	r2, r3
 8015274:	d108      	bne.n	8015288 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015276:	88fb      	ldrh	r3, [r7, #6]
 8015278:	3301      	adds	r3, #1
 801527a:	80fb      	strh	r3, [r7, #6]
 801527c:	88fb      	ldrh	r3, [r7, #6]
 801527e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015282:	d3e0      	bcc.n	8015246 <udp_new_port+0xa>
        return 0;
 8015284:	2300      	movs	r3, #0
 8015286:	e007      	b.n	8015298 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	603b      	str	r3, [r7, #0]
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d1ea      	bne.n	801526a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015294:	4b03      	ldr	r3, [pc, #12]	; (80152a4 <udp_new_port+0x68>)
 8015296:	881b      	ldrh	r3, [r3, #0]
}
 8015298:	4618      	mov	r0, r3
 801529a:	370c      	adds	r7, #12
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr
 80152a4:	20000010 	.word	0x20000010
 80152a8:	2000b6c0 	.word	0x2000b6c0

080152ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b084      	sub	sp, #16
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	60f8      	str	r0, [r7, #12]
 80152b4:	60b9      	str	r1, [r7, #8]
 80152b6:	4613      	mov	r3, r2
 80152b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d105      	bne.n	80152cc <udp_input_local_match+0x20>
 80152c0:	4b27      	ldr	r3, [pc, #156]	; (8015360 <udp_input_local_match+0xb4>)
 80152c2:	2287      	movs	r2, #135	; 0x87
 80152c4:	4927      	ldr	r1, [pc, #156]	; (8015364 <udp_input_local_match+0xb8>)
 80152c6:	4828      	ldr	r0, [pc, #160]	; (8015368 <udp_input_local_match+0xbc>)
 80152c8:	f000 fde6 	bl	8015e98 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d105      	bne.n	80152de <udp_input_local_match+0x32>
 80152d2:	4b23      	ldr	r3, [pc, #140]	; (8015360 <udp_input_local_match+0xb4>)
 80152d4:	2288      	movs	r2, #136	; 0x88
 80152d6:	4925      	ldr	r1, [pc, #148]	; (801536c <udp_input_local_match+0xc0>)
 80152d8:	4823      	ldr	r0, [pc, #140]	; (8015368 <udp_input_local_match+0xbc>)
 80152da:	f000 fddd 	bl	8015e98 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	7a1b      	ldrb	r3, [r3, #8]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d00b      	beq.n	80152fe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	7a1a      	ldrb	r2, [r3, #8]
 80152ea:	4b21      	ldr	r3, [pc, #132]	; (8015370 <udp_input_local_match+0xc4>)
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152f2:	3301      	adds	r3, #1
 80152f4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d001      	beq.n	80152fe <udp_input_local_match+0x52>
    return 0;
 80152fa:	2300      	movs	r3, #0
 80152fc:	e02b      	b.n	8015356 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80152fe:	79fb      	ldrb	r3, [r7, #7]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d018      	beq.n	8015336 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d013      	beq.n	8015332 <udp_input_local_match+0x86>
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d00f      	beq.n	8015332 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015312:	4b17      	ldr	r3, [pc, #92]	; (8015370 <udp_input_local_match+0xc4>)
 8015314:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801531a:	d00a      	beq.n	8015332 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	681a      	ldr	r2, [r3, #0]
 8015320:	4b13      	ldr	r3, [pc, #76]	; (8015370 <udp_input_local_match+0xc4>)
 8015322:	695b      	ldr	r3, [r3, #20]
 8015324:	405a      	eors	r2, r3
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	3308      	adds	r3, #8
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801532e:	2b00      	cmp	r3, #0
 8015330:	d110      	bne.n	8015354 <udp_input_local_match+0xa8>
          return 1;
 8015332:	2301      	movs	r3, #1
 8015334:	e00f      	b.n	8015356 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d009      	beq.n	8015350 <udp_input_local_match+0xa4>
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d005      	beq.n	8015350 <udp_input_local_match+0xa4>
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	4b09      	ldr	r3, [pc, #36]	; (8015370 <udp_input_local_match+0xc4>)
 801534a:	695b      	ldr	r3, [r3, #20]
 801534c:	429a      	cmp	r2, r3
 801534e:	d101      	bne.n	8015354 <udp_input_local_match+0xa8>
        return 1;
 8015350:	2301      	movs	r3, #1
 8015352:	e000      	b.n	8015356 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015354:	2300      	movs	r3, #0
}
 8015356:	4618      	mov	r0, r3
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	0801a80c 	.word	0x0801a80c
 8015364:	0801a83c 	.word	0x0801a83c
 8015368:	0801a860 	.word	0x0801a860
 801536c:	0801a888 	.word	0x0801a888
 8015370:	20005bc4 	.word	0x20005bc4

08015374 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b08d      	sub	sp, #52	; 0x34
 8015378:	af02      	add	r7, sp, #8
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801537e:	2300      	movs	r3, #0
 8015380:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d105      	bne.n	8015394 <udp_input+0x20>
 8015388:	4b7c      	ldr	r3, [pc, #496]	; (801557c <udp_input+0x208>)
 801538a:	22cf      	movs	r2, #207	; 0xcf
 801538c:	497c      	ldr	r1, [pc, #496]	; (8015580 <udp_input+0x20c>)
 801538e:	487d      	ldr	r0, [pc, #500]	; (8015584 <udp_input+0x210>)
 8015390:	f000 fd82 	bl	8015e98 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d105      	bne.n	80153a6 <udp_input+0x32>
 801539a:	4b78      	ldr	r3, [pc, #480]	; (801557c <udp_input+0x208>)
 801539c:	22d0      	movs	r2, #208	; 0xd0
 801539e:	497a      	ldr	r1, [pc, #488]	; (8015588 <udp_input+0x214>)
 80153a0:	4878      	ldr	r0, [pc, #480]	; (8015584 <udp_input+0x210>)
 80153a2:	f000 fd79 	bl	8015e98 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	895b      	ldrh	r3, [r3, #10]
 80153aa:	2b07      	cmp	r3, #7
 80153ac:	d803      	bhi.n	80153b6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f7f9 f888 	bl	800e4c4 <pbuf_free>
    goto end;
 80153b4:	e0de      	b.n	8015574 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	685b      	ldr	r3, [r3, #4]
 80153ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80153bc:	4b73      	ldr	r3, [pc, #460]	; (801558c <udp_input+0x218>)
 80153be:	695a      	ldr	r2, [r3, #20]
 80153c0:	4b72      	ldr	r3, [pc, #456]	; (801558c <udp_input+0x218>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	4619      	mov	r1, r3
 80153c6:	4610      	mov	r0, r2
 80153c8:	f7f6 fd7e 	bl	800bec8 <ip4_addr_isbroadcast_u32>
 80153cc:	4603      	mov	r3, r0
 80153ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	881b      	ldrh	r3, [r3, #0]
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7f4 f9e4 	bl	80097a4 <lwip_htons>
 80153dc:	4603      	mov	r3, r0
 80153de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	885b      	ldrh	r3, [r3, #2]
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f4 f9dc 	bl	80097a4 <lwip_htons>
 80153ec:	4603      	mov	r3, r0
 80153ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80153f0:	2300      	movs	r3, #0
 80153f2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80153f4:	2300      	movs	r3, #0
 80153f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80153f8:	2300      	movs	r3, #0
 80153fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153fc:	4b64      	ldr	r3, [pc, #400]	; (8015590 <udp_input+0x21c>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	627b      	str	r3, [r7, #36]	; 0x24
 8015402:	e054      	b.n	80154ae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015406:	8a5b      	ldrh	r3, [r3, #18]
 8015408:	89fa      	ldrh	r2, [r7, #14]
 801540a:	429a      	cmp	r2, r3
 801540c:	d14a      	bne.n	80154a4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801540e:	7cfb      	ldrb	r3, [r7, #19]
 8015410:	461a      	mov	r2, r3
 8015412:	6839      	ldr	r1, [r7, #0]
 8015414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015416:	f7ff ff49 	bl	80152ac <udp_input_local_match>
 801541a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801541c:	2b00      	cmp	r3, #0
 801541e:	d041      	beq.n	80154a4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	7c1b      	ldrb	r3, [r3, #16]
 8015424:	f003 0304 	and.w	r3, r3, #4
 8015428:	2b00      	cmp	r3, #0
 801542a:	d11d      	bne.n	8015468 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d102      	bne.n	8015438 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015434:	61fb      	str	r3, [r7, #28]
 8015436:	e017      	b.n	8015468 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015438:	7cfb      	ldrb	r3, [r7, #19]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d014      	beq.n	8015468 <udp_input+0xf4>
 801543e:	4b53      	ldr	r3, [pc, #332]	; (801558c <udp_input+0x218>)
 8015440:	695b      	ldr	r3, [r3, #20]
 8015442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015446:	d10f      	bne.n	8015468 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	3304      	adds	r3, #4
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	429a      	cmp	r2, r3
 8015454:	d008      	beq.n	8015468 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	3304      	adds	r3, #4
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	429a      	cmp	r2, r3
 8015462:	d101      	bne.n	8015468 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015466:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546a:	8a9b      	ldrh	r3, [r3, #20]
 801546c:	8a3a      	ldrh	r2, [r7, #16]
 801546e:	429a      	cmp	r2, r3
 8015470:	d118      	bne.n	80154a4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015474:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015476:	2b00      	cmp	r3, #0
 8015478:	d005      	beq.n	8015486 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547c:	685a      	ldr	r2, [r3, #4]
 801547e:	4b43      	ldr	r3, [pc, #268]	; (801558c <udp_input+0x218>)
 8015480:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015482:	429a      	cmp	r2, r3
 8015484:	d10e      	bne.n	80154a4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015486:	6a3b      	ldr	r3, [r7, #32]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d014      	beq.n	80154b6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548e:	68da      	ldr	r2, [r3, #12]
 8015490:	6a3b      	ldr	r3, [r7, #32]
 8015492:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015494:	4b3e      	ldr	r3, [pc, #248]	; (8015590 <udp_input+0x21c>)
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801549c:	4a3c      	ldr	r2, [pc, #240]	; (8015590 <udp_input+0x21c>)
 801549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80154a2:	e008      	b.n	80154b6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80154a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80154a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154aa:	68db      	ldr	r3, [r3, #12]
 80154ac:	627b      	str	r3, [r7, #36]	; 0x24
 80154ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d1a7      	bne.n	8015404 <udp_input+0x90>
 80154b4:	e000      	b.n	80154b8 <udp_input+0x144>
        break;
 80154b6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80154b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d101      	bne.n	80154c2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80154be:	69fb      	ldr	r3, [r7, #28]
 80154c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80154c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d002      	beq.n	80154ce <udp_input+0x15a>
    for_us = 1;
 80154c8:	2301      	movs	r3, #1
 80154ca:	76fb      	strb	r3, [r7, #27]
 80154cc:	e00a      	b.n	80154e4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	3304      	adds	r3, #4
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	4b2d      	ldr	r3, [pc, #180]	; (801558c <udp_input+0x218>)
 80154d6:	695b      	ldr	r3, [r3, #20]
 80154d8:	429a      	cmp	r2, r3
 80154da:	bf0c      	ite	eq
 80154dc:	2301      	moveq	r3, #1
 80154de:	2300      	movne	r3, #0
 80154e0:	b2db      	uxtb	r3, r3
 80154e2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80154e4:	7efb      	ldrb	r3, [r7, #27]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d041      	beq.n	801556e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80154ea:	2108      	movs	r1, #8
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7f8 ff31 	bl	800e354 <pbuf_remove_header>
 80154f2:	4603      	mov	r3, r0
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00a      	beq.n	801550e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80154f8:	4b20      	ldr	r3, [pc, #128]	; (801557c <udp_input+0x208>)
 80154fa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80154fe:	4925      	ldr	r1, [pc, #148]	; (8015594 <udp_input+0x220>)
 8015500:	4820      	ldr	r0, [pc, #128]	; (8015584 <udp_input+0x210>)
 8015502:	f000 fcc9 	bl	8015e98 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f7f8 ffdc 	bl	800e4c4 <pbuf_free>
      goto end;
 801550c:	e032      	b.n	8015574 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015510:	2b00      	cmp	r3, #0
 8015512:	d012      	beq.n	801553a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015516:	699b      	ldr	r3, [r3, #24]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d00a      	beq.n	8015532 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551e:	699c      	ldr	r4, [r3, #24]
 8015520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015522:	69d8      	ldr	r0, [r3, #28]
 8015524:	8a3b      	ldrh	r3, [r7, #16]
 8015526:	9300      	str	r3, [sp, #0]
 8015528:	4b1b      	ldr	r3, [pc, #108]	; (8015598 <udp_input+0x224>)
 801552a:	687a      	ldr	r2, [r7, #4]
 801552c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801552e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015530:	e021      	b.n	8015576 <udp_input+0x202>
        pbuf_free(p);
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f7f8 ffc6 	bl	800e4c4 <pbuf_free>
        goto end;
 8015538:	e01c      	b.n	8015574 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801553a:	7cfb      	ldrb	r3, [r7, #19]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d112      	bne.n	8015566 <udp_input+0x1f2>
 8015540:	4b12      	ldr	r3, [pc, #72]	; (801558c <udp_input+0x218>)
 8015542:	695b      	ldr	r3, [r3, #20]
 8015544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015548:	2be0      	cmp	r3, #224	; 0xe0
 801554a:	d00c      	beq.n	8015566 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801554c:	4b0f      	ldr	r3, [pc, #60]	; (801558c <udp_input+0x218>)
 801554e:	899b      	ldrh	r3, [r3, #12]
 8015550:	3308      	adds	r3, #8
 8015552:	b29b      	uxth	r3, r3
 8015554:	b21b      	sxth	r3, r3
 8015556:	4619      	mov	r1, r3
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f7f8 ff6e 	bl	800e43a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801555e:	2103      	movs	r1, #3
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f7f6 f999 	bl	800b898 <icmp_dest_unreach>
      pbuf_free(p);
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7f8 ffac 	bl	800e4c4 <pbuf_free>
  return;
 801556c:	e003      	b.n	8015576 <udp_input+0x202>
    pbuf_free(p);
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f7f8 ffa8 	bl	800e4c4 <pbuf_free>
  return;
 8015574:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015576:	372c      	adds	r7, #44	; 0x2c
 8015578:	46bd      	mov	sp, r7
 801557a:	bd90      	pop	{r4, r7, pc}
 801557c:	0801a80c 	.word	0x0801a80c
 8015580:	0801a8b0 	.word	0x0801a8b0
 8015584:	0801a860 	.word	0x0801a860
 8015588:	0801a8c8 	.word	0x0801a8c8
 801558c:	20005bc4 	.word	0x20005bc4
 8015590:	2000b6c0 	.word	0x2000b6c0
 8015594:	0801a8e4 	.word	0x0801a8e4
 8015598:	20005bd4 	.word	0x20005bd4

0801559c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b088      	sub	sp, #32
 80155a0:	af02      	add	r7, sp, #8
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d109      	bne.n	80155c4 <udp_sendto+0x28>
 80155b0:	4b23      	ldr	r3, [pc, #140]	; (8015640 <udp_sendto+0xa4>)
 80155b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80155b6:	4923      	ldr	r1, [pc, #140]	; (8015644 <udp_sendto+0xa8>)
 80155b8:	4823      	ldr	r0, [pc, #140]	; (8015648 <udp_sendto+0xac>)
 80155ba:	f000 fc6d 	bl	8015e98 <iprintf>
 80155be:	f06f 030f 	mvn.w	r3, #15
 80155c2:	e038      	b.n	8015636 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d109      	bne.n	80155de <udp_sendto+0x42>
 80155ca:	4b1d      	ldr	r3, [pc, #116]	; (8015640 <udp_sendto+0xa4>)
 80155cc:	f240 2219 	movw	r2, #537	; 0x219
 80155d0:	491e      	ldr	r1, [pc, #120]	; (801564c <udp_sendto+0xb0>)
 80155d2:	481d      	ldr	r0, [pc, #116]	; (8015648 <udp_sendto+0xac>)
 80155d4:	f000 fc60 	bl	8015e98 <iprintf>
 80155d8:	f06f 030f 	mvn.w	r3, #15
 80155dc:	e02b      	b.n	8015636 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d109      	bne.n	80155f8 <udp_sendto+0x5c>
 80155e4:	4b16      	ldr	r3, [pc, #88]	; (8015640 <udp_sendto+0xa4>)
 80155e6:	f240 221a 	movw	r2, #538	; 0x21a
 80155ea:	4919      	ldr	r1, [pc, #100]	; (8015650 <udp_sendto+0xb4>)
 80155ec:	4816      	ldr	r0, [pc, #88]	; (8015648 <udp_sendto+0xac>)
 80155ee:	f000 fc53 	bl	8015e98 <iprintf>
 80155f2:	f06f 030f 	mvn.w	r3, #15
 80155f6:	e01e      	b.n	8015636 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	7a1b      	ldrb	r3, [r3, #8]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d006      	beq.n	801560e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	7a1b      	ldrb	r3, [r3, #8]
 8015604:	4618      	mov	r0, r3
 8015606:	f7f8 fbcd 	bl	800dda4 <netif_get_by_index>
 801560a:	6178      	str	r0, [r7, #20]
 801560c:	e003      	b.n	8015616 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f7f6 f9cc 	bl	800b9ac <ip4_route>
 8015614:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d102      	bne.n	8015622 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801561c:	f06f 0303 	mvn.w	r3, #3
 8015620:	e009      	b.n	8015636 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015622:	887a      	ldrh	r2, [r7, #2]
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	4613      	mov	r3, r2
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	68b9      	ldr	r1, [r7, #8]
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f000 f810 	bl	8015654 <udp_sendto_if>
 8015634:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015636:	4618      	mov	r0, r3
 8015638:	3718      	adds	r7, #24
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	0801a80c 	.word	0x0801a80c
 8015644:	0801a930 	.word	0x0801a930
 8015648:	0801a860 	.word	0x0801a860
 801564c:	0801a948 	.word	0x0801a948
 8015650:	0801a964 	.word	0x0801a964

08015654 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b088      	sub	sp, #32
 8015658:	af02      	add	r7, sp, #8
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
 8015660:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d109      	bne.n	801567c <udp_sendto_if+0x28>
 8015668:	4b2e      	ldr	r3, [pc, #184]	; (8015724 <udp_sendto_if+0xd0>)
 801566a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801566e:	492e      	ldr	r1, [pc, #184]	; (8015728 <udp_sendto_if+0xd4>)
 8015670:	482e      	ldr	r0, [pc, #184]	; (801572c <udp_sendto_if+0xd8>)
 8015672:	f000 fc11 	bl	8015e98 <iprintf>
 8015676:	f06f 030f 	mvn.w	r3, #15
 801567a:	e04f      	b.n	801571c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d109      	bne.n	8015696 <udp_sendto_if+0x42>
 8015682:	4b28      	ldr	r3, [pc, #160]	; (8015724 <udp_sendto_if+0xd0>)
 8015684:	f240 2281 	movw	r2, #641	; 0x281
 8015688:	4929      	ldr	r1, [pc, #164]	; (8015730 <udp_sendto_if+0xdc>)
 801568a:	4828      	ldr	r0, [pc, #160]	; (801572c <udp_sendto_if+0xd8>)
 801568c:	f000 fc04 	bl	8015e98 <iprintf>
 8015690:	f06f 030f 	mvn.w	r3, #15
 8015694:	e042      	b.n	801571c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d109      	bne.n	80156b0 <udp_sendto_if+0x5c>
 801569c:	4b21      	ldr	r3, [pc, #132]	; (8015724 <udp_sendto_if+0xd0>)
 801569e:	f240 2282 	movw	r2, #642	; 0x282
 80156a2:	4924      	ldr	r1, [pc, #144]	; (8015734 <udp_sendto_if+0xe0>)
 80156a4:	4821      	ldr	r0, [pc, #132]	; (801572c <udp_sendto_if+0xd8>)
 80156a6:	f000 fbf7 	bl	8015e98 <iprintf>
 80156aa:	f06f 030f 	mvn.w	r3, #15
 80156ae:	e035      	b.n	801571c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80156b0:	6a3b      	ldr	r3, [r7, #32]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d109      	bne.n	80156ca <udp_sendto_if+0x76>
 80156b6:	4b1b      	ldr	r3, [pc, #108]	; (8015724 <udp_sendto_if+0xd0>)
 80156b8:	f240 2283 	movw	r2, #643	; 0x283
 80156bc:	491e      	ldr	r1, [pc, #120]	; (8015738 <udp_sendto_if+0xe4>)
 80156be:	481b      	ldr	r0, [pc, #108]	; (801572c <udp_sendto_if+0xd8>)
 80156c0:	f000 fbea 	bl	8015e98 <iprintf>
 80156c4:	f06f 030f 	mvn.w	r3, #15
 80156c8:	e028      	b.n	801571c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d009      	beq.n	80156e4 <udp_sendto_if+0x90>
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d005      	beq.n	80156e4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156e0:	2be0      	cmp	r3, #224	; 0xe0
 80156e2:	d103      	bne.n	80156ec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80156e4:	6a3b      	ldr	r3, [r7, #32]
 80156e6:	3304      	adds	r3, #4
 80156e8:	617b      	str	r3, [r7, #20]
 80156ea:	e00b      	b.n	8015704 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	6a3b      	ldr	r3, [r7, #32]
 80156f2:	3304      	adds	r3, #4
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d002      	beq.n	8015700 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80156fa:	f06f 0303 	mvn.w	r3, #3
 80156fe:	e00d      	b.n	801571c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015704:	887a      	ldrh	r2, [r7, #2]
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	9301      	str	r3, [sp, #4]
 801570a:	6a3b      	ldr	r3, [r7, #32]
 801570c:	9300      	str	r3, [sp, #0]
 801570e:	4613      	mov	r3, r2
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	68b9      	ldr	r1, [r7, #8]
 8015714:	68f8      	ldr	r0, [r7, #12]
 8015716:	f000 f811 	bl	801573c <udp_sendto_if_src>
 801571a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801571c:	4618      	mov	r0, r3
 801571e:	3718      	adds	r7, #24
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	0801a80c 	.word	0x0801a80c
 8015728:	0801a980 	.word	0x0801a980
 801572c:	0801a860 	.word	0x0801a860
 8015730:	0801a99c 	.word	0x0801a99c
 8015734:	0801a9b8 	.word	0x0801a9b8
 8015738:	0801a9d8 	.word	0x0801a9d8

0801573c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b08c      	sub	sp, #48	; 0x30
 8015740:	af04      	add	r7, sp, #16
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	607a      	str	r2, [r7, #4]
 8015748:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d109      	bne.n	8015764 <udp_sendto_if_src+0x28>
 8015750:	4b66      	ldr	r3, [pc, #408]	; (80158ec <udp_sendto_if_src+0x1b0>)
 8015752:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015756:	4966      	ldr	r1, [pc, #408]	; (80158f0 <udp_sendto_if_src+0x1b4>)
 8015758:	4866      	ldr	r0, [pc, #408]	; (80158f4 <udp_sendto_if_src+0x1b8>)
 801575a:	f000 fb9d 	bl	8015e98 <iprintf>
 801575e:	f06f 030f 	mvn.w	r3, #15
 8015762:	e0be      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d109      	bne.n	801577e <udp_sendto_if_src+0x42>
 801576a:	4b60      	ldr	r3, [pc, #384]	; (80158ec <udp_sendto_if_src+0x1b0>)
 801576c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015770:	4961      	ldr	r1, [pc, #388]	; (80158f8 <udp_sendto_if_src+0x1bc>)
 8015772:	4860      	ldr	r0, [pc, #384]	; (80158f4 <udp_sendto_if_src+0x1b8>)
 8015774:	f000 fb90 	bl	8015e98 <iprintf>
 8015778:	f06f 030f 	mvn.w	r3, #15
 801577c:	e0b1      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d109      	bne.n	8015798 <udp_sendto_if_src+0x5c>
 8015784:	4b59      	ldr	r3, [pc, #356]	; (80158ec <udp_sendto_if_src+0x1b0>)
 8015786:	f240 22d3 	movw	r2, #723	; 0x2d3
 801578a:	495c      	ldr	r1, [pc, #368]	; (80158fc <udp_sendto_if_src+0x1c0>)
 801578c:	4859      	ldr	r0, [pc, #356]	; (80158f4 <udp_sendto_if_src+0x1b8>)
 801578e:	f000 fb83 	bl	8015e98 <iprintf>
 8015792:	f06f 030f 	mvn.w	r3, #15
 8015796:	e0a4      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801579a:	2b00      	cmp	r3, #0
 801579c:	d109      	bne.n	80157b2 <udp_sendto_if_src+0x76>
 801579e:	4b53      	ldr	r3, [pc, #332]	; (80158ec <udp_sendto_if_src+0x1b0>)
 80157a0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80157a4:	4956      	ldr	r1, [pc, #344]	; (8015900 <udp_sendto_if_src+0x1c4>)
 80157a6:	4853      	ldr	r0, [pc, #332]	; (80158f4 <udp_sendto_if_src+0x1b8>)
 80157a8:	f000 fb76 	bl	8015e98 <iprintf>
 80157ac:	f06f 030f 	mvn.w	r3, #15
 80157b0:	e097      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80157b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d109      	bne.n	80157cc <udp_sendto_if_src+0x90>
 80157b8:	4b4c      	ldr	r3, [pc, #304]	; (80158ec <udp_sendto_if_src+0x1b0>)
 80157ba:	f240 22d5 	movw	r2, #725	; 0x2d5
 80157be:	4951      	ldr	r1, [pc, #324]	; (8015904 <udp_sendto_if_src+0x1c8>)
 80157c0:	484c      	ldr	r0, [pc, #304]	; (80158f4 <udp_sendto_if_src+0x1b8>)
 80157c2:	f000 fb69 	bl	8015e98 <iprintf>
 80157c6:	f06f 030f 	mvn.w	r3, #15
 80157ca:	e08a      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	8a5b      	ldrh	r3, [r3, #18]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d10f      	bne.n	80157f4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80157d4:	68f9      	ldr	r1, [r7, #12]
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	8a5b      	ldrh	r3, [r3, #18]
 80157da:	461a      	mov	r2, r3
 80157dc:	68f8      	ldr	r0, [r7, #12]
 80157de:	f000 f895 	bl	801590c <udp_bind>
 80157e2:	4603      	mov	r3, r0
 80157e4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80157e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d002      	beq.n	80157f4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80157ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80157f2:	e076      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	891b      	ldrh	r3, [r3, #8]
 80157f8:	3308      	adds	r3, #8
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	891b      	ldrh	r3, [r3, #8]
 8015800:	429a      	cmp	r2, r3
 8015802:	d202      	bcs.n	801580a <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8015804:	f04f 33ff 	mov.w	r3, #4294967295
 8015808:	e06b      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801580a:	2108      	movs	r1, #8
 801580c:	68b8      	ldr	r0, [r7, #8]
 801580e:	f7f8 fd91 	bl	800e334 <pbuf_add_header>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d015      	beq.n	8015844 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015818:	f44f 7220 	mov.w	r2, #640	; 0x280
 801581c:	2108      	movs	r1, #8
 801581e:	2022      	movs	r0, #34	; 0x22
 8015820:	f7f8 fb3c 	bl	800de9c <pbuf_alloc>
 8015824:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d102      	bne.n	8015832 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801582c:	f04f 33ff 	mov.w	r3, #4294967295
 8015830:	e057      	b.n	80158e2 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	891b      	ldrh	r3, [r3, #8]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d006      	beq.n	8015848 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801583a:	68b9      	ldr	r1, [r7, #8]
 801583c:	69f8      	ldr	r0, [r7, #28]
 801583e:	f7f8 ff59 	bl	800e6f4 <pbuf_chain>
 8015842:	e001      	b.n	8015848 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	895b      	ldrh	r3, [r3, #10]
 801584c:	2b07      	cmp	r3, #7
 801584e:	d806      	bhi.n	801585e <udp_sendto_if_src+0x122>
 8015850:	4b26      	ldr	r3, [pc, #152]	; (80158ec <udp_sendto_if_src+0x1b0>)
 8015852:	f240 320e 	movw	r2, #782	; 0x30e
 8015856:	492c      	ldr	r1, [pc, #176]	; (8015908 <udp_sendto_if_src+0x1cc>)
 8015858:	4826      	ldr	r0, [pc, #152]	; (80158f4 <udp_sendto_if_src+0x1b8>)
 801585a:	f000 fb1d 	bl	8015e98 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	8a5b      	ldrh	r3, [r3, #18]
 8015868:	4618      	mov	r0, r3
 801586a:	f7f3 ff9b 	bl	80097a4 <lwip_htons>
 801586e:	4603      	mov	r3, r0
 8015870:	461a      	mov	r2, r3
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015876:	887b      	ldrh	r3, [r7, #2]
 8015878:	4618      	mov	r0, r3
 801587a:	f7f3 ff93 	bl	80097a4 <lwip_htons>
 801587e:	4603      	mov	r3, r0
 8015880:	461a      	mov	r2, r3
 8015882:	697b      	ldr	r3, [r7, #20]
 8015884:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	2200      	movs	r2, #0
 801588a:	719a      	strb	r2, [r3, #6]
 801588c:	2200      	movs	r2, #0
 801588e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	891b      	ldrh	r3, [r3, #8]
 8015894:	4618      	mov	r0, r3
 8015896:	f7f3 ff85 	bl	80097a4 <lwip_htons>
 801589a:	4603      	mov	r3, r0
 801589c:	461a      	mov	r2, r3
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80158a2:	2311      	movs	r3, #17
 80158a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	7adb      	ldrb	r3, [r3, #11]
 80158aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	7a9b      	ldrb	r3, [r3, #10]
 80158b0:	7cb9      	ldrb	r1, [r7, #18]
 80158b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158b4:	9202      	str	r2, [sp, #8]
 80158b6:	7cfa      	ldrb	r2, [r7, #19]
 80158b8:	9201      	str	r2, [sp, #4]
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	460b      	mov	r3, r1
 80158be:	687a      	ldr	r2, [r7, #4]
 80158c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80158c2:	69f8      	ldr	r0, [r7, #28]
 80158c4:	f7f6 fa52 	bl	800bd6c <ip4_output_if_src>
 80158c8:	4603      	mov	r3, r0
 80158ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80158cc:	69fa      	ldr	r2, [r7, #28]
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d004      	beq.n	80158de <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 80158d4:	69f8      	ldr	r0, [r7, #28]
 80158d6:	f7f8 fdf5 	bl	800e4c4 <pbuf_free>
    q = NULL;
 80158da:	2300      	movs	r3, #0
 80158dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80158de:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3720      	adds	r7, #32
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	0801a80c 	.word	0x0801a80c
 80158f0:	0801a9f8 	.word	0x0801a9f8
 80158f4:	0801a860 	.word	0x0801a860
 80158f8:	0801aa18 	.word	0x0801aa18
 80158fc:	0801aa38 	.word	0x0801aa38
 8015900:	0801aa5c 	.word	0x0801aa5c
 8015904:	0801aa80 	.word	0x0801aa80
 8015908:	0801aaa4 	.word	0x0801aaa4

0801590c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b086      	sub	sp, #24
 8015910:	af00      	add	r7, sp, #0
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	4613      	mov	r3, r2
 8015918:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d101      	bne.n	8015924 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015920:	4b39      	ldr	r3, [pc, #228]	; (8015a08 <udp_bind+0xfc>)
 8015922:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d109      	bne.n	801593e <udp_bind+0x32>
 801592a:	4b38      	ldr	r3, [pc, #224]	; (8015a0c <udp_bind+0x100>)
 801592c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015930:	4937      	ldr	r1, [pc, #220]	; (8015a10 <udp_bind+0x104>)
 8015932:	4838      	ldr	r0, [pc, #224]	; (8015a14 <udp_bind+0x108>)
 8015934:	f000 fab0 	bl	8015e98 <iprintf>
 8015938:	f06f 030f 	mvn.w	r3, #15
 801593c:	e060      	b.n	8015a00 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801593e:	2300      	movs	r3, #0
 8015940:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015942:	4b35      	ldr	r3, [pc, #212]	; (8015a18 <udp_bind+0x10c>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	617b      	str	r3, [r7, #20]
 8015948:	e009      	b.n	801595e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801594a:	68fa      	ldr	r2, [r7, #12]
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	429a      	cmp	r2, r3
 8015950:	d102      	bne.n	8015958 <udp_bind+0x4c>
      rebind = 1;
 8015952:	2301      	movs	r3, #1
 8015954:	74fb      	strb	r3, [r7, #19]
      break;
 8015956:	e005      	b.n	8015964 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	68db      	ldr	r3, [r3, #12]
 801595c:	617b      	str	r3, [r7, #20]
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d1f2      	bne.n	801594a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015964:	88fb      	ldrh	r3, [r7, #6]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d109      	bne.n	801597e <udp_bind+0x72>
    port = udp_new_port();
 801596a:	f7ff fc67 	bl	801523c <udp_new_port>
 801596e:	4603      	mov	r3, r0
 8015970:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015972:	88fb      	ldrh	r3, [r7, #6]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d12c      	bne.n	80159d2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015978:	f06f 0307 	mvn.w	r3, #7
 801597c:	e040      	b.n	8015a00 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801597e:	4b26      	ldr	r3, [pc, #152]	; (8015a18 <udp_bind+0x10c>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	617b      	str	r3, [r7, #20]
 8015984:	e022      	b.n	80159cc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015986:	68fa      	ldr	r2, [r7, #12]
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	429a      	cmp	r2, r3
 801598c:	d01b      	beq.n	80159c6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	8a5b      	ldrh	r3, [r3, #18]
 8015992:	88fa      	ldrh	r2, [r7, #6]
 8015994:	429a      	cmp	r2, r3
 8015996:	d116      	bne.n	80159c6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	681a      	ldr	r2, [r3, #0]
 801599c:	68bb      	ldr	r3, [r7, #8]
 801599e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d00d      	beq.n	80159c0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d00a      	beq.n	80159c0 <udp_bind+0xb4>
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d006      	beq.n	80159c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159b2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d003      	beq.n	80159c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159b8:	697b      	ldr	r3, [r7, #20]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d102      	bne.n	80159c6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80159c0:	f06f 0307 	mvn.w	r3, #7
 80159c4:	e01c      	b.n	8015a00 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	68db      	ldr	r3, [r3, #12]
 80159ca:	617b      	str	r3, [r7, #20]
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d1d9      	bne.n	8015986 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d002      	beq.n	80159de <udp_bind+0xd2>
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	e000      	b.n	80159e0 <udp_bind+0xd4>
 80159de:	2300      	movs	r3, #0
 80159e0:	68fa      	ldr	r2, [r7, #12]
 80159e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	88fa      	ldrh	r2, [r7, #6]
 80159e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80159ea:	7cfb      	ldrb	r3, [r7, #19]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d106      	bne.n	80159fe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80159f0:	4b09      	ldr	r3, [pc, #36]	; (8015a18 <udp_bind+0x10c>)
 80159f2:	681a      	ldr	r2, [r3, #0]
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80159f8:	4a07      	ldr	r2, [pc, #28]	; (8015a18 <udp_bind+0x10c>)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80159fe:	2300      	movs	r3, #0
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3718      	adds	r7, #24
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	0801ac1c 	.word	0x0801ac1c
 8015a0c:	0801a80c 	.word	0x0801a80c
 8015a10:	0801aad4 	.word	0x0801aad4
 8015a14:	0801a860 	.word	0x0801a860
 8015a18:	2000b6c0 	.word	0x2000b6c0

08015a1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d107      	bne.n	8015a3e <udp_recv+0x22>
 8015a2e:	4b08      	ldr	r3, [pc, #32]	; (8015a50 <udp_recv+0x34>)
 8015a30:	f240 428a 	movw	r2, #1162	; 0x48a
 8015a34:	4907      	ldr	r1, [pc, #28]	; (8015a54 <udp_recv+0x38>)
 8015a36:	4808      	ldr	r0, [pc, #32]	; (8015a58 <udp_recv+0x3c>)
 8015a38:	f000 fa2e 	bl	8015e98 <iprintf>
 8015a3c:	e005      	b.n	8015a4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	68ba      	ldr	r2, [r7, #8]
 8015a42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	61da      	str	r2, [r3, #28]
}
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}
 8015a50:	0801a80c 	.word	0x0801a80c
 8015a54:	0801ab40 	.word	0x0801ab40
 8015a58:	0801a860 	.word	0x0801a860

08015a5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d107      	bne.n	8015a7a <udp_remove+0x1e>
 8015a6a:	4b19      	ldr	r3, [pc, #100]	; (8015ad0 <udp_remove+0x74>)
 8015a6c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015a70:	4918      	ldr	r1, [pc, #96]	; (8015ad4 <udp_remove+0x78>)
 8015a72:	4819      	ldr	r0, [pc, #100]	; (8015ad8 <udp_remove+0x7c>)
 8015a74:	f000 fa10 	bl	8015e98 <iprintf>
 8015a78:	e026      	b.n	8015ac8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015a7a:	4b18      	ldr	r3, [pc, #96]	; (8015adc <udp_remove+0x80>)
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d105      	bne.n	8015a90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015a84:	4b15      	ldr	r3, [pc, #84]	; (8015adc <udp_remove+0x80>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	4a14      	ldr	r2, [pc, #80]	; (8015adc <udp_remove+0x80>)
 8015a8c:	6013      	str	r3, [r2, #0]
 8015a8e:	e017      	b.n	8015ac0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a90:	4b12      	ldr	r3, [pc, #72]	; (8015adc <udp_remove+0x80>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	60fb      	str	r3, [r7, #12]
 8015a96:	e010      	b.n	8015aba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	68db      	ldr	r3, [r3, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d009      	beq.n	8015ab4 <udp_remove+0x58>
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	68da      	ldr	r2, [r3, #12]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d104      	bne.n	8015ab4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	68da      	ldr	r2, [r3, #12]
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	60da      	str	r2, [r3, #12]
        break;
 8015ab2:	e005      	b.n	8015ac0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1eb      	bne.n	8015a98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015ac0:	6879      	ldr	r1, [r7, #4]
 8015ac2:	2000      	movs	r0, #0
 8015ac4:	f7f7 febc 	bl	800d840 <memp_free>
}
 8015ac8:	3710      	adds	r7, #16
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	0801a80c 	.word	0x0801a80c
 8015ad4:	0801ab58 	.word	0x0801ab58
 8015ad8:	0801a860 	.word	0x0801a860
 8015adc:	2000b6c0 	.word	0x2000b6c0

08015ae0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	f7f7 fe5e 	bl	800d7a8 <memp_malloc>
 8015aec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d007      	beq.n	8015b04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015af4:	2220      	movs	r2, #32
 8015af6:	2100      	movs	r1, #0
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f000 f9c5 	bl	8015e88 <memset>
    pcb->ttl = UDP_TTL;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	22ff      	movs	r2, #255	; 0xff
 8015b02:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015b04:	687b      	ldr	r3, [r7, #4]
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3708      	adds	r7, #8
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b084      	sub	sp, #16
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	4603      	mov	r3, r0
 8015b16:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015b18:	f7ff ffe2 	bl	8015ae0 <udp_new>
 8015b1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3710      	adds	r7, #16
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015b28:	b480      	push	{r7}
 8015b2a:	b085      	sub	sp, #20
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d01e      	beq.n	8015b76 <udp_netif_ip_addr_changed+0x4e>
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d01a      	beq.n	8015b76 <udp_netif_ip_addr_changed+0x4e>
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d017      	beq.n	8015b76 <udp_netif_ip_addr_changed+0x4e>
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d013      	beq.n	8015b76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b4e:	4b0d      	ldr	r3, [pc, #52]	; (8015b84 <udp_netif_ip_addr_changed+0x5c>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	60fb      	str	r3, [r7, #12]
 8015b54:	e00c      	b.n	8015b70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d103      	bne.n	8015b6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	681a      	ldr	r2, [r3, #0]
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	60fb      	str	r3, [r7, #12]
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d1ef      	bne.n	8015b56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015b76:	bf00      	nop
 8015b78:	3714      	adds	r7, #20
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr
 8015b82:	bf00      	nop
 8015b84:	2000b6c0 	.word	0x2000b6c0

08015b88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b086      	sub	sp, #24
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015b92:	230e      	movs	r3, #14
 8015b94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	895b      	ldrh	r3, [r3, #10]
 8015b9a:	2b0e      	cmp	r3, #14
 8015b9c:	d96e      	bls.n	8015c7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	7bdb      	ldrb	r3, [r3, #15]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d106      	bne.n	8015bb4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015bac:	3301      	adds	r3, #1
 8015bae:	b2da      	uxtb	r2, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	7b1a      	ldrb	r2, [r3, #12]
 8015bbe:	7b5b      	ldrb	r3, [r3, #13]
 8015bc0:	021b      	lsls	r3, r3, #8
 8015bc2:	4313      	orrs	r3, r2
 8015bc4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	f003 0301 	and.w	r3, r3, #1
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d023      	beq.n	8015c1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015bd2:	693b      	ldr	r3, [r7, #16]
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	2b01      	cmp	r3, #1
 8015bd8:	d10f      	bne.n	8015bfa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	785b      	ldrb	r3, [r3, #1]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d11b      	bne.n	8015c1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015be6:	2b5e      	cmp	r3, #94	; 0x5e
 8015be8:	d117      	bne.n	8015c1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	7b5b      	ldrb	r3, [r3, #13]
 8015bee:	f043 0310 	orr.w	r3, r3, #16
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	735a      	strb	r2, [r3, #13]
 8015bf8:	e00f      	b.n	8015c1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	2206      	movs	r2, #6
 8015bfe:	4928      	ldr	r1, [pc, #160]	; (8015ca0 <ethernet_input+0x118>)
 8015c00:	4618      	mov	r0, r3
 8015c02:	f000 f90d 	bl	8015e20 <memcmp>
 8015c06:	4603      	mov	r3, r0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d106      	bne.n	8015c1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	7b5b      	ldrb	r3, [r3, #13]
 8015c10:	f043 0308 	orr.w	r3, r3, #8
 8015c14:	b2da      	uxtb	r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015c1a:	89fb      	ldrh	r3, [r7, #14]
 8015c1c:	2b08      	cmp	r3, #8
 8015c1e:	d003      	beq.n	8015c28 <ethernet_input+0xa0>
 8015c20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015c24:	d014      	beq.n	8015c50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015c26:	e032      	b.n	8015c8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c2e:	f003 0308 	and.w	r3, r3, #8
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d024      	beq.n	8015c80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c36:	8afb      	ldrh	r3, [r7, #22]
 8015c38:	4619      	mov	r1, r3
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f7f8 fb8a 	bl	800e354 <pbuf_remove_header>
 8015c40:	4603      	mov	r3, r0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d11e      	bne.n	8015c84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015c46:	6839      	ldr	r1, [r7, #0]
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f7f5 ff45 	bl	800bad8 <ip4_input>
      break;
 8015c4e:	e013      	b.n	8015c78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c56:	f003 0308 	and.w	r3, r3, #8
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d014      	beq.n	8015c88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c5e:	8afb      	ldrh	r3, [r7, #22]
 8015c60:	4619      	mov	r1, r3
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f7f8 fb76 	bl	800e354 <pbuf_remove_header>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d10e      	bne.n	8015c8c <ethernet_input+0x104>
        etharp_input(p, netif);
 8015c6e:	6839      	ldr	r1, [r7, #0]
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7f5 f8e9 	bl	800ae48 <etharp_input>
      break;
 8015c76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	e00c      	b.n	8015c96 <ethernet_input+0x10e>
    goto free_and_return;
 8015c7c:	bf00      	nop
 8015c7e:	e006      	b.n	8015c8e <ethernet_input+0x106>
        goto free_and_return;
 8015c80:	bf00      	nop
 8015c82:	e004      	b.n	8015c8e <ethernet_input+0x106>
        goto free_and_return;
 8015c84:	bf00      	nop
 8015c86:	e002      	b.n	8015c8e <ethernet_input+0x106>
        goto free_and_return;
 8015c88:	bf00      	nop
 8015c8a:	e000      	b.n	8015c8e <ethernet_input+0x106>
        goto free_and_return;
 8015c8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f7f8 fc18 	bl	800e4c4 <pbuf_free>
  return ERR_OK;
 8015c94:	2300      	movs	r3, #0
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	3718      	adds	r7, #24
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	0801acf8 	.word	0x0801acf8

08015ca4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b086      	sub	sp, #24
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	607a      	str	r2, [r7, #4]
 8015cb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015cb2:	8c3b      	ldrh	r3, [r7, #32]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f3 fd75 	bl	80097a4 <lwip_htons>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015cbe:	210e      	movs	r1, #14
 8015cc0:	68b8      	ldr	r0, [r7, #8]
 8015cc2:	f7f8 fb37 	bl	800e334 <pbuf_add_header>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d125      	bne.n	8015d18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	8afa      	ldrh	r2, [r7, #22]
 8015cd6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015cd8:	693b      	ldr	r3, [r7, #16]
 8015cda:	2206      	movs	r2, #6
 8015cdc:	6839      	ldr	r1, [r7, #0]
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f000 f8ad 	bl	8015e3e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	3306      	adds	r3, #6
 8015ce8:	2206      	movs	r2, #6
 8015cea:	6879      	ldr	r1, [r7, #4]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f000 f8a6 	bl	8015e3e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015cf8:	2b06      	cmp	r3, #6
 8015cfa:	d006      	beq.n	8015d0a <ethernet_output+0x66>
 8015cfc:	4b0a      	ldr	r3, [pc, #40]	; (8015d28 <ethernet_output+0x84>)
 8015cfe:	f240 1233 	movw	r2, #307	; 0x133
 8015d02:	490a      	ldr	r1, [pc, #40]	; (8015d2c <ethernet_output+0x88>)
 8015d04:	480a      	ldr	r0, [pc, #40]	; (8015d30 <ethernet_output+0x8c>)
 8015d06:	f000 f8c7 	bl	8015e98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	699b      	ldr	r3, [r3, #24]
 8015d0e:	68b9      	ldr	r1, [r7, #8]
 8015d10:	68f8      	ldr	r0, [r7, #12]
 8015d12:	4798      	blx	r3
 8015d14:	4603      	mov	r3, r0
 8015d16:	e002      	b.n	8015d1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015d18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015d1a:	f06f 0301 	mvn.w	r3, #1
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3718      	adds	r7, #24
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	0801ab70 	.word	0x0801ab70
 8015d2c:	0801aba8 	.word	0x0801aba8
 8015d30:	0801abdc 	.word	0x0801abdc

08015d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015d38:	480d      	ldr	r0, [pc, #52]	; (8015d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015d3a:	490e      	ldr	r1, [pc, #56]	; (8015d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015d3c:	4a0e      	ldr	r2, [pc, #56]	; (8015d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8015d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015d40:	e002      	b.n	8015d48 <LoopCopyDataInit>

08015d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015d46:	3304      	adds	r3, #4

08015d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015d4c:	d3f9      	bcc.n	8015d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015d4e:	4a0b      	ldr	r2, [pc, #44]	; (8015d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015d50:	4c0b      	ldr	r4, [pc, #44]	; (8015d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8015d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015d54:	e001      	b.n	8015d5a <LoopFillZerobss>

08015d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015d58:	3204      	adds	r2, #4

08015d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015d5c:	d3fb      	bcc.n	8015d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8015d5e:	f7eb ff09 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015d62:	f000 f815 	bl	8015d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015d66:	f7ea ff85 	bl	8000c74 <main>
  bx  lr    
 8015d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015d6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8015d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015d74:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8015d78:	0801aebc 	.word	0x0801aebc
  ldr r2, =_sbss
 8015d7c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8015d80:	2000b6c8 	.word	0x2000b6c8

08015d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015d84:	e7fe      	b.n	8015d84 <ADC_IRQHandler>

08015d86 <atoi>:
 8015d86:	220a      	movs	r2, #10
 8015d88:	2100      	movs	r1, #0
 8015d8a:	f000 b9df 	b.w	801614c <strtol>
	...

08015d90 <__libc_init_array>:
 8015d90:	b570      	push	{r4, r5, r6, lr}
 8015d92:	4e0d      	ldr	r6, [pc, #52]	; (8015dc8 <__libc_init_array+0x38>)
 8015d94:	4c0d      	ldr	r4, [pc, #52]	; (8015dcc <__libc_init_array+0x3c>)
 8015d96:	1ba4      	subs	r4, r4, r6
 8015d98:	10a4      	asrs	r4, r4, #2
 8015d9a:	2500      	movs	r5, #0
 8015d9c:	42a5      	cmp	r5, r4
 8015d9e:	d109      	bne.n	8015db4 <__libc_init_array+0x24>
 8015da0:	4e0b      	ldr	r6, [pc, #44]	; (8015dd0 <__libc_init_array+0x40>)
 8015da2:	4c0c      	ldr	r4, [pc, #48]	; (8015dd4 <__libc_init_array+0x44>)
 8015da4:	f001 fa5e 	bl	8017264 <_init>
 8015da8:	1ba4      	subs	r4, r4, r6
 8015daa:	10a4      	asrs	r4, r4, #2
 8015dac:	2500      	movs	r5, #0
 8015dae:	42a5      	cmp	r5, r4
 8015db0:	d105      	bne.n	8015dbe <__libc_init_array+0x2e>
 8015db2:	bd70      	pop	{r4, r5, r6, pc}
 8015db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015db8:	4798      	blx	r3
 8015dba:	3501      	adds	r5, #1
 8015dbc:	e7ee      	b.n	8015d9c <__libc_init_array+0xc>
 8015dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015dc2:	4798      	blx	r3
 8015dc4:	3501      	adds	r5, #1
 8015dc6:	e7f2      	b.n	8015dae <__libc_init_array+0x1e>
 8015dc8:	0801aeb4 	.word	0x0801aeb4
 8015dcc:	0801aeb4 	.word	0x0801aeb4
 8015dd0:	0801aeb4 	.word	0x0801aeb4
 8015dd4:	0801aeb8 	.word	0x0801aeb8

08015dd8 <__locale_ctype_ptr_l>:
 8015dd8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015ddc:	4770      	bx	lr
	...

08015de0 <__locale_ctype_ptr>:
 8015de0:	4b04      	ldr	r3, [pc, #16]	; (8015df4 <__locale_ctype_ptr+0x14>)
 8015de2:	4a05      	ldr	r2, [pc, #20]	; (8015df8 <__locale_ctype_ptr+0x18>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	6a1b      	ldr	r3, [r3, #32]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	bf08      	it	eq
 8015dec:	4613      	moveq	r3, r2
 8015dee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015df2:	4770      	bx	lr
 8015df4:	20000180 	.word	0x20000180
 8015df8:	20000014 	.word	0x20000014

08015dfc <__ascii_mbtowc>:
 8015dfc:	b082      	sub	sp, #8
 8015dfe:	b901      	cbnz	r1, 8015e02 <__ascii_mbtowc+0x6>
 8015e00:	a901      	add	r1, sp, #4
 8015e02:	b142      	cbz	r2, 8015e16 <__ascii_mbtowc+0x1a>
 8015e04:	b14b      	cbz	r3, 8015e1a <__ascii_mbtowc+0x1e>
 8015e06:	7813      	ldrb	r3, [r2, #0]
 8015e08:	600b      	str	r3, [r1, #0]
 8015e0a:	7812      	ldrb	r2, [r2, #0]
 8015e0c:	1c10      	adds	r0, r2, #0
 8015e0e:	bf18      	it	ne
 8015e10:	2001      	movne	r0, #1
 8015e12:	b002      	add	sp, #8
 8015e14:	4770      	bx	lr
 8015e16:	4610      	mov	r0, r2
 8015e18:	e7fb      	b.n	8015e12 <__ascii_mbtowc+0x16>
 8015e1a:	f06f 0001 	mvn.w	r0, #1
 8015e1e:	e7f8      	b.n	8015e12 <__ascii_mbtowc+0x16>

08015e20 <memcmp>:
 8015e20:	b510      	push	{r4, lr}
 8015e22:	3901      	subs	r1, #1
 8015e24:	4402      	add	r2, r0
 8015e26:	4290      	cmp	r0, r2
 8015e28:	d101      	bne.n	8015e2e <memcmp+0xe>
 8015e2a:	2000      	movs	r0, #0
 8015e2c:	bd10      	pop	{r4, pc}
 8015e2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015e32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015e36:	42a3      	cmp	r3, r4
 8015e38:	d0f5      	beq.n	8015e26 <memcmp+0x6>
 8015e3a:	1b18      	subs	r0, r3, r4
 8015e3c:	bd10      	pop	{r4, pc}

08015e3e <memcpy>:
 8015e3e:	b510      	push	{r4, lr}
 8015e40:	1e43      	subs	r3, r0, #1
 8015e42:	440a      	add	r2, r1
 8015e44:	4291      	cmp	r1, r2
 8015e46:	d100      	bne.n	8015e4a <memcpy+0xc>
 8015e48:	bd10      	pop	{r4, pc}
 8015e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e52:	e7f7      	b.n	8015e44 <memcpy+0x6>

08015e54 <memmove>:
 8015e54:	4288      	cmp	r0, r1
 8015e56:	b510      	push	{r4, lr}
 8015e58:	eb01 0302 	add.w	r3, r1, r2
 8015e5c:	d803      	bhi.n	8015e66 <memmove+0x12>
 8015e5e:	1e42      	subs	r2, r0, #1
 8015e60:	4299      	cmp	r1, r3
 8015e62:	d10c      	bne.n	8015e7e <memmove+0x2a>
 8015e64:	bd10      	pop	{r4, pc}
 8015e66:	4298      	cmp	r0, r3
 8015e68:	d2f9      	bcs.n	8015e5e <memmove+0xa>
 8015e6a:	1881      	adds	r1, r0, r2
 8015e6c:	1ad2      	subs	r2, r2, r3
 8015e6e:	42d3      	cmn	r3, r2
 8015e70:	d100      	bne.n	8015e74 <memmove+0x20>
 8015e72:	bd10      	pop	{r4, pc}
 8015e74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e7c:	e7f7      	b.n	8015e6e <memmove+0x1a>
 8015e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015e86:	e7eb      	b.n	8015e60 <memmove+0xc>

08015e88 <memset>:
 8015e88:	4402      	add	r2, r0
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	4293      	cmp	r3, r2
 8015e8e:	d100      	bne.n	8015e92 <memset+0xa>
 8015e90:	4770      	bx	lr
 8015e92:	f803 1b01 	strb.w	r1, [r3], #1
 8015e96:	e7f9      	b.n	8015e8c <memset+0x4>

08015e98 <iprintf>:
 8015e98:	b40f      	push	{r0, r1, r2, r3}
 8015e9a:	4b0a      	ldr	r3, [pc, #40]	; (8015ec4 <iprintf+0x2c>)
 8015e9c:	b513      	push	{r0, r1, r4, lr}
 8015e9e:	681c      	ldr	r4, [r3, #0]
 8015ea0:	b124      	cbz	r4, 8015eac <iprintf+0x14>
 8015ea2:	69a3      	ldr	r3, [r4, #24]
 8015ea4:	b913      	cbnz	r3, 8015eac <iprintf+0x14>
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	f000 f9b4 	bl	8016214 <__sinit>
 8015eac:	ab05      	add	r3, sp, #20
 8015eae:	9a04      	ldr	r2, [sp, #16]
 8015eb0:	68a1      	ldr	r1, [r4, #8]
 8015eb2:	9301      	str	r3, [sp, #4]
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f000 fc65 	bl	8016784 <_vfiprintf_r>
 8015eba:	b002      	add	sp, #8
 8015ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ec0:	b004      	add	sp, #16
 8015ec2:	4770      	bx	lr
 8015ec4:	20000180 	.word	0x20000180

08015ec8 <rand>:
 8015ec8:	4b19      	ldr	r3, [pc, #100]	; (8015f30 <rand+0x68>)
 8015eca:	b510      	push	{r4, lr}
 8015ecc:	681c      	ldr	r4, [r3, #0]
 8015ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015ed0:	b9d3      	cbnz	r3, 8015f08 <rand+0x40>
 8015ed2:	2018      	movs	r0, #24
 8015ed4:	f000 fa28 	bl	8016328 <malloc>
 8015ed8:	f243 330e 	movw	r3, #13070	; 0x330e
 8015edc:	63a0      	str	r0, [r4, #56]	; 0x38
 8015ede:	8003      	strh	r3, [r0, #0]
 8015ee0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8015ee4:	8043      	strh	r3, [r0, #2]
 8015ee6:	f241 2334 	movw	r3, #4660	; 0x1234
 8015eea:	8083      	strh	r3, [r0, #4]
 8015eec:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8015ef0:	80c3      	strh	r3, [r0, #6]
 8015ef2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8015ef6:	8103      	strh	r3, [r0, #8]
 8015ef8:	2305      	movs	r3, #5
 8015efa:	8143      	strh	r3, [r0, #10]
 8015efc:	230b      	movs	r3, #11
 8015efe:	8183      	strh	r3, [r0, #12]
 8015f00:	2201      	movs	r2, #1
 8015f02:	2300      	movs	r3, #0
 8015f04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015f08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015f0a:	480a      	ldr	r0, [pc, #40]	; (8015f34 <rand+0x6c>)
 8015f0c:	690a      	ldr	r2, [r1, #16]
 8015f0e:	694b      	ldr	r3, [r1, #20]
 8015f10:	4c09      	ldr	r4, [pc, #36]	; (8015f38 <rand+0x70>)
 8015f12:	4350      	muls	r0, r2
 8015f14:	fb04 0003 	mla	r0, r4, r3, r0
 8015f18:	fba2 2304 	umull	r2, r3, r2, r4
 8015f1c:	3201      	adds	r2, #1
 8015f1e:	4403      	add	r3, r0
 8015f20:	f143 0300 	adc.w	r3, r3, #0
 8015f24:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8015f28:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8015f2c:	bd10      	pop	{r4, pc}
 8015f2e:	bf00      	nop
 8015f30:	20000180 	.word	0x20000180
 8015f34:	5851f42d 	.word	0x5851f42d
 8015f38:	4c957f2d 	.word	0x4c957f2d

08015f3c <sniprintf>:
 8015f3c:	b40c      	push	{r2, r3}
 8015f3e:	b530      	push	{r4, r5, lr}
 8015f40:	4b17      	ldr	r3, [pc, #92]	; (8015fa0 <sniprintf+0x64>)
 8015f42:	1e0c      	subs	r4, r1, #0
 8015f44:	b09d      	sub	sp, #116	; 0x74
 8015f46:	681d      	ldr	r5, [r3, #0]
 8015f48:	da08      	bge.n	8015f5c <sniprintf+0x20>
 8015f4a:	238b      	movs	r3, #139	; 0x8b
 8015f4c:	602b      	str	r3, [r5, #0]
 8015f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8015f52:	b01d      	add	sp, #116	; 0x74
 8015f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f58:	b002      	add	sp, #8
 8015f5a:	4770      	bx	lr
 8015f5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f64:	bf14      	ite	ne
 8015f66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015f6a:	4623      	moveq	r3, r4
 8015f6c:	9304      	str	r3, [sp, #16]
 8015f6e:	9307      	str	r3, [sp, #28]
 8015f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f74:	9002      	str	r0, [sp, #8]
 8015f76:	9006      	str	r0, [sp, #24]
 8015f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015f7e:	ab21      	add	r3, sp, #132	; 0x84
 8015f80:	a902      	add	r1, sp, #8
 8015f82:	4628      	mov	r0, r5
 8015f84:	9301      	str	r3, [sp, #4]
 8015f86:	f000 fadf 	bl	8016548 <_svfiprintf_r>
 8015f8a:	1c43      	adds	r3, r0, #1
 8015f8c:	bfbc      	itt	lt
 8015f8e:	238b      	movlt	r3, #139	; 0x8b
 8015f90:	602b      	strlt	r3, [r5, #0]
 8015f92:	2c00      	cmp	r4, #0
 8015f94:	d0dd      	beq.n	8015f52 <sniprintf+0x16>
 8015f96:	9b02      	ldr	r3, [sp, #8]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	701a      	strb	r2, [r3, #0]
 8015f9c:	e7d9      	b.n	8015f52 <sniprintf+0x16>
 8015f9e:	bf00      	nop
 8015fa0:	20000180 	.word	0x20000180

08015fa4 <siprintf>:
 8015fa4:	b40e      	push	{r1, r2, r3}
 8015fa6:	b500      	push	{lr}
 8015fa8:	b09c      	sub	sp, #112	; 0x70
 8015faa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8015fae:	ab1d      	add	r3, sp, #116	; 0x74
 8015fb0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015fb4:	9002      	str	r0, [sp, #8]
 8015fb6:	9006      	str	r0, [sp, #24]
 8015fb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fbc:	480a      	ldr	r0, [pc, #40]	; (8015fe8 <siprintf+0x44>)
 8015fbe:	9104      	str	r1, [sp, #16]
 8015fc0:	9107      	str	r1, [sp, #28]
 8015fc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fca:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015fce:	6800      	ldr	r0, [r0, #0]
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	a902      	add	r1, sp, #8
 8015fd4:	f000 fab8 	bl	8016548 <_svfiprintf_r>
 8015fd8:	9b02      	ldr	r3, [sp, #8]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	701a      	strb	r2, [r3, #0]
 8015fde:	b01c      	add	sp, #112	; 0x70
 8015fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fe4:	b003      	add	sp, #12
 8015fe6:	4770      	bx	lr
 8015fe8:	20000180 	.word	0x20000180

08015fec <strncpy>:
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	4604      	mov	r4, r0
 8015ff0:	b902      	cbnz	r2, 8015ff4 <strncpy+0x8>
 8015ff2:	bd70      	pop	{r4, r5, r6, pc}
 8015ff4:	4623      	mov	r3, r4
 8015ff6:	f811 5b01 	ldrb.w	r5, [r1], #1
 8015ffa:	f803 5b01 	strb.w	r5, [r3], #1
 8015ffe:	1e56      	subs	r6, r2, #1
 8016000:	b91d      	cbnz	r5, 801600a <strncpy+0x1e>
 8016002:	4414      	add	r4, r2
 8016004:	42a3      	cmp	r3, r4
 8016006:	d103      	bne.n	8016010 <strncpy+0x24>
 8016008:	bd70      	pop	{r4, r5, r6, pc}
 801600a:	461c      	mov	r4, r3
 801600c:	4632      	mov	r2, r6
 801600e:	e7ef      	b.n	8015ff0 <strncpy+0x4>
 8016010:	f803 5b01 	strb.w	r5, [r3], #1
 8016014:	e7f6      	b.n	8016004 <strncpy+0x18>

08016016 <strstr>:
 8016016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016018:	7803      	ldrb	r3, [r0, #0]
 801601a:	b133      	cbz	r3, 801602a <strstr+0x14>
 801601c:	4603      	mov	r3, r0
 801601e:	4618      	mov	r0, r3
 8016020:	1c5e      	adds	r6, r3, #1
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	b933      	cbnz	r3, 8016034 <strstr+0x1e>
 8016026:	4618      	mov	r0, r3
 8016028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801602a:	780b      	ldrb	r3, [r1, #0]
 801602c:	2b00      	cmp	r3, #0
 801602e:	bf18      	it	ne
 8016030:	2000      	movne	r0, #0
 8016032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016034:	1e4d      	subs	r5, r1, #1
 8016036:	1e44      	subs	r4, r0, #1
 8016038:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801603c:	2a00      	cmp	r2, #0
 801603e:	d0f3      	beq.n	8016028 <strstr+0x12>
 8016040:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8016044:	4297      	cmp	r7, r2
 8016046:	4633      	mov	r3, r6
 8016048:	d0f6      	beq.n	8016038 <strstr+0x22>
 801604a:	e7e8      	b.n	801601e <strstr+0x8>

0801604c <_strtol_l.isra.0>:
 801604c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016050:	4680      	mov	r8, r0
 8016052:	4689      	mov	r9, r1
 8016054:	4692      	mov	sl, r2
 8016056:	461f      	mov	r7, r3
 8016058:	468b      	mov	fp, r1
 801605a:	465d      	mov	r5, fp
 801605c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801605e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016062:	f7ff feb9 	bl	8015dd8 <__locale_ctype_ptr_l>
 8016066:	4420      	add	r0, r4
 8016068:	7846      	ldrb	r6, [r0, #1]
 801606a:	f016 0608 	ands.w	r6, r6, #8
 801606e:	d10b      	bne.n	8016088 <_strtol_l.isra.0+0x3c>
 8016070:	2c2d      	cmp	r4, #45	; 0x2d
 8016072:	d10b      	bne.n	801608c <_strtol_l.isra.0+0x40>
 8016074:	782c      	ldrb	r4, [r5, #0]
 8016076:	2601      	movs	r6, #1
 8016078:	f10b 0502 	add.w	r5, fp, #2
 801607c:	b167      	cbz	r7, 8016098 <_strtol_l.isra.0+0x4c>
 801607e:	2f10      	cmp	r7, #16
 8016080:	d114      	bne.n	80160ac <_strtol_l.isra.0+0x60>
 8016082:	2c30      	cmp	r4, #48	; 0x30
 8016084:	d00a      	beq.n	801609c <_strtol_l.isra.0+0x50>
 8016086:	e011      	b.n	80160ac <_strtol_l.isra.0+0x60>
 8016088:	46ab      	mov	fp, r5
 801608a:	e7e6      	b.n	801605a <_strtol_l.isra.0+0xe>
 801608c:	2c2b      	cmp	r4, #43	; 0x2b
 801608e:	bf04      	itt	eq
 8016090:	782c      	ldrbeq	r4, [r5, #0]
 8016092:	f10b 0502 	addeq.w	r5, fp, #2
 8016096:	e7f1      	b.n	801607c <_strtol_l.isra.0+0x30>
 8016098:	2c30      	cmp	r4, #48	; 0x30
 801609a:	d127      	bne.n	80160ec <_strtol_l.isra.0+0xa0>
 801609c:	782b      	ldrb	r3, [r5, #0]
 801609e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80160a2:	2b58      	cmp	r3, #88	; 0x58
 80160a4:	d14b      	bne.n	801613e <_strtol_l.isra.0+0xf2>
 80160a6:	786c      	ldrb	r4, [r5, #1]
 80160a8:	2710      	movs	r7, #16
 80160aa:	3502      	adds	r5, #2
 80160ac:	2e00      	cmp	r6, #0
 80160ae:	bf0c      	ite	eq
 80160b0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80160b4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80160b8:	2200      	movs	r2, #0
 80160ba:	fbb1 fef7 	udiv	lr, r1, r7
 80160be:	4610      	mov	r0, r2
 80160c0:	fb07 1c1e 	mls	ip, r7, lr, r1
 80160c4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80160c8:	2b09      	cmp	r3, #9
 80160ca:	d811      	bhi.n	80160f0 <_strtol_l.isra.0+0xa4>
 80160cc:	461c      	mov	r4, r3
 80160ce:	42a7      	cmp	r7, r4
 80160d0:	dd1d      	ble.n	801610e <_strtol_l.isra.0+0xc2>
 80160d2:	1c53      	adds	r3, r2, #1
 80160d4:	d007      	beq.n	80160e6 <_strtol_l.isra.0+0x9a>
 80160d6:	4586      	cmp	lr, r0
 80160d8:	d316      	bcc.n	8016108 <_strtol_l.isra.0+0xbc>
 80160da:	d101      	bne.n	80160e0 <_strtol_l.isra.0+0x94>
 80160dc:	45a4      	cmp	ip, r4
 80160de:	db13      	blt.n	8016108 <_strtol_l.isra.0+0xbc>
 80160e0:	fb00 4007 	mla	r0, r0, r7, r4
 80160e4:	2201      	movs	r2, #1
 80160e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80160ea:	e7eb      	b.n	80160c4 <_strtol_l.isra.0+0x78>
 80160ec:	270a      	movs	r7, #10
 80160ee:	e7dd      	b.n	80160ac <_strtol_l.isra.0+0x60>
 80160f0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80160f4:	2b19      	cmp	r3, #25
 80160f6:	d801      	bhi.n	80160fc <_strtol_l.isra.0+0xb0>
 80160f8:	3c37      	subs	r4, #55	; 0x37
 80160fa:	e7e8      	b.n	80160ce <_strtol_l.isra.0+0x82>
 80160fc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016100:	2b19      	cmp	r3, #25
 8016102:	d804      	bhi.n	801610e <_strtol_l.isra.0+0xc2>
 8016104:	3c57      	subs	r4, #87	; 0x57
 8016106:	e7e2      	b.n	80160ce <_strtol_l.isra.0+0x82>
 8016108:	f04f 32ff 	mov.w	r2, #4294967295
 801610c:	e7eb      	b.n	80160e6 <_strtol_l.isra.0+0x9a>
 801610e:	1c53      	adds	r3, r2, #1
 8016110:	d108      	bne.n	8016124 <_strtol_l.isra.0+0xd8>
 8016112:	2322      	movs	r3, #34	; 0x22
 8016114:	f8c8 3000 	str.w	r3, [r8]
 8016118:	4608      	mov	r0, r1
 801611a:	f1ba 0f00 	cmp.w	sl, #0
 801611e:	d107      	bne.n	8016130 <_strtol_l.isra.0+0xe4>
 8016120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016124:	b106      	cbz	r6, 8016128 <_strtol_l.isra.0+0xdc>
 8016126:	4240      	negs	r0, r0
 8016128:	f1ba 0f00 	cmp.w	sl, #0
 801612c:	d00c      	beq.n	8016148 <_strtol_l.isra.0+0xfc>
 801612e:	b122      	cbz	r2, 801613a <_strtol_l.isra.0+0xee>
 8016130:	3d01      	subs	r5, #1
 8016132:	f8ca 5000 	str.w	r5, [sl]
 8016136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801613a:	464d      	mov	r5, r9
 801613c:	e7f9      	b.n	8016132 <_strtol_l.isra.0+0xe6>
 801613e:	2430      	movs	r4, #48	; 0x30
 8016140:	2f00      	cmp	r7, #0
 8016142:	d1b3      	bne.n	80160ac <_strtol_l.isra.0+0x60>
 8016144:	2708      	movs	r7, #8
 8016146:	e7b1      	b.n	80160ac <_strtol_l.isra.0+0x60>
 8016148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801614c <strtol>:
 801614c:	4b08      	ldr	r3, [pc, #32]	; (8016170 <strtol+0x24>)
 801614e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016150:	681c      	ldr	r4, [r3, #0]
 8016152:	4d08      	ldr	r5, [pc, #32]	; (8016174 <strtol+0x28>)
 8016154:	6a23      	ldr	r3, [r4, #32]
 8016156:	2b00      	cmp	r3, #0
 8016158:	bf08      	it	eq
 801615a:	462b      	moveq	r3, r5
 801615c:	9300      	str	r3, [sp, #0]
 801615e:	4613      	mov	r3, r2
 8016160:	460a      	mov	r2, r1
 8016162:	4601      	mov	r1, r0
 8016164:	4620      	mov	r0, r4
 8016166:	f7ff ff71 	bl	801604c <_strtol_l.isra.0>
 801616a:	b003      	add	sp, #12
 801616c:	bd30      	pop	{r4, r5, pc}
 801616e:	bf00      	nop
 8016170:	20000180 	.word	0x20000180
 8016174:	20000014 	.word	0x20000014

08016178 <__ascii_wctomb>:
 8016178:	b149      	cbz	r1, 801618e <__ascii_wctomb+0x16>
 801617a:	2aff      	cmp	r2, #255	; 0xff
 801617c:	bf85      	ittet	hi
 801617e:	238a      	movhi	r3, #138	; 0x8a
 8016180:	6003      	strhi	r3, [r0, #0]
 8016182:	700a      	strbls	r2, [r1, #0]
 8016184:	f04f 30ff 	movhi.w	r0, #4294967295
 8016188:	bf98      	it	ls
 801618a:	2001      	movls	r0, #1
 801618c:	4770      	bx	lr
 801618e:	4608      	mov	r0, r1
 8016190:	4770      	bx	lr
	...

08016194 <_cleanup_r>:
 8016194:	4901      	ldr	r1, [pc, #4]	; (801619c <_cleanup_r+0x8>)
 8016196:	f000 b8a9 	b.w	80162ec <_fwalk_reent>
 801619a:	bf00      	nop
 801619c:	08017059 	.word	0x08017059

080161a0 <std.isra.0>:
 80161a0:	2300      	movs	r3, #0
 80161a2:	b510      	push	{r4, lr}
 80161a4:	4604      	mov	r4, r0
 80161a6:	6003      	str	r3, [r0, #0]
 80161a8:	6043      	str	r3, [r0, #4]
 80161aa:	6083      	str	r3, [r0, #8]
 80161ac:	8181      	strh	r1, [r0, #12]
 80161ae:	6643      	str	r3, [r0, #100]	; 0x64
 80161b0:	81c2      	strh	r2, [r0, #14]
 80161b2:	6103      	str	r3, [r0, #16]
 80161b4:	6143      	str	r3, [r0, #20]
 80161b6:	6183      	str	r3, [r0, #24]
 80161b8:	4619      	mov	r1, r3
 80161ba:	2208      	movs	r2, #8
 80161bc:	305c      	adds	r0, #92	; 0x5c
 80161be:	f7ff fe63 	bl	8015e88 <memset>
 80161c2:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <std.isra.0+0x38>)
 80161c4:	6263      	str	r3, [r4, #36]	; 0x24
 80161c6:	4b05      	ldr	r3, [pc, #20]	; (80161dc <std.isra.0+0x3c>)
 80161c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80161ca:	4b05      	ldr	r3, [pc, #20]	; (80161e0 <std.isra.0+0x40>)
 80161cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80161ce:	4b05      	ldr	r3, [pc, #20]	; (80161e4 <std.isra.0+0x44>)
 80161d0:	6224      	str	r4, [r4, #32]
 80161d2:	6323      	str	r3, [r4, #48]	; 0x30
 80161d4:	bd10      	pop	{r4, pc}
 80161d6:	bf00      	nop
 80161d8:	08016cfd 	.word	0x08016cfd
 80161dc:	08016d1f 	.word	0x08016d1f
 80161e0:	08016d57 	.word	0x08016d57
 80161e4:	08016d7b 	.word	0x08016d7b

080161e8 <__sfmoreglue>:
 80161e8:	b570      	push	{r4, r5, r6, lr}
 80161ea:	1e4a      	subs	r2, r1, #1
 80161ec:	2568      	movs	r5, #104	; 0x68
 80161ee:	4355      	muls	r5, r2
 80161f0:	460e      	mov	r6, r1
 80161f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80161f6:	f000 f8ed 	bl	80163d4 <_malloc_r>
 80161fa:	4604      	mov	r4, r0
 80161fc:	b140      	cbz	r0, 8016210 <__sfmoreglue+0x28>
 80161fe:	2100      	movs	r1, #0
 8016200:	e880 0042 	stmia.w	r0, {r1, r6}
 8016204:	300c      	adds	r0, #12
 8016206:	60a0      	str	r0, [r4, #8]
 8016208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801620c:	f7ff fe3c 	bl	8015e88 <memset>
 8016210:	4620      	mov	r0, r4
 8016212:	bd70      	pop	{r4, r5, r6, pc}

08016214 <__sinit>:
 8016214:	6983      	ldr	r3, [r0, #24]
 8016216:	b510      	push	{r4, lr}
 8016218:	4604      	mov	r4, r0
 801621a:	bb33      	cbnz	r3, 801626a <__sinit+0x56>
 801621c:	6483      	str	r3, [r0, #72]	; 0x48
 801621e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8016220:	6503      	str	r3, [r0, #80]	; 0x50
 8016222:	4b12      	ldr	r3, [pc, #72]	; (801626c <__sinit+0x58>)
 8016224:	4a12      	ldr	r2, [pc, #72]	; (8016270 <__sinit+0x5c>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	6282      	str	r2, [r0, #40]	; 0x28
 801622a:	4298      	cmp	r0, r3
 801622c:	bf04      	itt	eq
 801622e:	2301      	moveq	r3, #1
 8016230:	6183      	streq	r3, [r0, #24]
 8016232:	f000 f81f 	bl	8016274 <__sfp>
 8016236:	6060      	str	r0, [r4, #4]
 8016238:	4620      	mov	r0, r4
 801623a:	f000 f81b 	bl	8016274 <__sfp>
 801623e:	60a0      	str	r0, [r4, #8]
 8016240:	4620      	mov	r0, r4
 8016242:	f000 f817 	bl	8016274 <__sfp>
 8016246:	2200      	movs	r2, #0
 8016248:	60e0      	str	r0, [r4, #12]
 801624a:	2104      	movs	r1, #4
 801624c:	6860      	ldr	r0, [r4, #4]
 801624e:	f7ff ffa7 	bl	80161a0 <std.isra.0>
 8016252:	2201      	movs	r2, #1
 8016254:	2109      	movs	r1, #9
 8016256:	68a0      	ldr	r0, [r4, #8]
 8016258:	f7ff ffa2 	bl	80161a0 <std.isra.0>
 801625c:	2202      	movs	r2, #2
 801625e:	2112      	movs	r1, #18
 8016260:	68e0      	ldr	r0, [r4, #12]
 8016262:	f7ff ff9d 	bl	80161a0 <std.isra.0>
 8016266:	2301      	movs	r3, #1
 8016268:	61a3      	str	r3, [r4, #24]
 801626a:	bd10      	pop	{r4, pc}
 801626c:	0801ae74 	.word	0x0801ae74
 8016270:	08016195 	.word	0x08016195

08016274 <__sfp>:
 8016274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016276:	4b1c      	ldr	r3, [pc, #112]	; (80162e8 <__sfp+0x74>)
 8016278:	681e      	ldr	r6, [r3, #0]
 801627a:	69b3      	ldr	r3, [r6, #24]
 801627c:	4607      	mov	r7, r0
 801627e:	b913      	cbnz	r3, 8016286 <__sfp+0x12>
 8016280:	4630      	mov	r0, r6
 8016282:	f7ff ffc7 	bl	8016214 <__sinit>
 8016286:	3648      	adds	r6, #72	; 0x48
 8016288:	68b4      	ldr	r4, [r6, #8]
 801628a:	6873      	ldr	r3, [r6, #4]
 801628c:	3b01      	subs	r3, #1
 801628e:	d503      	bpl.n	8016298 <__sfp+0x24>
 8016290:	6833      	ldr	r3, [r6, #0]
 8016292:	b133      	cbz	r3, 80162a2 <__sfp+0x2e>
 8016294:	6836      	ldr	r6, [r6, #0]
 8016296:	e7f7      	b.n	8016288 <__sfp+0x14>
 8016298:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801629c:	b16d      	cbz	r5, 80162ba <__sfp+0x46>
 801629e:	3468      	adds	r4, #104	; 0x68
 80162a0:	e7f4      	b.n	801628c <__sfp+0x18>
 80162a2:	2104      	movs	r1, #4
 80162a4:	4638      	mov	r0, r7
 80162a6:	f7ff ff9f 	bl	80161e8 <__sfmoreglue>
 80162aa:	6030      	str	r0, [r6, #0]
 80162ac:	2800      	cmp	r0, #0
 80162ae:	d1f1      	bne.n	8016294 <__sfp+0x20>
 80162b0:	230c      	movs	r3, #12
 80162b2:	603b      	str	r3, [r7, #0]
 80162b4:	4604      	mov	r4, r0
 80162b6:	4620      	mov	r0, r4
 80162b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162be:	81e3      	strh	r3, [r4, #14]
 80162c0:	2301      	movs	r3, #1
 80162c2:	81a3      	strh	r3, [r4, #12]
 80162c4:	6665      	str	r5, [r4, #100]	; 0x64
 80162c6:	6025      	str	r5, [r4, #0]
 80162c8:	60a5      	str	r5, [r4, #8]
 80162ca:	6065      	str	r5, [r4, #4]
 80162cc:	6125      	str	r5, [r4, #16]
 80162ce:	6165      	str	r5, [r4, #20]
 80162d0:	61a5      	str	r5, [r4, #24]
 80162d2:	2208      	movs	r2, #8
 80162d4:	4629      	mov	r1, r5
 80162d6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80162da:	f7ff fdd5 	bl	8015e88 <memset>
 80162de:	6365      	str	r5, [r4, #52]	; 0x34
 80162e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80162e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80162e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80162e6:	e7e6      	b.n	80162b6 <__sfp+0x42>
 80162e8:	0801ae74 	.word	0x0801ae74

080162ec <_fwalk_reent>:
 80162ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162f0:	4680      	mov	r8, r0
 80162f2:	4689      	mov	r9, r1
 80162f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80162f8:	2600      	movs	r6, #0
 80162fa:	b914      	cbnz	r4, 8016302 <_fwalk_reent+0x16>
 80162fc:	4630      	mov	r0, r6
 80162fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016302:	68a5      	ldr	r5, [r4, #8]
 8016304:	6867      	ldr	r7, [r4, #4]
 8016306:	3f01      	subs	r7, #1
 8016308:	d501      	bpl.n	801630e <_fwalk_reent+0x22>
 801630a:	6824      	ldr	r4, [r4, #0]
 801630c:	e7f5      	b.n	80162fa <_fwalk_reent+0xe>
 801630e:	89ab      	ldrh	r3, [r5, #12]
 8016310:	2b01      	cmp	r3, #1
 8016312:	d907      	bls.n	8016324 <_fwalk_reent+0x38>
 8016314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016318:	3301      	adds	r3, #1
 801631a:	d003      	beq.n	8016324 <_fwalk_reent+0x38>
 801631c:	4629      	mov	r1, r5
 801631e:	4640      	mov	r0, r8
 8016320:	47c8      	blx	r9
 8016322:	4306      	orrs	r6, r0
 8016324:	3568      	adds	r5, #104	; 0x68
 8016326:	e7ee      	b.n	8016306 <_fwalk_reent+0x1a>

08016328 <malloc>:
 8016328:	4b02      	ldr	r3, [pc, #8]	; (8016334 <malloc+0xc>)
 801632a:	4601      	mov	r1, r0
 801632c:	6818      	ldr	r0, [r3, #0]
 801632e:	f000 b851 	b.w	80163d4 <_malloc_r>
 8016332:	bf00      	nop
 8016334:	20000180 	.word	0x20000180

08016338 <_free_r>:
 8016338:	b538      	push	{r3, r4, r5, lr}
 801633a:	4605      	mov	r5, r0
 801633c:	2900      	cmp	r1, #0
 801633e:	d045      	beq.n	80163cc <_free_r+0x94>
 8016340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016344:	1f0c      	subs	r4, r1, #4
 8016346:	2b00      	cmp	r3, #0
 8016348:	bfb8      	it	lt
 801634a:	18e4      	addlt	r4, r4, r3
 801634c:	f000 ff24 	bl	8017198 <__malloc_lock>
 8016350:	4a1f      	ldr	r2, [pc, #124]	; (80163d0 <_free_r+0x98>)
 8016352:	6813      	ldr	r3, [r2, #0]
 8016354:	4610      	mov	r0, r2
 8016356:	b933      	cbnz	r3, 8016366 <_free_r+0x2e>
 8016358:	6063      	str	r3, [r4, #4]
 801635a:	6014      	str	r4, [r2, #0]
 801635c:	4628      	mov	r0, r5
 801635e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016362:	f000 bf1a 	b.w	801719a <__malloc_unlock>
 8016366:	42a3      	cmp	r3, r4
 8016368:	d90c      	bls.n	8016384 <_free_r+0x4c>
 801636a:	6821      	ldr	r1, [r4, #0]
 801636c:	1862      	adds	r2, r4, r1
 801636e:	4293      	cmp	r3, r2
 8016370:	bf04      	itt	eq
 8016372:	681a      	ldreq	r2, [r3, #0]
 8016374:	685b      	ldreq	r3, [r3, #4]
 8016376:	6063      	str	r3, [r4, #4]
 8016378:	bf04      	itt	eq
 801637a:	1852      	addeq	r2, r2, r1
 801637c:	6022      	streq	r2, [r4, #0]
 801637e:	6004      	str	r4, [r0, #0]
 8016380:	e7ec      	b.n	801635c <_free_r+0x24>
 8016382:	4613      	mov	r3, r2
 8016384:	685a      	ldr	r2, [r3, #4]
 8016386:	b10a      	cbz	r2, 801638c <_free_r+0x54>
 8016388:	42a2      	cmp	r2, r4
 801638a:	d9fa      	bls.n	8016382 <_free_r+0x4a>
 801638c:	6819      	ldr	r1, [r3, #0]
 801638e:	1858      	adds	r0, r3, r1
 8016390:	42a0      	cmp	r0, r4
 8016392:	d10b      	bne.n	80163ac <_free_r+0x74>
 8016394:	6820      	ldr	r0, [r4, #0]
 8016396:	4401      	add	r1, r0
 8016398:	1858      	adds	r0, r3, r1
 801639a:	4282      	cmp	r2, r0
 801639c:	6019      	str	r1, [r3, #0]
 801639e:	d1dd      	bne.n	801635c <_free_r+0x24>
 80163a0:	6810      	ldr	r0, [r2, #0]
 80163a2:	6852      	ldr	r2, [r2, #4]
 80163a4:	605a      	str	r2, [r3, #4]
 80163a6:	4401      	add	r1, r0
 80163a8:	6019      	str	r1, [r3, #0]
 80163aa:	e7d7      	b.n	801635c <_free_r+0x24>
 80163ac:	d902      	bls.n	80163b4 <_free_r+0x7c>
 80163ae:	230c      	movs	r3, #12
 80163b0:	602b      	str	r3, [r5, #0]
 80163b2:	e7d3      	b.n	801635c <_free_r+0x24>
 80163b4:	6820      	ldr	r0, [r4, #0]
 80163b6:	1821      	adds	r1, r4, r0
 80163b8:	428a      	cmp	r2, r1
 80163ba:	bf04      	itt	eq
 80163bc:	6811      	ldreq	r1, [r2, #0]
 80163be:	6852      	ldreq	r2, [r2, #4]
 80163c0:	6062      	str	r2, [r4, #4]
 80163c2:	bf04      	itt	eq
 80163c4:	1809      	addeq	r1, r1, r0
 80163c6:	6021      	streq	r1, [r4, #0]
 80163c8:	605c      	str	r4, [r3, #4]
 80163ca:	e7c7      	b.n	801635c <_free_r+0x24>
 80163cc:	bd38      	pop	{r3, r4, r5, pc}
 80163ce:	bf00      	nop
 80163d0:	2000089c 	.word	0x2000089c

080163d4 <_malloc_r>:
 80163d4:	b570      	push	{r4, r5, r6, lr}
 80163d6:	1ccd      	adds	r5, r1, #3
 80163d8:	f025 0503 	bic.w	r5, r5, #3
 80163dc:	3508      	adds	r5, #8
 80163de:	2d0c      	cmp	r5, #12
 80163e0:	bf38      	it	cc
 80163e2:	250c      	movcc	r5, #12
 80163e4:	2d00      	cmp	r5, #0
 80163e6:	4606      	mov	r6, r0
 80163e8:	db01      	blt.n	80163ee <_malloc_r+0x1a>
 80163ea:	42a9      	cmp	r1, r5
 80163ec:	d903      	bls.n	80163f6 <_malloc_r+0x22>
 80163ee:	230c      	movs	r3, #12
 80163f0:	6033      	str	r3, [r6, #0]
 80163f2:	2000      	movs	r0, #0
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	f000 fecf 	bl	8017198 <__malloc_lock>
 80163fa:	4a23      	ldr	r2, [pc, #140]	; (8016488 <_malloc_r+0xb4>)
 80163fc:	6814      	ldr	r4, [r2, #0]
 80163fe:	4621      	mov	r1, r4
 8016400:	b991      	cbnz	r1, 8016428 <_malloc_r+0x54>
 8016402:	4c22      	ldr	r4, [pc, #136]	; (801648c <_malloc_r+0xb8>)
 8016404:	6823      	ldr	r3, [r4, #0]
 8016406:	b91b      	cbnz	r3, 8016410 <_malloc_r+0x3c>
 8016408:	4630      	mov	r0, r6
 801640a:	f000 fc67 	bl	8016cdc <_sbrk_r>
 801640e:	6020      	str	r0, [r4, #0]
 8016410:	4629      	mov	r1, r5
 8016412:	4630      	mov	r0, r6
 8016414:	f000 fc62 	bl	8016cdc <_sbrk_r>
 8016418:	1c43      	adds	r3, r0, #1
 801641a:	d126      	bne.n	801646a <_malloc_r+0x96>
 801641c:	230c      	movs	r3, #12
 801641e:	6033      	str	r3, [r6, #0]
 8016420:	4630      	mov	r0, r6
 8016422:	f000 feba 	bl	801719a <__malloc_unlock>
 8016426:	e7e4      	b.n	80163f2 <_malloc_r+0x1e>
 8016428:	680b      	ldr	r3, [r1, #0]
 801642a:	1b5b      	subs	r3, r3, r5
 801642c:	d41a      	bmi.n	8016464 <_malloc_r+0x90>
 801642e:	2b0b      	cmp	r3, #11
 8016430:	d90f      	bls.n	8016452 <_malloc_r+0x7e>
 8016432:	600b      	str	r3, [r1, #0]
 8016434:	50cd      	str	r5, [r1, r3]
 8016436:	18cc      	adds	r4, r1, r3
 8016438:	4630      	mov	r0, r6
 801643a:	f000 feae 	bl	801719a <__malloc_unlock>
 801643e:	f104 000b 	add.w	r0, r4, #11
 8016442:	1d23      	adds	r3, r4, #4
 8016444:	f020 0007 	bic.w	r0, r0, #7
 8016448:	1ac3      	subs	r3, r0, r3
 801644a:	d01b      	beq.n	8016484 <_malloc_r+0xb0>
 801644c:	425a      	negs	r2, r3
 801644e:	50e2      	str	r2, [r4, r3]
 8016450:	bd70      	pop	{r4, r5, r6, pc}
 8016452:	428c      	cmp	r4, r1
 8016454:	bf0d      	iteet	eq
 8016456:	6863      	ldreq	r3, [r4, #4]
 8016458:	684b      	ldrne	r3, [r1, #4]
 801645a:	6063      	strne	r3, [r4, #4]
 801645c:	6013      	streq	r3, [r2, #0]
 801645e:	bf18      	it	ne
 8016460:	460c      	movne	r4, r1
 8016462:	e7e9      	b.n	8016438 <_malloc_r+0x64>
 8016464:	460c      	mov	r4, r1
 8016466:	6849      	ldr	r1, [r1, #4]
 8016468:	e7ca      	b.n	8016400 <_malloc_r+0x2c>
 801646a:	1cc4      	adds	r4, r0, #3
 801646c:	f024 0403 	bic.w	r4, r4, #3
 8016470:	42a0      	cmp	r0, r4
 8016472:	d005      	beq.n	8016480 <_malloc_r+0xac>
 8016474:	1a21      	subs	r1, r4, r0
 8016476:	4630      	mov	r0, r6
 8016478:	f000 fc30 	bl	8016cdc <_sbrk_r>
 801647c:	3001      	adds	r0, #1
 801647e:	d0cd      	beq.n	801641c <_malloc_r+0x48>
 8016480:	6025      	str	r5, [r4, #0]
 8016482:	e7d9      	b.n	8016438 <_malloc_r+0x64>
 8016484:	bd70      	pop	{r4, r5, r6, pc}
 8016486:	bf00      	nop
 8016488:	2000089c 	.word	0x2000089c
 801648c:	200008a0 	.word	0x200008a0

08016490 <__ssputs_r>:
 8016490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016494:	688e      	ldr	r6, [r1, #8]
 8016496:	429e      	cmp	r6, r3
 8016498:	4682      	mov	sl, r0
 801649a:	460c      	mov	r4, r1
 801649c:	4691      	mov	r9, r2
 801649e:	4698      	mov	r8, r3
 80164a0:	d835      	bhi.n	801650e <__ssputs_r+0x7e>
 80164a2:	898a      	ldrh	r2, [r1, #12]
 80164a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80164a8:	d031      	beq.n	801650e <__ssputs_r+0x7e>
 80164aa:	6825      	ldr	r5, [r4, #0]
 80164ac:	6909      	ldr	r1, [r1, #16]
 80164ae:	1a6f      	subs	r7, r5, r1
 80164b0:	6965      	ldr	r5, [r4, #20]
 80164b2:	2302      	movs	r3, #2
 80164b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80164bc:	f108 0301 	add.w	r3, r8, #1
 80164c0:	443b      	add	r3, r7
 80164c2:	429d      	cmp	r5, r3
 80164c4:	bf38      	it	cc
 80164c6:	461d      	movcc	r5, r3
 80164c8:	0553      	lsls	r3, r2, #21
 80164ca:	d531      	bpl.n	8016530 <__ssputs_r+0xa0>
 80164cc:	4629      	mov	r1, r5
 80164ce:	f7ff ff81 	bl	80163d4 <_malloc_r>
 80164d2:	4606      	mov	r6, r0
 80164d4:	b950      	cbnz	r0, 80164ec <__ssputs_r+0x5c>
 80164d6:	230c      	movs	r3, #12
 80164d8:	f8ca 3000 	str.w	r3, [sl]
 80164dc:	89a3      	ldrh	r3, [r4, #12]
 80164de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164e2:	81a3      	strh	r3, [r4, #12]
 80164e4:	f04f 30ff 	mov.w	r0, #4294967295
 80164e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ec:	463a      	mov	r2, r7
 80164ee:	6921      	ldr	r1, [r4, #16]
 80164f0:	f7ff fca5 	bl	8015e3e <memcpy>
 80164f4:	89a3      	ldrh	r3, [r4, #12]
 80164f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80164fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164fe:	81a3      	strh	r3, [r4, #12]
 8016500:	6126      	str	r6, [r4, #16]
 8016502:	6165      	str	r5, [r4, #20]
 8016504:	443e      	add	r6, r7
 8016506:	1bed      	subs	r5, r5, r7
 8016508:	6026      	str	r6, [r4, #0]
 801650a:	60a5      	str	r5, [r4, #8]
 801650c:	4646      	mov	r6, r8
 801650e:	4546      	cmp	r6, r8
 8016510:	bf28      	it	cs
 8016512:	4646      	movcs	r6, r8
 8016514:	4632      	mov	r2, r6
 8016516:	4649      	mov	r1, r9
 8016518:	6820      	ldr	r0, [r4, #0]
 801651a:	f7ff fc9b 	bl	8015e54 <memmove>
 801651e:	68a3      	ldr	r3, [r4, #8]
 8016520:	1b9b      	subs	r3, r3, r6
 8016522:	60a3      	str	r3, [r4, #8]
 8016524:	6823      	ldr	r3, [r4, #0]
 8016526:	441e      	add	r6, r3
 8016528:	6026      	str	r6, [r4, #0]
 801652a:	2000      	movs	r0, #0
 801652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016530:	462a      	mov	r2, r5
 8016532:	f000 fe33 	bl	801719c <_realloc_r>
 8016536:	4606      	mov	r6, r0
 8016538:	2800      	cmp	r0, #0
 801653a:	d1e1      	bne.n	8016500 <__ssputs_r+0x70>
 801653c:	6921      	ldr	r1, [r4, #16]
 801653e:	4650      	mov	r0, sl
 8016540:	f7ff fefa 	bl	8016338 <_free_r>
 8016544:	e7c7      	b.n	80164d6 <__ssputs_r+0x46>
	...

08016548 <_svfiprintf_r>:
 8016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654c:	b09d      	sub	sp, #116	; 0x74
 801654e:	4680      	mov	r8, r0
 8016550:	9303      	str	r3, [sp, #12]
 8016552:	898b      	ldrh	r3, [r1, #12]
 8016554:	061c      	lsls	r4, r3, #24
 8016556:	460d      	mov	r5, r1
 8016558:	4616      	mov	r6, r2
 801655a:	d50f      	bpl.n	801657c <_svfiprintf_r+0x34>
 801655c:	690b      	ldr	r3, [r1, #16]
 801655e:	b96b      	cbnz	r3, 801657c <_svfiprintf_r+0x34>
 8016560:	2140      	movs	r1, #64	; 0x40
 8016562:	f7ff ff37 	bl	80163d4 <_malloc_r>
 8016566:	6028      	str	r0, [r5, #0]
 8016568:	6128      	str	r0, [r5, #16]
 801656a:	b928      	cbnz	r0, 8016578 <_svfiprintf_r+0x30>
 801656c:	230c      	movs	r3, #12
 801656e:	f8c8 3000 	str.w	r3, [r8]
 8016572:	f04f 30ff 	mov.w	r0, #4294967295
 8016576:	e0c5      	b.n	8016704 <_svfiprintf_r+0x1bc>
 8016578:	2340      	movs	r3, #64	; 0x40
 801657a:	616b      	str	r3, [r5, #20]
 801657c:	2300      	movs	r3, #0
 801657e:	9309      	str	r3, [sp, #36]	; 0x24
 8016580:	2320      	movs	r3, #32
 8016582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016586:	2330      	movs	r3, #48	; 0x30
 8016588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801658c:	f04f 0b01 	mov.w	fp, #1
 8016590:	4637      	mov	r7, r6
 8016592:	463c      	mov	r4, r7
 8016594:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016598:	2b00      	cmp	r3, #0
 801659a:	d13c      	bne.n	8016616 <_svfiprintf_r+0xce>
 801659c:	ebb7 0a06 	subs.w	sl, r7, r6
 80165a0:	d00b      	beq.n	80165ba <_svfiprintf_r+0x72>
 80165a2:	4653      	mov	r3, sl
 80165a4:	4632      	mov	r2, r6
 80165a6:	4629      	mov	r1, r5
 80165a8:	4640      	mov	r0, r8
 80165aa:	f7ff ff71 	bl	8016490 <__ssputs_r>
 80165ae:	3001      	adds	r0, #1
 80165b0:	f000 80a3 	beq.w	80166fa <_svfiprintf_r+0x1b2>
 80165b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165b6:	4453      	add	r3, sl
 80165b8:	9309      	str	r3, [sp, #36]	; 0x24
 80165ba:	783b      	ldrb	r3, [r7, #0]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f000 809c 	beq.w	80166fa <_svfiprintf_r+0x1b2>
 80165c2:	2300      	movs	r3, #0
 80165c4:	f04f 32ff 	mov.w	r2, #4294967295
 80165c8:	9304      	str	r3, [sp, #16]
 80165ca:	9307      	str	r3, [sp, #28]
 80165cc:	9205      	str	r2, [sp, #20]
 80165ce:	9306      	str	r3, [sp, #24]
 80165d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165d4:	931a      	str	r3, [sp, #104]	; 0x68
 80165d6:	2205      	movs	r2, #5
 80165d8:	7821      	ldrb	r1, [r4, #0]
 80165da:	4850      	ldr	r0, [pc, #320]	; (801671c <_svfiprintf_r+0x1d4>)
 80165dc:	f7e9 fe48 	bl	8000270 <memchr>
 80165e0:	1c67      	adds	r7, r4, #1
 80165e2:	9b04      	ldr	r3, [sp, #16]
 80165e4:	b9d8      	cbnz	r0, 801661e <_svfiprintf_r+0xd6>
 80165e6:	06d9      	lsls	r1, r3, #27
 80165e8:	bf44      	itt	mi
 80165ea:	2220      	movmi	r2, #32
 80165ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80165f0:	071a      	lsls	r2, r3, #28
 80165f2:	bf44      	itt	mi
 80165f4:	222b      	movmi	r2, #43	; 0x2b
 80165f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80165fa:	7822      	ldrb	r2, [r4, #0]
 80165fc:	2a2a      	cmp	r2, #42	; 0x2a
 80165fe:	d016      	beq.n	801662e <_svfiprintf_r+0xe6>
 8016600:	9a07      	ldr	r2, [sp, #28]
 8016602:	2100      	movs	r1, #0
 8016604:	200a      	movs	r0, #10
 8016606:	4627      	mov	r7, r4
 8016608:	3401      	adds	r4, #1
 801660a:	783b      	ldrb	r3, [r7, #0]
 801660c:	3b30      	subs	r3, #48	; 0x30
 801660e:	2b09      	cmp	r3, #9
 8016610:	d951      	bls.n	80166b6 <_svfiprintf_r+0x16e>
 8016612:	b1c9      	cbz	r1, 8016648 <_svfiprintf_r+0x100>
 8016614:	e011      	b.n	801663a <_svfiprintf_r+0xf2>
 8016616:	2b25      	cmp	r3, #37	; 0x25
 8016618:	d0c0      	beq.n	801659c <_svfiprintf_r+0x54>
 801661a:	4627      	mov	r7, r4
 801661c:	e7b9      	b.n	8016592 <_svfiprintf_r+0x4a>
 801661e:	4a3f      	ldr	r2, [pc, #252]	; (801671c <_svfiprintf_r+0x1d4>)
 8016620:	1a80      	subs	r0, r0, r2
 8016622:	fa0b f000 	lsl.w	r0, fp, r0
 8016626:	4318      	orrs	r0, r3
 8016628:	9004      	str	r0, [sp, #16]
 801662a:	463c      	mov	r4, r7
 801662c:	e7d3      	b.n	80165d6 <_svfiprintf_r+0x8e>
 801662e:	9a03      	ldr	r2, [sp, #12]
 8016630:	1d11      	adds	r1, r2, #4
 8016632:	6812      	ldr	r2, [r2, #0]
 8016634:	9103      	str	r1, [sp, #12]
 8016636:	2a00      	cmp	r2, #0
 8016638:	db01      	blt.n	801663e <_svfiprintf_r+0xf6>
 801663a:	9207      	str	r2, [sp, #28]
 801663c:	e004      	b.n	8016648 <_svfiprintf_r+0x100>
 801663e:	4252      	negs	r2, r2
 8016640:	f043 0302 	orr.w	r3, r3, #2
 8016644:	9207      	str	r2, [sp, #28]
 8016646:	9304      	str	r3, [sp, #16]
 8016648:	783b      	ldrb	r3, [r7, #0]
 801664a:	2b2e      	cmp	r3, #46	; 0x2e
 801664c:	d10e      	bne.n	801666c <_svfiprintf_r+0x124>
 801664e:	787b      	ldrb	r3, [r7, #1]
 8016650:	2b2a      	cmp	r3, #42	; 0x2a
 8016652:	f107 0101 	add.w	r1, r7, #1
 8016656:	d132      	bne.n	80166be <_svfiprintf_r+0x176>
 8016658:	9b03      	ldr	r3, [sp, #12]
 801665a:	1d1a      	adds	r2, r3, #4
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	9203      	str	r2, [sp, #12]
 8016660:	2b00      	cmp	r3, #0
 8016662:	bfb8      	it	lt
 8016664:	f04f 33ff 	movlt.w	r3, #4294967295
 8016668:	3702      	adds	r7, #2
 801666a:	9305      	str	r3, [sp, #20]
 801666c:	4c2c      	ldr	r4, [pc, #176]	; (8016720 <_svfiprintf_r+0x1d8>)
 801666e:	7839      	ldrb	r1, [r7, #0]
 8016670:	2203      	movs	r2, #3
 8016672:	4620      	mov	r0, r4
 8016674:	f7e9 fdfc 	bl	8000270 <memchr>
 8016678:	b138      	cbz	r0, 801668a <_svfiprintf_r+0x142>
 801667a:	2340      	movs	r3, #64	; 0x40
 801667c:	1b00      	subs	r0, r0, r4
 801667e:	fa03 f000 	lsl.w	r0, r3, r0
 8016682:	9b04      	ldr	r3, [sp, #16]
 8016684:	4303      	orrs	r3, r0
 8016686:	9304      	str	r3, [sp, #16]
 8016688:	3701      	adds	r7, #1
 801668a:	7839      	ldrb	r1, [r7, #0]
 801668c:	4825      	ldr	r0, [pc, #148]	; (8016724 <_svfiprintf_r+0x1dc>)
 801668e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016692:	2206      	movs	r2, #6
 8016694:	1c7e      	adds	r6, r7, #1
 8016696:	f7e9 fdeb 	bl	8000270 <memchr>
 801669a:	2800      	cmp	r0, #0
 801669c:	d035      	beq.n	801670a <_svfiprintf_r+0x1c2>
 801669e:	4b22      	ldr	r3, [pc, #136]	; (8016728 <_svfiprintf_r+0x1e0>)
 80166a0:	b9fb      	cbnz	r3, 80166e2 <_svfiprintf_r+0x19a>
 80166a2:	9b03      	ldr	r3, [sp, #12]
 80166a4:	3307      	adds	r3, #7
 80166a6:	f023 0307 	bic.w	r3, r3, #7
 80166aa:	3308      	adds	r3, #8
 80166ac:	9303      	str	r3, [sp, #12]
 80166ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166b0:	444b      	add	r3, r9
 80166b2:	9309      	str	r3, [sp, #36]	; 0x24
 80166b4:	e76c      	b.n	8016590 <_svfiprintf_r+0x48>
 80166b6:	fb00 3202 	mla	r2, r0, r2, r3
 80166ba:	2101      	movs	r1, #1
 80166bc:	e7a3      	b.n	8016606 <_svfiprintf_r+0xbe>
 80166be:	2300      	movs	r3, #0
 80166c0:	9305      	str	r3, [sp, #20]
 80166c2:	4618      	mov	r0, r3
 80166c4:	240a      	movs	r4, #10
 80166c6:	460f      	mov	r7, r1
 80166c8:	3101      	adds	r1, #1
 80166ca:	783a      	ldrb	r2, [r7, #0]
 80166cc:	3a30      	subs	r2, #48	; 0x30
 80166ce:	2a09      	cmp	r2, #9
 80166d0:	d903      	bls.n	80166da <_svfiprintf_r+0x192>
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d0ca      	beq.n	801666c <_svfiprintf_r+0x124>
 80166d6:	9005      	str	r0, [sp, #20]
 80166d8:	e7c8      	b.n	801666c <_svfiprintf_r+0x124>
 80166da:	fb04 2000 	mla	r0, r4, r0, r2
 80166de:	2301      	movs	r3, #1
 80166e0:	e7f1      	b.n	80166c6 <_svfiprintf_r+0x17e>
 80166e2:	ab03      	add	r3, sp, #12
 80166e4:	9300      	str	r3, [sp, #0]
 80166e6:	462a      	mov	r2, r5
 80166e8:	4b10      	ldr	r3, [pc, #64]	; (801672c <_svfiprintf_r+0x1e4>)
 80166ea:	a904      	add	r1, sp, #16
 80166ec:	4640      	mov	r0, r8
 80166ee:	f3af 8000 	nop.w
 80166f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80166f6:	4681      	mov	r9, r0
 80166f8:	d1d9      	bne.n	80166ae <_svfiprintf_r+0x166>
 80166fa:	89ab      	ldrh	r3, [r5, #12]
 80166fc:	065b      	lsls	r3, r3, #25
 80166fe:	f53f af38 	bmi.w	8016572 <_svfiprintf_r+0x2a>
 8016702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016704:	b01d      	add	sp, #116	; 0x74
 8016706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801670a:	ab03      	add	r3, sp, #12
 801670c:	9300      	str	r3, [sp, #0]
 801670e:	462a      	mov	r2, r5
 8016710:	4b06      	ldr	r3, [pc, #24]	; (801672c <_svfiprintf_r+0x1e4>)
 8016712:	a904      	add	r1, sp, #16
 8016714:	4640      	mov	r0, r8
 8016716:	f000 f9c1 	bl	8016a9c <_printf_i>
 801671a:	e7ea      	b.n	80166f2 <_svfiprintf_r+0x1aa>
 801671c:	0801ae78 	.word	0x0801ae78
 8016720:	0801ae7e 	.word	0x0801ae7e
 8016724:	0801ae82 	.word	0x0801ae82
 8016728:	00000000 	.word	0x00000000
 801672c:	08016491 	.word	0x08016491

08016730 <__sfputc_r>:
 8016730:	6893      	ldr	r3, [r2, #8]
 8016732:	3b01      	subs	r3, #1
 8016734:	2b00      	cmp	r3, #0
 8016736:	b410      	push	{r4}
 8016738:	6093      	str	r3, [r2, #8]
 801673a:	da09      	bge.n	8016750 <__sfputc_r+0x20>
 801673c:	6994      	ldr	r4, [r2, #24]
 801673e:	42a3      	cmp	r3, r4
 8016740:	db02      	blt.n	8016748 <__sfputc_r+0x18>
 8016742:	b2cb      	uxtb	r3, r1
 8016744:	2b0a      	cmp	r3, #10
 8016746:	d103      	bne.n	8016750 <__sfputc_r+0x20>
 8016748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801674c:	f000 bb1a 	b.w	8016d84 <__swbuf_r>
 8016750:	6813      	ldr	r3, [r2, #0]
 8016752:	1c58      	adds	r0, r3, #1
 8016754:	6010      	str	r0, [r2, #0]
 8016756:	7019      	strb	r1, [r3, #0]
 8016758:	b2c8      	uxtb	r0, r1
 801675a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801675e:	4770      	bx	lr

08016760 <__sfputs_r>:
 8016760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016762:	4606      	mov	r6, r0
 8016764:	460f      	mov	r7, r1
 8016766:	4614      	mov	r4, r2
 8016768:	18d5      	adds	r5, r2, r3
 801676a:	42ac      	cmp	r4, r5
 801676c:	d101      	bne.n	8016772 <__sfputs_r+0x12>
 801676e:	2000      	movs	r0, #0
 8016770:	e007      	b.n	8016782 <__sfputs_r+0x22>
 8016772:	463a      	mov	r2, r7
 8016774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016778:	4630      	mov	r0, r6
 801677a:	f7ff ffd9 	bl	8016730 <__sfputc_r>
 801677e:	1c43      	adds	r3, r0, #1
 8016780:	d1f3      	bne.n	801676a <__sfputs_r+0xa>
 8016782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016784 <_vfiprintf_r>:
 8016784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016788:	b09d      	sub	sp, #116	; 0x74
 801678a:	460c      	mov	r4, r1
 801678c:	4617      	mov	r7, r2
 801678e:	9303      	str	r3, [sp, #12]
 8016790:	4606      	mov	r6, r0
 8016792:	b118      	cbz	r0, 801679c <_vfiprintf_r+0x18>
 8016794:	6983      	ldr	r3, [r0, #24]
 8016796:	b90b      	cbnz	r3, 801679c <_vfiprintf_r+0x18>
 8016798:	f7ff fd3c 	bl	8016214 <__sinit>
 801679c:	4b7c      	ldr	r3, [pc, #496]	; (8016990 <_vfiprintf_r+0x20c>)
 801679e:	429c      	cmp	r4, r3
 80167a0:	d157      	bne.n	8016852 <_vfiprintf_r+0xce>
 80167a2:	6874      	ldr	r4, [r6, #4]
 80167a4:	89a3      	ldrh	r3, [r4, #12]
 80167a6:	0718      	lsls	r0, r3, #28
 80167a8:	d55d      	bpl.n	8016866 <_vfiprintf_r+0xe2>
 80167aa:	6923      	ldr	r3, [r4, #16]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d05a      	beq.n	8016866 <_vfiprintf_r+0xe2>
 80167b0:	2300      	movs	r3, #0
 80167b2:	9309      	str	r3, [sp, #36]	; 0x24
 80167b4:	2320      	movs	r3, #32
 80167b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167ba:	2330      	movs	r3, #48	; 0x30
 80167bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167c0:	f04f 0b01 	mov.w	fp, #1
 80167c4:	46b8      	mov	r8, r7
 80167c6:	4645      	mov	r5, r8
 80167c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d155      	bne.n	801687c <_vfiprintf_r+0xf8>
 80167d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80167d4:	d00b      	beq.n	80167ee <_vfiprintf_r+0x6a>
 80167d6:	4653      	mov	r3, sl
 80167d8:	463a      	mov	r2, r7
 80167da:	4621      	mov	r1, r4
 80167dc:	4630      	mov	r0, r6
 80167de:	f7ff ffbf 	bl	8016760 <__sfputs_r>
 80167e2:	3001      	adds	r0, #1
 80167e4:	f000 80c4 	beq.w	8016970 <_vfiprintf_r+0x1ec>
 80167e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ea:	4453      	add	r3, sl
 80167ec:	9309      	str	r3, [sp, #36]	; 0x24
 80167ee:	f898 3000 	ldrb.w	r3, [r8]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f000 80bc 	beq.w	8016970 <_vfiprintf_r+0x1ec>
 80167f8:	2300      	movs	r3, #0
 80167fa:	f04f 32ff 	mov.w	r2, #4294967295
 80167fe:	9304      	str	r3, [sp, #16]
 8016800:	9307      	str	r3, [sp, #28]
 8016802:	9205      	str	r2, [sp, #20]
 8016804:	9306      	str	r3, [sp, #24]
 8016806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801680a:	931a      	str	r3, [sp, #104]	; 0x68
 801680c:	2205      	movs	r2, #5
 801680e:	7829      	ldrb	r1, [r5, #0]
 8016810:	4860      	ldr	r0, [pc, #384]	; (8016994 <_vfiprintf_r+0x210>)
 8016812:	f7e9 fd2d 	bl	8000270 <memchr>
 8016816:	f105 0801 	add.w	r8, r5, #1
 801681a:	9b04      	ldr	r3, [sp, #16]
 801681c:	2800      	cmp	r0, #0
 801681e:	d131      	bne.n	8016884 <_vfiprintf_r+0x100>
 8016820:	06d9      	lsls	r1, r3, #27
 8016822:	bf44      	itt	mi
 8016824:	2220      	movmi	r2, #32
 8016826:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801682a:	071a      	lsls	r2, r3, #28
 801682c:	bf44      	itt	mi
 801682e:	222b      	movmi	r2, #43	; 0x2b
 8016830:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016834:	782a      	ldrb	r2, [r5, #0]
 8016836:	2a2a      	cmp	r2, #42	; 0x2a
 8016838:	d02c      	beq.n	8016894 <_vfiprintf_r+0x110>
 801683a:	9a07      	ldr	r2, [sp, #28]
 801683c:	2100      	movs	r1, #0
 801683e:	200a      	movs	r0, #10
 8016840:	46a8      	mov	r8, r5
 8016842:	3501      	adds	r5, #1
 8016844:	f898 3000 	ldrb.w	r3, [r8]
 8016848:	3b30      	subs	r3, #48	; 0x30
 801684a:	2b09      	cmp	r3, #9
 801684c:	d96d      	bls.n	801692a <_vfiprintf_r+0x1a6>
 801684e:	b371      	cbz	r1, 80168ae <_vfiprintf_r+0x12a>
 8016850:	e026      	b.n	80168a0 <_vfiprintf_r+0x11c>
 8016852:	4b51      	ldr	r3, [pc, #324]	; (8016998 <_vfiprintf_r+0x214>)
 8016854:	429c      	cmp	r4, r3
 8016856:	d101      	bne.n	801685c <_vfiprintf_r+0xd8>
 8016858:	68b4      	ldr	r4, [r6, #8]
 801685a:	e7a3      	b.n	80167a4 <_vfiprintf_r+0x20>
 801685c:	4b4f      	ldr	r3, [pc, #316]	; (801699c <_vfiprintf_r+0x218>)
 801685e:	429c      	cmp	r4, r3
 8016860:	bf08      	it	eq
 8016862:	68f4      	ldreq	r4, [r6, #12]
 8016864:	e79e      	b.n	80167a4 <_vfiprintf_r+0x20>
 8016866:	4621      	mov	r1, r4
 8016868:	4630      	mov	r0, r6
 801686a:	f000 faef 	bl	8016e4c <__swsetup_r>
 801686e:	2800      	cmp	r0, #0
 8016870:	d09e      	beq.n	80167b0 <_vfiprintf_r+0x2c>
 8016872:	f04f 30ff 	mov.w	r0, #4294967295
 8016876:	b01d      	add	sp, #116	; 0x74
 8016878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801687c:	2b25      	cmp	r3, #37	; 0x25
 801687e:	d0a7      	beq.n	80167d0 <_vfiprintf_r+0x4c>
 8016880:	46a8      	mov	r8, r5
 8016882:	e7a0      	b.n	80167c6 <_vfiprintf_r+0x42>
 8016884:	4a43      	ldr	r2, [pc, #268]	; (8016994 <_vfiprintf_r+0x210>)
 8016886:	1a80      	subs	r0, r0, r2
 8016888:	fa0b f000 	lsl.w	r0, fp, r0
 801688c:	4318      	orrs	r0, r3
 801688e:	9004      	str	r0, [sp, #16]
 8016890:	4645      	mov	r5, r8
 8016892:	e7bb      	b.n	801680c <_vfiprintf_r+0x88>
 8016894:	9a03      	ldr	r2, [sp, #12]
 8016896:	1d11      	adds	r1, r2, #4
 8016898:	6812      	ldr	r2, [r2, #0]
 801689a:	9103      	str	r1, [sp, #12]
 801689c:	2a00      	cmp	r2, #0
 801689e:	db01      	blt.n	80168a4 <_vfiprintf_r+0x120>
 80168a0:	9207      	str	r2, [sp, #28]
 80168a2:	e004      	b.n	80168ae <_vfiprintf_r+0x12a>
 80168a4:	4252      	negs	r2, r2
 80168a6:	f043 0302 	orr.w	r3, r3, #2
 80168aa:	9207      	str	r2, [sp, #28]
 80168ac:	9304      	str	r3, [sp, #16]
 80168ae:	f898 3000 	ldrb.w	r3, [r8]
 80168b2:	2b2e      	cmp	r3, #46	; 0x2e
 80168b4:	d110      	bne.n	80168d8 <_vfiprintf_r+0x154>
 80168b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80168ba:	2b2a      	cmp	r3, #42	; 0x2a
 80168bc:	f108 0101 	add.w	r1, r8, #1
 80168c0:	d137      	bne.n	8016932 <_vfiprintf_r+0x1ae>
 80168c2:	9b03      	ldr	r3, [sp, #12]
 80168c4:	1d1a      	adds	r2, r3, #4
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	9203      	str	r2, [sp, #12]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	bfb8      	it	lt
 80168ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80168d2:	f108 0802 	add.w	r8, r8, #2
 80168d6:	9305      	str	r3, [sp, #20]
 80168d8:	4d31      	ldr	r5, [pc, #196]	; (80169a0 <_vfiprintf_r+0x21c>)
 80168da:	f898 1000 	ldrb.w	r1, [r8]
 80168de:	2203      	movs	r2, #3
 80168e0:	4628      	mov	r0, r5
 80168e2:	f7e9 fcc5 	bl	8000270 <memchr>
 80168e6:	b140      	cbz	r0, 80168fa <_vfiprintf_r+0x176>
 80168e8:	2340      	movs	r3, #64	; 0x40
 80168ea:	1b40      	subs	r0, r0, r5
 80168ec:	fa03 f000 	lsl.w	r0, r3, r0
 80168f0:	9b04      	ldr	r3, [sp, #16]
 80168f2:	4303      	orrs	r3, r0
 80168f4:	9304      	str	r3, [sp, #16]
 80168f6:	f108 0801 	add.w	r8, r8, #1
 80168fa:	f898 1000 	ldrb.w	r1, [r8]
 80168fe:	4829      	ldr	r0, [pc, #164]	; (80169a4 <_vfiprintf_r+0x220>)
 8016900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016904:	2206      	movs	r2, #6
 8016906:	f108 0701 	add.w	r7, r8, #1
 801690a:	f7e9 fcb1 	bl	8000270 <memchr>
 801690e:	2800      	cmp	r0, #0
 8016910:	d034      	beq.n	801697c <_vfiprintf_r+0x1f8>
 8016912:	4b25      	ldr	r3, [pc, #148]	; (80169a8 <_vfiprintf_r+0x224>)
 8016914:	bb03      	cbnz	r3, 8016958 <_vfiprintf_r+0x1d4>
 8016916:	9b03      	ldr	r3, [sp, #12]
 8016918:	3307      	adds	r3, #7
 801691a:	f023 0307 	bic.w	r3, r3, #7
 801691e:	3308      	adds	r3, #8
 8016920:	9303      	str	r3, [sp, #12]
 8016922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016924:	444b      	add	r3, r9
 8016926:	9309      	str	r3, [sp, #36]	; 0x24
 8016928:	e74c      	b.n	80167c4 <_vfiprintf_r+0x40>
 801692a:	fb00 3202 	mla	r2, r0, r2, r3
 801692e:	2101      	movs	r1, #1
 8016930:	e786      	b.n	8016840 <_vfiprintf_r+0xbc>
 8016932:	2300      	movs	r3, #0
 8016934:	9305      	str	r3, [sp, #20]
 8016936:	4618      	mov	r0, r3
 8016938:	250a      	movs	r5, #10
 801693a:	4688      	mov	r8, r1
 801693c:	3101      	adds	r1, #1
 801693e:	f898 2000 	ldrb.w	r2, [r8]
 8016942:	3a30      	subs	r2, #48	; 0x30
 8016944:	2a09      	cmp	r2, #9
 8016946:	d903      	bls.n	8016950 <_vfiprintf_r+0x1cc>
 8016948:	2b00      	cmp	r3, #0
 801694a:	d0c5      	beq.n	80168d8 <_vfiprintf_r+0x154>
 801694c:	9005      	str	r0, [sp, #20]
 801694e:	e7c3      	b.n	80168d8 <_vfiprintf_r+0x154>
 8016950:	fb05 2000 	mla	r0, r5, r0, r2
 8016954:	2301      	movs	r3, #1
 8016956:	e7f0      	b.n	801693a <_vfiprintf_r+0x1b6>
 8016958:	ab03      	add	r3, sp, #12
 801695a:	9300      	str	r3, [sp, #0]
 801695c:	4622      	mov	r2, r4
 801695e:	4b13      	ldr	r3, [pc, #76]	; (80169ac <_vfiprintf_r+0x228>)
 8016960:	a904      	add	r1, sp, #16
 8016962:	4630      	mov	r0, r6
 8016964:	f3af 8000 	nop.w
 8016968:	f1b0 3fff 	cmp.w	r0, #4294967295
 801696c:	4681      	mov	r9, r0
 801696e:	d1d8      	bne.n	8016922 <_vfiprintf_r+0x19e>
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	065b      	lsls	r3, r3, #25
 8016974:	f53f af7d 	bmi.w	8016872 <_vfiprintf_r+0xee>
 8016978:	9809      	ldr	r0, [sp, #36]	; 0x24
 801697a:	e77c      	b.n	8016876 <_vfiprintf_r+0xf2>
 801697c:	ab03      	add	r3, sp, #12
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	4622      	mov	r2, r4
 8016982:	4b0a      	ldr	r3, [pc, #40]	; (80169ac <_vfiprintf_r+0x228>)
 8016984:	a904      	add	r1, sp, #16
 8016986:	4630      	mov	r0, r6
 8016988:	f000 f888 	bl	8016a9c <_printf_i>
 801698c:	e7ec      	b.n	8016968 <_vfiprintf_r+0x1e4>
 801698e:	bf00      	nop
 8016990:	0801ae34 	.word	0x0801ae34
 8016994:	0801ae78 	.word	0x0801ae78
 8016998:	0801ae54 	.word	0x0801ae54
 801699c:	0801ae14 	.word	0x0801ae14
 80169a0:	0801ae7e 	.word	0x0801ae7e
 80169a4:	0801ae82 	.word	0x0801ae82
 80169a8:	00000000 	.word	0x00000000
 80169ac:	08016761 	.word	0x08016761

080169b0 <_printf_common>:
 80169b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169b4:	4691      	mov	r9, r2
 80169b6:	461f      	mov	r7, r3
 80169b8:	688a      	ldr	r2, [r1, #8]
 80169ba:	690b      	ldr	r3, [r1, #16]
 80169bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80169c0:	4293      	cmp	r3, r2
 80169c2:	bfb8      	it	lt
 80169c4:	4613      	movlt	r3, r2
 80169c6:	f8c9 3000 	str.w	r3, [r9]
 80169ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80169ce:	4606      	mov	r6, r0
 80169d0:	460c      	mov	r4, r1
 80169d2:	b112      	cbz	r2, 80169da <_printf_common+0x2a>
 80169d4:	3301      	adds	r3, #1
 80169d6:	f8c9 3000 	str.w	r3, [r9]
 80169da:	6823      	ldr	r3, [r4, #0]
 80169dc:	0699      	lsls	r1, r3, #26
 80169de:	bf42      	ittt	mi
 80169e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80169e4:	3302      	addmi	r3, #2
 80169e6:	f8c9 3000 	strmi.w	r3, [r9]
 80169ea:	6825      	ldr	r5, [r4, #0]
 80169ec:	f015 0506 	ands.w	r5, r5, #6
 80169f0:	d107      	bne.n	8016a02 <_printf_common+0x52>
 80169f2:	f104 0a19 	add.w	sl, r4, #25
 80169f6:	68e3      	ldr	r3, [r4, #12]
 80169f8:	f8d9 2000 	ldr.w	r2, [r9]
 80169fc:	1a9b      	subs	r3, r3, r2
 80169fe:	429d      	cmp	r5, r3
 8016a00:	db29      	blt.n	8016a56 <_printf_common+0xa6>
 8016a02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016a06:	6822      	ldr	r2, [r4, #0]
 8016a08:	3300      	adds	r3, #0
 8016a0a:	bf18      	it	ne
 8016a0c:	2301      	movne	r3, #1
 8016a0e:	0692      	lsls	r2, r2, #26
 8016a10:	d42e      	bmi.n	8016a70 <_printf_common+0xc0>
 8016a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a16:	4639      	mov	r1, r7
 8016a18:	4630      	mov	r0, r6
 8016a1a:	47c0      	blx	r8
 8016a1c:	3001      	adds	r0, #1
 8016a1e:	d021      	beq.n	8016a64 <_printf_common+0xb4>
 8016a20:	6823      	ldr	r3, [r4, #0]
 8016a22:	68e5      	ldr	r5, [r4, #12]
 8016a24:	f8d9 2000 	ldr.w	r2, [r9]
 8016a28:	f003 0306 	and.w	r3, r3, #6
 8016a2c:	2b04      	cmp	r3, #4
 8016a2e:	bf08      	it	eq
 8016a30:	1aad      	subeq	r5, r5, r2
 8016a32:	68a3      	ldr	r3, [r4, #8]
 8016a34:	6922      	ldr	r2, [r4, #16]
 8016a36:	bf0c      	ite	eq
 8016a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a3c:	2500      	movne	r5, #0
 8016a3e:	4293      	cmp	r3, r2
 8016a40:	bfc4      	itt	gt
 8016a42:	1a9b      	subgt	r3, r3, r2
 8016a44:	18ed      	addgt	r5, r5, r3
 8016a46:	f04f 0900 	mov.w	r9, #0
 8016a4a:	341a      	adds	r4, #26
 8016a4c:	454d      	cmp	r5, r9
 8016a4e:	d11b      	bne.n	8016a88 <_printf_common+0xd8>
 8016a50:	2000      	movs	r0, #0
 8016a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a56:	2301      	movs	r3, #1
 8016a58:	4652      	mov	r2, sl
 8016a5a:	4639      	mov	r1, r7
 8016a5c:	4630      	mov	r0, r6
 8016a5e:	47c0      	blx	r8
 8016a60:	3001      	adds	r0, #1
 8016a62:	d103      	bne.n	8016a6c <_printf_common+0xbc>
 8016a64:	f04f 30ff 	mov.w	r0, #4294967295
 8016a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a6c:	3501      	adds	r5, #1
 8016a6e:	e7c2      	b.n	80169f6 <_printf_common+0x46>
 8016a70:	18e1      	adds	r1, r4, r3
 8016a72:	1c5a      	adds	r2, r3, #1
 8016a74:	2030      	movs	r0, #48	; 0x30
 8016a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016a7a:	4422      	add	r2, r4
 8016a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016a84:	3302      	adds	r3, #2
 8016a86:	e7c4      	b.n	8016a12 <_printf_common+0x62>
 8016a88:	2301      	movs	r3, #1
 8016a8a:	4622      	mov	r2, r4
 8016a8c:	4639      	mov	r1, r7
 8016a8e:	4630      	mov	r0, r6
 8016a90:	47c0      	blx	r8
 8016a92:	3001      	adds	r0, #1
 8016a94:	d0e6      	beq.n	8016a64 <_printf_common+0xb4>
 8016a96:	f109 0901 	add.w	r9, r9, #1
 8016a9a:	e7d7      	b.n	8016a4c <_printf_common+0x9c>

08016a9c <_printf_i>:
 8016a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aa0:	4617      	mov	r7, r2
 8016aa2:	7e0a      	ldrb	r2, [r1, #24]
 8016aa4:	b085      	sub	sp, #20
 8016aa6:	2a6e      	cmp	r2, #110	; 0x6e
 8016aa8:	4698      	mov	r8, r3
 8016aaa:	4606      	mov	r6, r0
 8016aac:	460c      	mov	r4, r1
 8016aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ab0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8016ab4:	f000 80bc 	beq.w	8016c30 <_printf_i+0x194>
 8016ab8:	d81a      	bhi.n	8016af0 <_printf_i+0x54>
 8016aba:	2a63      	cmp	r2, #99	; 0x63
 8016abc:	d02e      	beq.n	8016b1c <_printf_i+0x80>
 8016abe:	d80a      	bhi.n	8016ad6 <_printf_i+0x3a>
 8016ac0:	2a00      	cmp	r2, #0
 8016ac2:	f000 80c8 	beq.w	8016c56 <_printf_i+0x1ba>
 8016ac6:	2a58      	cmp	r2, #88	; 0x58
 8016ac8:	f000 808a 	beq.w	8016be0 <_printf_i+0x144>
 8016acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ad0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8016ad4:	e02a      	b.n	8016b2c <_printf_i+0x90>
 8016ad6:	2a64      	cmp	r2, #100	; 0x64
 8016ad8:	d001      	beq.n	8016ade <_printf_i+0x42>
 8016ada:	2a69      	cmp	r2, #105	; 0x69
 8016adc:	d1f6      	bne.n	8016acc <_printf_i+0x30>
 8016ade:	6821      	ldr	r1, [r4, #0]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8016ae6:	d023      	beq.n	8016b30 <_printf_i+0x94>
 8016ae8:	1d11      	adds	r1, r2, #4
 8016aea:	6019      	str	r1, [r3, #0]
 8016aec:	6813      	ldr	r3, [r2, #0]
 8016aee:	e027      	b.n	8016b40 <_printf_i+0xa4>
 8016af0:	2a73      	cmp	r2, #115	; 0x73
 8016af2:	f000 80b4 	beq.w	8016c5e <_printf_i+0x1c2>
 8016af6:	d808      	bhi.n	8016b0a <_printf_i+0x6e>
 8016af8:	2a6f      	cmp	r2, #111	; 0x6f
 8016afa:	d02a      	beq.n	8016b52 <_printf_i+0xb6>
 8016afc:	2a70      	cmp	r2, #112	; 0x70
 8016afe:	d1e5      	bne.n	8016acc <_printf_i+0x30>
 8016b00:	680a      	ldr	r2, [r1, #0]
 8016b02:	f042 0220 	orr.w	r2, r2, #32
 8016b06:	600a      	str	r2, [r1, #0]
 8016b08:	e003      	b.n	8016b12 <_printf_i+0x76>
 8016b0a:	2a75      	cmp	r2, #117	; 0x75
 8016b0c:	d021      	beq.n	8016b52 <_printf_i+0xb6>
 8016b0e:	2a78      	cmp	r2, #120	; 0x78
 8016b10:	d1dc      	bne.n	8016acc <_printf_i+0x30>
 8016b12:	2278      	movs	r2, #120	; 0x78
 8016b14:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8016b18:	496e      	ldr	r1, [pc, #440]	; (8016cd4 <_printf_i+0x238>)
 8016b1a:	e064      	b.n	8016be6 <_printf_i+0x14a>
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8016b22:	1d11      	adds	r1, r2, #4
 8016b24:	6019      	str	r1, [r3, #0]
 8016b26:	6813      	ldr	r3, [r2, #0]
 8016b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	e0a3      	b.n	8016c78 <_printf_i+0x1dc>
 8016b30:	f011 0f40 	tst.w	r1, #64	; 0x40
 8016b34:	f102 0104 	add.w	r1, r2, #4
 8016b38:	6019      	str	r1, [r3, #0]
 8016b3a:	d0d7      	beq.n	8016aec <_printf_i+0x50>
 8016b3c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	da03      	bge.n	8016b4c <_printf_i+0xb0>
 8016b44:	222d      	movs	r2, #45	; 0x2d
 8016b46:	425b      	negs	r3, r3
 8016b48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016b4c:	4962      	ldr	r1, [pc, #392]	; (8016cd8 <_printf_i+0x23c>)
 8016b4e:	220a      	movs	r2, #10
 8016b50:	e017      	b.n	8016b82 <_printf_i+0xe6>
 8016b52:	6820      	ldr	r0, [r4, #0]
 8016b54:	6819      	ldr	r1, [r3, #0]
 8016b56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016b5a:	d003      	beq.n	8016b64 <_printf_i+0xc8>
 8016b5c:	1d08      	adds	r0, r1, #4
 8016b5e:	6018      	str	r0, [r3, #0]
 8016b60:	680b      	ldr	r3, [r1, #0]
 8016b62:	e006      	b.n	8016b72 <_printf_i+0xd6>
 8016b64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016b68:	f101 0004 	add.w	r0, r1, #4
 8016b6c:	6018      	str	r0, [r3, #0]
 8016b6e:	d0f7      	beq.n	8016b60 <_printf_i+0xc4>
 8016b70:	880b      	ldrh	r3, [r1, #0]
 8016b72:	4959      	ldr	r1, [pc, #356]	; (8016cd8 <_printf_i+0x23c>)
 8016b74:	2a6f      	cmp	r2, #111	; 0x6f
 8016b76:	bf14      	ite	ne
 8016b78:	220a      	movne	r2, #10
 8016b7a:	2208      	moveq	r2, #8
 8016b7c:	2000      	movs	r0, #0
 8016b7e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8016b82:	6865      	ldr	r5, [r4, #4]
 8016b84:	60a5      	str	r5, [r4, #8]
 8016b86:	2d00      	cmp	r5, #0
 8016b88:	f2c0 809c 	blt.w	8016cc4 <_printf_i+0x228>
 8016b8c:	6820      	ldr	r0, [r4, #0]
 8016b8e:	f020 0004 	bic.w	r0, r0, #4
 8016b92:	6020      	str	r0, [r4, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d13f      	bne.n	8016c18 <_printf_i+0x17c>
 8016b98:	2d00      	cmp	r5, #0
 8016b9a:	f040 8095 	bne.w	8016cc8 <_printf_i+0x22c>
 8016b9e:	4675      	mov	r5, lr
 8016ba0:	2a08      	cmp	r2, #8
 8016ba2:	d10b      	bne.n	8016bbc <_printf_i+0x120>
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	07da      	lsls	r2, r3, #31
 8016ba8:	d508      	bpl.n	8016bbc <_printf_i+0x120>
 8016baa:	6923      	ldr	r3, [r4, #16]
 8016bac:	6862      	ldr	r2, [r4, #4]
 8016bae:	429a      	cmp	r2, r3
 8016bb0:	bfde      	ittt	le
 8016bb2:	2330      	movle	r3, #48	; 0x30
 8016bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016bbc:	ebae 0305 	sub.w	r3, lr, r5
 8016bc0:	6123      	str	r3, [r4, #16]
 8016bc2:	f8cd 8000 	str.w	r8, [sp]
 8016bc6:	463b      	mov	r3, r7
 8016bc8:	aa03      	add	r2, sp, #12
 8016bca:	4621      	mov	r1, r4
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f7ff feef 	bl	80169b0 <_printf_common>
 8016bd2:	3001      	adds	r0, #1
 8016bd4:	d155      	bne.n	8016c82 <_printf_i+0x1e6>
 8016bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bda:	b005      	add	sp, #20
 8016bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016be0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8016be4:	493c      	ldr	r1, [pc, #240]	; (8016cd8 <_printf_i+0x23c>)
 8016be6:	6822      	ldr	r2, [r4, #0]
 8016be8:	6818      	ldr	r0, [r3, #0]
 8016bea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8016bee:	f100 0504 	add.w	r5, r0, #4
 8016bf2:	601d      	str	r5, [r3, #0]
 8016bf4:	d001      	beq.n	8016bfa <_printf_i+0x15e>
 8016bf6:	6803      	ldr	r3, [r0, #0]
 8016bf8:	e002      	b.n	8016c00 <_printf_i+0x164>
 8016bfa:	0655      	lsls	r5, r2, #25
 8016bfc:	d5fb      	bpl.n	8016bf6 <_printf_i+0x15a>
 8016bfe:	8803      	ldrh	r3, [r0, #0]
 8016c00:	07d0      	lsls	r0, r2, #31
 8016c02:	bf44      	itt	mi
 8016c04:	f042 0220 	orrmi.w	r2, r2, #32
 8016c08:	6022      	strmi	r2, [r4, #0]
 8016c0a:	b91b      	cbnz	r3, 8016c14 <_printf_i+0x178>
 8016c0c:	6822      	ldr	r2, [r4, #0]
 8016c0e:	f022 0220 	bic.w	r2, r2, #32
 8016c12:	6022      	str	r2, [r4, #0]
 8016c14:	2210      	movs	r2, #16
 8016c16:	e7b1      	b.n	8016b7c <_printf_i+0xe0>
 8016c18:	4675      	mov	r5, lr
 8016c1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8016c1e:	fb02 3310 	mls	r3, r2, r0, r3
 8016c22:	5ccb      	ldrb	r3, [r1, r3]
 8016c24:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	d1f5      	bne.n	8016c1a <_printf_i+0x17e>
 8016c2e:	e7b7      	b.n	8016ba0 <_printf_i+0x104>
 8016c30:	6808      	ldr	r0, [r1, #0]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	6949      	ldr	r1, [r1, #20]
 8016c36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016c3a:	d004      	beq.n	8016c46 <_printf_i+0x1aa>
 8016c3c:	1d10      	adds	r0, r2, #4
 8016c3e:	6018      	str	r0, [r3, #0]
 8016c40:	6813      	ldr	r3, [r2, #0]
 8016c42:	6019      	str	r1, [r3, #0]
 8016c44:	e007      	b.n	8016c56 <_printf_i+0x1ba>
 8016c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016c4a:	f102 0004 	add.w	r0, r2, #4
 8016c4e:	6018      	str	r0, [r3, #0]
 8016c50:	6813      	ldr	r3, [r2, #0]
 8016c52:	d0f6      	beq.n	8016c42 <_printf_i+0x1a6>
 8016c54:	8019      	strh	r1, [r3, #0]
 8016c56:	2300      	movs	r3, #0
 8016c58:	6123      	str	r3, [r4, #16]
 8016c5a:	4675      	mov	r5, lr
 8016c5c:	e7b1      	b.n	8016bc2 <_printf_i+0x126>
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	1d11      	adds	r1, r2, #4
 8016c62:	6019      	str	r1, [r3, #0]
 8016c64:	6815      	ldr	r5, [r2, #0]
 8016c66:	6862      	ldr	r2, [r4, #4]
 8016c68:	2100      	movs	r1, #0
 8016c6a:	4628      	mov	r0, r5
 8016c6c:	f7e9 fb00 	bl	8000270 <memchr>
 8016c70:	b108      	cbz	r0, 8016c76 <_printf_i+0x1da>
 8016c72:	1b40      	subs	r0, r0, r5
 8016c74:	6060      	str	r0, [r4, #4]
 8016c76:	6863      	ldr	r3, [r4, #4]
 8016c78:	6123      	str	r3, [r4, #16]
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c80:	e79f      	b.n	8016bc2 <_printf_i+0x126>
 8016c82:	6923      	ldr	r3, [r4, #16]
 8016c84:	462a      	mov	r2, r5
 8016c86:	4639      	mov	r1, r7
 8016c88:	4630      	mov	r0, r6
 8016c8a:	47c0      	blx	r8
 8016c8c:	3001      	adds	r0, #1
 8016c8e:	d0a2      	beq.n	8016bd6 <_printf_i+0x13a>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	079b      	lsls	r3, r3, #30
 8016c94:	d507      	bpl.n	8016ca6 <_printf_i+0x20a>
 8016c96:	2500      	movs	r5, #0
 8016c98:	f104 0919 	add.w	r9, r4, #25
 8016c9c:	68e3      	ldr	r3, [r4, #12]
 8016c9e:	9a03      	ldr	r2, [sp, #12]
 8016ca0:	1a9b      	subs	r3, r3, r2
 8016ca2:	429d      	cmp	r5, r3
 8016ca4:	db05      	blt.n	8016cb2 <_printf_i+0x216>
 8016ca6:	68e0      	ldr	r0, [r4, #12]
 8016ca8:	9b03      	ldr	r3, [sp, #12]
 8016caa:	4298      	cmp	r0, r3
 8016cac:	bfb8      	it	lt
 8016cae:	4618      	movlt	r0, r3
 8016cb0:	e793      	b.n	8016bda <_printf_i+0x13e>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	464a      	mov	r2, r9
 8016cb6:	4639      	mov	r1, r7
 8016cb8:	4630      	mov	r0, r6
 8016cba:	47c0      	blx	r8
 8016cbc:	3001      	adds	r0, #1
 8016cbe:	d08a      	beq.n	8016bd6 <_printf_i+0x13a>
 8016cc0:	3501      	adds	r5, #1
 8016cc2:	e7eb      	b.n	8016c9c <_printf_i+0x200>
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d1a7      	bne.n	8016c18 <_printf_i+0x17c>
 8016cc8:	780b      	ldrb	r3, [r1, #0]
 8016cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cd2:	e765      	b.n	8016ba0 <_printf_i+0x104>
 8016cd4:	0801ae9a 	.word	0x0801ae9a
 8016cd8:	0801ae89 	.word	0x0801ae89

08016cdc <_sbrk_r>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4c06      	ldr	r4, [pc, #24]	; (8016cf8 <_sbrk_r+0x1c>)
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	4605      	mov	r5, r0
 8016ce4:	4608      	mov	r0, r1
 8016ce6:	6023      	str	r3, [r4, #0]
 8016ce8:	f7ea fee2 	bl	8001ab0 <_sbrk>
 8016cec:	1c43      	adds	r3, r0, #1
 8016cee:	d102      	bne.n	8016cf6 <_sbrk_r+0x1a>
 8016cf0:	6823      	ldr	r3, [r4, #0]
 8016cf2:	b103      	cbz	r3, 8016cf6 <_sbrk_r+0x1a>
 8016cf4:	602b      	str	r3, [r5, #0]
 8016cf6:	bd38      	pop	{r3, r4, r5, pc}
 8016cf8:	2000b6c4 	.word	0x2000b6c4

08016cfc <__sread>:
 8016cfc:	b510      	push	{r4, lr}
 8016cfe:	460c      	mov	r4, r1
 8016d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d04:	f000 fa70 	bl	80171e8 <_read_r>
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	bfab      	itete	ge
 8016d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8016d10:	181b      	addge	r3, r3, r0
 8016d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016d16:	bfac      	ite	ge
 8016d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8016d1a:	81a3      	strhlt	r3, [r4, #12]
 8016d1c:	bd10      	pop	{r4, pc}

08016d1e <__swrite>:
 8016d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d22:	461f      	mov	r7, r3
 8016d24:	898b      	ldrh	r3, [r1, #12]
 8016d26:	05db      	lsls	r3, r3, #23
 8016d28:	4605      	mov	r5, r0
 8016d2a:	460c      	mov	r4, r1
 8016d2c:	4616      	mov	r6, r2
 8016d2e:	d505      	bpl.n	8016d3c <__swrite+0x1e>
 8016d30:	2302      	movs	r3, #2
 8016d32:	2200      	movs	r2, #0
 8016d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d38:	f000 f9b8 	bl	80170ac <_lseek_r>
 8016d3c:	89a3      	ldrh	r3, [r4, #12]
 8016d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d46:	81a3      	strh	r3, [r4, #12]
 8016d48:	4632      	mov	r2, r6
 8016d4a:	463b      	mov	r3, r7
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d52:	f000 b869 	b.w	8016e28 <_write_r>

08016d56 <__sseek>:
 8016d56:	b510      	push	{r4, lr}
 8016d58:	460c      	mov	r4, r1
 8016d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d5e:	f000 f9a5 	bl	80170ac <_lseek_r>
 8016d62:	1c43      	adds	r3, r0, #1
 8016d64:	89a3      	ldrh	r3, [r4, #12]
 8016d66:	bf15      	itete	ne
 8016d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8016d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d72:	81a3      	strheq	r3, [r4, #12]
 8016d74:	bf18      	it	ne
 8016d76:	81a3      	strhne	r3, [r4, #12]
 8016d78:	bd10      	pop	{r4, pc}

08016d7a <__sclose>:
 8016d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d7e:	f000 b8d3 	b.w	8016f28 <_close_r>
	...

08016d84 <__swbuf_r>:
 8016d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d86:	460e      	mov	r6, r1
 8016d88:	4614      	mov	r4, r2
 8016d8a:	4605      	mov	r5, r0
 8016d8c:	b118      	cbz	r0, 8016d96 <__swbuf_r+0x12>
 8016d8e:	6983      	ldr	r3, [r0, #24]
 8016d90:	b90b      	cbnz	r3, 8016d96 <__swbuf_r+0x12>
 8016d92:	f7ff fa3f 	bl	8016214 <__sinit>
 8016d96:	4b21      	ldr	r3, [pc, #132]	; (8016e1c <__swbuf_r+0x98>)
 8016d98:	429c      	cmp	r4, r3
 8016d9a:	d12a      	bne.n	8016df2 <__swbuf_r+0x6e>
 8016d9c:	686c      	ldr	r4, [r5, #4]
 8016d9e:	69a3      	ldr	r3, [r4, #24]
 8016da0:	60a3      	str	r3, [r4, #8]
 8016da2:	89a3      	ldrh	r3, [r4, #12]
 8016da4:	071a      	lsls	r2, r3, #28
 8016da6:	d52e      	bpl.n	8016e06 <__swbuf_r+0x82>
 8016da8:	6923      	ldr	r3, [r4, #16]
 8016daa:	b363      	cbz	r3, 8016e06 <__swbuf_r+0x82>
 8016dac:	6923      	ldr	r3, [r4, #16]
 8016dae:	6820      	ldr	r0, [r4, #0]
 8016db0:	1ac0      	subs	r0, r0, r3
 8016db2:	6963      	ldr	r3, [r4, #20]
 8016db4:	b2f6      	uxtb	r6, r6
 8016db6:	4298      	cmp	r0, r3
 8016db8:	4637      	mov	r7, r6
 8016dba:	db04      	blt.n	8016dc6 <__swbuf_r+0x42>
 8016dbc:	4621      	mov	r1, r4
 8016dbe:	4628      	mov	r0, r5
 8016dc0:	f000 f94a 	bl	8017058 <_fflush_r>
 8016dc4:	bb28      	cbnz	r0, 8016e12 <__swbuf_r+0x8e>
 8016dc6:	68a3      	ldr	r3, [r4, #8]
 8016dc8:	3b01      	subs	r3, #1
 8016dca:	60a3      	str	r3, [r4, #8]
 8016dcc:	6823      	ldr	r3, [r4, #0]
 8016dce:	1c5a      	adds	r2, r3, #1
 8016dd0:	6022      	str	r2, [r4, #0]
 8016dd2:	701e      	strb	r6, [r3, #0]
 8016dd4:	6963      	ldr	r3, [r4, #20]
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	4298      	cmp	r0, r3
 8016dda:	d004      	beq.n	8016de6 <__swbuf_r+0x62>
 8016ddc:	89a3      	ldrh	r3, [r4, #12]
 8016dde:	07db      	lsls	r3, r3, #31
 8016de0:	d519      	bpl.n	8016e16 <__swbuf_r+0x92>
 8016de2:	2e0a      	cmp	r6, #10
 8016de4:	d117      	bne.n	8016e16 <__swbuf_r+0x92>
 8016de6:	4621      	mov	r1, r4
 8016de8:	4628      	mov	r0, r5
 8016dea:	f000 f935 	bl	8017058 <_fflush_r>
 8016dee:	b190      	cbz	r0, 8016e16 <__swbuf_r+0x92>
 8016df0:	e00f      	b.n	8016e12 <__swbuf_r+0x8e>
 8016df2:	4b0b      	ldr	r3, [pc, #44]	; (8016e20 <__swbuf_r+0x9c>)
 8016df4:	429c      	cmp	r4, r3
 8016df6:	d101      	bne.n	8016dfc <__swbuf_r+0x78>
 8016df8:	68ac      	ldr	r4, [r5, #8]
 8016dfa:	e7d0      	b.n	8016d9e <__swbuf_r+0x1a>
 8016dfc:	4b09      	ldr	r3, [pc, #36]	; (8016e24 <__swbuf_r+0xa0>)
 8016dfe:	429c      	cmp	r4, r3
 8016e00:	bf08      	it	eq
 8016e02:	68ec      	ldreq	r4, [r5, #12]
 8016e04:	e7cb      	b.n	8016d9e <__swbuf_r+0x1a>
 8016e06:	4621      	mov	r1, r4
 8016e08:	4628      	mov	r0, r5
 8016e0a:	f000 f81f 	bl	8016e4c <__swsetup_r>
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	d0cc      	beq.n	8016dac <__swbuf_r+0x28>
 8016e12:	f04f 37ff 	mov.w	r7, #4294967295
 8016e16:	4638      	mov	r0, r7
 8016e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	0801ae34 	.word	0x0801ae34
 8016e20:	0801ae54 	.word	0x0801ae54
 8016e24:	0801ae14 	.word	0x0801ae14

08016e28 <_write_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4c07      	ldr	r4, [pc, #28]	; (8016e48 <_write_r+0x20>)
 8016e2c:	4605      	mov	r5, r0
 8016e2e:	4608      	mov	r0, r1
 8016e30:	4611      	mov	r1, r2
 8016e32:	2200      	movs	r2, #0
 8016e34:	6022      	str	r2, [r4, #0]
 8016e36:	461a      	mov	r2, r3
 8016e38:	f7ea fe1d 	bl	8001a76 <_write>
 8016e3c:	1c43      	adds	r3, r0, #1
 8016e3e:	d102      	bne.n	8016e46 <_write_r+0x1e>
 8016e40:	6823      	ldr	r3, [r4, #0]
 8016e42:	b103      	cbz	r3, 8016e46 <_write_r+0x1e>
 8016e44:	602b      	str	r3, [r5, #0]
 8016e46:	bd38      	pop	{r3, r4, r5, pc}
 8016e48:	2000b6c4 	.word	0x2000b6c4

08016e4c <__swsetup_r>:
 8016e4c:	4b32      	ldr	r3, [pc, #200]	; (8016f18 <__swsetup_r+0xcc>)
 8016e4e:	b570      	push	{r4, r5, r6, lr}
 8016e50:	681d      	ldr	r5, [r3, #0]
 8016e52:	4606      	mov	r6, r0
 8016e54:	460c      	mov	r4, r1
 8016e56:	b125      	cbz	r5, 8016e62 <__swsetup_r+0x16>
 8016e58:	69ab      	ldr	r3, [r5, #24]
 8016e5a:	b913      	cbnz	r3, 8016e62 <__swsetup_r+0x16>
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	f7ff f9d9 	bl	8016214 <__sinit>
 8016e62:	4b2e      	ldr	r3, [pc, #184]	; (8016f1c <__swsetup_r+0xd0>)
 8016e64:	429c      	cmp	r4, r3
 8016e66:	d10f      	bne.n	8016e88 <__swsetup_r+0x3c>
 8016e68:	686c      	ldr	r4, [r5, #4]
 8016e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	0715      	lsls	r5, r2, #28
 8016e72:	d42c      	bmi.n	8016ece <__swsetup_r+0x82>
 8016e74:	06d0      	lsls	r0, r2, #27
 8016e76:	d411      	bmi.n	8016e9c <__swsetup_r+0x50>
 8016e78:	2209      	movs	r2, #9
 8016e7a:	6032      	str	r2, [r6, #0]
 8016e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e80:	81a3      	strh	r3, [r4, #12]
 8016e82:	f04f 30ff 	mov.w	r0, #4294967295
 8016e86:	bd70      	pop	{r4, r5, r6, pc}
 8016e88:	4b25      	ldr	r3, [pc, #148]	; (8016f20 <__swsetup_r+0xd4>)
 8016e8a:	429c      	cmp	r4, r3
 8016e8c:	d101      	bne.n	8016e92 <__swsetup_r+0x46>
 8016e8e:	68ac      	ldr	r4, [r5, #8]
 8016e90:	e7eb      	b.n	8016e6a <__swsetup_r+0x1e>
 8016e92:	4b24      	ldr	r3, [pc, #144]	; (8016f24 <__swsetup_r+0xd8>)
 8016e94:	429c      	cmp	r4, r3
 8016e96:	bf08      	it	eq
 8016e98:	68ec      	ldreq	r4, [r5, #12]
 8016e9a:	e7e6      	b.n	8016e6a <__swsetup_r+0x1e>
 8016e9c:	0751      	lsls	r1, r2, #29
 8016e9e:	d512      	bpl.n	8016ec6 <__swsetup_r+0x7a>
 8016ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ea2:	b141      	cbz	r1, 8016eb6 <__swsetup_r+0x6a>
 8016ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ea8:	4299      	cmp	r1, r3
 8016eaa:	d002      	beq.n	8016eb2 <__swsetup_r+0x66>
 8016eac:	4630      	mov	r0, r6
 8016eae:	f7ff fa43 	bl	8016338 <_free_r>
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8016eb6:	89a3      	ldrh	r3, [r4, #12]
 8016eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016ebc:	81a3      	strh	r3, [r4, #12]
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	6063      	str	r3, [r4, #4]
 8016ec2:	6923      	ldr	r3, [r4, #16]
 8016ec4:	6023      	str	r3, [r4, #0]
 8016ec6:	89a3      	ldrh	r3, [r4, #12]
 8016ec8:	f043 0308 	orr.w	r3, r3, #8
 8016ecc:	81a3      	strh	r3, [r4, #12]
 8016ece:	6923      	ldr	r3, [r4, #16]
 8016ed0:	b94b      	cbnz	r3, 8016ee6 <__swsetup_r+0x9a>
 8016ed2:	89a3      	ldrh	r3, [r4, #12]
 8016ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016edc:	d003      	beq.n	8016ee6 <__swsetup_r+0x9a>
 8016ede:	4621      	mov	r1, r4
 8016ee0:	4630      	mov	r0, r6
 8016ee2:	f000 f919 	bl	8017118 <__smakebuf_r>
 8016ee6:	89a2      	ldrh	r2, [r4, #12]
 8016ee8:	f012 0301 	ands.w	r3, r2, #1
 8016eec:	d00c      	beq.n	8016f08 <__swsetup_r+0xbc>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	60a3      	str	r3, [r4, #8]
 8016ef2:	6963      	ldr	r3, [r4, #20]
 8016ef4:	425b      	negs	r3, r3
 8016ef6:	61a3      	str	r3, [r4, #24]
 8016ef8:	6923      	ldr	r3, [r4, #16]
 8016efa:	b953      	cbnz	r3, 8016f12 <__swsetup_r+0xc6>
 8016efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016f04:	d1ba      	bne.n	8016e7c <__swsetup_r+0x30>
 8016f06:	bd70      	pop	{r4, r5, r6, pc}
 8016f08:	0792      	lsls	r2, r2, #30
 8016f0a:	bf58      	it	pl
 8016f0c:	6963      	ldrpl	r3, [r4, #20]
 8016f0e:	60a3      	str	r3, [r4, #8]
 8016f10:	e7f2      	b.n	8016ef8 <__swsetup_r+0xac>
 8016f12:	2000      	movs	r0, #0
 8016f14:	e7f7      	b.n	8016f06 <__swsetup_r+0xba>
 8016f16:	bf00      	nop
 8016f18:	20000180 	.word	0x20000180
 8016f1c:	0801ae34 	.word	0x0801ae34
 8016f20:	0801ae54 	.word	0x0801ae54
 8016f24:	0801ae14 	.word	0x0801ae14

08016f28 <_close_r>:
 8016f28:	b538      	push	{r3, r4, r5, lr}
 8016f2a:	4c06      	ldr	r4, [pc, #24]	; (8016f44 <_close_r+0x1c>)
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	4605      	mov	r5, r0
 8016f30:	4608      	mov	r0, r1
 8016f32:	6023      	str	r3, [r4, #0]
 8016f34:	f7ea fdea 	bl	8001b0c <_close>
 8016f38:	1c43      	adds	r3, r0, #1
 8016f3a:	d102      	bne.n	8016f42 <_close_r+0x1a>
 8016f3c:	6823      	ldr	r3, [r4, #0]
 8016f3e:	b103      	cbz	r3, 8016f42 <_close_r+0x1a>
 8016f40:	602b      	str	r3, [r5, #0]
 8016f42:	bd38      	pop	{r3, r4, r5, pc}
 8016f44:	2000b6c4 	.word	0x2000b6c4

08016f48 <__sflush_r>:
 8016f48:	898a      	ldrh	r2, [r1, #12]
 8016f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f4e:	4605      	mov	r5, r0
 8016f50:	0710      	lsls	r0, r2, #28
 8016f52:	460c      	mov	r4, r1
 8016f54:	d45a      	bmi.n	801700c <__sflush_r+0xc4>
 8016f56:	684b      	ldr	r3, [r1, #4]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	dc05      	bgt.n	8016f68 <__sflush_r+0x20>
 8016f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	dc02      	bgt.n	8016f68 <__sflush_r+0x20>
 8016f62:	2000      	movs	r0, #0
 8016f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f6a:	2e00      	cmp	r6, #0
 8016f6c:	d0f9      	beq.n	8016f62 <__sflush_r+0x1a>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f74:	682f      	ldr	r7, [r5, #0]
 8016f76:	602b      	str	r3, [r5, #0]
 8016f78:	d033      	beq.n	8016fe2 <__sflush_r+0x9a>
 8016f7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f7c:	89a3      	ldrh	r3, [r4, #12]
 8016f7e:	075a      	lsls	r2, r3, #29
 8016f80:	d505      	bpl.n	8016f8e <__sflush_r+0x46>
 8016f82:	6863      	ldr	r3, [r4, #4]
 8016f84:	1ac0      	subs	r0, r0, r3
 8016f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f88:	b10b      	cbz	r3, 8016f8e <__sflush_r+0x46>
 8016f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f8c:	1ac0      	subs	r0, r0, r3
 8016f8e:	2300      	movs	r3, #0
 8016f90:	4602      	mov	r2, r0
 8016f92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f94:	6a21      	ldr	r1, [r4, #32]
 8016f96:	4628      	mov	r0, r5
 8016f98:	47b0      	blx	r6
 8016f9a:	1c43      	adds	r3, r0, #1
 8016f9c:	89a3      	ldrh	r3, [r4, #12]
 8016f9e:	d106      	bne.n	8016fae <__sflush_r+0x66>
 8016fa0:	6829      	ldr	r1, [r5, #0]
 8016fa2:	291d      	cmp	r1, #29
 8016fa4:	d84b      	bhi.n	801703e <__sflush_r+0xf6>
 8016fa6:	4a2b      	ldr	r2, [pc, #172]	; (8017054 <__sflush_r+0x10c>)
 8016fa8:	40ca      	lsrs	r2, r1
 8016faa:	07d6      	lsls	r6, r2, #31
 8016fac:	d547      	bpl.n	801703e <__sflush_r+0xf6>
 8016fae:	2200      	movs	r2, #0
 8016fb0:	6062      	str	r2, [r4, #4]
 8016fb2:	04d9      	lsls	r1, r3, #19
 8016fb4:	6922      	ldr	r2, [r4, #16]
 8016fb6:	6022      	str	r2, [r4, #0]
 8016fb8:	d504      	bpl.n	8016fc4 <__sflush_r+0x7c>
 8016fba:	1c42      	adds	r2, r0, #1
 8016fbc:	d101      	bne.n	8016fc2 <__sflush_r+0x7a>
 8016fbe:	682b      	ldr	r3, [r5, #0]
 8016fc0:	b903      	cbnz	r3, 8016fc4 <__sflush_r+0x7c>
 8016fc2:	6560      	str	r0, [r4, #84]	; 0x54
 8016fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fc6:	602f      	str	r7, [r5, #0]
 8016fc8:	2900      	cmp	r1, #0
 8016fca:	d0ca      	beq.n	8016f62 <__sflush_r+0x1a>
 8016fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fd0:	4299      	cmp	r1, r3
 8016fd2:	d002      	beq.n	8016fda <__sflush_r+0x92>
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f7ff f9af 	bl	8016338 <_free_r>
 8016fda:	2000      	movs	r0, #0
 8016fdc:	6360      	str	r0, [r4, #52]	; 0x34
 8016fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fe2:	6a21      	ldr	r1, [r4, #32]
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	47b0      	blx	r6
 8016fea:	1c41      	adds	r1, r0, #1
 8016fec:	d1c6      	bne.n	8016f7c <__sflush_r+0x34>
 8016fee:	682b      	ldr	r3, [r5, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d0c3      	beq.n	8016f7c <__sflush_r+0x34>
 8016ff4:	2b1d      	cmp	r3, #29
 8016ff6:	d001      	beq.n	8016ffc <__sflush_r+0xb4>
 8016ff8:	2b16      	cmp	r3, #22
 8016ffa:	d101      	bne.n	8017000 <__sflush_r+0xb8>
 8016ffc:	602f      	str	r7, [r5, #0]
 8016ffe:	e7b0      	b.n	8016f62 <__sflush_r+0x1a>
 8017000:	89a3      	ldrh	r3, [r4, #12]
 8017002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017006:	81a3      	strh	r3, [r4, #12]
 8017008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801700c:	690f      	ldr	r7, [r1, #16]
 801700e:	2f00      	cmp	r7, #0
 8017010:	d0a7      	beq.n	8016f62 <__sflush_r+0x1a>
 8017012:	0793      	lsls	r3, r2, #30
 8017014:	680e      	ldr	r6, [r1, #0]
 8017016:	bf08      	it	eq
 8017018:	694b      	ldreq	r3, [r1, #20]
 801701a:	600f      	str	r7, [r1, #0]
 801701c:	bf18      	it	ne
 801701e:	2300      	movne	r3, #0
 8017020:	eba6 0807 	sub.w	r8, r6, r7
 8017024:	608b      	str	r3, [r1, #8]
 8017026:	f1b8 0f00 	cmp.w	r8, #0
 801702a:	dd9a      	ble.n	8016f62 <__sflush_r+0x1a>
 801702c:	4643      	mov	r3, r8
 801702e:	463a      	mov	r2, r7
 8017030:	6a21      	ldr	r1, [r4, #32]
 8017032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017034:	4628      	mov	r0, r5
 8017036:	47b0      	blx	r6
 8017038:	2800      	cmp	r0, #0
 801703a:	dc07      	bgt.n	801704c <__sflush_r+0x104>
 801703c:	89a3      	ldrh	r3, [r4, #12]
 801703e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017042:	81a3      	strh	r3, [r4, #12]
 8017044:	f04f 30ff 	mov.w	r0, #4294967295
 8017048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801704c:	4407      	add	r7, r0
 801704e:	eba8 0800 	sub.w	r8, r8, r0
 8017052:	e7e8      	b.n	8017026 <__sflush_r+0xde>
 8017054:	20400001 	.word	0x20400001

08017058 <_fflush_r>:
 8017058:	b538      	push	{r3, r4, r5, lr}
 801705a:	690b      	ldr	r3, [r1, #16]
 801705c:	4605      	mov	r5, r0
 801705e:	460c      	mov	r4, r1
 8017060:	b1db      	cbz	r3, 801709a <_fflush_r+0x42>
 8017062:	b118      	cbz	r0, 801706c <_fflush_r+0x14>
 8017064:	6983      	ldr	r3, [r0, #24]
 8017066:	b90b      	cbnz	r3, 801706c <_fflush_r+0x14>
 8017068:	f7ff f8d4 	bl	8016214 <__sinit>
 801706c:	4b0c      	ldr	r3, [pc, #48]	; (80170a0 <_fflush_r+0x48>)
 801706e:	429c      	cmp	r4, r3
 8017070:	d109      	bne.n	8017086 <_fflush_r+0x2e>
 8017072:	686c      	ldr	r4, [r5, #4]
 8017074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017078:	b17b      	cbz	r3, 801709a <_fflush_r+0x42>
 801707a:	4621      	mov	r1, r4
 801707c:	4628      	mov	r0, r5
 801707e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017082:	f7ff bf61 	b.w	8016f48 <__sflush_r>
 8017086:	4b07      	ldr	r3, [pc, #28]	; (80170a4 <_fflush_r+0x4c>)
 8017088:	429c      	cmp	r4, r3
 801708a:	d101      	bne.n	8017090 <_fflush_r+0x38>
 801708c:	68ac      	ldr	r4, [r5, #8]
 801708e:	e7f1      	b.n	8017074 <_fflush_r+0x1c>
 8017090:	4b05      	ldr	r3, [pc, #20]	; (80170a8 <_fflush_r+0x50>)
 8017092:	429c      	cmp	r4, r3
 8017094:	bf08      	it	eq
 8017096:	68ec      	ldreq	r4, [r5, #12]
 8017098:	e7ec      	b.n	8017074 <_fflush_r+0x1c>
 801709a:	2000      	movs	r0, #0
 801709c:	bd38      	pop	{r3, r4, r5, pc}
 801709e:	bf00      	nop
 80170a0:	0801ae34 	.word	0x0801ae34
 80170a4:	0801ae54 	.word	0x0801ae54
 80170a8:	0801ae14 	.word	0x0801ae14

080170ac <_lseek_r>:
 80170ac:	b538      	push	{r3, r4, r5, lr}
 80170ae:	4c07      	ldr	r4, [pc, #28]	; (80170cc <_lseek_r+0x20>)
 80170b0:	4605      	mov	r5, r0
 80170b2:	4608      	mov	r0, r1
 80170b4:	4611      	mov	r1, r2
 80170b6:	2200      	movs	r2, #0
 80170b8:	6022      	str	r2, [r4, #0]
 80170ba:	461a      	mov	r2, r3
 80170bc:	f7ea fd4d 	bl	8001b5a <_lseek>
 80170c0:	1c43      	adds	r3, r0, #1
 80170c2:	d102      	bne.n	80170ca <_lseek_r+0x1e>
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	b103      	cbz	r3, 80170ca <_lseek_r+0x1e>
 80170c8:	602b      	str	r3, [r5, #0]
 80170ca:	bd38      	pop	{r3, r4, r5, pc}
 80170cc:	2000b6c4 	.word	0x2000b6c4

080170d0 <__swhatbuf_r>:
 80170d0:	b570      	push	{r4, r5, r6, lr}
 80170d2:	460e      	mov	r6, r1
 80170d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170d8:	2900      	cmp	r1, #0
 80170da:	b090      	sub	sp, #64	; 0x40
 80170dc:	4614      	mov	r4, r2
 80170de:	461d      	mov	r5, r3
 80170e0:	da07      	bge.n	80170f2 <__swhatbuf_r+0x22>
 80170e2:	2300      	movs	r3, #0
 80170e4:	602b      	str	r3, [r5, #0]
 80170e6:	89b3      	ldrh	r3, [r6, #12]
 80170e8:	061a      	lsls	r2, r3, #24
 80170ea:	d410      	bmi.n	801710e <__swhatbuf_r+0x3e>
 80170ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170f0:	e00e      	b.n	8017110 <__swhatbuf_r+0x40>
 80170f2:	aa01      	add	r2, sp, #4
 80170f4:	f000 f88a 	bl	801720c <_fstat_r>
 80170f8:	2800      	cmp	r0, #0
 80170fa:	dbf2      	blt.n	80170e2 <__swhatbuf_r+0x12>
 80170fc:	9a02      	ldr	r2, [sp, #8]
 80170fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017106:	425a      	negs	r2, r3
 8017108:	415a      	adcs	r2, r3
 801710a:	602a      	str	r2, [r5, #0]
 801710c:	e7ee      	b.n	80170ec <__swhatbuf_r+0x1c>
 801710e:	2340      	movs	r3, #64	; 0x40
 8017110:	2000      	movs	r0, #0
 8017112:	6023      	str	r3, [r4, #0]
 8017114:	b010      	add	sp, #64	; 0x40
 8017116:	bd70      	pop	{r4, r5, r6, pc}

08017118 <__smakebuf_r>:
 8017118:	898b      	ldrh	r3, [r1, #12]
 801711a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801711c:	079d      	lsls	r5, r3, #30
 801711e:	4606      	mov	r6, r0
 8017120:	460c      	mov	r4, r1
 8017122:	d507      	bpl.n	8017134 <__smakebuf_r+0x1c>
 8017124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	6123      	str	r3, [r4, #16]
 801712c:	2301      	movs	r3, #1
 801712e:	6163      	str	r3, [r4, #20]
 8017130:	b002      	add	sp, #8
 8017132:	bd70      	pop	{r4, r5, r6, pc}
 8017134:	ab01      	add	r3, sp, #4
 8017136:	466a      	mov	r2, sp
 8017138:	f7ff ffca 	bl	80170d0 <__swhatbuf_r>
 801713c:	9900      	ldr	r1, [sp, #0]
 801713e:	4605      	mov	r5, r0
 8017140:	4630      	mov	r0, r6
 8017142:	f7ff f947 	bl	80163d4 <_malloc_r>
 8017146:	b948      	cbnz	r0, 801715c <__smakebuf_r+0x44>
 8017148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801714c:	059a      	lsls	r2, r3, #22
 801714e:	d4ef      	bmi.n	8017130 <__smakebuf_r+0x18>
 8017150:	f023 0303 	bic.w	r3, r3, #3
 8017154:	f043 0302 	orr.w	r3, r3, #2
 8017158:	81a3      	strh	r3, [r4, #12]
 801715a:	e7e3      	b.n	8017124 <__smakebuf_r+0xc>
 801715c:	4b0d      	ldr	r3, [pc, #52]	; (8017194 <__smakebuf_r+0x7c>)
 801715e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017160:	89a3      	ldrh	r3, [r4, #12]
 8017162:	6020      	str	r0, [r4, #0]
 8017164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017168:	81a3      	strh	r3, [r4, #12]
 801716a:	9b00      	ldr	r3, [sp, #0]
 801716c:	6163      	str	r3, [r4, #20]
 801716e:	9b01      	ldr	r3, [sp, #4]
 8017170:	6120      	str	r0, [r4, #16]
 8017172:	b15b      	cbz	r3, 801718c <__smakebuf_r+0x74>
 8017174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017178:	4630      	mov	r0, r6
 801717a:	f000 f859 	bl	8017230 <_isatty_r>
 801717e:	b128      	cbz	r0, 801718c <__smakebuf_r+0x74>
 8017180:	89a3      	ldrh	r3, [r4, #12]
 8017182:	f023 0303 	bic.w	r3, r3, #3
 8017186:	f043 0301 	orr.w	r3, r3, #1
 801718a:	81a3      	strh	r3, [r4, #12]
 801718c:	89a3      	ldrh	r3, [r4, #12]
 801718e:	431d      	orrs	r5, r3
 8017190:	81a5      	strh	r5, [r4, #12]
 8017192:	e7cd      	b.n	8017130 <__smakebuf_r+0x18>
 8017194:	08016195 	.word	0x08016195

08017198 <__malloc_lock>:
 8017198:	4770      	bx	lr

0801719a <__malloc_unlock>:
 801719a:	4770      	bx	lr

0801719c <_realloc_r>:
 801719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801719e:	4607      	mov	r7, r0
 80171a0:	4614      	mov	r4, r2
 80171a2:	460e      	mov	r6, r1
 80171a4:	b921      	cbnz	r1, 80171b0 <_realloc_r+0x14>
 80171a6:	4611      	mov	r1, r2
 80171a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80171ac:	f7ff b912 	b.w	80163d4 <_malloc_r>
 80171b0:	b922      	cbnz	r2, 80171bc <_realloc_r+0x20>
 80171b2:	f7ff f8c1 	bl	8016338 <_free_r>
 80171b6:	4625      	mov	r5, r4
 80171b8:	4628      	mov	r0, r5
 80171ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171bc:	f000 f848 	bl	8017250 <_malloc_usable_size_r>
 80171c0:	4284      	cmp	r4, r0
 80171c2:	d90f      	bls.n	80171e4 <_realloc_r+0x48>
 80171c4:	4621      	mov	r1, r4
 80171c6:	4638      	mov	r0, r7
 80171c8:	f7ff f904 	bl	80163d4 <_malloc_r>
 80171cc:	4605      	mov	r5, r0
 80171ce:	2800      	cmp	r0, #0
 80171d0:	d0f2      	beq.n	80171b8 <_realloc_r+0x1c>
 80171d2:	4631      	mov	r1, r6
 80171d4:	4622      	mov	r2, r4
 80171d6:	f7fe fe32 	bl	8015e3e <memcpy>
 80171da:	4631      	mov	r1, r6
 80171dc:	4638      	mov	r0, r7
 80171de:	f7ff f8ab 	bl	8016338 <_free_r>
 80171e2:	e7e9      	b.n	80171b8 <_realloc_r+0x1c>
 80171e4:	4635      	mov	r5, r6
 80171e6:	e7e7      	b.n	80171b8 <_realloc_r+0x1c>

080171e8 <_read_r>:
 80171e8:	b538      	push	{r3, r4, r5, lr}
 80171ea:	4c07      	ldr	r4, [pc, #28]	; (8017208 <_read_r+0x20>)
 80171ec:	4605      	mov	r5, r0
 80171ee:	4608      	mov	r0, r1
 80171f0:	4611      	mov	r1, r2
 80171f2:	2200      	movs	r2, #0
 80171f4:	6022      	str	r2, [r4, #0]
 80171f6:	461a      	mov	r2, r3
 80171f8:	f7ea fc20 	bl	8001a3c <_read>
 80171fc:	1c43      	adds	r3, r0, #1
 80171fe:	d102      	bne.n	8017206 <_read_r+0x1e>
 8017200:	6823      	ldr	r3, [r4, #0]
 8017202:	b103      	cbz	r3, 8017206 <_read_r+0x1e>
 8017204:	602b      	str	r3, [r5, #0]
 8017206:	bd38      	pop	{r3, r4, r5, pc}
 8017208:	2000b6c4 	.word	0x2000b6c4

0801720c <_fstat_r>:
 801720c:	b538      	push	{r3, r4, r5, lr}
 801720e:	4c07      	ldr	r4, [pc, #28]	; (801722c <_fstat_r+0x20>)
 8017210:	2300      	movs	r3, #0
 8017212:	4605      	mov	r5, r0
 8017214:	4608      	mov	r0, r1
 8017216:	4611      	mov	r1, r2
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	f7ea fc83 	bl	8001b24 <_fstat>
 801721e:	1c43      	adds	r3, r0, #1
 8017220:	d102      	bne.n	8017228 <_fstat_r+0x1c>
 8017222:	6823      	ldr	r3, [r4, #0]
 8017224:	b103      	cbz	r3, 8017228 <_fstat_r+0x1c>
 8017226:	602b      	str	r3, [r5, #0]
 8017228:	bd38      	pop	{r3, r4, r5, pc}
 801722a:	bf00      	nop
 801722c:	2000b6c4 	.word	0x2000b6c4

08017230 <_isatty_r>:
 8017230:	b538      	push	{r3, r4, r5, lr}
 8017232:	4c06      	ldr	r4, [pc, #24]	; (801724c <_isatty_r+0x1c>)
 8017234:	2300      	movs	r3, #0
 8017236:	4605      	mov	r5, r0
 8017238:	4608      	mov	r0, r1
 801723a:	6023      	str	r3, [r4, #0]
 801723c:	f7ea fc82 	bl	8001b44 <_isatty>
 8017240:	1c43      	adds	r3, r0, #1
 8017242:	d102      	bne.n	801724a <_isatty_r+0x1a>
 8017244:	6823      	ldr	r3, [r4, #0]
 8017246:	b103      	cbz	r3, 801724a <_isatty_r+0x1a>
 8017248:	602b      	str	r3, [r5, #0]
 801724a:	bd38      	pop	{r3, r4, r5, pc}
 801724c:	2000b6c4 	.word	0x2000b6c4

08017250 <_malloc_usable_size_r>:
 8017250:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017254:	2800      	cmp	r0, #0
 8017256:	f1a0 0004 	sub.w	r0, r0, #4
 801725a:	bfbc      	itt	lt
 801725c:	580b      	ldrlt	r3, [r1, r0]
 801725e:	18c0      	addlt	r0, r0, r3
 8017260:	4770      	bx	lr
	...

08017264 <_init>:
 8017264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017266:	bf00      	nop
 8017268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726a:	bc08      	pop	{r3}
 801726c:	469e      	mov	lr, r3
 801726e:	4770      	bx	lr

08017270 <_fini>:
 8017270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017272:	bf00      	nop
 8017274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017276:	bc08      	pop	{r3}
 8017278:	469e      	mov	lr, r3
 801727a:	4770      	bx	lr
