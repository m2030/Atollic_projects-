
Nrf_F767_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003184  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800337c  0800337c  0001337c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20020000  080033f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  0002000c  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  0002000c  2**0
                  CONTENTS
  9 .bss          000005dc  2002000c  2002000c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200205e8  200205e8  0002000c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014faf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260d  00000000  00000000  00034feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009566  00000000  00000000  000375f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cf8  00000000  00000000  00040b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010b0  00000000  00000000  00041858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068f4  00000000  00000000  00042908  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000054d2  00000000  00000000  000491fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0004e6ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  0004e74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2002000c 	.word	0x2002000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003364 	.word	0x08003364

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20020010 	.word	0x20020010
 8000234:	08003364 	.word	0x08003364

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b97a 	b.w	8000554 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	468c      	mov	ip, r1
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	9e08      	ldr	r6, [sp, #32]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d151      	bne.n	800032c <__udivmoddi4+0xb4>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d96d      	bls.n	800036a <__udivmoddi4+0xf2>
 800028e:	fab2 fe82 	clz	lr, r2
 8000292:	f1be 0f00 	cmp.w	lr, #0
 8000296:	d00b      	beq.n	80002b0 <__udivmoddi4+0x38>
 8000298:	f1ce 0c20 	rsb	ip, lr, #32
 800029c:	fa01 f50e 	lsl.w	r5, r1, lr
 80002a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002a4:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a8:	ea4c 0c05 	orr.w	ip, ip, r5
 80002ac:	fa00 f40e 	lsl.w	r4, r0, lr
 80002b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	fbbc f8fa 	udiv	r8, ip, sl
 80002ba:	fa1f f987 	uxth.w	r9, r7
 80002be:	fb0a cc18 	mls	ip, sl, r8, ip
 80002c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002c6:	fb08 f309 	mul.w	r3, r8, r9
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x6c>
 80002ce:	19ed      	adds	r5, r5, r7
 80002d0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002d4:	f080 8123 	bcs.w	800051e <__udivmoddi4+0x2a6>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	f240 8120 	bls.w	800051e <__udivmoddi4+0x2a6>
 80002de:	f1a8 0802 	sub.w	r8, r8, #2
 80002e2:	443d      	add	r5, r7
 80002e4:	1aed      	subs	r5, r5, r3
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ec:	fb0a 5510 	mls	r5, sl, r0, r5
 80002f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f4:	fb00 f909 	mul.w	r9, r0, r9
 80002f8:	45a1      	cmp	r9, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x98>
 80002fc:	19e4      	adds	r4, r4, r7
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	f080 810a 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000306:	45a1      	cmp	r9, r4
 8000308:	f240 8107 	bls.w	800051a <__udivmoddi4+0x2a2>
 800030c:	3802      	subs	r0, #2
 800030e:	443c      	add	r4, r7
 8000310:	eba4 0409 	sub.w	r4, r4, r9
 8000314:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000318:	2100      	movs	r1, #0
 800031a:	2e00      	cmp	r6, #0
 800031c:	d061      	beq.n	80003e2 <__udivmoddi4+0x16a>
 800031e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000322:	2300      	movs	r3, #0
 8000324:	6034      	str	r4, [r6, #0]
 8000326:	6073      	str	r3, [r6, #4]
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	428b      	cmp	r3, r1
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0xc8>
 8000330:	2e00      	cmp	r6, #0
 8000332:	d054      	beq.n	80003de <__udivmoddi4+0x166>
 8000334:	2100      	movs	r1, #0
 8000336:	e886 0021 	stmia.w	r6, {r0, r5}
 800033a:	4608      	mov	r0, r1
 800033c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000340:	fab3 f183 	clz	r1, r3
 8000344:	2900      	cmp	r1, #0
 8000346:	f040 808e 	bne.w	8000466 <__udivmoddi4+0x1ee>
 800034a:	42ab      	cmp	r3, r5
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xdc>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80fa 	bhi.w	8000548 <__udivmoddi4+0x2d0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb65 0503 	sbc.w	r5, r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	46ac      	mov	ip, r5
 800035e:	2e00      	cmp	r6, #0
 8000360:	d03f      	beq.n	80003e2 <__udivmoddi4+0x16a>
 8000362:	e886 1010 	stmia.w	r6, {r4, ip}
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	b912      	cbnz	r2, 8000372 <__udivmoddi4+0xfa>
 800036c:	2701      	movs	r7, #1
 800036e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000372:	fab7 fe87 	clz	lr, r7
 8000376:	f1be 0f00 	cmp.w	lr, #0
 800037a:	d134      	bne.n	80003e6 <__udivmoddi4+0x16e>
 800037c:	1beb      	subs	r3, r5, r7
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	2101      	movs	r1, #1
 8000386:	fbb3 f8f2 	udiv	r8, r3, r2
 800038a:	0c25      	lsrs	r5, r4, #16
 800038c:	fb02 3318 	mls	r3, r2, r8, r3
 8000390:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000394:	fb0c f308 	mul.w	r3, ip, r8
 8000398:	42ab      	cmp	r3, r5
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x134>
 800039c:	19ed      	adds	r5, r5, r7
 800039e:	f108 30ff 	add.w	r0, r8, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x132>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	f200 80d1 	bhi.w	800054c <__udivmoddi4+0x2d4>
 80003aa:	4680      	mov	r8, r0
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a3      	uxth	r3, r4
 80003b0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003b4:	fb02 5510 	mls	r5, r2, r0, r5
 80003b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003bc:	fb0c fc00 	mul.w	ip, ip, r0
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x15c>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x15a>
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	f200 80b8 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003d2:	4618      	mov	r0, r3
 80003d4:	eba4 040c 	sub.w	r4, r4, ip
 80003d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003dc:	e79d      	b.n	800031a <__udivmoddi4+0xa2>
 80003de:	4631      	mov	r1, r6
 80003e0:	4630      	mov	r0, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	f1ce 0420 	rsb	r4, lr, #32
 80003ea:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80003f2:	fa20 f804 	lsr.w	r8, r0, r4
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa25 f404 	lsr.w	r4, r5, r4
 80003fc:	ea48 0803 	orr.w	r8, r8, r3
 8000400:	fbb4 f1f2 	udiv	r1, r4, r2
 8000404:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000408:	fb02 4411 	mls	r4, r2, r1, r4
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000414:	fb01 f30c 	mul.w	r3, r1, ip
 8000418:	42ab      	cmp	r3, r5
 800041a:	fa00 f40e 	lsl.w	r4, r0, lr
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1bc>
 8000420:	19ed      	adds	r5, r5, r7
 8000422:	f101 30ff 	add.w	r0, r1, #4294967295
 8000426:	f080 808a 	bcs.w	800053e <__udivmoddi4+0x2c6>
 800042a:	42ab      	cmp	r3, r5
 800042c:	f240 8087 	bls.w	800053e <__udivmoddi4+0x2c6>
 8000430:	3902      	subs	r1, #2
 8000432:	443d      	add	r5, r7
 8000434:	1aeb      	subs	r3, r5, r3
 8000436:	fa1f f588 	uxth.w	r5, r8
 800043a:	fbb3 f0f2 	udiv	r0, r3, r2
 800043e:	fb02 3310 	mls	r3, r2, r0, r3
 8000442:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000446:	fb00 f30c 	mul.w	r3, r0, ip
 800044a:	42ab      	cmp	r3, r5
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x1e6>
 800044e:	19ed      	adds	r5, r5, r7
 8000450:	f100 38ff 	add.w	r8, r0, #4294967295
 8000454:	d26f      	bcs.n	8000536 <__udivmoddi4+0x2be>
 8000456:	42ab      	cmp	r3, r5
 8000458:	d96d      	bls.n	8000536 <__udivmoddi4+0x2be>
 800045a:	3802      	subs	r0, #2
 800045c:	443d      	add	r5, r7
 800045e:	1aeb      	subs	r3, r5, r3
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	e78f      	b.n	8000386 <__udivmoddi4+0x10e>
 8000466:	f1c1 0720 	rsb	r7, r1, #32
 800046a:	fa22 f807 	lsr.w	r8, r2, r7
 800046e:	408b      	lsls	r3, r1
 8000470:	fa05 f401 	lsl.w	r4, r5, r1
 8000474:	ea48 0303 	orr.w	r3, r8, r3
 8000478:	fa20 fe07 	lsr.w	lr, r0, r7
 800047c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000480:	40fd      	lsrs	r5, r7
 8000482:	ea4e 0e04 	orr.w	lr, lr, r4
 8000486:	fbb5 f9fc 	udiv	r9, r5, ip
 800048a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800048e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000492:	fa1f f883 	uxth.w	r8, r3
 8000496:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800049a:	fb09 f408 	mul.w	r4, r9, r8
 800049e:	42ac      	cmp	r4, r5
 80004a0:	fa02 f201 	lsl.w	r2, r2, r1
 80004a4:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x244>
 80004aa:	18ed      	adds	r5, r5, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	d243      	bcs.n	800053a <__udivmoddi4+0x2c2>
 80004b2:	42ac      	cmp	r4, r5
 80004b4:	d941      	bls.n	800053a <__udivmoddi4+0x2c2>
 80004b6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ba:	441d      	add	r5, r3
 80004bc:	1b2d      	subs	r5, r5, r4
 80004be:	fa1f fe8e 	uxth.w	lr, lr
 80004c2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004c6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004ce:	fb00 f808 	mul.w	r8, r0, r8
 80004d2:	45a0      	cmp	r8, r4
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x26e>
 80004d6:	18e4      	adds	r4, r4, r3
 80004d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004dc:	d229      	bcs.n	8000532 <__udivmoddi4+0x2ba>
 80004de:	45a0      	cmp	r8, r4
 80004e0:	d927      	bls.n	8000532 <__udivmoddi4+0x2ba>
 80004e2:	3802      	subs	r0, #2
 80004e4:	441c      	add	r4, r3
 80004e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ea:	eba4 0408 	sub.w	r4, r4, r8
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	454c      	cmp	r4, r9
 80004f4:	46c6      	mov	lr, r8
 80004f6:	464d      	mov	r5, r9
 80004f8:	d315      	bcc.n	8000526 <__udivmoddi4+0x2ae>
 80004fa:	d012      	beq.n	8000522 <__udivmoddi4+0x2aa>
 80004fc:	b156      	cbz	r6, 8000514 <__udivmoddi4+0x29c>
 80004fe:	ebba 030e 	subs.w	r3, sl, lr
 8000502:	eb64 0405 	sbc.w	r4, r4, r5
 8000506:	fa04 f707 	lsl.w	r7, r4, r7
 800050a:	40cb      	lsrs	r3, r1
 800050c:	431f      	orrs	r7, r3
 800050e:	40cc      	lsrs	r4, r1
 8000510:	6037      	str	r7, [r6, #0]
 8000512:	6074      	str	r4, [r6, #4]
 8000514:	2100      	movs	r1, #0
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	4618      	mov	r0, r3
 800051c:	e6f8      	b.n	8000310 <__udivmoddi4+0x98>
 800051e:	4690      	mov	r8, r2
 8000520:	e6e0      	b.n	80002e4 <__udivmoddi4+0x6c>
 8000522:	45c2      	cmp	sl, r8
 8000524:	d2ea      	bcs.n	80004fc <__udivmoddi4+0x284>
 8000526:	ebb8 0e02 	subs.w	lr, r8, r2
 800052a:	eb69 0503 	sbc.w	r5, r9, r3
 800052e:	3801      	subs	r0, #1
 8000530:	e7e4      	b.n	80004fc <__udivmoddi4+0x284>
 8000532:	4628      	mov	r0, r5
 8000534:	e7d7      	b.n	80004e6 <__udivmoddi4+0x26e>
 8000536:	4640      	mov	r0, r8
 8000538:	e791      	b.n	800045e <__udivmoddi4+0x1e6>
 800053a:	4681      	mov	r9, r0
 800053c:	e7be      	b.n	80004bc <__udivmoddi4+0x244>
 800053e:	4601      	mov	r1, r0
 8000540:	e778      	b.n	8000434 <__udivmoddi4+0x1bc>
 8000542:	3802      	subs	r0, #2
 8000544:	443c      	add	r4, r7
 8000546:	e745      	b.n	80003d4 <__udivmoddi4+0x15c>
 8000548:	4608      	mov	r0, r1
 800054a:	e708      	b.n	800035e <__udivmoddi4+0xe6>
 800054c:	f1a8 0802 	sub.w	r8, r8, #2
 8000550:	443d      	add	r5, r7
 8000552:	e72b      	b.n	80003ac <__udivmoddi4+0x134>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_InitTick+0x3c>)
{
 800055c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_InitTick+0x40>)
 8000560:	7818      	ldrb	r0, [r3, #0]
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f0 	udiv	r3, r3, r0
 800056a:	6810      	ldr	r0, [r2, #0]
 800056c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000570:	f000 f89e 	bl	80006b0 <HAL_SYSTICK_Config>
 8000574:	4604      	mov	r4, r0
 8000576:	b958      	cbnz	r0, 8000590 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000578:	2d0f      	cmp	r5, #15
 800057a:	d809      	bhi.n	8000590 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	4602      	mov	r2, r0
 800057e:	4629      	mov	r1, r5
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f84e 	bl	8000624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_InitTick+0x44>)
 800058a:	4620      	mov	r0, r4
 800058c:	601d      	str	r5, [r3, #0]
 800058e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000590:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000592:	bd38      	pop	{r3, r4, r5, pc}
 8000594:	20020000 	.word	0x20020000
 8000598:	20020008 	.word	0x20020008
 800059c:	20020004 	.word	0x20020004

080005a0 <HAL_Init>:
{
 80005a0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a2:	2003      	movs	r0, #3
 80005a4:	f000 f82c 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ffd5 	bl	8000558 <HAL_InitTick>
  HAL_MspInit();
 80005ae:	f002 fd6b 	bl	8003088 <HAL_MspInit>
}
 80005b2:	2000      	movs	r0, #0
 80005b4:	bd08      	pop	{r3, pc}
	...

080005b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_IncTick+0x10>)
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_IncTick+0x14>)
 80005bc:	6811      	ldr	r1, [r2, #0]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	440b      	add	r3, r1
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20020028 	.word	0x20020028
 80005cc:	20020000 	.word	0x20020000

080005d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_GetTick+0x8>)
 80005d2:	6818      	ldr	r0, [r3, #0]
}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20020028 	.word	0x20020028

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff6 	bl	80005d0 <HAL_GetTick>
 80005e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005e8:	bf1e      	ittt	ne
 80005ea:	4b04      	ldrne	r3, [pc, #16]	; (80005fc <HAL_Delay+0x20>)
 80005ec:	781b      	ldrbne	r3, [r3, #0]
 80005ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	1b40      	subs	r0, r0, r5
 80005f6:	4284      	cmp	r4, r0
 80005f8:	d8fa      	bhi.n	80005f0 <HAL_Delay+0x14>
  {
  }
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20020000 	.word	0x20020000

08000600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000602:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000606:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800061a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800061c:	60d3      	str	r3, [r2, #12]
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	68dc      	ldr	r4, [r3, #12]
 800062a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	2b04      	cmp	r3, #4
 8000636:	bf28      	it	cs
 8000638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf8c      	ite	hi
 8000642:	3c03      	subhi	r4, #3
 8000644:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800064a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000650:	ea01 0103 	and.w	r1, r1, r3
 8000654:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	fa05 f404 	lsl.w	r4, r5, r4
 800065c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000660:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	ea42 0201 	orr.w	r2, r2, r1
 8000668:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800066c:	db07      	blt.n	800067e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000678:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800067c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	f000 000f 	and.w	r0, r0, #15
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <HAL_NVIC_SetPriority+0x6c>)
 8000686:	541a      	strb	r2, [r3, r0]
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000ed14 	.word	0xe000ed14

08000694 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000694:	2800      	cmp	r0, #0
 8000696:	db08      	blt.n	80006aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000698:	0942      	lsrs	r2, r0, #5
 800069a:	2301      	movs	r3, #1
 800069c:	f000 001f 	and.w	r0, r0, #31
 80006a0:	fa03 f000 	lsl.w	r0, r3, r0
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <HAL_NVIC_EnableIRQ+0x18>)
 80006a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b0:	3801      	subs	r0, #1
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d20a      	bcs.n	80006ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	21f0      	movs	r1, #240	; 0xf0
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006be:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e010 	.word	0xe000e010
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e0:	680b      	ldr	r3, [r1, #0]
{
 80006e2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80008a8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e8:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006ea:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ec:	4a6c      	ldr	r2, [pc, #432]	; (80008a0 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006ee:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80008ac <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80006f2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f4:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006f6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006fa:	42ac      	cmp	r4, r5
 80006fc:	f040 80b6 	bne.w	800086c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000700:	684c      	ldr	r4, [r1, #4]
 8000702:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000706:	f024 0c10 	bic.w	ip, r4, #16
 800070a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800070e:	2e01      	cmp	r6, #1
 8000710:	d812      	bhi.n	8000738 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000712:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000714:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000716:	fa06 f60e 	lsl.w	r6, r6, lr
 800071a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800071e:	68ce      	ldr	r6, [r1, #12]
 8000720:	fa06 f60e 	lsl.w	r6, r6, lr
 8000724:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000726:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000728:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 800072c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800072e:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000730:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000734:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000736:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000738:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800073a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800073c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000740:	fa06 f60e 	lsl.w	r6, r6, lr
 8000744:	ea6f 0606 	mvn.w	r6, r6
 8000748:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800074c:	688f      	ldr	r7, [r1, #8]
 800074e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000752:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000756:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000758:	d116      	bne.n	8000788 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 800075a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800075e:	f003 0b07 	and.w	fp, r3, #7
 8000762:	f04f 0c0f 	mov.w	ip, #15
 8000766:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800076a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800076e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000772:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000776:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800077a:	690f      	ldr	r7, [r1, #16]
 800077c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000780:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000784:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000788:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800078a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800078c:	f004 0703 	and.w	r7, r4, #3
 8000790:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000794:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000798:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800079a:	00e6      	lsls	r6, r4, #3
 800079c:	d566      	bpl.n	800086c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80007a2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007a6:	f003 0e03 	and.w	lr, r3, #3
 80007aa:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 80007be:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80007c2:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80007c6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80007ca:	9603      	str	r6, [sp, #12]
 80007cc:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ce:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80007d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007d6:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007da:	4e32      	ldr	r6, [pc, #200]	; (80008a4 <HAL_GPIO_Init+0x1c8>)
 80007dc:	42b0      	cmp	r0, r6
 80007de:	d04c      	beq.n	800087a <HAL_GPIO_Init+0x19e>
 80007e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007e4:	42b0      	cmp	r0, r6
 80007e6:	d04a      	beq.n	800087e <HAL_GPIO_Init+0x1a2>
 80007e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ec:	42b0      	cmp	r0, r6
 80007ee:	d048      	beq.n	8000882 <HAL_GPIO_Init+0x1a6>
 80007f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007f4:	42b0      	cmp	r0, r6
 80007f6:	d046      	beq.n	8000886 <HAL_GPIO_Init+0x1aa>
 80007f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007fc:	42b0      	cmp	r0, r6
 80007fe:	d044      	beq.n	800088a <HAL_GPIO_Init+0x1ae>
 8000800:	4548      	cmp	r0, r9
 8000802:	d044      	beq.n	800088e <HAL_GPIO_Init+0x1b2>
 8000804:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000808:	42b0      	cmp	r0, r6
 800080a:	d042      	beq.n	8000892 <HAL_GPIO_Init+0x1b6>
 800080c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000810:	42b0      	cmp	r0, r6
 8000812:	d040      	beq.n	8000896 <HAL_GPIO_Init+0x1ba>
 8000814:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000818:	42b0      	cmp	r0, r6
 800081a:	d03e      	beq.n	800089a <HAL_GPIO_Init+0x1be>
 800081c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000820:	42b0      	cmp	r0, r6
 8000822:	bf14      	ite	ne
 8000824:	260a      	movne	r6, #10
 8000826:	2609      	moveq	r6, #9
 8000828:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800082c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000830:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000834:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000836:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 800083a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800083c:	bf0c      	ite	eq
 800083e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000840:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000842:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000846:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000848:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800084a:	bf0c      	ite	eq
 800084c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800084e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000850:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000854:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000856:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000858:	bf0c      	ite	eq
 800085a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800085c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800085e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000860:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000862:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000864:	bf54      	ite	pl
 8000866:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000868:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800086a:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800086c:	3301      	adds	r3, #1
 800086e:	2b10      	cmp	r3, #16
 8000870:	f47f af3f 	bne.w	80006f2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000874:	b005      	add	sp, #20
 8000876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800087a:	2600      	movs	r6, #0
 800087c:	e7d4      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800087e:	2601      	movs	r6, #1
 8000880:	e7d2      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000882:	2602      	movs	r6, #2
 8000884:	e7d0      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000886:	2603      	movs	r6, #3
 8000888:	e7ce      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800088a:	2604      	movs	r6, #4
 800088c:	e7cc      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800088e:	2605      	movs	r6, #5
 8000890:	e7ca      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000892:	2606      	movs	r6, #6
 8000894:	e7c8      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000896:	2607      	movs	r6, #7
 8000898:	e7c6      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800089a:	2608      	movs	r6, #8
 800089c:	e7c4      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800089e:	bf00      	nop
 80008a0:	40013c00 	.word	0x40013c00
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40021400 	.word	0x40021400

080008b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008b0:	b10a      	cbz	r2, 80008b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80008b2:	6181      	str	r1, [r0, #24]
 80008b4:	4770      	bx	lr
 80008b6:	0409      	lsls	r1, r1, #16
 80008b8:	e7fb      	b.n	80008b2 <HAL_GPIO_WritePin+0x2>

080008ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80008ba:	6943      	ldr	r3, [r0, #20]
 80008bc:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80008be:	bf18      	it	ne
 80008c0:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008c2:	6181      	str	r1, [r0, #24]
 80008c4:	4770      	bx	lr
	...

080008c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008c8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008cc:	6959      	ldr	r1, [r3, #20]
 80008ce:	4201      	tst	r1, r0
 80008d0:	d002      	beq.n	80008d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008d4:	f001 ffae 	bl	8002834 <HAL_GPIO_EXTI_Callback>
 80008d8:	bd08      	pop	{r3, pc}
 80008da:	bf00      	nop
 80008dc:	40013c00 	.word	0x40013c00

080008e0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80008e0:	4a02      	ldr	r2, [pc, #8]	; (80008ec <HAL_PWR_EnableBkUpAccess+0xc>)
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	4770      	bx	lr
 80008ec:	40007000 	.word	0x40007000

080008f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80008f4:	4604      	mov	r4, r0
 80008f6:	b908      	cbnz	r0, 80008fc <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80008f8:	2001      	movs	r0, #1
 80008fa:	e03f      	b.n	800097c <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	07d8      	lsls	r0, r3, #31
 8000900:	d410      	bmi.n	8000924 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	0799      	lsls	r1, r3, #30
 8000906:	d460      	bmi.n	80009ca <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	0719      	lsls	r1, r3, #28
 800090c:	f100 80a5 	bmi.w	8000a5a <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	075a      	lsls	r2, r3, #29
 8000914:	f100 80c6 	bmi.w	8000aa4 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000918:	69a0      	ldr	r0, [r4, #24]
 800091a:	2800      	cmp	r0, #0
 800091c:	f040 8130 	bne.w	8000b80 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8000920:	2000      	movs	r0, #0
 8000922:	e02b      	b.n	800097c <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000924:	4b94      	ldr	r3, [pc, #592]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	f002 020c 	and.w	r2, r2, #12
 800092c:	2a04      	cmp	r2, #4
 800092e:	d007      	beq.n	8000940 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	f002 020c 	and.w	r2, r2, #12
 8000936:	2a08      	cmp	r2, #8
 8000938:	d10a      	bne.n	8000950 <HAL_RCC_OscConfig+0x60>
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	025a      	lsls	r2, r3, #9
 800093e:	d507      	bpl.n	8000950 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000940:	4b8d      	ldr	r3, [pc, #564]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	039b      	lsls	r3, r3, #14
 8000946:	d5dc      	bpl.n	8000902 <HAL_RCC_OscConfig+0x12>
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1d9      	bne.n	8000902 <HAL_RCC_OscConfig+0x12>
 800094e:	e7d3      	b.n	80008f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	4d89      	ldr	r5, [pc, #548]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000958:	d113      	bne.n	8000982 <HAL_RCC_OscConfig+0x92>
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000960:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000962:	f7ff fe35 	bl	80005d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	4d84      	ldr	r5, [pc, #528]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000968:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	039f      	lsls	r7, r3, #14
 800096e:	d4c8      	bmi.n	8000902 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000970:	f7ff fe2e 	bl	80005d0 <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	2864      	cmp	r0, #100	; 0x64
 8000978:	d9f7      	bls.n	800096a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800097a:	2003      	movs	r0, #3
}
 800097c:	b002      	add	sp, #8
 800097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000982:	b99b      	cbnz	r3, 80009ac <HAL_RCC_OscConfig+0xbc>
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098a:	602b      	str	r3, [r5, #0]
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000992:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fe1c 	bl	80005d0 <HAL_GetTick>
 8000998:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	0398      	lsls	r0, r3, #14
 800099e:	d5b0      	bpl.n	8000902 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009a0:	f7ff fe16 	bl	80005d0 <HAL_GetTick>
 80009a4:	1b80      	subs	r0, r0, r6
 80009a6:	2864      	cmp	r0, #100	; 0x64
 80009a8:	d9f7      	bls.n	800099a <HAL_RCC_OscConfig+0xaa>
 80009aa:	e7e6      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b0:	682b      	ldr	r3, [r5, #0]
 80009b2:	d103      	bne.n	80009bc <HAL_RCC_OscConfig+0xcc>
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	602b      	str	r3, [r5, #0]
 80009ba:	e7ce      	b.n	800095a <HAL_RCC_OscConfig+0x6a>
 80009bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c0:	602b      	str	r3, [r5, #0]
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c8:	e7ca      	b.n	8000960 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ca:	4b6b      	ldr	r3, [pc, #428]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	f012 0f0c 	tst.w	r2, #12
 80009d2:	d007      	beq.n	80009e4 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	f002 020c 	and.w	r2, r2, #12
 80009da:	2a08      	cmp	r2, #8
 80009dc:	d111      	bne.n	8000a02 <HAL_RCC_OscConfig+0x112>
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	0259      	lsls	r1, r3, #9
 80009e2:	d40e      	bmi.n	8000a02 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e4:	4b64      	ldr	r3, [pc, #400]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	0792      	lsls	r2, r2, #30
 80009ea:	d502      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x102>
 80009ec:	68e2      	ldr	r2, [r4, #12]
 80009ee:	2a01      	cmp	r2, #1
 80009f0:	d182      	bne.n	80008f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	6921      	ldr	r1, [r4, #16]
 80009f6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009fa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009fe:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a00:	e782      	b.n	8000908 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a02:	68e3      	ldr	r3, [r4, #12]
 8000a04:	4d5c      	ldr	r5, [pc, #368]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000a06:	b1bb      	cbz	r3, 8000a38 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a10:	f7ff fdde 	bl	80005d0 <HAL_GetTick>
 8000a14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	079f      	lsls	r7, r3, #30
 8000a1a:	d507      	bpl.n	8000a2c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	6922      	ldr	r2, [r4, #16]
 8000a20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a28:	602b      	str	r3, [r5, #0]
 8000a2a:	e76d      	b.n	8000908 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fdd0 	bl	80005d0 <HAL_GetTick>
 8000a30:	1b80      	subs	r0, r0, r6
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9ef      	bls.n	8000a16 <HAL_RCC_OscConfig+0x126>
 8000a36:	e7a0      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	f023 0301 	bic.w	r3, r3, #1
 8000a3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a40:	f7ff fdc6 	bl	80005d0 <HAL_GetTick>
 8000a44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	0798      	lsls	r0, r3, #30
 8000a4a:	f57f af5d 	bpl.w	8000908 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a4e:	f7ff fdbf 	bl	80005d0 <HAL_GetTick>
 8000a52:	1b80      	subs	r0, r0, r6
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d9f6      	bls.n	8000a46 <HAL_RCC_OscConfig+0x156>
 8000a58:	e78f      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000a5a:	6963      	ldr	r3, [r4, #20]
 8000a5c:	4d46      	ldr	r5, [pc, #280]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000a5e:	b183      	cbz	r3, 8000a82 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000a60:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a68:	f7ff fdb2 	bl	80005d0 <HAL_GetTick>
 8000a6c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a70:	079b      	lsls	r3, r3, #30
 8000a72:	f53f af4d 	bmi.w	8000910 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a76:	f7ff fdab 	bl	80005d0 <HAL_GetTick>
 8000a7a:	1b80      	subs	r0, r0, r6
 8000a7c:	2802      	cmp	r0, #2
 8000a7e:	d9f6      	bls.n	8000a6e <HAL_RCC_OscConfig+0x17e>
 8000a80:	e77b      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a8a:	f7ff fda1 	bl	80005d0 <HAL_GetTick>
 8000a8e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a92:	079f      	lsls	r7, r3, #30
 8000a94:	f57f af3c 	bpl.w	8000910 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fd9a 	bl	80005d0 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9f6      	bls.n	8000a90 <HAL_RCC_OscConfig+0x1a0>
 8000aa2:	e76a      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa8:	00d0      	lsls	r0, r2, #3
 8000aaa:	d427      	bmi.n	8000afc <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000aae:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ac0:	4d2e      	ldr	r5, [pc, #184]	; (8000b7c <HAL_RCC_OscConfig+0x28c>)
 8000ac2:	682b      	ldr	r3, [r5, #0]
 8000ac4:	05d9      	lsls	r1, r3, #23
 8000ac6:	d51b      	bpl.n	8000b00 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac8:	68a3      	ldr	r3, [r4, #8]
 8000aca:	4d2b      	ldr	r5, [pc, #172]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d127      	bne.n	8000b20 <HAL_RCC_OscConfig+0x230>
 8000ad0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000adc:	f7ff fd78 	bl	80005d0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae0:	4f25      	ldr	r7, [pc, #148]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000ae2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ae6:	079b      	lsls	r3, r3, #30
 8000ae8:	d53f      	bpl.n	8000b6a <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	f43f af14 	beq.w	8000918 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <HAL_RCC_OscConfig+0x288>)
 8000af2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	e70d      	b.n	8000918 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8000afc:	2600      	movs	r6, #0
 8000afe:	e7df      	b.n	8000ac0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b08:	f7ff fd62 	bl	80005d0 <HAL_GetTick>
 8000b0c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b0e:	682b      	ldr	r3, [r5, #0]
 8000b10:	05da      	lsls	r2, r3, #23
 8000b12:	d4d9      	bmi.n	8000ac8 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b14:	f7ff fd5c 	bl	80005d0 <HAL_GetTick>
 8000b18:	1bc0      	subs	r0, r0, r7
 8000b1a:	2864      	cmp	r0, #100	; 0x64
 8000b1c:	d9f7      	bls.n	8000b0e <HAL_RCC_OscConfig+0x21e>
 8000b1e:	e72c      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b20:	b9ab      	cbnz	r3, 8000b4e <HAL_RCC_OscConfig+0x25e>
 8000b22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b24:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	672b      	str	r3, [r5, #112]	; 0x70
 8000b2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b30:	f023 0304 	bic.w	r3, r3, #4
 8000b34:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b36:	f7ff fd4b 	bl	80005d0 <HAL_GetTick>
 8000b3a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b3e:	0798      	lsls	r0, r3, #30
 8000b40:	d5d3      	bpl.n	8000aea <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b42:	f7ff fd45 	bl	80005d0 <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	4540      	cmp	r0, r8
 8000b4a:	d9f7      	bls.n	8000b3c <HAL_RCC_OscConfig+0x24c>
 8000b4c:	e715      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4e:	2b05      	cmp	r3, #5
 8000b50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b52:	d103      	bne.n	8000b5c <HAL_RCC_OscConfig+0x26c>
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	672b      	str	r3, [r5, #112]	; 0x70
 8000b5a:	e7b9      	b.n	8000ad0 <HAL_RCC_OscConfig+0x1e0>
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	672b      	str	r3, [r5, #112]	; 0x70
 8000b62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b64:	f023 0304 	bic.w	r3, r3, #4
 8000b68:	e7b5      	b.n	8000ad6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b6a:	f7ff fd31 	bl	80005d0 <HAL_GetTick>
 8000b6e:	eba0 0008 	sub.w	r0, r0, r8
 8000b72:	42a8      	cmp	r0, r5
 8000b74:	d9b6      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x1f4>
 8000b76:	e700      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b80:	4d3c      	ldr	r5, [pc, #240]	; (8000c74 <HAL_RCC_OscConfig+0x384>)
 8000b82:	68ab      	ldr	r3, [r5, #8]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d042      	beq.n	8000c12 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8000b8c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b94:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b96:	d12f      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8000b98:	f7ff fd1a 	bl	80005d0 <HAL_GetTick>
 8000b9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b9e:	682b      	ldr	r3, [r5, #0]
 8000ba0:	0199      	lsls	r1, r3, #6
 8000ba2:	d423      	bmi.n	8000bec <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba4:	6a22      	ldr	r2, [r4, #32]
 8000ba6:	69e3      	ldr	r3, [r4, #28]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000bb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000bb8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000bbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bbe:	4c2d      	ldr	r4, [pc, #180]	; (8000c74 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc0:	0852      	lsrs	r2, r2, #1
 8000bc2:	3a01      	subs	r2, #1
 8000bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bc8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fcfd 	bl	80005d0 <HAL_GetTick>
 8000bd6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	019a      	lsls	r2, r3, #6
 8000bdc:	f53f aea0 	bmi.w	8000920 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000be0:	f7ff fcf6 	bl	80005d0 <HAL_GetTick>
 8000be4:	1b40      	subs	r0, r0, r5
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x2e8>
 8000bea:	e6c6      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fcf0 	bl	80005d0 <HAL_GetTick>
 8000bf0:	1b80      	subs	r0, r0, r6
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9d3      	bls.n	8000b9e <HAL_RCC_OscConfig+0x2ae>
 8000bf6:	e6c0      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fcea 	bl	80005d0 <HAL_GetTick>
 8000bfc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	f57f ae8d 	bpl.w	8000920 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fce3 	bl	80005d0 <HAL_GetTick>
 8000c0a:	1b00      	subs	r0, r0, r4
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f6      	bls.n	8000bfe <HAL_RCC_OscConfig+0x30e>
 8000c10:	e6b3      	b.n	800097a <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c12:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8000c14:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c16:	f43f aeb1 	beq.w	800097c <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c1e:	69e1      	ldr	r1, [r4, #28]
 8000c20:	428a      	cmp	r2, r1
 8000c22:	f47f ae69 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c2a:	6a21      	ldr	r1, [r4, #32]
 8000c2c:	428a      	cmp	r2, r1
 8000c2e:	f47f ae63 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c32:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c36:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c38:	401a      	ands	r2, r3
 8000c3a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000c3e:	f47f ae5b 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000c42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c44:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000c48:	0852      	lsrs	r2, r2, #1
 8000c4a:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c4c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000c50:	f47f ae52 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000c58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000c5a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000c5e:	f47f ae4b 	bne.w	80008f8 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000c62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c64:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c68:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8000c6c:	bf14      	ite	ne
 8000c6e:	2001      	movne	r0, #1
 8000c70:	2000      	moveq	r0, #0
 8000c72:	e683      	b.n	800097c <HAL_RCC_OscConfig+0x8c>
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c78:	4913      	ldr	r1, [pc, #76]	; (8000cc8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c7c:	688b      	ldr	r3, [r1, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d003      	beq.n	8000c8e <HAL_RCC_GetSysClockFreq+0x16>
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d003      	beq.n	8000c92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c8a:	4810      	ldr	r0, [pc, #64]	; (8000ccc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c92:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c96:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ca0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ca4:	bf1a      	itte	ne
 8000ca6:	480a      	ldrne	r0, [pc, #40]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ca8:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000caa:	4808      	ldreq	r0, [pc, #32]	; (8000ccc <HAL_RCC_GetSysClockFreq+0x54>)
 8000cac:	fba1 0100 	umull	r0, r1, r1, r0
 8000cb0:	f7ff faca 	bl	8000248 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8000cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc4:	bd08      	pop	{r3, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	00f42400 	.word	0x00f42400
 8000cd0:	007a1200 	.word	0x007a1200

08000cd4 <HAL_RCC_ClockConfig>:
{
 8000cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cd8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000cda:	4604      	mov	r4, r0
 8000cdc:	b910      	cbnz	r0, 8000ce4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
 8000ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ce4:	4a46      	ldr	r2, [pc, #280]	; (8000e00 <HAL_RCC_ClockConfig+0x12c>)
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d329      	bcc.n	8000d44 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf0:	6821      	ldr	r1, [r4, #0]
 8000cf2:	078f      	lsls	r7, r1, #30
 8000cf4:	d431      	bmi.n	8000d5a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cf6:	07c8      	lsls	r0, r1, #31
 8000cf8:	d444      	bmi.n	8000d84 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000cfa:	4a41      	ldr	r2, [pc, #260]	; (8000e00 <HAL_RCC_ClockConfig+0x12c>)
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	429d      	cmp	r5, r3
 8000d04:	d368      	bcc.n	8000dd8 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	0751      	lsls	r1, r2, #29
 8000d0a:	d471      	bmi.n	8000df0 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d0c:	0713      	lsls	r3, r2, #28
 8000d0e:	d507      	bpl.n	8000d20 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d10:	4a3c      	ldr	r2, [pc, #240]	; (8000e04 <HAL_RCC_ClockConfig+0x130>)
 8000d12:	6921      	ldr	r1, [r4, #16]
 8000d14:	6893      	ldr	r3, [r2, #8]
 8000d16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d20:	f7ff ffaa 	bl	8000c78 <HAL_RCC_GetSysClockFreq>
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <HAL_RCC_ClockConfig+0x130>)
 8000d26:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <HAL_RCC_ClockConfig+0x134>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	40d8      	lsrs	r0, r3
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <HAL_RCC_ClockConfig+0x138>)
 8000d34:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <HAL_RCC_ClockConfig+0x13c>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	f7ff fc0d 	bl	8000558 <HAL_InitTick>
  return HAL_OK;
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	f023 030f 	bic.w	r3, r3, #15
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4e:	6813      	ldr	r3, [r2, #0]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d1c2      	bne.n	8000cde <HAL_RCC_ClockConfig+0xa>
 8000d58:	e7ca      	b.n	8000cf0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5a:	f011 0f04 	tst.w	r1, #4
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <HAL_RCC_ClockConfig+0x130>)
 8000d60:	d003      	beq.n	8000d6a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000d68:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6a:	070e      	lsls	r6, r1, #28
 8000d6c:	d503      	bpl.n	8000d76 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000d74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	68a0      	ldr	r0, [r4, #8]
 8000d7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d7e:	4302      	orrs	r2, r0
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	e7b8      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d84:	6861      	ldr	r1, [r4, #4]
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_RCC_ClockConfig+0x130>)
 8000d88:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d8c:	d11c      	bne.n	8000dc8 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d92:	d0a4      	beq.n	8000cde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d94:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d96:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d9a:	4e1a      	ldr	r6, [pc, #104]	; (8000e04 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d9c:	f022 0203 	bic.w	r2, r2, #3
 8000da0:	430a      	orrs	r2, r1
 8000da2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000da4:	f7ff fc14 	bl	80005d0 <HAL_GetTick>
 8000da8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000daa:	68b3      	ldr	r3, [r6, #8]
 8000dac:	6862      	ldr	r2, [r4, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000db6:	d0a0      	beq.n	8000cfa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db8:	f7ff fc0a 	bl	80005d0 <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	4540      	cmp	r0, r8
 8000dc0:	d9f3      	bls.n	8000daa <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8000dc2:	2003      	movs	r0, #3
}
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dc8:	2902      	cmp	r1, #2
 8000dca:	d102      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dcc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000dd0:	e7df      	b.n	8000d92 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd2:	f012 0f02 	tst.w	r2, #2
 8000dd6:	e7dc      	b.n	8000d92 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dd8:	6813      	ldr	r3, [r2, #0]
 8000dda:	f023 030f 	bic.w	r3, r3, #15
 8000dde:	432b      	orrs	r3, r5
 8000de0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	429d      	cmp	r5, r3
 8000dea:	f47f af78 	bne.w	8000cde <HAL_RCC_ClockConfig+0xa>
 8000dee:	e78a      	b.n	8000d06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000df0:	4904      	ldr	r1, [pc, #16]	; (8000e04 <HAL_RCC_ClockConfig+0x130>)
 8000df2:	68e0      	ldr	r0, [r4, #12]
 8000df4:	688b      	ldr	r3, [r1, #8]
 8000df6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	608b      	str	r3, [r1, #8]
 8000dfe:	e785      	b.n	8000d0c <HAL_RCC_ClockConfig+0x38>
 8000e00:	40023c00 	.word	0x40023c00
 8000e04:	40023800 	.word	0x40023800
 8000e08:	080033c9 	.word	0x080033c9
 8000e0c:	20020008 	.word	0x20020008
 8000e10:	20020004 	.word	0x20020004

08000e14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e22:	6810      	ldr	r0, [r2, #0]
}
 8000e24:	40d8      	lsrs	r0, r3
 8000e26:	4770      	bx	lr
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	080033d9 	.word	0x080033d9
 8000e30:	20020008 	.word	0x20020008

08000e34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e42:	6810      	ldr	r0, [r2, #0]
}
 8000e44:	40d8      	lsrs	r0, r3
 8000e46:	4770      	bx	lr
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	080033d9 	.word	0x080033d9
 8000e50:	20020008 	.word	0x20020008

08000e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e58:	6802      	ldr	r2, [r0, #0]
{
 8000e5a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e5c:	f012 0601 	ands.w	r6, r2, #1
 8000e60:	d00b      	beq.n	8000e7a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e62:	4bba      	ldr	r3, [pc, #744]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e64:	6899      	ldr	r1, [r3, #8]
 8000e66:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000e6a:	6099      	str	r1, [r3, #8]
 8000e6c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000e6e:	6899      	ldr	r1, [r3, #8]
 8000e70:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000e72:	fab6 f686 	clz	r6, r6
 8000e76:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e78:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000e7a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8000e7e:	d012      	beq.n	8000ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e80:	49b2      	ldr	r1, [pc, #712]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e82:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000e84:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000e88:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8000e90:	bf08      	it	eq
 8000e92:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e94:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e98:	bf16      	itet	ne
 8000e9a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8000e9e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000ea0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000ea2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000ea6:	02d7      	lsls	r7, r2, #11
 8000ea8:	d510      	bpl.n	8000ecc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000eaa:	48a8      	ldr	r0, [pc, #672]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000eac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000eae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000eb2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000eb6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000eba:	ea43 0301 	orr.w	r3, r3, r1
 8000ebe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000ec2:	f000 81a9 	beq.w	8001218 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	bf08      	it	eq
 8000eca:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8000ecc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000ed0:	bf18      	it	ne
 8000ed2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ed4:	0690      	lsls	r0, r2, #26
 8000ed6:	d531      	bpl.n	8000f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	4b9c      	ldr	r3, [pc, #624]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000eda:	4f9d      	ldr	r7, [pc, #628]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ede:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ef6:	f7ff fb6b 	bl	80005d0 <HAL_GetTick>
 8000efa:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	05d9      	lsls	r1, r3, #23
 8000f00:	f140 818c 	bpl.w	800121c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f04:	4f91      	ldr	r7, [pc, #580]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f08:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000f0c:	f040 8191 	bne.w	8001232 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f12:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000f16:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000f1a:	4a8c      	ldr	r2, [pc, #560]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f1c:	f040 81af 	bne.w	800127e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8000f20:	6891      	ldr	r1, [r2, #8]
 8000f22:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000f26:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000f2a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	6091      	str	r1, [r2, #8]
 8000f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f36:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	06df      	lsls	r7, r3, #27
 8000f40:	d50c      	bpl.n	8000f5c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000f42:	4a82      	ldr	r2, [pc, #520]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f44:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000f48:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000f4c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8000f50:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000f54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f56:	4301      	orrs	r1, r0
 8000f58:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f5c:	0458      	lsls	r0, r3, #17
 8000f5e:	d508      	bpl.n	8000f72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f60:	497a      	ldr	r1, [pc, #488]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f62:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000f64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f68:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f6c:	4302      	orrs	r2, r0
 8000f6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000f72:	0419      	lsls	r1, r3, #16
 8000f74:	d508      	bpl.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000f76:	4975      	ldr	r1, [pc, #468]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f78:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000f7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f7e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000f82:	4302      	orrs	r2, r0
 8000f84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f88:	03da      	lsls	r2, r3, #15
 8000f8a:	d508      	bpl.n	8000f9e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f8c:	496f      	ldr	r1, [pc, #444]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000f90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f94:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8000f9e:	039f      	lsls	r7, r3, #14
 8000fa0:	d508      	bpl.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8000fa2:	496a      	ldr	r1, [pc, #424]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fa4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8000fa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000faa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000fae:	4302      	orrs	r2, r0
 8000fb0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000fb4:	0658      	lsls	r0, r3, #25
 8000fb6:	d508      	bpl.n	8000fca <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000fb8:	4964      	ldr	r1, [pc, #400]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000fbc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fc0:	f022 0203 	bic.w	r2, r2, #3
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000fca:	0619      	lsls	r1, r3, #24
 8000fcc:	d508      	bpl.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000fce:	495f      	ldr	r1, [pc, #380]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fd0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000fd2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fd6:	f022 020c 	bic.w	r2, r2, #12
 8000fda:	4302      	orrs	r2, r0
 8000fdc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000fe0:	05da      	lsls	r2, r3, #23
 8000fe2:	d508      	bpl.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000fe4:	4959      	ldr	r1, [pc, #356]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fe6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000fe8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000ff0:	4302      	orrs	r2, r0
 8000ff2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000ff6:	059f      	lsls	r7, r3, #22
 8000ff8:	d508      	bpl.n	800100c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000ffa:	4954      	ldr	r1, [pc, #336]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ffc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000ffe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001002:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001006:	4302      	orrs	r2, r0
 8001008:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800100c:	0558      	lsls	r0, r3, #21
 800100e:	d508      	bpl.n	8001022 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001010:	494e      	ldr	r1, [pc, #312]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001014:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001018:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800101c:	4302      	orrs	r2, r0
 800101e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001022:	0519      	lsls	r1, r3, #20
 8001024:	d508      	bpl.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001026:	4949      	ldr	r1, [pc, #292]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800102a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800102e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001032:	4302      	orrs	r2, r0
 8001034:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001038:	04da      	lsls	r2, r3, #19
 800103a:	d508      	bpl.n	800104e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800103c:	4943      	ldr	r1, [pc, #268]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800103e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001040:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001044:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001048:	4302      	orrs	r2, r0
 800104a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800104e:	049f      	lsls	r7, r3, #18
 8001050:	d508      	bpl.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001052:	493e      	ldr	r1, [pc, #248]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001054:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001056:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800105a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800105e:	4302      	orrs	r2, r0
 8001060:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001064:	0258      	lsls	r0, r3, #9
 8001066:	d508      	bpl.n	800107a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001068:	4938      	ldr	r1, [pc, #224]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800106a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800106c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001070:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001074:	4302      	orrs	r2, r0
 8001076:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800107a:	0299      	lsls	r1, r3, #10
 800107c:	d50c      	bpl.n	8001098 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800107e:	4833      	ldr	r0, [pc, #204]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001080:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001082:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001086:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800108a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800108e:	bf08      	it	eq
 8001090:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001092:	430a      	orrs	r2, r1
 8001094:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001098:	f013 0f08 	tst.w	r3, #8
 800109c:	bf18      	it	ne
 800109e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80010a0:	035a      	lsls	r2, r3, #13
 80010a2:	d508      	bpl.n	80010b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80010a4:	4929      	ldr	r1, [pc, #164]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80010a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010b0:	4302      	orrs	r2, r0
 80010b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80010b6:	021f      	lsls	r7, r3, #8
 80010b8:	d509      	bpl.n	80010ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80010ba:	4924      	ldr	r1, [pc, #144]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010bc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80010c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80010c8:	4302      	orrs	r2, r0
 80010ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80010ce:	0158      	lsls	r0, r3, #5
 80010d0:	d509      	bpl.n	80010e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80010d2:	491e      	ldr	r1, [pc, #120]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80010d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010e0:	4302      	orrs	r2, r0
 80010e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80010e6:	0119      	lsls	r1, r3, #4
 80010e8:	d509      	bpl.n	80010fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80010ea:	4918      	ldr	r1, [pc, #96]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80010f0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80010f4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80010f8:	4302      	orrs	r2, r0
 80010fa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80010fe:	00da      	lsls	r2, r3, #3
 8001100:	d509      	bpl.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001102:	4912      	ldr	r1, [pc, #72]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001104:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001108:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800110c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001110:	4302      	orrs	r2, r0
 8001112:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001116:	2e01      	cmp	r6, #1
 8001118:	f000 80b5 	beq.w	8001286 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800111c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001120:	f000 80b1 	beq.w	8001286 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001124:	2d01      	cmp	r5, #1
 8001126:	d175      	bne.n	8001214 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001128:	4d08      	ldr	r5, [pc, #32]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800112a:	682b      	ldr	r3, [r5, #0]
 800112c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001130:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001132:	f7ff fa4d 	bl	80005d0 <HAL_GetTick>
 8001136:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	009f      	lsls	r7, r3, #2
 800113c:	f100 8127 	bmi.w	800138e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001140:	6821      	ldr	r1, [r4, #0]
 8001142:	030e      	lsls	r6, r1, #12
 8001144:	d506      	bpl.n	8001154 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001148:	b143      	cbz	r3, 800115c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800114a:	e003      	b.n	8001154 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000
 8001154:	02cd      	lsls	r5, r1, #11
 8001156:	d51d      	bpl.n	8001194 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115a:	b9db      	cbnz	r3, 8001194 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800115c:	4a93      	ldr	r2, [pc, #588]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800115e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001162:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800116e:	4303      	orrs	r3, r0
 8001170:	6960      	ldr	r0, [r4, #20]
 8001172:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001176:	69a0      	ldr	r0, [r4, #24]
 8001178:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001180:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001184:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001186:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800118a:	3801      	subs	r0, #1
 800118c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001190:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001194:	0288      	lsls	r0, r1, #10
 8001196:	d515      	bpl.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001198:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800119a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800119e:	d111      	bne.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80011a0:	4a82      	ldr	r2, [pc, #520]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80011a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80011a6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80011aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80011ae:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80011b2:	4303      	orrs	r3, r0
 80011b4:	6960      	ldr	r0, [r4, #20]
 80011b6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80011ba:	6a20      	ldr	r0, [r4, #32]
 80011bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80011c4:	070a      	lsls	r2, r1, #28
 80011c6:	d519      	bpl.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80011c8:	4978      	ldr	r1, [pc, #480]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80011ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80011ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80011d2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80011d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011da:	4313      	orrs	r3, r2
 80011dc:	6962      	ldr	r2, [r4, #20]
 80011de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011e2:	69e2      	ldr	r2, [r4, #28]
 80011e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80011e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80011ec:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80011f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011f6:	4313      	orrs	r3, r2
 80011f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80011fc:	4c6b      	ldr	r4, [pc, #428]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001206:	f7ff f9e3 	bl	80005d0 <HAL_GetTick>
 800120a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f140 80c4 	bpl.w	800139c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001214:	2000      	movs	r0, #0
 8001216:	e009      	b.n	800122c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001218:	2601      	movs	r6, #1
 800121a:	e657      	b.n	8000ecc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121c:	f7ff f9d8 	bl	80005d0 <HAL_GetTick>
 8001220:	eba0 0008 	sub.w	r0, r0, r8
 8001224:	2864      	cmp	r0, #100	; 0x64
 8001226:	f67f ae69 	bls.w	8000efc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800122a:	2003      	movs	r0, #3
}
 800122c:	b003      	add	sp, #12
 800122e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001232:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001234:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001238:	4293      	cmp	r3, r2
 800123a:	f43f ae69 	beq.w	8000f10 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800123e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001240:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001246:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800124a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800124c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800124e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001252:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001254:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001258:	07da      	lsls	r2, r3, #31
 800125a:	f57f ae59 	bpl.w	8000f10 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800125e:	f7ff f9b7 	bl	80005d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001266:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800126a:	079b      	lsls	r3, r3, #30
 800126c:	f53f ae50 	bmi.w	8000f10 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff f9ae 	bl	80005d0 <HAL_GetTick>
 8001274:	eba0 0008 	sub.w	r0, r0, r8
 8001278:	4548      	cmp	r0, r9
 800127a:	d9f5      	bls.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800127c:	e7d5      	b.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800127e:	6891      	ldr	r1, [r2, #8]
 8001280:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001284:	e654      	b.n	8000f30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001286:	4e49      	ldr	r6, [pc, #292]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001288:	6833      	ldr	r3, [r6, #0]
 800128a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800128e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001290:	f7ff f99e 	bl	80005d0 <HAL_GetTick>
 8001294:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001296:	6833      	ldr	r3, [r6, #0]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	d472      	bmi.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	07d7      	lsls	r7, r2, #31
 80012a0:	d512      	bpl.n	80012c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80012a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a4:	b983      	cbnz	r3, 80012c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80012a6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80012aa:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80012ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80012b6:	430b      	orrs	r3, r1
 80012b8:	6861      	ldr	r1, [r4, #4]
 80012ba:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80012be:	68a1      	ldr	r1, [r4, #8]
 80012c0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80012c4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80012c8:	0316      	lsls	r6, r2, #12
 80012ca:	d503      	bpl.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80012cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012d2:	d005      	beq.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80012d4:	02d0      	lsls	r0, r2, #11
 80012d6:	d51e      	bpl.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80012d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012de:	d11a      	bne.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80012e0:	4932      	ldr	r1, [pc, #200]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012e2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012e6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80012ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ee:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80012f2:	4303      	orrs	r3, r0
 80012f4:	6860      	ldr	r0, [r4, #4]
 80012f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80012fa:	68e0      	ldr	r0, [r4, #12]
 80012fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001304:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800130a:	f020 001f 	bic.w	r0, r0, #31
 800130e:	3b01      	subs	r3, #1
 8001310:	4303      	orrs	r3, r0
 8001312:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001316:	01d1      	lsls	r1, r2, #7
 8001318:	d511      	bpl.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800131a:	4924      	ldr	r1, [pc, #144]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800131c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001320:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001324:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001328:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800132c:	4303      	orrs	r3, r0
 800132e:	6860      	ldr	r0, [r4, #4]
 8001330:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001334:	6920      	ldr	r0, [r4, #16]
 8001336:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800133a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800133e:	0192      	lsls	r2, r2, #6
 8001340:	d50d      	bpl.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001342:	6923      	ldr	r3, [r4, #16]
 8001344:	6862      	ldr	r2, [r4, #4]
 8001346:	041b      	lsls	r3, r3, #16
 8001348:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800134c:	68e2      	ldr	r2, [r4, #12]
 800134e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001352:	68a2      	ldr	r2, [r4, #8]
 8001354:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800135a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800135e:	4e13      	ldr	r6, [pc, #76]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001360:	6833      	ldr	r3, [r6, #0]
 8001362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001366:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001368:	f7ff f932 	bl	80005d0 <HAL_GetTick>
 800136c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800136e:	6833      	ldr	r3, [r6, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	f53f aed7 	bmi.w	8001124 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001376:	f7ff f92b 	bl	80005d0 <HAL_GetTick>
 800137a:	1bc0      	subs	r0, r0, r7
 800137c:	2864      	cmp	r0, #100	; 0x64
 800137e:	d9f6      	bls.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001380:	e753      	b.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001382:	f7ff f925 	bl	80005d0 <HAL_GetTick>
 8001386:	1bc0      	subs	r0, r0, r7
 8001388:	2864      	cmp	r0, #100	; 0x64
 800138a:	d984      	bls.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800138c:	e74d      	b.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800138e:	f7ff f91f 	bl	80005d0 <HAL_GetTick>
 8001392:	1b80      	subs	r0, r0, r6
 8001394:	2864      	cmp	r0, #100	; 0x64
 8001396:	f67f aecf 	bls.w	8001138 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800139a:	e746      	b.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800139c:	f7ff f918 	bl	80005d0 <HAL_GetTick>
 80013a0:	1b40      	subs	r0, r0, r5
 80013a2:	2864      	cmp	r0, #100	; 0x64
 80013a4:	f67f af32 	bls.w	800120c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80013a8:	e73f      	b.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80013b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013ba:	6842      	ldr	r2, [r0, #4]
 80013bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80013c0:	d10a      	bne.n	80013d8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80013c2:	6882      	ldr	r2, [r0, #8]
 80013c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80013c8:	d002      	beq.n	80013d0 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80013ce:	d103      	bne.n	80013d8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80013de:	d107      	bne.n	80013f0 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80013f6:	2300      	movs	r3, #0
 80013f8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80013fc:	2003      	movs	r0, #3
 80013fe:	4770      	bx	lr

08001400 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	4604      	mov	r4, r0
 8001404:	460d      	mov	r5, r1
 8001406:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	6898      	ldr	r0, [r3, #8]
 800140c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001410:	d100      	bne.n	8001414 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8001412:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001414:	1c6a      	adds	r2, r5, #1
 8001416:	d0f8      	beq.n	800140a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001418:	f7ff f8da 	bl	80005d0 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	4285      	cmp	r5, r0
 8001420:	d8f2      	bhi.n	8001408 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001422:	4620      	mov	r0, r4
}
 8001424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001428:	f7ff bfc2 	b.w	80013b0 <SPI_WaitFifoStateUntilTimeout.part.1>

0800142c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	4605      	mov	r5, r0
 8001430:	460c      	mov	r4, r1
 8001432:	4616      	mov	r6, r2
 8001434:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001436:	6829      	ldr	r1, [r5, #0]
 8001438:	6888      	ldr	r0, [r1, #8]
 800143a:	4020      	ands	r0, r4
 800143c:	d100      	bne.n	8001440 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 800143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001440:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8001444:	d100      	bne.n	8001448 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001446:	7b0b      	ldrb	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001448:	1c73      	adds	r3, r6, #1
 800144a:	d0f5      	beq.n	8001438 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800144c:	f7ff f8c0 	bl	80005d0 <HAL_GetTick>
 8001450:	1bc0      	subs	r0, r0, r7
 8001452:	4286      	cmp	r6, r0
 8001454:	d8ef      	bhi.n	8001436 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001456:	4628      	mov	r0, r5
}
 8001458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800145c:	f7ff bfa8 	b.w	80013b0 <SPI_WaitFifoStateUntilTimeout.part.1>

08001460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001460:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001462:	4613      	mov	r3, r2
{
 8001464:	460d      	mov	r5, r1
 8001466:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001468:	460a      	mov	r2, r1
 800146a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800146e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001470:	f7ff ffdc 	bl	800142c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001474:	b128      	cbz	r0, 8001482 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001476:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001478:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800147a:	f043 0320 	orr.w	r3, r3, #32
 800147e:	6623      	str	r3, [r4, #96]	; 0x60
 8001480:	e00f      	b.n	80014a2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001482:	4632      	mov	r2, r6
 8001484:	4629      	mov	r1, r5
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffba 	bl	8001400 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1f2      	bne.n	8001476 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001490:	4633      	mov	r3, r6
 8001492:	462a      	mov	r2, r5
 8001494:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff ffc7 	bl	800142c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800149e:	2800      	cmp	r0, #0
 80014a0:	d1e9      	bne.n	8001476 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80014a2:	bd70      	pop	{r4, r5, r6, pc}

080014a4 <HAL_SPI_Init>:
{
 80014a4:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80014a6:	4604      	mov	r4, r0
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d04e      	beq.n	800154a <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80014b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80014b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014b8:	b91b      	cbnz	r3, 80014c2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80014ba:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80014be:	f001 fdfb 	bl	80030b8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80014c2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80014c4:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014c6:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80014c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80014cc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ce:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80014d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014dc:	d932      	bls.n	8001544 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80014de:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80014e0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e4:	bf18      	it	ne
 80014e6:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80014e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ea:	b92b      	cbnz	r3, 80014f8 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ec:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80014f0:	bf8c      	ite	hi
 80014f2:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80014f4:	2301      	movls	r3, #1
 80014f6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80014f8:	68a6      	ldr	r6, [r4, #8]
 80014fa:	6863      	ldr	r3, [r4, #4]
 80014fc:	69a5      	ldr	r5, [r4, #24]
 80014fe:	4333      	orrs	r3, r6
 8001500:	6926      	ldr	r6, [r4, #16]
 8001502:	4333      	orrs	r3, r6
 8001504:	6966      	ldr	r6, [r4, #20]
 8001506:	4333      	orrs	r3, r6
 8001508:	69e6      	ldr	r6, [r4, #28]
 800150a:	4333      	orrs	r3, r6
 800150c:	6a26      	ldr	r6, [r4, #32]
 800150e:	4333      	orrs	r3, r6
 8001510:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001512:	4333      	orrs	r3, r6
 8001514:	f405 7600 	and.w	r6, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001518:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800151a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800151c:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001520:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001524:	431a      	orrs	r2, r3
 8001526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001528:	431a      	orrs	r2, r3
 800152a:	432a      	orrs	r2, r5
 800152c:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800152e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001530:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001532:	69cb      	ldr	r3, [r1, #28]
 8001534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001538:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800153a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800153c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800153e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001542:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001544:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001548:	e7cc      	b.n	80014e4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	bd70      	pop	{r4, r5, r6, pc}

0800154e <HAL_SPI_TransmitReceive>:
{
 800154e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001552:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001554:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8001558:	4604      	mov	r4, r0
 800155a:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 800155c:	2b01      	cmp	r3, #1
{
 800155e:	4691      	mov	r9, r2
 8001560:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8001562:	f000 8115 	beq.w	8001790 <HAL_SPI_TransmitReceive+0x242>
 8001566:	2301      	movs	r3, #1
 8001568:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800156c:	f7ff f830 	bl	80005d0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001570:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8001574:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8001576:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001578:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800157a:	2b01      	cmp	r3, #1
 800157c:	d00a      	beq.n	8001594 <HAL_SPI_TransmitReceive+0x46>
 800157e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001582:	f040 8103 	bne.w	800178c <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001586:	68a0      	ldr	r0, [r4, #8]
 8001588:	2800      	cmp	r0, #0
 800158a:	f040 80ff 	bne.w	800178c <HAL_SPI_TransmitReceive+0x23e>
 800158e:	2b04      	cmp	r3, #4
 8001590:	f040 80fc 	bne.w	800178c <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001594:	2d00      	cmp	r5, #0
 8001596:	d049      	beq.n	800162c <HAL_SPI_TransmitReceive+0xde>
 8001598:	f1b9 0f00 	cmp.w	r9, #0
 800159c:	d046      	beq.n	800162c <HAL_SPI_TransmitReceive+0xde>
 800159e:	2e00      	cmp	r6, #0
 80015a0:	d044      	beq.n	800162c <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80015a2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d002      	beq.n	80015b0 <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80015aa:	2305      	movs	r3, #5
 80015ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80015b0:	68e2      	ldr	r2, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	6820      	ldr	r0, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80015b6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015ba:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80015bc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80015be:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80015c2:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferCount = Size;
 80015c4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80015c6:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80015ca:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80015ce:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80015d0:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015d2:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80015d4:	d801      	bhi.n	80015da <HAL_SPI_TransmitReceive+0x8c>
 80015d6:	2e01      	cmp	r6, #1
 80015d8:	d92a      	bls.n	8001630 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015de:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015e0:	6803      	ldr	r3, [r0, #0]
 80015e2:	065b      	lsls	r3, r3, #25
 80015e4:	d403      	bmi.n	80015ee <HAL_SPI_TransmitReceive+0xa0>
    __HAL_SPI_ENABLE(hspi);
 80015e6:	6803      	ldr	r3, [r0, #0]
 80015e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ec:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80015ee:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80015f2:	d956      	bls.n	80016a2 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015f4:	b109      	cbz	r1, 80015fa <HAL_SPI_TransmitReceive+0xac>
 80015f6:	2e01      	cmp	r6, #1
 80015f8:	d107      	bne.n	800160a <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015fa:	f835 3b02 	ldrh.w	r3, [r5], #2
 80015fe:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8001600:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001602:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001604:	3b01      	subs	r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800160a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800160c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800160e:	b29b      	uxth	r3, r3
 8001610:	b98b      	cbnz	r3, 8001636 <HAL_SPI_TransmitReceive+0xe8>
 8001612:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001616:	b29b      	uxth	r3, r3
 8001618:	b96b      	cbnz	r3, 8001636 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800161a:	4642      	mov	r2, r8
 800161c:	4639      	mov	r1, r7
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff ff1e 	bl	8001460 <SPI_EndRxTxTransaction>
 8001624:	2800      	cmp	r0, #0
 8001626:	d034      	beq.n	8001692 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001628:	2320      	movs	r3, #32
 800162a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800162c:	2001      	movs	r0, #1
 800162e:	e030      	b.n	8001692 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001634:	e7d3      	b.n	80015de <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001636:	6822      	ldr	r2, [r4, #0]
 8001638:	6893      	ldr	r3, [r2, #8]
 800163a:	0799      	lsls	r1, r3, #30
 800163c:	d50d      	bpl.n	800165a <HAL_SPI_TransmitReceive+0x10c>
 800163e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001640:	b29b      	uxth	r3, r3
 8001642:	b153      	cbz	r3, 800165a <HAL_SPI_TransmitReceive+0x10c>
 8001644:	b14d      	cbz	r5, 800165a <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 8001648:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800164a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800164e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001650:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001652:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001654:	3b01      	subs	r3, #1
 8001656:	b29b      	uxth	r3, r3
 8001658:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800165a:	6893      	ldr	r3, [r2, #8]
 800165c:	07db      	lsls	r3, r3, #31
 800165e:	d50f      	bpl.n	8001680 <HAL_SPI_TransmitReceive+0x132>
 8001660:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001664:	b29b      	uxth	r3, r3
 8001666:	b15b      	cbz	r3, 8001680 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001668:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 800166a:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800166c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800166e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001672:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001674:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001678:	3b01      	subs	r3, #1
 800167a:	b29b      	uxth	r3, r3
 800167c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001680:	f7fe ffa6 	bl	80005d0 <HAL_GetTick>
 8001684:	eba0 0008 	sub.w	r0, r0, r8
 8001688:	4287      	cmp	r7, r0
 800168a:	d8bf      	bhi.n	800160c <HAL_SPI_TransmitReceive+0xbe>
 800168c:	1c7e      	adds	r6, r7, #1
 800168e:	d0bd      	beq.n	800160c <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001692:	2301      	movs	r3, #1
 8001694:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001698:	2300      	movs	r3, #0
 800169a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800169e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016a2:	b109      	cbz	r1, 80016a8 <HAL_SPI_TransmitReceive+0x15a>
 80016a4:	2e01      	cmp	r6, #1
 80016a6:	d10b      	bne.n	80016c0 <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 80016a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d951      	bls.n	8001754 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80016b4:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 80016b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016b8:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80016ba:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80016bc:	b29b      	uxth	r3, r3
 80016be:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80016c0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b923      	cbnz	r3, 80016d2 <HAL_SPI_TransmitReceive+0x184>
 80016c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0a3      	beq.n	800161a <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	6893      	ldr	r3, [r2, #8]
 80016d6:	0798      	lsls	r0, r3, #30
 80016d8:	d511      	bpl.n	80016fe <HAL_SPI_TransmitReceive+0x1b0>
 80016da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b173      	cbz	r3, 80016fe <HAL_SPI_TransmitReceive+0x1b0>
 80016e0:	b16d      	cbz	r5, 80016fe <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80016e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ea:	d93b      	bls.n	8001764 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016ec:	f833 1b02 	ldrh.w	r1, [r3], #2
 80016f0:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80016f2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80016f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016f6:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80016f8:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80016fa:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 80016fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	6893      	ldr	r3, [r2, #8]
 8001702:	07d9      	lsls	r1, r3, #31
 8001704:	d51d      	bpl.n	8001742 <HAL_SPI_TransmitReceive+0x1f4>
 8001706:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800170a:	b29b      	uxth	r3, r3
 800170c:	b1cb      	cbz	r3, 8001742 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800170e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001712:	b29b      	uxth	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001718:	d92c      	bls.n	8001774 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800171a:	68d1      	ldr	r1, [r2, #12]
 800171c:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001720:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8001722:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001726:	3b02      	subs	r3, #2
 8001728:	b29b      	uxth	r3, r3
 800172a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800172e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d803      	bhi.n	8001740 <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001738:	6853      	ldr	r3, [r2, #4]
 800173a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800173e:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8001740:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001742:	f7fe ff45 	bl	80005d0 <HAL_GetTick>
 8001746:	eba0 0008 	sub.w	r0, r0, r8
 800174a:	4287      	cmp	r7, r0
 800174c:	d8b9      	bhi.n	80016c2 <HAL_SPI_TransmitReceive+0x174>
 800174e:	1c7b      	adds	r3, r7, #1
 8001750:	d0b7      	beq.n	80016c2 <HAL_SPI_TransmitReceive+0x174>
 8001752:	e79d      	b.n	8001690 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001754:	782b      	ldrb	r3, [r5, #0]
 8001756:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8001758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800175a:	3301      	adds	r3, #1
 800175c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800175e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001760:	3b01      	subs	r3, #1
 8001762:	e7ab      	b.n	80016bc <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800176a:	3301      	adds	r3, #1
 800176c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800176e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001770:	3b01      	subs	r3, #1
 8001772:	e7c1      	b.n	80016f8 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001774:	7b12      	ldrb	r2, [r2, #12]
 8001776:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8001778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800177a:	3301      	adds	r3, #1
 800177c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800177e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001782:	3b01      	subs	r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800178a:	e7d9      	b.n	8001740 <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 800178c:	2002      	movs	r0, #2
 800178e:	e780      	b.n	8001692 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8001790:	2002      	movs	r0, #2
}
 8001792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001796 <HAL_TIM_IC_MspInit>:
 8001796:	4770      	bx	lr

08001798 <HAL_TIM_PeriodElapsedCallback>:
 8001798:	4770      	bx	lr

0800179a <HAL_TIM_OC_DelayElapsedCallback>:
 800179a:	4770      	bx	lr

0800179c <HAL_TIM_IC_CaptureCallback>:
 800179c:	4770      	bx	lr

0800179e <HAL_TIM_PWM_PulseFinishedCallback>:
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_TriggerCallback>:
 80017a0:	4770      	bx	lr

080017a2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	0791      	lsls	r1, r2, #30
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ac:	d50f      	bpl.n	80017ce <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	0792      	lsls	r2, r2, #30
 80017b2:	d50c      	bpl.n	80017ce <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017b4:	f06f 0202 	mvn.w	r2, #2
 80017b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ba:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017bc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017be:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017c0:	0799      	lsls	r1, r3, #30
 80017c2:	f000 8085 	beq.w	80018d0 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	f7ff ffe9 	bl	800179c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	2300      	movs	r3, #0
 80017cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	0752      	lsls	r2, r2, #29
 80017d4:	d510      	bpl.n	80017f8 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	0750      	lsls	r0, r2, #29
 80017da:	d50d      	bpl.n	80017f8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017dc:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017e4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ea:	f413 7f40 	tst.w	r3, #768	; 0x300
 80017ee:	d075      	beq.n	80018dc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80017f0:	f7ff ffd4 	bl	800179c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f4:	2300      	movs	r3, #0
 80017f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	0711      	lsls	r1, r2, #28
 80017fe:	d50f      	bpl.n	8001820 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	0712      	lsls	r2, r2, #28
 8001804:	d50c      	bpl.n	8001820 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001806:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001810:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001812:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	079b      	lsls	r3, r3, #30
 8001816:	d067      	beq.n	80018e8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001818:	f7ff ffc0 	bl	800179c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181c:	2300      	movs	r3, #0
 800181e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	06d0      	lsls	r0, r2, #27
 8001826:	d510      	bpl.n	800184a <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	06d1      	lsls	r1, r2, #27
 800182c:	d50d      	bpl.n	800184a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800182e:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001836:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001838:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800183a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800183c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001840:	d058      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001842:	f7ff ffab 	bl	800179c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	2300      	movs	r3, #0
 8001848:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	07d2      	lsls	r2, r2, #31
 8001850:	d508      	bpl.n	8001864 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	07d0      	lsls	r0, r2, #31
 8001856:	d505      	bpl.n	8001864 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001858:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800185c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800185e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001860:	f7ff ff9a 	bl	8001798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	0611      	lsls	r1, r2, #24
 800186a:	d508      	bpl.n	800187e <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	0612      	lsls	r2, r2, #24
 8001870:	d505      	bpl.n	800187e <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001872:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001876:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001878:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800187a:	f000 fa8c 	bl	8001d96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	05d0      	lsls	r0, r2, #23
 8001884:	d508      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	0611      	lsls	r1, r2, #24
 800188a:	d505      	bpl.n	8001898 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800188c:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001890:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001892:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001894:	f000 fa80 	bl	8001d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	0652      	lsls	r2, r2, #25
 800189e:	d508      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	0650      	lsls	r0, r2, #25
 80018a4:	d505      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018ae:	f7ff ff77 	bl	80017a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	0691      	lsls	r1, r2, #26
 80018b8:	d522      	bpl.n	8001900 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	0692      	lsls	r2, r2, #26
 80018be:	d51f      	bpl.n	8001900 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c0:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c6:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80018cc:	f000 ba62 	b.w	8001d94 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d0:	f7ff ff63 	bl	800179a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ff62 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018da:	e776      	b.n	80017ca <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018dc:	f7ff ff5d 	bl	800179a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff5c 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018e6:	e785      	b.n	80017f4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e8:	f7ff ff57 	bl	800179a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ff56 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018f2:	e793      	b.n	800181c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f4:	f7ff ff51 	bl	800179a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ff50 	bl	800179e <HAL_TIM_PWM_PulseFinishedCallback>
 80018fe:	e7a2      	b.n	8001846 <HAL_TIM_IRQHandler+0xa4>
 8001900:	bd10      	pop	{r4, pc}
	...

08001904 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001906:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001908:	4290      	cmp	r0, r2
 800190a:	d012      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800190c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001910:	d00f      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 8001912:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001916:	4290      	cmp	r0, r2
 8001918:	d00b      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800191a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191e:	4290      	cmp	r0, r2
 8001920:	d007      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 8001922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001926:	4290      	cmp	r0, r2
 8001928:	d003      	beq.n	8001932 <TIM_Base_SetConfig+0x2e>
 800192a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800192e:	4290      	cmp	r0, r2
 8001930:	d119      	bne.n	8001966 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001932:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001938:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <TIM_Base_SetConfig+0xc4>)
 800193c:	4290      	cmp	r0, r2
 800193e:	d029      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 8001940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001944:	d026      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 8001946:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800194a:	4290      	cmp	r0, r2
 800194c:	d022      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 800194e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001952:	4290      	cmp	r0, r2
 8001954:	d01e      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 8001956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195a:	4290      	cmp	r0, r2
 800195c:	d01a      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 800195e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001962:	4290      	cmp	r0, r2
 8001964:	d016      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 8001966:	4a19      	ldr	r2, [pc, #100]	; (80019cc <TIM_Base_SetConfig+0xc8>)
 8001968:	4290      	cmp	r0, r2
 800196a:	d013      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 800196c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001970:	4290      	cmp	r0, r2
 8001972:	d00f      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 8001974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001978:	4290      	cmp	r0, r2
 800197a:	d00b      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 800197c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001980:	4290      	cmp	r0, r2
 8001982:	d007      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 8001984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001988:	4290      	cmp	r0, r2
 800198a:	d003      	beq.n	8001994 <TIM_Base_SetConfig+0x90>
 800198c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001990:	4290      	cmp	r0, r2
 8001992:	d103      	bne.n	800199c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001998:	68ca      	ldr	r2, [r1, #12]
 800199a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800199c:	694a      	ldr	r2, [r1, #20]
 800199e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019a4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019a6:	688b      	ldr	r3, [r1, #8]
 80019a8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019aa:	680b      	ldr	r3, [r1, #0]
 80019ac:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <TIM_Base_SetConfig+0xc4>)
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d003      	beq.n	80019bc <TIM_Base_SetConfig+0xb8>
 80019b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d101      	bne.n	80019c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019bc:	690b      	ldr	r3, [r1, #16]
 80019be:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019c0:	2301      	movs	r3, #1
 80019c2:	6143      	str	r3, [r0, #20]
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40014000 	.word	0x40014000

080019d0 <HAL_TIM_Base_Init>:
{
 80019d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019d2:	4604      	mov	r4, r0
 80019d4:	b1a0      	cbz	r0, 8001a00 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019de:	b91b      	cbnz	r3, 80019e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019e4:	f001 fbb2 	bl	800314c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ea:	6820      	ldr	r0, [r4, #0]
 80019ec:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80019ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f2:	f7ff ff87 	bl	8001904 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019f6:	2301      	movs	r3, #1
  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
}
 8001a02:	bd10      	pop	{r4, pc}

08001a04 <HAL_TIM_IC_Init>:
{
 8001a04:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a06:	4604      	mov	r4, r0
 8001a08:	b1a0      	cbz	r0, 8001a34 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a12:	b91b      	cbnz	r3, 8001a1c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001a18:	f7ff febd 	bl	8001796 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001a22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a26:	f7ff ff6d 	bl	8001904 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a2a:	2301      	movs	r3, #1
  return HAL_OK;
 8001a2c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
}
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a3a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a3c:	4e1a      	ldr	r6, [pc, #104]	; (8001aa8 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a3e:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a42:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a44:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a46:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001a48:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a4a:	d01a      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a50:	d017      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a52:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001a56:	42b0      	cmp	r0, r6
 8001a58:	d013      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a5e:	42b0      	cmp	r0, r6
 8001a60:	d00f      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a66:	42b0      	cmp	r0, r6
 8001a68:	d00b      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a6a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001a6e:	42b0      	cmp	r0, r6
 8001a70:	d007      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a72:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001a76:	42b0      	cmp	r0, r6
 8001a78:	d003      	beq.n	8001a82 <TIM_TI1_SetConfig+0x4a>
 8001a7a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001a7e:	42b0      	cmp	r0, r6
 8001a80:	d10f      	bne.n	8001aa2 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001a82:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001a86:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a88:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a8e:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001a92:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a96:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001a98:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a9a:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a9c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a9e:	6201      	str	r1, [r0, #32]
}
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001aa2:	f044 0201 	orr.w	r2, r4, #1
 8001aa6:	e7ef      	b.n	8001a88 <TIM_TI1_SetConfig+0x50>
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_TIM_IC_ConfigChannel>:
{
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001aae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	460d      	mov	r5, r1
 8001ab6:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d019      	beq.n	8001af0 <HAL_TIM_IC_ConfigChannel+0x44>
 8001abc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001abe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001ac2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8001ac6:	b9a2      	cbnz	r2, 8001af2 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI1_SetConfig(htim->Instance,
 8001ac8:	68cb      	ldr	r3, [r1, #12]
 8001aca:	6820      	ldr	r0, [r4, #0]
 8001acc:	c906      	ldmia	r1, {r1, r2}
 8001ace:	f7ff ffb3 	bl	8001a38 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ad2:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ad4:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	f022 020c 	bic.w	r2, r2, #12
 8001adc:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001ae4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001ae6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ae8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001aec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001af2:	2a04      	cmp	r2, #4
 8001af4:	688e      	ldr	r6, [r1, #8]
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	68e8      	ldr	r0, [r5, #12]
 8001afa:	c982      	ldmia	r1, {r1, r7}
 8001afc:	d11f      	bne.n	8001b3e <HAL_TIM_IC_ConfigChannel+0x92>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001afe:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b00:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b02:	0109      	lsls	r1, r1, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b04:	f022 0210 	bic.w	r2, r2, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b08:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b0a:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b10:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001b12:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001b14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001b18:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b1c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b20:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b22:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b26:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b2a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b32:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001b3a:	619e      	str	r6, [r3, #24]
 8001b3c:	e7d2      	b.n	8001ae4 <HAL_TIM_IC_ConfigChannel+0x38>
  else if (Channel == TIM_CHANNEL_3)
 8001b3e:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b40:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001b42:	d11c      	bne.n	8001b7e <HAL_TIM_IC_ConfigChannel+0xd2>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b48:	0100      	lsls	r0, r0, #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b4a:	0209      	lsls	r1, r1, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b4e:	b2c0      	uxtb	r0, r0
  tmpccmr2 = TIMx->CCMR2;
 8001b50:	69da      	ldr	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b52:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer = TIMx->CCER;
 8001b56:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001b58:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001b5c:	433a      	orrs	r2, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001b5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b62:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001b64:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b68:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001b6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001b6c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001b6e:	69da      	ldr	r2, [r3, #28]
 8001b70:	f022 020c 	bic.w	r2, r2, #12
 8001b74:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b7a:	61de      	str	r6, [r3, #28]
 8001b7c:	e7b2      	b.n	8001ae4 <HAL_TIM_IC_ConfigChannel+0x38>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b82:	0300      	lsls	r0, r0, #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001b84:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b86:	621a      	str	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b88:	b280      	uxth	r0, r0
  tmpccmr2 = TIMx->CCMR2;
 8001b8a:	69da      	ldr	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001b8c:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer = TIMx->CCER;
 8001b90:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001b92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001b96:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001b9a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b9e:	4310      	orrs	r0, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001ba0:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ba4:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ba6:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001ba8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001bb0:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001bb8:	e7df      	b.n	8001b7a <HAL_TIM_IC_ConfigChannel+0xce>

08001bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001bba:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bbc:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8001bbe:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bc0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bc4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bc8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bca:	6083      	str	r3, [r0, #8]
 8001bcc:	bd10      	pop	{r4, pc}
	...

08001bd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001bd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bd4:	2b01      	cmp	r3, #1
{
 8001bd6:	b570      	push	{r4, r5, r6, lr}
 8001bd8:	4604      	mov	r4, r0
 8001bda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001bde:	d017      	beq.n	8001c10 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8001be0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001be4:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001be6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001be8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001bec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_TIM_ConfigClockSource+0x124>)
 8001bf0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001bf2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001bf4:	680b      	ldr	r3, [r1, #0]
 8001bf6:	2b40      	cmp	r3, #64	; 0x40
 8001bf8:	d065      	beq.n	8001cc6 <HAL_TIM_ConfigClockSource+0xf6>
 8001bfa:	d815      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x58>
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d00c      	beq.n	8001c1a <HAL_TIM_ConfigClockSource+0x4a>
 8001c00:	d807      	bhi.n	8001c12 <HAL_TIM_ConfigClockSource+0x42>
 8001c02:	b153      	cbz	r3, 8001c1a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d001      	beq.n	8001c1a <HAL_TIM_ConfigClockSource+0x4a>
 8001c16:	2b30      	cmp	r3, #48	; 0x30
 8001c18:	d1f4      	bne.n	8001c04 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8001c1a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c1c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c24:	4313      	orrs	r3, r2
 8001c26:	e01a      	b.n	8001c5e <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001c28:	2b60      	cmp	r3, #96	; 0x60
 8001c2a:	d034      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0xc6>
 8001c2c:	d819      	bhi.n	8001c62 <HAL_TIM_ConfigClockSource+0x92>
 8001c2e:	2b50      	cmp	r3, #80	; 0x50
 8001c30:	d1e8      	bne.n	8001c04 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c32:	684a      	ldr	r2, [r1, #4]
 8001c34:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c36:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c38:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c3a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c3e:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8001c42:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c44:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c46:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c4c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c50:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c52:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001c54:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c5a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001c5e:	6083      	str	r3, [r0, #8]
 8001c60:	e7d0      	b.n	8001c04 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8001c62:	2b70      	cmp	r3, #112	; 0x70
 8001c64:	d00c      	beq.n	8001c80 <HAL_TIM_ConfigClockSource+0xb0>
 8001c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6a:	d1cb      	bne.n	8001c04 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8001c6c:	68cb      	ldr	r3, [r1, #12]
 8001c6e:	684a      	ldr	r2, [r1, #4]
 8001c70:	6889      	ldr	r1, [r1, #8]
 8001c72:	f7ff ffa2 	bl	8001bba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	6893      	ldr	r3, [r2, #8]
 8001c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7e:	e008      	b.n	8001c92 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8001c80:	68cb      	ldr	r3, [r1, #12]
 8001c82:	684a      	ldr	r2, [r1, #4]
 8001c84:	6889      	ldr	r1, [r1, #8]
 8001c86:	f7ff ff98 	bl	8001bba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c92:	6093      	str	r3, [r2, #8]
      break;
 8001c94:	e7b6      	b.n	8001c04 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c96:	684d      	ldr	r5, [r1, #4]
 8001c98:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c9a:	6a01      	ldr	r1, [r0, #32]
 8001c9c:	f021 0110 	bic.w	r1, r1, #16
 8001ca0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ca4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ca6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cae:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001cb6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cb8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001cba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cc0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001cc4:	e7cb      	b.n	8001c5e <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cc6:	684a      	ldr	r2, [r1, #4]
 8001cc8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001cca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ccc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cce:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd2:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8001cd6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cda:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ce0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001ce4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ce6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ce8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cee:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001cf2:	e7b4      	b.n	8001c5e <HAL_TIM_ConfigClockSource+0x8e>
 8001cf4:	fffe0088 	.word	0xfffe0088

08001cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cf8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f04f 0302 	mov.w	r3, #2
{
 8001d02:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001d04:	d03e      	beq.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d0a:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d0c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d0e:	4d1e      	ldr	r5, [pc, #120]	; (8001d88 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 8001d10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d14:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8001d16:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001d18:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d1a:	d002      	beq.n	8001d22 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8001d1c:	4e1b      	ldr	r6, [pc, #108]	; (8001d8c <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8001d1e:	42b3      	cmp	r3, r6
 8001d20:	d103      	bne.n	8001d2a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d26:	684e      	ldr	r6, [r1, #4]
 8001d28:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d2a:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d30:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d32:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8001d36:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	d019      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d016      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d40:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d5e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8001d66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d104      	bne.n	8001d78 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d6e:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d70:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d74:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001d84:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40010400 	.word	0x40010400
 8001d90:	40000400 	.word	0x40000400

08001d94 <HAL_TIMEx_CommutCallback>:
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIMEx_BreakCallback>:
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d98:	4770      	bx	lr
	...

08001d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d9c:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d9e:	69c2      	ldr	r2, [r0, #28]
{
 8001da0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da2:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001da4:	6881      	ldr	r1, [r0, #8]
 8001da6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001daa:	4301      	orrs	r1, r0
 8001dac:	6960      	ldr	r0, [r4, #20]
 8001dae:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001db0:	4890      	ldr	r0, [pc, #576]	; (8001ff4 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001db2:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001db4:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001db6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001db8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dba:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001dbc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001dc4:	4301      	orrs	r1, r0
 8001dc6:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dc8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dca:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001dcc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dce:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001dd2:	4301      	orrs	r1, r0
 8001dd4:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dd6:	4988      	ldr	r1, [pc, #544]	; (8001ff8 <UART_SetConfig+0x25c>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d117      	bne.n	8001e0c <UART_SetConfig+0x70>
 8001ddc:	4b87      	ldr	r3, [pc, #540]	; (8001ffc <UART_SetConfig+0x260>)
 8001dde:	4988      	ldr	r1, [pc, #544]	; (8002000 <UART_SetConfig+0x264>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	d129      	bne.n	8001e44 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	f200 809d 	bhi.w	8001f30 <UART_SetConfig+0x194>
 8001df6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001dfa:	008c      	.short	0x008c
 8001dfc:	00ee00e8 	.word	0x00ee00e8
 8001e00:	00fa009b 	.word	0x00fa009b
 8001e04:	009b009b 	.word	0x009b009b
 8001e08:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e0c:	497d      	ldr	r1, [pc, #500]	; (8002004 <UART_SetConfig+0x268>)
 8001e0e:	428b      	cmp	r3, r1
 8001e10:	d106      	bne.n	8001e20 <UART_SetConfig+0x84>
 8001e12:	4b7a      	ldr	r3, [pc, #488]	; (8001ffc <UART_SetConfig+0x260>)
 8001e14:	497c      	ldr	r1, [pc, #496]	; (8002008 <UART_SetConfig+0x26c>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	e7e3      	b.n	8001de8 <UART_SetConfig+0x4c>
 8001e20:	497a      	ldr	r1, [pc, #488]	; (800200c <UART_SetConfig+0x270>)
 8001e22:	428b      	cmp	r3, r1
 8001e24:	d11d      	bne.n	8001e62 <UART_SetConfig+0xc6>
 8001e26:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <UART_SetConfig+0x260>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	f000 80d9 	beq.w	8001fe8 <UART_SetConfig+0x24c>
 8001e36:	d80e      	bhi.n	8001e56 <UART_SetConfig+0xba>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d067      	beq.n	8001f0c <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e3c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e40:	d076      	beq.n	8001f30 <UART_SetConfig+0x194>
 8001e42:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d873      	bhi.n	8001f30 <UART_SetConfig+0x194>
 8001e48:	e8df f003 	tbb	[pc, r3]
 8001e4c:	72a29f99 	.word	0x72a29f99
 8001e50:	727272b4 	.word	0x727272b4
 8001e54:	b7          	.byte	0xb7
 8001e55:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	f000 80ba 	beq.w	8001fd0 <UART_SetConfig+0x234>
 8001e5c:	2b30      	cmp	r3, #48	; 0x30
 8001e5e:	d03f      	beq.n	8001ee0 <UART_SetConfig+0x144>
 8001e60:	e7ec      	b.n	8001e3c <UART_SetConfig+0xa0>
 8001e62:	496b      	ldr	r1, [pc, #428]	; (8002010 <UART_SetConfig+0x274>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d10d      	bne.n	8001e84 <UART_SetConfig+0xe8>
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <UART_SetConfig+0x260>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	f000 80b8 	beq.w	8001fe8 <UART_SetConfig+0x24c>
 8001e78:	d9de      	bls.n	8001e38 <UART_SetConfig+0x9c>
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	f000 80a8 	beq.w	8001fd0 <UART_SetConfig+0x234>
 8001e80:	2bc0      	cmp	r3, #192	; 0xc0
 8001e82:	e7ec      	b.n	8001e5e <UART_SetConfig+0xc2>
 8001e84:	4963      	ldr	r1, [pc, #396]	; (8002014 <UART_SetConfig+0x278>)
 8001e86:	428b      	cmp	r3, r1
 8001e88:	d110      	bne.n	8001eac <UART_SetConfig+0x110>
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	; (8001ffc <UART_SetConfig+0x260>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e98:	f000 80a6 	beq.w	8001fe8 <UART_SetConfig+0x24c>
 8001e9c:	d9cc      	bls.n	8001e38 <UART_SetConfig+0x9c>
 8001e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea2:	f000 8095 	beq.w	8001fd0 <UART_SetConfig+0x234>
 8001ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eaa:	e7d8      	b.n	8001e5e <UART_SetConfig+0xc2>
 8001eac:	495a      	ldr	r1, [pc, #360]	; (8002018 <UART_SetConfig+0x27c>)
 8001eae:	428b      	cmp	r3, r1
 8001eb0:	d11e      	bne.n	8001ef0 <UART_SetConfig+0x154>
 8001eb2:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <UART_SetConfig+0x260>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	f000 8092 	beq.w	8001fe8 <UART_SetConfig+0x24c>
 8001ec4:	d806      	bhi.n	8001ed4 <UART_SetConfig+0x138>
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d07c      	beq.n	8001fc4 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ece:	d12f      	bne.n	8001f30 <UART_SetConfig+0x194>
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	e78d      	b.n	8001df0 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed8:	d07a      	beq.n	8001fd0 <UART_SetConfig+0x234>
 8001eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001ede:	d1f4      	bne.n	8001eca <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ee4:	d169      	bne.n	8001fba <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	0858      	lsrs	r0, r3, #1
 8001eea:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001eee:	e078      	b.n	8001fe2 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ef0:	494a      	ldr	r1, [pc, #296]	; (800201c <UART_SetConfig+0x280>)
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d124      	bne.n	8001f40 <UART_SetConfig+0x1a4>
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <UART_SetConfig+0x260>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f04:	d070      	beq.n	8001fe8 <UART_SetConfig+0x24c>
 8001f06:	d815      	bhi.n	8001f34 <UART_SetConfig+0x198>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1de      	bne.n	8001eca <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f0c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f10:	d135      	bne.n	8001f7e <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f12:	f7fe ff7f 	bl	8000e14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f16:	6862      	ldr	r2, [r4, #4]
 8001f18:	0853      	lsrs	r3, r2, #1
 8001f1a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001f1e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001f22:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f24:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001f28:	f1a0 0210 	sub.w	r2, r0, #16
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d91a      	bls.n	8001f66 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001f30:	2001      	movs	r0, #1
 8001f32:	e020      	b.n	8001f76 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f38:	d04a      	beq.n	8001fd0 <UART_SetConfig+0x234>
 8001f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001f3e:	e7ce      	b.n	8001ede <UART_SetConfig+0x142>
 8001f40:	4937      	ldr	r1, [pc, #220]	; (8002020 <UART_SetConfig+0x284>)
 8001f42:	428b      	cmp	r3, r1
 8001f44:	d1f4      	bne.n	8001f30 <UART_SetConfig+0x194>
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <UART_SetConfig+0x260>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f54:	d048      	beq.n	8001fe8 <UART_SetConfig+0x24c>
 8001f56:	f67f af6f 	bls.w	8001e38 <UART_SetConfig+0x9c>
 8001f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5e:	d037      	beq.n	8001fd0 <UART_SetConfig+0x234>
 8001f60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f64:	e77b      	b.n	8001e5e <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f66:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f6a:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	4318      	orrs	r0, r3
 8001f72:	60d0      	str	r0, [r2, #12]
 8001f74:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001f7a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001f7c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f7e:	f7fe ff49 	bl	8000e14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f82:	6863      	ldr	r3, [r4, #4]
 8001f84:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f88:	e008      	b.n	8001f9c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f8a:	f7fe ff53 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8001f8e:	e7f8      	b.n	8001f82 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f90:	6863      	ldr	r3, [r4, #4]
 8001f92:	0858      	lsrs	r0, r3, #1
 8001f94:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001f98:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fa0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fa2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001fa6:	f1a0 0210 	sub.w	r2, r0, #16
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d8c0      	bhi.n	8001f30 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	60d8      	str	r0, [r3, #12]
 8001fb2:	e7df      	b.n	8001f74 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001fb4:	f7fe fe60 	bl	8000c78 <HAL_RCC_GetSysClockFreq>
 8001fb8:	e7e3      	b.n	8001f82 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fba:	6863      	ldr	r3, [r4, #4]
 8001fbc:	0858      	lsrs	r0, r3, #1
 8001fbe:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001fc2:	e7eb      	b.n	8001f9c <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fc8:	d1df      	bne.n	8001f8a <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fca:	f7fe ff33 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8001fce:	e7a2      	b.n	8001f16 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fd0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fd4:	d1dc      	bne.n	8001f90 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	0858      	lsrs	r0, r3, #1
 8001fda:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001fde:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fe2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fe6:	e79c      	b.n	8001f22 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fec:	d1e2      	bne.n	8001fb4 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8001fee:	f7fe fe43 	bl	8000c78 <HAL_RCC_GetSysClockFreq>
 8001ff2:	e790      	b.n	8001f16 <UART_SetConfig+0x17a>
 8001ff4:	efff69f3 	.word	0xefff69f3
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	0800337c 	.word	0x0800337c
 8002004:	40004400 	.word	0x40004400
 8002008:	08003380 	.word	0x08003380
 800200c:	40004800 	.word	0x40004800
 8002010:	40004c00 	.word	0x40004c00
 8002014:	40005000 	.word	0x40005000
 8002018:	40011400 	.word	0x40011400
 800201c:	40007800 	.word	0x40007800
 8002020:	40007c00 	.word	0x40007c00

08002024 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002026:	07da      	lsls	r2, r3, #31
{
 8002028:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800202a:	d506      	bpl.n	800203a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800202c:	6801      	ldr	r1, [r0, #0]
 800202e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002030:	684a      	ldr	r2, [r1, #4]
 8002032:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002036:	4322      	orrs	r2, r4
 8002038:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800203a:	079c      	lsls	r4, r3, #30
 800203c:	d506      	bpl.n	800204c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800203e:	6801      	ldr	r1, [r0, #0]
 8002040:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002042:	684a      	ldr	r2, [r1, #4]
 8002044:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002048:	4322      	orrs	r2, r4
 800204a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800204c:	0759      	lsls	r1, r3, #29
 800204e:	d506      	bpl.n	800205e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002050:	6801      	ldr	r1, [r0, #0]
 8002052:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002054:	684a      	ldr	r2, [r1, #4]
 8002056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800205a:	4322      	orrs	r2, r4
 800205c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800205e:	071a      	lsls	r2, r3, #28
 8002060:	d506      	bpl.n	8002070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002062:	6801      	ldr	r1, [r0, #0]
 8002064:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002066:	684a      	ldr	r2, [r1, #4]
 8002068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800206c:	4322      	orrs	r2, r4
 800206e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002070:	06dc      	lsls	r4, r3, #27
 8002072:	d506      	bpl.n	8002082 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002074:	6801      	ldr	r1, [r0, #0]
 8002076:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002078:	688a      	ldr	r2, [r1, #8]
 800207a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800207e:	4322      	orrs	r2, r4
 8002080:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002082:	0699      	lsls	r1, r3, #26
 8002084:	d506      	bpl.n	8002094 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002086:	6801      	ldr	r1, [r0, #0]
 8002088:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800208a:	688a      	ldr	r2, [r1, #8]
 800208c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002090:	4322      	orrs	r2, r4
 8002092:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002094:	065a      	lsls	r2, r3, #25
 8002096:	d510      	bpl.n	80020ba <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002098:	6801      	ldr	r1, [r0, #0]
 800209a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800209c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800209e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80020a6:	ea42 0204 	orr.w	r2, r2, r4
 80020aa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ac:	d105      	bne.n	80020ba <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020ae:	684a      	ldr	r2, [r1, #4]
 80020b0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020b2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80020b6:	4322      	orrs	r2, r4
 80020b8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020ba:	061b      	lsls	r3, r3, #24
 80020bc:	d506      	bpl.n	80020cc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020be:	6802      	ldr	r2, [r0, #0]
 80020c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020c2:	6853      	ldr	r3, [r2, #4]
 80020c4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6053      	str	r3, [r2, #4]
 80020cc:	bd10      	pop	{r4, pc}

080020ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80020ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d2:	9d06      	ldr	r5, [sp, #24]
 80020d4:	4604      	mov	r4, r0
 80020d6:	460f      	mov	r7, r1
 80020d8:	4616      	mov	r6, r2
 80020da:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020dc:	6821      	ldr	r1, [r4, #0]
 80020de:	69ca      	ldr	r2, [r1, #28]
 80020e0:	ea37 0302 	bics.w	r3, r7, r2
 80020e4:	bf0c      	ite	eq
 80020e6:	2201      	moveq	r2, #1
 80020e8:	2200      	movne	r2, #0
 80020ea:	42b2      	cmp	r2, r6
 80020ec:	d002      	beq.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2000      	movs	r0, #0
}
 80020f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80020f4:	1c68      	adds	r0, r5, #1
 80020f6:	d0f2      	beq.n	80020de <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f8:	f7fe fa6a 	bl	80005d0 <HAL_GetTick>
 80020fc:	eba0 0008 	sub.w	r0, r0, r8
 8002100:	4285      	cmp	r5, r0
 8002102:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002104:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002106:	d300      	bcc.n	800210a <UART_WaitOnFlagUntilTimeout+0x3c>
 8002108:	b97d      	cbnz	r5, 800212a <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800210e:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	6883      	ldr	r3, [r0, #8]
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002118:	2320      	movs	r3, #32
 800211a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800211c:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800211e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002120:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002122:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800212a:	075a      	lsls	r2, r3, #29
 800212c:	d5d6      	bpl.n	80020dc <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800212e:	69c3      	ldr	r3, [r0, #28]
 8002130:	051b      	lsls	r3, r3, #20
 8002132:	d5d3      	bpl.n	80020dc <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002138:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800213a:	6803      	ldr	r3, [r0, #0]
 800213c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002140:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002142:	6883      	ldr	r3, [r0, #8]
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800214a:	2320      	movs	r3, #32
 800214c:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800214e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002150:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002152:	e7e4      	b.n	800211e <UART_WaitOnFlagUntilTimeout+0x50>

08002154 <HAL_UART_Transmit>:
{
 8002154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002158:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800215a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800215c:	4604      	mov	r4, r0
 800215e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002160:	2b20      	cmp	r3, #32
{
 8002162:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002164:	d14c      	bne.n	8002200 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8002166:	2900      	cmp	r1, #0
 8002168:	d048      	beq.n	80021fc <HAL_UART_Transmit+0xa8>
 800216a:	2a00      	cmp	r2, #0
 800216c:	d046      	beq.n	80021fc <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800216e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002172:	2b01      	cmp	r3, #1
 8002174:	d044      	beq.n	8002200 <HAL_UART_Transmit+0xac>
 8002176:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800217a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002182:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002184:	f7fe fa24 	bl	80005d0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002188:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800218a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800218c:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002194:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002198:	d103      	bne.n	80021a2 <HAL_UART_Transmit+0x4e>
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	b90b      	cbnz	r3, 80021a2 <HAL_UART_Transmit+0x4e>
 800219e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80021a0:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80021a2:	2300      	movs	r3, #0
 80021a4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80021a8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ac:	463b      	mov	r3, r7
 80021ae:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80021b2:	b292      	uxth	r2, r2
 80021b4:	b93a      	cbnz	r2, 80021c6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7ff ff88 	bl	80020ce <UART_WaitOnFlagUntilTimeout>
 80021be:	b940      	cbnz	r0, 80021d2 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80021c0:	2320      	movs	r3, #32
 80021c2:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80021c4:	e006      	b.n	80021d4 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	2200      	movs	r2, #0
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff7f 	bl	80020ce <UART_WaitOnFlagUntilTimeout>
 80021d0:	b118      	cbz	r0, 80021da <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
}
 80021d4:	b003      	add	sp, #12
 80021d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021da:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80021dc:	b95e      	cbnz	r6, 80021f6 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021de:	f835 3b02 	ldrh.w	r3, [r5], #2
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e6:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80021e8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80021f4:	e7d8      	b.n	80021a8 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021f6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80021fa:	e7f4      	b.n	80021e6 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
 80021fe:	e7e9      	b.n	80021d4 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002200:	2002      	movs	r0, #2
 8002202:	e7e7      	b.n	80021d4 <HAL_UART_Transmit+0x80>

08002204 <UART_CheckIdleState>:
{
 8002204:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002206:	2600      	movs	r6, #0
{
 8002208:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800220c:	f7fe f9e0 	bl	80005d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002210:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002212:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	071a      	lsls	r2, r3, #28
 8002218:	d415      	bmi.n	8002246 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	075b      	lsls	r3, r3, #29
 8002220:	d50a      	bpl.n	8002238 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002222:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800222c:	4620      	mov	r0, r4
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	462b      	mov	r3, r5
 8002232:	f7ff ff4c 	bl	80020ce <UART_WaitOnFlagUntilTimeout>
 8002236:	b990      	cbnz	r0, 800225e <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002238:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800223a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800223c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800223e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002242:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002244:	e00c      	b.n	8002260 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800224a:	4632      	mov	r2, r6
 800224c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4603      	mov	r3, r0
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff ff3a 	bl	80020ce <UART_WaitOnFlagUntilTimeout>
 800225a:	2800      	cmp	r0, #0
 800225c:	d0dd      	beq.n	800221a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800225e:	2003      	movs	r0, #3
}
 8002260:	b002      	add	sp, #8
 8002262:	bd70      	pop	{r4, r5, r6, pc}

08002264 <HAL_UART_Init>:
{
 8002264:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002266:	4604      	mov	r4, r0
 8002268:	b340      	cbz	r0, 80022bc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800226c:	b91b      	cbnz	r3, 8002276 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800226e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002272:	f000 ffb9 	bl	80031e8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002276:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002278:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800227a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002286:	f7ff fd89 	bl	8001d9c <UART_SetConfig>
 800228a:	2801      	cmp	r0, #1
 800228c:	d016      	beq.n	80022bc <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800228e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002290:	b113      	cbz	r3, 8002298 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fec6 	bl	8002024 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002298:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800229a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022aa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
}
 80022b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80022b6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80022b8:	f7ff bfa4 	b.w	8002204 <UART_CheckIdleState>
}
 80022bc:	2001      	movs	r0, #1
 80022be:	bd10      	pop	{r4, pc}

080022c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c0:	b510      	push	{r4, lr}
 80022c2:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c4:	2234      	movs	r2, #52	; 0x34
 80022c6:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	a807      	add	r0, sp, #28
 80022cc:	f001 f83a 	bl	8003344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d0:	2214      	movs	r2, #20
 80022d2:	2100      	movs	r1, #0
 80022d4:	a802      	add	r0, sp, #8
 80022d6:	f001 f835 	bl	8003344 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022da:	2100      	movs	r1, #0
 80022dc:	2290      	movs	r2, #144	; 0x90
 80022de:	a814      	add	r0, sp, #80	; 0x50
 80022e0:	f001 f830 	bl	8003344 <memset>
  HAL_PWR_EnableBkUpAccess();
 80022e4:	f7fe fafc 	bl	80008e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ea:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f6:	4a1d      	ldr	r2, [pc, #116]	; (800236c <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230e:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002314:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002316:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800231c:	2301      	movs	r3, #1
 800231e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002320:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002324:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800232a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800232c:	2304      	movs	r3, #4
 800232e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002330:	23a0      	movs	r3, #160	; 0xa0
 8002332:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002334:	f7fe fadc 	bl	80008f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002338:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800233e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002340:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002342:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002346:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002348:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002352:	f7fe fcbf 	bl	8000cd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235a:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800235c:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800235e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f7fe fd78 	bl	8000e54 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002364:	b038      	add	sp, #224	; 0xe0
 8002366:	bd10      	pop	{r4, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000

08002370 <main>:
{
 8002370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002374:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800237c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002380:	4bbd      	ldr	r3, [pc, #756]	; (8002678 <main+0x308>)
 8002382:	2100      	movs	r1, #0
 8002384:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800238c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002396:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800239c:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80023a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80023a4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80023a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023ac:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023b0:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80023b4:	f3c2 324e 	ubfx	r2, r2, #13, #15
 80023b8:	07a5      	lsls	r5, r4, #30
 80023ba:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023bc:	ea02 0e06 	and.w	lr, r2, r6
 80023c0:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023c2:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023c4:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways-- != 0U);
 80023c8:	3901      	subs	r1, #1
 80023ca:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023ce:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80023d2:	1c4f      	adds	r7, r1, #1
 80023d4:	d1f6      	bne.n	80023c4 <main+0x54>
 80023d6:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80023d8:	f112 0f20 	cmn.w	r2, #32
 80023dc:	d1ee      	bne.n	80023bc <main+0x4c>
 80023de:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023e8:	615a      	str	r2, [r3, #20]
 80023ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023ee:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80023f2:	f7fe f8d5 	bl	80005a0 <HAL_Init>
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80023f6:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 80026a0 <main+0x330>
  SystemClock_Config();
 80023fa:	f7ff ff61 	bl	80022c0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fe:	2214      	movs	r2, #20
 8002400:	2100      	movs	r1, #0
 8002402:	a80e      	add	r0, sp, #56	; 0x38
 8002404:	f000 ff9e 	bl	8003344 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002408:	4b9c      	ldr	r3, [pc, #624]	; (800267c <main+0x30c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800240a:	4f9d      	ldr	r7, [pc, #628]	; (8002680 <main+0x310>)
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800240c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8002410:	4650      	mov	r0, sl
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002414:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002418:	f042 0204 	orr.w	r2, r2, #4
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002428:	f44f 7b00 	mov.w	fp, #512	; 0x200
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242e:	f002 0204 	and.w	r2, r2, #4
 8002432:	9200      	str	r2, [sp, #0]
 8002434:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002444:	9201      	str	r2, [sp, #4]
 8002446:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002452:	f002 0201 	and.w	r2, r2, #1
 8002456:	9202      	str	r2, [sp, #8]
 8002458:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245c:	f042 0202 	orr.w	r2, r2, #2
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
 8002462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002464:	f002 0202 	and.w	r2, r2, #2
 8002468:	9203      	str	r2, [sp, #12]
 800246a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800246c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246e:	f042 0220 	orr.w	r2, r2, #32
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	f002 0220 	and.w	r2, r2, #32
 800247a:	9204      	str	r2, [sp, #16]
 800247c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	f042 0208 	orr.w	r2, r2, #8
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
 8002486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002488:	f002 0208 	and.w	r2, r2, #8
 800248c:	9205      	str	r2, [sp, #20]
 800248e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	9306      	str	r3, [sp, #24]
 80024a2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80024a4:	f7fe fa04 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f244 0181 	movw	r1, #16513	; 0x4081
 80024ae:	4638      	mov	r0, r7
 80024b0:	f7fe f9fe 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, CSN_Pin|CS_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024ba:	4872      	ldr	r0, [pc, #456]	; (8002684 <main+0x314>)
 80024bc:	f7fe f9f8 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	4870      	ldr	r0, [pc, #448]	; (8002688 <main+0x318>)
 80024c6:	f7fe f9f3 	bl	80008b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ca:	4b70      	ldr	r3, [pc, #448]	; (800268c <main+0x31c>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80024cc:	a90e      	add	r1, sp, #56	; 0x38
 80024ce:	4870      	ldr	r0, [pc, #448]	; (8002690 <main+0x320>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80024d0:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f7fe f901 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024da:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024dc:	a90e      	add	r1, sp, #56	; 0x38
 80024de:	486c      	ldr	r0, [pc, #432]	; (8002690 <main+0x320>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024e0:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e2:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e8:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f0:	f7fe f8f4 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024f4:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	a90e      	add	r1, sp, #56	; 0x38
 80024f8:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024fe:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002500:	230b      	movs	r3, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002504:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f7fe f8e7 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CE_Pin;
 800250e:	2320      	movs	r3, #32
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8002510:	a90e      	add	r1, sp, #56	; 0x38
 8002512:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002514:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = CE_Pin;
 8002516:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800251c:	f7fe f8de 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002520:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	a90e      	add	r1, sp, #56	; 0x38
 8002526:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002528:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800252a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f7fe f8d4 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002534:	4b57      	ldr	r3, [pc, #348]	; (8002694 <main+0x324>)
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8002536:	a90e      	add	r1, sp, #56	; 0x38
 8002538:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = IRQ_Pin;
 800253a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800253e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8002542:	f7fe f8cb 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CSN_Pin|CS_Pin;
 8002546:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800254a:	a90e      	add	r1, sp, #56	; 0x38
 800254c:	484d      	ldr	r0, [pc, #308]	; (8002684 <main+0x314>)
  GPIO_InitStruct.Pin = CSN_Pin|CS_Pin;
 800254e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002556:	f7fe f8c1 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800255a:	230b      	movs	r3, #11
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800255c:	a90e      	add	r1, sp, #56	; 0x38
 800255e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002560:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002562:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800256e:	f7fe f8b5 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002572:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002574:	a90e      	add	r1, sp, #56	; 0x38
 8002576:	4844      	ldr	r0, [pc, #272]	; (8002688 <main+0x318>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002578:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002580:	f7fe f8ac 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002584:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002586:	a90e      	add	r1, sp, #56	; 0x38
 8002588:	483f      	ldr	r0, [pc, #252]	; (8002688 <main+0x318>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800258a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002590:	f7fe f8a4 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002594:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	a90e      	add	r1, sp, #56	; 0x38
 800259a:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025a0:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025a2:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025a6:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f7fe f896 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025b0:	a90e      	add	r1, sp, #56	; 0x38
 80025b2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025b4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f7fe f88e 	bl	80006dc <HAL_GPIO_Init>
  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025c0:	230b      	movs	r3, #11
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025c2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025c6:	a90e      	add	r1, sp, #56	; 0x38
 80025c8:	482f      	ldr	r0, [pc, #188]	; (8002688 <main+0x318>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ca:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025cc:	920e      	str	r2, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025d8:	f7fe f880 	bl	80006dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025dc:	4622      	mov	r2, r4
 80025de:	4621      	mov	r1, r4
 80025e0:	2007      	movs	r0, #7
  hspi3.Instance = SPI3;
 80025e2:	4d2d      	ldr	r5, [pc, #180]	; (8002698 <main+0x328>)
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025e4:	f7fe f81e 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025e8:	2007      	movs	r0, #7
 80025ea:	f7fe f853 	bl	8000694 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025ee:	4621      	mov	r1, r4
 80025f0:	4622      	mov	r2, r4
 80025f2:	2028      	movs	r0, #40	; 0x28
 80025f4:	f7fe f816 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025f8:	2028      	movs	r0, #40	; 0x28
 80025fa:	f7fe f84b 	bl	8000694 <HAL_NVIC_EnableIRQ>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025fe:	4a27      	ldr	r2, [pc, #156]	; (800269c <main+0x32c>)
 8002600:	f44f 7382 	mov.w	r3, #260	; 0x104
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002604:	4628      	mov	r0, r5
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002606:	f8c5 b018 	str.w	fp, [r5, #24]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800260a:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 800260c:	f8df b094 	ldr.w	fp, [pc, #148]	; 80026a4 <main+0x334>
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002610:	612c      	str	r4, [r5, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002612:	616c      	str	r4, [r5, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002614:	622c      	str	r4, [r5, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002616:	626c      	str	r4, [r5, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002618:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800261a:	632c      	str	r4, [r5, #48]	; 0x30
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800261c:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002620:	2318      	movs	r3, #24
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002622:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002626:	61eb      	str	r3, [r5, #28]
  hspi3.Init.CRCPolynomial = 7;
 8002628:	2307      	movs	r3, #7
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800262a:	60ea      	str	r2, [r5, #12]
  hspi3.Init.CRCPolynomial = 7;
 800262c:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800262e:	2308      	movs	r3, #8
 8002630:	636b      	str	r3, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002632:	f7fe ff37 	bl	80014a4 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	4621      	mov	r1, r4
 8002638:	2210      	movs	r2, #16
 800263a:	a80e      	add	r0, sp, #56	; 0x38
 800263c:	f000 fe82 	bl	8003344 <memset>
  htim2.Instance = TIM2;
 8002640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002644:	4658      	mov	r0, fp
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.Period = 0;
 800264a:	f8cb 400c 	str.w	r4, [fp, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264e:	f8cb 4010 	str.w	r4, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	f8cb 4018 	str.w	r4, [fp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002656:	940a      	str	r4, [sp, #40]	; 0x28
 8002658:	940b      	str	r4, [sp, #44]	; 0x2c
 800265a:	940c      	str	r4, [sp, #48]	; 0x30
  htim2.Init.Prescaler = 0;
 800265c:	e88b 0014 	stmia.w	fp, {r2, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002660:	f7ff f9b6 	bl	80019d0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002668:	a90e      	add	r1, sp, #56	; 0x38
 800266a:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800266e:	f7ff faaf 	bl	8001bd0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002672:	a90a      	add	r1, sp, #40	; 0x28
 8002674:	e018      	b.n	80026a8 <main+0x338>
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	10110000 	.word	0x10110000
 8002690:	40020800 	.word	0x40020800
 8002694:	10210000 	.word	0x10210000
 8002698:	200200ec 	.word	0x200200ec
 800269c:	40003c00 	.word	0x40003c00
 80026a0:	40020000 	.word	0x40020000
 80026a4:	20020574 	.word	0x20020574
 80026a8:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ac:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ae:	f7ff fb23 	bl	8001cf8 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	2210      	movs	r2, #16
 80026b4:	4621      	mov	r1, r4
 80026b6:	a80a      	add	r0, sp, #40	; 0x28
  htim3.Instance = TIM3;
 80026b8:	f8df b174 	ldr.w	fp, [pc, #372]	; 8002830 <main+0x4c0>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026bc:	f000 fe42 	bl	8003344 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026c0:	2210      	movs	r2, #16
 80026c2:	4621      	mov	r1, r4
 80026c4:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c6:	9407      	str	r4, [sp, #28]
 80026c8:	9408      	str	r4, [sp, #32]
 80026ca:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026cc:	f000 fe3a 	bl	8003344 <memset>
  htim3.Init.Prescaler = 80-1;
 80026d0:	494c      	ldr	r1, [pc, #304]	; (8002804 <main+0x494>)
 80026d2:	224f      	movs	r2, #79	; 0x4f
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d4:	4658      	mov	r0, fp
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	f8cb 4008 	str.w	r4, [fp, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	f8cb 4010 	str.w	r4, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026de:	f8cb 4018 	str.w	r4, [fp, #24]
  htim3.Init.Prescaler = 80-1;
 80026e2:	e88b 0006 	stmia.w	fp, {r1, r2}
  htim3.Init.Period = 0xffff-1;
 80026e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026ea:	f8cb 200c 	str.w	r2, [fp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ee:	f7ff f96f 	bl	80019d0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026f6:	a90a      	add	r1, sp, #40	; 0x28
 80026f8:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fa:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026fc:	f7ff fa68 	bl	8001bd0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002700:	4658      	mov	r0, fp
 8002702:	f7ff f97f 	bl	8001a04 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002706:	a907      	add	r1, sp, #28
 8002708:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800270e:	f7ff faf3 	bl	8001cf8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002712:	4622      	mov	r2, r4
 8002714:	a90e      	add	r1, sp, #56	; 0x38
 8002716:	4658      	mov	r0, fp
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002718:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800271a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  huart3.Instance = USART3;
 800271e:	4e3a      	ldr	r6, [pc, #232]	; (8002808 <main+0x498>)
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002720:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 8002722:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002724:	f7ff f9c2 	bl	8001aac <HAL_TIM_IC_ConfigChannel>
  huart3.Init.BaudRate = 115200;
 8002728:	4838      	ldr	r0, [pc, #224]	; (800280c <main+0x49c>)
 800272a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800272e:	60b4      	str	r4, [r6, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002730:	60f4      	str	r4, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002732:	6134      	str	r4, [r6, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002734:	61b4      	str	r4, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002736:	61f4      	str	r4, [r6, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002738:	6234      	str	r4, [r6, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273a:	6274      	str	r4, [r6, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800273c:	e886 0009 	stmia.w	r6, {r0, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002740:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002742:	4630      	mov	r0, r6
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002744:	6173      	str	r3, [r6, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002746:	f7ff fd8d 	bl	8002264 <HAL_UART_Init>
  sprintf(buffer,"Hello Mohamed  \n\r");
 800274a:	4931      	ldr	r1, [pc, #196]	; (8002810 <main+0x4a0>)
 800274c:	4831      	ldr	r0, [pc, #196]	; (8002814 <main+0x4a4>)
 800274e:	f000 fe01 	bl	8003354 <strcpy>
  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8002752:	4830      	ldr	r0, [pc, #192]	; (8002814 <main+0x4a4>)
 8002754:	f7fd fd70 	bl	8000238 <strlen>
 8002758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275c:	b282      	uxth	r2, r0
 800275e:	492d      	ldr	r1, [pc, #180]	; (8002814 <main+0x4a4>)
 8002760:	4630      	mov	r0, r6
 8002762:	f7ff fcf7 	bl	8002154 <HAL_UART_Transmit>
	      config.payload_length   = 4;    // maximum is 32 bytes
 8002766:	2304      	movs	r3, #4
	      nrf_init(&nrf, &config);
 8002768:	a90e      	add	r1, sp, #56	; 0x38
 800276a:	482b      	ldr	r0, [pc, #172]	; (8002818 <main+0x4a8>)
	      config.payload_length   = 4;    // maximum is 32 bytes
 800276c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	      config.retransmit_count = 15;   // maximum is 15 times
 8002770:	230f      	movs	r3, #15
	      config.data_rate        = NRF_DATA_RATE_1MBPS;
 8002772:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
	      config.retransmit_count = 15;   // maximum is 15 times
 8002776:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	      config.retransmit_delay = 0x0F; // 4000us, LSB:250us
 800277a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	      config.rf_channel       = 11;
 800277e:	f04f 030b 	mov.w	r3, #11
	      config.tx_power         = NRF_TX_PWR_0dBm;
 8002782:	f88d 9039 	strb.w	r9, [sp, #57]	; 0x39
	      config.rf_channel       = 11;
 8002786:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	      config.rx_address       = rx_address;
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <main+0x4ac>)
	      config.crc_width        = NRF_CRC_WIDTH_1B;
 800278c:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
	      config.rx_address       = rx_address;
 8002790:	9310      	str	r3, [sp, #64]	; 0x40
	      config.tx_address       = tx_address;
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <main+0x4b0>)
	      config.addr_width       = NRF_ADDR_WIDTH_5;
 8002794:	f88d 903b 	strb.w	r9, [sp, #59]	; 0x3b
	      config.tx_address       = tx_address;
 8002798:	9311      	str	r3, [sp, #68]	; 0x44
	      config.rx_buffer        = (uint8_t*)&rx_data;
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <main+0x4b4>)
	      config.spi         = &hspi3;
 800279c:	9513      	str	r5, [sp, #76]	; 0x4c
	      config.rx_buffer        = (uint8_t*)&rx_data;
 800279e:	9312      	str	r3, [sp, #72]	; 0x48
	      config.spi_timeout = 10; // milliseconds
 80027a0:	230a      	movs	r3, #10
	      config.ce_port     = CE_GPIO_Port;
 80027a2:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
	      config.spi_timeout = 10; // milliseconds
 80027a6:	9314      	str	r3, [sp, #80]	; 0x50
	      config.ce_pin      = CE_Pin;
 80027a8:	f04f 0320 	mov.w	r3, #32
	      config.irq_port    = IRQ_GPIO_Port;
 80027ac:	9719      	str	r7, [sp, #100]	; 0x64
	      config.ce_pin      = CE_Pin;
 80027ae:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
	      config.csn_pin     = CS_Pin;
 80027b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	      config.irq_pin     = IRQ_Pin;
 80027b6:	f8ad 8068 	strh.w	r8, [sp, #104]	; 0x68
	      config.csn_pin     = CS_Pin;
 80027ba:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
	      config.csn_port    = CS_GPIO_Port;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <main+0x4b8>)
 80027c0:	9315      	str	r3, [sp, #84]	; 0x54
	      nrf_init(&nrf, &config);
 80027c2:	f000 fbe7 	bl	8002f94 <nrf_init>
      nrf_init(&nrf, &config);
 80027c6:	a90e      	add	r1, sp, #56	; 0x38
 80027c8:	4813      	ldr	r0, [pc, #76]	; (8002818 <main+0x4a8>)
 80027ca:	f000 fbe3 	bl	8002f94 <nrf_init>
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80027ce:	2101      	movs	r1, #1
 80027d0:	4638      	mov	r0, r7
 80027d2:	f7fe f872 	bl	80008ba <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 80027d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027da:	f7fd feff 	bl	80005dc <HAL_Delay>
      sprintf(ffer,"ld1f");
 80027de:	4913      	ldr	r1, [pc, #76]	; (800282c <main+0x4bc>)
 80027e0:	a80e      	add	r0, sp, #56	; 0x38
 80027e2:	f000 fdb7 	bl	8003354 <strcpy>
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80027e6:	2101      	movs	r1, #1
 80027e8:	4638      	mov	r0, r7
 80027ea:	f7fe f866 	bl	80008ba <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 80027ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027f2:	f7fd fef3 	bl	80005dc <HAL_Delay>
      memset(ffer, 0, sizeof(ffer));
 80027f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027fa:	2100      	movs	r1, #0
 80027fc:	a80e      	add	r0, sp, #56	; 0x38
 80027fe:	f000 fda1 	bl	8003344 <memset>
 8002802:	e7e4      	b.n	80027ce <main+0x45e>
 8002804:	40000400 	.word	0x40000400
 8002808:	2002002c 	.word	0x2002002c
 800280c:	40004800 	.word	0x40004800
 8002810:	080033a8 	.word	0x080033a8
 8002814:	20020188 	.word	0x20020188
 8002818:	20020150 	.word	0x20020150
 800281c:	080033bf 	.word	0x080033bf
 8002820:	080033c4 	.word	0x080033c4
 8002824:	20020570 	.word	0x20020570
 8002828:	40021400 	.word	0x40021400
 800282c:	080033ba 	.word	0x080033ba
 8002830:	200200ac 	.word	0x200200ac

08002834 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==IRQ_Pin){
 8002834:	2802      	cmp	r0, #2
{
 8002836:	b510      	push	{r4, lr}
	if(GPIO_Pin==IRQ_Pin){
 8002838:	d104      	bne.n	8002844 <HAL_GPIO_EXTI_Callback+0x10>
    nrf_irq_handler(&nrf);
 800283a:	480e      	ldr	r0, [pc, #56]	; (8002874 <HAL_GPIO_EXTI_Callback+0x40>)
	if(GPIO_Pin==USER_Btn_Pin){
	    nrf_irq_handler(&nrf);
	    sprintf(buffer,"it trigger USER_Btn_Pin \n\r");
	    HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
		}
}
 800283c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_irq_handler(&nrf);
 8002840:	f000 ba64 	b.w	8002d0c <nrf_irq_handler>
	if(GPIO_Pin==USER_Btn_Pin){
 8002844:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002848:	d112      	bne.n	8002870 <HAL_GPIO_EXTI_Callback+0x3c>
	    nrf_irq_handler(&nrf);
 800284a:	480a      	ldr	r0, [pc, #40]	; (8002874 <HAL_GPIO_EXTI_Callback+0x40>)
 800284c:	f000 fa5e 	bl	8002d0c <nrf_irq_handler>
	    sprintf(buffer,"it trigger USER_Btn_Pin \n\r");
 8002850:	4909      	ldr	r1, [pc, #36]	; (8002878 <HAL_GPIO_EXTI_Callback+0x44>)
 8002852:	480a      	ldr	r0, [pc, #40]	; (800287c <HAL_GPIO_EXTI_Callback+0x48>)
 8002854:	f000 fd7e 	bl	8003354 <strcpy>
	    HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8002858:	4808      	ldr	r0, [pc, #32]	; (800287c <HAL_GPIO_EXTI_Callback+0x48>)
 800285a:	f7fd fced 	bl	8000238 <strlen>
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	b282      	uxth	r2, r0
 8002864:	4905      	ldr	r1, [pc, #20]	; (800287c <HAL_GPIO_EXTI_Callback+0x48>)
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <HAL_GPIO_EXTI_Callback+0x4c>)
}
 8002868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800286c:	f7ff bc72 	b.w	8002154 <HAL_UART_Transmit>
 8002870:	bd10      	pop	{r4, pc}
 8002872:	bf00      	nop
 8002874:	20020150 	.word	0x20020150
 8002878:	0800338d 	.word	0x0800338d
 800287c:	20020188 	.word	0x20020188
 8002880:	2002002c 	.word	0x2002002c

08002884 <ce_reset>:
static void ce_set(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
}

static void ce_reset(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 8002884:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800288a:	f7fe b811 	b.w	80008b0 <HAL_GPIO_WritePin>

0800288e <ce_set>:
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 800288e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8002890:	2201      	movs	r2, #1
 8002892:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002894:	f7fe b80c 	b.w	80008b0 <HAL_GPIO_WritePin>

08002898 <nrf_send_command>:

    return NRF_OK;
}

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx,
                            uint8_t* rx, uint8_t len) {
 8002898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	461e      	mov	r6, r3
 80028a0:	4604      	mov	r4, r0
    myTX[0] = cmd;

    int i = 0;
    for (i = 0; i < len; i++) {
        myTX[1 + i] = tx[i];
        myRX[i]     = 0;
 80028a2:	f04f 0e00 	mov.w	lr, #0
                            uint8_t* rx, uint8_t len) {
 80028a6:	af02      	add	r7, sp, #8
 80028a8:	f897 a020 	ldrb.w	sl, [r7, #32]
    uint8_t myTX[len + 1];
 80028ac:	f10a 0308 	add.w	r3, sl, #8
 80028b0:	f10a 38ff 	add.w	r8, sl, #4294967295
 80028b4:	f023 0307 	bic.w	r3, r3, #7
 80028b8:	ebad 0d03 	sub.w	sp, sp, r3
 80028bc:	f10d 0908 	add.w	r9, sp, #8
    uint8_t myRX[len + 1];
 80028c0:	ebad 0d03 	sub.w	sp, sp, r3
    myTX[0] = cmd;
 80028c4:	464b      	mov	r3, r9
    uint8_t myRX[len + 1];
 80028c6:	ad02      	add	r5, sp, #8
 80028c8:	f10d 0007 	add.w	r0, sp, #7
    myTX[0] = cmd;
 80028cc:	f803 1b01 	strb.w	r1, [r3], #1
 80028d0:	1e51      	subs	r1, r2, #1
 80028d2:	4442      	add	r2, r8
    for (i = 0; i < len; i++) {
 80028d4:	4291      	cmp	r1, r2
 80028d6:	d11c      	bne.n	8002912 <nrf_send_command+0x7a>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 80028d8:	2200      	movs	r2, #0
 80028da:	8c21      	ldrh	r1, [r4, #32]
 80028dc:	69e0      	ldr	r0, [r4, #28]
 80028de:	f7fd ffe7 	bl	80008b0 <HAL_GPIO_WritePin>
    }

    csn_reset(dev);

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 80028e2:	69a3      	ldr	r3, [r4, #24]
 80028e4:	462a      	mov	r2, r5
 80028e6:	4649      	mov	r1, r9
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f10a 0301 	add.w	r3, sl, #1
 80028ee:	6960      	ldr	r0, [r4, #20]
 80028f0:	f7fe fe2d 	bl	800154e <HAL_SPI_TransmitReceive>
 80028f4:	b9c8      	cbnz	r0, 800292a <nrf_send_command+0x92>
 80028f6:	1e73      	subs	r3, r6, #1
 80028f8:	3501      	adds	r5, #1
 80028fa:	4446      	add	r6, r8
                                dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
    }

    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 80028fc:	42b3      	cmp	r3, r6
 80028fe:	d10f      	bne.n	8002920 <nrf_send_command+0x88>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 8002900:	69e0      	ldr	r0, [r4, #28]
 8002902:	2201      	movs	r2, #1
 8002904:	8c21      	ldrh	r1, [r4, #32]
 8002906:	f7fd ffd3 	bl	80008b0 <HAL_GPIO_WritePin>

    csn_set(dev);

    return NRF_OK;
 800290a:	2000      	movs	r0, #0
}
 800290c:	46bd      	mov	sp, r7
 800290e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        myTX[1 + i] = tx[i];
 8002912:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        myRX[i]     = 0;
 8002916:	f800 ef01 	strb.w	lr, [r0, #1]!
        myTX[1 + i] = tx[i];
 800291a:	f803 cb01 	strb.w	ip, [r3], #1
 800291e:	e7d9      	b.n	80028d4 <nrf_send_command+0x3c>
    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8002920:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002924:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002928:	e7e8      	b.n	80028fc <nrf_send_command+0x64>
        return NRF_ERROR;
 800292a:	2001      	movs	r0, #1
 800292c:	e7ee      	b.n	800290c <nrf_send_command+0x74>
	...

08002930 <nrf_packet_received_callback>:
        dev->tx_result = NRF_ERROR;
        dev->tx_busy   = 0;
    }
}

void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	460c      	mov	r4, r1
 8002934:	4605      	mov	r5, r0
    // default implementation (__weak) is used in favor of nrf_receive_packet
	  HAL_UART_Transmit(&huart3,data,strlen(data),1000);
 8002936:	4608      	mov	r0, r1
 8002938:	f7fd fc7e 	bl	8000238 <strlen>
 800293c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002940:	b282      	uxth	r2, r0
 8002942:	4621      	mov	r1, r4
 8002944:	4803      	ldr	r0, [pc, #12]	; (8002954 <nrf_packet_received_callback+0x24>)
 8002946:	f7ff fc05 	bl	8002154 <HAL_UART_Transmit>
    dev->rx_busy = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8002950:	bd38      	pop	{r3, r4, r5, pc}
 8002952:	bf00      	nop
 8002954:	2002002c 	.word	0x2002002c

08002958 <nrf_read_register>:
}

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8002958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	ac04      	add	r4, sp, #16
 800295e:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) !=
 8002962:	2301      	movs	r3, #1
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	4622      	mov	r2, r4
 800296a:	f7ff ff95 	bl	8002898 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800296e:	3000      	adds	r0, #0
 8002970:	bf18      	it	ne
 8002972:	2001      	movne	r0, #1
 8002974:	b004      	add	sp, #16
 8002976:	bd10      	pop	{r4, pc}

08002978 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8002978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 800297a:	2400      	movs	r4, #0
 800297c:	ab04      	add	r3, sp, #16
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 800297e:	f041 0120 	orr.w	r1, r1, #32
    uint8_t rx = 0;
 8002982:	f803 4d01 	strb.w	r4, [r3, #-1]!
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 8002986:	2401      	movs	r4, #1
 8002988:	9400      	str	r4, [sp, #0]
 800298a:	f7ff ff85 	bl	8002898 <nrf_send_command>
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 800298e:	3000      	adds	r0, #0
 8002990:	bf18      	it	ne
 8002992:	2001      	movne	r0, #1
 8002994:	b004      	add	sp, #16
 8002996:	bd10      	pop	{r4, pc}

08002998 <nrf_read_rx_payload>:

NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
    uint8_t tx[dev->config.payload_length];
 800299c:	7902      	ldrb	r2, [r0, #4]
NRF_RESULT nrf_read_rx_payload(nrf24l01* dev, uint8_t* data) {
 800299e:	af02      	add	r7, sp, #8
    uint8_t tx[dev->config.payload_length];
 80029a0:	1dd3      	adds	r3, r2, #7
 80029a2:	f023 0307 	bic.w	r3, r3, #7
 80029a6:	ebad 0d03 	sub.w	sp, sp, r3
    if (nrf_send_command(dev, NRF_CMD_R_RX_PAYLOAD, tx, data,
 80029aa:	460b      	mov	r3, r1
 80029ac:	2161      	movs	r1, #97	; 0x61
 80029ae:	9200      	str	r2, [sp, #0]
 80029b0:	aa02      	add	r2, sp, #8
 80029b2:	f7ff ff71 	bl	8002898 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80029b6:	3000      	adds	r0, #0
 80029b8:	bf18      	it	ne
 80029ba:	2001      	movne	r0, #1
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <nrf_flush_tx>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_flush_tx(nrf24l01* dev) {
 80029c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 80029c2:	2300      	movs	r3, #0
    uint8_t tx = 0;
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 80029c4:	f10d 020f 	add.w	r2, sp, #15
 80029c8:	21e1      	movs	r1, #225	; 0xe1
    uint8_t rx = 0;
 80029ca:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 80029ce:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_TX, &tx, &rx, 0) != NRF_OK) {
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f10d 030e 	add.w	r3, sp, #14
 80029d8:	f7ff ff5e 	bl	8002898 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80029dc:	3000      	adds	r0, #0
 80029de:	bf18      	it	ne
 80029e0:	2001      	movne	r0, #1
 80029e2:	b005      	add	sp, #20
 80029e4:	f85d fb04 	ldr.w	pc, [sp], #4

080029e8 <nrf_flush_rx>:

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 80029e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 80029ea:	2300      	movs	r3, #0
    uint8_t tx = 0;
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 80029ec:	f10d 020f 	add.w	r2, sp, #15
 80029f0:	21e2      	movs	r1, #226	; 0xe2
    uint8_t rx = 0;
 80029f2:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t tx = 0;
 80029f6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f10d 030e 	add.w	r3, sp, #14
 8002a00:	f7ff ff4a 	bl	8002898 <nrf_send_command>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002a04:	3000      	adds	r0, #0
 8002a06:	bf18      	it	ne
 8002a08:	2001      	movne	r0, #1
 8002a0a:	b005      	add	sp, #20
 8002a0c:	f85d fb04 	ldr.w	pc, [sp], #4

08002a10 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8002a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8002a16:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002a18:	2106      	movs	r1, #6
    uint8_t reg = 0;
 8002a1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002a1e:	4622      	mov	r2, r4
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8002a20:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002a22:	f7ff ff99 	bl	8002958 <nrf_read_register>
 8002a26:	b110      	cbz	r0, 8002a2e <nrf_set_data_rate+0x1e>
        return NRF_ERROR;
 8002a28:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.data_rate = rate;
    return NRF_OK;
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
 8002a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rate & 1) { // low bit set
 8002a32:	f016 0f01 	tst.w	r6, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002a36:	4622      	mov	r2, r4
 8002a38:	f04f 0106 	mov.w	r1, #6
        reg |= 1 << 5;
 8002a3c:	bf14      	ite	ne
 8002a3e:	f043 0320 	orrne.w	r3, r3, #32
        reg &= ~(1 << 5);
 8002a42:	f023 0320 	biceq.w	r3, r3, #32
    if (rate & 2) { // high bit set
 8002a46:	f016 0f02 	tst.w	r6, #2
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002a4a:	4628      	mov	r0, r5
        reg &= ~(1 << 5);
 8002a4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002a50:	f89d 3007 	ldrb.w	r3, [sp, #7]
        reg |= 1 << 3;
 8002a54:	bf14      	ite	ne
 8002a56:	f043 0308 	orrne.w	r3, r3, #8
        reg &= ~(1 << 3);
 8002a5a:	f023 0308 	biceq.w	r3, r3, #8
 8002a5e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8002a62:	f7ff ff89 	bl	8002978 <nrf_write_register>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d1de      	bne.n	8002a28 <nrf_set_data_rate+0x18>
    dev->config.data_rate = rate;
 8002a6a:	702e      	strb	r6, [r5, #0]
    return NRF_OK;
 8002a6c:	e7dd      	b.n	8002a2a <nrf_set_data_rate+0x1a>

08002a6e <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8002a6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	ac02      	add	r4, sp, #8
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8002a74:	2107      	movs	r1, #7
NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8002a76:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002a78:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	f7ff ff6b 	bl	8002958 <nrf_read_register>
 8002a82:	b978      	cbnz	r0, 8002aa4 <nrf_clear_interrupts+0x36>
        return NRF_ERROR;
    }

    reg |= 7 << 4; // setting bits 4,5,6
 8002a84:	f89d 3007 	ldrb.w	r3, [sp, #7]

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8002a88:	4622      	mov	r2, r4
 8002a8a:	2107      	movs	r1, #7
 8002a8c:	4628      	mov	r0, r5
    reg |= 7 << 4; // setting bits 4,5,6
 8002a8e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a92:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8002a96:	f7ff ff6f 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002a9a:	3000      	adds	r0, #0
 8002a9c:	bf18      	it	ne
 8002a9e:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002aa0:	b003      	add	sp, #12
 8002aa2:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e7fb      	b.n	8002aa0 <nrf_clear_interrupts+0x32>

08002aa8 <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8002aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ch &= 0x7F;
    uint8_t reg = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	ad02      	add	r5, sp, #8
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8002aae:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8002ab0:	2105      	movs	r1, #5
    uint8_t reg = 0;
 8002ab2:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8002ab6:	462a      	mov	r2, r5
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8002ab8:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8002aba:	f7ff ff4d 	bl	8002958 <nrf_read_register>
 8002abe:	b110      	cbz	r0, 8002ac6 <nrf_set_rf_channel+0x1e>
 8002ac0:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rf_channel = ch;
    return NRF_OK;
}
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
    reg |= ch; // setting channel
 8002ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ch &= 0x7F;
 8002aca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8002ace:	462a      	mov	r2, r5
 8002ad0:	2105      	movs	r1, #5
    reg |= ch; // setting channel
 8002ad2:	4323      	orrs	r3, r4
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8002ad4:	4630      	mov	r0, r6
    reg |= ch; // setting channel
 8002ad6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 8002ada:	f7ff ff4d 	bl	8002978 <nrf_write_register>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <nrf_set_rf_channel+0x18>
    dev->config.rf_channel = ch;
 8002ae2:	71f4      	strb	r4, [r6, #7]
    return NRF_OK;
 8002ae4:	e7ed      	b.n	8002ac2 <nrf_set_rf_channel+0x1a>

08002ae6 <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8002ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    count &= 0x0F;
    uint8_t reg = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	ad02      	add	r5, sp, #8
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8002aec:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002aee:	2104      	movs	r1, #4
    uint8_t reg = 0;
 8002af0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002af4:	462a      	mov	r2, r5
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 8002af6:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002af8:	f7ff ff2e 	bl	8002958 <nrf_read_register>
 8002afc:	b110      	cbz	r0, 8002b04 <nrf_set_retransmittion_count+0x1e>
        return NRF_ERROR;
 8002afe:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_count = count;
    return NRF_OK;
}
 8002b00:	b002      	add	sp, #8
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8002b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    count &= 0x0F;
 8002b08:	f004 040f 	and.w	r4, r4, #15
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b0c:	462a      	mov	r2, r5
 8002b0e:	2104      	movs	r1, #4
    reg &= 0xF0;  // clearing bits 0,1,2,3
 8002b10:	f023 030f 	bic.w	r3, r3, #15
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b14:	4630      	mov	r0, r6
    reg |= count; // setting count
 8002b16:	4323      	orrs	r3, r4
 8002b18:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b1c:	f7ff ff2c 	bl	8002978 <nrf_write_register>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d1ec      	bne.n	8002afe <nrf_set_retransmittion_count+0x18>
    dev->config.retransmit_count = count;
 8002b24:	7174      	strb	r4, [r6, #5]
    return NRF_OK;
 8002b26:	e7eb      	b.n	8002b00 <nrf_set_retransmittion_count+0x1a>

08002b28 <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8002b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    delay &= 0x0F;
    uint8_t reg = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	ad02      	add	r5, sp, #8
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8002b2e:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b30:	2104      	movs	r1, #4
    uint8_t reg = 0;
 8002b32:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b36:	462a      	mov	r2, r5
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8002b38:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b3a:	f7ff ff0d 	bl	8002958 <nrf_read_register>
 8002b3e:	b110      	cbz	r0, 8002b46 <nrf_set_retransmittion_delay+0x1e>
        return NRF_ERROR;
 8002b40:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_delay = delay;
    return NRF_OK;
}
 8002b42:	b002      	add	sp, #8
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8002b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    delay &= 0x0F;
 8002b4a:	f004 040f 	and.w	r4, r4, #15
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b4e:	462a      	mov	r2, r5
 8002b50:	2104      	movs	r1, #4
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8002b52:	f003 030f 	and.w	r3, r3, #15
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b56:	4630      	mov	r0, r6
    reg |= delay << 4; // setting delay
 8002b58:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002b5c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8002b60:	f7ff ff0a 	bl	8002978 <nrf_write_register>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d1eb      	bne.n	8002b40 <nrf_set_retransmittion_delay+0x18>
    dev->config.retransmit_delay = delay;
 8002b68:	71b4      	strb	r4, [r6, #6]
    return NRF_OK;
 8002b6a:	e7ea      	b.n	8002b42 <nrf_set_retransmittion_delay+0x1a>

08002b6c <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	ac02      	add	r4, sp, #8
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002b72:	460e      	mov	r6, r1
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002b74:	2103      	movs	r1, #3
    uint8_t reg = 0;
 8002b76:	f804 3d01 	strb.w	r3, [r4, #-1]!
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002b7a:	4622      	mov	r2, r4
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8002b7c:	4605      	mov	r5, r0
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002b7e:	f7ff feeb 	bl	8002958 <nrf_read_register>
 8002b82:	b110      	cbz	r0, 8002b8a <nrf_set_address_width+0x1e>
        return NRF_ERROR;
 8002b84:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.addr_width = width;
    return NRF_OK;
}
 8002b86:	b002      	add	sp, #8
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
    reg &= 0x03;  // clearing bits 0,1
 8002b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002b8e:	4622      	mov	r2, r4
 8002b90:	2103      	movs	r1, #3
 8002b92:	4628      	mov	r0, r5
    reg &= 0x03;  // clearing bits 0,1
 8002b94:	f003 0303 	and.w	r3, r3, #3
    reg |= width; // setting delay
 8002b98:	4333      	orrs	r3, r6
 8002b9a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8002b9e:	f7ff feeb 	bl	8002978 <nrf_write_register>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d1ee      	bne.n	8002b84 <nrf_set_address_width+0x18>
    dev->config.addr_width = width;
 8002ba6:	70ee      	strb	r6, [r5, #3]
    return NRF_OK;
 8002ba8:	e7ed      	b.n	8002b86 <nrf_set_address_width+0x1a>

08002baa <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 8002baa:	b507      	push	{r0, r1, r2, lr}
 8002bac:	aa02      	add	r2, sp, #8
 8002bae:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	f7ff fee0 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002bb8:	3000      	adds	r0, #0
 8002bba:	bf18      	it	ne
 8002bbc:	2001      	movne	r0, #1
 8002bbe:	b003      	add	sp, #12
 8002bc0:	f85d fb04 	ldr.w	pc, [sp], #4

08002bc4 <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	ad02      	add	r5, sp, #8
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002bca:	460c      	mov	r4, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002bcc:	2101      	movs	r1, #1
    uint8_t reg = 0;
 8002bce:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002bd2:	462a      	mov	r2, r5
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8002bd4:	4606      	mov	r6, r0
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002bd6:	f7ff febf 	bl	8002958 <nrf_read_register>
 8002bda:	2101      	movs	r1, #1
 8002bdc:	b978      	cbnz	r0, 8002bfe <nrf_enable_auto_ack+0x3a>

    reg |= 1 << pipe;
 8002bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002be2:	fa01 f404 	lsl.w	r4, r1, r4

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8002be6:	462a      	mov	r2, r5
 8002be8:	4630      	mov	r0, r6
    reg |= 1 << pipe;
 8002bea:	431c      	orrs	r4, r3
 8002bec:	f88d 4007 	strb.w	r4, [sp, #7]
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 8002bf0:	f7ff fec2 	bl	8002978 <nrf_write_register>
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002bf4:	3000      	adds	r0, #0
 8002bf6:	bf18      	it	ne
 8002bf8:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8002bfe:	4608      	mov	r0, r1
 8002c00:	e7fb      	b.n	8002bfa <nrf_enable_auto_ack+0x36>

08002c02 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8002c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c04:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002c06:	ac02      	add	r4, sp, #8
 8002c08:	2100      	movs	r1, #0
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 8002c0a:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002c0c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c10:	4622      	mov	r2, r4
 8002c12:	f7ff fea1 	bl	8002958 <nrf_read_register>
 8002c16:	b998      	cbnz	r0, 8002c40 <nrf_enable_crc+0x3e>
 8002c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (activate) {
 8002c1c:	b16e      	cbz	r6, 8002c3a <nrf_enable_crc+0x38>
        reg |= 1 << 3;
 8002c1e:	f043 0308 	orr.w	r3, r3, #8
    } else {
        reg &= ~(1 << 3);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c22:	4622      	mov	r2, r4
 8002c24:	2100      	movs	r1, #0
 8002c26:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8002c28:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c2c:	f7ff fea4 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002c30:	3000      	adds	r0, #0
 8002c32:	bf18      	it	ne
 8002c34:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002c36:	b002      	add	sp, #8
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 3);
 8002c3a:	f023 0308 	bic.w	r3, r3, #8
 8002c3e:	e7f0      	b.n	8002c22 <nrf_enable_crc+0x20>
        return NRF_ERROR;
 8002c40:	2001      	movs	r0, #1
 8002c42:	e7f8      	b.n	8002c36 <nrf_enable_crc+0x34>

08002c44 <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8002c44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c46:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002c48:	ac02      	add	r4, sp, #8
 8002c4a:	2100      	movs	r1, #0
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8002c4c:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002c4e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c52:	4622      	mov	r2, r4
 8002c54:	f7ff fe80 	bl	8002958 <nrf_read_register>
 8002c58:	b110      	cbz	r0, 8002c60 <nrf_set_crc_width+0x1c>
        return NRF_ERROR;
 8002c5a:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.crc_width = width;
    return NRF_OK;
}
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
    if (width == NRF_CRC_WIDTH_2B) {
 8002c60:	2e01      	cmp	r6, #1
 8002c62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c66:	4622      	mov	r2, r4
 8002c68:	f04f 0100 	mov.w	r1, #0
        reg |= 1 << 2;
 8002c6c:	bf0c      	ite	eq
 8002c6e:	f043 0304 	orreq.w	r3, r3, #4
        reg &= ~(1 << 3);
 8002c72:	f023 0308 	bicne.w	r3, r3, #8
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c76:	4628      	mov	r0, r5
        reg &= ~(1 << 3);
 8002c78:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c7c:	f7ff fe7c 	bl	8002978 <nrf_write_register>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d1ea      	bne.n	8002c5a <nrf_set_crc_width+0x16>
    dev->config.crc_width = width;
 8002c84:	70ae      	strb	r6, [r5, #2]
    return NRF_OK;
 8002c86:	e7e9      	b.n	8002c5c <nrf_set_crc_width+0x18>

08002c88 <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8002c88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c8a:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002c8c:	ac02      	add	r4, sp, #8
 8002c8e:	2100      	movs	r1, #0
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8002c90:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002c92:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002c96:	4622      	mov	r2, r4
 8002c98:	f7ff fe5e 	bl	8002958 <nrf_read_register>
 8002c9c:	b998      	cbnz	r0, 8002cc6 <nrf_power_up+0x3e>
 8002c9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (power_up) {
 8002ca2:	b16e      	cbz	r6, 8002cc0 <nrf_power_up+0x38>
        reg |= 1 << 1;
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
    } else {
        reg &= ~(1 << 1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002ca8:	4622      	mov	r2, r4
 8002caa:	2100      	movs	r1, #0
 8002cac:	4628      	mov	r0, r5
        reg &= ~(1 << 1);
 8002cae:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002cb2:	f7ff fe61 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002cb6:	3000      	adds	r0, #0
 8002cb8:	bf18      	it	ne
 8002cba:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 1);
 8002cc0:	f023 0302 	bic.w	r3, r3, #2
 8002cc4:	e7f0      	b.n	8002ca8 <nrf_power_up+0x20>
        return NRF_ERROR;
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	e7f8      	b.n	8002cbc <nrf_power_up+0x34>

08002cca <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8002cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ccc:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002cce:	ac02      	add	r4, sp, #8
 8002cd0:	2100      	movs	r1, #0
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8002cd2:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002cd4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002cd8:	4622      	mov	r2, r4
 8002cda:	f7ff fe3d 	bl	8002958 <nrf_read_register>
 8002cde:	b998      	cbnz	r0, 8002d08 <nrf_rx_tx_control+0x3e>
 8002ce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (rx) {
 8002ce4:	b16e      	cbz	r6, 8002d02 <nrf_rx_tx_control+0x38>
        reg |= 1;
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
    } else {
        reg &= ~(1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002cea:	4622      	mov	r2, r4
 8002cec:	2100      	movs	r1, #0
 8002cee:	4628      	mov	r0, r5
        reg &= ~(1);
 8002cf0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002cf4:	f7ff fe40 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002cf8:	3000      	adds	r0, #0
 8002cfa:	bf18      	it	ne
 8002cfc:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1);
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	e7f0      	b.n	8002cea <nrf_rx_tx_control+0x20>
        return NRF_ERROR;
 8002d08:	2001      	movs	r0, #1
 8002d0a:	e7f8      	b.n	8002cfe <nrf_rx_tx_control+0x34>

08002d0c <nrf_irq_handler>:
void nrf_irq_handler(nrf24l01* dev) {
 8002d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	ad02      	add	r5, sp, #8
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8002d12:	2107      	movs	r1, #7
void nrf_irq_handler(nrf24l01* dev) {
 8002d14:	4604      	mov	r4, r0
    uint8_t status = 0;
 8002d16:	f805 3d02 	strb.w	r3, [r5, #-2]!
    if (nrf_read_register(dev, NRF_STATUS, &status) != NRF_OK) { return; }
 8002d1a:	462a      	mov	r2, r5
 8002d1c:	f7ff fe1c 	bl	8002958 <nrf_read_register>
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d177      	bne.n	8002e14 <nrf_irq_handler+0x108>
    if ((status & (1 << 6))) { // RX FIFO Interrupt
 8002d24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002d28:	065e      	lsls	r6, r3, #25
 8002d2a:	d52a      	bpl.n	8002d82 <nrf_irq_handler+0x76>
        uint8_t fifo_status = 0;
 8002d2c:	ae02      	add	r6, sp, #8
 8002d2e:	f806 0d01 	strb.w	r0, [r6, #-1]!
        ce_reset(dev);
 8002d32:	4620      	mov	r0, r4
 8002d34:	f7ff fda6 	bl	8002884 <ce_reset>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002d38:	462a      	mov	r2, r5
 8002d3a:	2107      	movs	r1, #7
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff fe1b 	bl	8002978 <nrf_write_register>
        nrf_read_register(dev, NRF_FIFO_STATUS, &fifo_status);
 8002d42:	4632      	mov	r2, r6
 8002d44:	2117      	movs	r1, #23
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff fe06 	bl	8002958 <nrf_read_register>
        if ((fifo_status & 1) == 0) {
 8002d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d50:	07d8      	lsls	r0, r3, #31
 8002d52:	d413      	bmi.n	8002d7c <nrf_irq_handler+0x70>
            uint8_t* rx_buffer = dev->config.rx_buffer;
 8002d54:	6926      	ldr	r6, [r4, #16]
            nrf_read_rx_payload(dev, rx_buffer);
 8002d56:	4620      	mov	r0, r4
 8002d58:	4631      	mov	r1, r6
 8002d5a:	f7ff fe1d 	bl	8002998 <nrf_read_rx_payload>
            status |= 1 << 6;
 8002d5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8002d62:	2107      	movs	r1, #7
 8002d64:	462a      	mov	r2, r5
            status |= 1 << 6;
 8002d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            nrf_write_register(dev, NRF_STATUS, &status);
 8002d6a:	4620      	mov	r0, r4
            status |= 1 << 6;
 8002d6c:	f88d 3006 	strb.w	r3, [sp, #6]
            nrf_write_register(dev, NRF_STATUS, &status);
 8002d70:	f7ff fe02 	bl	8002978 <nrf_write_register>
            nrf_packet_received_callback(dev, rx_buffer);
 8002d74:	4631      	mov	r1, r6
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fdda 	bl	8002930 <nrf_packet_received_callback>
        ce_set(dev);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff fd86 	bl	800288e <ce_set>
    if ((status & (1 << 5))) { // TX Data Sent Interrupt
 8002d82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002d86:	0699      	lsls	r1, r3, #26
 8002d88:	d51a      	bpl.n	8002dc0 <nrf_irq_handler+0xb4>
        status |= 1 << 5;      // clear the interrupt flag
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
        ce_reset(dev);
 8002d8e:	4620      	mov	r0, r4
        status |= 1 << 5;      // clear the interrupt flag
 8002d90:	f88d 3006 	strb.w	r3, [sp, #6]
        ce_reset(dev);
 8002d94:	f7ff fd76 	bl	8002884 <ce_reset>
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7ff ff95 	bl	8002cca <nrf_rx_tx_control>
        dev->state = NRF_STATE_RX;
 8002da0:	2301      	movs	r3, #1
        ce_set(dev);
 8002da2:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 8002da4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        ce_set(dev);
 8002da8:	f7ff fd71 	bl	800288e <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002dac:	462a      	mov	r2, r5
 8002dae:	2107      	movs	r1, #7
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff fde1 	bl	8002978 <nrf_write_register>
        dev->tx_result = NRF_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8002dbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if ((status & (1 << 4))) { // MaxRetransmits reached
 8002dc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002dc4:	06da      	lsls	r2, r3, #27
 8002dc6:	d525      	bpl.n	8002e14 <nrf_irq_handler+0x108>
        status |= 1 << 4;
 8002dc8:	f043 0310 	orr.w	r3, r3, #16
        nrf_flush_tx(dev);
 8002dcc:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 8002dce:	2601      	movs	r6, #1
        status |= 1 << 4;
 8002dd0:	f88d 3006 	strb.w	r3, [sp, #6]
        nrf_flush_tx(dev);
 8002dd4:	f7ff fdf4 	bl	80029c0 <nrf_flush_tx>
        nrf_power_up(dev, 0); // power down
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff ff54 	bl	8002c88 <nrf_power_up>
        nrf_power_up(dev, 1); // power up
 8002de0:	2101      	movs	r1, #1
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff ff50 	bl	8002c88 <nrf_power_up>
        ce_reset(dev);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff fd4b 	bl	8002884 <ce_reset>
        nrf_rx_tx_control(dev, NRF_STATE_RX);
 8002dee:	2101      	movs	r1, #1
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ff6a 	bl	8002cca <nrf_rx_tx_control>
        ce_set(dev);
 8002df6:	4620      	mov	r0, r4
        dev->state = NRF_STATE_RX;
 8002df8:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
        ce_set(dev);
 8002dfc:	f7ff fd47 	bl	800288e <ce_set>
        nrf_write_register(dev, NRF_STATUS, &status);
 8002e00:	462a      	mov	r2, r5
 8002e02:	2107      	movs	r1, #7
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff fdb7 	bl	8002978 <nrf_write_register>
        dev->tx_busy   = 0;
 8002e0a:	2300      	movs	r3, #0
        dev->tx_result = NRF_ERROR;
 8002e0c:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        dev->tx_busy   = 0;
 8002e10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002e14:	b002      	add	sp, #8
 8002e16:	bd70      	pop	{r4, r5, r6, pc}

08002e18 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8002e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e1a:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002e1c:	ac02      	add	r4, sp, #8
 8002e1e:	2100      	movs	r1, #0
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8002e20:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002e22:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e26:	4622      	mov	r2, r4
 8002e28:	f7ff fd96 	bl	8002958 <nrf_read_register>
 8002e2c:	b998      	cbnz	r0, 8002e56 <nrf_enable_rx_data_ready_irq+0x3e>
 8002e2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }

    if (!activate) {
 8002e32:	b96e      	cbnz	r6, 8002e50 <nrf_enable_rx_data_ready_irq+0x38>
        reg |= 1 << 6;
 8002e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    } else {
        reg &= ~(1 << 6);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e38:	4622      	mov	r2, r4
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4628      	mov	r0, r5
        reg &= ~(1 << 6);
 8002e3e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e42:	f7ff fd99 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002e46:	3000      	adds	r0, #0
 8002e48:	bf18      	it	ne
 8002e4a:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 6);
 8002e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e54:	e7f0      	b.n	8002e38 <nrf_enable_rx_data_ready_irq+0x20>
        return NRF_ERROR;
 8002e56:	2001      	movs	r0, #1
 8002e58:	e7f8      	b.n	8002e4c <nrf_enable_rx_data_ready_irq+0x34>

08002e5a <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e5c:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002e5e:	ac02      	add	r4, sp, #8
 8002e60:	2100      	movs	r1, #0
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8002e62:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002e64:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e68:	4622      	mov	r2, r4
 8002e6a:	f7ff fd75 	bl	8002958 <nrf_read_register>
 8002e6e:	b998      	cbnz	r0, 8002e98 <nrf_enable_tx_data_sent_irq+0x3e>
 8002e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8002e74:	b96e      	cbnz	r6, 8002e92 <nrf_enable_tx_data_sent_irq+0x38>
        reg |= 1 << 5;
 8002e76:	f043 0320 	orr.w	r3, r3, #32
    } else {
        reg &= ~(1 << 5);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4628      	mov	r0, r5
        reg &= ~(1 << 5);
 8002e80:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002e84:	f7ff fd78 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002e88:	3000      	adds	r0, #0
 8002e8a:	bf18      	it	ne
 8002e8c:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 5);
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	e7f0      	b.n	8002e7a <nrf_enable_tx_data_sent_irq+0x20>
        return NRF_ERROR;
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e7f8      	b.n	8002e8e <nrf_enable_tx_data_sent_irq+0x34>

08002e9c <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e9e:	460e      	mov	r6, r1
    uint8_t reg = 0;
 8002ea0:	ac02      	add	r4, sp, #8
 8002ea2:	2100      	movs	r1, #0
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8002ea4:	4605      	mov	r5, r0
    uint8_t reg = 0;
 8002ea6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002eaa:	4622      	mov	r2, r4
 8002eac:	f7ff fd54 	bl	8002958 <nrf_read_register>
 8002eb0:	b998      	cbnz	r0, 8002eda <nrf_enable_max_retransmit_irq+0x3e>
 8002eb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRF_ERROR;
    }
    if (!activate) {
 8002eb6:	b96e      	cbnz	r6, 8002ed4 <nrf_enable_max_retransmit_irq+0x38>
        reg |= 1 << 4;
 8002eb8:	f043 0310 	orr.w	r3, r3, #16
    } else {
        reg &= ~(1 << 4);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4628      	mov	r0, r5
        reg &= ~(1 << 4);
 8002ec2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8002ec6:	f7ff fd57 	bl	8002978 <nrf_write_register>
        return NRF_ERROR;
 8002eca:	3000      	adds	r0, #0
 8002ecc:	bf18      	it	ne
 8002ece:	2001      	movne	r0, #1
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
        reg &= ~(1 << 4);
 8002ed4:	f023 0310 	bic.w	r3, r3, #16
 8002ed8:	e7f0      	b.n	8002ebc <nrf_enable_max_retransmit_irq+0x20>
        return NRF_ERROR;
 8002eda:	2001      	movs	r0, #1
 8002edc:	e7f8      	b.n	8002ed0 <nrf_enable_max_retransmit_irq+0x34>

08002ede <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8002ede:	b530      	push	{r4, r5, lr}
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8002ee0:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	212a      	movs	r1, #42	; 0x2a
 8002eec:	ab02      	add	r3, sp, #8
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8002eee:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8002ef0:	f7ff fcd2 	bl	8002898 <nrf_send_command>
 8002ef4:	b910      	cbnz	r0, 8002efc <nrf_set_rx_address_p0+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8002ef6:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 8002ef8:	b005      	add	sp, #20
 8002efa:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002efc:	2001      	movs	r0, #1
 8002efe:	e7fb      	b.n	8002ef8 <nrf_set_rx_address_p0+0x1a>

08002f00 <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8002f00:	b530      	push	{r4, r5, lr}
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8002f02:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8002f04:	b085      	sub	sp, #20
 8002f06:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8002f08:	460a      	mov	r2, r1
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	212b      	movs	r1, #43	; 0x2b
 8002f0e:	ab02      	add	r3, sp, #8
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8002f10:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8002f12:	f7ff fcc1 	bl	8002898 <nrf_send_command>
 8002f16:	b910      	cbnz	r0, 8002f1e <nrf_set_rx_address_p1+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8002f18:	60ac      	str	r4, [r5, #8]
    return NRF_OK;
}
 8002f1a:	b005      	add	sp, #20
 8002f1c:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7fb      	b.n	8002f1a <nrf_set_rx_address_p1+0x1a>

08002f22 <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002f22:	b530      	push	{r4, r5, lr}
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002f24:	2305      	movs	r3, #5
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002f26:	b085      	sub	sp, #20
 8002f28:	460c      	mov	r4, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2130      	movs	r1, #48	; 0x30
 8002f30:	ab02      	add	r3, sp, #8
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8002f32:	4605      	mov	r5, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8002f34:	f7ff fcb0 	bl	8002898 <nrf_send_command>
 8002f38:	b910      	cbnz	r0, 8002f40 <nrf_set_tx_address+0x1e>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.tx_address = address;
 8002f3a:	60ec      	str	r4, [r5, #12]
    return NRF_OK;
}
 8002f3c:	b005      	add	sp, #20
 8002f3e:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8002f40:	2001      	movs	r0, #1
 8002f42:	e7fb      	b.n	8002f3c <nrf_set_tx_address+0x1a>

08002f44 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002f44:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8002f46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f4a:	aa02      	add	r2, sp, #8
NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8002f4c:	4604      	mov	r4, r0
    width &= 0x3F;
 8002f4e:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8002f52:	2111      	movs	r1, #17
 8002f54:	f7ff fd10 	bl	8002978 <nrf_write_register>
 8002f58:	b120      	cbz	r0, 8002f64 <nrf_set_rx_payload_width_p0+0x20>
        dev->config.payload_length = 0;
 8002f5a:	2300      	movs	r3, #0
        return NRF_ERROR;
 8002f5c:	2001      	movs	r0, #1
        dev->config.payload_length = 0;
 8002f5e:	7123      	strb	r3, [r4, #4]
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8002f60:	b002      	add	sp, #8
 8002f62:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f68:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8002f6a:	e7f9      	b.n	8002f60 <nrf_set_rx_payload_width_p0+0x1c>

08002f6c <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8002f6c:	b513      	push	{r0, r1, r4, lr}
    width &= 0x3F;
 8002f6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f72:	aa02      	add	r2, sp, #8
NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8002f74:	4604      	mov	r4, r0
    width &= 0x3F;
 8002f76:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8002f7a:	2112      	movs	r1, #18
 8002f7c:	f7ff fcfc 	bl	8002978 <nrf_write_register>
 8002f80:	b120      	cbz	r0, 8002f8c <nrf_set_rx_payload_width_p1+0x20>
        dev->config.payload_length = 0;
 8002f82:	2300      	movs	r3, #0
        return NRF_ERROR;
 8002f84:	2001      	movs	r0, #1
        dev->config.payload_length = 0;
 8002f86:	7123      	strb	r3, [r4, #4]
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd10      	pop	{r4, pc}
    dev->config.payload_length = width;
 8002f8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f90:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8002f92:	e7f9      	b.n	8002f88 <nrf_set_rx_payload_width_p1+0x1c>

08002f94 <nrf_init>:
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8002f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dev->config = *config;
 8002f96:	460e      	mov	r6, r1
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8002f98:	4604      	mov	r4, r0
    dev->config = *config;
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa8:	6833      	ldr	r3, [r6, #0]
    ce_reset(dev);
 8002faa:	4620      	mov	r0, r4
    dev->config = *config;
 8002fac:	602b      	str	r3, [r5, #0]
    uint8_t config_reg = 0;
 8002fae:	ad02      	add	r5, sp, #8
    ce_reset(dev);
 8002fb0:	f7ff fc68 	bl	8002884 <ce_reset>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	8c21      	ldrh	r1, [r4, #32]
 8002fb8:	69e0      	ldr	r0, [r4, #28]
 8002fba:	f7fd fc79 	bl	80008b0 <HAL_GPIO_WritePin>
    nrf_power_up(dev, true);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff fe61 	bl	8002c88 <nrf_power_up>
    uint8_t config_reg = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    while ((config_reg & 2) == 0) { // wait for powerup
 8002fcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002fd0:	f011 0102 	ands.w	r1, r1, #2
 8002fd4:	d053      	beq.n	800307e <nrf_init+0xea>
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 8002fd6:	7921      	ldrb	r1, [r4, #4]
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f7ff ffb3 	bl	8002f44 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 8002fde:	7921      	ldrb	r1, [r4, #4]
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7ff ffc3 	bl	8002f6c <nrf_set_rx_payload_width_p1>
    nrf_set_rx_address_p1(dev, dev->config.rx_address);
 8002fe6:	68a1      	ldr	r1, [r4, #8]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff ff89 	bl	8002f00 <nrf_set_rx_address_p1>
    nrf_set_rx_address_p0(dev, dev->config.tx_address);
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f7ff ff74 	bl	8002ede <nrf_set_rx_address_p0>
    nrf_set_tx_address(dev, dev->config.tx_address);
 8002ff6:	68e1      	ldr	r1, [r4, #12]
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff ff92 	bl	8002f22 <nrf_set_tx_address>
    nrf_enable_rx_data_ready_irq(dev, 1);
 8002ffe:	2101      	movs	r1, #1
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ff09 	bl	8002e18 <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 8003006:	2101      	movs	r1, #1
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff ff26 	bl	8002e5a <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 800300e:	2101      	movs	r1, #1
 8003010:	4620      	mov	r0, r4
 8003012:	f7ff ff43 	bl	8002e9c <nrf_enable_max_retransmit_irq>
    nrf_enable_crc(dev, 1);
 8003016:	2101      	movs	r1, #1
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff fdf2 	bl	8002c02 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 800301e:	78a1      	ldrb	r1, [r4, #2]
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff fe0f 	bl	8002c44 <nrf_set_crc_width>
    nrf_set_address_width(dev, dev->config.addr_width);
 8003026:	78e1      	ldrb	r1, [r4, #3]
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff fd9f 	bl	8002b6c <nrf_set_address_width>
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 800302e:	79e1      	ldrb	r1, [r4, #7]
 8003030:	4620      	mov	r0, r4
 8003032:	f7ff fd39 	bl	8002aa8 <nrf_set_rf_channel>
    nrf_set_data_rate(dev, dev->config.data_rate);
 8003036:	7821      	ldrb	r1, [r4, #0]
 8003038:	4620      	mov	r0, r4
 800303a:	f7ff fce9 	bl	8002a10 <nrf_set_data_rate>
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 800303e:	7961      	ldrb	r1, [r4, #5]
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff fd50 	bl	8002ae6 <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 8003046:	79a1      	ldrb	r1, [r4, #6]
 8003048:	4620      	mov	r0, r4
 800304a:	f7ff fd6d 	bl	8002b28 <nrf_set_retransmittion_delay>
    nrf_set_rx_pipes(dev, 0x03);
 800304e:	2103      	movs	r1, #3
 8003050:	4620      	mov	r0, r4
 8003052:	f7ff fdaa 	bl	8002baa <nrf_set_rx_pipes>
    nrf_enable_auto_ack(dev, 0);
 8003056:	2100      	movs	r1, #0
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff fdb3 	bl	8002bc4 <nrf_enable_auto_ack>
    nrf_clear_interrupts(dev);
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff fd05 	bl	8002a6e <nrf_clear_interrupts>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 8003064:	2101      	movs	r1, #1
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff fe2f 	bl	8002cca <nrf_rx_tx_control>
    nrf_flush_rx(dev);
 800306c:	4620      	mov	r0, r4
 800306e:	f7ff fcbb 	bl	80029e8 <nrf_flush_rx>
    ce_set(dev);
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff fc0b 	bl	800288e <ce_set>
}
 8003078:	2000      	movs	r0, #0
 800307a:	b002      	add	sp, #8
 800307c:	bd70      	pop	{r4, r5, r6, pc}
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 800307e:	462a      	mov	r2, r5
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff fc69 	bl	8002958 <nrf_read_register>
 8003086:	e7a1      	b.n	8002fcc <nrf_init+0x38>

08003088 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_MspInit+0x2c>)
{
 800308a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
 8003094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003096:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800309a:	9200      	str	r2, [sp, #0]
 800309c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b0:	b002      	add	sp, #8
 80030b2:	4770      	bx	lr
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030b8:	b530      	push	{r4, r5, lr}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	2214      	movs	r2, #20
 80030c0:	2100      	movs	r1, #0
 80030c2:	a803      	add	r0, sp, #12
 80030c4:	f000 f93e 	bl	8003344 <memset>
  if(hspi->Instance==SPI3)
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_SPI_MspInit+0x88>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d135      	bne.n	800313c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030d0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030dc:	4819      	ldr	r0, [pc, #100]	; (8003144 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
 80030e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80030ea:	9200      	str	r2, [sp, #0]
 80030ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f0:	f042 0202 	orr.w	r2, r2, #2
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
 80030f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f8:	f002 0202 	and.w	r2, r2, #2
 80030fc:	9201      	str	r2, [sp, #4]
 80030fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003102:	f042 0204 	orr.w	r2, r2, #4
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800310c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003112:	9302      	str	r3, [sp, #8]
 8003114:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003116:	2304      	movs	r3, #4
 8003118:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800311a:	2307      	movs	r3, #7
 800311c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311e:	f7fd fadd 	bl	80006dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003122:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003126:	a903      	add	r1, sp, #12
 8003128:	4807      	ldr	r0, [pc, #28]	; (8003148 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800312a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003132:	2306      	movs	r3, #6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003136:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003138:	f7fd fad0 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800313c:	b009      	add	sp, #36	; 0x24
 800313e:	bd30      	pop	{r4, r5, pc}
 8003140:	40003c00 	.word	0x40003c00
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800

0800314c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800314c:	b510      	push	{r4, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003152:	2214      	movs	r2, #20
 8003154:	2100      	movs	r1, #0
 8003156:	a803      	add	r0, sp, #12
 8003158:	f000 f8f4 	bl	8003344 <memset>
  if(htim_base->Instance==TIM2)
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d114      	bne.n	800318e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003164:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003168:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003176:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003180:	f7fd fa50 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003184:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003186:	f7fd fa85 	bl	8000694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800318a:	b008      	add	sp, #32
 800318c:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <HAL_TIM_Base_MspInit+0x90>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d1fa      	bne.n	800318a <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_TIM_Base_MspInit+0x94>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	a903      	add	r1, sp, #12
 8003198:	4812      	ldr	r0, [pc, #72]	; (80031e4 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800319a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319c:	f042 0202 	orr.w	r2, r2, #2
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
 80031a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a4:	f002 0202 	and.w	r2, r2, #2
 80031a8:	9201      	str	r2, [sp, #4]
 80031aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	9302      	str	r3, [sp, #8]
 80031bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f7fd fa88 	bl	80006dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	201d      	movs	r0, #29
 80031d0:	4611      	mov	r1, r2
 80031d2:	f7fd fa27 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031d6:	201d      	movs	r0, #29
 80031d8:	e7d5      	b.n	8003186 <HAL_TIM_Base_MspInit+0x3a>
 80031da:	bf00      	nop
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020000 	.word	0x40020000

080031e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e8:	b510      	push	{r4, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ee:	2214      	movs	r2, #20
 80031f0:	2100      	movs	r1, #0
 80031f2:	a803      	add	r0, sp, #12
 80031f4:	f000 f8a6 	bl	8003344 <memset>
  if(huart->Instance==USART3)
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_UART_MspInit+0x60>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d120      	bne.n	8003242 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003200:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003204:	a903      	add	r1, sp, #12
 8003206:	4811      	ldr	r0, [pc, #68]	; (800324c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003212:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003216:	9201      	str	r2, [sp, #4]
 8003218:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800321a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321c:	f042 0208 	orr.w	r2, r2, #8
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	9302      	str	r3, [sp, #8]
 800322a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800322c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003230:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800323a:	2307      	movs	r3, #7
 800323c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800323e:	f7fd fa4d 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003242:	b008      	add	sp, #32
 8003244:	bd10      	pop	{r4, pc}
 8003246:	bf00      	nop
 8003248:	40004800 	.word	0x40004800
 800324c:	40020c00 	.word	0x40020c00

08003250 <NMI_Handler>:
 8003250:	4770      	bx	lr

08003252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003252:	e7fe      	b.n	8003252 <HardFault_Handler>

08003254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003254:	e7fe      	b.n	8003254 <MemManage_Handler>

08003256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003256:	e7fe      	b.n	8003256 <BusFault_Handler>

08003258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003258:	e7fe      	b.n	8003258 <UsageFault_Handler>

0800325a <SVC_Handler>:
 800325a:	4770      	bx	lr

0800325c <DebugMon_Handler>:
 800325c:	4770      	bx	lr

0800325e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325e:	4770      	bx	lr

08003260 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003260:	f7fd b9aa 	b.w	80005b8 <HAL_IncTick>

08003264 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003264:	2002      	movs	r0, #2
 8003266:	f7fd bb2f 	b.w	80008c8 <HAL_GPIO_EXTI_IRQHandler>
	...

0800326c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <TIM2_IRQHandler+0x8>)
 800326e:	f7fe ba98 	b.w	80017a2 <HAL_TIM_IRQHandler>
 8003272:	bf00      	nop
 8003274:	20020574 	.word	0x20020574

08003278 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <TIM3_IRQHandler+0x8>)
 800327a:	f7fe ba92 	b.w	80017a2 <HAL_TIM_IRQHandler>
 800327e:	bf00      	nop
 8003280:	200200ac 	.word	0x200200ac

08003284 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003284:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003288:	f7fd bb1e 	b.w	80008c8 <HAL_GPIO_EXTI_IRQHandler>

0800328c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SystemInit+0x18>)
 800328e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003292:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800329a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ae:	e003      	b.n	80032b8 <LoopCopyDataInit>

080032b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032b6:	3104      	adds	r1, #4

080032b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032b8:	480b      	ldr	r0, [pc, #44]	; (80032e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032c0:	d3f6      	bcc.n	80032b0 <CopyDataInit>
  ldr  r2, =_sbss
 80032c2:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032c4:	e002      	b.n	80032cc <LoopFillZerobss>

080032c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032c8:	f842 3b04 	str.w	r3, [r2], #4

080032cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032d0:	d3f9      	bcc.n	80032c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032d2:	f7ff ffdb 	bl	800328c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032d6:	f000 f811 	bl	80032fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032da:	f7ff f849 	bl	8002370 <main>
  bx  lr    
 80032de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032e0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80032e4:	080033f4 	.word	0x080033f4
  ldr  r0, =_sdata
 80032e8:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 80032ec:	2002000c 	.word	0x2002000c
  ldr  r2, =_sbss
 80032f0:	2002000c 	.word	0x2002000c
  ldr  r3, = _ebss
 80032f4:	200205e8 	.word	0x200205e8

080032f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f8:	e7fe      	b.n	80032f8 <ADC_IRQHandler>
	...

080032fc <__libc_init_array>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	4e0d      	ldr	r6, [pc, #52]	; (8003334 <__libc_init_array+0x38>)
 8003300:	4c0d      	ldr	r4, [pc, #52]	; (8003338 <__libc_init_array+0x3c>)
 8003302:	1ba4      	subs	r4, r4, r6
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	2500      	movs	r5, #0
 8003308:	42a5      	cmp	r5, r4
 800330a:	d109      	bne.n	8003320 <__libc_init_array+0x24>
 800330c:	4e0b      	ldr	r6, [pc, #44]	; (800333c <__libc_init_array+0x40>)
 800330e:	4c0c      	ldr	r4, [pc, #48]	; (8003340 <__libc_init_array+0x44>)
 8003310:	f000 f828 	bl	8003364 <_init>
 8003314:	1ba4      	subs	r4, r4, r6
 8003316:	10a4      	asrs	r4, r4, #2
 8003318:	2500      	movs	r5, #0
 800331a:	42a5      	cmp	r5, r4
 800331c:	d105      	bne.n	800332a <__libc_init_array+0x2e>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003324:	4798      	blx	r3
 8003326:	3501      	adds	r5, #1
 8003328:	e7ee      	b.n	8003308 <__libc_init_array+0xc>
 800332a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800332e:	4798      	blx	r3
 8003330:	3501      	adds	r5, #1
 8003332:	e7f2      	b.n	800331a <__libc_init_array+0x1e>
 8003334:	080033ec 	.word	0x080033ec
 8003338:	080033ec 	.word	0x080033ec
 800333c:	080033ec 	.word	0x080033ec
 8003340:	080033f0 	.word	0x080033f0

08003344 <memset>:
 8003344:	4402      	add	r2, r0
 8003346:	4603      	mov	r3, r0
 8003348:	4293      	cmp	r3, r2
 800334a:	d100      	bne.n	800334e <memset+0xa>
 800334c:	4770      	bx	lr
 800334e:	f803 1b01 	strb.w	r1, [r3], #1
 8003352:	e7f9      	b.n	8003348 <memset+0x4>

08003354 <strcpy>:
 8003354:	4603      	mov	r3, r0
 8003356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800335a:	f803 2b01 	strb.w	r2, [r3], #1
 800335e:	2a00      	cmp	r2, #0
 8003360:	d1f9      	bne.n	8003356 <strcpy+0x2>
 8003362:	4770      	bx	lr

08003364 <_init>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

08003370 <_fini>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr
