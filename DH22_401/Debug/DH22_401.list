
DH22_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08004650  08004650  00014650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08004908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000130  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000030c  2000030c  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e0cd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000209c  00000000  00000000  0002e2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005fec  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000048cb  00000000  00000000  00037878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003ae6  00000000  00000000  0003c143  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003fc29  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000025d4  00000000  00000000  0003fca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004638 	.word	0x08004638

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004638 	.word	0x08004638

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b97a 	b.w	8000f5c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	468c      	mov	ip, r1
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	9e08      	ldr	r6, [sp, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d151      	bne.n	8000d34 <__udivmoddi4+0xb4>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4617      	mov	r7, r2
 8000c94:	d96d      	bls.n	8000d72 <__udivmoddi4+0xf2>
 8000c96:	fab2 fe82 	clz	lr, r2
 8000c9a:	f1be 0f00 	cmp.w	lr, #0
 8000c9e:	d00b      	beq.n	8000cb8 <__udivmoddi4+0x38>
 8000ca0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ca8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cac:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cb8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cbc:	0c25      	lsrs	r5, r4, #16
 8000cbe:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc2:	fa1f f987 	uxth.w	r9, r7
 8000cc6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cce:	fb08 f309 	mul.w	r3, r8, r9
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x6c>
 8000cd6:	19ed      	adds	r5, r5, r7
 8000cd8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cdc:	f080 8123 	bcs.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	f240 8120 	bls.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	443d      	add	r5, r7
 8000cec:	1aed      	subs	r5, r5, r3
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cfc:	fb00 f909 	mul.w	r9, r0, r9
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x98>
 8000d04:	19e4      	adds	r4, r4, r7
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 810a 	bcs.w	8000f22 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8107 	bls.w	8000f22 <__udivmoddi4+0x2a2>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	eba4 0409 	sub.w	r4, r4, r9
 8000d1c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d20:	2100      	movs	r1, #0
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d061      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d26:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6034      	str	r4, [r6, #0]
 8000d2e:	6073      	str	r3, [r6, #4]
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0xc8>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d054      	beq.n	8000de6 <__udivmoddi4+0x166>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	f040 808e 	bne.w	8000e6e <__udivmoddi4+0x1ee>
 8000d52:	42ab      	cmp	r3, r5
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xdc>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2d0>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	46ac      	mov	ip, r5
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d03f      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d6a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	b912      	cbnz	r2, 8000d7a <__udivmoddi4+0xfa>
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7a:	fab7 fe87 	clz	lr, r7
 8000d7e:	f1be 0f00 	cmp.w	lr, #0
 8000d82:	d134      	bne.n	8000dee <__udivmoddi4+0x16e>
 8000d84:	1beb      	subs	r3, r5, r7
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d92:	0c25      	lsrs	r5, r4, #16
 8000d94:	fb02 3318 	mls	r3, r2, r8, r3
 8000d98:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9c:	fb0c f308 	mul.w	r3, ip, r8
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x134>
 8000da4:	19ed      	adds	r5, r5, r7
 8000da6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x132>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	f200 80d1 	bhi.w	8000f54 <__udivmoddi4+0x2d4>
 8000db2:	4680      	mov	r8, r0
 8000db4:	1aed      	subs	r5, r5, r3
 8000db6:	b2a3      	uxth	r3, r4
 8000db8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dbc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dc8:	45a4      	cmp	ip, r4
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x15c>
 8000dcc:	19e4      	adds	r4, r4, r7
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x15a>
 8000dd4:	45a4      	cmp	ip, r4
 8000dd6:	f200 80b8 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	eba4 040c 	sub.w	r4, r4, ip
 8000de0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de4:	e79d      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	f1ce 0420 	rsb	r4, lr, #32
 8000df2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000df6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dfe:	0c3a      	lsrs	r2, r7, #16
 8000e00:	fa25 f404 	lsr.w	r4, r5, r4
 8000e04:	ea48 0803 	orr.w	r8, r8, r3
 8000e08:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e0c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e10:	fb02 4411 	mls	r4, r2, r1, r4
 8000e14:	fa1f fc87 	uxth.w	ip, r7
 8000e18:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e1c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x1bc>
 8000e28:	19ed      	adds	r5, r5, r7
 8000e2a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e2e:	f080 808a 	bcs.w	8000f46 <__udivmoddi4+0x2c6>
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	f240 8087 	bls.w	8000f46 <__udivmoddi4+0x2c6>
 8000e38:	3902      	subs	r1, #2
 8000e3a:	443d      	add	r5, r7
 8000e3c:	1aeb      	subs	r3, r5, r3
 8000e3e:	fa1f f588 	uxth.w	r5, r8
 8000e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e46:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e4e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x1e6>
 8000e56:	19ed      	adds	r5, r5, r7
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	d26f      	bcs.n	8000f3e <__udivmoddi4+0x2be>
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	d96d      	bls.n	8000f3e <__udivmoddi4+0x2be>
 8000e62:	3802      	subs	r0, #2
 8000e64:	443d      	add	r5, r7
 8000e66:	1aeb      	subs	r3, r5, r3
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	e78f      	b.n	8000d8e <__udivmoddi4+0x10e>
 8000e6e:	f1c1 0720 	rsb	r7, r1, #32
 8000e72:	fa22 f807 	lsr.w	r8, r2, r7
 8000e76:	408b      	lsls	r3, r1
 8000e78:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7c:	ea48 0303 	orr.w	r3, r8, r3
 8000e80:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e84:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e8e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e92:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e96:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9a:	fa1f f883 	uxth.w	r8, r3
 8000e9e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea2:	fb09 f408 	mul.w	r4, r9, r8
 8000ea6:	42ac      	cmp	r4, r5
 8000ea8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eac:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x244>
 8000eb2:	18ed      	adds	r5, r5, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	d243      	bcs.n	8000f42 <__udivmoddi4+0x2c2>
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	d941      	bls.n	8000f42 <__udivmoddi4+0x2c2>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	441d      	add	r5, r3
 8000ec4:	1b2d      	subs	r5, r5, r4
 8000ec6:	fa1f fe8e 	uxth.w	lr, lr
 8000eca:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ece:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45a0      	cmp	r8, r4
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x26e>
 8000ede:	18e4      	adds	r4, r4, r3
 8000ee0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee4:	d229      	bcs.n	8000f3a <__udivmoddi4+0x2ba>
 8000ee6:	45a0      	cmp	r8, r4
 8000ee8:	d927      	bls.n	8000f3a <__udivmoddi4+0x2ba>
 8000eea:	3802      	subs	r0, #2
 8000eec:	441c      	add	r4, r3
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba4 0408 	sub.w	r4, r4, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454c      	cmp	r4, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	464d      	mov	r5, r9
 8000f00:	d315      	bcc.n	8000f2e <__udivmoddi4+0x2ae>
 8000f02:	d012      	beq.n	8000f2a <__udivmoddi4+0x2aa>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x29c>
 8000f06:	ebba 030e 	subs.w	r3, sl, lr
 8000f0a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40cb      	lsrs	r3, r1
 8000f14:	431f      	orrs	r7, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	6037      	str	r7, [r6, #0]
 8000f1a:	6074      	str	r4, [r6, #4]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	4618      	mov	r0, r3
 8000f24:	e6f8      	b.n	8000d18 <__udivmoddi4+0x98>
 8000f26:	4690      	mov	r8, r2
 8000f28:	e6e0      	b.n	8000cec <__udivmoddi4+0x6c>
 8000f2a:	45c2      	cmp	sl, r8
 8000f2c:	d2ea      	bcs.n	8000f04 <__udivmoddi4+0x284>
 8000f2e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f32:	eb69 0503 	sbc.w	r5, r9, r3
 8000f36:	3801      	subs	r0, #1
 8000f38:	e7e4      	b.n	8000f04 <__udivmoddi4+0x284>
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	e7d7      	b.n	8000eee <__udivmoddi4+0x26e>
 8000f3e:	4640      	mov	r0, r8
 8000f40:	e791      	b.n	8000e66 <__udivmoddi4+0x1e6>
 8000f42:	4681      	mov	r9, r0
 8000f44:	e7be      	b.n	8000ec4 <__udivmoddi4+0x244>
 8000f46:	4601      	mov	r1, r0
 8000f48:	e778      	b.n	8000e3c <__udivmoddi4+0x1bc>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	443c      	add	r4, r7
 8000f4e:	e745      	b.n	8000ddc <__udivmoddi4+0x15c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xe6>
 8000f54:	f1a8 0802 	sub.w	r8, r8, #2
 8000f58:	443d      	add	r5, r7
 8000f5a:	e72b      	b.n	8000db4 <__udivmoddi4+0x134>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_InitTick+0x3c>)
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_InitTick+0x40>)
{
 8000f66:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	7818      	ldrb	r0, [r3, #0]
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f72:	6810      	ldr	r0, [r2, #0]
 8000f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f78:	f000 f8aa 	bl	80010d0 <HAL_SYSTICK_Config>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	b958      	cbnz	r0, 8000f98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	2d0f      	cmp	r5, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	4602      	mov	r2, r0
 8000f86:	4629      	mov	r1, r5
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f85e 	bl	800104c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_InitTick+0x44>)
 8000f92:	4620      	mov	r0, r4
 8000f94:	601d      	str	r5, [r3, #0]
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_Init>:
{
 8000fa8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x30>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fc2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f82f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffc8 	bl	8000f60 <HAL_InitTick>
  HAL_MspInit();
 8000fd0:	f001 f9a6 	bl	8002320 <HAL_MspInit>
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd08      	pop	{r3, pc}
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x10>)
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_IncTick+0x14>)
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000224 	.word	0x20000224
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <HAL_GetTick+0x8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000224 	.word	0x20000224

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff6 	bl	8000ff4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001008:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	bf1c      	itt	ne
 800100c:	4b05      	ldrne	r3, [pc, #20]	; (8001024 <HAL_Delay+0x24>)
 800100e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001010:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001012:	bf18      	it	ne
 8001014:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	f7ff ffed 	bl	8000ff4 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	4284      	cmp	r4, r0
 800101e:	d8fa      	bhi.n	8001016 <HAL_Delay+0x16>
  {
  }
}
 8001020:	bd38      	pop	{r3, r4, r5, pc}
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800102a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	0200      	lsls	r0, r0, #8
 800103a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001042:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001044:	60d3      	str	r3, [r2, #12]
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b530      	push	{r4, r5, lr}
 8001050:	68dc      	ldr	r4, [r3, #12]
 8001052:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001056:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	2b04      	cmp	r3, #4
 800105e:	bf28      	it	cs
 8001060:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 0501 	mov.w	r5, #1
 8001068:	fa05 f303 	lsl.w	r3, r5, r3
 800106c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001070:	bf8c      	ite	hi
 8001072:	3c03      	subhi	r4, #3
 8001074:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001076:	4019      	ands	r1, r3
 8001078:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107a:	fa05 f404 	lsl.w	r4, r5, r4
 800107e:	3c01      	subs	r4, #1
 8001080:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001082:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	ea42 0201 	orr.w	r2, r2, r1
 8001088:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	bfad      	iteet	ge
 800108e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	f000 000f 	andlt.w	r0, r0, #15
 8001096:	4b06      	ldrlt	r3, [pc, #24]	; (80010b0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	bfb5      	itete	lt
 800109e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	e000ed14 	.word	0xe000ed14

080010b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010b4:	2800      	cmp	r0, #0
 80010b6:	db08      	blt.n	80010ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b8:	0942      	lsrs	r2, r0, #5
 80010ba:	2301      	movs	r3, #1
 80010bc:	f000 001f 	and.w	r0, r0, #31
 80010c0:	fa03 f000 	lsl.w	r0, r3, r0
 80010c4:	4b01      	ldr	r3, [pc, #4]	; (80010cc <HAL_NVIC_EnableIRQ+0x18>)
 80010c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	3801      	subs	r0, #1
 80010d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010d6:	d20a      	bcs.n	80010ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	21f0      	movs	r1, #240	; 0xf0
 80010e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001100:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001294 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001108:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800110c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001110:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8001114:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001118:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800111a:	42ac      	cmp	r4, r5
 800111c:	f040 80a6 	bne.w	800126c <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001120:	684c      	ldr	r4, [r1, #4]
 8001122:	f024 0c10 	bic.w	ip, r4, #16
 8001126:	f10c 36ff 	add.w	r6, ip, #4294967295
 800112a:	2e01      	cmp	r6, #1
 800112c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001130:	d812      	bhi.n	8001158 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8001132:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	2603      	movs	r6, #3
 8001136:	fa06 f60e 	lsl.w	r6, r6, lr
 800113a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	68ce      	ldr	r6, [r1, #12]
 8001140:	fa06 f60e 	lsl.w	r6, r6, lr
 8001144:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001146:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001148:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800114a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001152:	409e      	lsls	r6, r3
 8001154:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001156:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001158:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800115a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001160:	43f6      	mvns	r6, r6
 8001162:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001166:	688f      	ldr	r7, [r1, #8]
 8001168:	fa07 f70e 	lsl.w	r7, r7, lr
 800116c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001170:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001174:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	d116      	bne.n	80011a6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001178:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800117c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001180:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001184:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001188:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800118c:	f04f 0c0f 	mov.w	ip, #15
 8001190:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001194:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	690f      	ldr	r7, [r1, #16]
 800119a:	fa07 f70b 	lsl.w	r7, r7, fp
 800119e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80011a6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011aa:	f004 0703 	and.w	r7, r4, #3
 80011ae:	fa07 fe0e 	lsl.w	lr, r7, lr
 80011b2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80011b6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	00e6      	lsls	r6, r4, #3
 80011ba:	d557      	bpl.n	800126c <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	f04f 0b00 	mov.w	fp, #0
 80011c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80011c4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c8:	4e31      	ldr	r6, [pc, #196]	; (8001290 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011ce:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011d2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011d6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011da:	9703      	str	r7, [sp, #12]
 80011dc:	9f03      	ldr	r7, [sp, #12]
 80011de:	f023 0703 	bic.w	r7, r3, #3
 80011e2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011e6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ea:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011f6:	f04f 0e0f 	mov.w	lr, #15
 80011fa:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fe:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001204:	d039      	beq.n	800127a <HAL_GPIO_Init+0x17e>
 8001206:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800120a:	42b0      	cmp	r0, r6
 800120c:	d037      	beq.n	800127e <HAL_GPIO_Init+0x182>
 800120e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001212:	42b0      	cmp	r0, r6
 8001214:	d035      	beq.n	8001282 <HAL_GPIO_Init+0x186>
 8001216:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800121a:	42b0      	cmp	r0, r6
 800121c:	d033      	beq.n	8001286 <HAL_GPIO_Init+0x18a>
 800121e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001222:	42b0      	cmp	r0, r6
 8001224:	bf14      	ite	ne
 8001226:	2607      	movne	r6, #7
 8001228:	2604      	moveq	r6, #4
 800122a:	fa06 f60c 	lsl.w	r6, r6, ip
 800122e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001232:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001234:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001236:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001238:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800123c:	bf0c      	ite	eq
 800123e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001240:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001242:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001244:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001246:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800124a:	bf0c      	ite	eq
 800124c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800124e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001250:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001254:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001258:	bf0c      	ite	eq
 800125a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800125c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800125e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001262:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001264:	bf54      	ite	pl
 8001266:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001268:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800126a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126c:	3301      	adds	r3, #1
 800126e:	2b10      	cmp	r3, #16
 8001270:	f47f af4f 	bne.w	8001112 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001274:	b005      	add	sp, #20
 8001276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	465e      	mov	r6, fp
 800127c:	e7d5      	b.n	800122a <HAL_GPIO_Init+0x12e>
 800127e:	2601      	movs	r6, #1
 8001280:	e7d3      	b.n	800122a <HAL_GPIO_Init+0x12e>
 8001282:	2602      	movs	r6, #2
 8001284:	e7d1      	b.n	800122a <HAL_GPIO_Init+0x12e>
 8001286:	2603      	movs	r6, #3
 8001288:	e7cf      	b.n	800122a <HAL_GPIO_Init+0x12e>
 800128a:	bf00      	nop
 800128c:	40013c00 	.word	0x40013c00
 8001290:	40020000 	.word	0x40020000
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001298:	6903      	ldr	r3, [r0, #16]
 800129a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800129c:	bf14      	ite	ne
 800129e:	2001      	movne	r0, #1
 80012a0:	2000      	moveq	r0, #0
 80012a2:	4770      	bx	lr

080012a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	b10a      	cbz	r2, 80012aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	6181      	str	r1, [r0, #24]
 80012a8:	4770      	bx	lr
 80012aa:	0409      	lsls	r1, r1, #16
 80012ac:	e7fb      	b.n	80012a6 <HAL_GPIO_WritePin+0x2>
	...

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	4604      	mov	r4, r0
 80012b6:	b908      	cbnz	r0, 80012bc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
 80012ba:	e03f      	b.n	800133c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012bc:	6803      	ldr	r3, [r0, #0]
 80012be:	07dd      	lsls	r5, r3, #31
 80012c0:	d410      	bmi.n	80012e4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	0798      	lsls	r0, r3, #30
 80012c6:	d45a      	bmi.n	800137e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	071a      	lsls	r2, r3, #28
 80012cc:	f100 809c 	bmi.w	8001408 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	075b      	lsls	r3, r3, #29
 80012d4:	f100 80ba 	bmi.w	800144c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d8:	69a0      	ldr	r0, [r4, #24]
 80012da:	2800      	cmp	r0, #0
 80012dc:	f040 811b 	bne.w	8001516 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80012e0:	2000      	movs	r0, #0
 80012e2:	e02b      	b.n	800133c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e4:	4ba4      	ldr	r3, [pc, #656]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	f002 020c 	and.w	r2, r2, #12
 80012ec:	2a04      	cmp	r2, #4
 80012ee:	d007      	beq.n	8001300 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2a08      	cmp	r2, #8
 80012f8:	d10a      	bne.n	8001310 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0259      	lsls	r1, r3, #9
 80012fe:	d507      	bpl.n	8001310 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b9d      	ldr	r3, [pc, #628]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	039a      	lsls	r2, r3, #14
 8001306:	d5dc      	bpl.n	80012c2 <HAL_RCC_OscConfig+0x12>
 8001308:	6863      	ldr	r3, [r4, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1d9      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
 800130e:	e7d3      	b.n	80012b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	6863      	ldr	r3, [r4, #4]
 8001312:	4d99      	ldr	r5, [pc, #612]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d113      	bne.n	8001342 <HAL_RCC_OscConfig+0x92>
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001322:	f7ff fe67 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4d94      	ldr	r5, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001328:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	682b      	ldr	r3, [r5, #0]
 800132c:	039b      	lsls	r3, r3, #14
 800132e:	d4c8      	bmi.n	80012c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fe60 	bl	8000ff4 <HAL_GetTick>
 8001334:	1b80      	subs	r0, r0, r6
 8001336:	2864      	cmp	r0, #100	; 0x64
 8001338:	d9f7      	bls.n	800132a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
}
 800133c:	b002      	add	sp, #8
 800133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001346:	d104      	bne.n	8001352 <HAL_RCC_OscConfig+0xa2>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134e:	602b      	str	r3, [r5, #0]
 8001350:	e7e3      	b.n	800131a <HAL_RCC_OscConfig+0x6a>
 8001352:	682a      	ldr	r2, [r5, #0]
 8001354:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001358:	602a      	str	r2, [r5, #0]
 800135a:	682a      	ldr	r2, [r5, #0]
 800135c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001360:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1dd      	bne.n	8001322 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001366:	f7ff fe45 	bl	8000ff4 <HAL_GetTick>
 800136a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	039f      	lsls	r7, r3, #14
 8001370:	d5a7      	bpl.n	80012c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001372:	f7ff fe3f 	bl	8000ff4 <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	2864      	cmp	r0, #100	; 0x64
 800137a:	d9f7      	bls.n	800136c <HAL_RCC_OscConfig+0xbc>
 800137c:	e7dd      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	4b7e      	ldr	r3, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	f012 0f0c 	tst.w	r2, #12
 8001386:	d007      	beq.n	8001398 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	2a08      	cmp	r2, #8
 8001390:	d111      	bne.n	80013b6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	025e      	lsls	r6, r3, #9
 8001396:	d40e      	bmi.n	80013b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	4b77      	ldr	r3, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	0795      	lsls	r5, r2, #30
 800139e:	d502      	bpl.n	80013a6 <HAL_RCC_OscConfig+0xf6>
 80013a0:	68e2      	ldr	r2, [r4, #12]
 80013a2:	2a01      	cmp	r2, #1
 80013a4:	d188      	bne.n	80012b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	6921      	ldr	r1, [r4, #16]
 80013aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b4:	e788      	b.n	80012c8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b6:	68e2      	ldr	r2, [r4, #12]
 80013b8:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x2cc>)
 80013ba:	b1b2      	cbz	r2, 80013ea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013c0:	f7ff fe18 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4d6c      	ldr	r5, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80013c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	0798      	lsls	r0, r3, #30
 80013cc:	d507      	bpl.n	80013de <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	6922      	ldr	r2, [r4, #16]
 80013d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013da:	602b      	str	r3, [r5, #0]
 80013dc:	e774      	b.n	80012c8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fe09 	bl	8000ff4 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9ef      	bls.n	80013c8 <HAL_RCC_OscConfig+0x118>
 80013e8:	e7a7      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80013ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ec:	f7ff fe02 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f0:	4d61      	ldr	r5, [pc, #388]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80013f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	0799      	lsls	r1, r3, #30
 80013f8:	f57f af66 	bpl.w	80012c8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fdfa 	bl	8000ff4 <HAL_GetTick>
 8001400:	1b80      	subs	r0, r0, r6
 8001402:	2802      	cmp	r0, #2
 8001404:	d9f6      	bls.n	80013f4 <HAL_RCC_OscConfig+0x144>
 8001406:	e798      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001408:	6962      	ldr	r2, [r4, #20]
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <HAL_RCC_OscConfig+0x2d0>)
 800140c:	b17a      	cbz	r2, 800142e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001412:	f7ff fdef 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4d58      	ldr	r5, [pc, #352]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001418:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800141c:	079f      	lsls	r7, r3, #30
 800141e:	f53f af57 	bmi.w	80012d0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fde7 	bl	8000ff4 <HAL_GetTick>
 8001426:	1b80      	subs	r0, r0, r6
 8001428:	2802      	cmp	r0, #2
 800142a:	d9f6      	bls.n	800141a <HAL_RCC_OscConfig+0x16a>
 800142c:	e785      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800142e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001430:	f7ff fde0 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4d50      	ldr	r5, [pc, #320]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001436:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800143a:	0798      	lsls	r0, r3, #30
 800143c:	f57f af48 	bpl.w	80012d0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fdd8 	bl	8000ff4 <HAL_GetTick>
 8001444:	1b80      	subs	r0, r0, r6
 8001446:	2802      	cmp	r0, #2
 8001448:	d9f6      	bls.n	8001438 <HAL_RCC_OscConfig+0x188>
 800144a:	e776      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144c:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 800144e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001450:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001454:	d128      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800146a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4d45      	ldr	r5, [pc, #276]	; (8001584 <HAL_RCC_OscConfig+0x2d4>)
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	05d9      	lsls	r1, r3, #23
 8001472:	d51b      	bpl.n	80014ac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	68a3      	ldr	r3, [r4, #8]
 8001476:	4d40      	ldr	r5, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 8001478:	2b01      	cmp	r3, #1
 800147a:	d127      	bne.n	80014cc <HAL_RCC_OscConfig+0x21c>
 800147c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001484:	f7ff fdb6 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	4d3b      	ldr	r5, [pc, #236]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800148a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001492:	079b      	lsls	r3, r3, #30
 8001494:	d539      	bpl.n	800150a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001496:	2e00      	cmp	r6, #0
 8001498:	f43f af1e 	beq.w	80012d8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4a36      	ldr	r2, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 800149e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	e717      	b.n	80012d8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80014a8:	2600      	movs	r6, #0
 80014aa:	e7df      	b.n	800146c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014b4:	f7ff fd9e 	bl	8000ff4 <HAL_GetTick>
 80014b8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	05da      	lsls	r2, r3, #23
 80014be:	d4d9      	bmi.n	8001474 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff fd98 	bl	8000ff4 <HAL_GetTick>
 80014c4:	1bc0      	subs	r0, r0, r7
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d9f7      	bls.n	80014ba <HAL_RCC_OscConfig+0x20a>
 80014ca:	e736      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d104      	bne.n	80014da <HAL_RCC_OscConfig+0x22a>
 80014d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	672b      	str	r3, [r5, #112]	; 0x70
 80014d8:	e7d0      	b.n	800147c <HAL_RCC_OscConfig+0x1cc>
 80014da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	672a      	str	r2, [r5, #112]	; 0x70
 80014e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014e4:	f022 0204 	bic.w	r2, r2, #4
 80014e8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ca      	bne.n	8001484 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80014ee:	f7ff fd81 	bl	8000ff4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014f6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014fa:	0798      	lsls	r0, r3, #30
 80014fc:	d5cb      	bpl.n	8001496 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fd79 	bl	8000ff4 <HAL_GetTick>
 8001502:	1bc0      	subs	r0, r0, r7
 8001504:	4540      	cmp	r0, r8
 8001506:	d9f7      	bls.n	80014f8 <HAL_RCC_OscConfig+0x248>
 8001508:	e717      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fd73 	bl	8000ff4 <HAL_GetTick>
 800150e:	1bc0      	subs	r0, r0, r7
 8001510:	4540      	cmp	r0, r8
 8001512:	d9bd      	bls.n	8001490 <HAL_RCC_OscConfig+0x1e0>
 8001514:	e711      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001516:	4d18      	ldr	r5, [pc, #96]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
 8001518:	68ab      	ldr	r3, [r5, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d047      	beq.n	80015b2 <HAL_RCC_OscConfig+0x302>
 8001522:	4e19      	ldr	r6, [pc, #100]	; (8001588 <HAL_RCC_OscConfig+0x2d8>)
 8001524:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001526:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001528:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152a:	d135      	bne.n	8001598 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800152c:	f7ff fd62 	bl	8000ff4 <HAL_GetTick>
 8001530:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	0199      	lsls	r1, r3, #6
 8001536:	d429      	bmi.n	800158c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001538:	6a22      	ldr	r2, [r4, #32]
 800153a:	69e3      	ldr	r3, [r4, #28]
 800153c:	4313      	orrs	r3, r2
 800153e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001540:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001544:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001546:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800154a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	4c0a      	ldr	r4, [pc, #40]	; (8001578 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154e:	0852      	lsrs	r2, r2, #1
 8001550:	3a01      	subs	r2, #1
 8001552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001556:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001558:	2301      	movs	r3, #1
 800155a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800155c:	f7ff fd4a 	bl	8000ff4 <HAL_GetTick>
 8001560:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	019a      	lsls	r2, r3, #6
 8001566:	f53f aebb 	bmi.w	80012e0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fd43 	bl	8000ff4 <HAL_GetTick>
 800156e:	1b40      	subs	r0, r0, r5
 8001570:	2802      	cmp	r0, #2
 8001572:	d9f6      	bls.n	8001562 <HAL_RCC_OscConfig+0x2b2>
 8001574:	e6e1      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
 8001584:	40007000 	.word	0x40007000
 8001588:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff fd32 	bl	8000ff4 <HAL_GetTick>
 8001590:	1bc0      	subs	r0, r0, r7
 8001592:	2802      	cmp	r0, #2
 8001594:	d9cd      	bls.n	8001532 <HAL_RCC_OscConfig+0x282>
 8001596:	e6d0      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001598:	f7ff fd2c 	bl	8000ff4 <HAL_GetTick>
 800159c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	f57f ae9d 	bpl.w	80012e0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fd25 	bl	8000ff4 <HAL_GetTick>
 80015aa:	1b00      	subs	r0, r0, r4
 80015ac:	2802      	cmp	r0, #2
 80015ae:	d9f6      	bls.n	800159e <HAL_RCC_OscConfig+0x2ee>
 80015b0:	e6c3      	b.n	800133a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b2:	2801      	cmp	r0, #1
 80015b4:	f43f aec2 	beq.w	800133c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80015b8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	69e3      	ldr	r3, [r4, #28]
 80015bc:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f47f ae79 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
 80015c6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015c8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015cc:	4293      	cmp	r3, r2
 80015ce:	f47f ae73 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d8:	4003      	ands	r3, r0
 80015da:	4293      	cmp	r3, r2
 80015dc:	f47f ae6c 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015e6:	4293      	cmp	r3, r2
 80015e8:	f47f ae66 	bne.w	80012b8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015ee:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80015f2:	1ac0      	subs	r0, r0, r3
 80015f4:	bf18      	it	ne
 80015f6:	2001      	movne	r0, #1
 80015f8:	e6a0      	b.n	800133c <HAL_RCC_OscConfig+0x8c>
 80015fa:	bf00      	nop

080015fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fc:	4913      	ldr	r1, [pc, #76]	; (800164c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80015fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001600:	688b      	ldr	r3, [r1, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d003      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x16>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800160e:	4810      	ldr	r0, [pc, #64]	; (8001650 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001610:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <HAL_RCC_GetSysClockFreq+0x58>)
 8001614:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001616:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001618:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001620:	bf14      	ite	ne
 8001622:	480c      	ldrne	r0, [pc, #48]	; (8001654 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001624:	480a      	ldreq	r0, [pc, #40]	; (8001650 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001626:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800162a:	bf18      	it	ne
 800162c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800162e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001632:	fba1 0100 	umull	r0, r1, r1, r0
 8001636:	f7ff fb0b 	bl	8000c50 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_RCC_GetSysClockFreq+0x50>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001642:	3301      	adds	r3, #1
 8001644:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001646:	fbb0 f0f3 	udiv	r0, r0, r3
 800164a:	bd08      	pop	{r3, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	00f42400 	.word	0x00f42400
 8001654:	007a1200 	.word	0x007a1200

08001658 <HAL_RCC_ClockConfig>:
{
 8001658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800165c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800165e:	4604      	mov	r4, r0
 8001660:	b910      	cbnz	r0, 8001668 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <HAL_RCC_ClockConfig+0x124>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f002 020f 	and.w	r2, r2, #15
 8001670:	428a      	cmp	r2, r1
 8001672:	d329      	bcc.n	80016c8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	6821      	ldr	r1, [r4, #0]
 8001676:	078f      	lsls	r7, r1, #30
 8001678:	d42e      	bmi.n	80016d8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	07c8      	lsls	r0, r1, #31
 800167c:	d441      	bmi.n	8001702 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_ClockConfig+0x124>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f002 020f 	and.w	r2, r2, #15
 8001686:	4295      	cmp	r5, r2
 8001688:	d367      	bcc.n	800175a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	0751      	lsls	r1, r2, #29
 800168e:	d46d      	bmi.n	800176c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	0713      	lsls	r3, r2, #28
 8001692:	d507      	bpl.n	80016a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001694:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <HAL_RCC_ClockConfig+0x128>)
 8001696:	6921      	ldr	r1, [r4, #16]
 8001698:	6893      	ldr	r3, [r2, #8]
 800169a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800169e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a4:	f7ff ffaa 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_RCC_ClockConfig+0x128>)
 80016aa:	4a36      	ldr	r2, [pc, #216]	; (8001784 <HAL_RCC_ClockConfig+0x12c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	40d8      	lsrs	r0, r3
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_RCC_ClockConfig+0x130>)
 80016b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_ClockConfig+0x134>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f7ff fc4f 	bl	8000f60 <HAL_InitTick>
  return HAL_OK;
 80016c2:	2000      	movs	r0, #0
 80016c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4299      	cmp	r1, r3
 80016d4:	d1c5      	bne.n	8001662 <HAL_RCC_ClockConfig+0xa>
 80016d6:	e7cd      	b.n	8001674 <HAL_RCC_ClockConfig+0x1c>
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016da:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016de:	bf1e      	ittt	ne
 80016e0:	689a      	ldrne	r2, [r3, #8]
 80016e2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80016e6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ea:	bf42      	ittt	mi
 80016ec:	689a      	ldrmi	r2, [r3, #8]
 80016ee:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80016f2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	68a0      	ldr	r0, [r4, #8]
 80016f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016fc:	4302      	orrs	r2, r0
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	e7bb      	b.n	800167a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	6862      	ldr	r2, [r4, #4]
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_ClockConfig+0x128>)
 8001706:	2a01      	cmp	r2, #1
 8001708:	d11d      	bne.n	8001746 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	d0a7      	beq.n	8001662 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4e1b      	ldr	r6, [pc, #108]	; (8001780 <HAL_RCC_ClockConfig+0x128>)
 8001714:	68b3      	ldr	r3, [r6, #8]
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	4313      	orrs	r3, r2
 800171c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800171e:	f7ff fc69 	bl	8000ff4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001726:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001728:	68b3      	ldr	r3, [r6, #8]
 800172a:	6862      	ldr	r2, [r4, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001734:	d0a3      	beq.n	800167e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff fc5d 	bl	8000ff4 <HAL_GetTick>
 800173a:	1bc0      	subs	r0, r0, r7
 800173c:	4540      	cmp	r0, r8
 800173e:	d9f3      	bls.n	8001728 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
}
 8001742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001746:	1e91      	subs	r1, r2, #2
 8001748:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174c:	d802      	bhi.n	8001754 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001752:	e7dd      	b.n	8001710 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	f013 0f02 	tst.w	r3, #2
 8001758:	e7da      	b.n	8001710 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	b2ea      	uxtb	r2, r5
 800175c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	429d      	cmp	r5, r3
 8001766:	f47f af7c 	bne.w	8001662 <HAL_RCC_ClockConfig+0xa>
 800176a:	e78e      	b.n	800168a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <HAL_RCC_ClockConfig+0x128>)
 800176e:	68e0      	ldr	r0, [r4, #12]
 8001770:	688b      	ldr	r3, [r1, #8]
 8001772:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001776:	4303      	orrs	r3, r0
 8001778:	608b      	str	r3, [r1, #8]
 800177a:	e789      	b.n	8001690 <HAL_RCC_ClockConfig+0x38>
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40023800 	.word	0x40023800
 8001784:	08004685 	.word	0x08004685
 8001788:	20000008 	.word	0x20000008
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800179e:	6810      	ldr	r0, [r2, #0]
}
 80017a0:	40d8      	lsrs	r0, r3
 80017a2:	4770      	bx	lr
 80017a4:	40023800 	.word	0x40023800
 80017a8:	08004695 	.word	0x08004695
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017be:	6810      	ldr	r0, [r2, #0]
}
 80017c0:	40d8      	lsrs	r0, r3
 80017c2:	4770      	bx	lr
 80017c4:	40023800 	.word	0x40023800
 80017c8:	08004695 	.word	0x08004695
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017d6:	6803      	ldr	r3, [r0, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017de:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80017e0:	bf1e      	ittt	ne
 80017e2:	681a      	ldrne	r2, [r3, #0]
 80017e4:	f042 0201 	orrne.w	r2, r2, #1
 80017e8:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80017f0:	2000      	movs	r0, #0
 80017f2:	4770      	bx	lr

080017f4 <HAL_TIM_OC_DelayElapsedCallback>:
 80017f4:	4770      	bx	lr

080017f6 <HAL_TIM_IC_CaptureCallback>:
 80017f6:	4770      	bx	lr

080017f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017f8:	4770      	bx	lr

080017fa <HAL_TIM_TriggerCallback>:
 80017fa:	4770      	bx	lr

080017fc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017fc:	6803      	ldr	r3, [r0, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	0791      	lsls	r1, r2, #30
{
 8001802:	b510      	push	{r4, lr}
 8001804:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001806:	d50e      	bpl.n	8001826 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	0792      	lsls	r2, r2, #30
 800180c:	d50b      	bpl.n	8001826 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800180e:	f06f 0202 	mvn.w	r2, #2
 8001812:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001814:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001816:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001818:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800181a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800181c:	d077      	beq.n	800190e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800181e:	f7ff ffea 	bl	80017f6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001822:	2300      	movs	r3, #0
 8001824:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	0750      	lsls	r0, r2, #29
 800182c:	d510      	bpl.n	8001850 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	0751      	lsls	r1, r2, #29
 8001832:	d50d      	bpl.n	8001850 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001834:	f06f 0204 	mvn.w	r2, #4
 8001838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800183a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800183c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800183e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001842:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001844:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001846:	d068      	beq.n	800191a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001848:	f7ff ffd5 	bl	80017f6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184c:	2300      	movs	r3, #0
 800184e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	0712      	lsls	r2, r2, #28
 8001856:	d50f      	bpl.n	8001878 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	0710      	lsls	r0, r2, #28
 800185c:	d50c      	bpl.n	8001878 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800185e:	f06f 0208 	mvn.w	r2, #8
 8001862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001864:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001866:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001868:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800186a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800186e:	d05a      	beq.n	8001926 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001870:	f7ff ffc1 	bl	80017f6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001874:	2300      	movs	r3, #0
 8001876:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	06d2      	lsls	r2, r2, #27
 800187e:	d510      	bpl.n	80018a2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	06d0      	lsls	r0, r2, #27
 8001884:	d50d      	bpl.n	80018a2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001886:	f06f 0210 	mvn.w	r2, #16
 800188a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800188c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800188e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001890:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001894:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001896:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001898:	d04b      	beq.n	8001932 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800189a:	f7ff ffac 	bl	80017f6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189e:	2300      	movs	r3, #0
 80018a0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	07d1      	lsls	r1, r2, #31
 80018a8:	d508      	bpl.n	80018bc <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	07d2      	lsls	r2, r2, #31
 80018ae:	d505      	bpl.n	80018bc <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018b0:	f06f 0201 	mvn.w	r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b6:	4620      	mov	r0, r4
 80018b8:	f000 fd26 	bl	8002308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	0610      	lsls	r0, r2, #24
 80018c2:	d508      	bpl.n	80018d6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	0611      	lsls	r1, r2, #24
 80018c8:	d505      	bpl.n	80018d6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018d0:	4620      	mov	r0, r4
 80018d2:	f000 f976 	bl	8001bc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	0652      	lsls	r2, r2, #25
 80018dc:	d508      	bpl.n	80018f0 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	0650      	lsls	r0, r2, #25
 80018e2:	d505      	bpl.n	80018f0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff ff85 	bl	80017fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	0691      	lsls	r1, r2, #26
 80018f6:	d522      	bpl.n	800193e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	0692      	lsls	r2, r2, #26
 80018fc:	d51f      	bpl.n	800193e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018fe:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001902:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001904:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800190a:	f000 b959 	b.w	8001bc0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	f7ff ff71 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ff70 	bl	80017f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001918:	e783      	b.n	8001822 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191a:	f7ff ff6b 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff6a 	bl	80017f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001924:	e792      	b.n	800184c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	f7ff ff65 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff ff64 	bl	80017f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001930:	e7a0      	b.n	8001874 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001932:	f7ff ff5f 	bl	80017f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff ff5e 	bl	80017f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800193c:	e7af      	b.n	800189e <HAL_TIM_IRQHandler+0xa2>
 800193e:	bd10      	pop	{r4, pc}

08001940 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001942:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001944:	4290      	cmp	r0, r2
 8001946:	d00e      	beq.n	8001966 <TIM_Base_SetConfig+0x26>
 8001948:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800194c:	d00b      	beq.n	8001966 <TIM_Base_SetConfig+0x26>
 800194e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001952:	4290      	cmp	r0, r2
 8001954:	d007      	beq.n	8001966 <TIM_Base_SetConfig+0x26>
 8001956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195a:	4290      	cmp	r0, r2
 800195c:	d003      	beq.n	8001966 <TIM_Base_SetConfig+0x26>
 800195e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001962:	4290      	cmp	r0, r2
 8001964:	d115      	bne.n	8001992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001966:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800196c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <TIM_Base_SetConfig+0x94>)
 8001970:	4290      	cmp	r0, r2
 8001972:	d019      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 8001974:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001978:	d016      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 800197a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800197e:	4290      	cmp	r0, r2
 8001980:	d012      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 8001982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001986:	4290      	cmp	r0, r2
 8001988:	d00e      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 800198a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800198e:	4290      	cmp	r0, r2
 8001990:	d00a      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <TIM_Base_SetConfig+0x98>)
 8001994:	4290      	cmp	r0, r2
 8001996:	d007      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 8001998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199c:	4290      	cmp	r0, r2
 800199e:	d003      	beq.n	80019a8 <TIM_Base_SetConfig+0x68>
 80019a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a4:	4290      	cmp	r0, r2
 80019a6:	d103      	bne.n	80019b0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019a8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80019aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b0:	694a      	ldr	r2, [r1, #20]
 80019b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019b8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019ba:	688b      	ldr	r3, [r1, #8]
 80019bc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019be:	680b      	ldr	r3, [r1, #0]
 80019c0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <TIM_Base_SetConfig+0x94>)
 80019c4:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019c6:	bf04      	itt	eq
 80019c8:	690b      	ldreq	r3, [r1, #16]
 80019ca:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019cc:	2301      	movs	r3, #1
 80019ce:	6143      	str	r3, [r0, #20]
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40014000 	.word	0x40014000

080019dc <HAL_TIM_Base_Init>:
{
 80019dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019de:	4604      	mov	r4, r0
 80019e0:	b1a0      	cbz	r0, 8001a0c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019ea:	b91b      	cbnz	r3, 80019f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019f0:	f000 fcb6 	bl	8002360 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	2302      	movs	r3, #2
 80019f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	1d21      	adds	r1, r4, #4
 80019fe:	f7ff ff9f 	bl	8001940 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a08:	2000      	movs	r0, #0
 8001a0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
}
 8001a0e:	bd10      	pop	{r4, pc}

08001a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a10:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a12:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a14:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a16:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a1a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001a1e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a20:	6083      	str	r3, [r0, #8]
 8001a22:	bd10      	pop	{r4, pc}

08001a24 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001a24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a28:	2b01      	cmp	r3, #1
{
 8001a2a:	b570      	push	{r4, r5, r6, lr}
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001a32:	d019      	beq.n	8001a68 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a38:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001a40:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a4a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a4c:	680b      	ldr	r3, [r1, #0]
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d065      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0xfa>
 8001a52:	d815      	bhi.n	8001a80 <HAL_TIM_ConfigClockSource+0x5c>
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d00c      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x4e>
 8001a58:	d807      	bhi.n	8001a6a <HAL_TIM_ConfigClockSource+0x46>
 8001a5a:	b153      	cbz	r3, 8001a72 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001a5c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001a5e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a64:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	d001      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0x4e>
 8001a6e:	2b30      	cmp	r3, #48	; 0x30
 8001a70:	d1f4      	bne.n	8001a5c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001a72:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a74:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	e01a      	b.n	8001ab6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001a80:	2b60      	cmp	r3, #96	; 0x60
 8001a82:	d034      	beq.n	8001aee <HAL_TIM_ConfigClockSource+0xca>
 8001a84:	d819      	bhi.n	8001aba <HAL_TIM_ConfigClockSource+0x96>
 8001a86:	2b50      	cmp	r3, #80	; 0x50
 8001a88:	d1e8      	bne.n	8001a5c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8a:	684a      	ldr	r2, [r1, #4]
 8001a8c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a8e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a90:	6a05      	ldr	r5, [r0, #32]
 8001a92:	f025 0501 	bic.w	r5, r5, #1
 8001a96:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a98:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a9a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001aa2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001aa6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001aa8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001aaa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001aac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ab2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001ab6:	6083      	str	r3, [r0, #8]
 8001ab8:	e7d0      	b.n	8001a5c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001aba:	2b70      	cmp	r3, #112	; 0x70
 8001abc:	d00c      	beq.n	8001ad8 <HAL_TIM_ConfigClockSource+0xb4>
 8001abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac2:	d1cb      	bne.n	8001a5c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001ac4:	68cb      	ldr	r3, [r1, #12]
 8001ac6:	684a      	ldr	r2, [r1, #4]
 8001ac8:	6889      	ldr	r1, [r1, #8]
 8001aca:	f7ff ffa1 	bl	8001a10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	6893      	ldr	r3, [r2, #8]
 8001ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad6:	e008      	b.n	8001aea <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001ad8:	68cb      	ldr	r3, [r1, #12]
 8001ada:	684a      	ldr	r2, [r1, #4]
 8001adc:	6889      	ldr	r1, [r1, #8]
 8001ade:	f7ff ff97 	bl	8001a10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ae6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aea:	6093      	str	r3, [r2, #8]
      break;
 8001aec:	e7b6      	b.n	8001a5c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aee:	684d      	ldr	r5, [r1, #4]
 8001af0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001af2:	6a01      	ldr	r1, [r0, #32]
 8001af4:	f021 0110 	bic.w	r1, r1, #16
 8001af8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001afa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001afc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001afe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b06:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b0a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001b0e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b10:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001b12:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b18:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001b1c:	e7cb      	b.n	8001ab6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b1e:	684a      	ldr	r2, [r1, #4]
 8001b20:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001b22:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b24:	6a05      	ldr	r5, [r0, #32]
 8001b26:	f025 0501 	bic.w	r5, r5, #1
 8001b2a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b2c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b2e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b36:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001b3a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001b3c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b3e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001b40:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b46:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001b4a:	e7b4      	b.n	8001ab6 <HAL_TIM_ConfigClockSource+0x92>

08001b4c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
{
 8001b52:	b530      	push	{r4, r5, lr}
 8001b54:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001b58:	d02d      	beq.n	8001bb6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b5e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b60:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001b62:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b64:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001b68:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b6a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001b6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001b70:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b72:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b74:	4c11      	ldr	r4, [pc, #68]	; (8001bbc <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8001b76:	42a3      	cmp	r3, r4
 8001b78:	d012      	beq.n	8001ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7e:	d00f      	beq.n	8001ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001b80:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001b84:	42a3      	cmp	r3, r4
 8001b86:	d00b      	beq.n	8001ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001b88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b8c:	42a3      	cmp	r3, r4
 8001b8e:	d007      	beq.n	8001ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001b90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b94:	42a3      	cmp	r3, r4
 8001b96:	d003      	beq.n	8001ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001b98:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8001b9c:	42a3      	cmp	r3, r4
 8001b9e:	d104      	bne.n	8001baa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ba0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ba6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001bb6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001bb8:	bd30      	pop	{r4, r5, pc}
 8001bba:	bf00      	nop
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_TIMEx_CommutCallback>:
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bc2:	4770      	bx	lr

08001bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	68c1      	ldr	r1, [r0, #12]
 8001bca:	691a      	ldr	r2, [r3, #16]
{
 8001bcc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd6:	6925      	ldr	r5, [r4, #16]
 8001bd8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bda:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bdc:	69c0      	ldr	r0, [r0, #28]
 8001bde:	432a      	orrs	r2, r5
 8001be0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001be2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001be6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001be8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bec:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	69a1      	ldr	r1, [r4, #24]
 8001bf6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001bfa:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c00:	615a      	str	r2, [r3, #20]
 8001c02:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c04:	d129      	bne.n	8001c5a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <UART_SetConfig+0x4e>
 8001c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d120      	bne.n	8001c54 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c12:	f7ff fdcd 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c16:	6862      	ldr	r2, [r4, #4]
 8001c18:	6825      	ldr	r5, [r4, #0]
 8001c1a:	1892      	adds	r2, r2, r2
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	f04f 0119 	mov.w	r1, #25
 8001c24:	415b      	adcs	r3, r3
 8001c26:	fba0 0101 	umull	r0, r1, r0, r1
 8001c2a:	f7ff f811 	bl	8000c50 <__aeabi_uldivmod>
 8001c2e:	2164      	movs	r1, #100	; 0x64
 8001c30:	fbb0 f4f1 	udiv	r4, r0, r1
 8001c34:	fb01 0314 	mls	r3, r1, r4, r0
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	3332      	adds	r3, #50	; 0x32
 8001c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c40:	f003 0207 	and.w	r2, r3, #7
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001c4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c4e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c50:	60ab      	str	r3, [r5, #8]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c54:	f7ff fd9c 	bl	8001790 <HAL_RCC_GetPCLK1Freq>
 8001c58:	e7dd      	b.n	8001c16 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d002      	beq.n	8001c64 <UART_SetConfig+0xa0>
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <UART_SetConfig+0xd8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d116      	bne.n	8001c92 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c64:	f7ff fda4 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c68:	6863      	ldr	r3, [r4, #4]
 8001c6a:	6825      	ldr	r5, [r4, #0]
 8001c6c:	2119      	movs	r1, #25
 8001c6e:	009a      	lsls	r2, r3, #2
 8001c70:	fba0 0101 	umull	r0, r1, r0, r1
 8001c74:	0f9b      	lsrs	r3, r3, #30
 8001c76:	f7fe ffeb 	bl	8000c50 <__aeabi_uldivmod>
 8001c7a:	2264      	movs	r2, #100	; 0x64
 8001c7c:	fbb0 f1f2 	udiv	r1, r0, r2
 8001c80:	fb02 0311 	mls	r3, r2, r1, r0
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	; 0x32
 8001c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c8c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001c90:	e7de      	b.n	8001c50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c92:	f7ff fd7d 	bl	8001790 <HAL_RCC_GetPCLK1Freq>
 8001c96:	e7e7      	b.n	8001c68 <UART_SetConfig+0xa4>
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40011400 	.word	0x40011400

08001ca0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460e      	mov	r6, r1
 8001ca6:	4617      	mov	r7, r2
 8001ca8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	680b      	ldr	r3, [r1, #0]
 8001cae:	ea36 0303 	bics.w	r3, r6, r3
 8001cb2:	d101      	bne.n	8001cb8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001cb8:	1c6b      	adds	r3, r5, #1
 8001cba:	d0f7      	beq.n	8001cac <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cbc:	b995      	cbnz	r5, 8001ce4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cd6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ce4:	f7ff f986 	bl	8000ff4 <HAL_GetTick>
 8001ce8:	1bc0      	subs	r0, r0, r7
 8001cea:	4285      	cmp	r5, r0
 8001cec:	d2dd      	bcs.n	8001caa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001cee:	e7e6      	b.n	8001cbe <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001cf0 <HAL_UART_Init>:
{
 8001cf0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	b340      	cbz	r0, 8001d48 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cfe:	b91b      	cbnz	r3, 8001d08 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d00:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d04:	f000 fb62 	bl	80023cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d08:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d0a:	2324      	movs	r3, #36	; 0x24
 8001d0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d10:	68d3      	ldr	r3, [r2, #12]
 8001d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d16:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff ff53 	bl	8001bc4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d2e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d36:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d38:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d3a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
}
 8001d4a:	bd10      	pop	{r4, pc}

08001d4c <HAL_UART_Transmit>:
{
 8001d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d50:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d56:	2b20      	cmp	r3, #32
{
 8001d58:	4604      	mov	r4, r0
 8001d5a:	460d      	mov	r5, r1
 8001d5c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d5e:	d151      	bne.n	8001e04 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001d60:	2900      	cmp	r1, #0
 8001d62:	d04c      	beq.n	8001dfe <HAL_UART_Transmit+0xb2>
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d04a      	beq.n	8001dfe <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001d68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d049      	beq.n	8001e04 <HAL_UART_Transmit+0xb8>
 8001d70:	2301      	movs	r3, #1
 8001d72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d76:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d7a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d84:	f7ff f936 	bl	8000ff4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001d88:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001d8c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001d8e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001d92:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001d96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b95b      	cbnz	r3, 8001db4 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4632      	mov	r2, r6
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff ff7c 	bl	8001ca0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001da8:	b9a0      	cbnz	r0, 8001dd4 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001daa:	2320      	movs	r3, #32
 8001dac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001db4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dbc:	68a3      	ldr	r3, [r4, #8]
 8001dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	4632      	mov	r2, r6
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001dca:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dcc:	d10e      	bne.n	8001dec <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dce:	f7ff ff67 	bl	8001ca0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001dd2:	b110      	cbz	r0, 8001dda <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dda:	882b      	ldrh	r3, [r5, #0]
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	b943      	cbnz	r3, 8001dfa <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001de8:	3502      	adds	r5, #2
 8001dea:	e7d4      	b.n	8001d96 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	f7ff ff58 	bl	8001ca0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d1ef      	bne.n	8001dd4 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	782a      	ldrb	r2, [r5, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	3501      	adds	r5, #1
 8001dfc:	e7cb      	b.n	8001d96 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001e04:	2002      	movs	r0, #2
}
 8001e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001e0c <set_gpio_output>:
extern UART_HandleTypeDef huart2;
uint8_t buf[200];
void set_gpio_output (void)
{
	/*Configure GPIO pin output: PA1 */
  GPIO_InitStruct.Pin = DHT_22_IN_OUT_Pin;
 8001e0c:	4905      	ldr	r1, [pc, #20]	; (8001e24 <set_gpio_output+0x18>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DHT_22_IN_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <set_gpio_output+0x1c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e16:	e881 000c 	stmia.w	r1, {r2, r3}
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60cb      	str	r3, [r1, #12]
  HAL_GPIO_Init(DHT_22_IN_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f7ff b96d 	b.w	80010fc <HAL_GPIO_Init>
 8001e22:	bf00      	nop
 8001e24:	20000270 	.word	0x20000270
 8001e28:	40020000 	.word	0x40020000

08001e2c <set_gpio_input>:
}

void set_gpio_input (void)
{
	/*Configure GPIO pin input: PA1 */
  GPIO_InitStruct.Pin = DHT_22_IN_OUT_Pin;
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <set_gpio_input+0x14>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DHT_22_IN_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <set_gpio_input+0x18>)
  GPIO_InitStruct.Pin = DHT_22_IN_OUT_Pin;
 8001e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e34:	600b      	str	r3, [r1, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	604b      	str	r3, [r1, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	608b      	str	r3, [r1, #8]
  HAL_GPIO_Init(DHT_22_IN_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f7ff b95e 	b.w	80010fc <HAL_GPIO_Init>
 8001e40:	20000270 	.word	0x20000270
 8001e44:	40020000 	.word	0x40020000

08001e48 <DHT22_start>:
}
void DHT22_start (void)
{
 8001e48:	b510      	push	{r4, lr}
	set_gpio_output ();  // set the pin as output
	HAL_GPIO_WritePin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin, 0);   // pull the pin low
 8001e4a:	4c0d      	ldr	r4, [pc, #52]	; (8001e80 <DHT22_start+0x38>)
	set_gpio_output ();  // set the pin as output
 8001e4c:	f7ff ffde 	bl	8001e0c <set_gpio_output>
	HAL_GPIO_WritePin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin, 0);   // pull the pin low
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff fa24 	bl	80012a4 <HAL_GPIO_WritePin>
//	DWT_Delay_us (500);   // wait for 500us
	delay(1200);
 8001e5c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001e60:	f000 f85e 	bl	8001f20 <delay>
	HAL_GPIO_WritePin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin, 1);   // pull the pin high
 8001e64:	4620      	mov	r0, r4
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	f7ff fa1a 	bl	80012a4 <HAL_GPIO_WritePin>
//	DWT_Delay_us (30);   // wait for 30us
	delay(29);
 8001e70:	201d      	movs	r0, #29
 8001e72:	f000 f855 	bl	8001f20 <delay>
	set_gpio_input ();   // set as input
}
 8001e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_gpio_input ();   // set as input
 8001e7a:	f7ff bfd7 	b.w	8001e2c <set_gpio_input>
 8001e7e:	bf00      	nop
 8001e80:	40020000 	.word	0x40020000

08001e84 <check_response>:

void check_response (void)
{
 8001e84:	b510      	push	{r4, lr}
	//DWT_Delay_us (40);
	delay(40);
 8001e86:	2028      	movs	r0, #40	; 0x28
 8001e88:	f000 f84a 	bl	8001f20 <delay>

	if (!(HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)))
 8001e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <check_response+0x40>)
 8001e92:	f7ff fa01 	bl	8001298 <HAL_GPIO_ReadPin>
 8001e96:	b958      	cbnz	r0, 8001eb0 <check_response+0x2c>
	{
	//	DWT_Delay_us (80);
		delay(80);
 8001e98:	2050      	movs	r0, #80	; 0x50
 8001e9a:	f000 f841 	bl	8001f20 <delay>

		if ((HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin))) check = 1;
 8001e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea2:	4808      	ldr	r0, [pc, #32]	; (8001ec4 <check_response+0x40>)
 8001ea4:	f7ff f9f8 	bl	8001298 <HAL_GPIO_ReadPin>
 8001ea8:	b110      	cbz	r0, 8001eb0 <check_response+0x2c>
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <check_response+0x44>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)));   // wait for the pin to go low
 8001eb0:	4c04      	ldr	r4, [pc, #16]	; (8001ec4 <check_response+0x40>)
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff f9ee 	bl	8001298 <HAL_GPIO_ReadPin>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d1f8      	bne.n	8001eb2 <check_response+0x2e>


}
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	200001f8 	.word	0x200001f8

08001ecc <read_data>:

uint8_t read_data (void)
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i,j;

	for (j=0;j<8;j++)
	{

		while (!(HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)));   // wait for the pin to go high
 8001ece:	4e13      	ldr	r6, [pc, #76]	; (8001f1c <read_data+0x50>)
{
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)));   // wait for the pin to go high
 8001ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed8:	4630      	mov	r0, r6
 8001eda:	f7ff f9dd 	bl	8001298 <HAL_GPIO_ReadPin>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d0f8      	beq.n	8001ed4 <read_data+0x8>
		//DWT_Delay_us (40);   // wait for 40 us
		delay(40);
 8001ee2:	2028      	movs	r0, #40	; 0x28
 8001ee4:	f000 f81c 	bl	8001f20 <delay>
		if ((HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)) == 0)   // if the pin is low
 8001ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7ff f9d3 	bl	8001298 <HAL_GPIO_ReadPin>
 8001ef2:	2301      	movs	r3, #1
		{
			i&= ~(1<<(7-j));   // write 0
 8001ef4:	40ab      	lsls	r3, r5
		if ((HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)) == 0)   // if the pin is low
 8001ef6:	b968      	cbnz	r0, 8001f14 <read_data+0x48>
			i&= ~(1<<(7-j));   // write 0
 8001ef8:	ea24 0403 	bic.w	r4, r4, r3
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
		while ((HAL_GPIO_ReadPin (DHT_22_IN_OUT_GPIO_Port, DHT_22_IN_OUT_Pin)));  // wait for the pin to go low
 8001efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f00:	4630      	mov	r0, r6
 8001f02:	f7ff f9c9 	bl	8001298 <HAL_GPIO_ReadPin>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1f8      	bne.n	8001efc <read_data+0x30>
	for (j=0;j<8;j++)
 8001f0a:	f115 35ff 	adds.w	r5, r5, #4294967295
 8001f0e:	d2e1      	bcs.n	8001ed4 <read_data+0x8>
	}
	return i;
}
 8001f10:	4620      	mov	r0, r4
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001f14:	431c      	orrs	r4, r3
 8001f16:	b2e4      	uxtb	r4, r4
 8001f18:	e7f0      	b.n	8001efc <read_data+0x30>
 8001f1a:	bf00      	nop
 8001f1c:	40020000 	.word	0x40020000

08001f20 <delay>:
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
	/* change your code here for the delay in microseconds */

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <delay+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<time);}
 8001f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f2a:	4282      	cmp	r2, r0
 8001f2c:	d3fc      	bcc.n	8001f28 <delay+0x8>
 8001f2e:	4770      	bx	lr
 8001f30:	2000022c 	.word	0x2000022c

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b530      	push	{r4, r5, lr}
 8001f36:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f38:	2230      	movs	r2, #48	; 0x30
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	a808      	add	r0, sp, #32
 8001f3e:	f000 fb0b 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f42:	2100      	movs	r1, #0
 8001f44:	2214      	movs	r2, #20
 8001f46:	a803      	add	r0, sp, #12
 8001f48:	f000 fb06 	bl	8002558 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <SystemClock_Config+0x90>)
 8001f50:	9501      	str	r5, [sp, #4]
 8001f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f66:	9502      	str	r5, [sp, #8]
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f86:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f8c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001f92:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f94:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001f96:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f98:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fa0:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa2:	f7ff f985 	bl	80012b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001faa:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fb0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb4:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb8:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fba:	f7ff fb4d 	bl	8001658 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001fbe:	b015      	add	sp, #84	; 0x54
 8001fc0:	bd30      	pop	{r4, r5, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000

08001fcc <main>:
{
 8001fcc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001fd0:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
  HAL_Init();
 8001fd4:	f7fe ffe8 	bl	8000fa8 <HAL_Init>
  SystemClock_Config();
 8001fd8:	f7ff ffac 	bl	8001f34 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	2214      	movs	r2, #20
 8001fde:	2100      	movs	r1, #0
 8001fe0:	a808      	add	r0, sp, #32

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f000 fab8 	bl	8002558 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4bad      	ldr	r3, [pc, #692]	; (80022a0 <main+0x2d4>)
 8001fea:	9402      	str	r4, [sp, #8]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fee:	48ad      	ldr	r0, [pc, #692]	; (80022a4 <main+0x2d8>)
  huart2.Instance = USART2;
 8001ff0:	4ead      	ldr	r6, [pc, #692]	; (80022a8 <main+0x2dc>)
  htim2.Instance = TIM2;
 8001ff2:	4fae      	ldr	r7, [pc, #696]	; (80022ac <main+0x2e0>)
  htim3.Instance = TIM3;
 8001ff4:	4dae      	ldr	r5, [pc, #696]	; (80022b0 <main+0x2e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	f042 0204 	orr.w	r2, r2, #4
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	f002 0204 	and.w	r2, r2, #4
 8002002:	9202      	str	r2, [sp, #8]
 8002004:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002006:	9403      	str	r4, [sp, #12]
 8002008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002016:	9203      	str	r2, [sp, #12]
 8002018:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	9404      	str	r4, [sp, #16]
 800201c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
 8002024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002026:	f002 0201 	and.w	r2, r2, #1
 800202a:	9204      	str	r2, [sp, #16]
 800202c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	9405      	str	r4, [sp, #20]
 8002030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002032:	f042 0202 	orr.w	r2, r2, #2
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800203e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002042:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002044:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002046:	f7ff f92d 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT22_VCC_Pin|DHT22_GND_Pin, GPIO_PIN_RESET);
 800204a:	4622      	mov	r2, r4
 800204c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002050:	4898      	ldr	r0, [pc, #608]	; (80022b4 <main+0x2e8>)
 8002052:	f7ff f927 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800205c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800205e:	4b96      	ldr	r3, [pc, #600]	; (80022b8 <main+0x2ec>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002060:	4894      	ldr	r0, [pc, #592]	; (80022b4 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002062:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002066:	f7ff f849 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800206a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002070:	eb0d 0103 	add.w	r1, sp, r3
 8002074:	488b      	ldr	r0, [pc, #556]	; (80022a4 <main+0x2d8>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8002076:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002080:	f7ff f83c 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT22_VCC_Pin DHT22_GND_Pin */
  GPIO_InitStruct.Pin = DHT22_VCC_Pin|DHT22_GND_Pin;
 8002084:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	a908      	add	r1, sp, #32
 800208a:	488a      	ldr	r0, [pc, #552]	; (80022b4 <main+0x2e8>)
  GPIO_InitStruct.Pin = DHT22_VCC_Pin|DHT22_GND_Pin;
 800208c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pin : DHT_22_IN_OUT_Pin */
  GPIO_InitStruct.Pin = DHT_22_IN_OUT_Pin;
 8002092:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f7ff f82f 	bl	80010fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DHT_22_IN_OUT_GPIO_Port, &GPIO_InitStruct);
 800209e:	a908      	add	r1, sp, #32
 80020a0:	4880      	ldr	r0, [pc, #512]	; (80022a4 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = DHT_22_IN_OUT_Pin;
 80020a6:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(DHT_22_IN_OUT_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f7ff f827 	bl	80010fc <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80020ae:	4a83      	ldr	r2, [pc, #524]	; (80022bc <main+0x2f0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b0:	60b4      	str	r4, [r6, #8]
  huart2.Init.BaudRate = 115200;
 80020b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020b6:	e886 000c 	stmia.w	r6, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ba:	4630      	mov	r0, r6
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020bc:	230c      	movs	r3, #12
 80020be:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c0:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c2:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c4:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c6:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c8:	f7ff fe12 	bl	8001cf0 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020cc:	2210      	movs	r2, #16
 80020ce:	4621      	mov	r1, r4
 80020d0:	a808      	add	r0, sp, #32
 80020d2:	f000 fa41 	bl	8002558 <memset>
  htim2.Init.Prescaler = 84-1;
 80020d6:	f04f 0b53 	mov.w	fp, #83	; 0x53
 80020da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020de:	e887 0808 	stmia.w	r7, {r3, fp}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e2:	4638      	mov	r0, r7
  htim2.Init.Period = 9;
 80020e4:	2309      	movs	r3, #9
 80020e6:	60fb      	str	r3, [r7, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	60bc      	str	r4, [r7, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	61bc      	str	r4, [r7, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f2:	9406      	str	r4, [sp, #24]
 80020f4:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f6:	f7ff fc71 	bl	80019dc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fa:	a908      	add	r1, sp, #32
 80020fc:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002102:	f7ff fc8f 	bl	8001a24 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002106:	a906      	add	r1, sp, #24
 8002108:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210e:	f7ff fd1d 	bl	8001b4c <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	2210      	movs	r2, #16
 8002114:	4621      	mov	r1, r4
 8002116:	a808      	add	r0, sp, #32
 8002118:	f000 fa1e 	bl	8002558 <memset>
  htim3.Instance = TIM3;
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <main+0x2f4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Prescaler = 84-1;
 8002120:	e885 0808 	stmia.w	r5, {r3, fp}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002124:	4628      	mov	r0, r5
  htim3.Init.Period = 0xFFFF-1;
 8002126:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800212a:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	9406      	str	r4, [sp, #24]
 8002132:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002134:	f7ff fc52 	bl	80019dc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002138:	a908      	add	r1, sp, #32
 800213a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002140:	f7ff fc70 	bl	8001a24 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002144:	a906      	add	r1, sp, #24
 8002146:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002148:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214a:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800214c:	f7ff fcfe 	bl	8001b4c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_GPIO_WritePin(DHT22_GND_GPIO_Port,DHT22_GND_Pin,GPIO_PIN_RESET);
 8002150:	4622      	mov	r2, r4
 8002152:	4649      	mov	r1, r9
 8002154:	4857      	ldr	r0, [pc, #348]	; (80022b4 <main+0x2e8>)
 8002156:	f7ff f8a5 	bl	80012a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DHT22_VCC_GPIO_Port,DHT22_VCC_Pin,GPIO_PIN_SET);
 800215a:	4642      	mov	r2, r8
 800215c:	4651      	mov	r1, sl
 800215e:	4855      	ldr	r0, [pc, #340]	; (80022b4 <main+0x2e8>)
 8002160:	f7ff f8a0 	bl	80012a4 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 8002164:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002168:	f7fe ff4a 	bl	8001000 <HAL_Delay>
  if(HAL_TIM_Base_Init(&htim2) != HAL_OK){
 800216c:	4638      	mov	r0, r7
 800216e:	f7ff fc35 	bl	80019dc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Init(&htim3);
 8002172:	4628      	mov	r0, r5
 8002174:	f7ff fc32 	bl	80019dc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 8002178:	4628      	mov	r0, r5
 800217a:	f7ff fb29 	bl	80017d0 <HAL_TIM_Base_Start>
  sprintf(buf,"starting\n\r");
 800217e:	4951      	ldr	r1, [pc, #324]	; (80022c4 <main+0x2f8>)
	  sprintf(buf,"pass\n\r");
 8002180:	4f51      	ldr	r7, [pc, #324]	; (80022c8 <main+0x2fc>)
Temperature = (float) (TEMP/10.0);
 8002182:	4d52      	ldr	r5, [pc, #328]	; (80022cc <main+0x300>)
  sprintf(buf,"starting\n\r");
 8002184:	a808      	add	r0, sp, #32
 8002186:	f000 fe7f 	bl	8002e88 <strcpy>
  HAL_UART_Transmit(&huart2,buf,strlen(buf),1000);
 800218a:	a808      	add	r0, sp, #32
 800218c:	f7fe f828 	bl	80001e0 <strlen>
 8002190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002194:	b282      	uxth	r2, r0
 8002196:	a908      	add	r1, sp, #32
 8002198:	4630      	mov	r0, r6
 800219a:	f7ff fdd7 	bl	8001d4c <HAL_UART_Transmit>
Rh_byte1 = read_data();
 800219e:	4e4c      	ldr	r6, [pc, #304]	; (80022d0 <main+0x304>)
Temperature = (float) (TEMP/10.0);
 80021a0:	2400      	movs	r4, #0
	  sprintf(buf,"pass\n\r");
 80021a2:	4639      	mov	r1, r7
 80021a4:	a808      	add	r0, sp, #32
 80021a6:	f000 fe6f 	bl	8002e88 <strcpy>
 DHT22_start();
 80021aa:	f7ff fe4d 	bl	8001e48 <DHT22_start>
 check_response();
 80021ae:	f7ff fe69 	bl	8001e84 <check_response>
Rh_byte1 = read_data();
 80021b2:	f7ff fe8b 	bl	8001ecc <read_data>
 80021b6:	7030      	strb	r0, [r6, #0]
Rh_byte2 = read_data ();
 80021b8:	f7ff fe88 	bl	8001ecc <read_data>
 80021bc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80022fc <main+0x330>
Temp_byte1 = read_data ();
 80021c0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8002300 <main+0x334>
Rh_byte2 = read_data ();
 80021c4:	f888 0000 	strb.w	r0, [r8]
Temp_byte1 = read_data ();
 80021c8:	f7ff fe80 	bl	8001ecc <read_data>
 80021cc:	f88a 0000 	strb.w	r0, [sl]
Temp_byte2 = read_data ();
 80021d0:	f7ff fe7c 	bl	8001ecc <read_data>
 80021d4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002304 <main+0x338>
 80021d8:	f889 0000 	strb.w	r0, [r9]
SUM = read_data();
 80021dc:	f7ff fe76 	bl	8001ecc <read_data>
 80021e0:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <main+0x308>)
TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80021e2:	f899 b000 	ldrb.w	fp, [r9]
SUM = read_data();
 80021e6:	8018      	strh	r0, [r3, #0]
TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80021e8:	f89a 3000 	ldrb.w	r3, [sl]
RH = ((Rh_byte1<<8)|Rh_byte2);
 80021ec:	f896 9000 	ldrb.w	r9, [r6]
TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80021f0:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
 80021f4:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <main+0x30c>)
 80021f6:	f8a3 b000 	strh.w	fp, [r3]
RH = ((Rh_byte1<<8)|Rh_byte2);
 80021fa:	f898 3000 	ldrb.w	r3, [r8]
 80021fe:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <main+0x310>)
Temperature = (float) (TEMP/10.0);
 8002204:	4658      	mov	r0, fp
RH = ((Rh_byte1<<8)|Rh_byte2);
 8002206:	f8a3 9000 	strh.w	r9, [r3]
Temperature = (float) (TEMP/10.0);
 800220a:	f7fe f993 	bl	8000534 <__aeabi_i2d>
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	f7fe fb1f 	bl	8000854 <__aeabi_ddiv>
 8002216:	f7fe fccb 	bl	8000bb0 <__aeabi_d2f>
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <main+0x314>)
 800221c:	4680      	mov	r8, r0
 800221e:	6018      	str	r0, [r3, #0]
Humidity = (float) (RH/10.0);
 8002220:	4648      	mov	r0, r9
 8002222:	f7fe f987 	bl	8000534 <__aeabi_i2d>
 8002226:	4622      	mov	r2, r4
 8002228:	462b      	mov	r3, r5
 800222a:	f7fe fb13 	bl	8000854 <__aeabi_ddiv>
 800222e:	f7fe fcbf 	bl	8000bb0 <__aeabi_d2f>
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <main+0x318>)
 8002234:	6018      	str	r0, [r3, #0]
temp_high  = TEMP/10;
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <main+0x31c>)
 8002238:	210a      	movs	r1, #10
Humidity = (float) (RH/10.0);
 800223a:	4682      	mov	sl, r0
temp_high  = TEMP/10;
 800223c:	fbbb f2f1 	udiv	r2, fp, r1
 8002240:	b290      	uxth	r0, r2
 8002242:	6018      	str	r0, [r3, #0]
temp_low = TEMP%10;
 8002244:	fb01 b212 	mls	r2, r1, r2, fp
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <main+0x320>)
 800224a:	b292      	uxth	r2, r2
 800224c:	601a      	str	r2, [r3, #0]
rh_high = RH/10;
 800224e:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <main+0x324>)
 8002250:	fbb9 f3f1 	udiv	r3, r9, r1
 8002254:	b298      	uxth	r0, r3
 8002256:	6010      	str	r0, [r2, #0]
rh_low	 = RH%10;
 8002258:	fb01 9313 	mls	r3, r1, r3, r9
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <main+0x328>)
 800225e:	b29b      	uxth	r3, r3
 8002260:	6013      	str	r3, [r2, #0]
sprintf(buf,"\n\r* TEMP:- %.2f C  RH:- %.2f %% \n\r",Temperature,Humidity);
 8002262:	4640      	mov	r0, r8
 8002264:	f7fe f978 	bl	8000558 <__aeabi_f2d>
 8002268:	4680      	mov	r8, r0
 800226a:	4650      	mov	r0, sl
 800226c:	4689      	mov	r9, r1
 800226e:	f7fe f973 	bl	8000558 <__aeabi_f2d>
 8002272:	4642      	mov	r2, r8
 8002274:	e9cd 0100 	strd	r0, r1, [sp]
 8002278:	464b      	mov	r3, r9
 800227a:	491f      	ldr	r1, [pc, #124]	; (80022f8 <main+0x32c>)
 800227c:	a808      	add	r0, sp, #32
 800227e:	f000 fddf 	bl	8002e40 <siprintf>
HAL_UART_Transmit(&huart2,buf,strlen(buf),1000);
 8002282:	a808      	add	r0, sp, #32
 8002284:	f7fd ffac 	bl	80001e0 <strlen>
 8002288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228c:	b282      	uxth	r2, r0
 800228e:	a908      	add	r1, sp, #32
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <main+0x2dc>)
 8002292:	f7ff fd5b 	bl	8001d4c <HAL_UART_Transmit>
HAL_Delay(2000);
 8002296:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800229a:	f7fe feb1 	bl	8001000 <HAL_Delay>
 800229e:	e780      	b.n	80021a2 <main+0x1d6>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	200002c4 	.word	0x200002c4
 80022ac:	20000284 	.word	0x20000284
 80022b0:	2000022c 	.word	0x2000022c
 80022b4:	40020800 	.word	0x40020800
 80022b8:	10210000 	.word	0x10210000
 80022bc:	40004400 	.word	0x40004400
 80022c0:	40000400 	.word	0x40000400
 80022c4:	08004650 	.word	0x08004650
 80022c8:	0800465b 	.word	0x0800465b
 80022cc:	40240000 	.word	0x40240000
 80022d0:	20000228 	.word	0x20000228
 80022d4:	20000304 	.word	0x20000304
 80022d8:	2000026c 	.word	0x2000026c
 80022dc:	2000022a 	.word	0x2000022a
 80022e0:	20000204 	.word	0x20000204
 80022e4:	20000200 	.word	0x20000200
 80022e8:	20000210 	.word	0x20000210
 80022ec:	20000214 	.word	0x20000214
 80022f0:	20000208 	.word	0x20000208
 80022f4:	2000020c 	.word	0x2000020c
 80022f8:	08004662 	.word	0x08004662
 80022fc:	2000026f 	.word	0x2000026f
 8002300:	2000026e 	.word	0x2000026e
 8002304:	20000306 	.word	0x20000306

08002308 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

if (htim->Instance == TIM2) {
 8002308:	6803      	ldr	r3, [r0, #0]
 800230a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	timercounter++;
 800230e:	bf01      	itttt	eq
 8002310:	4a02      	ldreq	r2, [pc, #8]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002312:	6813      	ldreq	r3, [r2, #0]
 8002314:	3301      	addeq	r3, #1
 8002316:	6013      	streq	r3, [r2, #0]
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200001fc 	.word	0x200001fc

08002320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_MspInit+0x3c>)
 8002324:	2100      	movs	r1, #0
 8002326:	9100      	str	r1, [sp, #0]
 8002328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
 8002330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002332:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002336:	9200      	str	r2, [sp, #0]
 8002338:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	9101      	str	r1, [sp, #4]
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800234c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002350:	f7fe fe6a 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002354:	b003      	add	sp, #12
 8002356:	f85d fb04 	ldr.w	pc, [sp], #4
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002360:	6803      	ldr	r3, [r0, #0]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002366:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002368:	d116      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236a:	2200      	movs	r2, #0
 800236c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002370:	9200      	str	r2, [sp, #0]
 8002372:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002374:	f041 0101 	orr.w	r1, r1, #1
 8002378:	6419      	str	r1, [r3, #64]	; 0x40
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002382:	201c      	movs	r0, #28
 8002384:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002386:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002388:	f7fe fe60 	bl	800104c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800238c:	201c      	movs	r0, #28
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800238e:	f7fe fe91 	bl	80010b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002392:	b003      	add	sp, #12
 8002394:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_TIM_Base_MspInit+0x64>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d1f9      	bne.n	8002392 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800239e:	2200      	movs	r2, #0
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_TIM_Base_MspInit+0x68>)
 80023a2:	9201      	str	r2, [sp, #4]
 80023a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a6:	f041 0102 	orr.w	r1, r1, #2
 80023aa:	6419      	str	r1, [r3, #64]	; 0x40
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023b4:	201d      	movs	r0, #29
 80023b6:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023ba:	f7fe fe47 	bl	800104c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023be:	201d      	movs	r0, #29
 80023c0:	e7e5      	b.n	800238e <HAL_TIM_Base_MspInit+0x2e>
 80023c2:	bf00      	nop
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b510      	push	{r4, lr}
 80023ce:	4604      	mov	r4, r0
 80023d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	2214      	movs	r2, #20
 80023d4:	2100      	movs	r1, #0
 80023d6:	a803      	add	r0, sp, #12
 80023d8:	f000 f8be 	bl	8002558 <memset>
  if(huart->Instance==USART2)
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_UART_MspInit+0x60>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d120      	bne.n	8002426 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80023e8:	2100      	movs	r1, #0
 80023ea:	9101      	str	r1, [sp, #4]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	4810      	ldr	r0, [pc, #64]	; (8002430 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	9102      	str	r1, [sp, #8]
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002414:	230c      	movs	r3, #12
 8002416:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241e:	2307      	movs	r3, #7
 8002420:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f7fe fe6b 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002426:	b008      	add	sp, #32
 8002428:	bd10      	pop	{r4, pc}
 800242a:	bf00      	nop
 800242c:	40004400 	.word	0x40004400
 8002430:	40020000 	.word	0x40020000

08002434 <NMI_Handler>:
 8002434:	4770      	bx	lr

08002436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002436:	e7fe      	b.n	8002436 <HardFault_Handler>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	e7fe      	b.n	800243a <BusFault_Handler>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	e7fe      	b.n	800243c <UsageFault_Handler>

0800243e <SVC_Handler>:
 800243e:	4770      	bx	lr

08002440 <DebugMon_Handler>:
 8002440:	4770      	bx	lr

08002442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002442:	4770      	bx	lr

08002444 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002444:	f7fe bdca 	b.w	8000fdc <HAL_IncTick>

08002448 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002448:	4801      	ldr	r0, [pc, #4]	; (8002450 <TIM2_IRQHandler+0x8>)
 800244a:	f7ff b9d7 	b.w	80017fc <HAL_TIM_IRQHandler>
 800244e:	bf00      	nop
 8002450:	20000284 	.word	0x20000284

08002454 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002454:	4801      	ldr	r0, [pc, #4]	; (800245c <TIM3_IRQHandler+0x8>)
 8002456:	f7ff b9d1 	b.w	80017fc <HAL_TIM_IRQHandler>
 800245a:	bf00      	nop
 800245c:	2000022c 	.word	0x2000022c

08002460 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002460:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <_sbrk+0x2c>)
 8002464:	6819      	ldr	r1, [r3, #0]
{
 8002466:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002468:	b909      	cbnz	r1, 800246e <_sbrk+0xe>
		heap_end = &end;
 800246a:	4909      	ldr	r1, [pc, #36]	; (8002490 <_sbrk+0x30>)
 800246c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800246e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002470:	4669      	mov	r1, sp
 8002472:	4402      	add	r2, r0
 8002474:	428a      	cmp	r2, r1
 8002476:	d906      	bls.n	8002486 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002478:	f000 f844 	bl	8002504 <__errno>
 800247c:	230c      	movs	r3, #12
 800247e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002486:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002488:	bd08      	pop	{r3, pc}
 800248a:	bf00      	nop
 800248c:	20000218 	.word	0x20000218
 8002490:	2000030c 	.word	0x2000030c

08002494 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SystemInit+0x18>)
 8002496:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800249a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800249e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024b6:	e003      	b.n	80024c0 <LoopCopyDataInit>

080024b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024be:	3104      	adds	r1, #4

080024c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024c8:	d3f6      	bcc.n	80024b8 <CopyDataInit>
  ldr  r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024cc:	e002      	b.n	80024d4 <LoopFillZerobss>

080024ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024d0:	f842 3b04 	str.w	r3, [r2], #4

080024d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024d8:	d3f9      	bcc.n	80024ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024da:	f7ff ffdb 	bl	8002494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f000 f817 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7ff fd73 	bl	8001fcc <main>
  bx  lr    
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80024ec:	08004908 	.word	0x08004908
  ldr  r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024f4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80024f8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80024fc:	2000030c 	.word	0x2000030c

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <__errno>:
 8002504:	4b01      	ldr	r3, [pc, #4]	; (800250c <__errno+0x8>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000000c 	.word	0x2000000c

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	4e0d      	ldr	r6, [pc, #52]	; (8002548 <__libc_init_array+0x38>)
 8002514:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002516:	1ba4      	subs	r4, r4, r6
 8002518:	10a4      	asrs	r4, r4, #2
 800251a:	2500      	movs	r5, #0
 800251c:	42a5      	cmp	r5, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	4e0b      	ldr	r6, [pc, #44]	; (8002550 <__libc_init_array+0x40>)
 8002522:	4c0c      	ldr	r4, [pc, #48]	; (8002554 <__libc_init_array+0x44>)
 8002524:	f002 f888 	bl	8004638 <_init>
 8002528:	1ba4      	subs	r4, r4, r6
 800252a:	10a4      	asrs	r4, r4, #2
 800252c:	2500      	movs	r5, #0
 800252e:	42a5      	cmp	r5, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002538:	4798      	blx	r3
 800253a:	3501      	adds	r5, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002542:	4798      	blx	r3
 8002544:	3501      	adds	r5, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	08004900 	.word	0x08004900
 800254c:	08004900 	.word	0x08004900
 8002550:	08004900 	.word	0x08004900
 8002554:	08004904 	.word	0x08004904

08002558 <memset>:
 8002558:	4402      	add	r2, r0
 800255a:	4603      	mov	r3, r0
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	f803 1b01 	strb.w	r1, [r3], #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <__cvt>:
 8002568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800256c:	ec55 4b10 	vmov	r4, r5, d0
 8002570:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002572:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002576:	2d00      	cmp	r5, #0
 8002578:	460e      	mov	r6, r1
 800257a:	4691      	mov	r9, r2
 800257c:	4619      	mov	r1, r3
 800257e:	bfb8      	it	lt
 8002580:	4622      	movlt	r2, r4
 8002582:	462b      	mov	r3, r5
 8002584:	f027 0720 	bic.w	r7, r7, #32
 8002588:	bfbb      	ittet	lt
 800258a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800258e:	461d      	movlt	r5, r3
 8002590:	2300      	movge	r3, #0
 8002592:	232d      	movlt	r3, #45	; 0x2d
 8002594:	bfb8      	it	lt
 8002596:	4614      	movlt	r4, r2
 8002598:	2f46      	cmp	r7, #70	; 0x46
 800259a:	700b      	strb	r3, [r1, #0]
 800259c:	d004      	beq.n	80025a8 <__cvt+0x40>
 800259e:	2f45      	cmp	r7, #69	; 0x45
 80025a0:	d100      	bne.n	80025a4 <__cvt+0x3c>
 80025a2:	3601      	adds	r6, #1
 80025a4:	2102      	movs	r1, #2
 80025a6:	e000      	b.n	80025aa <__cvt+0x42>
 80025a8:	2103      	movs	r1, #3
 80025aa:	ab03      	add	r3, sp, #12
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	ab02      	add	r3, sp, #8
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4632      	mov	r2, r6
 80025b4:	4653      	mov	r3, sl
 80025b6:	ec45 4b10 	vmov	d0, r4, r5
 80025ba:	f000 fcf9 	bl	8002fb0 <_dtoa_r>
 80025be:	2f47      	cmp	r7, #71	; 0x47
 80025c0:	4680      	mov	r8, r0
 80025c2:	d102      	bne.n	80025ca <__cvt+0x62>
 80025c4:	f019 0f01 	tst.w	r9, #1
 80025c8:	d026      	beq.n	8002618 <__cvt+0xb0>
 80025ca:	2f46      	cmp	r7, #70	; 0x46
 80025cc:	eb08 0906 	add.w	r9, r8, r6
 80025d0:	d111      	bne.n	80025f6 <__cvt+0x8e>
 80025d2:	f898 3000 	ldrb.w	r3, [r8]
 80025d6:	2b30      	cmp	r3, #48	; 0x30
 80025d8:	d10a      	bne.n	80025f0 <__cvt+0x88>
 80025da:	2200      	movs	r2, #0
 80025dc:	2300      	movs	r3, #0
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe fa75 	bl	8000ad0 <__aeabi_dcmpeq>
 80025e6:	b918      	cbnz	r0, 80025f0 <__cvt+0x88>
 80025e8:	f1c6 0601 	rsb	r6, r6, #1
 80025ec:	f8ca 6000 	str.w	r6, [sl]
 80025f0:	f8da 3000 	ldr.w	r3, [sl]
 80025f4:	4499      	add	r9, r3
 80025f6:	2200      	movs	r2, #0
 80025f8:	2300      	movs	r3, #0
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fe fa67 	bl	8000ad0 <__aeabi_dcmpeq>
 8002602:	b938      	cbnz	r0, 8002614 <__cvt+0xac>
 8002604:	2230      	movs	r2, #48	; 0x30
 8002606:	9b03      	ldr	r3, [sp, #12]
 8002608:	4599      	cmp	r9, r3
 800260a:	d905      	bls.n	8002618 <__cvt+0xb0>
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	9103      	str	r1, [sp, #12]
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e7f8      	b.n	8002606 <__cvt+0x9e>
 8002614:	f8cd 900c 	str.w	r9, [sp, #12]
 8002618:	9b03      	ldr	r3, [sp, #12]
 800261a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800261c:	eba3 0308 	sub.w	r3, r3, r8
 8002620:	4640      	mov	r0, r8
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	b004      	add	sp, #16
 8002626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800262a <__exponent>:
 800262a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800262c:	4603      	mov	r3, r0
 800262e:	2900      	cmp	r1, #0
 8002630:	bfb8      	it	lt
 8002632:	4249      	neglt	r1, r1
 8002634:	f803 2b02 	strb.w	r2, [r3], #2
 8002638:	bfb4      	ite	lt
 800263a:	222d      	movlt	r2, #45	; 0x2d
 800263c:	222b      	movge	r2, #43	; 0x2b
 800263e:	2909      	cmp	r1, #9
 8002640:	7042      	strb	r2, [r0, #1]
 8002642:	dd20      	ble.n	8002686 <__exponent+0x5c>
 8002644:	f10d 0207 	add.w	r2, sp, #7
 8002648:	4617      	mov	r7, r2
 800264a:	260a      	movs	r6, #10
 800264c:	fb91 f5f6 	sdiv	r5, r1, r6
 8002650:	fb06 1115 	mls	r1, r6, r5, r1
 8002654:	3130      	adds	r1, #48	; 0x30
 8002656:	2d09      	cmp	r5, #9
 8002658:	f802 1c01 	strb.w	r1, [r2, #-1]
 800265c:	f102 34ff 	add.w	r4, r2, #4294967295
 8002660:	4629      	mov	r1, r5
 8002662:	dc09      	bgt.n	8002678 <__exponent+0x4e>
 8002664:	3130      	adds	r1, #48	; 0x30
 8002666:	3a02      	subs	r2, #2
 8002668:	f804 1c01 	strb.w	r1, [r4, #-1]
 800266c:	42ba      	cmp	r2, r7
 800266e:	461c      	mov	r4, r3
 8002670:	d304      	bcc.n	800267c <__exponent+0x52>
 8002672:	1a20      	subs	r0, r4, r0
 8002674:	b003      	add	sp, #12
 8002676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002678:	4622      	mov	r2, r4
 800267a:	e7e7      	b.n	800264c <__exponent+0x22>
 800267c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002680:	f803 1b01 	strb.w	r1, [r3], #1
 8002684:	e7f2      	b.n	800266c <__exponent+0x42>
 8002686:	2230      	movs	r2, #48	; 0x30
 8002688:	461c      	mov	r4, r3
 800268a:	4411      	add	r1, r2
 800268c:	f804 2b02 	strb.w	r2, [r4], #2
 8002690:	7059      	strb	r1, [r3, #1]
 8002692:	e7ee      	b.n	8002672 <__exponent+0x48>

08002694 <_printf_float>:
 8002694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002698:	b08d      	sub	sp, #52	; 0x34
 800269a:	460c      	mov	r4, r1
 800269c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80026a0:	4616      	mov	r6, r2
 80026a2:	461f      	mov	r7, r3
 80026a4:	4605      	mov	r5, r0
 80026a6:	f001 fa51 	bl	8003b4c <_localeconv_r>
 80026aa:	6803      	ldr	r3, [r0, #0]
 80026ac:	9304      	str	r3, [sp, #16]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fd96 	bl	80001e0 <strlen>
 80026b4:	2300      	movs	r3, #0
 80026b6:	930a      	str	r3, [sp, #40]	; 0x28
 80026b8:	f8d8 3000 	ldr.w	r3, [r8]
 80026bc:	9005      	str	r0, [sp, #20]
 80026be:	3307      	adds	r3, #7
 80026c0:	f023 0307 	bic.w	r3, r3, #7
 80026c4:	f103 0208 	add.w	r2, r3, #8
 80026c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80026cc:	f8d4 b000 	ldr.w	fp, [r4]
 80026d0:	f8c8 2000 	str.w	r2, [r8]
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80026dc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80026e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80026e4:	9307      	str	r3, [sp, #28]
 80026e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80026ea:	f04f 32ff 	mov.w	r2, #4294967295
 80026ee:	4ba5      	ldr	r3, [pc, #660]	; (8002984 <_printf_float+0x2f0>)
 80026f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80026f4:	f7fe fa1e 	bl	8000b34 <__aeabi_dcmpun>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	f040 81fb 	bne.w	8002af4 <_printf_float+0x460>
 80026fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002702:	4ba0      	ldr	r3, [pc, #640]	; (8002984 <_printf_float+0x2f0>)
 8002704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002708:	f7fe f9f6 	bl	8000af8 <__aeabi_dcmple>
 800270c:	2800      	cmp	r0, #0
 800270e:	f040 81f1 	bne.w	8002af4 <_printf_float+0x460>
 8002712:	2200      	movs	r2, #0
 8002714:	2300      	movs	r3, #0
 8002716:	4640      	mov	r0, r8
 8002718:	4649      	mov	r1, r9
 800271a:	f7fe f9e3 	bl	8000ae4 <__aeabi_dcmplt>
 800271e:	b110      	cbz	r0, 8002726 <_printf_float+0x92>
 8002720:	232d      	movs	r3, #45	; 0x2d
 8002722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002726:	4b98      	ldr	r3, [pc, #608]	; (8002988 <_printf_float+0x2f4>)
 8002728:	4a98      	ldr	r2, [pc, #608]	; (800298c <_printf_float+0x2f8>)
 800272a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800272e:	bf8c      	ite	hi
 8002730:	4690      	movhi	r8, r2
 8002732:	4698      	movls	r8, r3
 8002734:	2303      	movs	r3, #3
 8002736:	f02b 0204 	bic.w	r2, fp, #4
 800273a:	6123      	str	r3, [r4, #16]
 800273c:	6022      	str	r2, [r4, #0]
 800273e:	f04f 0900 	mov.w	r9, #0
 8002742:	9700      	str	r7, [sp, #0]
 8002744:	4633      	mov	r3, r6
 8002746:	aa0b      	add	r2, sp, #44	; 0x2c
 8002748:	4621      	mov	r1, r4
 800274a:	4628      	mov	r0, r5
 800274c:	f000 f9e2 	bl	8002b14 <_printf_common>
 8002750:	3001      	adds	r0, #1
 8002752:	f040 8093 	bne.w	800287c <_printf_float+0x1e8>
 8002756:	f04f 30ff 	mov.w	r0, #4294967295
 800275a:	b00d      	add	sp, #52	; 0x34
 800275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002760:	6861      	ldr	r1, [r4, #4]
 8002762:	1c4b      	adds	r3, r1, #1
 8002764:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002768:	d13f      	bne.n	80027ea <_printf_float+0x156>
 800276a:	2306      	movs	r3, #6
 800276c:	6063      	str	r3, [r4, #4]
 800276e:	2300      	movs	r3, #0
 8002770:	9303      	str	r3, [sp, #12]
 8002772:	ab0a      	add	r3, sp, #40	; 0x28
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	ab09      	add	r3, sp, #36	; 0x24
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	ec49 8b10 	vmov	d0, r8, r9
 800277e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002782:	6022      	str	r2, [r4, #0]
 8002784:	f8cd a004 	str.w	sl, [sp, #4]
 8002788:	6861      	ldr	r1, [r4, #4]
 800278a:	4628      	mov	r0, r5
 800278c:	f7ff feec 	bl	8002568 <__cvt>
 8002790:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002794:	2b47      	cmp	r3, #71	; 0x47
 8002796:	4680      	mov	r8, r0
 8002798:	d109      	bne.n	80027ae <_printf_float+0x11a>
 800279a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800279c:	1cd8      	adds	r0, r3, #3
 800279e:	db02      	blt.n	80027a6 <_printf_float+0x112>
 80027a0:	6862      	ldr	r2, [r4, #4]
 80027a2:	4293      	cmp	r3, r2
 80027a4:	dd57      	ble.n	8002856 <_printf_float+0x1c2>
 80027a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80027aa:	fa5f fa8a 	uxtb.w	sl, sl
 80027ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80027b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027b4:	d834      	bhi.n	8002820 <_printf_float+0x18c>
 80027b6:	3901      	subs	r1, #1
 80027b8:	4652      	mov	r2, sl
 80027ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80027be:	9109      	str	r1, [sp, #36]	; 0x24
 80027c0:	f7ff ff33 	bl	800262a <__exponent>
 80027c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027c6:	1883      	adds	r3, r0, r2
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	4681      	mov	r9, r0
 80027cc:	6123      	str	r3, [r4, #16]
 80027ce:	dc02      	bgt.n	80027d6 <_printf_float+0x142>
 80027d0:	6822      	ldr	r2, [r4, #0]
 80027d2:	07d1      	lsls	r1, r2, #31
 80027d4:	d501      	bpl.n	80027da <_printf_float+0x146>
 80027d6:	3301      	adds	r3, #1
 80027d8:	6123      	str	r3, [r4, #16]
 80027da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0af      	beq.n	8002742 <_printf_float+0xae>
 80027e2:	232d      	movs	r3, #45	; 0x2d
 80027e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027e8:	e7ab      	b.n	8002742 <_printf_float+0xae>
 80027ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80027ee:	d002      	beq.n	80027f6 <_printf_float+0x162>
 80027f0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80027f4:	d1bb      	bne.n	800276e <_printf_float+0xda>
 80027f6:	b189      	cbz	r1, 800281c <_printf_float+0x188>
 80027f8:	2300      	movs	r3, #0
 80027fa:	9303      	str	r3, [sp, #12]
 80027fc:	ab0a      	add	r3, sp, #40	; 0x28
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	ab09      	add	r3, sp, #36	; 0x24
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	ec49 8b10 	vmov	d0, r8, r9
 8002808:	6022      	str	r2, [r4, #0]
 800280a:	f8cd a004 	str.w	sl, [sp, #4]
 800280e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002812:	4628      	mov	r0, r5
 8002814:	f7ff fea8 	bl	8002568 <__cvt>
 8002818:	4680      	mov	r8, r0
 800281a:	e7be      	b.n	800279a <_printf_float+0x106>
 800281c:	2301      	movs	r3, #1
 800281e:	e7a5      	b.n	800276c <_printf_float+0xd8>
 8002820:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002824:	d119      	bne.n	800285a <_printf_float+0x1c6>
 8002826:	2900      	cmp	r1, #0
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	dd0c      	ble.n	8002846 <_printf_float+0x1b2>
 800282c:	6121      	str	r1, [r4, #16]
 800282e:	b913      	cbnz	r3, 8002836 <_printf_float+0x1a2>
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	07d2      	lsls	r2, r2, #31
 8002834:	d502      	bpl.n	800283c <_printf_float+0x1a8>
 8002836:	3301      	adds	r3, #1
 8002838:	440b      	add	r3, r1
 800283a:	6123      	str	r3, [r4, #16]
 800283c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800283e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002840:	f04f 0900 	mov.w	r9, #0
 8002844:	e7c9      	b.n	80027da <_printf_float+0x146>
 8002846:	b913      	cbnz	r3, 800284e <_printf_float+0x1ba>
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	07d0      	lsls	r0, r2, #31
 800284c:	d501      	bpl.n	8002852 <_printf_float+0x1be>
 800284e:	3302      	adds	r3, #2
 8002850:	e7f3      	b.n	800283a <_printf_float+0x1a6>
 8002852:	2301      	movs	r3, #1
 8002854:	e7f1      	b.n	800283a <_printf_float+0x1a6>
 8002856:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800285a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800285c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800285e:	4293      	cmp	r3, r2
 8002860:	db05      	blt.n	800286e <_printf_float+0x1da>
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	6123      	str	r3, [r4, #16]
 8002866:	07d1      	lsls	r1, r2, #31
 8002868:	d5e8      	bpl.n	800283c <_printf_float+0x1a8>
 800286a:	3301      	adds	r3, #1
 800286c:	e7e5      	b.n	800283a <_printf_float+0x1a6>
 800286e:	2b00      	cmp	r3, #0
 8002870:	bfd4      	ite	le
 8002872:	f1c3 0302 	rsble	r3, r3, #2
 8002876:	2301      	movgt	r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	e7de      	b.n	800283a <_printf_float+0x1a6>
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	055a      	lsls	r2, r3, #21
 8002880:	d407      	bmi.n	8002892 <_printf_float+0x1fe>
 8002882:	6923      	ldr	r3, [r4, #16]
 8002884:	4642      	mov	r2, r8
 8002886:	4631      	mov	r1, r6
 8002888:	4628      	mov	r0, r5
 800288a:	47b8      	blx	r7
 800288c:	3001      	adds	r0, #1
 800288e:	d12b      	bne.n	80028e8 <_printf_float+0x254>
 8002890:	e761      	b.n	8002756 <_printf_float+0xc2>
 8002892:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002896:	f240 80e2 	bls.w	8002a5e <_printf_float+0x3ca>
 800289a:	2200      	movs	r2, #0
 800289c:	2300      	movs	r3, #0
 800289e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028a2:	f7fe f915 	bl	8000ad0 <__aeabi_dcmpeq>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d03c      	beq.n	8002924 <_printf_float+0x290>
 80028aa:	2301      	movs	r3, #1
 80028ac:	4a38      	ldr	r2, [pc, #224]	; (8002990 <_printf_float+0x2fc>)
 80028ae:	4631      	mov	r1, r6
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b8      	blx	r7
 80028b4:	3001      	adds	r0, #1
 80028b6:	f43f af4e 	beq.w	8002756 <_printf_float+0xc2>
 80028ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028be:	429a      	cmp	r2, r3
 80028c0:	db02      	blt.n	80028c8 <_printf_float+0x234>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	07d8      	lsls	r0, r3, #31
 80028c6:	d50f      	bpl.n	80028e8 <_printf_float+0x254>
 80028c8:	9b05      	ldr	r3, [sp, #20]
 80028ca:	9a04      	ldr	r2, [sp, #16]
 80028cc:	4631      	mov	r1, r6
 80028ce:	4628      	mov	r0, r5
 80028d0:	47b8      	blx	r7
 80028d2:	3001      	adds	r0, #1
 80028d4:	f43f af3f 	beq.w	8002756 <_printf_float+0xc2>
 80028d8:	f04f 0800 	mov.w	r8, #0
 80028dc:	f104 091a 	add.w	r9, r4, #26
 80028e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	4598      	cmp	r8, r3
 80028e6:	db12      	blt.n	800290e <_printf_float+0x27a>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	079b      	lsls	r3, r3, #30
 80028ec:	d509      	bpl.n	8002902 <_printf_float+0x26e>
 80028ee:	f04f 0800 	mov.w	r8, #0
 80028f2:	f104 0919 	add.w	r9, r4, #25
 80028f6:	68e3      	ldr	r3, [r4, #12]
 80028f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	4598      	cmp	r8, r3
 80028fe:	f2c0 80ee 	blt.w	8002ade <_printf_float+0x44a>
 8002902:	68e0      	ldr	r0, [r4, #12]
 8002904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002906:	4298      	cmp	r0, r3
 8002908:	bfb8      	it	lt
 800290a:	4618      	movlt	r0, r3
 800290c:	e725      	b.n	800275a <_printf_float+0xc6>
 800290e:	2301      	movs	r3, #1
 8002910:	464a      	mov	r2, r9
 8002912:	4631      	mov	r1, r6
 8002914:	4628      	mov	r0, r5
 8002916:	47b8      	blx	r7
 8002918:	3001      	adds	r0, #1
 800291a:	f43f af1c 	beq.w	8002756 <_printf_float+0xc2>
 800291e:	f108 0801 	add.w	r8, r8, #1
 8002922:	e7dd      	b.n	80028e0 <_printf_float+0x24c>
 8002924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	dc34      	bgt.n	8002994 <_printf_float+0x300>
 800292a:	2301      	movs	r3, #1
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <_printf_float+0x2fc>)
 800292e:	4631      	mov	r1, r6
 8002930:	4628      	mov	r0, r5
 8002932:	47b8      	blx	r7
 8002934:	3001      	adds	r0, #1
 8002936:	f43f af0e 	beq.w	8002756 <_printf_float+0xc2>
 800293a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800293c:	b923      	cbnz	r3, 8002948 <_printf_float+0x2b4>
 800293e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002940:	b913      	cbnz	r3, 8002948 <_printf_float+0x2b4>
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	07d9      	lsls	r1, r3, #31
 8002946:	d5cf      	bpl.n	80028e8 <_printf_float+0x254>
 8002948:	9b05      	ldr	r3, [sp, #20]
 800294a:	9a04      	ldr	r2, [sp, #16]
 800294c:	4631      	mov	r1, r6
 800294e:	4628      	mov	r0, r5
 8002950:	47b8      	blx	r7
 8002952:	3001      	adds	r0, #1
 8002954:	f43f aeff 	beq.w	8002756 <_printf_float+0xc2>
 8002958:	f04f 0900 	mov.w	r9, #0
 800295c:	f104 0a1a 	add.w	sl, r4, #26
 8002960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002962:	425b      	negs	r3, r3
 8002964:	4599      	cmp	r9, r3
 8002966:	db01      	blt.n	800296c <_printf_float+0x2d8>
 8002968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800296a:	e78b      	b.n	8002884 <_printf_float+0x1f0>
 800296c:	2301      	movs	r3, #1
 800296e:	4652      	mov	r2, sl
 8002970:	4631      	mov	r1, r6
 8002972:	4628      	mov	r0, r5
 8002974:	47b8      	blx	r7
 8002976:	3001      	adds	r0, #1
 8002978:	f43f aeed 	beq.w	8002756 <_printf_float+0xc2>
 800297c:	f109 0901 	add.w	r9, r9, #1
 8002980:	e7ee      	b.n	8002960 <_printf_float+0x2cc>
 8002982:	bf00      	nop
 8002984:	7fefffff 	.word	0x7fefffff
 8002988:	0800469d 	.word	0x0800469d
 800298c:	080046a1 	.word	0x080046a1
 8002990:	080046ad 	.word	0x080046ad
 8002994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002998:	429a      	cmp	r2, r3
 800299a:	bfa8      	it	ge
 800299c:	461a      	movge	r2, r3
 800299e:	2a00      	cmp	r2, #0
 80029a0:	4691      	mov	r9, r2
 80029a2:	dc38      	bgt.n	8002a16 <_printf_float+0x382>
 80029a4:	f104 031a 	add.w	r3, r4, #26
 80029a8:	f04f 0b00 	mov.w	fp, #0
 80029ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80029b0:	9306      	str	r3, [sp, #24]
 80029b2:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80029b6:	ebaa 0309 	sub.w	r3, sl, r9
 80029ba:	459b      	cmp	fp, r3
 80029bc:	db33      	blt.n	8002a26 <_printf_float+0x392>
 80029be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029c2:	429a      	cmp	r2, r3
 80029c4:	db3a      	blt.n	8002a3c <_printf_float+0x3a8>
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	07da      	lsls	r2, r3, #31
 80029ca:	d437      	bmi.n	8002a3c <_printf_float+0x3a8>
 80029cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029d0:	eba3 020a 	sub.w	r2, r3, sl
 80029d4:	eba3 0901 	sub.w	r9, r3, r1
 80029d8:	4591      	cmp	r9, r2
 80029da:	bfa8      	it	ge
 80029dc:	4691      	movge	r9, r2
 80029de:	f1b9 0f00 	cmp.w	r9, #0
 80029e2:	dc33      	bgt.n	8002a4c <_printf_float+0x3b8>
 80029e4:	f04f 0800 	mov.w	r8, #0
 80029e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80029ec:	f104 0a1a 	add.w	sl, r4, #26
 80029f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	eba3 0309 	sub.w	r3, r3, r9
 80029fa:	4598      	cmp	r8, r3
 80029fc:	f6bf af74 	bge.w	80028e8 <_printf_float+0x254>
 8002a00:	2301      	movs	r3, #1
 8002a02:	4652      	mov	r2, sl
 8002a04:	4631      	mov	r1, r6
 8002a06:	4628      	mov	r0, r5
 8002a08:	47b8      	blx	r7
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	f43f aea3 	beq.w	8002756 <_printf_float+0xc2>
 8002a10:	f108 0801 	add.w	r8, r8, #1
 8002a14:	e7ec      	b.n	80029f0 <_printf_float+0x35c>
 8002a16:	4613      	mov	r3, r2
 8002a18:	4631      	mov	r1, r6
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	47b8      	blx	r7
 8002a20:	3001      	adds	r0, #1
 8002a22:	d1bf      	bne.n	80029a4 <_printf_float+0x310>
 8002a24:	e697      	b.n	8002756 <_printf_float+0xc2>
 8002a26:	2301      	movs	r3, #1
 8002a28:	9a06      	ldr	r2, [sp, #24]
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	47b8      	blx	r7
 8002a30:	3001      	adds	r0, #1
 8002a32:	f43f ae90 	beq.w	8002756 <_printf_float+0xc2>
 8002a36:	f10b 0b01 	add.w	fp, fp, #1
 8002a3a:	e7ba      	b.n	80029b2 <_printf_float+0x31e>
 8002a3c:	9b05      	ldr	r3, [sp, #20]
 8002a3e:	9a04      	ldr	r2, [sp, #16]
 8002a40:	4631      	mov	r1, r6
 8002a42:	4628      	mov	r0, r5
 8002a44:	47b8      	blx	r7
 8002a46:	3001      	adds	r0, #1
 8002a48:	d1c0      	bne.n	80029cc <_printf_float+0x338>
 8002a4a:	e684      	b.n	8002756 <_printf_float+0xc2>
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	eb08 020a 	add.w	r2, r8, sl
 8002a52:	4631      	mov	r1, r6
 8002a54:	4628      	mov	r0, r5
 8002a56:	47b8      	blx	r7
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d1c3      	bne.n	80029e4 <_printf_float+0x350>
 8002a5c:	e67b      	b.n	8002756 <_printf_float+0xc2>
 8002a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a60:	2a01      	cmp	r2, #1
 8002a62:	dc01      	bgt.n	8002a68 <_printf_float+0x3d4>
 8002a64:	07db      	lsls	r3, r3, #31
 8002a66:	d537      	bpl.n	8002ad8 <_printf_float+0x444>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	4631      	mov	r1, r6
 8002a6e:	4628      	mov	r0, r5
 8002a70:	47b8      	blx	r7
 8002a72:	3001      	adds	r0, #1
 8002a74:	f43f ae6f 	beq.w	8002756 <_printf_float+0xc2>
 8002a78:	9b05      	ldr	r3, [sp, #20]
 8002a7a:	9a04      	ldr	r2, [sp, #16]
 8002a7c:	4631      	mov	r1, r6
 8002a7e:	4628      	mov	r0, r5
 8002a80:	47b8      	blx	r7
 8002a82:	3001      	adds	r0, #1
 8002a84:	f43f ae67 	beq.w	8002756 <_printf_float+0xc2>
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a90:	f7fe f81e 	bl	8000ad0 <__aeabi_dcmpeq>
 8002a94:	b158      	cbz	r0, 8002aae <_printf_float+0x41a>
 8002a96:	f04f 0800 	mov.w	r8, #0
 8002a9a:	f104 0a1a 	add.w	sl, r4, #26
 8002a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	4598      	cmp	r8, r3
 8002aa4:	db0d      	blt.n	8002ac2 <_printf_float+0x42e>
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002aac:	e6eb      	b.n	8002886 <_printf_float+0x1f2>
 8002aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ab0:	f108 0201 	add.w	r2, r8, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	4631      	mov	r1, r6
 8002ab8:	4628      	mov	r0, r5
 8002aba:	47b8      	blx	r7
 8002abc:	3001      	adds	r0, #1
 8002abe:	d1f2      	bne.n	8002aa6 <_printf_float+0x412>
 8002ac0:	e649      	b.n	8002756 <_printf_float+0xc2>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4652      	mov	r2, sl
 8002ac6:	4631      	mov	r1, r6
 8002ac8:	4628      	mov	r0, r5
 8002aca:	47b8      	blx	r7
 8002acc:	3001      	adds	r0, #1
 8002ace:	f43f ae42 	beq.w	8002756 <_printf_float+0xc2>
 8002ad2:	f108 0801 	add.w	r8, r8, #1
 8002ad6:	e7e2      	b.n	8002a9e <_printf_float+0x40a>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4642      	mov	r2, r8
 8002adc:	e7eb      	b.n	8002ab6 <_printf_float+0x422>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	464a      	mov	r2, r9
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	47b8      	blx	r7
 8002ae8:	3001      	adds	r0, #1
 8002aea:	f43f ae34 	beq.w	8002756 <_printf_float+0xc2>
 8002aee:	f108 0801 	add.w	r8, r8, #1
 8002af2:	e700      	b.n	80028f6 <_printf_float+0x262>
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	4640      	mov	r0, r8
 8002afa:	4649      	mov	r1, r9
 8002afc:	f7fe f81a 	bl	8000b34 <__aeabi_dcmpun>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	f43f ae2d 	beq.w	8002760 <_printf_float+0xcc>
 8002b06:	4b01      	ldr	r3, [pc, #4]	; (8002b0c <_printf_float+0x478>)
 8002b08:	4a01      	ldr	r2, [pc, #4]	; (8002b10 <_printf_float+0x47c>)
 8002b0a:	e60e      	b.n	800272a <_printf_float+0x96>
 8002b0c:	080046a5 	.word	0x080046a5
 8002b10:	080046a9 	.word	0x080046a9

08002b14 <_printf_common>:
 8002b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b18:	4691      	mov	r9, r2
 8002b1a:	461f      	mov	r7, r3
 8002b1c:	688a      	ldr	r2, [r1, #8]
 8002b1e:	690b      	ldr	r3, [r1, #16]
 8002b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bfb8      	it	lt
 8002b28:	4613      	movlt	r3, r2
 8002b2a:	f8c9 3000 	str.w	r3, [r9]
 8002b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b32:	4606      	mov	r6, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	b112      	cbz	r2, 8002b3e <_printf_common+0x2a>
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f8c9 3000 	str.w	r3, [r9]
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	0699      	lsls	r1, r3, #26
 8002b42:	bf42      	ittt	mi
 8002b44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b48:	3302      	addmi	r3, #2
 8002b4a:	f8c9 3000 	strmi.w	r3, [r9]
 8002b4e:	6825      	ldr	r5, [r4, #0]
 8002b50:	f015 0506 	ands.w	r5, r5, #6
 8002b54:	d107      	bne.n	8002b66 <_printf_common+0x52>
 8002b56:	f104 0a19 	add.w	sl, r4, #25
 8002b5a:	68e3      	ldr	r3, [r4, #12]
 8002b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	429d      	cmp	r5, r3
 8002b64:	db29      	blt.n	8002bba <_printf_common+0xa6>
 8002b66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	3300      	adds	r3, #0
 8002b6e:	bf18      	it	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	0692      	lsls	r2, r2, #26
 8002b74:	d42e      	bmi.n	8002bd4 <_printf_common+0xc0>
 8002b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b7a:	4639      	mov	r1, r7
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	47c0      	blx	r8
 8002b80:	3001      	adds	r0, #1
 8002b82:	d021      	beq.n	8002bc8 <_printf_common+0xb4>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	68e5      	ldr	r5, [r4, #12]
 8002b88:	f8d9 2000 	ldr.w	r2, [r9]
 8002b8c:	f003 0306 	and.w	r3, r3, #6
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	bf08      	it	eq
 8002b94:	1aad      	subeq	r5, r5, r2
 8002b96:	68a3      	ldr	r3, [r4, #8]
 8002b98:	6922      	ldr	r2, [r4, #16]
 8002b9a:	bf0c      	ite	eq
 8002b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ba0:	2500      	movne	r5, #0
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	bfc4      	itt	gt
 8002ba6:	1a9b      	subgt	r3, r3, r2
 8002ba8:	18ed      	addgt	r5, r5, r3
 8002baa:	f04f 0900 	mov.w	r9, #0
 8002bae:	341a      	adds	r4, #26
 8002bb0:	454d      	cmp	r5, r9
 8002bb2:	d11b      	bne.n	8002bec <_printf_common+0xd8>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4652      	mov	r2, sl
 8002bbe:	4639      	mov	r1, r7
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	47c0      	blx	r8
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	d103      	bne.n	8002bd0 <_printf_common+0xbc>
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd0:	3501      	adds	r5, #1
 8002bd2:	e7c2      	b.n	8002b5a <_printf_common+0x46>
 8002bd4:	18e1      	adds	r1, r4, r3
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	2030      	movs	r0, #48	; 0x30
 8002bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bde:	4422      	add	r2, r4
 8002be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002be8:	3302      	adds	r3, #2
 8002bea:	e7c4      	b.n	8002b76 <_printf_common+0x62>
 8002bec:	2301      	movs	r3, #1
 8002bee:	4622      	mov	r2, r4
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	47c0      	blx	r8
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d0e6      	beq.n	8002bc8 <_printf_common+0xb4>
 8002bfa:	f109 0901 	add.w	r9, r9, #1
 8002bfe:	e7d7      	b.n	8002bb0 <_printf_common+0x9c>

08002c00 <_printf_i>:
 8002c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c04:	4617      	mov	r7, r2
 8002c06:	7e0a      	ldrb	r2, [r1, #24]
 8002c08:	b085      	sub	sp, #20
 8002c0a:	2a6e      	cmp	r2, #110	; 0x6e
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	4606      	mov	r6, r0
 8002c10:	460c      	mov	r4, r1
 8002c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c14:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002c18:	f000 80bc 	beq.w	8002d94 <_printf_i+0x194>
 8002c1c:	d81a      	bhi.n	8002c54 <_printf_i+0x54>
 8002c1e:	2a63      	cmp	r2, #99	; 0x63
 8002c20:	d02e      	beq.n	8002c80 <_printf_i+0x80>
 8002c22:	d80a      	bhi.n	8002c3a <_printf_i+0x3a>
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	f000 80c8 	beq.w	8002dba <_printf_i+0x1ba>
 8002c2a:	2a58      	cmp	r2, #88	; 0x58
 8002c2c:	f000 808a 	beq.w	8002d44 <_printf_i+0x144>
 8002c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c34:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002c38:	e02a      	b.n	8002c90 <_printf_i+0x90>
 8002c3a:	2a64      	cmp	r2, #100	; 0x64
 8002c3c:	d001      	beq.n	8002c42 <_printf_i+0x42>
 8002c3e:	2a69      	cmp	r2, #105	; 0x69
 8002c40:	d1f6      	bne.n	8002c30 <_printf_i+0x30>
 8002c42:	6821      	ldr	r1, [r4, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c4a:	d023      	beq.n	8002c94 <_printf_i+0x94>
 8002c4c:	1d11      	adds	r1, r2, #4
 8002c4e:	6019      	str	r1, [r3, #0]
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	e027      	b.n	8002ca4 <_printf_i+0xa4>
 8002c54:	2a73      	cmp	r2, #115	; 0x73
 8002c56:	f000 80b4 	beq.w	8002dc2 <_printf_i+0x1c2>
 8002c5a:	d808      	bhi.n	8002c6e <_printf_i+0x6e>
 8002c5c:	2a6f      	cmp	r2, #111	; 0x6f
 8002c5e:	d02a      	beq.n	8002cb6 <_printf_i+0xb6>
 8002c60:	2a70      	cmp	r2, #112	; 0x70
 8002c62:	d1e5      	bne.n	8002c30 <_printf_i+0x30>
 8002c64:	680a      	ldr	r2, [r1, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	600a      	str	r2, [r1, #0]
 8002c6c:	e003      	b.n	8002c76 <_printf_i+0x76>
 8002c6e:	2a75      	cmp	r2, #117	; 0x75
 8002c70:	d021      	beq.n	8002cb6 <_printf_i+0xb6>
 8002c72:	2a78      	cmp	r2, #120	; 0x78
 8002c74:	d1dc      	bne.n	8002c30 <_printf_i+0x30>
 8002c76:	2278      	movs	r2, #120	; 0x78
 8002c78:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002c7c:	496e      	ldr	r1, [pc, #440]	; (8002e38 <_printf_i+0x238>)
 8002c7e:	e064      	b.n	8002d4a <_printf_i+0x14a>
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002c86:	1d11      	adds	r1, r2, #4
 8002c88:	6019      	str	r1, [r3, #0]
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a3      	b.n	8002ddc <_printf_i+0x1dc>
 8002c94:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c98:	f102 0104 	add.w	r1, r2, #4
 8002c9c:	6019      	str	r1, [r3, #0]
 8002c9e:	d0d7      	beq.n	8002c50 <_printf_i+0x50>
 8002ca0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da03      	bge.n	8002cb0 <_printf_i+0xb0>
 8002ca8:	222d      	movs	r2, #45	; 0x2d
 8002caa:	425b      	negs	r3, r3
 8002cac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002cb0:	4962      	ldr	r1, [pc, #392]	; (8002e3c <_printf_i+0x23c>)
 8002cb2:	220a      	movs	r2, #10
 8002cb4:	e017      	b.n	8002ce6 <_printf_i+0xe6>
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cbe:	d003      	beq.n	8002cc8 <_printf_i+0xc8>
 8002cc0:	1d08      	adds	r0, r1, #4
 8002cc2:	6018      	str	r0, [r3, #0]
 8002cc4:	680b      	ldr	r3, [r1, #0]
 8002cc6:	e006      	b.n	8002cd6 <_printf_i+0xd6>
 8002cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ccc:	f101 0004 	add.w	r0, r1, #4
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	d0f7      	beq.n	8002cc4 <_printf_i+0xc4>
 8002cd4:	880b      	ldrh	r3, [r1, #0]
 8002cd6:	4959      	ldr	r1, [pc, #356]	; (8002e3c <_printf_i+0x23c>)
 8002cd8:	2a6f      	cmp	r2, #111	; 0x6f
 8002cda:	bf14      	ite	ne
 8002cdc:	220a      	movne	r2, #10
 8002cde:	2208      	moveq	r2, #8
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002ce6:	6865      	ldr	r5, [r4, #4]
 8002ce8:	60a5      	str	r5, [r4, #8]
 8002cea:	2d00      	cmp	r5, #0
 8002cec:	f2c0 809c 	blt.w	8002e28 <_printf_i+0x228>
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f020 0004 	bic.w	r0, r0, #4
 8002cf6:	6020      	str	r0, [r4, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d13f      	bne.n	8002d7c <_printf_i+0x17c>
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	f040 8095 	bne.w	8002e2c <_printf_i+0x22c>
 8002d02:	4675      	mov	r5, lr
 8002d04:	2a08      	cmp	r2, #8
 8002d06:	d10b      	bne.n	8002d20 <_printf_i+0x120>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	07da      	lsls	r2, r3, #31
 8002d0c:	d508      	bpl.n	8002d20 <_printf_i+0x120>
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	6862      	ldr	r2, [r4, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	bfde      	ittt	le
 8002d16:	2330      	movle	r3, #48	; 0x30
 8002d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d20:	ebae 0305 	sub.w	r3, lr, r5
 8002d24:	6123      	str	r3, [r4, #16]
 8002d26:	f8cd 8000 	str.w	r8, [sp]
 8002d2a:	463b      	mov	r3, r7
 8002d2c:	aa03      	add	r2, sp, #12
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4630      	mov	r0, r6
 8002d32:	f7ff feef 	bl	8002b14 <_printf_common>
 8002d36:	3001      	adds	r0, #1
 8002d38:	d155      	bne.n	8002de6 <_printf_i+0x1e6>
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3e:	b005      	add	sp, #20
 8002d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d44:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002d48:	493c      	ldr	r1, [pc, #240]	; (8002e3c <_printf_i+0x23c>)
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d52:	f100 0504 	add.w	r5, r0, #4
 8002d56:	601d      	str	r5, [r3, #0]
 8002d58:	d001      	beq.n	8002d5e <_printf_i+0x15e>
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	e002      	b.n	8002d64 <_printf_i+0x164>
 8002d5e:	0655      	lsls	r5, r2, #25
 8002d60:	d5fb      	bpl.n	8002d5a <_printf_i+0x15a>
 8002d62:	8803      	ldrh	r3, [r0, #0]
 8002d64:	07d0      	lsls	r0, r2, #31
 8002d66:	bf44      	itt	mi
 8002d68:	f042 0220 	orrmi.w	r2, r2, #32
 8002d6c:	6022      	strmi	r2, [r4, #0]
 8002d6e:	b91b      	cbnz	r3, 8002d78 <_printf_i+0x178>
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	f022 0220 	bic.w	r2, r2, #32
 8002d76:	6022      	str	r2, [r4, #0]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	e7b1      	b.n	8002ce0 <_printf_i+0xe0>
 8002d7c:	4675      	mov	r5, lr
 8002d7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d82:	fb02 3310 	mls	r3, r2, r0, r3
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d1f5      	bne.n	8002d7e <_printf_i+0x17e>
 8002d92:	e7b7      	b.n	8002d04 <_printf_i+0x104>
 8002d94:	6808      	ldr	r0, [r1, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	6949      	ldr	r1, [r1, #20]
 8002d9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d9e:	d004      	beq.n	8002daa <_printf_i+0x1aa>
 8002da0:	1d10      	adds	r0, r2, #4
 8002da2:	6018      	str	r0, [r3, #0]
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	6019      	str	r1, [r3, #0]
 8002da8:	e007      	b.n	8002dba <_printf_i+0x1ba>
 8002daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dae:	f102 0004 	add.w	r0, r2, #4
 8002db2:	6018      	str	r0, [r3, #0]
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	d0f6      	beq.n	8002da6 <_printf_i+0x1a6>
 8002db8:	8019      	strh	r1, [r3, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6123      	str	r3, [r4, #16]
 8002dbe:	4675      	mov	r5, lr
 8002dc0:	e7b1      	b.n	8002d26 <_printf_i+0x126>
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	1d11      	adds	r1, r2, #4
 8002dc6:	6019      	str	r1, [r3, #0]
 8002dc8:	6815      	ldr	r5, [r2, #0]
 8002dca:	6862      	ldr	r2, [r4, #4]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f7fd fa0e 	bl	80001f0 <memchr>
 8002dd4:	b108      	cbz	r0, 8002dda <_printf_i+0x1da>
 8002dd6:	1b40      	subs	r0, r0, r5
 8002dd8:	6060      	str	r0, [r4, #4]
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	2300      	movs	r3, #0
 8002de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de4:	e79f      	b.n	8002d26 <_printf_i+0x126>
 8002de6:	6923      	ldr	r3, [r4, #16]
 8002de8:	462a      	mov	r2, r5
 8002dea:	4639      	mov	r1, r7
 8002dec:	4630      	mov	r0, r6
 8002dee:	47c0      	blx	r8
 8002df0:	3001      	adds	r0, #1
 8002df2:	d0a2      	beq.n	8002d3a <_printf_i+0x13a>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	079b      	lsls	r3, r3, #30
 8002df8:	d507      	bpl.n	8002e0a <_printf_i+0x20a>
 8002dfa:	2500      	movs	r5, #0
 8002dfc:	f104 0919 	add.w	r9, r4, #25
 8002e00:	68e3      	ldr	r3, [r4, #12]
 8002e02:	9a03      	ldr	r2, [sp, #12]
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	429d      	cmp	r5, r3
 8002e08:	db05      	blt.n	8002e16 <_printf_i+0x216>
 8002e0a:	68e0      	ldr	r0, [r4, #12]
 8002e0c:	9b03      	ldr	r3, [sp, #12]
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	bfb8      	it	lt
 8002e12:	4618      	movlt	r0, r3
 8002e14:	e793      	b.n	8002d3e <_printf_i+0x13e>
 8002e16:	2301      	movs	r3, #1
 8002e18:	464a      	mov	r2, r9
 8002e1a:	4639      	mov	r1, r7
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	47c0      	blx	r8
 8002e20:	3001      	adds	r0, #1
 8002e22:	d08a      	beq.n	8002d3a <_printf_i+0x13a>
 8002e24:	3501      	adds	r5, #1
 8002e26:	e7eb      	b.n	8002e00 <_printf_i+0x200>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1a7      	bne.n	8002d7c <_printf_i+0x17c>
 8002e2c:	780b      	ldrb	r3, [r1, #0]
 8002e2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e36:	e765      	b.n	8002d04 <_printf_i+0x104>
 8002e38:	080046c0 	.word	0x080046c0
 8002e3c:	080046af 	.word	0x080046af

08002e40 <siprintf>:
 8002e40:	b40e      	push	{r1, r2, r3}
 8002e42:	b500      	push	{lr}
 8002e44:	b09c      	sub	sp, #112	; 0x70
 8002e46:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e4c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002e50:	9002      	str	r0, [sp, #8]
 8002e52:	9006      	str	r0, [sp, #24]
 8002e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e58:	480a      	ldr	r0, [pc, #40]	; (8002e84 <siprintf+0x44>)
 8002e5a:	9104      	str	r1, [sp, #16]
 8002e5c:	9107      	str	r1, [sp, #28]
 8002e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e66:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	a902      	add	r1, sp, #8
 8002e70:	f001 fa74 	bl	800435c <_svfiprintf_r>
 8002e74:	9b02      	ldr	r3, [sp, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	b01c      	add	sp, #112	; 0x70
 8002e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e80:	b003      	add	sp, #12
 8002e82:	4770      	bx	lr
 8002e84:	2000000c 	.word	0x2000000c

08002e88 <strcpy>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e8e:	f803 2b01 	strb.w	r2, [r3], #1
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	d1f9      	bne.n	8002e8a <strcpy+0x2>
 8002e96:	4770      	bx	lr

08002e98 <quorem>:
 8002e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9c:	6903      	ldr	r3, [r0, #16]
 8002e9e:	690c      	ldr	r4, [r1, #16]
 8002ea0:	429c      	cmp	r4, r3
 8002ea2:	4680      	mov	r8, r0
 8002ea4:	f300 8082 	bgt.w	8002fac <quorem+0x114>
 8002ea8:	3c01      	subs	r4, #1
 8002eaa:	f101 0714 	add.w	r7, r1, #20
 8002eae:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002eb2:	f100 0614 	add.w	r6, r0, #20
 8002eb6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002eba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002ebe:	eb06 030e 	add.w	r3, r6, lr
 8002ec2:	3501      	adds	r5, #1
 8002ec4:	eb07 090e 	add.w	r9, r7, lr
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ece:	b395      	cbz	r5, 8002f36 <quorem+0x9e>
 8002ed0:	f04f 0a00 	mov.w	sl, #0
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	46b4      	mov	ip, r6
 8002ed8:	46d3      	mov	fp, sl
 8002eda:	f850 2b04 	ldr.w	r2, [r0], #4
 8002ede:	b293      	uxth	r3, r2
 8002ee0:	fb05 a303 	mla	r3, r5, r3, sl
 8002ee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	ebab 0303 	sub.w	r3, fp, r3
 8002eee:	0c12      	lsrs	r2, r2, #16
 8002ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8002ef4:	fb05 a202 	mla	r2, r5, r2, sl
 8002ef8:	fa13 f38b 	uxtah	r3, r3, fp
 8002efc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002f00:	fa1f fb82 	uxth.w	fp, r2
 8002f04:	f8dc 2000 	ldr.w	r2, [ip]
 8002f08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f16:	4581      	cmp	r9, r0
 8002f18:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002f1c:	f84c 3b04 	str.w	r3, [ip], #4
 8002f20:	d2db      	bcs.n	8002eda <quorem+0x42>
 8002f22:	f856 300e 	ldr.w	r3, [r6, lr]
 8002f26:	b933      	cbnz	r3, 8002f36 <quorem+0x9e>
 8002f28:	9b01      	ldr	r3, [sp, #4]
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	429e      	cmp	r6, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	d330      	bcc.n	8002f94 <quorem+0xfc>
 8002f32:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f36:	4640      	mov	r0, r8
 8002f38:	f001 f833 	bl	8003fa2 <__mcmp>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	db25      	blt.n	8002f8c <quorem+0xf4>
 8002f40:	3501      	adds	r5, #1
 8002f42:	4630      	mov	r0, r6
 8002f44:	f04f 0e00 	mov.w	lr, #0
 8002f48:	f857 2b04 	ldr.w	r2, [r7], #4
 8002f4c:	f8d0 c000 	ldr.w	ip, [r0]
 8002f50:	b293      	uxth	r3, r2
 8002f52:	ebae 0303 	sub.w	r3, lr, r3
 8002f56:	0c12      	lsrs	r2, r2, #16
 8002f58:	fa13 f38c 	uxtah	r3, r3, ip
 8002f5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002f60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f6a:	45b9      	cmp	r9, r7
 8002f6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002f70:	f840 3b04 	str.w	r3, [r0], #4
 8002f74:	d2e8      	bcs.n	8002f48 <quorem+0xb0>
 8002f76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002f7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002f7e:	b92a      	cbnz	r2, 8002f8c <quorem+0xf4>
 8002f80:	3b04      	subs	r3, #4
 8002f82:	429e      	cmp	r6, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	d30b      	bcc.n	8002fa0 <quorem+0x108>
 8002f88:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	b003      	add	sp, #12
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	3b04      	subs	r3, #4
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d1ca      	bne.n	8002f32 <quorem+0x9a>
 8002f9c:	3c01      	subs	r4, #1
 8002f9e:	e7c5      	b.n	8002f2c <quorem+0x94>
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	3b04      	subs	r3, #4
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d1ef      	bne.n	8002f88 <quorem+0xf0>
 8002fa8:	3c01      	subs	r4, #1
 8002faa:	e7ea      	b.n	8002f82 <quorem+0xea>
 8002fac:	2000      	movs	r0, #0
 8002fae:	e7ee      	b.n	8002f8e <quorem+0xf6>

08002fb0 <_dtoa_r>:
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	ec57 6b10 	vmov	r6, r7, d0
 8002fb8:	b097      	sub	sp, #92	; 0x5c
 8002fba:	e9cd 6700 	strd	r6, r7, [sp]
 8002fbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002fc0:	9107      	str	r1, [sp, #28]
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8002fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fc8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8002fca:	b93e      	cbnz	r6, 8002fdc <_dtoa_r+0x2c>
 8002fcc:	2010      	movs	r0, #16
 8002fce:	f000 fdcb 	bl	8003b68 <malloc>
 8002fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8002fd4:	6046      	str	r6, [r0, #4]
 8002fd6:	6086      	str	r6, [r0, #8]
 8002fd8:	6006      	str	r6, [r0, #0]
 8002fda:	60c6      	str	r6, [r0, #12]
 8002fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	b151      	cbz	r1, 8002ff8 <_dtoa_r+0x48>
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	604a      	str	r2, [r1, #4]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 fe02 	bl	8003bf6 <_Bfree>
 8002ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	9b01      	ldr	r3, [sp, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfbf      	itttt	lt
 8002ffe:	2301      	movlt	r3, #1
 8003000:	602b      	strlt	r3, [r5, #0]
 8003002:	9b01      	ldrlt	r3, [sp, #4]
 8003004:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003008:	bfb2      	itee	lt
 800300a:	9301      	strlt	r3, [sp, #4]
 800300c:	2300      	movge	r3, #0
 800300e:	602b      	strge	r3, [r5, #0]
 8003010:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003014:	4ba8      	ldr	r3, [pc, #672]	; (80032b8 <_dtoa_r+0x308>)
 8003016:	ea33 0308 	bics.w	r3, r3, r8
 800301a:	d11b      	bne.n	8003054 <_dtoa_r+0xa4>
 800301c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800301e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	9b00      	ldr	r3, [sp, #0]
 8003026:	b923      	cbnz	r3, 8003032 <_dtoa_r+0x82>
 8003028:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800302c:	2800      	cmp	r0, #0
 800302e:	f000 8578 	beq.w	8003b22 <_dtoa_r+0xb72>
 8003032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003034:	b953      	cbnz	r3, 800304c <_dtoa_r+0x9c>
 8003036:	4ba1      	ldr	r3, [pc, #644]	; (80032bc <_dtoa_r+0x30c>)
 8003038:	e021      	b.n	800307e <_dtoa_r+0xce>
 800303a:	4ba1      	ldr	r3, [pc, #644]	; (80032c0 <_dtoa_r+0x310>)
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	3308      	adds	r3, #8
 8003040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	9802      	ldr	r0, [sp, #8]
 8003046:	b017      	add	sp, #92	; 0x5c
 8003048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304c:	4b9b      	ldr	r3, [pc, #620]	; (80032bc <_dtoa_r+0x30c>)
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	3303      	adds	r3, #3
 8003052:	e7f5      	b.n	8003040 <_dtoa_r+0x90>
 8003054:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003058:	2200      	movs	r2, #0
 800305a:	2300      	movs	r3, #0
 800305c:	4630      	mov	r0, r6
 800305e:	4639      	mov	r1, r7
 8003060:	f7fd fd36 	bl	8000ad0 <__aeabi_dcmpeq>
 8003064:	4681      	mov	r9, r0
 8003066:	b160      	cbz	r0, 8003082 <_dtoa_r+0xd2>
 8003068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800306a:	2301      	movs	r3, #1
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8553 	beq.w	8003b1c <_dtoa_r+0xb6c>
 8003076:	4b93      	ldr	r3, [pc, #588]	; (80032c4 <_dtoa_r+0x314>)
 8003078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	e7e0      	b.n	8003044 <_dtoa_r+0x94>
 8003082:	aa14      	add	r2, sp, #80	; 0x50
 8003084:	a915      	add	r1, sp, #84	; 0x54
 8003086:	ec47 6b10 	vmov	d0, r6, r7
 800308a:	4620      	mov	r0, r4
 800308c:	f001 f801 	bl	8004092 <__d2b>
 8003090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003094:	4682      	mov	sl, r0
 8003096:	2d00      	cmp	r5, #0
 8003098:	d07e      	beq.n	8003198 <_dtoa_r+0x1e8>
 800309a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800309e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80030a2:	4630      	mov	r0, r6
 80030a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80030a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80030ac:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80030b0:	2200      	movs	r2, #0
 80030b2:	4b85      	ldr	r3, [pc, #532]	; (80032c8 <_dtoa_r+0x318>)
 80030b4:	f7fd f8f0 	bl	8000298 <__aeabi_dsub>
 80030b8:	a379      	add	r3, pc, #484	; (adr r3, 80032a0 <_dtoa_r+0x2f0>)
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	f7fd fa9f 	bl	8000600 <__aeabi_dmul>
 80030c2:	a379      	add	r3, pc, #484	; (adr r3, 80032a8 <_dtoa_r+0x2f8>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f7fd f8e8 	bl	800029c <__adddf3>
 80030cc:	4606      	mov	r6, r0
 80030ce:	4628      	mov	r0, r5
 80030d0:	460f      	mov	r7, r1
 80030d2:	f7fd fa2f 	bl	8000534 <__aeabi_i2d>
 80030d6:	a376      	add	r3, pc, #472	; (adr r3, 80032b0 <_dtoa_r+0x300>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd fa90 	bl	8000600 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4630      	mov	r0, r6
 80030e6:	4639      	mov	r1, r7
 80030e8:	f7fd f8d8 	bl	800029c <__adddf3>
 80030ec:	4606      	mov	r6, r0
 80030ee:	460f      	mov	r7, r1
 80030f0:	f7fd fd36 	bl	8000b60 <__aeabi_d2iz>
 80030f4:	2200      	movs	r2, #0
 80030f6:	4683      	mov	fp, r0
 80030f8:	2300      	movs	r3, #0
 80030fa:	4630      	mov	r0, r6
 80030fc:	4639      	mov	r1, r7
 80030fe:	f7fd fcf1 	bl	8000ae4 <__aeabi_dcmplt>
 8003102:	b158      	cbz	r0, 800311c <_dtoa_r+0x16c>
 8003104:	4658      	mov	r0, fp
 8003106:	f7fd fa15 	bl	8000534 <__aeabi_i2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4630      	mov	r0, r6
 8003110:	4639      	mov	r1, r7
 8003112:	f7fd fcdd 	bl	8000ad0 <__aeabi_dcmpeq>
 8003116:	b908      	cbnz	r0, 800311c <_dtoa_r+0x16c>
 8003118:	f10b 3bff 	add.w	fp, fp, #4294967295
 800311c:	f1bb 0f16 	cmp.w	fp, #22
 8003120:	d859      	bhi.n	80031d6 <_dtoa_r+0x226>
 8003122:	496a      	ldr	r1, [pc, #424]	; (80032cc <_dtoa_r+0x31c>)
 8003124:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800312c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003130:	f7fd fcf6 	bl	8000b20 <__aeabi_dcmpgt>
 8003134:	2800      	cmp	r0, #0
 8003136:	d050      	beq.n	80031da <_dtoa_r+0x22a>
 8003138:	f10b 3bff 	add.w	fp, fp, #4294967295
 800313c:	2300      	movs	r3, #0
 800313e:	930e      	str	r3, [sp, #56]	; 0x38
 8003140:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003142:	1b5d      	subs	r5, r3, r5
 8003144:	1e6b      	subs	r3, r5, #1
 8003146:	9306      	str	r3, [sp, #24]
 8003148:	bf45      	ittet	mi
 800314a:	f1c5 0301 	rsbmi	r3, r5, #1
 800314e:	9305      	strmi	r3, [sp, #20]
 8003150:	2300      	movpl	r3, #0
 8003152:	2300      	movmi	r3, #0
 8003154:	bf4c      	ite	mi
 8003156:	9306      	strmi	r3, [sp, #24]
 8003158:	9305      	strpl	r3, [sp, #20]
 800315a:	f1bb 0f00 	cmp.w	fp, #0
 800315e:	db3e      	blt.n	80031de <_dtoa_r+0x22e>
 8003160:	9b06      	ldr	r3, [sp, #24]
 8003162:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003166:	445b      	add	r3, fp
 8003168:	9306      	str	r3, [sp, #24]
 800316a:	2300      	movs	r3, #0
 800316c:	9308      	str	r3, [sp, #32]
 800316e:	9b07      	ldr	r3, [sp, #28]
 8003170:	2b09      	cmp	r3, #9
 8003172:	f200 80af 	bhi.w	80032d4 <_dtoa_r+0x324>
 8003176:	2b05      	cmp	r3, #5
 8003178:	bfc4      	itt	gt
 800317a:	3b04      	subgt	r3, #4
 800317c:	9307      	strgt	r3, [sp, #28]
 800317e:	9b07      	ldr	r3, [sp, #28]
 8003180:	f1a3 0302 	sub.w	r3, r3, #2
 8003184:	bfcc      	ite	gt
 8003186:	2600      	movgt	r6, #0
 8003188:	2601      	movle	r6, #1
 800318a:	2b03      	cmp	r3, #3
 800318c:	f200 80ae 	bhi.w	80032ec <_dtoa_r+0x33c>
 8003190:	e8df f003 	tbb	[pc, r3]
 8003194:	772f8482 	.word	0x772f8482
 8003198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800319a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800319c:	441d      	add	r5, r3
 800319e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	dd11      	ble.n	80031ca <_dtoa_r+0x21a>
 80031a6:	9a00      	ldr	r2, [sp, #0]
 80031a8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80031ac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80031b0:	fa22 f000 	lsr.w	r0, r2, r0
 80031b4:	fa08 f303 	lsl.w	r3, r8, r3
 80031b8:	4318      	orrs	r0, r3
 80031ba:	f7fd f9ab 	bl	8000514 <__aeabi_ui2d>
 80031be:	2301      	movs	r3, #1
 80031c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80031c4:	3d01      	subs	r5, #1
 80031c6:	9312      	str	r3, [sp, #72]	; 0x48
 80031c8:	e772      	b.n	80030b0 <_dtoa_r+0x100>
 80031ca:	f1c3 0020 	rsb	r0, r3, #32
 80031ce:	9b00      	ldr	r3, [sp, #0]
 80031d0:	fa03 f000 	lsl.w	r0, r3, r0
 80031d4:	e7f1      	b.n	80031ba <_dtoa_r+0x20a>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7b1      	b.n	800313e <_dtoa_r+0x18e>
 80031da:	900e      	str	r0, [sp, #56]	; 0x38
 80031dc:	e7b0      	b.n	8003140 <_dtoa_r+0x190>
 80031de:	9b05      	ldr	r3, [sp, #20]
 80031e0:	eba3 030b 	sub.w	r3, r3, fp
 80031e4:	9305      	str	r3, [sp, #20]
 80031e6:	f1cb 0300 	rsb	r3, fp, #0
 80031ea:	9308      	str	r3, [sp, #32]
 80031ec:	2300      	movs	r3, #0
 80031ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80031f0:	e7bd      	b.n	800316e <_dtoa_r+0x1be>
 80031f2:	2301      	movs	r3, #1
 80031f4:	9309      	str	r3, [sp, #36]	; 0x24
 80031f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	dd7a      	ble.n	80032f2 <_dtoa_r+0x342>
 80031fc:	9304      	str	r3, [sp, #16]
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003202:	2200      	movs	r2, #0
 8003204:	606a      	str	r2, [r5, #4]
 8003206:	2104      	movs	r1, #4
 8003208:	f101 0214 	add.w	r2, r1, #20
 800320c:	429a      	cmp	r2, r3
 800320e:	d975      	bls.n	80032fc <_dtoa_r+0x34c>
 8003210:	6869      	ldr	r1, [r5, #4]
 8003212:	4620      	mov	r0, r4
 8003214:	f000 fcbb 	bl	8003b8e <_Balloc>
 8003218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800321a:	6028      	str	r0, [r5, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	9b03      	ldr	r3, [sp, #12]
 8003222:	2b0e      	cmp	r3, #14
 8003224:	f200 80e5 	bhi.w	80033f2 <_dtoa_r+0x442>
 8003228:	2e00      	cmp	r6, #0
 800322a:	f000 80e2 	beq.w	80033f2 <_dtoa_r+0x442>
 800322e:	ed9d 7b00 	vldr	d7, [sp]
 8003232:	f1bb 0f00 	cmp.w	fp, #0
 8003236:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800323a:	dd74      	ble.n	8003326 <_dtoa_r+0x376>
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <_dtoa_r+0x31c>)
 800323e:	f00b 030f 	and.w	r3, fp, #15
 8003242:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003246:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800324a:	06f0      	lsls	r0, r6, #27
 800324c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003250:	d559      	bpl.n	8003306 <_dtoa_r+0x356>
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <_dtoa_r+0x320>)
 8003254:	ec51 0b17 	vmov	r0, r1, d7
 8003258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800325c:	f7fd fafa 	bl	8000854 <__aeabi_ddiv>
 8003260:	e9cd 0100 	strd	r0, r1, [sp]
 8003264:	f006 060f 	and.w	r6, r6, #15
 8003268:	2503      	movs	r5, #3
 800326a:	4f19      	ldr	r7, [pc, #100]	; (80032d0 <_dtoa_r+0x320>)
 800326c:	2e00      	cmp	r6, #0
 800326e:	d14c      	bne.n	800330a <_dtoa_r+0x35a>
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003278:	f7fd faec 	bl	8000854 <__aeabi_ddiv>
 800327c:	e9cd 0100 	strd	r0, r1, [sp]
 8003280:	e06a      	b.n	8003358 <_dtoa_r+0x3a8>
 8003282:	2301      	movs	r3, #1
 8003284:	9309      	str	r3, [sp, #36]	; 0x24
 8003286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003288:	445b      	add	r3, fp
 800328a:	9304      	str	r3, [sp, #16]
 800328c:	3301      	adds	r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	9303      	str	r3, [sp, #12]
 8003292:	bfb8      	it	lt
 8003294:	2301      	movlt	r3, #1
 8003296:	e7b3      	b.n	8003200 <_dtoa_r+0x250>
 8003298:	2300      	movs	r3, #0
 800329a:	e7ab      	b.n	80031f4 <_dtoa_r+0x244>
 800329c:	2300      	movs	r3, #0
 800329e:	e7f1      	b.n	8003284 <_dtoa_r+0x2d4>
 80032a0:	636f4361 	.word	0x636f4361
 80032a4:	3fd287a7 	.word	0x3fd287a7
 80032a8:	8b60c8b3 	.word	0x8b60c8b3
 80032ac:	3fc68a28 	.word	0x3fc68a28
 80032b0:	509f79fb 	.word	0x509f79fb
 80032b4:	3fd34413 	.word	0x3fd34413
 80032b8:	7ff00000 	.word	0x7ff00000
 80032bc:	080046da 	.word	0x080046da
 80032c0:	080046d1 	.word	0x080046d1
 80032c4:	080046ae 	.word	0x080046ae
 80032c8:	3ff80000 	.word	0x3ff80000
 80032cc:	08004708 	.word	0x08004708
 80032d0:	080046e0 	.word	0x080046e0
 80032d4:	2601      	movs	r6, #1
 80032d6:	2300      	movs	r3, #0
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	9609      	str	r6, [sp, #36]	; 0x24
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	9303      	str	r3, [sp, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2312      	movs	r3, #18
 80032e8:	920a      	str	r2, [sp, #40]	; 0x28
 80032ea:	e789      	b.n	8003200 <_dtoa_r+0x250>
 80032ec:	2301      	movs	r3, #1
 80032ee:	9309      	str	r3, [sp, #36]	; 0x24
 80032f0:	e7f4      	b.n	80032dc <_dtoa_r+0x32c>
 80032f2:	2301      	movs	r3, #1
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	9303      	str	r3, [sp, #12]
 80032f8:	461a      	mov	r2, r3
 80032fa:	e7f5      	b.n	80032e8 <_dtoa_r+0x338>
 80032fc:	686a      	ldr	r2, [r5, #4]
 80032fe:	3201      	adds	r2, #1
 8003300:	606a      	str	r2, [r5, #4]
 8003302:	0049      	lsls	r1, r1, #1
 8003304:	e780      	b.n	8003208 <_dtoa_r+0x258>
 8003306:	2502      	movs	r5, #2
 8003308:	e7af      	b.n	800326a <_dtoa_r+0x2ba>
 800330a:	07f1      	lsls	r1, r6, #31
 800330c:	d508      	bpl.n	8003320 <_dtoa_r+0x370>
 800330e:	4640      	mov	r0, r8
 8003310:	4649      	mov	r1, r9
 8003312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003316:	f7fd f973 	bl	8000600 <__aeabi_dmul>
 800331a:	3501      	adds	r5, #1
 800331c:	4680      	mov	r8, r0
 800331e:	4689      	mov	r9, r1
 8003320:	1076      	asrs	r6, r6, #1
 8003322:	3708      	adds	r7, #8
 8003324:	e7a2      	b.n	800326c <_dtoa_r+0x2bc>
 8003326:	f000 809d 	beq.w	8003464 <_dtoa_r+0x4b4>
 800332a:	f1cb 0600 	rsb	r6, fp, #0
 800332e:	4b9f      	ldr	r3, [pc, #636]	; (80035ac <_dtoa_r+0x5fc>)
 8003330:	4f9f      	ldr	r7, [pc, #636]	; (80035b0 <_dtoa_r+0x600>)
 8003332:	f006 020f 	and.w	r2, r6, #15
 8003336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003342:	f7fd f95d 	bl	8000600 <__aeabi_dmul>
 8003346:	e9cd 0100 	strd	r0, r1, [sp]
 800334a:	1136      	asrs	r6, r6, #4
 800334c:	2300      	movs	r3, #0
 800334e:	2502      	movs	r5, #2
 8003350:	2e00      	cmp	r6, #0
 8003352:	d17c      	bne.n	800344e <_dtoa_r+0x49e>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d191      	bne.n	800327c <_dtoa_r+0x2cc>
 8003358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8084 	beq.w	8003468 <_dtoa_r+0x4b8>
 8003360:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003364:	2200      	movs	r2, #0
 8003366:	4b93      	ldr	r3, [pc, #588]	; (80035b4 <_dtoa_r+0x604>)
 8003368:	4640      	mov	r0, r8
 800336a:	4649      	mov	r1, r9
 800336c:	f7fd fbba 	bl	8000ae4 <__aeabi_dcmplt>
 8003370:	2800      	cmp	r0, #0
 8003372:	d079      	beq.n	8003468 <_dtoa_r+0x4b8>
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d076      	beq.n	8003468 <_dtoa_r+0x4b8>
 800337a:	9b04      	ldr	r3, [sp, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	dd34      	ble.n	80033ea <_dtoa_r+0x43a>
 8003380:	2200      	movs	r2, #0
 8003382:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <_dtoa_r+0x608>)
 8003384:	4640      	mov	r0, r8
 8003386:	4649      	mov	r1, r9
 8003388:	f7fd f93a 	bl	8000600 <__aeabi_dmul>
 800338c:	e9cd 0100 	strd	r0, r1, [sp]
 8003390:	9e04      	ldr	r6, [sp, #16]
 8003392:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003396:	3501      	adds	r5, #1
 8003398:	4628      	mov	r0, r5
 800339a:	f7fd f8cb 	bl	8000534 <__aeabi_i2d>
 800339e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033a2:	f7fd f92d 	bl	8000600 <__aeabi_dmul>
 80033a6:	2200      	movs	r2, #0
 80033a8:	4b84      	ldr	r3, [pc, #528]	; (80035bc <_dtoa_r+0x60c>)
 80033aa:	f7fc ff77 	bl	800029c <__adddf3>
 80033ae:	4680      	mov	r8, r0
 80033b0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80033b4:	2e00      	cmp	r6, #0
 80033b6:	d15a      	bne.n	800346e <_dtoa_r+0x4be>
 80033b8:	2200      	movs	r2, #0
 80033ba:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <_dtoa_r+0x610>)
 80033bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033c0:	f7fc ff6a 	bl	8000298 <__aeabi_dsub>
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	e9cd 0100 	strd	r0, r1, [sp]
 80033cc:	f7fd fba8 	bl	8000b20 <__aeabi_dcmpgt>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	f040 829b 	bne.w	800390c <_dtoa_r+0x95c>
 80033d6:	4642      	mov	r2, r8
 80033d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80033dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033e0:	f7fd fb80 	bl	8000ae4 <__aeabi_dcmplt>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	f040 828f 	bne.w	8003908 <_dtoa_r+0x958>
 80033ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80033ee:	e9cd 2300 	strd	r2, r3, [sp]
 80033f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f2c0 8150 	blt.w	800369a <_dtoa_r+0x6ea>
 80033fa:	f1bb 0f0e 	cmp.w	fp, #14
 80033fe:	f300 814c 	bgt.w	800369a <_dtoa_r+0x6ea>
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <_dtoa_r+0x5fc>)
 8003404:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800340c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	f280 80da 	bge.w	80035c8 <_dtoa_r+0x618>
 8003414:	9b03      	ldr	r3, [sp, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f300 80d6 	bgt.w	80035c8 <_dtoa_r+0x618>
 800341c:	f040 8273 	bne.w	8003906 <_dtoa_r+0x956>
 8003420:	2200      	movs	r2, #0
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <_dtoa_r+0x610>)
 8003424:	4640      	mov	r0, r8
 8003426:	4649      	mov	r1, r9
 8003428:	f7fd f8ea 	bl	8000600 <__aeabi_dmul>
 800342c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003430:	f7fd fb6c 	bl	8000b0c <__aeabi_dcmpge>
 8003434:	9e03      	ldr	r6, [sp, #12]
 8003436:	4637      	mov	r7, r6
 8003438:	2800      	cmp	r0, #0
 800343a:	f040 824a 	bne.w	80038d2 <_dtoa_r+0x922>
 800343e:	9b02      	ldr	r3, [sp, #8]
 8003440:	9a02      	ldr	r2, [sp, #8]
 8003442:	1c5d      	adds	r5, r3, #1
 8003444:	2331      	movs	r3, #49	; 0x31
 8003446:	7013      	strb	r3, [r2, #0]
 8003448:	f10b 0b01 	add.w	fp, fp, #1
 800344c:	e245      	b.n	80038da <_dtoa_r+0x92a>
 800344e:	07f2      	lsls	r2, r6, #31
 8003450:	d505      	bpl.n	800345e <_dtoa_r+0x4ae>
 8003452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003456:	f7fd f8d3 	bl	8000600 <__aeabi_dmul>
 800345a:	3501      	adds	r5, #1
 800345c:	2301      	movs	r3, #1
 800345e:	1076      	asrs	r6, r6, #1
 8003460:	3708      	adds	r7, #8
 8003462:	e775      	b.n	8003350 <_dtoa_r+0x3a0>
 8003464:	2502      	movs	r5, #2
 8003466:	e777      	b.n	8003358 <_dtoa_r+0x3a8>
 8003468:	465f      	mov	r7, fp
 800346a:	9e03      	ldr	r6, [sp, #12]
 800346c:	e794      	b.n	8003398 <_dtoa_r+0x3e8>
 800346e:	9a02      	ldr	r2, [sp, #8]
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <_dtoa_r+0x5fc>)
 8003472:	4432      	add	r2, r6
 8003474:	9213      	str	r2, [sp, #76]	; 0x4c
 8003476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003478:	1e71      	subs	r1, r6, #1
 800347a:	2a00      	cmp	r2, #0
 800347c:	d048      	beq.n	8003510 <_dtoa_r+0x560>
 800347e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	2000      	movs	r0, #0
 8003488:	494e      	ldr	r1, [pc, #312]	; (80035c4 <_dtoa_r+0x614>)
 800348a:	f7fd f9e3 	bl	8000854 <__aeabi_ddiv>
 800348e:	4642      	mov	r2, r8
 8003490:	464b      	mov	r3, r9
 8003492:	f7fc ff01 	bl	8000298 <__aeabi_dsub>
 8003496:	9d02      	ldr	r5, [sp, #8]
 8003498:	4680      	mov	r8, r0
 800349a:	4689      	mov	r9, r1
 800349c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034a0:	f7fd fb5e 	bl	8000b60 <__aeabi_d2iz>
 80034a4:	4606      	mov	r6, r0
 80034a6:	f7fd f845 	bl	8000534 <__aeabi_i2d>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034b2:	f7fc fef1 	bl	8000298 <__aeabi_dsub>
 80034b6:	3630      	adds	r6, #48	; 0x30
 80034b8:	f805 6b01 	strb.w	r6, [r5], #1
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	e9cd 0100 	strd	r0, r1, [sp]
 80034c4:	f7fd fb0e 	bl	8000ae4 <__aeabi_dcmplt>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d165      	bne.n	8003598 <_dtoa_r+0x5e8>
 80034cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034d0:	2000      	movs	r0, #0
 80034d2:	4938      	ldr	r1, [pc, #224]	; (80035b4 <_dtoa_r+0x604>)
 80034d4:	f7fc fee0 	bl	8000298 <__aeabi_dsub>
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	f7fd fb02 	bl	8000ae4 <__aeabi_dcmplt>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	f040 80ba 	bne.w	800365a <_dtoa_r+0x6aa>
 80034e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034e8:	429d      	cmp	r5, r3
 80034ea:	f43f af7e 	beq.w	80033ea <_dtoa_r+0x43a>
 80034ee:	2200      	movs	r2, #0
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <_dtoa_r+0x608>)
 80034f2:	4640      	mov	r0, r8
 80034f4:	4649      	mov	r1, r9
 80034f6:	f7fd f883 	bl	8000600 <__aeabi_dmul>
 80034fa:	2200      	movs	r2, #0
 80034fc:	4680      	mov	r8, r0
 80034fe:	4689      	mov	r9, r1
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <_dtoa_r+0x608>)
 8003502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003506:	f7fd f87b 	bl	8000600 <__aeabi_dmul>
 800350a:	e9cd 0100 	strd	r0, r1, [sp]
 800350e:	e7c5      	b.n	800349c <_dtoa_r+0x4ec>
 8003510:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003514:	4642      	mov	r2, r8
 8003516:	464b      	mov	r3, r9
 8003518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800351c:	f7fd f870 	bl	8000600 <__aeabi_dmul>
 8003520:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003524:	9d02      	ldr	r5, [sp, #8]
 8003526:	e9dd 0100 	ldrd	r0, r1, [sp]
 800352a:	f7fd fb19 	bl	8000b60 <__aeabi_d2iz>
 800352e:	4606      	mov	r6, r0
 8003530:	f7fd f800 	bl	8000534 <__aeabi_i2d>
 8003534:	3630      	adds	r6, #48	; 0x30
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800353e:	f7fc feab 	bl	8000298 <__aeabi_dsub>
 8003542:	f805 6b01 	strb.w	r6, [r5], #1
 8003546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003548:	42ab      	cmp	r3, r5
 800354a:	4680      	mov	r8, r0
 800354c:	4689      	mov	r9, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	d125      	bne.n	80035a0 <_dtoa_r+0x5f0>
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <_dtoa_r+0x614>)
 8003556:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800355a:	f7fc fe9f 	bl	800029c <__adddf3>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4640      	mov	r0, r8
 8003564:	4649      	mov	r1, r9
 8003566:	f7fd fadb 	bl	8000b20 <__aeabi_dcmpgt>
 800356a:	2800      	cmp	r0, #0
 800356c:	d175      	bne.n	800365a <_dtoa_r+0x6aa>
 800356e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003572:	2000      	movs	r0, #0
 8003574:	4913      	ldr	r1, [pc, #76]	; (80035c4 <_dtoa_r+0x614>)
 8003576:	f7fc fe8f 	bl	8000298 <__aeabi_dsub>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4640      	mov	r0, r8
 8003580:	4649      	mov	r1, r9
 8003582:	f7fd faaf 	bl	8000ae4 <__aeabi_dcmplt>
 8003586:	2800      	cmp	r0, #0
 8003588:	f43f af2f 	beq.w	80033ea <_dtoa_r+0x43a>
 800358c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	f105 32ff 	add.w	r2, r5, #4294967295
 8003596:	d001      	beq.n	800359c <_dtoa_r+0x5ec>
 8003598:	46bb      	mov	fp, r7
 800359a:	e04d      	b.n	8003638 <_dtoa_r+0x688>
 800359c:	4615      	mov	r5, r2
 800359e:	e7f5      	b.n	800358c <_dtoa_r+0x5dc>
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <_dtoa_r+0x608>)
 80035a2:	f7fd f82d 	bl	8000600 <__aeabi_dmul>
 80035a6:	e9cd 0100 	strd	r0, r1, [sp]
 80035aa:	e7bc      	b.n	8003526 <_dtoa_r+0x576>
 80035ac:	08004708 	.word	0x08004708
 80035b0:	080046e0 	.word	0x080046e0
 80035b4:	3ff00000 	.word	0x3ff00000
 80035b8:	40240000 	.word	0x40240000
 80035bc:	401c0000 	.word	0x401c0000
 80035c0:	40140000 	.word	0x40140000
 80035c4:	3fe00000 	.word	0x3fe00000
 80035c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80035cc:	9d02      	ldr	r5, [sp, #8]
 80035ce:	4642      	mov	r2, r8
 80035d0:	464b      	mov	r3, r9
 80035d2:	4630      	mov	r0, r6
 80035d4:	4639      	mov	r1, r7
 80035d6:	f7fd f93d 	bl	8000854 <__aeabi_ddiv>
 80035da:	f7fd fac1 	bl	8000b60 <__aeabi_d2iz>
 80035de:	9000      	str	r0, [sp, #0]
 80035e0:	f7fc ffa8 	bl	8000534 <__aeabi_i2d>
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	f7fd f80a 	bl	8000600 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4630      	mov	r0, r6
 80035f2:	4639      	mov	r1, r7
 80035f4:	f7fc fe50 	bl	8000298 <__aeabi_dsub>
 80035f8:	9e00      	ldr	r6, [sp, #0]
 80035fa:	9f03      	ldr	r7, [sp, #12]
 80035fc:	3630      	adds	r6, #48	; 0x30
 80035fe:	f805 6b01 	strb.w	r6, [r5], #1
 8003602:	9e02      	ldr	r6, [sp, #8]
 8003604:	1bae      	subs	r6, r5, r6
 8003606:	42b7      	cmp	r7, r6
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	d138      	bne.n	8003680 <_dtoa_r+0x6d0>
 800360e:	f7fc fe45 	bl	800029c <__adddf3>
 8003612:	4606      	mov	r6, r0
 8003614:	460f      	mov	r7, r1
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4640      	mov	r0, r8
 800361c:	4649      	mov	r1, r9
 800361e:	f7fd fa61 	bl	8000ae4 <__aeabi_dcmplt>
 8003622:	b9c8      	cbnz	r0, 8003658 <_dtoa_r+0x6a8>
 8003624:	4632      	mov	r2, r6
 8003626:	463b      	mov	r3, r7
 8003628:	4640      	mov	r0, r8
 800362a:	4649      	mov	r1, r9
 800362c:	f7fd fa50 	bl	8000ad0 <__aeabi_dcmpeq>
 8003630:	b110      	cbz	r0, 8003638 <_dtoa_r+0x688>
 8003632:	9b00      	ldr	r3, [sp, #0]
 8003634:	07db      	lsls	r3, r3, #31
 8003636:	d40f      	bmi.n	8003658 <_dtoa_r+0x6a8>
 8003638:	4651      	mov	r1, sl
 800363a:	4620      	mov	r0, r4
 800363c:	f000 fadb 	bl	8003bf6 <_Bfree>
 8003640:	2300      	movs	r3, #0
 8003642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003644:	702b      	strb	r3, [r5, #0]
 8003646:	f10b 0301 	add.w	r3, fp, #1
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800364e:	2b00      	cmp	r3, #0
 8003650:	f43f acf8 	beq.w	8003044 <_dtoa_r+0x94>
 8003654:	601d      	str	r5, [r3, #0]
 8003656:	e4f5      	b.n	8003044 <_dtoa_r+0x94>
 8003658:	465f      	mov	r7, fp
 800365a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800365e:	2a39      	cmp	r2, #57	; 0x39
 8003660:	f105 33ff 	add.w	r3, r5, #4294967295
 8003664:	d106      	bne.n	8003674 <_dtoa_r+0x6c4>
 8003666:	9a02      	ldr	r2, [sp, #8]
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <_dtoa_r+0x6cc>
 800366c:	2330      	movs	r3, #48	; 0x30
 800366e:	7013      	strb	r3, [r2, #0]
 8003670:	3701      	adds	r7, #1
 8003672:	4613      	mov	r3, r2
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	3201      	adds	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e78d      	b.n	8003598 <_dtoa_r+0x5e8>
 800367c:	461d      	mov	r5, r3
 800367e:	e7ec      	b.n	800365a <_dtoa_r+0x6aa>
 8003680:	2200      	movs	r2, #0
 8003682:	4ba4      	ldr	r3, [pc, #656]	; (8003914 <_dtoa_r+0x964>)
 8003684:	f7fc ffbc 	bl	8000600 <__aeabi_dmul>
 8003688:	2200      	movs	r2, #0
 800368a:	2300      	movs	r3, #0
 800368c:	4606      	mov	r6, r0
 800368e:	460f      	mov	r7, r1
 8003690:	f7fd fa1e 	bl	8000ad0 <__aeabi_dcmpeq>
 8003694:	2800      	cmp	r0, #0
 8003696:	d09a      	beq.n	80035ce <_dtoa_r+0x61e>
 8003698:	e7ce      	b.n	8003638 <_dtoa_r+0x688>
 800369a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800369c:	2a00      	cmp	r2, #0
 800369e:	f000 80cd 	beq.w	800383c <_dtoa_r+0x88c>
 80036a2:	9a07      	ldr	r2, [sp, #28]
 80036a4:	2a01      	cmp	r2, #1
 80036a6:	f300 80af 	bgt.w	8003808 <_dtoa_r+0x858>
 80036aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	f000 80a7 	beq.w	8003800 <_dtoa_r+0x850>
 80036b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80036b6:	9e08      	ldr	r6, [sp, #32]
 80036b8:	9d05      	ldr	r5, [sp, #20]
 80036ba:	9a05      	ldr	r2, [sp, #20]
 80036bc:	441a      	add	r2, r3
 80036be:	9205      	str	r2, [sp, #20]
 80036c0:	9a06      	ldr	r2, [sp, #24]
 80036c2:	2101      	movs	r1, #1
 80036c4:	441a      	add	r2, r3
 80036c6:	4620      	mov	r0, r4
 80036c8:	9206      	str	r2, [sp, #24]
 80036ca:	f000 fb34 	bl	8003d36 <__i2b>
 80036ce:	4607      	mov	r7, r0
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	dd0c      	ble.n	80036ee <_dtoa_r+0x73e>
 80036d4:	9b06      	ldr	r3, [sp, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	dd09      	ble.n	80036ee <_dtoa_r+0x73e>
 80036da:	42ab      	cmp	r3, r5
 80036dc:	9a05      	ldr	r2, [sp, #20]
 80036de:	bfa8      	it	ge
 80036e0:	462b      	movge	r3, r5
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	9205      	str	r2, [sp, #20]
 80036e6:	9a06      	ldr	r2, [sp, #24]
 80036e8:	1aed      	subs	r5, r5, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	9306      	str	r3, [sp, #24]
 80036ee:	9b08      	ldr	r3, [sp, #32]
 80036f0:	b1f3      	cbz	r3, 8003730 <_dtoa_r+0x780>
 80036f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80a5 	beq.w	8003844 <_dtoa_r+0x894>
 80036fa:	2e00      	cmp	r6, #0
 80036fc:	dd10      	ble.n	8003720 <_dtoa_r+0x770>
 80036fe:	4639      	mov	r1, r7
 8003700:	4632      	mov	r2, r6
 8003702:	4620      	mov	r0, r4
 8003704:	f000 fbae 	bl	8003e64 <__pow5mult>
 8003708:	4652      	mov	r2, sl
 800370a:	4601      	mov	r1, r0
 800370c:	4607      	mov	r7, r0
 800370e:	4620      	mov	r0, r4
 8003710:	f000 fb1a 	bl	8003d48 <__multiply>
 8003714:	4651      	mov	r1, sl
 8003716:	4680      	mov	r8, r0
 8003718:	4620      	mov	r0, r4
 800371a:	f000 fa6c 	bl	8003bf6 <_Bfree>
 800371e:	46c2      	mov	sl, r8
 8003720:	9b08      	ldr	r3, [sp, #32]
 8003722:	1b9a      	subs	r2, r3, r6
 8003724:	d004      	beq.n	8003730 <_dtoa_r+0x780>
 8003726:	4651      	mov	r1, sl
 8003728:	4620      	mov	r0, r4
 800372a:	f000 fb9b 	bl	8003e64 <__pow5mult>
 800372e:	4682      	mov	sl, r0
 8003730:	2101      	movs	r1, #1
 8003732:	4620      	mov	r0, r4
 8003734:	f000 faff 	bl	8003d36 <__i2b>
 8003738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800373a:	2b00      	cmp	r3, #0
 800373c:	4606      	mov	r6, r0
 800373e:	f340 8083 	ble.w	8003848 <_dtoa_r+0x898>
 8003742:	461a      	mov	r2, r3
 8003744:	4601      	mov	r1, r0
 8003746:	4620      	mov	r0, r4
 8003748:	f000 fb8c 	bl	8003e64 <__pow5mult>
 800374c:	9b07      	ldr	r3, [sp, #28]
 800374e:	2b01      	cmp	r3, #1
 8003750:	4606      	mov	r6, r0
 8003752:	dd7c      	ble.n	800384e <_dtoa_r+0x89e>
 8003754:	f04f 0800 	mov.w	r8, #0
 8003758:	6933      	ldr	r3, [r6, #16]
 800375a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800375e:	6918      	ldr	r0, [r3, #16]
 8003760:	f000 fa9b 	bl	8003c9a <__hi0bits>
 8003764:	f1c0 0020 	rsb	r0, r0, #32
 8003768:	9b06      	ldr	r3, [sp, #24]
 800376a:	4418      	add	r0, r3
 800376c:	f010 001f 	ands.w	r0, r0, #31
 8003770:	f000 8096 	beq.w	80038a0 <_dtoa_r+0x8f0>
 8003774:	f1c0 0320 	rsb	r3, r0, #32
 8003778:	2b04      	cmp	r3, #4
 800377a:	f340 8087 	ble.w	800388c <_dtoa_r+0x8dc>
 800377e:	9b05      	ldr	r3, [sp, #20]
 8003780:	f1c0 001c 	rsb	r0, r0, #28
 8003784:	4403      	add	r3, r0
 8003786:	9305      	str	r3, [sp, #20]
 8003788:	9b06      	ldr	r3, [sp, #24]
 800378a:	4405      	add	r5, r0
 800378c:	4403      	add	r3, r0
 800378e:	9306      	str	r3, [sp, #24]
 8003790:	9b05      	ldr	r3, [sp, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	dd05      	ble.n	80037a2 <_dtoa_r+0x7f2>
 8003796:	4651      	mov	r1, sl
 8003798:	461a      	mov	r2, r3
 800379a:	4620      	mov	r0, r4
 800379c:	f000 fbb0 	bl	8003f00 <__lshift>
 80037a0:	4682      	mov	sl, r0
 80037a2:	9b06      	ldr	r3, [sp, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	dd05      	ble.n	80037b4 <_dtoa_r+0x804>
 80037a8:	4631      	mov	r1, r6
 80037aa:	461a      	mov	r2, r3
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 fba7 	bl	8003f00 <__lshift>
 80037b2:	4606      	mov	r6, r0
 80037b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d074      	beq.n	80038a4 <_dtoa_r+0x8f4>
 80037ba:	4631      	mov	r1, r6
 80037bc:	4650      	mov	r0, sl
 80037be:	f000 fbf0 	bl	8003fa2 <__mcmp>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	da6e      	bge.n	80038a4 <_dtoa_r+0x8f4>
 80037c6:	2300      	movs	r3, #0
 80037c8:	4651      	mov	r1, sl
 80037ca:	220a      	movs	r2, #10
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 fa29 	bl	8003c24 <__multadd>
 80037d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80037d8:	4682      	mov	sl, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 81a8 	beq.w	8003b30 <_dtoa_r+0xb80>
 80037e0:	2300      	movs	r3, #0
 80037e2:	4639      	mov	r1, r7
 80037e4:	220a      	movs	r2, #10
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 fa1c 	bl	8003c24 <__multadd>
 80037ec:	9b04      	ldr	r3, [sp, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	4607      	mov	r7, r0
 80037f2:	f300 80c8 	bgt.w	8003986 <_dtoa_r+0x9d6>
 80037f6:	9b07      	ldr	r3, [sp, #28]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f340 80c4 	ble.w	8003986 <_dtoa_r+0x9d6>
 80037fe:	e059      	b.n	80038b4 <_dtoa_r+0x904>
 8003800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003802:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003806:	e756      	b.n	80036b6 <_dtoa_r+0x706>
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	1e5e      	subs	r6, r3, #1
 800380c:	9b08      	ldr	r3, [sp, #32]
 800380e:	42b3      	cmp	r3, r6
 8003810:	bfbf      	itttt	lt
 8003812:	9b08      	ldrlt	r3, [sp, #32]
 8003814:	9608      	strlt	r6, [sp, #32]
 8003816:	1af2      	sublt	r2, r6, r3
 8003818:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800381a:	bfb6      	itet	lt
 800381c:	189b      	addlt	r3, r3, r2
 800381e:	1b9e      	subge	r6, r3, r6
 8003820:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	bfb8      	it	lt
 8003826:	2600      	movlt	r6, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	bfb9      	ittee	lt
 800382c:	9b05      	ldrlt	r3, [sp, #20]
 800382e:	9a03      	ldrlt	r2, [sp, #12]
 8003830:	9d05      	ldrge	r5, [sp, #20]
 8003832:	9b03      	ldrge	r3, [sp, #12]
 8003834:	bfbc      	itt	lt
 8003836:	1a9d      	sublt	r5, r3, r2
 8003838:	2300      	movlt	r3, #0
 800383a:	e73e      	b.n	80036ba <_dtoa_r+0x70a>
 800383c:	9e08      	ldr	r6, [sp, #32]
 800383e:	9d05      	ldr	r5, [sp, #20]
 8003840:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003842:	e745      	b.n	80036d0 <_dtoa_r+0x720>
 8003844:	9a08      	ldr	r2, [sp, #32]
 8003846:	e76e      	b.n	8003726 <_dtoa_r+0x776>
 8003848:	9b07      	ldr	r3, [sp, #28]
 800384a:	2b01      	cmp	r3, #1
 800384c:	dc19      	bgt.n	8003882 <_dtoa_r+0x8d2>
 800384e:	9b00      	ldr	r3, [sp, #0]
 8003850:	b9bb      	cbnz	r3, 8003882 <_dtoa_r+0x8d2>
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003858:	b99b      	cbnz	r3, 8003882 <_dtoa_r+0x8d2>
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003860:	0d1b      	lsrs	r3, r3, #20
 8003862:	051b      	lsls	r3, r3, #20
 8003864:	b183      	cbz	r3, 8003888 <_dtoa_r+0x8d8>
 8003866:	9b05      	ldr	r3, [sp, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	9305      	str	r3, [sp, #20]
 800386c:	9b06      	ldr	r3, [sp, #24]
 800386e:	3301      	adds	r3, #1
 8003870:	9306      	str	r3, [sp, #24]
 8003872:	f04f 0801 	mov.w	r8, #1
 8003876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	f47f af6d 	bne.w	8003758 <_dtoa_r+0x7a8>
 800387e:	2001      	movs	r0, #1
 8003880:	e772      	b.n	8003768 <_dtoa_r+0x7b8>
 8003882:	f04f 0800 	mov.w	r8, #0
 8003886:	e7f6      	b.n	8003876 <_dtoa_r+0x8c6>
 8003888:	4698      	mov	r8, r3
 800388a:	e7f4      	b.n	8003876 <_dtoa_r+0x8c6>
 800388c:	d080      	beq.n	8003790 <_dtoa_r+0x7e0>
 800388e:	9a05      	ldr	r2, [sp, #20]
 8003890:	331c      	adds	r3, #28
 8003892:	441a      	add	r2, r3
 8003894:	9205      	str	r2, [sp, #20]
 8003896:	9a06      	ldr	r2, [sp, #24]
 8003898:	441a      	add	r2, r3
 800389a:	441d      	add	r5, r3
 800389c:	4613      	mov	r3, r2
 800389e:	e776      	b.n	800378e <_dtoa_r+0x7de>
 80038a0:	4603      	mov	r3, r0
 80038a2:	e7f4      	b.n	800388e <_dtoa_r+0x8de>
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	dc36      	bgt.n	8003918 <_dtoa_r+0x968>
 80038aa:	9b07      	ldr	r3, [sp, #28]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	dd33      	ble.n	8003918 <_dtoa_r+0x968>
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	9304      	str	r3, [sp, #16]
 80038b4:	9b04      	ldr	r3, [sp, #16]
 80038b6:	b963      	cbnz	r3, 80038d2 <_dtoa_r+0x922>
 80038b8:	4631      	mov	r1, r6
 80038ba:	2205      	movs	r2, #5
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 f9b1 	bl	8003c24 <__multadd>
 80038c2:	4601      	mov	r1, r0
 80038c4:	4606      	mov	r6, r0
 80038c6:	4650      	mov	r0, sl
 80038c8:	f000 fb6b 	bl	8003fa2 <__mcmp>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	f73f adb6 	bgt.w	800343e <_dtoa_r+0x48e>
 80038d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038d4:	9d02      	ldr	r5, [sp, #8]
 80038d6:	ea6f 0b03 	mvn.w	fp, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	9303      	str	r3, [sp, #12]
 80038de:	4631      	mov	r1, r6
 80038e0:	4620      	mov	r0, r4
 80038e2:	f000 f988 	bl	8003bf6 <_Bfree>
 80038e6:	2f00      	cmp	r7, #0
 80038e8:	f43f aea6 	beq.w	8003638 <_dtoa_r+0x688>
 80038ec:	9b03      	ldr	r3, [sp, #12]
 80038ee:	b12b      	cbz	r3, 80038fc <_dtoa_r+0x94c>
 80038f0:	42bb      	cmp	r3, r7
 80038f2:	d003      	beq.n	80038fc <_dtoa_r+0x94c>
 80038f4:	4619      	mov	r1, r3
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 f97d 	bl	8003bf6 <_Bfree>
 80038fc:	4639      	mov	r1, r7
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f979 	bl	8003bf6 <_Bfree>
 8003904:	e698      	b.n	8003638 <_dtoa_r+0x688>
 8003906:	2600      	movs	r6, #0
 8003908:	4637      	mov	r7, r6
 800390a:	e7e2      	b.n	80038d2 <_dtoa_r+0x922>
 800390c:	46bb      	mov	fp, r7
 800390e:	4637      	mov	r7, r6
 8003910:	e595      	b.n	800343e <_dtoa_r+0x48e>
 8003912:	bf00      	nop
 8003914:	40240000 	.word	0x40240000
 8003918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391a:	bb93      	cbnz	r3, 8003982 <_dtoa_r+0x9d2>
 800391c:	9b03      	ldr	r3, [sp, #12]
 800391e:	9304      	str	r3, [sp, #16]
 8003920:	9d02      	ldr	r5, [sp, #8]
 8003922:	4631      	mov	r1, r6
 8003924:	4650      	mov	r0, sl
 8003926:	f7ff fab7 	bl	8002e98 <quorem>
 800392a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800392e:	f805 9b01 	strb.w	r9, [r5], #1
 8003932:	9b02      	ldr	r3, [sp, #8]
 8003934:	9a04      	ldr	r2, [sp, #16]
 8003936:	1aeb      	subs	r3, r5, r3
 8003938:	429a      	cmp	r2, r3
 800393a:	f300 80dc 	bgt.w	8003af6 <_dtoa_r+0xb46>
 800393e:	9b02      	ldr	r3, [sp, #8]
 8003940:	2a01      	cmp	r2, #1
 8003942:	bfac      	ite	ge
 8003944:	189b      	addge	r3, r3, r2
 8003946:	3301      	addlt	r3, #1
 8003948:	4698      	mov	r8, r3
 800394a:	2300      	movs	r3, #0
 800394c:	9303      	str	r3, [sp, #12]
 800394e:	4651      	mov	r1, sl
 8003950:	2201      	movs	r2, #1
 8003952:	4620      	mov	r0, r4
 8003954:	f000 fad4 	bl	8003f00 <__lshift>
 8003958:	4631      	mov	r1, r6
 800395a:	4682      	mov	sl, r0
 800395c:	f000 fb21 	bl	8003fa2 <__mcmp>
 8003960:	2800      	cmp	r0, #0
 8003962:	f300 808d 	bgt.w	8003a80 <_dtoa_r+0xad0>
 8003966:	d103      	bne.n	8003970 <_dtoa_r+0x9c0>
 8003968:	f019 0f01 	tst.w	r9, #1
 800396c:	f040 8088 	bne.w	8003a80 <_dtoa_r+0xad0>
 8003970:	4645      	mov	r5, r8
 8003972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003976:	2b30      	cmp	r3, #48	; 0x30
 8003978:	f105 32ff 	add.w	r2, r5, #4294967295
 800397c:	d1af      	bne.n	80038de <_dtoa_r+0x92e>
 800397e:	4615      	mov	r5, r2
 8003980:	e7f7      	b.n	8003972 <_dtoa_r+0x9c2>
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	2d00      	cmp	r5, #0
 8003988:	dd05      	ble.n	8003996 <_dtoa_r+0x9e6>
 800398a:	4639      	mov	r1, r7
 800398c:	462a      	mov	r2, r5
 800398e:	4620      	mov	r0, r4
 8003990:	f000 fab6 	bl	8003f00 <__lshift>
 8003994:	4607      	mov	r7, r0
 8003996:	f1b8 0f00 	cmp.w	r8, #0
 800399a:	d04c      	beq.n	8003a36 <_dtoa_r+0xa86>
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4620      	mov	r0, r4
 80039a0:	f000 f8f5 	bl	8003b8e <_Balloc>
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	3202      	adds	r2, #2
 80039a8:	4605      	mov	r5, r0
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	f107 010c 	add.w	r1, r7, #12
 80039b0:	300c      	adds	r0, #12
 80039b2:	f000 f8e1 	bl	8003b78 <memcpy>
 80039b6:	2201      	movs	r2, #1
 80039b8:	4629      	mov	r1, r5
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 faa0 	bl	8003f00 <__lshift>
 80039c0:	9b00      	ldr	r3, [sp, #0]
 80039c2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80039c6:	9703      	str	r7, [sp, #12]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	4607      	mov	r7, r0
 80039ce:	9305      	str	r3, [sp, #20]
 80039d0:	4631      	mov	r1, r6
 80039d2:	4650      	mov	r0, sl
 80039d4:	f7ff fa60 	bl	8002e98 <quorem>
 80039d8:	9903      	ldr	r1, [sp, #12]
 80039da:	4605      	mov	r5, r0
 80039dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80039e0:	4650      	mov	r0, sl
 80039e2:	f000 fade 	bl	8003fa2 <__mcmp>
 80039e6:	463a      	mov	r2, r7
 80039e8:	9000      	str	r0, [sp, #0]
 80039ea:	4631      	mov	r1, r6
 80039ec:	4620      	mov	r0, r4
 80039ee:	f000 faf2 	bl	8003fd6 <__mdiff>
 80039f2:	68c3      	ldr	r3, [r0, #12]
 80039f4:	4602      	mov	r2, r0
 80039f6:	bb03      	cbnz	r3, 8003a3a <_dtoa_r+0xa8a>
 80039f8:	4601      	mov	r1, r0
 80039fa:	9006      	str	r0, [sp, #24]
 80039fc:	4650      	mov	r0, sl
 80039fe:	f000 fad0 	bl	8003fa2 <__mcmp>
 8003a02:	9a06      	ldr	r2, [sp, #24]
 8003a04:	4603      	mov	r3, r0
 8003a06:	4611      	mov	r1, r2
 8003a08:	4620      	mov	r0, r4
 8003a0a:	9306      	str	r3, [sp, #24]
 8003a0c:	f000 f8f3 	bl	8003bf6 <_Bfree>
 8003a10:	9b06      	ldr	r3, [sp, #24]
 8003a12:	b9a3      	cbnz	r3, 8003a3e <_dtoa_r+0xa8e>
 8003a14:	9a07      	ldr	r2, [sp, #28]
 8003a16:	b992      	cbnz	r2, 8003a3e <_dtoa_r+0xa8e>
 8003a18:	9a05      	ldr	r2, [sp, #20]
 8003a1a:	b982      	cbnz	r2, 8003a3e <_dtoa_r+0xa8e>
 8003a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003a20:	d029      	beq.n	8003a76 <_dtoa_r+0xac6>
 8003a22:	9b00      	ldr	r3, [sp, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	dd01      	ble.n	8003a2c <_dtoa_r+0xa7c>
 8003a28:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003a2c:	f108 0501 	add.w	r5, r8, #1
 8003a30:	f888 9000 	strb.w	r9, [r8]
 8003a34:	e753      	b.n	80038de <_dtoa_r+0x92e>
 8003a36:	4638      	mov	r0, r7
 8003a38:	e7c2      	b.n	80039c0 <_dtoa_r+0xa10>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e7e3      	b.n	8003a06 <_dtoa_r+0xa56>
 8003a3e:	9a00      	ldr	r2, [sp, #0]
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	db04      	blt.n	8003a4e <_dtoa_r+0xa9e>
 8003a44:	d125      	bne.n	8003a92 <_dtoa_r+0xae2>
 8003a46:	9a07      	ldr	r2, [sp, #28]
 8003a48:	bb1a      	cbnz	r2, 8003a92 <_dtoa_r+0xae2>
 8003a4a:	9a05      	ldr	r2, [sp, #20]
 8003a4c:	bb0a      	cbnz	r2, 8003a92 <_dtoa_r+0xae2>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	ddec      	ble.n	8003a2c <_dtoa_r+0xa7c>
 8003a52:	4651      	mov	r1, sl
 8003a54:	2201      	movs	r2, #1
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 fa52 	bl	8003f00 <__lshift>
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	4682      	mov	sl, r0
 8003a60:	f000 fa9f 	bl	8003fa2 <__mcmp>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	dc03      	bgt.n	8003a70 <_dtoa_r+0xac0>
 8003a68:	d1e0      	bne.n	8003a2c <_dtoa_r+0xa7c>
 8003a6a:	f019 0f01 	tst.w	r9, #1
 8003a6e:	d0dd      	beq.n	8003a2c <_dtoa_r+0xa7c>
 8003a70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003a74:	d1d8      	bne.n	8003a28 <_dtoa_r+0xa78>
 8003a76:	2339      	movs	r3, #57	; 0x39
 8003a78:	f888 3000 	strb.w	r3, [r8]
 8003a7c:	f108 0801 	add.w	r8, r8, #1
 8003a80:	4645      	mov	r5, r8
 8003a82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a86:	2b39      	cmp	r3, #57	; 0x39
 8003a88:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a8c:	d03b      	beq.n	8003b06 <_dtoa_r+0xb56>
 8003a8e:	3301      	adds	r3, #1
 8003a90:	e040      	b.n	8003b14 <_dtoa_r+0xb64>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f108 0501 	add.w	r5, r8, #1
 8003a98:	dd05      	ble.n	8003aa6 <_dtoa_r+0xaf6>
 8003a9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003a9e:	d0ea      	beq.n	8003a76 <_dtoa_r+0xac6>
 8003aa0:	f109 0901 	add.w	r9, r9, #1
 8003aa4:	e7c4      	b.n	8003a30 <_dtoa_r+0xa80>
 8003aa6:	9b02      	ldr	r3, [sp, #8]
 8003aa8:	9a04      	ldr	r2, [sp, #16]
 8003aaa:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003aae:	1aeb      	subs	r3, r5, r3
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	46a8      	mov	r8, r5
 8003ab4:	f43f af4b 	beq.w	800394e <_dtoa_r+0x99e>
 8003ab8:	4651      	mov	r1, sl
 8003aba:	2300      	movs	r3, #0
 8003abc:	220a      	movs	r2, #10
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 f8b0 	bl	8003c24 <__multadd>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	9903      	ldr	r1, [sp, #12]
 8003ac8:	42bb      	cmp	r3, r7
 8003aca:	4682      	mov	sl, r0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f04f 020a 	mov.w	r2, #10
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	d104      	bne.n	8003ae2 <_dtoa_r+0xb32>
 8003ad8:	f000 f8a4 	bl	8003c24 <__multadd>
 8003adc:	9003      	str	r0, [sp, #12]
 8003ade:	4607      	mov	r7, r0
 8003ae0:	e776      	b.n	80039d0 <_dtoa_r+0xa20>
 8003ae2:	f000 f89f 	bl	8003c24 <__multadd>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9003      	str	r0, [sp, #12]
 8003aea:	220a      	movs	r2, #10
 8003aec:	4639      	mov	r1, r7
 8003aee:	4620      	mov	r0, r4
 8003af0:	f000 f898 	bl	8003c24 <__multadd>
 8003af4:	e7f3      	b.n	8003ade <_dtoa_r+0xb2e>
 8003af6:	4651      	mov	r1, sl
 8003af8:	2300      	movs	r3, #0
 8003afa:	220a      	movs	r2, #10
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 f891 	bl	8003c24 <__multadd>
 8003b02:	4682      	mov	sl, r0
 8003b04:	e70d      	b.n	8003922 <_dtoa_r+0x972>
 8003b06:	9b02      	ldr	r3, [sp, #8]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d105      	bne.n	8003b18 <_dtoa_r+0xb68>
 8003b0c:	9a02      	ldr	r2, [sp, #8]
 8003b0e:	f10b 0b01 	add.w	fp, fp, #1
 8003b12:	2331      	movs	r3, #49	; 0x31
 8003b14:	7013      	strb	r3, [r2, #0]
 8003b16:	e6e2      	b.n	80038de <_dtoa_r+0x92e>
 8003b18:	4615      	mov	r5, r2
 8003b1a:	e7b2      	b.n	8003a82 <_dtoa_r+0xad2>
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <_dtoa_r+0xb94>)
 8003b1e:	f7ff baae 	b.w	800307e <_dtoa_r+0xce>
 8003b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f aa88 	bne.w	800303a <_dtoa_r+0x8a>
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <_dtoa_r+0xb98>)
 8003b2c:	f7ff baa7 	b.w	800307e <_dtoa_r+0xce>
 8003b30:	9b04      	ldr	r3, [sp, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f73f aef4 	bgt.w	8003920 <_dtoa_r+0x970>
 8003b38:	9b07      	ldr	r3, [sp, #28]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	f77f aef0 	ble.w	8003920 <_dtoa_r+0x970>
 8003b40:	e6b8      	b.n	80038b4 <_dtoa_r+0x904>
 8003b42:	bf00      	nop
 8003b44:	080046ad 	.word	0x080046ad
 8003b48:	080046d1 	.word	0x080046d1

08003b4c <_localeconv_r>:
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <_localeconv_r+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a18      	ldr	r0, [r3, #32]
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <_localeconv_r+0x18>)
 8003b54:	2800      	cmp	r0, #0
 8003b56:	bf08      	it	eq
 8003b58:	4618      	moveq	r0, r3
 8003b5a:	30f0      	adds	r0, #240	; 0xf0
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	2000000c 	.word	0x2000000c
 8003b64:	20000070 	.word	0x20000070

08003b68 <malloc>:
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <malloc+0xc>)
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	f000 bb3b 	b.w	80041e8 <_malloc_r>
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c

08003b78 <memcpy>:
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	1e43      	subs	r3, r0, #1
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	d100      	bne.n	8003b84 <memcpy+0xc>
 8003b82:	bd10      	pop	{r4, pc}
 8003b84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b8c:	e7f7      	b.n	8003b7e <memcpy+0x6>

08003b8e <_Balloc>:
 8003b8e:	b570      	push	{r4, r5, r6, lr}
 8003b90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b92:	4604      	mov	r4, r0
 8003b94:	460e      	mov	r6, r1
 8003b96:	b93d      	cbnz	r5, 8003ba8 <_Balloc+0x1a>
 8003b98:	2010      	movs	r0, #16
 8003b9a:	f7ff ffe5 	bl	8003b68 <malloc>
 8003b9e:	6260      	str	r0, [r4, #36]	; 0x24
 8003ba0:	6045      	str	r5, [r0, #4]
 8003ba2:	6085      	str	r5, [r0, #8]
 8003ba4:	6005      	str	r5, [r0, #0]
 8003ba6:	60c5      	str	r5, [r0, #12]
 8003ba8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003baa:	68eb      	ldr	r3, [r5, #12]
 8003bac:	b183      	cbz	r3, 8003bd0 <_Balloc+0x42>
 8003bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003bb6:	b9b8      	cbnz	r0, 8003be8 <_Balloc+0x5a>
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f506 	lsl.w	r5, r1, r6
 8003bbe:	1d6a      	adds	r2, r5, #5
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 fab4 	bl	8004130 <_calloc_r>
 8003bc8:	b160      	cbz	r0, 8003be4 <_Balloc+0x56>
 8003bca:	6046      	str	r6, [r0, #4]
 8003bcc:	6085      	str	r5, [r0, #8]
 8003bce:	e00e      	b.n	8003bee <_Balloc+0x60>
 8003bd0:	2221      	movs	r2, #33	; 0x21
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 faab 	bl	8004130 <_calloc_r>
 8003bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bdc:	60e8      	str	r0, [r5, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e4      	bne.n	8003bae <_Balloc+0x20>
 8003be4:	2000      	movs	r0, #0
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	6802      	ldr	r2, [r0, #0]
 8003bea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6103      	str	r3, [r0, #16]
 8003bf2:	60c3      	str	r3, [r0, #12]
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}

08003bf6 <_Bfree>:
 8003bf6:	b570      	push	{r4, r5, r6, lr}
 8003bf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460d      	mov	r5, r1
 8003bfe:	b93c      	cbnz	r4, 8003c10 <_Bfree+0x1a>
 8003c00:	2010      	movs	r0, #16
 8003c02:	f7ff ffb1 	bl	8003b68 <malloc>
 8003c06:	6270      	str	r0, [r6, #36]	; 0x24
 8003c08:	6044      	str	r4, [r0, #4]
 8003c0a:	6084      	str	r4, [r0, #8]
 8003c0c:	6004      	str	r4, [r0, #0]
 8003c0e:	60c4      	str	r4, [r0, #12]
 8003c10:	b13d      	cbz	r5, 8003c22 <_Bfree+0x2c>
 8003c12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003c14:	686a      	ldr	r2, [r5, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c1c:	6029      	str	r1, [r5, #0]
 8003c1e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003c22:	bd70      	pop	{r4, r5, r6, pc}

08003c24 <__multadd>:
 8003c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c28:	690d      	ldr	r5, [r1, #16]
 8003c2a:	461f      	mov	r7, r3
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	f101 0e14 	add.w	lr, r1, #20
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8de 0000 	ldr.w	r0, [lr]
 8003c3a:	b281      	uxth	r1, r0
 8003c3c:	fb02 7101 	mla	r1, r2, r1, r7
 8003c40:	0c0f      	lsrs	r7, r1, #16
 8003c42:	0c00      	lsrs	r0, r0, #16
 8003c44:	fb02 7000 	mla	r0, r2, r0, r7
 8003c48:	b289      	uxth	r1, r1
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003c50:	429d      	cmp	r5, r3
 8003c52:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003c56:	f84e 1b04 	str.w	r1, [lr], #4
 8003c5a:	dcec      	bgt.n	8003c36 <__multadd+0x12>
 8003c5c:	b1d7      	cbz	r7, 8003c94 <__multadd+0x70>
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	429d      	cmp	r5, r3
 8003c62:	db12      	blt.n	8003c8a <__multadd+0x66>
 8003c64:	6861      	ldr	r1, [r4, #4]
 8003c66:	4630      	mov	r0, r6
 8003c68:	3101      	adds	r1, #1
 8003c6a:	f7ff ff90 	bl	8003b8e <_Balloc>
 8003c6e:	6922      	ldr	r2, [r4, #16]
 8003c70:	3202      	adds	r2, #2
 8003c72:	f104 010c 	add.w	r1, r4, #12
 8003c76:	4680      	mov	r8, r0
 8003c78:	0092      	lsls	r2, r2, #2
 8003c7a:	300c      	adds	r0, #12
 8003c7c:	f7ff ff7c 	bl	8003b78 <memcpy>
 8003c80:	4621      	mov	r1, r4
 8003c82:	4630      	mov	r0, r6
 8003c84:	f7ff ffb7 	bl	8003bf6 <_Bfree>
 8003c88:	4644      	mov	r4, r8
 8003c8a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c8e:	3501      	adds	r5, #1
 8003c90:	615f      	str	r7, [r3, #20]
 8003c92:	6125      	str	r5, [r4, #16]
 8003c94:	4620      	mov	r0, r4
 8003c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c9a <__hi0bits>:
 8003c9a:	0c02      	lsrs	r2, r0, #16
 8003c9c:	0412      	lsls	r2, r2, #16
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b9b2      	cbnz	r2, 8003cd0 <__hi0bits+0x36>
 8003ca2:	0403      	lsls	r3, r0, #16
 8003ca4:	2010      	movs	r0, #16
 8003ca6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003caa:	bf04      	itt	eq
 8003cac:	021b      	lsleq	r3, r3, #8
 8003cae:	3008      	addeq	r0, #8
 8003cb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003cb4:	bf04      	itt	eq
 8003cb6:	011b      	lsleq	r3, r3, #4
 8003cb8:	3004      	addeq	r0, #4
 8003cba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003cbe:	bf04      	itt	eq
 8003cc0:	009b      	lsleq	r3, r3, #2
 8003cc2:	3002      	addeq	r0, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	db06      	blt.n	8003cd6 <__hi0bits+0x3c>
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	d503      	bpl.n	8003cd4 <__hi0bits+0x3a>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	4770      	bx	lr
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e7e8      	b.n	8003ca6 <__hi0bits+0xc>
 8003cd4:	2020      	movs	r0, #32
 8003cd6:	4770      	bx	lr

08003cd8 <__lo0bits>:
 8003cd8:	6803      	ldr	r3, [r0, #0]
 8003cda:	f013 0207 	ands.w	r2, r3, #7
 8003cde:	4601      	mov	r1, r0
 8003ce0:	d00b      	beq.n	8003cfa <__lo0bits+0x22>
 8003ce2:	07da      	lsls	r2, r3, #31
 8003ce4:	d423      	bmi.n	8003d2e <__lo0bits+0x56>
 8003ce6:	0798      	lsls	r0, r3, #30
 8003ce8:	bf49      	itett	mi
 8003cea:	085b      	lsrmi	r3, r3, #1
 8003cec:	089b      	lsrpl	r3, r3, #2
 8003cee:	2001      	movmi	r0, #1
 8003cf0:	600b      	strmi	r3, [r1, #0]
 8003cf2:	bf5c      	itt	pl
 8003cf4:	600b      	strpl	r3, [r1, #0]
 8003cf6:	2002      	movpl	r0, #2
 8003cf8:	4770      	bx	lr
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	b9a8      	cbnz	r0, 8003d2a <__lo0bits+0x52>
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	2010      	movs	r0, #16
 8003d02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d06:	bf04      	itt	eq
 8003d08:	0a1b      	lsreq	r3, r3, #8
 8003d0a:	3008      	addeq	r0, #8
 8003d0c:	071a      	lsls	r2, r3, #28
 8003d0e:	bf04      	itt	eq
 8003d10:	091b      	lsreq	r3, r3, #4
 8003d12:	3004      	addeq	r0, #4
 8003d14:	079a      	lsls	r2, r3, #30
 8003d16:	bf04      	itt	eq
 8003d18:	089b      	lsreq	r3, r3, #2
 8003d1a:	3002      	addeq	r0, #2
 8003d1c:	07da      	lsls	r2, r3, #31
 8003d1e:	d402      	bmi.n	8003d26 <__lo0bits+0x4e>
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	d006      	beq.n	8003d32 <__lo0bits+0x5a>
 8003d24:	3001      	adds	r0, #1
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	4770      	bx	lr
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	e7e9      	b.n	8003d02 <__lo0bits+0x2a>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4770      	bx	lr
 8003d32:	2020      	movs	r0, #32
 8003d34:	4770      	bx	lr

08003d36 <__i2b>:
 8003d36:	b510      	push	{r4, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	f7ff ff27 	bl	8003b8e <_Balloc>
 8003d40:	2201      	movs	r2, #1
 8003d42:	6144      	str	r4, [r0, #20]
 8003d44:	6102      	str	r2, [r0, #16]
 8003d46:	bd10      	pop	{r4, pc}

08003d48 <__multiply>:
 8003d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	690a      	ldr	r2, [r1, #16]
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	bfb8      	it	lt
 8003d56:	460b      	movlt	r3, r1
 8003d58:	4689      	mov	r9, r1
 8003d5a:	bfbc      	itt	lt
 8003d5c:	46a1      	movlt	r9, r4
 8003d5e:	461c      	movlt	r4, r3
 8003d60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003d64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003d68:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003d6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003d70:	eb07 060a 	add.w	r6, r7, sl
 8003d74:	429e      	cmp	r6, r3
 8003d76:	bfc8      	it	gt
 8003d78:	3101      	addgt	r1, #1
 8003d7a:	f7ff ff08 	bl	8003b8e <_Balloc>
 8003d7e:	f100 0514 	add.w	r5, r0, #20
 8003d82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003d86:	462b      	mov	r3, r5
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4543      	cmp	r3, r8
 8003d8c:	d316      	bcc.n	8003dbc <__multiply+0x74>
 8003d8e:	f104 0214 	add.w	r2, r4, #20
 8003d92:	f109 0114 	add.w	r1, r9, #20
 8003d96:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003d9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	9c01      	ldr	r4, [sp, #4]
 8003da2:	4294      	cmp	r4, r2
 8003da4:	4613      	mov	r3, r2
 8003da6:	d80c      	bhi.n	8003dc2 <__multiply+0x7a>
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	dd03      	ble.n	8003db4 <__multiply+0x6c>
 8003dac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d054      	beq.n	8003e5e <__multiply+0x116>
 8003db4:	6106      	str	r6, [r0, #16]
 8003db6:	b003      	add	sp, #12
 8003db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbc:	f843 2b04 	str.w	r2, [r3], #4
 8003dc0:	e7e3      	b.n	8003d8a <__multiply+0x42>
 8003dc2:	f8b3 a000 	ldrh.w	sl, [r3]
 8003dc6:	3204      	adds	r2, #4
 8003dc8:	f1ba 0f00 	cmp.w	sl, #0
 8003dcc:	d020      	beq.n	8003e10 <__multiply+0xc8>
 8003dce:	46ae      	mov	lr, r5
 8003dd0:	4689      	mov	r9, r1
 8003dd2:	f04f 0c00 	mov.w	ip, #0
 8003dd6:	f859 4b04 	ldr.w	r4, [r9], #4
 8003dda:	f8be b000 	ldrh.w	fp, [lr]
 8003dde:	b2a3      	uxth	r3, r4
 8003de0:	fb0a b303 	mla	r3, sl, r3, fp
 8003de4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003de8:	f8de 4000 	ldr.w	r4, [lr]
 8003dec:	4463      	add	r3, ip
 8003dee:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003df2:	fb0a c40b 	mla	r4, sl, fp, ip
 8003df6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003e00:	454f      	cmp	r7, r9
 8003e02:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003e06:	f84e 3b04 	str.w	r3, [lr], #4
 8003e0a:	d8e4      	bhi.n	8003dd6 <__multiply+0x8e>
 8003e0c:	f8ce c000 	str.w	ip, [lr]
 8003e10:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003e14:	f1b9 0f00 	cmp.w	r9, #0
 8003e18:	d01f      	beq.n	8003e5a <__multiply+0x112>
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	46ae      	mov	lr, r5
 8003e1e:	468c      	mov	ip, r1
 8003e20:	f04f 0a00 	mov.w	sl, #0
 8003e24:	f8bc 4000 	ldrh.w	r4, [ip]
 8003e28:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003e2c:	fb09 b404 	mla	r4, r9, r4, fp
 8003e30:	44a2      	add	sl, r4
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003e38:	f84e 3b04 	str.w	r3, [lr], #4
 8003e3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e40:	f8be 4000 	ldrh.w	r4, [lr]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	fb09 4303 	mla	r3, r9, r3, r4
 8003e4a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003e4e:	4567      	cmp	r7, ip
 8003e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e54:	d8e6      	bhi.n	8003e24 <__multiply+0xdc>
 8003e56:	f8ce 3000 	str.w	r3, [lr]
 8003e5a:	3504      	adds	r5, #4
 8003e5c:	e7a0      	b.n	8003da0 <__multiply+0x58>
 8003e5e:	3e01      	subs	r6, #1
 8003e60:	e7a2      	b.n	8003da8 <__multiply+0x60>
	...

08003e64 <__pow5mult>:
 8003e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e68:	4615      	mov	r5, r2
 8003e6a:	f012 0203 	ands.w	r2, r2, #3
 8003e6e:	4606      	mov	r6, r0
 8003e70:	460f      	mov	r7, r1
 8003e72:	d007      	beq.n	8003e84 <__pow5mult+0x20>
 8003e74:	3a01      	subs	r2, #1
 8003e76:	4c21      	ldr	r4, [pc, #132]	; (8003efc <__pow5mult+0x98>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e7e:	f7ff fed1 	bl	8003c24 <__multadd>
 8003e82:	4607      	mov	r7, r0
 8003e84:	10ad      	asrs	r5, r5, #2
 8003e86:	d035      	beq.n	8003ef4 <__pow5mult+0x90>
 8003e88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e8a:	b93c      	cbnz	r4, 8003e9c <__pow5mult+0x38>
 8003e8c:	2010      	movs	r0, #16
 8003e8e:	f7ff fe6b 	bl	8003b68 <malloc>
 8003e92:	6270      	str	r0, [r6, #36]	; 0x24
 8003e94:	6044      	str	r4, [r0, #4]
 8003e96:	6084      	str	r4, [r0, #8]
 8003e98:	6004      	str	r4, [r0, #0]
 8003e9a:	60c4      	str	r4, [r0, #12]
 8003e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ea4:	b94c      	cbnz	r4, 8003eba <__pow5mult+0x56>
 8003ea6:	f240 2171 	movw	r1, #625	; 0x271
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7ff ff43 	bl	8003d36 <__i2b>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	6003      	str	r3, [r0, #0]
 8003eba:	f04f 0800 	mov.w	r8, #0
 8003ebe:	07eb      	lsls	r3, r5, #31
 8003ec0:	d50a      	bpl.n	8003ed8 <__pow5mult+0x74>
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7ff ff3e 	bl	8003d48 <__multiply>
 8003ecc:	4639      	mov	r1, r7
 8003ece:	4681      	mov	r9, r0
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f7ff fe90 	bl	8003bf6 <_Bfree>
 8003ed6:	464f      	mov	r7, r9
 8003ed8:	106d      	asrs	r5, r5, #1
 8003eda:	d00b      	beq.n	8003ef4 <__pow5mult+0x90>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	b938      	cbnz	r0, 8003ef0 <__pow5mult+0x8c>
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f7ff ff2f 	bl	8003d48 <__multiply>
 8003eea:	6020      	str	r0, [r4, #0]
 8003eec:	f8c0 8000 	str.w	r8, [r0]
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	e7e4      	b.n	8003ebe <__pow5mult+0x5a>
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003efa:	bf00      	nop
 8003efc:	080047d0 	.word	0x080047d0

08003f00 <__lshift>:
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	460c      	mov	r4, r1
 8003f06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f0a:	6923      	ldr	r3, [r4, #16]
 8003f0c:	6849      	ldr	r1, [r1, #4]
 8003f0e:	eb0a 0903 	add.w	r9, sl, r3
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	4607      	mov	r7, r0
 8003f16:	4616      	mov	r6, r2
 8003f18:	f109 0501 	add.w	r5, r9, #1
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	db31      	blt.n	8003f84 <__lshift+0x84>
 8003f20:	4638      	mov	r0, r7
 8003f22:	f7ff fe34 	bl	8003b8e <_Balloc>
 8003f26:	2200      	movs	r2, #0
 8003f28:	4680      	mov	r8, r0
 8003f2a:	f100 0314 	add.w	r3, r0, #20
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4552      	cmp	r2, sl
 8003f32:	db2a      	blt.n	8003f8a <__lshift+0x8a>
 8003f34:	6920      	ldr	r0, [r4, #16]
 8003f36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f3a:	f104 0114 	add.w	r1, r4, #20
 8003f3e:	f016 021f 	ands.w	r2, r6, #31
 8003f42:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003f46:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003f4a:	d022      	beq.n	8003f92 <__lshift+0x92>
 8003f4c:	f1c2 0c20 	rsb	ip, r2, #32
 8003f50:	2000      	movs	r0, #0
 8003f52:	680e      	ldr	r6, [r1, #0]
 8003f54:	4096      	lsls	r6, r2
 8003f56:	4330      	orrs	r0, r6
 8003f58:	f843 0b04 	str.w	r0, [r3], #4
 8003f5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003f60:	458e      	cmp	lr, r1
 8003f62:	fa20 f00c 	lsr.w	r0, r0, ip
 8003f66:	d8f4      	bhi.n	8003f52 <__lshift+0x52>
 8003f68:	6018      	str	r0, [r3, #0]
 8003f6a:	b108      	cbz	r0, 8003f70 <__lshift+0x70>
 8003f6c:	f109 0502 	add.w	r5, r9, #2
 8003f70:	3d01      	subs	r5, #1
 8003f72:	4638      	mov	r0, r7
 8003f74:	f8c8 5010 	str.w	r5, [r8, #16]
 8003f78:	4621      	mov	r1, r4
 8003f7a:	f7ff fe3c 	bl	8003bf6 <_Bfree>
 8003f7e:	4640      	mov	r0, r8
 8003f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f84:	3101      	adds	r1, #1
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	e7c8      	b.n	8003f1c <__lshift+0x1c>
 8003f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f8e:	3201      	adds	r2, #1
 8003f90:	e7ce      	b.n	8003f30 <__lshift+0x30>
 8003f92:	3b04      	subs	r3, #4
 8003f94:	f851 2b04 	ldr.w	r2, [r1], #4
 8003f98:	f843 2f04 	str.w	r2, [r3, #4]!
 8003f9c:	458e      	cmp	lr, r1
 8003f9e:	d8f9      	bhi.n	8003f94 <__lshift+0x94>
 8003fa0:	e7e6      	b.n	8003f70 <__lshift+0x70>

08003fa2 <__mcmp>:
 8003fa2:	6903      	ldr	r3, [r0, #16]
 8003fa4:	690a      	ldr	r2, [r1, #16]
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	b530      	push	{r4, r5, lr}
 8003faa:	d10c      	bne.n	8003fc6 <__mcmp+0x24>
 8003fac:	0092      	lsls	r2, r2, #2
 8003fae:	3014      	adds	r0, #20
 8003fb0:	3114      	adds	r1, #20
 8003fb2:	1884      	adds	r4, r0, r2
 8003fb4:	4411      	add	r1, r2
 8003fb6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003fba:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003fbe:	4295      	cmp	r5, r2
 8003fc0:	d003      	beq.n	8003fca <__mcmp+0x28>
 8003fc2:	d305      	bcc.n	8003fd0 <__mcmp+0x2e>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	bd30      	pop	{r4, r5, pc}
 8003fca:	42a0      	cmp	r0, r4
 8003fcc:	d3f3      	bcc.n	8003fb6 <__mcmp+0x14>
 8003fce:	e7fa      	b.n	8003fc6 <__mcmp+0x24>
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	e7f7      	b.n	8003fc6 <__mcmp+0x24>

08003fd6 <__mdiff>:
 8003fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fda:	460d      	mov	r5, r1
 8003fdc:	4607      	mov	r7, r0
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	f7ff ffdd 	bl	8003fa2 <__mcmp>
 8003fe8:	1e06      	subs	r6, r0, #0
 8003fea:	d108      	bne.n	8003ffe <__mdiff+0x28>
 8003fec:	4631      	mov	r1, r6
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f7ff fdcd 	bl	8003b8e <_Balloc>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	6103      	str	r3, [r0, #16]
 8003ff8:	6146      	str	r6, [r0, #20]
 8003ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffe:	bfa4      	itt	ge
 8004000:	4623      	movge	r3, r4
 8004002:	462c      	movge	r4, r5
 8004004:	4638      	mov	r0, r7
 8004006:	6861      	ldr	r1, [r4, #4]
 8004008:	bfa6      	itte	ge
 800400a:	461d      	movge	r5, r3
 800400c:	2600      	movge	r6, #0
 800400e:	2601      	movlt	r6, #1
 8004010:	f7ff fdbd 	bl	8003b8e <_Balloc>
 8004014:	692b      	ldr	r3, [r5, #16]
 8004016:	60c6      	str	r6, [r0, #12]
 8004018:	6926      	ldr	r6, [r4, #16]
 800401a:	f105 0914 	add.w	r9, r5, #20
 800401e:	f104 0214 	add.w	r2, r4, #20
 8004022:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004026:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800402a:	f100 0514 	add.w	r5, r0, #20
 800402e:	f04f 0c00 	mov.w	ip, #0
 8004032:	f852 ab04 	ldr.w	sl, [r2], #4
 8004036:	f859 4b04 	ldr.w	r4, [r9], #4
 800403a:	fa1c f18a 	uxtah	r1, ip, sl
 800403e:	b2a3      	uxth	r3, r4
 8004040:	1ac9      	subs	r1, r1, r3
 8004042:	0c23      	lsrs	r3, r4, #16
 8004044:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004048:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800404c:	b289      	uxth	r1, r1
 800404e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004052:	45c8      	cmp	r8, r9
 8004054:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004058:	4696      	mov	lr, r2
 800405a:	f845 3b04 	str.w	r3, [r5], #4
 800405e:	d8e8      	bhi.n	8004032 <__mdiff+0x5c>
 8004060:	45be      	cmp	lr, r7
 8004062:	d305      	bcc.n	8004070 <__mdiff+0x9a>
 8004064:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004068:	b18b      	cbz	r3, 800408e <__mdiff+0xb8>
 800406a:	6106      	str	r6, [r0, #16]
 800406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004070:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004074:	fa1c f381 	uxtah	r3, ip, r1
 8004078:	141a      	asrs	r2, r3, #16
 800407a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800407e:	b29b      	uxth	r3, r3
 8004080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004084:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004088:	f845 3b04 	str.w	r3, [r5], #4
 800408c:	e7e8      	b.n	8004060 <__mdiff+0x8a>
 800408e:	3e01      	subs	r6, #1
 8004090:	e7e8      	b.n	8004064 <__mdiff+0x8e>

08004092 <__d2b>:
 8004092:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004096:	460e      	mov	r6, r1
 8004098:	2101      	movs	r1, #1
 800409a:	ec59 8b10 	vmov	r8, r9, d0
 800409e:	4615      	mov	r5, r2
 80040a0:	f7ff fd75 	bl	8003b8e <_Balloc>
 80040a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80040a8:	4607      	mov	r7, r0
 80040aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040ae:	bb34      	cbnz	r4, 80040fe <__d2b+0x6c>
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	f1b8 0f00 	cmp.w	r8, #0
 80040b6:	d027      	beq.n	8004108 <__d2b+0x76>
 80040b8:	a802      	add	r0, sp, #8
 80040ba:	f840 8d08 	str.w	r8, [r0, #-8]!
 80040be:	f7ff fe0b 	bl	8003cd8 <__lo0bits>
 80040c2:	9900      	ldr	r1, [sp, #0]
 80040c4:	b1f0      	cbz	r0, 8004104 <__d2b+0x72>
 80040c6:	9a01      	ldr	r2, [sp, #4]
 80040c8:	f1c0 0320 	rsb	r3, r0, #32
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	430b      	orrs	r3, r1
 80040d2:	40c2      	lsrs	r2, r0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	9201      	str	r2, [sp, #4]
 80040d8:	9b01      	ldr	r3, [sp, #4]
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf14      	ite	ne
 80040e0:	2102      	movne	r1, #2
 80040e2:	2101      	moveq	r1, #1
 80040e4:	6139      	str	r1, [r7, #16]
 80040e6:	b1c4      	cbz	r4, 800411a <__d2b+0x88>
 80040e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80040ec:	4404      	add	r4, r0
 80040ee:	6034      	str	r4, [r6, #0]
 80040f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80040f4:	6028      	str	r0, [r5, #0]
 80040f6:	4638      	mov	r0, r7
 80040f8:	b003      	add	sp, #12
 80040fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	e7d5      	b.n	80040b0 <__d2b+0x1e>
 8004104:	6179      	str	r1, [r7, #20]
 8004106:	e7e7      	b.n	80040d8 <__d2b+0x46>
 8004108:	a801      	add	r0, sp, #4
 800410a:	f7ff fde5 	bl	8003cd8 <__lo0bits>
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	2101      	movs	r1, #1
 8004114:	6139      	str	r1, [r7, #16]
 8004116:	3020      	adds	r0, #32
 8004118:	e7e5      	b.n	80040e6 <__d2b+0x54>
 800411a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800411e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004122:	6030      	str	r0, [r6, #0]
 8004124:	6918      	ldr	r0, [r3, #16]
 8004126:	f7ff fdb8 	bl	8003c9a <__hi0bits>
 800412a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800412e:	e7e1      	b.n	80040f4 <__d2b+0x62>

08004130 <_calloc_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	fb02 f401 	mul.w	r4, r2, r1
 8004136:	4621      	mov	r1, r4
 8004138:	f000 f856 	bl	80041e8 <_malloc_r>
 800413c:	4605      	mov	r5, r0
 800413e:	b118      	cbz	r0, 8004148 <_calloc_r+0x18>
 8004140:	4622      	mov	r2, r4
 8004142:	2100      	movs	r1, #0
 8004144:	f7fe fa08 	bl	8002558 <memset>
 8004148:	4628      	mov	r0, r5
 800414a:	bd38      	pop	{r3, r4, r5, pc}

0800414c <_free_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4605      	mov	r5, r0
 8004150:	2900      	cmp	r1, #0
 8004152:	d045      	beq.n	80041e0 <_free_r+0x94>
 8004154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004158:	1f0c      	subs	r4, r1, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfb8      	it	lt
 800415e:	18e4      	addlt	r4, r4, r3
 8004160:	f000 fa2c 	bl	80045bc <__malloc_lock>
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <_free_r+0x98>)
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	4610      	mov	r0, r2
 800416a:	b933      	cbnz	r3, 800417a <_free_r+0x2e>
 800416c:	6063      	str	r3, [r4, #4]
 800416e:	6014      	str	r4, [r2, #0]
 8004170:	4628      	mov	r0, r5
 8004172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004176:	f000 ba22 	b.w	80045be <__malloc_unlock>
 800417a:	42a3      	cmp	r3, r4
 800417c:	d90c      	bls.n	8004198 <_free_r+0x4c>
 800417e:	6821      	ldr	r1, [r4, #0]
 8004180:	1862      	adds	r2, r4, r1
 8004182:	4293      	cmp	r3, r2
 8004184:	bf04      	itt	eq
 8004186:	681a      	ldreq	r2, [r3, #0]
 8004188:	685b      	ldreq	r3, [r3, #4]
 800418a:	6063      	str	r3, [r4, #4]
 800418c:	bf04      	itt	eq
 800418e:	1852      	addeq	r2, r2, r1
 8004190:	6022      	streq	r2, [r4, #0]
 8004192:	6004      	str	r4, [r0, #0]
 8004194:	e7ec      	b.n	8004170 <_free_r+0x24>
 8004196:	4613      	mov	r3, r2
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	b10a      	cbz	r2, 80041a0 <_free_r+0x54>
 800419c:	42a2      	cmp	r2, r4
 800419e:	d9fa      	bls.n	8004196 <_free_r+0x4a>
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	1858      	adds	r0, r3, r1
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d10b      	bne.n	80041c0 <_free_r+0x74>
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	4401      	add	r1, r0
 80041ac:	1858      	adds	r0, r3, r1
 80041ae:	4282      	cmp	r2, r0
 80041b0:	6019      	str	r1, [r3, #0]
 80041b2:	d1dd      	bne.n	8004170 <_free_r+0x24>
 80041b4:	6810      	ldr	r0, [r2, #0]
 80041b6:	6852      	ldr	r2, [r2, #4]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	4401      	add	r1, r0
 80041bc:	6019      	str	r1, [r3, #0]
 80041be:	e7d7      	b.n	8004170 <_free_r+0x24>
 80041c0:	d902      	bls.n	80041c8 <_free_r+0x7c>
 80041c2:	230c      	movs	r3, #12
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	e7d3      	b.n	8004170 <_free_r+0x24>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428a      	cmp	r2, r1
 80041ce:	bf04      	itt	eq
 80041d0:	6811      	ldreq	r1, [r2, #0]
 80041d2:	6852      	ldreq	r2, [r2, #4]
 80041d4:	6062      	str	r2, [r4, #4]
 80041d6:	bf04      	itt	eq
 80041d8:	1809      	addeq	r1, r1, r0
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	605c      	str	r4, [r3, #4]
 80041de:	e7c7      	b.n	8004170 <_free_r+0x24>
 80041e0:	bd38      	pop	{r3, r4, r5, pc}
 80041e2:	bf00      	nop
 80041e4:	2000021c 	.word	0x2000021c

080041e8 <_malloc_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	1ccd      	adds	r5, r1, #3
 80041ec:	f025 0503 	bic.w	r5, r5, #3
 80041f0:	3508      	adds	r5, #8
 80041f2:	2d0c      	cmp	r5, #12
 80041f4:	bf38      	it	cc
 80041f6:	250c      	movcc	r5, #12
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	4606      	mov	r6, r0
 80041fc:	db01      	blt.n	8004202 <_malloc_r+0x1a>
 80041fe:	42a9      	cmp	r1, r5
 8004200:	d903      	bls.n	800420a <_malloc_r+0x22>
 8004202:	230c      	movs	r3, #12
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	2000      	movs	r0, #0
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	f000 f9d7 	bl	80045bc <__malloc_lock>
 800420e:	4a23      	ldr	r2, [pc, #140]	; (800429c <_malloc_r+0xb4>)
 8004210:	6814      	ldr	r4, [r2, #0]
 8004212:	4621      	mov	r1, r4
 8004214:	b991      	cbnz	r1, 800423c <_malloc_r+0x54>
 8004216:	4c22      	ldr	r4, [pc, #136]	; (80042a0 <_malloc_r+0xb8>)
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b91b      	cbnz	r3, 8004224 <_malloc_r+0x3c>
 800421c:	4630      	mov	r0, r6
 800421e:	f000 f991 	bl	8004544 <_sbrk_r>
 8004222:	6020      	str	r0, [r4, #0]
 8004224:	4629      	mov	r1, r5
 8004226:	4630      	mov	r0, r6
 8004228:	f000 f98c 	bl	8004544 <_sbrk_r>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d126      	bne.n	800427e <_malloc_r+0x96>
 8004230:	230c      	movs	r3, #12
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	4630      	mov	r0, r6
 8004236:	f000 f9c2 	bl	80045be <__malloc_unlock>
 800423a:	e7e4      	b.n	8004206 <_malloc_r+0x1e>
 800423c:	680b      	ldr	r3, [r1, #0]
 800423e:	1b5b      	subs	r3, r3, r5
 8004240:	d41a      	bmi.n	8004278 <_malloc_r+0x90>
 8004242:	2b0b      	cmp	r3, #11
 8004244:	d90f      	bls.n	8004266 <_malloc_r+0x7e>
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	50cd      	str	r5, [r1, r3]
 800424a:	18cc      	adds	r4, r1, r3
 800424c:	4630      	mov	r0, r6
 800424e:	f000 f9b6 	bl	80045be <__malloc_unlock>
 8004252:	f104 000b 	add.w	r0, r4, #11
 8004256:	1d23      	adds	r3, r4, #4
 8004258:	f020 0007 	bic.w	r0, r0, #7
 800425c:	1ac3      	subs	r3, r0, r3
 800425e:	d01b      	beq.n	8004298 <_malloc_r+0xb0>
 8004260:	425a      	negs	r2, r3
 8004262:	50e2      	str	r2, [r4, r3]
 8004264:	bd70      	pop	{r4, r5, r6, pc}
 8004266:	428c      	cmp	r4, r1
 8004268:	bf0d      	iteet	eq
 800426a:	6863      	ldreq	r3, [r4, #4]
 800426c:	684b      	ldrne	r3, [r1, #4]
 800426e:	6063      	strne	r3, [r4, #4]
 8004270:	6013      	streq	r3, [r2, #0]
 8004272:	bf18      	it	ne
 8004274:	460c      	movne	r4, r1
 8004276:	e7e9      	b.n	800424c <_malloc_r+0x64>
 8004278:	460c      	mov	r4, r1
 800427a:	6849      	ldr	r1, [r1, #4]
 800427c:	e7ca      	b.n	8004214 <_malloc_r+0x2c>
 800427e:	1cc4      	adds	r4, r0, #3
 8004280:	f024 0403 	bic.w	r4, r4, #3
 8004284:	42a0      	cmp	r0, r4
 8004286:	d005      	beq.n	8004294 <_malloc_r+0xac>
 8004288:	1a21      	subs	r1, r4, r0
 800428a:	4630      	mov	r0, r6
 800428c:	f000 f95a 	bl	8004544 <_sbrk_r>
 8004290:	3001      	adds	r0, #1
 8004292:	d0cd      	beq.n	8004230 <_malloc_r+0x48>
 8004294:	6025      	str	r5, [r4, #0]
 8004296:	e7d9      	b.n	800424c <_malloc_r+0x64>
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	bf00      	nop
 800429c:	2000021c 	.word	0x2000021c
 80042a0:	20000220 	.word	0x20000220

080042a4 <__ssputs_r>:
 80042a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	688e      	ldr	r6, [r1, #8]
 80042aa:	429e      	cmp	r6, r3
 80042ac:	4682      	mov	sl, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4691      	mov	r9, r2
 80042b2:	4698      	mov	r8, r3
 80042b4:	d835      	bhi.n	8004322 <__ssputs_r+0x7e>
 80042b6:	898a      	ldrh	r2, [r1, #12]
 80042b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042bc:	d031      	beq.n	8004322 <__ssputs_r+0x7e>
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	6909      	ldr	r1, [r1, #16]
 80042c2:	1a6f      	subs	r7, r5, r1
 80042c4:	6965      	ldr	r5, [r4, #20]
 80042c6:	2302      	movs	r3, #2
 80042c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80042d0:	f108 0301 	add.w	r3, r8, #1
 80042d4:	443b      	add	r3, r7
 80042d6:	429d      	cmp	r5, r3
 80042d8:	bf38      	it	cc
 80042da:	461d      	movcc	r5, r3
 80042dc:	0553      	lsls	r3, r2, #21
 80042de:	d531      	bpl.n	8004344 <__ssputs_r+0xa0>
 80042e0:	4629      	mov	r1, r5
 80042e2:	f7ff ff81 	bl	80041e8 <_malloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	b950      	cbnz	r0, 8004300 <__ssputs_r+0x5c>
 80042ea:	230c      	movs	r3, #12
 80042ec:	f8ca 3000 	str.w	r3, [sl]
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	463a      	mov	r2, r7
 8004302:	6921      	ldr	r1, [r4, #16]
 8004304:	f7ff fc38 	bl	8003b78 <memcpy>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	6126      	str	r6, [r4, #16]
 8004316:	6165      	str	r5, [r4, #20]
 8004318:	443e      	add	r6, r7
 800431a:	1bed      	subs	r5, r5, r7
 800431c:	6026      	str	r6, [r4, #0]
 800431e:	60a5      	str	r5, [r4, #8]
 8004320:	4646      	mov	r6, r8
 8004322:	4546      	cmp	r6, r8
 8004324:	bf28      	it	cs
 8004326:	4646      	movcs	r6, r8
 8004328:	4632      	mov	r2, r6
 800432a:	4649      	mov	r1, r9
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	f000 f92b 	bl	8004588 <memmove>
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	1b9b      	subs	r3, r3, r6
 8004336:	60a3      	str	r3, [r4, #8]
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	441e      	add	r6, r3
 800433c:	6026      	str	r6, [r4, #0]
 800433e:	2000      	movs	r0, #0
 8004340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004344:	462a      	mov	r2, r5
 8004346:	f000 f93b 	bl	80045c0 <_realloc_r>
 800434a:	4606      	mov	r6, r0
 800434c:	2800      	cmp	r0, #0
 800434e:	d1e1      	bne.n	8004314 <__ssputs_r+0x70>
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	4650      	mov	r0, sl
 8004354:	f7ff fefa 	bl	800414c <_free_r>
 8004358:	e7c7      	b.n	80042ea <__ssputs_r+0x46>
	...

0800435c <_svfiprintf_r>:
 800435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004360:	b09d      	sub	sp, #116	; 0x74
 8004362:	4680      	mov	r8, r0
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	898b      	ldrh	r3, [r1, #12]
 8004368:	061c      	lsls	r4, r3, #24
 800436a:	460d      	mov	r5, r1
 800436c:	4616      	mov	r6, r2
 800436e:	d50f      	bpl.n	8004390 <_svfiprintf_r+0x34>
 8004370:	690b      	ldr	r3, [r1, #16]
 8004372:	b96b      	cbnz	r3, 8004390 <_svfiprintf_r+0x34>
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	f7ff ff37 	bl	80041e8 <_malloc_r>
 800437a:	6028      	str	r0, [r5, #0]
 800437c:	6128      	str	r0, [r5, #16]
 800437e:	b928      	cbnz	r0, 800438c <_svfiprintf_r+0x30>
 8004380:	230c      	movs	r3, #12
 8004382:	f8c8 3000 	str.w	r3, [r8]
 8004386:	f04f 30ff 	mov.w	r0, #4294967295
 800438a:	e0c5      	b.n	8004518 <_svfiprintf_r+0x1bc>
 800438c:	2340      	movs	r3, #64	; 0x40
 800438e:	616b      	str	r3, [r5, #20]
 8004390:	2300      	movs	r3, #0
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	2320      	movs	r3, #32
 8004396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800439a:	2330      	movs	r3, #48	; 0x30
 800439c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a0:	f04f 0b01 	mov.w	fp, #1
 80043a4:	4637      	mov	r7, r6
 80043a6:	463c      	mov	r4, r7
 80043a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d13c      	bne.n	800442a <_svfiprintf_r+0xce>
 80043b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80043b4:	d00b      	beq.n	80043ce <_svfiprintf_r+0x72>
 80043b6:	4653      	mov	r3, sl
 80043b8:	4632      	mov	r2, r6
 80043ba:	4629      	mov	r1, r5
 80043bc:	4640      	mov	r0, r8
 80043be:	f7ff ff71 	bl	80042a4 <__ssputs_r>
 80043c2:	3001      	adds	r0, #1
 80043c4:	f000 80a3 	beq.w	800450e <_svfiprintf_r+0x1b2>
 80043c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ca:	4453      	add	r3, sl
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
 80043ce:	783b      	ldrb	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 809c 	beq.w	800450e <_svfiprintf_r+0x1b2>
 80043d6:	2300      	movs	r3, #0
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	9307      	str	r3, [sp, #28]
 80043e0:	9205      	str	r2, [sp, #20]
 80043e2:	9306      	str	r3, [sp, #24]
 80043e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e8:	931a      	str	r3, [sp, #104]	; 0x68
 80043ea:	2205      	movs	r2, #5
 80043ec:	7821      	ldrb	r1, [r4, #0]
 80043ee:	4850      	ldr	r0, [pc, #320]	; (8004530 <_svfiprintf_r+0x1d4>)
 80043f0:	f7fb fefe 	bl	80001f0 <memchr>
 80043f4:	1c67      	adds	r7, r4, #1
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	b9d8      	cbnz	r0, 8004432 <_svfiprintf_r+0xd6>
 80043fa:	06d9      	lsls	r1, r3, #27
 80043fc:	bf44      	itt	mi
 80043fe:	2220      	movmi	r2, #32
 8004400:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004404:	071a      	lsls	r2, r3, #28
 8004406:	bf44      	itt	mi
 8004408:	222b      	movmi	r2, #43	; 0x2b
 800440a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800440e:	7822      	ldrb	r2, [r4, #0]
 8004410:	2a2a      	cmp	r2, #42	; 0x2a
 8004412:	d016      	beq.n	8004442 <_svfiprintf_r+0xe6>
 8004414:	9a07      	ldr	r2, [sp, #28]
 8004416:	2100      	movs	r1, #0
 8004418:	200a      	movs	r0, #10
 800441a:	4627      	mov	r7, r4
 800441c:	3401      	adds	r4, #1
 800441e:	783b      	ldrb	r3, [r7, #0]
 8004420:	3b30      	subs	r3, #48	; 0x30
 8004422:	2b09      	cmp	r3, #9
 8004424:	d951      	bls.n	80044ca <_svfiprintf_r+0x16e>
 8004426:	b1c9      	cbz	r1, 800445c <_svfiprintf_r+0x100>
 8004428:	e011      	b.n	800444e <_svfiprintf_r+0xf2>
 800442a:	2b25      	cmp	r3, #37	; 0x25
 800442c:	d0c0      	beq.n	80043b0 <_svfiprintf_r+0x54>
 800442e:	4627      	mov	r7, r4
 8004430:	e7b9      	b.n	80043a6 <_svfiprintf_r+0x4a>
 8004432:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <_svfiprintf_r+0x1d4>)
 8004434:	1a80      	subs	r0, r0, r2
 8004436:	fa0b f000 	lsl.w	r0, fp, r0
 800443a:	4318      	orrs	r0, r3
 800443c:	9004      	str	r0, [sp, #16]
 800443e:	463c      	mov	r4, r7
 8004440:	e7d3      	b.n	80043ea <_svfiprintf_r+0x8e>
 8004442:	9a03      	ldr	r2, [sp, #12]
 8004444:	1d11      	adds	r1, r2, #4
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	9103      	str	r1, [sp, #12]
 800444a:	2a00      	cmp	r2, #0
 800444c:	db01      	blt.n	8004452 <_svfiprintf_r+0xf6>
 800444e:	9207      	str	r2, [sp, #28]
 8004450:	e004      	b.n	800445c <_svfiprintf_r+0x100>
 8004452:	4252      	negs	r2, r2
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	9207      	str	r2, [sp, #28]
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	783b      	ldrb	r3, [r7, #0]
 800445e:	2b2e      	cmp	r3, #46	; 0x2e
 8004460:	d10e      	bne.n	8004480 <_svfiprintf_r+0x124>
 8004462:	787b      	ldrb	r3, [r7, #1]
 8004464:	2b2a      	cmp	r3, #42	; 0x2a
 8004466:	f107 0101 	add.w	r1, r7, #1
 800446a:	d132      	bne.n	80044d2 <_svfiprintf_r+0x176>
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	9203      	str	r2, [sp, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	bfb8      	it	lt
 8004478:	f04f 33ff 	movlt.w	r3, #4294967295
 800447c:	3702      	adds	r7, #2
 800447e:	9305      	str	r3, [sp, #20]
 8004480:	4c2c      	ldr	r4, [pc, #176]	; (8004534 <_svfiprintf_r+0x1d8>)
 8004482:	7839      	ldrb	r1, [r7, #0]
 8004484:	2203      	movs	r2, #3
 8004486:	4620      	mov	r0, r4
 8004488:	f7fb feb2 	bl	80001f0 <memchr>
 800448c:	b138      	cbz	r0, 800449e <_svfiprintf_r+0x142>
 800448e:	2340      	movs	r3, #64	; 0x40
 8004490:	1b00      	subs	r0, r0, r4
 8004492:	fa03 f000 	lsl.w	r0, r3, r0
 8004496:	9b04      	ldr	r3, [sp, #16]
 8004498:	4303      	orrs	r3, r0
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	3701      	adds	r7, #1
 800449e:	7839      	ldrb	r1, [r7, #0]
 80044a0:	4825      	ldr	r0, [pc, #148]	; (8004538 <_svfiprintf_r+0x1dc>)
 80044a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044a6:	2206      	movs	r2, #6
 80044a8:	1c7e      	adds	r6, r7, #1
 80044aa:	f7fb fea1 	bl	80001f0 <memchr>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d035      	beq.n	800451e <_svfiprintf_r+0x1c2>
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <_svfiprintf_r+0x1e0>)
 80044b4:	b9fb      	cbnz	r3, 80044f6 <_svfiprintf_r+0x19a>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	3307      	adds	r3, #7
 80044ba:	f023 0307 	bic.w	r3, r3, #7
 80044be:	3308      	adds	r3, #8
 80044c0:	9303      	str	r3, [sp, #12]
 80044c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c4:	444b      	add	r3, r9
 80044c6:	9309      	str	r3, [sp, #36]	; 0x24
 80044c8:	e76c      	b.n	80043a4 <_svfiprintf_r+0x48>
 80044ca:	fb00 3202 	mla	r2, r0, r2, r3
 80044ce:	2101      	movs	r1, #1
 80044d0:	e7a3      	b.n	800441a <_svfiprintf_r+0xbe>
 80044d2:	2300      	movs	r3, #0
 80044d4:	9305      	str	r3, [sp, #20]
 80044d6:	4618      	mov	r0, r3
 80044d8:	240a      	movs	r4, #10
 80044da:	460f      	mov	r7, r1
 80044dc:	3101      	adds	r1, #1
 80044de:	783a      	ldrb	r2, [r7, #0]
 80044e0:	3a30      	subs	r2, #48	; 0x30
 80044e2:	2a09      	cmp	r2, #9
 80044e4:	d903      	bls.n	80044ee <_svfiprintf_r+0x192>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ca      	beq.n	8004480 <_svfiprintf_r+0x124>
 80044ea:	9005      	str	r0, [sp, #20]
 80044ec:	e7c8      	b.n	8004480 <_svfiprintf_r+0x124>
 80044ee:	fb04 2000 	mla	r0, r4, r0, r2
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7f1      	b.n	80044da <_svfiprintf_r+0x17e>
 80044f6:	ab03      	add	r3, sp, #12
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	462a      	mov	r2, r5
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <_svfiprintf_r+0x1e4>)
 80044fe:	a904      	add	r1, sp, #16
 8004500:	4640      	mov	r0, r8
 8004502:	f7fe f8c7 	bl	8002694 <_printf_float>
 8004506:	f1b0 3fff 	cmp.w	r0, #4294967295
 800450a:	4681      	mov	r9, r0
 800450c:	d1d9      	bne.n	80044c2 <_svfiprintf_r+0x166>
 800450e:	89ab      	ldrh	r3, [r5, #12]
 8004510:	065b      	lsls	r3, r3, #25
 8004512:	f53f af38 	bmi.w	8004386 <_svfiprintf_r+0x2a>
 8004516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004518:	b01d      	add	sp, #116	; 0x74
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	ab03      	add	r3, sp, #12
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	462a      	mov	r2, r5
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <_svfiprintf_r+0x1e4>)
 8004526:	a904      	add	r1, sp, #16
 8004528:	4640      	mov	r0, r8
 800452a:	f7fe fb69 	bl	8002c00 <_printf_i>
 800452e:	e7ea      	b.n	8004506 <_svfiprintf_r+0x1aa>
 8004530:	080047dc 	.word	0x080047dc
 8004534:	080047e2 	.word	0x080047e2
 8004538:	080047e6 	.word	0x080047e6
 800453c:	08002695 	.word	0x08002695
 8004540:	080042a5 	.word	0x080042a5

08004544 <_sbrk_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4c06      	ldr	r4, [pc, #24]	; (8004560 <_sbrk_r+0x1c>)
 8004548:	2300      	movs	r3, #0
 800454a:	4605      	mov	r5, r0
 800454c:	4608      	mov	r0, r1
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	f7fd ff86 	bl	8002460 <_sbrk>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_sbrk_r+0x1a>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	b103      	cbz	r3, 800455e <_sbrk_r+0x1a>
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000308 	.word	0x20000308

08004564 <__ascii_mbtowc>:
 8004564:	b082      	sub	sp, #8
 8004566:	b901      	cbnz	r1, 800456a <__ascii_mbtowc+0x6>
 8004568:	a901      	add	r1, sp, #4
 800456a:	b142      	cbz	r2, 800457e <__ascii_mbtowc+0x1a>
 800456c:	b14b      	cbz	r3, 8004582 <__ascii_mbtowc+0x1e>
 800456e:	7813      	ldrb	r3, [r2, #0]
 8004570:	600b      	str	r3, [r1, #0]
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	1c10      	adds	r0, r2, #0
 8004576:	bf18      	it	ne
 8004578:	2001      	movne	r0, #1
 800457a:	b002      	add	sp, #8
 800457c:	4770      	bx	lr
 800457e:	4610      	mov	r0, r2
 8004580:	e7fb      	b.n	800457a <__ascii_mbtowc+0x16>
 8004582:	f06f 0001 	mvn.w	r0, #1
 8004586:	e7f8      	b.n	800457a <__ascii_mbtowc+0x16>

08004588 <memmove>:
 8004588:	4288      	cmp	r0, r1
 800458a:	b510      	push	{r4, lr}
 800458c:	eb01 0302 	add.w	r3, r1, r2
 8004590:	d803      	bhi.n	800459a <memmove+0x12>
 8004592:	1e42      	subs	r2, r0, #1
 8004594:	4299      	cmp	r1, r3
 8004596:	d10c      	bne.n	80045b2 <memmove+0x2a>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	4298      	cmp	r0, r3
 800459c:	d2f9      	bcs.n	8004592 <memmove+0xa>
 800459e:	1881      	adds	r1, r0, r2
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	42d3      	cmn	r3, r2
 80045a4:	d100      	bne.n	80045a8 <memmove+0x20>
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045b0:	e7f7      	b.n	80045a2 <memmove+0x1a>
 80045b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045ba:	e7eb      	b.n	8004594 <memmove+0xc>

080045bc <__malloc_lock>:
 80045bc:	4770      	bx	lr

080045be <__malloc_unlock>:
 80045be:	4770      	bx	lr

080045c0 <_realloc_r>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	4607      	mov	r7, r0
 80045c4:	4614      	mov	r4, r2
 80045c6:	460e      	mov	r6, r1
 80045c8:	b921      	cbnz	r1, 80045d4 <_realloc_r+0x14>
 80045ca:	4611      	mov	r1, r2
 80045cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045d0:	f7ff be0a 	b.w	80041e8 <_malloc_r>
 80045d4:	b922      	cbnz	r2, 80045e0 <_realloc_r+0x20>
 80045d6:	f7ff fdb9 	bl	800414c <_free_r>
 80045da:	4625      	mov	r5, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e0:	f000 f821 	bl	8004626 <_malloc_usable_size_r>
 80045e4:	4284      	cmp	r4, r0
 80045e6:	d90f      	bls.n	8004608 <_realloc_r+0x48>
 80045e8:	4621      	mov	r1, r4
 80045ea:	4638      	mov	r0, r7
 80045ec:	f7ff fdfc 	bl	80041e8 <_malloc_r>
 80045f0:	4605      	mov	r5, r0
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d0f2      	beq.n	80045dc <_realloc_r+0x1c>
 80045f6:	4631      	mov	r1, r6
 80045f8:	4622      	mov	r2, r4
 80045fa:	f7ff fabd 	bl	8003b78 <memcpy>
 80045fe:	4631      	mov	r1, r6
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff fda3 	bl	800414c <_free_r>
 8004606:	e7e9      	b.n	80045dc <_realloc_r+0x1c>
 8004608:	4635      	mov	r5, r6
 800460a:	e7e7      	b.n	80045dc <_realloc_r+0x1c>

0800460c <__ascii_wctomb>:
 800460c:	b149      	cbz	r1, 8004622 <__ascii_wctomb+0x16>
 800460e:	2aff      	cmp	r2, #255	; 0xff
 8004610:	bf85      	ittet	hi
 8004612:	238a      	movhi	r3, #138	; 0x8a
 8004614:	6003      	strhi	r3, [r0, #0]
 8004616:	700a      	strbls	r2, [r1, #0]
 8004618:	f04f 30ff 	movhi.w	r0, #4294967295
 800461c:	bf98      	it	ls
 800461e:	2001      	movls	r0, #1
 8004620:	4770      	bx	lr
 8004622:	4608      	mov	r0, r1
 8004624:	4770      	bx	lr

08004626 <_malloc_usable_size_r>:
 8004626:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800462a:	2800      	cmp	r0, #0
 800462c:	f1a0 0004 	sub.w	r0, r0, #4
 8004630:	bfbc      	itt	lt
 8004632:	580b      	ldrlt	r3, [r1, r0]
 8004634:	18c0      	addlt	r0, r0, r3
 8004636:	4770      	bx	lr

08004638 <_init>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr

08004644 <_fini>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr
